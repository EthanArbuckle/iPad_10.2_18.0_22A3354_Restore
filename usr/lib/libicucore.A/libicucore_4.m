uint64_t unumrf_resultGetIdentityResult(uint64_t a1, int *a2)
{
  int v3;

  if (*a2 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) == 1178881536)
        return *(unsigned int *)(a1 + 496);
      v3 = 3;
    }
    else
    {
      v3 = 1;
    }
    *a2 = v3;
  }
  return 3;
}

uint64_t unumrf_resultGetFirstDecimalNumber(uint64_t a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v4;
  icu::number::impl::DecNum *v9;
  int v10;
  _QWORD v12[2];
  void *v13[8];
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  if (!a1)
  {
    v10 = 1;
LABEL_11:
    v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (*(_DWORD *)(a1 + 16) != 1178881536)
  {
    v10 = 3;
    goto LABEL_11;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  v9 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(a1 + 352), (icu::number::impl::DecNum *)v14, a4);
  memset(&v13[1], 0, 56);
  v12[1] = 0;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  v12[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v13);
  icu::number::impl::DecNum::toString(v9, (icu::ByteSink *)v12, a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
  v4 = icu::CharString::extract((char **)v13, a2, a3, a4);
  if (BYTE4(v13[1]))
    uprv_free(v13[0]);
  if (BYTE4(v14[1]))
    uprv_free(v14[0]);
  return v4;
}

uint64_t unumrf_resultGetSecondDecimalNumber(uint64_t a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v4;
  icu::number::impl::DecNum *v9;
  int v10;
  _QWORD v12[2];
  void *v13[8];
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  if (!a1)
  {
    v10 = 1;
LABEL_11:
    v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (*(_DWORD *)(a1 + 16) != 1178881536)
  {
    v10 = 3;
    goto LABEL_11;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  v9 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(a1 + 424), (icu::number::impl::DecNum *)v14, a4);
  memset(&v13[1], 0, 56);
  v12[1] = 0;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  v12[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v13);
  icu::number::impl::DecNum::toString(v9, (icu::ByteSink *)v12, a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
  v4 = icu::CharString::extract((char **)v13, a2, a3, a4);
  if (BYTE4(v13[1]))
    uprv_free(v13[0]);
  if (BYTE4(v14[1]))
    uprv_free(v14[0]);
  return v4;
}

void unumrf_close(_DWORD *a1)
{
  if (a1)
  {
    if (*a1 == 1314014720)
    {
      icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)(a1 + 2));
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

uint64_t sub_18BD37BA0(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl(a1, 0);
  *v2 = off_1E22633C0;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(v2 + 38));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(a1 + 376));
  *(_DWORD *)(a1 + 448) = 3;
  return a1;
}

uint64_t sub_18BD37BF0(uint64_t a1)
{
  sub_18BCC1E68(a1 + 8);
  sub_18BCC1E68(a1 + 488);
  *(_BYTE *)(a1 + 968) = 1;
  *(_QWORD *)(a1 + 972) = 0x200000000;
  icu::Locale::Locale((icu::Locale *)(a1 + 984));
  return a1;
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterBoth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterFirst@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::numberFormatterSecond@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::collapse@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::identityFallback@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  result = icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

uint64_t *icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::clone@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result)
    result = (uint64_t *)icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)result, a1);
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result)
    result = (uint64_t *)icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter((uint64_t)result, a1);
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberRangeFormatterSettings<icu::number::UnlocalizedNumberRangeFormatter>::copyErrorTo(uint64_t a1, int *a2)
{
  if (*a2 > 0)
    return 1;
  sub_18BD38334(a1, a2);
  return *a2 > 0;
}

BOOL sub_18BD38334(uint64_t a1, int *a2)
{
  if (*a2 > 0)
    return 1;
  sub_18BD128A4(a1 + 8, a2);
  if (*a2 > 0)
    return 1;
  sub_18BD128A4(a1 + 488, a2);
  return *a2 > 0;
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 1;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterFirst@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 8), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterSecond@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

{
  bzero(a3, 0x4C0uLL);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  icu::number::UnlocalizedNumberFormatter::operator=((uint64_t)(a3 + 488), a2);
  a3[968] = 0;
  icu::Locale::operator=((icu::Locale *)(a3 + 256), (uint64_t)(a3 + 984));
  return icu::Locale::operator=((icu::Locale *)(a3 + 736), (uint64_t)(a3 + 984));
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::collapse@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[243] = a2;
  return result;
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::identityFallback@<X0>(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

{
  uint64_t result;

  bzero(a3, 0x4C0uLL);
  result = icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)a3, a1);
  a3[244] = a2;
  return result;
}

uint64_t *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::clone@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result)
    result = (uint64_t *)icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)result, a1);
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x4C0, a2);
  if (result)
    result = (uint64_t *)icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter((uint64_t)result, a1);
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::copyErrorTo(uint64_t a1, int *a2)
{
  if (*a2 > 0)
    return 1;
  sub_18BD38334(a1, a2);
  return *a2 > 0;
}

uint64_t icu::number::NumberRangeFormatter::with@<X0>(void *a1@<X8>)
{
  bzero(a1, 0x4C0uLL);
  return sub_18BD37BF0((uint64_t)a1);
}

void **icu::number::NumberRangeFormatter::withLocale@<X0>(icu::number::NumberRangeFormatter *this@<X0>, uint64_t a2@<X8>)
{
  void *v6[153];

  v6[152] = *(void **)MEMORY[0x1E0C80C00];
  bzero(v6, 0x4C0uLL);
  sub_18BD37BF0((uint64_t)v6);
  icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a2, (uint64_t)v6, (uint64_t)this);
  return sub_18BD393E4(v6);
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::locale@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a3, a1, a2);
}

{
  return icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(a3, a1, a2);
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::UnlocalizedNumberRangeFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((icu::number::UnlocalizedNumberFormatter *)(a1 + 8), (const icu::number::UnlocalizedNumberFormatter *)(a2 + 8));
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((icu::number::UnlocalizedNumberFormatter *)(a1 + 488), (const icu::number::UnlocalizedNumberFormatter *)(a2 + 488));
  v4 = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = v4;
  icu::Locale::Locale((icu::Locale *)(a1 + 984), a2 + 984);
  return a1;
}

{
  uint64_t v4;

  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 488, a2 + 488);
  v4 = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = v4;
  icu::Locale::Locale(a1 + 984, a2 + 984);
  return a1;
}

uint64_t icu::number::UnlocalizedNumberRangeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  int v4;

  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  v4 = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
  return a1;
}

{
  int v4;

  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  v4 = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  return a1;
}

uint64_t icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((icu::number::UnlocalizedNumberFormatter *)(a1 + 8), (const icu::number::UnlocalizedNumberFormatter *)(a2 + 8));
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((icu::number::UnlocalizedNumberFormatter *)(a1 + 488), (const icu::number::UnlocalizedNumberFormatter *)(a2 + 488));
  v4 = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = v4;
  icu::Locale::Locale((icu::Locale *)(a1 + 984), a2 + 984);
  *(_QWORD *)(a1 + 1208) = 0;
  return a1;
}

{
  uint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;

  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a1 + 488, a2 + 488);
  v4 = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = v4;
  icu::Locale::Locale(a1 + 984, a2 + 984);
  v5 = (unint64_t *)(a1 + 1208);
  *(_QWORD *)(a1 + 1208) = 0;
  v6 = (unint64_t *)(a2 + 1208);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(0, v6));
  do
    v8 = __ldaxr(v5);
  while (__stlxr(v7, v5));
  if (v8)
  {
    if (*(_BYTE *)(v8 + 1908))
      uprv_free(*(void **)(v8 + 1896));
    sub_18BD157BC(v8 + 1296);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v8 + 1224));
    sub_18BD157BC(v8 + 608);
    sub_18BD157BC(v8 + 8);
    icu::UMemory::operator delete((void *)v8);
  }
  return a1;
}

uint64_t sub_18BD38DE8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 1908))
    uprv_free(*(void **)(a1 + 1896));
  sub_18BD157BC(a1 + 1296);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 1224));
  sub_18BD157BC(a1 + 608);
  sub_18BD157BC(a1 + 8);
  return a1;
}

uint64_t icu::number::LocalizedNumberRangeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t *v5;
  unint64_t v6;

  if (a1 != a2)
  {
    icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
    icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
    v4 = *(_DWORD *)(a2 + 976);
    *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
    *(_DWORD *)(a1 + 976) = v4;
    icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
    v5 = (unint64_t *)(a1 + 1208);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(0, v5));
    if (v6)
    {
      if (*(_BYTE *)(v6 + 1908))
        uprv_free(*(void **)(v6 + 1896));
      sub_18BD157BC(v6 + 1296);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v6 + 1224));
      sub_18BD157BC(v6 + 608);
      sub_18BD157BC(v6 + 8);
      icu::UMemory::operator delete((void *)v6);
    }
  }
  return a1;
}

{
  int v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  v4 = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v4;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  v5 = (unint64_t *)(a2 + 1208);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(0, v5));
  v7 = (unint64_t *)(a1 + 1208);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v6, v7));
  if (v8)
  {
    if (*(_BYTE *)(v8 + 1908))
      uprv_free(*(void **)(v8 + 1896));
    sub_18BD157BC(v8 + 1296);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v8 + 1224));
    sub_18BD157BC(v8 + 608);
    sub_18BD157BC(v8 + 8);
    icu::UMemory::operator delete((void *)v8);
  }
  return a1;
}

void icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter(void **this)
{
  unint64_t *v2;
  unint64_t v3;

  v2 = (unint64_t *)(this + 151);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(0, v2));
  if (v3)
  {
    if (*(_BYTE *)(v3 + 1908))
      uprv_free(*(void **)(v3 + 1896));
    sub_18BD157BC(v3 + 1296);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v3 + 1224));
    sub_18BD157BC(v3 + 608);
    sub_18BD157BC(v3 + 8);
    icu::UMemory::operator delete((void *)v3);
  }
  sub_18BD393E4(this);
}

uint64_t icu::number::LocalizedNumberRangeFormatter::LocalizedNumberRangeFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;

  v6 = sub_18BD37BF0(a1);
  *(_QWORD *)(v6 + 1208) = 0;
  icu::number::UnlocalizedNumberFormatter::operator=(v6 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  v7 = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v7;
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a2 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a3);
  icu::Locale::operator=((icu::Locale *)(a1 + 256), a1 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 736), a1 + 984);
  return a1;
}

{
  uint64_t v6;
  int v7;

  v6 = sub_18BD37BF0(a1);
  *(_QWORD *)(v6 + 1208) = 0;
  icu::number::UnlocalizedNumberFormatter::operator=(v6 + 8, a2 + 8);
  icu::number::UnlocalizedNumberFormatter::operator=(a1 + 488, a2 + 488);
  v7 = *(_DWORD *)(a2 + 976);
  *(_QWORD *)(a1 + 968) = *(_QWORD *)(a2 + 968);
  *(_DWORD *)(a1 + 976) = v7;
  icu::Locale::operator=(a1 + 984, a2 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 984), a3);
  icu::Locale::operator=((icu::Locale *)(a1 + 256), a1 + 984);
  icu::Locale::operator=((icu::Locale *)(a1 + 736), a1 + 984);
  return a1;
}

void icu::number::LocalizedNumberRangeFormatter::formatFormattableRange(icu::number::LocalizedNumberRangeFormatter *this@<X0>, const icu::Formattable *a2@<X1>, const icu::Formattable *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  UErrorCode v8;
  uint64_t *v13;
  int v14;

  v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    v13 = icu::UMemory::operator new(v6, (icu::UMemory *)0x1C8, (unint64_t)a2);
    v7 = v13;
    if (v13)
    {
      sub_18BD37BA0((uint64_t)v13);
      icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)(v7 + 38), a4);
      v8 = *a4;
      if (*(int *)a4 <= 0
        && (icu::Formattable::populateDecimalQuantity(a3, (icu::number::impl::DecimalQuantity *)(v7 + 47), a4),
            v8 = *a4,
            *(int *)a4 <= 0))
      {
        v14 = icu::Formattable::operator==((uint64_t)a2, (uint64_t)a3);
        icu::number::LocalizedNumberRangeFormatter::formatImpl(this, v7, v14, a4);
        if (*(int *)a4 < 1)
        {
          v8 = U_ZERO_ERROR;
        }
        else
        {
          (*(void (**)(uint64_t *))(*v7 + 8))(v7);
          v7 = 0;
          v8 = *a4;
        }
      }
      else
      {
        v7 = 0;
      }
    }
    else
    {
      v8 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    v7 = 0;
    v8 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(_QWORD *)a5 = off_1E2263380;
  *(_QWORD *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 16) = v8;
}

void *icu::number::LocalizedNumberRangeFormatter::formatImpl(icu::number::LocalizedNumberRangeFormatter *a1, _DWORD *a2, int a3, UErrorCode *a4)
{
  void *result;

  result = (void *)icu::number::LocalizedNumberRangeFormatter::getFormatter(a1, a4);
  if (*(int *)a4 <= 0)
  {
    if (result)
    {
      result = sub_18BD39994(result, a2, a3, a4);
      if (*(int *)a4 <= 0)
        return (void *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(a2 + 2), a4);
    }
    else
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
    }
  }
  return result;
}

unint64_t icu::number::LocalizedNumberRangeFormatter::getFormatter(icu::number::LocalizedNumberRangeFormatter *this, UErrorCode *a2)
{
  uint64_t *v2;
  unint64_t v3;
  unint64_t *v5;
  uint64_t *v8;
  unint64_t v9;
  char v10;
  void *v11;

  v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 > 0)
    return 0;
  v5 = (unint64_t *)((char *)this + 1208);
  v3 = atomic_load((unint64_t *)this + 151);
  if (v3)
    return v3;
  v8 = icu::UMemory::operator new(v2, (icu::UMemory *)0x7A8, (unint64_t)a2);
  if (!v8)
  {
    if (*(int *)a2 < 1)
    {
      v3 = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v3;
    }
    return 0;
  }
  v3 = (unint64_t)v8;
  sub_18BD39990(v8, this, a2);
  if (*(int *)a2 >= 1)
  {
    if (*(_BYTE *)(v3 + 1908))
      uprv_free(*(void **)(v3 + 1896));
    sub_18BD157BC(v3 + 1296);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v3 + 1224));
    sub_18BD157BC(v3 + 608);
    sub_18BD157BC(v3 + 8);
    icu::UMemory::operator delete((void *)v3);
    return 0;
  }
  do
  {
    v9 = __ldaxr(v5);
    if (v9)
    {
      v10 = 0;
      __clrex();
      goto LABEL_16;
    }
  }
  while (__stlxr(v3, v5));
  v10 = 1;
LABEL_16:
  if ((v10 & 1) == 0)
  {
    v11 = (void *)sub_18BD38DE8(v3);
    icu::UMemory::operator delete(v11);
    return v9;
  }
  return v3;
}

void **sub_18BD393E4(void **a1)
{
  icu::Locale::~Locale((icu::Locale *)(a1 + 123));
  icu::Locale::~Locale((icu::Locale *)(a1 + 92));
  icu::number::impl::StringProp::~StringProp(a1 + 87);
  icu::number::impl::StringProp::~StringProp(a1 + 85);
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 82));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)(a1 + 78));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 66));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 63));
  icu::Locale::~Locale((icu::Locale *)(a1 + 32));
  icu::number::impl::StringProp::~StringProp(a1 + 27);
  icu::number::impl::StringProp::~StringProp(a1 + 25);
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 22));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)(a1 + 18));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 6));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 3));
  return a1;
}

uint64_t sub_18BD3947C(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  __int128 v6;
  _QWORD *v7;
  int v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  UErrorCode v16;
  void (**v17)(icu::ResourceSink *__hidden);
  _OWORD *v18;
  void *__src[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[5];
  __int128 v27;
  _OWORD v28[16];
  uint64_t v29;
  _OWORD v30[4];
  uint64_t v31;
  void *v32[8];
  _BYTE v33[64];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  sub_18BD15CC8(a1 + 8, a2 + 8, a3);
  sub_18BD15CC8(a1 + 608, a2 + 488, a3);
  *(_BYTE *)(a1 + 1208) = *(_BYTE *)(a2 + 968);
  *(_QWORD *)(a1 + 1212) = *(_QWORD *)(a2 + 972);
  icu::UnicodeString::UnicodeString(a1 + 1232, 0);
  *(_QWORD *)(a1 + 1296) = 0;
  sub_18BD17698(a1 + 1304);
  v6 = 0uLL;
  *(_OWORD *)(a1 + 1864) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(_OWORD *)(a1 + 1816) = 0u;
  *(_QWORD *)(a1 + 1896) = a1 + 1912;
  *(_DWORD *)(a1 + 1904) = 3;
  *(_BYTE *)(a1 + 1908) = 0;
  *(_DWORD *)(a1 + 1952) = 0;
  if (*(_BYTE *)(a1 + 1208) || (v8 = strcmp((const char *)(a1 + 188), (const char *)(a1 + 788)), v6 = 0uLL, !v8))
  {
    v31 = 0;
    v30[2] = v6;
    v30[3] = v6;
    v30[0] = v6;
    v30[1] = v6;
    icu::UnicodeString::UnicodeString((uint64_t)v30 + 8, 0);
    if (*(int *)a3 <= 0)
    {
      v7 = ures_open(0, *(char **)(a2 + 1024), (int *)a3);
      if (*(int *)a3 <= 0)
      {
        v17 = &off_1E22647E0;
        v18 = v30;
        memset(&v32[1], 0, 56);
        v32[0] = (char *)&v32[1] + 5;
        LODWORD(v32[1]) = 40;
        icu::CharString::append((icu::CharString *)v32, "NumberElements/", -1, a3);
        icu::CharString::append((icu::CharString *)v32, (const char *)(a1 + 188), -1, a3);
        icu::CharString::append((icu::CharString *)v32, "/miscPatterns", -1, a3);
        if (*(int *)a3 <= 0)
        {
          v16 = U_ZERO_ERROR;
          ures_getAllItemsWithFallback((uint64_t)v7, (char *)v32[0], (uint64_t)&v17, (int *)&v16);
          if (v16 < U_ILLEGAL_ARGUMENT_ERROR || v16 == U_MISSING_RESOURCE_ERROR)
          {
            if (!sub_18BD3A8B8((uint64_t)&v17))
              ures_getAllItemsWithFallback((uint64_t)v7, "NumberElements/latn/miscPatterns", (uint64_t)&v17, (int *)a3);
            if (!sub_18BD3A8B8((uint64_t)&v17))
            {
              icu::UnicodeString::UnicodeString((uint64_t)v33, (uint64_t)"{");
              __src[1] = off_1E2256B38;
              LOWORD(v20) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)__src, (const icu::UnicodeString *)v33, 0, 0x7FFFFFFF, 0, a3);
              icu::SimpleFormatter::operator=((uint64_t)v18, (uint64_t)__src);
              icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)__src);
              icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v33);
            }
          }
          else
          {
            *a3 = v16;
          }
        }
        if (BYTE4(v32[1]))
          uprv_free(v32[0]);
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v17);
      }
      if (v7)
        ures_close(v7);
      if (*(int *)a3 <= 0)
      {
        icu::SimpleFormatter::operator=(a1 + 1224, (uint64_t)v30);
        if (*(_BYTE *)(a1 + 1208) && (*(_DWORD *)(a1 + 1216) - 1) <= 1)
        {
          v29 = 0;
          memset(v28, 0, sizeof(v28));
          v27 = 0u;
          memset(v26, 0, sizeof(v26));
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          *(_OWORD *)__src = 0u;
          v20 = 0u;
          *(void **)((char *)__src + 4) = *(void **)(a2 + 12);
          HIDWORD(__src[1]) = *(_DWORD *)(a2 + 20);
          v21 = 0u;
          icu::MeasureUnit::MeasureUnit((uint64_t)&v20, a2 + 24);
          icu::MeasureUnit::MeasureUnit((uint64_t)&v21 + 8, a2 + 48);
          v10 = *(_OWORD *)(a2 + 104);
          v24 = *(_OWORD *)(a2 + 88);
          v25 = v10;
          v26[0] = *(_OWORD *)(a2 + 120);
          *(_QWORD *)((char *)v26 + 13) = *(_QWORD *)(a2 + 133);
          v23 = *(_OWORD *)(a2 + 72);
          icu::number::impl::SymbolsWrapper::SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v26[1] + 8), (const icu::number::impl::SymbolsWrapper *)(a2 + 144));
          *(_OWORD *)((char *)&v26[2] + 8) = *(_OWORD *)(a2 + 160);
          icu::number::Scale::Scale((icu::number::Scale *)((char *)&v26[3] + 8), (const icu::number::Scale *)(a2 + 176));
          icu::number::impl::StringProp::StringProp((uint64_t)&v27, a2 + 200);
          icu::number::impl::StringProp::StringProp((uint64_t)v28, a2 + 216);
          v28[1] = *(_OWORD *)(a2 + 232);
          *(_QWORD *)((char *)&v28[1] + 14) = *(_QWORD *)(a2 + 246);
          icu::Locale::Locale((icu::Locale *)((char *)&v28[2] + 8), a2 + 256);
          LOBYTE(v26[3]) = 1;
          v11 = sub_18BD157BC(a1 + 1296);
          sub_18BD15CC8(v11, (uint64_t)__src, a3);
          icu::Locale::~Locale((icu::Locale *)((char *)&v28[2] + 8));
          icu::number::impl::StringProp::~StringProp((void **)v28);
          icu::number::impl::StringProp::~StringProp((void **)&v27);
          icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v26[3] + 8));
          icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v26[1] + 8));
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v21 + 8));
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v20);
        }
        sub_18BD3DD74(a2 + 984, a3, (uint64_t)__src);
        if (*(_BYTE *)(a1 + 1908))
          uprv_free(*(void **)(a1 + 1896));
        v12 = SLODWORD(__src[1]);
        *(_DWORD *)(a1 + 1904) = __src[1];
        v13 = BYTE4(__src[1]);
        *(_BYTE *)(a1 + 1908) = BYTE4(__src[1]);
        v14 = __src[0];
        if (__src[0] == &v20)
        {
          *(_QWORD *)(a1 + 1896) = a1 + 1912;
          memcpy((void *)(a1 + 1912), v14, 12 * v12);
          *(_DWORD *)(a1 + 1952) = DWORD2(v22);
          if (v13)
            uprv_free(v14);
        }
        else
        {
          *(void **)(a1 + 1896) = __src[0];
          __src[0] = &v20;
          LODWORD(__src[1]) = 3;
          BYTE4(__src[1]) = 0;
          *(_DWORD *)(a1 + 1952) = DWORD2(v22);
        }
      }
    }
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v30);
  }
  else
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return a1;
}

void *sub_18BD39994(void *result, _DWORD *a2, int a3, UErrorCode *a4)
{
  uint64_t v7;
  uint64_t *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  _OWORD v14[2];
  _OWORD v15[10];
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  _OWORD v19[3];
  __int128 v20;
  _OWORD v21[6];
  __int128 v22;
  void *v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  _OWORD v28[10];
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  _OWORD v32[3];
  __int128 v33;
  _OWORD v34[6];
  __int128 v35;
  void *v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return result;
  v7 = (uint64_t)result;
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  v33 = 0u;
  memset(v34, 0, sizeof(v34));
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  memset(v30, 0, sizeof(v30));
  v29 = 0u;
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  sub_18BD17698((uint64_t)v27);
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  memset(v15, 0, sizeof(v15));
  memset(v14, 0, sizeof(v14));
  sub_18BD17698((uint64_t)v14);
  sub_18BD164E8((uint64_t *)(v7 + 8), (icu::number::impl::DecimalQuantity *)(a2 + 76), (uint64_t)v27, a4);
  if (*(_BYTE *)(v7 + 1208))
    v8 = (uint64_t *)(v7 + 8);
  else
    v8 = (uint64_t *)(v7 + 608);
  sub_18BD164E8(v8, (icu::number::impl::DecimalQuantity *)(a2 + 94), (uint64_t)v14, a4);
  if (*(int *)a4 <= 0)
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)&v30[0] + 64))(*(_QWORD *)&v30[0], *(_QWORD *)&v17[0])&& (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v29 + 1) + 64))(*((_QWORD *)&v29 + 1), *((_QWORD *)&v16 + 1))&& ((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v29 + 64))(v29, v16) & 1) != 0)
    {
      if (a3)
      {
        v9 = 0;
        a2[112] = 0;
      }
      else if (icu::number::impl::DecimalQuantity::operator==((icu::number::impl::DecimalQuantity *)(a2 + 76), (uint64_t)(a2 + 94)))
      {
        a2[112] = 1;
        v9 = 0x10000000;
      }
      else
      {
        a2[112] = 2;
        v9 = 0x20000000;
      }
      v13 = (v9 | (*(_DWORD *)(v7 + 1216) << 24)) >> 24;
      if (v13 > 0x23)
        goto LABEL_28;
      if (((1 << v13) & 0xF00080008) != 0)
      {
        sub_18BD39D44(v7, (uint64_t)a2, (_QWORD **)v27, (uint64_t *)v14, a4);
        goto LABEL_12;
      }
      if (((1 << v13) & 0x10003) != 0)
      {
        sub_18BD3A5C4(v7, (uint64_t)a2, (_QWORD **)v27, (uint64_t *)v14, a4);
        goto LABEL_12;
      }
      if (((1 << v13) & 0x60004) == 0)
LABEL_28:
        abort();
      sub_18BD3A394(v7, (uint64_t)a2, (_QWORD **)v27, (uint64_t *)v14, a4);
    }
    else
    {
      sub_18BD39D44(v7, (uint64_t)a2, (_QWORD **)v27, (uint64_t *)v14, a4);
      a2[112] = 2;
    }
  }
LABEL_12:
  *(_QWORD *)&v14[0] = &off_1E2262AF8;
  if (BYTE4(v24))
    uprv_free(v23[1]);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v22);
  *((_QWORD *)&v20 + 1) = off_1E2262FE8;
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)&v20 + 8));
  *(_QWORD *)&v19[1] = off_1E22632A0;
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v19[1] + 8));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v19);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v18);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)v17 + 8));
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v15);
  *(_QWORD *)&v27[0] = &off_1E2262AF8;
  if (BYTE4(v37))
    uprv_free(v36[1]);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v35);
  *((_QWORD *)&v33 + 1) = off_1E2262FE8;
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v34);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)&v33 + 8));
  *(_QWORD *)&v32[1] = off_1E22632A0;
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v32[1] + 8));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v32);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v31);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)v30 + 8));
  return icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v28);
}

void sub_18BD39D44(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t *a4, UErrorCode *a5)
{
  unsigned int v10;
  BOOL v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  int v23;
  _BOOL4 v24;
  int v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 isWhiteSpace;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t (*v37)(uint64_t);
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58[2];
  _OWORD v59[8];
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 > 0)
    return;
  v10 = *(_DWORD *)(a1 + 1212);
  v11 = v10 > 3 || v10 == 1;
  if (v11 || !(*(unsigned int (**)(_QWORD *, uint64_t))(*a3[24] + 64))(a3[24], a4[24]))
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    goto LABEL_21;
  }
  if (!(*(unsigned int (**)(_QWORD *, uint64_t))(*a3[25] + 64))(a3[25], a4[25]))
    goto LABEL_12;
  v12 = a3[25];
  v13 = *(_DWORD *)(a1 + 1212);
  if (v13)
  {
    if (v13 != 2)
    {
LABEL_16:
      if (v13 == 3)
        v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3[26] + 64))(a3[26], a4[26]);
      else
        v14 = 0;
      v15 = 1;
      goto LABEL_20;
    }
    if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v12 + 48))(a3[25], 39) & 1) == 0
      && ((*(uint64_t (**)(_QWORD *, uint64_t))(*v12 + 48))(v12, 40) & 1) == 0)
    {
      goto LABEL_12;
    }
LABEL_15:
    v13 = *(_DWORD *)(a1 + 1212);
    goto LABEL_16;
  }
  if ((*(int (**)(_QWORD *))(*v12 + 32))(a3[25]) > 1)
    goto LABEL_15;
LABEL_12:
  v14 = 0;
  v15 = 0;
LABEL_20:
  v16 = 1;
LABEL_21:
  *(_QWORD *)v58 = 0;
  v17 = icu::number::impl::SimpleModifier::formatTwoArgPattern(a1 + 1224, (icu::FormattedStringBuilder *)(a2 + 8), 0, &v58[1], v58, 0, a5);
  if (*(int *)a5 < 1)
  {
    v18 = v17;
    v56 = v15;
    v57 = v16;
    v19 = v14;
    v20 = v58[0];
    v21 = v58[1];
    v54 = v19;
    v22 = (v19 & 1) == 0 && (*(int (**)(_QWORD *))(*a3[26] + 32))(a3[26]) > 0;
    v23 = v21 + v20;
    v24 = (v56 & 1) == 0 && (*(int (**)(_QWORD *))(*a3[25] + 32))(a3[25]) > 0;
    v25 = v18 - v23;
    v26 = (v57 & 1) == 0 && (*(int (**)(_QWORD *))(*a3[24] + 32))(a3[24]) > 0;
    v27 = v58[1];
    if (v22 || v24 || v26)
    {
      v28 = *(_QWORD *)(a2 + 16);
      if (!*(_BYTE *)(a2 + 8))
        v28 = a2 + 16;
      if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)*(unsigned __int16 *)(v28
                                                                                     + 2
                                                                                     * (*(_DWORD *)(a2 + 136) + v58[1]))))
        v25 += icu::FormattedStringBuilder::insertCodePoint((_QWORD *)(a2 + 8), v58[1], 0x20u, 0, a5);
      if (*(_BYTE *)(a2 + 8))
        v29 = *(_QWORD *)(a2 + 16);
      else
        v29 = a2 + 16;
      isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*(unsigned __int16 *)(v29
                                                                                              + 2
                                                                                              * (v25
                                                                                               + v58[1]
                                                                                               + *(_DWORD *)(a2 + 136)
                                                                                               - 1)));
      v27 = v58[1];
      if (!isWhiteSpace)
      {
        v25 += icu::FormattedStringBuilder::insertCodePoint((_QWORD *)(a2 + 8), v58[1] + v25, 0x20u, 0, a5);
        v27 = v58[1];
      }
    }
    v31 = sub_18BD15EE8((uint64_t)(a3 + 1), (icu::number::impl::DecimalQuantity *)(a2 + 304), (icu::FormattedStringBuilder *)(a2 + 8), v27, a5);
    v60 = 0;
    memset(v59, 0, sizeof(v59));
    icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v59);
    sub_18BD15EE8((uint64_t)(a4 + 1), (icu::number::impl::DecimalQuantity *)(a2 + 376), (icu::FormattedStringBuilder *)v59, 0, a5);
    v32 = icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(a2 + 8), v31 + v25 + v58[1], (const icu::FormattedStringBuilder *)v59, a5);
    v33 = (uint64_t)a3[26];
    if (v54)
    {
      v55 = v25;
      v34 = sub_18BD3A65C(a1, v33, a4[26]);
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, a2 + 8);
      v58[0] += v35;
      v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
      v58[1] += v36;
      v37 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 24);
      v38 = v34;
      v25 = v55;
      v39 = v37(v38);
      v58[0] -= v39;
    }
    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, UErrorCode *))(*(_QWORD *)v33 + 16))(v33, a2 + 8, v58[1], (v58[1] + v31), a5);
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, UErrorCode *))(*(_QWORD *)a4[26] + 16))(a4[26], a2 + 8, (v31 + v25 + v58[1]), (v58[0] + v32 + v31 + v25 + v58[1]), a5);
    }
    v40 = (uint64_t)a3[25];
    if (v56)
    {
      v41 = v25;
      v42 = sub_18BD3A65C(a1, v40, a4[25]);
      v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 16))(v42, a2 + 8);
      v58[0] += v43;
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
      v58[1] += v44;
      v45 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 24);
      v46 = v42;
      v25 = v41;
      v47 = v45(v46);
      v58[0] -= v47;
    }
    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, UErrorCode *))(*(_QWORD *)v40 + 16))(v40, a2 + 8, v58[1], (v58[1] + v31), a5);
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, UErrorCode *))(*(_QWORD *)a4[25] + 16))(a4[25], a2 + 8, (v31 + v25 + v58[1]), (v58[0] + v32 + v31 + v25 + v58[1]), a5);
    }
    v48 = (uint64_t)a3[24];
    if (v57)
    {
      v49 = sub_18BD3A65C(a1, v48, a4[24]);
      v50 = v31 + v25;
      v51 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, a2 + 8);
      v58[0] += v51;
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      v58[1] += v52;
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49);
      v58[0] -= v53;
    }
    else
    {
      v31 += (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, UErrorCode *))(*(_QWORD *)v48 + 16))(v48, a2 + 8, v58[1], (v58[1] + v31), a5);
      v50 = v31 + v25;
      v32 += (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, UErrorCode *))(*(_QWORD *)a4[24] + 16))(a4[24], a2 + 8, (v31 + v25 + v58[1]), (v58[0] + v32 + v31 + v25 + v58[1]), a5);
    }
    icu::FormattedValueStringBuilderImpl::appendSpanInfo(a2, 4098, 0, v58[1], v31, (int *)a5);
    icu::FormattedValueStringBuilderImpl::appendSpanInfo(a2, 4098, 1, v50 + v58[1], v32, (int *)a5);
    icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v59);
  }
}

void sub_18BD3A394(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t *a4, UErrorCode *a5)
{
  icu::number::impl::DecimalQuantity *v8;
  icu::FormattedStringBuilder *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  _OWORD v14[2];
  _OWORD v15[10];
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  _OWORD v19[3];
  __int128 v20;
  _OWORD v21[6];
  __int128 v22;
  void *v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    if (*(_BYTE *)(a1 + 1208))
    {
      v25 = 0u;
      v26 = 0u;
      *(_OWORD *)v23 = 0u;
      v24 = 0u;
      v22 = 0u;
      v20 = 0u;
      memset(v21, 0, sizeof(v21));
      v18 = 0u;
      memset(v19, 0, sizeof(v19));
      memset(v17, 0, sizeof(v17));
      v16 = 0u;
      memset(v15, 0, sizeof(v15));
      memset(v14, 0, sizeof(v14));
      sub_18BD17698((uint64_t)v14);
      v8 = (icu::number::impl::DecimalQuantity *)(a2 + 304);
      icu::number::impl::DecimalQuantity::resetExponent((icu::number::impl::DecimalQuantity *)(a2 + 304));
      sub_18BD164E8((uint64_t *)(a1 + 1296), (icu::number::impl::DecimalQuantity *)(a2 + 304), (uint64_t)v14, a5);
      v9 = (icu::FormattedStringBuilder *)(a2 + 8);
      v10 = sub_18BD15EE8((uint64_t)v14 + 8, v8, v9, 0, a5);
      v11 = (*(unsigned int (**)(_QWORD, icu::FormattedStringBuilder *, _QWORD, uint64_t, UErrorCode *))(**(_QWORD **)&v17[0] + 16))(*(_QWORD *)&v17[0], v9, 0, v10, a5)+ v10;
      v12 = (*(uint64_t (**)(_QWORD, icu::FormattedStringBuilder *, _QWORD, uint64_t, UErrorCode *))(**((_QWORD **)&v16 + 1) + 16))(*((_QWORD *)&v16 + 1), v9, 0, v11, a5);
      (*(void (**)(_QWORD, icu::FormattedStringBuilder *, _QWORD, _QWORD, UErrorCode *))(*(_QWORD *)v16 + 16))(v16, v9, 0, (v12 + v11), a5);
      *(_QWORD *)&v14[0] = &off_1E2262AF8;
      if (BYTE4(v24))
        uprv_free(v23[1]);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v22);
      *((_QWORD *)&v20 + 1) = off_1E2262FE8;
      icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)v21);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)&v20 + 8));
      *(_QWORD *)&v19[1] = off_1E22632A0;
      icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v19[1] + 8));
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v19);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v18);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)v17 + 8));
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v15);
    }
    else
    {
      sub_18BD39D44(a1, a2, a3, a4, a5);
    }
  }
}

void sub_18BD3A5C4(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t *a4, UErrorCode *a5)
{
  icu::FormattedStringBuilder *v7;
  int v8;

  if (*(int *)a5 <= 0)
  {
    if (*(_BYTE *)(a1 + 1208))
    {
      v7 = (icu::FormattedStringBuilder *)(a2 + 8);
      v8 = sub_18BD15EE8((uint64_t)(a3 + 1), (icu::number::impl::DecimalQuantity *)(a2 + 304), (icu::FormattedStringBuilder *)(a2 + 8), 0, a5);
      sub_18BD160EC((uint64_t)a3, v7, 0, v8, a5);
    }
    else
    {
      sub_18BD39D44(a1, a2, a3, a4, a5);
    }
  }
}

uint64_t sub_18BD3A65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  icu::number::impl::Modifier::Parameters::Parameters(&v9);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 56))(a2, &v9);
  if (v9)
  {
    v6 = HIDWORD(v10);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a3 + 56))(a3, &v9);
    if (v9)
    {
      v7 = sub_18BD3E134((unsigned int *)(a1 + 1896), v6, SHIDWORD(v10));
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10, v7);
    }
  }
  return a2;
}

void sub_18BD3A70C(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BD3A720(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  _QWORD *result;
  unsigned int v9;
  void *v10;
  _OWORD v11[2];
  uint64_t v12;
  char *__s1;
  int v14;
  _BYTE v15[64];
  _QWORD v16[2];
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  __s1 = a2;
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v11, a3, a5);
  if (*(int *)a5 <= 0)
  {
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, 0, (const char **)&__s1, a3);
    if ((_DWORD)result)
    {
      v9 = 1;
      do
      {
        if (!strcmp(__s1, "range") && !sub_18BD3A8B8(a1))
        {
          v14 = 0;
          v16[0] = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v14, a5);
          icu::UnicodeString::UnicodeString(v15, 1, v16);
          v16[1] = off_1E2256B38;
          v17 = 2;
          icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v16, (const icu::UnicodeString *)v15, 0, 0x7FFFFFFF, 0, a5);
          icu::SimpleFormatter::operator=(*(_QWORD *)(a1 + 8), (uint64_t)v16);
          icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v16);
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v15);
        }
        result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, v9++, (const char **)&__s1, a3);
      }
      while ((_DWORD)result);
    }
  }
  return result;
}

BOOL sub_18BD3A8B8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  _WORD *v3;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(unsigned __int16 *)(v1 + 16);
  if ((v2 & 0x11) != 0)
  {
    v3 = 0;
    if ((v2 & 0x8000) != 0)
    {
LABEL_9:
      if (!*(_DWORD *)(v1 + 20))
        return 0;
      return *v3 != 0;
    }
  }
  else if ((v2 & 2) != 0)
  {
    v3 = (_WORD *)(v1 + 18);
    if ((v2 & 0x8000) != 0)
      goto LABEL_9;
  }
  else
  {
    v3 = *(_WORD **)(v1 + 32);
    if ((v2 & 0x8000) != 0)
      goto LABEL_9;
  }
  if (v2 >> 5)
    return *v3 != 0;
  return 0;
}

void *icu::NumberingSystem::getStaticClassID(icu::NumberingSystem *this)
{
  return &unk_1EE009C40;
}

void *icu::NumberingSystem::getDynamicClassID(icu::NumberingSystem *this)
{
  return &unk_1EE009C40;
}

void *sub_18BD3A92C()
{
  return &unk_1EE009C41;
}

icu::NumberingSystem *icu::NumberingSystem::NumberingSystem(icu::NumberingSystem *this)
{
  UChar **v2;
  const char *v4;
  _OWORD v5[4];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E2264828;
  *((_QWORD *)this + 1) = off_1E2256B38;
  v2 = (UChar **)((char *)this + 8);
  *((_WORD *)this + 8) = 2;
  *((_DWORD *)this + 18) = 10;
  *((_BYTE *)this + 76) = 0;
  memset(v5, 0, sizeof(v5));
  v4 = "0";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  icu::UnicodeString::copyFrom(v2, (UChar **)v5, 0);
  strcpy((char *)this + 77, "latn");
  icu::UnicodeString::~UnicodeString((void *)0x6E74616C, (icu::UnicodeString *)v5);
  return this;
}

icu::NumberingSystem *icu::NumberingSystem::NumberingSystem(icu::NumberingSystem *this, const icu::NumberingSystem *a2)
{
  uint64_t v4;

  *(_QWORD *)this = off_1E2264828;
  *((_QWORD *)this + 1) = off_1E2256B38;
  *((_WORD *)this + 8) = 2;
  icu::UnicodeString::operator=((UChar **)this + 1, (UChar **)a2 + 1);
  v4 = *(_QWORD *)((char *)a2 + 78);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *(_QWORD *)((char *)this + 78) = v4;
  return this;
}

{
  uint64_t v4;

  *(_QWORD *)this = off_1E2264828;
  *((_QWORD *)this + 1) = off_1E2256B38;
  *((_WORD *)this + 8) = 2;
  icu::UnicodeString::operator=((UChar **)this + 1, (UChar **)a2 + 1);
  v4 = *(_QWORD *)((char *)a2 + 78);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *(_QWORD *)((char *)this + 78) = v4;
  return this;
}

icu::NumberingSystem *icu::NumberingSystem::createInstance(icu::NumberingSystem *this, unint64_t a2, icu::UnicodeString *a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t *v5;
  icu::NumberingSystem *v6;
  int v8;
  int v9;
  char v12;
  icu::NumberingSystem *v13;

  v5 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v5 > 0)
    return 0;
  v8 = (int)this;
  if ((int)this <= 1
    || (v12 = a2, !(_DWORD)a2) && icu::UnicodeString::countChar32(a3, 0, 0x7FFFFFFF) != (_DWORD)this)
  {
    v6 = 0;
    v9 = 1;
LABEL_5:
    *(_DWORD *)a4 = v9;
    return v6;
  }
  v13 = (icu::NumberingSystem *)icu::UMemory::operator new(v5, (icu::UMemory *)0x58, a2);
  if (v13)
  {
    v6 = v13;
    icu::NumberingSystem::NumberingSystem(v13);
    if (*(int *)a4 <= 0)
    {
      *((_DWORD *)v6 + 18) = v8;
      icu::UnicodeString::copyFrom((UChar **)v6 + 1, (UChar **)a3, 0);
      *((_BYTE *)v6 + 76) = v12;
      *((_BYTE *)v6 + 77) = 0;
      return v6;
    }
    (*(void (**)(icu::NumberingSystem *))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  if (*(int *)a4 <= 0)
  {
    v6 = 0;
    v9 = 7;
    goto LABEL_5;
  }
  return 0;
}

uint64_t icu::NumberingSystem::setRadix(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

icu::UnicodeString *icu::NumberingSystem::setDesc(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(this + 1, a2, 0);
}

uint64_t icu::NumberingSystem::setAlgorithmic(uint64_t this, char a2)
{
  *(_BYTE *)(this + 76) = a2;
  return this;
}

char *icu::NumberingSystem::setName(icu::NumberingSystem *this, const char *a2)
{
  char *result;

  result = (char *)this + 77;
  if (a2)
  {
    strncpy(result, a2, 8uLL);
    result = (char *)this + 85;
  }
  *result = 0;
  return result;
}

icu::NumberingSystem *icu::NumberingSystem::createInstance(icu::NumberingSystem *this, UErrorCode *a2, UErrorCode *a3)
{
  int KeywordValue;
  UErrorCode *v6;
  BOOL v8;
  _BOOL4 v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  const UChar *StringByKeyWithFallback;
  unint64_t v19;
  icu::NumberingSystem *result;
  char v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  UErrorCode v28;
  int32_t length[2];
  _OWORD v30[14];
  _OWORD v31[3];
  char __s[8];
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char v46[16];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  *(_OWORD *)v46 = 0u;
  v47 = 0u;
  KeywordValue = icu::Locale::getKeywordValue((char **)this, "numbers", v46, 96, a2);
  length[1] = KeywordValue;
  if (*(int *)a2 > 0 || *a2 == U_STRING_NOT_TERMINATED_WARNING)
  {
    length[1] = 0;
    *a2 = U_ZERO_ERROR;
    goto LABEL_20;
  }
  if (KeywordValue < 1)
  {
LABEL_20:
    strcpy(v46, "default");
    goto LABEL_21;
  }
  v46[KeywordValue] = 0;
  if (*(_QWORD *)v46 != 0x746C7561666564 && (*(_DWORD *)v46 != 1769234798 || *(_DWORD *)&v46[3] != 6649449))
  {
    v8 = *(_QWORD *)v46 == 0x6F69746964617274 && *(_DWORD *)&v46[8] == 7102830;
    v9 = !v8;
    if (*(_QWORD *)v46 != 0x65636E616E6966 && v9)
      return icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v46, (char *)a2, v6);
  }
LABEL_21:
  length[0] = 0;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  memset(v33, 0, sizeof(v33));
  icu::Locale::Locale((icu::Locale *)v33, (uint64_t)this);
  *(_QWORD *)__s = 0;
  if ((int)ulocimp_getRegionForSupplementalData(*((char **)this + 5), 0, __s, 8, (int *)a2) >= 1)
  {
    v28 = U_ZERO_ERROR;
    memset(v31, 0, sizeof(v31));
    icu::LocaleBuilder::LocaleBuilder(v31);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v26, (const char *)this + 8);
    icu::LocaleBuilder::setLanguage((uint64_t)v31, v26, v27);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, (const char *)this + 20);
    icu::LocaleBuilder::setScript((uint64_t)v31, v24, v25);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v22, __s);
    icu::LocaleBuilder::setRegion((uint64_t)v31, v22, v23);
    memset(v30, 0, sizeof(v30));
    icu::LocaleBuilder::build((icu::LocaleBuilder *)v31, &v28, (icu::Locale *)v30);
    if (v28 <= U_ZERO_ERROR)
      icu::Locale::operator=((icu::Locale *)v33, (uint64_t)v30);
    icu::Locale::~Locale((icu::Locale *)v30);
    icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)v31);
  }
  v10 = ures_open(0, *((char **)&v34 + 1), length);
  v11 = ures_getByKey((uint64_t)v10, "NumberElements", 0, length);
  v12 = (_QWORD *)v11;
  if (length[0] == 7)
  {
    v13 = 0;
    goto LABEL_49;
  }
  *(_QWORD *)length = 0;
  StringByKeyWithFallback = ures_getStringByKeyWithFallback(v11, v46, &length[1], (UErrorCode *)length);
  if (length[0] == 7)
  {
LABEL_48:
    v13 = 0;
LABEL_49:
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    v21 = 1;
    if (!v12)
      goto LABEL_51;
    goto LABEL_50;
  }
  while ((length[1] - 1) > 0x5E)
  {
    if (*(_DWORD *)v46 == 1769234798 && *(_DWORD *)&v46[3] == 6649449 || *(_QWORD *)v46 == 0x65636E616E6966)
    {
      strcpy(v46, "default");
    }
    else
    {
      if (*(_QWORD *)v46 != 0x6F69746964617274 || *(unsigned int *)&v46[8] != 7102830)
      {
        v21 = 0;
        goto LABEL_61;
      }
      strcpy(v46, "native");
    }
    *(_QWORD *)length = 0;
    StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v12, v46, &length[1], (UErrorCode *)length);
    if (length[0] == 7)
      goto LABEL_48;
  }
  u_UCharsToChars(StringByKeyWithFallback, v46, length[1]);
  v46[length[1]] = 0;
  v21 = 1;
LABEL_61:
  v13 = 1;
  if (v12)
LABEL_50:
    ures_close(v12);
LABEL_51:
  if (v10)
    ures_close(v10);
  icu::Locale::~Locale((icu::Locale *)v33);
  if (!v13)
    return 0;
  if ((v21 & 1) != 0)
    return icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v46, (char *)a2, v6);
  *a2 = U_USING_FALLBACK_WARNING;
  result = (icu::NumberingSystem *)icu::UMemory::operator new((uint64_t *)0xFFFFFF80, (icu::UMemory *)0x58, v19);
  if (result)
    return icu::NumberingSystem::NumberingSystem(result);
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

icu::NumberingSystem *icu::NumberingSystem::createInstanceByName(icu::NumberingSystem *this, char *a2, UErrorCode *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const UChar *StringByKey;
  icu::NumberingSystem *Int;
  int v10;
  UErrorCode *v11;
  uint64_t v12;
  icu::NumberingSystem *v13;
  icu::NumberingSystem *Instance;
  char *v16;
  const UChar *v17;
  int v18;
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)ures_openDirect(0, (uint64_t)"numberingSystems", (uint64_t)a2);
  v6 = (_QWORD *)ures_getByKey((uint64_t)v5, "numberingSystems", 0, (int *)a2);
  v7 = (_QWORD *)ures_getByKey((uint64_t)v6, (const char *)this, 0, (int *)a2);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0;
  v19 = off_1E2256B38;
  LOWORD(v20) = 2;
  v18 = 0;
  StringByKey = ures_getStringByKey((uint64_t)v7, "desc", &v18, (int *)a2);
  if (*(int *)a2 <= 0)
  {
    v17 = StringByKey;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, 1, &v17, v18);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v19);
  }
  ures_getByKey((uint64_t)v7, "radix", (uint64_t)v6, (int *)a2);
  Int = (icu::NumberingSystem *)ures_getInt((uint64_t)v6, (int *)a2);
  ures_getByKey((uint64_t)v7, "algorithmic", (uint64_t)v6, (int *)a2);
  v10 = ures_getInt((uint64_t)v6, (int *)a2);
  v12 = *(unsigned int *)a2;
  if ((int)v12 >= 1)
  {
    if ((_DWORD)v12 == 7)
    {
LABEL_6:
      v13 = 0;
      goto LABEL_12;
    }
    v13 = 0;
    v12 = 16;
    goto LABEL_11;
  }
  Instance = icu::NumberingSystem::createInstance(Int, v10 == 1, (icu::UnicodeString *)&v19, (const icu::UnicodeString *)a2, v11);
  v13 = Instance;
  v12 = *(unsigned int *)a2;
  if (!Instance && (int)v12 <= 0)
  {
    v13 = 0;
    v12 = 7;
LABEL_11:
    *(_DWORD *)a2 = v12;
    goto LABEL_12;
  }
  if ((int)v12 <= 0)
  {
    v16 = (char *)Instance + 77;
    if (this)
    {
      strncpy(v16, (const char *)this, 8uLL);
      v16 = (char *)v13 + 85;
    }
    *v16 = 0;
  }
  else if (Instance)
  {
    (*(void (**)(icu::NumberingSystem *))(*(_QWORD *)Instance + 8))(Instance);
    goto LABEL_6;
  }
LABEL_12:
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v19);
  if (v7)
    ures_close(v7);
  if (v6)
    ures_close(v6);
  if (v5)
    ures_close(v5);
  return v13;
}

icu::NumberingSystem *icu::NumberingSystem::createInstance(icu::NumberingSystem *this, UErrorCode *a2)
{
  uint64_t *Default;
  UErrorCode *v4;

  Default = icu::Locale::getDefault(this);
  return icu::NumberingSystem::createInstance((icu::NumberingSystem *)Default, (UErrorCode *)this, v4);
}

void icu::NumberingSystem::~NumberingSystem(icu::NumberingSystem *this)
{
  *(_QWORD *)this = off_1E2264828;
  icu::UnicodeString::~UnicodeString((icu::NumberingSystem *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  *(_QWORD *)this = off_1E2264828;
  icu::UnicodeString::~UnicodeString((icu::NumberingSystem *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E2264828;
  icu::UnicodeString::~UnicodeString(off_1E2264828, (icu::NumberingSystem *)((char *)this + 8));
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::NumberingSystem::getRadix(icu::NumberingSystem *this)
{
  return *((unsigned int *)this + 18);
}

icu::UnicodeString *icu::NumberingSystem::getDescription@<X0>(UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  return icu::UnicodeString::UnicodeString(a2, this + 1);
}

uint64_t icu::NumberingSystem::getName(icu::NumberingSystem *this)
{
  return (uint64_t)this + 77;
}

uint64_t icu::NumberingSystem::isAlgorithmic(icu::NumberingSystem *this)
{
  return *((char *)this + 76);
}

uint64_t sub_18BD3B374()
{
  if (qword_1EE009C48)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE009C48 + 8))(qword_1EE009C48);
  qword_1EE009C48 = 0;
  atomic_store(0, &dword_1EE009C50);
  return 1;
}

void sub_18BD3B3B8(int *a1)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  icu::UVector *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  char *NextResource;
  char *v11;
  int v12;
  uint64_t Key;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;

  sub_18BDA1768(0x23u, (uint64_t)sub_18BD3B374);
  v4 = icu::UMemory::operator new(v3, (icu::UMemory *)0x28, v2);
  if (!v4)
  {
    if (*a1 <= 0)
      *a1 = 7;
    return;
  }
  v5 = (icu::UVector *)v4;
  icu::UVector::UVector((uint64_t)v4, (uint64_t)uprv_deleteUObject, 0, a1);
  if (*a1 > 0)
    goto LABEL_23;
  v18 = 0;
  v6 = ures_openDirect(0, (uint64_t)"numberingSystems", (uint64_t)&v18);
  v7 = (_QWORD *)ures_getByKey(v6, "numberingSystems", v6, &v18);
  v8 = v7;
  if (v18 > 0)
  {
    if (v18 == 7)
      v9 = 7;
    else
      v9 = 2;
    *a1 = v9;
    ures_close(v7);
LABEL_23:
    (*(void (**)(icu::UVector *))(*(_QWORD *)v5 + 8))(v5);
    return;
  }
  while (ures_hasNext((_BOOL8)v8) && *a1 <= 0)
  {
    NextResource = ures_getNextResource((uint64_t)v8, 0, &v18);
    v11 = NextResource;
    v12 = v18;
    if (v18 == 7)
    {
      *a1 = 7;
      if (!NextResource)
        goto LABEL_21;
    }
    else
    {
      Key = ures_getKey((uint64_t)NextResource);
      v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x40, v14);
      v17 = v16;
      if (v16)
      {
        icu::UnicodeString::UnicodeString(v16, Key, 0xFFFFFFFFLL, 0);
      }
      else if (*a1 <= 0)
      {
        *a1 = 7;
      }
      icu::UVector::adoptElement(v5, v17, (UErrorCode *)a1);
      if (!v11)
        goto LABEL_21;
    }
    ures_close(v11);
LABEL_21:
    if (v12 == 7)
      break;
  }
  ures_close(v8);
  if (*a1 > 0)
    goto LABEL_23;
  qword_1EE009C48 = (uint64_t)v5;
}

uint64_t *icu::NumberingSystem::getAvailableNames(icu::NumberingSystem *this, UErrorCode *a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t *result;

  v3 = *(unsigned int *)this;
  if ((int)v3 <= 0)
  {
    v4 = atomic_load(&dword_1EE009C50);
    if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009C50))
    {
      v3 = dword_1EE009C54;
      if (dword_1EE009C54 >= 1)
        *(_DWORD *)this = dword_1EE009C54;
    }
    else
    {
      sub_18BD3B3B8((int *)this);
      dword_1EE009C54 = *(_DWORD *)this;
      icu::umtx_initImplPostInit(&dword_1EE009C50);
    }
  }
  result = icu::UMemory::operator new((uint64_t *)v3, (icu::UMemory *)0x78, (unint64_t)a2);
  if (result)
  {
    result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
    *result = (uint64_t)&off_1E2264858;
    *((_DWORD *)result + 29) = 0;
  }
  else if (*(int *)this <= 0)
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

uint64_t sub_18BD3B63C(uint64_t a1, int *a2)
{
  icu::UVector *v2;
  signed int v4;

  v2 = (icu::UVector *)qword_1EE009C48;
  if (*a2 > 0 || qword_1EE009C48 == 0)
    return 0;
  v4 = *(_DWORD *)(a1 + 116);
  if (v4 >= *(_DWORD *)(qword_1EE009C48 + 8))
    return 0;
  *(_DWORD *)(a1 + 116) = v4 + 1;
  return icu::UVector::elementAt(v2, v4);
}

uint64_t sub_18BD3B67C(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18BD3B684()
{
  if (qword_1EE009C48)
    return *(unsigned int *)(qword_1EE009C48 + 8);
  else
    return 0;
}

void sub_18BD3B6A4(icu::StringEnumeration *a1)
{
  void *v1;

  icu::StringEnumeration::~StringEnumeration(a1);
  icu::UMemory::operator delete(v1);
}

void *icu::OlsonTimeZone::getStaticClassID(icu::OlsonTimeZone *this)
{
  return &unk_1EE009C58;
}

void *icu::OlsonTimeZone::getDynamicClassID(icu::OlsonTimeZone *this)
{
  return &unk_1EE009C58;
}

uint64_t icu::OlsonTimeZone::constructEmpty(uint64_t this)
{
  *(_QWORD *)(this + 152) = 0;
  *(_WORD *)(this + 76) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 80) = 0;
  *(_WORD *)(this + 104) = 1;
  *(_QWORD *)(this + 120) = 0;
  *(_QWORD *)(this + 128) = 0;
  *(_QWORD *)(this + 112) = &unk_18BE29438;
  return this;
}

uint64_t icu::OlsonTimeZone::OlsonTimeZone(uint64_t a1, uint64_t a2, uint64_t a3, UChar **a4, int *a5)
{
  icu::TimeZone *v10;
  BOOL v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  UErrorCode *v19;
  int v20;
  __int16 v21;
  const UChar *StringByKey;
  int Int;
  int v24;
  int v25;
  _QWORD *Rule;
  int *IntVector;
  unint64_t v28;
  int *v29;
  icu::BasicTimeZone *v30;
  double v31;
  uint64_t v32;
  void *v33;
  const UChar *v35;
  unsigned int v36;
  UChar *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[4];
  _BYTE v43[128];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v10 = icu::BasicTimeZone::BasicTimeZone((icu::BasicTimeZone *)a1, a4);
  *(_QWORD *)v10 = off_1E22648F0;
  *((_QWORD *)v10 + 16) = 0;
  *((_QWORD *)v10 + 20) = 0;
  *((_QWORD *)v10 + 21) = 0;
  *((_WORD *)v10 + 88) = 0;
  *((_QWORD *)v10 + 23) = 0;
  *((_QWORD *)v10 + 24) = 0;
  *((_WORD *)v10 + 100) = 0;
  *((_QWORD *)v10 + 26) = 0;
  *((_QWORD *)v10 + 27) = 0;
  atomic_store(0, (unsigned int *)v10 + 54);
  if (a3)
    v11 = a2 == 0;
  else
    v11 = 1;
  v12 = *a5;
  if (v11 && v12 <= 0)
  {
    *a5 = 1;
LABEL_50:
    *(_QWORD *)(a1 + 152) = 0;
    *(_WORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 104) = 1;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = &unk_18BE29438;
    return a1;
  }
  if (v12 > 0)
    goto LABEL_50;
  v36 = 0;
  v44 = 0;
  memset(v43, 0, sizeof(v43));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v43);
  ures_getByKey(a3, "transPre32", (uint64_t)v43, a5);
  *(_QWORD *)(a1 + 80) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  v13 = v36;
  *(_WORD *)(a1 + 72) = v36 >> 1;
  if (*a5 == 2)
  {
    v14 = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_WORD *)(a1 + 72) = 0;
LABEL_14:
    *a5 = v14;
    goto LABEL_15;
  }
  if (*a5 <= 0 && (v13 & 0xFFFF8001) != 0)
  {
    v14 = 3;
    goto LABEL_14;
  }
LABEL_15:
  ures_getByKey(a3, "trans", (uint64_t)v43, a5);
  *(_QWORD *)(a1 + 88) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  v15 = v36;
  *(_WORD *)(a1 + 74) = v36;
  if (*a5 == 2)
  {
    v16 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_WORD *)(a1 + 74) = 0;
LABEL_20:
    *a5 = v16;
    goto LABEL_21;
  }
  if (*a5 <= 0 && v15 >= 0x8000)
  {
    v16 = 3;
    goto LABEL_20;
  }
LABEL_21:
  ures_getByKey(a3, "transPost32", (uint64_t)v43, a5);
  *(_QWORD *)(a1 + 96) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  v17 = v36;
  *(_WORD *)(a1 + 76) = v36 >> 1;
  if (*a5 == 2)
  {
    v18 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_WORD *)(a1 + 76) = 0;
LABEL_26:
    *a5 = v18;
    goto LABEL_27;
  }
  if (*a5 <= 0 && (v17 & 0xFFFF8001) != 0)
  {
    v18 = 3;
    goto LABEL_26;
  }
LABEL_27:
  ures_getByKey(a3, "typeOffsets", (uint64_t)v43, a5);
  *(_QWORD *)(a1 + 112) = ures_getIntVector((uint64_t)v43, (int *)&v36, a5);
  v20 = *a5;
  v21 = v36;
  if (*a5 <= 0 && (v36 - 2 > 0x7FFC || (v36 & 1) != 0))
  {
    v20 = 3;
    *a5 = 3;
  }
  *(_WORD *)(a1 + 104) = v21 >> 1;
  *(_QWORD *)(a1 + 120) = 0;
  if ((__int16)(*(_WORD *)(a1 + 74) + *(_WORD *)(a1 + 72) + *(_WORD *)(a1 + 76)) < 1)
  {
    if (v20 > 0)
      goto LABEL_49;
    goto LABEL_38;
  }
  ures_getByKey(a3, "typeMap", (uint64_t)v43, a5);
  *(_QWORD *)(a1 + 120) = ures_getBinary((uint64_t)v43, (int *)&v36, a5);
  if (*a5 == 2)
  {
LABEL_33:
    *a5 = 3;
    goto LABEL_49;
  }
  if (*a5 <= 0)
  {
    if (v36 != (__int16)(*(_WORD *)(a1 + 74) + *(_WORD *)(a1 + 72) + *(_WORD *)(a1 + 76)))
      goto LABEL_33;
LABEL_38:
    StringByKey = ures_getStringByKey(a3, "finalRule", (int *)&v36, a5);
    ures_getByKey(a3, "finalRaw", (uint64_t)v43, a5);
    Int = ures_getInt((uint64_t)v43, a5);
    ures_getByKey(a3, "finalYear", (uint64_t)v43, a5);
    v24 = ures_getInt((uint64_t)v43, a5);
    if (*a5 <= 0)
    {
      v25 = v24;
      memset(v42, 0, sizeof(v42));
      v35 = StringByKey;
      icu::UnicodeString::UnicodeString(v42, 1, &v35);
      Rule = (_QWORD *)icu::TimeZone::loadRule(a2, (uint64_t)v42, 0, a5);
      IntVector = ures_getIntVector((uint64_t)Rule, (int *)&v36, a5);
      if (*a5 <= 0 && v36 == 11)
      {
        v29 = IntVector;
        v38 = 0u;
        v41 = 0;
        v40 = 0u;
        v39 = 0u;
        v37 = (UChar *)off_1E2256B38;
        LOWORD(v38) = 2;
        v30 = (icu::BasicTimeZone *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0xA0, v28);
        if (v30)
        {
          *(_QWORD *)(a1 + 128) = icu::SimpleTimeZone::SimpleTimeZone(v30, 1000 * Int, &v37, *(_BYTE *)v29, *((_BYTE *)v29 + 4), *((_BYTE *)v29 + 8), 1000 * v29[3], v29[4], v29[5], v29[6], v29[7], 1000 * v29[8], v29[9], 1000 * v29[10], (UErrorCode *)a5);
          *(_DWORD *)(a1 + 144) = v25;
          v31 = sub_18BCE8360(v25, 0, 1);
          v32 = (uint64_t)&word_18BE19F48[92];
          *(double *)(a1 + 136) = v31 * 86400000.0;
        }
        else
        {
          *(_QWORD *)(a1 + 128) = 0;
          v32 = 7;
          *a5 = 7;
        }
        icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)&v37);
      }
      else
      {
        *a5 = 3;
      }
      ures_close(Rule);
      icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v42);
    }
    else if (*a5 == 2)
    {
      *a5 = 0;
    }
  }
LABEL_49:
  *(_QWORD *)(a1 + 152) = icu::ZoneMeta::getCanonicalCLDRID((icu::ZoneMeta *)a4, (const icu::UnicodeString *)a5, v19);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v43);
  if (*a5 >= 1)
    goto LABEL_50;
  return a1;
}

void icu::OlsonTimeZone::clearTransitionRules(icu::OlsonTimeZone *this)
{
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_WORD *)this + 88) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
  atomic_store(0, (unsigned int *)this + 54);
}

uint64_t icu::OlsonTimeZone::OlsonTimeZone(icu::OlsonTimeZone *this, UChar **a2)
{
  icu::TimeZone *v3;

  v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(_QWORD *)v3 = off_1E22648F0;
  *((_QWORD *)v3 + 16) = 0;
  *((_QWORD *)v3 + 27) = 0;
  return icu::OlsonTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::TimeZone *v3;

  v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(_QWORD *)v3 = off_1E22648F0;
  *((_QWORD *)v3 + 16) = 0;
  *((_QWORD *)v3 + 27) = 0;
  return icu::OlsonTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::OlsonTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
    *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    v4 = *(_QWORD *)(a1 + 128);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(a2 + 128);
    if (v5)
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    *(_QWORD *)(a1 + 128) = v5;
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 208) = 0;
    *(_WORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 168) = 0;
    *(_WORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    atomic_store(0, (unsigned int *)(a1 + 216));
  }
  return a1;
}

void icu::OlsonTimeZone::~OlsonTimeZone(icu::OlsonTimeZone *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22648F0;
  icu::OlsonTimeZone::deleteTransitionRules(this);
  v2 = *((_QWORD *)this + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;

  icu::OlsonTimeZone::~OlsonTimeZone(this);
  icu::UMemory::operator delete(v1);
}

void icu::OlsonTimeZone::deleteTransitionRules(icu::OlsonTimeZone *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (char *)this + 160;
  v2 = *((_QWORD *)this + 20);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_QWORD *)this + 21);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 23);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 26);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void *)*((_QWORD *)this + 24);
  if (v7)
  {
    v8 = *((__int16 *)this + 100);
    if (v8 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(*((_QWORD *)this + 24) + 8 * v9);
        if (v10)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          LOWORD(v8) = *((_WORD *)this + 100);
        }
        ++v9;
      }
      while (v9 < (__int16)v8);
      v7 = (void *)*((_QWORD *)this + 24);
    }
    uprv_free(v7);
  }
  *((_QWORD *)this + 26) = 0;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_WORD *)v3 + 8) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_WORD *)this + 100) = 0;
  atomic_store(0, (unsigned int *)this + 54);
}

uint64_t icu::OlsonTimeZone::operator==(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if ((_QWORD *)a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*a2 - 8));
  if ((_DWORD)result)
  {
    result = icu::TimeZone::operator==(a1, (uint64_t)a2);
    if ((_DWORD)result)
      return (*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2) != 0;
  }
  return result;
}

icu::BasicTimeZone *icu::OlsonTimeZone::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::BasicTimeZone *result;
  icu::TimeZone *v5;

  result = (icu::BasicTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0xE0, a2);
  if (result)
  {
    v5 = icu::BasicTimeZone::BasicTimeZone(result, this);
    *(_QWORD *)v5 = off_1E22648F0;
    *((_QWORD *)v5 + 16) = 0;
    *((_QWORD *)v5 + 27) = 0;
    return (icu::BasicTimeZone *)icu::OlsonTimeZone::operator=((uint64_t)v5, (uint64_t)this);
  }
  return result;
}

uint64_t icu::OlsonTimeZone::getOffset(icu::OlsonTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (a4 < 0xC)
    return (*(uint64_t (**)(icu::OlsonTimeZone *))(*(_QWORD *)this + 40))(this);
  if (*(int *)a8 <= 0)
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0;
}

uint64_t icu::OlsonTimeZone::getOffset(icu::OlsonTimeZone *this, unsigned int a2, int a3, unsigned int a4, int a5, char a6, int a7, int a8, UErrorCode *a9)
{
  uint64_t result;
  uint64_t v12;
  double v13;
  int v14[2];

  if (*(int *)a9 > 0)
    return 0;
  if (a2 > 1
    || a4 > 0xB
    || a5 < 1
    || (a8 - 32) < 0xFFFFFFFC
    || a7 > 0x5265BFF
    || (a6 - 8) < 0xF9u
    || a5 > a8)
  {
    result = 0;
    *a9 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    if (!a2)
      a3 = -a3;
    v12 = *((_QWORD *)this + 16);
    if (v12 && a3 >= *((_DWORD *)this + 36))
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    }
    else
    {
      v13 = sub_18BCE8360(a3, a4, a5);
      *(_QWORD *)v14 = 0;
      icu::OlsonTimeZone::getHistoricalOffset(this, (double)a7 + v13 * 86400000.0, 1, 3, 1, &v14[1], v14);
      return (v14[0] + v14[1]);
    }
  }
  return result;
}

void icu::OlsonTimeZone::getHistoricalOffset(icu::OlsonTimeZone *this, double a2, int a3, char a4, char a5, int *a6, int *a7)
{
  int v10;
  double v14;
  int *v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  int64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BOOL4 v29;
  int v30;
  _BOOL4 v31;
  BOOL v32;
  BOOL v33;
  int v34;
  BOOL v35;
  BOOL v36;
  int v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;

  v10 = (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38));
  if (v10 >= 1
    && ((v14 = uprv_floor(a2 / 1000.0), a3)
     || v14 >= (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, 0)))
  {
    v18 = a4 & 3;
    v19 = a5 & 3;
    v41 = a5 & 0xC;
    v42 = a4 & 0xC;
    v20 = v10;
    while ((__int16)v20 >= 1)
    {
      v21 = v20 - 1;
      v22 = icu::OlsonTimeZone::transitionTimeInSeconds(this, (__int16)(v20 - 1));
      if (a3 && v14 >= (double)(v22 - 86400))
      {
        v23 = (_DWORD *)*((_QWORD *)this + 14);
        v24 = *((_QWORD *)this + 15);
        if (v20 <= 1u)
        {
          v25 = v23[1];
          v26 = v25 + *v23;
        }
        else
        {
          v25 = v23[(2 * *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 2))) | 1];
          v26 = v25 + v23[2 * *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 2))];
        }
        v27 = *(unsigned __int8 *)(v24 + (unsigned __int16)(v20 - 1));
        v28 = v23[(2 * v27) | 1];
        if (v28)
          v29 = 0;
        else
          v29 = v25 != 0;
        v30 = v28 + v23[2 * v27];
        if (v25)
          v31 = 0;
        else
          v31 = v28 != 0;
        if (v30 >= v26)
        {
          v35 = v18 == 1 && v29;
          v36 = v18 == 3 && v31;
          if (v35 || v36)
          {
            v30 = v26;
          }
          else
          {
            if (v18 != 1)
              v31 = 0;
            if (v18 != 3)
              v29 = 0;
            v37 = v31 || v29;
            if (v42 != 12)
              v26 = v30;
            if (!v37)
              v30 = v26;
          }
        }
        else
        {
          v32 = v19 == 1 && v29;
          v33 = v19 == 3 && v31;
          if (!v32 && !v33)
          {
            if (v19 != 1)
              v31 = 0;
            if (v19 != 3)
              v29 = 0;
            v34 = v31 || v29;
            if (v41 == 4)
              v34 = 1;
            if (v34)
              v30 = v26;
          }
        }
        v22 += v30;
      }
      --v20;
      if (v14 >= (double)v22)
      {
        v38 = (_DWORD *)*((_QWORD *)this + 14);
        v39 = *((_QWORD *)this + 15);
        *a6 = 1000 * v38[2 * *(unsigned __int8 *)(v39 + v21)];
        v40 = (2 * *(unsigned __int8 *)(v39 + v21)) | 1;
        goto LABEL_57;
      }
    }
    v38 = (_DWORD *)*((_QWORD *)this + 14);
    *a6 = 1000 * *v38;
    v40 = 1;
LABEL_57:
    v16 = &v38[v40];
  }
  else
  {
    v15 = (int *)*((_QWORD *)this + 14);
    v17 = *v15;
    v16 = v15 + 1;
    *a6 = 1000 * v17;
  }
  *a7 = 1000 * *v16;
}

void icu::OlsonTimeZone::getOffset(icu::OlsonTimeZone *this, double a2, uint64_t a3, int *a4, int *a5, UErrorCode *a6)
{
  uint64_t v6;

  if (*(int *)a6 <= 0)
  {
    v6 = *((_QWORD *)this + 16);
    if (v6 && *((double *)this + 17) <= a2)
      (*(void (**)(_QWORD, uint64_t, int *, int *))(*(_QWORD *)v6 + 48))(*((_QWORD *)this + 16), a3, a4, a5);
    else
      icu::OlsonTimeZone::getHistoricalOffset(this, a2, a3, 4, 12, a4, a5);
  }
}

void icu::OlsonTimeZone::getOffsetFromLocal(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5, int *a6, double a7)
{
  uint64_t v7;

  if (*a6 <= 0)
  {
    v7 = *(_QWORD *)(a1 + 128);
    if (v7 && *(double *)(a1 + 136) <= a7)
      (*(void (**)(_QWORD, uint64_t, uint64_t, int *, int *))(*(_QWORD *)v7 + 160))(*(_QWORD *)(a1 + 128), a2, a3, a4, a5);
    else
      icu::OlsonTimeZone::getHistoricalOffset((icu::OlsonTimeZone *)a1, a7, 1, a2, a3, a4, a5);
  }
}

uint64_t icu::OlsonTimeZone::getRawOffset(icu::OlsonTimeZone *this)
{
  double UTCtime;
  int v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  UTCtime = uprv_getUTCtime();
  (*(void (**)(icu::OlsonTimeZone *, _QWORD, uint64_t *, int *, char *, double))(*(_QWORD *)this + 48))(this, 0, &v5, &v4, (char *)&v5 + 4, UTCtime);
  return v5;
}

unint64_t icu::OlsonTimeZone::transitionTimeInSeconds(icu::OlsonTimeZone *this, int a2)
{
  int v2;
  BOOL v3;
  int v4;
  int v6;
  int v7;
  int v8;

  v2 = *((__int16 *)this + 36);
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (v4 < 0 != v3)
    return *(unsigned int *)(*((_QWORD *)this + 10) + 8 * a2 + 4) | ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 10) + 8 * a2) << 32);
  v6 = (__int16)v4;
  v7 = *((__int16 *)this + 37);
  v3 = __OFSUB__(v6, v7);
  v8 = v6 - v7;
  if (v8 < 0 != v3)
    return *(int *)(*((_QWORD *)this + 11) + 4 * v6);
  else
    return *(unsigned int *)(*((_QWORD *)this + 12) + 8 * (__int16)v8 + 4) | ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 12) + 8 * (__int16)v8) << 32);
}

uint64_t icu::OlsonTimeZone::useDaylightTime(icu::OlsonTimeZone *this)
{
  double UTCtime;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  UTCtime = uprv_getUTCtime();
  v3 = *((_QWORD *)this + 16);
  if (v3 && UTCtime >= *((double *)this + 17))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  v14 = 0;
  v15 = 0;
  v13 = 0;
  sub_18BCE8698((int *)&v15 + 1, &v15, (_DWORD *)&v14 + 1, (int *)&v14, (int *)&v13 + 1, &v13, UTCtime);
  v4 = sub_18BCE8360(SHIDWORD(v15), 0, 1);
  v5 = sub_18BCE8360(HIDWORD(v15) + 1, 0, 1);
  if ((__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38)) >= 1)
  {
    v6 = 0;
    v7 = v4 * 86400.0;
    v8 = v5 * 86400.0;
    v9 = (unsigned __int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38));
    do
    {
      v10 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(this, (__int16)v6);
      if (v8 <= v10)
        break;
      if (v7 <= v10
        && *(_DWORD *)(*((_QWORD *)this + 14) + 8 * *(unsigned __int8 *)(*((_QWORD *)this + 15) + v6) + 4))
      {
        return 1;
      }
      if (v7 < v10)
      {
        v11 = v6 ? (2 * *(unsigned __int8 *)(*((_QWORD *)this + 15) + (unsigned __int16)(v6 - 1))) | 1 : 1;
        if (*(_DWORD *)(*((_QWORD *)this + 14) + 4 * v11))
          return 1;
      }
      ++v6;
    }
    while (v9 != v6);
  }
  return 0;
}

uint64_t icu::OlsonTimeZone::getDSTSavings(icu::OlsonTimeZone *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 16);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  else
    return icu::TimeZone::getDSTSavings(this);
}

BOOL icu::OlsonTimeZone::inDaylightTime(icu::OlsonTimeZone *this, double a2, UErrorCode *a3)
{
  int v4;
  int v5;

  v5 = 0;
  v4 = 0;
  (*(void (**)(icu::OlsonTimeZone *, _QWORD, int *, int *, UErrorCode *, double))(*(_QWORD *)this + 48))(this, 0, &v5, &v4, a3, a2);
  return v4 != 0;
}

uint64_t icu::OlsonTimeZone::hasSameRules(icu::OlsonTimeZone *this, const icu::TimeZone *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;

  if (this == lpsrc)
    return 1;
  if (!result)
    return result;
  v4 = result;
  if (*((_QWORD *)this + 15) == *(_QWORD *)(result + 120))
    return 1;
  v5 = *((_QWORD *)this + 16);
  v6 = *(_QWORD *)(v4 + 128);
  if (v5)
  {
    if (!v6)
      return 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    if (!(_DWORD)result)
      return result;
    if (*((_QWORD *)this + 16)
      && (*((_DWORD *)this + 36) != *(_DWORD *)(v4 + 144) || *((double *)this + 17) != *(double *)(v4 + 136)))
    {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  v7 = *((unsigned __int16 *)this + 52);
  if (v7 != *(unsigned __int16 *)(v4 + 104))
    return 0;
  v8 = *((unsigned __int16 *)this + 36);
  if (v8 != *(unsigned __int16 *)(v4 + 72))
    return 0;
  v9 = *((unsigned __int16 *)this + 37);
  if (v9 != *(unsigned __int16 *)(v4 + 74))
    return 0;
  v10 = *((unsigned __int16 *)this + 38);
  if (v10 != *(unsigned __int16 *)(v4 + 76))
    return 0;
  v11 = *((_WORD *)this + 36);
  result = sub_18BD3C91C(*((_QWORD *)this + 10), *(_QWORD *)(v4 + 80), 8 * (__int16)v8);
  if ((_DWORD)result)
  {
    result = sub_18BD3C91C(*((_QWORD *)this + 11), *(_QWORD *)(v4 + 88), 4 * (__int16)v9);
    if ((_DWORD)result)
    {
      result = sub_18BD3C91C(*((_QWORD *)this + 12), *(_QWORD *)(v4 + 96), 8 * (__int16)v10);
      if ((_DWORD)result)
      {
        result = sub_18BD3C91C(*((_QWORD *)this + 14), *(_QWORD *)(v4 + 112), 8 * (__int16)v7);
        if ((_DWORD)result)
          return sub_18BD3C91C(*((_QWORD *)this + 15), *(_QWORD *)(v4 + 120), (__int16)(v9 + v11 + v10));
      }
    }
  }
  return result;
}

BOOL sub_18BD3C91C(unint64_t __s1, unint64_t a2, int a3)
{
  _BOOL8 result;
  BOOL v5;
  BOOL v6;

  if (!(__s1 | a2))
    return 1;
  result = 0;
  v5 = __s1 == 0;
  if (a2)
  {
    v6 = 1;
  }
  else
  {
    v5 = 0;
    v6 = __s1 == 0;
  }
  if (v6 && !v5)
  {
    if (__s1 == a2)
      return 1;
    return memcmp((const void *)__s1, (const void *)a2, a3) == 0;
  }
  return result;
}

void icu::OlsonTimeZone::checkTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
  unsigned int *v4;
  unsigned int v5;
  UErrorCode v6;

  if (*(int *)a2 <= 0)
  {
    v4 = (unsigned int *)((char *)this + 216);
    v5 = atomic_load((unsigned int *)this + 54);
    if (v5 == 2 || !icu::umtx_initImplPreInit((unsigned int *)this + 54))
    {
      v6 = *((_DWORD *)this + 55);
      if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
        *a2 = v6;
    }
    else
    {
      icu::OlsonTimeZone::initTransitionRules(this, a2);
      *((UErrorCode *)this + 55) = *a2;
      icu::umtx_initImplPostInit(v4);
    }
  }
}

icu::OlsonTimeZone *icu::OlsonTimeZone::initTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
  icu::OlsonTimeZone *v3;
  void *v4;
  void *v5;
  uint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  icu::InitialTimeZoneRule *v10;
  UChar **v11;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  int *v25;
  int v26;
  int v27;
  uint64_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  UChar **v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  icu::TimeZoneTransition *v37;
  int64_t v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  icu::TimeZoneRule *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _QWORD *v54;
  icu::TimeZoneTransition *v55;
  icu::TimeZoneRule *v56;
  void *v57;
  void *v58;
  double Time;
  const __int16 *v60;
  const __int16 *v61;
  _OWORD v62[4];
  _OWORD v63[4];
  _BYTE v64[72];
  UChar *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return this;
  v3 = this;
  icu::OlsonTimeZone::deleteTransitionRules(this);
  v69 = 0;
  v68 = 0u;
  v66 = 0u;
  v67 = 0u;
  v65 = (UChar *)off_1E2256B38;
  LOWORD(v66) = 2;
  icu::UnicodeString::operator=(&v65, (UChar **)v3 + 1);
  memset(v64, 0, 64);
  v61 = L"(STD)";
  icu::UnicodeString::UnicodeString(v63, 1, &v61);
  icu::operator+((uint64_t)&v65, (uint64_t)v63, (uint64_t)v64);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v63);
  memset(v63, 0, sizeof(v63));
  v60 = L"(DST)";
  icu::UnicodeString::UnicodeString(v62, 1, &v60);
  icu::operator+((uint64_t)&v65, (uint64_t)v62, (uint64_t)v63);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v62);
  v6 = (uint64_t *)*((_QWORD *)v3 + 14);
  v7 = *(_DWORD *)v6;
  v8 = *((_DWORD *)v6 + 1);
  v10 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(v6, (icu::UMemory *)0x50, v9);
  if (!v10)
  {
    *((_QWORD *)v3 + 20) = 0;
    goto LABEL_12;
  }
  if (v8)
    v11 = (UChar **)v63;
  else
    v11 = (UChar **)v64;
  *((_QWORD *)v3 + 20) = icu::InitialTimeZoneRule::InitialTimeZoneRule(v10, v11, 1000 * v7, 1000 * v8);
  v12 = *((unsigned __int16 *)v3 + 38);
  v13 = (char *)(*((unsigned __int16 *)v3 + 37) + *((unsigned __int16 *)v3 + 36) + v12);
  v14 = (__int16)(*((_WORD *)v3 + 37) + *((_WORD *)v3 + 36) + v12);
  if (v14 < 1)
    goto LABEL_40;
  v13 = 0;
  *((_WORD *)v3 + 88) = 0;
  v15 = *((_QWORD *)v3 + 15);
  while (!v13[v15])
  {
    *((_WORD *)v3 + 88) = (_WORD)++v13;
    if ((char *)(unsigned __int16)v14 == v13)
      goto LABEL_40;
  }
  if ((unsigned __int16)v14 == (unsigned __int16)v13)
  {
LABEL_40:
    v39 = *((_QWORD *)v3 + 16);
    if (!v39)
      goto LABEL_54;
    v40 = *((double *)v3 + 17);
    Time = v40;
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 72))(v39);
    v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 16) + 96))(*((_QWORD *)v3 + 16));
    *((_QWORD *)v3 + 26) = v42;
    if (v41)
    {
      if (!v42)
        goto LABEL_12;
      icu::SimpleTimeZone::setStartYear(v42, *((_DWORD *)v3 + 36));
      memset(v62, 0, 32);
      icu::TimeZoneTransition::TimeZoneTransition(v62);
      (*(void (**)(_QWORD, _QWORD, _OWORD *, double))(**((_QWORD **)v3 + 26) + 112))(*((_QWORD *)v3 + 26), 0, v62, v40);
      v43 = icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v62);
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 24))(v43);
      if (!v44)
      {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
        icu::OlsonTimeZone::deleteTransitionRules(v3);
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v62);
        goto LABEL_54;
      }
      v45 = (icu::TimeZoneRule *)v44;
      Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v62);
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v62);
    }
    else
    {
      if (!v42)
        goto LABEL_12;
      icu::UnicodeString::operator=(&v65, (UChar **)(*((_QWORD *)v3 + 16) + 8));
      v49 = icu::UMemory::operator new(v48, (icu::UMemory *)0x160, v47);
      if (!v49)
        goto LABEL_12;
      v45 = (icu::TimeZoneRule *)v49;
      v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 16) + 64))(*((_QWORD *)v3 + 16));
      icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v45, &v65, v50, 0, &Time, 1, 2);
    }
    v51 = (v14 - 1);
    if (v14 < 1
      || (v51 = *(unsigned __int8 *)(*((_QWORD *)v3 + 15) + v51),
          (v52 = *(_QWORD *)(*((_QWORD *)v3 + 24) + 8 * v51)) == 0))
    {
      v52 = *((_QWORD *)v3 + 20);
    }
    v53 = icu::UMemory::operator new((uint64_t *)v51, (icu::UMemory *)0x20, v46);
    if (v53)
    {
      v54 = icu::TimeZoneTransition::TimeZoneTransition(v53);
      *((_QWORD *)v3 + 23) = v54;
      icu::TimeZoneTransition::setTime((uint64_t)v54, Time);
      v55 = (icu::TimeZoneTransition *)*((_QWORD *)v3 + 23);
      v56 = (icu::TimeZoneRule *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 24))(v52);
      icu::TimeZoneTransition::adoptFrom(v55, v56);
      icu::TimeZoneTransition::adoptTo(*((icu::TimeZoneTransition **)v3 + 23), v45);
      goto LABEL_54;
    }
    *((_QWORD *)v3 + 23) = 0;
LABEL_12:
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    icu::OlsonTimeZone::deleteTransitionRules(v3);
    goto LABEL_54;
  }
  v16 = uprv_malloc(8 * v14);
  if (!v16)
    goto LABEL_12;
  v18 = v16;
  v19 = *((__int16 *)v3 + 52);
  if (v19 < 1)
  {
LABEL_38:
    uprv_free(v18);
    v33 = (uint64_t *)*((_QWORD *)v3 + 15);
    v34 = *((unsigned __int8 *)v33 + *((__int16 *)v3 + 88));
    v36 = icu::UMemory::operator new(v33, (icu::UMemory *)0x20, v35);
    if (!v36)
    {
      *((_QWORD *)v3 + 21) = 0;
      goto LABEL_12;
    }
    v37 = (icu::TimeZoneTransition *)v36;
    v38 = icu::OlsonTimeZone::transitionTimeInSeconds(v3, *((__int16 *)v3 + 88));
    icu::TimeZoneTransition::TimeZoneTransition(v37, (double)v38 * 1000.0, *((const icu::TimeZoneRule **)v3 + 20), *(const icu::TimeZoneRule **)(*((_QWORD *)v3 + 24) + 8 * v34));
    *((_QWORD *)v3 + 21) = v37;
    goto LABEL_40;
  }
  v20 = 0;
  while (1)
  {
    if (*((__int16 *)v3 + 88) >= v14)
      goto LABEL_37;
    v21 = 0;
    v22 = *((__int16 *)v3 + 88);
    v23 = *((_QWORD *)v3 + 15);
    do
    {
      if (v20 == *(unsigned __int8 *)(v23 + v22))
      {
        v24 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds(v3, (__int16)v22) * 1000.0;
        if (!*((_QWORD *)v3 + 16) || v24 <= *((double *)v3 + 17))
        {
          *((double *)v18 + (int)v21) = v24;
          v21 = (v21 + 1);
        }
      }
      ++v22;
    }
    while (v22 < v14);
    if ((int)v21 < 1)
      goto LABEL_37;
    v25 = (int *)(*((_QWORD *)v3 + 14) + 8 * v20);
    v27 = *v25;
    v26 = v25[1];
    v28 = (uint64_t *)*((_QWORD *)v3 + 24);
    if (!v28)
      break;
LABEL_30:
    v31 = icu::UMemory::operator new(v28, (icu::UMemory *)0x160, v17);
    if (v31)
    {
      if (v26)
        v32 = (UChar **)v63;
      else
        v32 = (UChar **)v64;
      v31 = (uint64_t *)icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v31, v32, 1000 * v27, 1000 * v26, (const double *)v18, v21, 2);
    }
    *(_QWORD *)(*((_QWORD *)v3 + 24) + 8 * v20) = v31;
    if (!*(_QWORD *)(*((_QWORD *)v3 + 24) + 8 * v20))
      goto LABEL_12;
    LOWORD(v19) = *((_WORD *)v3 + 52);
LABEL_37:
    if (++v20 >= (__int16)v19)
      goto LABEL_38;
  }
  *((_WORD *)v3 + 100) = v19;
  v29 = uprv_malloc(8 * (__int16)v19);
  *((_QWORD *)v3 + 24) = v29;
  if (v29)
  {
    if (*((__int16 *)v3 + 100) >= 1)
    {
      v28 = 0;
      v30 = 8 * *((unsigned __int16 *)v3 + 100);
      do
        *(uint64_t *)((char *)v28++ + *((_QWORD *)v3 + 24)) = 0;
      while ((uint64_t *)v30 != v28);
    }
    goto LABEL_30;
  }
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  icu::OlsonTimeZone::deleteTransitionRules(v3);
  uprv_free(v18);
LABEL_54:
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v63);
  icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)v64);
  return (icu::OlsonTimeZone *)icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)&v65);
}

uint64_t icu::OlsonTimeZone::getNextTransition(icu::TimeZoneTransition **this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t v8;
  icu::TimeZoneTransition *v9;
  __int16 v10;
  int v11;
  int v12;
  int v13;
  double v15;
  BOOL v16;
  icu::TimeZoneTransition *v17;
  uint64_t v18;
  UChar **v19;
  UChar **v20;
  double v21;
  int v22;
  int v23;
  int RawOffset;
  int DSTSavings;
  void *v26;
  icu::TimeZoneRule *v27;
  icu::TimeZoneRule *v28;
  void *v29;
  UErrorCode v30;
  UChar *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  UChar *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v30 = U_ZERO_ERROR;
  icu::OlsonTimeZone::checkTransitionRules((icu::OlsonTimeZone *)this, &v30);
  v8 = 0;
  if (v30 > U_ZERO_ERROR)
    return v8;
  if (this[16])
  {
    if ((_DWORD)a3 && icu::TimeZoneTransition::getTime(this[23]) == a2)
    {
      v9 = this[23];
LABEL_23:
      icu::TimeZoneTransition::operator=(a4, v9);
      return 1;
    }
    if (icu::TimeZoneTransition::getTime(this[23]) <= a2)
    {
      if ((*(unsigned int (**)(icu::TimeZoneTransition *))(*(_QWORD *)this[16] + 72))(this[16]))
        return (*(uint64_t (**)(icu::TimeZoneTransition *, uint64_t, icu::TimeZoneTransition *, double))(*(_QWORD *)this[26] + 112))(this[26], a3, a4, a2);
      return 0;
    }
  }
  v8 = (uint64_t)this[24];
  if (v8)
  {
    v10 = *((_WORD *)this + 38);
    v11 = (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + v10) - 1;
    v12 = *((__int16 *)this + 88);
    if (v12 > (__int16)(*((_WORD *)this + 37) + *((_WORD *)this + 36) + v10 - 1))
    {
      v13 = (__int16)v11;
LABEL_19:
      if (v11 != v13)
      {
        v9 = this[21];
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    LOWORD(v13) = *((_WORD *)this + 37) + *((_WORD *)this + 36) + v10 - 1;
    while (1)
    {
      v15 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds((icu::OlsonTimeZone *)this, (__int16)v13)
          * 1000.0;
      v16 = v15 == a2 && (_DWORD)a3 == 0;
      if (v15 < a2 || v16)
        break;
      v13 = (__int16)(v13 - 1);
      if (v13 < v12)
        goto LABEL_19;
    }
    if (v11 == (__int16)v13)
    {
LABEL_22:
      v9 = this[23];
      if (v9)
        goto LABEL_23;
      return 0;
    }
    v17 = this[15];
    v18 = (__int16)v13 + 1;
    v19 = *(UChar ***)(v8 + 8 * *((unsigned __int8 *)v17 + v18));
    v20 = *(UChar ***)(v8 + 8 * *((unsigned __int8 *)v17 + (__int16)v13));
    v21 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds((icu::OlsonTimeZone *)this, (__int16)v18)
        * 1000.0;
    v37 = 0u;
    v38 = 0u;
    v40 = 0;
    v39 = 0u;
    v35 = 0;
    v36 = (UChar *)off_1E2256B38;
    LOWORD(v37) = 2;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = (UChar *)off_1E2256B38;
    LOWORD(v32) = 2;
    icu::TimeZoneRule::getName(v20, &v36);
    icu::TimeZoneRule::getName(v19, &v31);
    if ((v37 & 1) != 0)
    {
      if ((v32 & 1) == 0)
        goto LABEL_40;
    }
    else
    {
      if ((v37 & 0x8000u) == 0)
        v22 = (unsigned __int16)v37 >> 5;
      else
        v22 = DWORD1(v37);
      if ((v32 & 0x8000u) == 0)
        v23 = (unsigned __int16)v32 >> 5;
      else
        v23 = DWORD1(v32);
      if ((v32 & 1) != 0
        || v22 != v23
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)&v36, (const icu::UnicodeString *)&v31, v22))
      {
        goto LABEL_40;
      }
    }
    RawOffset = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v20);
    if (RawOffset == icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v19))
    {
      DSTSavings = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v20);
      if (DSTSavings == icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v19))
      {
        v8 = (*((uint64_t (**)(icu::TimeZoneTransition **, _QWORD, icu::TimeZoneTransition *, double))*this
              + 14))(this, 0, a4, v21);
LABEL_41:
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v31);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v36);
        return v8;
      }
    }
LABEL_40:
    icu::TimeZoneTransition::setTime((uint64_t)a4, v21);
    v27 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v20 + 3))(v20);
    icu::TimeZoneTransition::adoptFrom(a4, v27);
    v28 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v19 + 3))(v19);
    icu::TimeZoneTransition::adoptTo(a4, v28);
    v8 = 1;
    goto LABEL_41;
  }
  return v8;
}

uint64_t icu::OlsonTimeZone::getPreviousTransition(icu::TimeZoneTransition **this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t v8;
  int v10;
  int v11;
  double v12;
  _BOOL4 v13;
  icu::TimeZoneTransition *v15;
  unsigned __int8 *v16;
  UChar **v17;
  UChar **v18;
  double v19;
  int v20;
  int v21;
  int RawOffset;
  int DSTSavings;
  void *v24;
  icu::TimeZoneRule *v25;
  icu::TimeZoneRule *v26;
  void *v27;
  UErrorCode v28;
  UChar *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  UChar *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v28 = U_ZERO_ERROR;
  icu::OlsonTimeZone::checkTransitionRules((icu::OlsonTimeZone *)this, &v28);
  v8 = 0;
  if (v28 > U_ZERO_ERROR)
    return v8;
  if (!this[16])
    goto LABEL_9;
  if ((_DWORD)a3 && icu::TimeZoneTransition::getTime(this[23]) == a2)
  {
LABEL_21:
    v15 = this[23];
LABEL_22:
    icu::TimeZoneTransition::operator=(a4, v15);
    return 1;
  }
  if (icu::TimeZoneTransition::getTime(this[23]) >= a2)
  {
LABEL_9:
    v8 = (uint64_t)this[24];
    if (!v8)
      return v8;
    LOWORD(v10) = *((_WORD *)this + 37) + *((_WORD *)this + 36) + *((_WORD *)this + 38);
    v11 = *((__int16 *)this + 88);
    do
    {
      v10 = (__int16)(v10 - 1);
      if (v10 < v11)
        return 0;
      v12 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds((icu::OlsonTimeZone *)this, v10) * 1000.0;
      v13 = v12 == a2 && a3 != 0;
    }
    while (v12 >= a2 && !v13);
    if (v10 == v11)
    {
      v15 = this[21];
      goto LABEL_22;
    }
    v16 = (unsigned __int8 *)this[15] + v10;
    v17 = *(UChar ***)(v8 + 8 * *v16);
    v18 = *(UChar ***)(v8 + 8 * *(v16 - 1));
    v19 = (double)(uint64_t)icu::OlsonTimeZone::transitionTimeInSeconds((icu::OlsonTimeZone *)this, v10) * 1000.0;
    v35 = 0u;
    v36 = 0u;
    v38 = 0;
    v37 = 0u;
    v33 = 0;
    v34 = (UChar *)off_1E2256B38;
    LOWORD(v35) = 2;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = (UChar *)off_1E2256B38;
    LOWORD(v30) = 2;
    icu::TimeZoneRule::getName(v18, &v34);
    icu::TimeZoneRule::getName(v17, &v29);
    if ((v35 & 1) != 0)
    {
      if ((v30 & 1) == 0)
        goto LABEL_39;
    }
    else
    {
      if ((v35 & 0x8000u) == 0)
        v20 = (unsigned __int16)v35 >> 5;
      else
        v20 = DWORD1(v35);
      if ((v30 & 0x8000u) == 0)
        v21 = (unsigned __int16)v30 >> 5;
      else
        v21 = DWORD1(v30);
      if ((v30 & 1) != 0
        || v20 != v21
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)&v34, (const icu::UnicodeString *)&v29, v20))
      {
        goto LABEL_39;
      }
    }
    RawOffset = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v18);
    if (RawOffset == icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v17))
    {
      DSTSavings = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v18);
      if (DSTSavings == icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v17))
      {
        v8 = (*((uint64_t (**)(icu::TimeZoneTransition **, _QWORD, icu::TimeZoneTransition *, double))*this
              + 15))(this, 0, a4, v19);
LABEL_40:
        icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v29);
        icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v34);
        return v8;
      }
    }
LABEL_39:
    icu::TimeZoneTransition::setTime((uint64_t)a4, v19);
    v25 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v18 + 3))(v18);
    icu::TimeZoneTransition::adoptFrom(a4, v25);
    v26 = (icu::TimeZoneRule *)(*((uint64_t (**)(UChar **))*v17 + 3))(v17);
    icu::TimeZoneTransition::adoptTo(a4, v26);
    v8 = 1;
    goto LABEL_40;
  }
  if (!(*(unsigned int (**)(icu::TimeZoneTransition *))(*(_QWORD *)this[16] + 72))(this[16]))
    goto LABEL_21;
  return (*(uint64_t (**)(icu::TimeZoneTransition *, uint64_t, icu::TimeZoneTransition *, double))(*(_QWORD *)this[26] + 120))(this[26], a3, a4, a2);
}

uint64_t icu::OlsonTimeZone::countTransitionRules(icu::OlsonTimeZone *this, UErrorCode *a2)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;

  if (*(int *)a2 > 0)
    return 0;
  icu::OlsonTimeZone::checkTransitionRules(this, a2);
  if (*(int *)a2 > 0)
    return 0;
  v6 = (_QWORD *)*((_QWORD *)this + 24);
  if (v6 && *((__int16 *)this + 100) >= 1)
  {
    LODWORD(v4) = 0;
    v7 = *((unsigned __int16 *)this + 100);
    do
    {
      if (*v6++)
        v4 = (v4 + 1);
      else
        v4 = v4;
      --v7;
    }
    while (v7);
  }
  else
  {
    v4 = 0;
  }
  v9 = *((_QWORD *)this + 16);
  if (v9)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9))
      return (v4 + 2);
    else
      return (v4 + 1);
  }
  return v4;
}

void icu::OlsonTimeZone::getTimeZoneRules(icu::OlsonTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const icu::TimeZoneRule *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;

  if (*(int *)a5 <= 0)
  {
    icu::OlsonTimeZone::checkTransitionRules(this, a5);
    if (*(int *)a5 <= 0)
    {
      v10 = 0;
      *a2 = (const icu::InitialTimeZoneRule *)*((_QWORD *)this + 20);
      v11 = *a4;
      if (*((_QWORD *)this + 24) && v11 >= 1)
      {
        if (*((__int16 *)this + 100) < 1)
        {
          v10 = 0;
        }
        else
        {
          v12 = 0;
          v10 = 0;
          v13 = 8 * *((unsigned __int16 *)this + 100);
          do
          {
            v14 = *(const icu::TimeZoneRule **)(*((_QWORD *)this + 24) + v12);
            if (v14)
            {
              a3[v10++] = v14;
              if (v10 >= v11)
                break;
            }
            v12 += 8;
          }
          while (v13 != v12);
          v11 = *a4;
        }
      }
      v15 = *((_QWORD *)this + 26);
      if (v15)
        v16 = v11 <= v10;
      else
        v16 = 1;
      if (!v16)
      {
        v18 = 0;
        v17 = (v11 - v10);
        (*(void (**)(uint64_t, char *, const icu::TimeZoneRule **, uint64_t *, UErrorCode *))(*(_QWORD *)v15 + 144))(v15, (char *)&v17 + 4, &a3[v10], &v17, a5);
        if (*(int *)a5 > 0)
          return;
        v10 += v17;
      }
      *a4 = v10;
    }
  }
}

const char *sub_18BD3D800()
{
  return "persian";
}

uint64_t *sub_18BD3D80C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, a1);
    *result = (uint64_t)&off_1E22649C0;
  }
  return result;
}

icu::Calendar *sub_18BD3D848(icu::Calendar *a1, char **a2, UErrorCode *a3)
{
  icu::TimeZone *v6;
  icu::Calendar *v7;
  double v8;

  v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  v7 = icu::Calendar::Calendar(a1, v6, (const icu::Locale *)a2, a3);
  *(_QWORD *)a1 = &off_1E22649C0;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v8, a3);
  return a1;
}

void sub_18BD3D8B8(icu::Calendar *a1)
{
  void *v1;

  icu::Calendar::~Calendar(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD3D8CC(uint64_t a1, int a2, int a3)
{
  return dword_18BE29458[4 * a2 + a3];
}

uint64_t sub_18BD3D8E0(uint64_t a1, int a2, int a3)
{
  int v3;
  char *v4;
  int v6;
  int v7;

  v3 = a2;
  v6 = a3;
  if (a3 >= 0xC)
    v3 = sub_18BCE8294(12, &v6, (double)a3) + a2;
  v7 = 0;
  sub_18BCE8294(33, &v7, (double)(25 * v3 + 11));
  if (v7 <= 7)
    v4 = (char *)&unk_18BE295D8;
  else
    v4 = (char *)&unk_18BE295E4;
  return v4[v6];
}

uint64_t sub_18BD3D968(uint64_t a1, int a2)
{
  int v3;

  v3 = 0;
  sub_18BCE8294(33, &v3, (double)(25 * a2 + 11));
  if (v3 > 7)
    return 365;
  else
    return 366;
}

uint64_t sub_18BD3D9B0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t result;
  int v5;

  v3 = a2;
  v5 = a3;
  if (a3 >= 0xC)
    v3 = sub_18BCE8294(12, &v5, (double)a3) + a2;
  result = sub_18BCE825C(8 * v3 + 21, 33) + 365 * v3 + 1947954;
  if (v5)
    return (result + word_18BE295F0[v5]);
  return result;
}

uint64_t sub_18BD3DA2C(uint64_t a1)
{
  unsigned int *v2;

  if (icu::Calendar::newerField(a1, 0x13u, 1u) == 19)
  {
    if (*(int *)(a1 + 208) >= 1)
    {
      v2 = (unsigned int *)(a1 + 88);
      return *v2;
    }
  }
  else if (*(int *)(a1 + 136) >= 1)
  {
    v2 = (unsigned int *)(a1 + 16);
    return *v2;
  }
  return 1;
}

double sub_18BD3DA8C(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  double result;
  int v10;

  v3 = a2 - 1948320;
  v4 = sub_18BCE8278(33 * (a2 - 1948320) + 3, 12053);
  v5 = v4 + 1;
  v6 = v3 - sub_18BCE825C(8 * (v4 + 1) + 21, 33) - 365 * v4;
  v7 = (v6 - 6) / 0x1Eu;
  if (v6 <= 215)
    v7 = v6 / 31;
  v8 = word_18BE295F0[v7];
  *(_BYTE *)(a1 + 108) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v5;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  *(_WORD *)(a1 + 109) = 257;
  *(_DWORD *)(a1 + 88) = v5;
  *(_DWORD *)(a1 + 208) = 1;
  *(_BYTE *)(a1 + 127) = 1;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 140) = 1;
  v10 = v6 + 1;
  *(_DWORD *)(a1 + 104) = v7;
  *(_DWORD *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 131) = 1;
  *(_WORD *)(a1 + 113) = 257;
  *(_DWORD *)(a1 + 32) = v10 - v8;
  *(_DWORD *)(a1 + 36) = v10;
  *(_QWORD *)(a1 + 152) = 0x100000001;
  return result;
}

uint64_t sub_18BD3DB84(_BYTE *a1, UErrorCode *a2)
{
  unsigned int v3;

  v3 = icu::Calendar::get(a1, 0x13u, a2) + 622;
  if (*(int *)a2 <= 0)
    return v3;
  else
    return 0;
}

_BYTE *sub_18BD3DBBC(_BYTE *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 - 622);
}

uint64_t sub_18BD3DBC8()
{
  return 1;
}

double sub_18BD3DBD0()
{
  unsigned int v0;

  v0 = atomic_load((unsigned int *)&unk_1ECD28108);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD28108))
  {
    sub_18BD3DC1C();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD28108);
  }
  return *(double *)&qword_1ECD26D58;
}

void sub_18BD3DC1C()
{
  uint64_t *v0;
  icu::Calendar *v1;
  double v2;
  UErrorCode v3;
  char *v4[28];
  _BYTE v5[624];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = U_ZERO_ERROR;
  bzero(v5, 0x270uLL);
  icu::Locale::Locale(v0, (icu::Locale *)v4, "@calendar=persian", 0, 0, 0);
  sub_18BD3D848((icu::Calendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v1);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v2, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    qword_1ECD26D58 = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_1ECD26D60 = icu::Calendar::get(v5, 1u, &v3);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v5);
}

uint64_t sub_18BD3DD10()
{
  unsigned int v0;

  v0 = atomic_load((unsigned int *)&unk_1ECD28108);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD28108))
  {
    sub_18BD3DC1C();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD28108);
  }
  return dword_1ECD26D60;
}

void *icu::PersianCalendar::getStaticClassID(icu::PersianCalendar *this)
{
  return &unk_1EE009C5C;
}

void *sub_18BD3DD68()
{
  return &unk_1EE009C5C;
}

void sub_18BD3DD74(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  const UChar *StringByKeyWithFallback;
  UChar *v8;
  _QWORD v9[2];
  uint64_t v10;
  void *v11[7];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 56) = 0;
  v6 = (_QWORD *)ures_openDirect(0, (uint64_t)"pluralRanges", (uint64_t)a2);
  if (*(int *)a2 <= 0)
  {
    memset(&v11[1], 0, 48);
    v12 = 0;
    v11[0] = (char *)&v11[1] + 5;
    LODWORD(v11[1]) = 40;
    icu::CharString::append((icu::CharString *)v11, "locales/", -1, a2);
    icu::CharString::append((icu::CharString *)v11, (const char *)(a1 + 8), -1, a2);
    if (*(int *)a2 <= 0)
    {
      v10 = 0;
      StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v6, (char *)v11[0], (int *)&v10 + 1, (UErrorCode *)&v10);
      if ((int)v10 <= 0)
      {
        v8 = (UChar *)StringByKeyWithFallback;
        LODWORD(v12) = 0;
        *(_BYTE *)v11[0] = 0;
        icu::CharString::append((icu::CharString *)v11, "rules/", -1, a2);
        icu::CharString::appendInvariantChars((int *)v11, v8, SHIDWORD(v10), a2);
        if (*(int *)a2 <= 0)
        {
          v9[0] = &off_1E2264BA0;
          v9[1] = a3;
          ures_getAllItemsWithFallback((uint64_t)v6, (char *)v11[0], (uint64_t)v9, (int *)a2);
          icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v9);
        }
      }
    }
    if (BYTE4(v11[1]))
      uprv_free(v11[0]);
  }
  if (v6)
    ures_close(v6);
}

void *sub_18BD3DF2C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  uint64_t v6;
  void *result;

  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  v5 = (void *)(a3 + 16);
  *(_QWORD *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 56) = 0;
  v6 = *(unsigned int *)(a1 + 56);
  if ((int)v6 < 4)
  {
LABEL_6:
    result = memcpy(v5, *(const void **)a1, 12 * (int)v6);
    *(_DWORD *)(a3 + 56) = v6;
    return result;
  }
  result = uprv_malloc(12 * v6);
  if (result)
  {
    v5 = result;
    if (*(_BYTE *)(a3 + 12))
      uprv_free(*(void **)a3);
    *(_QWORD *)a3 = v5;
    *(_DWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 12) = 1;
    LODWORD(v6) = *(_DWORD *)(a1 + 56);
    goto LABEL_6;
  }
  *a2 = 7;
  return result;
}

uint64_t *sub_18BD3DFF0@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t *v7;
  const void *v8;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x40, (unint64_t)a2);
  if (result)
  {
    v7 = result;
    *result = *(_QWORD *)a1;
    *((_DWORD *)result + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)result + 12) = *(_BYTE *)(a1 + 12);
    v8 = *(const void **)a1;
    if (*(_QWORD *)a1 == a1 + 16)
    {
      *result = (uint64_t)(result + 2);
      result = (uint64_t *)memcpy(result + 2, v8, 12 * *(int *)(a1 + 8));
    }
    else
    {
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 3;
      *(_BYTE *)(a1 + 12) = 0;
    }
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a1 + 56);
    *a3 = (uint64_t)v7;
  }
  else
  {
    *a3 = 0;
    if (*a2 <= 0)
      *a2 = 7;
  }
  return result;
}

void sub_18BD3E0A8(uint64_t a1, int a2, int *a3)
{
  void *v6;
  void *v7;

  if (*a3 <= 0 && *(_DWORD *)(a1 + 8) < a2)
  {
    if (a2 >= 1 && (v6 = uprv_malloc(12 * a2)) != 0)
    {
      v7 = v6;
      if (*(_BYTE *)(a1 + 12))
        uprv_free(*(void **)a1);
      *(_QWORD *)a1 = v7;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }
    else
    {
      *a3 = 7;
    }
  }
}

uint64_t sub_18BD3E134(unsigned int *a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int *i;

  v3 = a1[14];
  if ((int)v3 < 1)
    return 5;
  for (i = (unsigned int *)(*(_QWORD *)a1 + 8); *(i - 2) != a2 || *(i - 1) != a3; i += 3)
  {
    if (!--v3)
      return 5;
  }
  return *i;
}

void sub_18BD3E178(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD3E18C(uint64_t a1, uint64_t a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  unsigned int v8;
  UErrorCode *v9;
  int v10;
  void *v11;
  UErrorCode *v12;
  int v13;
  void *v14;
  UErrorCode *v15;
  int v16;
  void *v17;
  uint64_t v18;
  int v19;
  _DWORD *v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BYTE v28[64];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  (*(void (**)(_QWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 80))(v24, a3, a5);
  if (*a5 <= 0)
  {
    sub_18BD3E0A8(*(_QWORD *)(a1 + 8), v25, a5);
    if (*a5 <= 0)
    {
      if (icu::ResourceArray::getValue((icu::ResourceArray *)v24, 0, a3))
      {
        v8 = 1;
        while (1)
        {
          v22[0] = 0;
          v22[1] = 0;
          v23 = 0;
          (*(void (**)(_QWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 80))(v22, a3, a5);
          if (*a5 > 0)
            break;
          if ((_DWORD)v23 != 3)
          {
            *a5 = 17;
            return;
          }
          icu::ResourceArray::getValue((icu::ResourceArray *)v22, 0, a3);
          v27 = 0;
          v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 32))(a3, &v27, a5);
          icu::UnicodeString::UnicodeString(v28, 1, &v26);
          v10 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v28, (const icu::UnicodeString *)a5, v9);
          icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v28);
          if (*a5 <= 0)
          {
            icu::ResourceArray::getValue((icu::ResourceArray *)v22, 1u, a3);
            v27 = 0;
            v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 32))(a3, &v27, a5);
            icu::UnicodeString::UnicodeString(v28, 1, &v26);
            v13 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v28, (const icu::UnicodeString *)a5, v12);
            icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v28);
            if (*a5 <= 0)
            {
              icu::ResourceArray::getValue((icu::ResourceArray *)v22, 2u, a3);
              v27 = 0;
              v26 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 32))(a3, &v27, a5);
              icu::UnicodeString::UnicodeString(v28, 1, &v26);
              v16 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v28, (const icu::UnicodeString *)a5, v15);
              icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v28);
              if (*a5 < 1)
              {
                v18 = *(_QWORD *)(a1 + 8);
                v19 = *(_DWORD *)(v18 + 56);
                v20 = (_DWORD *)(*(_QWORD *)v18 + 12 * v19);
                *v20 = v10;
                v20[1] = v13;
                v20[2] = v16;
                *(_DWORD *)(v18 + 56) = v19 + 1;
                if (icu::ResourceArray::getValue((icu::ResourceArray *)v24, v8++, a3))
                  continue;
              }
            }
          }
          return;
        }
      }
    }
  }
}

void *icu::PluralFormat::getStaticClassID(icu::PluralFormat *this)
{
  return &unk_1EE009C60;
}

void *icu::PluralFormat::getDynamicClassID(icu::PluralFormat *this)
{
  return &unk_1EE009C60;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, UErrorCode *a2)
{
  icu::Locale *v4;
  icu::Locale *v5;
  uint64_t *Default;

  v4 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(_QWORD *)v4 = off_1E2264BE8;
  v5 = (icu::Locale *)((char *)v4 + 328);
  Default = icu::Locale::getDefault(v4);
  icu::Locale::Locale(v5, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a2);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::init(this, 0, 0, (icu::UnifiedCache *)a2);
  return this;
}

_QWORD *icu::PluralFormat::init(_QWORD *result, icu::PluralRules *this, unint64_t a3, icu::UnifiedCache *a4)
{
  uint64_t *v4;
  uint64_t v6;
  UErrorCode *v7;

  v4 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v4 <= 0)
  {
    v6 = (uint64_t)result;
    if (this)
    {
      result = icu::PluralRules::clone(this, v4);
      *(_QWORD *)(v6 + 704) = result;
      if (!result)
      {
        *(_DWORD *)a4 = 7;
        return result;
      }
    }
    else
    {
      result[88] = icu::PluralRules::forLocale((icu::Locale *)(result + 41), a3, a4);
    }
    result = icu::NumberFormat::createInstance((char **)(v6 + 328), (UErrorCode *)a4, v7);
    *(_QWORD *)(v6 + 680) = result;
  }
  return result;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v6 = off_1E2264BE8;
  icu::Locale::Locale((icu::Locale *)(v6 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::init(this, 0, 0, (icu::UnifiedCache *)a3);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::PluralRules *a2, UErrorCode *a3)
{
  icu::Locale *v6;
  icu::Locale *v7;
  uint64_t *Default;

  v6 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(_QWORD *)v6 = off_1E2264BE8;
  v7 = (icu::Locale *)((char *)v6 + 328);
  Default = icu::Locale::getDefault(v6);
  icu::Locale::Locale(v7, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::init(this, a2, 2uLL, (icu::UnifiedCache *)a3);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::Locale *a2, const icu::PluralRules *a3, UErrorCode *a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v8 = off_1E2264BE8;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::init(this, a3, 2uLL, (icu::UnifiedCache *)a4);
  return this;
}

uint64_t icu::PluralFormat::PluralFormat(uint64_t a1, uint64_t a2, unint64_t a3, UErrorCode *a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)icu::Format::Format(a1);
  *v8 = off_1E2264BE8;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), a2);
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(a1 + 552), a4);
  *(_OWORD *)(a1 + 680) = 0u;
  *(_QWORD *)(a1 + 696) = off_1E2264C40;
  *(_QWORD *)(a1 + 704) = 0;
  icu::PluralFormat::init((_QWORD *)a1, 0, a3, (icu::UnifiedCache *)a4);
  return a1;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, UChar **a2, UErrorCode *a3)
{
  icu::Locale *v6;
  icu::Locale *v7;
  uint64_t *Default;

  v6 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(_QWORD *)v6 = off_1E2264BE8;
  v7 = (icu::Locale *)((char *)v6 + 328);
  Default = icu::Locale::getDefault(v6);
  icu::Locale::Locale(v7, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a3);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::init(this, 0, 0, (icu::UnifiedCache *)a3);
  icu::PluralFormat::applyPattern(this, a2, a3);
  return this;
}

void icu::PluralFormat::applyPattern(icu::PluralFormat *this, UChar **a2, UErrorCode *a3)
{
  icu::MessagePattern *v5;
  double PluralOffset;

  v5 = (icu::PluralFormat *)((char *)this + 552);
  icu::MessagePattern::parsePluralStyle((icu::PluralFormat *)((char *)this + 552), a2, 0, a3);
  if (*(int *)a3 < 1)
  {
    PluralOffset = icu::MessagePattern::getPluralOffset(v5, 0);
  }
  else
  {
    icu::MessagePattern::clear((uint64_t)v5);
    PluralOffset = 0.0;
  }
  *((double *)this + 86) = PluralOffset;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::Locale *a2, UChar **a3, UErrorCode *a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v8 = off_1E2264BE8;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::init(this, 0, 0, (icu::UnifiedCache *)a4);
  icu::PluralFormat::applyPattern(this, a3, a4);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::PluralRules *a2, UChar **a3, UErrorCode *a4)
{
  icu::Locale *v8;
  icu::Locale *v9;
  uint64_t *Default;

  v8 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(_QWORD *)v8 = off_1E2264BE8;
  v9 = (icu::Locale *)((char *)v8 + 328);
  Default = icu::Locale::getDefault(v8);
  icu::Locale::Locale(v9, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a4);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::init(this, a2, 2uLL, (icu::UnifiedCache *)a4);
  icu::PluralFormat::applyPattern(this, a3, a4);
  return this;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::Locale *a2, const icu::PluralRules *a3, UChar **a4, UErrorCode *a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v10 = off_1E2264BE8;
  icu::Locale::Locale((icu::Locale *)(v10 + 41), (uint64_t)a2);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), a5);
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::init(this, a3, 2uLL, (icu::UnifiedCache *)a5);
  icu::PluralFormat::applyPattern(this, a4, a5);
  return this;
}

uint64_t icu::PluralFormat::PluralFormat(uint64_t a1, uint64_t a2, unint64_t a3, UChar **a4, UErrorCode *a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)icu::Format::Format(a1);
  *v10 = off_1E2264BE8;
  icu::Locale::Locale((icu::Locale *)(v10 + 41), a2);
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(a1 + 552), a5);
  *(_OWORD *)(a1 + 680) = 0u;
  *(_QWORD *)(a1 + 696) = off_1E2264C40;
  *(_QWORD *)(a1 + 704) = 0;
  icu::PluralFormat::init((_QWORD *)a1, 0, a3, (icu::UnifiedCache *)a5);
  icu::PluralFormat::applyPattern((icu::PluralFormat *)a1, a4, a5);
  return a1;
}

icu::PluralFormat *icu::PluralFormat::PluralFormat(icu::PluralFormat *this, const icu::PluralFormat *a2)
{
  _QWORD *v4;
  UErrorCode *v5;

  v4 = (_QWORD *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *v4 = off_1E2264BE8;
  icu::Locale::Locale((icu::Locale *)(v4 + 41), (uint64_t)a2 + 328);
  icu::MessagePattern::MessagePattern((icu::PluralFormat *)((char *)this + 552), (const icu::PluralFormat *)((char *)a2 + 552));
  *((_QWORD *)this + 85) = 0;
  *((_QWORD *)this + 86) = *((_QWORD *)a2 + 86);
  *((_QWORD *)this + 87) = off_1E2264C40;
  *((_QWORD *)this + 88) = 0;
  icu::PluralFormat::copyObjects(this, a2, v5);
  return this;
}

void *icu::PluralFormat::copyObjects(icu::PluralFormat *this, const icu::PluralFormat *a2, UErrorCode *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  icu::DecimalFormat *Instance;
  UErrorCode *v9;
  uint64_t *v10;
  icu::PluralRules *v11;
  void *result;
  int v13;

  v13 = 0;
  v5 = *((_QWORD *)this + 85);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 88);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)a2 + 85);
  if (v7)
    Instance = (icu::DecimalFormat *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  else
    Instance = icu::NumberFormat::createInstance((char **)this + 41, (UErrorCode *)&v13, a3);
  *((_QWORD *)this + 85) = Instance;
  v11 = (icu::PluralRules *)*((_QWORD *)a2 + 88);
  if (v11)
    result = icu::PluralRules::clone(v11, v10);
  else
    result = icu::PluralRules::forLocale((icu::PluralFormat *)((char *)this + 328), (const icu::Locale *)&v13, v9);
  *((_QWORD *)this + 88) = result;
  return result;
}

void icu::PluralFormat::~PluralFormat(icu::PluralFormat *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2264BE8;
  v2 = *((_QWORD *)this + 85);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 87) = off_1E2264C40;
  v3 = *((_QWORD *)this + 88);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::MessagePattern::~MessagePattern((icu::PluralFormat *)((char *)this + 552));
  icu::Locale::~Locale((icu::PluralFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  void *v1;

  icu::PluralFormat::~PluralFormat(this);
  icu::UMemory::operator delete(v1);
}

void icu::PluralFormat::PluralSelectorAdapter::~PluralSelectorAdapter(icu::PluralFormat::PluralSelectorAdapter *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E2264C40;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = off_1E2264C40;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2264C40;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UMemory::operator delete(this);
}

icu::UnicodeString *icu::PluralFormat::format(icu::PluralFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 > 0)
    return a3;
  if (!icu::Formattable::isNumeric(a2))
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return a3;
  }
  return icu::PluralFormat::format(this, a2, *((double *)a2 + 1), a3, a4, a5);
}

icu::UnicodeString *icu::PluralFormat::format(icu::PluralFormat *this, const icu::Formattable *a2, double a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  icu::UnicodeString *v6;
  double v11;
  icu::Format *v13;
  icu::DecimalFormat *v14;
  icu::number::LocalizedNumberFormatter *v15;
  void *v16;
  void *v17;
  UErrorCode *v18;
  int SubMessage;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  const icu::UnicodeString *v24;
  _DWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  const icu::UnicodeString *v29;
  int v30;
  icu::UnicodeString *v31;
  uint64_t v32;
  _BYTE v33[112];
  void (**v34)(icu::UnicodeString *__hidden);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[19];
  _OWORD v40[6];
  uint64_t v41;
  uint64_t v42;

  v6 = a4;
  v42 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 > 0)
    return v6;
  if (!*((_DWORD *)this + 162))
    return (icu::UnicodeString *)(*(uint64_t (**)(_QWORD, const icu::Formattable *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))(**((_QWORD **)this + 85) + 40))(*((_QWORD *)this + 85), a2, a4, a5, a6, a3);
  v11 = a3 - *((double *)this + 86);
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  memset(v39, 0, sizeof(v39));
  sub_18BCC2258((uint64_t)v39);
  if (*((double *)this + 86) == 0.0)
    icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v40, a6);
  else
    icu::number::impl::DecimalQuantity::setToDouble((void **)v40, v11);
  v35 = 0u;
  v38 = 0;
  v37 = 0u;
  v36 = 0u;
  v34 = off_1E2256B38;
  LOWORD(v35) = 2;
  v13 = (icu::Format *)*((_QWORD *)this + 85);
  if (!v13
  {
    if (*((double *)this + 86) == 0.0)
    {
      icu::Format::format(v13, a2, (icu::UnicodeString *)&v34, a6);
    }
    else
    {
      icu::Formattable::Formattable((icu::Formattable *)v33, v11);
      icu::Format::format(v13, (const icu::Formattable *)v33, (icu::UnicodeString *)&v34, a6);
      icu::Formattable::~Formattable((icu::Formattable *)v33);
    }
LABEL_15:
    SubMessage = icu::PluralFormat::findSubMessage((icu::PluralFormat *)((char *)this + 552), 0, (uint64_t)this + 696, (const icu::PluralFormat::PluralSelector *)v40, (int *)a6, a3, v18);
    v16 = (void *)*(unsigned int *)a6;
    if ((int)v16 <= 0)
    {
      LODWORD(v20) = SubMessage;
      v21 = *((_QWORD *)this + 80);
      v22 = *(_DWORD *)(v21 + 16 * SubMessage + 4) + *(unsigned __int16 *)(v21 + 16 * SubMessage + 8);
      while (1)
      {
        v20 = (int)v20 + 1;
        v23 = v21 + 16 * v20;
        v26 = *(_DWORD *)(v23 + 4);
        v25 = (_DWORD *)(v23 + 4);
        v24 = (const icu::UnicodeString *)v26;
        switch(*(_DWORD *)(v21 + 16 * v20))
        {
          case 1:
            v6 = (icu::UnicodeString *)icu::UnicodeString::doAppend((uint64_t)v6, (icu::PluralFormat *)((char *)this + 568), v22, ((_DWORD)v24 - v22));
            goto LABEL_30;
          case 2:
            if (*((_DWORD *)this + 140) != 1)
              goto LABEL_28;
            v27 = ((_DWORD)v24 - v22);
            v28 = (uint64_t)v6;
            v29 = (icu::PluralFormat *)((char *)this + 568);
            v30 = v22;
            goto LABEL_24;
          case 4:
            icu::UnicodeString::doAppend((uint64_t)v6, (icu::PluralFormat *)((char *)this + 568), v22, ((_DWORD)v24 - v22));
            if ((v35 & 0x8000u) == 0)
              v27 = (unsigned __int16)v35 >> 5;
            else
              v27 = DWORD1(v35);
            v29 = (const icu::UnicodeString *)&v34;
            v28 = (uint64_t)v6;
            v30 = 0;
LABEL_24:
            icu::UnicodeString::doAppend(v28, v29, v30, v27);
            v22 = *v25 + *(unsigned __int16 *)(v21 + 16 * v20 + 8);
            goto LABEL_28;
          case 5:
            icu::UnicodeString::doAppend((uint64_t)v6, (icu::PluralFormat *)((char *)this + 568), v22, ((_DWORD)v24 - v22));
            v32 = *((_QWORD *)this + 80);
            if (*(_DWORD *)(v32 + 16 * v20 + 12) > (int)v20)
              LODWORD(v20) = *(_DWORD *)(v32 + 16 * v20 + 12);
            v22 = *(_DWORD *)(v32 + 16 * (int)v20 + 4) + *(unsigned __int16 *)(v32 + 16 * (int)v20 + 8);
            icu::MessageImpl::appendReducedApostrophes((icu::PluralFormat *)((char *)this + 568), v24, v22, (uint64_t)v6, v31);
            goto LABEL_28;
          default:
LABEL_28:
            v21 = *((_QWORD *)this + 80);
            break;
        }
      }
    }
    goto LABEL_30;
  }
  v15 = (icu::number::LocalizedNumberFormatter *)icu::DecimalFormat::toNumberFormatter(v14, a6);
  v16 = (void *)*(unsigned int *)a6;
  if ((int)v16 <= 0)
  {
    icu::number::LocalizedNumberFormatter::formatImpl(v15, (icu::number::impl::UFormattedNumberData *)v39, a6);
    v16 = (void *)*(unsigned int *)a6;
    if ((int)v16 <= 0)
    {
      icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v39 + 8), (uint64_t)v33);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v34, (icu::UnicodeString *)v33);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v33);
      goto LABEL_15;
    }
  }
LABEL_30:
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v34);
  icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v39);
  return v6;
}

void icu::PluralFormat::format(icu::PluralFormat *this@<X0>, UErrorCode *a2@<X2>, int a3@<W1>, icu::UnicodeString *a4@<X8>)
{
  UChar **v8;
  void *v9;
  _QWORD v10[3];
  _BYTE v11[112];
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10[2] = 0;
  v10[0] = off_1E225EF78;
  v10[1] = 0xFFFFFFFFLL;
  v13 = 0u;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  icu::Formattable::Formattable((icu::Formattable *)v11, a3);
  v8 = (UChar **)icu::PluralFormat::format(this, (const icu::Formattable *)v11, (double)a3, (icu::UnicodeString *)&v12, (icu::FieldPosition *)v10, a2);
  icu::UnicodeString::UnicodeString(a4, v8);
  icu::Formattable::~Formattable((icu::Formattable *)v11);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v10);
}

void icu::PluralFormat::format(icu::PluralFormat *this@<X0>, double a2@<D0>, UErrorCode *a3@<X1>, icu::UnicodeString *a4@<X8>)
{
  UChar **v8;
  void *v9;
  _QWORD v10[3];
  _BYTE v11[112];
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10[2] = 0;
  v10[0] = off_1E225EF78;
  v10[1] = 0xFFFFFFFFLL;
  v13 = 0u;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  icu::Formattable::Formattable((icu::Formattable *)v11, a2);
  v8 = (UChar **)icu::PluralFormat::format(this, (const icu::Formattable *)v11, a2, (icu::UnicodeString *)&v12, (icu::FieldPosition *)v10, a3);
  icu::UnicodeString::UnicodeString(a4, v8);
  icu::Formattable::~Formattable((icu::Formattable *)v11);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v10);
}

icu::UnicodeString *icu::PluralFormat::format(icu::PluralFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  icu::UnicodeString *v10;
  _BYTE v12[112];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  icu::Formattable::Formattable((icu::Formattable *)v12, a2);
  v10 = icu::PluralFormat::format(this, (const icu::Formattable *)v12, (double)a2, a3, a4, a5);
  icu::Formattable::~Formattable((icu::Formattable *)v12);
  return v10;
}

icu::UnicodeString *icu::PluralFormat::format(icu::PluralFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  icu::UnicodeString *v10;
  _BYTE v12[112];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  icu::Formattable::Formattable((icu::Formattable *)v12, a2);
  v10 = icu::PluralFormat::format(this, (const icu::Formattable *)v12, a2, a3, a4, a5);
  icu::Formattable::~Formattable((icu::Formattable *)v12);
  return v10;
}

uint64_t icu::PluralFormat::findSubMessage(icu::PluralFormat *this, const icu::MessagePattern *a2, uint64_t a3, const icu::PluralFormat::PluralSelector *a4, int *a5, double a6, UErrorCode *a7)
{
  uint64_t v7;
  int v12;
  int v14;
  _DWORD *v15;
  double NumericValue;
  BOOL v17;
  double v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  void *v25;
  int32_t v26;
  int v27;
  unint64_t v28;
  int v29;
  int32_t v30;
  int v31;
  unint64_t v32;
  int v33;
  _BOOL4 v34;
  void *v35;
  void *v37;
  _QWORD v38[8];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void (**v43)(icu::UnicodeString *__hidden);
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    v12 = (int)a2;
    v14 = *((_DWORD *)this + 24);
    v15 = (_DWORD *)(*((_QWORD *)this + 11) + 16 * (int)a2);
    NumericValue = 0.0;
    if ((*v15 & 0xFFFFFFFE) == 0xC)
    {
      NumericValue = icu::MessagePattern::getNumericValue((uint64_t)this, (uint64_t)v15);
      ++v12;
    }
    v44 = 0u;
    v46 = 0u;
    v45 = 0u;
    v47 = 0;
    v43 = off_1E2256B38;
    LOWORD(v44) = 2;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = &unk_18BE29652;
    icu::UnicodeString::UnicodeString(&v39, 0, &v37);
    v17 = 0;
    v7 = 0;
    v18 = a6 - NumericValue;
    v19 = (char *)*((_QWORD *)this + 11);
    while (1)
    {
      v20 = &v19[16 * v12];
      if (*(_DWORD *)v20 == 6)
      {
LABEL_51:
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v39);
        icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v43);
        return v7;
      }
      v21 = v12 + 1;
      v22 = &v19[16 * v21];
      if ((*(_DWORD *)v22 & 0xFFFFFFFE) == 0xC)
      {
        v23 = (v12 + 2);
        if (icu::MessagePattern::getNumericValue((uint64_t)this, (uint64_t)v22) == a6)
        {
          v7 = v23;
          goto LABEL_51;
        }
        v21 = (int)v23;
      }
      else
      {
        LODWORD(v23) = v12 + 1;
        if (v17)
          goto LABEL_11;
        if (sub_18BCFDDA4((uint64_t)this, (uint64_t)v20, (uint64_t)&v39))
        {
          if ((_DWORD)v7)
          {
            v17 = 0;
          }
          else
          {
            if ((BYTE8(v39) & 1) != 0)
            {
              v33 = (v44 & 1) == 0;
            }
            else
            {
              if ((v44 & 0x8000u) == 0)
                v30 = (unsigned __int16)v44 >> 5;
              else
                v30 = DWORD1(v44);
              if ((SWORD4(v39) & 0x8000u) == 0)
                v31 = WORD4(v39) >> 5;
              else
                v31 = HIDWORD(v39);
              if ((BYTE8(v39) & 2) != 0)
                v32 = (unint64_t)&v39 | 0xA;
              else
                v32 = *((_QWORD *)&v40 + 1);
              v33 = icu::UnicodeString::doCompare((uint64_t)&v43, 0, v30, v32, v31 & (v31 >> 31), v31 & ~(v31 >> 31));
            }
            v17 = v33 == 0;
            v7 = v21;
          }
          goto LABEL_12;
        }
        if ((unsigned __int16)v44 <= 0x1Fu
          && ((*(void (**)(_QWORD *__return_ptr, uint64_t, const icu::PluralFormat::PluralSelector *, int *, double))(*(_QWORD *)a3 + 16))(v38, a3, a4, a5, v18), icu::UnicodeString::operator=((icu::UnicodeString *)&v43, (icu::UnicodeString *)v38), icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v38), (_DWORD)v7)&& ((BYTE8(v39) & 1) != 0? (v29 = (v44 & 1) == 0): ((v44 & 0x8000u) == 0 ? (v26 = (unsigned __int16)v44 >> 5) : (v26 = DWORD1(v44)), (SWORD4(v39) & 0x8000u) == 0 ? (v27 = WORD4(v39) >> 5) : (v27 = HIDWORD(v39)), (BYTE8(v39) & 2) != 0 ? (v28 = (unint64_t)&v39 | 0xA) : (v28 = *((_QWORD *)&v40 + 1)), v29 = icu::UnicodeString::doCompare((uint64_t)&v43, 0, v26, v28, v27 & (v27 >> 31),
                       v27 & ~(v27 >> 31))),
              !v29))
        {
LABEL_11:
          v17 = 1;
        }
        else
        {
          v34 = sub_18BCFDDA4((uint64_t)this, (uint64_t)v20, (uint64_t)&v43);
          v17 = v34;
          if (v34)
            v7 = v21;
          else
            v7 = v7;
        }
      }
LABEL_12:
      v19 = (char *)*((_QWORD *)this + 11);
      v24 = *(_DWORD *)&v19[16 * v21 + 12];
      if (v24 <= (int)v23)
        v24 = v23;
      v12 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_51;
    }
  }
  return 0;
}

icu::UnicodeString *icu::PluralFormat::toPattern(icu::PluralFormat *this, icu::UnicodeString *a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;

  if (*((_DWORD *)this + 162))
  {
    v3 = *((unsigned __int16 *)this + 288);
    v4 = (__int16)v3;
    v5 = v3 >> 5;
    if (v4 >= 0)
      v6 = v5;
    else
      v6 = *((unsigned int *)this + 145);
    icu::UnicodeString::doAppend((uint64_t)a2, (icu::PluralFormat *)((char *)this + 568), 0, v6);
  }
  else
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

_QWORD *icu::PluralFormat::setLocale(_QWORD *this, const icu::Locale *a2, UErrorCode *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    icu::Locale::operator=((icu::Locale *)(this + 41), (uint64_t)a2);
    icu::MessagePattern::clear((uint64_t)(v4 + 69));
    v5 = v4[85];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v4[85] = 0;
    v4[86] = 0;
    v6 = v4[88];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v4[88] = 0;
    return icu::PluralFormat::init(v4, 0, 0, (icu::UnifiedCache *)a3);
  }
  return this;
}

uint64_t icu::PluralFormat::PluralSelectorAdapter::reset(icu::PluralFormat::PluralSelectorAdapter *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 1) = 0;
  return result;
}

uint64_t icu::PluralFormat::setNumberFormat(uint64_t this, const icu::NumberFormat *a2, UErrorCode *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    this = (*(uint64_t (**)(const icu::NumberFormat *))(*(_QWORD *)a2 + 32))(a2);
    if (this)
    {
      v5 = this;
      this = *(_QWORD *)(v4 + 680);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      *(_QWORD *)(v4 + 680) = v5;
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

icu::PluralFormat *icu::PluralFormat::clone@<X0>(icu::PluralFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::PluralFormat *result;

  result = (icu::PluralFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x2C8, a2);
  if (result)
    return icu::PluralFormat::PluralFormat(result, this);
  return result;
}

const icu::PluralFormat *icu::PluralFormat::operator=(const icu::PluralFormat *a1, const icu::PluralFormat *a2)
{
  UErrorCode *v4;

  if (a1 != a2)
  {
    icu::Locale::operator=((const icu::PluralFormat *)((char *)a1 + 328), (uint64_t)a2 + 328);
    icu::MessagePattern::operator=((uint64_t)a1 + 552, (uint64_t)a2 + 552);
    *((_QWORD *)a1 + 86) = *((_QWORD *)a2 + 86);
    icu::PluralFormat::copyObjects(a1, a2, v4);
  }
  return a1;
}

uint64_t icu::PluralFormat::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 == a2)
    return 1;
  result = icu::Format::operator==(a1, a2);
  if ((_DWORD)result)
  {
    result = icu::Locale::operator==((uint64_t)(a1 + 41), (uint64_t)(a2 + 41));
    if ((_DWORD)result)
    {
      result = icu::MessagePattern::operator==((uint64_t)(a1 + 69), (uint64_t)(a2 + 69));
      if ((_DWORD)result)
      {
        v5 = a1[85];
        if ((v5 == 0) == (a2[85] != 0))
        {
          return 0;
        }
        else if (!v5 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5), (_DWORD)result))
        {
          v6 = a1[88];
          v7 = a2[88];
          result = (v6 == 0) == (v7 == 0);
          if (v6)
          {
            if (v7)
              return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 24))(a1[88]);
          }
        }
      }
    }
  }
  return result;
}

uint64_t icu::PluralFormat::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
}

void icu::PluralFormat::parseObject(icu::PluralFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  *((_DWORD *)a4 + 3) = *((_DWORD *)a4 + 2);
}

double icu::PluralFormat::parseType(uint64_t a1, uint64_t a2, uint64_t a3, icu::Formattable *a4, uint64_t a5)
{
  int v6;
  _DWORD *v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  char *v18;
  _DWORD *v19;
  int v20;
  unsigned int v21;
  int v22;
  char v23;
  int32_t v24;
  int v25;
  unint64_t v26;
  char v27;
  int32_t v28;
  int v29;
  __int128 *v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  void *v36;
  int v37;
  void *v38;
  double result;
  int v41;
  icu::UnicodeString *v42;
  unsigned int v44[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  UChar *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  UChar *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 648);
  if (!v6)
  {
    result = NAN;
    *(_QWORD *)(a5 + 12) = -1;
    return result;
  }
  v7 = (_DWORD *)*(unsigned int *)(a5 + 12);
  v55 = 0u;
  v58 = 0;
  v57 = 0u;
  v56 = 0u;
  v54 = (UChar *)off_1E2256B38;
  LOWORD(v55) = 2;
  v50 = 0u;
  v53 = 0;
  v52 = 0u;
  v51 = 0u;
  v49 = (UChar *)off_1E2256B38;
  LOWORD(v50) = 2;
  if (v6 < 1)
  {
LABEL_70:
    *(_QWORD *)(a5 + 12) = -1;
    goto LABEL_71;
  }
  v10 = 0;
  v11 = v7 & ~((int)v7 >> 31);
  v42 = (icu::UnicodeString *)(a1 + 568);
  v41 = -1;
  do
  {
    v12 = v10 + 1;
    v7 = *(_DWORD **)(a1 + 640);
    if (v7[4 * v10] != 11)
    {
      ++v10;
      continue;
    }
    v13 = v10 + 2;
    if (v7[4 * v12])
    {
      v10 += 2;
      continue;
    }
    v10 += 3;
    if (v7[4 * v13] == 1)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v14 = (char *)&v7[4 * v12];
      v16 = *((_DWORD *)v14 + 1);
      v15 = v14 + 4;
      v17 = v16 + *((unsigned __int16 *)v15 + 2);
      v18 = (char *)&v7[4 * v13];
      v20 = *((_DWORD *)v18 + 1);
      v19 = v18 + 4;
      icu::UnicodeString::tempSubString(v42, v17, v20 - v17, (icu::UnicodeString *)&v45);
      v21 = *(unsigned __int16 *)(a2 + 8);
      if (a3)
      {
        if ((v21 & 0x8000) != 0)
        {
          v22 = *(_DWORD *)(a2 + 12);
          v23 = BYTE8(v45);
          if ((SWORD4(v45) & 0x8000u) == 0)
            v24 = WORD4(v45) >> 5;
          else
            v24 = HIDWORD(v45);
          if (v22 >= (int)v11)
            v25 = v11;
          else
            v25 = *(_DWORD *)(a2 + 12);
          if ((BYTE8(v45) & 1) != 0)
            goto LABEL_42;
        }
        else
        {
          v22 = v21 >> 5;
          v23 = BYTE8(v45);
          if ((SWORD4(v45) & 0x8000u) == 0)
            v24 = WORD4(v45) >> 5;
          else
            v24 = HIDWORD(v45);
          if (v11 >= v21 >> 5)
            v25 = v21 >> 5;
          else
            v25 = v11;
          if ((BYTE8(v45) & 1) != 0)
          {
LABEL_42:
            v44[0] = -1;
            v32 = sub_18BD06334(a3, a2, (uint64_t)&v45, v11, v44);
LABEL_55:
            v31 = v32;
            goto LABEL_56;
          }
        }
        if (v24 >= 1)
        {
          v30 = (v23 & 2) != 0 ? (__int128 *)((char *)&v45 + 10) : (__int128 *)*((_QWORD *)&v46 + 1);
          v31 = icu::UnicodeString::indexOf(a2, (uint64_t)v30, 0, v24, v25, v22 - v25);
          if ((v31 & 0x80000000) == 0)
          {
LABEL_56:
            if ((v31 & 0x80000000) == 0)
            {
              v26 = v41;
              if (v31 >= v41)
              {
                LODWORD(v26) = WORD4(v45) >> 5;
                if ((SWORD4(v45) & 0x8000u) == 0)
                  v26 = v26;
                else
                  v26 = HIDWORD(v45);
                v34 = (unsigned __int16)v50 >> 5;
                if ((v50 & 0x8000u) != 0)
                  v34 = DWORD1(v50);
                if ((int)v26 > v34)
                {
                  icu::UnicodeString::operator=(&v49, (UChar **)&v45);
                  v35 = *(_DWORD *)v15 + *((unsigned __int16 *)v15 + 2);
                  icu::UnicodeString::tempSubString(v42, v35, *v19 - v35, (icu::UnicodeString *)v44);
                  icu::UnicodeString::operator=((icu::UnicodeString *)&v54, (icu::UnicodeString *)v44);
                  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v44);
                  v41 = v31;
                }
              }
            }
            goto LABEL_65;
          }
        }
        goto LABEL_42;
      }
      if ((v21 & 0x8000) != 0)
      {
        v26 = *(unsigned int *)(a2 + 12);
        v27 = BYTE8(v45);
        if ((SWORD4(v45) & 0x8000u) == 0)
          v28 = WORD4(v45) >> 5;
        else
          v28 = HIDWORD(v45);
        if ((int)v26 >= (int)v11)
          v29 = v11;
        else
          v29 = *(_DWORD *)(a2 + 12);
        if ((BYTE8(v45) & 1) != 0)
          goto LABEL_65;
      }
      else
      {
        v26 = v21 >> 5;
        v27 = BYTE8(v45);
        if ((SWORD4(v45) & 0x8000u) == 0)
          v28 = WORD4(v45) >> 5;
        else
          v28 = HIDWORD(v45);
        if (v11 >= v21 >> 5)
          v29 = v21 >> 5;
        else
          v29 = v11;
        if ((BYTE8(v45) & 1) != 0)
          goto LABEL_65;
      }
      if (v28 >= 1)
      {
        if ((v27 & 2) != 0)
          v33 = (char *)&v45 + 10;
        else
          v33 = (char *)*((_QWORD *)&v46 + 1);
        v32 = icu::UnicodeString::indexOf(a2, (uint64_t)v33, 0, v28, v29, (int)v26 - v29);
        goto LABEL_55;
      }
LABEL_65:
      icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&v45);
    }
  }
  while (v10 < v6);
  if (v41 < 0)
    goto LABEL_70;
  v37 = (unsigned __int16)v50 >> 5;
  if ((v50 & 0x8000u) != 0)
    v37 = DWORD1(v50);
  *(_DWORD *)(a5 + 12) = v41;
  *(_DWORD *)(a5 + 16) = v37 + v41;
  icu::Formattable::setString(a4, &v54);
LABEL_71:
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v49);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v54);
  return result;
}

icu::UnicodeString *icu::PluralFormat::PluralSelectorAdapter::select@<X0>(icu::PluralRules **this@<X0>, const icu::IFixedDecimal *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  return icu::PluralRules::select(this[1], a2, a3);
}

void *icu::PluralRules::getStaticClassID(icu::PluralRules *this)
{
  return &unk_1EE009C61;
}

void *icu::PluralRules::getDynamicClassID(icu::PluralRules *this)
{
  return &unk_1EE009C61;
}

void *sub_18BD3FFA8()
{
  return &unk_1EE009C62;
}

uint64_t icu::PluralRules::PluralRules(uint64_t this, UErrorCode *a2)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E2264CD8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E2264CD8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t icu::PluralRules::PluralRules(uint64_t this, unint64_t a2)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E2264CD8;
  *(_DWORD *)(this + 24) = 0;
  return icu::PluralRules::operator=(this, a2);
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E2264CD8;
  *(_DWORD *)(this + 24) = 0;
  return icu::PluralRules::operator=(this, a2);
}

uint64_t icu::PluralRules::operator=(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 8) = 0;
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 12))
        uprv_free(*(void **)v5);
      icu::UMemory::operator delete((void *)v5);
    }
    v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6 <= 0)
    {
      v8 = *(uint64_t **)(a2 + 8);
      if (v8)
      {
        v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0xE0, a2);
        if (v9)
        {
          v10 = sub_18BD43A84((uint64_t)v9, *(_QWORD *)(a2 + 8));
          *(_QWORD *)(a1 + 8) = v10;
          v11 = *(_DWORD *)(v10 + 220);
          if (v11 < 1)
            goto LABEL_16;
        }
        else
        {
          *(_QWORD *)(a1 + 8) = 0;
          v11 = 7;
        }
        *(_DWORD *)(a1 + 24) = v11;
      }
LABEL_16:
      v12 = *(_QWORD *)(a2 + 16);
      if (v12)
      {
        sub_18BD3DF2C(v12, (_DWORD *)(a1 + 24), (uint64_t)&v14);
        sub_18BD3DFF0((uint64_t)&v14, (int *)(a1 + 24), &v16);
        v13 = v16;
        v16 = 0;
        *(_QWORD *)(a1 + 16) = v13;
        sub_18BBCBB54(&v16);
        if (v15)
          uprv_free(v14);
      }
    }
  }
  return a1;
}

void icu::PluralRules::~PluralRules(icu::PluralRules *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2264CD8;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 12))
      uprv_free(*(void **)v3);
    icu::UMemory::operator delete((void *)v3);
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::PluralRules::~PluralRules(this);
  icu::UMemory::operator delete(v1);
}

void icu::SharedPluralRules::~SharedPluralRules(icu::SharedPluralRules *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2264D08;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2264D08;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2264D08;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
  icu::UMemory::operator delete(v3);
}

_DWORD *icu::PluralRules::clone@<X0>(icu::PluralRules *this@<X0>, uint64_t *a2@<X8>)
{
  UErrorCode v3;

  v3 = U_ZERO_ERROR;
  return icu::PluralRules::clone(this, &v3, a2);
}

_DWORD *icu::PluralRules::clone@<X0>(icu::PluralRules *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  _DWORD *result;
  UErrorCode v7;

  v5 = icu::UMemory::operator new(a3, (icu::UMemory *)0x20, (unint64_t)a2);
  if (v5)
  {
    v5[1] = 0;
    v5[2] = 0;
    *v5 = (uint64_t)off_1E2264CD8;
    *((_DWORD *)v5 + 6) = 0;
    result = (_DWORD *)icu::PluralRules::operator=((uint64_t)v5, (unint64_t)this);
    if (*(int *)a2 <= 0)
    {
      v7 = result[6];
      if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        *a2 = v7;
        (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
        return 0;
      }
    }
  }
  else
  {
    if (*(int *)a2 > 0)
      return 0;
    result = 0;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

icu::PluralAvailableLocalesEnumeration *icu::PluralRules::getAvailableLocales(UErrorCode *this, UErrorCode *a2)
{
  uint64_t *v2;
  icu::PluralAvailableLocalesEnumeration *result;
  icu::PluralAvailableLocalesEnumeration *v5;

  v2 = (uint64_t *)*(unsigned int *)this;
  if ((int)v2 > 0)
    return 0;
  v5 = (icu::PluralAvailableLocalesEnumeration *)icu::UMemory::operator new(v2, (icu::UMemory *)0x88, (unint64_t)a2);
  if (!v5)
  {
    if (*(int *)this <= 0)
    {
      result = 0;
      *this = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    return 0;
  }
  result = icu::PluralAvailableLocalesEnumeration::PluralAvailableLocalesEnumeration(v5, this);
  if (*(int *)this >= 1)
  {
    (*(void (**)(icu::PluralAvailableLocalesEnumeration *))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t *icu::PluralRules::createRules(icu::PluralRules *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (**v9)();
  __int128 v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    v11[1] = 2;
    v14 = 0u;
    v13 = 0u;
    v12 = 0u;
    v10 = 0u;
    v9 = off_1E2264D90;
    v11[0] = off_1E2256B38;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v18 = -1;
    v6 = icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v6)
    {
      v3 = v6;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = (uint64_t)off_1E2264CD8;
      *((_DWORD *)v6 + 6) = 0;
      if (*(int *)a2 <= 0)
      {
        sub_18BD404F8((uint64_t)&v9, (uint64_t)this, (uint64_t)v6, (int *)a2);
        v7 = *(unsigned int *)a2;
        if ((int)v7 < 1)
          goto LABEL_9;
      }
      (*(void (**)(uint64_t *))(*v3 + 8))(v3);
    }
    else
    {
      v7 = *(unsigned int *)a2;
      if ((int)v7 <= 0)
      {
        v3 = 0;
        v7 = 7;
        *(_DWORD *)a2 = 7;
        goto LABEL_9;
      }
    }
    v3 = 0;
LABEL_9:
    v9 = off_1E2264D90;
    icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v11);
    return v3;
  }
  return 0;
}

void sub_18BD404F8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  UChar **v6;
  uint64_t **v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  const char **v31;
  uint64_t v32;
  uint64_t **v33;
  int32_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  icu::UVector32 *v40;
  icu::UVector32 *v41;
  int v42;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  const char *v67;

  if (*a4 > 0)
    return;
  *(_QWORD *)(a1 + 8) = a2;
  v6 = (UChar **)(a1 + 24);
  v7 = (uint64_t **)(a3 + 8);
  while (2)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (*(__int16 *)(v8 + 8) < 0)
      v9 = *(_DWORD *)(v8 + 12);
    else
      v9 = *(unsigned __int16 *)(v8 + 8) >> 5;
    if (*(_DWORD *)(a1 + 16) >= v9)
      return;
    sub_18BD42690((int *)a1, a4);
    if (*a4 > 0)
      return;
    sub_18BD429CC(a1, a4);
    v11 = *a4;
    if ((int)v11 > 0)
      return;
    v12 = *(_DWORD *)(a1 + 88);
    switch(v12)
    {
      case 1:
        v13 = *(_QWORD *)(a1 + 96);
        if (*(_DWORD *)(v13 + 8) == 1 && *(_DWORD *)(v13 + 12) == -1)
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 96) + 12) = sub_18BD42C54((uint64_t)v6);
          goto LABEL_117;
        }
        v14 = *(_QWORD *)(v13 + 24);
        if (!v14)
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 96) + 16) = sub_18BD42C54((uint64_t)v6);
          goto LABEL_117;
        }
        v15 = *(unsigned int *)(a1 + 112);
        if ((v15 & 0x80000000) == 0)
        {
          v16 = *(_DWORD *)(v14 + 8);
          v17 = v16 < 1 || v16 <= (int)v15;
          if (!v17 && *(_DWORD *)(*(_QWORD *)(v14 + 24) + 4 * v15) == -1)
          {
            v63 = sub_18BD42C54((uint64_t)v6);
            icu::UVector32::setElementAt(v14, v63, *(_DWORD *)(a1 + 112));
            v64 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
            v65 = sub_18BD42C54((uint64_t)v6);
            icu::UVector32::setElementAt(v64, v65, *(_DWORD *)(a1 + 116));
            goto LABEL_117;
          }
        }
        v18 = sub_18BD42C54((uint64_t)v6);
        icu::UVector32::setElementAt(v14, v18, *(_DWORD *)(a1 + 116));
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
        v20 = *(unsigned int *)(a1 + 112);
        if ((v20 & 0x80000000) != 0)
        {
          v21 = 0;
        }
        else
        {
          v21 = 0;
          v22 = *(_DWORD *)(v19 + 8);
          if (v22 >= 1 && v22 > (int)v20)
            v21 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 4 * v20);
        }
        v60 = *(unsigned int *)(a1 + 116);
        if ((v60 & 0x80000000) != 0)
        {
          v61 = 0;
        }
        else
        {
          v61 = 0;
          v62 = *(_DWORD *)(v19 + 8);
          if (v62 >= 1 && v62 > (int)v60)
            v61 = *(_DWORD *)(*(_QWORD *)(v19 + 24) + 4 * v60);
        }
        if (v21 > v61)
          goto LABEL_121;
        goto LABEL_117;
      case 2:
        v23 = *(_QWORD *)(a1 + 96);
        if (v23)
        {
          v24 = *(_QWORD *)(v23 + 24);
          if (v24)
          {
            v25 = *(_DWORD *)(v24 + 8);
            *(_DWORD *)(a1 + 112) = v25;
            if (v25 >= -1 && *(_DWORD *)(v24 + 12) > v25)
              goto LABEL_31;
            if (icu::UVector32::expandCapacity((icu::UVector32 *)v24, v25 + 1, (UErrorCode *)a4))
            {
              v25 = *(_DWORD *)(v24 + 8);
LABEL_31:
              *(_DWORD *)(*(_QWORD *)(v24 + 24) + 4 * v25) = -1;
              ++*(_DWORD *)(v24 + 8);
            }
            v26 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
            v27 = *(_DWORD *)(v26 + 8);
            *(_DWORD *)(a1 + 116) = v27;
            if (v27 < -1 || *(_DWORD *)(v26 + 12) <= v27)
            {
              if (!icu::UVector32::expandCapacity((icu::UVector32 *)v26, v27 + 1, (UErrorCode *)a4))
                goto LABEL_117;
              v27 = *(_DWORD *)(v26 + 8);
            }
            *(_DWORD *)(*(_QWORD *)(v26 + 24) + 4 * v27) = -1;
            ++*(_DWORD *)(v26 + 8);
LABEL_117:
            LODWORD(v11) = *a4;
LABEL_118:
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 88);
            if ((int)v11 >= 1)
              return;
            continue;
          }
        }
LABEL_121:
        v66 = 65792;
LABEL_124:
        *a4 = v66;
LABEL_125:
        *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 88);
        return;
      case 10:
        v28 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0xE0, v10);
        if (!v28)
          goto LABEL_123;
        v29 = v28;
        v28[1] = (uint64_t)off_1E2256B38;
        *v28 = (uint64_t)off_1E2264D70;
        *((_WORD *)v28 + 8) = 2;
        v28[9] = 0;
        v28[10] = 0;
        v28[11] = (uint64_t)off_1E2256B38;
        *((_WORD *)v28 + 48) = 2;
        v28[19] = (uint64_t)off_1E2256B38;
        *((_WORD *)v28 + 80) = 2;
        *((_WORD *)v28 + 108) = 0;
        *((_DWORD *)v28 + 55) = 0;
        icu::UnicodeString::operator=((UChar **)v28 + 1, v6);
        v32 = (uint64_t)*v7;
        v33 = v7;
        if (!*v7)
          goto LABEL_106;
        while (1)
        {
          v31 = *(const char ***)(v32 + 72);
          v7 = (uint64_t **)(v32 + 72);
          if (!v31)
            break;
          if ((__int16)v31[2] < 0)
            v34 = *((_DWORD *)v31 + 5);
          else
            v34 = *((unsigned __int16 *)v31 + 8) >> 5;
          v35 = icu::UnicodeString::doCompare((uint64_t)(v31 + 1), 0, v34, (uint64_t)"o", 0, 5);
          v67 = "o";
          v31 = &v67;
          v32 = (uint64_t)*v7;
          if (!v35)
            goto LABEL_105;
        }
        v32 = 0;
LABEL_105:
        v29[9] = v32;
LABEL_106:
        *v7 = v29;
        v58 = icu::UMemory::operator new((uint64_t *)v31, (icu::UMemory *)0x20, v30);
        if (!v58)
          goto LABEL_123;
        v58[2] = 0;
        v58[3] = 0;
        *v58 = (uint64_t)off_1E2264D50;
        v58[1] = 0;
        *((_DWORD *)v58 + 6) = 0;
        v29[10] = (uint64_t)v58;
        sub_18BD42BC4((uint64_t)v58, a4);
        *(_QWORD *)(a1 + 96) = v59;
        *(_QWORD *)(a1 + 104) = v29;
        v7 = v33;
        goto LABEL_117;
      case 11:
        sub_18BD42B3C(*(_QWORD *)(a1 + 96), a4);
        goto LABEL_50;
      case 12:
        v37 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 80);
        do
        {
          v38 = v37;
          v37 = *(_QWORD *)(v37 + 16);
        }
        while (v37);
        v39 = icu::UMemory::operator new(0, (icu::UMemory *)0x20, v10);
        if (!v39)
        {
          *(_QWORD *)(v38 + 16) = 0;
LABEL_123:
          v66 = 7;
          goto LABEL_124;
        }
        v39[2] = 0;
        v39[3] = 0;
        *v39 = (uint64_t)off_1E2264D50;
        v39[1] = 0;
        *((_DWORD *)v39 + 6) = 0;
        *(_QWORD *)(v38 + 16) = v39;
        v39[2] = 0;
        sub_18BD42BC4((uint64_t)v39, a4);
LABEL_50:
        *(_QWORD *)(a1 + 96) = v36;
        goto LABEL_117;
      case 13:
        *(_DWORD *)(*(_QWORD *)(a1 + 96) + 8) = 1;
        goto LABEL_117;
      case 14:
        *(_BYTE *)(*(_QWORD *)(a1 + 96) + 32) = 1;
        goto LABEL_117;
      case 15:
      case 16:
      case 19:
        goto LABEL_54;
      case 17:
        v11 = *(_QWORD *)(a1 + 96);
        *(_BYTE *)(v11 + 32) = 1;
LABEL_54:
        v40 = (icu::UVector32 *)icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x20, v10);
        if (v40)
        {
          v41 = v40;
          icu::UVector32::UVector32(v40, (UErrorCode *)a4);
          if (*a4 > 0)
          {
            (*(void (**)(icu::UVector32 *))(*(_QWORD *)v41 + 8))(v41);
            goto LABEL_117;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24) = v41;
          v54 = *((_DWORD *)v41 + 2);
          if (v54 >= -1 && *((_DWORD *)v41 + 3) > v54)
          {
LABEL_97:
            *(_DWORD *)(*((_QWORD *)v41 + 3) + 4 * v54) = -1;
            ++*((_DWORD *)v41 + 2);
          }
          else if (icu::UVector32::expandCapacity(v41, v54 + 1, (UErrorCode *)a4))
          {
            v54 = *((_DWORD *)v41 + 2);
            goto LABEL_97;
          }
          v55 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 24);
          v56 = *(_DWORD *)(v55 + 8);
          if (v56 >= -1 && *(_DWORD *)(v55 + 12) > v56)
          {
LABEL_102:
            *(_DWORD *)(*(_QWORD *)(v55 + 24) + 4 * v56) = -1;
            ++*(_DWORD *)(v55 + 8);
          }
          else if (icu::UVector32::expandCapacity(*(icu::UVector32 **)(*(_QWORD *)(a1 + 96) + 24), v56 + 1, (UErrorCode *)a4))
          {
            v56 = *(_DWORD *)(v55 + 8);
            goto LABEL_102;
          }
          *(_QWORD *)(a1 + 112) = 0x100000000;
          v57 = *(_QWORD *)(a1 + 96);
          *(_DWORD *)(v57 + 16) = 0x7FFFFFFF;
          *(_BYTE *)(v57 + 33) = *(_DWORD *)(a1 + 88) != 19;
          goto LABEL_117;
        }
        if (*a4 <= 0)
          *a4 = 7;
        goto LABEL_117;
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        *(_DWORD *)(*(_QWORD *)(a1 + 96) + 36) = v12;
        goto LABEL_117;
      case 28:
        sub_18BD42690((int *)a1, a4);
        if (*a4 > 0)
          goto LABEL_125;
        while (2)
        {
          v42 = *(_DWORD *)(a1 + 88);
          if (v42 > 8)
          {
            if (v42 == 9)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 104) + 216) = 1;
            }
            else
            {
              if (v42 == 30)
                goto LABEL_117;
LABEL_70:
              v44 = *(unsigned __int16 *)(a1 + 32);
              v45 = (__int16)v44;
              v46 = v44 >> 5;
              if (v45 >= 0)
                v47 = v46;
              else
                v47 = *(unsigned int *)(a1 + 36);
              icu::UnicodeString::doAppend(*(_QWORD *)(a1 + 104) + 88, (const icu::UnicodeString *)v6, 0, v47);
            }
            sub_18BD42690((int *)a1, a4);
            if (*a4 >= 1)
              goto LABEL_125;
            continue;
          }
          break;
        }
        if (v42 != 3 && v42 != 6)
          goto LABEL_70;
        goto LABEL_117;
      case 29:
        sub_18BD42690((int *)a1, a4);
        if (*a4 > 0)
          goto LABEL_125;
        while (2)
        {
          v48 = *(_DWORD *)(a1 + 88);
          if (v48 > 8)
          {
            if (v48 == 9)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 104) + 217) = 1;
            }
            else
            {
              if (v48 == 30)
                goto LABEL_117;
LABEL_87:
              v50 = *(unsigned __int16 *)(a1 + 32);
              v51 = (__int16)v50;
              v52 = v50 >> 5;
              if (v51 >= 0)
                v53 = v52;
              else
                v53 = *(unsigned int *)(a1 + 36);
              icu::UnicodeString::doAppend(*(_QWORD *)(a1 + 104) + 152, (const icu::UnicodeString *)v6, 0, v53);
            }
            sub_18BD42690((int *)a1, a4);
            if (*a4 >= 1)
              goto LABEL_125;
            continue;
          }
          break;
        }
        if (v48 != 3 && v48 != 6)
          goto LABEL_87;
        goto LABEL_117;
      default:
        goto LABEL_118;
    }
  }
}

_QWORD *sub_18BD40C68(_QWORD *a1)
{
  *a1 = off_1E2264D90;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 3));
  return a1;
}

uint64_t *icu::PluralRules::createDefaultRules(icu::PluralRules *this, UErrorCode *a2)
{
  UErrorCode *v3;
  uint64_t *Rules;
  void *v5;
  const __int16 *v7;
  _BYTE v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = L"other: n";
  icu::UnicodeString::UnicodeString(v8, 1, &v7);
  Rules = icu::PluralRules::createRules((icu::PluralRules *)v8, this, v3);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v8);
  return Rules;
}

uint64_t *icu::LocaleCacheKey<icu::SharedPluralRules>::createObject(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v9;
  _BYTE v10[224];
  uint64_t *v11;

  v11 = (uint64_t *)*MEMORY[0x1E0C80C00];
  icu::Locale::Locale(v11, (icu::Locale *)v10, *(const char **)(a1 + 56), 0, 0, 0);
  v4 = icu::PluralRules::internalForLocale((icu::Locale *)v10, 0, a3);
  if (!v4 && *a3 <= 0)
    *a3 = 7;
  icu::Locale::~Locale((icu::Locale *)v10);
  v6 = (uint64_t *)*a3;
  if ((int)v6 <= 0)
  {
    v9 = icu::UMemory::operator new(v6, (icu::UMemory *)0x20, v5);
    if (v9)
    {
      v7 = v9;
      *v9 = (uint64_t)off_1E2264D08;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = (uint64_t)v4;
      if (*a3 <= 0)
      {
        icu::SharedObject::addRef((uint64_t)v9);
        return v7;
      }
      (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    }
    else if (*a3 <= 0)
    {
      *a3 = 7;
    }
  }
  if (v4)
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
  return 0;
}

uint64_t *icu::PluralRules::internalForLocale(icu::Locale *a1, unint64_t a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v6;
  int v7;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t (**v20)();
  __int128 v21;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[4];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)*a3;
  if ((int)v3 > 0)
    return 0;
  v6 = a2;
  if ((int)a2 >= 2)
  {
    v4 = 0;
    v7 = 1;
LABEL_5:
    *a3 = v7;
    return v4;
  }
  v10 = icu::UMemory::operator new(v3, (icu::UMemory *)0x20, a2);
  if (!v10)
  {
    if (*a3 <= 0)
    {
      v4 = 0;
      v7 = 7;
      goto LABEL_5;
    }
    return 0;
  }
  v4 = v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = (uint64_t)off_1E2264CD8;
  *((_DWORD *)v10 + 6) = 0;
  if (*a3 > 0)
  {
LABEL_9:
    (*(void (**)(uint64_t *))(*v4 + 8))(v4);
    return 0;
  }
  memset(v30, 0, sizeof(v30));
  icu::PluralRules::getRuleFromResource(a1, v6, a3, (uint64_t)v30);
  v11 = WORD4(v30[0]) >> 5;
  if (SWORD4(v30[0]) < 0)
    v11 = HIDWORD(v30[0]);
  if (!v11)
  {
    v12 = *a3;
    if ((_DWORD)v12 == 7)
    {
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v30);
      goto LABEL_9;
    }
    icu::UnicodeString::UnicodeString((uint64_t)&v20, (uint64_t)L"other: n");
    icu::UnicodeString::operator=((icu::UnicodeString *)v30, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v20);
    *a3 = 0;
  }
  v22[1] = 2;
  v23 = 0u;
  v25 = 0u;
  v24 = 0u;
  v21 = 0u;
  v20 = off_1E2264D90;
  v22[0] = off_1E2256B38;
  v27 = 0;
  v28 = 0;
  v26 = 0;
  v29 = -1;
  sub_18BD404F8((uint64_t)&v20, (uint64_t)v30, (uint64_t)v4, a3);
  sub_18BD3DD74((uint64_t)a1, (UErrorCode *)a3, (uint64_t)&v17);
  sub_18BD3DFF0((uint64_t)&v17, a3, &v19);
  v14 = v19;
  v19 = 0;
  v4[2] = v14;
  sub_18BBCBB54(&v19);
  v15 = v18;
  if (v18)
    uprv_free(v17);
  v20 = off_1E2264D90;
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v30);
  return v4;
}

uint64_t icu::PluralRules::createSharedInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  uint64_t result;
  uint64_t v4;

  if (*(int *)a3 > 0)
    return 0;
  if (a2)
  {
    result = 0;
    *a3 = U_UNSUPPORTED_ERROR;
  }
  else
  {
    v4 = 0;
    sub_18BD410E0(a1, (UErrorCode *)&v4, a3);
    return v4;
  }
  return result;
}

void sub_18BD410E0(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  uint64_t Instance;
  icu::SharedObject **v7;
  uint64_t (**v8)();
  int v9;
  char v10;
  _QWORD v11[29];

  v11[28] = *MEMORY[0x1E0C80C00];
  Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    v7 = (icu::SharedObject **)Instance;
    v9 = 0;
    v10 = 0;
    v8 = off_1E2264FE0;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18BC8C230(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    v8 = off_1E2264FE0;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

uint64_t *icu::PluralRules::forLocale(icu::PluralRules *this, const icu::Locale *a2, UErrorCode *a3)
{
  return icu::PluralRules::forLocale(this, 0, a2);
}

uint64_t *icu::PluralRules::forLocale(icu::Locale *a1, unint64_t a2, icu::UnifiedCache *this)
{
  _DWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((_DWORD)a2)
    return icu::PluralRules::internalForLocale(a1, a2, (int *)this);
  if (*(int *)this > 0)
    return 0;
  v8 = 0;
  sub_18BD410E0((uint64_t)a1, (UErrorCode *)&v8, (UErrorCode *)this);
  v5 = 0;
  v6 = (uint64_t *)*(unsigned int *)this;
  if ((int)v6 <= 0)
  {
    v7 = (_QWORD *)v8;
    v5 = icu::PluralRules::clone(*(icu::PluralRules **)(v8 + 24), (UErrorCode *)this, v6);
    icu::SharedObject::removeRef(v7);
  }
  return (uint64_t *)v5;
}

void *icu::PluralRules::getRuleFromResource@<X0>(icu::Locale *a1@<X1>, int a2@<W2>, int *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD *v10;
  const char *v12;
  _QWORD *v13;
  const char *BaseName;
  const UChar *StringByKey;
  const char *v16;
  int v17;
  const UChar *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int Size;
  __int128 v24;
  int v25;
  const UChar *NextString;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  UErrorCode v31[2];
  char *v32;
  int v33;
  int v34;
  int v35;
  _OWORD v36[4];
  char *__s[8];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void (**v50)(icu::UnicodeString *__hidden);
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void (**v55)(icu::UnicodeString *__hidden);
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v56 = 0u;
  v59 = 0;
  v58 = 0u;
  v57 = 0u;
  v55 = off_1E2256B38;
  LOWORD(v56) = 2;
  if (*a3 >= 1)
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
    return icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v55);
  }
  v9 = ures_openDirect(0, (uint64_t)"plurals", (uint64_t)a3);
  v10 = (_QWORD *)v9;
  if (*a3 >= 1)
    goto LABEL_4;
  if (!a2)
  {
    v12 = "locales";
LABEL_12:
    v13 = (_QWORD *)ures_getByKey(v9, v12, 0, a3);
    if (*a3 >= 1)
      goto LABEL_13;
    v34 = 0;
    BaseName = (const char *)icu::Locale::getBaseName(a1);
    StringByKey = ures_getStringByKey((uint64_t)v13, BaseName, &v34, a3);
    if (StringByKey)
      goto LABEL_29;
    v31[0] = U_ZERO_ERROR;
    v16 = (const char *)icu::Locale::getBaseName(a1);
    memset(&__s[1], 0, 56);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v32, v16);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    WORD2(__s[1]) = 0;
    LODWORD(__s[7]) = 0;
    icu::CharString::append((icu::CharString *)__s, v32, v33, v31);
    while (1)
    {
      v54 = 0;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      v50 = (void (**)(icu::UnicodeString *__hidden))((char *)&v51 + 5);
      LODWORD(v51) = 40;
      v36[0] = 0uLL;
      icu::CharStringByteSink::CharStringByteSink(v36, (uint64_t)&v50);
      ulocimp_getParent(__s[0], (uint64_t)v36, (int *)v31);
      v17 = v54;
      if ((_DWORD)v54)
        icu::CharString::operator=((uint64_t)__s, (uint64_t)&v50);
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v36);
      if (BYTE4(v51))
        uprv_free(v50);
      if (!v17)
      {
        StringByKey = 0;
        goto LABEL_26;
      }
      v34 = 0;
      v18 = ures_getStringByKey((uint64_t)v13, __s[0], &v34, (int *)v31);
      if (v18)
        break;
      v31[0] = U_ZERO_ERROR;
    }
    StringByKey = v18;
    *a3 = 0;
LABEL_26:
    if (BYTE4(__s[1]))
      uprv_free(__s[0]);
    if (StringByKey)
    {
LABEL_29:
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      memset(__s, 0, sizeof(__s));
      u_UCharsToChars(StringByKey, (char *)__s, v34 + 1);
      v19 = ures_getByKey((uint64_t)v10, "rules", 0, a3);
      v20 = (_QWORD *)v19;
      if (*a3 < 1)
      {
        v21 = ures_getByKey(v19, (const char *)__s, 0, a3);
        v22 = (_QWORD *)v21;
        if (*a3 < 1)
        {
          Size = ures_getSize(v21);
          v24 = 0uLL;
          *(_OWORD *)(a4 + 8) = 0u;
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 40) = 0u;
          *(_QWORD *)(a4 + 56) = 0;
          *(_QWORD *)a4 = off_1E2256B38;
          v5 = 2;
          *(_WORD *)(a4 + 8) = 2;
          *(_QWORD *)v31 = 0;
          if (Size >= 1)
          {
            v25 = Size;
            do
            {
              v54 = 0;
              v52 = v24;
              v53 = v24;
              v51 = v24;
              v50 = off_1E2256B38;
              LOWORD(v51) = 2;
              v35 = 0;
              NextString = ures_getNextString((uint64_t)v22, &v35, v31, a3);
              if (*a3 <= 0)
              {
                *(_QWORD *)&v36[0] = NextString;
                icu::UnicodeString::setTo((icu::UnicodeString *)&v50, 1, (const UChar **)v36, v35);
              }
              else
              {
                icu::UnicodeString::setToBogus((icu::UnicodeString *)&v50);
              }
              memset(v36, 0, sizeof(v36));
              icu::UnicodeString::UnicodeString(v36, *(_QWORD *)v31, 0xFFFFFFFFLL, 0);
              if ((SWORD4(v36[0]) & 0x8000u) == 0)
                v27 = WORD4(v36[0]) >> 5;
              else
                v27 = HIDWORD(v36[0]);
              icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v36, 0, v27);
              LOWORD(v35) = 58;
              icu::UnicodeString::doAppend(a4, (uint64_t)&v35, 0, 1);
              if ((v51 & 0x8000u) == 0)
                v28 = (unsigned __int16)v51 >> 5;
              else
                v28 = DWORD1(v51);
              icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)&v50, 0, v28);
              LOWORD(v35) = 59;
              icu::UnicodeString::doAppend(a4, (uint64_t)&v35, 0, 1);
              icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v36);
              icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v50);
              v24 = 0uLL;
              --v25;
            }
            while (v25);
          }
        }
        else
        {
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
        }
        if (v22)
          ures_close(v22);
      }
      else
      {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
      }
      if (v20)
        ures_close(v20);
    }
    else
    {
LABEL_13:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
    }
    if (v13)
      ures_close(v13);
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    v12 = "locales_ordinals";
    goto LABEL_12;
  }
  *a3 = 1;
LABEL_4:
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (icu::UnicodeString *)&v55);
LABEL_5:
  if (v10)
    ures_close(v10);
  return icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v55);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  void (**v5)(icu::FixedDecimal *__hidden);
  void *v6;

  v5 = off_1E2264E18;
  v6 = &unk_1E2264E58;
  icu::FixedDecimal::init((icu::FixedDecimal *)&v5, (double)a2);
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)&v5, a3);
  icu::UObject::~UObject((icu::UObject *)&v6);
  icu::IFixedDecimal::~IFixedDecimal((icu::IFixedDecimal *)&v5);
}

icu::UnicodeString *icu::PluralRules::select@<X0>(icu::PluralRules *this@<X0>, const icu::IFixedDecimal *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  uint64_t v3;
  const __int16 *v5;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    return sub_18BD419D8(v3, (uint64_t)a2, a3);
  v5 = L"other: n";
  return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1, &v5);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2)
{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, a2);
  return this;
}

void icu::FixedDecimal::~FixedDecimal(icu::FixedDecimal *this)
{
  icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8));
  icu::IFixedDecimal::~IFixedDecimal(this);
}

{
  icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8));
  icu::IFixedDecimal::~IFixedDecimal(this);
}

{
  void *v2;

  icu::UObject::~UObject((icu::FixedDecimal *)((char *)this + 8));
  icu::IFixedDecimal::~IFixedDecimal(this);
  icu::UMemory::operator delete(v2);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, double a2@<D0>, icu::UnicodeString *a3@<X8>)
{
  void (**v5)(icu::FixedDecimal *__hidden);
  void *v6;

  v5 = off_1E2264E18;
  v6 = &unk_1E2264E58;
  icu::FixedDecimal::init((icu::FixedDecimal *)&v5, a2);
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)&v5, a3);
  icu::UObject::~UObject((icu::UObject *)&v6);
  icu::IFixedDecimal::~IFixedDecimal((icu::IFixedDecimal *)&v5);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, const icu::number::FormattedNumber *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  UErrorCode v8;
  _OWORD v9[4];
  uint64_t v10;

  v10 = 0;
  memset(v9, 0, sizeof(v9));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v9);
  icu::number::FormattedNumber::getDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v9, a3);
  if (*(int *)a3 < 1)
  {
    v8 = *((_DWORD *)this + 6);
    if (v8 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::PluralRules::select(this, (const icu::IFixedDecimal *)v9, (icu::UnicodeString *)a4);
      goto LABEL_6;
    }
    *a3 = v8;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
  }
  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
  }
  *(_QWORD *)a4 = off_1E2256B38;
  *(_WORD *)(a4 + 8) = 2;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
LABEL_6:
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v9);
}

icu::UnicodeString *sub_18BD419D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  const char *v7;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) & 1) != 0
    || !a1)
  {
LABEL_2:
    v7 = "o";
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1, &v7);
  }
  else
  {
    while (!sub_18BD43A1C(*(_QWORD *)(a1 + 80), a2))
    {
      a1 = *(_QWORD *)(a1 + 72);
      if (!a1)
        goto LABEL_2;
    }
    return icu::UnicodeString::UnicodeString(a3, (UChar **)(a1 + 8));
  }
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, const icu::number::FormattedNumberRange *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t Data;

  Data = icu::number::FormattedNumberRange::getData(a2, a3);
  icu::PluralRules::select(this, Data, (const icu::UnicodeString *)a3, a4);
}

void icu::PluralRules::select(icu::PluralRules *this@<X0>, uint64_t a2@<X1>, const icu::UnicodeString *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  UErrorCode *v9;
  int v10;
  void *v11;
  UErrorCode *v12;
  int v13;
  void *v14;
  int v15;
  char *Keyword;
  _BYTE v17[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 >= 1)
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
LABEL_5:
    *(_QWORD *)a4 = off_1E2256B38;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
    return;
  }
  v7 = *((_DWORD *)this + 6);
  if (v7 >= 1)
  {
LABEL_4:
    *(_DWORD *)a3 = v7;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
    goto LABEL_5;
  }
  if (!*((_QWORD *)this + 2))
  {
    v7 = 16;
    goto LABEL_4;
  }
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)(a2 + 304), (icu::UnicodeString *)v17);
  v10 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v17, a3, v9);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  icu::PluralRules::select(this, (const icu::IFixedDecimal *)(a2 + 376), (icu::UnicodeString *)v17);
  v13 = icu::StandardPlural::indexFromString((icu::StandardPlural *)v17, a3, v12);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
  if (*(int *)a3 < 1)
  {
    v15 = sub_18BD3E134(*((unsigned int **)this + 2), v10, v13);
    Keyword = icu::StandardPlural::getKeyword(v15);
    icu::UnicodeString::UnicodeString(a4, Keyword, 0xFFFFFFFFLL, 0);
  }
  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = off_1E2256B38;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }
}

uint64_t icu::PluralRules::getKeywords(icu::PluralRules *this, UErrorCode *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;

  if (*(int *)a2 > 0)
    return 0;
  v5 = (uint64_t *)*((unsigned int *)this + 6);
  if ((int)v5 >= 1)
  {
    result = 0;
LABEL_5:
    *a2 = (int)v5;
    return result;
  }
  v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      result = 0;
      LODWORD(v5) = 7;
      goto LABEL_5;
    }
    return 0;
  }
  result = sub_18BD441F8((uint64_t)v6, *((_QWORD *)this + 1), a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

double icu::PluralRules::getUniqueKeywordValue(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  return -0.00123456777;
}

uint64_t icu::PluralRules::getAllKeywordValues(icu::PluralRules *this, const icu::UnicodeString *a2, double *a3, int a4, UErrorCode *a5)
{
  *a5 = U_UNSUPPORTED_ERROR;
  return 0;
}

uint64_t *icu::PluralRules::getSamples(icu::PluralRules *this, const icu::UnicodeString *a2, double *a3, int a4, UErrorCode *a5)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v10;

  if (*(int *)a5 > 0)
    return 0;
  v7 = (uint64_t *)*((unsigned int *)this + 6);
  if ((int)v7 >= 1)
  {
    result = 0;
LABEL_12:
    *a5 = (int)v7;
    return result;
  }
  if (a3)
  {
    if ((a4 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_11:
    result = 0;
    LODWORD(v7) = 1;
    goto LABEL_12;
  }
  if (a4)
    goto LABEL_11;
LABEL_7:
  result = icu::PluralRules::rulesForKeyword(v7, this, a2);
  if (result)
  {
    v10 = result;
    result = (uint64_t *)sub_18BD41EA0((uint64_t)(result + 19), (uint64_t)a3, 0, a4, a5);
    if (!(_DWORD)result)
      return (uint64_t *)sub_18BD41EA0((uint64_t)(v10 + 11), (uint64_t)a3, 0, a4, a5);
  }
  return result;
}

uint64_t icu::PluralRules::rulesForKeyword(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  uint64_t i;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  for (i = *((_QWORD *)this + 1); i; i = *(_QWORD *)(i + 72))
  {
    v4 = *(unsigned __int16 *)(i + 16);
    if ((v4 & 1) != 0)
    {
      if ((*((_WORD *)a2 + 4) & 1) != 0)
        return i;
    }
    else
    {
      if ((v4 & 0x8000) != 0)
        v5 = *(_DWORD *)(i + 20);
      else
        v5 = v4 >> 5;
      v6 = *((unsigned __int16 *)a2 + 4);
      if ((v6 & 0x8000u) == 0)
        v7 = v6 >> 5;
      else
        v7 = *((_DWORD *)a2 + 3);
      if ((v6 & 1) == 0 && v5 == v7 && icu::UnicodeString::doEquals((icu::UnicodeString *)(i + 8), a2, v5))
        return i;
    }
  }
  return i;
}

uint64_t sub_18BD41EA0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UErrorCode *a5)
{
  int v6;
  uint64_t v7;
  uint64_t v9;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int32_t v19;
  int32_t v20;
  int32_t v21;
  void *v22;
  void *v23;
  int v24;
  icu::UnicodeString *v25;
  void *v26;
  double v27;
  double v28;
  int v29;
  void *v30;
  int LowerDisplayMagnitude;
  int Exponent;
  double v33;
  double v34;
  double v35;
  double v36;
  _OWORD v40[4];
  uint64_t v41;
  _OWORD v42[4];
  uint64_t v43;
  _OWORD v44[4];
  uint64_t v45;
  _OWORD v46[4];
  uint64_t v47;
  _OWORD v48[4];
  uint64_t v49;
  void *v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _BYTE v56[64];
  _BYTE v57[64];
  _BYTE v58[64];
  UChar *v59;
  unsigned __int16 v60;
  int32_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a2 | a3)
  {
    v6 = a4;
    v7 = a3;
    if (!a2 || !a3)
    {
      v9 = 0;
      v11 = 0;
      while (1)
      {
        if ((int)v9 >= v6)
          return v9;
        v12 = *(unsigned __int16 *)(a1 + 8);
        v13 = (__int16)v12;
        v14 = v12 >> 5;
        v15 = v13 >= 0 ? v14 : *(_DWORD *)(a1 + 12);
        if (v11 >= v15)
          return v9;
        if (v11 < 0)
          break;
        if (v13 < 0)
        {
          if (*(_DWORD *)(a1 + 12) >= v11)
            v17 = v11;
          else
            v17 = *(_DWORD *)(a1 + 12);
LABEL_22:
          v16 = v17;
          v14 = *(_DWORD *)(a1 + 12);
          goto LABEL_23;
        }
        if (v14 >= v11)
          v16 = v11;
        else
          v16 = v14;
LABEL_23:
        v18 = icu::UnicodeString::doIndexOf(a1, 0x2Cu, v16, v14 - v16);
        if (v18 == -1)
        {
          if (*(__int16 *)(a1 + 8) < 0)
            v18 = *(_DWORD *)(a1 + 12);
          else
            v18 = *(unsigned __int16 *)(a1 + 8) >> 5;
        }
        icu::UnicodeString::tempSubString((icu::UnicodeString *)a1, v11, v18 - v11, (icu::UnicodeString *)&v59);
        if ((v60 & 0x8000u) == 0)
          v19 = v60 >> 5;
        else
          v19 = v61;
        v20 = icu::UnicodeString::doIndexOf((uint64_t)&v59, 0x7Eu, 0, v19);
        if (v20 < 0)
        {
          *(_QWORD *)&v54 = 0;
          v52 = 0u;
          v53 = 0u;
          *(_OWORD *)v50 = 0u;
          v51 = 0u;
          v25 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)v58, &v59);
          icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v25, a5, (uint64_t)v50);
          icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v58);
          if (a2)
          {
            v27 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v50);
            if (v27 != floor(v27)
              || (int)icu::number::impl::DecimalQuantity::fractionCount((icu::number::impl::DecimalQuantity *)v50) <= 0)
            {
              *(double *)(a2 + 8 * (int)v9) = v27;
              v9 = (v9 + 1);
              v6 = a4;
            }
          }
          else
          {
            icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(v7 + 72 * (int)v9), (uint64_t)v50);
            v9 = (v9 + 1);
          }
          icu::number::impl::DecimalQuantity::~DecimalQuantity(v50);
LABEL_44:
          v29 = 0;
          v11 = v18 + 1;
          goto LABEL_45;
        }
        v21 = v20;
        v49 = 0;
        memset(v48, 0, sizeof(v48));
        icu::UnicodeString::tempSubString((icu::UnicodeString *)&v59, 0, v20, (icu::UnicodeString *)v57);
        icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v57, a5, (uint64_t)v48);
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v57);
        v47 = 0;
        memset(v46, 0, sizeof(v46));
        icu::UnicodeString::tempSubString((icu::UnicodeString *)&v59, v21 + 1, 2147483646 - v21, (icu::UnicodeString *)v56);
        icu::number::impl::DecimalQuantity::fromExponentString((uint64_t)v56, a5, (uint64_t)v46);
        icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v56);
        if (*(int *)a5 > 0)
        {
          v24 = 0;
LABEL_39:
          v29 = 2;
          goto LABEL_40;
        }
        v28 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v46);
        if (v28 < icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v48))
        {
          v24 = 0;
          *a5 = U_INVALID_FORMAT_ERROR;
          goto LABEL_39;
        }
        v45 = 0;
        memset(v44, 0, sizeof(v44));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v44);
        icu::number::impl::DecimalQuantity::setToInt((void **)v44, 1);
        LowerDisplayMagnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude((icu::number::impl::DecimalQuantity *)v48);
        Exponent = icu::number::impl::DecimalQuantity::getExponent((icu::number::impl::DecimalQuantity *)v48);
        icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v44, Exponent + LowerDisplayMagnitude);
        v33 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v44);
        v43 = 0;
        memset(v42, 0, sizeof(v42));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v42, (uint64_t)v48);
        v34 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v42);
        v35 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v46);
        if (v34 <= v35)
        {
          v36 = v35;
          while (a2)
          {
            if (v34 != floor(v34)
              || (int)icu::number::impl::DecimalQuantity::fractionCount((icu::number::impl::DecimalQuantity *)v42) <= 0)
            {
              *(double *)(a2 + 8 * (int)v9) = v34;
              v9 = (v9 + 1);
LABEL_54:
              v6 = a4;
            }
            if ((int)v9 < v6)
            {
              v54 = 0u;
              v55 = 0u;
              v52 = 0u;
              v53 = 0u;
              *(_OWORD *)v50 = 0u;
              v51 = 0u;
              icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v50);
              icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)v50, v33 + v34, a5);
              v41 = 0;
              memset(v40, 0, sizeof(v40));
              icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v40);
              icu::number::impl::DecimalQuantity::setToDecNum((void **)v40, (const icu::number::impl::DecNum *)v50, a5);
              icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)v40, -LowerDisplayMagnitude);
              icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v40, LowerDisplayMagnitude, 4u, (int *)a5);
              icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v40, -Exponent);
              icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)v40, Exponent);
              v34 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v40);
              icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)v42, (uint64_t)v40);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v40);
              if (BYTE4(v50[1]))
                uprv_free(v50[0]);
              if (v34 <= v36)
                continue;
            }
            goto LABEL_59;
          }
          icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(a3 + 72 * (int)v9), (uint64_t)v42);
          v9 = (v9 + 1);
          goto LABEL_54;
        }
LABEL_59:
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v42);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v44);
        v29 = 0;
        v24 = 1;
        v7 = a3;
LABEL_40:
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v46);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v48);
        if (v24)
          goto LABEL_44;
LABEL_45:
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v59);
        if (v29)
          return v9;
      }
      v17 = 0;
      v16 = 0;
      if ((v13 & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_22;
    }
  }
  v9 = 0;
  *a5 = U_INTERNAL_PROGRAM_ERROR;
  return v9;
}

uint64_t icu::PluralRules::getSamples(icu::PluralRules *this, const icu::UnicodeString *a2, icu::number::impl::DecimalQuantity *a3, int a4, UErrorCode *a5)
{
  uint64_t result;
  UErrorCode v7;
  uint64_t v10;

  if (*(int *)a5 > 0)
    return 0;
  v7 = *((_DWORD *)this + 6);
  if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    result = 0;
LABEL_12:
    *a5 = v7;
    return result;
  }
  if (a3)
  {
    if ((a4 & 0x80000000) == 0)
      goto LABEL_7;
LABEL_11:
    result = 0;
    v7 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_12;
  }
  if (a4)
    goto LABEL_11;
LABEL_7:
  result = icu::PluralRules::rulesForKeyword(this, a2);
  if (result)
  {
    v10 = result;
    result = sub_18BD41EA0(result + 152, 0, (uint64_t)a3, a4, a5);
    if (!(_DWORD)result)
      return sub_18BD41EA0(v10 + 88, 0, (uint64_t)a3, a4, a5);
  }
  return result;
}

BOOL icu::PluralRules::isKeyword(icu::PluralRules *this, const icu::UnicodeString *a2)
{
  unsigned int v4;
  int v5;
  int32_t v6;
  int32_t v7;
  const char *v9;

  v4 = *((unsigned __int16 *)a2 + 4);
  v5 = (__int16)v4;
  v6 = v4 >> 5;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = *((_DWORD *)a2 + 3);
  v9 = "o";
  return !icu::UnicodeString::doCompare((uint64_t)a2, 0, v7, (uint64_t)"o", 0, 5)
      || icu::PluralRules::rulesForKeyword((uint64_t *)&v9, this, a2) != 0;
}

uint64_t icu::PluralRules::getKeywordOther@<X0>(uint64_t a1@<X8>)
{
  const char *v3;

  v3 = "o";
  return icu::UnicodeString::UnicodeString(a1, 1, &v3);
}

uint64_t icu::PluralRules::operator==(icu::PluralRules *a1, icu::PluralRules *a2)
{
  uint64_t Keywords;
  uint64_t v5;
  _BOOL8 v6;
  int v7;
  const icu::UnicodeString *v8;
  const icu::UnicodeString *v9;
  UErrorCode v11;

  v11 = U_ZERO_ERROR;
  if (a1 == a2)
    return 1;
  Keywords = icu::PluralRules::getKeywords(a1, &v11);
  v5 = icu::PluralRules::getKeywords(a2, &v11);
  if (v11 <= U_ZERO_ERROR)
  {
    v7 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)Keywords + 32))(Keywords, &v11);
    if (v7 == (*(unsigned int (**)(uint64_t, UErrorCode *))(*(_QWORD *)v5 + 32))(v5, &v11))
    {
      (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)Keywords + 64))(Keywords, &v11);
      while (1)
      {
        v8 = (const icu::UnicodeString *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)Keywords + 56))(Keywords, &v11);
        if (!v8)
          break;
        if (!icu::PluralRules::isKeyword(a2, v8))
          goto LABEL_3;
      }
      (*(void (**)(uint64_t, UErrorCode *))(*(_QWORD *)v5 + 64))(v5, &v11);
      while (1)
      {
        v9 = (const icu::UnicodeString *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)v5 + 56))(v5, &v11);
        if (!v9)
          break;
        if (!icu::PluralRules::isKeyword(a1, v9))
          goto LABEL_15;
      }
      v6 = v11 < U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
LABEL_15:
      v6 = 0;
    }
  }
  else
  {
LABEL_3:
    v6 = 0;
    if (!v5)
    {
      if (!Keywords)
        return v6;
      goto LABEL_17;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (Keywords)
LABEL_17:
    (*(void (**)(uint64_t))(*(_QWORD *)Keywords + 8))(Keywords);
  return v6;
}

int *sub_18BD42690(int *result, int *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  void *v28;
  _BYTE v29[64];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*a2 <= 0)
  {
    v3 = result;
    v4 = *((_QWORD *)result + 1);
    v5 = v4 + 10;
    for (i = result[4]; ; v3[4] = i)
    {
      v7 = *(unsigned __int16 *)(v4 + 8);
      if (*(__int16 *)(v4 + 8) < 0)
      {
        v8 = *(_DWORD *)(v4 + 12);
        if ((int)i >= v8)
          goto LABEL_16;
      }
      else
      {
        if ((int)i >= (int)(v7 >> 5))
          goto LABEL_15;
        v8 = v7 >> 5;
      }
      if (v8 <= i)
      {
        v10 = 0xFFFF;
      }
      else
      {
        v9 = v4 + 10;
        if ((v7 & 2) == 0)
          v9 = *(_QWORD *)(v4 + 24);
        v10 = *(unsigned __int16 *)(v9 + 2 * i);
      }
      result = (int *)sub_18BD44104(v10);
      v3[22] = (_DWORD)result;
      if ((_DWORD)result != 4)
        break;
      ++i;
    }
    v7 = *(unsigned __int16 *)(v4 + 8);
    if ((*(__int16 *)(v4 + 8) & 0x80000000) == 0)
    {
LABEL_15:
      v11 = 0;
      v12 = v7 >> 5;
      goto LABEL_17;
    }
LABEL_16:
    v12 = *(_DWORD *)(v4 + 12);
    v11 = 1;
LABEL_17:
    if ((int)i >= v12)
    {
      v3[22] = 30;
    }
    else
    {
      v13 = i + 1;
      switch(v3[22])
      {
        case 1:
          while (1)
          {
            v14 = v13;
            if (*(__int16 *)(v4 + 8) < 0)
            {
              v15 = *(int *)(v4 + 12);
              if (v13 >= v15)
                goto LABEL_30;
            }
            else
            {
              if (v13 >= (uint64_t)((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5))
                goto LABEL_30;
              v15 = (unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5;
            }
            if (v15 <= v13)
            {
              v17 = 0xFFFF;
            }
            else
            {
              v16 = v4 + 10;
              if ((*(_WORD *)(v4 + 8) & 2) == 0)
                v16 = *(_QWORD *)(v4 + 24);
              v17 = *(unsigned __int16 *)(v16 + 2 * v13);
            }
            v18 = sub_18BD44104(v17);
            v3[22] = v18;
            v13 = v14 + 1;
            if (v18 != 1)
            {
LABEL_30:
              v19 = 1;
              goto LABEL_42;
            }
          }
        case 2:
        case 3:
        case 5:
        case 6:
        case 9:
        case 0xD:
        case 0x10:
        case 0x12:
          goto LABEL_19;
        case 7:
          LODWORD(v14) = i + 1;
          if (v11)
          {
            v24 = *(_DWORD *)(v4 + 12);
            if ((int)v14 >= v24)
              goto LABEL_66;
          }
          else
          {
            if ((int)v14 >= (int)(v7 >> 5))
              goto LABEL_66;
            v24 = v7 >> 5;
          }
          if (v24 <= v14)
            goto LABEL_66;
          v26 = v4 + 10;
          if ((v7 & 2) == 0)
            v26 = *(_QWORD *)(v4 + 24);
          if (*(_WORD *)(v26 + 2 * (int)v14) != 46)
            goto LABEL_66;
          LODWORD(v14) = i + 2;
          if (v11)
          {
            v27 = *(_DWORD *)(v4 + 12);
            if ((int)v14 >= v27)
              goto LABEL_75;
          }
          else
          {
            if ((int)v14 >= (int)(v7 >> 5))
              goto LABEL_75;
            v27 = v7 >> 5;
          }
          if (v27 > v14)
          {
            if ((v7 & 2) == 0)
              v5 = *(_QWORD *)(v4 + 24);
            if (*(_WORD *)(v5 + 2 * (int)v14) == 46)
            {
              v3[22] = 9;
              LODWORD(v14) = i + 3;
              goto LABEL_66;
            }
          }
LABEL_75:
          v3[22] = 8;
          goto LABEL_66;
        case 0xA:
          goto LABEL_31;
        case 0x11:
          LODWORD(v14) = i + 1;
          if ((v11 & 1) != 0)
            v25 = *(_DWORD *)(v4 + 12);
          else
            v25 = v7 >> 5;
          if (v25 <= v14)
            goto LABEL_65;
          if ((v7 & 2) == 0)
            v5 = *(_QWORD *)(v4 + 24);
          if (*(_WORD *)(v5 + 2 * (int)v14) == 61)
            LODWORD(v14) = i + 2;
          else
LABEL_65:
            v3[22] = 0;
          goto LABEL_66;
        default:
          *a2 = 65792;
LABEL_19:
          LODWORD(v14) = i + 1;
          goto LABEL_66;
      }
      do
      {
LABEL_31:
        v14 = v13;
        if (*(__int16 *)(v4 + 8) < 0)
        {
          v20 = *(int *)(v4 + 12);
          if (v13 >= v20)
            break;
        }
        else
        {
          if (v13 >= (uint64_t)((unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5))
            break;
          v20 = (unint64_t)*(unsigned __int16 *)(v4 + 8) >> 5;
        }
        if (v20 <= v13)
        {
          v22 = 0xFFFF;
        }
        else
        {
          v21 = v4 + 10;
          if ((*(_WORD *)(v4 + 8) & 2) == 0)
            v21 = *(_QWORD *)(v4 + 24);
          v22 = *(unsigned __int16 *)(v21 + 2 * v13);
        }
        v23 = sub_18BD44104(v22);
        v3[22] = v23;
        v13 = v14 + 1;
      }
      while (v23 == 10);
      v19 = 10;
LABEL_42:
      v3[22] = v19;
LABEL_66:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v29, (const icu::UnicodeString *)v4, i, (v14 - i));
      icu::UnicodeString::operator=((icu::UnicodeString *)(v3 + 6), (icu::UnicodeString *)v29);
      result = (int *)icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v29);
      v3[4] = v14;
    }
  }
  return result;
}

uint64_t sub_18BD429CC(uint64_t result, int *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v11;
  int v12;
  unsigned int v14;
  int v15;

  if (*a2 <= 0)
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 92);
    if (v4)
      v5 = v4 == 3;
    else
      v5 = 1;
    if (!v5)
    {
      result = sub_18BD43CEC(result + 24, *(unsigned int *)(result + 88));
      *(_DWORD *)(v3 + 88) = result;
      v4 = *(_DWORD *)(v3 + 92);
    }
    switch(v4)
    {
      case 0:
      case 3:
        v9 = *(_DWORD *)(v3 + 88);
        if (v9 != 10 && v9 != 30)
          goto LABEL_39;
        return result;
      case 1:
        v11 = *(_DWORD *)(v3 + 88);
        if (v11 > 0x1E)
          goto LABEL_39;
        v7 = 1 << v11;
        v8 = 1075566924;
        break;
      case 2:
      case 8:
      case 13:
      case 15:
      case 16:
      case 17:
      case 19:
        if (*(_DWORD *)(v3 + 88) != 1)
          goto LABEL_39;
        return result;
      case 5:
        v12 = *(_DWORD *)(v3 + 88);
        if ((v12 - 21) >= 7 && v12 != 6)
          goto LABEL_39;
        return result;
      case 6:
        if ((*(_DWORD *)(v3 + 88) & 0xFFFFFFFE) != 0x1C)
          goto LABEL_39;
        return result;
      case 10:
        if (*(_DWORD *)(v3 + 88) != 5)
          goto LABEL_39;
        return result;
      case 11:
      case 12:
        if ((*(_DWORD *)(v3 + 88) - 21) >= 7)
          goto LABEL_39;
        return result;
      case 14:
        v14 = *(_DWORD *)(v3 + 88);
        if (v14 > 0x13)
          goto LABEL_39;
        v7 = 1 << v14;
        v8 = 557058;
        break;
      case 20:
        v15 = *(_DWORD *)(v3 + 88);
        if (v15 != 1 && v15 != 14)
          goto LABEL_39;
        return result;
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
        v6 = *(_DWORD *)(v3 + 88);
        if (v6 > 0x14)
          goto LABEL_39;
        v7 = 1 << v6;
        v8 = 1826816;
        break;
      default:
        goto LABEL_39;
    }
    if ((v7 & v8) == 0)
LABEL_39:
      *a2 = 65792;
  }
  return result;
}

double sub_18BD42B3C(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v5;
  double result;

  v3 = *(_DWORD *)(a1 + 48);
  if (v3 >= 1)
    goto LABEL_2;
  v5 = icu::UMemory::operator new((icu::UMemory *)0x38, (unint64_t)a2);
  if (!v5)
  {
    *(_QWORD *)(a1 + 40) = 0;
    v3 = 7;
LABEL_2:
    *a2 = v3;
    return result;
  }
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)v5 = off_1E2264D30;
  result = NAN;
  *(_QWORD *)(v5 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v5 + 16) = -1;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 36) = 0;
  *(_QWORD *)(v5 + 44) = 0;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

double sub_18BD42BC4(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = *(_DWORD *)(a1 + 24);
  if (v3 > 0)
    goto LABEL_2;
  do
  {
    v4 = a1;
    a1 = *(_QWORD *)(a1 + 16);
  }
  while (a1);
  v5 = icu::UMemory::operator new((icu::UMemory *)0x38, (unint64_t)a2);
  if (!v5)
  {
    *(_QWORD *)(v4 + 8) = 0;
    v3 = 7;
LABEL_2:
    *a2 = v3;
    return result;
  }
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)v5 = off_1E2264D30;
  result = NAN;
  *(_QWORD *)(v5 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(v5 + 16) = -1;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 36) = 0;
  *(_QWORD *)(v5 + 44) = 0;
  *(_QWORD *)(v4 + 8) = v5;
  return result;
}

uint64_t sub_18BD42C54(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  _OWORD v6[8];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  v1 = *(unsigned __int16 *)(a1 + 8);
  v2 = (__int16)v1;
  v3 = v1 >> 5;
  if (v2 >= 0)
    v4 = v3;
  else
    v4 = *(unsigned int *)(a1 + 12);
  *((_BYTE *)v6 + (int)icu::UnicodeString::extract(a1, 0, v4, (char *)v6, 128)) = 0;
  return atoi((const char *)v6);
}

_QWORD *icu::PluralRules::getRules@<X0>(icu::PluralRules *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;

  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  result = (_QWORD *)*((_QWORD *)this + 1);
  if (result)
    return sub_18BD42D30(result, a2);
  return result;
}

_QWORD *sub_18BD42D30(_QWORD *result, uint64_t a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD v60[14];
  const __int16 *v61;
  const char *v62;
  const char *v63;
  const __int16 *v64;
  const __int16 *v65;
  const char *v66;
  const __int16 *v67;
  const char *v68;
  const __int16 *v69;
  const __int16 *v70;
  const char *v71;
  const __int16 *v72;
  const char *v73;
  const __int16 *v74;
  __int16 v75;
  unsigned __int16 v76;
  unsigned int v77;
  _OWORD v78[2];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  memset(v78, 0, sizeof(v78));
  v58 = result;
  if (result[10])
  {
    v3 = *((unsigned __int16 *)result + 8);
    v4 = (__int16)v3;
    v5 = v3 >> 5;
    v6 = v4 >= 0 ? v5 : *((unsigned int *)result + 5);
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)(result + 1), 0, v6);
    v75 = 58;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1);
    v75 = 32;
    result = (_QWORD *)icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1);
    v7 = v58[10];
    if (v7)
    {
      while (1)
      {
        v59 = v7;
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
          break;
LABEL_92:
        v7 = *(_QWORD *)(v59 + 16);
        if (!v7)
          goto LABEL_97;
        v62 = " ";
        icu::UnicodeString::UnicodeString(&v75, 1, &v62);
        if ((v76 & 0x8000u) == 0)
          v54 = v76 >> 5;
        else
          v54 = v77;
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v54);
        result = icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v75);
        v60[1] = v62;
      }
      while (*(_DWORD *)(v8 + 8) || *(_QWORD *)(v8 + 24))
      {
        sub_18BD43BFC(*(_DWORD *)(v8 + 36), (uint64_t)&v75);
        if ((v76 & 0x8000u) == 0)
          v9 = v76 >> 5;
        else
          v9 = v77;
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v9);
        icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v75);
        v75 = 32;
        icu::UnicodeString::doAppend(a2, (uint64_t)&v75, 0, 1);
        if (*(_DWORD *)(v8 + 8) == 1)
        {
          v72 = L"mod ";
          icu::UnicodeString::UnicodeString(&v75, 1, &v72);
          if ((v76 & 0x8000u) == 0)
            v11 = v76 >> 5;
          else
            v11 = v77;
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v11);
          icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v75);
          v60[13] = v72;
          uprv_itou((__int16 *)v78, 16, *(_DWORD *)(v8 + 12), 0xAu, 0);
          icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
          if ((v76 & 0x8000u) == 0)
            v13 = v76 >> 5;
          else
            v13 = v77;
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v13);
          icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v75);
        }
        if (!*(_QWORD *)(v8 + 24))
        {
          if (*(_BYTE *)(v8 + 32))
          {
            v71 = " ";
            icu::UnicodeString::UnicodeString(&v75, 1, &v71);
            if ((v76 & 0x8000u) == 0)
              v17 = v76 >> 5;
            else
              v17 = v77;
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v17);
            icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v75);
            v60[6] = v71;
          }
          else
          {
            v70 = L" is ";
            icu::UnicodeString::UnicodeString(&v75, 1, &v70);
            if ((v76 & 0x8000u) == 0)
              v31 = v76 >> 5;
            else
              v31 = v77;
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v31);
            icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v75);
            v60[5] = v70;
          }
LABEL_57:
          uprv_itou((__int16 *)v78, 16, *(_DWORD *)(v8 + 16), 0xAu, 0);
          icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
          if ((v76 & 0x8000u) == 0)
            v33 = v76 >> 5;
          else
            v33 = v77;
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v33);
          result = icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v75);
          goto LABEL_87;
        }
        if (*(_BYTE *)(v8 + 32))
        {
          if (*(_BYTE *)(v8 + 33))
          {
            v69 = L" not in ";
            icu::UnicodeString::UnicodeString(&v75, 1, &v69);
            if ((v76 & 0x8000u) == 0)
              v15 = v76 >> 5;
            else
              v15 = v77;
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v15);
            result = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v75);
            v60[12] = v69;
          }
          else
          {
            v68 = " ";
            icu::UnicodeString::UnicodeString(&v75, 1, &v68);
            if ((v76 & 0x8000u) == 0)
              v29 = v76 >> 5;
            else
              v29 = v77;
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v29);
            result = icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v75);
            v60[11] = v68;
          }
        }
        else if (*(_BYTE *)(v8 + 33))
        {
          v67 = L" in ";
          icu::UnicodeString::UnicodeString(&v75, 1, &v67);
          if ((v76 & 0x8000u) == 0)
            v19 = v76 >> 5;
          else
            v19 = v77;
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v19);
          result = icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v75);
          v60[10] = v67;
        }
        else
        {
          v66 = " ";
          icu::UnicodeString::UnicodeString(&v75, 1, &v66);
          if ((v76 & 0x8000u) == 0)
            v35 = v76 >> 5;
          else
            v35 = v77;
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v35);
          result = icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v75);
          v60[9] = v66;
        }
        v37 = *(_QWORD *)(v8 + 24);
        v38 = *(unsigned int *)(v37 + 8);
        if ((int)v38 >= 1)
        {
          v39 = 0;
          while ((int)v38 >= 1)
          {
            v40 = *(_QWORD *)(v37 + 24);
            v41 = *(_DWORD *)(v40 + 4 * v39);
            if (v39 + 1 >= v38)
              goto LABEL_71;
            v42 = *(_DWORD *)(v40 + 4 * v39 + 4);
LABEL_72:
            uprv_itou((__int16 *)v78, 16, v41, 0xAu, 0);
            icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
            if ((v76 & 0x8000u) == 0)
              v43 = v76 >> 5;
            else
              v43 = v77;
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v43);
            v45 = icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v75);
            v65 = L"..";
            icu::UnicodeString::UnicodeString(v45, 1, &v65);
            if ((v76 & 0x8000u) == 0)
              v46 = v76 >> 5;
            else
              v46 = v77;
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v46);
            icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v75);
            v60[8] = v65;
            uprv_itou((__int16 *)v78, 16, v42, 0xAu, 0);
            icu::UnicodeString::UnicodeString((uint64_t)&v75, (uint64_t)v78);
            if ((v76 & 0x8000u) == 0)
              v48 = v76 >> 5;
            else
              v48 = v77;
            icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v48);
            result = icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v75);
            v39 += 2;
            v37 = *(_QWORD *)(v8 + 24);
            v38 = *(unsigned int *)(v37 + 8);
            if ((int)v38 > (int)v39)
            {
              v64 = L", ";
              icu::UnicodeString::UnicodeString(result, 1, &v64);
              if ((v76 & 0x8000u) == 0)
                v50 = v76 >> 5;
              else
                v50 = v77;
              icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v50);
              result = icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v75);
              v60[7] = v64;
              v37 = *(_QWORD *)(v8 + 24);
              v38 = *(unsigned int *)(v37 + 8);
            }
            if ((int)v38 <= (int)v39)
              goto LABEL_87;
          }
          v41 = 0;
LABEL_71:
          v42 = 0;
          goto LABEL_72;
        }
LABEL_87:
        v8 = *(_QWORD *)(v8 + 40);
        if (!v8)
          goto LABEL_92;
        v63 = " ";
        icu::UnicodeString::UnicodeString(&v75, 1, &v63);
        if ((v76 & 0x8000u) == 0)
          v52 = v76 >> 5;
        else
          v52 = v77;
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v52);
        result = icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v75);
        v60[2] = v63;
      }
      if (*(_DWORD *)(v8 + 16) == -1)
        goto LABEL_87;
      sub_18BD43BFC(*(_DWORD *)(v8 + 36), (uint64_t)&v75);
      if ((v76 & 0x8000u) == 0)
        v21 = v76 >> 5;
      else
        v21 = v77;
      icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v21);
      v23 = icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v75);
      v74 = L" is ";
      icu::UnicodeString::UnicodeString(v23, 1, &v74);
      if ((v76 & 0x8000u) == 0)
        v24 = v76 >> 5;
      else
        v24 = v77;
      icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v24);
      v26 = icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v75);
      v60[4] = v74;
      if (*(_BYTE *)(v8 + 32))
      {
        v73 = "n";
        icu::UnicodeString::UnicodeString(v26, 1, &v73);
        if ((v76 & 0x8000u) == 0)
          v27 = v76 >> 5;
        else
          v27 = v77;
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v27);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v75);
        v60[3] = v73;
      }
      goto LABEL_57;
    }
  }
LABEL_97:
  if (v58[9])
  {
    v61 = L"; ";
    icu::UnicodeString::UnicodeString(&v75, 1, &v61);
    if ((v76 & 0x8000u) == 0)
      v56 = v76 >> 5;
    else
      v56 = v77;
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v75, 0, v56);
    icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v75);
    v60[0] = v61;
    return sub_18BD42D30(v60, v58[9], a2);
  }
  return result;
}

uint64_t sub_18BD43608(uint64_t a1, unint64_t a2)
{
  int v3;
  UErrorCode *v4;
  uint64_t *v7;
  icu::UVector32 *v8;
  icu::UVector32 *v9;
  uint64_t *v10;
  uint64_t *v11;

  *(_QWORD *)a1 = off_1E2264D30;
  *(_QWORD *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  v3 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 48) = v3;
  v4 = (UErrorCode *)(a1 + 48);
  if (v3 > 0)
    return a1;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v7 = *(uint64_t **)(a2 + 24);
  if (!v7)
    goto LABEL_10;
  v8 = (icu::UVector32 *)icu::UMemory::operator new(v7, (icu::UMemory *)0x20, a2);
  if (v8)
  {
    v9 = icu::UVector32::UVector32(v8, v4);
    if (*(int *)v4 > 0)
    {
      (*(void (**)(icu::UVector32 *))(*(_QWORD *)v9 + 8))(v9);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v9;
    icu::UVector32::assign(v9, *(const icu::UVector32 **)(a2 + 24), v4);
LABEL_10:
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
    v10 = *(uint64_t **)(a2 + 40);
    if (v10)
    {
      v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x38, a2);
      if (v11)
      {
        *(_QWORD *)(a1 + 40) = sub_18BD43608(v11, *(_QWORD *)(a2 + 40));
      }
      else
      {
        *(_QWORD *)(a1 + 40) = 0;
        *(_DWORD *)(a1 + 48) = 7;
      }
    }
    return a1;
  }
  if (*(int *)v4 <= 0)
    *v4 = U_MEMORY_ALLOCATION_ERROR;
  return a1;
}

_QWORD *sub_18BD43728(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E2264D30;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  a1[3] = 0;
  v3 = a1[5];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[5] = 0;
  return a1;
}

void sub_18BD43788(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_18BD43728(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD4379C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  double v6;
  long double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  int v14;

  v3 = *(_DWORD *)(a1 + 36);
  if (!v3)
    return 1;
  v5 = sub_18BD438C0(v3);
  v6 = (*(double (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
  v7 = v6;
  if (!*(_BYTE *)(a1 + 33) || v6 == uprv_floor(v6))
  {
    if (*(_DWORD *)(a1 + 8) == 1)
      v7 = fmod(v7, (double)*(int *)(a1 + 12));
    v8 = *(_QWORD *)(a1 + 24);
    if (!v8)
    {
      v14 = *(_DWORD *)(a1 + 16);
      v12 = v7 == (double)v14 || v14 == -1;
      return v12 ^ (*(_BYTE *)(a1 + 32) != 0);
    }
    v9 = *(unsigned int *)(v8 + 8);
    if ((int)v9 >= 1)
    {
      v10 = 0;
      while (1)
      {
        if (v7 >= (double)*(int *)(*(_QWORD *)(v8 + 24) + 4 * v10))
        {
          v11 = v10 + 1 >= v9 ? 0 : *(_DWORD *)(*(_QWORD *)(v8 + 24) + 4 * v10 + 4);
          if (v7 <= (double)v11)
            break;
        }
        v10 += 2;
        if ((int)v9 <= (int)v10)
          goto LABEL_15;
      }
      v12 = 1;
      return v12 ^ (*(_BYTE *)(a1 + 32) != 0);
    }
  }
LABEL_15:
  v12 = 0;
  return v12 ^ (*(_BYTE *)(a1 + 32) != 0);
}

uint64_t sub_18BD438C0(int a1)
{
  if ((a1 - 21) >= 7)
    abort();
  return dword_18BE298FC[a1 - 21];
}

uint64_t sub_18BD438EC(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)a1 = off_1E2264D50;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v5;
  if (v5 <= 0)
  {
    v7 = *(uint64_t **)(a2 + 8);
    if (v7)
    {
      v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x38, a2);
      if (!v8)
        goto LABEL_10;
      *v3 = sub_18BD43608((uint64_t)v8, *(_QWORD *)(a2 + 8));
    }
    v9 = *(uint64_t **)(a2 + 16);
    if (v9)
    {
      v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x20, a2);
      if (v10)
      {
        v11 = sub_18BD438EC(v10, *(_QWORD *)(a2 + 16));
        *v4 = v11;
        v12 = *(_DWORD *)(v11 + 24);
        if (v12 < 1)
          return a1;
        goto LABEL_11;
      }
      v3 = v4;
LABEL_10:
      *v3 = 0;
      v12 = 7;
LABEL_11:
      *(_DWORD *)(a1 + 24) = v12;
    }
  }
  return a1;
}

_QWORD *sub_18BD439A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E2264D50;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  a1[1] = 0;
  v3 = a1[2];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[2] = 0;
  return a1;
}

void sub_18BD43A08(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_18BD439A8(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD43A1C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  if (result)
  {
    v3 = result;
    while (1)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (!v4)
        break;
      do
      {
        result = sub_18BD4379C(v4, a2);
        v4 = *(_QWORD *)(v4 + 40);
        if (v4)
          v5 = (_DWORD)result == 0;
        else
          v5 = 1;
      }
      while (!v5);
      v3 = *(_QWORD *)(v3 + 16);
      if (v3)
        v6 = (_DWORD)result == 0;
      else
        v6 = 0;
      if (!v6)
        return result;
    }
    return 1;
  }
  return result;
}

uint64_t sub_18BD43A84(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  *(_QWORD *)a1 = off_1E2264D70;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), (UChar **)(a2 + 8));
  *(_QWORD *)(a1 + 72) = 0;
  v4 = (uint64_t *)(a1 + 72);
  *(_QWORD *)(a1 + 80) = 0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 88), (UChar **)(a2 + 88));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 152), (UChar **)(a2 + 152));
  *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
  v6 = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 220) = v6;
  if (v6 <= 0)
  {
    v7 = *(uint64_t **)(a2 + 80);
    if (v7)
    {
      v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, v5);
      if (v8)
      {
        v9 = sub_18BD438EC((uint64_t)v8, *(_QWORD *)(a2 + 80));
        *(_QWORD *)(a1 + 80) = v9;
        v10 = *(_DWORD *)(v9 + 24);
        if (v10 > 0)
        {
LABEL_12:
          *(_DWORD *)(a1 + 220) = v10;
          return a1;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 220) = 7;
      }
    }
    v11 = *(uint64_t **)(a2 + 72);
    if (v11)
    {
      v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xE0, v5);
      if (v12)
      {
        v13 = sub_18BD43A84(v12, *(_QWORD *)(a2 + 72));
        *v4 = v13;
        v10 = *(_DWORD *)(v13 + 220);
        if (v10 < 1)
          return a1;
      }
      else
      {
        *v4 = 0;
        v10 = 7;
      }
      goto LABEL_12;
    }
  }
  return a1;
}

_QWORD *sub_18BD43B78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E2264D70;
  v2 = a1[9];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 19));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 11));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

void sub_18BD43BE8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_18BD43B78(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD43BFC@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  __int16 v4;
  __int16 v6;

  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  switch(a1)
  {
    case 21:
      v4 = 110;
      break;
    case 22:
      v4 = 105;
      break;
    case 23:
      v4 = 102;
      break;
    case 24:
      v4 = 118;
      break;
    case 25:
      v4 = 116;
      break;
    case 26:
      v4 = 101;
      break;
    case 27:
      v4 = 99;
      break;
    default:
      v4 = 126;
      break;
  }
  v6 = v4;
  return icu::UnicodeString::doAppend(a2, (uint64_t)&v6, 0, 1);
}

void sub_18BD43CBC(_QWORD *a1)
{
  *a1 = off_1E2264D90;
  icu::UnicodeString::~UnicodeString(off_1E2264D90, (icu::UnicodeString *)(a1 + 3));
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BD43CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  int v6;
  int32_t v7;
  int32_t v8;
  unsigned int v9;
  int v10;
  int32_t v11;
  int32_t v12;
  unsigned int v13;
  int v14;
  int32_t v15;
  int32_t v16;
  unsigned int v17;
  int v18;
  int32_t v19;
  int32_t v20;
  unsigned int v21;
  int v22;
  int32_t v23;
  int32_t v24;
  unsigned int v25;
  int v26;
  int32_t v27;
  int32_t v28;
  unsigned int v29;
  int v30;
  int32_t v31;
  int32_t v32;
  const char *v34;
  const char *v35;
  const __int16 *v36;
  const __int16 *v37;
  const __int16 *v38;
  const char *v39;
  const __int16 *v40;
  const __int16 *v41;
  uint64_t v42[5];

  if ((_DWORD)a2 == 10)
  {
    v42[3] = v2;
    v42[4] = v3;
    v5 = *(unsigned __int16 *)(a1 + 8);
    v6 = (__int16)v5;
    v7 = v5 >> 5;
    if (v6 >= 0)
      v8 = v7;
    else
      v8 = *(_DWORD *)(a1 + 12);
    if (icu::UnicodeString::doCompare(a1, 0, v8, (uint64_t)"n", 0, 1))
    {
      v9 = *(unsigned __int16 *)(a1 + 8);
      v10 = (__int16)v9;
      v11 = v9 >> 5;
      if (v10 >= 0)
        v12 = v11;
      else
        v12 = *(_DWORD *)(a1 + 12);
      if (icu::UnicodeString::doCompare(a1, 0, v12, (uint64_t)"i", 0, 1))
      {
        v13 = *(unsigned __int16 *)(a1 + 8);
        v14 = (__int16)v13;
        v15 = v13 >> 5;
        if (v14 >= 0)
          v16 = v15;
        else
          v16 = *(_DWORD *)(a1 + 12);
        if (icu::UnicodeString::doCompare(a1, 0, v16, (uint64_t)"f", 0, 1))
        {
          v17 = *(unsigned __int16 *)(a1 + 8);
          v18 = (__int16)v17;
          v19 = v17 >> 5;
          if (v18 >= 0)
            v20 = v19;
          else
            v20 = *(_DWORD *)(a1 + 12);
          if (icu::UnicodeString::doCompare(a1, 0, v20, (uint64_t)"t", 0, 1))
          {
            v21 = *(unsigned __int16 *)(a1 + 8);
            v22 = (__int16)v21;
            v23 = v21 >> 5;
            if (v22 >= 0)
              v24 = v23;
            else
              v24 = *(_DWORD *)(a1 + 12);
            if (icu::UnicodeString::doCompare(a1, 0, v24, (uint64_t)"e", 0, 1))
            {
              v25 = *(unsigned __int16 *)(a1 + 8);
              v26 = (__int16)v25;
              v27 = v25 >> 5;
              if (v26 >= 0)
                v28 = v27;
              else
                v28 = *(_DWORD *)(a1 + 12);
              if (icu::UnicodeString::doCompare(a1, 0, v28, (uint64_t)"c", 0, 1))
              {
                v29 = *(unsigned __int16 *)(a1 + 8);
                v30 = (__int16)v29;
                v31 = v29 >> 5;
                if (v30 >= 0)
                  v32 = v31;
                else
                  v32 = *(_DWORD *)(a1 + 12);
                if (icu::UnicodeString::doCompare(a1, 0, v32, (uint64_t)"v", 0, 1))
                {
                  v42[0] = (uint64_t)"i";
                  if (sub_18BBB1AB4(a1, v42, 2))
                  {
                    v41 = L"and";
                    if (sub_18BBB1AB4(a1, (uint64_t *)&v41, 3))
                    {
                      v40 = L"in";
                      if (sub_18BBB1AB4(a1, (uint64_t *)&v40, 2))
                      {
                        v39 = "w";
                        if (sub_18BBB1AB4(a1, (uint64_t *)&v39, 6))
                        {
                          v38 = L"not";
                          if (sub_18BBB1AB4(a1, (uint64_t *)&v38, 3))
                          {
                            v37 = L"mod";
                            if (sub_18BBB1AB4(a1, (uint64_t *)&v37, 3))
                            {
                              v36 = L"or";
                              if (sub_18BBB1AB4(a1, (uint64_t *)&v36, 2))
                              {
                                v35 = "d";
                                if (sub_18BBB1AB4(a1, (uint64_t *)&v35, 7))
                                {
                                  v34 = "i";
                                  if (sub_18BBB1AB4(a1, (uint64_t *)&v34, 7))
                                    return 10;
                                  else
                                    return 29;
                                }
                                else
                                {
                                  return 28;
                                }
                              }
                              else
                              {
                                return 12;
                              }
                            }
                            else
                            {
                              return 13;
                            }
                          }
                          else
                          {
                            return 14;
                          }
                        }
                        else
                        {
                          return 19;
                        }
                      }
                      else
                      {
                        return 15;
                      }
                    }
                    else
                    {
                      return 11;
                    }
                  }
                  else
                  {
                    return 20;
                  }
                }
                else
                {
                  return 24;
                }
              }
              else
              {
                return 27;
              }
            }
            else
            {
              return 26;
            }
          }
          else
          {
            return 25;
          }
        }
        else
        {
          return 23;
        }
      }
      else
      {
        return 22;
      }
    }
    else
    {
      return 21;
    }
  }
  return a2;
}

uint64_t sub_18BD44104(int a1)
{
  uint64_t result;
  int v2;

  if ((a1 - 48) < 0xA)
    return 1;
  if ((a1 - 97) < 0x1A)
    return 10;
  if (a1 <= 57)
  {
    if (a1 <= 36)
    {
      if (a1 == 32)
        return 4;
      if (a1 == 33)
        return 17;
    }
    else
    {
      switch(a1)
      {
        case '%':
          return 13;
        case ',':
          return 2;
        case '.':
          return 7;
      }
    }
    return 0;
  }
  v2 = a1 - 58;
  result = 5;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      result = 3;
      break;
    case 3:
      result = 16;
      break;
    case 6:
      result = 6;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t sub_18BD441F8(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v6;
  icu::UVector *v7;
  unint64_t v8;
  uint64_t *v9;
  char v10;
  icu::UnicodeString *v11;
  int32_t v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = icu::StringEnumeration::StringEnumeration(a1);
  *(_QWORD *)v6 = off_1E2264DB0;
  *(_DWORD *)(v6 + 116) = 0;
  v7 = (icu::UVector *)(v6 + 120);
  icu::UVector::UVector((icu::UVector *)(v6 + 120), a3);
  if (*(int *)a3 <= 0)
  {
    icu::UVector::setDeleter(v7, (void (*)(void *))uprv_deleteUObject);
    if (a2)
    {
      v10 = 1;
      while (1)
      {
        v11 = icu::UnicodeString::clone((UChar **)(a2 + 8), v8, v9);
        if (!v11 && *(int *)a3 <= 0)
          *a3 = U_MEMORY_ALLOCATION_ERROR;
        icu::UVector::adoptElement(v7, v11, a3);
        if (*(int *)a3 > 0)
          break;
        if (*(__int16 *)(a2 + 16) < 0)
          v12 = *(_DWORD *)(a2 + 20);
        else
          v12 = *(unsigned __int16 *)(a2 + 16) >> 5;
        if (!icu::UnicodeString::doCompare(a2 + 8, 0, v12, (uint64_t)"o", 0, 5))
          v10 = 0;
        a2 = *(_QWORD *)(a2 + 72);
        if (!a2)
        {
          if (!v10)
            return a1;
          goto LABEL_15;
        }
      }
    }
    else
    {
LABEL_15:
      v13 = icu::UMemory::operator new(v9, (icu::UMemory *)0x40, v8);
      v14 = v13;
      if (v13)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)"o");
      }
      else if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
      icu::UVector::adoptElement(v7, v14, a3);
    }
  }
  return a1;
}

uint64_t sub_18BD44370(_DWORD *a1, int *a2)
{
  signed int v2;

  if (*a2 > 0)
    return 0;
  v2 = a1[29];
  if (v2 >= a1[32])
    return 0;
  a1[29] = v2 + 1;
  return icu::UVector::elementAt((icu::UVector *)(a1 + 30), v2);
}

uint64_t sub_18BD443A8(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18BD443B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

void sub_18BD443B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264DB0;
  icu::UVector::~UVector((icu::UVector *)(a1 + 120));
  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)a1);
}

void sub_18BD443E8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264DB0;
  icu::UVector::~UVector((icu::UVector *)(a1 + 120));
  icu::StringEnumeration::~StringEnumeration((icu::StringEnumeration *)a1);
  icu::UMemory::operator delete(v2);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5, int a6)
{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a6);
  return this;
}

{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a6);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5, int a6)
{
  double v11;
  _BOOL8 result;
  int v13;
  double v14;

  *((_BYTE *)this + 61) = a2 < 0.0;
  v11 = fabs(a2);
  *((double *)this + 2) = v11;
  *((_BYTE *)this + 62) = uprv_isNaN(v11);
  result = uprv_isInfinite(*((double *)this + 2));
  *((_BYTE *)this + 63) = result;
  if (a5)
    v13 = a5;
  else
    v13 = a6;
  *((_DWORD *)this + 14) = v13;
  if (*((_BYTE *)this + 62) | result)
  {
    a4 = 0;
    *((_QWORD *)this + 6) = 0;
    *((_BYTE *)this + 60) = 0;
    *((_DWORD *)this + 6) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    v14 = *((double *)this + 2);
    *((_QWORD *)this + 6) = (uint64_t)v14;
    *((_BYTE *)this + 60) = v14 == (double)(uint64_t)v14;
    *((_DWORD *)this + 6) = a3;
    *((_QWORD *)this + 4) = a4;
    if (a4 && __ROR8__(0xCCCCCCCCCCCCCCCDLL * a4 + 0x1999999999999998, 1) <= 0x1999999999999998uLL)
    {
      do
        a4 /= 10;
      while (__ROR8__(0x1999999999999998 - 0x3333333333333333 * a4, 1) < 0x1999999999999999uLL);
    }
  }
  *((_QWORD *)this + 5) = a4;
  return result;
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5)
{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
  return this;
}

{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4, int a5)
{
  return icu::FixedDecimal::init(this, a2, a3, a4, a5, a5);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, int a3, uint64_t a4)
{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
  return this;
}

{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
  return this;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2, int a3, uint64_t a4)
{
  return icu::FixedDecimal::init(this, a2, a3, a4, 0, 0);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, double a2, icu::FixedDecimal *a3)
{
  int v3;
  unint64_t FractionalDigits;

  v3 = (int)a3;
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  FractionalDigits = icu::FixedDecimal::getFractionalDigits(a3, a2);
  icu::FixedDecimal::init(this, a2, v3, FractionalDigits, 0, 0);
  return this;
}

{
  int v3;
  unint64_t FractionalDigits;

  v3 = (int)a3;
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  FractionalDigits = icu::FixedDecimal::getFractionalDigits(a3, a2);
  icu::FixedDecimal::init(this, a2, v3, FractionalDigits, 0, 0);
  return this;
}

unint64_t icu::FixedDecimal::getFractionalDigits(icu::FixedDecimal *this, double a2)
{
  int v2;
  unint64_t result;
  double v5;
  double v6;
  double v8;
  double v9;
  unint64_t v10;

  v2 = (int)this;
  result = 0;
  if (!v2 || floor(a2) == a2)
    return result;
  if (uprv_isNaN(a2) || uprv_isPositiveInfinity(a2))
    return 0;
  v5 = fabs(a2);
  v6 = v5 - floor(v5);
  switch(v2)
  {
    case 3:
      v8 = 1000.0;
      return (uint64_t)(v6 * v8 + 0.5);
    case 2:
      v8 = 100.0;
      return (uint64_t)(v6 * v8 + 0.5);
    case 1:
      return (uint64_t)(v6 * 10.0 + 0.5);
  }
  v9 = v6 * __exp10((double)v2) + 0.5;
  v10 = vcvtmd_s64_f64(v9);
  if (floor(v9) >= 9.22337204e18)
    return 0x7FFFFFFFFFFFFFFFLL;
  else
    return v10;
}

BOOL icu::FixedDecimal::init(icu::FixedDecimal *this, double a2)
{
  icu::FixedDecimal *v4;
  int v5;
  unint64_t FractionalDigits;

  v4 = (icu::FixedDecimal *)icu::FixedDecimal::decimals(this, a2);
  v5 = (int)v4;
  FractionalDigits = icu::FixedDecimal::getFractionalDigits(v4, a2);
  return icu::FixedDecimal::init(this, a2, v5, FractionalDigits, 0, 0);
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this)
{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, 0.0, 0, 0, 0, 0);
  return this;
}

{
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  icu::FixedDecimal::init(this, 0.0, 0, 0, 0, 0);
  return this;
}

icu::FixedDecimal *icu::FixedDecimal::FixedDecimal(icu::FixedDecimal *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v6;
  int v7;
  int32_t v8;
  int32_t v9;
  int32_t v10;
  unsigned int v11;
  int v12;
  int32_t v13;
  int32_t v14;
  unsigned int v15;
  int v16;
  int32_t v17;
  int32_t v18;
  int32_t v19;
  void *v20;
  int *v21;
  int v22;
  unsigned int v23;
  int v24;
  int32_t v25;
  int32_t v26;
  void *v27;
  int *v28;
  double v29;
  icu::FixedDecimal *v30;
  int v31;
  unint64_t FractionalDigits;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int32_t v37;
  int32_t v38;
  int v39;
  double v40;
  int v41;
  unsigned int v42;
  _OWORD v44[4];
  uint64_t v45;
  void *v46[7];
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E2264E18;
  *((_QWORD *)this + 1) = &unk_1E2264E58;
  memset(&v46[1], 0, 48);
  v47 = 0;
  v46[0] = (char *)&v46[1] + 5;
  LODWORD(v46[1]) = 40;
  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = (__int16)v6;
  v8 = v6 >> 5;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = *((_DWORD *)a2 + 3);
  v10 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x65u, 0, v9);
  if (v10 < 0)
  {
    v11 = *((unsigned __int16 *)a2 + 4);
    v12 = (__int16)v11;
    v13 = v11 >> 5;
    if (v12 >= 0)
      v14 = v13;
    else
      v14 = *((_DWORD *)a2 + 3);
    v10 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x45u, 0, v14);
  }
  v15 = *((unsigned __int16 *)a2 + 4);
  v16 = (__int16)v15;
  v17 = v15 >> 5;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *((_DWORD *)a2 + 3);
  v19 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x63u, 0, v18);
  if (v19 < 0)
  {
    v23 = *((unsigned __int16 *)a2 + 4);
    v24 = (__int16)v23;
    v25 = v23 >> 5;
    if (v24 >= 0)
      v26 = v25;
    else
      v26 = *((_DWORD *)a2 + 3);
    v19 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x43u, 0, v26);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_14;
  }
  else if ((v10 & 0x80000000) == 0)
  {
LABEL_14:
    icu::UnicodeString::tempSubString(a2, 0, v10, (icu::UnicodeString *)v44);
    icu::CharString::appendInvariantChars((icu::CharString *)v46, (const icu::UnicodeString *)v44, a3);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v44);
    LODWORD(v44[0]) = v10 + 1;
    v22 = icu::ICU_Utility::parseAsciiInteger(a2, (const icu::UnicodeString *)v44, v21);
    goto LABEL_22;
  }
  if (v19 < 0)
  {
    icu::CharString::appendInvariantChars((icu::CharString *)v46, a2, a3);
    v22 = 0;
  }
  else
  {
    icu::UnicodeString::tempSubString(a2, 0, v19, (icu::UnicodeString *)v44);
    icu::CharString::appendInvariantChars((icu::CharString *)v46, (const icu::UnicodeString *)v44, a3);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v44);
    LODWORD(v44[0]) = v19 + 1;
    v22 = icu::ICU_Utility::parseAsciiInteger(a2, (const icu::UnicodeString *)v44, v28);
    v10 = v19;
  }
LABEL_22:
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v44);
  icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v44, (const char *)v46[0], v47, a3);
  if (*(int *)a3 < 1)
  {
    v35 = *((unsigned __int16 *)a2 + 4);
    v36 = (__int16)v35;
    v37 = v35 >> 5;
    if (v36 >= 0)
      v38 = v37;
    else
      v38 = *((_DWORD *)a2 + 3);
    v39 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x2Eu, 0, v38);
    v29 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v44);
    v40 = v29;
    if (v39 == -1)
    {
      v30 = this;
      v31 = 0;
      FractionalDigits = 0;
    }
    else
    {
      if (v10 < 0)
      {
        if (*((__int16 *)a2 + 4) < 0)
          v41 = *((_DWORD *)a2 + 3);
        else
          v41 = *((unsigned __int16 *)a2 + 4) >> 5;
      }
      else
      {
        v41 = v47;
      }
      v42 = v41 + ~v39;
      FractionalDigits = icu::FixedDecimal::getFractionalDigits((icu::FixedDecimal *)v42, v29);
      v30 = this;
      v29 = v40;
      v31 = v42;
    }
    v33 = v22;
    v34 = v22;
  }
  else
  {
    v29 = 0.0;
    v30 = this;
    v31 = 0;
    FractionalDigits = 0;
    v33 = 0;
    v34 = 0;
  }
  icu::FixedDecimal::init(v30, v29, v31, FractionalDigits, v33, v34);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v44);
  if (BYTE4(v46[1]))
    uprv_free(v46[0]);
  return this;
}

__n128 icu::FixedDecimal::FixedDecimal(__n128 *this, __n128 *a2)
{
  __n128 result;

  this->n128_u64[0] = (unint64_t)off_1E2264E18;
  this->n128_u64[1] = (unint64_t)&unk_1E2264E58;
  this[1].n128_u64[0] = a2[1].n128_u64[0];
  this[1].n128_u32[2] = a2[1].n128_u32[2];
  result = a2[2];
  this[2] = result;
  this[3].n128_u64[0] = a2[3].n128_u64[0];
  this[3].n128_u32[2] = a2[3].n128_u32[2];
  this[3].n128_u32[3] = a2[3].n128_u32[3];
  return result;
}

{
  __n128 result;

  this->n128_u64[0] = (unint64_t)off_1E2264E18;
  this->n128_u64[1] = (unint64_t)&unk_1E2264E58;
  this[1].n128_u64[0] = a2[1].n128_u64[0];
  this[1].n128_u32[2] = a2[1].n128_u32[2];
  result = a2[2];
  this[2] = result;
  this[3].n128_u64[0] = a2[3].n128_u64[0];
  this[3].n128_u32[2] = a2[3].n128_u32[2];
  this[3].n128_u32[3] = a2[3].n128_u32[3];
  return result;
}

void `non-virtual thunk to'icu::FixedDecimal::~FixedDecimal(icu::FixedDecimal *this)
{
  icu::IFixedDecimal *v1;

  v1 = (icu::FixedDecimal *)((char *)this - 8);
  icu::UObject::~UObject(this);
  icu::IFixedDecimal::~IFixedDecimal(v1);
}

{
  icu::IFixedDecimal *v1;
  void *v2;

  v1 = (icu::FixedDecimal *)((char *)this - 8);
  icu::UObject::~UObject(this);
  icu::IFixedDecimal::~IFixedDecimal(v1);
  icu::UMemory::operator delete(v2);
}

BOOL icu::FixedDecimal::createWithExponent@<W0>(icu::FixedDecimal *this@<X0>, double a2@<D0>, int a3@<W1>, icu::FixedDecimal *a4@<X8>)
{
  int v5;
  unint64_t FractionalDigits;

  v5 = (int)this;
  FractionalDigits = icu::FixedDecimal::getFractionalDigits(this, a2);
  *(_QWORD *)a4 = off_1E2264E18;
  *((_QWORD *)a4 + 1) = &unk_1E2264E58;
  return icu::FixedDecimal::init(a4, a2, v5, FractionalDigits, a3, a3);
}

uint64_t icu::FixedDecimal::decimals(icu::FixedDecimal *this, double a2)
{
  uint64_t result;
  double v3;
  double v4;
  int v5;
  uint64_t v6;
  int v7;
  char __str[8];
  uint64_t v9;
  _QWORD v10[3];

  result = 0;
  v10[2] = *MEMORY[0x1E0C80C00];
  v3 = fabs(a2);
  while (1)
  {
    v4 = v3 * (double)dword_18BE297A8[result];
    if (v4 == floor(v4))
      break;
    if (++result == 4)
    {
      *(_QWORD *)__str = 0;
      v9 = 0;
      *(_QWORD *)((char *)v10 + 6) = 0;
      v10[0] = 0;
      snprintf(__str, 0x1EuLL, "%1.15e", v3);
      v5 = atoi((const char *)v10 + 2);
      if (LOBYTE(v10[0]) == 48)
      {
        v6 = 15;
        do
          v7 = __str[v6--];
        while (v7 == 48);
      }
      else
      {
        LODWORD(v6) = 15;
      }
      return (v6 - v5);
    }
  }
  return result;
}

uint64_t icu::FixedDecimal::quickInit(icu::FixedDecimal *this, double a2)
{
  double v3;
  icu::FixedDecimal *v4;
  BOOL v5;
  double v6;
  uint64_t v7;
  unint64_t FractionalDigits;

  v3 = fabs(a2);
  if (v3 == floor(v3))
  {
    v4 = 0;
    v5 = 0;
LABEL_7:
    v7 = 1;
    if (!v5)
    {
      FractionalDigits = icu::FixedDecimal::getFractionalDigits(v4, v3);
      icu::FixedDecimal::init(this, v3, (int)v4, FractionalDigits, 0, 0);
    }
  }
  else
  {
    v4 = 0;
    while (v4 != (icu::FixedDecimal *)3)
    {
      v6 = v3 * (double)dword_18BE297A8[(_QWORD)v4 + 1];
      v4 = (icu::FixedDecimal *)((char *)v4 + 1);
      if (v6 == floor(v6))
      {
        v5 = (unint64_t)v4 - 1 > 2;
        goto LABEL_7;
      }
    }
    return 0;
  }
  return v7;
}

uint64_t icu::FixedDecimal::adjustForMinFractionDigits(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(this + 24);
  if (a2 - v2 >= 1)
  {
    v3 = *(_QWORD *)(this + 32);
    do
    {
      if (v3 > 0x16345785D89FFFFLL)
        break;
      v3 *= 10;
      *(_QWORD *)(this + 32) = v3;
      ++v2;
    }
    while (a2 != v2);
    *(_DWORD *)(this + 24) = a2;
  }
  return this;
}

double icu::FixedDecimal::getPluralOperand(uint64_t a1, int a2)
{
  int v3;
  double v4;
  int v5;

  switch(a2)
  {
    case 0:
      v3 = *(_DWORD *)(a1 + 56);
      v4 = *(double *)(a1 + 16);
      if (v3)
        return v4 * __exp10((double)v3);
      return v4;
    case 1:
      v5 = *(_DWORD *)(a1 + 56);
      if (v5)
        return (double)(uint64_t)(__exp10((double)v5) * (double)*(uint64_t *)(a1 + 48));
      else
        return (double)*(uint64_t *)(a1 + 48);
    case 2:
      return (double)*(uint64_t *)(a1 + 32);
    case 3:
      return (double)*(uint64_t *)(a1 + 40);
    case 4:
      return (double)*(int *)(a1 + 24);
    case 6:
    case 7:
      return (double)*(int *)(a1 + 56);
    default:
      abort();
  }
}

uint64_t icu::FixedDecimal::longValue(icu::FixedDecimal *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14);
  if (v1)
    return (uint64_t)(__exp10((double)v1) * (double)*((uint64_t *)this + 6));
  else
    return *((_QWORD *)this + 6);
}

BOOL icu::FixedDecimal::isNaN(icu::FixedDecimal *this)
{
  return *((_BYTE *)this + 62) != 0;
}

BOOL icu::FixedDecimal::isInfinite(icu::FixedDecimal *this)
{
  return *((_BYTE *)this + 63) != 0;
}

BOOL icu::FixedDecimal::hasIntegerValue(icu::FixedDecimal *this)
{
  return *((_BYTE *)this + 60) != 0;
}

BOOL icu::FixedDecimal::isNanOrInfinity(icu::FixedDecimal *this)
{
  return *((_BYTE *)this + 62) || *((_BYTE *)this + 63) != 0;
}

uint64_t icu::FixedDecimal::getVisibleFractionDigitCount(icu::FixedDecimal *this)
{
  return *((unsigned int *)this + 6);
}

BOOL icu::FixedDecimal::operator==(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
}

uint64_t icu::FixedDecimal::toString@<X0>(icu::FixedDecimal *this@<X0>, uint64_t a2@<X8>)
{
  char __str[8];
  uint64_t v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)__str = 0;
  v5 = 0;
  v6 = 0;
  if (*((_DWORD *)this + 14))
    snprintf(__str, 0x14uLL, "%.*fe%d");
  else
    snprintf(__str, 0x14uLL, "%.*f");
  return icu::UnicodeString::UnicodeString(a2, __str, 0xFFFFFFFFLL, 0);
}

double icu::FixedDecimal::doubleValue(icu::FixedDecimal *this)
{
  double v1;

  if (*((_BYTE *)this + 61))
    v1 = -*((double *)this + 2);
  else
    v1 = *((double *)this + 2);
  return v1 * __exp10((double)*((int *)this + 14));
}

icu::PluralAvailableLocalesEnumeration *icu::PluralAvailableLocalesEnumeration::PluralAvailableLocalesEnumeration(icu::PluralAvailableLocalesEnumeration *this, UErrorCode *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int *v6;
  _QWORD *v7;

  v4 = icu::StringEnumeration::StringEnumeration((uint64_t)this);
  *(_QWORD *)v4 = off_1E2264E80;
  *(_QWORD *)(v4 + 120) = 0;
  v5 = (uint64_t *)(v4 + 120);
  *(_QWORD *)(v4 + 128) = 0;
  *(UErrorCode *)(v4 + 116) = *a2;
  v6 = (int *)(v4 + 116);
  if (*(int *)a2 <= 0)
  {
    *v6 = 0;
    v7 = (_QWORD *)ures_openDirect(0, (uint64_t)"plurals", (uint64_t)v6);
    *v5 = ures_getByKey((uint64_t)v7, "locales", 0, v6);
    if (v7)
      ures_close(v7);
  }
  return this;
}

void icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration(icu::PluralAvailableLocalesEnumeration *this)
{
  *(_QWORD *)this = off_1E2264E80;
  ures_close(*((_QWORD **)this + 15));
  ures_close(*((_QWORD **)this + 16));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  icu::StringEnumeration::~StringEnumeration(this);
}

{
  void *v1;

  icu::PluralAvailableLocalesEnumeration::~PluralAvailableLocalesEnumeration(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::PluralAvailableLocalesEnumeration::next(icu::PluralAvailableLocalesEnumeration *this, int *a2, UErrorCode *a3)
{
  const char *v3;
  UErrorCode v6;
  char *NextResource;
  int v10;
  BOOL v11;
  const char *Key;

  if (*(int *)a3 > 0)
    return 0;
  v6 = *((_DWORD *)this + 29);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v3 = 0;
    *a3 = v6;
    return v3;
  }
  NextResource = ures_getNextResource(*((_QWORD *)this + 15), *((char **)this + 16), (int *)a3);
  *((_QWORD *)this + 16) = NextResource;
  v10 = *a3;
  if (NextResource)
    v11 = v10 < 1;
  else
    v11 = 0;
  if (!v11)
  {
    if (v10 == 8)
    {
      v3 = 0;
      *a3 = U_ZERO_ERROR;
      return v3;
    }
    return 0;
  }
  Key = (const char *)ures_getKey((uint64_t)NextResource);
  v3 = Key;
  if (a2)
    *a2 = strlen(Key);
  return v3;
}

uint64_t icu::PluralAvailableLocalesEnumeration::reset(uint64_t this, UErrorCode *a2)
{
  UErrorCode v2;

  if (*(int *)a2 <= 0)
  {
    v2 = *(_DWORD *)(this + 116);
    if (v2 < U_ILLEGAL_ARGUMENT_ERROR)
      return ures_resetIterator(*(_QWORD *)(this + 120));
    else
      *a2 = v2;
  }
  return this;
}

uint64_t icu::PluralAvailableLocalesEnumeration::count(icu::PluralAvailableLocalesEnumeration *this, UErrorCode *a2)
{
  UErrorCode v2;

  if (*(int *)a2 > 0)
    return 0;
  v2 = *((_DWORD *)this + 29);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a2 = v2;
    return 0;
  }
  return ures_getSize(*((_QWORD *)this + 15));
}

void sub_18BD45490(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264FE0;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18BD454C0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264FE0;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BD454F4(uint64_t a1)
{
  int v2;
  unsigned int v3;

  v2 = strlen((const char *)((unint64_t)"N3icu17SharedPluralRulesE" & 0x7FFFFFFFFFFFFFFFLL));
  v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu17SharedPluralRulesE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18BD4554C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *v4 = (uint64_t)off_1E2264FE0;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18BD455A0(uint64_t a1, char *__dst, int a3)
{
  char *result;

  result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18BD455D8(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = sub_18BC8C418(a1, a2);
  if (result)
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return result;
}

void *sub_18BD45614()
{
  return &unk_1EE009C63;
}

uint64_t sub_18BD45620(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(_QWORD *)result = off_1E2265060;
  *(_QWORD *)(result + 8) = &unk_1E22650C8;
  *(_QWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = a3;
  *(_DWORD *)(result + 28) = a4;
  return result;
}

void sub_18BD4563C(_QWORD *a1)
{
  icu::UnicodeMatcher *v2;
  uint64_t v3;

  *a1 = off_1E2265060;
  a1[1] = &unk_1E22650C8;
  v2 = (icu::UnicodeMatcher *)(a1 + 1);
  v3 = a1[2];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeMatcher::~UnicodeMatcher(v2);
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18BD45694(uint64_t a1)
{
  sub_18BD4563C((_QWORD *)(a1 - 8));
}

void sub_18BD4569C(_QWORD *a1)
{
  void *v1;

  sub_18BD4563C(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD456B0(uint64_t a1)
{
  void *v1;

  sub_18BD4563C((_QWORD *)(a1 - 8));
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BD456C8(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x20, a2);
  v4 = v3;
  if (v3)
  {
    *v3 = off_1E2265060;
    v3[1] = &unk_1E22650C8;
    v3[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
    v4[3] = *(_QWORD *)(a1 + 24);
  }
  return v4;
}

uint64_t sub_18BD45724(uint64_t a1)
{
  if (a1)
    return a1 + 8;
  else
    return 0;
}

uint64_t sub_18BD45734(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t result;

  v10 = 0;
  v11 = *a3;
  v12 = *a3;
  while (1)
  {
    v13 = v12;
    if (v10 >= *(_DWORD *)(a1 + 28))
    {
LABEL_5:
      if (!(_DWORD)a5)
        goto LABEL_11;
      goto LABEL_6;
    }
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
    result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, a2, a3, a4, a5);
    if ((_DWORD)result != 2)
      break;
    ++v10;
    v12 = *a3;
    if (v13 == *a3)
      goto LABEL_5;
  }
  if (!(_DWORD)a5 || (_DWORD)result != 1)
  {
    v13 = *a3;
    if (!(_DWORD)a5)
    {
LABEL_11:
      if (v10 >= *(_DWORD *)(a1 + 24))
        return 2;
      result = 0;
      *a3 = v11;
      return result;
    }
LABEL_6:
    if (v13 == (_DWORD)a4)
      return 1;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_18BD4581C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  return sub_18BD45734(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_18BD45824(uint64_t a1, icu::UnicodeString *this, uint64_t a3)
{
  icu::ICU_Utility *v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 *v11;
  icu::UnicodeString *v12;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;

  v4 = this;
  v6 = *((unsigned __int16 *)this + 4);
  if ((v6 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v6 & 0x8000u) == 0)
      v7 = v6 >> 5;
    else
      v7 = *((_DWORD *)this + 3);
    if (v7)
      *((_WORD *)this + 4) &= 0x1Fu;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  (*(void (**)(uint64_t, icu::ICU_Utility *, uint64_t))(*(_QWORD *)v8 + 24))(v8, v4, a3);
  v9 = *(_DWORD *)(a1 + 24);
  if (v9 == 1)
  {
    if (*(_DWORD *)(a1 + 28) == 0x7FFFFFFF)
    {
      v16 = 43;
      v11 = &v16;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1);
    }
  }
  else if (!v9)
  {
    v10 = *(_DWORD *)(a1 + 28);
    if (v10 == 0x7FFFFFFF)
    {
      v15 = 42;
      v11 = &v15;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1);
    }
    if (v10 == 1)
    {
      v14 = 63;
      v11 = &v14;
      return (icu::ICU_Utility *)icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)v11, 0, 1);
    }
  }
  v17 = 123;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v17, 0, 1);
  icu::ICU_Utility::appendNumber(v4, (icu::UnicodeString *)*(unsigned int *)(a1 + 24), 0xAu, 1);
  v18 = 44;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v18, 0, 1);
  v12 = (icu::UnicodeString *)*(unsigned int *)(a1 + 28);
  if ((_DWORD)v12 != 0x7FFFFFFF)
    icu::ICU_Utility::appendNumber(v4, v12, 0xAu, 1);
  v19 = 125;
  icu::UnicodeString::doAppend((uint64_t)v4, (uint64_t)&v19, 0, 1);
  return v4;
}

icu::ICU_Utility *sub_18BD459B8(uint64_t a1, icu::UnicodeString *a2, uint64_t a3)
{
  return sub_18BD45824(a1 - 8, a2, a3);
}

BOOL sub_18BD459C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (!*(_DWORD *)(a1 + 24))
    return 1;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2) != 0;
}

BOOL sub_18BD45A14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (!*(_DWORD *)(a1 + 16))
    return 1;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2) != 0;
}

uint64_t sub_18BD45A68(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (*(_DWORD *)(result + 28))
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 32))(*(_QWORD *)(result + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return result;
}

uint64_t sub_18BD45AB4(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (*(_DWORD *)(result + 20))
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 32))(*(_QWORD *)(result + 8));
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return result;
}

uint64_t sub_18BD45B00(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

double icu::QuantityFormatter::QuantityFormatter(icu::QuantityFormatter *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

icu::QuantityFormatter *icu::QuantityFormatter::QuantityFormatter(icu::QuantityFormatter *this, const icu::QuantityFormatter *a2)
{
  uint64_t i;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  for (i = 0; i != 64; i += 8)
  {
    v5 = *(uint64_t **)((char *)a2 + i);
    if (v5)
    {
      v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x48, (unint64_t)a2);
      v7 = v6;
      if (v6)
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 1), (UChar **)(*(_QWORD *)((char *)a2 + i) + 8));
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)((char *)this + i) = v7;
  }
  return this;
}

uint64_t icu::QuantityFormatter::operator=(uint64_t a1, unint64_t a2)
{
  uint64_t i;
  icu::SimpleFormatter *v5;
  void *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  if (a1 != a2)
  {
    for (i = 0; i != 64; i += 8)
    {
      v5 = *(icu::SimpleFormatter **)(a1 + i);
      if (v5)
      {
        icu::SimpleFormatter::~SimpleFormatter(v5);
        icu::UMemory::operator delete(v6);
      }
      v7 = *(uint64_t **)(a2 + i);
      if (v7)
      {
        v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x48, a2);
        v9 = v8;
        if (v8)
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 1), (UChar **)(*(_QWORD *)(a2 + i) + 8));
      }
      else
      {
        v9 = 0;
      }
      *(_QWORD *)(a1 + i) = v9;
    }
  }
  return a1;
}

void icu::QuantityFormatter::~QuantityFormatter(icu::QuantityFormatter *this)
{
  uint64_t i;
  icu::SimpleFormatter *v3;
  void *v4;

  for (i = 0; i != 64; i += 8)
  {
    v3 = *(icu::SimpleFormatter **)((char *)this + i);
    if (v3)
    {
      icu::SimpleFormatter::~SimpleFormatter(v3);
      icu::UMemory::operator delete(v4);
    }
  }
}

void icu::QuantityFormatter::reset(icu::QuantityFormatter *this)
{
  uint64_t i;
  icu::SimpleFormatter *v3;
  void *v4;

  for (i = 0; i != 64; i += 8)
  {
    v3 = *(icu::SimpleFormatter **)((char *)this + i);
    if (v3)
    {
      icu::SimpleFormatter::~SimpleFormatter(v3);
      icu::UMemory::operator delete(v4);
    }
    *(_QWORD *)((char *)this + i) = 0;
  }
}

uint64_t icu::QuantityFormatter::addIfAbsent(icu::QuantityFormatter *this, icu::StandardPlural *a2, UErrorCode *a3, UErrorCode *a4)
{
  int v7;
  unint64_t v8;
  uint64_t result;
  int v10;
  icu::SimpleFormatter *v11;
  void *v12;

  v7 = icu::StandardPlural::indexFromString(a2, (char *)a4, a3);
  if (*(int *)a4 > 0)
    return 0;
  v10 = v7;
  if (*((_QWORD *)this + v7))
    return 1;
  result = (uint64_t)icu::UMemory::operator new(0, (icu::UMemory *)0x48, v8);
  if (result)
  {
    v11 = (icu::SimpleFormatter *)result;
    *(_QWORD *)(result + 8) = off_1E2256B38;
    *(_WORD *)(result + 16) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)result, (const icu::UnicodeString *)a3, 0, 1, 0, a4);
    if (*(int *)a4 >= 1)
    {
      icu::SimpleFormatter::~SimpleFormatter(v11);
      icu::UMemory::operator delete(v12);
      return 0;
    }
    *((_QWORD *)this + v10) = v11;
    return 1;
  }
  *a4 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

BOOL icu::QuantityFormatter::isValid(icu::QuantityFormatter *this)
{
  return *((_QWORD *)this + 5) != 0;
}

uint64_t icu::QuantityFormatter::getByVariant(icu::QuantityFormatter *this, icu::StandardPlural *a2)
{
  int v3;
  int v4;
  uint64_t result;

  v3 = icu::StandardPlural::indexOrNegativeFromString(a2, (const char *)a2);
  if (v3 < 0)
    v4 = 5;
  else
    v4 = v3;
  result = *((_QWORD *)this + v4);
  if (!result)
    return *((_QWORD *)this + 5);
  return result;
}

icu::UnicodeString *icu::QuantityFormatter::format(icu::QuantityFormatter *this, const icu::Formattable *a2, const icu::NumberFormat *a3, const icu::PluralRules *a4, icu::UnicodeString *a5, icu::FieldPosition *a6, UErrorCode *a7)
{
  unsigned int v11;
  UErrorCode *v12;
  uint64_t v13;
  icu::QuantityFormatter *v14;
  void (**v16)(icu::UnicodeString *__hidden);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v20 = 0;
  v19 = 0u;
  v16 = off_1E2256B38;
  LOWORD(v17) = 2;
  v11 = icu::QuantityFormatter::selectPlural(a2, a3, a4, (const icu::PluralRules *)&v16, a6, a7, a7);
  v13 = *(unsigned int *)a7;
  if ((int)v13 <= 0)
  {
    v14 = (icu::QuantityFormatter *)*((_QWORD *)this + v11);
    if (v14 || (v14 = (icu::QuantityFormatter *)*((_QWORD *)this + 5)) != 0)
    {
      icu::QuantityFormatter::format(v14, (const icu::SimpleFormatter *)&v16, a5, a6, a7, v12);
    }
    else
    {
      v13 = 27;
      *a7 = U_INVALID_STATE_ERROR;
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v16);
  return a5;
}

uint64_t icu::QuantityFormatter::selectPlural(icu::QuantityFormatter *this, const icu::Formattable *lpsrc, const icu::NumberFormat *a3, const icu::PluralRules *a4, icu::UnicodeString *a5, UErrorCode *a6, UErrorCode *a7)
{
  uint64_t v7;
  icu::DecimalFormat *v14;
  icu::DecimalFormat *v15;
  uint64_t v16;
  double v17;
  void *v18;
  const icu::UnicodeString *v19;
  void *v20;
  int v21;
  _BYTE v23[64];
  _OWORD v24[4];
  uint64_t v25;
  void (**v26)(icu::UnicodeString *__hidden);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    v27 = 0u;
    v30 = 0;
    v29 = 0u;
    v28 = 0u;
    v26 = off_1E2256B38;
    LOWORD(v27) = 2;
    if (v14)
    {
      v15 = v14;
      v25 = 0;
      memset(v24, 0, sizeof(v24));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v24);
      icu::DecimalFormat::formatToDecimalQuantity(v15, this, (icu::number::impl::DecimalQuantity *)v24, a6);
      if (*(int *)a6 > 0)
      {
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v24);
LABEL_6:
        v7 = 5;
LABEL_19:
        icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
        return v7;
      }
      icu::PluralRules::select(a3, (const icu::IFixedDecimal *)v24, (icu::UnicodeString *)v23);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v26, (icu::UnicodeString *)v23);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v23);
      (*(void (**)(icu::DecimalFormat *, icu::QuantityFormatter *, const icu::PluralRules *, icu::UnicodeString *, UErrorCode *))(*(_QWORD *)v15 + 40))(v15, this, a4, a5, a6);
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v24);
LABEL_16:
      v21 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v26, v19);
      v16 = 5;
      if (v21 < 0)
        v7 = 5;
      else
        v7 = v21;
      goto LABEL_19;
    }
    if (icu::Formattable::getType(this) == 1)
    {
      v17 = *((double *)this + 1);
    }
    else
    {
      if (icu::Formattable::getType(this) == 2)
      {
        icu::PluralRules::select(a3, *((_DWORD *)this + 2), (icu::UnicodeString *)v24);
LABEL_15:
        icu::UnicodeString::operator=((icu::UnicodeString *)&v26, (icu::UnicodeString *)v24);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
        (*(void (**)(const icu::Formattable *, icu::QuantityFormatter *, const icu::PluralRules *, icu::UnicodeString *, UErrorCode *))(*(_QWORD *)lpsrc + 40))(lpsrc, this, a4, a5, a6);
        goto LABEL_16;
      }
      if (icu::Formattable::getType(this) != 5)
      {
        v16 = 1;
        *a6 = U_ILLEGAL_ARGUMENT_ERROR;
        goto LABEL_6;
      }
      v17 = (double)*((uint64_t *)this + 1);
    }
    icu::PluralRules::select(a3, v17, (icu::UnicodeString *)v24);
    goto LABEL_15;
  }
  return 5;
}

const icu::UnicodeString *icu::QuantityFormatter::format(icu::QuantityFormatter *this, const icu::SimpleFormatter *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v8;
  int v9;
  int v10;
  int __b;
  icu::UnicodeString *v13;

  if (*(int *)a5 <= 0)
  {
    v13 = a2;
    __b = 0;
    icu::SimpleFormatter::formatAndAppend(this, &v13, 1u, a3, &__b, 1, a5);
    v8 = *((_DWORD *)a4 + 4);
    if (*(_QWORD *)((char *)a4 + 12))
    {
      v9 = __b;
      if (__b < 0)
      {
        v10 = 0;
        *((_DWORD *)a4 + 3) = 0;
      }
      else
      {
        *((_DWORD *)a4 + 3) += __b;
        v10 = v8 + v9;
      }
      *((_DWORD *)a4 + 4) = v10;
    }
  }
  return a3;
}

void *icu::QuantityFormatter::formatAndSelect(void *a1, icu::PluralRules *a2, int *a3, _DWORD *a4, UErrorCode *a5, double a6)
{
  icu::DecimalFormat *v12;
  icu::DecimalFormat *v13;
  icu::number::LocalizedNumberFormatter *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const icu::UnicodeString *v18;
  void *v19;
  void *v20;
  int v21;
  void (**v23)(icu::UnicodeString *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[19];
  _OWORD v29[6];
  uint64_t v30;
  void (**v31)(icu::UnicodeString *__hidden);
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v32 = 0u;
  v35 = 0;
  v34 = 0u;
  v33 = 0u;
  v31 = off_1E2256B38;
  LOWORD(v32) = 2;
  if (v12)
  {
    v13 = v12;
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    memset(v28, 0, sizeof(v28));
    sub_18BCC2258((uint64_t)v28);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v29, a6);
    v14 = (icu::number::LocalizedNumberFormatter *)icu::DecimalFormat::toNumberFormatter(v13, a5);
    if (*(int *)a5 > 0
      || (icu::number::LocalizedNumberFormatter::formatImpl(v14, (icu::number::impl::UFormattedNumberData *)v28, a5),
          *(int *)a5 > 0))
    {
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v28);
      return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
    }
    icu::FormattedStringBuilder::operator=((uint64_t)a3, (uint64_t)v28 + 8);
    icu::PluralRules::select(a2, (const icu::IFixedDecimal *)v29, (icu::UnicodeString *)&v23);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v31, (icu::UnicodeString *)&v23);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v23);
    icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v28);
  }
  else
  {
    v24 = 0u;
    v27 = 0;
    v26 = 0u;
    v25 = 0u;
    v23 = off_1E2256B38;
    LOWORD(v24) = 2;
    icu::Formattable::Formattable((icu::Formattable *)v28, a6);
    icu::Format::format((icu::Format *)a1, (const icu::Formattable *)v28, (icu::UnicodeString *)&v23, a5);
    icu::Formattable::~Formattable((icu::Formattable *)v28);
    v16 = (void *)*(unsigned int *)a5;
    if ((int)v16 > 0
      || (icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)a3, a3[33], (uint64_t)&v23, 1, 0, a5),
          v16 = (void *)*(unsigned int *)a5,
          (int)v16 > 0))
    {
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v23);
      return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
    }
    icu::PluralRules::select(a2, a6, (icu::UnicodeString *)v28);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v31, (icu::UnicodeString *)v28);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v28);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v23);
  }
  v21 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v31, v18);
  if (v21 < 0)
    v15 = 5;
  else
    v15 = v21;
  *a4 = v15;
  return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v31);
}

void *icu::RuleBasedNumberFormat::getStaticClassID(icu::RuleBasedNumberFormat *this)
{
  return &unk_1EE009C64;
}

void *icu::RuleBasedNumberFormat::getDynamicClassID(icu::RuleBasedNumberFormat *this)
{
  return &unk_1EE009C64;
}

uint64_t sub_18BD46428(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  const UChar *v6;
  const UChar *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  const UChar *v11;
  uint64_t v12;
  const UChar *v13;
  BOOL v14;
  uint64_t v15;
  const UChar *v16;
  const UChar *v17;
  BOOL v18;
  uint64_t result;

  if (!a2)
    return 0;
  if (a1 != a2)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
      return 0;
    if (v4 >= 1)
    {
      v5 = 0;
      do
      {
        v6 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v5);
        v7 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v5);
        if (v7 != v6)
        {
          v8 = !v6 || v7 == 0;
          if (v8 || u_strcmp(v6, v7))
            return 0;
        }
        v5 = (v5 + 1);
      }
      while (v4 != (_DWORD)v5);
    }
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (v9 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
      return 0;
    if (v9 >= 1)
    {
      v10 = 0;
      while (1)
      {
        v11 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v10);
        v12 = (*(uint64_t (**)(uint64_t, const UChar *))(*(_QWORD *)a2 + 64))(a2, v11);
        v13 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v12);
        if (v13 != v11)
        {
          v14 = !v11 || v13 == 0;
          if (v14 || u_strcmp(v11, v13))
            return 0;
        }
        if (v4 >= 1)
        {
          v15 = 0;
          do
          {
            v16 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, v10, v15);
            v17 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v12, v15);
            if (v17 != v16)
            {
              v18 = !v16 || v17 == 0;
              if (v18 || u_strcmp(v16, v17))
                return 0;
            }
            v15 = (v15 + 1);
          }
          while (v4 != (_DWORD)v15);
        }
        v10 = (v10 + 1);
        result = 1;
        if ((_DWORD)v10 == v9)
          return result;
      }
    }
  }
  return 1;
}

uint64_t sub_18BD46638(uint64_t a1, const UChar *a2)
{
  uint64_t v4;
  const UChar *v5;
  const UChar *v6;

  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) < 1)
    return 0xFFFFFFFFLL;
  v4 = 0;
  while (1)
  {
    v5 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v4);
    if (v5 == a2)
      break;
    if (a2)
    {
      v6 = v5;
      if (v5)
      {
        if (!u_strcmp(a2, v5))
          break;
      }
    }
    v4 = (v4 + 1);
    if ((int)v4 >= (*(int (**)(uint64_t, const UChar *))(*(_QWORD *)a1 + 40))(a1, v6))
      return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t sub_18BD466D0(uint64_t a1, const UChar *a2)
{
  uint64_t v4;
  const UChar *v5;
  const UChar *v6;

  if (!a2 || (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) < 1)
    return 0xFFFFFFFFLL;
  v4 = 0;
  while (1)
  {
    v5 = (const UChar *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v4);
    if (v5 == a2)
      break;
    v6 = v5;
    if (v5)
    {
      if (!u_strcmp(a2, v5))
        break;
    }
    v4 = (v4 + 1);
    if ((int)v4 >= (*(int (**)(uint64_t, const UChar *))(*(_QWORD *)a1 + 24))(a1, v6))
      return 0xFFFFFFFFLL;
  }
  return v4;
}

uint64_t *sub_18BD46768(uint64_t a1, char *a2, int a3)
{
  int *v3;
  uint64_t v4;

  v3 = *(int **)(a1 + 40);
  if (*v3 < 1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v4 = 0xFFFFFFFF00000000;
    *(_WORD *)(v4 + 40) = 0;
    *(_WORD *)(v4 + 8) = 0;
    if (!a2)
    {
      *v3 = 1;
      return 0;
    }
    if (a3 > 0)
    {
      *(_QWORD *)a1 = a2;
      *(_QWORD *)(a1 + 8) = &a2[2 * a3];
      *(_QWORD *)(a1 + 16) = a2;
      *(_WORD *)(a1 + 24) = -1;
      return sub_18BD467EC(a1);
    }
    *v3 = 1;
    goto LABEL_3;
  }
  if (a2)
LABEL_3:
    uprv_free(a2);
  return 0;
}

uint64_t *sub_18BD467EC(uint64_t a1)
{
  _WORD *v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL4 isWhiteSpace;
  uint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  uint64_t v14;
  _BOOL4 v15;
  unsigned __int16 *v16;
  _BOOL4 v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *);

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v2 < v3)
  {
    v4 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if ((_DWORD)v4 == 0xFFFF)
        v4 = (unsigned __int16)*v2;
      isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v4);
      v3 = *(_QWORD *)(a1 + 8);
      v2 = *(_WORD **)(a1 + 16);
      if (!isWhiteSpace)
        break;
      *(_QWORD *)(a1 + 16) = ++v2;
      v4 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }
    while ((unint64_t)v2 < v3);
  }
  if ((unint64_t)v2 < v3 && (*(_WORD *)(a1 + 24) == 60 || *v2 == 60))
  {
    *(_QWORD *)(a1 + 16) = v2 + 1;
    *(_WORD *)(a1 + 24) = -1;
    v28 = 0;
    v29 = 0;
    v30 = j__uprv_free_2;
    v27 = -1;
    while (1)
    {
      v6 = sub_18BD46B98(a1, &v27);
      v8 = *(_QWORD *)(a1 + 8);
      v7 = *(unsigned __int16 **)(a1 + 16);
      if ((unint64_t)v7 < v8)
      {
        v9 = *(unsigned __int16 *)(a1 + 24);
        do
        {
          if ((_DWORD)v9 == 0xFFFF)
            v9 = *v7;
          v10 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v9);
          v8 = *(_QWORD *)(a1 + 8);
          v7 = *(unsigned __int16 **)(a1 + 16);
          if (!v10)
            break;
          *(_QWORD *)(a1 + 16) = ++v7;
          v9 = 0xFFFFLL;
          *(_WORD *)(a1 + 24) = -1;
        }
        while ((unint64_t)v7 < v8);
      }
      if ((unint64_t)v7 >= v8)
        break;
      if (*(_WORD *)(a1 + 24) == 44)
      {
        v11 = 1;
        if (!v6)
          goto LABEL_26;
      }
      else
      {
        v11 = *v7 == 44;
        if (!v6)
        {
LABEL_26:
          if (!v11)
            goto LABEL_27;
          goto LABEL_44;
        }
      }
      sub_18BD46E1C((uint64_t)&v28, v6, *(int **)(a1 + 40));
      if (!v11)
        goto LABEL_27;
      *(_QWORD *)(a1 + 16) += 2;
      *(_WORD *)(a1 + 24) = -1;
    }
    if (v6)
      sub_18BD46E1C((uint64_t)&v28, v6, *(int **)(a1 + 40));
LABEL_27:
    v12 = *(unsigned __int16 **)(a1 + 8);
    v13 = *(unsigned __int16 **)(a1 + 16);
    if (v13 < v12)
    {
      v14 = *(unsigned __int16 *)(a1 + 24);
      do
      {
        if ((_DWORD)v14 == 0xFFFF)
          v14 = *v13;
        v15 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v14);
        v12 = *(unsigned __int16 **)(a1 + 8);
        v13 = *(unsigned __int16 **)(a1 + 16);
        if (!v15)
          break;
        *(_QWORD *)(a1 + 16) = ++v13;
        v14 = 0xFFFFLL;
        *(_WORD *)(a1 + 24) = -1;
      }
      while (v13 < v12);
    }
    if (v13 >= v12 || *(_WORD *)(a1 + 24) != 62 && *v13 != 62)
      goto LABEL_44;
    v16 = v13 + 1;
    for (*(_QWORD *)(a1 + 16) = v16; ; *(_QWORD *)(a1 + 16) = v16)
    {
      *(_WORD *)(a1 + 24) = -1;
      if (v16 >= v12)
        break;
      v17 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*v16);
      v12 = *(unsigned __int16 **)(a1 + 8);
      v16 = *(unsigned __int16 **)(a1 + 16);
      if (!v17)
        break;
      ++v16;
    }
    if (v16 != v12)
    {
LABEL_44:
      sub_18BD46AAC(a1);
      v20 = 0;
      goto LABEL_45;
    }
    sub_18BD46E1C((uint64_t)&v28, 0, *(int **)(a1 + 40));
    v19 = (uint64_t *)**(unsigned int **)(a1 + 40);
    if ((int)v19 > 0)
    {
      sub_18BD4A814((uint64_t)&v28);
      goto LABEL_43;
    }
    v22 = HIDWORD(v29);
    v23 = v28;
    v28 = 0;
    v29 = 0;
    v24 = icu::UMemory::operator new(v19, (icu::UMemory *)0x28, v18);
    v20 = v24;
    if (v24)
    {
      v25 = *(_QWORD *)a1;
      v26 = v27 - 2;
      *((_DWORD *)v24 + 2) = 0;
      *v24 = (uint64_t)off_1E2265140;
      v24[2] = v25;
      v24[3] = v23;
      *((_DWORD *)v24 + 8) = v26;
      *((_DWORD *)v24 + 9) = v22 - 2;
    }
LABEL_45:
    sub_18BD4A814((uint64_t)&v28);
  }
  else
  {
LABEL_43:
    sub_18BD46AAC(a1);
    return 0;
  }
  return v20;
}

void sub_18BD46AAC(uint64_t a1)
{
  uint64_t v2;
  const UChar *v3;
  const UChar *v4;
  uint64_t v6;
  uint64_t v7;
  const UChar *v8;
  uint64_t v9;
  uint64_t v10;
  UChar *v11;
  int *v12;

  if (*(_QWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)(v2 - 34) >= *(_QWORD *)a1)
      v3 = (const UChar *)(v2 - 34);
    else
      v3 = *(const UChar **)a1;
    v4 = (const UChar *)(v2 - 2);
    while (v4 >= v3)
    {
      if (!*v4--)
      {
        v3 = v4 + 2;
        break;
      }
    }
    if ((unint64_t)(v2 + 30) <= *(_QWORD *)(a1 + 8))
      v6 = v2 + 30;
    else
      v6 = *(_QWORD *)(a1 + 8);
    u_strncpy((UChar *)(*(_QWORD *)(a1 + 32) + 8), v3, (unint64_t)(v2 - (_QWORD)v3) >> 1);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(const UChar **)(a1 + 16);
    *(_WORD *)(v7 + (char *)v8 - (char *)v3 + 8) = 0;
    u_strncpy((UChar *)(v7 + 40), v8, (unint64_t)(v6 - (_QWORD)v8) >> 1);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 16);
    *(_WORD *)(v9 + v6 - v10 + 40) = 0;
    v11 = *(UChar **)a1;
    *(_DWORD *)(v9 + 4) = (unint64_t)(v10 - *(_QWORD *)a1) >> 1;
    uprv_free(v11);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v12 = *(int **)(a1 + 40);
    if (*v12 <= 0)
      *v12 = 9;
  }
}

uint64_t sub_18BD46B98(uint64_t a1, _DWORD *a2)
{
  _WORD *v4;
  unint64_t v5;
  uint64_t v6;
  _BOOL4 isWhiteSpace;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  _WORD *v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (**(int **)(a1 + 40) > 0)
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v4 < v5)
  {
    v6 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if ((_DWORD)v6 == 0xFFFF)
        v6 = (unsigned __int16)*v4;
      isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v6);
      v5 = *(_QWORD *)(a1 + 8);
      v4 = *(_WORD **)(a1 + 16);
      if (!isWhiteSpace)
        break;
      *(_QWORD *)(a1 + 16) = ++v4;
      v6 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }
    while ((unint64_t)v4 < v5);
  }
  if ((unint64_t)v4 >= v5 || *(_WORD *)(a1 + 24) != 60 && *v4 != 60)
  {
    sub_18BD46AAC(a1);
    return 0;
  }
  *(_QWORD *)(a1 + 16) = v4 + 1;
  *(_WORD *)(a1 + 24) = -1;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  while (1)
  {
    v8 = sub_18BD46EDC(a1);
    v10 = *(_QWORD *)(a1 + 8);
    v9 = *(unsigned __int16 **)(a1 + 16);
    if ((unint64_t)v9 < v10)
    {
      v11 = *(unsigned __int16 *)(a1 + 24);
      do
      {
        if ((_DWORD)v11 == 0xFFFF)
          v11 = *v9;
        v12 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v11);
        v10 = *(_QWORD *)(a1 + 8);
        v9 = *(unsigned __int16 **)(a1 + 16);
        if (!v12)
          break;
        *(_QWORD *)(a1 + 16) = ++v9;
        v11 = 0xFFFFLL;
        *(_WORD *)(a1 + 24) = -1;
      }
      while ((unint64_t)v9 < v10);
    }
    if ((unint64_t)v9 >= v10)
      break;
    if (*(_WORD *)(a1 + 24) == 44)
    {
      v13 = 1;
      if (!v8)
        goto LABEL_30;
    }
    else
    {
      v13 = *v9 == 44;
      if (!v8)
      {
LABEL_30:
        if (!v13)
          goto LABEL_31;
        goto LABEL_44;
      }
    }
    sub_18BD46E1C((uint64_t)&v21, (uint64_t)v8, *(int **)(a1 + 40));
    if (!v13)
      goto LABEL_31;
    *(_QWORD *)(a1 + 16) += 2;
    *(_WORD *)(a1 + 24) = -1;
  }
  if (v8)
    sub_18BD46E1C((uint64_t)&v21, (uint64_t)v8, *(int **)(a1 + 40));
LABEL_31:
  v17 = *(_QWORD *)(a1 + 8);
  v16 = *(_WORD **)(a1 + 16);
  if ((unint64_t)v16 < v17)
  {
    v18 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if ((_DWORD)v18 == 0xFFFF)
        v18 = (unsigned __int16)*v16;
      v19 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v18);
      v17 = *(_QWORD *)(a1 + 8);
      v16 = *(_WORD **)(a1 + 16);
      if (!v19)
        break;
      *(_QWORD *)(a1 + 16) = ++v16;
      v18 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }
    while ((unint64_t)v16 < v17);
  }
  if ((unint64_t)v16 >= v17
    || *(_WORD *)(a1 + 24) != 62 && *v16 != 62
    || (*(_QWORD *)(a1 + 16) = v16 + 1,
        *(_WORD *)(a1 + 24) = -1,
        sub_18BD46E1C((uint64_t)&v21, 0, *(int **)(a1 + 40)),
        v20 = *(int **)(a1 + 40),
        *v20 > 0))
  {
LABEL_44:
    sub_18BD46AAC(a1);
    v14 = 0;
    goto LABEL_45;
  }
  if (*a2 == -1)
  {
    *a2 = HIDWORD(v22) + 1;
  }
  else if (HIDWORD(v22) != *a2)
  {
    *v20 = 1;
    goto LABEL_44;
  }
  v14 = v21;
  v21 = 0;
  v22 = 0;
LABEL_45:
  sub_18BD4A814((uint64_t)&v21);
  return v14;
}

void sub_18BD46E1C(uint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  int v7;
  int v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;

  if (*a3 <= 0)
  {
    v5 = *(_DWORD *)(a1 + 12);
    if (v5 != *(_DWORD *)(a1 + 8))
    {
LABEL_13:
      v11 = *(_QWORD **)a1;
      *(_DWORD *)(a1 + 12) = v5 + 1;
      v11[v5] = a2;
      return;
    }
    v7 = v5 + 256;
    if (v5 <= 255)
      v7 = 2 * v5;
    if (v5)
      v8 = v7;
    else
      v8 = 1;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
      v10 = (char *)uprv_realloc(v9, 8 * v8);
    else
      v10 = (char *)uprv_malloc(8 * v8);
    *(_QWORD *)a1 = v10;
    if (v10)
    {
      bzero(&v10[8 * *(int *)(a1 + 12)], 8 * (*(_DWORD *)(a1 + 8) - *(_DWORD *)(a1 + 12)));
      v5 = *(_DWORD *)(a1 + 12);
      goto LABEL_13;
    }
    *a3 = 7;
  }
}

unsigned __int16 *sub_18BD46EDC(uint64_t a1)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t v4;
  _BOOL4 isWhiteSpace;
  int v6;
  const char *v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  const char *v11;
  _BOOL4 v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned __int16 *result;
  BOOL v18;
  uint64_t v19;

  v2 = *(unsigned __int16 **)(a1 + 8);
  v3 = *(unsigned __int16 **)(a1 + 16);
  if (v3 < v2)
  {
    v4 = *(unsigned __int16 *)(a1 + 24);
    do
    {
      if ((_DWORD)v4 == 0xFFFF)
        v4 = *v3;
      isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v4);
      v2 = *(unsigned __int16 **)(a1 + 8);
      v3 = *(unsigned __int16 **)(a1 + 16);
      if (!isWhiteSpace)
        break;
      *(_QWORD *)(a1 + 16) = ++v3;
      v4 = 0xFFFFLL;
      *(_WORD *)(a1 + 24) = -1;
    }
    while (v3 < v2);
  }
  if (v3 >= v2)
    return 0;
  v6 = *v3;
  if (v6 == 39 || v6 == 34)
  {
    *(_QWORD *)(a1 + 16) = ++v3;
    *(_WORD *)(a1 + 24) = -1;
    if (v6 == 34)
      v7 = "\"";
    else
      v7 = (const char *)L"'";
  }
  else
  {
    v7 = " ";
  }
  v8 = v3;
  if (v3 < v2)
  {
    v9 = *(unsigned __int16 *)v7;
    v8 = v3;
    while (1)
    {
      v10 = *v8;
      v11 = v7;
      if (v9 == 32)
      {
        v12 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)*v8);
        v11 = v7;
        if (v12)
          break;
      }
      do
      {
        v14 = *(unsigned __int16 *)v11;
        v11 += 2;
        v13 = v14;
        if (v14)
          v15 = v13 == v10;
        else
          v15 = 1;
      }
      while (!v15);
      v8 = *(unsigned __int16 **)(a1 + 16);
      if (v13 != v10)
      {
        *(_QWORD *)(a1 + 16) = ++v8;
        if ((unint64_t)v8 < *(_QWORD *)(a1 + 8))
          continue;
      }
      goto LABEL_27;
    }
    v8 = *(unsigned __int16 **)(a1 + 16);
LABEL_27:
    v2 = *(unsigned __int16 **)(a1 + 8);
  }
  if (v8 == v2)
    goto LABEL_41;
  v16 = *v8;
  if (v8 <= v3)
  {
    result = 0;
  }
  else
  {
    *(_WORD *)(a1 + 24) = v16;
    *v8 = 0;
    result = v3;
  }
  if (v6 == 39 || v6 == 34)
  {
    if (v16 == v6 && v8 != v3)
    {
      *(_QWORD *)(a1 + 16) = v8 + 1;
      *(_WORD *)(a1 + 24) = -1;
      return result;
    }
    goto LABEL_41;
  }
  v18 = v16 > 0x3C;
  v19 = (1 << v16) & 0x1000008400000000;
  if (!v18 && v19 != 0)
  {
LABEL_41:
    sub_18BD46AAC(a1);
    return 0;
  }
  return result;
}

uint64_t *sub_18BD47094(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t *result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int *v15;
  UChar *v16;

  if (*a3 > 0)
    return 0;
  v5 = *(unsigned __int16 *)(a1 + 8);
  v6 = (__int16)v5;
  v7 = v5 >> 5;
  v8 = v6 >= 0 ? v7 : *(_DWORD *)(a1 + 12);
  if (!v8)
    return 0;
  result = (uint64_t *)uprv_malloc(2 * v8);
  if (result)
  {
    v11 = (char *)result;
    v16 = (UChar *)result;
    icu::UnicodeString::extract(a1, &v16, v8, a3);
    if (*a3 <= 0)
      *a3 = 0;
    v12 = 0u;
    v13 = 0u;
    WORD4(v13) = -1;
    v14 = a2;
    v15 = a3;
    return sub_18BD46768((uint64_t)&v12, v11, v8);
  }
  else
  {
    *a3 = 7;
  }
  return result;
}

_QWORD *sub_18BD47174(_QWORD *a1)
{
  void **v2;
  void *v3;
  void **v4;
  void *v5;
  void *v6;

  *a1 = off_1E2265140;
  v2 = (void **)a1[3];
  v3 = *v2;
  if (!*v2)
    goto LABEL_5;
  v4 = v2 + 1;
  do
  {
    uprv_free(v3);
    v5 = *v4++;
    v3 = v5;
  }
  while (v5);
  v2 = (void **)a1[3];
  if (v2)
LABEL_5:
    uprv_free(v2);
  v6 = (void *)a1[2];
  if (v6)
    uprv_free(v6);
  return a1;
}

void sub_18BD471DC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_18BD47174(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD471F0(_QWORD **a1, int a2)
{
  if (a2 < 0)
    return 0;
  if (((int (*)(_QWORD **))(*a1)[3])(a1) <= a2)
    return 0;
  return *(_QWORD *)(*a1[3] + 8 * a2);
}

uint64_t sub_18BD47244(_QWORD *a1, int a2)
{
  if (a2 < 0)
    return 0;
  if ((*(int (**)(_QWORD *))(*a1 + 40))(a1) <= a2)
    return 0;
  return **(_QWORD **)(a1[3] + 8 * (a2 + 1));
}

uint64_t sub_18BD4729C(_QWORD *a1, int a2, int a3)
{
  int v6;
  uint64_t result;

  if (a2 < 0)
    return 0;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  result = 0;
  if ((a3 & 0x80000000) == 0 && v6 > a2)
  {
    if ((*(int (**)(_QWORD *))(*a1 + 24))(a1) <= a3)
      return 0;
    else
      return *(_QWORD *)(*(_QWORD *)(a1[3] + 8 * (a2 + 1)) + 8 * (a3 + 1));
  }
  return result;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, UChar **a2, const icu::UnicodeString *a3, const icu::Locale *a4, UParseError *a5, UErrorCode *a6)
{
  uint64_t v12;
  uint64_t *v13;

  icu::NumberFormat::NumberFormat(this);
  *(_QWORD *)v12 = off_1E22651A0;
  *(_QWORD *)(v12 + 384) = 0;
  *(_OWORD *)(v12 + 360) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v12 + 392), (uint64_t)a4);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 84) = off_1E2256B38;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((_QWORD *)this + 93) = 0;
  v13 = sub_18BD47094((uint64_t)a3, (uint64_t)a5, (int *)a6);
  icu::RuleBasedNumberFormat::init(this, a2, v13, (uint64_t)a5, a6);
  return this;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::init(icu::RuleBasedNumberFormat *result, UChar **a2, _DWORD *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v8;
  icu::UnicodeString *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  int v38;
  unsigned int v39;
  int i;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  void *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t RuleSet;
  void *v76;
  uint64_t v77;
  _OWORD v78[4];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if (*(int *)a5 <= 0)
  {
    v8 = (uint64_t)result;
    icu::RuleBasedNumberFormat::initializeDecimalFormatSymbols(result, a5);
    icu::RuleBasedNumberFormat::initializeDefaultInfinityRule((icu::RuleBasedNumberFormat *)v8, a5);
    result = (icu::RuleBasedNumberFormat *)icu::RuleBasedNumberFormat::initializeDefaultNaNRule((icu::RuleBasedNumberFormat *)v8, a5);
    if (*(int *)a5 <= 0)
    {
      if (a3)
        ++a3[2];
      *(_QWORD *)(v8 + 664) = a3;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v79, a2);
      v10 = WORD4(v79) >> 5;
      if (SWORD4(v79) < 0)
        v10 = HIDWORD(v79);
      if (!v10)
        goto LABEL_128;
      icu::RuleBasedNumberFormat::stripWhitespace(v9, (icu::UnicodeString *)&v79);
      if (SWORD4(v79) < 0)
      {
        v12 = HIDWORD(v79);
        v11 = HIDWORD(v79) & (SHIDWORD(v79) >> 31);
      }
      else
      {
        v11 = 0;
        v12 = WORD4(v79) >> 5;
      }
      v13 = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)"%", 0, -1, v11, v12 - v11);
      if ((_DWORD)v13 == -1)
        goto LABEL_60;
      v14 = v13;
      if ((_DWORD)v13)
      {
        v17 = v13 - 1;
        v15 = WORD4(v79) >> 5;
        v18 = HIDWORD(v79);
        if ((SWORD4(v79) & 0x8000u) == 0)
          v19 = WORD4(v79) >> 5;
        else
          v19 = HIDWORD(v79);
        if (v19 <= v17)
          goto LABEL_60;
        v20 = (unint64_t)&v79 | 0xA;
        if ((BYTE8(v79) & 2) == 0)
          v20 = *((_QWORD *)&v80 + 1);
        if (*(_WORD *)(v20 + 2 * (int)v17) != 59)
          goto LABEL_60;
        if ((v13 & 0x80000000) != 0)
        {
          v21 = 0;
          v16 = 0;
          if ((WORD4(v79) & 0x8000) == 0)
            goto LABEL_33;
          goto LABEL_32;
        }
        if ((WORD4(v79) & 0x8000) == 0)
        {
LABEL_15:
          if (v15 >= v13)
            v16 = v13;
          else
            v16 = v15;
          goto LABEL_33;
        }
      }
      else
      {
        if ((SWORD4(v79) & 0x80000000) == 0)
        {
          v15 = WORD4(v79) >> 5;
          goto LABEL_15;
        }
        v18 = HIDWORD(v79);
      }
      if (v18 >= (int)v13)
        v21 = v13;
      else
        v21 = v18;
LABEL_32:
      v16 = v21;
      v15 = v18;
LABEL_33:
      v22 = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)L";%", 0, 2, v16, v15 - v16);
      if (v22 == -1)
      {
        v23 = WORD4(v79) >> 5;
        if (SWORD4(v79) < 0)
          v23 = HIDWORD(v79);
        v22 = v23 - 1;
      }
      v24 = u_strlen((const UChar *)"%") + v14;
      v25 = 2 * (int)v24;
      do
      {
        if ((SWORD4(v79) & 0x8000u) == 0)
          v26 = WORD4(v79) >> 5;
        else
          v26 = HIDWORD(v79);
        if (v26 <= v24)
        {
          v28 = 0xFFFFLL;
        }
        else
        {
          if ((BYTE8(v79) & 2) != 0)
            v27 = (unint64_t)&v79 | 0xA;
          else
            v27 = *((_QWORD *)&v80 + 1);
          v28 = *(unsigned __int16 *)(v27 + v25);
        }
        v25 += 2;
        ++v24;
      }
      while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v28));
      v31 = icu::UMemory::operator new(v30, (icu::UMemory *)0x40, v29);
      if (!v31)
      {
        *(_QWORD *)(v8 + 656) = 0;
        goto LABEL_128;
      }
      v32 = v31;
      v33 = v24 - 1;
      *v31 = (uint64_t)off_1E2256B38;
      *((_WORD *)v31 + 4) = 2;
      *(_QWORD *)(v8 + 656) = v31;
      v34 = v22 - v24 + 1;
      icu::UnicodeString::unBogus((uint64_t)v31);
      if ((__int16)v32[1] < 0)
        v35 = *((unsigned int *)v32 + 3);
      else
        v35 = *((unsigned __int16 *)v32 + 4) >> 5;
      icu::UnicodeString::doReplace((icu::UnicodeString *)v32, 0, v35, (const icu::UnicodeString *)&v79, v33, v34);
      if ((int)v14 <= 0 && v22 - (_DWORD)v14 == 2147483646)
      {
        if ((BYTE8(v79) & 1) != 0)
          v36 = 2;
        else
          v36 = BYTE8(v79) & 0x1F;
        WORD4(v79) = v36;
        v37 = (_DWORD *)(v8 + 376);
        *(_DWORD *)(v8 + 376) = 0;
        goto LABEL_62;
      }
      icu::UnicodeString::doReplace((uint64_t)&v79, v14, (v22 - v14 + 1), 0, 0, 0);
LABEL_60:
      v36 = SWORD4(v79);
      v37 = (_DWORD *)(v8 + 376);
      *(_DWORD *)(v8 + 376) = 0;
      if ((v36 & 0x80000000) != 0)
      {
        v39 = HIDWORD(v79);
        v38 = HIDWORD(v79) & (SHIDWORD(v79) >> 31);
LABEL_64:
        for (i = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)L";%", 0, 2, v38, v39 - v38);
              i != -1;
              i = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)L";%", 0, 2, v41, v42 - v41))
        {
          ++*v37;
          if (i >= -1)
          {
            v43 = i + 1;
            if ((WORD4(v79) & 0x8000) != 0)
            {
              v42 = HIDWORD(v79);
              if (SHIDWORD(v79) >= v43)
                v41 = i + 1;
              else
                v41 = HIDWORD(v79);
            }
            else
            {
              v42 = WORD4(v79) >> 5;
              if (v42 >= v43)
                v41 = i + 1;
              else
                v41 = WORD4(v79) >> 5;
            }
          }
          else
          {
            v41 = 0;
            if ((WORD4(v79) & 0x8000) != 0)
              v42 = HIDWORD(v79);
            else
              v42 = WORD4(v79) >> 5;
          }
        }
        v44 = *(_DWORD *)(v8 + 376);
        *(_DWORD *)(v8 + 376) = v44 + 1;
        v45 = uprv_malloc(8 * (v44 + 2));
        *(_QWORD *)(v8 + 360) = v45;
        if (v45)
        {
          v47 = *v37;
          v48 = (int)v47;
          if ((v47 & 0x80000000) == 0)
          {
            v49 = 0;
            v50 = 8 * v47 + 8;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v8 + 360) + v49) = 0;
              v49 += 8;
            }
            while (v50 != v49);
            if (!(_DWORD)v48)
            {
              v67 = 1;
LABEL_129:
              *a5 = v67;
              return (icu::RuleBasedNumberFormat *)icu::UnicodeString::~UnicodeString((void *)v67, (icu::UnicodeString *)&v79);
            }
          }
          if ((int)v48 < 0)
            v51 = -1;
          else
            v51 = (v48 << 6) | 0x10;
          v52 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v51, v46);
          if (v52)
          {
            *v52 = 64;
            v52[1] = v48;
            v53 = v52 + 2;
            do
            {
              *v53 = off_1E2256B38;
              *((_WORD *)v53 + 4) = 2;
              v53 += 8;
            }
            while (v53 != &v52[8 * v48 + 2]);
            *(_QWORD *)(v8 + 368) = v52 + 2;
            v54 = sub_18BD49554((uint64_t)&v79, (uint64_t)L";%", 2, 0);
            if (v54 == -1)
            {
              LODWORD(v57) = 0;
              v58 = 0;
LABEL_112:
              v68 = WORD4(v79) >> 5;
              if (SWORD4(v79) < 0)
                v68 = HIDWORD(v79);
              sub_18BCCEECC(*(_QWORD *)(v8 + 368) + ((unint64_t)v57 << 6), (const icu::UnicodeString *)&v79, v58, (v68 - v58));
              v71 = icu::UMemory::operator new(v70, (icu::UMemory *)0xA8, v69);
              if (v71)
                v71 = (uint64_t *)sub_18BD01D64((uint64_t)v71, v8, *(_QWORD *)(v8 + 368), v57, (int *)a5);
              *(_QWORD *)(*(_QWORD *)(v8 + 360) + 8 * v57) = v71;
              if (*(_QWORD *)(*(_QWORD *)(v8 + 360) + 8 * v57))
              {
                icu::RuleBasedNumberFormat::initDefaultRuleSet((_QWORD *)v8);
                if (*(int *)(v8 + 376) >= 1)
                {
                  v72 = 0;
                  v73 = 0;
                  do
                  {
                    sub_18BD01D68(*(char **)(*(_QWORD *)(v8 + 360) + 8 * v73++), *(_QWORD *)(v8 + 368) + v72, a5);
                    v72 += 64;
                  }
                  while (v73 < *(int *)(v8 + 376));
                }
                if (a3 && (*(int (**)(_DWORD *))(*(_QWORD *)a3 + 24))(a3) >= 1)
                {
                  v74 = 0;
                  while (1)
                  {
                    memset(v78, 0, sizeof(v78));
                    v77 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a3 + 32))(a3, v74);
                    icu::UnicodeString::UnicodeString(v78, 1, &v77);
                    RuleSet = icu::RuleBasedNumberFormat::findRuleSet((icu::RuleBasedNumberFormat *)v8, (const icu::UnicodeString *)v78, a5);
                    if (!RuleSet)
                      break;
                    if (!(_DWORD)v74)
                      *(_QWORD *)(v8 + 384) = RuleSet;
                    icu::UnicodeString::~UnicodeString(v76, (icu::UnicodeString *)v78);
                    v74 = (v74 + 1);
                    if ((int)v74 >= (*(int (**)(_DWORD *))(*(_QWORD *)a3 + 24))(a3))
                      goto LABEL_135;
                  }
                  icu::UnicodeString::~UnicodeString(v76, (icu::UnicodeString *)v78);
                }
LABEL_135:
                icu::UnicodeString::operator=((UChar **)(v8 + 672), a2);
                return (icu::RuleBasedNumberFormat *)icu::UnicodeString::~UnicodeString((void *)v67, (icu::UnicodeString *)&v79);
              }
            }
            else
            {
              v55 = v54;
              v56 = 0;
              v57 = 0;
              v58 = 0;
              while (1)
              {
                v59 = v58;
                v60 = *(_QWORD *)(v8 + 368) + v56;
                icu::UnicodeString::unBogus(v60);
                if (*(__int16 *)(v60 + 8) < 0)
                  v61 = *(unsigned int *)(v60 + 12);
                else
                  v61 = *(unsigned __int16 *)(v60 + 8) >> 5;
                v58 = v55 + 1;
                icu::UnicodeString::doReplace((icu::UnicodeString *)v60, 0, v61, (const icu::UnicodeString *)&v79, v59, (v55 + 1 - v59));
                v64 = icu::UMemory::operator new(v63, (icu::UMemory *)0xA8, v62);
                if (v64)
                  v64 = (uint64_t *)sub_18BD01D64((uint64_t)v64, v8, *(_QWORD *)(v8 + 368), v57, (int *)a5);
                *(_QWORD *)(*(_QWORD *)(v8 + 360) + 8 * v57) = v64;
                if (!*(_QWORD *)(*(_QWORD *)(v8 + 360) + 8 * v57))
                  break;
                if (v55 >= -1)
                {
                  if ((WORD4(v79) & 0x8000) != 0)
                  {
                    v66 = HIDWORD(v79);
                    if (SHIDWORD(v79) >= v58)
                      v65 = v55 + 1;
                    else
                      v65 = HIDWORD(v79);
                  }
                  else
                  {
                    v66 = WORD4(v79) >> 5;
                    if (v66 >= v58)
                      v65 = v55 + 1;
                    else
                      v65 = WORD4(v79) >> 5;
                  }
                }
                else
                {
                  v65 = 0;
                  if ((WORD4(v79) & 0x8000) != 0)
                    v66 = HIDWORD(v79);
                  else
                    v66 = WORD4(v79) >> 5;
                }
                v55 = icu::UnicodeString::indexOf((uint64_t)&v79, (uint64_t)L";%", 0, 2, v65, v66 - v65);
                v56 += 64;
                ++v57;
                if (v55 == -1)
                  goto LABEL_112;
              }
            }
          }
          else
          {
            *(_QWORD *)(v8 + 368) = 0;
          }
        }
LABEL_128:
        v67 = 7;
        goto LABEL_129;
      }
      v36 = (unsigned __int16)v36;
LABEL_62:
      v38 = 0;
      v39 = v36 >> 5;
      goto LABEL_64;
    }
  }
  return result;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, UChar **a2, const icu::UnicodeString *a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t v10;
  icu::Locale *v11;
  uint64_t *Default;
  uint64_t *v13;

  icu::NumberFormat::NumberFormat(this);
  *(_QWORD *)v10 = off_1E22651A0;
  *(_QWORD *)(v10 + 384) = 0;
  v11 = (icu::Locale *)(v10 + 392);
  *(_OWORD *)(v10 + 360) = 0u;
  *(_DWORD *)(v10 + 376) = 0;
  Default = icu::Locale::getDefault((icu::Locale *)v10);
  icu::Locale::Locale(v11, (uint64_t)Default);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 84) = off_1E2256B38;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((_QWORD *)this + 93) = 0;
  v13 = sub_18BD47094((uint64_t)a3, (uint64_t)a4, (int *)a5);
  icu::RuleBasedNumberFormat::init(this, a2, v13, (uint64_t)a4, a5);
  return this;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat(uint64_t a1, UChar **a2, _DWORD *a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v12;

  icu::NumberFormat::NumberFormat((icu::NumberFormat *)a1);
  *(_QWORD *)v12 = off_1E22651A0;
  *(_QWORD *)(v12 + 384) = 0;
  *(_OWORD *)(v12 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  icu::Locale::Locale((icu::Locale *)(v12 + 392), a4);
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 7;
  *(_BYTE *)(a1 + 652) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = off_1E2256B38;
  *(_WORD *)(a1 + 680) = 2;
  *(_WORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 738) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  icu::RuleBasedNumberFormat::init((icu::RuleBasedNumberFormat *)a1, a2, a3, a5, a6);
  return a1;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t v8;
  icu::Locale *v9;
  uint64_t *Default;

  icu::NumberFormat::NumberFormat(this);
  *(_QWORD *)v8 = off_1E22651A0;
  *(_QWORD *)(v8 + 384) = 0;
  v9 = (icu::Locale *)(v8 + 392);
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(v8 + 376) = 0;
  Default = icu::Locale::getDefault((icu::Locale *)v8);
  icu::Locale::Locale(v9, (uint64_t)Default);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 84) = off_1E2256B38;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((_QWORD *)this + 93) = 0;
  icu::RuleBasedNumberFormat::init(this, a2, 0, (uint64_t)a3, a4);
  return this;
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, UChar **a2, const icu::Locale *a3, UParseError *a4, UErrorCode *a5)
{
  uint64_t v10;

  icu::NumberFormat::NumberFormat(this);
  *(_QWORD *)v10 = off_1E22651A0;
  *(_QWORD *)(v10 + 384) = 0;
  *(_OWORD *)(v10 + 360) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v10 + 392), (uint64_t)a3);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 84) = off_1E2256B38;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((_QWORD *)this + 93) = 0;
  icu::RuleBasedNumberFormat::init(this, a2, 0, (uint64_t)a4, a5);
  return this;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat(uint64_t a1, unsigned int a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *LocaleByType;
  const char *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const UChar *NextString;
  uint64_t v18;
  void *v19;
  void *v20;
  const UChar *v22;
  int v23;
  void (**v24)(icu::UnicodeString *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  UChar *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  icu::NumberFormat::NumberFormat((icu::NumberFormat *)a1);
  *(_QWORD *)v8 = off_1E22651A0;
  *(_QWORD *)(v8 + 384) = 0;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 0;
  icu::Locale::Locale((icu::Locale *)(v8 + 392), a3);
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 7;
  *(_BYTE *)(a1 + 652) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 672) = off_1E2256B38;
  *(_WORD *)(a1 + 680) = 2;
  *(_WORD *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 738) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  if (*a4 <= 0)
  {
    if (a2 >= 4)
    {
      *a4 = 1;
    }
    else
    {
      v9 = off_1E2265388[a2];
      v10 = ures_open("icudt74l-rbnf", *(char **)(a1 + 432), a4);
      v11 = v10;
      if (*a4 <= 0)
      {
        LocaleByType = (const char *)ures_getLocaleByType((uint64_t)v10, 1, a4);
        v13 = (const char *)ures_getLocaleByType((uint64_t)v11, 0, a4);
        icu::Format::setLocaleIDs((icu::Format *)a1, LocaleByType, v13);
        v14 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v11, "RBNFRules", 0, (UErrorCode *)a4);
        if (*a4 >= 1)
          ures_close(v11);
        v15 = ures_getByKeyWithFallback((uint64_t)v14, v9, 0, (UErrorCode *)a4);
        if (*a4 < 1)
        {
          v16 = (_QWORD *)v15;
          v30 = 0u;
          v33 = 0;
          v32 = 0u;
          v31 = 0u;
          v29 = (UChar *)off_1E2256B38;
          LOWORD(v30) = 2;
          while (ures_hasNext((_BOOL8)v16))
          {
            v28 = 0;
            v26 = 0u;
            v27 = 0u;
            v25 = 0u;
            v24 = off_1E2256B38;
            LOWORD(v25) = 2;
            v23 = 0;
            NextString = ures_getNextString((uint64_t)v16, &v23, 0, a4);
            if (*a4 <= 0)
            {
              v22 = NextString;
              icu::UnicodeString::setTo((icu::UnicodeString *)&v24, 1, &v22, v23);
            }
            else
            {
              icu::UnicodeString::setToBogus((icu::UnicodeString *)&v24);
            }
            if ((v25 & 0x8000u) == 0)
              v18 = (unsigned __int16)v25 >> 5;
            else
              v18 = DWORD1(v25);
            icu::UnicodeString::doAppend((uint64_t)&v29, (const icu::UnicodeString *)&v24, 0, v18);
            icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v24);
          }
          icu::RuleBasedNumberFormat::init((icu::RuleBasedNumberFormat *)a1, &v29, 0, (uint64_t)&v24, (UErrorCode *)a4);
          ures_close(v16);
          ures_close(v14);
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v29);
        }
        else
        {
          ures_close(v14);
        }
      }
      ures_close(v11);
    }
  }
  return a1;
}

uint64_t icu::RuleBasedNumberFormat::RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this, const icu::RuleBasedNumberFormat *a2)
{
  uint64_t v4;

  v4 = icu::NumberFormat::NumberFormat(this, a2);
  *(_QWORD *)v4 = off_1E22651A0;
  *(_QWORD *)(v4 + 384) = 0;
  *(_OWORD *)(v4 + 360) = 0u;
  *((_DWORD *)this + 94) = 0;
  icu::Locale::Locale((icu::Locale *)(v4 + 392), (uint64_t)a2 + 392);
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *((_DWORD *)this + 162) = 7;
  *((_BYTE *)this + 652) = 0;
  *((_OWORD *)this + 41) = 0u;
  *((_QWORD *)this + 84) = off_1E2256B38;
  *((_WORD *)this + 340) = 2;
  *((_WORD *)this + 368) = 0;
  *((_BYTE *)this + 738) = 0;
  *((_QWORD *)this + 93) = 0;
  return icu::RuleBasedNumberFormat::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::RuleBasedNumberFormat::operator=(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[72];
  int v10;
  _QWORD v11[9];

  v11[8] = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    icu::NumberFormat::operator=(a1, a2);
    v10 = 0;
    icu::RuleBasedNumberFormat::dispose((icu::RuleBasedNumberFormat *)a1);
    icu::Locale::operator=((icu::Locale *)(a1 + 392), a2 + 392);
    *(_BYTE *)(a1 + 652) = *(_BYTE *)(a2 + 652);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 408))(a1, *(_QWORD *)(a2 + 624));
    v4 = *(_DWORD **)(a2 + 664);
    if (v4)
      ++v4[2];
    icu::RuleBasedNumberFormat::init((icu::RuleBasedNumberFormat *)a1, (UChar **)(a2 + 672), v4, (uint64_t)v9, (UErrorCode *)&v10);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 392))(v11, a2);
    (*(void (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)a1 + 384))(a1, v11, &v10);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v11);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(a1, v6);
    *(_WORD *)(a1 + 736) = *(_WORD *)(a2 + 736);
    *(_BYTE *)(a1 + 738) = *(_BYTE *)(a2 + 738);
    v7 = *(_QWORD *)(a2 + 744);
    if (v7)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    *(_QWORD *)(a1 + 744) = v7;
  }
  return a1;
}

_DWORD *icu::RuleBasedNumberFormat::dispose(icu::RuleBasedNumberFormat *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  icu::RuleBasedCollator *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *result;
  int v22;
  int v23;

  v2 = (uint64_t *)*((_QWORD *)this + 45);
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = v2 + 1;
      do
      {
        v5 = (void *)sub_18BD022A0(v3);
        icu::UMemory::operator delete(v5);
        v6 = *v4++;
        v3 = v6;
      }
      while (v6);
      v2 = (uint64_t *)*((_QWORD *)this + 45);
    }
    uprv_free(v2);
    *((_QWORD *)this + 45) = 0;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 46);
  if (v7)
  {
    v8 = (char *)(v7 - 2);
    v9 = *(v7 - 1);
    if (v9)
    {
      v10 = v9 << 6;
      v11 = (char *)(v7 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v11[v10]);
        v10 -= 64;
      }
      while (v10);
    }
    icu::UMemory::operator delete[](v8);
    *((_QWORD *)this + 46) = 0;
  }
  v12 = (icu::RuleBasedCollator *)*((_QWORD *)this + 77);
  if (v12)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(v12);
    icu::UMemory::operator delete(v13);
  }
  *((_QWORD *)this + 77) = 0;
  v14 = *((_QWORD *)this + 78);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this + 78) = 0;
  v15 = (_QWORD *)*((_QWORD *)this + 79);
  if (v15)
  {
    v16 = sub_18BD03888(v15);
    icu::UMemory::operator delete(v16);
  }
  *((_QWORD *)this + 79) = 0;
  v17 = (_QWORD *)*((_QWORD *)this + 80);
  if (v17)
  {
    v18 = sub_18BD03888(v17);
    icu::UMemory::operator delete(v18);
  }
  *((_QWORD *)this + 80) = 0;
  v19 = *((_QWORD *)this + 82);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  *((_QWORD *)this + 82) = 0;
  v20 = *((_QWORD *)this + 93);
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  *((_QWORD *)this + 93) = 0;
  result = (_DWORD *)*((_QWORD *)this + 83);
  if (result)
  {
    v22 = result[2];
    if (v22)
    {
      v23 = v22 - 1;
      result[2] = v23;
      if (!v23)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    }
    *((_QWORD *)this + 83) = 0;
  }
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getDecimalFormatSymbols(icu::RuleBasedNumberFormat *this)
{
  return *((_QWORD *)this + 78);
}

void icu::RuleBasedNumberFormat::~RuleBasedNumberFormat(icu::RuleBasedNumberFormat *this)
{
  void *v2;

  *(_QWORD *)this = off_1E22651A0;
  icu::RuleBasedNumberFormat::dispose(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RuleBasedNumberFormat *)((char *)this + 672));
  icu::Locale::~Locale((icu::RuleBasedNumberFormat *)((char *)this + 392));
  icu::NumberFormat::~NumberFormat(this);
}

{
  void *v1;

  icu::RuleBasedNumberFormat::~RuleBasedNumberFormat(this);
  icu::UMemory::operator delete(v1);
}

icu::RuleBasedNumberFormat *icu::RuleBasedNumberFormat::clone@<X0>(icu::RuleBasedNumberFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::RuleBasedNumberFormat *result;

  result = (icu::RuleBasedNumberFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x2F0, a2);
  if (result)
    return (icu::RuleBasedNumberFormat *)icu::RuleBasedNumberFormat::RuleBasedNumberFormat(result, this);
  return result;
}

uint64_t icu::RuleBasedNumberFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (!(_DWORD)result)
    return result;
  result = icu::Locale::operator==(a1 + 392, a2 + 392);
  if (!(_DWORD)result)
    return result;
  if (*(unsigned __int8 *)(a1 + 652) != *(unsigned __int8 *)(a2 + 652))
    return 0;
  v5 = *(_QWORD *)(a1 + 664);
  v6 = *(_QWORD *)(a2 + 664);
  if (!v5)
  {
    if (!v6)
      goto LABEL_12;
    return 0;
  }
  if (!v6)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (!(_DWORD)result)
    return result;
LABEL_12:
  v7 = *(uint64_t **)(a1 + 360);
  v8 = *(uint64_t **)(a2 + 360);
  result = ((unint64_t)v7 | (unint64_t)v8) == 0;
  if (v7 && v8)
  {
    v9 = *v7;
    if (*v7)
    {
      while (*v8)
      {
        if (sub_18BD022A4(v9, *v8))
        {
          v10 = v7[1];
          ++v7;
          v9 = v10;
          ++v8;
          if (v10)
            continue;
        }
        goto LABEL_18;
      }
      return v9 == 0;
    }
LABEL_18:
    if (!*v8)
    {
      v9 = *v7;
      return v9 == 0;
    }
    return 0;
  }
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getRules@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  v3 = *(uint64_t **)(this + 360);
  if (v3)
  {
    this = *v3;
    if (*v3)
    {
      v4 = v3 + 1;
      do
      {
        sub_18BD02E50(this, (icu::UnicodeString *)a2);
        v5 = *v4++;
        this = v5;
      }
      while (v5);
    }
  }
  return this;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::getRuleSetName@<X0>(icu::RuleBasedNumberFormat *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  icu::UnicodeString *result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = (icu::UnicodeString *)*((_QWORD *)this + 83);
  if (result)
  {
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    v9 = (*(uint64_t (**)(icu::UnicodeString *))(*(_QWORD *)result + 32))(result);
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a3, 1, &v9);
  }
  v6 = (uint64_t *)*((_QWORD *)this + 45);
  if (v6)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    v7 = *v6;
    if (*v6)
    {
      ++v6;
      do
      {
        if (*(_BYTE *)(v7 + 161))
        {
          if (!a2)
            return icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(v7 + 8), 0);
          --a2;
        }
        v8 = *v6++;
        v7 = v8;
      }
      while (v8);
    }
    result = (icu::UnicodeString *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)a3);
  }
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = off_1E2256B38;
  *(_WORD *)(a3 + 8) = 2;
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getNumberOfRuleSetNames(icu::RuleBasedNumberFormat *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 83);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v4 = (uint64_t *)*((_QWORD *)this + 45);
  if (!v4)
    return 0;
  v5 = *v4;
  if (!*v4)
    return 0;
  LODWORD(result) = 0;
  v6 = v4 + 1;
  do
  {
    if (*(_BYTE *)(v5 + 161))
      result = (result + 1);
    else
      result = result;
    v7 = *v6++;
    v5 = v7;
  }
  while (v7);
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getNumberOfRuleSetDisplayNameLocales(icu::RuleBasedNumberFormat *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 83);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t *icu::RuleBasedNumberFormat::getRuleSetDisplayNameLocale@<X0>(icu::RuleBasedNumberFormat *this@<X0>, UErrorCode *a2@<X2>, uint64_t a3@<X1>, icu::Locale *a4@<X8>)
{
  uint64_t v9;
  __int16 v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  _OWORD v21[4];
  _OWORD v22[4];
  uint64_t *v23;

  v23 = (uint64_t *)*MEMORY[0x1E0C80C00];
  if (*(int *)a2 >= 1)
    return icu::Locale::Locale(v23, a4, "", 0, 0, 0);
  if ((a3 & 0x80000000) != 0
    || (v9 = *((_QWORD *)this + 83)) == 0
    || (*(int (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) <= (int)a3)
  {
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    *((_OWORD *)a4 + 10) = 0u;
    *((_OWORD *)a4 + 11) = 0u;
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 13) = 0u;
    return (uint64_t *)icu::Locale::Locale(a4);
  }
  memset(v22, 0, sizeof(v22));
  v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 83) + 48))(*((_QWORD *)this + 83), a3);
  icu::UnicodeString::UnicodeString(v22, 1, &v20);
  memset(v21, 0, sizeof(v21));
  v10 = WORD4(v22[0]);
  v11 = WORD4(v22[0]) >> 5;
  v12 = HIDWORD(v22[0]);
  if ((SWORD4(v22[0]) & 0x8000u) == 0)
    v13 = WORD4(v22[0]) >> 5;
  else
    v13 = HIDWORD(v22[0]);
  v14 = v13 + 1;
  if (v13 < 64)
  {
    v16 = (char *)v21;
    goto LABEL_14;
  }
  v15 = (char *)uprv_malloc((v13 + 1));
  if (v15)
  {
    v16 = v15;
    v10 = WORD4(v22[0]);
    v12 = HIDWORD(v22[0]);
    v11 = WORD4(v22[0]) >> 5;
LABEL_14:
    if (v10 >= 0)
      v17 = v11;
    else
      v17 = v12;
    icu::UnicodeString::extract((uint64_t)v22, 0, v17, v16, v14);
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *((_OWORD *)a4 + 3) = 0u;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    *((_OWORD *)a4 + 10) = 0u;
    *((_OWORD *)a4 + 11) = 0u;
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 13) = 0u;
    icu::Locale::Locale(v18, a4, v16, 0, 0, 0);
    if (v16 != (char *)v21)
      uprv_free(v16);
    return (uint64_t *)icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
  }
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  icu::Locale::Locale((uint64_t *)7, a4, "", 0, 0, 0);
  return (uint64_t *)icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
}

void icu::RuleBasedNumberFormat::getRuleSetDisplayName(icu::RuleBasedNumberFormat *this@<X0>, const icu::Locale *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t BaseName;
  uint64_t v10;
  uint64_t Buffer;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int16 *v18;
  BOOL v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x80000000) != 0
    || (v6 = *((_QWORD *)this + 83)) == 0
    || (*(int (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6) <= (int)a3)
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = off_1E2256B38;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }
  else
  {
    memset(v26, 0, sizeof(v26));
    BaseName = icu::Locale::getBaseName(a2);
    icu::UnicodeString::UnicodeString(v26, BaseName, 0xFFFFFFFFLL, 0);
    if ((SWORD4(v26[0]) & 0x8000u) == 0)
      LODWORD(v10) = WORD4(v26[0]) >> 5;
    else
      LODWORD(v10) = HIDWORD(v26[0]);
    Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)v26, (int)v10 + 1);
    if ((v10 & 0x80000000) != 0)
    {
LABEL_22:
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      v24 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 83) + 32))(*((_QWORD *)this + 83), a3);
      icu::UnicodeString::UnicodeString(a4, 1, &v24);
      v22 = v24;
      v21 = &v22;
    }
    else
    {
      v12 = Buffer;
      v13 = Buffer - 2;
      while (1)
      {
        *(_WORD *)(v12 + 2 * v10) = 0;
        v14 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 83) + 64))(*((_QWORD *)this + 83), v12);
        if ((v14 & 0x80000000) == 0)
          break;
        if ((_DWORD)v10)
          v15 = 0;
        else
          v15 = 0xFFFFFFFFLL;
        do
        {
          v16 = (_DWORD)v10 != 0;
          v10 = (v10 - 1);
          if ((_DWORD)v10 == 0 || !v16)
          {
            v17 = v15;
            goto LABEL_17;
          }
        }
        while (*(_WORD *)(v12 + 2 * v10) != 95);
        v17 = v10;
        LODWORD(v15) = v10;
LABEL_17:
        LODWORD(v10) = v15 & ((int)v15 >> 31);
        v18 = (unsigned __int16 *)(v13 + 2 * v17);
        while (1)
        {
          v19 = __OFSUB__((_DWORD)v17, 1);
          LODWORD(v17) = v17 - 1;
          if ((int)v17 < 0 != v19)
            break;
          v20 = *v18--;
          if (v20 != 95)
          {
            LODWORD(v10) = v17 + 1;
            break;
          }
        }
        if ((v10 & 0x80000000) != 0)
          goto LABEL_22;
      }
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      v25 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 83) + 56))(*((_QWORD *)this + 83), v14, a3);
      icu::UnicodeString::UnicodeString(a4, 1, &v25);
      v23 = v25;
      v21 = &v23;
    }
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v26);
  }
}

void icu::RuleBasedNumberFormat::getRuleSetDisplayName(icu::RuleBasedNumberFormat *this@<X0>, UChar **a2@<X1>, const icu::Locale *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t TerminatedBuffer;
  uint64_t v8;
  void *v9;
  _OWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 83))
  {
    memset(v10, 0, sizeof(v10));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v10, a2);
    v6 = *((_QWORD *)this + 83);
    TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v10);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 72))(v6, TerminatedBuffer);
    (*(void (**)(icu::RuleBasedNumberFormat *, uint64_t, const icu::Locale *))(*(_QWORD *)this + 344))(this, v8, a3);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v10);
  }
  else
  {
    *(_OWORD *)(a4 + 8) = 0u;
    *(_QWORD *)(a4 + 56) = 0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_QWORD *)a4 = off_1E2256B38;
    *(_WORD *)(a4 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }
}

uint64_t icu::RuleBasedNumberFormat::findRuleSet(icu::RuleBasedNumberFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t *v8;
  uint64_t v9;

  if (*(int *)a3 > 0)
    return 0;
  v5 = (uint64_t *)*((_QWORD *)this + 45);
  if (!v5)
    return 0;
  v3 = *v5;
  if (*v5)
  {
    v8 = v5 + 1;
    while (!sub_18BD48EB8(v3, (uint64_t)a2))
    {
      v9 = *v8++;
      v3 = v9;
      if (!v9)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v3 = 0;
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v3;
}

BOOL sub_18BD48EB8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(unsigned __int16 *)(a1 + 16);
  if ((v2 & 1) != 0)
    return *(_WORD *)(a2 + 8) & 1;
  if ((v2 & 0x8000) != 0)
    v3 = *(_DWORD *)(a1 + 20);
  else
    v3 = v2 >> 5;
  v4 = 0;
  v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0)
    v6 = v5 >> 5;
  else
    v6 = *(_DWORD *)(a2 + 12);
  if ((v5 & 1) == 0 && v3 == v6)
    return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)a2, v3);
  return v4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(char **this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  uint64_t v10;
  double v11;
  icu::DecimalFormat *Instance;
  icu::DecimalFormat *v13;
  unint64_t v14;
  uint64_t *v15;
  icu::number::impl::DecimalQuantity *v16;
  icu::number::impl::DecimalQuantity *v17;
  _OWORD v19[4];
  uint64_t v20;
  _OWORD v21[7];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v19, (uint64_t)a2);
    if (icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v19, 0))
    {
      v10 = icu::number::impl::DecimalQuantity::toLong(a2, 0);
      (*((void (**)(char **, uint64_t, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))*this + 15))(this, v10, a3, a4, a5);
    }
    else
    {
      icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v19, 0, 4u, (int *)a5);
      if (icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v19, 0))
      {
        v11 = icu::number::impl::DecimalQuantity::toDouble(a2);
        (*((void (**)(char **, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))*this + 9))(this, a3, a4, a5, v11);
      }
      else
      {
        Instance = icu::NumberFormat::createInstance(this + 49, 1u, a5);
        v13 = Instance;
        if (Instance || *(int *)a5 > 0)
        {
          if (Instance)
          {
            memset(v21, 0, sizeof(v21));
            icu::Formattable::Formattable((icu::Formattable *)v21);
            v16 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v15, (icu::UMemory *)0x48, v14);
            if (v16)
            {
              v17 = v16;
              icu::number::impl::DecimalQuantity::DecimalQuantity(v16, (uint64_t)a2);
              icu::Formattable::adoptDecimalQuantity((icu::Formattable *)v21, v17);
              (*(void (**)(icu::DecimalFormat *, _OWORD *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(_QWORD *)v13 + 40))(v13, v21, a3, a4, a5);
            }
            else if (*(int *)a5 <= 0)
            {
              *a5 = U_MEMORY_ALLOCATION_ERROR;
            }
            icu::Formattable::~Formattable((icu::Formattable *)v21);
            (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)v13 + 8))(v13);
          }
        }
        else
        {
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
    }
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
  }
  return a3;
}

uint64_t icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  return (*(uint64_t (**)(icu::RuleBasedNumberFormat *, _QWORD, icu::UnicodeString *, icu::FieldPosition *))(*(_QWORD *)this + 112))(this, a2, a3, a4);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, unint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  _DWORD *v5;
  int v7;

  v5 = (_DWORD *)*((_QWORD *)this + 48);
  if (v5)
  {
    v7 = 0;
    icu::RuleBasedNumberFormat::format((uint64_t)this, a2, v5, (uint64_t)a3, (UErrorCode *)&v7);
  }
  return a3;
}

uint64_t icu::RuleBasedNumberFormat::format(uint64_t a1, unint64_t a2, _DWORD *a3, uint64_t a4, UErrorCode *this)
{
  icu::DecimalFormat *Instance;
  icu::DecimalFormat *v9;
  unint64_t v10;
  icu::number::impl::DecimalQuantity *v11;
  icu::number::impl::DecimalQuantity *v12;
  void **v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD v19[3];
  _OWORD v20[7];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(int *)this <= 0)
  {
    if (a2 == 0x8000000000000000)
    {
      Instance = icu::NumberFormat::createInstance((char **)(a1 + 392), 1u, this);
      if (Instance)
      {
        v9 = Instance;
        memset(v20, 0, sizeof(v20));
        icu::Formattable::Formattable((icu::Formattable *)v20);
        v19[2] = 0;
        v19[0] = off_1E225EF78;
        v19[1] = 0xFFFFFFFFLL;
        v11 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new((uint64_t *)off_1E225EF78, (icu::UMemory *)0x48, v10);
        if (v11)
        {
          v12 = v11;
          v13 = (void **)icu::number::impl::DecimalQuantity::DecimalQuantity(v11);
          icu::number::impl::DecimalQuantity::setToLong(v13, 0x8000000000000000);
          icu::Formattable::adoptDecimalQuantity((icu::Formattable *)v20, v12);
          (*(void (**)(icu::DecimalFormat *, _OWORD *, uint64_t, _QWORD *, UErrorCode *))(*(_QWORD *)v9 + 40))(v9, v20, a4, v19, this);
        }
        else
        {
          *this = U_MEMORY_ALLOCATION_ERROR;
        }
        (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)v9 + 8))(v9);
        icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v19);
        icu::Formattable::~Formattable((icu::Formattable *)v20);
      }
    }
    else
    {
      v14 = *(unsigned __int16 *)(a4 + 8);
      v15 = (__int16)v14;
      v16 = v14 >> 5;
      if (v15 >= 0)
        v17 = v16;
      else
        v17 = *(unsigned int *)(a4 + 12);
      sub_18BD024D0(a3, a2, (icu::UnicodeString *)a4, v17, 0, this);
      icu::RuleBasedNumberFormat::adjustForCapitalizationContext((icu::BreakIterator **)a1, v17, (icu::UnicodeString *)a4, this);
    }
  }
  return a4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  _DWORD *v5;
  int v7;

  v7 = 0;
  v5 = (_DWORD *)*((_QWORD *)this + 48);
  if (v5)
    icu::RuleBasedNumberFormat::format(this, v5, (uint64_t)a3, &v7, a2);
  return a3;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::NumberFormat *a1, _DWORD *a2, uint64_t a3, int *a4, double a5)
{
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _OWORD v20[4];
  uint64_t v21;

  v10 = *(unsigned __int16 *)(a3 + 8);
  v11 = *(_DWORD *)(a3 + 12);
  if ((*(unsigned int (**)(icu::NumberFormat *))(*(_QWORD *)a1 + 272))(a1) != 7
    && !uprv_isNaN(a5)
    && !uprv_isInfinite(a5))
  {
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v20);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v20, a5);
    v12 = -(int)icu::NumberFormat::getMaximumFractionDigits(a1);
    v13 = (*(uint64_t (**)(icu::NumberFormat *))(*(_QWORD *)a1 + 272))(a1);
    icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v20, v12, v13, a4);
    a5 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v20);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v20);
  }
  if ((v10 & 0x8000u) == 0)
    v14 = v10 >> 5;
  else
    v14 = v11;
  v15 = *(unsigned __int16 *)(a3 + 8);
  v16 = (__int16)v15;
  v17 = v15 >> 5;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(unsigned int *)(a3 + 12);
  sub_18BD02630(a2, (icu::UnicodeString *)a3, v18, 0, (UErrorCode *)a4, a5);
  return icu::RuleBasedNumberFormat::adjustForCapitalizationContext((icu::BreakIterator **)a1, v14, (icu::UnicodeString *)a3, (UErrorCode *)a4);
}

uint64_t icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, int a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  return (*(uint64_t (**)(icu::RuleBasedNumberFormat *, _QWORD, const icu::UnicodeString *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(_QWORD *)this + 368))(this, a2, a3, a4, a5, a6);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, unint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  int v12;
  int v13;
  _DWORD *RuleSet;

  if (*(int *)a6 <= 0)
  {
    if (*((__int16 *)a3 + 4) < 0)
    {
      v13 = *((_DWORD *)a3 + 3);
      v12 = v13 & (v13 >> 31);
    }
    else
    {
      v12 = 0;
      v13 = *((unsigned __int16 *)a3 + 4) >> 5;
    }
    if (icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)L"%%", 0, 2, v12, v13 - v12))
    {
      RuleSet = (_DWORD *)icu::RuleBasedNumberFormat::findRuleSet(this, a3, a6);
      if (RuleSet)
        icu::RuleBasedNumberFormat::format((uint64_t)this, a2, RuleSet, (uint64_t)a4, a6);
    }
    else
    {
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return a4;
}

uint64_t sub_18BD49554(uint64_t a1, uint64_t a2, int32_t a3, int a4)
{
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;

  v4 = *(unsigned __int16 *)(a1 + 8);
  if ((a4 & 0x80000000) == 0)
  {
    if ((v4 & 0x8000) == 0)
    {
      if (v4 >> 5 >= a4)
        v5 = a4;
      else
        v5 = v4 >> 5;
      goto LABEL_7;
    }
    if (*(_DWORD *)(a1 + 12) >= a4)
      v6 = a4;
    else
      v6 = *(_DWORD *)(a1 + 12);
LABEL_11:
    v7 = *(_DWORD *)(a1 + 12);
    v5 = v6;
    return icu::UnicodeString::indexOf(a1, a2, 0, a3, v5, v7 - v5);
  }
  v5 = 0;
  v6 = 0;
  if ((v4 & 0x8000) != 0)
    goto LABEL_11;
LABEL_7:
  v7 = v4 >> 5;
  return icu::UnicodeString::indexOf(a1, a2, 0, a3, v5, v7 - v5);
}

icu::UnicodeString *icu::RuleBasedNumberFormat::format(icu::RuleBasedNumberFormat *this, double a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  int v12;
  int v13;
  _DWORD *RuleSet;

  if (*(int *)a6 <= 0)
  {
    if (*((__int16 *)a3 + 4) < 0)
    {
      v13 = *((_DWORD *)a3 + 3);
      v12 = v13 & (v13 >> 31);
    }
    else
    {
      v12 = 0;
      v13 = *((unsigned __int16 *)a3 + 4) >> 5;
    }
    if (icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)L"%%", 0, 2, v12, v13 - v12))
    {
      RuleSet = (_DWORD *)icu::RuleBasedNumberFormat::findRuleSet(this, a3, a6);
      if (RuleSet)
        icu::RuleBasedNumberFormat::format(this, RuleSet, (uint64_t)a4, (int *)a6, a2);
    }
    else
    {
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return a4;
}

icu::UnicodeString *icu::RuleBasedNumberFormat::adjustForCapitalizationContext(icu::BreakIterator **this, int a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  UChar32 v13;
  icu::BreakIterator *v14;

  v8 = (*((uint64_t (**)(icu::BreakIterator **, uint64_t, UErrorCode *))*this + 33))(this, 1, a4);
  if (!a2)
  {
    v9 = v8;
    if (v8 != 256)
    {
      v10 = *((unsigned __int16 *)a3 + 4);
      v11 = (__int16)v10;
      LODWORD(v12) = v10 >> 5;
      v12 = v11 >= 0 ? (uint64_t *)v12 : (uint64_t *)*((unsigned int *)a3 + 3);
      if ((int)v12 >= 1)
      {
        v13 = icu::UnicodeString::char32At(v12, a3, 0);
        if (u_islower(v13))
        {
          if (*(int *)a4 <= 0)
          {
            v14 = this[93];
            if (v14)
            {
              if (v9 != 258)
              {
                if (v9 == 260)
                {
                  if (!*((_BYTE *)this + 738))
                    return a3;
                }
                else if (v9 != 259 || !*((_BYTE *)this + 737))
                {
                  return a3;
                }
              }
              icu::UnicodeString::toTitle((const UChar **)a3, v14, (const icu::Locale *)(this + 49), 768);
            }
          }
        }
      }
    }
  }
  return a3;
}

char *icu::RuleBasedNumberFormat::parse(char *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  double v17;
  double v18;
  void *v21;
  void (**v22)(icu::ParsePosition *__hidden);
  unint64_t v23;
  void (**v24)(icu::ParsePosition *__hidden);
  unint64_t v25;
  _QWORD v26[2];
  _OWORD v27[7];
  _OWORD v28[7];
  _OWORD v29[4];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 45))
  {
    *((_DWORD *)a4 + 3) = 0;
    return this;
  }
  v6 = this;
  memset(v29, 0, sizeof(v29));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v29, a2, *((_DWORD *)a4 + 2));
  v26[0] = off_1E224A8B0;
  v26[1] = 0xFFFFFFFF00000000;
  v24 = off_1E224A8B0;
  v25 = 0xFFFFFFFF00000000;
  memset(v28, 0, sizeof(v28));
  icu::Formattable::Formattable((icu::Formattable *)v28);
  v7 = (uint64_t *)*((_QWORD *)v6 + 45);
  v8 = *v7;
  if (!*v7)
  {
    v15 = *((_DWORD *)a4 + 2);
    v11 = -1;
    goto LABEL_17;
  }
  v9 = 0;
  v10 = v7 + 1;
  v11 = -1;
  while (1)
  {
    if (!*(_BYTE *)(v8 + 161) || !*(_BYTE *)(v8 + 162))
      goto LABEL_12;
    v22 = off_1E224A8B0;
    v23 = 0xFFFFFFFF00000000;
    memset(v27, 0, sizeof(v27));
    icu::Formattable::Formattable((icu::Formattable *)v27);
    sub_18BD029C8(v8, (uint64_t)v29, (uint64_t)&v22, 0, (icu::Formattable *)v27, v6[652], 1.7592186e13);
    v12 = v23;
    if ((int)v23 > v9)
      break;
LABEL_11:
    icu::Formattable::~Formattable((icu::Formattable *)v27);
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v22);
LABEL_12:
    v14 = *v10++;
    v8 = v14;
    if (!v14)
      goto LABEL_13;
  }
  v11 = HIDWORD(v23);
  v25 = v23;
  icu::Formattable::operator=((uint64_t)v28, (uint64_t)v27);
  v13 = WORD4(v29[0]) >> 5;
  if (SWORD4(v29[0]) < 0)
    v13 = HIDWORD(v29[0]);
  if (v12 != v13)
  {
    v9 = v12;
    goto LABEL_11;
  }
  icu::Formattable::~Formattable((icu::Formattable *)v27);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v22);
  v9 = v12;
LABEL_13:
  v15 = *((_DWORD *)a4 + 2);
  *((_DWORD *)a4 + 2) = v9 + v15;
  if (v9 <= 0)
  {
LABEL_17:
    v16 = (v11 & ~(v11 >> 31)) + v15;
    goto LABEL_18;
  }
  v16 = -1;
LABEL_18:
  *((_DWORD *)a4 + 3) = v16;
  icu::Formattable::operator=((uint64_t)a3, (uint64_t)v28);
  if (icu::Formattable::getType(a3) == 1)
  {
    v17 = *((double *)a3 + 1);
    if (!uprv_isNaN(v17))
    {
      v18 = uprv_trunc(v17);
      if (v17 <= 2147483650.0 && v17 >= -2147483650.0 && v17 == v18)
        icu::Formattable::setLong(a3, (int)v17);
    }
  }
  icu::Formattable::~Formattable((icu::Formattable *)v28);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v24);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)v26);
  return (char *)icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
}

void icu::RuleBasedNumberFormat::setLenient(icu::RuleBasedNumberFormat *this, int a2)
{
  icu::RuleBasedCollator *v3;
  void *v4;

  *((_BYTE *)this + 652) = a2;
  if (!a2)
  {
    v3 = (icu::RuleBasedCollator *)*((_QWORD *)this + 77);
    if (v3)
    {
      icu::RuleBasedCollator::~RuleBasedCollator(v3);
      icu::UMemory::operator delete(v4);
      *((_QWORD *)this + 77) = 0;
    }
  }
}

uint64_t *icu::RuleBasedNumberFormat::setDefaultRuleSet(uint64_t *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t *v5;
  void *v6;
  int32_t v7;
  int v8;
  int32_t v9;
  int32_t v10;
  uint64_t v11;
  void *v12;
  _BOOL4 v13;
  char *v14;
  const __int16 *v15;
  uint64_t v16;
  const __int16 *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v5 = this;
    if (*((unsigned __int16 *)a2 + 4) <= 0x1Fu)
    {
      v11 = this[83];
      if (!v11)
        return icu::RuleBasedNumberFormat::initDefaultRuleSet(v5);
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v18 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 0);
      icu::UnicodeString::UnicodeString(&v19, 1, &v18);
      v16 = v18;
      v5[48] = (uint64_t)icu::RuleBasedNumberFormat::findRuleSet(&v16, (icu::RuleBasedNumberFormat *)v5, (const icu::UnicodeString *)&v19, a3);
      return (uint64_t *)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
    }
    v17 = L"%%";
    icu::UnicodeString::UnicodeString(&v19, 1, &v17);
    v6 = (void *)WORD4(v19);
    if ((SWORD4(v19) & 0x8000u) == 0)
      v7 = WORD4(v19) >> 5;
    else
      v7 = HIDWORD(v19);
    if ((BYTE8(v19) & 1) != 0)
    {
      v6 = (void *)*((unsigned __int8 *)a2 + 8);
      v13 = v6 & 1;
LABEL_23:
      this = (uint64_t *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v19);
      v15 = v17;
      if (v13)
      {
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
      }
      else
      {
        this = icu::RuleBasedNumberFormat::findRuleSet((uint64_t *)&v15, (icu::RuleBasedNumberFormat *)v5, a2, a3);
        if (this)
          v5[48] = (uint64_t)this;
      }
      return this;
    }
    v8 = v7 & (v7 >> 31);
    if (v7 < 0)
    {
      v9 = 0;
    }
    else
    {
      v9 = v7 - v8;
      v10 = v7;
      if (v7 - v8 >= v7)
      {
LABEL_17:
        if ((*((_WORD *)a2 + 4) & 1) != 0)
        {
          v13 = 0;
        }
        else
        {
          if ((BYTE8(v19) & 2) != 0)
            v14 = (char *)&v19 + 10;
          else
            v14 = (char *)*((_QWORD *)&v20 + 1);
          v13 = icu::UnicodeString::doEqualsSubstring((uint64_t)a2, 0, v7, (uint64_t)v14, v8, v10);
        }
        goto LABEL_23;
      }
    }
    v10 = v9;
    goto LABEL_17;
  }
  return this;
}

_QWORD *icu::RuleBasedNumberFormat::initDefaultRuleSet(_QWORD *this)
{
  void *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const __int16 *v12;
  const __int16 *v13;
  const __int16 *v14;
  _OWORD v15[4];
  _OWORD v16[4];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  this[48] = 0;
  if (this[45])
  {
    v1 = this;
    memset(v17, 0, sizeof(v17));
    v14 = L"%spellout-numbering";
    icu::UnicodeString::UnicodeString(v17, 1, &v14);
    memset(v16, 0, sizeof(v16));
    v13 = L"%digits-ordinal";
    icu::UnicodeString::UnicodeString(v16, 1, &v13);
    memset(v15, 0, sizeof(v15));
    v12 = L"%duration";
    icu::UnicodeString::UnicodeString(v15, 1, &v12);
    v2 = (uint64_t *)*((_QWORD *)v1 + 45);
    v3 = *v2;
    if (*v2)
    {
      while (!sub_18BD48EB8(v3, (uint64_t)v17) && !sub_18BD48EB8(*v2, (uint64_t)v16) && !sub_18BD48EB8(*v2, (uint64_t)v15))
      {
        v5 = v2[1];
        ++v2;
        v3 = v5;
        if (!v5)
          goto LABEL_7;
      }
      v8 = *v2;
LABEL_13:
      *((_QWORD *)v1 + 48) = v8;
    }
    else
    {
LABEL_7:
      v7 = *(v2 - 1);
      v6 = v2 - 1;
      *((_QWORD *)v1 + 48) = v7;
      v4 = (uint64_t *)*(unsigned __int8 *)(v7 + 161);
      if (!*(_BYTE *)(v7 + 161))
      {
        v4 = (uint64_t *)*((_QWORD *)v1 + 45);
        while (v6 != v4)
        {
          v9 = *--v6;
          v8 = v9;
          if (*(_BYTE *)(v9 + 161))
            goto LABEL_13;
        }
      }
    }
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
    return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  }
  return this;
}

void icu::RuleBasedNumberFormat::getDefaultRuleSetName(icu::RuleBasedNumberFormat *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  v4 = *((_QWORD *)this + 48);
  if (v4 && *(_BYTE *)(v4 + 161))
    icu::UnicodeString::copyFrom((UChar **)a2, (UChar **)(v4 + 8), 0);
  else
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a2);
}

uint64_t icu::RuleBasedNumberFormat::initializeDecimalFormatSymbols(icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  icu::DecimalFormatSymbols *v5;
  uint64_t v6;

  if (!*((_QWORD *)this + 78))
  {
    v5 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((icu::UMemory *)0xB48, (unint64_t)a2);
    if (v5)
    {
      v6 = icu::DecimalFormatSymbols::DecimalFormatSymbols(v5, (icu::RuleBasedNumberFormat *)((char *)this + 392), a2);
      if (*(int *)a2 <= 0)
        *((_QWORD *)this + 78) = v6;
      else
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    else if (*(int *)a2 <= 0)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return *((_QWORD *)this + 78);
}

uint64_t icu::RuleBasedNumberFormat::initializeDefaultInfinityRule(icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  const __int16 *v13;
  _BYTE v14[8];
  unsigned __int16 v15;
  unsigned int v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  result = *((_QWORD *)this + 79);
  if (!result)
  {
    memset(v17, 0, sizeof(v17));
    v13 = L"Inf: ";
    icu::UnicodeString::UnicodeString(v17, 1, &v13);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(*((_QWORD *)this + 78) + 904));
    if ((v15 & 0x8000u) == 0)
      v5 = v15 >> 5;
    else
      v5 = v16;
    icu::UnicodeString::doAppend((uint64_t)v17, (const icu::UnicodeString *)v14, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v14);
    v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x70, v7);
    if (v9)
    {
      v10 = (_QWORD *)sub_18BD03804((int)v9, (int)this, (icu::UnicodeString *)v17);
      v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        *((_QWORD *)this + 79) = v10;
      }
      else
      {
        v12 = sub_18BD03888(v10);
        icu::UMemory::operator delete(v12);
      }
    }
    else
    {
      v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        v11 = 7;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v17);
    return *((_QWORD *)this + 79);
  }
  return result;
}

uint64_t icu::RuleBasedNumberFormat::initializeDefaultNaNRule(icu::RuleBasedNumberFormat *this, UErrorCode *a2)
{
  uint64_t result;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  const __int16 *v13;
  _BYTE v14[8];
  unsigned __int16 v15;
  unsigned int v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  result = *((_QWORD *)this + 80);
  if (!result)
  {
    memset(v17, 0, sizeof(v17));
    v13 = L"NaN: ";
    icu::UnicodeString::UnicodeString(v17, 1, &v13);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(*((_QWORD *)this + 78) + 968));
    if ((v15 & 0x8000u) == 0)
      v5 = v15 >> 5;
    else
      v5 = v16;
    icu::UnicodeString::doAppend((uint64_t)v17, (const icu::UnicodeString *)v14, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v14);
    v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x70, v7);
    if (v9)
    {
      v10 = (_QWORD *)sub_18BD03804((int)v9, (int)this, (icu::UnicodeString *)v17);
      v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        *((_QWORD *)this + 80) = v10;
      }
      else
      {
        v12 = sub_18BD03888(v10);
        icu::UMemory::operator delete(v12);
      }
    }
    else
    {
      v11 = *(unsigned int *)a2;
      if ((int)v11 <= 0)
      {
        v11 = 7;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v17);
    return *((_QWORD *)this + 80);
  }
  return result;
}

void *icu::RuleBasedNumberFormat::stripWhitespace(icu::RuleBasedNumberFormat *this, icu::UnicodeString *a2)
{
  signed int v3;
  char *v4;
  unsigned int v5;
  signed int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BOOL4 isWhiteSpace;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  signed int v18;
  void *v19;
  UChar *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v3 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v25 = 0;
  v24 = 0u;
  v23 = 0u;
  v21 = (UChar *)off_1E2256B38;
  LOWORD(v22) = 2;
  v4 = (char *)a2 + 10;
  while (1)
  {
    v5 = *((unsigned __int16 *)a2 + 4);
    v6 = (v5 & 0x8000u) == 0 ? v5 >> 5 : *((_DWORD *)a2 + 3);
    if (v3 >= v6)
      break;
    v7 = v3;
    do
    {
      v8 = v3;
      if ((v5 & 0x8000) != 0)
      {
        v9 = *((int *)a2 + 3);
        if (v7 >= v9)
          break;
      }
      else
      {
        v9 = v5 >> 5;
        if (v7 >= v9)
          break;
      }
      if (v9 <= v3)
      {
        v11 = 0xFFFFLL;
      }
      else
      {
        if ((v5 & 2) != 0)
          v10 = v4;
        else
          v10 = (char *)*((_QWORD *)a2 + 3);
        v11 = *(unsigned __int16 *)&v10[2 * v7];
      }
      isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v11);
      v5 = *((unsigned __int16 *)a2 + 4);
      ++v7;
      ++v3;
    }
    while (isWhiteSpace);
    if (v8 < 0)
    {
      v14 = 0;
      if ((v5 & 0x8000) != 0)
        v13 = *((_DWORD *)a2 + 3);
      else
        v13 = v5 >> 5;
    }
    else if ((v5 & 0x8000) != 0)
    {
      v13 = *((_DWORD *)a2 + 3);
      if ((int)v13 >= v8)
        v14 = v8;
      else
        v14 = *((_DWORD *)a2 + 3);
    }
    else
    {
      v13 = v5 >> 5;
      if (v13 >= v8)
        v14 = v8;
      else
        v14 = v13;
    }
    v15 = icu::UnicodeString::doIndexOf((uint64_t)a2, 0x3Bu, v14, v13 - v14);
    v16 = *((unsigned __int16 *)a2 + 4);
    v17 = (__int16)v16;
    v18 = v16 >> 5;
    if (v17 < 0)
      v18 = *((_DWORD *)a2 + 3);
    if (v15 == -1)
    {
      icu::UnicodeString::doAppend((uint64_t)&v21, a2, v8, (v18 - v8));
      break;
    }
    if (v15 < v18)
    {
      v3 = v15 + 1;
      icu::UnicodeString::doAppend((uint64_t)&v21, a2, v8, (v15 - v8 + 1));
      if (v3 != -1)
        continue;
    }
    break;
  }
  icu::UnicodeString::copyFrom((UChar **)a2, &v21, 0);
  return icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v21);
}

void icu::RuleBasedNumberFormat::setContext(uint64_t a1, int a2, int *a3)
{
  UErrorCode *v6;
  UErrorCode *v7;
  char *SentenceInstance;

  icu::NumberFormat::setContext(a1, a2, a3);
  if (*a3 <= 0)
  {
    if ((a2 - 259) <= 1 && !*(_BYTE *)(a1 + 736))
    {
      icu::RuleBasedNumberFormat::initCapitalizationContextInfo((icu::RuleBasedNumberFormat *)a1, (const icu::Locale *)(a1 + 392));
      *(_BYTE *)(a1 + 736) = 1;
    }
    if (!*(_QWORD *)(a1 + 744))
    {
      if (a2 != 258)
      {
        if (a2 == 260)
        {
          if (!*(_BYTE *)(a1 + 738))
            return;
        }
        else if (a2 != 259 || !*(_BYTE *)(a1 + 737))
        {
          return;
        }
      }
      *a3 = 0;
      SentenceInstance = icu::BreakIterator::createSentenceInstance((char **)(a1 + 392), (const icu::Locale *)a3, v6, v7);
      *(_QWORD *)(a1 + 744) = SentenceInstance;
      if (*a3 >= 1)
      {
        if (SentenceInstance)
          (*(void (**)(char *))(*(_QWORD *)SentenceInstance + 8))(SentenceInstance);
        *(_QWORD *)(a1 + 744) = 0;
      }
    }
  }
}

void icu::RuleBasedNumberFormat::initCapitalizationContextInfo(icu::RuleBasedNumberFormat *this, const icu::Locale *a2)
{
  char *BaseName;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int *IntVector;
  int v10;
  int v11[56];
  uint64_t *v12;

  v12 = (uint64_t *)*MEMORY[0x1E0C80C00];
  icu::Locale::Locale(v12, (icu::Locale *)v11, 0, 0, 0, 0);
  BaseName = 0;
  if (!icu::Locale::operator==((uint64_t)a2, (uint64_t)v11))
    BaseName = (char *)icu::Locale::getBaseName(a2);
  icu::Locale::~Locale((icu::Locale *)v11);
  v11[0] = 0;
  v5 = ures_open(0, BaseName, v11);
  v6 = ures_getByKeyWithFallback((uint64_t)v5, "contextTransforms", (uint64_t)v5, (UErrorCode *)v11);
  v7 = ures_getByKeyWithFallback(v6, "number-spellout", v6, (UErrorCode *)v11);
  v8 = (_QWORD *)v7;
  if (v11[0] <= 0)
  {
    if (v7)
    {
      v10 = 0;
      IntVector = ures_getIntVector(v7, &v10, v11);
      if (v11[0] <= 0 && IntVector && v10 >= 2)
      {
        *((_BYTE *)this + 737) = *IntVector;
        *((_BYTE *)this + 738) = IntVector[1];
      }
    }
  }
  ures_close(v8);
}

uint64_t icu::RuleBasedNumberFormat::getCollator(icu::RuleBasedNumberFormat *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t result;
  icu::RuleBasedCollator *Instance;
  void (***v6)(icu::RuleBasedCollator *__hidden);
  void (**v7)(icu::RuleBasedCollator *__hidden);
  UChar **Rules;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  icu::RuleBasedCollator *v16;
  void *v17;
  icu::RuleBasedCollator *v18;
  void *v19;
  void *v20;
  UErrorCode v21;
  _OWORD v22[4];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 45))
  {
    result = *((_QWORD *)this + 77);
    if (result)
      return result;
    if (*((_BYTE *)this + 652))
    {
      v21 = U_ZERO_ERROR;
      Instance = icu::Collator::createInstance((icu::RuleBasedNumberFormat *)((char *)this + 392), (const icu::Locale *)&v21, a3);
      v6 = (void (***)(icu::RuleBasedCollator *__hidden))Instance;
      if (v21 > U_ZERO_ERROR)
      {
        if (Instance)
        {
LABEL_6:
          v7 = *v6;
LABEL_9:
          v7[1]((icu::RuleBasedCollator *)v6);
        }
        return *((_QWORD *)this + 77);
      }
      if (!Instance)
        return *((_QWORD *)this + 77);
      v7 = *(void (***)(icu::RuleBasedCollator *__hidden))Instance;
      if (*(void (***)(icu::RuleBasedCollator *__hidden))Instance != off_1E2265E40)
        goto LABEL_9;
      if (!*((_QWORD *)this + 82))
      {
        v18 = Instance;
        v6 = 0;
        goto LABEL_19;
      }
      memset(v22, 0, sizeof(v22));
      Rules = (UChar **)icu::RuleBasedCollator::getRules(Instance);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v22, Rules);
      v9 = *((_QWORD *)this + 82);
      v10 = *(unsigned __int16 *)(v9 + 8);
      v11 = (__int16)v10;
      v12 = v10 >> 5;
      if (v11 >= 0)
        v13 = v12;
      else
        v13 = *(unsigned int *)(v9 + 12);
      icu::UnicodeString::doAppend((uint64_t)v22, (const icu::UnicodeString *)v9, 0, v13);
      v16 = (icu::RuleBasedCollator *)icu::UMemory::operator new(v15, (icu::UMemory *)0x110, v14);
      if (v16)
      {
        v18 = v16;
        icu::RuleBasedCollator::RuleBasedCollator(v16, (const icu::UnicodeString *)v22, &v21);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
        if (v21 > U_ZERO_ERROR)
        {
          icu::RuleBasedCollator::~RuleBasedCollator(v18);
          icu::UMemory::operator delete(v20);
          goto LABEL_6;
        }
LABEL_19:
        icu::RuleBasedCollator::setAttribute((uint64_t)v18, 4, 0x11u, (int *)&v21);
        *((_QWORD *)this + 77) = v18;
        if (!v6)
          return *((_QWORD *)this + 77);
        goto LABEL_6;
      }
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v22);
    }
  }
  return 0;
}

uint64_t icu::RuleBasedNumberFormat::getDefaultInfinityRule(icu::RuleBasedNumberFormat *this)
{
  return *((_QWORD *)this + 79);
}

uint64_t icu::RuleBasedNumberFormat::getDefaultNaNRule(icu::RuleBasedNumberFormat *this)
{
  return *((_QWORD *)this + 80);
}

uint64_t icu::RuleBasedNumberFormat::adoptDecimalFormatSymbols(uint64_t this, icu::DecimalFormatSymbols *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  UErrorCode v10;

  if (a2)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 624);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(v3 + 624) = a2;
    v10 = U_ZERO_ERROR;
    v5 = *(_QWORD **)(v3 + 632);
    if (v5)
    {
      v6 = sub_18BD03888(v5);
      icu::UMemory::operator delete(v6);
    }
    *(_QWORD *)(v3 + 632) = 0;
    icu::RuleBasedNumberFormat::initializeDefaultInfinityRule((icu::RuleBasedNumberFormat *)v3, &v10);
    v7 = *(_QWORD **)(v3 + 640);
    if (v7)
    {
      v8 = sub_18BD03888(v7);
      icu::UMemory::operator delete(v8);
    }
    *(_QWORD *)(v3 + 640) = 0;
    this = icu::RuleBasedNumberFormat::initializeDefaultNaNRule((icu::RuleBasedNumberFormat *)v3, &v10);
    if (*(_QWORD *)(v3 + 360) && *(int *)(v3 + 376) >= 1)
    {
      v9 = 0;
      do
        this = sub_18BD023D4(*(_QWORD *)(*(_QWORD *)(v3 + 360) + 8 * v9++));
      while (v9 < *(int *)(v3 + 376));
    }
  }
  return this;
}

uint64_t icu::RuleBasedNumberFormat::setDecimalFormatSymbols(icu::RuleBasedNumberFormat *this, const icu::DecimalFormatSymbols *a2)
{
  icu::DecimalFormatSymbols *v4;
  icu::DecimalFormatSymbols *v5;

  v4 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((icu::UMemory *)0xB48, (unint64_t)a2);
  v5 = v4;
  if (v4)
    icu::DecimalFormatSymbols::DecimalFormatSymbols(v4, a2);
  return (*(uint64_t (**)(icu::RuleBasedNumberFormat *, icu::DecimalFormatSymbols *))(*(_QWORD *)this + 400))(this, v5);
}

uint64_t icu::RuleBasedNumberFormat::createPluralFormat(uint64_t a1, unint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;

  result = icu::UMemory::operator new((icu::UMemory *)0x2C8, a2);
  if (result)
    return icu::PluralFormat::PluralFormat(result, a1 + 392, a2, a3, a4);
  *a4 = 7;
  return result;
}

uint64_t icu::RuleBasedNumberFormat::getRoundingMode(icu::RuleBasedNumberFormat *this)
{
  return *((unsigned int *)this + 162);
}

uint64_t icu::RuleBasedNumberFormat::setRoundingMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 648) = a2;
  return result;
}

uint64_t sub_18BD4A7FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18BD4A804(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18BD4A80C(uint64_t a1)
{
  return *(char *)(a1 + 652);
}

uint64_t sub_18BD4A814(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 16) && *(int *)(a1 + 12) >= 1)
  {
    v2 = 0;
    do
      (*(void (**)(_QWORD))(a1 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 8 * v2++));
    while (v2 < *(int *)(a1 + 12));
  }
  uprv_free(*(void **)a1);
  return a1;
}

void *icu::RuleBasedTransliterator::getStaticClassID(icu::RuleBasedTransliterator *this)
{
  return &unk_1EE009C68;
}

void *sub_18BD4A880()
{
  return &unk_1EE009C68;
}

icu::Transliterator *sub_18BD4A88C(icu::Transliterator *a1, UChar **a2, uint64_t a3, icu::UnicodeFilter *a4)
{
  icu::Transliterator *v6;
  int v7;

  v6 = icu::Transliterator::Transliterator(a1, a2, a4);
  *(_QWORD *)v6 = &off_1E22653B8;
  *((_QWORD *)v6 + 11) = a3;
  *((_BYTE *)v6 + 96) = 0;
  v7 = sub_18BD4F41C(a3 + 8);
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, v7);
  return a1;
}

icu::Transliterator *sub_18BD4A8E4(icu::Transliterator *a1, UChar **a2, uint64_t a3, char a4)
{
  icu::Transliterator *v7;
  int v8;

  v7 = icu::Transliterator::Transliterator(a1, a2, 0);
  *(_QWORD *)v7 = &off_1E22653B8;
  *((_QWORD *)v7 + 11) = a3;
  *((_BYTE *)v7 + 96) = a4;
  v8 = sub_18BD4F41C(a3 + 8);
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, v8);
  return a1;
}

icu::Transliterator *sub_18BD4A948(icu::Transliterator *a1, uint64_t a2)
{
  icu::Transliterator *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  v4 = icu::Transliterator::Transliterator(a1, (UChar **)a2);
  *(_QWORD *)v4 = &off_1E22653B8;
  *((_QWORD *)v4 + 11) = *(_QWORD *)(a2 + 88);
  v6 = (uint64_t *)*(unsigned __int8 *)(a2 + 96);
  *((_BYTE *)v4 + 96) = (_BYTE)v6;
  if ((_DWORD)v6)
  {
    v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x490, v5);
    if (v7)
      v7 = (uint64_t *)sub_18BD4AE80(v7, *(_QWORD *)(a2 + 88));
    *((_QWORD *)a1 + 11) = v7;
  }
  return a1;
}

void sub_18BD4A9A8(icu::Transliterator *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E22653B8;
  if (*((_BYTE *)this + 96))
  {
    v2 = *((_QWORD *)this + 11);
    if (v2)
    {
      v3 = (void *)sub_18BD4AF08(v2);
      icu::UMemory::operator delete(v3);
    }
  }
  icu::Transliterator::~Transliterator(this);
}

void sub_18BD4A9F0(icu::Transliterator *a1)
{
  void *v1;

  sub_18BD4A9A8(a1);
  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18BD4AA04@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *result;

  result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x68, a2);
  if (result)
    return sub_18BD4A948(result, a1);
  return result;
}

void sub_18BD4AA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  BOOL v16;

  v9 = *(_DWORD *)(a3 + 8);
  v8 = *(_DWORD *)(a3 + 12);
  umtx_lock(0);
  v10 = qword_1EE009CC0;
  umtx_unlock(0);
  if (v10 != a2)
  {
    umtx_lock((icu::UMutex *)&unk_1EE009C70);
    umtx_lock(0);
    qword_1EE009CC0 = a2;
    umtx_unlock(0);
  }
  if (*(_QWORD *)(a1 + 88) && *(_DWORD *)(a3 + 8) < *(_DWORD *)(a3 + 12))
  {
    v11 = v8 - v9;
    v12 = 16 * (v8 - v9);
    v13 = 1;
    v14 = v11 >> 28;
    do
    {
      if (!sub_18BD4F858(*(_QWORD *)(a1 + 88) + 8, a2, a3, a4))
        break;
      v15 = v14 || v12 >= v13;
      v16 = !v15;
      if (*(_DWORD *)(a3 + 8) >= *(_DWORD *)(a3 + 12))
        break;
      ++v13;
    }
    while (!v16);
  }
  if (v10 != a2)
  {
    umtx_lock(0);
    qword_1EE009CC0 = 0;
    umtx_unlock(0);
    umtx_unlock((std::mutex **)&unk_1EE009C70);
  }
}

icu::UnicodeString *sub_18BD4AB60(uint64_t a1, icu::UnicodeString *a2, uint64_t a3)
{
  return sub_18BD4F938(*(_QWORD *)(a1 + 88) + 8, a2, a3);
}

icu::UnicodeSet *sub_18BD4AB6C(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_18BD4FA0C(*(_QWORD *)(a1 + 88) + 8, a2, 0);
}

icu::UnicodeSet *sub_18BD4AB7C(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_18BD4FA0C(*(_QWORD *)(a1 + 88) + 8, a2, 1);
}

uint64_t sub_18BD4AB8C(uint64_t a1, int *a2)
{
  int v5;

  sub_18BD4F1BC(a1 + 8);
  *(_QWORD *)(a1 + 1064) = 0;
  if (*a2 <= 0
    && (uhash_init((int32x2_t *)(a1 + 1072), (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, a2), *a2 < 1))
  {
    *(_QWORD *)(a1 + 1064) = a1 + 1072;
    uhash_setKeyDeleter(a1 + 1072, (uint64_t)uprv_deleteUObject);
    v5 = *a2;
    *(_QWORD *)(a1 + 1152) = 0;
    *(_BYTE *)(a1 + 1160) = 1;
    if (v5 <= 0)
    {
      uhash_setValueDeleter(*(_QWORD *)(a1 + 1064), (uint64_t)uprv_deleteUObject);
      *(_QWORD *)(a1 + 1152) = 0;
      *(_DWORD *)(a1 + 1164) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1152) = 0;
    *(_BYTE *)(a1 + 1160) = 1;
  }
  return a1;
}

uint64_t sub_18BD4AC58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  icu::UnicodeString *v9;
  uint64_t v10;
  UChar **v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  icu::UnicodeString *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v24;
  int v25;
  int v26;

  v4 = a1 + 8;
  sub_18BD4F330(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 1064) = 0;
  v26 = 0;
  uhash_init((int32x2_t *)(a1 + 1072), (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, &v26);
  if (v26 <= 0)
  {
    *(_QWORD *)(a1 + 1064) = a1 + 1072;
    uhash_setKeyDeleter(a1 + 1072, (uint64_t)uprv_deleteUObject);
  }
  *(_BYTE *)(a1 + 1160) = 1;
  *(_WORD *)(a1 + 1162) = *(_WORD *)(a2 + 1162);
  *(_DWORD *)(a1 + 1164) = *(_DWORD *)(a2 + 1164);
  v25 = 0;
  uhash_setValueDeleter(*(_QWORD *)(a1 + 1064), (uint64_t)uprv_deleteUObject);
  v24 = -1;
  v5 = uhash_nextElement(*(uint64_t **)(a2 + 1064), &v24);
  if (!v5)
  {
LABEL_9:
    *(_QWORD *)(a1 + 1152) = 0;
    if (*(_QWORD *)(a2 + 1152))
    {
      v17 = uprv_malloc(8 * *(int *)(a1 + 1164));
      *(_QWORD *)(a1 + 1152) = v17;
      if (!v17)
        return a1;
      if (*(int *)(a1 + 1164) >= 1)
      {
        v18 = 0;
        while (1)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(a2 + 1152) + 8 * v18);
          *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8 * v18) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
          v17 = *(_QWORD **)(a1 + 1152);
          if (!v17[v18])
            break;
          if (++v18 >= *(int *)(a1 + 1164))
            goto LABEL_18;
        }
        v25 = 7;
LABEL_21:
        if ((int)v18 >= 1)
        {
          v20 = v18 - 1;
          do
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8 * v20);
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v22 = v20-- + 1;
          }
          while (v22 > 1);
          v17 = *(_QWORD **)(a1 + 1152);
        }
        uprv_free(v17);
        *(_QWORD *)(a1 + 1152) = 0;
        return a1;
      }
    }
    else
    {
      v17 = 0;
    }
    LODWORD(v18) = 0;
LABEL_18:
    if (v25 < 1)
    {
      sub_18BD4F3C4(v4, a1);
      return a1;
    }
    goto LABEL_21;
  }
  v8 = v5;
  while (1)
  {
    v9 = (icu::UnicodeString *)icu::UMemory::operator new(v7, (icu::UMemory *)0x40, v6);
    if (!v9)
      return a1;
    v10 = (uint64_t)v9;
    icu::UnicodeString::UnicodeString(v9, *(UChar ***)(v8 + 8));
    v11 = *(UChar ***)(v8 + 16);
    v12 = *(_QWORD *)(a1 + 1064);
    v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
    v16 = (uint64_t)v15;
    if (v15)
      icu::UnicodeString::UnicodeString(v15, v11);
    uhash_put(v12, v16, v10, &v25);
    v8 = uhash_nextElement(*(uint64_t **)(a2 + 1064), &v24);
    if (!v8)
      goto LABEL_9;
  }
}

uint64_t sub_18BD4AE84(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void **v5;

  if (*(_BYTE *)(a1 + 1160))
  {
    if (*(_QWORD *)(a1 + 1152))
    {
      v2 = *(_DWORD *)(a1 + 1164);
      if (v2 >= 1)
      {
        for (i = 0; i < v2; ++i)
        {
          v4 = *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8 * i);
          if (v4)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
            v2 = *(_DWORD *)(a1 + 1164);
          }
        }
      }
    }
  }
  uprv_free(*(void **)(a1 + 1152));
  v5 = *(void ***)(a1 + 1064);
  if (v5)
    uhash_close(v5);
  sub_18BD4F334(a1 + 8);
  return a1;
}

uint64_t sub_18BD4AF0C(uint64_t a1, int a2)
{
  int v2;

  v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 < 0 || v2 >= *(_DWORD *)(a1 + 1164))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8 * v2);
}

uint64_t sub_18BD4AF38(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 >= 0
    && v2 < *(_DWORD *)(a1 + 1164)
    && (v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8 * v2)) != 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18BD4AF70(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;

  v2 = a2 - *(unsigned __int16 *)(a1 + 1162);
  if (v2 >= 0
    && v2 < *(_DWORD *)(a1 + 1164)
    && (v3 = *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8 * v2)) != 0)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  }
  else
  {
    return 0;
  }
}

void sub_18BD4AFAC(icu::SymbolTable *a1)
{
  void *v1;

  icu::SymbolTable::~SymbolTable(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD4AFC0(uint64_t a1, uint64_t a2)
{
  return uhash_get(**(_QWORD **)(a1 + 24), a2);
}

uint64_t sub_18BD4AFCC(uint64_t a1, int a2)
{
  signed int v2;
  icu::UVector *v3;

  v2 = a2 - *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 1162);
  if (v2 < 0)
    return 0;
  v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2))
    return 0;
  else
    return icu::UVector::elementAt(v3, v2);
}

void sub_18BD4AFF8(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  UChar32 v18;
  int isIDPart;
  int v20;
  int v21;

  v6 = 0;
  v7 = *(int *)(a2 + 8);
  v8 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)a4 = off_1E2256B38;
  *(_WORD *)(a4 + 8) = 2;
  v9 = a1 + 10;
  if ((int)v7 <= a3)
    v10 = a3;
  else
    v10 = v7;
  v21 = v10;
  v11 = v10 - v7;
  v12 = v7;
  while (1)
  {
    if (v11 == v6)
    {
      v20 = v21;
      goto LABEL_21;
    }
    v13 = v6;
    v14 = v8 + v6;
    v15 = *(unsigned __int16 *)(a1 + 8);
    v16 = (v15 & 0x8000u) == 0 ? v15 >> 5 : *(_DWORD *)(a1 + 12);
    if (v16 > v14)
      break;
    v18 = 0xFFFF;
    if (!v13)
      goto LABEL_16;
LABEL_17:
    isIDPart = u_isIDPart(v18);
    ++v12;
    v6 = v13 + 1;
    if (!isIDPart)
    {
      v20 = v8 + v13;
      goto LABEL_21;
    }
  }
  if ((v15 & 2) != 0)
    v17 = v9;
  else
    v17 = *(_QWORD *)(a1 + 24);
  v18 = *(unsigned __int16 *)(v17 + 2 * v7 + 2 * v13);
  if (v13)
    goto LABEL_17;
LABEL_16:
  if (u_isIDStart(v18))
    goto LABEL_17;
  v20 = v12;
LABEL_21:
  if (v20 != v8)
  {
    *(_DWORD *)(a2 + 8) = v20;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v7);
  }
}

uint64_t sub_18BD4B168(uint64_t a1, int a2)
{
  signed int v2;
  icu::UVector *v3;
  uint64_t result;

  v2 = a2 - *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 1162);
  if (v2 < 0)
    return 1;
  v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2))
    return 1;
  result = icu::UVector::elementAt(v3, v2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result) != 0;
  return result;
}

uint64_t sub_18BD4B1BC(uint64_t a1, int a2)
{
  signed int v2;
  icu::UVector *v3;
  uint64_t result;

  v2 = a2 - *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 1162);
  if (v2 < 0)
    return 1;
  v3 = *(icu::UVector **)(a1 + 16);
  if (v2 >= *((_DWORD *)v3 + 2))
    return 1;
  result = icu::UVector::elementAt(v3, v2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result) != 0;
  return result;
}

uint64_t sub_18BD4B210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  _BYTE v16[64];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 8;
  v11 = *(unsigned __int16 *)(a1 + 16);
  if ((v11 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a1 + 8);
  }
  else
  {
    if ((v11 & 0x8000) == 0)
    {
      if (!(v11 >> 5))
        goto LABEL_8;
      goto LABEL_7;
    }
    if (*(_DWORD *)(a1 + 20))
LABEL_7:
      *(_WORD *)(a1 + 16) &= 0x1Fu;
  }
LABEL_8:
  v15 = ")";
  icu::UnicodeString::UnicodeString(v16, 1, &v15);
  v12 = sub_18BD4B354(a1, a2, a3, a4, v10, (uint64_t)v16, 0, a5);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
  if (*(int *)(a1 + 84) >= 1 && *(_DWORD *)(a1 + 72) != *(_DWORD *)(a1 + 88))
  {
    sub_18BD4D580(*(_QWORD *)(a1 + 104), 65545, a2, a3, a5);
    return a3;
  }
  return v12;
}

uint64_t sub_18BD4B354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, UErrorCode *a8)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int32_t v33;
  int32_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  const icu::UnicodeString *v47;
  icu::Transliterator *v48;
  void *v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned __int16 *v86;
  unsigned int v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  void *v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  __int16 v105;
  __int16 v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  uint64_t *v115;
  uint64_t *v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  UChar32 v120;
  unsigned int v121;
  int v122;
  int v123;
  signed int v124;
  int v125;
  unsigned int v126;
  int v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  int v139;
  void *v140;
  int v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  uint64_t v151;
  int v153;
  uint64_t v154[2];
  const __int16 *v155;
  unsigned int v156;
  void *v157;
  void (**v158)(icu::ParsePosition *__hidden);
  unint64_t v159;
  int v160;
  __int16 v161;
  _OWORD v162[4];
  void (**v163)(icu::UnicodeString *__hidden);
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;

  v8 = a3;
  v168 = *MEMORY[0x1E0C80C00];
  v160 = a3;
  v158 = off_1E224A8B0;
  v159 = 0xFFFFFFFF00000000;
  v164 = 0u;
  v167 = 0;
  v166 = 0u;
  v165 = 0u;
  v163 = off_1E2256B38;
  LOWORD(v164) = 2;
  v9 = *(unsigned __int16 *)(a5 + 8);
  v10 = (__int16)v9;
  LODWORD(v11) = v9 >> 5;
  if (v10 >= 0)
    v11 = v11;
  else
    v11 = *(unsigned int *)(a5 + 12);
  if ((int)a3 >= (int)a4)
    goto LABEL_244;
  v150 = v11;
  v18 = a2 + 10;
  v151 = a5 + 10;
  LODWORD(v19) = a3;
  v148 = -1;
  v149 = -1;
  v20 = 0xFFFFFFFFLL;
  v153 = -1;
  while (1)
  {
    v160 = v19 + 1;
    v21 = *(unsigned __int16 *)(a2 + 8);
    if ((v21 & 0x8000u) == 0)
      v22 = v21 >> 5;
    else
      v22 = *(_DWORD *)(a2 + 12);
    if (v22 <= v19)
    {
      v24 = 0xFFFFLL;
    }
    else
    {
      if ((v21 & 2) != 0)
        v23 = v18;
      else
        v23 = *(_QWORD *)(a2 + 24);
      v24 = *(unsigned __int16 *)(v23 + 2 * (int)v19);
    }
    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v24))
      goto LABEL_21;
    if (u_strchr((const UChar *)"=", v24))
      break;
    if (*(_BYTE *)(a1 + 93))
    {
      v26 = *(_QWORD *)(a1 + 104);
      v139 = 65542;
      goto LABEL_243;
    }
    if (icu::UnicodeSet::resemblesPattern((icu::UnicodeSet *)a2, (const icu::UnicodeString *)(v160 - 1)))
    {
      LODWORD(v159) = v160 - 1;
      LOWORD(v162[0]) = (unsigned __int16)sub_18BD4C1E4(*(_QWORD *)(a1 + 104), (const icu::UnicodeString *)a2, (icu::ParsePosition *)&v158, a8, (uint64_t *)(v160 - 1));
      icu::UnicodeString::doAppend(a5, (uint64_t)v162, 0, 1);
      if (*(int *)a8 >= 1)
      {
        v26 = *(_QWORD *)(a1 + 104);
        v139 = 65538;
        goto LABEL_243;
      }
      v11 = v159;
      v160 = v159;
    }
    else if ((_DWORD)v24 == 39)
    {
      v27 = *(unsigned __int16 *)(a2 + 8);
      v28 = a6;
      if (v160 < 0)
      {
        v30 = 0;
        if ((v27 & 0x8000) != 0)
          v29 = *(_DWORD *)(a2 + 12);
        else
          v29 = v27 >> 5;
      }
      else if ((v27 & 0x8000) != 0)
      {
        v29 = *(_DWORD *)(a2 + 12);
        if (v29 >= v160)
          v30 = v160;
        else
          v30 = *(_DWORD *)(a2 + 12);
      }
      else
      {
        v29 = v27 >> 5;
        if (v29 >= v160)
          v30 = v160;
        else
          v30 = v29;
      }
      v69 = icu::UnicodeString::doIndexOf(a2, 0x27u, v30, v29 - v30);
      if ((_DWORD)v69 == v160)
      {
        strcpy((char *)v162, "'");
        icu::UnicodeString::doAppend(a5, (uint64_t)v162, 0, 1);
        v11 = ++v160;
      }
      else
      {
        v70 = v69;
        v71 = *(unsigned __int16 *)(a5 + 8);
        v72 = (__int16)v71;
        v73 = v71 >> 5;
        if (v72 < 0)
          v73 = *(_DWORD *)(a5 + 12);
        v153 = v73;
        if ((v69 & 0x80000000) != 0)
        {
LABEL_226:
          v26 = *(_QWORD *)(a1 + 104);
          v139 = 65556;
          goto LABEL_243;
        }
        while (1)
        {
          if ((v164 & 1) != 0)
          {
            icu::UnicodeString::unBogus((uint64_t)&v163);
          }
          else
          {
            if ((v164 & 0x8000u) == 0)
              v74 = (unsigned __int16)v164 >> 5;
            else
              v74 = DWORD1(v164);
            if (v74)
            {
              LOBYTE(v164) = v164 & 0x1F;
              LOWORD(v164) = v164;
            }
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 24))(a2, v160, v70, &v163);
          v75 = (v164 & 0x8000u) == 0 ? (unsigned __int16)v164 >> 5 : DWORD1(v164);
          icu::UnicodeString::doAppend(a5, (const icu::UnicodeString *)&v163, 0, v75);
          v76 = v70 + 1;
          v160 = v70 + 1;
          if ((int)v70 + 1 >= (int)a4)
            break;
          v77 = *(unsigned __int16 *)(a2 + 8);
          v78 = (__int16)v77;
          v79 = v77 >> 5;
          v80 = (v77 & 0x8000u) == 0 ? v77 >> 5 : *(_DWORD *)(a2 + 12);
          if (v80 <= v76)
            break;
          v81 = (v77 & 2) != 0 ? v18 : *(_QWORD *)(a2 + 24);
          if (*(_WORD *)(v81 + 2 * v76) != 39)
            break;
          v82 = v70 + 2;
          if (v79 >= (int)v70 + 2)
            v79 = v70 + 2;
          if (*(_DWORD *)(a2 + 12) < v82)
            v82 = *(_DWORD *)(a2 + 12);
          if (v78 >= 0)
            v83 = v79;
          else
            v83 = v82;
          v70 = icu::UnicodeString::doIndexOf(a2, 0x27u, v83, v80 - v83);
          if ((v70 & 0x80000000) != 0)
            goto LABEL_226;
        }
        v11 = *(unsigned __int16 *)(a5 + 8);
        if ((v11 & 0x8000u) == 0)
          v20 = v11 >> 5;
        else
          v20 = *(unsigned int *)(a5 + 12);
        v84 = v153;
        if (v153 < (int)v20)
        {
          v26 = *(_QWORD *)(a1 + 104);
          v85 = *(_QWORD *)(a5 + 24);
          if ((v11 & 2) != 0)
            v85 = v151;
          v11 = *(unsigned __int16 *)(*(_QWORD *)(v26 + 96) + 1162);
          v86 = (unsigned __int16 *)(v85 + 2 * v153);
          a6 = v28;
          while (1)
          {
            if (v20 > v84)
            {
              v87 = *v86;
              if (v11 <= v87 && *(unsigned __int16 *)(v26 + 426) > v87)
                break;
            }
            ++v84;
            ++v86;
            if ((_DWORD)v20 == v84)
              goto LABEL_21;
          }
LABEL_228:
          v139 = 65566;
LABEL_243:
          sub_18BD4D580(v26, v139, a2, v8, a8);
LABEL_244:
          v19 = v8;
          goto LABEL_245;
        }
      }
      a6 = v28;
    }
    else if ((_DWORD)v24 == 92)
    {
      if (v160 == (_DWORD)a4)
      {
        v26 = *(_QWORD *)(a1 + 104);
        v139 = 65552;
        goto LABEL_243;
      }
      v25 = icu::UnicodeString::unescapeAt((icu::UnicodeString *)a2, &v160);
      v26 = *(_QWORD *)(a1 + 104);
      if (v25 == -1)
      {
        v139 = 65540;
        goto LABEL_243;
      }
      if (v25 >= *(unsigned __int16 *)(*(_QWORD *)(v26 + 96) + 1162) && v25 < *(unsigned __int16 *)(v26 + 426))
        goto LABEL_228;
      icu::UnicodeString::append(a5, v25);
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 104);
      if (*(unsigned __int16 *)(*(_QWORD *)(v26 + 96) + 1162) <= v24
        && *(unsigned __int16 *)(v26 + 426) > v24)
      {
        goto LABEL_228;
      }
      v31 = *(unsigned __int16 *)(a6 + 8);
      v32 = (__int16)v31;
      v33 = v31 >> 5;
      if (v32 >= 0)
        v34 = v33;
      else
        v34 = *(_DWORD *)(a6 + 12);
      if ((icu::UnicodeString::doIndexOf(a6, v24, 0, v34) & 0x80000000) == 0)
        sub_18BD4D580(*(_QWORD *)(a1 + 104), 65567, a2, v8, a8);
      if ((int)v24 <= 62)
      {
        v11 = (v24 - 36);
        switch((int)v24)
        {
          case '$':
            if (v160 == (_DWORD)a4)
            {
              v11 = 1;
              *(_BYTE *)(a1 + 93) = 1;
              goto LABEL_21;
            }
            v117 = *(unsigned __int16 *)(a2 + 8);
            if ((v117 & 0x8000u) == 0)
              v118 = v117 >> 5;
            else
              v118 = *(_DWORD *)(a2 + 12);
            if (v118 <= v160)
            {
              v120 = 0xFFFF;
            }
            else
            {
              if ((v117 & 2) != 0)
                v119 = v18;
              else
                v119 = *(_QWORD *)(a2 + 24);
              v120 = *(unsigned __int16 *)(v119 + 2 * v160);
            }
            if ((u_digit(v120, 10) - 1) > 8)
            {
              LODWORD(v159) = v160;
              memset(v162, 0, sizeof(v162));
              (*(void (**)(_OWORD *__return_ptr, _QWORD, uint64_t, void (***)(icu::ParsePosition *__hidden), uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 104) + 184) + 32))(v162, *(_QWORD *)(*(_QWORD *)(a1 + 104) + 184), a2, &v158, a4);
              v125 = WORD4(v162[0]) >> 5;
              if (SWORD4(v162[0]) < 0)
                v125 = HIDWORD(v162[0]);
              if (v125)
              {
                v160 = v159;
                v126 = *(unsigned __int16 *)(a5 + 8);
                v127 = (__int16)v126;
                v128 = v126 >> 5;
                if (v127 < 0)
                  v128 = *(_DWORD *)(a5 + 12);
                v149 = v128;
                sub_18BD4C5AC(*(_QWORD *)(a1 + 104), (UChar **)v162, a5, a8);
                LODWORD(v130) = *(unsigned __int16 *)(a5 + 8);
                v129 = (__int16)v130;
                LODWORD(v130) = v130 >> 5;
                if (v129 >= 0)
                  v130 = v130;
                else
                  v130 = *(unsigned int *)(a5 + 12);
                v148 = v130;
              }
              else
              {
                v130 = 1;
                *(_BYTE *)(a1 + 93) = 1;
              }
              icu::UnicodeString::~UnicodeString((void *)v130, (icu::UnicodeString *)v162);
              goto LABEL_21;
            }
            v124 = icu::ICU_Utility::parseNumber((icu::ICU_Utility *)a2, (const icu::UnicodeString *)&v160, (int *)0xA);
            v26 = *(_QWORD *)(a1 + 104);
            if (v124 < 0)
            {
              v139 = 65553;
              goto LABEL_243;
            }
            v106 = sub_18BD4C370(v26, v124, a8);
LABEL_154:
            LOWORD(v162[0]) = v106;
            break;
          case '&':
            goto LABEL_78;
          case '(':
            v146 = a6;
            v147 = v8;
            v93 = *(unsigned __int16 *)(a5 + 8);
            v145 = *(_DWORD *)(a5 + 12);
            v94 = *(_DWORD *)(a1 + 96);
            *(_DWORD *)(a1 + 96) = v94 + 1;
            v95 = v160;
            v157 = &unk_18BE299E6;
            icu::UnicodeString::UnicodeString(v162, 1, &v157);
            v160 = sub_18BD4B354(a1, a2, v95, a4, a5, v162, 1, a8);
            icu::UnicodeString::~UnicodeString(v96, (icu::UnicodeString *)v162);
            v154[0] = (uint64_t)v157;
            v98 = icu::UMemory::operator new(v154, (icu::UMemory *)0x70, v97);
            if (!v98)
              goto LABEL_232;
            v99 = v98;
            if ((v93 & 0x8000u) == 0)
              v100 = v93 >> 5;
            else
              v100 = v145;
            v101 = *(unsigned __int16 *)(a5 + 8);
            v102 = (__int16)v101;
            v103 = v101 >> 5;
            if (v102 >= 0)
              v104 = v103;
            else
              v104 = *(unsigned int *)(a5 + 12);
            sub_18BD7E7D8((uint64_t)v98, a5, v100, v104, v94, *(_QWORD *)(*(_QWORD *)(a1 + 104) + 96));
            sub_18BD4C270(*(_QWORD *)(a1 + 104), v94, v99, a8);
            sub_18BC503EC(a5, v100);
            v105 = sub_18BD4C370(*(_QWORD *)(a1 + 104), v94, a8);
            goto LABEL_177;
          case ')':
            goto LABEL_227;
          case '*':
          case '+':
            goto LABEL_67;
          case '.':
            v106 = sub_18BD4C690(*(_QWORD *)(a1 + 104), a8);
            goto LABEL_154;
          default:
            goto LABEL_179;
        }
        goto LABEL_183;
      }
      if ((int)v24 <= 122)
      {
        switch((_DWORD)v24)
        {
          case '?':
LABEL_67:
            v41 = (uint64_t *)*(unsigned __int16 *)(a5 + 8);
            if (a7)
            {
              v42 = (__int16)v41 >= 0 ? v41 >> 5 : *(_DWORD *)(a5 + 12);
              if (v42 == v150)
              {
                v26 = *(_QWORD *)(a1 + 104);
                v139 = 65546;
                goto LABEL_243;
              }
            }
            v146 = a6;
            v147 = v8;
            if (((unsigned __int16)v41 & 0x8000) == 0)
            {
              v143 = v153;
              v43 = v20;
              if ((_DWORD)v20 == v41 >> 5)
                goto LABEL_141;
              v41 = (uint64_t *)(v41 >> 5);
              v143 = v149;
              v43 = v148;
              if (v148 == (_DWORD)v41)
                goto LABEL_141;
LABEL_140:
              v143 = (_DWORD)v41 - 1;
              v43 = (uint64_t)v41;
              goto LABEL_141;
            }
            v41 = (uint64_t *)*(unsigned int *)(a5 + 12);
            v143 = v153;
            v43 = v20;
            if ((_DWORD)v41 != (_DWORD)v20)
            {
              v143 = v149;
              v43 = v148;
              if ((_DWORD)v41 != v148)
                goto LABEL_140;
            }
LABEL_141:
            v88 = icu::UMemory::operator new(v41, (icu::UMemory *)0x70, v35);
            v89 = *(_QWORD *)(a1 + 104);
            if (!v88)
              goto LABEL_233;
            sub_18BD7E7D8((uint64_t)v88, a5, v143, v43, 0, *(_QWORD *)(v89 + 96));
            if ((_DWORD)v24 == 63)
            {
              v92 = 0;
              v91 = 1;
            }
            else
            {
              if ((_DWORD)v24 == 43)
              {
                v91 = 0x7FFFFFFFLL;
                v142 = 0x7FFFFFFF;
                v92 = 1;
LABEL_175:
                v115 = icu::UMemory::operator new((uint64_t *)v91, (icu::UMemory *)0x20, v90);
                if (!v115)
                {
LABEL_232:
                  v89 = *(_QWORD *)(a1 + 104);
LABEL_233:
                  v19 = v147;
                  sub_18BD4D580(v89, 7, a2, v147, a8);
                  goto LABEL_245;
                }
                v116 = v115;
                sub_18BD45620((uint64_t)v115, (uint64_t)v88, v92, v142);
                sub_18BC503EC(a5, v143);
                v105 = sub_18BD4C4B0(*(_QWORD *)(a1 + 104), v116, a8);
LABEL_177:
                LOWORD(v162[0]) = v105;
                icu::UnicodeString::doAppend(a5, (uint64_t)v162, 0, 1);
LABEL_178:
                v8 = v147;
                a6 = v146;
                break;
              }
              v92 = 0;
              v91 = 0x7FFFFFFFLL;
            }
            v142 = v91;
            goto LABEL_175;
          case '@':
            v109 = *(_DWORD *)(a1 + 84);
            if (v109 < 0)
            {
              v121 = *(unsigned __int16 *)(a5 + 8);
              v122 = (__int16)v121;
              v123 = v121 >> 5;
              if (v122 < 0)
                v123 = *(_DWORD *)(a5 + 12);
              if (v123 >= 1)
              {
LABEL_237:
                v26 = *(_QWORD *)(a1 + 104);
                v139 = 65545;
                goto LABEL_243;
              }
              v11 = (v109 - 1);
              goto LABEL_196;
            }
            if (v109)
            {
              v110 = *(unsigned __int16 *)(a5 + 8);
              v111 = (__int16)v110;
              v112 = v110 >> 5;
              if (v111 < 0)
                v112 = *(_DWORD *)(a5 + 12);
              if (v112 != *(_DWORD *)(a1 + 88) || (*(_DWORD *)(a1 + 72) & 0x80000000) == 0)
                goto LABEL_237;
              v11 = (v109 + 1);
LABEL_196:
              *(_DWORD *)(a1 + 84) = v11;
              break;
            }
            v131 = *(_DWORD *)(a1 + 72);
            if (!v131)
            {
              v136 = *(unsigned __int16 *)(a5 + 8);
              v137 = (__int16)v136;
              v138 = v136 >> 5;
              if (v137 < 0)
                v138 = *(_DWORD *)(a5 + 12);
              if (v138)
                goto LABEL_237;
              v11 = 0xFFFFFFFFLL;
              goto LABEL_196;
            }
            if ((v131 & 0x80000000) == 0)
              goto LABEL_237;
            v132 = *(unsigned __int16 *)(a5 + 8);
            v133 = (__int16)v132;
            v134 = v132 >> 5;
            if (v133 >= 0)
              v135 = v134;
            else
              v135 = *(_DWORD *)(a5 + 12);
            v11 = 1;
            *(_DWORD *)(a1 + 84) = 1;
            *(_DWORD *)(a1 + 88) = v135;
            break;
          case '^':
            v38 = *(unsigned __int16 *)(a5 + 8);
            v39 = (__int16)v38;
            v40 = v38 >> 5;
            if (v39 < 0)
              v40 = *(_DWORD *)(a5 + 12);
            if (v40 || *(_BYTE *)(a1 + 92))
            {
              v26 = *(_QWORD *)(a1 + 104);
              v139 = 65544;
              goto LABEL_243;
            }
            v11 = 1;
            *(_BYTE *)(a1 + 92) = 1;
            break;
          default:
            goto LABEL_179;
        }
      }
      else if ((int)v24 > 124)
      {
        if ((_DWORD)v24 != 125)
        {
          if ((_DWORD)v24 != 8710)
          {
LABEL_179:
            if ((unsigned __int16)(v24 - 127) >= 0xFFA2u
              && (unsigned __int16)(v24 - 48) >= 0xAu
              && (unsigned __int16)((v24 & 0xFFDF) - 65) >= 0x1Au)
            {
              v26 = *(_QWORD *)(a1 + 104);
              v139 = 65555;
              goto LABEL_243;
            }
            LOWORD(v162[0]) = v24;
LABEL_183:
            icu::UnicodeString::doAppend(a5, (uint64_t)v162, 0, 1);
            goto LABEL_21;
          }
LABEL_78:
          v146 = a6;
          v156 = v160;
          v44 = sub_18BD8D6C0(a2, (const icu::UnicodeString *)&v156);
          if (!v44
            || (v45 = (uint64_t)v44, !icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v156, 40))
            || (v48 = sub_18BD8C630(v45, v46, v47),
                v49 = (void *)sub_18BD4C478(v45),
                icu::UMemory::operator delete(v49),
                !v48))
          {
            v26 = *(_QWORD *)(a1 + 104);
            v139 = 65570;
            goto LABEL_243;
          }
          v147 = v8;
          v50 = *(unsigned __int16 *)(a5 + 8);
          v51 = (__int16)v50;
          v52 = v50 >> 5;
          if (v51 >= 0)
            v53 = v52;
          else
            v53 = *(unsigned int *)(a5 + 12);
          v54 = v156;
          v155 = L"^(.*+?{}|@";
          icu::UnicodeString::UnicodeString(v162, 1, &v155);
          v160 = sub_18BD4B354(a1, a2, v54, a4, a5, v162, 1, a8);
          icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)v162);
          v154[1] = (uint64_t)v155;
          memset((char *)v162 + 8, 0, 56);
          *(_QWORD *)&v162[0] = off_1E2256B38;
          WORD4(v162[0]) = 2;
          v56 = *(unsigned __int16 *)(a5 + 8);
          v57 = (__int16)v56;
          v58 = v56 >> 5;
          if (v57 >= 0)
            v59 = v58;
          else
            v59 = *(unsigned int *)(a5 + 12);
          (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a5 + 24))(a5, v53, v59, v162);
          v62 = icu::UMemory::operator new(v61, (icu::UMemory *)0x20, v60);
          if (!v62)
          {
            v19 = v147;
            sub_18BD4D580(*(_QWORD *)(a1 + 104), 7, a2, v147, a8);
            icu::UnicodeString::~UnicodeString(v140, (icu::UnicodeString *)v162);
            goto LABEL_245;
          }
          v65 = v62;
          v144 = (uint64_t)v48;
          v66 = icu::UMemory::operator new(v64, (icu::UMemory *)0x60, v63);
          v67 = (uint64_t)v66;
          if (v66)
            sub_18BD7F20C((uint64_t)v66, (UChar **)v162, *(_QWORD *)(*(_QWORD *)(a1 + 104) + 96));
          sub_18BCE5920(v65, v144, v67);
          sub_18BC503EC(a5, v53);
          v161 = sub_18BD4C4B0(*(_QWORD *)(a1 + 104), v65, a8);
          icu::UnicodeString::doAppend(a5, (uint64_t)&v161, 0, 1);
          icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)v162);
          goto LABEL_178;
        }
        if ((*(_DWORD *)(a1 + 80) & 0x80000000) == 0)
        {
          v26 = *(_QWORD *)(a1 + 104);
          v139 = 65551;
          goto LABEL_243;
        }
        v113 = *(unsigned __int16 *)(a5 + 8);
        v114 = (__int16)v113;
        LODWORD(v11) = v113 >> 5;
        if (v114 >= 0)
          v11 = v11;
        else
          v11 = *(unsigned int *)(a5 + 12);
        *(_DWORD *)(a1 + 80) = v11;
      }
      else if ((_DWORD)v24 == 123)
      {
        if ((*(_DWORD *)(a1 + 76) & 0x80000000) == 0)
        {
          v26 = *(_QWORD *)(a1 + 104);
          v139 = 65549;
          goto LABEL_243;
        }
        v107 = *(unsigned __int16 *)(a5 + 8);
        v108 = (__int16)v107;
        LODWORD(v11) = v107 >> 5;
        if (v108 >= 0)
          v11 = v11;
        else
          v11 = *(unsigned int *)(a5 + 12);
        *(_DWORD *)(a1 + 76) = v11;
      }
      else
      {
        if ((*(_DWORD *)(a1 + 72) & 0x80000000) == 0)
        {
          v26 = *(_QWORD *)(a1 + 104);
          v139 = 65550;
          goto LABEL_243;
        }
        v36 = *(unsigned __int16 *)(a5 + 8);
        v37 = (__int16)v36;
        LODWORD(v11) = v36 >> 5;
        if (v37 >= 0)
          v11 = v11;
        else
          v11 = *(unsigned int *)(a5 + 12);
        *(_DWORD *)(a1 + 72) = v11;
      }
    }
LABEL_21:
    v19 = v160;
    if (v160 >= (int)a4)
      goto LABEL_245;
  }
  v11 = a7;
  if (a7)
  {
    v26 = *(_QWORD *)(a1 + 104);
    v139 = 65563;
    goto LABEL_243;
  }
LABEL_227:
  v19 = v160;
LABEL_245:
  icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v163);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v158);
  return v19;
}

icu::UnicodeSet *sub_18BD4C1E4@<X0>(uint64_t a1@<X0>, const icu::UnicodeString *a2@<X1>, icu::ParsePosition *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  icu::UnicodeSet *result;
  icu::UnicodeSet *v10;
  icu::UnicodeSet *v11;

  result = (icu::UnicodeSet *)icu::UMemory::operator new(a5, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (result)
  {
    v10 = result;
    v11 = icu::UnicodeSet::UnicodeSet(result, a2, a3, 1u, *(const icu::SymbolTable **)(a1 + 184), a4);
    icu::UnicodeSet::compact(v11);
    return (icu::UnicodeSet *)sub_18BD4C4B0(a1, v10, a4);
  }
  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t sub_18BD4C270(uint64_t result, int a2, void *a3, UErrorCode *a4)
{
  uint64_t v7;
  icu::UVector *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  icu::UVector *v13;

  v7 = result;
  v8 = (icu::UVector *)(result + 384);
  if (*(_DWORD *)(result + 392) < a2)
    result = icu::UVector::setSize((uint64_t (**)(void))(result + 384), a2, a4);
  if (*(int *)a4 <= 0)
  {
    v9 = sub_18BD4C370(v7, a2, a4);
    v10 = *(unsigned __int16 *)(*(_QWORD *)(v7 + 96) + 1162);
    v11 = a2 - 1;
    result = icu::UVector::elementAt(v8, v11);
    if (result || (v12 = v9 - v10, v13 = (icu::UVector *)(v7 + 192), (result = icu::UVector::elementAt(v13, v12)) != 0))
    {
      if (*(int *)a4 <= 0)
        *a4 = U_INTERNAL_TRANSLITERATOR_ERROR;
    }
    else
    {
      icu::UVector::setElementAt((uint64_t)v8, a3, v11);
      return icu::UVector::setElementAt((uint64_t)v13, a3, v12);
    }
  }
  return result;
}

uint64_t sub_18BD4C370(uint64_t a1, signed int a2, UErrorCode *a3)
{
  unsigned __int16 v6;
  icu::UnicodeString *i;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v14;

  v6 = *(_WORD *)(*(_QWORD *)(a1 + 96) + 1162) - 1;
  for (i = (icu::UnicodeString *)(a1 + 320); ; icu::UnicodeString::doAppend((uint64_t)i, (uint64_t)&v14, 0, 1))
  {
    v8 = *(unsigned __int16 *)(a1 + 328);
    v9 = *(__int16 *)(a1 + 328) < 0 ? *(_DWORD *)(a1 + 332) : v8 >> 5;
    if ((int)v9 >= a2)
      break;
    v14 = v6;
  }
  v10 = a2 - 1;
  if (v9 <= v10)
  {
    v12 = 0xFFFFLL;
  }
  else
  {
    if ((v8 & 2) != 0)
      v11 = a1 + 330;
    else
      v11 = *(_QWORD *)(a1 + 344);
    v12 = *(unsigned __int16 *)(v11 + 2 * v10);
  }
  if ((_DWORD)v12 == v6)
  {
    v12 = *(unsigned __int16 *)(a1 + 424);
    if (v12 >= *(unsigned __int16 *)(a1 + 426))
    {
      v12 = 0;
      *a3 = U_VARIABLE_RANGE_EXHAUSTED;
    }
    else
    {
      *(_WORD *)(a1 + 424) = v12 + 1;
      icu::UVector::addElement((icu::UVector *)(a1 + 192), 0, a3);
      icu::UnicodeString::setCharAt(i, v10, v12);
    }
  }
  return v12;
}

uint64_t sub_18BD4C478(uint64_t a1)
{
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  return a1;
}

uint64_t sub_18BD4C4B0(uint64_t a1, void *a2, UErrorCode *a3)
{
  icu::UVector *v6;
  unsigned int v7;
  unsigned __int16 v8;

  v6 = (icu::UVector *)(a1 + 192);
  if (*(int *)(a1 + 200) < 1)
  {
LABEL_5:
    if (*(unsigned __int16 *)(a1 + 424) >= *(unsigned __int16 *)(a1 + 426))
    {
      if (a2)
        (*(void (**)(void *))(*(_QWORD *)a2 + 8))(a2);
      v8 = 0;
      *a3 = U_VARIABLE_RANGE_EXHAUSTED;
    }
    else
    {
      icu::UVector::addElement(v6, a2, a3);
      if (*(int *)a3 < 1)
      {
        v8 = *(_WORD *)(a1 + 424);
        *(_WORD *)(a1 + 424) = v8 + 1;
      }
      else
      {
        if (a2)
          (*(void (**)(void *))(*(_QWORD *)a2 + 8))(a2);
        return 0;
      }
    }
  }
  else
  {
    v7 = 0;
    while ((void *)icu::UVector::elementAt(v6, v7) != a2)
    {
      if ((signed int)++v7 >= *(_DWORD *)(a1 + 200))
        goto LABEL_5;
    }
    return (unsigned __int16)(*(_WORD *)(*(_QWORD *)(a1 + 96) + 1162) + v7);
  }
  return v8;
}

uint64_t sub_18BD4C5AC(uint64_t a1, UChar **a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  __int16 v15;

  result = uhash_get(*(_QWORD *)(a1 + 232), (uint64_t)a2);
  if (!result)
  {
    if (*(__int16 *)(a1 + 440) < 0)
    {
      if (!*(_DWORD *)(a1 + 444))
        goto LABEL_10;
    }
    else if (!(*(unsigned __int16 *)(a1 + 440) >> 5))
    {
LABEL_10:
      result = (uint64_t)icu::UnicodeString::operator=((UChar **)(a1 + 432), a2);
      v13 = *(unsigned __int16 *)(a1 + 426);
      if (*(unsigned __int16 *)(a1 + 424) < v13)
      {
        v14 = v13 - 1;
        *(_WORD *)(a1 + 426) = v14;
        v15 = v14;
        return icu::UnicodeString::doAppend(a3, (uint64_t)&v15, 0, 1);
      }
    }
    *a4 = 1;
    return result;
  }
  v9 = *(unsigned __int16 *)(result + 8);
  v10 = (__int16)v9;
  v11 = v9 >> 5;
  if (v10 >= 0)
    v12 = v11;
  else
    v12 = *(unsigned int *)(result + 12);
  return icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)result, 0, v12);
}

uint64_t sub_18BD4C690(uint64_t a1, UErrorCode *a2)
{
  uint64_t result;
  icu::UnicodeSet *v5;
  void *v6;
  void *v7;
  _BYTE v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  result = *(unsigned __int16 *)(a1 + 496);
  if ((_DWORD)result == 0xFFFF)
  {
    result = (uint64_t)icu::UMemory::operator new((uint64_t *)0xFFFF, (icu::UMemory *)0xC8, (unint64_t)a2);
    if (result)
    {
      v5 = (icu::UnicodeSet *)result;
      v7 = &unk_18BE29AAA;
      icu::UnicodeString::UnicodeString(v8, 1, &v7);
      icu::UnicodeSet::UnicodeSet(v5, (const icu::UnicodeString *)v8, a2);
      icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
      result = sub_18BD4C4B0(a1, v5, a2);
      *(_WORD *)(a1 + 496) = result;
    }
    else
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return result;
}

double sub_18BD4C770(uint64_t a1)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  double result;

  v2 = *(unsigned int *)(a1 + 80);
  if ((v2 & 0x80000000) == 0)
  {
    if ((_DWORD)v2)
    {
      icu::UnicodeString::doReplace(a1 + 8, v2, 0x7FFFFFFFLL, 0, 0, 0);
    }
    else
    {
      if ((*(_WORD *)(a1 + 16) & 1) != 0)
        v3 = 2;
      else
        v3 = *(_WORD *)(a1 + 16) & 0x1F;
      *(_WORD *)(a1 + 16) = v3;
    }
  }
  v4 = *(unsigned int *)(a1 + 76);
  if ((v4 & 0x80000000) == 0)
    icu::UnicodeString::doReplace(a1 + 8, 0, v4, 0, 0, 0);
  result = NAN;
  *(_QWORD *)(a1 + 76) = -1;
  *(_WORD *)(a1 + 92) = 0;
  return result;
}

BOOL sub_18BD4C7F8(uint64_t a1, uint64_t a2)
{
  int v4;
  icu::UnicodeString *v5;
  signed int v6;
  unint64_t v7;
  signed int v8;
  unsigned int v9;
  int v10;

  v4 = 0;
  v5 = (icu::UnicodeString *)(a1 + 8);
  do
  {
    v6 = v4;
    v7 = *(__int16 *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = *(_DWORD *)(a1 + 20);
    }
    else
    {
      v7 = *(unsigned __int16 *)(a1 + 16);
      v8 = v7 >> 5;
    }
    if (v4 >= v8)
      break;
    v9 = icu::UnicodeString::char32At((uint64_t *)v7, v5, v4);
    v10 = v9 < 0x10000 ? 1 : 2;
    v4 += v10;
  }
  while (sub_18BD4B1BC(*(_QWORD *)(a2 + 184), v9));
  return v6 >= v8;
}

BOOL sub_18BD4C890(uint64_t a1, uint64_t a2)
{
  int v4;
  icu::UnicodeString *v5;
  signed int v6;
  unint64_t v7;
  signed int v8;
  unsigned int v9;
  int v10;

  v4 = 0;
  v5 = (icu::UnicodeString *)(a1 + 8);
  do
  {
    v6 = v4;
    v7 = *(__int16 *)(a1 + 16);
    if ((v7 & 0x80000000) != 0)
    {
      v8 = *(_DWORD *)(a1 + 20);
    }
    else
    {
      v7 = *(unsigned __int16 *)(a1 + 16);
      v8 = v7 >> 5;
    }
    if (v4 >= v8)
      break;
    v9 = icu::UnicodeString::char32At((uint64_t *)v7, v5, v4);
    v10 = v9 < 0x10000 ? 1 : 2;
    v4 += v10;
  }
  while (sub_18BD4B168(*(_QWORD *)(a2 + 184), v9));
  return v6 >= v8;
}

uint64_t sub_18BD4C928(uint64_t a1, UErrorCode *a2)
{
  int v5;

  icu::UVector::UVector((icu::UVector *)(a1 + 8), a2);
  icu::UVector::UVector((icu::UVector *)(a1 + 48), a2);
  icu::UVector::UVector((icu::UVector *)(a1 + 192), a2);
  *(_QWORD *)(a1 + 232) = 0;
  v5 = 0;
  uhash_init((int32x2_t *)(a1 + 240), (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, &v5);
  if (v5 <= 0)
  {
    *(_QWORD *)(a1 + 232) = a1 + 240;
    uhash_setKeyDeleter(a1 + 240, (uint64_t)uprv_deleteUObject);
  }
  *(_QWORD *)(a1 + 320) = off_1E2256B38;
  *(_WORD *)(a1 + 328) = 2;
  icu::UVector::UVector((icu::UVector *)(a1 + 384), a2);
  *(_QWORD *)(a1 + 432) = off_1E2256B38;
  *(_WORD *)(a1 + 440) = 2;
  icu::UVector::setDeleter((icu::UVector *)(a1 + 48), (void (*)(void *))uprv_deleteUObject);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  uhash_setValueDeleter(*(_QWORD *)(a1 + 232), (uint64_t)uprv_deleteUObject);
  return a1;
}

uint64_t sub_18BD4CA2C(uint64_t a1)
{
  icu::UVector *v2;
  void *i;
  uint64_t v4;
  void *v5;
  icu::UnicodeSet *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void **v11;

  v2 = (icu::UVector *)(a1 + 8);
  for (i = (void *)*(unsigned int *)(a1 + 16); (_DWORD)i; i = (void *)*(unsigned int *)(a1 + 16))
  {
    v4 = icu::UVector::orphanElementAt(v2, 0);
    if (v4)
    {
      v5 = (void *)sub_18BD4AF08(v4);
      icu::UMemory::operator delete(v5);
    }
  }
  v6 = *(icu::UnicodeSet **)(a1 + 88);
  if (v6)
  {
    v7 = icu::UnicodeSet::~UnicodeSet(i, v6);
    icu::UMemory::operator delete(v7);
  }
  v8 = *(_QWORD *)(a1 + 184);
  if (v8)
LABEL_8:
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  while (1)
  {
    v9 = (void *)*(unsigned int *)(a1 + 200);
    if (!(_DWORD)v9)
      break;
    v8 = icu::UVector::orphanElementAt((icu::UVector *)(a1 + 192), 0);
    if (v8)
      goto LABEL_8;
  }
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 432));
  icu::UVector::~UVector((icu::UVector *)(a1 + 384));
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)(a1 + 320));
  v11 = *(void ***)(a1 + 232);
  if (v11)
    uhash_close(v11);
  icu::UVector::~UVector((icu::UVector *)(a1 + 192));
  icu::UVector::~UVector((icu::UVector *)(a1 + 48));
  icu::UVector::~UVector(v2);
  return a1;
}

__n128 sub_18BD4CB10(uint64_t a1, uint64_t a2, int a3, uint64_t a4, UErrorCode *a5)
{
  __n128 result;
  __int128 v8;
  __int128 v9;

  if (*(int *)a5 <= 0)
  {
    sub_18BD4CB68(a1, a2, a3, a5);
    *(_OWORD *)a4 = *(_OWORD *)(a1 + 108);
    result = *(__n128 *)(a1 + 124);
    v8 = *(_OWORD *)(a1 + 140);
    v9 = *(_OWORD *)(a1 + 156);
    *(_QWORD *)(a4 + 64) = *(_QWORD *)(a1 + 172);
    *(_OWORD *)(a4 + 32) = v8;
    *(_OWORD *)(a4 + 48) = v9;
    *(__n128 *)(a4 + 16) = result;
  }
  return result;
}

void sub_18BD4CB68(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  _QWORD *v8;
  icu::UVector *v9;
  void *v10;
  icu::UnicodeSet *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  icu::UnicodeString *v32;
  icu::UnicodeString *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  void *v52;
  void *v53;
  UChar **v54;
  unint64_t v55;
  icu::UnicodeSet *v56;
  icu::UnicodeSet *v57;
  void *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  unint64_t v66;
  icu::UnicodeString *v67;
  icu::UnicodeString *v68;
  void *v69;
  void *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t Element;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  UChar **v84;
  uint64_t v85;
  icu::UnicodeString *v86;
  uint64_t v87;
  int v88;
  unsigned int i;
  uint64_t v90;
  void *v91;
  int v92;
  uint64_t (**v93)(void *);
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  UChar *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  void (**v105)(icu::UnicodeString *__hidden);
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 108) = -1;
  v8 = (_QWORD *)(a1 + 108);
  *(_OWORD *)(a1 + 164) = 0u;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(_OWORD *)(a1 + 116) = 0u;
  v9 = (icu::UVector *)(a1 + 8);
  while (*(_DWORD *)(a1 + 16))
  {
    if (icu::UVector::orphanElementAt(v9, 0))
    {
      v10 = (void *)sub_18BD4AF08();
      icu::UMemory::operator delete(v10);
    }
  }
  if (*(int *)a4 > 0)
    return;
  v93 = (uint64_t (**)(void *))(a1 + 48);
  icu::UVector::removeAllElements(a1 + 48);
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = a3;
  v11 = *(icu::UnicodeSet **)(a1 + 88);
  if (v11)
  {
    icu::UnicodeSet::~UnicodeSet(v11);
    icu::UMemory::operator delete(v12);
  }
  *(_QWORD *)(a1 + 88) = 0;
  while (*(_DWORD *)(a1 + 200))
  {
    v13 = icu::UVector::orphanElementAt((icu::UVector *)(a1 + 192), 0);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  uhash_removeAll(*(_QWORD *)(a1 + 232));
  v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, v14);
  if (!v16)
  {
    *(_QWORD *)(a1 + 184) = 0;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  v96 = 0;
  *v16 = (uint64_t)&off_1E2265468;
  v16[1] = 0;
  v16[2] = a1 + 192;
  v16[3] = a1 + 232;
  *(_QWORD *)(a1 + 184) = v16;
  *(_WORD *)(a1 + 496) = -1;
  v106 = 0u;
  v109 = 0;
  v108 = 0u;
  v107 = 0u;
  v104 = 0;
  v105 = off_1E2256B38;
  LOWORD(v106) = 2;
  v101 = 0u;
  v103 = 0u;
  v102 = 0u;
  v100 = (UChar *)off_1E2256B38;
  LOWORD(v101) = 2;
  v18 = *(unsigned __int16 *)(a2 + 8);
  v19 = (__int16)v18;
  v20 = v18 >> 5;
  if (v19 >= 0)
    v21 = v20;
  else
    v21 = *(unsigned int *)(a2 + 12);
  *(_QWORD *)(a1 + 88) = 0;
  v92 = -1;
  if ((int)v21 < 1 || *(int *)a4 > 0)
  {
LABEL_119:
    LODWORD(v66) = (unsigned __int16)v101 >> 5;
    if ((v101 & 0x8000u) == 0)
      v66 = v66;
    else
      v66 = DWORD1(v101);
    if ((int)v66 < 1)
      goto LABEL_135;
    v67 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v66, (icu::UMemory *)0x40, v17);
    if (v67)
    {
      v68 = v67;
      icu::UnicodeString::UnicodeString(v67, &v100);
      if (*(_DWORD *)(a1 + 104))
        icu::UVector::insertElementAt(v93, v68, 0, a4);
      else
        icu::UVector::adoptElement((icu::UVector *)v93, v68, a4);
      goto LABEL_135;
    }
LABEL_165:
    v41 = 7;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_166;
  }
  v22 = 0;
  v94 = 1;
  v96 = 0;
  v92 = -1;
  while (1)
  {
    v23 = *(unsigned __int16 *)(a2 + 8);
    if ((v23 & 0x8000u) == 0)
      v24 = v23 >> 5;
    else
      v24 = *(_DWORD *)(a2 + 12);
    if (v24 <= v22)
    {
      v27 = 0xFFFFLL;
    }
    else
    {
      v25 = (v23 & 2) == 0;
      v26 = a2 + 10;
      if (v25)
        v26 = *(_QWORD *)(a2 + 24);
      v27 = *(unsigned __int16 *)(v26 + 2 * (int)v22);
    }
    v28 = v22 + 1;
    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v27) || (_DWORD)v27 == 59)
    {
      v22 = (v22 + 1);
      goto LABEL_29;
    }
    if ((_DWORD)v27 == 35)
      break;
    ++v96;
    if ((int)v22 + 3 > (int)v21 || icu::UnicodeString::doCompare(a2, v22, 2, (uint64_t)":", 0, 2))
    {
      if (v94)
      {
        v32 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v94, (icu::UMemory *)0x40, v17);
        if (!v32)
          goto LABEL_165;
        v33 = v32;
        icu::UnicodeString::UnicodeString(v32, &v100);
        if (*(_DWORD *)(a1 + 104))
          icu::UVector::insertElementAt(v93, v33, 0, a4);
        else
          icu::UVector::adoptElement((icu::UVector *)v93, v33, a4);
        v41 = *(unsigned int *)a4;
        if ((int)v41 > 0)
          goto LABEL_166;
        if ((v101 & 1) != 0)
          v42 = 2;
        else
          v42 = v101 & 0x1F;
        LOWORD(v101) = v42;
        v43 = icu::UMemory::operator new((uint64_t *)v42, (icu::UMemory *)0x490, v34);
        if (!v43)
        {
          *(_QWORD *)(a1 + 96) = 0;
          goto LABEL_165;
        }
        v44 = sub_18BD4AC54(v43, a4);
        *(_QWORD *)(a1 + 96) = v44;
        *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) = v44;
        *(_WORD *)(v44 + 1162) = -4096;
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 424) = -117379072;
      }
      if (sub_18BD4D65C((icu::ICU_Utility *)a2, (const icu::UnicodeString *)v22, (int *)v21))
      {
        v45 = sub_18BD4D714(a1, (icu::ICU_Utility *)a2, v22, (int *)v21, a4);
        if ((v45 & 0x80000000) != 0)
        {
          sub_18BD4D580(a1, 65562, a2, v22, a4);
          v94 = 0;
          v22 = 0xFFFFFFFFLL;
        }
        else
        {
          v94 = 0;
          v22 = v45;
        }
      }
      else
      {
        v22 = sub_18BD4D92C(a1, a2, v22, v21, a4);
        v94 = 0;
      }
      goto LABEL_29;
    }
    v35 = (v22 + 2);
    v36 = *(unsigned __int16 *)(a2 + 8);
    if ((v36 & 0x8000u) == 0)
      v37 = v36 >> 5;
    else
      v37 = *(_DWORD *)(a2 + 12);
    if (v37 <= v35)
    {
      v39 = 0xFFFFLL;
    }
    else
    {
      v25 = (v36 & 2) == 0;
      v38 = a2 + 10;
      if (v25)
        v38 = *(_QWORD *)(a2 + 24);
      v39 = *(unsigned __int16 *)(v38 + 2 * (int)v35);
    }
    if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v39) && (int)v35 < (int)v21)
    {
      v46 = (int)v35 + 1;
      do
      {
        v47 = *(unsigned __int16 *)(a2 + 8);
        if ((v47 & 0x8000u) == 0)
          v48 = v47 >> 5;
        else
          v48 = *(_DWORD *)(a2 + 12);
        v35 = (v35 + 1);
        if (v48 <= v35)
        {
          v50 = 0xFFFFLL;
        }
        else
        {
          v25 = (v47 & 2) == 0;
          v49 = a2 + 10;
          if (v25)
            v49 = *(_QWORD *)(a2 + 24);
          v50 = *(unsigned __int16 *)(v49 + 2 * v46);
        }
        if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v50))
          break;
      }
      while (v46++ < v21);
    }
    v99 = v35;
    if (!v94)
    {
      v52 = *(void **)(a1 + 96);
      if (v52)
      {
        if (*(_DWORD *)(a1 + 104))
          icu::UVector::insertElementAt((uint64_t (**)(void *))v9, v52, 0, a4);
        else
          icu::UVector::addElement(v9, v52, a4);
        if (*(int *)a4 >= 1 && *(_QWORD *)(a1 + 96))
        {
          v53 = (void *)sub_18BD4AF08();
          icu::UMemory::operator delete(v53);
        }
        *(_QWORD *)(a1 + 96) = 0;
      }
    }
    v54 = sub_18BD8C774(a2, (const icu::UnicodeString *)&v99, *(_DWORD *)(a1 + 104), (int *)a4);
    if (v99 != (_DWORD)v35 && icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v99, 59))
    {
      if (*(_DWORD *)(a1 + 104))
      {
        LOWORD(v98) = 59;
        icu::UnicodeString::doReplace((uint64_t)&v100, 0, 0, (uint64_t)&v98, 0, 1);
        sub_18BD4D558((icu::UnicodeString *)&v100, 0, (icu::UnicodeString *)(v54 + 1));
        if (!v54)
          goto LABEL_116;
      }
      else
      {
        v59 = *((unsigned __int16 *)v54 + 8);
        v60 = (__int16)v59;
        v61 = v59 >> 5;
        if (v60 >= 0)
          v62 = v61;
        else
          v62 = *((unsigned int *)v54 + 5);
        v63 = icu::UnicodeString::doAppend((uint64_t)&v100, (const icu::UnicodeString *)(v54 + 1), 0, v62);
        LOWORD(v98) = 59;
        icu::UnicodeString::doAppend(v63, (uint64_t)&v98, 0, 1);
      }
      goto LABEL_115;
    }
    v98 = -1;
    v56 = sub_18BD8D74C((icu::ICU_Utility *)a2, (icu::UnicodeString *)&v99, *(_DWORD *)(a1 + 104), &v98, 0);
    if (!v56)
    {
      sub_18BD4D580(a1, 65569, a2, v35, a4);
      if (!v54)
        goto LABEL_116;
      goto LABEL_115;
    }
    v57 = v56;
    if (!icu::ICU_Utility::parseChar(a2, (const icu::UnicodeString *)&v99, 59)
      || (*(_DWORD *)(a1 + 104) != 0) == (v98 == 0))
    {
      goto LABEL_106;
    }
    if (*(_QWORD *)(a1 + 88))
    {
      sub_18BD4D580(a1, 65559, a2, v35, a4);
LABEL_106:
      icu::UnicodeSet::~UnicodeSet(v57);
      icu::UMemory::operator delete(v58);
      if (!v54)
        goto LABEL_116;
LABEL_115:
      icu::UnicodeString::~UnicodeString((void *)v55, (icu::UnicodeString *)(v54 + 17));
      icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)(v54 + 9));
      icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)(v54 + 1));
      icu::UMemory::operator delete(v54);
      goto LABEL_116;
    }
    *(_QWORD *)(a1 + 88) = v57;
    v55 = v96;
    v92 = v96;
    if (v54)
      goto LABEL_115;
LABEL_116:
    v22 = v99;
    v94 = 1;
LABEL_29:
    if ((int)v22 >= (int)v21 || *(int *)a4 >= 1)
      goto LABEL_118;
  }
  v29 = *(unsigned __int16 *)(a2 + 8);
  if ((int)v22 >= -1)
  {
    if ((v29 & 0x8000) != 0)
    {
      v31 = *(_DWORD *)(a2 + 12);
      if (v31 >= v28)
        v30 = v22 + 1;
      else
        v30 = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v31 = v29 >> 5;
      if (v31 >= v28)
        v30 = v22 + 1;
      else
        v30 = v31;
    }
  }
  else
  {
    v30 = 0;
    if ((v29 & 0x8000) != 0)
      v31 = *(_DWORD *)(a2 + 12);
    else
      v31 = v29 >> 5;
  }
  v40 = icu::UnicodeString::doIndexOf(a2, 0xAu, v30, v31 - v30);
  v22 = (v40 + 1);
  if (v40 != -1)
    goto LABEL_29;
LABEL_118:
  if (v94)
    goto LABEL_119;
  v69 = *(void **)(a1 + 96);
  if (v69)
  {
    if (*(_DWORD *)(a1 + 104))
      icu::UVector::insertElementAt((uint64_t (**)(void *))v9, v69, 0, a4);
    else
      icu::UVector::addElement(v9, v69, a4);
    if (*(int *)a4 >= 1)
    {
      if (*(_QWORD *)(a1 + 96))
      {
        v70 = (void *)sub_18BD4AF08();
        icu::UMemory::operator delete(v70);
      }
      *(_QWORD *)(a1 + 96) = 0;
      goto LABEL_135;
    }
LABEL_136:
    v71 = *(_DWORD *)(a1 + 16);
    if (v71 >= 1)
    {
      v72 = 0;
      v95 = *(_DWORD *)(a1 + 16);
      do
      {
        v73 = icu::UVector::elementAt(v9, v72);
        v74 = v73;
        v75 = *(int *)(a1 + 200);
        *(_DWORD *)(v73 + 1164) = v75;
        v97 = v72;
        if ((_DWORD)v75)
        {
          v76 = uprv_malloc(8 * v75);
          *(_QWORD *)(v74 + 1152) = v76;
          if (!v76)
            goto LABEL_165;
          *(_BYTE *)(v74 + 1160) = v72 == 0;
          if (*(int *)(v74 + 1164) >= 1)
          {
            v77 = 0;
            do
            {
              *(_QWORD *)(*(_QWORD *)(v74 + 1152) + 8 * v77) = icu::UVector::elementAt((icu::UVector *)(a1 + 192), v77);
              ++v77;
            }
            while (v77 < *(int *)(v74 + 1164));
          }
        }
        else
        {
          *(_QWORD *)(v73 + 1152) = 0;
        }
        uhash_removeAll(*(_QWORD *)(v74 + 1064));
        v99 = -1;
        while (1)
        {
          Element = uhash_nextElement(*(uint64_t **)(a1 + 232), (int *)&v99);
          v79 = Element;
          if (!Element)
            break;
          v80 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(Element + 8) + 56))(*(_QWORD *)(Element + 8));
          if (!v80)
            goto LABEL_165;
          v83 = v80;
          v84 = *(UChar ***)(v79 + 16);
          v85 = *(_QWORD *)(v74 + 1064);
          v86 = (icu::UnicodeString *)icu::UMemory::operator new(v82, (icu::UMemory *)0x40, v81);
          v87 = (uint64_t)v86;
          if (v86)
            icu::UnicodeString::UnicodeString(v86, v84);
          uhash_put(v85, v87, v83, (int *)a4);
        }
        v72 = v97 + 1;
        v71 = v95;
      }
      while (v97 + 1 != v95);
    }
    icu::UVector::removeAllElements(a1 + 192);
    if (*(_QWORD *)(a1 + 88))
    {
      if ((v88 = *(_DWORD *)(a1 + 104)) == 0 && v92 != 1 || v88 == 1 && v92 != v96)
        *a4 = U_MISPLACED_COMPOUND_FILTER;
    }
    if (v71 >= 1)
    {
      for (i = 0; i != v71; ++i)
      {
        v90 = icu::UVector::elementAt(v9, i);
        sub_18BD4F490(v90 + 8, v8, a4);
      }
    }
    v41 = *(unsigned int *)(a1 + 56);
    if ((_DWORD)v41 == 1)
    {
      v41 = *(unsigned __int16 *)(icu::UVector::elementAt((icu::UVector *)v93, 0) + 8);
      if (v41 <= 0x1F)
        icu::UVector::removeElementAt((uint64_t (**)(void))v93, 0);
    }
  }
  else
  {
LABEL_135:
    v41 = *(unsigned int *)a4;
    if ((int)v41 <= 0)
      goto LABEL_136;
  }
LABEL_166:
  icu::UnicodeString::~UnicodeString((void *)v41, (icu::UnicodeString *)&v100);
  icu::UnicodeString::~UnicodeString(v91, (icu::UnicodeString *)&v105);
}

uint64_t sub_18BD4D548(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  return v1;
}

uint64_t sub_18BD4D558(icu::UnicodeString *a1, uint64_t a2, icu::UnicodeString *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *((unsigned __int16 *)a3 + 4);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 >= 0)
    v6 = v5;
  else
    v6 = *((unsigned int *)a3 + 3);
  return icu::UnicodeString::doReplace(a1, a2, 0, a3, 0, v6);
}

uint64_t sub_18BD4D580(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 112) = a4;
  v10 = uprv_max((a4 - 15), 0);
  v11 = a4 - v10;
  icu::UnicodeString::doExtract((char *)a3, v10, a4 - v10, a1 + 116, 0);
  *(_WORD *)(a1 + 116 + 2 * v11) = 0;
  v12 = *(unsigned __int16 *)(a3 + 8);
  v13 = (__int16)v12;
  v14 = v12 >> 5;
  if (v13 >= 0)
    v15 = v14;
  else
    v15 = *(_DWORD *)(a3 + 12);
  v16 = uprv_min((a4 + 15), v15);
  v17 = v16 - a4;
  v18 = a1 + 148;
  icu::UnicodeString::doExtract((char *)a3, a4, v16 - a4, v18, 0);
  *(_WORD *)(v18 + 2 * v17) = 0;
  *a5 = a2;
  return a4;
}

BOOL sub_18BD4D65C(icu::ICU_Utility *a1, const icu::UnicodeString *a2, int *a3)
{
  int *v6;
  void *v7;
  __int16 *v9;
  _BYTE v10[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = L"use ";
  icu::UnicodeString::UnicodeString(v10, 1, &v9);
  LODWORD(a3) = icu::ICU_Utility::parsePattern(a1, a2, a3, (uint64_t)v10, 0, v6);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v10);
  return (int)a3 >= 0;
}

uint64_t sub_18BD4D714(uint64_t a1, icu::ICU_Utility *a2, int a3, int *a4, _DWORD *a5)
{
  const icu::UnicodeString *v9;
  int *v10;
  uint64_t v11;
  void *v12;
  __int16 v13;
  __int16 v14;
  int *v15;
  void *v16;
  int *v17;
  void *v18;
  int *v19;
  int v20;
  void *v21;
  const char *v23;
  const __int16 *v24;
  const __int16 *v25;
  const __int16 *v26;
  _BYTE v27[64];
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v28[0] = 0;
  v9 = (const icu::UnicodeString *)(a3 + 4);
  v26 = L"~variable range # #~;";
  icu::UnicodeString::UnicodeString(v27, 1, &v26);
  v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, (const icu::UnicodeString *)v28, v10);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v27);
  if ((v11 & 0x80000000) != 0)
  {
    v25 = L"~maximum backup #~;";
    icu::UnicodeString::UnicodeString(v27, 1, &v25);
    v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, (const icu::UnicodeString *)v28, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v27);
    if ((v11 & 0x80000000) != 0)
    {
      v24 = L"~nfd rules~;";
      icu::UnicodeString::UnicodeString(v27, 1, &v24);
      v11 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, 0, v17);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v27);
      if ((v11 & 0x80000000) != 0)
      {
        v23 = "~";
        icu::UnicodeString::UnicodeString(v27, 1, &v23);
        v20 = icu::ICU_Utility::parsePattern(a2, v9, a4, (uint64_t)v27, 0, v19);
        icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v27);
        if (v20 < 0)
          return 0xFFFFFFFFLL;
        else
          return v20;
      }
    }
  }
  else
  {
    v13 = WORD2(v28[0]);
    if (SHIDWORD(v28[0]) >= 0x10000
      || (v14 = v28[0], (v28[0] & 0x80000000) != 0)
      || SLODWORD(v28[0]) > SHIDWORD(v28[0]))
    {
      *a5 = 65562;
    }
    else
    {
      *(_WORD *)(*(_QWORD *)(a1 + 96) + 1162) = v28[0];
      if (!*(_DWORD *)(a1 + 16))
      {
        *(_WORD *)(a1 + 424) = v14;
        *(_WORD *)(a1 + 426) = v13 + 1;
      }
    }
  }
  return v11;
}

uint64_t sub_18BD4D92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  unsigned int v10;
  __int16 v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned __int16 *v39;
  icu::UnicodeString *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  signed int v45;
  _BOOL4 v46;
  uint64_t *v47;
  uint64_t *v48;
  BOOL v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  __int128 *v53;
  int v54;
  char *v55;
  int v56;
  char *v57;
  int *v58;
  int v59;
  uint64_t *v60;
  int v61;
  int v62;
  int *v63;
  _BYTE *v64;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  void **v70;
  uint64_t *v71;
  uint64_t *v72;
  void (***v73)(icu::UnicodeString *__hidden);
  void (***v74)(icu::UnicodeString *__hidden);
  uint64_t *v75;
  char *v76;
  char v77;
  char *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  void **v82;
  uint64_t v83;
  UChar *v84;
  _OWORD v85[3];
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (**v94)(icu::UnicodeString *__hidden);
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int16 *)(a1 + 328);
  if ((v10 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a1 + 320);
    goto LABEL_8;
  }
  if ((v10 & 0x8000) != 0)
  {
    if (!*(_DWORD *)(a1 + 332))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v10 >> 5)
LABEL_7:
    *(_WORD *)(a1 + 328) &= 0x1Fu;
LABEL_8:
  icu::UVector::removeAllElements(a1 + 384);
  v93 = 0;
  v95 = 0u;
  v98 = 0;
  v100 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = off_1E2256B38;
  LOWORD(v95) = 2;
  v102 = a1;
  v99 = -1;
  LODWORD(v100) = -1;
  *(_QWORD *)((char *)&v100 + 4) = 0;
  WORD6(v100) = 0;
  v101 = 1;
  v83 = 0;
  memset(v85, 0, sizeof(v85));
  v86 = 0;
  v84 = (UChar *)off_1E2256B38;
  LOWORD(v85[0]) = 2;
  v92 = a1;
  v87 = -1;
  v88 = -1;
  v89 = 0;
  v90 = 0;
  v91 = 1;
  if ((*(_WORD *)(a1 + 440) & 1) != 0)
    v11 = 2;
  else
    v11 = *(_WORD *)(a1 + 440) & 0x1F;
  *(_WORD *)(a1 + 440) = v11;
  v12 = sub_18BD4B210((uint64_t)&v93, a2, a3, a4, a5);
  v13 = (void *)*(unsigned int *)a5;
  if ((int)v13 > 0)
    goto LABEL_48;
  v14 = v12;
  if ((_DWORD)v12 == (_DWORD)a4
    || ((v15 = (int)v12 - 1, v16 = *(unsigned __int16 *)(a2 + 8), (v16 & 0x8000u) == 0)
      ? (v17 = v16 >> 5)
      : (v17 = *(_DWORD *)(a2 + 12)),
        v17 <= v15
      ? (v19 = 0xFFFF)
      : ((v16 & 2) != 0 ? (v18 = a2 + 10) : (v18 = *(_QWORD *)(a2 + 24)), v19 = *(unsigned __int16 *)(v18 + 2 * v15)),
        !u_strchr((const UChar *)asc_18BE29A9C, v19)))
  {
    v24 = 65547;
    goto LABEL_39;
  }
  if (v19 == 60 && (int)v14 < (int)a4)
  {
    v20 = *(unsigned __int16 *)(a2 + 8);
    if ((v20 & 0x8000u) == 0)
      v21 = v20 >> 5;
    else
      v21 = *(_DWORD *)(a2 + 12);
    v19 = 60;
    if (v21 > v14)
    {
      if ((v20 & 2) != 0)
        v22 = a2 + 10;
      else
        v22 = *(_QWORD *)(a2 + 24);
      v23 = *(unsigned __int16 *)(v22 + 2 * (int)v14);
      if (v23 == 62)
        v14 = (v14 + 1);
      else
        v14 = v14;
      if (v23 == 62)
        v19 = 126;
      else
        v19 = 60;
    }
  }
  else
  {
    switch(v19)
    {
      case 8592:
        v19 = 60;
        break;
      case 8596:
        v19 = 126;
        break;
      case 8594:
        v19 = 62;
        break;
    }
  }
  v26 = sub_18BD4B210((uint64_t)&v83, a2, v14, a4, a5);
  v13 = (void *)*(unsigned int *)a5;
  if ((int)v13 > 0)
    goto LABEL_48;
  v30 = v26;
  if ((int)v26 < (int)a4)
  {
    v31 = v26 - 1;
    v32 = *(unsigned __int16 *)(a2 + 8);
    v33 = (v32 & 0x8000u) == 0 ? v32 >> 5 : *(_DWORD *)(a2 + 12);
    if (v33 <= v31
      || ((v32 & 2) != 0 ? (v34 = a2 + 10) : (v34 = *(_QWORD *)(a2 + 24)), *(_WORD *)(v34 + 2 * (int)v31) != 59))
    {
      v24 = 65555;
      goto LABEL_39;
    }
  }
  v35 = *(unsigned __int16 *)(a1 + 440);
  if (v19 == 61)
  {
    if ((v35 & 0x8000) != 0)
      v36 = *(_DWORD *)(a1 + 444);
    else
      v36 = v35 >> 5;
    if (!v36)
    {
      v25 = a1;
      v24 = 0x10000;
      goto LABEL_40;
    }
    if ((__int16)v95 < 0)
    {
      if (DWORD1(v95) != 1)
      {
LABEL_85:
        v25 = a1;
        v24 = 65541;
        goto LABEL_40;
      }
    }
    else if ((v95 & 0xFFE0) != 0x20)
    {
      goto LABEL_85;
    }
    if ((v95 & 2) != 0)
      v39 = (unsigned __int16 *)&v95 + 1;
    else
      v39 = (unsigned __int16 *)v96;
    if (*v39 != *(unsigned __int16 *)(a1 + 426) || WORD6(v100) || (_WORD)v90)
      goto LABEL_85;
    v40 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)BYTE1(v90), (icu::UMemory *)0x40, v27);
    if (!v40)
    {
      v25 = a1;
      v24 = 7;
      goto LABEL_40;
    }
    v41 = (uint64_t)v40;
    icu::UnicodeString::UnicodeString(v40, &v84);
    sub_18BBB11FC((uint64_t *)(a1 + 232), (UChar **)(a1 + 432), v41, (int *)a5);
    v13 = (void *)((unsigned __int16)(*(_WORD *)(a1 + 426))++ + 1);
LABEL_84:
    a3 = v30;
    goto LABEL_48;
  }
  if ((v35 & 0x8000) != 0)
    v37 = *(_DWORD *)(a1 + 444);
  else
    v37 = v35 >> 5;
  if (v37)
  {
    v24 = 65554;
    goto LABEL_39;
  }
  if (*(__int16 *)(a1 + 328) < 0)
    v38 = *(_DWORD *)(a1 + 332);
  else
    v38 = *(unsigned __int16 *)(a1 + 328) >> 5;
  if (v38 > *(_DWORD *)(a1 + 392))
    sub_18BD4D580(a1, 65553, a2, a3, a5);
  v42 = 0;
  while ((*(__int16 *)(a1 + 328) & 0x80000000) == 0)
  {
    if (v42 >= (unint64_t)*(unsigned __int16 *)(a1 + 328) >> 5)
      goto LABEL_101;
    v43 = (unint64_t)*(unsigned __int16 *)(a1 + 328) >> 5;
LABEL_95:
    if (v43 > v42)
    {
      v44 = a1 + 330;
      if ((*(_WORD *)(a1 + 328) & 2) == 0)
        v44 = *(_QWORD *)(a1 + 344);
      if (!*(_WORD *)(v44 + 2 * v42))
        sub_18BD4D580(a1, 65568, a2, a3, a5);
    }
    ++v42;
  }
  if ((uint64_t)v42 < *(int *)(a1 + 332))
  {
    v43 = *(unsigned int *)(a1 + 332);
    goto LABEL_95;
  }
LABEL_101:
  if (*(int *)(a1 + 392) >= 1)
  {
    v45 = 0;
    do
    {
      if (!icu::UVector::elementAt((icu::UVector *)(a1 + 384), v45))
        sub_18BD4D580(a1, 65568, a2, a3, a5);
      ++v45;
    }
    while (v45 < *(_DWORD *)(a1 + 392));
  }
  v13 = (void *)*(unsigned int *)(a1 + 104);
  if (v19 == 126)
  {
    v46 = (_DWORD)v13 == 1;
    if ((_DWORD)v13 == 1)
      v47 = &v83;
    else
      v47 = &v93;
    if ((_DWORD)v13 == 1)
      v48 = &v93;
    else
      v48 = &v83;
    v81 = v48;
    sub_18BD4C770((uint64_t)v48);
    *((_DWORD *)v47 + 18) = -1;
    *((_DWORD *)v47 + 21) = 0;
    goto LABEL_121;
  }
  if ((v19 == 62) == ((_DWORD)v13 != 0))
  {
    a3 = v30;
    goto LABEL_48;
  }
  v49 = (_DWORD)v13 == 1;
  v46 = (_DWORD)v13 == 1;
  v50 = &v93;
  if (v49)
    v47 = &v83;
  else
    v47 = &v93;
  if (!v49)
    v50 = &v83;
  v81 = v50;
LABEL_121:
  if (v46)
    v51 = &v83;
  else
    v51 = &v93;
  if ((*((_DWORD *)v51 + 19) & 0x80000000) != 0)
    *((_DWORD *)v51 + 19) = 0;
  if (v46)
    v52 = &v83;
  else
    v52 = &v93;
  if ((v52[10] & 0x80000000) != 0)
  {
    v53 = v85;
    if (!v46)
      v53 = &v95;
    v54 = *(__int16 *)v53;
    v55 = (char *)v85 + 4;
    if (!v46)
      v55 = (char *)&v95 + 4;
    v56 = *(_DWORD *)v55;
    if (v54 >= 0)
      v56 = (unsigned __int16)v54 >> 5;
    *((_DWORD *)v52 + 20) = v56;
  }
  v57 = (char *)&v99 + 4;
  if (v46)
  {
    v58 = (int *)&v100;
  }
  else
  {
    v57 = (char *)&v87 + 4;
    v58 = &v88;
  }
  if (v46)
    v59 = v87;
  else
    v59 = v99;
  if ((*(_DWORD *)v57 & 0x80000000) != 0 && *v58 < 0 && v59 < 0)
  {
    v60 = v46 ? &v93 : &v83;
    v80 = v60;
    v61 = *((_DWORD *)v60 + 21);
    v62 = v46 ? v99 : v87;
    v63 = &v90;
    if (v46)
    {
      v63 = (int *)&v100 + 3;
      v64 = (char *)&v100 + 13;
    }
    else
    {
      v64 = (char *)&v90 + 1;
    }
    if ((v62 > -1 || v61 == 0) && !*(_BYTE *)v63 && !*v64)
    {
      v66 = (uint64_t)v47;
      v67 = v51;
      v79 = v52;
      if (sub_18BD4C890(v66, a1) && sub_18BD4C7F8((uint64_t)v81, a1) && *((_DWORD *)v67 + 19) <= *((_DWORD *)v79 + 20))
      {
        v69 = (uint64_t *)*(unsigned int *)(a1 + 392);
        if ((int)v69 < 1)
        {
          v82 = 0;
        }
        else
        {
          v70 = (void **)uprv_malloc(8 * (_QWORD)v69);
          if (!v70)
            goto LABEL_187;
          v82 = v70;
          icu::UVector::toArray((icu::UVector *)(a1 + 384), v70);
        }
        v71 = icu::UMemory::operator new(v69, (icu::UMemory *)0x88, v68);
        if (v71)
        {
          v72 = v71;
          if (v46)
            v73 = (void (***)(icu::UnicodeString *__hidden))&v84;
          else
            v73 = &v94;
          if (v46)
            v74 = &v94;
          else
            v74 = (void (***)(icu::UnicodeString *__hidden))&v84;
          v75 = &v99;
          if (!v46)
            v75 = &v87;
          v76 = (char *)&v90;
          if (!v46)
            v76 = (char *)&v100 + 12;
          v77 = *v76;
          v78 = (char *)&v100 + 13;
          if (v46)
            v78 = (char *)&v90 + 1;
          sub_18BD4E6F0((uint64_t)v71, (uint64_t)v73, *((_DWORD *)v67 + 19), *((_DWORD *)v79 + 20), (uint64_t)v74, *(_DWORD *)v75, *((_DWORD *)v80 + 21), (uint64_t)v82, *(_DWORD *)(a1 + 392), v77, *v78, *(_QWORD *)(a1 + 96), (int *)a5);
          sub_18BD4F424(*(_QWORD *)(a1 + 96) + 8, v72, a5);
          goto LABEL_84;
        }
        uprv_free(v82);
LABEL_187:
        v25 = a1;
        v24 = 7;
        goto LABEL_40;
      }
    }
  }
  v24 = 65537;
LABEL_39:
  v25 = a1;
LABEL_40:
  sub_18BD4D580(v25, v24, a2, a3, a5);
LABEL_48:
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v84);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v94);
  return a3;
}

unint64_t utrans_stripRules(unsigned __int16 *a1, int a2, char *a3, _DWORD *a4)
{
  char *v7;
  BOOL v8;
  __int128 v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  icu::PatternProps *v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  int v27;
  _OWORD v28[4];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  bzero(a3, 2 * a2);
  v7 = a3;
  if (a2 >= 1)
  {
    v8 = 0;
    v9 = 0uLL;
    v7 = a3;
    v10 = (unint64_t)&a1[a2];
    while (1)
    {
      v11 = *a1;
      if ((v11 & 0xFC00) == 0xD800)
      {
        v11 = a1[1] + (v11 << 10) - 56613888;
        a1 += 2;
      }
      else
      {
        ++a1;
        if (v11 == 39)
        {
          v8 = !v8;
          goto LABEL_54;
        }
      }
      if (v8)
      {
        v8 = 1;
        goto LABEL_36;
      }
      if (v11 != 92)
        break;
      if ((unint64_t)a1 >= v10)
      {
        v8 = 0;
        LOWORD(v11) = 92;
        goto LABEL_54;
      }
      v12 = *a1;
      LOWORD(v11) = 92;
      if (v12 <= 0xC)
      {
        if (v12 != 10)
          goto LABEL_51;
      }
      else if (v12 != 13)
      {
        if (v12 == 39)
        {
          v8 = 1;
        }
        else
        {
          if (v12 == 117 && (unint64_t)(a1 + 5) < v10)
          {
            v27 = 0;
            v28[2] = v9;
            v28[3] = v9;
            v28[0] = v9;
            v28[1] = v9;
            icu::UnicodeString::UnicodeString((uint64_t)v28, (uint64_t)a1, 5);
            v13 = (icu::PatternProps *)icu::UnicodeString::unescapeAt((icu::UnicodeString *)v28, &v27);
            if ((_DWORD)v13 == -1 || !v27)
            {
              *a4 = 9;
              icu::UnicodeString::~UnicodeString((void *)9, (icu::UnicodeString *)v28);
              return 0;
            }
            v11 = v13;
            if (icu::PatternProps::isWhiteSpace(v13) || u_iscntrl(v11))
            {
              v11 = 92;
            }
            else
            {
              v24 = u_ispunct(v11);
              if (!v24)
                a1 += 5;
              v14 = 92;
              if (v24)
                v11 = 92;
            }
            icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)v28);
            v8 = 0;
            v9 = 0uLL;
            goto LABEL_36;
          }
LABEL_51:
          v8 = 0;
        }
        goto LABEL_54;
      }
      v8 = 0;
      ++a1;
LABEL_22:
      if ((unint64_t)a1 >= v10)
        goto LABEL_61;
    }
    if (v11 == 35)
    {
      do
      {
        v15 = v7;
        if (v7 <= a3)
          break;
        v7 -= 2;
      }
      while (*((_WORD *)v15 - 1) == 32);
      while (a1 != (unsigned __int16 *)v10)
      {
        v16 = *a1++;
        v11 = v16;
        if (v16 == 10 || v11 == 13)
        {
          v8 = 0;
          v7 = v15;
          goto LABEL_36;
        }
      }
      v7 = v15;
      goto LABEL_61;
    }
    v8 = 0;
LABEL_36:
    if (v11 == 13 || v11 == 10)
    {
      while ((unint64_t)a1 < v10)
      {
        v19 = *a1;
        v20 = v19 > 0x20;
        v21 = (1 << v19) & 0x100002400;
        if (v20 || v21 == 0)
          break;
        ++a1;
      }
      v8 = 0;
      goto LABEL_22;
    }
    if (v11 >= 0x10000)
    {
      *(_WORD *)v7 = (v11 >> 10) - 10304;
      *((_WORD *)v7 + 1) = v11 & 0x3FF | 0xDC00;
      v23 = 2;
LABEL_55:
      v7 += 2 * v23;
      goto LABEL_22;
    }
LABEL_54:
    *(_WORD *)v7 = v11;
    v23 = 1;
    goto LABEL_55;
  }
LABEL_61:
  if (v7 < &a3[2 * a2])
    *(_WORD *)v7 = 0;
  return (unint64_t)(v7 - a3) >> 1;
}

uint64_t sub_18BD4E454(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, int *a13)
{
  uint64_t v14;
  unsigned int v16;
  unsigned int v18;
  int v19;
  signed int v20;
  unsigned int v21;
  int v22;
  signed int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  signed int v29;
  int v30;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;

  *(_QWORD *)a1 = off_1E22654D8;
  *(_QWORD *)(a1 + 40) = off_1E2256B38;
  v14 = a1 + 40;
  *(_WORD *)(a1 + 48) = 2;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 128) = a12;
  if (*a13 <= 0)
  {
    v16 = a6;
    if ((a3 & 0x80000000) != 0)
    {
      a3 = 0;
    }
    else
    {
      v18 = *(unsigned __int16 *)(a2 + 8);
      v19 = (__int16)v18;
      v20 = v18 >> 5;
      if (v19 < 0)
        v20 = *(_DWORD *)(a2 + 12);
      if (v20 < (int)a3)
        goto LABEL_21;
    }
    *(_DWORD *)(a1 + 116) = a3;
    if ((a4 & 0x80000000) != 0)
    {
      v24 = *(unsigned __int16 *)(a2 + 8);
      v25 = (__int16)v24;
      v26 = v24 >> 5;
      if (v25 >= 0)
        a4 = v26;
      else
        a4 = *(_DWORD *)(a2 + 12);
    }
    else
    {
      if (a3 > a4)
        goto LABEL_21;
      v21 = *(unsigned __int16 *)(a2 + 8);
      v22 = (__int16)v21;
      v23 = v21 >> 5;
      if (v22 < 0)
        v23 = *(_DWORD *)(a2 + 12);
      if (v23 < (int)a4)
        goto LABEL_21;
    }
    *(_DWORD *)(a1 + 120) = a4 - a3;
    v27 = *(unsigned __int16 *)(a5 + 8);
    if (a6 < 0)
    {
      if ((v27 & 0x8000) != 0)
        v16 = *(_DWORD *)(a5 + 12);
      else
        v16 = v27 >> 5;
    }
    else
    {
      v28 = (__int16)v27;
      v29 = v27 >> 5;
      if (v28 < 0)
        v29 = *(_DWORD *)(a5 + 12);
      if (v29 < a6)
      {
LABEL_21:
        v30 = 1;
LABEL_22:
        *a13 = v30;
        return a1;
      }
    }
    *(_QWORD *)(a1 + 104) = a8;
    *(_DWORD *)(a1 + 112) = a9;
    icu::UnicodeString::operator=((UChar **)(a1 + 40), (UChar **)a2);
    v33 = a10 != 0;
    if (a11)
      v33 |= 2u;
    *(_BYTE *)(a1 + 124) = v33;
    *(_QWORD *)(a1 + 8) = 0;
    v34 = (uint64_t *)*(unsigned int *)(a1 + 116);
    if ((int)v34 >= 1)
    {
      v35 = icu::UMemory::operator new(v34, (icu::UMemory *)0x70, v32);
      if (!v35)
      {
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_50;
      }
      *(_QWORD *)(a1 + 8) = sub_18BD7E7D8((uint64_t)v35, v14, 0, *(unsigned int *)(a1 + 116), 0, *(_QWORD *)(a1 + 128));
    }
    *(_QWORD *)(a1 + 16) = 0;
    v36 = (uint64_t *)*(unsigned int *)(a1 + 120);
    if ((int)v36 >= 1)
    {
      v37 = icu::UMemory::operator new(v36, (icu::UMemory *)0x70, v32);
      if (!v37)
      {
        *(_QWORD *)(a1 + 16) = 0;
        goto LABEL_50;
      }
      *(_QWORD *)(a1 + 16) = sub_18BD7E7D8((uint64_t)v37, v14, *(unsigned int *)(a1 + 116), (*(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 116)), 0, *(_QWORD *)(a1 + 128));
    }
    if (*(__int16 *)(a1 + 48) < 0)
      v38 = *(_DWORD *)(a1 + 52);
    else
      v38 = *(unsigned __int16 *)(a1 + 48) >> 5;
    v39 = (uint64_t *)(v38 - *(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 116));
    *(_QWORD *)(a1 + 24) = 0;
    if ((int)v39 < 1)
      goto LABEL_47;
    v40 = icu::UMemory::operator new(v39, (icu::UMemory *)0x70, v32);
    if (v40)
    {
      if (*(__int16 *)(a1 + 48) < 0)
        v41 = *(unsigned int *)(a1 + 52);
      else
        v41 = *(unsigned __int16 *)(a1 + 48) >> 5;
      *(_QWORD *)(a1 + 24) = sub_18BD7E7D8((uint64_t)v40, v14, (*(_DWORD *)(a1 + 120) + *(_DWORD *)(a1 + 116)), v41, 0, *(_QWORD *)(a1 + 128));
LABEL_47:
      v42 = icu::UMemory::operator new(v39, (icu::UMemory *)0x60, v32);
      if (v42)
      {
        *(_QWORD *)(a1 + 32) = sub_18BD7F1A0((uint64_t)v42, (UChar **)a5, v16 + a7, *(_QWORD *)(a1 + 128));
        return a1;
      }
      *(_QWORD *)(a1 + 32) = 0;
      goto LABEL_50;
    }
    *(_QWORD *)(a1 + 24) = 0;
LABEL_50:
    v30 = 7;
    goto LABEL_22;
  }
  return a1;
}

uint64_t sub_18BD4E6F0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, int *a13)
{
  return sub_18BD4E454(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_18BD4E714(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E22654D8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 40), (UChar **)(a2 + 40));
  *(_QWORD *)(a1 + 116) = *(_QWORD *)(a2 + 116);
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 124);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  v5 = *(unsigned int *)(a2 + 112);
  if ((int)v5 >= 1)
  {
    v6 = uprv_malloc(8 * v5);
    *(_QWORD *)(a1 + 104) = v6;
    memcpy(v6, *(const void **)(a2 + 104), 8 * *(int *)(a2 + 112));
  }
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    *v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  v8 = *(_QWORD *)(a2 + 16);
  if (v8)
    *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
    *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32));
  return a1;
}

uint64_t sub_18BD4E80C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E22654D8;
  uprv_free(*(void **)(a1 + 104));
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 40));
  return a1;
}

void sub_18BD4E89C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BD4E80C(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD4E8B0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 116) + (*(_BYTE *)(a1 + 124) & 1u);
}

uint64_t sub_18BD4E8C4(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  __int16 v4;
  int v5;
  unsigned __int8 v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 116);
  if (*(__int16 *)(a1 + 48) < 0)
    v3 = (uint64_t *)*(unsigned int *)(a1 + 52);
  else
    v3 = (uint64_t *)(*(unsigned __int16 *)(a1 + 48) >> 5);
  if (v2 == (_DWORD)v3)
  {
    return -1;
  }
  else
  {
    v5 = icu::UnicodeString::char32At(v3, (icu::UnicodeString *)(a1 + 40), v2);
    v6 = v5;
    v7 = sub_18BD4AF38(*(_QWORD *)(a1 + 128), v5);
    v4 = v6;
    if (v7)
      return -1;
  }
  return v4;
}

uint64_t sub_18BD4E934(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 32))(v2 + 8);
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 8) + 32))(v2 + 8);
  else
    return 1;
}

uint64_t sub_18BD4E95C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int32_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v4 = *(unsigned __int16 *)(a1 + 48);
  v5 = v4 >> 5;
  if (*(__int16 *)(a1 + 48) < 0)
    v6 = *(_DWORD *)(a1 + 52);
  else
    v6 = v4 >> 5;
  v7 = *(_DWORD *)(a1 + 116);
  v8 = *(_DWORD *)(a2 + 116);
  v9 = *(unsigned __int16 *)(a2 + 48);
  if ((v9 & 0x8000u) == 0)
    v10 = v9 >> 5;
  else
    v10 = *(_DWORD *)(a2 + 52);
  if ((v4 & 1) != 0)
  {
    v12 = (v9 & 1) == 0;
  }
  else
  {
    if ((v4 & 0x8000u) != 0)
      v5 = *(_DWORD *)(a1 + 52);
    if ((v4 & 2) != 0)
      v11 = a1 + 50;
    else
      v11 = *(_QWORD *)(a1 + 64);
    v12 = icu::UnicodeString::doCompare(a2 + 40, v8 - v7, v6, v11, v5 & (v5 >> 31), v5 & ~(v5 >> 31));
  }
  v13 = v6 - v7;
  v14 = v10 - v8;
  if (v8 == v7 && v13 == v14 && *(_DWORD *)(a1 + 120) <= *(_DWORD *)(a2 + 120) && !v12)
  {
    v15 = *(unsigned __int8 *)(a1 + 124);
    v16 = *(unsigned __int8 *)(a2 + 124);
    v17 = (v16 >> 1) & 1;
    if ((v16 & 1) == 0)
      v17 = 0;
    if ((v15 & 3) != 0)
      v18 = v17;
    else
      v18 = 1;
    if (v15 == v16)
      return 1;
    else
      return v18;
  }
  else
  {
    return v8 >= v7 && (v13 < v14 || v13 == v14 && *(_DWORD *)(a1 + 120) <= *(_DWORD *)(a2 + 120)) && v12 == 0;
  }
}

uint64_t sub_18BD4EAA0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;

  if (*(_QWORD *)(a1 + 104) && *(int *)(a1 + 112) >= 1)
  {
    v8 = 0;
    do
      sub_18BD7F0D8(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v8++));
    while (v8 < *(int *)(a1 + 112));
  }
  v9 = *a3;
  v10 = (*a3 - 1);
  if (*a3 >= 1)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 80))(a2, (v9 - 1)) >= 0x10000)
      v11 = -2;
    else
      v11 = -1;
    v10 = (v11 + v9);
  }
  v12 = a3[2];
  v13 = (v12 - 1);
  if (v12 >= 1)
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 80))(a2, (v12 - 1)) >= 0x10000)
      v14 = -2;
    else
      v14 = -1;
    v13 = (v14 + v12);
  }
  v31 = v13;
  v15 = *(_QWORD *)(a1 + 8);
  if (v15)
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, uint64_t, _QWORD))(*(_QWORD *)v15 + 56))(v15, a2, &v31, v10, 0);
    result = 0;
    if (v16 != 2)
      return result;
    v13 = v31;
  }
  if ((v13 & 0x80000000) != 0)
  {
    v18 = 1;
  }
  else
  {
    v18 = 1;
    if ((*(int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2) > (int)v13)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v13) < 0x10000)
        v18 = 1;
      else
        v18 = 2;
    }
  }
  if ((*(_BYTE *)(a1 + 124) & 1) != 0 && v31 != (_DWORD)v10)
    return 0;
  v19 = a3[2];
  v31 = a3[2];
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, _QWORD, uint64_t))(*(_QWORD *)v20 + 56))(v20, a2, &v31, a3[3], a4);
    if ((_DWORD)result != 2)
      return result;
    v19 = v31;
  }
  v21 = *(_QWORD *)(a1 + 24);
  if (v21)
  {
    if ((_DWORD)a4 && (_DWORD)v19 == a3[3])
      return 1;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *, _QWORD, uint64_t))(*(_QWORD *)v21 + 56))(v21, a2, &v31, a3[1], a4);
    if ((_DWORD)result != 2)
      return result;
  }
  if ((*(_BYTE *)(a1 + 124) & 2) == 0)
    goto LABEL_35;
  if (v31 != a3[1])
    return 0;
  if (!(_DWORD)a4)
  {
LABEL_35:
    v30 = 0;
    v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, int *))(*(_QWORD *)v22 + 16))(v22, a2, a3[2], v19, &v30);
    v24 = a3[1];
    v25 = a3[2] - v19 + v23;
    v31 += v25;
    v26 = v31;
    v27 = a3[3] + v25;
    a3[3] = v27;
    a3[1] = v24 + v25;
    v28 = uprv_min(v26, v27);
    v29 = uprv_min(v28, v30);
    a3[2] = uprv_max((v18 + v13), v29);
    return 2;
  }
  return 1;
}

icu::ICU_Utility *sub_18BD4ED30(uint64_t a1, icu::ICU_Utility *this, icu::UnicodeMatcher *a3, uint64_t a4, icu::UnicodeString *a5)
{
  uint64_t v8;
  _BOOL4 v9;
  icu::UnicodeString *v10;
  icu::UnicodeString *v11;
  icu::UnicodeString *v12;
  icu::UnicodeString *v13;
  uint64_t v14;
  icu::UnicodeString *v15;
  icu::UnicodeString *v16;
  icu::UnicodeString *v17;
  uint64_t v18;
  icu::UnicodeString *v19;
  uint64_t v20;
  icu::UnicodeString *v21;
  icu::UnicodeString *v22;
  void *v23;
  uint64_t v24;
  icu::UnicodeString *v25;
  icu::UnicodeString *v26;
  icu::UnicodeString *v27;
  void *v28;
  void *v29;
  void *v31;
  _WORD v32[32];
  void (**v33)(icu::UnicodeString *__hidden);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (**v38)(icu::UnicodeString *__hidden);
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v39 = 0u;
  v42 = 0;
  v41 = 0u;
  v40 = 0u;
  v38 = off_1E2256B38;
  LOWORD(v39) = 2;
  v34 = 0u;
  v35 = 0u;
  v37 = 0;
  v36 = 0u;
  v33 = off_1E2256B38;
  LOWORD(v34) = 2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    v9 = 1;
  else
    v9 = *(_QWORD *)(a1 + 24) != 0;
  if ((*(_BYTE *)(a1 + 124) & 1) != 0)
  {
    v32[0] = 94;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)v32, 0, 1);
    v8 = *(_QWORD *)(a1 + 8);
  }
  if (v8)
    v10 = (icu::UnicodeString *)(v8 + 8);
  else
    v10 = 0;
  icu::ICU_Utility::appendToRule(this, v10, a3, (icu::UnicodeString *)&v33, a5);
  if (v9)
  {
    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7B, 1, (int)a3, (icu::UnicodeString *)&v33, v12);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
      v15 = (icu::UnicodeString *)(v14 + 8);
    else
      v15 = 0;
    icu::ICU_Utility::appendToRule(this, v15, a3, (icu::UnicodeString *)&v33, v13);
    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7D, 1, (int)a3, (icu::UnicodeString *)&v33, v16);
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
      v19 = (icu::UnicodeString *)(v18 + 8);
    else
      v19 = 0;
    icu::ICU_Utility::appendToRule(this, v19, a3, (icu::UnicodeString *)&v33, v11);
  }
  v20 = *(_QWORD *)(a1 + 24);
  if (v20)
    v21 = (icu::UnicodeString *)(v20 + 8);
  else
    v21 = 0;
  icu::ICU_Utility::appendToRule(this, v21, a3, (icu::UnicodeString *)&v33, v17);
  if ((*(_BYTE *)(a1 + 124) & 2) != 0)
  {
    v32[0] = 36;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)v32, 0, 1);
  }
  v31 = &unk_18BE29AE6;
  icu::UnicodeString::UnicodeString(v32, 1, &v31);
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)v32, (const icu::UnicodeString *)1, (int)a3, (icu::UnicodeString *)&v33, v22);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v32);
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  v25 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), icu::UnicodeMatcher *))(*(_QWORD *)v24 + 24))(v24, &v38, a3);
  icu::ICU_Utility::appendToRule(this, v25, (const icu::UnicodeString *)1, (int)a3, (icu::UnicodeString *)&v33, v26);
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x3B, 1, (int)a3, (icu::UnicodeString *)&v33, v27);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v33);
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v38);
  return this;
}

uint64_t sub_18BD4EFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 128) = a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2);
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32), a2);
}

icu::UnicodeSet *sub_18BD4F028(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  uint64_t *v2;
  icu::UnicodeSet *v4;
  int v5;
  int v6;
  icu::UnicodeString *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;

  v2 = (uint64_t *)*((unsigned int *)result + 30);
  if ((int)v2 >= 1)
  {
    v4 = result;
    v5 = *((_DWORD *)result + 29);
    v6 = (_DWORD)v2 + v5;
    v7 = (icu::UnicodeSet *)((char *)result + 40);
    do
    {
      v8 = icu::UnicodeString::char32At(v2, v7, v5);
      if (v8 < 0x10000)
        v9 = 1;
      else
        v9 = 2;
      v10 = sub_18BD4AF38(*((_QWORD *)v4 + 16), v8);
      if (v10)
        result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(_QWORD *)v10 + 40))(v10, a2);
      else
        result = icu::UnicodeSet::add(a2, v8);
      v5 += v9;
    }
    while (v5 < v6);
  }
  return result;
}

uint64_t sub_18BD4F0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2);
}

_QWORD *sub_18BD4F108(_QWORD *a1, int *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  *a1 = off_1E2265528;
  v4 = a1 + 1;
  bzero(a1 + 1, 0x418uLL);
  v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (v7)
  {
    v8 = icu::UVector::UVector((uint64_t)v7, (uint64_t)sub_18BD4F1A8, 0, a2);
    if (*a2 <= 0)
      *v4 = v8;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else if (*a2 <= 0)
  {
    *a2 = 7;
  }
  return a1;
}

uint64_t sub_18BD4F1A8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_18BD4F1C0(uint64_t a1, uint64_t a2)
{
  icu::UVector **v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  signed int v13;
  uint64_t *v14;
  uint64_t v15;
  _OWORD v17[4];
  uint64_t v18;
  UErrorCode v19;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (icu::UVector **)(a1 + 8);
  *(_QWORD *)a1 = off_1E2265528;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 1052) = *(_DWORD *)(a2 + 1052);
  memcpy((void *)(a1 + 24), (const void *)(a2 + 24), 0x404uLL);
  v19 = U_ZERO_ERROR;
  v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (v7)
  {
    v8 = icu::UVector::UVector((uint64_t)v7, (uint64_t)sub_18BD4F1A8, 0, (int *)&v19);
    v10 = (uint64_t *)v19;
    if (v19 <= U_ZERO_ERROR)
    {
      *v4 = (icu::UVector *)v8;
      v11 = *(_QWORD *)(a2 + 8);
      if (v11)
      {
        v12 = *(_DWORD *)(v11 + 8);
        if (v12 >= 1)
        {
          v13 = 0;
          do
          {
            v14 = icu::UMemory::operator new(v10, (icu::UMemory *)0x88, v9);
            if (v14)
            {
              v15 = icu::UVector::elementAt(*(icu::UVector **)(a2 + 8), v13);
              sub_18BD4E808((uint64_t)v14, v15);
            }
            else if (v19 <= U_ZERO_ERROR)
            {
              v19 = U_MEMORY_ALLOCATION_ERROR;
            }
            icu::UVector::adoptElement(*v4, v14, &v19);
            ++v13;
            v10 = (uint64_t *)v19;
          }
          while (v13 < v12 && v19 < U_ILLEGAL_ARGUMENT_ERROR);
        }
      }
      if (*(_QWORD *)(a2 + 16) && (int)v10 <= 0)
      {
        v18 = 0;
        memset(v17, 0, sizeof(v17));
        (*(void (**)(uint64_t, _OWORD *, UErrorCode *))(*(_QWORD *)a1 + 32))(a1, v17, &v19);
      }
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t sub_18BD4F334(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E2265528;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uprv_free(*(void **)(a1 + 16));
  return a1;
}

void sub_18BD4F37C(void *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E2265528;
  v2 = *((_QWORD *)a1 + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uprv_free(*((void **)a1 + 2));
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BD4F3C4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 1048);
  if ((int)v2 >= 1)
  {
    v4 = result;
    v5 = 0;
    v6 = 8 * v2;
    do
    {
      result = sub_18BD4EFAC(*(_QWORD *)(*(_QWORD *)(v4 + 16) + v5), a2);
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

uint64_t sub_18BD4F41C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1052);
}

void sub_18BD4F424(uint64_t a1, void *a2, UErrorCode *a3)
{
  int v6;

  icu::UVector::adoptElement(*(icu::UVector **)(a1 + 8), a2, a3);
  if (*(int *)a3 <= 0)
  {
    v6 = (*(uint64_t (**)(void *))(*(_QWORD *)a2 + 16))(a2);
    if (v6 > *(_DWORD *)(a1 + 1052))
      *(_DWORD *)(a1 + 1052) = v6;
    uprv_free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
  }
}

void sub_18BD4F490(uint64_t a1, _QWORD *a2, UErrorCode *a3)
{
  uint64_t v6;
  int v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t j;
  uint64_t k;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD v34[2];
  _OWORD v35[2];
  uint64_t v36;
  void (**v37)(icu::UnicodeString *__hidden);
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 8);
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  icu::UVector::UVector((icu::UVector *)v35, 2 * v6, a3);
  if (*(int *)a3 > 0)
    goto LABEL_36;
  if ((int)v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  v8 = uprv_malloc((2 * v7));
  if (!v8)
    goto LABEL_35;
  v9 = v8;
  if ((int)v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      v11 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      v9[i] = sub_18BD4E8C4(v11);
    }
  }
  for (j = 0; j != 256; ++j)
  {
    *(_DWORD *)(a1 + 4 * j + 24) = DWORD2(v35[0]);
    if ((int)v6 >= 1)
    {
      for (k = 0; v6 != k; ++k)
      {
        if ((__int16)v9[k] < 0)
        {
          v14 = (void *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), k);
          if (sub_18BD4E934((uint64_t)v14))
            goto LABEL_16;
        }
        else if (j == (unsigned __int16)v9[k])
        {
          v14 = (void *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), k);
LABEL_16:
          icu::UVector::addElement((icu::UVector *)v35, v14, a3);
        }
      }
    }
  }
  uprv_free(v9);
  *(_DWORD *)(a1 + 1048) = DWORD2(v35[0]);
  if (*(int *)a3 > 0)
    goto LABEL_36;
  uprv_free(*(void **)(a1 + 16));
  if (!DWORD2(v35[0]))
  {
    *(_QWORD *)(a1 + 16) = 0;
    goto LABEL_36;
  }
  v15 = uprv_malloc(8 * SDWORD2(v35[0]));
  *(_QWORD *)(a1 + 16) = v15;
  if (!v15)
  {
LABEL_35:
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_36;
  }
  if (SDWORD2(v35[0]) >= 1)
  {
    v16 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v16) = icu::UVector::elementAt((icu::UVector *)v35, v16);
      ++v16;
    }
    while (v16 < SDWORD2(v35[0]));
  }
  v17 = 0;
  v18 = *(_DWORD *)(a1 + 24);
  while (1)
  {
    ++v17;
    v19 = a1 + 4 * v17;
    v22 = *(_DWORD *)(v19 + 24);
    v21 = (int *)(v19 + 24);
    LODWORD(v20) = v22;
    if (v18 < v22 - 1)
      break;
LABEL_33:
    v18 = v20;
    if (v17 == 256)
      goto LABEL_36;
  }
  v23 = v18;
  while (1)
  {
    v24 = v23++;
    if (v23 < (int)v20)
      break;
LABEL_32:
    if (v23 >= (int)v20 - 1)
      goto LABEL_33;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24);
  v26 = v23;
  while (1)
  {
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v26);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v27))
      break;
    ++v26;
    v20 = *v21;
    if (v26 >= v20)
      goto LABEL_32;
  }
  *a3 = U_RULE_MASK_ERROR;
  v38 = 0u;
  v39 = 0u;
  v41 = 0;
  v40 = 0u;
  v37 = off_1E2256B38;
  LOWORD(v38) = 2;
  *a2 = -1;
  (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), _QWORD))(*(_QWORD *)v25 + 32))(v25, &v37, 0);
  if ((v38 & 0x8000u) == 0)
    v28 = (unsigned __int16)v38 >> 5;
  else
    v28 = DWORD1(v38);
  v29 = uprv_min(v28, 15);
  icu::UnicodeString::doExtract((char *)&v37, 0, v29, (uint64_t)(a2 + 1), 0);
  v34[1] = a2 + 1;
  *((_WORD *)a2 + v29 + 4) = 0;
  if ((v38 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)&v37);
  }
  else
  {
    if ((v38 & 0x8000u) == 0)
      v30 = (unsigned __int16)v38 >> 5;
    else
      v30 = DWORD1(v38);
    if (v30)
    {
      LOBYTE(v38) = v38 & 0x1F;
      LOWORD(v38) = v38;
    }
  }
  (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), _QWORD))(*(_QWORD *)v27 + 32))(v27, &v37, 0);
  if ((v38 & 0x8000u) == 0)
    v31 = (unsigned __int16)v38 >> 5;
  else
    v31 = DWORD1(v38);
  v32 = uprv_min(v31, 15);
  v33 = (uint64_t)(a2 + 5);
  icu::UnicodeString::doExtract((char *)&v37, 0, v32, v33, 0);
  v34[0] = v33;
  *(_WORD *)(v33 + 2 * v32) = 0;
  icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v37);
LABEL_36:
  icu::UVector::~UVector((icu::UVector *)v35);
}

uint64_t sub_18BD4F858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v8;
  uint64_t v9;
  int *v10;
  int v11;
  BOOL v12;
  uint64_t result;
  int v14;

  v8 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 80))(a2, *(unsigned int *)(a3 + 8));
  v9 = *(int *)(a1 + 24 + 4 * v8);
  v10 = (int *)(a1 + 24 + 4 * (v8 + 1));
  if ((int)v9 >= *v10)
  {
LABEL_5:
    v12 = (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 80))(a2, *(unsigned int *)(a3 + 8)) >= 0x10000;
    result = 1;
    if (v12)
      v14 = 2;
    else
      v14 = 1;
    *(_DWORD *)(a3 + 8) += v14;
  }
  else
  {
    while (1)
    {
      v11 = sub_18BD4EAA0(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v9), a2, (int *)a3, a4);
      if (v11 == 1)
        return 0;
      if (v11 == 2)
        return 1;
      if (++v9 >= *v10)
        goto LABEL_5;
    }
  }
  return result;
}

icu::UnicodeString *sub_18BD4F938(uint64_t a1, icu::UnicodeString *this, uint64_t a3)
{
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int i;
  uint64_t v10;
  __int16 v12;

  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = *((unsigned __int16 *)this + 4);
  if ((v7 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *((_DWORD *)this + 3);
    if (v8)
      *((_WORD *)this + 4) &= 0x1Fu;
  }
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if (i)
      {
        v12 = 10;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v12, 0, 1);
      }
      v10 = icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      (*(void (**)(uint64_t, icu::UnicodeString *, uint64_t))(*(_QWORD *)v10 + 32))(v10, this, a3);
    }
  }
  return this;
}

icu::UnicodeSet *sub_18BD4FA0C(uint64_t a1, icu::UnicodeSet *this, int a3)
{
  int v6;
  unsigned int i;
  icu::UnicodeSet *v8;

  icu::UnicodeSet::clear(this);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      v8 = (icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(a1 + 8), i);
      if (a3)
        sub_18BD4F0D0((uint64_t)v8, (uint64_t)this);
      else
        sub_18BD4F028(v8, this);
    }
  }
  return this;
}

void *icu::RuleBasedTimeZone::getStaticClassID(icu::RuleBasedTimeZone *this)
{
  return &unk_1EE009CC8;
}

void *icu::RuleBasedTimeZone::getDynamicClassID(icu::RuleBasedTimeZone *this)
{
  return &unk_1EE009CC8;
}

icu::TimeZone *icu::RuleBasedTimeZone::RuleBasedTimeZone(icu::RuleBasedTimeZone *this, UChar **a2, icu::InitialTimeZoneRule *a3)
{
  icu::TimeZone *result;

  result = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(_QWORD *)result = off_1E2265580;
  *((_QWORD *)result + 9) = a3;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = 0;
  *((_QWORD *)result + 12) = 0;
  *((_BYTE *)result + 104) = 0;
  return result;
}

{
  icu::TimeZone *result;

  result = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(_QWORD *)result = off_1E2265580;
  *((_QWORD *)result + 9) = a3;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = 0;
  *((_QWORD *)result + 12) = 0;
  *((_BYTE *)result + 104) = 0;
  return result;
}

icu::RuleBasedTimeZone *icu::RuleBasedTimeZone::RuleBasedTimeZone(icu::RuleBasedTimeZone *this, const icu::RuleBasedTimeZone *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  UErrorCode v7;

  *(_QWORD *)icu::BasicTimeZone::BasicTimeZone(this, (UChar **)a2) = off_1E2265580;
  *((_QWORD *)this + 9) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 9) + 24))(*((_QWORD *)a2 + 9));
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 0;
  *((_QWORD *)this + 10) = icu::RuleBasedTimeZone::copyRules(*((icu::UVector **)a2 + 10), v4);
  *((_QWORD *)this + 11) = icu::RuleBasedTimeZone::copyRules(*((icu::UVector **)a2 + 11), v5);
  if (*((_BYTE *)a2 + 104))
  {
    v7 = U_ZERO_ERROR;
    icu::RuleBasedTimeZone::complete((uint64_t)this, &v7);
  }
  return this;
}

icu::UVector *icu::RuleBasedTimeZone::copyRules@<X0>(icu::UVector *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  icu::UVector *v6;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  UErrorCode v12;

  if (!a1)
    return 0;
  v12 = U_ZERO_ERROR;
  v4 = *((unsigned int *)a1 + 2);
  v5 = icu::UMemory::operator new(a2, (icu::UMemory *)0x28, (unint64_t)a1);
  v6 = (icu::UVector *)v5;
  if (v5)
  {
    icu::UVector::UVector(v5, uprv_deleteUObject, 0, v4, &v12);
    if (v12 <= U_ZERO_ERROR)
    {
      if ((int)v4 < 1)
        return v6;
      v8 = 0;
      while (1)
      {
        v9 = icu::UVector::elementAt(a1, v8);
        v10 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
        if (!v10 && v12 <= U_ZERO_ERROR)
          v12 = U_MEMORY_ALLOCATION_ERROR;
        icu::UVector::adoptElement(v6, v10, &v12);
        if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
          break;
        if ((_DWORD)v4 == ++v8)
          return v6;
      }
    }
    (*(void (**)(icu::UVector *))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  return v6;
}

uint64_t icu::RuleBasedTimeZone::complete(uint64_t this, UErrorCode *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  icu::TimeZoneRule *v6;
  double v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t RawOffset;
  uint64_t DSTSavings;
  unint64_t v13;
  uint64_t v14;
  double v15;
  icu::UVector **v16;
  UChar **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  unsigned __int8 *v23;
  icu::TimeZoneRule *v24;
  unsigned int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  double *v33;
  uint64_t v34;
  int v35;
  void *v36;
  void *v37;
  void *v38;
  icu::TimeZoneRule *v39;
  icu::TimeZoneRule *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t *v47;
  BOOL v48;
  UErrorCode v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  icu::TimeZoneRule *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  UChar **v67;
  icu::UVector **v68;
  double v69;
  double v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  double v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return this;
  v2 = this;
  if (*(_BYTE *)(this + 104))
    return this;
  this = *(_QWORD *)(this + 88);
  if (this)
  {
    if (*(_DWORD *)(this + 8) != 2)
    {
      *a2 = U_INVALID_STATE_ERROR;
      return this;
    }
    v5 = v2 + 80;
    v4 = *(_QWORD *)(v2 + 80);
    if (!v4)
    {
      v6 = *(icu::TimeZoneRule **)(v2 + 72);
      v7 = -1.84303903e17;
      goto LABEL_60;
    }
  }
  else
  {
    v5 = v2 + 80;
    v4 = *(_QWORD *)(v2 + 80);
    if (!v4)
    {
LABEL_92:
      *(_BYTE *)(v2 + 104) = 1;
      return this;
    }
  }
  v68 = (icu::UVector **)v5;
  v6 = *(icu::TimeZoneRule **)(v2 + 72);
  v8 = *(unsigned int *)(v4 + 8);
  if ((int)v8 < 1)
  {
    v7 = -1.84303903e17;
    goto LABEL_59;
  }
  v9 = (unsigned __int8 *)uprv_malloc(*(unsigned int *)(v4 + 8));
  v10 = v9;
  if (!v9)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_97;
  }
  bzero(v9, v8);
  v7 = -1.84303903e17;
  while (2)
  {
    RawOffset = icu::TimeZoneRule::getRawOffset(v6);
    DSTSavings = icu::TimeZoneRule::getDSTSavings(v6);
    v79 = 0;
    v77 = 0u;
    v78 = 0u;
    v76 = 0u;
    v75 = COERCE_DOUBLE(off_1E2256B38);
    LOWORD(v76) = 2;
    v74 = 0;
    v72 = 0u;
    v73 = 0u;
    v71 = 0u;
    v69 = 0.0;
    v70 = COERCE_DOUBLE(off_1E2256B38);
    LOWORD(v71) = 2;
    icu::TimeZoneRule::getName((UChar **)v6, (UChar **)&v75);
    v14 = 0;
    v67 = 0;
    v15 = 1.83882169e17;
    v16 = v68;
    do
    {
      if (v10[v14])
        goto LABEL_13;
      v17 = (UChar **)icu::UVector::elementAt(*v16, v14);
      if (!(*((unsigned int (**)(UChar **, uint64_t, uint64_t, _QWORD, double *, double))*v17 + 9))(v17, RawOffset, DSTSavings, 0, &v69, v7))
      {
        v10[v14] = 1;
        goto LABEL_13;
      }
      icu::TimeZoneRule::getName(v17, (UChar **)&v70);
      if (((*((uint64_t (**)(UChar **, icu::TimeZoneRule *))*v17 + 4))(v17, v6) & 1) != 0)
        goto LABEL_13;
      if ((v71 & 1) != 0)
      {
        if ((v76 & 1) != 0)
          goto LABEL_30;
      }
      else
      {
        if ((v71 & 0x8000u) == 0)
          v18 = (unsigned __int16)v71 >> 5;
        else
          v18 = DWORD1(v71);
        if ((v76 & 0x8000u) == 0)
          v19 = (unsigned __int16)v76 >> 5;
        else
          v19 = DWORD1(v76);
        if ((v76 & 1) == 0
          && v18 == v19
          && icu::UnicodeString::doEquals((icu::UnicodeString *)&v70, (const icu::UnicodeString *)&v75, v18))
        {
LABEL_30:
          v20 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v17);
          v48 = v20 == icu::TimeZoneRule::getRawOffset(v6);
          v16 = v68;
          if (v48)
          {
            v21 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v17);
            v48 = v21 == icu::TimeZoneRule::getDSTSavings(v6);
            v16 = v68;
            if (v48)
              goto LABEL_13;
          }
        }
      }
      if (v69 < v15)
      {
        v15 = v69;
        v67 = v17;
      }
LABEL_13:
      ++v14;
    }
    while (v8 != v14);
    v22 = (char *)v8;
    v23 = v10;
    v24 = (icu::TimeZoneRule *)v67;
    if (!v67)
    {
      while (*v23++)
      {
        if (!--v22)
          goto LABEL_58;
      }
    }
    v22 = *(char **)(v2 + 88);
    if (v22)
    {
      v26 = 0;
      LOBYTE(v22) = 1;
      do
      {
        v27 = (char)v22;
        v28 = icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), v26);
        if (((*(uint64_t (**)(uint64_t, icu::TimeZoneRule *))(*(_QWORD *)v28 + 32))(v28, v6) & 1) == 0)
        {
          v29 = icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), v26);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _QWORD, double *, double))(*(_QWORD *)v29 + 72))(v29, RawOffset, DSTSavings, 0, &v69, v7))
          {
            if (v69 < v15)
            {
              v15 = v69;
              v24 = (icu::TimeZoneRule *)v29;
            }
          }
        }
        v22 = 0;
        v26 = 1;
      }
      while ((v27 & 1) != 0);
    }
    if (v24)
    {
      v30 = *(uint64_t **)(v2 + 96);
      if (!v30)
      {
        v31 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v13);
        if (v31)
        {
          v32 = icu::UVector::UVector((uint64_t)v31, (uint64_t)sub_18BD508EC, 0, (int *)a2);
          v30 = (uint64_t *)*(unsigned int *)a2;
          if ((int)v30 < 1)
          {
            *(_QWORD *)(v2 + 96) = v32;
            goto LABEL_51;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
LABEL_96:
          icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)&v70);
          icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v75);
          goto LABEL_97;
        }
        v34 = *(unsigned int *)a2;
        if ((int)v34 > 0)
          goto LABEL_96;
LABEL_94:
        v34 = 7;
        *a2 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_96;
      }
LABEL_51:
      v33 = (double *)icu::UMemory::operator new(v30, (icu::UMemory *)0x18, v13);
      v34 = *(unsigned int *)a2;
      if (!v33 && (int)v34 <= 0)
        goto LABEL_94;
      if ((int)v34 >= 1)
      {
        if (v33)
          icu::UMemory::operator delete(v33);
        goto LABEL_96;
      }
      *v33 = v15;
      *((_QWORD *)v33 + 1) = v6;
      *((_QWORD *)v33 + 2) = v24;
      icu::UVector::adoptElement(*(icu::UVector **)(v2 + 96), v33, a2);
      v35 = *a2;
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v70);
      icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v75);
      v7 = v15;
      v6 = v24;
      if (v35 >= 1)
      {
LABEL_97:
        uprv_free(v10);
        goto LABEL_98;
      }
      continue;
    }
    break;
  }
LABEL_58:
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v70);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v75);
  uprv_free(v10);
  this = *(_QWORD *)(v2 + 88);
LABEL_59:
  if (!this)
    goto LABEL_92;
LABEL_60:
  if (*(_QWORD *)(v2 + 96))
    goto LABEL_61;
  v50 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, (unint64_t)a2);
  if (!v50)
  {
    if (*(int *)a2 > 0)
      goto LABEL_98;
    v49 = U_MEMORY_ALLOCATION_ERROR;
LABEL_67:
    *a2 = v49;
    goto LABEL_98;
  }
  v51 = icu::UVector::UVector((uint64_t)v50, (uint64_t)sub_18BD508EC, 0, (int *)a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    goto LABEL_98;
  }
  *(_QWORD *)(v2 + 96) = v51;
  this = *(_QWORD *)(v2 + 88);
LABEL_61:
  v39 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)this, 0);
  v40 = (icu::TimeZoneRule *)icu::UVector::elementAt(*(icu::UVector **)(v2 + 88), 1u);
  v75 = 0.0;
  v70 = 0.0;
  v41 = icu::TimeZoneRule::getRawOffset(v6);
  v42 = icu::TimeZoneRule::getDSTSavings(v6);
  LODWORD(v41) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, _QWORD, double *, double))(*(_QWORD *)v39 + 72))(v39, v41, v42, 0, &v75, v7);
  v43 = icu::TimeZoneRule::getRawOffset(v6);
  v44 = icu::TimeZoneRule::getDSTSavings(v6);
  v45 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, _QWORD, double *, double))(*(_QWORD *)v40 + 72))(v40, v43, v44, 0, &v70, v7);
  if ((_DWORD)v41)
    v48 = v45 == 0;
  else
    v48 = 1;
  if (v48)
  {
    v49 = U_INVALID_STATE_ERROR;
    goto LABEL_67;
  }
  v52 = icu::UMemory::operator new(v47, (icu::UMemory *)0x18, v46);
  v55 = v52;
  if (!v52)
  {
    v54 = *(unsigned int *)a2;
    if ((int)v54 <= 0)
    {
      v54 = 7;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  v56 = icu::UMemory::operator new((uint64_t *)v54, (icu::UMemory *)0x18, v53);
  v57 = v56;
  v58 = *a2;
  if (!v56 && v58 <= 0)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_81;
  }
  if (v58 <= 0)
  {
    if (v75 >= v70)
    {
      *(double *)v55 = v70;
      v55[1] = (uint64_t)v6;
      v55[2] = (uint64_t)v40;
      v63 = v70;
      v64 = icu::TimeZoneRule::getRawOffset(v40);
      v65 = icu::TimeZoneRule::getDSTSavings(v40);
      (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, _QWORD, uint64_t *, double))(*(_QWORD *)v39 + 72))(v39, v64, v65, 0, v57, v63);
      v62 = v40;
      v40 = v39;
    }
    else
    {
      *(double *)v55 = v75;
      v55[1] = (uint64_t)v6;
      v55[2] = (uint64_t)v39;
      v59 = v75;
      v60 = icu::TimeZoneRule::getRawOffset(v39);
      v61 = icu::TimeZoneRule::getDSTSavings(v39);
      (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, _QWORD, uint64_t *, double))(*(_QWORD *)v40 + 72))(v40, v60, v61, 0, v57, v59);
      v62 = v39;
    }
    v57[1] = (uint64_t)v62;
    v57[2] = (uint64_t)v40;
    icu::UVector::adoptElement(*(icu::UVector **)(v2 + 96), v55, a2);
    this = icu::UVector::adoptElement(*(icu::UVector **)(v2 + 96), v57, a2);
    if (*(int *)a2 > 0)
      goto LABEL_98;
    goto LABEL_92;
  }
  if (v56)
    icu::UMemory::operator delete(v56);
LABEL_81:
  if (v55)
    icu::UMemory::operator delete(v55);
LABEL_98:
  this = *(_QWORD *)(v2 + 96);
  if (this)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  return this;
}

void icu::RuleBasedTimeZone::~RuleBasedTimeZone(icu::RuleBasedTimeZone *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2265580;
  v2 = *((_QWORD *)this + 12);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 12) = 0;
  icu::RuleBasedTimeZone::deleteRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;

  icu::RuleBasedTimeZone::~RuleBasedTimeZone(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::RuleBasedTimeZone::deleteTransitions(icu::RuleBasedTimeZone *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t icu::RuleBasedTimeZone::deleteRules(icu::RuleBasedTimeZone *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 9) = 0;
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 10) = 0;
  }
  result = *((_QWORD *)this + 11);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 11) = 0;
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1))
  {
    icu::TimeZone::operator=(a1, a2);
    icu::RuleBasedTimeZone::deleteRules((icu::RuleBasedTimeZone *)a1);
    *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72));
    *(_QWORD *)(a1 + 80) = icu::RuleBasedTimeZone::copyRules(*(icu::UVector **)(a2 + 80), v4);
    *(_QWORD *)(a1 + 88) = icu::RuleBasedTimeZone::copyRules(*(icu::UVector **)(a2 + 88), v5);
    v6 = *(_QWORD *)(a1 + 96);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(a1 + 96) = 0;
    *(_BYTE *)(a1 + 104) = 0;
  }
  return a1;
}

uint64_t icu::RuleBasedTimeZone::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
  {
    result = icu::TimeZone::operator==(a1, a2);
    if ((_DWORD)result)
      return ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72)) & 1) == 0&& sub_18BD505EC(*(_QWORD *)(a1 + 80), *(icu::UVector **)(a2 + 80))&& sub_18BD505EC(*(_QWORD *)(a1 + 88), *(icu::UVector **)(a2 + 88));
  }
  return result;
}

BOOL sub_18BD505EC(unint64_t this, icu::UVector *a2)
{
  _BOOL8 result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int v9;
  signed int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if (!(this | (unint64_t)a2))
    return 1;
  result = 0;
  if (this && a2)
  {
    v5 = *(_DWORD *)(this + 8);
    if (v5 == *((_DWORD *)a2 + 2))
    {
      if (v5 < 1)
      {
        return 1;
      }
      else
      {
        v6 = icu::UVector::elementAt((icu::UVector *)this, 0);
        v7 = icu::UVector::elementAt(a2, 0);
        v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, v7);
        result = 0;
        if ((v8 & 1) == 0)
        {
          v9 = 1;
          do
          {
            v10 = v9;
            if (v5 == v9)
              break;
            v11 = icu::UVector::elementAt((icu::UVector *)this, v9);
            v12 = icu::UVector::elementAt(a2, v10);
            v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 40))(v11, v12);
            v9 = v10 + 1;
          }
          while (!v13);
          return v10 >= v5;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
}

uint64_t *icu::RuleBasedTimeZone::addTransitionRule(uint64_t *this, icu::TimeZoneRule *lpsrc, UErrorCode *a3)
{
  uint64_t v4;
  uint64_t *v6;
  icu::AnnualTimeZoneRule *v7;
  int EndYear;
  int *v9;
  UErrorCode v10;
  uint64_t *v11;

  v4 = *(unsigned int *)a3;
  if ((int)v4 <= 0)
  {
    v6 = this;
    if (lpsrc
    {
      v9 = (int *)v6[11];
      if (v9)
      {
        if (v9[2] >= 2)
        {
          v10 = U_INVALID_STATE_ERROR;
LABEL_10:
          *a3 = v10;
          return (uint64_t *)(*(uint64_t (**)(icu::TimeZoneRule *))(*(_QWORD *)lpsrc + 8))(lpsrc);
        }
      }
      else
      {
        v11 = icu::UMemory::operator new((uint64_t *)0x7FFFFFFF, (icu::UMemory *)0x28, (unint64_t)lpsrc);
        if (!v11)
        {
          if (*(int *)a3 > 0)
            return (uint64_t *)(*(uint64_t (**)(icu::TimeZoneRule *))(*(_QWORD *)lpsrc + 8))(lpsrc);
          v10 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_10;
        }
        v9 = (int *)icu::UVector::UVector((uint64_t)v11, (uint64_t)uprv_deleteUObject, 0, (int *)a3);
        if (*(int *)a3 > 0)
        {
          (*(void (**)(int *))(*(_QWORD *)v9 + 8))(v9);
          return (uint64_t *)(*(uint64_t (**)(icu::TimeZoneRule *))(*(_QWORD *)lpsrc + 8))(lpsrc);
        }
        v6[11] = (uint64_t)v9;
      }
    }
    else
    {
      v9 = (int *)v6[10];
      if (!v9)
      {
        this = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x28, (unint64_t)lpsrc);
        if (!this)
        {
          if (*(int *)a3 <= 0)
            *a3 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_2;
        }
        v9 = (int *)icu::UVector::UVector((uint64_t)this, (uint64_t)uprv_deleteUObject, 0, (int *)a3);
        if (*(int *)a3 > 0)
        {
          this = (uint64_t *)(*(uint64_t (**)(int *))(*(_QWORD *)v9 + 8))(v9);
          goto LABEL_2;
        }
        v6[10] = (uint64_t)v9;
      }
    }
    this = (uint64_t *)icu::UVector::adoptElement((icu::UVector *)v9, lpsrc, a3);
    *((_BYTE *)v6 + 104) = 0;
    return this;
  }
LABEL_2:
  if (lpsrc)
    return (uint64_t *)(*(uint64_t (**)(icu::TimeZoneRule *))(*(_QWORD *)lpsrc + 8))(lpsrc);
  return this;
}

void icu::RuleBasedTimeZone::completeConst(icu::RuleBasedTimeZone *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_1EE009CD0);
    if (!*((_BYTE *)this + 104))
      icu::RuleBasedTimeZone::complete((uint64_t)this, a2);
    umtx_unlock((std::mutex **)&unk_1EE009CD0);
  }
}

void sub_18BD508EC(void *a1)
{
  if (a1)
    icu::UMemory::operator delete(a1);
}

icu::RuleBasedTimeZone *icu::RuleBasedTimeZone::clone@<X0>(icu::RuleBasedTimeZone *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::RuleBasedTimeZone *result;

  result = (icu::RuleBasedTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x70, a2);
  if (result)
    return icu::RuleBasedTimeZone::RuleBasedTimeZone(result, this);
  return result;
}

uint64_t icu::RuleBasedTimeZone::getOffset(icu::RuleBasedTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (*(int *)a8 > 0)
    return 0;
  if (a4 >= 0xC)
  {
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }
  return (*(uint64_t (**)(icu::RuleBasedTimeZone *))(*(_QWORD *)this + 40))(this);
}

uint64_t icu::RuleBasedTimeZone::getOffset(icu::RuleBasedTimeZone *this, int a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  int v12;
  double v13;
  int v14[2];

  if (*(int *)a9 > 0)
    return 0;
  if (a2)
    v12 = a3;
  else
    v12 = 1 - a3;
  *(_QWORD *)v14 = 0;
  v13 = sub_18BCE8360(v12, a4, a5);
  icu::RuleBasedTimeZone::getOffsetInternal(this, (double)a7 + v13 * 86400000.0, 1, 3, 1, &v14[1], v14, a9);
  if (*(int *)a9 <= 0)
    return (v14[0] + v14[1]);
  else
    return 0;
}

void icu::RuleBasedTimeZone::getOffsetInternal(icu::RuleBasedTimeZone *this, double a2, int a3, int a4, char a5, int *a6, int *a7, UErrorCode *a8)
{
  icu::UVector *v11;
  uint64_t v16;
  icu::UVector **v17;
  icu::UVector *v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  icu::UVector *RuleInFinal;
  uint64_t v23;

  *a6 = 0;
  *a7 = 0;
  if (*(int *)a8 <= 0)
  {
    if (!*((_BYTE *)this + 104))
    {
      *a8 = U_INVALID_STATE_ERROR;
      return;
    }
    v11 = (icu::UVector *)*((_QWORD *)this + 12);
    if (v11
      && (v16 = icu::UVector::elementAt(v11, 0),
          icu::RuleBasedTimeZone::getTransitionTime((uint64_t)this, v16, a3, a4, a5) <= a2))
    {
      v18 = (icu::UVector *)*((_QWORD *)this + 12);
      v19 = *((_DWORD *)v18 + 2);
      v20 = v19 - 1;
      v21 = icu::UVector::elementAt(v18, v19 - 1);
      if (icu::RuleBasedTimeZone::getTransitionTime((uint64_t)this, v21, a3, a4, a5) >= a2)
      {
        if (v19 >= 1)
        {
          while (1)
          {
            v23 = icu::UVector::elementAt(*((icu::UVector **)this + 12), --v19);
            if (icu::RuleBasedTimeZone::getTransitionTime((uint64_t)this, v23, a3, a4, a5) <= a2)
              break;
            if (v19 <= 0)
            {
              v20 = -1;
              goto LABEL_17;
            }
          }
          v20 = v19;
        }
      }
      else if (*((_QWORD *)this + 11))
      {
        RuleInFinal = icu::RuleBasedTimeZone::findRuleInFinal(this, a2, a3, a4, a5);
        if (RuleInFinal)
          goto LABEL_19;
      }
LABEL_17:
      v17 = (icu::UVector **)(icu::UVector::elementAt(*((icu::UVector **)this + 12), v20) + 16);
    }
    else
    {
      v17 = (icu::UVector **)((char *)this + 72);
    }
    RuleInFinal = *v17;
    if (!*v17)
      return;
LABEL_19:
    *a6 = icu::TimeZoneRule::getRawOffset(RuleInFinal);
    *a7 = icu::TimeZoneRule::getDSTSavings(RuleInFinal);
  }
}

void icu::RuleBasedTimeZone::getOffset(icu::RuleBasedTimeZone *this, double a2, int a3, int *a4, int *a5, UErrorCode *a6)
{
  icu::RuleBasedTimeZone::getOffsetInternal(this, a2, a3, 4, 12, a4, a5, a6);
}

void icu::RuleBasedTimeZone::getOffsetFromLocal(icu::RuleBasedTimeZone *a1, int a2, char a3, int *a4, int *a5, UErrorCode *a6, double a7)
{
  icu::RuleBasedTimeZone::getOffsetInternal(a1, a7, 1, a2, a3, a4, a5, a6);
}

double icu::RuleBasedTimeZone::getTransitionTime(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  double v5;
  int RawOffset;
  int DSTSavings;
  int v11;
  icu::RuleBasedTimeZone *v12;

  v5 = *(double *)a2;
  if (a3)
  {
    RawOffset = icu::TimeZoneRule::getRawOffset(*(icu::TimeZoneRule **)(a2 + 8));
    DSTSavings = icu::TimeZoneRule::getDSTSavings(*(icu::TimeZoneRule **)(a2 + 8));
    v11 = icu::TimeZoneRule::getRawOffset(*(icu::TimeZoneRule **)(a2 + 16));
    v12 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(*(icu::TimeZoneRule **)(a2 + 16));
    return v5 + (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v12, RawOffset, DSTSavings, v11, (int)v12, a4, a5);
  }
  return v5;
}

icu::UVector *icu::RuleBasedTimeZone::findRuleInFinal(icu::RuleBasedTimeZone *this, double a2, int a3, int a4, char a5)
{
  icu::UVector *result;
  icu::TimeZoneRule *v11;
  icu::TimeZoneRule *v12;
  BOOL v13;
  icu::TimeZoneRule *v14;
  double v15;
  int RawOffset;
  int DSTSavings;
  int v18;
  icu::RuleBasedTimeZone *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  icu::RuleBasedTimeZone *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  icu::TimeZoneRule *v31;
  double v32;
  double v33;

  result = (icu::UVector *)*((_QWORD *)this + 11);
  if (result)
  {
    v11 = (icu::TimeZoneRule *)icu::UVector::elementAt(result, 0);
    v12 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (v13)
    {
      return 0;
    }
    else
    {
      v14 = v12;
      v32 = 0.0;
      v33 = 0.0;
      v15 = a2;
      if (a3)
      {
        RawOffset = icu::TimeZoneRule::getRawOffset(v12);
        DSTSavings = icu::TimeZoneRule::getDSTSavings(v14);
        v18 = icu::TimeZoneRule::getRawOffset(v11);
        v19 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(v11);
        v15 = a2 - (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v19, RawOffset, DSTSavings, v18, (int)v19, a4, a5);
      }
      v20 = icu::TimeZoneRule::getRawOffset(v14);
      v21 = icu::TimeZoneRule::getDSTSavings(v14);
      v22 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v11 + 80))(v11, v20, v21, 1, &v33, v15);
      if (a3)
      {
        v23 = icu::TimeZoneRule::getRawOffset(v11);
        v24 = icu::TimeZoneRule::getDSTSavings(v11);
        v25 = icu::TimeZoneRule::getRawOffset(v14);
        v26 = (icu::RuleBasedTimeZone *)icu::TimeZoneRule::getDSTSavings(v14);
        a2 = a2 - (double)(int)icu::RuleBasedTimeZone::getLocalDelta(v26, v23, v24, v25, (int)v26, a4, a5);
      }
      v27 = icu::TimeZoneRule::getRawOffset(v11);
      v28 = icu::TimeZoneRule::getDSTSavings(v11);
      v29 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v14 + 80))(v14, v27, v28, 1, &v32, a2);
      if (v22)
        v30 = v29 == 0;
      else
        v30 = 1;
      if (v30)
      {
        if (v29)
          v31 = v14;
        else
          v31 = 0;
        if (v22)
          return v11;
        else
          return v31;
      }
      else if (v33 <= v32)
      {
        return v14;
      }
      else
      {
        return v11;
      }
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getRawOffset(icu::RuleBasedTimeZone *this)
{
  double UTCtime;
  int v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  UTCtime = uprv_getUTCtime();
  (*(void (**)(icu::RuleBasedTimeZone *, _QWORD, uint64_t *, int *, char *, double))(*(_QWORD *)this + 48))(this, 0, &v5, &v4, (char *)&v5 + 4, UTCtime);
  return v5;
}

BOOL icu::RuleBasedTimeZone::useDaylightTime(icu::RuleBasedTimeZone *this)
{
  double UTCtime;
  _BOOL8 result;
  icu::TimeZoneRule *v4;
  icu::TimeZoneRule *v5;
  double v6;
  int v7;
  int v8;
  int v9;

  v9 = 0;
  UTCtime = uprv_getUTCtime();
  v7 = 0;
  v8 = 0;
  (*(void (**)(icu::RuleBasedTimeZone *, _QWORD, int *, int *, int *))(*(_QWORD *)this + 48))(this, 0, &v8, &v7, &v9);
  result = 1;
  if (!v7)
  {
    v4 = 0;
    if (!icu::RuleBasedTimeZone::findNext(this, UTCtime, 0, &v6, &v5, &v4)
      || !icu::TimeZoneRule::getDSTSavings(v4))
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::findNext(icu::RuleBasedTimeZone *this, double a2, uint64_t a3, double *a4, icu::TimeZoneRule **a5, icu::TimeZoneRule **a6)
{
  uint64_t result;
  uint64_t v13;
  double v14;
  icu::TimeZoneRule *v15;
  icu::TimeZoneRule *v16;
  int v17;
  int v18;
  int v19;
  icu::UVector *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  double *v24;
  BOOL v25;
  _BOOL4 v26;
  icu::TimeZoneRule *v28;
  uint64_t RawOffset;
  uint64_t DSTSavings;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  _BOOL4 v35;
  double v36;
  double v37;

  result = *((_QWORD *)this + 12);
  if (!result)
    return result;
  v13 = icu::UVector::elementAt((icu::UVector *)result, 0);
  v14 = *(double *)v13;
  if (*(double *)v13 > a2 || (_DWORD)a3 && v14 == a2)
  {
    v15 = *(icu::TimeZoneRule **)(v13 + 8);
    v16 = *(icu::TimeZoneRule **)(v13 + 16);
  }
  else
  {
    v20 = (icu::UVector *)*((_QWORD *)this + 12);
    v21 = *((_DWORD *)v20 + 2);
    v22 = icu::UVector::elementAt(v20, v21 - 1);
    v14 = *(double *)v22;
    if (!(_DWORD)a3 || v14 != a2)
    {
      if (v14 <= a2)
      {
        result = *((_QWORD *)this + 11);
        if (!result)
          return result;
        v16 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)result, 0);
        v28 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
        v36 = 0.0;
        v37 = 0.0;
        RawOffset = icu::TimeZoneRule::getRawOffset(v28);
        DSTSavings = icu::TimeZoneRule::getDSTSavings(v28);
        LODWORD(RawOffset) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v16 + 72))(v16, RawOffset, DSTSavings, a3, &v37, a2);
        v31 = icu::TimeZoneRule::getRawOffset(v16);
        v32 = icu::TimeZoneRule::getDSTSavings(v16);
        v33 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v28 + 72))(v28, v31, v32, a3, &v36, a2);
        if (!(RawOffset | v33))
          return 0;
        v17 = 0;
        v34 = v33 != 0;
        v35 = v37 >= v36;
        if (v34 && v35)
          v14 = v36;
        else
          v14 = v37;
        if (v34 && v35)
          v15 = v16;
        else
          v15 = v28;
        if (v34 && v35)
          v16 = v28;
        goto LABEL_7;
      }
      v23 = v21 - 3;
      if (v21 >= 3)
      {
        v24 = (double *)icu::UVector::elementAt(*((icu::UVector **)this + 12), v21 - 2);
        v25 = *v24 == a2 && (_DWORD)a3 == 0;
        if (*v24 >= a2 && !v25)
        {
          do
          {
            v22 = (uint64_t)v24;
            if ((int)(v23 + 1) < 2)
              break;
            v24 = (double *)icu::UVector::elementAt(*((icu::UVector **)this + 12), v23--);
            v26 = *v24 == a2 && (_DWORD)a3 == 0;
          }
          while (*v24 >= a2 && !v26);
        }
        v14 = *(double *)v22;
      }
    }
    v15 = *(icu::TimeZoneRule **)(v22 + 8);
    v16 = *(icu::TimeZoneRule **)(v22 + 16);
  }
  v17 = 1;
LABEL_7:
  v18 = icu::TimeZoneRule::getRawOffset(v15);
  if (v18 == icu::TimeZoneRule::getRawOffset(v16))
  {
    v19 = icu::TimeZoneRule::getDSTSavings(v15);
    if (v19 == icu::TimeZoneRule::getDSTSavings(v16))
    {
      if (v17)
        return icu::RuleBasedTimeZone::findNext(this, v14, 0, a4, a5, a6);
      return 0;
    }
  }
  *a4 = v14;
  *a5 = v15;
  result = 1;
  *a6 = v16;
  return result;
}

BOOL icu::RuleBasedTimeZone::inDaylightTime(icu::RuleBasedTimeZone *this, double a2, UErrorCode *a3)
{
  int v4;
  int v5;

  if (*(int *)a3 > 0)
    return 0;
  v5 = 0;
  v4 = 0;
  (*(void (**)(icu::RuleBasedTimeZone *, _QWORD, int *, int *, UErrorCode *, double))(*(_QWORD *)this + 48))(this, 0, &v5, &v4, a3, a2);
  return v4 != 0;
}

uint64_t icu::RuleBasedTimeZone::hasSameRules(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
    return ((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 40))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72)) & 1) == 0&& sub_18BD505EC(*(_QWORD *)(a1 + 80), *(icu::UVector **)(a2 + 80))&& sub_18BD505EC(*(_QWORD *)(a1 + 88), *(icu::UVector **)(a2 + 88));
  return result;
}

uint64_t icu::RuleBasedTimeZone::getNextTransition(icu::RuleBasedTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t result;
  icu::TimeZoneRule *v9;
  icu::TimeZoneRule *v10;
  double v11;
  UErrorCode v12;

  v12 = U_ZERO_ERROR;
  icu::RuleBasedTimeZone::completeConst(this, &v12);
  result = 0;
  if (v12 <= U_ZERO_ERROR)
  {
    v10 = 0;
    v11 = 0.0;
    v9 = 0;
    result = icu::RuleBasedTimeZone::findNext(this, a2, a3, &v11, &v10, &v9);
    if ((_DWORD)result)
    {
      icu::TimeZoneTransition::setTime((uint64_t)a4, v11);
      icu::TimeZoneTransition::setFrom(a4, v10);
      icu::TimeZoneTransition::setTo(a4, v9);
      return 1;
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getPreviousTransition(icu::RuleBasedTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t result;
  icu::TimeZoneRule *v9;
  icu::TimeZoneRule *v10;
  double v11;
  UErrorCode v12;

  v12 = U_ZERO_ERROR;
  icu::RuleBasedTimeZone::completeConst(this, &v12);
  result = 0;
  if (v12 <= U_ZERO_ERROR)
  {
    v10 = 0;
    v11 = 0.0;
    v9 = 0;
    result = icu::RuleBasedTimeZone::findPrev(this, a2, a3, &v11, &v10, &v9);
    if ((_DWORD)result)
    {
      icu::TimeZoneTransition::setTime((uint64_t)a4, v11);
      icu::TimeZoneTransition::setFrom(a4, v10);
      icu::TimeZoneTransition::setTo(a4, v9);
      return 1;
    }
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::findPrev(icu::RuleBasedTimeZone *this, double a2, uint64_t a3, double *a4, icu::TimeZoneRule **a5, icu::TimeZoneRule **a6)
{
  uint64_t result;
  uint64_t v13;
  double v14;
  icu::TimeZoneRule *v15;
  icu::TimeZoneRule *v16;
  int v17;
  int v18;
  icu::UVector *v19;
  int v20;
  icu::TimeZoneRule *v21;
  uint64_t RawOffset;
  uint64_t DSTSavings;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _BOOL4 v27;
  _BOOL4 v28;
  BOOL v29;
  signed int v30;
  _BOOL4 v32;
  double v34;
  double v35;

  result = *((_QWORD *)this + 12);
  if (!result)
    return result;
  v13 = icu::UVector::elementAt((icu::UVector *)result, 0);
  v14 = *(double *)v13;
  if ((_DWORD)a3 && v14 == a2)
    goto LABEL_4;
  if (v14 >= a2)
    return 0;
  v19 = (icu::UVector *)*((_QWORD *)this + 12);
  v20 = *((_DWORD *)v19 + 2);
  v13 = icu::UVector::elementAt(v19, v20 - 1);
  v14 = *(double *)v13;
  if (!(_DWORD)a3 || v14 != a2)
  {
    if (v14 >= a2)
    {
      v29 = __OFSUB__(v20, 2);
      v30 = v20 - 2;
      if (v30 < 0 == v29)
      {
        do
        {
          v13 = icu::UVector::elementAt(*((icu::UVector **)this + 12), v30);
          v14 = *(double *)v13;
          v32 = *(double *)v13 == a2 && (_DWORD)a3 != 0;
          v29 = __OFSUB__(v30--, 1);
          if (v30 < 0 != v29)
            break;
        }
        while (v14 >= a2 && !v32);
      }
    }
    else if (*((_QWORD *)this + 11))
    {
      v16 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 0);
      v21 = (icu::TimeZoneRule *)icu::UVector::elementAt(*((icu::UVector **)this + 11), 1u);
      v34 = 0.0;
      v35 = 0.0;
      RawOffset = icu::TimeZoneRule::getRawOffset(v21);
      DSTSavings = icu::TimeZoneRule::getDSTSavings(v21);
      LODWORD(RawOffset) = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v16 + 80))(v16, RawOffset, DSTSavings, a3, &v35, a2);
      v24 = icu::TimeZoneRule::getRawOffset(v16);
      v25 = icu::TimeZoneRule::getDSTSavings(v16);
      v26 = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v21 + 80))(v21, v24, v25, a3, &v34, a2);
      if (RawOffset | v26)
      {
        v27 = v26 != 0;
        v28 = v35 <= v34;
        if (v27 && v28)
          v14 = v34;
        else
          v14 = v35;
        if (v27 && v28)
          v15 = v16;
        else
          v15 = v21;
        if (v27 && v28)
          v16 = v21;
        goto LABEL_5;
      }
      return 0;
    }
  }
LABEL_4:
  v15 = *(icu::TimeZoneRule **)(v13 + 8);
  v16 = *(icu::TimeZoneRule **)(v13 + 16);
LABEL_5:
  v17 = icu::TimeZoneRule::getRawOffset(v15);
  if (v17 == icu::TimeZoneRule::getRawOffset(v16))
  {
    v18 = icu::TimeZoneRule::getDSTSavings(v15);
    if (v18 == icu::TimeZoneRule::getDSTSavings(v16))
      return icu::RuleBasedTimeZone::findPrev(this, v14, 0, a4, a5, a6);
  }
  *a4 = v14;
  *a5 = v15;
  result = 1;
  *a6 = v16;
  return result;
}

uint64_t icu::RuleBasedTimeZone::countTransitionRules(icu::RuleBasedTimeZone *this, UErrorCode *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *((_QWORD *)this + 10);
  if (v3)
    result = *(unsigned int *)(v3 + 8);
  else
    result = 0;
  v5 = *((_QWORD *)this + 11);
  if (v5)
    return (*(_DWORD *)(v5 + 8) + result);
  return result;
}

uint64_t icu::RuleBasedTimeZone::getTimeZoneRules(uint64_t result, _QWORD *a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;

  if (*a5 <= 0)
  {
    v7 = result;
    *a2 = *(_QWORD *)(result + 72);
    v8 = *(_QWORD *)(result + 80);
    LODWORD(v9) = *a4;
    if (v8)
      v10 = (int)v9 < 1;
    else
      v10 = 1;
    if (v10 || (v11 = *(_DWORD *)(v8 + 8), v11 < 1))
    {
      LODWORD(v12) = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = v12++;
        result = icu::UVector::elementAt(*(icu::UVector **)(v7 + 80), v13);
        *(_QWORD *)(a3 + 8 * v13) = result;
        v9 = *a4;
      }
      while (v12 < v9 && v11 > (int)v12);
    }
    v15 = *(_QWORD *)(v7 + 88);
    if (v15)
      v16 = (int)v12 < (int)v9;
    else
      v16 = 0;
    if (v16)
    {
      v17 = *(_DWORD *)(v15 + 8);
      if (v17 >= 1)
      {
        v18 = 0;
        v19 = v12;
        v20 = a3 + 8 * v12;
        do
        {
          v21 = v18 + 1;
          result = icu::UVector::elementAt(*(icu::UVector **)(v7 + 88), v18);
          *(_QWORD *)(v20 + 8 * v18) = result;
          v22 = v19 + v18++ + 1;
        }
        while (*a4 > v22 && v21 < v17);
        LODWORD(v12) = v19 + v21;
      }
    }
    *a4 = v12;
  }
  return result;
}

uint64_t icu::RuleBasedTimeZone::getLocalDelta(icu::RuleBasedTimeZone *this, int a2, int a3, int a4, int a5, int a6, char a7)
{
  BOOL v7;
  BOOL v8;
  int v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;

  v7 = a3 != 0;
  v8 = a3 == 0;
  if (a5)
    v7 = 0;
  else
    v8 = 0;
  v9 = a7 & 3;
  v10 = v9 == 1 && v7;
  v11 = v9 == 3 && v8;
  v12 = v9 == 1 && v8;
  v13 = v9 == 3 && v7;
  if ((a7 & 0xC) == 4)
    v14 = a3 + a2;
  else
    v14 = a5 + a4;
  if (v13)
    v15 = a3 + a2;
  else
    v15 = v14;
  if (v12)
    v15 = a3 + a2;
  if (v11)
    v15 = a5 + a4;
  if (v10)
    v15 = a5 + a4;
  v16 = a6 & 3;
  v17 = v16 == 1 && v7;
  v18 = v16 == 3 && v8;
  if (v16 != 1)
    v8 = 0;
  if (v16 != 3)
    v7 = 0;
  if ((~a6 & 0xC) != 0)
    v19 = a5 + a4;
  else
    v19 = a3 + a2;
  if (v7)
    v20 = a5 + a4;
  else
    v20 = v19;
  if (v8)
    v20 = a5 + a4;
  if (v18)
    v20 = a3 + a2;
  if (v17)
    v20 = a3 + a2;
  if (a5 + a4 >= a3 + a2)
    return v20;
  else
    return v15;
}

icu::RegexCompile *icu::RegexCompile::RegexCompile(icu::RegexCompile *this, icu::RegexPattern *a2, UErrorCode *a3)
{
  UErrorCode v6;

  *(_QWORD *)this = off_1E2265658;
  *((_QWORD *)this + 37) = off_1E2256B38;
  *((_WORD *)this + 152) = 2;
  icu::UVector32::UVector32((icu::RegexCompile *)((char *)this + 368), a3);
  icu::UStack::UStack((uint64_t)this + 416, (uint64_t)uprv_deleteUObject, 0, (int *)a3);
  icu::UStack::UStack((icu::RegexCompile *)((char *)this + 456), a3);
  sub_18BD5819C(a3);
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 8) = -1;
  *((_OWORD *)this + 3) = xmmword_18BE29B50;
  *((_WORD *)this + 20) = 0;
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 6) | 0x80000000;
  *((_BYTE *)this + 42) = 1;
  *((_QWORD *)this + 50) = -1;
  *((_QWORD *)this + 63) = 0;
  *((_DWORD *)this + 124) = -1;
  if (*(int *)a3 <= 0)
  {
    v6 = *((_DWORD *)a2 + 30);
    if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
      *a3 = v6;
  }
  return this;
}

void icu::RegexCompile::~RegexCompile(icu::RegexCompile *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2265658;
  v2 = *((_QWORD *)this + 63);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UStack::~UStack((icu::RegexCompile *)((char *)this + 456));
  icu::UStack::~UStack((icu::RegexCompile *)((char *)this + 416));
  icu::UVector32::~UVector32((void **)this + 46);
  icu::UnicodeString::~UnicodeString(v3, (icu::RegexCompile *)((char *)this + 296));
}

{
  void *v1;

  icu::RegexCompile::~RegexCompile(this);
  icu::UMemory::operator delete(v1);
}

UText *icu::RegexCompile::compile@<X0>(icu::RegexCompile *this@<X0>, UChar **a2@<X1>, UParseError *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  icu::UnicodeString *v9;
  uint64_t v10;
  UText *result;
  UText v12;

  v9 = (icu::UnicodeString *)icu::UMemory::operator new(a5, (icu::UMemory *)0x40, (unint64_t)a2);
  v10 = (uint64_t)v9;
  if (v9)
    icu::UnicodeString::UnicodeString(v9, a2);
  *(_QWORD *)(*((_QWORD *)this + 2) + 16) = v10;
  memset(&v12, 0, sizeof(v12));
  v12.magic = 878368812;
  v12.sizeOfStruct = 144;
  result = utext_openConstUnicodeString(&v12, v10, a4);
  if (*(int *)a4 <= 0)
  {
    icu::RegexCompile::compile(this, &v12, a3, a4);
    return utext_close(&v12);
  }
  return result;
}

void icu::RegexCompile::compile(icu::RegexCompile *this, UText *a2, UParseError *a3, UErrorCode *status)
{
  UText *v7;
  int *v8;
  int *v9;
  int v10;
  _BYTE *i;
  unsigned int v12;
  __int16 v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  icu::UnicodeSet *v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;

  *((_QWORD *)this + 1) = status;
  *((_QWORD *)this + 3) = a3;
  *((_DWORD *)this + 70) = 0;
  *((_WORD *)this + 40) = 0;
  if (*(int *)status <= 0)
  {
    v7 = utext_clone(*(UText **)(*((_QWORD *)this + 2) + 8), a2, 0, 1, status);
    v8 = (int *)*((_QWORD *)this + 1);
    *(_QWORD *)(*((_QWORD *)this + 2) + 8) = v7;
    if (*v8 <= 0)
    {
      *((_QWORD *)this + 45) = utext_nativeLength(a2);
      if ((*((_BYTE *)this + 284) & 0x10) != 0)
        *((_BYTE *)this + 40) = 1;
      v9 = (int *)((char *)this + 72);
      icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
      if (**((int **)this + 1) <= 0)
      {
        LOWORD(v10) = 1;
        while (1)
        {
          for (i = (char *)&unk_18BE29DA4 + 8 * (unsigned __int16)v10 + 7; ; i += 8)
          {
            v12 = *(i - 3);
            if (v12 <= 0x7E && !*((_BYTE *)this + 76) && *v9 == v12)
              break;
            if (v12 == 253)
            {
              if (*v9 == -1)
                break;
            }
            else if (v12 == 254)
            {
              if (*((_BYTE *)this + 76))
                break;
            }
            else if (v12 == 255
                   || (char)v12 <= -17
                   && !*((_BYTE *)this + 76)
                   && *v9 != -1
                   && icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 200 * (v12 - 128) + 3024), *v9))
            {
              break;
            }
          }
          if (!icu::RegexCompile::doParseActions(this, *(unsigned int *)(i - 7)))
            break;
          v13 = *(i - 1);
          if (*(i - 1))
          {
            v14 = *((_DWORD *)this + 70);
            v15 = v14 + 1;
            *((_DWORD *)this + 70) = v14 + 1;
            if (v14 >= 99)
            {
              icu::RegexCompile::error(this, 66304);
              v15 = *((_DWORD *)this + 70) - 1;
              *((_DWORD *)this + 70) = v15;
            }
            *((_WORD *)this + v15 + 40) = v13;
          }
          if (*i)
            icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
          v10 = *(i - 2);
          if (v10 == 255)
          {
            v16 = *((int *)this + 70);
            LOWORD(v10) = *((_WORD *)this + v16 + 40);
            *((_DWORD *)this + 70) = v16 - 1;
            if ((int)v16 <= 0)
            {
              *((_DWORD *)this + 70) = v16;
              icu::RegexCompile::error(this, 66310);
            }
          }
          if (**((int **)this + 1) >= 1)
            return;
        }
        if (**((int **)this + 1) <= 0)
        {
          icu::RegexCompile::allocateStackData(this, 2);
          icu::RegexCompile::stripNOPs(this);
          *(_DWORD *)(*((_QWORD *)this + 2) + 124) = icu::RegexCompile::minMatchLength(this, 3, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8)- 1);
          icu::RegexCompile::matchStartType(this);
          v18 = *(int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 104) + 8);
          if ((int)v18 < 0)
            v19 = -1;
          else
            v19 = 32 * v18;
          v20 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v19, v17);
          if (v20)
          {
            v21 = v20;
            if ((_DWORD)v18)
            {
              bzero(v20, 32 * v18);
              *(_QWORD *)(*((_QWORD *)this + 2) + 112) = v21;
              if ((int)v18 >= 1)
              {
                v22 = 0;
                do
                {
                  v23 = icu::UVector::elementAt(*(icu::UVector **)(*((_QWORD *)this + 2) + 104), v22);
                  if (v23)
                  {
                    v24 = (icu::UnicodeSet *)v23;
                    v25 = 0;
                    v26 = *(_QWORD *)(*((_QWORD *)this + 2) + 112) + 32 * v22;
                    do
                    {
                      if (icu::UnicodeSet::contains(v24, v25))
                        *(_BYTE *)(v26 + ((unint64_t)v25 >> 3)) |= 1 << (v25 & 7);
                      ++v25;
                    }
                    while (v25 != 256);
                  }
                  ++v22;
                }
                while (v22 != v18);
              }
            }
            else
            {
              *(_QWORD *)(*((_QWORD *)this + 2) + 112) = v20;
            }
          }
          else
          {
            v27 = (_DWORD *)*((_QWORD *)this + 1);
            *(_QWORD *)(*((_QWORD *)this + 2) + 112) = 0;
            *v27 = 7;
            *status = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }
  }
}

void icu::RegexCompile::nextChar(uint64_t a1, UChar32 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t CharLL;
  int v8;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char v17;
  UText *v18;
  int64_t chunkNativeStart;
  uint64_t v20;
  int64_t v21;
  UText *v22;
  uint64_t v23;
  uint64_t v24;
  UText *v25;
  int32_t chunkOffset;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  UChar32 v31;
  int v32;
  int32_t offset[2];
  uint64_t v34;
  int32_t v35;

  while (1)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v5 = *(int *)(v4 + 40);
    if ((int)v5 <= *(_DWORD *)(v4 + 28))
      v6 = *(_QWORD *)(v4 + 32) + v5;
    else
      v6 = (*(uint64_t (**)(void))(*(_QWORD *)(v4 + 56) + 64))();
    *(_QWORD *)(a1 + 32) = v6;
    CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    *a2 = CharLL;
    *((_BYTE *)a2 + 4) = 0;
    if (*(_BYTE *)(a1 + 40))
    {
      *((_BYTE *)a2 + 4) = 1;
      if ((_DWORD)CharLL == 92
        && ((v8 = *(_DWORD *)(a1 + 68), v8 == -1)
          ? (v8 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1),
             *(_DWORD *)(a1 + 68) = v8,
             LODWORD(CharLL) = *a2)
          : (LODWORD(CharLL) = 92),
            v8 == 69))
      {
        v17 = 0;
        if ((*(_BYTE *)(a1 + 284) & 0x10) != 0 && (_DWORD)CharLL != -1)
          goto LABEL_86;
      }
      else
      {
        if ((_DWORD)CharLL != -1)
          goto LABEL_86;
        v17 = 0;
      }
      goto LABEL_49;
    }
    if (*(_BYTE *)(a1 + 41))
    {
      *(_BYTE *)(a1 + 41) = 0;
      goto LABEL_86;
    }
    if ((*(_BYTE *)(a1 + 284) & 4) != 0)
    {
      while (1)
      {
        if ((_DWORD)CharLL == 35)
        {
          if (*(_BYTE *)(a1 + 42))
          {
            do
            {
              CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
              *a2 = CharLL;
              v10 = (CharLL + 1) <= 0xE && ((1 << (CharLL + 1)) & 0x4801) != 0 || (_DWORD)CharLL == 8232;
            }
            while (!v10 && (_DWORD)CharLL != 133);
          }
          else
          {
            CharLL = 35;
          }
        }
        else if ((_DWORD)CharLL == -1)
        {
          goto LABEL_86;
        }
        if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)CharLL))
          break;
        CharLL = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
        *a2 = CharLL;
      }
      LODWORD(CharLL) = *a2;
    }
    if ((_DWORD)CharLL != 92)
      goto LABEL_86;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v12 = *(int *)(v11 + 40);
    if ((int)v12 <= *(_DWORD *)(v11 + 28))
      v13 = *(_QWORD *)(v11 + 32) + v12;
    else
      v13 = (*(uint64_t (**)(void))(*(_QWORD *)(v11 + 56) + 64))();
    v14 = qword_1ECD284E8;
    v15 = *(_DWORD *)(a1 + 68);
    if (v15 == -1)
    {
      v15 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v15;
    }
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)(v14 + 3624), v15))
    {
      icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *((_BYTE *)a2 + 4) = 1;
      v18 = *(UText **)(*(_QWORD *)(a1 + 16) + 8);
      chunkNativeStart = v18->chunkNativeStart;
      if (!chunkNativeStart
        && (v20 = *(_QWORD *)(a1 + 360), v20 == v18->chunkNativeLimit)
        && v20 == v18->nativeIndexingLimit)
      {
        offset[0] = v13;
        *a2 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18BD58428, offset, v20, (void *)v18->chunkContents);
        v21 = offset[0];
        if (v13 == offset[0])
        {
          icu::RegexCompile::error((_QWORD *)a1, 66307);
          v21 = offset[0];
        }
        *(_QWORD *)(a1 + 56) += v21 - v13;
        v22 = *(UText **)(*(_QWORD *)(a1 + 16) + 8);
        v23 = v21 - v22->chunkNativeStart;
        if (v23 < 0 || v23 >= v22->nativeIndexingLimit || v22->chunkContents[v23] >> 10 > 0x36u)
          utext_setNativeIndex(v22, v21);
        else
          v22->chunkOffset = v23;
      }
      else
      {
        v35 = 0;
        *(_QWORD *)offset = v18;
        v34 = 0xFFFFFFFFLL;
        v24 = v13 - chunkNativeStart;
        if (v24 < 0 || v24 >= v18->nativeIndexingLimit || v18->chunkContents[v24] >> 10 > 0x36u)
          utext_setNativeIndex(v18, v13);
        else
          v18->chunkOffset = v24;
        *a2 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18BD582D0, &v35, 0x7FFFFFFF, offset);
        if (v35)
        {
          if ((_DWORD)v34 == v35)
          {
            v25 = *(UText **)(*(_QWORD *)(a1 + 16) + 8);
            chunkOffset = v25->chunkOffset;
            v27 = __OFSUB__(chunkOffset, 1);
            v28 = chunkOffset - 1;
            if (v28 < 0 != v27 || v25->chunkContents[v28] >> 11 > 0x1Au)
              utext_previous32(v25);
            else
              v25->chunkOffset = v28;
          }
          else if ((_DWORD)v34 != v35 - 1)
          {
            utext_moveIndex32(*(UText **)(*(_QWORD *)(a1 + 16) + 8), v35 + ~(_DWORD)v34);
          }
        }
        else
        {
          icu::RegexCompile::error((_QWORD *)a1, 66307);
        }
        *(_QWORD *)(a1 + 56) += v35;
      }
      goto LABEL_86;
    }
    v16 = *(_DWORD *)(a1 + 68);
    if (v16 == -1)
    {
      v16 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v16;
    }
    if (v16 != -1)
      break;
    v16 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    *(_DWORD *)(a1 + 68) = v16;
LABEL_40:
    v17 = 1;
    if (v16 != 81)
    {
      *(_BYTE *)(a1 + 41) = 1;
      goto LABEL_86;
    }
LABEL_49:
    *(_BYTE *)(a1 + 40) = v17;
    icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
  }
  if (v16 != 48)
    goto LABEL_40;
  *a2 = 0;
  icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
  v29 = 0;
  while (1)
  {
    v30 = *(_DWORD *)(a1 + 68);
    if (v30 == -1)
    {
      v30 = icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
      *(_DWORD *)(a1 + 68) = v30;
    }
    if ((v30 - 56) <= 0xFFFFFFF7)
      break;
    v31 = *a2;
    v32 = v30 & 7 | (8 * *a2);
    *a2 = v32;
    if (v32 > 255)
      *a2 = v31 & 0x1FFFFFFF;
    else
      icu::RegexCompile::nextCharLL((icu::RegexCompile *)a1);
    if (--v29 == -3)
      goto LABEL_83;
  }
  if (!v29)
    icu::RegexCompile::error((_QWORD *)a1, 66307);
LABEL_83:
  *((_BYTE *)a2 + 4) = 1;
LABEL_86:
  *(_BYTE *)(a1 + 42) = 1;
}

uint64_t icu::RegexCompile::doParseActions(icu::RegexCompile *this, unint64_t a2)
{
  icu::RegexCompile *v2;
  unsigned int v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  icu::UVector **v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  icu::UnicodeSet *v21;
  const icu::UnicodeSet *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  icu::UVector32 *v30;
  UErrorCode *v31;
  icu::UVector32 *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int **v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  icu::UnicodeSet *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  signed int v52;
  unsigned int v53;
  signed int v54;
  icu::UnicodeSet *v56;
  int v57;
  BOOL v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  icu::UnicodeSet *v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  unint64_t v73;
  uint64_t *v74;
  icu::UnicodeSet *v75;
  icu::UnicodeSet *v76;
  UErrorCode *v77;
  UErrorCode **v78;
  icu::UnicodeSet *v79;
  void *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  UErrorCode *v85;
  uint64_t v86;
  icu::UVector *v87;
  icu::UVector **v88;
  const icu::UnicodeSet *v89;
  int Data;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  icu::UnicodeSet *v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  int i;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  int **v107;
  unsigned int v108;
  int v109;
  icu::UnicodeSet *v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  int v114;
  icu::UnicodeSet *v115;
  unsigned int v116;
  int v117;
  icu::UVector **v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  signed int v130;
  uint64_t v131;
  signed int v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  icu::UnicodeSet *v139;
  int v140;
  int v141;
  int v142;
  unsigned int v143;
  uint64_t v144;
  signed int v145;
  uint64_t v146;
  int v147;
  unsigned int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  icu::RegexCompile *v153;
  int v154;
  UErrorCode *v155;
  icu::UVector *v156;
  int v157;
  const icu::UnicodeSet *v158;
  icu::UVector **v159;
  void *v160;
  void *v161;
  int v162;
  UChar32 CharLL;
  int v164;
  int v165;
  int v166;
  void *v167;
  int v169;
  int v170;
  int v172;
  uint64_t v173;
  int StackData;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t result;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  uint64_t v192;

  v2 = this;
  v3 = 1;
  switch((int)a2)
  {
    case 0:
      v14 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v192 = 0;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v180, 0x2000, 0x200u, *((UErrorCode **)v2 + 1));
      goto LABEL_113;
    case 1:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 939524096;
      goto LABEL_298;
    case 2:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 939524097;
      goto LABEL_298;
    case 3:
      if ((*((_BYTE *)this + 285) & 2) != 0 && (*((_DWORD *)this + 18) & 0xFFFFFFDF) - 65 <= 0x19)
        icu::RegexCompile::error(this, 66307);
      goto LABEL_148;
    case 4:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      Data = icu::RegexCompile::allocateData((int **)v2, 4);
      v91 = icu::RegexCompile::buildOp((int **)v2, 0x25u, Data);
      icu::RegexCompile::appendOp(v2, v91);
      if (**((int **)v2 + 1) <= 0)
        v92 = 100663296;
      else
        v92 = 0;
      icu::RegexCompile::appendOp(v2, v92);
      if (**((int **)v2 + 1) <= 0)
        v93 = 117440512;
      else
        v93 = 0;
      icu::RegexCompile::appendOp(v2, v93);
      v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      v31 = (UErrorCode *)*((_QWORD *)v2 + 1);
      v32 = (icu::RegexCompile *)((char *)v2 + 368);
      v33 = 4294967291;
      goto LABEL_201;
    case 5:
      v69 = *(_QWORD *)(*((_QWORD *)this + 2) + 192);
      if (v69 && (v70 = uhash_geti(v69, *((_QWORD *)v2 + 63))) != 0)
      {
        v71 = v70;
        icu::RegexCompile::fixLiterals((uint64_t)v2, 0);
        if ((*((_BYTE *)v2 + 284) & 2) != 0)
          v72 = 41;
        else
          v72 = 34;
        v176 = icu::RegexCompile::buildOp((int **)v2, v72, v71);
        icu::RegexCompile::appendOp(v2, v176);
      }
      else
      {
        icu::RegexCompile::error(v2, 66325);
      }
      v177 = *((_QWORD *)v2 + 63);
      if (v177)
        (*(void (**)(uint64_t))(*(_QWORD *)v177 + 8))(v177);
      *((_QWORD *)v2 + 63) = 0;
      goto LABEL_324;
    case 6:
      if (**((int **)this + 1) <= 0)
        v97 = 100663298;
      else
        v97 = 0;
      icu::RegexCompile::appendOp(this, v97);
      if (**((int **)v2 + 1) <= 0)
        v98 = 218103811;
      else
        v98 = 0;
      icu::RegexCompile::appendOp(v2, v98);
      if (**((int **)v2 + 1) <= 0)
        v99 = 234881024;
      else
        v99 = 0;
      icu::RegexCompile::appendOp(v2, v99);
      icu::RegexCompile::doParseActions(v2, 31);
      goto LABEL_324;
    case 7:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v8 = **((_DWORD **)v2 + 1);
      v9 = 822083585;
      goto LABEL_167;
    case 8:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 369098753;
      goto LABEL_298;
    case 9:
      v116 = icu::RegexCompile::blockTopLoc(this, 1);
      v117 = icu::RegexCompile::buildOp((int **)v2, 0xDu, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8));
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v117, v116);
      goto LABEL_215;
    case 10:
      goto LABEL_324;
    case 11:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 318767104;
      goto LABEL_298;
    case 12:
LABEL_148:
      icu::RegexCompile::setEval(v2, 262150);
      v96 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)v2 + 416), *((_DWORD *)v2 + 106) - 1);
      icu::UnicodeSet::add(v96, *((_DWORD *)v2 + 18));
      *((_DWORD *)v2 + 124) = *((_DWORD *)v2 + 18);
      goto LABEL_324;
    case 13:
    case 30:
      v6 = *((_QWORD *)this + 63);
      v7 = *((_DWORD *)v2 + 18);
      goto LABEL_49;
    case 14:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 285212672;
      goto LABEL_298;
    case 15:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 956301312;
      goto LABEL_298;
    case 16:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v75 = (icu::UnicodeSet *)icu::UMemory::operator new(v74, (icu::UMemory *)0xC8, v73);
      v76 = v75;
      if (v75)
      {
        icu::UnicodeSet::UnicodeSet(v75);
        v78 = (UErrorCode **)((char *)v2 + 8);
        v77 = (UErrorCode *)*((_QWORD *)v2 + 1);
      }
      else
      {
        v78 = (UErrorCode **)((char *)v2 + 8);
        v77 = (UErrorCode *)*((_QWORD *)v2 + 1);
        if (*(int *)v77 <= 0)
          *v77 = U_MEMORY_ALLOCATION_ERROR;
      }
      *(_QWORD *)&v180 = 0;
      sub_18BD563AC((icu::RegexCompile *)((char *)v2 + 416), v76, v77);
      icu::UVector::addElement((icu::RegexCompile *)((char *)v2 + 456), 1, *((UErrorCode **)v2 + 1));
      v167 = (void *)*((unsigned __int8 *)v2 + 284);
      if ((v167 & 2) != 0)
        icu::UVector::addElement((icu::RegexCompile *)((char *)v2 + 456), 131081, *v78);
      sub_18BD33A18((icu::UnicodeSet **)&v180, v167);
      goto LABEL_324;
    case 17:
      v115 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      icu::UnicodeSet::add(v115, 0xAu, 0xDu);
      icu::UnicodeSet::add(v115, 0x85u);
      v110 = v115;
      v111 = 8232;
      v112 = 8233;
      goto LABEL_171;
    case 18:
      v65 = icu::RegexCompile::blockTopLoc(this, 1);
      v11 = icu::RegexCompile::allocateData((int **)v2, 1);
      v66 = icu::RegexCompile::buildOp((int **)v2, 0x20u, v11);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v66, v65);
      v67 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) + 2);
      icu::RegexCompile::appendOp(v2, v67);
      v68 = icu::RegexCompile::buildOp((int **)v2, 0xDu, v65 + 1);
      icu::RegexCompile::appendOp(v2, v68);
      goto LABEL_98;
    case 19:
    case 35:
      v4 = 66309;
      goto LABEL_192;
    case 20:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 402653184;
      goto LABEL_298;
    case 21:
      v45 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v46 = 38;
      goto LABEL_187;
    case 22:
      v64 = 262151;
      goto LABEL_236;
    case 23:
      v4 = 66312;
      goto LABEL_192;
    case 24:
      v87 = (icu::RegexCompile *)((char *)this + 456);
      if (icu::UVector::elementAti((icu::RegexCompile *)((char *)this + 456), *((_DWORD *)this + 116) - 1) == 131081)
      {
        icu::UStack::popi((icu::RegexCompile *)((char *)v2 + 456));
        icu::UVector::addElement((icu::RegexCompile *)((char *)v2 + 456), 131075, *((UErrorCode **)v2 + 1));
LABEL_237:
        v155 = (UErrorCode *)*((_QWORD *)v2 + 1);
        v156 = v87;
        v157 = 131081;
      }
      else
      {
        v155 = (UErrorCode *)*((_QWORD *)v2 + 1);
        v157 = 131075;
        v156 = (icu::RegexCompile *)((char *)v2 + 456);
      }
      icu::UVector::addElement(v156, v157, v155);
      goto LABEL_324;
    case 25:
      *((_QWORD *)this + 51) = 0xFFFFFFFF00000000;
      goto LABEL_324;
    case 26:
      v15 = 196613;
      goto LABEL_144;
    case 27:
      v100 = icu::RegexCompile::blockTopLoc(this, 0);
      icu::RegexCompile::compileInterval(v2, 0x19u, 0x1Cu);
      icu::RegexCompile::insertOp(v2, v100);
      v101 = 1;
      i = icu::RegexCompile::allocateData((int **)v2, 1);
      v103 = icu::RegexCompile::buildOp((int **)v2, 0x20u, i);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v103, v100);
      v104 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 32);
      v105 = *(_DWORD *)(v104 + 8);
      v58 = __OFSUB__(v105, 1);
      v106 = v105 - 1;
      if (v106 < 0 == v58)
      {
        *(_DWORD *)(v104 + 8) = v106;
        v101 = (int)(*(_QWORD *)(*(_QWORD *)(v104 + 24) + 8 * v106) + 1);
      }
      sub_18BD55DC8((icu::UVector64 *)v104, v101, *((UErrorCode **)v2 + 1));
      v107 = (int **)v2;
      v108 = 33;
      goto LABEL_258;
    case 28:
    case 37:
    case 81:
      v4 = 66305;
      goto LABEL_192;
    case 29:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 822083585;
      goto LABEL_298;
    case 31:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if (**((int **)v2 + 1) <= 0)
        v61 = 117440512;
      else
        v61 = 0;
      icu::RegexCompile::appendOp(v2, v61);
      if (**((int **)v2 + 1) <= 0)
        v62 = 117440512;
      else
        v62 = 0;
      icu::RegexCompile::appendOp(v2, v62);
      v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      v31 = (UErrorCode *)*((_QWORD *)v2 + 1);
      v32 = (icu::RegexCompile *)((char *)v2 + 368);
      v33 = 0xFFFFFFFFLL;
      goto LABEL_201;
    case 32:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      goto LABEL_78;
    case 33:
      v53 = icu::RegexCompile::scanNamedChar(this);
      icu::RegexCompile::setEval(v2, 262150);
      v63 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)v2 + 416), *((_DWORD *)v2 + 106) - 1);
      icu::UnicodeSet::add(v63, v53);
      goto LABEL_87;
    case 34:
      v14 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v192 = 0;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 0xAu, 0xDu);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 0x85u);
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 0x2028u, 0x2029u);
      goto LABEL_113;
    case 36:
      v4 = 66307;
      goto LABEL_193;
    case 38:
      v34 = icu::RegexCompile::blockTopLoc(this, 1);
      icu::RegexCompile::insertOp(v2, v34);
      v35 = icu::RegexCompile::allocateData((int **)v2, 1);
      v36 = icu::RegexCompile::buildOp((int **)v2, 0x20u, v35);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v36, v34);
      v37 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) + 1);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v37, ++v34);
      v38 = icu::RegexCompile::buildOp((int **)v2, 0xDu, v34);
      icu::RegexCompile::appendOp(v2, v38);
      v39 = (int **)v2;
      v40 = 33;
      goto LABEL_212;
    case 39:
      v45 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v46 = 45;
LABEL_187:
      icu::UnicodeSet::add(v45, v46);
      goto LABEL_324;
    case 40:
      if ((*((_BYTE *)this + 285) & 2) != 0 && (*((_DWORD *)this + 18) & 0xFFFFFFDF) - 65 <= 0x19)
        icu::RegexCompile::error(this, 66307);
      goto LABEL_47;
    case 41:
      v88 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v89 = (const icu::UnicodeSet *)(qword_1ECD284E8 + 208);
      goto LABEL_185;
    case 42:
      if ((*((_DWORD *)this + 103) & 0x80000000) != 0)
        *((_DWORD *)this + 103) = 0;
      v122 = 10 * *((int *)this + 103) + u_charDigitValue(*((_DWORD *)this + 18));
      if (v122 >= 0x80000000)
        goto LABEL_191;
      *((_DWORD *)v2 + 103) = v122;
      goto LABEL_324;
    case 43:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 973078528;
      goto LABEL_298;
    case 44:
      v14 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v192 = 0;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      v22 = (const icu::UnicodeSet *)(qword_1ECD284E8 + 808);
      goto LABEL_109;
    case 45:
      v4 = 66319;
      goto LABEL_192;
    case 46:
      v139 = icu::RegexCompile::scanProp((int **)this);
      if (!v139)
        goto LABEL_324;
      goto LABEL_239;
    case 47:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v23 = **((_DWORD **)v2 + 1);
      if ((*((_DWORD *)v2 + 71) & 0x100) != 0)
        v24 = 889192449;
      else
        v24 = 268435457;
      goto LABEL_92;
    case 48:
      icu::RegexCompile::setEval(this, 65538);
      icu::UStack::popi((icu::RegexCompile *)((char *)v2 + 456));
      goto LABEL_324;
    case 49:
      v109 = *((_DWORD *)this + 124);
      if (v109 == -1 || v109 > *((_DWORD *)this + 18))
        icu::RegexCompile::error(this, 66320);
      v110 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)v2 + 416), *((_DWORD *)v2 + 106) - 1);
      v111 = *((_DWORD *)v2 + 124);
      v112 = *((_DWORD *)v2 + 18);
LABEL_171:
      icu::UnicodeSet::add(v110, v111, v112);
      goto LABEL_324;
    case 50:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if (**((int **)v2 + 1) <= 0)
        v94 = 117440512;
      else
        v94 = 0;
      icu::RegexCompile::appendOp(v2, v94);
      if (**((int **)v2 + 1) <= 0)
        v95 = 117440512;
      else
        v95 = 0;
      icu::RegexCompile::appendOp(v2, v95);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), 4294967290, *((UErrorCode **)v2 + 1));
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 2), *((UErrorCode **)v2 + 1));
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 1), *((UErrorCode **)v2 + 1));
      goto LABEL_142;
    case 51:
      v130 = icu::RegexCompile::blockTopLoc(this, 0);
      v35 = v130;
      v131 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 32);
      v132 = *(_DWORD *)(v131 + 8);
      v133 = v132 - 1;
      if (v132 <= v130 || v130 < 0 || v130 != v133)
        goto LABEL_210;
      v134 = *(_QWORD *)(*(_QWORD *)(v131 + 24) + 8 * v130);
      v135 = BYTE3(v134);
      if (BYTE3(v134) <= 0x14u)
      {
        if (BYTE3(v134) == 11)
        {
          v170 = icu::RegexCompile::buildOp((int **)v2, 0x32u, v134 & 0xFFFFFF);
LABEL_318:
          icu::RegexCompile::appendOp(v2, v170);
          goto LABEL_321;
        }
        if (BYTE3(v134) != 12)
          goto LABEL_210;
LABEL_284:
        if (**((int **)v2 + 1) <= 0)
          v169 = 872415232;
        else
          v169 = 0;
        v170 = v169 & 0xFFFFFFFD | (v135 == 21) | (2 * (*((_DWORD *)v2 + 71) & 1));
        goto LABEL_318;
      }
      if (BYTE3(v134) == 21 || BYTE3(v134) == 27)
        goto LABEL_284;
LABEL_210:
      if (icu::RegexCompile::minMatchLength(v2, v130, v133))
      {
        v39 = (int **)v2;
        v40 = 15;
LABEL_212:
        v44 = v35;
      }
      else
      {
        icu::RegexCompile::insertOp(v2, v35);
        StackData = icu::RegexCompile::allocateStackData(v2, 1);
        v175 = icu::RegexCompile::buildOp((int **)v2, 0x23u, StackData);
        icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v175, v35);
        v44 = v35 + 1;
        v39 = (int **)v2;
        v40 = 18;
      }
LABEL_322:
      v114 = icu::RegexCompile::buildOp(v39, v40, v44);
LABEL_323:
      icu::RegexCompile::appendOp(v2, v114);
LABEL_324:
      if (**((int **)v2 + 1) >= 1)
        return 0;
      else
        return v3;
    case 52:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 973078529;
      goto LABEL_298;
    case 53:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
LABEL_142:
      *((_DWORD *)v2 + 71) = *((_DWORD *)v2 + 72);
      goto LABEL_324;
    case 54:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 335544320;
      goto LABEL_298;
    case 55:
      v52 = icu::RegexCompile::scanNamedChar(this);
      v53 = v52;
      if (**((int **)v2 + 1) <= 0)
      {
        v54 = *((_DWORD *)v2 + 124);
        if (v54 == -1 || v54 > v52)
          icu::RegexCompile::error(v2, 66320);
      }
      v56 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)v2 + 416), *((_DWORD *)v2 + 106) - 1);
      icu::UnicodeSet::add(v56, *((_DWORD *)v2 + 124), v53);
LABEL_87:
      *((_DWORD *)v2 + 124) = v53;
      goto LABEL_324;
    case 56:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v25 = icu::RegexCompile::allocateData((int **)v2, 5);
      v26 = icu::RegexCompile::buildOp((int **)v2, 0x2Cu, v25);
      icu::RegexCompile::appendOp(v2, v26);
      v27 = icu::RegexCompile::buildOp((int **)v2, 0x2Fu, v25);
      icu::RegexCompile::appendOp(v2, v27);
      icu::RegexCompile::appendOp(v2, 0);
      icu::RegexCompile::appendOp(v2, 0);
      icu::RegexCompile::appendOp(v2, 0);
      if (**((int **)v2 + 1) <= 0)
        v28 = 117440512;
      else
        v28 = 0;
      icu::RegexCompile::appendOp(v2, v28);
      if (**((int **)v2 + 1) <= 0)
        v29 = 117440512;
      else
        v29 = 0;
      icu::RegexCompile::appendOp(v2, v29);
      v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      v31 = (UErrorCode *)*((_QWORD *)v2 + 1);
      v32 = (icu::RegexCompile *)((char *)v2 + 368);
      v33 = 4294967288;
      goto LABEL_201;
    case 57:
      if (icu::RegexCompile::compileInlineInterval(this))
        goto LABEL_324;
      this = v2;
      v41 = 25;
      v42 = 28;
      goto LABEL_76;
    case 58:
      goto LABEL_21;
    case 59:
      *((_DWORD *)this + 72) = *((_DWORD *)this + 71);
      *((_BYTE *)this + 292) = 1;
      goto LABEL_324;
    case 60:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 369098752;
      goto LABEL_298;
    case 61:
      icu::RegexCompile::handleCloseParen(this);
      if (*((int *)v2 + 94) >= 1)
        icu::RegexCompile::error(v2, 66310);
      icu::RegexCompile::appendOp(v2, (**((_DWORD **)v2 + 1) < 1) << 25);
LABEL_78:
      v3 = 0;
      goto LABEL_324;
    case 62:
      v7 = icu::RegexCompile::scanNamedChar(this);
      goto LABEL_48;
    case 63:
      v44 = icu::RegexCompile::blockTopLoc(this, 0);
      goto LABEL_216;
    case 64:
      v15 = 196612;
LABEL_144:
      icu::RegexCompile::setPushOp((UErrorCode **)this, v15);
      goto LABEL_324;
    case 65:
      v14 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v192 = 0;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v180, 0x2000, 0x1000u, *((UErrorCode **)v2 + 1));
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 9u);
LABEL_113:
      v79 = (icu::UnicodeSet *)&v180;
      goto LABEL_114;
    case 66:
      icu::RegexCompile::handleCloseParen(this);
      if (*((int *)v2 + 94) <= 0)
        goto LABEL_25;
      goto LABEL_324;
    case 67:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v140 = *((_DWORD *)v2 + 71);
      if ((v140 & 0x20) != 0)
      {
        v43 = **((_DWORD **)v2 + 1) <= 0;
        v24 = 352321536;
      }
      else
      {
        v43 = **((_DWORD **)v2 + 1) <= 0;
        if ((v140 & 1) != 0)
          v24 = 452984832;
        else
          v24 = 201326592;
      }
      goto LABEL_298;
    case 68:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if (**((int **)v2 + 1) <= 0)
        v16 = 117440512;
      else
        v16 = 0;
      icu::RegexCompile::appendOp(v2, v16);
      v17 = icu::RegexCompile::allocateStackData(v2, 3);
      v18 = icu::RegexCompile::buildOp((int **)v2, 8u, v17);
      icu::RegexCompile::appendOp(v2, v18);
      if (**((int **)v2 + 1) <= 0)
        v19 = 117440512;
      else
        v19 = 0;
      icu::RegexCompile::appendOp(v2, v19);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), 4294967294, *((UErrorCode **)v2 + 1));
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 3), *((UErrorCode **)v2 + 1));
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 1), *((UErrorCode **)v2 + 1));
      sub_18BBB7118(*(_DWORD **)(*((_QWORD *)v2 + 2) + 136), v17, *((UErrorCode **)v2 + 1));
      if (!*((_QWORD *)v2 + 63))
        goto LABEL_324;
      if ((icu::RegexPattern::initNamedCaptureMap(*((icu::RegexPattern **)v2 + 2)) & 1) != 0)
      {
        v20 = uhash_puti(*(_QWORD *)(*((_QWORD *)v2 + 2) + 192), *((_QWORD *)v2 + 63), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 136) + 8), *((int **)v2 + 1));
        *((_QWORD *)v2 + 63) = 0;
        if (v20 >= 1 && **((int **)v2 + 1) <= 0)
        {
LABEL_21:
          v4 = 66325;
          goto LABEL_192;
        }
        goto LABEL_324;
      }
      if (**((int **)v2 + 1) > 0)
        goto LABEL_324;
      v4 = *(_DWORD *)(*((_QWORD *)v2 + 2) + 120);
      goto LABEL_192;
    case 70:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if (**((int **)v2 + 1) <= 0)
        v81 = 117440512;
      else
        v81 = 0;
      icu::RegexCompile::appendOp(v2, v81);
      v82 = icu::RegexCompile::allocateData((int **)v2, 1);
      v83 = icu::RegexCompile::buildOp((int **)v2, 0x20u, v82);
      icu::RegexCompile::appendOp(v2, v83);
      if (**((int **)v2 + 1) <= 0)
        v84 = 117440512;
      else
        v84 = 0;
      icu::RegexCompile::appendOp(v2, v84);
      v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), 4294967293, *((UErrorCode **)v2 + 1));
      v85 = (UErrorCode *)*((_QWORD *)v2 + 1);
      v86 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 3);
      goto LABEL_202;
    case 71:
      v4 = 66315;
      goto LABEL_192;
    case 72:
      v118 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      sub_18BD56348(v118, 0x200u, *((UErrorCode **)v2 + 1));
      goto LABEL_324;
    case 73:
      v21 = (icu::UnicodeSet *)icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
      goto LABEL_55;
    case 74:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v21 = icu::RegexCompile::scanProp((int **)v2);
LABEL_55:
      icu::RegexCompile::compileSet(v2, v21);
      goto LABEL_324;
    case 75:
    case 79:
      v5 = icu::UMemory::operator new((uint64_t *)a2, (icu::UMemory *)0x40, a2);
      if (v5)
      {
        *v5 = (uint64_t)off_1E2256B38;
        *((_WORD *)v5 + 4) = 2;
        *((_QWORD *)v2 + 63) = v5;
        goto LABEL_324;
      }
      *((_QWORD *)v2 + 63) = 0;
      this = v2;
      v4 = 7;
      goto LABEL_193;
    case 76:
      v162 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 136) + 8);
      for (i = u_charDigitValue(*((_DWORD *)this + 18)); i < v162; i = u_charDigitValue(CharLL) + 10 * i)
      {
        CharLL = *((_DWORD *)v2 + 17);
        if (CharLL == -1)
        {
          CharLL = icu::RegexCompile::nextCharLL(v2);
          *((_DWORD *)v2 + 17) = CharLL;
        }
        if (!icu::UnicodeSet::contains(*(icu::UnicodeSet **)(qword_1ECD284E8 + 3824), CharLL))
          break;
        icu::RegexCompile::nextCharLL(v2);
      }
      icu::RegexCompile::fixLiterals((uint64_t)v2, 0);
      v107 = (int **)v2;
      if ((*((_BYTE *)v2 + 284) & 2) != 0)
        v108 = 41;
      else
        v108 = 34;
LABEL_258:
      v154 = icu::RegexCompile::buildOp(v107, v108, i);
      v153 = v2;
      goto LABEL_259;
    case 77:
      v119 = icu::RegexCompile::blockTopLoc(this, 1);
      v120 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8));
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v120, v119);
      goto LABEL_324;
    case 78:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      __asm { BR              X10 }
      return result;
    case 80:
      v41 = 26;
      v42 = 29;
LABEL_76:
      icu::RegexCompile::compileInterval(this, v41, v42);
      goto LABEL_324;
    case 82:
      v139 = icu::RegexCompile::scanPosixProp((int **)this);
      if (v139)
      {
LABEL_239:
        v158 = v139;
        v159 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)v2 + 416), *((_DWORD *)v2 + 106) - 1);
        icu::UnicodeSet::addAll(v159, v158);
        v161 = icu::UnicodeSet::~UnicodeSet(v160, v158);
        icu::UMemory::operator delete(v161);
      }
      goto LABEL_324;
    case 83:
      v64 = 262152;
      goto LABEL_236;
    case 84:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      if ((*((_DWORD *)v2 + 71) & 0x100) != 0)
        v24 = 889192448;
      else
        v24 = 0x10000000;
      v23 = **((_DWORD **)v2 + 1);
LABEL_92:
      v43 = v23 <= 0;
      goto LABEL_298;
    case 85:
      v64 = 262150;
LABEL_236:
      icu::RegexCompile::setPushOp((UErrorCode **)this, v64);
      v87 = (icu::RegexCompile *)((char *)v2 + 456);
      icu::UVector::addElement((icu::RegexCompile *)((char *)v2 + 456), 1, *((UErrorCode **)v2 + 1));
      if ((*((_BYTE *)v2 + 284) & 2) != 0)
        goto LABEL_237;
      goto LABEL_324;
    case 86:
      v121 = 10 * *((int *)this + 102) + u_charDigitValue(*((_DWORD *)this + 18));
      if (v121 >= 0x80000000)
      {
LABEL_191:
        v4 = 66311;
LABEL_192:
        this = v2;
LABEL_193:
        icu::RegexCompile::error(this, v4);
      }
      else
      {
        *((_DWORD *)v2 + 102) = v121;
      }
      goto LABEL_324;
    case 87:
      v14 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v192 = 0;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v180, 0x2000, 0x1000u, *((UErrorCode **)v2 + 1));
      icu::UnicodeSet::add((icu::UnicodeSet *)&v180, 9u);
      goto LABEL_115;
    case 88:
      v143 = icu::RegexCompile::blockTopLoc(this, 0);
      v144 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 32);
      v145 = *(_DWORD *)(v144 + 8);
      if (v145 <= (int)v143 || (v143 & 0x80000000) != 0 || v143 != v145 - 1)
        goto LABEL_232;
      v146 = *(_QWORD *)(*(_QWORD *)(v144 + 24) + 8 * v143);
      v147 = BYTE3(v146);
      if (BYTE3(v146) > 0x14u)
      {
        if (BYTE3(v146) != 21 && BYTE3(v146) != 27)
        {
LABEL_232:
          v148 = icu::RegexCompile::blockTopLoc(v2, 1);
          v149 = icu::RegexCompile::buildOp((int **)v2, 0xFu, v148 + 1);
          if (!icu::RegexCompile::minMatchLength(v2, v148, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 1))
          {
            icu::RegexCompile::insertOp(v2, v148);
            v150 = icu::RegexCompile::allocateStackData(v2, 1);
            v151 = icu::RegexCompile::buildOp((int **)v2, 0x23u, v150);
            icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v151, v148 + 1);
            v149 = icu::RegexCompile::buildOp((int **)v2, 0x12u, v148 + 2);
          }
          v152 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) + 1);
          icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v152, v148);
          v153 = v2;
          v154 = v149;
LABEL_259:
          icu::RegexCompile::appendOp(v153, v154);
          v3 = 1;
          goto LABEL_324;
        }
      }
      else
      {
        if (BYTE3(v146) == 11)
        {
          v173 = (int)icu::RegexCompile::buildOp((int **)v2, 0x32u, v146 & 0xFFFFFF);
          v144 = *(_QWORD *)(*((_QWORD *)v2 + 2) + 32);
          goto LABEL_320;
        }
        if (BYTE3(v146) != 12)
          goto LABEL_232;
      }
      if (**((int **)v2 + 1) <= 0)
        v172 = 872415232;
      else
        v172 = 0;
      v173 = v172 & 0xFFFFFFFD | (v147 == 21) | (2 * (*((_DWORD *)v2 + 71) & 1));
LABEL_320:
      icu::UVector64::setElementAt(v144, v173, v143);
LABEL_321:
      v44 = icu::RegexCompile::allocateStackData(v2, 1);
      v39 = (int **)v2;
      v40 = 51;
      goto LABEL_322;
    case 89:
      v141 = *((_DWORD *)this + 18);
      if (v141 > 108)
      {
        switch(v141)
        {
          case 'm':
            v142 = 8;
            goto LABEL_313;
          case 's':
            v142 = 32;
            goto LABEL_313;
          case 'u':
            v142 = 0;
            goto LABEL_313;
          case 'w':
            v142 = 256;
            goto LABEL_313;
          case 'x':
            v142 = 4;
            goto LABEL_313;
          default:
            goto LABEL_327;
        }
      }
      switch(v141)
      {
        case '-':
          v142 = 0;
          *((_BYTE *)this + 292) = 0;
          break;
        case 'd':
          v142 = 1;
          break;
        case 'i':
          v142 = 2;
          break;
        default:
LABEL_327:
          abort();
      }
LABEL_313:
      if (*((_BYTE *)this + 292))
        v178 = *((_DWORD *)this + 72) | v142;
      else
        v178 = *((_DWORD *)this + 72) & ~v142;
      *((_DWORD *)this + 72) = v178;
      goto LABEL_324;
    case 90:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 385875968;
      goto LABEL_298;
    case 91:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v47 = icu::RegexCompile::allocateData((int **)v2, 5);
      v48 = icu::RegexCompile::buildOp((int **)v2, 0x2Cu, v47);
      icu::RegexCompile::appendOp(v2, v48);
      v49 = icu::RegexCompile::buildOp((int **)v2, 0x2Du, v47);
      icu::RegexCompile::appendOp(v2, v49);
      icu::RegexCompile::appendOp(v2, 0);
      icu::RegexCompile::appendOp(v2, 0);
      if (**((int **)v2 + 1) <= 0)
        v50 = 117440512;
      else
        v50 = 0;
      icu::RegexCompile::appendOp(v2, v50);
      if (**((int **)v2 + 1) <= 0)
        v51 = 117440512;
      else
        v51 = 0;
      icu::RegexCompile::appendOp(v2, v51);
      v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      v31 = (UErrorCode *)*((_QWORD *)v2 + 1);
      v32 = (icu::RegexCompile *)((char *)v2 + 368);
      v33 = 4294967289;
      goto LABEL_201;
    case 92:
      v10 = icu::RegexCompile::blockTopLoc(this, 1);
      icu::RegexCompile::insertOp(v2, v10);
      v11 = icu::RegexCompile::allocateData((int **)v2, 1);
      v12 = icu::RegexCompile::buildOp((int **)v2, 0x20u, v11);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v12, v10);
      v13 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) + 1);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v13, v10 + 1);
LABEL_98:
      v39 = (int **)v2;
      v40 = 33;
      v44 = v11;
      goto LABEL_322;
    case 93:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v30 = (icu::RegexCompile *)((char *)v2 + 368);
      v57 = *((_DWORD *)v2 + 94);
      v58 = __OFSUB__(v57, 1);
      v59 = v57 - 1;
      if (v59 < 0 != v58)
      {
        v60 = 0;
      }
      else
      {
        *((_DWORD *)v2 + 94) = v59;
        v60 = *(_DWORD *)(*((_QWORD *)v2 + 49) + 4 * v59);
      }
      v164 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) + 1);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v164, v60);
      if (**((int **)v2 + 1) <= 0)
        v165 = 218103808;
      else
        v165 = 0;
      icu::RegexCompile::appendOp(v2, v165);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 1), *((UErrorCode **)v2 + 1));
      if (**((int **)v2 + 1) <= 0)
        v166 = 117440512;
      else
        v166 = 0;
      icu::RegexCompile::appendOp(v2, v166);
      goto LABEL_203;
    case 94:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v43 = **((_DWORD **)v2 + 1) <= 0;
      v24 = 167772161;
LABEL_298:
      if (v43)
        v114 = v24;
      else
        v114 = 0;
      goto LABEL_323;
    case 95:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v8 = **((_DWORD **)v2 + 1);
      v9 = 167772161;
LABEL_167:
      v113 = v9 + 3;
      if (v8 <= 0)
        v114 = v113;
      else
        v114 = 0;
      goto LABEL_323;
    case 96:
LABEL_47:
      v7 = *((_DWORD *)v2 + 18);
LABEL_48:
      v6 = (uint64_t)v2 + 296;
LABEL_49:
      icu::UnicodeString::append(v6, v7);
      goto LABEL_324;
    case 97:
      *((_BYTE *)this + 42) = 0;
      goto LABEL_324;
    case 98:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      __asm { BR              X10 }
      return result;
    case 99:
      *((_DWORD *)this + 103) = *((_DWORD *)this + 102);
      goto LABEL_324;
    case 100:
      v116 = icu::RegexCompile::blockTopLoc(this, 1);
      v136 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8);
      v137 = icu::RegexCompile::buildOp((int **)v2, 0xDu, v136 + 1);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32), v137, v116);
      v138 = icu::RegexCompile::buildOp((int **)v2, 0xDu, v136 + 2);
      icu::RegexCompile::appendOp(v2, v138);
LABEL_215:
      v44 = v116 + 1;
LABEL_216:
      v39 = (int **)v2;
      v40 = 6;
      goto LABEL_322;
    case 101:
      icu::RegexCompile::fixLiterals((uint64_t)this, 0);
      v123 = icu::RegexCompile::allocateData((int **)v2, 4);
      v124 = icu::RegexCompile::buildOp((int **)v2, 0x25u, v123);
      icu::RegexCompile::appendOp(v2, v124);
      v125 = icu::RegexCompile::buildOp((int **)v2, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) + 2);
      icu::RegexCompile::appendOp(v2, v125);
      v126 = icu::RegexCompile::buildOp((int **)v2, 0xDu, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) + 3);
      icu::RegexCompile::appendOp(v2, v126);
      v127 = icu::RegexCompile::buildOp((int **)v2, 0x26u, v123);
      icu::RegexCompile::appendOp(v2, v127);
      icu::RegexCompile::appendOp(v2, (**((_DWORD **)v2 + 1) < 1) << 24);
      if (**((int **)v2 + 1) <= 0)
        v128 = 117440512;
      else
        v128 = 0;
      icu::RegexCompile::appendOp(v2, v128);
      if (**((int **)v2 + 1) <= 0)
        v129 = 117440512;
      else
        v129 = 0;
      icu::RegexCompile::appendOp(v2, v129);
      v30 = (icu::RegexCompile *)((char *)v2 + 368);
      sub_18BD55774((icu::RegexCompile *)((char *)v2 + 368), *((unsigned int *)v2 + 71), *((UErrorCode **)v2 + 1));
      v31 = (UErrorCode *)*((_QWORD *)v2 + 1);
      v32 = (icu::RegexCompile *)((char *)v2 + 368);
      v33 = 4294967292;
LABEL_201:
      sub_18BD55774(v32, v33, v31);
      v85 = (UErrorCode *)*((_QWORD *)v2 + 1);
      v86 = (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 2);
LABEL_202:
      sub_18BD55774(v30, v86, v85);
LABEL_203:
      sub_18BD55774(v30, (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 2) + 32) + 8) - 1), *((UErrorCode **)v2 + 1));
      goto LABEL_324;
    case 102:
      v14 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v192 = 0;
      v190 = 0u;
      v191 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v180);
      v22 = (const icu::UnicodeSet *)(qword_1ECD284E8 + 208);
LABEL_109:
      v79 = icu::UnicodeSet::addAll((icu::UVector **)&v180, v22);
LABEL_114:
      icu::UnicodeSet::complement(v79);
LABEL_115:
      icu::UnicodeSet::addAll(v14, (const icu::UnicodeSet *)&v180);
      icu::UnicodeSet::~UnicodeSet(v80, (icu::UnicodeSet *)&v180);
      goto LABEL_324;
    case 103:
LABEL_25:
      v4 = 66310;
      goto LABEL_192;
    case 104:
      v88 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v89 = (const icu::UnicodeSet *)(qword_1ECD284E8 + 808);
LABEL_185:
      icu::UnicodeSet::addAll(v88, v89);
      goto LABEL_324;
    default:
      goto LABEL_327;
  }
}

_QWORD *icu::RegexCompile::error(_QWORD *this, int a2)
{
  _QWORD *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  UErrorCode status;

  v2 = this;
  v3 = (int *)this[1];
  if (a2 == 7 || *v3 <= 0)
  {
    *v3 = a2;
    v4 = this[6];
    if (v4 < 0x80000000)
    {
      v7 = this[7];
      v5 = this[3];
      *(_DWORD *)v5 = v4;
      if (v7 > 0x7FFFFFFF)
        v6 = -1;
      else
        v6 = v7;
    }
    else
    {
      v5 = this[3];
      *(_DWORD *)v5 = 0;
      v6 = -1;
    }
    *(_DWORD *)(v5 + 4) = v6;
    status = U_ZERO_ERROR;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    v8 = this[3];
    *(_OWORD *)(v8 + 40) = 0u;
    *(_OWORD *)(v8 + 56) = 0u;
    utext_extract(*(UText **)(this[2] + 8), this[4] - 15, this[4], (UChar *)(this[3] + 8), 16, &status);
    return (_QWORD *)utext_extract(*(UText **)(v2[2] + 8), v2[4], v2[4] + 15, (UChar *)(v2[3] + 40), 16, &status);
  }
  return this;
}

uint64_t icu::RegexCompile::allocateStackData(icu::RegexCompile *this, int a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unsigned int v6;

  if (**((int **)this + 1) <= 0)
  {
    v4 = 66304;
    if ((a2 - 257) < 0xFFFFFF00
      || (v5 = *((_QWORD *)this + 2), v2 = *(unsigned int *)(v5 + 128), (v2 & 0x80000000) != 0))
    {
      v2 = 0;
    }
    else
    {
      v6 = v2 + a2;
      *(_DWORD *)(v5 + 128) = v6;
      if (v6 < 0xFFFFF0)
        return v2;
      v4 = 66324;
    }
    icu::RegexCompile::error(this, v4);
    return v2;
  }
  return 0;
}

void icu::RegexCompile::stripNOPs(icu::RegexCompile *this)
{
  UErrorCode *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  void (**v28)(icu::UnicodeString *__hidden);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = (UErrorCode *)*((_QWORD *)this + 1);
  if (*(int *)v1 > 0)
    return;
  v3 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8);
  v26 = 0u;
  v27 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v26, v3, v1);
  if ((int)v3 <= 0)
  {
    v11 = 0;
    v29 = 0u;
    v30 = 0u;
    v32 = 0;
    v31 = 0u;
    v28 = off_1E2256B38;
    LOWORD(v29) = 2;
    goto LABEL_42;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = DWORD2(v26);
    if (SDWORD2(v26) < -1 || SHIDWORD(v26) <= SDWORD2(v26))
    {
      if (!icu::UVector32::expandCapacity((icu::UVector32 *)&v26, DWORD2(v26) + 1, *((UErrorCode **)this + 1)))goto LABEL_12;
      v6 = DWORD2(v26);
    }
    *(_DWORD *)(*((_QWORD *)&v27 + 1) + 4 * v6) = v5;
    ++DWORD2(v26);
LABEL_12:
    v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
    if (v4 >= *(int *)(v8 + 8))
      LODWORD(v9) = 0;
    else
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 8 * v4);
    if ((v9 & 0xFF000000) == 0x7000000)
      ++v5;
    ++v4;
  }
  while (v3 != v4);
  v10 = 0;
  v11 = 0;
  v29 = 0u;
  v30 = 0u;
  v32 = 0;
  v31 = 0u;
  v28 = off_1E2256B38;
  LOWORD(v29) = 2;
  do
  {
    v12 = *((_QWORD *)this + 2);
    v13 = *(_QWORD *)(v12 + 32);
    if (v10 >= *(int *)(v13 + 8))
    {
      LODWORD(v14) = 0;
LABEL_26:
      v18 = (int)v14;
LABEL_27:
      icu::UVector64::setElementAt(v13, v18, v11++);
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * v10);
      v15 = BYTE3(v14);
      switch(BYTE3(v14))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xE:
        case 0x10:
        case 0x11:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1E:
        case 0x20:
        case 0x21:
        case 0x23:
        case 0x25:
        case 0x26:
        case 0x27:
        case 0x28:
        case 0x2A:
        case 0x2B:
        case 0x2C:
        case 0x2D:
        case 0x2E:
        case 0x2F:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
        case 0x3A:
          goto LABEL_26;
        case 6:
        case 0xD:
        case 0xF:
        case 0x12:
        case 0x1C:
        case 0x1D:
        case 0x1F:
        case 0x24:
          v16 = 0;
          v17 = v14 & 0xFFFFFF;
          if (SDWORD2(v26) >= 1 && SDWORD2(v26) > v17)
            v16 = *(_DWORD *)(*((_QWORD *)&v27 + 1) + 4 * (v14 & 0xFFFFFF));
          v18 = (int)icu::RegexCompile::buildOp((int **)this, BYTE3(v14), v17 - v16);
          v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
          goto LABEL_27;
        case 7:
          break;
        case 0x22:
        case 0x29:
          v19 = v14 & 0xFFFFFF;
          v20 = *(_QWORD *)(v12 + 136);
          v21 = *(_DWORD *)(v20 + 8);
          if (v19 <= v21)
          {
            if (v19)
              v22 = v21 < 1;
            else
              v22 = 1;
            if (v22)
              v23 = 0;
            else
              v23 = *(_DWORD *)(*(_QWORD *)(v20 + 24) + 4 * (v19 - 1));
            v24 = icu::RegexCompile::buildOp((int **)this, v15, v23);
            icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), v24, v11++);
            *(_BYTE *)(*((_QWORD *)this + 2) + 184) = 1;
          }
          else
          {
            icu::RegexCompile::error(this, 66314);
          }
          break;
        default:
          if (BYTE3(v14) != 255)
            abort();
          goto LABEL_26;
      }
    }
    ++v10;
  }
  while (v3 != v10);
LABEL_42:
  icu::UVector64::setSize(*(icu::UVector64 **)(*((_QWORD *)this + 2) + 32), v11);
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v28);
  icu::UVector32::~UVector32((void **)&v26);
}

uint64_t icu::RegexCompile::minMatchLength(icu::RegexCompile *this, signed int a2, int a3)
{
  UErrorCode *v4;
  uint64_t v5;
  int v8;
  signed int v9;
  int v10;
  int v11;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  signed int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  int v23;
  uint64_t v24;
  signed int v25;
  int v26;
  int v27;
  int v28;
  signed int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;

  v4 = (UErrorCode *)*((_QWORD *)this + 1);
  if (*(int *)v4 > 0)
    return 0;
  v31 = 0u;
  v32 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v31, a3 + 2, v4);
  icu::UVector32::setSize((icu::UVector32 *)&v31, a3 + 2);
  v8 = a3 + 1;
  if (a3 + 1 >= a2)
  {
    v9 = a2;
    do
    {
      icu::UVector32::setElementAt((uint64_t)&v31, 0x7FFFFFFF, v9);
      v16 = v9++ <= a3;
    }
    while (v16);
  }
  if (a2 > a3)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v10 = 0;
  do
  {
    if (a2 < 0)
    {
      v10 &= v10 >> 31;
      goto LABEL_35;
    }
    v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
    v14 = *(_DWORD *)(v13 + 8);
    if (v14 <= a2)
      LODWORD(v15) = 0;
    else
      v15 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * a2);
    v16 = SDWORD2(v31) < 1 || SDWORD2(v31) <= a2;
    if (v16)
    {
      v10 &= v10 >> 31;
    }
    else if (*(_DWORD *)(*((_QWORD *)&v32 + 1) + 4 * a2) < v10)
    {
      v10 = *(_DWORD *)(*((_QWORD *)&v32 + 1) + 4 * a2);
    }
    switch(BYTE3(v15))
    {
      case 0u:
      case 2u:
      case 5u:
      case 7u:
      case 8u:
      case 9u:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x14u:
      case 0x17u:
      case 0x18u:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x26u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
        goto LABEL_35;
      case 1u:
        goto LABEL_71;
      case 3u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x1Bu:
      case 0x27u:
      case 0x31u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
        goto LABEL_32;
      case 4u:
        if (v14 <= ++a2)
          LODWORD(v24) = 0;
        else
          v24 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * a2);
        v30 = v24 & 0xFFFFFF;
        if ((v10 ^ 0x7FFFFFFFu) <= v30)
          v10 = 0x7FFFFFFF;
        else
          v10 += v30;
        goto LABEL_35;
      case 6u:
        v25 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) > a2)
        {
          v26 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v25)
            v26 = *(_DWORD *)(*((_QWORD *)&v32 + 1) + 4 * (v15 & 0xFFFFFF));
          if (v10 < v26)
            goto LABEL_82;
        }
        goto LABEL_35;
      case 0xDu:
        goto LABEL_70;
      case 0x19u:
      case 0x1Au:
        if (v14 <= a2 + 1)
          LODWORD(v17) = 0;
        else
          v17 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * (a2 + 1));
        if (v14 <= a2 + 2)
          v27 = 0;
        else
          v27 = *(_DWORD *)(*(_QWORD *)(v13 + 24) + 8 * (a2 + 2));
        v29 = v17 & 0xFFFFFF;
        if (v27)
          a2 += 3;
        else
          a2 = v29;
        goto LABEL_35;
      case 0x24u:
        ++a2;
LABEL_70:
        v25 = v15 & 0xFFFFFF;
        if ((v15 & 0xFFFFFF) >= a2)
        {
          v28 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v25)
            v28 = *(_DWORD *)(*((_QWORD *)&v32 + 1) + 4 * (v15 & 0xFFFFFF));
          if (v28 > v10)
LABEL_82:
            icu::UVector32::setElementAt((uint64_t)&v31, v10, v25);
        }
        else
        {
LABEL_71:
          v10 = 0;
          if (SDWORD2(v31) >= 1 && SDWORD2(v31) > a2 + 1)
            v10 = *(_DWORD *)(*((_QWORD *)&v32 + 1) + 4 * (a2 + 1));
        }
        goto LABEL_35;
      case 0x25u:
      case 0x2Cu:
        if (BYTE3(v15) == 37)
          v18 = 2;
        else
          v18 = 1;
        break;
      case 0x28u:
        ++a2;
LABEL_32:
        if (v10 >> 1 == 0x3FFFFFFF)
          v10 = 0x7FFFFFFF;
        else
          ++v10;
        goto LABEL_35;
      default:
        abort();
    }
    while (1)
    {
      v19 = a2 + 1;
      if (a2 <= -2 || *(_DWORD *)(v13 + 8) <= v19)
        goto LABEL_60;
      v20 = *(_QWORD *)(*(_QWORD *)(v13 + 24) + 8 * v19);
      v21 = v18 + 2;
      if (BYTE3(v20) != 37)
        v21 = v18;
      v18 = BYTE3(v20) == 44 ? v21 + 1 : v21;
      if (BYTE3(v20) != 6)
        break;
      v22 = v20 & 0xFFFFFF;
      if ((v20 & 0xFFFFFF) > v19)
      {
        v23 = 0;
        if (SDWORD2(v31) >= 1 && SDWORD2(v31) > v22)
          v23 = *(_DWORD *)(*((_QWORD *)&v32 + 1) + 4 * (v20 & 0xFFFFFF));
        if (v10 < v23)
        {
          icu::UVector32::setElementAt((uint64_t)&v31, v10, v22);
          v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
        }
      }
LABEL_60:
      ++a2;
    }
    if (BYTE3(v20) != 48 && BYTE3(v20) != 38)
      goto LABEL_60;
    if (--v18)
      goto LABEL_60;
    ++a2;
LABEL_35:
    v16 = a2++ < a3;
  }
  while (v16);
LABEL_8:
  if (a3 < -1 || SDWORD2(v31) < 1 || SDWORD2(v31) <= v8)
  {
    v5 = v10 & (v10 >> 31);
  }
  else
  {
    v11 = *(_DWORD *)(*((_QWORD *)&v32 + 1) + 4 * v8);
    if (v11 >= v10)
      v5 = v10;
    else
      v5 = v11;
  }
  icu::UVector32::~UVector32((void **)&v31);
  return v5;
}

void icu::RegexCompile::matchStartType(icu::RegexCompile *this)
{
  UErrorCode *v1;
  int v3;
  icu::UVector32 *v4;
  unsigned int i;
  int v6;
  int v7;
  int v8;
  unsigned int j;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  int k;
  uint64_t v19;
  int v20;
  signed int v21;
  int v22;
  icu::UnicodeSet *v23;
  unsigned int v24;
  uint64_t *v25;
  signed int v26;
  int v27;
  const icu::UnicodeSet *v28;
  icu::UVector **v29;
  void *v30;
  uint64_t v31;
  icu::UnicodeSet *v32;
  const icu::UnicodeSet *v33;
  void *v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  icu::RegexCompile *v40;
  icu::UnicodeSet *v41;
  void *v42;
  uint64_t v43;
  icu::UnicodeSet *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  _BOOL4 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;

  v1 = (UErrorCode *)*((_QWORD *)this + 1);
  if (*(int *)v1 <= 0)
  {
    v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8);
    v66 = 0u;
    v67 = 0u;
    v4 = icu::UVector32::UVector32((icu::UVector32 *)&v66, v3 + 1, v1);
    icu::UVector32::setSize(v4, v3 + 1);
    if (v3 < 4)
    {
      v7 = 0;
    }
    else
    {
      for (i = 3; i != v3; ++i)
        icu::UVector32::setElementAt((uint64_t)&v66, 0x7FFFFFFF, i);
      v6 = 0;
      v7 = 0;
      v8 = 1;
      for (j = 3; (int)j < v3; ++j)
      {
        if ((j & 0x80000000) != 0)
        {
          v6 &= v6 >> 31;
        }
        else
        {
          v10 = *((_QWORD *)this + 2);
          v11 = *(_QWORD *)(v10 + 32);
          v12 = *(_DWORD *)(v11 + 8);
          if (v12 <= (int)j)
            LODWORD(v13) = 0;
          else
            v13 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * j);
          if (SDWORD2(v66) < 1 || SDWORD2(v66) <= (int)j)
          {
            v6 &= v6 >> 31;
          }
          else if (*(_DWORD *)(*((_QWORD *)&v67 + 1) + 4 * j) < v6)
          {
            v6 = *(_DWORD *)(*((_QWORD *)&v67 + 1) + 4 * j);
          }
          switch(BYTE3(v13))
          {
            case 0u:
            case 2u:
            case 5u:
            case 7u:
            case 8u:
            case 9u:
            case 0xEu:
            case 0x10u:
            case 0x11u:
            case 0x14u:
            case 0x18u:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x29u:
            case 0x2Au:
            case 0x35u:
            case 0x36u:
            case 0x37u:
              continue;
            case 1u:
              goto LABEL_74;
            case 3u:
              if (v6)
                goto LABEL_125;
              v23 = *(icu::UnicodeSet **)(v10 + 160);
              v24 = v13 & 0xFFFFFF;
              goto LABEL_123;
            case 4u:
              if (v12 <= (int)++j)
                v25 = 0;
              else
                v25 = *(uint64_t **)(*(_QWORD *)(v11 + 24) + 8 * j);
              v37 = v25 & 0xFFFFFF;
              if (!v6)
              {
                v38 = icu::UnicodeString::char32At(v25, (icu::UnicodeString *)(v10 + 40), v13 & 0xFFFFFF);
                icu::UnicodeSet::add(*(icu::UnicodeSet **)(*((_QWORD *)this + 2) + 160), v38);
                ++v7;
                v39 = *((_QWORD *)this + 2);
                *(_DWORD *)(v39 + 148) = v13 & 0xFFFFFF;
                *(_DWORD *)(v39 + 152) = v37;
              }
              v8 = 0;
              if ((v6 ^ 0x7FFFFFFFu) <= v37)
                v6 = 0x7FFFFFFF;
              else
                v6 += v37;
              continue;
            case 6u:
              v26 = v13 & 0xFFFFFF;
              if ((v13 & 0xFFFFFF) <= j)
                goto LABEL_20;
              v27 = 0;
              if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v26)
                v27 = *(_DWORD *)(*((_QWORD *)&v67 + 1) + 4 * (v13 & 0xFFFFFF));
              if (v6 >= v27)
                goto LABEL_20;
              goto LABEL_108;
            case 0xAu:
              if (v6)
                goto LABEL_125;
              v28 = (const icu::UnicodeSet *)(qword_1ECD284E8 + 200 * (v13 & 0xFFFFFF) + 8);
              v29 = *(icu::UVector ***)(v10 + 160);
              goto LABEL_66;
            case 0xBu:
              if (v6)
                goto LABEL_125;
              v28 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(v10 + 104), v13 & 0xFFFFFF);
              v29 = *(icu::UVector ***)(*((_QWORD *)this + 2) + 160);
LABEL_66:
              icu::UnicodeSet::addAll(v29, v28);
              goto LABEL_124;
            case 0xCu:
            case 0x13u:
            case 0x15u:
            case 0x1Bu:
              if (v6)
                goto LABEL_125;
              icu::UnicodeSet::clear(*(icu::UnicodeSet **)(v10 + 160));
              icu::UnicodeSet::complement(*(icu::UnicodeSet **)(*((_QWORD *)this + 2) + 160));
              goto LABEL_124;
            case 0xDu:
              goto LABEL_73;
            case 0xFu:
            case 0x12u:
            case 0x1Cu:
            case 0x1Du:
            case 0x33u:
              goto LABEL_20;
            case 0x16u:
              if (v6)
                goto LABEL_125;
              v65 = 0;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v57 = 0u;
              v58 = 0u;
              v55 = 0u;
              v56 = 0u;
              v53 = 0u;
              v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v53, 0x2000, 0x200u, *((UErrorCode **)this + 1));
              goto LABEL_91;
            case 0x17u:
              if (!v8)
                continue;
              v16 = 3;
              goto LABEL_71;
            case 0x19u:
            case 0x1Au:
              if (v12 <= (int)(j + 1))
                LODWORD(v15) = 0;
              else
                v15 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * (j + 1)) & 0xFFFFFFLL;
              if (v12 <= (int)(j + 2) || !*(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * (j + 2)))
              {
                v35 = 0;
                if (SDWORD2(v66) >= 1 && SDWORD2(v66) > (int)v15)
                  v35 = *(_DWORD *)(*((_QWORD *)&v67 + 1) + 4 * v15);
                if (v35 > v6)
                  icu::UVector32::setElementAt((uint64_t)&v66, v6, v15);
              }
              v8 = 0;
              j += 3;
              continue;
            case 0x1Eu:
            case 0x2Bu:
              if (!v8)
                continue;
              v16 = 4;
LABEL_71:
              *(_DWORD *)(v10 + 144) = v16;
              v8 = 1;
              continue;
            case 0x24u:
              ++j;
LABEL_73:
              v26 = v13 & 0xFFFFFF;
              if ((v13 & 0xFFFFFF) >= j)
              {
                v36 = 0;
                if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v26)
                  v36 = *(_DWORD *)(*((_QWORD *)&v67 + 1) + 4 * (v13 & 0xFFFFFF));
                if (v36 > v6)
LABEL_108:
                  icu::UVector32::setElementAt((uint64_t)&v66, v6, v26);
LABEL_20:
                v8 = 0;
              }
              else
              {
LABEL_74:
                v8 = 0;
                if (SDWORD2(v66) < 1 || SDWORD2(v66) <= (int)(j + 1))
                {
                  v6 = 0;
                }
                else
                {
                  v8 = 0;
                  v6 = *(_DWORD *)(*((_QWORD *)&v67 + 1) + 4 * (j + 1));
                }
              }
              continue;
            case 0x25u:
            case 0x2Cu:
              if (BYTE3(v13) == 37)
                v17 = 2;
              else
                v17 = 1;
              do
              {
                while (1)
                {
                  for (k = j; k <= -2 || *(_DWORD *)(v11 + 8) <= k + 1; ++k)
                    ;
                  j = k + 1;
                  v19 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * (k + 1));
                  v20 = v17 + 2;
                  if (BYTE3(v19) != 37)
                    v20 = v17;
                  v17 = BYTE3(v19) == 44 ? v20 + 1 : v20;
                  if (BYTE3(v19) != 6)
                    break;
                  v21 = v19 & 0xFFFFFF;
                  if ((v19 & 0xFFFFFF) > j)
                  {
                    v22 = 0;
                    if (SDWORD2(v66) >= 1 && SDWORD2(v66) > v21)
                      v22 = *(_DWORD *)(*((_QWORD *)&v67 + 1) + 4 * (v19 & 0xFFFFFF));
                    if (v6 < v22)
                    {
                      icu::UVector32::setElementAt((uint64_t)&v66, v6, v21);
                      v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
                      j = k + 1;
                    }
                  }
                }
              }
              while (BYTE3(v19) != 48 && BYTE3(v19) != 38 || --v17);
              j = k + 1;
              continue;
            case 0x27u:
              if (!v6)
              {
                if (u_hasBinaryProperty(v13 & 0xFFFFFF, UCHAR_CASE_SENSITIVE))
                {
                  v65 = 0;
                  v63 = 0u;
                  v64 = 0u;
                  v61 = 0u;
                  v62 = 0u;
                  v59 = 0u;
                  v60 = 0u;
                  v57 = 0u;
                  v58 = 0u;
                  v55 = 0u;
                  v56 = 0u;
                  v53 = 0u;
                  v54 = 0u;
                  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53, v13 & 0xFFFFFF, v13 & 0xFFFFFF);
                  icu::UnicodeSet::closeOver((uint64_t)&v53, 2);
                  icu::UnicodeSet::addAll(*(icu::UVector ***)(*((_QWORD *)this + 2) + 160), (const icu::UnicodeSet *)&v53);
                  icu::UnicodeSet::~UnicodeSet(v30, (icu::UnicodeSet *)&v53);
                }
                else
                {
                  v23 = *(icu::UnicodeSet **)(*((_QWORD *)this + 2) + 160);
                  v24 = v13 & 0xFFFFFF;
LABEL_123:
                  icu::UnicodeSet::add(v23, v24);
                }
LABEL_124:
                v7 += 2;
              }
              goto LABEL_125;
            case 0x28u:
              if (v12 <= (int)++j)
              {
                LODWORD(v31) = 0;
              }
              else
              {
                v11 = *(_QWORD *)(v11 + 24);
                v31 = *(_QWORD *)(v11 + 8 * j);
              }
              if (!v6)
              {
                v40 = (icu::RegexCompile *)icu::UnicodeString::char32At((uint64_t *)v11, (icu::UnicodeString *)(v10 + 40), v13 & 0xFFFFFF);
                v65 = 0;
                v63 = 0u;
                v64 = 0u;
                v61 = 0u;
                v62 = 0u;
                v59 = 0u;
                v60 = 0u;
                v57 = 0u;
                v58 = 0u;
                v55 = 0u;
                v56 = 0u;
                v53 = 0u;
                v54 = 0u;
                icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
                icu::RegexCompile::findCaseInsensitiveStarters(v40, (icu::UnicodeSet *)&v53, v41);
                icu::UnicodeSet::addAll(*(icu::UVector ***)(*((_QWORD *)this + 2) + 160), (const icu::UnicodeSet *)&v53);
                v7 += 2;
                icu::UnicodeSet::~UnicodeSet(v42, (icu::UnicodeSet *)&v53);
              }
              v8 = 0;
              if ((v6 ^ 0x7FFFFFFFu) <= (v31 & 0xFFFFFF))
                v6 = 0x7FFFFFFF;
              else
                v6 += v31 & 0xFFFFFF;
              continue;
            case 0x31u:
              if (v6)
                goto LABEL_125;
              v65 = 0;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v57 = 0u;
              v58 = 0u;
              v55 = 0u;
              v56 = 0u;
              v53 = 0u;
              v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              v32 = icu::UnicodeSet::addAll((icu::UVector **)&v53, (const icu::UnicodeSet *)(qword_1ECD284E8 + 200 * (v13 & 0xFFFFFF) + 8));
              goto LABEL_93;
            case 0x32u:
              if (v6)
                goto LABEL_20;
              v33 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(v10 + 104), v13 & 0xFFFFFF);
              icu::UnicodeSet::addAll(*(icu::UVector ***)(*((_QWORD *)this + 2) + 160), v33);
              goto LABEL_88;
            case 0x34u:
              if (v6)
                goto LABEL_20;
              icu::UnicodeSet::clear(*(icu::UnicodeSet **)(v10 + 160));
              icu::UnicodeSet::complement(*(icu::UnicodeSet **)(*((_QWORD *)this + 2) + 160));
LABEL_88:
              v8 = 0;
              v7 += 2;
              continue;
            case 0x38u:
              if (v6)
                goto LABEL_125;
              v65 = 0;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v57 = 0u;
              v58 = 0u;
              v55 = 0u;
              v56 = 0u;
              v53 = 0u;
              v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)&v53, 0x2000, 0x1000u, *((UErrorCode **)this + 1));
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 9u);
              goto LABEL_91;
            case 0x39u:
            case 0x3Au:
              if (v6)
                goto LABEL_125;
              v65 = 0;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v57 = 0u;
              v58 = 0u;
              v55 = 0u;
              v56 = 0u;
              v53 = 0u;
              v54 = 0u;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v53);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0xAu, 0xDu);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0x85u);
              icu::UnicodeSet::add((icu::UnicodeSet *)&v53, 0x2028u, 0x2029u);
LABEL_91:
              if ((v13 & 0xFFFFFF) != 0)
              {
                v32 = (icu::UnicodeSet *)&v53;
LABEL_93:
                icu::UnicodeSet::complement(v32);
              }
              icu::UnicodeSet::addAll(*(icu::UVector ***)(*((_QWORD *)this + 2) + 160), (const icu::UnicodeSet *)&v53);
              v7 += 2;
              icu::UnicodeSet::~UnicodeSet(v34, (icu::UnicodeSet *)&v53);
LABEL_125:
              v8 = 0;
              if (v6 >> 1 == 0x3FFFFFFF)
                v6 = 0x7FFFFFFF;
              else
                ++v6;
              break;
            default:
              abort();
          }
        }
      }
    }
    v43 = *((_QWORD *)this + 2);
    v44 = *(icu::UnicodeSet **)(v43 + 160);
    if (v44)
    {
      v45 = 0;
      v46 = *(_QWORD *)(v43 + 176);
      do
      {
        if (icu::UnicodeSet::contains(v44, v45))
          *(_BYTE *)(v46 + ((unint64_t)v45 >> 3)) |= 1 << (v45 & 7);
        ++v45;
      }
      while (v45 != 256);
      v43 = *((_QWORD *)this + 2);
    }
    v47 = *(_DWORD *)(v43 + 144);
    if (v47 == 3)
      goto LABEL_148;
    if (v7 == 1 && *(int *)(v43 + 124) >= 1)
    {
      v48 = icu::UnicodeString::char32At((uint64_t *)v43, (icu::UnicodeString *)(v43 + 40), *(_DWORD *)(v43 + 148));
      v49 = *((_QWORD *)this + 2);
      *(_DWORD *)(v49 + 144) = 5;
LABEL_145:
      *(_DWORD *)(v49 + 168) = v48;
      goto LABEL_148;
    }
    if (v47 == 4)
    {
LABEL_148:
      icu::UVector32::~UVector32((void **)&v66);
      return;
    }
    if (*(_DWORD *)(v43 + 124))
    {
      v50 = icu::UnicodeSet::size(*(icu::UnicodeSet **)(v43 + 160));
      v51 = *((_QWORD *)this + 2);
      if (v50 == 1)
      {
        *(_DWORD *)(v51 + 144) = 1;
        v48 = icu::UnicodeSet::charAt(*(icu::UnicodeSet **)(v51 + 160), 0);
        v49 = *((_QWORD *)this + 2);
        goto LABEL_145;
      }
      v52 = icu::UnicodeSet::contains(*(icu::UnicodeSet **)(v51 + 160), 0, 1114111);
      v43 = *((_QWORD *)this + 2);
      if (!v52 && *(int *)(v43 + 124) >= 1)
      {
        *(_DWORD *)(v43 + 144) = 2;
        goto LABEL_148;
      }
    }
    *(_DWORD *)(v43 + 144) = 0;
    goto LABEL_148;
  }
}

_QWORD *icu::RegexCompile::appendOp(int **this, unsigned int a2, int a3)
{
  int v4;

  v4 = icu::RegexCompile::buildOp(this, a2, a3);
  return icu::RegexCompile::appendOp(this, v4);
}

_QWORD *icu::RegexCompile::handleCloseParen(icu::RegexCompile *this)
{
  _QWORD *result;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  signed int v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int matched;
  unsigned int v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  int **v53;
  unsigned int v54;
  int v55;
  int v56;
  int v57;
  int v58;

  if (*((int *)this + 94) <= 0)
    return icu::RegexCompile::error(this, 66310);
  result = (_QWORD *)icu::RegexCompile::fixLiterals((uint64_t)this, 0);
  while (1)
  {
    v3 = *((_DWORD *)this + 94);
    v4 = v3 - 1;
    if (v3 >= 1)
      break;
    v6 = 0;
LABEL_7:
    v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
    v8 = *(_DWORD *)(v7 + 8);
    if (v8 <= (int)v6)
      LODWORD(v9) = 0;
    else
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * v6);
    result = (_QWORD *)icu::UVector64::setElementAt(v7, (int)(v8 | v9), v6);
    *((_DWORD *)this + 100) = v6;
  }
  *((_DWORD *)this + 94) = v4;
  v5 = *((_QWORD *)this + 49);
  v6 = *(_DWORD *)(v5 + 4 * v4);
  if ((v6 & 0x80000000) == 0)
    goto LABEL_7;
  v10 = v3 >= 2;
  v11 = v3 - 2;
  if (v10)
  {
    *((_DWORD *)this + 94) = v11;
    v12 = *(_DWORD *)(v5 + 4 * v11);
  }
  else
  {
    v12 = 0;
  }
  *((_DWORD *)this + 71) = v12;
  switch(v6)
  {
    case 0xFFFFFFF8:
      v13 = *((_DWORD *)this + 100);
      v14 = __OFSUB__(v13, 5);
      v15 = v13 - 5;
      if (v15 < 0 != v14 || (v16 = *(_QWORD *)(*((_QWORD *)this + 2) + 32), *(_DWORD *)(v16 + 8) <= v15))
        LODWORD(v17) = 0;
      else
        v17 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8 * v15) & 0xFFFFFFLL;
      v35 = icu::RegexCompile::buildOp((int **)this, 0x30u, v17);
      icu::RegexCompile::appendOp(this, v35);
      v36 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8) - 1;
      matched = icu::RegexCompile::minMatchLength(this, *((_DWORD *)this + 100), v36);
      v38 = icu::RegexCompile::maxMatchLength(this, *((_DWORD *)this + 100), v36);
      if (HIBYTE(v38))
        goto LABEL_46;
      v39 = v38;
      if (matched == 0x7FFFFFFF)
        v40 = 0;
      else
        v40 = matched;
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), v40, *((_DWORD *)this + 100) - 3);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), v39, *((_DWORD *)this + 100) - 2);
      v41 = icu::RegexCompile::buildOp((int **)this, 0x1Fu, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8));
      v42 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
      v43 = v41;
      v44 = *((_DWORD *)this + 100) - 1;
      goto LABEL_56;
    case 0xFFFFFFF9:
      v18 = *((_DWORD *)this + 100);
      v14 = __OFSUB__(v18, 4);
      v19 = v18 - 4;
      if (v19 < 0 != v14 || (v20 = *(_QWORD *)(*((_QWORD *)this + 2) + 32), *(_DWORD *)(v20 + 8) <= v19))
        LODWORD(v21) = 0;
      else
        v21 = *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8 * v19) & 0xFFFFFFLL;
      v45 = icu::RegexCompile::buildOp((int **)this, 0x2Eu, v21);
      icu::RegexCompile::appendOp(this, v45);
      v46 = icu::RegexCompile::buildOp((int **)this, 0x26u, v21);
      icu::RegexCompile::appendOp(this, v46);
      v47 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8) - 1;
      v48 = icu::RegexCompile::minMatchLength(this, *((_DWORD *)this + 100), v47);
      v49 = icu::RegexCompile::maxMatchLength(this, *((_DWORD *)this + 100), v47);
      if (HIBYTE(v49))
      {
LABEL_46:
        result = icu::RegexCompile::error(this, 66316);
      }
      else
      {
        v50 = v49;
        if (v48 == 0x7FFFFFFF)
          v51 = 0;
        else
          v51 = v48;
        icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), v51, *((_DWORD *)this + 100) - 2);
        v52 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
        v43 = v50;
        v44 = *((_DWORD *)this + 100) - 1;
LABEL_57:
        result = (_QWORD *)icu::UVector64::setElementAt(v52, v43, v44);
      }
      break;
    case 0xFFFFFFFA:
    case 0xFFFFFFFF:
      break;
    case 0xFFFFFFFB:
      v22 = *((_DWORD *)this + 100);
      if (v22 >= 1 && (v23 = *(_QWORD *)(*((_QWORD *)this + 2) + 32), *(_DWORD *)(v23 + 8) >= v22))
        v24 = *(_QWORD *)(*(_QWORD *)(v23 + 24) + 8 * (v22 - 1)) & 0xFFFFFFLL;
      else
        LODWORD(v24) = 0;
      v56 = icu::RegexCompile::buildOp((int **)this, 0x26u, v24);
      icu::RegexCompile::appendOp(this, v56);
      icu::RegexCompile::appendOp(this, (**((_DWORD **)this + 1) < 1) << 24);
      v57 = icu::RegexCompile::buildOp((int **)this, 0x26u, v24);
      icu::RegexCompile::appendOp(this, v57);
      v58 = icu::RegexCompile::buildOp((int **)this, 6u, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8) - 1);
      v42 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
      v43 = v58;
      v44 = *((_DWORD *)this + 100);
LABEL_56:
      v52 = v42;
      goto LABEL_57;
    case 0xFFFFFFFC:
      v25 = *((_DWORD *)this + 100);
      v14 = __OFSUB__(v25, 5);
      v26 = v25 - 5;
      if (v26 < 0 != v14 || (v27 = *(_QWORD *)(*((_QWORD *)this + 2) + 32), *(_DWORD *)(v27 + 8) <= v26))
        LODWORD(v28) = 0;
      else
        v28 = *(_QWORD *)(*(_QWORD *)(v27 + 24) + 8 * v26) & 0xFFFFFFLL;
      v53 = (int **)this;
      v54 = 38;
      goto LABEL_53;
    case 0xFFFFFFFD:
      v29 = *((_DWORD *)this + 100);
      if (v29 < -1 || (v30 = *(_QWORD *)(*((_QWORD *)this + 2) + 32), v31 = v29 + 1, *(_DWORD *)(v30 + 8) <= v31))
        LODWORD(v28) = 0;
      else
        v28 = *(_QWORD *)(*(_QWORD *)(v30 + 24) + 8 * v31) & 0xFFFFFFLL;
      v53 = (int **)this;
      v54 = 33;
      goto LABEL_53;
    case 0xFFFFFFFE:
      v32 = *((_DWORD *)this + 100);
      if (v32 < -1 || (v33 = *(_QWORD *)(*((_QWORD *)this + 2) + 32), v34 = v32 + 1, *(_DWORD *)(v33 + 8) <= v34))
        LODWORD(v28) = 0;
      else
        v28 = *(_QWORD *)(*(_QWORD *)(v33 + 24) + 8 * v34) & 0xFFFFFFLL;
      v53 = (int **)this;
      v54 = 9;
LABEL_53:
      v55 = icu::RegexCompile::buildOp(v53, v54, v28);
      result = icu::RegexCompile::appendOp(this, v55);
      break;
    default:
      abort();
  }
  *((_DWORD *)this + 101) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8);
  return result;
}

uint64_t icu::RegexCompile::fixLiterals(uint64_t this, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  icu::UnicodeString *v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int **v19;
  unsigned int v20;
  int v21;
  int **v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  __int16 v31;

  v2 = this;
  v3 = a2;
  v4 = (icu::UnicodeString *)(this + 296);
  while (1)
  {
    if (*(__int16 *)(v2 + 304) < 0)
    {
      v6 = *(_DWORD *)(v2 + 308);
      if (!v6)
        return this;
    }
    else
    {
      v5 = *(unsigned __int16 *)(v2 + 304);
      if (v5 < 0x20)
        return this;
      v6 = v5 >> 5;
    }
    v7 = icu::UnicodeString::moveIndex32(v4, v6, -1);
    v9 = icu::UnicodeString::char32At(v8, v4, v7);
    if (!v3)
      break;
    v10 = *(unsigned __int16 *)(v2 + 304);
    if (v7 || (v10 & 1) == 0)
    {
      if ((v10 & 0x8000) != 0)
        v11 = *(_DWORD *)(v2 + 308);
      else
        v11 = v10 >> 5;
      if (v11 > v7)
      {
        if (v7 > 1023)
        {
          *(_WORD *)(v2 + 304) = v10 | 0xFFE0;
          *(_DWORD *)(v2 + 308) = v7;
        }
        else
        {
          *(_WORD *)(v2 + 304) = *(_WORD *)(v2 + 304) & 0x1F | (32 * v7);
        }
      }
    }
    else
    {
      icu::UnicodeString::unBogus((uint64_t)v4);
    }
    icu::RegexCompile::fixLiterals((icu::RegexCompile *)v2, 0);
    this = icu::UnicodeString::append((uint64_t)v4, v9);
    v3 = 0;
  }
  if ((*(_BYTE *)(v2 + 284) & 2) != 0)
  {
    icu::UnicodeString::foldCase((const UChar **)v4, 0);
    v12 = *(unsigned __int16 *)(v2 + 304);
    if ((v12 & 0x8000) != 0)
      v13 = *(_DWORD *)(v2 + 308);
    else
      v13 = v12 >> 5;
    v7 = icu::UnicodeString::moveIndex32(v4, v13, -1);
    v9 = icu::UnicodeString::char32At(v14, v4, v7);
  }
  if (v7)
  {
    if (*(__int16 *)(v2 + 304) < 0 && *(int *)(v2 + 308) > 0xFFFFFF
      || (v15 = *(_QWORD *)(v2 + 16), *(__int16 *)(v15 + 48) < 0) && *(int *)(v15 + 52) >= 0x1000000)
    {
      icu::RegexCompile::error((_QWORD *)v2, 66324);
    }
    v16 = *(_QWORD *)(v2 + 16);
    v17 = *(unsigned __int16 *)(v16 + 48);
    if ((*(_BYTE *)(v2 + 284) & 2) != 0)
    {
      if ((v17 & 0x8000) != 0)
        v18 = *(_DWORD *)(v16 + 52);
      else
        v18 = v17 >> 5;
      v22 = (int **)v2;
      v23 = 40;
    }
    else
    {
      if ((v17 & 0x8000) != 0)
        v18 = *(_DWORD *)(v16 + 52);
      else
        v18 = v17 >> 5;
      v22 = (int **)v2;
      v23 = 4;
    }
    v24 = icu::RegexCompile::buildOp(v22, v23, v18);
    icu::RegexCompile::appendOp((_QWORD *)v2, v24);
    if (*(__int16 *)(v2 + 304) < 0)
      v25 = *(_DWORD *)(v2 + 308);
    else
      v25 = *(unsigned __int16 *)(v2 + 304) >> 5;
    v26 = icu::RegexCompile::buildOp((int **)v2, 5u, v25);
    icu::RegexCompile::appendOp((_QWORD *)v2, v26);
    v27 = *(unsigned __int16 *)(v2 + 304);
    v28 = (__int16)v27;
    v29 = v27 >> 5;
    if (v28 >= 0)
      v30 = v29;
    else
      v30 = *(unsigned int *)(v2 + 308);
    this = icu::UnicodeString::doAppend(*(_QWORD *)(v2 + 16) + 40, v4, 0, v30);
  }
  else
  {
    if ((*(_BYTE *)(v2 + 284) & 2) != 0 && u_hasBinaryProperty(v9, UCHAR_CASE_SENSITIVE))
    {
      v19 = (int **)v2;
      v20 = 39;
    }
    else
    {
      v19 = (int **)v2;
      v20 = 3;
    }
    v21 = icu::RegexCompile::buildOp(v19, v20, v9);
    this = (uint64_t)icu::RegexCompile::appendOp((_QWORD *)v2, v21);
  }
  if ((*(_WORD *)(v2 + 304) & 1) != 0)
    v31 = 2;
  else
    v31 = *(_WORD *)(v2 + 304) & 0x1F;
  *(_WORD *)(v2 + 304) = v31;
  return this;
}

uint64_t icu::RegexCompile::buildOp(int **this, unsigned int a2, int a3)
{
  if (*this[1] > 0)
    return 0;
  if (a2 >= 0x100 || a3 >= 0x1000000)
    goto LABEL_11;
  if (a3 < 0)
  {
    if ((!a2 || a2 == 255) && HIBYTE(a3) == 255)
    {
      a2 = 255;
      return a3 | (a2 << 24);
    }
LABEL_11:
    abort();
  }
  return a3 | (a2 << 24);
}

uint64_t sub_18BD55774(icu::UVector32 *this, uint64_t a2, UErrorCode *a3)
{
  int v5;

  v5 = *((_DWORD *)this + 2);
  if (v5 >= -1 && *((_DWORD *)this + 3) > v5)
    goto LABEL_5;
  if (icu::UVector32::expandCapacity(this, v5 + 1, a3))
  {
    v5 = *((_DWORD *)this + 2);
LABEL_5:
    *(_DWORD *)(*((_QWORD *)this + 3) + 4 * v5) = a2;
    ++*((_DWORD *)this + 2);
  }
  return a2;
}

uint64_t icu::RegexCompile::allocateData(int **this, int a2)
{
  uint64_t v2;
  int *v3;

  if (*this[1] > 0)
    return 0;
  if ((a2 - 257) < 0xFFFFFF00 || (v3 = this[2], v2 = v3[33], (v2 & 0x80000000) != 0))
  {
    v2 = 0;
  }
  else
  {
    v3[33] = v2 + a2;
    if ((v2 + a2) < 0xFFFFF0)
      return v2;
  }
  icu::RegexCompile::error(this, 66304);
  return v2;
}

uint64_t icu::RegexCompile::blockTopLoc(icu::RegexCompile *this, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  UErrorCode *v8;
  uint64_t v9;

  icu::RegexCompile::fixLiterals((uint64_t)this, 1u);
  v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  v5 = *(_DWORD *)(v4 + 8);
  if (v5 == *((_DWORD *)this + 101))
    return *((unsigned int *)this + 100);
  v6 = (v5 - 1);
  if (v5 >= 1)
  {
    v7 = v5 - 2;
    if ((*(_QWORD *)(*(_QWORD *)(v4 + 24) + 8 * v6) & 0xFF000000) == 0x5000000)
      v6 = v7;
    else
      v6 = v6;
  }
  if (a2)
  {
    v8 = (UErrorCode *)*((_QWORD *)this + 1);
    if (*(int *)v8 <= 0)
      v9 = 117440512;
    else
      v9 = 0;
    icu::UVector64::insertElementAt((_DWORD *)v4, v9, v6, v8);
  }
  return v6;
}

_QWORD *icu::RegexCompile::appendOp(_QWORD *this, int a2)
{
  UErrorCode *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v2 = (UErrorCode *)this[1];
  if (*(int *)v2 > 0)
    return this;
  v4 = (uint64_t)this;
  v5 = *(_QWORD *)(this[2] + 32);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = v6 + 1;
  if (v6 < -1 || *(_DWORD *)(v5 + 12) <= v6)
  {
    this = (_QWORD *)icu::UVector64::expandCapacity(*(icu::UVector64 **)(this[2] + 32), v7, v2);
    if (!(_DWORD)this)
      goto LABEL_7;
    v6 = *(_DWORD *)(v5 + 8);
    v7 = v6 + 1;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v6) = a2;
  *(_DWORD *)(v5 + 8) = v7;
LABEL_7:
  if (*(int *)(*(_QWORD *)(*(_QWORD *)(v4 + 16) + 32) + 8) >= 16777201 && **(int **)(v4 + 8) <= 0)
    return icu::RegexCompile::error((_QWORD *)v4, 66324);
  return this;
}

uint64_t icu::RegexCompile::insertOp(icu::RegexCompile *this, signed int a2)
{
  UErrorCode *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t i;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t j;
  signed int v15;
  signed int v16;
  signed int v17;

  v4 = (UErrorCode *)*((_QWORD *)this + 1);
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  if (*(int *)v4 <= 0)
    v6 = 117440512;
  else
    v6 = 0;
  result = (uint64_t)icu::UVector64::insertElementAt(*(_DWORD **)(*((_QWORD *)this + 2) + 32), v6, a2, v4);
  v8 = *(_DWORD *)(v5 + 8);
  if (v8 >= 1)
  {
    for (i = 0; i < v8; ++i)
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * i);
      if (v10 >> 25 != 14 && (BYTE3(v10) > 0x24u || ((1 << SBYTE3(v10)) & 0x108004A040) == 0))
        continue;
      if ((v10 & 0xFFFFFF) > a2)
      {
        v12 = icu::RegexCompile::buildOp((int **)this, BYTE3(v10), (v10 & 0xFFFFFF) + 1);
        result = icu::UVector64::setElementAt(v5, v12, i);
        v8 = *(_DWORD *)(v5 + 8);
      }
    }
  }
  v13 = *((_DWORD *)this + 94);
  if (v13 >= 1)
  {
    for (j = 0; j < v13; ++j)
    {
      v15 = *(_DWORD *)(*((_QWORD *)this + 49) + 4 * j);
      if (v15 > a2)
      {
        result = icu::UVector32::setElementAt((uint64_t)this + 368, v15 + 1, j);
        v13 = *((_DWORD *)this + 94);
      }
    }
  }
  v16 = *((_DWORD *)this + 101);
  if (v16 > a2)
    *((_DWORD *)this + 101) = v16 + 1;
  v17 = *((_DWORD *)this + 100);
  if (v17 > a2)
    *((_DWORD *)this + 100) = v17 + 1;
  return result;
}

uint64_t icu::RegexCompile::compileInlineInterval(icu::RegexCompile *this)
{
  int v1;
  signed int v3;
  int v4;
  uint64_t v5;
  signed int v6;
  int v7;
  uint64_t v9;
  int v10;
  int v11;

  v1 = *((_DWORD *)this + 103);
  if (v1 > 10 || v1 < *((_DWORD *)this + 102))
    return 0;
  v3 = icu::RegexCompile::blockTopLoc(this, 0);
  v4 = *((_DWORD *)this + 103);
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  if (v4)
  {
    v6 = *(_DWORD *)(v5 + 8);
    v7 = v6 - 1;
    if (v4 != 1 && v3 != v7)
      return 0;
    LODWORD(v9) = 0;
    if ((v3 & 0x80000000) == 0 && v6 > v3)
      v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 8 * v3);
    v10 = icu::RegexCompile::buildOp((int **)this, 6u, v7 + 2 * v4 - *((_DWORD *)this + 102));
    if (!*((_DWORD *)this + 102))
    {
      icu::RegexCompile::insertOp(this, v3);
      icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), v10, v3);
    }
    if (*((int *)this + 103) >= 2)
    {
      v11 = 1;
      do
      {
        if (v11 >= *((_DWORD *)this + 102))
          icu::RegexCompile::appendOp(this, v10);
        icu::RegexCompile::appendOp(this, v9);
        ++v11;
      }
      while (v11 < *((_DWORD *)this + 103));
    }
  }
  else
  {
    icu::UVector64::setSize((icu::UVector64 *)v5, v3);
    if (*((_DWORD *)this + 100) >= v3)
      *((_DWORD *)this + 100) = -1;
    if (*((_DWORD *)this + 101) >= v3)
      *((_DWORD *)this + 101) = -1;
  }
  return 1;
}

_QWORD *icu::RegexCompile::compileInterval(icu::RegexCompile *this, unsigned int a2, unsigned int a3)
{
  unsigned int v6;
  int v7;
  int StackData;
  int v9;
  int v10;
  int v11;
  _QWORD *result;
  int v13;
  int v14;

  v6 = icu::RegexCompile::blockTopLoc(this, 1);
  icu::RegexCompile::insertOp(this, v6);
  icu::RegexCompile::insertOp(this, v6);
  icu::RegexCompile::insertOp(this, v6);
  if (*((int *)this + 103) >= 0)
    v7 = 1;
  else
    v7 = 2;
  StackData = icu::RegexCompile::allocateStackData(this, v7);
  v9 = icu::RegexCompile::buildOp((int **)this, a2, StackData);
  icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), v9, v6);
  v10 = icu::RegexCompile::buildOp((int **)this, 0x1Fu, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 32) + 8));
  icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), v10, v6 + 1);
  icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), *((int *)this + 102), v6 + 2);
  icu::UVector64::setElementAt(*(_QWORD *)(*((_QWORD *)this + 2) + 32), *((int *)this + 103), v6 + 3);
  v11 = icu::RegexCompile::buildOp((int **)this, a3, v6);
  result = icu::RegexCompile::appendOp(this, v11);
  v13 = *((_DWORD *)this + 102);
  if (HIBYTE(v13) || (v14 = *((_DWORD *)this + 103), v14 >= 0x1000000))
  {
    result = icu::RegexCompile::error(this, 66311);
    v13 = *((_DWORD *)this + 102);
    v14 = *((_DWORD *)this + 103);
  }
  if (v13 > v14 && v14 != -1)
    return icu::RegexCompile::error(this, 66313);
  return result;
}

uint64_t sub_18BD55DC8(icu::UVector64 *this, uint64_t a2, UErrorCode *a3)
{
  int v5;
  int v6;

  v5 = *((_DWORD *)this + 2);
  v6 = v5 + 1;
  if (v5 >= -1 && *((_DWORD *)this + 3) > v5)
    goto LABEL_5;
  if (icu::UVector64::expandCapacity(this, v6, a3))
  {
    v5 = *((_DWORD *)this + 2);
    v6 = v5 + 1;
LABEL_5:
    *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v5) = a2;
    *((_DWORD *)this + 2) = v6;
  }
  return a2;
}

uint64_t icu::RegexCompile::literalChar(icu::RegexCompile *this, unsigned int a2)
{
  return icu::UnicodeString::append((uint64_t)this + 296, a2);
}

icu::UnicodeSet *icu::RegexCompile::scanProp(int **this)
{
  icu::UnicodeSet *SetForProperty;
  UChar32 *v3;
  _BOOL4 v4;
  unsigned int v5;
  void *v6;
  void (**v8)(icu::UnicodeString *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*this[1] > 0)
    return 0;
  v3 = (UChar32 *)(this + 9);
  v4 = *((_DWORD *)this + 18) == 80;
  v9 = 0u;
  v10 = 0u;
  v12 = 0;
  v11 = 0u;
  v8 = off_1E2256B38;
  LOWORD(v9) = 2;
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  if (*v3 == 123)
  {
    while (1)
    {
      icu::RegexCompile::nextChar((uint64_t)this, v3);
      v5 = *((_DWORD *)this + 18);
      if (v5 == 125)
        break;
      if (v5 == -1)
        goto LABEL_7;
      icu::UnicodeString::append((uint64_t)&v8, v5);
    }
    SetForProperty = icu::RegexCompile::createSetForProperty((icu::RegexCompile *)this, (const icu::UnicodeString *)&v8, v4);
    icu::RegexCompile::nextChar((uint64_t)this, v3);
  }
  else
  {
LABEL_7:
    icu::RegexCompile::error(this, 66308);
    SetForProperty = 0;
  }
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
  return SetForProperty;
}

void icu::RegexCompile::compileSet(icu::RegexCompile *this, icu::UnicodeSet *a2)
{
  int v4;
  void *v5;
  unsigned int v6;
  icu::UVector *v7;
  int v8;
  void *v9;
  int v10;

  if (a2)
  {
    icu::UnicodeSet::removeAllStrings(a2);
    v4 = icu::UnicodeSet::size(a2);
    if (v4 == 1)
    {
      v6 = icu::UnicodeSet::charAt(a2, 0);
      icu::UnicodeString::append((uint64_t)this + 296, v6);
      goto LABEL_8;
    }
    if (!v4)
    {
      icu::RegexCompile::appendOp(this, (**((_DWORD **)this + 1) < 1) << 24);
LABEL_8:
      v9 = icu::UnicodeSet::~UnicodeSet(v5, a2);
      icu::UMemory::operator delete(v9);
      return;
    }
    icu::UnicodeSet::freeze(a2);
    v7 = *(icu::UVector **)(*((_QWORD *)this + 2) + 104);
    v8 = *((_DWORD *)v7 + 2);
    icu::UVector::addElement(v7, a2, *((UErrorCode **)this + 1));
    v5 = (void *)**((unsigned int **)this + 1);
    if ((int)v5 > 0)
      goto LABEL_8;
    v10 = icu::RegexCompile::buildOp((int **)this, 0xBu, v8);
    icu::RegexCompile::appendOp(this, v10);
  }
}

uint64_t icu::RegexCompile::scanNamedChar(icu::RegexCompile *this)
{
  UChar32 *v2;
  unsigned int v3;
  uint64_t v4;
  _WORD *v6;
  int v7;
  uint64_t v8;
  void *v9;
  _OWORD v10[6];
  int v11;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (**((int **)this + 1) > 0)
    return 0;
  v2 = (UChar32 *)((char *)this + 72);
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  if (*((_DWORD *)this + 18) != 123)
  {
    icu::RegexCompile::error(this, 66308);
    return 0;
  }
  v13 = 0u;
  v16 = 0;
  v15 = 0u;
  v14 = 0u;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  while (1)
  {
    icu::RegexCompile::nextChar((uint64_t)this, v2);
    v3 = *((_DWORD *)this + 18);
    if (v3 == 125)
      break;
    if (v3 == -1)
      goto LABEL_23;
    icu::UnicodeString::append((uint64_t)&v12, v3);
  }
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  if ((v13 & 0x11) != 0)
  {
    v6 = 0;
  }
  else if ((v13 & 2) != 0)
  {
    v6 = (_WORD *)&v13 + 1;
  }
  else
  {
    v6 = (_WORD *)v14;
  }
  if ((v13 & 0x8000u) == 0)
    v7 = (unsigned __int16)v13 >> 5;
  else
    v7 = DWORD1(v13);
  if (!uprv_isInvariantUString(v6, v7))
    goto LABEL_23;
  if (((__int16)v13 & 0x80000000) == 0)
  {
    if ((unsigned __int16)v13 < 0xC80u)
    {
      v8 = (unsigned __int16)v13 >> 5;
      goto LABEL_25;
    }
LABEL_23:
    icu::RegexCompile::error(this, 66308);
    v4 = 0;
    goto LABEL_24;
  }
  v8 = DWORD1(v13);
  if (DWORD1(v13) > 0x63)
    goto LABEL_23;
LABEL_25:
  icu::UnicodeString::extract((uint64_t)&v12, 0, v8, (char *)v10, 100);
  v4 = u_charFromName(U_UNICODE_CHAR_NAME, (const char *)v10, *((UErrorCode **)this + 1));
  if (**((int **)this + 1) >= 1)
    icu::RegexCompile::error(this, 66308);
  icu::RegexCompile::nextChar((uint64_t)this, v2);
LABEL_24:
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
  return v4;
}

uint64_t icu::RegexCompile::peekCharLL(icu::RegexCompile *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 17);
  if ((_DWORD)result == -1)
  {
    result = icu::RegexCompile::nextCharLL(this);
    *((_DWORD *)this + 17) = result;
  }
  return result;
}

uint64_t icu::RegexCompile::nextCharLL(icu::RegexCompile *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = *((unsigned int *)this + 17);
  if ((_DWORD)result != -1)
  {
    *((_DWORD *)this + 17) = -1;
    return result;
  }
  v3 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v4 = *(int *)(v3 + 40);
  if ((int)v4 >= *(_DWORD *)(v3 + 44)
    || (result = *(unsigned __int16 *)(*(_QWORD *)(v3 + 48) + 2 * v4), result >> 11 > 0x1A))
  {
    result = utext_next32(*(UText **)(*((_QWORD *)this + 2) + 8));
  }
  else
  {
    *(_DWORD *)(v3 + 40) = v4 + 1;
  }
  if ((int)result > 12)
  {
    if ((_DWORD)result != 13 && (_DWORD)result != 133 && (_DWORD)result != 8232)
    {
LABEL_18:
      ++*((_QWORD *)this + 7);
      goto LABEL_19;
    }
LABEL_17:
    ++*((_QWORD *)this + 6);
    *((_QWORD *)this + 7) = 0;
    goto LABEL_19;
  }
  if ((_DWORD)result == -1)
    return result;
  if ((_DWORD)result != 10)
    goto LABEL_18;
  if (*((_DWORD *)this + 16) != 13)
    goto LABEL_17;
LABEL_19:
  *((_DWORD *)this + 16) = result;
  return result;
}

void *sub_18BD56348(icu::UVector **a1, unsigned int a2, UErrorCode *a3)
{
  icu::UnicodeSet *v6;
  void *v7;
  _BYTE v9[200];

  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v9);
  v6 = icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v9, 0x2000, a2, a3);
  icu::UnicodeSet::addAll(a1, v6);
  return icu::UnicodeSet::~UnicodeSet(v7, (icu::UnicodeSet *)v9);
}

void *sub_18BD563AC(icu::UVector *a1, void *a2, UErrorCode *a3)
{
  void *v4;

  v4 = a2;
  if (*((_QWORD *)a1 + 3))
  {
    icu::UVector::adoptElement(a1, a2, a3);
    if (*(int *)a3 > 0)
      return 0;
  }
  else
  {
    icu::UVector::addElement(a1, a2, a3);
  }
  return v4;
}

uint64_t icu::RegexCompile::setPushOp(UErrorCode **this, int a2)
{
  unint64_t v4;
  uint64_t *v5;
  icu::UnicodeSet *v6;
  icu::UnicodeSet *v7;
  UErrorCode *v8;
  icu::UVector *v9;

  icu::RegexCompile::setEval((icu::RegexCompile *)this, a2);
  icu::UVector::addElement((icu::UVector *)(this + 57), a2, this[1]);
  v6 = (icu::UnicodeSet *)icu::UMemory::operator new(v5, (icu::UMemory *)0xC8, v4);
  v7 = v6;
  if (v6)
  {
    icu::UnicodeSet::UnicodeSet(v6);
    v8 = this[1];
  }
  else
  {
    v8 = this[1];
    if (*(int *)v8 <= 0)
      *v8 = U_MEMORY_ALLOCATION_ERROR;
  }
  v9 = (icu::UVector *)(this + 52);
  if (this[55])
    return icu::UVector::adoptElement(v9, v7, v8);
  else
    return icu::UVector::addElement(v9, v7, v8);
}

uint64_t icu::RegexCompile::setEval(icu::RegexCompile *this, int a2)
{
  icu::UStack *v4;
  uint64_t result;
  int v6;
  icu::UnicodeSet *v7;
  const icu::UnicodeSet *v8;
  icu::UVector **v9;
  void *v10;
  icu::UVector **v11;
  icu::UVector **v12;
  void *v13;

  v4 = (icu::RegexCompile *)((char *)this + 456);
  result = icu::UVector::elementAti((icu::RegexCompile *)((char *)this + 456), *((_DWORD *)this + 116) - 1);
  if ((result & 0xFFFF0000) >= (a2 & 0xFFFF0000))
  {
    v6 = result;
    while (1)
    {
      icu::UStack::popi(v4);
      v7 = (icu::UnicodeSet *)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      v8 = v7;
      if (v6 <= 196612)
        break;
      if (v6 > 262150)
      {
        if (v6 == 262151)
          goto LABEL_15;
        if (v6 != 262152)
LABEL_21:
          abort();
      }
      else if (v6 != 196613)
      {
        if (v6 != 262150)
          goto LABEL_21;
        icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
        v9 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
        icu::UnicodeSet::addAll(v9, v8);
        goto LABEL_16;
      }
      icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
      v11 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
      icu::UnicodeSet::retainAll(v11, v8);
LABEL_16:
      v13 = icu::UnicodeSet::~UnicodeSet(v10, v8);
      icu::UMemory::operator delete(v13);
LABEL_17:
      result = icu::UVector::elementAti(v4, *((_DWORD *)this + 116) - 1);
      v6 = result;
      if ((result & 0xFFFF0000) < (a2 & 0xFFFF0000))
        return result;
    }
    if (v6 == 131075)
    {
      icu::UnicodeSet::complement(v7);
      goto LABEL_17;
    }
    if (v6 == 131081)
    {
      icu::UnicodeSet::closeOver((uint64_t)v7, 2);
      icu::UnicodeSet::removeAllStrings(v8);
      goto LABEL_17;
    }
    if (v6 != 196612)
      goto LABEL_21;
LABEL_15:
    icu::UStack::pop((icu::RegexCompile *)((char *)this + 416));
    v12 = (icu::UVector **)icu::UVector::elementAt((icu::RegexCompile *)((char *)this + 416), *((_DWORD *)this + 106) - 1);
    icu::UnicodeSet::removeAll(v12, v8);
    goto LABEL_16;
  }
  return result;
}

icu::UnicodeSet *icu::RegexCompile::scanPosixProp(int **this)
{
  icu::UnicodeSet *SetForProperty;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char v6;
  char v7;
  char v8;
  int *v9;
  int *v10;
  unsigned int *v11;
  int *v12;
  int *v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  UText *v17;
  int *v19;
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*this[1] > 0)
    return 0;
  v19 = this[4];
  v3 = *((_QWORD *)this[2] + 1);
  v4 = *(int *)(v3 + 40);
  if ((int)v4 <= *(_DWORD *)(v3 + 28))
    v5 = *(_QWORD *)(v3 + 32) + v4;
  else
    v5 = (*(uint64_t (**)(void))(*(_QWORD *)(v3 + 56) + 64))();
  v6 = *((_BYTE *)this + 40);
  v7 = *((_BYTE *)this + 41);
  v8 = *((_BYTE *)this + 42);
  v9 = this[6];
  v10 = this[7];
  v11 = (unsigned int *)(this + 9);
  v12 = this[9];
  v13 = this[8];
  v21 = 0u;
  v22 = 0u;
  v24 = 0;
  v23 = 0u;
  v20 = off_1E2256B38;
  LOWORD(v21) = 2;
  icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
  v14 = *((_DWORD *)this + 18);
  if (v14 == 94)
  {
    icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
    v14 = *((_DWORD *)this + 18);
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  while (1)
  {
    icu::UnicodeString::append((uint64_t)&v20, v14);
    icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
    if (*((_BYTE *)this + 76))
      break;
    v14 = *v11;
    if (*v11 == -1)
      break;
    if (v14 == 58)
    {
      icu::RegexCompile::nextChar((uint64_t)this, (UChar32 *)this + 18);
      if (*((_DWORD *)this + 18) == 93)
      {
        SetForProperty = icu::RegexCompile::createSetForProperty((icu::RegexCompile *)this, (const icu::UnicodeString *)&v20, v15);
        goto LABEL_19;
      }
      break;
    }
  }
  this[4] = v19;
  *((_BYTE *)this + 40) = v6;
  *((_BYTE *)this + 41) = v7;
  *((_BYTE *)this + 42) = v8;
  this[6] = v9;
  this[7] = v10;
  this[8] = v13;
  this[9] = v12;
  v17 = (UText *)*((_QWORD *)this[2] + 1);
  v16 = v5 - v17->chunkNativeStart;
  if (v16 < 0 || v16 >= v17->nativeIndexingLimit || v17->chunkContents[v16] >> 10 > 0x36u)
  {
    utext_setNativeIndex(v17, v5);
    SetForProperty = 0;
  }
  else
  {
    SetForProperty = 0;
    v17->chunkOffset = v16;
  }
LABEL_19:
  icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v20);
  return SetForProperty;
}

uint64_t icu::RegexCompile::maxMatchLength(icu::RegexCompile *this, signed int a2, signed int a3)
{
  UErrorCode *v4;
  uint64_t v5;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  signed int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  signed int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  signed int v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v4 = (UErrorCode *)*((_QWORD *)this + 1);
  if (*(int *)v4 > 0)
    return 0;
  v28 = 0u;
  v29 = 0u;
  icu::UVector32::UVector32((icu::UVector32 *)&v28, a3 + 1, v4);
  icu::UVector32::setSize((icu::UVector32 *)&v28, a3 + 1);
  if (a2 > a3)
    goto LABEL_7;
  v8 = a2;
  do
    icu::UVector32::setElementAt((uint64_t)&v28, 0, v8++);
  while (a3 + 1 != v8);
  if (a2 > a3)
  {
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  LODWORD(v10) = 0;
  while (a2 < 0)
  {
    v10 = v10 & ~((int)v10 >> 31);
LABEL_29:
    v5 = v10;
    v14 = a2++ < a3;
    if (!v14)
      goto LABEL_8;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 2) + 32);
  v12 = *(_DWORD *)(v11 + 8);
  if (v12 <= a2)
    LODWORD(v13) = 0;
  else
    v13 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * a2);
  v14 = SDWORD2(v28) < 1 || SDWORD2(v28) <= a2;
  if (v14)
  {
    v10 = v10 & ~((int)v10 >> 31);
  }
  else
  {
    v15 = *(_DWORD *)(*((_QWORD *)&v29 + 1) + 4 * a2);
    if (v15 <= (int)v10)
      v10 = v10;
    else
      v10 = v15;
  }
  v5 = 0x7FFFFFFFLL;
  switch(BYTE3(v13))
  {
    case 0:
    case 2:
    case 5:
    case 7:
    case 8:
    case 9:
    case 0x10:
    case 0x11:
    case 0x14:
    case 0x17:
    case 0x18:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x25:
    case 0x26:
    case 0x2A:
    case 0x2B:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x35:
    case 0x36:
    case 0x37:
      goto LABEL_28;
    case 1:
      v10 = 0;
      if (SDWORD2(v28) < 1 || SDWORD2(v28) <= a2 + 1)
        goto LABEL_29;
      v10 = *(unsigned int *)(*((_QWORD *)&v29 + 1) + 4 * (a2 + 1));
      goto LABEL_28;
    case 3:
      if (v10 >> 1 == 0x3FFFFFFF)
        v10 = 0x7FFFFFFFLL;
      else
        v10 = (v10 + 1);
      if ((v13 & 0xFFFFFF) <= 0x10000)
        goto LABEL_28;
      if (v10 >> 1 == 0x3FFFFFFF)
        goto LABEL_8;
      v10 = (v10 + 1);
      goto LABEL_28;
    case 4:
    case 0x28:
      if (v12 <= ++a2)
        LODWORD(v18) = 0;
      else
        v18 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * a2);
      v24 = v18 & 0xFFFFFF;
      if ((v10 ^ 0x7FFFFFFF) <= v24)
        goto LABEL_8;
      v10 = v24 + v10;
      goto LABEL_28;
    case 6:
      v20 = v13 & 0xFFFFFF;
      if ((v13 & 0xFFFFFF) <= a2)
        goto LABEL_8;
      v21 = 0;
      if (SDWORD2(v28) >= 1 && SDWORD2(v28) > v20)
        v21 = *(_DWORD *)(*((_QWORD *)&v29 + 1) + 4 * (v13 & 0xFFFFFF));
      if ((int)v10 > v21)
        icu::UVector32::setElementAt((uint64_t)&v28, v10, v20);
      goto LABEL_28;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0x15:
    case 0x16:
    case 0x1B:
    case 0x27:
    case 0x31:
    case 0x38:
    case 0x39:
    case 0x3A:
      if ((v10 | 0x80000000) >= 0xFFFFFFFD)
        goto LABEL_8;
      v10 = (v10 + 2);
      goto LABEL_28;
    case 0xD:
    case 0xF:
    case 0x12:
    case 0x24:
      v16 = v13 & 0xFFFFFF;
      if ((v13 & 0xFFFFFF) < a2)
        goto LABEL_8;
      v17 = 0;
      if (SDWORD2(v28) >= 1 && SDWORD2(v28) > v16)
        v17 = *(_DWORD *)(*((_QWORD *)&v29 + 1) + 4 * (v13 & 0xFFFFFF));
      if (v17 < (int)v10)
        icu::UVector32::setElementAt((uint64_t)&v28, v10, v16);
      v10 = 0;
      goto LABEL_29;
    case 0x13:
    case 0x22:
    case 0x29:
    case 0x32:
    case 0x33:
    case 0x34:
      goto LABEL_8;
    case 0x19:
    case 0x1A:
      if (v12 <= a2 + 1)
        LODWORD(v19) = 0;
      else
        v19 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * (a2 + 1));
      v25 = v19 & 0xFFFFFF;
      v26 = a2 + 4;
      if ((v19 & 0xFFFFFF) == a2 + 4)
      {
        a2 = v19 & 0xFFFFFF;
LABEL_28:
        v5 = 0x7FFFFFFFLL;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          goto LABEL_8;
        goto LABEL_29;
      }
      if (v12 <= a2 + 3)
      {
        LODWORD(v27) = 0;
      }
      else
      {
        v27 = *(unsigned int *)(*(_QWORD *)(v11 + 24) + 8 * (a2 + 3));
        if (v27 == 0xFFFFFFFFLL)
          goto LABEL_77;
      }
      v10 = (int)v10 + (int)v27 * (uint64_t)(int)icu::RegexCompile::maxMatchLength(this, v26, v25 - 1);
      a2 = v25;
      if (v10 <= 2147483646)
        goto LABEL_28;
LABEL_77:
      v5 = 0x7FFFFFFFLL;
LABEL_8:
      icu::UVector32::~UVector32((void **)&v28);
      return v5;
    case 0x2C:
      if (a2 >= a3)
        goto LABEL_74;
      while (1)
      {
        v22 = a2 + 1;
        if (a2 >= -1 && v12 > v22)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v11 + 24) + 8 * v22);
          if ((BYTE3(v23) == 48 || BYTE3(v23) == 38) && ((v23 ^ v13) & 0xFFFFFF) == 0)
            break;
        }
        ++a2;
        if (a3 == v22)
        {
          a2 = a3 + 1;
          goto LABEL_28;
        }
      }
LABEL_74:
      ++a2;
      goto LABEL_28;
    default:
      abort();
  }
}

icu::UnicodeSet *icu::RegexCompile::findCaseInsensitiveStarters(icu::RegexCompile *this, icu::UnicodeSet *a2, icu::UnicodeSet *a3)
{
  signed int v4;
  UChar32 v5;
  uint64_t v6;
  signed int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;

  if (this >= 0x110000)
    abort();
  v4 = (int)this;
  if (!u_hasBinaryProperty((UChar32)this, UCHAR_CASE_SENSITIVE))
    return icu::UnicodeSet::set(a2, v4, v4);
  v5 = u_foldCase(v4, 0);
  icu::UnicodeSet::set(a2, v5, v5);
  v6 = 0;
  do
    v7 = dword_18BE2A41C[v6++];
  while (v7 < v4);
  if (v7 == v4 && (_DWORD)v6 != 50)
  {
    v8 = word_18BE2A4E4[v6 - 1];
    if (word_18BE37260[v6 - 1] <= 1)
      v9 = 1;
    else
      v9 = word_18BE37260[v6 - 1];
    do
    {
      v10 = v8 + 1;
      v11 = word_18BE372C4[v8];
      if ((v11 & 0xFC00) == 0xD800)
      {
        v8 += 2;
        v11 = word_18BE372C4[v10] + (v11 << 10) - 56613888;
      }
      else
      {
        ++v8;
      }
      icu::UnicodeSet::add(a2, v11);
      --v9;
    }
    while (v9);
  }
  icu::UnicodeSet::closeOver((uint64_t)a2, 2);
  return icu::UnicodeSet::removeAllStrings(a2);
}

icu::UnicodeSet *icu::RegexCompile::createSetForProperty(icu::RegexCompile *this, const icu::UnicodeString *a2, _BOOL4 a3)
{
  icu::UnicodeSet *result;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  icu::UnicodeSet *v13;
  icu::UnicodeSet *v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  int32_t v23;
  int32_t v24;
  unint64_t v25;
  icu::UnicodeString *v26;
  unint64_t v27;
  unint64_t v28;
  icu::UnicodeSet *v29;
  icu::UnicodeSet *v30;
  uint64_t v31;
  icu::UnicodeSet *v32;
  void *v33;
  void *v34;
  icu::UnicodeSet *v35;
  icu::UnicodeSet *v36;
  icu::UnicodeSet *v37;
  unsigned int v38;
  int v39;
  int v40;
  int32_t v41;
  int v42;
  int v43;
  int32_t v44;
  unint64_t v45;
  icu::UnicodeSet *v46;
  icu::UnicodeSet *v47;
  unint64_t v48;
  icu::UnicodeSet *v49;
  icu::UnicodeSet *v50;
  icu::UnicodeSet *v51;
  unsigned int v52;
  unsigned int v53;
  icu::UVector **v54;
  unsigned int v55;
  icu::UVector **v56;
  unsigned int v57;
  UErrorCode v58;
  void *v59;
  void *v60;
  icu::UVector **v61;
  icu::UnicodeSet *v62;
  icu::UnicodeSet *v63;
  icu::UnicodeSet *v64;
  void *v65;
  uint64_t v66[3];
  uint64_t v67[7];
  uint64_t v68[4];
  const char *v69;
  const __int16 *v70;
  const __int16 *v71;
  const __int16 *v72;
  const char *v73;
  const char *v74;
  const __int16 *v75;
  const __int16 *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const __int16 *v80;
  const __int16 *v81;
  const char *v82;
  const __int16 *v83;
  const __int16 *v84;
  const __int16 *v85;
  const __int16 *v86;
  const __int16 *v87;
  const __int16 *v88;
  UErrorCode pErrorCode;
  icu::UnicodeSet *v90;
  _OWORD v91[13];
  _BYTE v92[64];
  _OWORD v93[4];
  void (**v94)(icu::UnicodeString *__hidden);
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (**((int **)this + 1) > 0)
    return 0;
  v90 = 0;
  pErrorCode = U_ZERO_ERROR;
  v95 = 0u;
  v98 = 0;
  v97 = 0u;
  v96 = 0u;
  v94 = off_1E2256B38;
  LOWORD(v95) = 2;
  icu::UnicodeString::doAppend((uint64_t)&v94, (uint64_t)&unk_18BE37396, 0, 0xFFFFFFFFLL);
  v68[3] = (uint64_t)&unk_18BE37396;
  v7 = *((unsigned __int16 *)a2 + 4);
  v8 = (__int16)v7;
  v9 = v7 >> 5;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = *((unsigned int *)a2 + 3);
  icu::UnicodeString::doAppend((uint64_t)&v94, a2, 0, v10);
  icu::UnicodeString::doAppend((uint64_t)&v94, (uint64_t)L"}]", 0, 0xFFFFFFFFLL);
  v68[2] = (uint64_t)L"}]";
  v11 = *((_DWORD *)this + 71) & 2;
  v13 = (icu::UnicodeSet *)icu::UMemory::operator new((uint64_t *)*((unsigned int *)this + 71), (icu::UMemory *)0xC8, v12);
  v14 = v13;
  if (v13)
    icu::UnicodeSet::UnicodeSet(v13, (const icu::UnicodeString *)&v94, v11, 0, &pErrorCode);
  sub_18BD578B0(&v90, v14, &pErrorCode);
  v15 = pErrorCode;
  if (pErrorCode < U_ILLEGAL_ARGUMENT_ERROR || pErrorCode == U_MEMORY_ALLOCATION_ERROR)
    goto LABEL_89;
  pErrorCode = U_ZERO_ERROR;
  v16 = *((unsigned __int16 *)a2 + 4);
  v17 = (__int16)v16;
  v18 = v16 >> 5;
  if (v17 >= 0)
    v19 = v18;
  else
    v19 = *((_DWORD *)a2 + 3);
  v68[1] = (uint64_t)"w";
  if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, 0, v19, (uint64_t)"w", 0, -1, 0))
  {
    v35 = icu::UnicodeSet::cloneAsThawed((icu::UnicodeSet *)(qword_1ECD284E8 + 208), v20, (uint64_t *)qword_1ECD284E8);
LABEL_32:
    sub_18BD578B0(&v90, v35, &pErrorCode);
    goto LABEL_89;
  }
  v21 = *((unsigned __int16 *)a2 + 4);
  v22 = (__int16)v21;
  v23 = v21 >> 5;
  if (v22 >= 0)
    v24 = v23;
  else
    v24 = *((_DWORD *)a2 + 3);
  v68[0] = (uint64_t)L"all";
  if (!icu::UnicodeString::doCompare((uint64_t)a2, 0, v24, (uint64_t)L"all", 0, -1))
  {
    v36 = (icu::UnicodeSet *)icu::UMemory::operator new(v68, (icu::UMemory *)0xC8, v25);
    v37 = v36;
    if (v36)
      icu::UnicodeSet::UnicodeSet(v36, 0, 0x10FFFFu);
    v35 = v37;
    goto LABEL_32;
  }
  memset(v93, 0, sizeof(v93));
  v26 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)v93, (UChar **)a2);
  if (icu::UnicodeString::doEqualsSubstring((uint64_t)v26, 0, 2, (uint64_t)L"In", 0, 2))
  {
    LODWORD(v28) = WORD4(v93[0]) >> 5;
    if ((SWORD4(v93[0]) & 0x8000u) == 0)
      v28 = v28;
    else
      v28 = HIDWORD(v93[0]);
    v67[6] = (uint64_t)L"In";
    if ((int)v28 >= 3)
    {
      pErrorCode = U_ZERO_ERROR;
      v29 = (icu::UnicodeSet *)icu::UMemory::operator new((uint64_t *)v28, (icu::UMemory *)0xC8, v27);
      v30 = v29;
      if (v29)
        icu::UnicodeSet::UnicodeSet(v29);
      sub_18BD578B0(&v90, v30, &pErrorCode);
      v31 = pErrorCode;
      if (pErrorCode <= U_ZERO_ERROR)
      {
        memset(v91, 0, 64);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v91, (const icu::UnicodeString *)v93, 2);
        v32 = v90;
        icu::UnicodeString::UnicodeString((uint64_t)v92, (uint64_t)"B");
        icu::UnicodeSet::applyPropertyAlias(v32, (const icu::UnicodeString *)v92, (const icu::UnicodeString *)v91, &pErrorCode);
        icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v92);
        icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v91);
      }
      goto LABEL_88;
    }
  }
  else
  {
    v67[5] = (uint64_t)L"In";
  }
  if (!icu::UnicodeString::doEqualsSubstring((uint64_t)a2, 0, 2, (uint64_t)"I", 0, 2))
  {
    v66[2] = (uint64_t)"I";
    goto LABEL_46;
  }
  v38 = *((unsigned __int16 *)a2 + 4);
  v39 = (__int16)v38;
  v40 = v38 >> 5;
  if (v39 < 0)
    v40 = *((_DWORD *)a2 + 3);
  v67[4] = (uint64_t)"I";
  if (v40 < 3)
  {
LABEL_46:
    v66[1] = (uint64_t)"j";
    v44 = u_strlen((const UChar *)"j");
    v66[0] = (uint64_t)"j";
    if (!icu::UnicodeString::doEqualsSubstring((uint64_t)a2, 0, v44, (uint64_t)"j", 0, v44))
      goto LABEL_68;
    pErrorCode = U_ZERO_ERROR;
    v46 = (icu::UnicodeSet *)icu::UMemory::operator new(v66, (icu::UMemory *)0xC8, v45);
    v47 = v46;
    if (v46)
      icu::UnicodeSet::UnicodeSet(v46);
    sub_18BD578B0(&v90, v47, &pErrorCode);
    v31 = pErrorCode;
    if (pErrorCode > U_ZERO_ERROR)
      goto LABEL_88;
    v86 = L"javaDefined";
    if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v86, -1))
    {
      sub_18BD56348((icu::UVector **)v90, 1u, &pErrorCode);
      icu::UnicodeSet::complement(v90);
LABEL_84:
      v31 = pErrorCode;
      if (pErrorCode <= U_ZERO_ERROR && !icu::UnicodeSet::isEmpty(v90) && v11)
        icu::UnicodeSet::closeOver((uint64_t)v90, 2);
      goto LABEL_88;
    }
    v85 = L"javaDigit";
    if (sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v85, -1))
    {
      v84 = L"javaIdentifierIgnorable";
      if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v84, -1))
      {
LABEL_78:
        sub_18BD57954(v90, &pErrorCode);
        goto LABEL_84;
      }
      v83 = L"javaISOControl";
      if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v83, -1))
      {
        v51 = icu::UnicodeSet::add(v90, 0, 0x1Fu);
        v52 = 127;
        v53 = 159;
LABEL_75:
        icu::UnicodeSet::add(v51, v52, v53);
        goto LABEL_84;
      }
      v82 = "j";
      if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v82, -1))
      {
        sub_18BD56348((icu::UVector **)v90, 0x3Eu, &pErrorCode);
        v54 = (icu::UVector **)v90;
        v55 = 0x2000000;
LABEL_77:
        sub_18BD56348(v54, v55, &pErrorCode);
        sub_18BD56348((icu::UVector **)v90, 0x400000u, &pErrorCode);
        sub_18BD56348((icu::UVector **)v90, 0x200u, &pErrorCode);
        sub_18BD56348((icu::UVector **)v90, 0x400u, &pErrorCode);
        sub_18BD56348((icu::UVector **)v90, 0x100u, &pErrorCode);
        sub_18BD56348((icu::UVector **)v90, 0x40u, &pErrorCode);
        goto LABEL_78;
      }
      v81 = L"javaJavaIdentifierStart";
      if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v81, -1))
      {
        sub_18BD56348((icu::UVector **)v90, 0x3Eu, &pErrorCode);
        sub_18BD56348((icu::UVector **)v90, 0x400u, &pErrorCode);
        sub_18BD56348((icu::UVector **)v90, 0x2000000u, &pErrorCode);
        v56 = (icu::UVector **)v90;
        v57 = 0x400000;
        goto LABEL_83;
      }
      v80 = L"javaLetter";
      if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v80, -1))
      {
        v56 = (icu::UVector **)v90;
        v57 = 62;
        goto LABEL_83;
      }
      v79 = "j";
      if (sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v79, -1))
      {
        v78 = "j";
        if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v78, -1))
        {
          v56 = (icu::UVector **)v90;
          v57 = 4;
          goto LABEL_83;
        }
        v77 = "j";
        if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v77, -1))
        {
          icu::UnicodeSet::applyIntPropertyValue(v90, 3, 1u, &pErrorCode);
          goto LABEL_84;
        }
        v76 = L"javaSpaceChar";
        if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v76, -1))
        {
          v56 = (icu::UVector **)v90;
          v57 = 28672;
          goto LABEL_83;
        }
        v75 = L"javaSupplementaryCodePoint";
        if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v75, -1))
        {
          v51 = v90;
          v52 = 0x10000;
LABEL_101:
          v53 = 1114111;
          goto LABEL_75;
        }
        v74 = "j";
        if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v74, -1))
        {
          v56 = (icu::UVector **)v90;
          v57 = 8;
          goto LABEL_83;
        }
        v73 = "j";
        if (!sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v73, -1))
        {
          sub_18BD56348((icu::UVector **)v90, 0x3Eu, &pErrorCode);
          v56 = (icu::UVector **)v90;
          v57 = 1024;
          goto LABEL_83;
        }
        v72 = L"javaUnicodeIdentifierPart";
        if (sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v72, -1))
        {
          v71 = L"javaUpperCase";
          if (sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v71, -1))
          {
            v70 = L"javaValidCodePoint";
            if (sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v70, -1))
            {
              v69 = "j";
              if (sub_18BBB1AB4((uint64_t)a2, (uint64_t *)&v69, -1))
                goto LABEL_68;
              sub_18BD56348((icu::UVector **)v90, 0x7000u, &pErrorCode);
              v61 = (icu::UVector **)v90;
              icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v91);
              v62 = icu::UnicodeSet::add((icu::UnicodeSet *)v91, 0xA0u);
              v63 = icu::UnicodeSet::add(v62, 0x2007u);
              v64 = icu::UnicodeSet::add(v63, 0x202Fu);
              icu::UnicodeSet::removeAll(v61, v64);
              icu::UnicodeSet::~UnicodeSet(v65, (icu::UnicodeSet *)v91);
              v51 = icu::UnicodeSet::add(v90, 9u, 0xDu);
              v52 = 28;
              v53 = 31;
              goto LABEL_75;
            }
            v51 = v90;
            v52 = 0;
            goto LABEL_101;
          }
          v56 = (icu::UVector **)v90;
          v57 = 2;
LABEL_83:
          sub_18BD56348(v56, v57, &pErrorCode);
          goto LABEL_84;
        }
        v54 = (icu::UVector **)v90;
        v55 = 62;
        goto LABEL_77;
      }
      sub_18BD56348((icu::UVector **)v90, 0x3Eu, &pErrorCode);
    }
    v56 = (icu::UVector **)v90;
    v57 = 512;
    goto LABEL_83;
  }
  icu::UnicodeString::doReplace((uint64_t)v93, 0, 2, 0, 0, 0);
  if ((SWORD4(v93[0]) & 0x8000u) == 0)
    v41 = WORD4(v93[0]) >> 5;
  else
    v41 = HIDWORD(v93[0]);
  if ((icu::UnicodeString::doIndexOf((uint64_t)v93, 0x3Du, 0, v41) & 0x80000000) != 0)
  {
    v88 = L"assigned";
    v42 = sub_18BD57924((uint64_t)v93, (uint64_t *)&v88, -1, 0);
    v67[3] = (uint64_t)v88;
    if (v42)
    {
      v87 = L"TitleCase";
      v43 = sub_18BD57924((uint64_t)v93, (uint64_t *)&v87, -1, 0);
      v67[2] = (uint64_t)v87;
      if (!v43)
        sub_18BD2FA48((uint64_t)v93, (uint64_t)L"Titlecase_Letter", 0xFFFFFFFFLL);
    }
    else
    {
      sub_18BD2FA48((uint64_t)v93, (uint64_t)"u", 0xFFFFFFFFLL);
      a3 = !a3;
    }
    icu::UnicodeString::doReplace((uint64_t)v93, 0, 0, (uint64_t)&unk_18BE37396, 0, 0xFFFFFFFFLL);
    v67[1] = (uint64_t)&unk_18BE37396;
    icu::UnicodeString::doAppend((uint64_t)v93, (uint64_t)L"}]", 0, 0xFFFFFFFFLL);
    v67[0] = (uint64_t)L"}]";
    v49 = (icu::UnicodeSet *)icu::UMemory::operator new(v67, (icu::UMemory *)0xC8, v48);
    v50 = v49;
    if (v49)
      icu::UnicodeSet::UnicodeSet(v49, (const icu::UnicodeString *)v93, *((UErrorCode **)this + 1));
    sub_18BD578B0(&v90, v50, &pErrorCode);
    goto LABEL_84;
  }
LABEL_68:
  v31 = 66308;
  pErrorCode = U_REGEX_PROPERTY_SYNTAX;
LABEL_88:
  icu::UnicodeString::~UnicodeString((void *)v31, (icu::UnicodeString *)v93);
LABEL_89:
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v94);
  v58 = pErrorCode;
  if (pErrorCode <= U_ZERO_ERROR)
  {
    icu::UnicodeSet::removeAllStrings(v90);
    if (a3)
      icu::UnicodeSet::complement(v90);
    return v90;
  }
  else
  {
    if (pErrorCode == U_ILLEGAL_ARGUMENT_ERROR)
    {
      v58 = U_REGEX_PROPERTY_SYNTAX;
      pErrorCode = U_REGEX_PROPERTY_SYNTAX;
    }
    icu::RegexCompile::error(this, v58);
    result = v90;
    if (v90)
    {
      v60 = icu::UnicodeSet::~UnicodeSet(v59, v90);
      icu::UMemory::operator delete(v60);
      return 0;
    }
  }
  return result;
}

void sub_18BD578B0(icu::UnicodeSet **a1, icu::UnicodeSet *this, _DWORD *a3)
{
  unint64_t v4;
  void *v5;
  icu::UnicodeSet *v8;
  void *v9;

  v4 = *a3;
  if ((int)v4 <= 0)
  {
    v8 = *a1;
    if (v8)
    {
      v9 = icu::UnicodeSet::~UnicodeSet((void *)v4, v8);
      icu::UMemory::operator delete(v9);
    }
    *a1 = this;
    if (!this)
      *a3 = 7;
  }
  else if (this)
  {
    v5 = icu::UnicodeSet::~UnicodeSet((void *)v4, this);
    icu::UMemory::operator delete(v5);
  }
}

uint64_t sub_18BD57924(uint64_t a1, uint64_t *a2, int32_t a3, __int16 a4)
{
  int v5;

  if (*(__int16 *)(a1 + 8) < 0)
    v5 = *(_DWORD *)(a1 + 12);
  else
    v5 = *(unsigned __int16 *)(a1 + 8) >> 5;
  return icu::UnicodeString::doCaseCompare(a1, 0, v5, *a2, 0, a3, a4);
}

void *sub_18BD57954(icu::UnicodeSet *a1, UErrorCode *a2)
{
  icu::UnicodeSet *v4;
  icu::UnicodeSet *v5;
  icu::UnicodeSet *v6;
  void *v7;
  _BYTE v9[200];

  v4 = icu::UnicodeSet::add(a1, 0, 8u);
  v5 = icu::UnicodeSet::add(v4, 0xEu, 0x1Bu);
  icu::UnicodeSet::add(v5, 0x7Fu, 0x9Fu);
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v9);
  v6 = icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v9, 0x2000, 0x10000u, a2);
  icu::UnicodeSet::addAll((icu::UVector **)a1, v6);
  return icu::UnicodeSet::~UnicodeSet(v7, (icu::UnicodeSet *)v9);
}

uint64_t sub_18BD579D0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_18BD579DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  UText *v9;
  uint64_t v10;
  unsigned int v11;

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v4 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    v9 = *(UText **)a1;
    v10 = *(int *)(*(_QWORD *)a1 + 40);
    if ((int)v10 >= *(_DWORD *)(*(_QWORD *)a1 + 44) || (v11 = v9->chunkContents[v10], v11 >> 11 > 0x1A))
    {
      result = utext_next32(v9);
      v11 = result;
      if ((_DWORD)result == -1)
        return result;
    }
    else
    {
      v9->chunkOffset = v10 + 1;
    }
    result = ucase_toFullFolding(v11, v3, 0);
    *(_DWORD *)(a1 + 16) = result;
    if (result >= 0x1F)
    {
      if ((result & 0x80000000) != 0)
      {
        result = ~(_DWORD)result;
        *(_DWORD *)(a1 + 16) = result;
      }
      goto LABEL_16;
    }
    v4 = 0;
    v2 = *v3;
  }
  v5 = v4 + 1;
  *(_DWORD *)(a1 + 20) = v5;
  result = *(unsigned __int16 *)(v2 + 2 * v4);
  v7 = *(_DWORD *)(a1 + 16);
  if ((result & 0xFC00) != 0xD800)
    goto LABEL_7;
  if ((_DWORD)v5 != v7)
  {
    v8 = *(unsigned __int16 *)(v2 + 2 * v5);
    if ((v8 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v4 + 2;
      *(_DWORD *)(a1 + 20) = v4 + 2;
      result = (v8 + ((_DWORD)result << 10) - 56613888);
    }
LABEL_7:
    if ((int)v5 < v7)
      return result;
  }
LABEL_16:
  *v3 = 0;
  return result;
}

uint64_t sub_18BD57AE8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_18BD57AF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v15;

  v3 = a1 + 3;
  v2 = a1[3];
  if (v2)
  {
    v4 = *((_DWORD *)a1 + 9);
  }
  else
  {
    v9 = a1[1];
    v10 = a1[2];
    if (v9 >= v10)
      return 0xFFFFFFFFLL;
    v11 = *a1;
    v12 = v9 + 1;
    a1[1] = v9 + 1;
    v13 = *(unsigned __int16 *)(v11 + 2 * v9);
    if ((v13 & 0xFC00) == 0xD800 && v12 != v10)
    {
      v15 = *(unsigned __int16 *)(v11 + 2 * v12);
      if ((v15 & 0xFC00) == 0xDC00)
      {
        a1[1] = v9 + 2;
        v13 = v15 + (v13 << 10) - 56613888;
      }
    }
    result = ucase_toFullFolding(v13, v3, 0);
    *((_DWORD *)a1 + 8) = result;
    if (result >= 0x1F)
    {
      if ((result & 0x80000000) != 0)
      {
        result = ~(_DWORD)result;
        *((_DWORD *)a1 + 8) = result;
      }
      goto LABEL_8;
    }
    v4 = 0;
    v2 = *v3;
  }
  v5 = v4 + 1;
  *((_DWORD *)a1 + 9) = v5;
  result = *(unsigned __int16 *)(v2 + 2 * v4);
  v7 = *((_DWORD *)a1 + 8);
  if ((result & 0xFC00) == 0xD800)
  {
    if ((_DWORD)v5 == v7)
    {
LABEL_8:
      *v3 = 0;
      return result;
    }
    v8 = *(unsigned __int16 *)(v2 + 2 * v5);
    if ((v8 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v4 + 2;
      *((_DWORD *)a1 + 9) = v4 + 2;
      result = (v8 + ((_DWORD)result << 10) - 56613888);
    }
  }
  if ((int)v5 >= v7)
    goto LABEL_8;
  return result;
}

BOOL sub_18BD57C20(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) != 0;
}

uint64_t sub_18BD57C30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18BD57C38(uint64_t a1, UErrorCode *a2)
{
  _OWORD *v4;
  uint64_t i;
  uint64_t j;
  icu::UnicodeSet *v7;
  void *v8;
  void *v9;
  icu::UnicodeSet *v10;
  void *v11;
  void *v12;
  icu::UnicodeSet *v13;
  void *v14;
  void *v15;
  icu::UnicodeSet *v16;
  void *v17;
  void *v18;
  icu::UnicodeSet *v19;
  void *v20;
  void *v21;
  icu::UnicodeSet *v22;
  void *v23;
  void *v24;
  icu::UnicodeSet *v25;
  void *v26;
  void *v27;
  icu::UnicodeSet *v28;
  void *v29;
  void *v30;
  icu::UnicodeSet *v31;
  void *v32;
  void *v33;
  icu::UnicodeSet *v34;
  void *v35;
  uint64_t k;
  unsigned int m;
  icu::UnicodeSet *v38;
  icu::UnicodeSet *v39;
  void *v40;
  icu::UnicodeSet *v41;
  icu::UnicodeSet *v42;
  icu::UnicodeSet *v43;
  const __int16 *v45;
  const __int16 *v46;
  const char *v47;
  const __int16 *v48;
  const char *v49;
  const __int16 *v50;
  const __int16 *v51;
  const char *v52;
  const char *v53;
  const __int16 *v54;
  _BYTE v55[64];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = (_OWORD *)(a1 + 2608);
  for (i = 8; i != 2608; i += 200)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + i));
  v4[24] = 0u;
  v4[25] = 0u;
  v4[22] = 0u;
  v4[23] = 0u;
  v4[20] = 0u;
  v4[21] = 0u;
  v4[18] = 0u;
  v4[19] = 0u;
  v4[16] = 0u;
  v4[17] = 0u;
  v4[14] = 0u;
  v4[15] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[2] = 0u;
  v4[3] = 0u;
  *v4 = 0u;
  v4[1] = 0u;
  for (j = 3024; j != 3624; j += 200)
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + j));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 3624));
  *(_OWORD *)(a1 + 3824) = 0u;
  v54 = L"acefnrtuUx";
  icu::UnicodeString::UnicodeString(v55, 1, &v54);
  v7 = icu::UnicodeSet::addAll((icu::UnicodeSet *)(a1 + 3624), (const icu::UnicodeString *)v55);
  icu::UnicodeSet::freeze(v7);
  v9 = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v55);
  v53 = "[";
  icu::UnicodeString::UnicodeString(v9, 1, &v53);
  v10 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v10);
  v12 = icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v55);
  v52 = "[";
  icu::UnicodeString::UnicodeString(v12, 1, &v52);
  v13 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 808), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v13);
  v15 = icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v55);
  v51 = L"[\\p{Grapheme_Extend}]";
  icu::UnicodeString::UnicodeString(v15, 1, &v51);
  v16 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v16);
  v18 = icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v55);
  v50 = L"[[:Zl:][:Zp:][:Cc:][:Cf:]-[:Grapheme_Extend:]]";
  icu::UnicodeString::UnicodeString(v18, 1, &v50);
  v19 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1408), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v19);
  v21 = icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v55);
  v49 = "[";
  icu::UnicodeString::UnicodeString(v21, 1, &v49);
  v22 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1608), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v22);
  v24 = icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v55);
  v48 = L"[\\p{Hangul_Syllable_Type=V}]";
  icu::UnicodeString::UnicodeString(v24, 1, &v48);
  v25 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2208), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v25);
  v27 = icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v55);
  v47 = "[";
  icu::UnicodeString::UnicodeString(v27, 1, &v47);
  v28 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2408), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v28);
  v30 = icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v55);
  v46 = L"[\\p{Hangul_Syllable_Type=LV}]";
  icu::UnicodeString::UnicodeString(v30, 1, &v46);
  v31 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 1808), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v31);
  v33 = icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v55);
  v45 = L"[\\p{Hangul_Syllable_Type=LVT}]";
  icu::UnicodeString::UnicodeString(v33, 1, &v45);
  v34 = icu::UnicodeSet::applyPattern((icu::UnicodeSet *)(a1 + 2008), (const icu::UnicodeString *)v55, a2);
  icu::UnicodeSet::freeze(v34);
  icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v55);
  icu::UnicodeSet::complement((icu::UnicodeSet *)(a1 + 1008));
  icu::UnicodeSet::remove((icu::UnicodeSet *)(a1 + 1008), 0xAC00u, 0xD7A4u);
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 1408));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 1608));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 2208));
  icu::UnicodeSet::removeAll((icu::UVector **)(a1 + 1008), (const icu::UnicodeSet *)(a1 + 2408));
  icu::UnicodeSet::freeze((icu::UnicodeSet *)(a1 + 1008));
  for (k = 0; k != 13; ++k)
  {
    for (m = 0; m != 256; ++m)
    {
      if (icu::UnicodeSet::contains((icu::UnicodeSet *)(a1 + 200 * k + 8), m))
        *(_BYTE *)(a1 + 32 * k + 2608 + ((unint64_t)m >> 3)) |= 1 << (m & 7);
    }
  }
  icu::UnicodeString::UnicodeString((uint64_t)v55, (uint64_t)"*");
  v38 = icu::UnicodeSet::addAll((icu::UnicodeSet *)(a1 + 3424), (const icu::UnicodeString *)v55);
  v39 = icu::UnicodeSet::complement(v38);
  icu::UnicodeSet::freeze(v39);
  icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v55);
  v41 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 3024), 0x30u, 0x39u);
  icu::UnicodeSet::freeze(v41);
  v42 = icu::UnicodeSet::add((icu::UnicodeSet *)(a1 + 3224), 0x41u, 0x5Au);
  v43 = icu::UnicodeSet::add(v42, 0x61u, 0x7Au);
  icu::UnicodeSet::freeze(v43);
  *(_QWORD *)(a1 + 3824) = a1 + 3024;
  *(_QWORD *)(a1 + 3832) = utext_openUChars(0, 0, 0, a2);
  return a1;
}

uint64_t sub_18BD58138(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t i;
  uint64_t j;

  *(_QWORD *)(a1 + 3824) = 0;
  utext_close(*(UText **)(a1 + 3832));
  icu::UnicodeSet::~UnicodeSet(v2, (icu::UnicodeSet *)(a1 + 3624));
  for (i = 3424; i != 2824; i -= 200)
    icu::UnicodeSet::~UnicodeSet(v3, (icu::UnicodeSet *)(a1 + i));
  for (j = 2408; j != -192; j -= 200)
    icu::UnicodeSet::~UnicodeSet(v3, (icu::UnicodeSet *)(a1 + j));
  return a1;
}

void sub_18BD5819C(UErrorCode *a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  UErrorCode v7;
  void *v8;

  if (*(int *)a1 <= 0)
  {
    v2 = atomic_load(&dword_1ECD284F0);
    if (v2 != 2 && icu::umtx_initImplPreInit(&dword_1ECD284F0))
    {
      sub_18BDA1768(6u, (uint64_t)sub_18BD58290);
      v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0xF00, v3);
      if (v5)
      {
        v6 = sub_18BD57C38((uint64_t)v5, a1);
        qword_1ECD284E8 = v6;
        v7 = *a1;
        if (*(int *)a1 < 1)
          goto LABEL_8;
        v8 = (void *)sub_18BD58138(v6);
        icu::UMemory::operator delete(v8);
        v7 = *a1;
        qword_1ECD284E8 = 0;
        if (v7 > U_ZERO_ERROR)
          goto LABEL_8;
      }
      else
      {
        qword_1ECD284E8 = 0;
        v7 = *a1;
        if (*(int *)a1 >= 1)
          goto LABEL_8;
      }
      v7 = U_MEMORY_ALLOCATION_ERROR;
      *a1 = U_MEMORY_ALLOCATION_ERROR;
LABEL_8:
      dword_1ECD284F4 = v7;
      icu::umtx_initImplPostInit(&dword_1ECD284F0);
      return;
    }
    if (dword_1ECD284F4 >= 1)
      *a1 = dword_1ECD284F4;
  }
}

uint64_t sub_18BD58290()
{
  void *v0;

  if (qword_1ECD284E8)
  {
    v0 = (void *)sub_18BD58138(qword_1ECD284E8);
    icu::UMemory::operator delete(v0);
  }
  qword_1ECD284E8 = 0;
  atomic_store(0, &dword_1ECD284F0);
  return 1;
}

uint64_t sub_18BD582D0(int a1, _DWORD *a2)
{
  int v3;
  int v4;
  UText *v5;
  uint64_t v6;
  unsigned int v7;
  UText *v9;
  int32_t chunkOffset;
  BOOL v11;
  int v12;
  UText *v13;
  uint64_t v14;

  v3 = a2[2];
  v4 = v3 + 1;
  if (v3 + 1 == a1)
  {
    v5 = *(UText **)a2;
    v6 = *(int *)(*(_QWORD *)a2 + 40);
    if ((int)v6 >= *(_DWORD *)(*(_QWORD *)a2 + 44) || (v7 = v5->chunkContents[v6], v7 >> 11 > 0x1A))
    {
      v7 = utext_next32(v5);
      v4 = a2[2] + 1;
    }
    else
    {
      v5->chunkOffset = v6 + 1;
    }
    a2[2] = v4;
  }
  else
  {
    v9 = *(UText **)a2;
    if (v3 == a1)
    {
      chunkOffset = v9->chunkOffset;
      v11 = __OFSUB__(chunkOffset, 1);
      v12 = chunkOffset - 1;
      if (v12 < 0 != v11 || (v7 = v9->chunkContents[v12], v7 >> 11 > 0x1A))
      {
        v7 = utext_previous32(v9);
        v9 = *(UText **)a2;
        v12 = *(_DWORD *)(*(_QWORD *)a2 + 40);
      }
      else
      {
        v9->chunkOffset = v12;
      }
      if (v12 >= v9->chunkLength || v9->chunkContents[v12] >> 11 > 0x1Au)
        utext_next32(v9);
      else
        v9->chunkOffset = v12 + 1;
    }
    else
    {
      utext_moveIndex32(v9, ~v3 + a1);
      v13 = *(UText **)a2;
      v14 = *(int *)(*(_QWORD *)a2 + 40);
      if ((int)v14 >= *(_DWORD *)(*(_QWORD *)a2 + 44) || (v7 = v13->chunkContents[v14], v7 >> 11 > 0x1A))
        v7 = utext_next32(v13);
      else
        v13->chunkOffset = v14 + 1;
      a2[2] = a1;
    }
  }
  if (v7 >= 0x10000)
    return 0;
  else
    return (unsigned __int16)v7;
}

uint64_t sub_18BD58428(int a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 2 * a1);
}

void *sub_18BD58430()
{
  return &unk_1EE009D20;
}

void icu::Region::loadRegionData(icu::Region *this, UErrorCode *a2)
{
  uint64_t *v3;
  int32x2_t *v4;
  int32x2_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  icu::UVector *v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  icu::UVector *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const UChar *NextString;
  int32_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  char *v32;
  unsigned int v33;
  icu::UnicodeString *v34;
  icu::UnicodeString *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  const UChar *v39;
  int32_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  unsigned int v47;
  icu::UnicodeString *v48;
  icu::UnicodeString *v49;
  uint64_t *i;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v55;
  uint64_t *v56;
  icu::UnicodeString *v57;
  const UChar *v58;
  void *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  icu::UnicodeString *v63;
  const UChar *v64;
  signed int v65;
  uint64_t *v66;
  uint64_t *v67;
  UChar **v68;
  _DWORD *v69;
  char *v70;
  uint64_t v71;
  UChar **v72;
  unsigned int v73;
  uint64_t v74;
  int *v75;
  unsigned int v76;
  uint64_t v77;
  char *NextResource;
  unint64_t v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t Key;
  uint64_t v83;
  uint64_t v84;
  int Size;
  int v86;
  int v87;
  const UChar *StringByIndex;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  icu::UnicodeString *v94;
  icu::UnicodeString *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  signed int v99;
  uint64_t v100;
  uint64_t v101;
  signed int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  void *v114;
  signed int v115;
  const UChar *v116;
  uint64_t v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  UChar **v124;
  UChar **v125;
  uint64_t Element;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  icu::UnicodeString *v131;
  icu::UnicodeString *v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  const UChar *StringByKey;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  void *v144;
  uint64_t *v145;
  icu::ICU_Utility *v146;
  uint64_t v147;
  _DWORD *v148;
  char *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  int *v153;
  unsigned int v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  BOOL v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  unint64_t v165;
  char *v166;
  int v167;
  unint64_t v168;
  char *v169;
  int v170;
  uint64_t v171;
  uint64_t v173;
  unint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  icu::UnicodeString *v177;
  icu::UnicodeString *v178;
  UChar **v179;
  icu::UnicodeString *v180;
  __int16 v181;
  signed int v182;
  void *v183;
  void *v184;
  void *v185;
  char *v186;
  char *v187;
  char *v188;
  const UChar *v189;
  const UChar *v190;
  const UChar *v191;
  uint64_t v192;
  int *v193;
  void *v194;
  uint64_t v195;
  unsigned int v196;
  unint64_t v197;
  uint64_t *v198;
  icu::UnicodeString *v199;
  uint64_t v200;
  void *v201;
  void *v202;
  icu::UVector *v203;
  uint64_t v204;
  icu::UVector *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  UChar *v221;
  UChar *v222;
  const UChar *v223;
  int v224;
  void (**v225)(icu::UnicodeString *__hidden);
  __int128 v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  _OWORD v230[4];
  _OWORD v231[4];
  _OWORD v232[4];
  _OWORD v233[4];
  uint64_t v234;

  v234 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)this);
  v4 = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, (int *)this);
  v5 = uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)this);
  v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v6);
  v10 = (icu::UVector *)v8;
  if (v8)
  {
    icu::UVector::UVector((uint64_t)v8, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
  }
  else
  {
    v11 = *(unsigned int *)this;
    if ((int)v11 <= 0)
    {
      v11 = 7;
      *(_DWORD *)this = 7;
    }
  }
  v12 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x28, v9);
  v14 = (icu::UVector *)v12;
  if (v12)
  {
    icu::UVector::UVector((uint64_t)v12, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
  }
  else
  {
    v15 = *(unsigned int *)this;
    if ((int)v15 <= 0)
    {
      v15 = 7;
      *(_DWORD *)this = 7;
    }
  }
  v16 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x28, v13);
  if (v16)
  {
    v16 = (uint64_t *)icu::UVector::UVector((uint64_t)v16, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
  }
  else if (*(int *)this <= 0)
  {
    *(_DWORD *)this = 7;
  }
  qword_1EE009D28 = (uint64_t)v16;
  v17 = (_QWORD *)ures_openDirect(0, (uint64_t)"metadata", (uint64_t)this);
  v209 = ures_getByKey((uint64_t)v17, "alias", 0, (int *)this);
  v214 = ures_getByKey(v209, "territory", 0, (int *)this);
  v18 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)this);
  v213 = (_QWORD *)ures_getByKey(v18, "codeMappings", 0, (int *)this);
  v211 = (_QWORD *)ures_getByKey(v18, "idValidity", 0, (int *)this);
  v19 = ures_getByKey((uint64_t)v211, "region", 0, (int *)this);
  v220 = ures_getByKey(v19, "regular", 0, (int *)this);
  v218 = (_QWORD *)ures_getByKey(v19, "macroregion", 0, (int *)this);
  v210 = (_QWORD *)v19;
  v217 = (_QWORD *)ures_getByKey(v19, "unknown", 0, (int *)this);
  v212 = (_QWORD *)v18;
  v20 = ures_getByKey(v18, "territoryContainment", 0, (int *)this);
  v219 = ures_getByKey(v20, "001", 0, (int *)this);
  v216 = (_QWORD *)v20;
  v215 = (_QWORD *)ures_getByKey(v20, "grouping", 0, (int *)this);
  sub_18BDA1768(0x21u, (uint64_t)sub_18BD59FF4);
  if (*(int *)this > 0)
    goto LABEL_15;
  uhash_setValueDeleter((uint64_t)v3, (uint64_t)uprv_deleteUObject);
  uhash_setKeyDeleter((uint64_t)v5, (uint64_t)uprv_deleteUObject);
  if (*(int *)this > 0)
    goto LABEL_15;
  v207 = (uint64_t)v3;
  v208 = v17;
  v204 = (uint64_t)v5;
  v205 = v14;
  v203 = v10;
  v206 = (uint64_t)v4;
  v23 = (_QWORD *)v220;
  while (ures_hasNext((_BOOL8)v23))
  {
    memset((char *)v233 + 8, 0, 56);
    *(_QWORD *)&v233[0] = off_1E2256B38;
    WORD4(v233[0]) = 2;
    LODWORD(v231[0]) = 0;
    NextString = ures_getNextString((uint64_t)v23, (int *)v231, 0, (int *)this);
    if (*(int *)this <= 0)
    {
      *(_QWORD *)&v232[0] = NextString;
      icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
    }
    if ((SWORD4(v233[0]) & 0x8000u) == 0)
      v26 = WORD4(v233[0]) >> 5;
    else
      v26 = HIDWORD(v233[0]);
    v27 = icu::UnicodeString::doIndexOf((uint64_t)v233, 0x7Eu, 0, v26);
    DWORD2(v232[0]) = 0;
    *(_QWORD *)&v232[0] = 0;
    v222 = (UChar *)v232;
    icu::UnicodeString::extract((uint64_t)v233, &v222, 6, (int *)this);
    v29 = (v27 - 1);
    if (v27 < 1)
    {
      v34 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v222, (icu::UMemory *)0x40, v28);
      v35 = v34;
      if (v34)
      {
        icu::UnicodeString::UnicodeString(v34, (UChar **)v233);
      }
      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }
      icu::UVector::adoptElement((icu::UVector *)qword_1EE009D28, v35, (UErrorCode *)this);
    }
    else
    {
      v30 = v27 + 1;
      if ((SWORD4(v233[0]) & 0x8000u) == 0)
        v31 = WORD4(v233[0]) >> 5;
      else
        v31 = HIDWORD(v233[0]);
      if (v31 <= v30)
      {
        v33 = 0xFFFF;
      }
      else
      {
        v32 = (char *)v233 + 10;
        if ((BYTE8(v233[0]) & 2) == 0)
          v32 = (char *)*((_QWORD *)&v233[1] + 1);
        v33 = *(unsigned __int16 *)&v32[2 * v30];
      }
      *((_WORD *)v232 + v27) = 0;
      v36 = (uint64_t *)*(unsigned int *)this;
      if ((int)v36 <= 0)
      {
        v36 = (uint64_t *)*((unsigned __int16 *)v232 + v29);
        do
        {
          if (v33 < (unsigned __int16)v36)
            break;
          v37 = icu::UMemory::operator new(v36, (icu::UMemory *)0x40, v28);
          v38 = v37;
          if (v37)
          {
            icu::UnicodeString::UnicodeString((uint64_t)v37, (uint64_t)v232);
          }
          else if (*(int *)this <= 0)
          {
            *(_DWORD *)this = 7;
          }
          icu::UVector::adoptElement((icu::UVector *)qword_1EE009D28, v38, (UErrorCode *)this);
          v36 = (uint64_t *)((unsigned __int16)(*((_WORD *)v232 + v29))++ + 1);
        }
        while (*(int *)this <= 0);
      }
    }
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v233);
    v23 = (_QWORD *)v220;
    if (*(int *)this > 0)
      goto LABEL_88;
  }
  if (*(int *)this > 0)
  {
LABEL_88:
    v4 = (int32x2_t *)v206;
LABEL_89:
    v17 = v208;
LABEL_90:
    v21 = (_QWORD *)v209;
    v22 = (_QWORD *)v214;
    goto LABEL_16;
  }
  while (ures_hasNext((_BOOL8)v218))
  {
    memset((char *)v233 + 8, 0, 56);
    *(_QWORD *)&v233[0] = off_1E2256B38;
    WORD4(v233[0]) = 2;
    LODWORD(v231[0]) = 0;
    v39 = ures_getNextString((uint64_t)v218, (int *)v231, 0, (int *)this);
    if (*(int *)this <= 0)
    {
      *(_QWORD *)&v232[0] = v39;
      icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
    }
    if ((SWORD4(v233[0]) & 0x8000u) == 0)
      v40 = WORD4(v233[0]) >> 5;
    else
      v40 = HIDWORD(v233[0]);
    v41 = icu::UnicodeString::doIndexOf((uint64_t)v233, 0x7Eu, 0, v40);
    DWORD2(v232[0]) = 0;
    *(_QWORD *)&v232[0] = 0;
    v221 = (UChar *)v232;
    icu::UnicodeString::extract((uint64_t)v233, &v221, 6, (int *)this);
    v43 = (v41 - 1);
    if (v41 < 1)
    {
      v48 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v221, (icu::UMemory *)0x40, v42);
      v49 = v48;
      if (v48)
      {
        icu::UnicodeString::UnicodeString(v48, (UChar **)v233);
      }
      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }
      icu::UVector::adoptElement((icu::UVector *)qword_1EE009D28, v49, (UErrorCode *)this);
    }
    else
    {
      v44 = v41 + 1;
      if ((SWORD4(v233[0]) & 0x8000u) == 0)
        v45 = WORD4(v233[0]) >> 5;
      else
        v45 = HIDWORD(v233[0]);
      if (v45 <= v44)
      {
        v47 = 0xFFFF;
      }
      else
      {
        v46 = (char *)v233 + 10;
        if ((BYTE8(v233[0]) & 2) == 0)
          v46 = (char *)*((_QWORD *)&v233[1] + 1);
        v47 = *(unsigned __int16 *)&v46[2 * v44];
      }
      *((_WORD *)v232 + v41) = 0;
      for (i = (uint64_t *)*((unsigned __int16 *)v232 + v43);
            v47 >= (unsigned __int16)i && *(_DWORD *)this <= 0;
            i = (uint64_t *)((unsigned __int16)(*((_WORD *)v232 + v43))++ + 1))
      {
        v52 = icu::UMemory::operator new(i, (icu::UMemory *)0x40, v42);
        v53 = v52;
        if (v52)
        {
          icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)v232);
        }
        else if (*(int *)this <= 0)
        {
          *(_DWORD *)this = 7;
        }
        icu::UVector::adoptElement((icu::UVector *)qword_1EE009D28, v53, (UErrorCode *)this);
      }
    }
    icu::UnicodeString::~UnicodeString(i, (icu::UnicodeString *)v233);
    v17 = v208;
    v23 = (_QWORD *)v220;
    if (*(int *)this > 0)
      goto LABEL_129;
  }
  if (*(int *)this > 0)
  {
LABEL_129:
    v4 = (int32x2_t *)v206;
    goto LABEL_90;
  }
  while (ures_hasNext((_BOOL8)v217))
  {
    v57 = (icu::UnicodeString *)icu::UMemory::operator new(v56, (icu::UMemory *)0x40, v55);
    if (v57)
    {
      memset((char *)v233 + 8, 0, 56);
      *(_QWORD *)&v233[0] = off_1E2256B38;
      WORD4(v233[0]) = 2;
      LODWORD(v231[0]) = 0;
      v58 = ures_getNextString((uint64_t)v217, (int *)v231, 0, (int *)this);
      if (*(int *)this <= 0)
      {
        *(_QWORD *)&v232[0] = v58;
        icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
      }
      icu::UnicodeString::UnicodeString(v57, (const icu::UnicodeString *)v233, *(_DWORD *)this);
      icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)v233);
    }
    icu::UVector::adoptElement((icu::UVector *)qword_1EE009D28, v57, (UErrorCode *)this);
    if (*(int *)this > 0)
    {
      v4 = (int32x2_t *)v206;
      goto LABEL_138;
    }
  }
  v23 = (_QWORD *)v220;
  if (*(int *)this > 0)
  {
    v4 = (int32x2_t *)v206;
    goto LABEL_89;
  }
  v17 = v208;
  v24 = (_QWORD *)v219;
  while (ures_hasNext((_BOOL8)v24))
  {
    v62 = icu::UMemory::operator new(v61, (icu::UMemory *)0x40, v60);
    v63 = (icu::UnicodeString *)v62;
    if (v62)
    {
      *(_OWORD *)(v62 + 1) = 0u;
      v62[7] = 0;
      *(_OWORD *)(v62 + 5) = 0u;
      *(_OWORD *)(v62 + 3) = 0u;
      *v62 = (uint64_t)off_1E2256B38;
      *((_WORD *)v62 + 4) = 2;
      LODWORD(v232[0]) = 0;
      v64 = ures_getNextString(v219, (int *)v232, 0, (int *)this);
      if (*(int *)this <= 0)
      {
        *(_QWORD *)&v233[0] = v64;
        icu::UnicodeString::setTo(v63, 1, (const UChar **)v233, v232[0]);
      }
      else
      {
        icu::UnicodeString::setToBogus(v63);
      }
    }
    icu::UVector::adoptElement(v10, v63, (UErrorCode *)this);
    v24 = (_QWORD *)v219;
    if (*(int *)this > 0)
    {
      v4 = (int32x2_t *)v206;
      v21 = (_QWORD *)v209;
      v22 = (_QWORD *)v214;
      v23 = (_QWORD *)v220;
      goto LABEL_17;
    }
  }
  if (*(int *)this > 0)
  {
    v4 = (int32x2_t *)v206;
    goto LABEL_15;
  }
  if (*(int *)(qword_1EE009D28 + 8) < 1)
    goto LABEL_164;
  v65 = 0;
  do
  {
    v67 = icu::UMemory::operator new(v66, (icu::UMemory *)0x70, v60);
    if (!v67)
    {
      if (*(int *)this <= 0)
        *(_DWORD *)this = 7;
      goto LABEL_372;
    }
    *v67 = (uint64_t)off_1E2265690;
    v67[2] = (uint64_t)off_1E2256B38;
    v68 = (UChar **)(v67 + 2);
    *((_WORD *)v67 + 12) = 2;
    *(uint64_t *)((char *)v67 + 84) = 0;
    v69 = (_DWORD *)v67 + 21;
    *((_BYTE *)v67 + 8) = 0;
    v70 = (char *)(v67 + 1);
    *((_DWORD *)v67 + 20) = -1;
    *(uint64_t *)((char *)v67 + 100) = 0;
    *(uint64_t *)((char *)v67 + 92) = 0;
    *((_DWORD *)v67 + 27) = 0;
    v71 = (uint64_t)v67;
    if (*(int *)this > 0)
      goto LABEL_371;
    v72 = (UChar **)icu::UVector::elementAt((icu::UVector *)qword_1EE009D28, v65);
    icu::UnicodeString::operator=(v68, v72);
    v73 = *(unsigned __int16 *)(v71 + 24);
    if ((v73 & 0x8000) != 0)
      v74 = *(unsigned int *)(v71 + 28);
    else
      v74 = v73 >> 5;
    icu::UnicodeString::extract((uint64_t)v68, 0, v74, v70, 4);
    *v69 = 1;
    LODWORD(v233[0]) = 0;
    v76 = icu::ICU_Utility::parseAsciiInteger((icu::ICU_Utility *)v68, (const icu::UnicodeString *)v233, v75);
    if (SLODWORD(v233[0]) < 1)
    {
      v77 = v71;
      *(_DWORD *)(v71 + 80) = -1;
    }
    else
    {
      *(_DWORD *)(v71 + 80) = v76;
      uhash_iput(v206, v76, v71, (int *)this);
      v77 = v71;
      *(_DWORD *)(v71 + 84) = 4;
    }
    v3 = (uint64_t *)v207;
    uhash_put(v207, (uint64_t)v68, v77, (int *)this);
    v66 = (uint64_t *)*(unsigned int *)(qword_1EE009D28 + 8);
    ++v65;
  }
  while (v65 < (int)v66);
  if (*(int *)this <= 0)
  {
LABEL_164:
    NextResource = 0;
    do
    {
      if (!ures_hasNext((_BOOL8)v215))
        break;
      NextResource = ures_getNextResource((uint64_t)v215, NextResource, (int *)this);
      v80 = (uint64_t *)*(unsigned int *)this;
      if ((int)v80 > 0)
        break;
      v81 = icu::UMemory::operator new(v80, (icu::UMemory *)0x40, v79);
      if (v81)
      {
        Key = ures_getKey((uint64_t)NextResource);
        icu::UnicodeString::UnicodeString(v81, Key, 0xFFFFFFFFLL, 0);
      }
      else if (*(int *)this <= 0)
      {
        *(_DWORD *)this = 7;
      }
      icu::UVector::adoptElement(v205, v81, (UErrorCode *)this);
      if (*(int *)this > 0)
        break;
      v83 = uhash_get((uint64_t)v3, (uint64_t)v81);
      if (!v83)
        goto LABEL_195;
      v84 = v83;
      Size = ures_getSize((uint64_t)NextResource);
      v86 = *(_DWORD *)this;
      if (Size >= 1 && v86 <= 0)
      {
        v87 = 1;
        while (1)
        {
          memset((char *)v233 + 8, 0, 56);
          *(_QWORD *)&v233[0] = off_1E2256B38;
          WORD4(v233[0]) = 2;
          LODWORD(v231[0]) = 0;
          StringByIndex = ures_getStringByIndex((uint64_t)NextResource, v87 - 1, (int *)v231, (int *)this);
          if (*(int *)this <= 0)
          {
            *(_QWORD *)&v232[0] = StringByIndex;
            icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
          }
          else
          {
            icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
          }
          v90 = (void *)*(unsigned int *)this;
          if ((int)v90 <= 0)
          {
            v91 = *(_QWORD *)(v84 + 96);
            if (!v91)
            {
              v92 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v89);
              if (!v92)
              {
                v91 = *(unsigned int *)this;
                if ((int)v91 <= 0)
                {
                  v91 = 7;
                  *(_DWORD *)this = 7;
                }
                *(_QWORD *)(v84 + 96) = 0;
                v3 = (uint64_t *)v207;
                v5 = (int32x2_t *)v204;
LABEL_194:
                icu::UnicodeString::~UnicodeString((void *)v91, (icu::UnicodeString *)v233);
LABEL_195:
                v86 = *(_DWORD *)this;
                break;
              }
              v93 = icu::UVector::UVector((uint64_t)v92, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
              v91 = *(unsigned int *)this;
              *(_QWORD *)(v84 + 96) = v93;
              if ((int)v91 > 0)
                goto LABEL_194;
            }
            v94 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v91, (icu::UMemory *)0x40, v89);
            v95 = v94;
            if (v94)
            {
              icu::UnicodeString::UnicodeString(v94, (UChar **)v233);
            }
            else if (*(int *)this <= 0)
            {
              *(_DWORD *)this = 7;
            }
            icu::UVector::adoptElement(*(icu::UVector **)(v84 + 96), v95, (UErrorCode *)this);
          }
          icu::UnicodeString::~UnicodeString(v90, (icu::UnicodeString *)v233);
          v96 = ures_getSize((uint64_t)NextResource);
          v86 = *(_DWORD *)this;
          if (v87 < v96)
          {
            ++v87;
            if (v86 <= 0)
              continue;
          }
          break;
        }
      }
    }
    while (v86 < 1);
  }
  else
  {
    NextResource = 0;
  }
  ures_close(NextResource);
  if (*(int *)this > 0)
    goto LABEL_198;
  while (ures_hasNext(v214))
  {
    v133 = ures_getNextResource(v214, 0, (int *)this);
    v134 = ures_getKey((uint64_t)v133);
    v137 = icu::UMemory::operator new(v136, (icu::UMemory *)0x40, v135);
    v71 = (uint64_t)v137;
    if (v137)
    {
      icu::UnicodeString::UnicodeString(v137, v134, 0xFFFFFFFFLL, 0);
    }
    else if (*(int *)this <= 0)
    {
      *(_DWORD *)this = 7;
    }
    memset((char *)v233 + 8, 0, 56);
    *(_QWORD *)&v233[0] = off_1E2256B38;
    WORD4(v233[0]) = 2;
    LODWORD(v231[0]) = 0;
    StringByKey = ures_getStringByKey((uint64_t)v133, "replacement", (int *)v231, (int *)this);
    if (*(int *)this <= 0)
    {
      *(_QWORD *)&v232[0] = StringByKey;
      icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
    }
    if (v133)
      ures_close(v133);
    v139 = uhash_get((uint64_t)v3, (uint64_t)v233);
    v140 = uhash_get((uint64_t)v3, v71);
    v143 = v140;
    if (!v139 || v140)
    {
      if (v140)
      {
        *(_DWORD *)(v140 + 84) = 6;
        goto LABEL_286;
      }
      v145 = icu::UMemory::operator new(v142, (icu::UMemory *)0x70, v141);
      if (v145)
      {
        *v145 = (uint64_t)off_1E2265690;
        v145[2] = (uint64_t)off_1E2256B38;
        v146 = (icu::ICU_Utility *)(v145 + 2);
        *((_WORD *)v145 + 12) = 2;
        v147 = (uint64_t)v145;
        *(uint64_t *)((char *)v145 + 84) = 0;
        v148 = (_DWORD *)v145 + 21;
        *((_BYTE *)v145 + 8) = 0;
        v149 = (char *)(v145 + 1);
        *((_DWORD *)v145 + 20) = -1;
        *(uint64_t *)((char *)v145 + 100) = 0;
        *(uint64_t *)((char *)v145 + 92) = 0;
        *((_DWORD *)v145 + 27) = 0;
        if (*(int *)this > 0)
        {
          (*(void (**)(uint64_t *))(*v145 + 8))(v145);
        }
        else
        {
          icu::UnicodeString::copyFrom((UChar **)v145 + 2, (UChar **)v71, 0);
          v150 = v147;
          v151 = *(unsigned __int16 *)(v147 + 24);
          if ((v151 & 0x8000) != 0)
            v152 = *(unsigned int *)(v147 + 28);
          else
            v152 = v151 >> 5;
          icu::UnicodeString::extract((uint64_t)v146, 0, v152, v149, 4);
          uhash_put(v207, (uint64_t)v146, v147, (int *)this);
          LODWORD(v232[0]) = 0;
          v154 = icu::ICU_Utility::parseAsciiInteger(v146, (const icu::UnicodeString *)v232, v153);
          if (SLODWORD(v232[0]) < 1)
          {
            *(_DWORD *)(v147 + 80) = -1;
          }
          else
          {
            *(_DWORD *)(v147 + 80) = v154;
            uhash_iput(v206, v154, v147, (int *)this);
          }
          *v148 = 6;
          v3 = (uint64_t *)v207;
          v5 = (int32x2_t *)v204;
          v143 = v150;
LABEL_286:
          v155 = icu::UMemory::operator new((uint64_t *)6, (icu::UMemory *)0x28, v141);
          if (v155)
          {
            v156 = icu::UVector::UVector((uint64_t)v155, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
            v157 = *(unsigned int *)this;
            *(_QWORD *)(v143 + 104) = v156;
            if ((int)v157 > 0)
              goto LABEL_370;
            memset((char *)v232 + 8, 0, 56);
            *(_QWORD *)&v232[0] = off_1E2256B38;
            WORD4(v232[0]) = 2;
            v158 = (void *)WORD4(v233[0]);
            v159 = SWORD4(v233[0]) < 0;
            v160 = WORD4(v233[0]) >> 5;
            v161 = HIDWORD(v233[0]);
            if (SWORD4(v233[0]) < 0)
              v160 = HIDWORD(v233[0]);
            if (v160 < 1 || *(int *)this > 0)
            {
LABEL_329:
              icu::UnicodeString::~UnicodeString(v158, (icu::UnicodeString *)v232);
              icu::UnicodeString::~UnicodeString(v183, (icu::UnicodeString *)v233);
              if (v71)
                (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              goto LABEL_331;
            }
            v162 = v143;
            v163 = 0;
            while (2)
            {
              v164 = v158 >> 5;
              if (v159)
                v165 = v161;
              else
                v165 = v164;
              if (v163 >= v165)
              {
                LOWORD(v167) = -1;
              }
              else
              {
                v166 = (char *)*((_QWORD *)&v233[1] + 1);
                if ((v158 & 2) != 0)
                  v166 = (char *)v233 + 10;
                v167 = *(unsigned __int16 *)&v166[2 * v163];
                if (v167 == 32)
                {
LABEL_303:
                  if ((__int16)v158 >= 0)
                    v168 = v164;
                  else
                    v168 = v161;
                  if (v163 >= v168)
                  {
                    v171 = v163 + 1;
                    if (v163 + 1 != v168)
                      goto LABEL_325;
                  }
                  else
                  {
                    v169 = (char *)*((_QWORD *)&v233[1] + 1);
                    if ((v158 & 2) != 0)
                      v169 = (char *)v233 + 10;
                    v170 = *(unsigned __int16 *)&v169[2 * v163];
                    v171 = v163 + 1;
                    if (v170 != 32 && v171 != v168)
                    {
LABEL_325:
                      v159 = (__int16)v158 < 0;
                      v182 = v158 >> 5;
                      if ((__int16)v158 < 0)
                        v182 = v161;
                      if (v171 >= v182)
                        goto LABEL_329;
                      v163 = v171;
                      if (*(int *)this >= 1)
                        goto LABEL_329;
                      continue;
                    }
                  }
                  v173 = uhash_get((uint64_t)v3, (uint64_t)v232);
                  if (v173)
                  {
                    v176 = v173;
                    v177 = (icu::UnicodeString *)icu::UMemory::operator new(v175, (icu::UMemory *)0x40, v174);
                    v178 = v177;
                    if (v177)
                    {
                      v179 = (UChar **)(v176 + 16);
                      v180 = v177;
                      icu::UnicodeString::UnicodeString(v177, v179);
                      v178 = v180;
                    }
                    else if (*(int *)this <= 0)
                    {
                      *(_DWORD *)this = 7;
                    }
                    icu::UVector::adoptElement(*(icu::UVector **)(v162 + 104), v178, (UErrorCode *)this);
                  }
                  if ((BYTE8(v232[0]) & 1) != 0)
                    v181 = 2;
                  else
                    v181 = BYTE8(v232[0]) & 0x1F;
                  WORD4(v232[0]) = v181;
                  v158 = (void *)WORD4(v233[0]);
                  v161 = HIDWORD(v233[0]);
                  v171 = v163 + 1;
                  goto LABEL_325;
                }
              }
              break;
            }
            LOWORD(v231[0]) = v167;
            icu::UnicodeString::doAppend((uint64_t)v232, (uint64_t)v231, 0, 1);
            v158 = (void *)WORD4(v233[0]);
            v161 = HIDWORD(v233[0]);
            v164 = WORD4(v233[0]) >> 5;
            goto LABEL_303;
          }
          v157 = *(unsigned int *)this;
          if ((int)v157 <= 0)
          {
            v157 = 7;
            *(_DWORD *)this = 7;
          }
          *(_QWORD *)(v143 + 104) = 0;
        }
      }
      else
      {
        v157 = *(unsigned int *)this;
        if ((int)v157 <= 0)
        {
          v157 = 7;
          *(_DWORD *)this = 7;
        }
      }
LABEL_370:
      icu::UnicodeString::~UnicodeString((void *)v157, (icu::UnicodeString *)v233);
      if (!v71)
        goto LABEL_372;
LABEL_371:
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      goto LABEL_372;
    }
    uhash_put((uint64_t)v5, v71, v139, (int *)this);
    icu::UnicodeString::~UnicodeString(v144, (icu::UnicodeString *)v233);
LABEL_331:
    if (*(int *)this > 0)
      goto LABEL_198;
  }
  if (*(int *)this <= 0)
  {
    do
    {
      if (!ures_hasNext((_BOOL8)v213))
        break;
      v186 = ures_getNextResource((uint64_t)v213, 0, (int *)this);
      v187 = v186;
      if (*(int *)this <= 0
        && ures_getType((uint64_t)v186) == 8
        && ures_getSize((uint64_t)v187) == 3)
      {
        memset((char *)v233 + 8, 0, 56);
        *(_QWORD *)&v233[0] = off_1E2256B38;
        WORD4(v233[0]) = 2;
        LODWORD(v231[0]) = 0;
        v188 = v187;
        v189 = ures_getStringByIndex((uint64_t)v187, 0, (int *)v231, (int *)this);
        if (*(int *)this <= 0)
        {
          *(_QWORD *)&v232[0] = v189;
          icu::UnicodeString::setTo((icu::UnicodeString *)v233, 1, (const UChar **)v232, v231[0]);
        }
        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v233);
        }
        memset((char *)v232 + 8, 0, 56);
        *(_QWORD *)&v232[0] = off_1E2256B38;
        WORD4(v232[0]) = 2;
        LODWORD(v230[0]) = 0;
        v190 = ures_getStringByIndex((uint64_t)v187, 1, (int *)v230, (int *)this);
        if (*(int *)this <= 0)
        {
          *(_QWORD *)&v231[0] = v190;
          icu::UnicodeString::setTo((icu::UnicodeString *)v232, 1, (const UChar **)v231, v230[0]);
        }
        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v232);
        }
        memset((char *)v231 + 8, 0, 56);
        *(_QWORD *)&v231[0] = off_1E2256B38;
        WORD4(v231[0]) = 2;
        LODWORD(v225) = 0;
        v191 = ures_getStringByIndex((uint64_t)v187, 2, (int *)&v225, (int *)this);
        if (*(int *)this <= 0)
        {
          *(_QWORD *)&v230[0] = v191;
          icu::UnicodeString::setTo((icu::UnicodeString *)v231, 1, (const UChar **)v230, (int)v225);
        }
        else
        {
          icu::UnicodeString::setToBogus((icu::UnicodeString *)v231);
        }
        v192 = uhash_get(v207, (uint64_t)v233);
        if (v192)
        {
          v195 = v192;
          LODWORD(v230[0]) = 0;
          v196 = icu::ICU_Utility::parseAsciiInteger((icu::ICU_Utility *)v232, (const icu::UnicodeString *)v230, v193);
          v198 = (uint64_t *)LODWORD(v230[0]);
          if (SLODWORD(v230[0]) >= 1)
          {
            *(_DWORD *)(v195 + 80) = v196;
            uhash_iput(v206, v196, v195, (int *)this);
          }
          v199 = (icu::UnicodeString *)icu::UMemory::operator new(v198, (icu::UMemory *)0x40, v197);
          v200 = (uint64_t)v199;
          if (v199)
          {
            icu::UnicodeString::UnicodeString(v199, (UChar **)v231);
          }
          else if (*(int *)this <= 0)
          {
            *(_DWORD *)this = 7;
          }
          uhash_put(v204, v200, v195, (int *)this);
        }
        icu::UnicodeString::~UnicodeString(v194, (icu::UnicodeString *)v231);
        icu::UnicodeString::~UnicodeString(v201, (icu::UnicodeString *)v232);
        icu::UnicodeString::~UnicodeString(v202, (icu::UnicodeString *)v233);
        v3 = (uint64_t *)v207;
        v187 = v188;
      }
      ures_close(v187);
    }
    while (*(int *)this < 1);
  }
LABEL_198:
  memset(v233, 0, sizeof(v233));
  icu::UnicodeString::UnicodeString((uint64_t)v233, (uint64_t)"0");
  v97 = uhash_get((uint64_t)v3, (uint64_t)v233);
  if (v97)
    *(_DWORD *)(v97 + 84) = 2;
  memset(v232, 0, sizeof(v232));
  icu::UnicodeString::UnicodeString((uint64_t)v232, (uint64_t)"Z");
  v98 = uhash_get((uint64_t)v3, (uint64_t)v232);
  if (v98)
    *(_DWORD *)(v98 + 84) = 0;
  if (*((int *)v203 + 2) >= 1)
  {
    v99 = 0;
    do
    {
      v100 = icu::UVector::elementAt(v203, v99);
      v101 = uhash_get((uint64_t)v3, v100);
      if (v101)
        *(_DWORD *)(v101 + 84) = 3;
      ++v99;
    }
    while (v99 < *((_DWORD *)v203 + 2));
  }
  if (*((int *)v205 + 2) >= 1)
  {
    v102 = 0;
    do
    {
      v103 = icu::UVector::elementAt(v205, v102);
      v104 = uhash_get((uint64_t)v3, v103);
      if (v104)
        *(_DWORD *)(v104 + 84) = 5;
      ++v102;
    }
    while (v102 < *((_DWORD *)v205 + 2));
  }
  memset(v231, 0, sizeof(v231));
  icu::UnicodeString::UnicodeString((uint64_t)v231, (uint64_t)L"QO");
  v105 = uhash_get((uint64_t)v3, (uint64_t)v231);
  if (v105)
    *(_DWORD *)(v105 + 84) = 4;
  v106 = (uint64_t)v216;
  if (!ures_hasNext((_BOOL8)v216))
    goto LABEL_251;
  while (2)
  {
    v107 = ures_getNextResource(v106, 0, (int *)this);
    v108 = v107;
    v109 = *(unsigned int *)this;
    if ((int)v109 > 0)
    {
      v110 = 1;
      goto LABEL_246;
    }
    v111 = (uint64_t)v107;
    v112 = (const char *)ures_getKey((uint64_t)v107);
    if (!strcmp(v112, "containedGroupings") || !strcmp(v112, "deprecated"))
    {
      v110 = 35;
      v108 = (_QWORD *)v111;
      goto LABEL_246;
    }
    memset(v230, 0, sizeof(v230));
    icu::UnicodeString::UnicodeString(v230, v112, 0xFFFFFFFFLL, 0);
    v113 = uhash_get((uint64_t)v3, (uint64_t)v230);
    v108 = (_QWORD *)v111;
    if ((int)ures_getSize(v111) < 1)
    {
LABEL_235:
      v110 = 0;
      goto LABEL_245;
    }
    v115 = 0;
    while (1)
    {
      v229 = 0;
      v227 = 0u;
      v228 = 0u;
      v226 = 0u;
      v225 = off_1E2256B38;
      LOWORD(v226) = 2;
      v224 = 0;
      v116 = ures_getStringByIndex((uint64_t)v108, v115, &v224, (int *)this);
      if (*(int *)this <= 0)
      {
        v223 = v116;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v225, 1, &v223, v224);
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v225);
      }
      v117 = uhash_get((uint64_t)v3, (uint64_t)&v225);
      if (!v113 || !v117)
        goto LABEL_234;
      v120 = v117;
      v121 = *(_QWORD *)(v113 + 96);
      if (!v121)
      {
        v122 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v118);
        if (!v122)
        {
          v121 = *(unsigned int *)this;
          if ((int)v121 <= 0)
          {
            v121 = 7;
            *(_DWORD *)this = 7;
          }
          *(_QWORD *)(v113 + 96) = 0;
          v3 = (uint64_t *)v207;
          goto LABEL_243;
        }
        v123 = icu::UVector::UVector((uint64_t)v122, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
        v121 = *(unsigned int *)this;
        *(_QWORD *)(v113 + 96) = v123;
        if ((int)v121 > 0)
          goto LABEL_244;
      }
      v124 = (UChar **)icu::UMemory::operator new((uint64_t *)v121, (icu::UMemory *)0x40, v118);
      if (!v124)
        break;
      v125 = v124;
      *v124 = (UChar *)off_1E2256B38;
      *((_WORD *)v124 + 4) = 2;
      if (*(int *)this > 0)
      {
        (*((void (**)(UChar **))*v124 + 1))(v124);
LABEL_243:
        v108 = (_QWORD *)v111;
        goto LABEL_244;
      }
      icu::UnicodeString::fastCopyFrom(v124, (UChar **)(v120 + 16));
      icu::UVector::adoptElement(*(icu::UVector **)(v113 + 96), v125, (UErrorCode *)this);
      v121 = *(unsigned int *)this;
      v108 = (_QWORD *)v111;
      if ((int)v121 > 0)
        goto LABEL_244;
      v119 = (void *)*(unsigned int *)(v113 + 84);
      if ((_DWORD)v119 != 5)
        *(_QWORD *)(v120 + 88) = v113;
LABEL_234:
      icu::UnicodeString::~UnicodeString(v119, (icu::UnicodeString *)&v225);
      if (++v115 >= (int)ures_getSize((uint64_t)v108))
        goto LABEL_235;
    }
    v121 = *(unsigned int *)this;
    v108 = (_QWORD *)v111;
    if ((int)v121 <= 0)
    {
      v121 = 7;
      *(_DWORD *)this = 7;
    }
LABEL_244:
    icu::UnicodeString::~UnicodeString((void *)v121, (icu::UnicodeString *)&v225);
    v110 = 1;
LABEL_245:
    icu::UnicodeString::~UnicodeString(v114, (icu::UnicodeString *)v230);
LABEL_246:
    if (v108)
      ures_close(v108);
    if (v110 == 35 || !v110)
    {
      v106 = (uint64_t)v216;
      if (!ures_hasNext((_BOOL8)v216))
      {
LABEL_251:
        LODWORD(v230[0]) = -1;
        Element = uhash_nextElement(v3, (int *)v230);
        if (Element)
        {
          while (1)
          {
            v128 = *(_QWORD *)(Element + 8);
            v129 = qword_1EE009D30[*(unsigned int *)(v128 + 84)];
            if (!v129)
            {
              v130 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, v127);
              if (v130)
              {
                v130 = (uint64_t *)icu::UVector::UVector((uint64_t)v130, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)this);
              }
              else if (*(int *)this <= 0)
              {
                *(_DWORD *)this = 7;
              }
              v129 = *(unsigned int *)(v128 + 84);
              qword_1EE009D30[v129] = (uint64_t)v130;
            }
            v131 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v129, (icu::UMemory *)0x40, v127);
            if (!v131)
              break;
            v132 = v131;
            icu::UnicodeString::UnicodeString(v131, (UChar **)(v128 + 16));
            if (*(int *)this >= 1)
            {
              (*(void (**)(icu::UnicodeString *))(*(_QWORD *)v132 + 8))(v132);
              goto LABEL_338;
            }
            icu::UVector::adoptElement((icu::UVector *)qword_1EE009D30[*(unsigned int *)(v128 + 84)], v132, (UErrorCode *)this);
            Element = uhash_nextElement(v3, (int *)v230);
            if (!Element)
              goto LABEL_261;
          }
          v109 = *(unsigned int *)this;
          if ((int)v109 <= 0)
          {
            v109 = 7;
            *(_DWORD *)this = 7;
          }
        }
        else
        {
LABEL_261:
          qword_1EE009D68 = v206;
          qword_1EE009D70 = (uint64_t)v3;
          v109 = (uint64_t)qword_1EE009000;
          qword_1EE009D78 = v204;
          v206 = 0;
          v207 = 0;
          v204 = 0;
        }
        break;
      }
      continue;
    }
    break;
  }
LABEL_338:
  icu::UnicodeString::~UnicodeString((void *)v109, (icu::UnicodeString *)v231);
  icu::UnicodeString::~UnicodeString(v184, (icu::UnicodeString *)v232);
  icu::UnicodeString::~UnicodeString(v185, (icu::UnicodeString *)v233);
LABEL_372:
  v4 = (int32x2_t *)v206;
  v3 = (uint64_t *)v207;
  v10 = v203;
  v5 = (int32x2_t *)v204;
LABEL_138:
  v14 = v205;
  v17 = v208;
LABEL_15:
  v21 = (_QWORD *)v209;
  v22 = (_QWORD *)v214;
  v23 = (_QWORD *)v220;
LABEL_16:
  v24 = (_QWORD *)v219;
LABEL_17:
  if (v215)
  {
    ures_close(v215);
    v24 = (_QWORD *)v219;
  }
  if (v24)
    ures_close(v24);
  if (v216)
    ures_close(v216);
  if (v217)
    ures_close(v217);
  if (v218)
    ures_close(v218);
  if (v23)
    ures_close(v23);
  if (v210)
    ures_close(v210);
  if (v211)
    ures_close(v211);
  if (v213)
    ures_close(v213);
  if (v212)
    ures_close(v212);
  if (v22)
    ures_close(v22);
  if (v21)
    ures_close(v21);
  if (v17)
    ures_close(v17);
  if (v14)
    (*(void (**)(icu::UVector *))(*(_QWORD *)v14 + 8))(v14);
  if (v10)
    (*(void (**)(icu::UVector *))(*(_QWORD *)v10 + 8))(v10);
  if (v5)
    uhash_close((void **)v5);
  if (v4)
    uhash_close((void **)v4);
  if (v3)
    uhash_close((void **)v3);
}

uint64_t sub_18BD59FF4(icu::Region *a1)
{
  icu::Region::cleanupRegionData(a1);
  return 1;
}

uint64_t icu::Region::Region(uint64_t this)
{
  *(_QWORD *)this = off_1E2265690;
  *(_QWORD *)(this + 16) = off_1E2256B38;
  *(_WORD *)(this + 24) = 2;
  *(_DWORD *)(this + 80) = -1;
  *(_BYTE *)(this + 8) = 0;
  *(_QWORD *)(this + 84) = 0;
  *(_QWORD *)(this + 100) = 0;
  *(_QWORD *)(this + 92) = 0;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E2265690;
  *(_QWORD *)(this + 16) = off_1E2256B38;
  *(_WORD *)(this + 24) = 2;
  *(_DWORD *)(this + 80) = -1;
  *(_BYTE *)(this + 8) = 0;
  *(_QWORD *)(this + 84) = 0;
  *(_QWORD *)(this + 100) = 0;
  *(_QWORD *)(this + 92) = 0;
  *(_DWORD *)(this + 108) = 0;
  return this;
}

uint64_t icu::Region::cleanupRegionData(icu::Region *this)
{
  uint64_t i;
  uint64_t v2;
  uint64_t result;

  for (i = 0; i != 7; ++i)
  {
    v2 = qword_1EE009D30[i];
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      qword_1EE009D30[i] = 0;
    }
  }
  if (qword_1EE009D78)
    uhash_close((void **)qword_1EE009D78);
  if (qword_1EE009D68)
    uhash_close((void **)qword_1EE009D68);
  if (qword_1EE009D70)
    uhash_close((void **)qword_1EE009D70);
  result = qword_1EE009D28;
  if (qword_1EE009D28)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EE009D28 + 8))(qword_1EE009D28);
    qword_1EE009D28 = 0;
  }
  qword_1EE009D70 = 0;
  qword_1EE009D68 = 0;
  qword_1EE009D78 = 0;
  atomic_store(0, &dword_1EE009D80);
  return result;
}

void icu::Region::~Region(icu::Region *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2265690;
  v2 = *((_QWORD *)this + 12);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 13);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeString::~UnicodeString((icu::Region *)((char *)this + 16));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::Region::~Region(this);
  icu::UMemory::operator delete(v1);
}

BOOL icu::Region::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(unsigned __int16 *)(a1 + 24);
  if ((v2 & 1) != 0)
    return *(_WORD *)(a2 + 24) & 1;
  if ((v2 & 0x8000) != 0)
    v3 = *(_DWORD *)(a1 + 28);
  else
    v3 = v2 >> 5;
  v4 = 0;
  v5 = *(unsigned __int16 *)(a2 + 24);
  if ((v5 & 0x8000u) == 0)
    v6 = v5 >> 5;
  else
    v6 = *(_DWORD *)(a2 + 28);
  if ((v5 & 1) == 0 && v3 == v6)
    return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v3);
  return v4;
}

uint64_t icu::Region::operator!=(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(unsigned __int16 *)(a1 + 24);
  if ((v2 & 1) != 0)
  {
    v4 = *(_WORD *)(a2 + 24) & 1;
  }
  else
  {
    if ((v2 & 0x8000) != 0)
      v3 = *(_DWORD *)(a1 + 28);
    else
      v3 = v2 >> 5;
    v4 = 0;
    v5 = *(unsigned __int16 *)(a2 + 24);
    if ((v5 & 0x8000u) == 0)
      v6 = v5 >> 5;
    else
      v6 = *(_DWORD *)(a2 + 28);
    if ((v5 & 1) == 0 && v3 == v6)
      v4 = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v3);
  }
  return v4 ^ 1u;
}

icu::Region *icu::Region::getInstance(icu::Region *this, icu::Region *a2, UErrorCode *a3)
{
  icu::Region *v3;
  unsigned int v5;
  UErrorCode *v6;
  int v7;
  uint64_t v8;
  uint64_t *PreferredValues;
  uint64_t v10;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v3 = this;
  v5 = atomic_load(&dword_1EE009D80);
  if (v5 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009D80))
  {
    v7 = dword_1EE009D84;
    if (dword_1EE009D84 >= 1)
    {
      v3 = 0;
LABEL_8:
      *(_DWORD *)a2 = v7;
      return v3;
    }
  }
  else
  {
    icu::Region::loadRegionData(a2, v6);
    dword_1EE009D84 = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_1EE009D80);
  }
  if (*(int *)a2 > 0)
    return 0;
  if (!v3)
  {
    v7 = 1;
    goto LABEL_8;
  }
  memset(v12, 0, sizeof(v12));
  icu::UnicodeString::UnicodeString(v12, v3, 0xFFFFFFFFLL, 0);
  v3 = (icu::Region *)uhash_get(qword_1EE009D70, (uint64_t)v12);
  if (v3 || (v3 = (icu::Region *)uhash_get(qword_1EE009D78, (uint64_t)v12)) != 0)
  {
    v8 = *((unsigned int *)v3 + 21);
    if ((_DWORD)v8 == 6)
    {
      v8 = *(unsigned int *)(*((_QWORD *)v3 + 13) + 8);
      if ((_DWORD)v8 == 1)
      {
        PreferredValues = icu::Region::getPreferredValues((unsigned int **)v3, (UErrorCode *)a2);
        (*(void (**)(uint64_t *, icu::Region *))(*PreferredValues + 64))(PreferredValues, a2);
        v10 = (*(uint64_t (**)(uint64_t *, icu::Region *))(*PreferredValues + 56))(PreferredValues, a2);
        v3 = (icu::Region *)uhash_get(qword_1EE009D70, v10);
        (*(void (**)(uint64_t *))(*PreferredValues + 8))(PreferredValues);
      }
    }
  }
  else
  {
    v8 = 1;
    *(_DWORD *)a2 = 1;
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)v12);
  return v3;
}

uint64_t *icu::Region::getPreferredValues(unsigned int **this, UErrorCode *a2)
{
  uint64_t *result;
  unsigned int v5;
  uint64_t *v6;

  if (*(int *)a2 > 0)
    return 0;
  v5 = atomic_load(&dword_1EE009D80);
  if (v5 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009D80))
  {
    if (dword_1EE009D84 >= 1)
    {
      result = 0;
      *a2 = dword_1EE009D84;
      return result;
    }
  }
  else
  {
    icu::Region::loadRegionData((icu::Region *)a2, a2);
    dword_1EE009D84 = *a2;
    icu::umtx_initImplPostInit(&dword_1EE009D80);
  }
  if (*(int *)a2 > 0)
    return 0;
  v6 = (uint64_t *)*((unsigned int *)this + 21);
  if ((_DWORD)v6 != 6)
    return 0;
  result = icu::UMemory::operator new(v6, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result)
    return (uint64_t *)sub_18BD5AD24((uint64_t)result, this[13], a2);
  return result;
}

uint64_t icu::Region::getInstance(icu::Region *this, icu::Region *a2, UErrorCode *a3)
{
  uint64_t v3;
  unsigned int v7;
  UErrorCode *v8;
  int v9;
  void *v10;
  uint64_t *PreferredValues;
  uint64_t v12;
  void (**v13)(icu::UnicodeString *__hidden);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v7 = atomic_load(&dword_1EE009D80);
  if (v7 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009D80))
  {
    v9 = dword_1EE009D84;
    if (dword_1EE009D84 >= 1)
    {
      v3 = 0;
LABEL_9:
      *(_DWORD *)a2 = v9;
      return v3;
    }
  }
  else
  {
    icu::Region::loadRegionData(a2, v8);
    dword_1EE009D84 = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_1EE009D80);
  }
  if (*(int *)a2 > 0)
    return 0;
  v3 = uhash_iget(qword_1EE009D68, this);
  if (!v3)
  {
    v14 = 0u;
    v15 = 0u;
    v17 = 0;
    v16 = 0u;
    v13 = off_1E2256B38;
    LOWORD(v14) = 2;
    icu::ICU_Utility::appendNumber((icu::ICU_Utility *)&v13, this, 0xAu, 1);
    v3 = uhash_get(qword_1EE009D78, (uint64_t)&v13);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v13);
  }
  if (*(int *)a2 > 0)
    return 0;
  if (!v3)
  {
    v9 = 1;
    goto LABEL_9;
  }
  if (*(_DWORD *)(v3 + 84) == 6 && *(_DWORD *)(*(_QWORD *)(v3 + 104) + 8) == 1)
  {
    PreferredValues = icu::Region::getPreferredValues((unsigned int **)v3, (UErrorCode *)a2);
    (*(void (**)(uint64_t *, icu::Region *))(*PreferredValues + 64))(PreferredValues, a2);
    v12 = (*(uint64_t (**)(uint64_t *, icu::Region *))(*PreferredValues + 56))(PreferredValues, a2);
    v3 = uhash_get(qword_1EE009D70, v12);
    (*(void (**)(uint64_t *))(*PreferredValues + 8))(PreferredValues);
  }
  return v3;
}

uint64_t *icu::Region::getAvailable(int a1, icu::Region *a2)
{
  uint64_t *result;
  unsigned int v5;
  uint64_t *v6;

  if (*(int *)a2 > 0)
    return 0;
  v5 = atomic_load(&dword_1EE009D80);
  if (v5 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009D80))
  {
    if (dword_1EE009D84 >= 1)
    {
      result = 0;
      *(_DWORD *)a2 = dword_1EE009D84;
      return result;
    }
  }
  else
  {
    icu::Region::loadRegionData(a2, (UErrorCode *)a2);
    dword_1EE009D84 = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_1EE009D80);
  }
  v6 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v6 > 0)
    return 0;
  result = icu::UMemory::operator new(v6, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result)
    return (uint64_t *)sub_18BD5AD24((uint64_t)result, (unsigned int *)qword_1EE009D30[a1], (UErrorCode *)a2);
  return result;
}

uint64_t icu::Region::getContainingRegion(icu::Region *this)
{
  unsigned int v2;
  UErrorCode *v3;
  int v5;

  v5 = 0;
  v2 = atomic_load(&dword_1EE009D80);
  if (v2 != 2 && icu::umtx_initImplPreInit(&dword_1EE009D80))
  {
    icu::Region::loadRegionData((icu::Region *)&v5, v3);
    dword_1EE009D84 = v5;
    icu::umtx_initImplPostInit(&dword_1EE009D80);
  }
  return *((_QWORD *)this + 11);
}

uint64_t icu::Region::getContainingRegion(uint64_t a1, int a2)
{
  unsigned int v4;
  UErrorCode *v5;
  uint64_t result;
  int v7;

  v7 = 0;
  v4 = atomic_load(&dword_1EE009D80);
  if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009D80))
  {
    if (dword_1EE009D84 >= 1)
      v7 = dword_1EE009D84;
  }
  else
  {
    icu::Region::loadRegionData((icu::Region *)&v7, v5);
    dword_1EE009D84 = v7;
    icu::umtx_initImplPostInit(&dword_1EE009D80);
  }
  result = *(_QWORD *)(a1 + 88);
  if (result)
  {
    if (*(_DWORD *)(result + 84) != a2)
      return icu::Region::getContainingRegion();
  }
  return result;
}

uint64_t *icu::Region::getContainedRegions(unsigned int **this, UErrorCode *a2)
{
  uint64_t *result;
  unsigned int v5;
  uint64_t *v6;

  if (*(int *)a2 > 0)
    return 0;
  v5 = atomic_load(&dword_1EE009D80);
  if (v5 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009D80))
  {
    if (dword_1EE009D84 >= 1)
    {
      result = 0;
      *a2 = dword_1EE009D84;
      return result;
    }
  }
  else
  {
    icu::Region::loadRegionData((icu::Region *)a2, a2);
    dword_1EE009D84 = *a2;
    icu::umtx_initImplPostInit(&dword_1EE009D80);
  }
  v6 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v6 > 0)
    return 0;
  result = icu::UMemory::operator new(v6, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result)
    return (uint64_t *)sub_18BD5AD24((uint64_t)result, this[12], a2);
  return result;
}

uint64_t *icu::Region::getContainedRegions(unsigned int **a1, int a2, icu::Region *a3)
{
  unsigned int v6;
  UErrorCode *v7;
  uint64_t *ContainedRegions;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  icu::Region *v12;
  unint64_t v13;
  UErrorCode *v14;
  uint64_t *v15;
  BOOL v16;
  icu::Region *Instance;
  uint64_t v18;
  uint64_t v19;
  icu::Region *v20;
  UErrorCode *v21;
  icu::Region *v22;
  BOOL v23;
  uint64_t *v24;
  _OWORD v26[2];
  uint64_t v27;

  if (*(int *)a3 <= 0)
  {
    v6 = atomic_load(&dword_1EE009D80);
    if (v6 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009D80))
    {
      if (dword_1EE009D84 >= 1)
        *(_DWORD *)a3 = dword_1EE009D84;
    }
    else
    {
      icu::Region::loadRegionData(a3, v7);
      dword_1EE009D84 = *(_DWORD *)a3;
      icu::umtx_initImplPostInit(&dword_1EE009D80);
    }
  }
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  icu::UVector::UVector((uint64_t)v26, 0, (uint64_t)uhash_compareChars, (int *)a3);
  ContainedRegions = icu::Region::getContainedRegions(a1, (UErrorCode *)a3);
  v9 = ContainedRegions;
  v10 = *(_DWORD *)a3;
  if (ContainedRegions || v10 >= 1)
  {
    if (v10 > 0)
    {
      v11 = 0;
      if (!ContainedRegions)
        goto LABEL_36;
      goto LABEL_35;
    }
    v12 = (icu::Region *)(*(uint64_t (**)(uint64_t *, _QWORD, icu::Region *))(*ContainedRegions + 40))(ContainedRegions, 0, a3);
    v15 = (uint64_t *)*(unsigned int *)a3;
    if (v12)
      v16 = (int)v15 <= 0;
    else
      v16 = 0;
    if (!v16)
    {
LABEL_30:
      v24 = icu::UMemory::operator new(v15, (icu::UMemory *)0x80, v13);
      if (v24)
      {
        v11 = v24;
        sub_18BD5AD24((uint64_t)v24, (unsigned int *)v26, (UErrorCode *)a3);
        if (*(int *)a3 < 1)
        {
LABEL_35:
          (*(void (**)(uint64_t *))(*v9 + 8))(v9);
          goto LABEL_36;
        }
        (*(void (**)(uint64_t *))(*v11 + 8))(v11);
      }
      else if (*(int *)a3 <= 0)
      {
        v11 = 0;
        *(_DWORD *)a3 = 7;
        goto LABEL_35;
      }
      v11 = 0;
      goto LABEL_35;
    }
    while (1)
    {
      Instance = icu::Region::getInstance(v12, a3, v14);
      if (*((_DWORD *)Instance + 21) == a2)
      {
        icu::UVector::addElement((icu::UVector *)v26, (char *)Instance + 16, (UErrorCode *)a3);
      }
      else
      {
        v18 = icu::Region::getContainedRegions();
        v19 = v18;
        if (*(int *)a3 <= 0)
        {
          do
          {
            v20 = (icu::Region *)(*(uint64_t (**)(uint64_t, _QWORD, icu::Region *))(*(_QWORD *)v19 + 40))(v19, 0, a3);
            if (!v20)
              break;
            v22 = icu::Region::getInstance(v20, a3, v21);
            icu::UVector::addElement((icu::UVector *)v26, (char *)v22 + 16, (UErrorCode *)a3);
          }
          while (*(int *)a3 <= 0);
        }
        else if (!v18)
        {
          goto LABEL_26;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
LABEL_26:
      v12 = (icu::Region *)(*(uint64_t (**)(uint64_t *, _QWORD, icu::Region *))(*v9 + 40))(v9, 0, a3);
      v15 = (uint64_t *)*(unsigned int *)a3;
      if (v12)
        v23 = (int)v15 < 1;
      else
        v23 = 0;
      if (!v23)
        goto LABEL_30;
    }
  }
  v11 = 0;
  *(_DWORD *)a3 = 7;
LABEL_36:
  icu::UVector::~UVector((icu::UVector *)v26);
  return v11;
}

uint64_t icu::Region::getType(icu::Region *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t icu::Region::contains(icu::Region *this, const icu::Region *a2)
{
  unsigned int v4;
  UErrorCode *v5;
  uint64_t result;
  icu::UVector *v7;
  signed int v8;
  uint64_t v9;
  icu::Region *v10;
  int v11;

  v11 = 0;
  v4 = atomic_load(&dword_1EE009D80);
  if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009D80))
  {
    if (dword_1EE009D84 >= 1)
      v11 = dword_1EE009D84;
  }
  else
  {
    icu::Region::loadRegionData((icu::Region *)&v11, v5);
    dword_1EE009D84 = v11;
    icu::umtx_initImplPostInit(&dword_1EE009D80);
  }
  result = *((_QWORD *)this + 12);
  if (result)
  {
    if ((icu::UVector::indexOf((icu::UVector *)result, (uint64_t)a2 + 16, 0) & 0x80000000) == 0)
      return 1;
    v7 = (icu::UVector *)*((_QWORD *)this + 12);
    if (*((int *)v7 + 2) >= 1)
    {
      v8 = 0;
      while (1)
      {
        v9 = icu::UVector::elementAt(v7, v8);
        v10 = (icu::Region *)uhash_get(qword_1EE009D70, v9);
        if (v10)
        {
          if (icu::Region::contains(v10, a2))
            break;
        }
        ++v8;
        v7 = (icu::UVector *)*((_QWORD *)this + 12);
        if (v8 >= *((_DWORD *)v7 + 2))
          return 0;
      }
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t icu::Region::getRegionCode(icu::Region *this)
{
  return (uint64_t)this + 8;
}

uint64_t icu::Region::getNumericCode(icu::Region *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t sub_18BD5AD24(uint64_t a1, unsigned int *a2, UErrorCode *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  icu::UVector *v10;
  signed int v11;
  UChar **v12;
  unint64_t v13;
  uint64_t *v14;
  icu::UnicodeString *v15;
  icu::UnicodeString *v16;

  v6 = icu::StringEnumeration::StringEnumeration(a1);
  *(_QWORD *)v6 = off_1E22656B8;
  *(_DWORD *)(v6 + 116) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  if (a2)
  {
    v8 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v8 <= 0)
    {
      v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x28, v7);
      if (v9)
      {
        v10 = (icu::UVector *)v9;
        icu::UVector::UVector(v9, uprv_deleteUObject, uhash_compareUnicodeString, a2[2], a3);
        if (*(int *)a3 > 0)
        {
LABEL_12:
          (*(void (**)(icu::UVector *))(*(_QWORD *)v10 + 8))(v10);
        }
        else
        {
          v11 = 0;
          while (v11 < (int)a2[2])
          {
            v12 = (UChar **)icu::UVector::elementAt((icu::UVector *)a2, v11);
            v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
            v16 = v15;
            if (v15)
            {
              icu::UnicodeString::UnicodeString(v15, v12);
            }
            else if (*(int *)a3 <= 0)
            {
              *a3 = U_MEMORY_ALLOCATION_ERROR;
            }
            icu::UVector::adoptElement(v10, v16, a3);
            ++v11;
            if (*(int *)a3 > 0)
              goto LABEL_12;
          }
          *(_QWORD *)(a1 + 120) = v10;
        }
      }
      else if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return a1;
}

icu::UVector *sub_18BD5AE68(uint64_t a1, int *a2)
{
  icu::UVector *result;

  if (*a2 > 0)
    return 0;
  result = *(icu::UVector **)(a1 + 120);
  if (result)
  {
    result = (icu::UVector *)icu::UVector::elementAt(result, *(_DWORD *)(a1 + 116));
    if (result)
      ++*(_DWORD *)(a1 + 116);
  }
  return result;
}

uint64_t sub_18BD5AEB8(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18BD5AEC0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  else
    return 0;
}

void sub_18BD5AED8(icu::StringEnumeration *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22656B8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18BD5AF18(icu::StringEnumeration *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22656B8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::StringEnumeration::~StringEnumeration(this);
  icu::UMemory::operator delete(v3);
}

void sub_18BD5AF5C(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  icu::SimpleFormatter *v7;
  void *v8;
  icu::SimpleFormatter *v9;
  void *v10;
  icu::SimpleFormatter *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = 0;
  *a1 = off_1E2265750;
  v3 = a1;
  do
  {
    v4 = 0;
    v5 = v3;
    do
    {
      v6 = 0x1FFFFFFFFFFFFFF8;
      do
      {
        v7 = (icu::SimpleFormatter *)v5[v6 + 2171];
        if (v7)
        {
          icu::SimpleFormatter::~SimpleFormatter(v7);
          icu::UMemory::operator delete(v8);
        }
        v9 = (icu::SimpleFormatter *)v5[v6 + 2179];
        if (v9)
        {
          icu::SimpleFormatter::~SimpleFormatter(v9);
          icu::UMemory::operator delete(v10);
        }
        ++v6;
      }
      while (v6 * 8);
      ++v4;
      v5 += 16;
    }
    while (v4 != 15);
    ++v2;
    v3 += 240;
  }
  while (v2 != 3);
  v11 = (icu::SimpleFormatter *)a1[2893];
  if (v11)
  {
    icu::SimpleFormatter::~SimpleFormatter(v11);
    icu::UMemory::operator delete(v12);
  }
  icu::UnicodeString::~UnicodeString((void *)0x5A18, (icu::UnicodeString *)(a1 + 2883));
  v13 = 0;
  v14 = 17240;
  do
  {
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&a1[v13 + 2155]);
    v13 -= 8;
  }
  while (v13 != -2160);
  icu::SharedObject::~SharedObject((icu::SharedObject *)a1);
}

void sub_18BD5B044(_QWORD *a1)
{
  void *v1;

  sub_18BD5AF5C(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD5B058(uint64_t a1, int a2, unsigned int a3, int a4, int a5)
{
  int v5;
  int v6;
  uint64_t v7;

  if (a3 > 6)
    return 0;
LABEL_2:
  v5 = a5;
  v6 = a2;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 1920 * v6 + (qword_18BE2A718[a3] << 7) + ((uint64_t)a4 << 6) + 8 * a5 + 17304);
    if (v7)
      return v7;
    v6 = *(_DWORD *)(a1 + 4 * v6 + 23128);
    if (v6 == -1)
    {
      v7 = 0;
      a5 = 5;
      if (v5 != 5)
        goto LABEL_2;
      return v7;
    }
  }
}

uint64_t sub_18BD5B0CC(uint64_t a1, uint64_t a2, int *a3)
{
  char *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  UChar **v14;
  int v15;
  uint64_t Weekdays;
  uint64_t v17;
  UChar **v18;
  int v19;
  UErrorCode *v21;
  uint64_t *v22;
  icu::CharString *v23;
  icu::CharString *v24;
  uint64_t v25;
  _QWORD *v26;
  icu::CharString *v27;
  icu::CharString *v28;
  _QWORD *v29;
  int v30;
  void *v31;
  signed int v32;
  const UChar *StringByIndex;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  int v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  char *v47;
  int v48;
  char *v49;
  int v50;
  int v51;
  _BYTE v52[224];
  void (**v53)(icu::ResourceSink *__hidden);
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  void *v58[7];
  uint64_t v59;
  const UChar *v60[28];
  __int128 __s;
  __int128 v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = *(char **)(a1 + 56);
  v7 = ures_open(0, v5, a3);
  v8 = 0;
  v9 = (uint64_t *)*a3;
  if ((int)v9 > 0)
    goto LABEL_14;
  v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x5A70, v6);
  if (!v10)
  {
    v8 = 0;
    *a3 = 7;
    goto LABEL_14;
  }
  v11 = (uint64_t)v10;
  v12 = sub_18BD5D89C((uint64_t)v10);
  v53 = &off_1E22658A0;
  v54 = 0uLL;
  *(_QWORD *)&v55 = v12;
  *(_QWORD *)(v12 + 23128) = -1;
  *(_DWORD *)(v12 + 23136) = -1;
  ures_getAllItemsWithFallback((uint64_t)v7, "fields", (uint64_t)&v53, a3);
  if (*a3 >= 1)
  {
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v53);
    v8 = 0;
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_14;
  }
  v37 = v11;
  memset(v60, 0, sizeof(v60));
  icu::Locale::Locale((uint64_t *)v60, (icu::Locale *)v60, v5, 0, 0, 0);
  bzero(v58, 0x4F8uLL);
  icu::DateFormatSymbols::DateFormatSymbols((icu::DateFormatSymbols *)v58, (icu::UnicodeString **)v60, (UErrorCode *)a3);
  if (*a3 <= 0)
  {
    v13 = 0;
    v14 = (UChar **)(v11 + 344);
    do
    {
      v15 = dword_18BE2A69C[v13];
      LODWORD(__s) = 0;
      Weekdays = icu::DateFormatSymbols::getWeekdays(v58, &__s, 1, v15);
      v17 = 64;
      v18 = v14;
      do
      {
        icu::UnicodeString::fastCopyFrom(v18, (UChar **)(Weekdays + v17));
        v18 += 48;
        v17 += 64;
      }
      while (v17 != 512);
      ++v13;
      v14 += 720;
    }
    while (v13 != 3);
  }
  icu::DateFormatSymbols::~DateFormatSymbols((icu::DateFormatSymbols *)v58);
  icu::Locale::~Locale((icu::Locale *)v60);
  v19 = *a3;
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v53);
  if (v19 > 0)
  {
    v8 = 0;
    v11 = v37;
    goto LABEL_13;
  }
  v54 = 0u;
  v57 = 0;
  v56 = 0u;
  v55 = 0u;
  v53 = off_1E2256B38;
  LOWORD(v54) = 2;
  icu::Locale::Locale((icu::Locale *)v52, a1 + 16);
  v8 = v37;
  if (*a3 >= 1)
  {
    icu::Locale::~Locale((icu::Locale *)v52);
LABEL_19:
    v11 = v37;
    v8 = 0;
    goto LABEL_20;
  }
  v63 = 0;
  __s = 0u;
  v62 = 0u;
  icu::Calendar::getCalendarTypeFromLocale((icu::Calendar *)v52, (const icu::Locale *)&__s, (char *)0x20, (UErrorCode *)a3, v21);
  v63 = 0;
  if (*a3 > 0 || !(_BYTE)__s)
  {
    *a3 = 0;
    strcpy((char *)&__s, "gregorian");
  }
  memset(&v58[1], 0, 48);
  v59 = 0;
  v58[0] = (char *)&v58[1] + 5;
  LODWORD(v58[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v49, "calendar/");
  v23 = icu::CharString::append((icu::CharString *)v58, v49, v50, (UErrorCode *)a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v47, (const char *)&__s);
  v24 = icu::CharString::append(v23, v47, v48, (UErrorCode *)a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v45, "/DateTimePatterns%atTime");
  icu::CharString::append(v24, v45, v46, (UErrorCode *)a3);
  v25 = ures_getByKeyWithFallback((uint64_t)v7, (char *)v58[0], 0, (UErrorCode *)a3);
  v26 = (_QWORD *)v25;
  if (*a3 <= 0 && (int)ures_getSize(v25) > 3)
  {
    if (*a3 >= 1)
    {
      v30 = 0;
      v29 = v26;
      goto LABEL_39;
    }
    v32 = 2;
    v29 = v26;
  }
  else
  {
    *a3 = 0;
    LODWORD(v59) = 0;
    *(_BYTE *)v58[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "calendar/");
    v27 = icu::CharString::append((icu::CharString *)v58, v43, v44, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v41, (const char *)&__s);
    v28 = icu::CharString::append(v27, v41, v42, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "/DateTimePatterns");
    icu::CharString::append(v28, v39, v40, (UErrorCode *)a3);
    v29 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v7, (char *)v58[0], 0, (UErrorCode *)a3);
    if (v26)
      ures_close(v26);
    if (*a3 >= 1)
    {
      v30 = 0;
      goto LABEL_39;
    }
    if ((int)ures_getSize((uint64_t)v29) <= 8)
    {
      v38 = "{";
      v30 = 1;
      icu::UnicodeString::UnicodeString(v60, 1, &v38);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v53, (icu::UnicodeString *)v60);
      icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v60);
      goto LABEL_39;
    }
    v32 = 8;
  }
  v51 = 0;
  StringByIndex = ures_getStringByIndex((uint64_t)v29, v32, &v51, a3);
  v30 = 0;
  if (*a3 <= 0)
  {
    v60[0] = StringByIndex;
    v30 = 1;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v53, 1, v60, v51);
  }
LABEL_39:
  if (BYTE4(v58[1]))
    uprv_free(v58[0]);
  if (v29)
    ures_close(v29);
  icu::Locale::~Locale((icu::Locale *)v52);
  if (!v30)
    goto LABEL_19;
  v35 = icu::UMemory::operator new(v22, (icu::UMemory *)0x48, v34);
  v36 = (uint64_t)v35;
  if (v35)
  {
    v35[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)v35 + 8) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v35, (const icu::UnicodeString *)&v53, 2, 2, 1, (UErrorCode *)a3);
  }
  sub_18BD5B6A4(v37, v36);
  v22 = (uint64_t *)*a3;
  if ((int)v22 > 0)
    goto LABEL_19;
  icu::SharedObject::addRef(v37);
  v11 = 0;
LABEL_20:
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v53);
  if (v11)
    goto LABEL_13;
LABEL_14:
  if (v7)
    ures_close(v7);
  return v8;
}

void sub_18BD5B6A4(uint64_t a1, uint64_t a2)
{
  icu::SimpleFormatter *v4;
  void *v5;

  v4 = *(icu::SimpleFormatter **)(a1 + 23144);
  if (v4)
  {
    icu::SimpleFormatter::~SimpleFormatter(v4);
    icu::UMemory::operator delete(v5);
  }
  *(_QWORD *)(a1 + 23144) = a2;
}

void sub_18BD5B6DC(void **a1)
{
  void *v1;

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedRelativeDateTime::FormattedRelativeDateTime(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2265778;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2265778;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::FormattedRelativeDateTime::~FormattedRelativeDateTime(icu::FormattedRelativeDateTime *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2265778;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2265778;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2265778;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::FormattedRelativeDateTime::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::FormattedRelativeDateTime::toString(icu::FormattedRelativeDateTime *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(*((_QWORD *)this + 1));
}

void icu::FormattedRelativeDateTime::toTempString(icu::FormattedRelativeDateTime *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 24))(*((_QWORD *)this + 1));
}

icu::Appendable *icu::FormattedRelativeDateTime::appendTo(icu::FormattedRelativeDateTime *this, icu::Appendable *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return a2;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(_QWORD, icu::Appendable *))(*(_QWORD *)v4 + 32))(*((_QWORD *)this + 1), a2);
}

uint64_t icu::FormattedRelativeDateTime::nextPosition(icu::FormattedRelativeDateTime *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return 0;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0;
  }
  return (*(uint64_t (**)(_QWORD, icu::ConstrainedFieldPosition *))(*(_QWORD *)v4 + 40))(*((_QWORD *)this + 1), a2);
}

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this, UErrorCode *a2)
{
  *(_QWORD *)this = off_1E22657B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x10000000000;
  *((_QWORD *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48));
  icu::RelativeDateTimeFormatter::init(this, 0, 0, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E22657B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x10000000000;
  *((_QWORD *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48));
  icu::RelativeDateTimeFormatter::init(this, 0, 0, a2);
  return this;
}

void icu::RelativeDateTimeFormatter::init(icu::RelativeDateTimeFormatter *this, icu::NumberFormat *a2, icu::BreakIterator *a3, UErrorCode *a4)
{
  char *v8;
  icu::SharedObject *SharedInstance;
  icu::SharedObject *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  icu::SharedObject *v17;
  icu::SharedObject *v18;
  icu::SharedObject *v19;
  _QWORD *v20;

  v8 = (char *)this + 48;
  sub_18BD5CF08((uint64_t)this + 48, (UErrorCode *)this + 2, a4);
  if (*(int *)a4 > 0
    || (SharedInstance = (icu::SharedObject *)icu::PluralRules::createSharedInstance((uint64_t)v8, 0, a4), *(int *)a4 > 0))
  {
LABEL_3:
    if (!a3)
      goto LABEL_5;
    goto LABEL_4;
  }
  v10 = SharedInstance;
  sub_18BC4A244(SharedInstance, (icu::SharedObject **)this + 3);
  icu::SharedObject::removeRef(v10);
  if (a2)
  {
    v13 = icu::UMemory::operator new(v12, (icu::UMemory *)0x20, v11);
    if (!v13)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_3;
    }
    *v13 = (uint64_t)off_1E2263B08;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = (uint64_t)a2;
    sub_18BC4A244((icu::SharedObject *)v13, (icu::SharedObject **)this + 2);
    if (a3)
    {
LABEL_10:
      v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, v14);
      if (v16)
      {
        v17 = (icu::SharedObject *)icu::SharedBreakIterator::SharedBreakIterator(v16, a3);
        sub_18BC4A244(v17, (icu::SharedObject **)this + 5);
        return;
      }
      a2 = 0;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_4:
      (*(void (**)(icu::BreakIterator *))(*(_QWORD *)a3 + 8))(a3);
LABEL_5:
      if (a2)
        (*(void (**)(icu::NumberFormat *))(*(_QWORD *)a2 + 8))(a2);
      return;
    }
  }
  else
  {
    v18 = (icu::SharedObject *)icu::NumberFormat::createSharedInstance((uint64_t)v8, 1, a4);
    if (*(int *)a4 > 0)
      goto LABEL_3;
    v19 = v18;
    sub_18BC4A244(v18, (icu::SharedObject **)this + 2);
    icu::SharedObject::removeRef(v19);
    if (a3)
      goto LABEL_10;
  }
  v20 = (_QWORD *)*((_QWORD *)this + 5);
  if (v20)
  {
    icu::SharedObject::removeRef(v20);
    *((_QWORD *)this + 5) = 0;
  }
}

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(_QWORD *)this = off_1E22657B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x10000000000;
  *((_QWORD *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, 0, 0, a3);
  return this;
}

{
  *(_QWORD *)this = off_1E22657B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x10000000000;
  *((_QWORD *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, 0, 0, a3);
  return this;
}

icu::RelativeDateTimeFormatter *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this, const icu::Locale *a2, icu::NumberFormat *a3, UErrorCode *a4)
{
  *(_QWORD *)this = off_1E22657B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x10000000000;
  *((_QWORD *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, a3, 0, a4);
  return this;
}

{
  *(_QWORD *)this = off_1E22657B8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0x10000000000;
  *((_QWORD *)this + 5) = 0;
  icu::Locale::Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48), (uint64_t)a2);
  icu::RelativeDateTimeFormatter::init(this, a3, 0, a4);
  return this;
}

uint64_t icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(uint64_t a1, char **a2, icu::NumberFormat *a3, unsigned int a4, int a5, const icu::Locale *a6)
{
  UErrorCode *v12;
  UErrorCode *v13;
  char *SentenceInstance;
  icu::BreakIterator *v15;
  icu::RelativeDateTimeFormatter *v16;
  icu::NumberFormat *v17;

  *(_QWORD *)a1 = off_1E22657B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  icu::Locale::Locale((icu::Locale *)(a1 + 48), (uint64_t)a2);
  if (*(int *)a6 <= 0)
  {
    if (a4 < 3 && (a5 & 0xFFFFFF00) == 0x100)
    {
      if (a5 != 258)
      {
        v16 = (icu::RelativeDateTimeFormatter *)a1;
        v17 = a3;
        v15 = 0;
        goto LABEL_10;
      }
      SentenceInstance = icu::BreakIterator::createSentenceInstance(a2, a6, v12, v13);
      if (*(int *)a6 <= 0)
      {
        v15 = (icu::BreakIterator *)SentenceInstance;
        v16 = (icu::RelativeDateTimeFormatter *)a1;
        v17 = a3;
LABEL_10:
        icu::RelativeDateTimeFormatter::init(v16, v17, v15, (UErrorCode *)a6);
      }
    }
    else
    {
      *(_DWORD *)a6 = 1;
    }
  }
  return a1;
}

_QWORD *icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  *a1 = off_1E22657B8;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  icu::Locale::Locale((icu::Locale *)(a1 + 6), a2 + 48);
  icu::SharedObject::addRef(a1[1]);
  icu::SharedObject::addRef(a1[2]);
  icu::SharedObject::addRef(a1[3]);
  v3 = a1[5];
  if (v3)
    icu::SharedObject::addRef(v3);
  return a1;
}

uint64_t icu::RelativeDateTimeFormatter::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_18BC4A244(*(icu::SharedObject **)(a2 + 8), (icu::SharedObject **)(a1 + 8));
    sub_18BC4A244(*(icu::SharedObject **)(a2 + 16), (icu::SharedObject **)(a1 + 16));
    sub_18BC4A244(*(icu::SharedObject **)(a2 + 24), (icu::SharedObject **)(a1 + 24));
    sub_18BC4A244(*(icu::SharedObject **)(a2 + 40), (icu::SharedObject **)(a1 + 40));
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    icu::Locale::operator=((icu::Locale *)(a1 + 48), a2 + 48);
  }
  return a1;
}

void icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter(icu::RelativeDateTimeFormatter *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)this = off_1E22657B8;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
    icu::SharedObject::removeRef(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3)
    icu::SharedObject::removeRef(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  if (v4)
    icu::SharedObject::removeRef(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 5);
  if (v5)
    icu::SharedObject::removeRef(v5);
  icu::Locale::~Locale((icu::RelativeDateTimeFormatter *)((char *)this + 48));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::RelativeDateTimeFormatter::~RelativeDateTimeFormatter(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::RelativeDateTimeFormatter::getNumberFormat(icu::RelativeDateTimeFormatter *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 24);
}

uint64_t icu::RelativeDateTimeFormatter::getCapitalizationContext(icu::RelativeDateTimeFormatter *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t icu::RelativeDateTimeFormatter::getFormatStyle(icu::RelativeDateTimeFormatter *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t icu::RelativeDateTimeFormatter::format(icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, double a6)
{
  return sub_18BD5BFF0(a1, (void (*)(_QWORD *, uint64_t, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatImpl, 0, a4, a5, a2, a3, a6);
}

uint64_t sub_18BD5BFF0(icu::RelativeDateTimeFormatter *a1, void (*a2)(_QWORD *, uint64_t, uint64_t, _OWORD *, int *, double), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, double a8)
{
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  _OWORD v20[4];
  _OWORD v21[19];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  memset(v21, 0, sizeof(v21));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v21, 65);
  *(_QWORD *)&v21[0] = &off_1E2265830;
  v16 = (_QWORD *)((char *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    a2 = *(void (**)(_QWORD *, uint64_t, uint64_t, _OWORD *, int *, double))(*v16 + a2);
  a2(v16, a6, a7, v21, a5, a8);
  if (*a5 <= 0)
  {
    memset(v20, 0, sizeof(v20));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v21 + 8), (uint64_t)v20);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v20);
    if ((SWORD4(v20[0]) & 0x8000u) == 0)
      v17 = WORD4(v20[0]) >> 5;
    else
      v17 = HIDWORD(v20[0]);
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v20, 0, v17);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v20);
  }
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v21);
  return a4;
}

void icu::RelativeDateTimeFormatter::formatImpl(uint64_t a1, int a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6)
{
  icu::FormattedStringBuilder *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _OWORD v17[6];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    if ((a2 & 0xFFFFFFFD) == 1)
    {
      v16 = 0;
      v10 = (icu::FormattedStringBuilder *)(a4 + 8);
      icu::QuantityFormatter::formatAndSelect(*(void **)(*(_QWORD *)(a1 + 16) + 24), *(icu::PluralRules **)(*(_QWORD *)(a1 + 24) + 24), (int *)(a4 + 8), &v16, a5, a6);
      if (*(int *)a5 > 0)
        return;
      v11 = sub_18BD5B058(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 32), a3, a2 == 3, v16);
      if (v11)
      {
        v18 = 0;
        memset(v17, 0, sizeof(v17));
        icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)v17, v11, 64, 0, v12, v13);
        v14 = icu::FormattedStringBuilder::length(v10);
        icu::number::impl::SimpleModifier::formatAsPrefixSuffix((icu::number::impl::SimpleModifier *)v17, v10, 0, v14, a5);
        *(_QWORD *)&v17[0] = off_1E2262FE8;
        icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)((char *)v17 + 8));
        icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v17);
        return;
      }
      v15 = 3;
    }
    else
    {
      v15 = 1;
    }
    *a5 = v15;
  }
}

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  return sub_18BD5C2C8(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatImpl, 0, a4, a2, a3, a5, a6);
}

uint64_t *sub_18BD5C2C8@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  UErrorCode v10;
  void (*v15)(_QWORD *, uint64_t, uint64_t, uint64_t *, UErrorCode *, double);
  uint64_t *v16;
  uint64_t *v17;
  UErrorCode v18;
  _QWORD *v19;

  if (result[5])
  {
    v10 = U_UNSUPPORTED_ERROR;
    goto LABEL_3;
  }
  v15 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t *, UErrorCode *, double))a2;
  v16 = result;
  result = icu::UMemory::operator new(0, (icu::UMemory *)0x130, a2);
  if (!result)
  {
    v10 = *a4;
    if (*(int *)a4 > 0)
      goto LABEL_4;
    v10 = U_MEMORY_ALLOCATION_ERROR;
LABEL_3:
    *a4 = v10;
LABEL_4:
    *(_QWORD *)a7 = off_1E2265778;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = v10;
    return result;
  }
  v17 = result;
  *(_QWORD *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65) = &off_1E2265830;
  v18 = *a4;
  if (*(int *)a4 <= 0)
  {
    v19 = (uint64_t *)((char *)v16 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v15 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, UErrorCode *, double))(*v19 + v15);
    v15(v19, a5, a6, v17, a4, a8);
    result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v17 + 1), a4);
    *(_QWORD *)a7 = off_1E2265778;
    *(_QWORD *)(a7 + 8) = v17;
    *(_DWORD *)(a7 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a7 = off_1E2265778;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = v18;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v17 + 8))(v17);
  }
  return result;
}

uint64_t icu::RelativeDateTimeFormatter::formatNumeric(icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, int *a4, double a5)
{
  return sub_18BD5C420(a1, (void (*)(_QWORD *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatNumericImpl, 0, a3, a4, a2, a5);
}

uint64_t sub_18BD5C420(icu::RelativeDateTimeFormatter *a1, void (*a2)(_QWORD *, uint64_t, _OWORD *, int *, double), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, double a7)
{
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  _OWORD v18[4];
  _OWORD v19[19];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v19, 0, sizeof(v19));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v19, 65);
  *(_QWORD *)&v19[0] = &off_1E2265830;
  v14 = (_QWORD *)((char *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    a2 = *(void (**)(_QWORD *, uint64_t, _OWORD *, int *, double))(*v14 + a2);
  a2(v14, a6, v19, a5, a7);
  if (*a5 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v19 + 8), (uint64_t)v18);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v18);
    if ((SWORD4(v18[0]) & 0x8000u) == 0)
      v15 = WORD4(v18[0]) >> 5;
    else
      v15 = HIDWORD(v18[0]);
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v18, 0, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v18);
  }
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v19);
  return a4;
}

void icu::RelativeDateTimeFormatter::formatNumericImpl(uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4, double a5)
{
  int v7;
  double v9;
  icu::FormattedStringBuilder *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _OWORD v20[6];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    if (a2 >= 0xF)
    {
      v7 = 1;
LABEL_4:
      *a4 = v7;
      return;
    }
    v9 = a5;
    if (a5 < 0.0)
      a5 = -a5;
    v19 = 0;
    v10 = (icu::FormattedStringBuilder *)(a3 + 8);
    icu::QuantityFormatter::formatAndSelect(*(void **)(*(_QWORD *)(a1 + 16) + 24), *(icu::PluralRules **)(*(_QWORD *)(a1 + 24) + 24), (int *)(a3 + 8), &v19, a4, a5);
    if (*(int *)a4 <= 0)
    {
      v13 = *(_QWORD *)(a1 + 8);
      v14 = v19;
      while (2)
      {
        v15 = v14;
        v16 = *(_DWORD *)(a1 + 32);
        do
        {
          v17 = *(_QWORD *)(v13
                          + 1920 * v16
                          + ((unint64_t)a2 << 7)
                          + ((unint64_t)(v9 >= 0.0) << 6)
                          + 8 * v15
                          + 17304);
          if (v17)
          {
            v21 = 0;
            memset(v20, 0, sizeof(v20));
            icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)v20, v17, 64, 0, v11, v12);
            v18 = icu::FormattedStringBuilder::length(v10);
            icu::number::impl::SimpleModifier::formatAsPrefixSuffix((icu::number::impl::SimpleModifier *)v20, v10, 0, v18, a4);
            *(_QWORD *)&v20[0] = off_1E2262FE8;
            icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)((char *)v20 + 8));
            icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v20);
            return;
          }
          v16 = *(_DWORD *)(v13 + 4 * v16 + 23128);
        }
        while (v16 != -1);
        v14 = 5;
        if ((_DWORD)v15 != 5)
          continue;
        break;
      }
      v7 = 3;
      goto LABEL_4;
    }
  }
}

uint64_t *icu::RelativeDateTimeFormatter::formatNumericToValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return sub_18BD5C734(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatNumericImpl, 0, a3, a2, a4, a5);
}

uint64_t *sub_18BD5C734@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  UErrorCode v9;
  void (*v13)(_QWORD *, uint64_t, uint64_t *, UErrorCode *, double);
  uint64_t *v14;
  uint64_t *v15;
  UErrorCode v16;
  _QWORD *v17;

  if (result[5])
  {
    v9 = U_UNSUPPORTED_ERROR;
    goto LABEL_3;
  }
  v13 = (void (*)(_QWORD *, uint64_t, uint64_t *, UErrorCode *, double))a2;
  v14 = result;
  result = icu::UMemory::operator new(0, (icu::UMemory *)0x130, a2);
  if (!result)
  {
    v9 = *a4;
    if (*(int *)a4 > 0)
      goto LABEL_4;
    v9 = U_MEMORY_ALLOCATION_ERROR;
LABEL_3:
    *a4 = v9;
LABEL_4:
    *(_QWORD *)a6 = off_1E2265778;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = v9;
    return result;
  }
  v15 = result;
  *(_QWORD *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65) = &off_1E2265830;
  v16 = *a4;
  if (*(int *)a4 <= 0)
  {
    v17 = (uint64_t *)((char *)v14 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, uint64_t *, UErrorCode *, double))(*v17 + v13);
    v13(v17, a5, v15, a4, a7);
    result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v15 + 1), a4);
    *(_QWORD *)a6 = off_1E2265778;
    *(_QWORD *)(a6 + 8) = v15;
    *(_DWORD *)(a6 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a6 = off_1E2265778;
    *(_QWORD *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 16) = v16;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v15 + 8))(v15);
  }
  return result;
}

uint64_t icu::RelativeDateTimeFormatter::format(icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  return sub_18BD5C880(a1, (void (*)(_QWORD *, uint64_t, uint64_t, _OWORD *, int *))icu::RelativeDateTimeFormatter::formatAbsoluteImpl, 0, a4, a5, a2, a3);
}

uint64_t sub_18BD5C880(icu::RelativeDateTimeFormatter *a1, void (*a2)(_QWORD *, uint64_t, uint64_t, _OWORD *, int *), uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  _OWORD v18[4];
  _OWORD v19[19];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v19, 0, sizeof(v19));
  icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v19, 65);
  *(_QWORD *)&v19[0] = &off_1E2265830;
  v14 = (_QWORD *)((char *)a1 + (a3 >> 1));
  if ((a3 & 1) != 0)
    a2 = *(void (**)(_QWORD *, uint64_t, uint64_t, _OWORD *, int *))(*v14 + a2);
  a2(v14, a6, a7, v19, a5);
  if (*a5 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    icu::FormattedStringBuilder::toUnicodeString((icu::FormattedStringBuilder *)((char *)v19 + 8), (uint64_t)v18);
    icu::RelativeDateTimeFormatter::adjustForContext(a1, (icu::UnicodeString *)v18);
    if ((SWORD4(v18[0]) & 0x8000u) == 0)
      v15 = WORD4(v18[0]) >> 5;
    else
      v15 = HIDWORD(v18[0]);
    a4 = icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v18, 0, v15);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v18);
  }
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl((void **)v19);
  return a4;
}

uint64_t icu::RelativeDateTimeFormatter::formatAbsoluteImpl(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*(int *)a5 <= 0)
  {
    if (a2 <= 5 && a3 <= 0xE && (a2 == 5 || a3 != 11))
    {
      v5 = *(_QWORD *)(result + 8);
      v6 = *(_DWORD *)(result + 32);
      while (*(unsigned __int16 *)(v5 + 5760 * v6 + 384 * a3 + ((unint64_t)a2 << 6) + 32) <= 0x1Fu)
      {
        v6 = *(_DWORD *)(v5 + 4 * v6 + 23128);
        if (v6 == -1)
        {
          v7 = v5 + 23064;
          return icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(a4 + 8), *(_DWORD *)(a4 + 140), v7, 64, 0, a5);
        }
      }
      v7 = v5 + 5760 * v6 + 384 * a3 + ((unint64_t)a2 << 6) + 24;
      return icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(a4 + 8), *(_DWORD *)(a4 + 140), v7, 64, 0, a5);
    }
    else
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  return sub_18BD5CAB8(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatAbsoluteImpl, 0, a4, a2, a3, a5);
}

uint64_t *sub_18BD5CAB8@<X0>(uint64_t *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  UErrorCode v9;
  void (*v13)(_QWORD *, uint64_t, uint64_t, uint64_t *, UErrorCode *);
  uint64_t *v14;
  uint64_t *v15;
  UErrorCode v16;
  _QWORD *v17;

  if (result[5])
  {
    v9 = U_UNSUPPORTED_ERROR;
    goto LABEL_3;
  }
  v13 = (void (*)(_QWORD *, uint64_t, uint64_t, uint64_t *, UErrorCode *))a2;
  v14 = result;
  result = icu::UMemory::operator new(0, (icu::UMemory *)0x130, a2);
  if (!result)
  {
    v9 = *a4;
    if (*(int *)a4 > 0)
      goto LABEL_4;
    v9 = U_MEMORY_ALLOCATION_ERROR;
LABEL_3:
    *a4 = v9;
LABEL_4:
    *(_QWORD *)a7 = off_1E2265778;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = v9;
    return result;
  }
  v15 = result;
  *(_QWORD *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 65) = &off_1E2265830;
  v16 = *a4;
  if (*(int *)a4 <= 0)
  {
    v17 = (uint64_t *)((char *)v14 + (a3 >> 1));
    if ((a3 & 1) != 0)
      v13 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t *, UErrorCode *))(*v17 + v13);
    v13(v17, a5, a6, v15, a4);
    result = (uint64_t *)icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v15 + 1), a4);
    *(_QWORD *)a7 = off_1E2265778;
    *(_QWORD *)(a7 + 8) = v15;
    *(_DWORD *)(a7 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a7 = off_1E2265778;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = v16;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v15 + 8))(v15);
  }
  return result;
}

uint64_t icu::RelativeDateTimeFormatter::format(icu::RelativeDateTimeFormatter *a1, uint64_t a2, uint64_t a3, int *a4, double a5)
{
  return sub_18BD5C420(a1, (void (*)(_QWORD *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatRelativeImpl, 0, a3, a4, a2, a5);
}

void icu::RelativeDateTimeFormatter::formatRelativeImpl(uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4, double a5)
{
  char v10;
  unsigned int v11;
  char v12;
  double v13;
  int v14;
  unsigned int v15;

  if (*(int *)a4 <= 0)
  {
    v10 = 0;
    v11 = 6;
    v12 = 1;
    if (a5 > -2.1 && a5 < 2.1)
    {
      v10 = 0;
      v13 = 0.5;
      if (a5 * 100.0 < 0.0)
        v13 = -0.5;
      v14 = (int)(a5 * 100.0 + v13);
      v12 = 1;
      if (v14 < 0)
      {
        if (v14 == -200)
        {
          v10 = 0;
          v12 = 0;
          v11 = 0;
        }
        else if (v14 == -100)
        {
          v10 = 0;
          v12 = 0;
          v11 = 1;
        }
      }
      else if (v14)
      {
        if (v14 == 100)
        {
          v10 = 0;
          v12 = 0;
          v11 = 3;
        }
        else if (v14 == 200)
        {
          v10 = 0;
          v12 = 0;
          v11 = 4;
        }
      }
      else
      {
        v12 = 0;
        v11 = 2;
        v10 = 1;
      }
    }
    v15 = 10;
    switch(a2)
    {
      case 0u:
        goto LABEL_44;
      case 1u:
        v15 = 12;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 2u:
        v15 = 9;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 3u:
        v15 = 8;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 4u:
        v15 = 7;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 5u:
        v15 = 13;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 6u:
        v15 = 14;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 7u:
        if ((v10 & 1) == 0)
          goto LABEL_46;
        v11 = 5;
        v15 = 11;
LABEL_45:
        icu::RelativeDateTimeFormatter::formatAbsoluteImpl(a1, v11, v15, a3, a4);
        if (!icu::FormattedStringBuilder::length((icu::FormattedStringBuilder *)(a3 + 8)))
LABEL_46:
          icu::RelativeDateTimeFormatter::formatNumericImpl(a1, a2, a3, a4, a5);
        break;
      case 8u:
        v15 = 0;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 9u:
        v15 = 1;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 0xAu:
        v15 = 2;
LABEL_44:
        if ((v12 & 1) == 0)
          goto LABEL_45;
        goto LABEL_46;
      case 0xBu:
        v15 = 3;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 0xCu:
        v15 = 4;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 0xDu:
        v15 = 5;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      case 0xEu:
        v15 = 6;
        if ((v12 & 1) != 0)
          goto LABEL_46;
        goto LABEL_45;
      default:
        goto LABEL_46;
    }
  }
}

uint64_t *icu::RelativeDateTimeFormatter::formatToValue@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  return sub_18BD5C734(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatRelativeImpl, 0, a3, a2, a4, a5);
}

icu::UnicodeString *icu::RelativeDateTimeFormatter::combineDateAndTime(icu::RelativeDateTimeFormatter *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  return icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(*((_QWORD *)this + 1) + 23144), a3, a2, a4, a5);
}

icu::UnicodeString *icu::RelativeDateTimeFormatter::adjustForContext(icu::RelativeDateTimeFormatter *this, icu::UnicodeString *a2)
{
  unsigned int v3;
  int v4;
  unint64_t v5;
  UChar32 v7;

  if (*((_QWORD *)this + 5))
  {
    v3 = *((unsigned __int16 *)a2 + 4);
    v4 = (__int16)v3;
    LODWORD(v5) = v3 >> 5;
    if (v4 >= 0)
      v5 = v5;
    else
      v5 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v5)
    {
      v7 = icu::UnicodeString::char32At((uint64_t *)v5, a2, 0);
      if (u_islower(v7))
      {
        umtx_lock((icu::UMutex *)&unk_1EE009D88);
        icu::UnicodeString::toTitle((const UChar **)a2, *(icu::BreakIterator **)(*((_QWORD *)this + 5) + 24), (icu::RelativeDateTimeFormatter *)((char *)this + 48), 768);
        umtx_unlock((std::mutex **)&unk_1EE009D88);
      }
    }
  }
  return a2;
}

uint64_t icu::RelativeDateTimeFormatter::checkNoAdjustForContext(icu::RelativeDateTimeFormatter *this, UErrorCode *a2)
{
  uint64_t result;

  if (!*((_QWORD *)this + 5))
    return 1;
  result = 0;
  *a2 = U_UNSUPPORTED_ERROR;
  return result;
}

void sub_18BD5CF08(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  uint64_t Instance;
  icu::SharedObject **v7;
  uint64_t (**v8)();
  int v9;
  char v10;
  _QWORD v11[29];

  v11[28] = *MEMORY[0x1E0C80C00];
  Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    v7 = (icu::SharedObject **)Instance;
    v9 = 0;
    v10 = 0;
    v8 = off_1E22658E8;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18BC8C230(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    v8 = off_1E22658E8;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

uint64_t sub_18BD5CFE4(uint64_t a1)
{
  icu::FormattedValue *v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 24) = off_1E2265778;
  v2 = (icu::FormattedValue *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)(a1 + 32) = 0;
  icu::FormattedValue::~FormattedValue(v2);
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 0;
  return a1;
}

uint64_t ureldatefmt_openResult(int *a1, unint64_t a2)
{
  uint64_t result;

  if (*a1 > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)result = 1430672896;
    *(_DWORD *)(result + 16) = 1179796564;
    *(_QWORD *)(result + 24) = off_1E2265778;
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 27;
    *(_QWORD *)(result + 8) = result + 24;
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t ureldatefmt_resultAsValue(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1179796564)
      goto LABEL_8;
    v2 = 3;
  }
  else
  {
    v2 = 1;
  }
  result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1)
    return 0;
  return result;
}

void ureldatefmt_closeResult(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1179796564)
    {
      v1 = (void *)sub_18BD5CFE4(a1);
      icu::UMemory::operator delete(v1);
    }
  }
}

uint64_t ureldatefmt_open(const char *a1, icu::NumberFormat *a2, unsigned int a3, int a4, const icu::Locale *a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v13;
  uint64_t *v14;
  char *v15[29];

  v15[28] = *(char **)MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)*(unsigned int *)a5;
  if ((int)v5 <= 0)
  {
    v13 = icu::UMemory::operator new(v5, (icu::UMemory *)0x110, (unint64_t)a2);
    if (v13)
    {
      v6 = (uint64_t)v13;
      icu::Locale::Locale(v14, (icu::Locale *)v15, a1, 0, 0, 0);
      icu::RelativeDateTimeFormatter::RelativeDateTimeFormatter(v6, v15, a2, a3, a4, a5);
      icu::Locale::~Locale((icu::Locale *)v15);
      if (*(int *)a5 < 1)
        return v6;
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    else if (*(int *)a5 <= 0)
    {
      v6 = 0;
      *(_DWORD *)a5 = 7;
      return v6;
    }
  }
  return 0;
}

uint64_t ureldatefmt_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ureldatefmt_formatNumeric(icu::RelativeDateTimeFormatter *a1, uint64_t a2, char *a3, unsigned int a4, int *a5, double a6)
{
  uint64_t v6;
  UChar **v13;
  UChar *v15;
  UChar *v16;
  void (**v17)(icu::UnicodeString *__hidden);
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (!a3)
  {
    if (!a4)
    {
      v18 = 0u;
      v19 = 0u;
      v21 = 0;
      v20 = 0u;
      v17 = off_1E2256B38;
      LOWORD(v18) = 2;
      goto LABEL_9;
    }
LABEL_7:
    v6 = 0;
    *a5 = 1;
    return v6;
  }
  if ((a4 & 0x80000000) != 0)
    goto LABEL_7;
  v18 = 0u;
  v19 = 0u;
  v21 = 0;
  v20 = 0u;
  v17 = off_1E2256B38;
  LOWORD(v18) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v17, a3, 0, a4);
LABEL_9:
  sub_18BD5C420(a1, (void (*)(_QWORD *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatNumericImpl, 0, (uint64_t)&v17, a5, a2, a6);
  v13 = (UChar **)*a5;
  if ((int)v13 <= 0)
  {
    v16 = (UChar *)a3;
    v6 = icu::UnicodeString::extract((uint64_t)&v17, &v16, a4, a5);
    v15 = v16;
    v13 = &v15;
  }
  else
  {
    v6 = 0;
  }
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17);
  return v6;
}

void ureldatefmt_formatNumericToResult(uint64_t *a1, uint64_t a2, uint64_t a3, UErrorCode *a4, double a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (**v8)(icu::FormattedRelativeDateTime *__hidden);
  uint64_t v9;
  int v10;

  if (*(int *)a4 > 0)
    return;
  v5 = a3;
  if (!a3)
  {
    v6 = 1;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a3 + 16) != 1179796564)
  {
    v6 = 3;
LABEL_6:
    v5 = 0;
    *a4 = v6;
  }
  sub_18BD5C734(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatNumericImpl, 0, a4, a2, (uint64_t)&v8, a5);
  v7 = *(_QWORD *)(v5 + 32);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_QWORD *)(v5 + 32) = v9;
  *(_DWORD *)(v5 + 40) = v10;
  v10 = 27;
  v8 = off_1E2265778;
  v9 = 0;
  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)&v8);
}

uint64_t ureldatefmt_format(icu::RelativeDateTimeFormatter *a1, uint64_t a2, char *a3, unsigned int a4, int *a5, double a6)
{
  uint64_t v6;
  UChar **v13;
  UChar *v15;
  UChar *v16;
  void (**v17)(icu::UnicodeString *__hidden);
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (!a3)
  {
    if (!a4)
    {
      v18 = 0u;
      v19 = 0u;
      v21 = 0;
      v20 = 0u;
      v17 = off_1E2256B38;
      LOWORD(v18) = 2;
      goto LABEL_9;
    }
LABEL_7:
    v6 = 0;
    *a5 = 1;
    return v6;
  }
  if ((a4 & 0x80000000) != 0)
    goto LABEL_7;
  v18 = 0u;
  v19 = 0u;
  v21 = 0;
  v20 = 0u;
  v17 = off_1E2256B38;
  LOWORD(v18) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v17, a3, 0, a4);
LABEL_9:
  sub_18BD5C420(a1, (void (*)(_QWORD *, uint64_t, _OWORD *, int *, double))icu::RelativeDateTimeFormatter::formatRelativeImpl, 0, (uint64_t)&v17, a5, a2, a6);
  v13 = (UChar **)*a5;
  if ((int)v13 <= 0)
  {
    v16 = (UChar *)a3;
    v6 = icu::UnicodeString::extract((uint64_t)&v17, &v16, a4, a5);
    v15 = v16;
    v13 = &v15;
  }
  else
  {
    v6 = 0;
  }
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17);
  return v6;
}

void ureldatefmt_formatToResult(uint64_t *a1, uint64_t a2, uint64_t a3, UErrorCode *a4, double a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  void (**v8)(icu::FormattedRelativeDateTime *__hidden);
  uint64_t v9;
  int v10;

  if (*(int *)a4 > 0)
    return;
  v5 = a3;
  if (!a3)
  {
    v6 = 1;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a3 + 16) != 1179796564)
  {
    v6 = 3;
LABEL_6:
    v5 = 0;
    *a4 = v6;
  }
  sub_18BD5C734(a1, (unint64_t)icu::RelativeDateTimeFormatter::formatRelativeImpl, 0, a4, a2, (uint64_t)&v8, a5);
  v7 = *(_QWORD *)(v5 + 32);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_QWORD *)(v5 + 32) = v9;
  *(_DWORD *)(v5 + 40) = v10;
  v10 = 27;
  v8 = off_1E2265778;
  v9 = 0;
  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)&v8);
}

uint64_t ureldatefmt_combineDateAndTime(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, UChar *a6, uint64_t a7, UErrorCode *a8)
{
  uint64_t v8;
  _QWORD *v15;
  void *v16;
  void *v17;
  _QWORD v19[3];
  UChar *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[4];
  _OWORD v24[4];
  _OWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(int *)a8 > 0)
    return 0;
  if (!a6)
  {
    if (!(_DWORD)a7)
      goto LABEL_13;
    goto LABEL_17;
  }
  if ((a7 & 0x80000000) != 0)
    goto LABEL_17;
  if (a2)
  {
    if (a3 < -1)
      goto LABEL_17;
  }
  else if (a3)
  {
    goto LABEL_17;
  }
  if (!a4)
  {
    if (!a5)
      goto LABEL_13;
LABEL_17:
    v8 = 0;
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
    return v8;
  }
  if (a5 <= -2)
    goto LABEL_17;
LABEL_13:
  memset(v25, 0, sizeof(v25));
  v22 = a2;
  icu::UnicodeString::UnicodeString(v25, a3 == -1, &v22);
  v19[2] = v22;
  memset(v24, 0, sizeof(v24));
  v21 = a4;
  icu::UnicodeString::UnicodeString(v24, a5 == -1, &v21);
  v19[1] = v21;
  memset(v23, 0, sizeof(v23));
  icu::UnicodeString::UnicodeString(v23, a6, 0, a7);
  icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(*(_QWORD *)(a1 + 8) + 23144), (const icu::UnicodeString *)v24, (const icu::UnicodeString *)v25, (icu::UnicodeString *)v23, a8);
  v8 = 0;
  v15 = (_QWORD *)*(unsigned int *)a8;
  if ((int)v15 <= 0)
  {
    v20 = a6;
    v8 = icu::UnicodeString::extract((uint64_t)v23, &v20, a7, (int *)a8);
    v19[0] = v20;
    v15 = v19;
  }
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v23);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v24);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  return v8;
}

uint64_t sub_18BD5D89C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_1E2265750;
  v1 = 24;
  do
  {
    v2 = result + v1;
    *(_QWORD *)v2 = off_1E2256B38;
    *(_WORD *)(v2 + 8) = 2;
    v1 += 64;
  }
  while (v2 + 64 != result + 17304);
  v3 = 0;
  *(_QWORD *)(result + 23064) = off_1E2256B38;
  *(_WORD *)(result + 23072) = 2;
  *(_QWORD *)(result + 23144) = 0;
  v4 = (_OWORD *)(result + 17368);
  do
  {
    v5 = 0;
    v6 = v4;
    do
    {
      v7 = 8;
      v8 = v6;
      do
      {
        *(v8 - 4) = 0uLL;
        *v8++ = 0uLL;
        v7 -= 2;
      }
      while (v7);
      ++v5;
      v6 += 8;
    }
    while (v5 != 15);
    ++v3;
    v4 += 120;
  }
  while (v3 != 3);
  *(_QWORD *)(result + 23128) = -1;
  *(_DWORD *)(result + 23136) = -1;
  return result;
}

void sub_18BD5D96C(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BD5D980(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  int *v5;
  _QWORD *result;
  int v9;
  int v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  icu::UnicodeString *v14;
  int v15;
  _BOOL4 v16;
  __int16 **v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  UChar **v30;
  void *v31;
  char *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  int v37;
  unsigned int v38;
  const char *v39;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  void *v47;
  unsigned int v48;
  char *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  UChar **v55;
  void *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  UChar **v60;
  void *v61;
  UErrorCode *v62;
  uint64_t v63;
  __int16 *v64;
  _QWORD v65[6];
  _OWORD v66[2];
  uint64_t v67;
  char *v68;
  _OWORD v69[2];
  uint64_t v70;
  char *__s1;
  _QWORD v72[6];
  char *v73;
  icu::StandardPlural *v74;
  char *v75;
  int v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  UChar *v80[12];

  v5 = a5;
  v80[9] = *(UChar **)MEMORY[0x1E0C80C00];
  v67 = 0;
  v68 = a2;
  memset(v66, 0, sizeof(v66));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v66, a3, a5);
  if (*v5 <= 0)
  {
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v66, 0, (const char **)&v68, a3);
    if ((_DWORD)result)
    {
      v9 = 0;
      v62 = (UErrorCode *)v5;
      while (1)
      {
        v10 = (*(uint64_t (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3);
        v11 = v68;
        if (v10 != 3)
          break;
        v12 = sub_18BD5E47C(v68);
        memset(v80, 0, 64);
        LODWORD(v72[0]) = 0;
        *(_QWORD *)&v77 = (*(uint64_t (**)(icu::ResourceValue *, _QWORD *, int *))(*(_QWORD *)a3 + 40))(a3, v72, v5);
        icu::UnicodeString::UnicodeString(v80, 1, &v77);
        v65[1] = v77;
        v13 = *v5;
        if ((int)v13 <= 0)
        {
          v14 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v77, v80);
          v15 = WORD4(v77) >> 5;
          if (SWORD4(v77) < 0)
            v15 = HIDWORD(v77);
          v16 = icu::UnicodeString::doEqualsSubstring((uint64_t)v14, v15 - 7, 7, (uint64_t)L"-narrow-short", 0, 7);
          v65[0] = L"-narrow-short";
          v17 = (__int16 **)v65;
          if (v16)
          {
            v18 = 2;
          }
          else
          {
            v23 = WORD4(v77) >> 5;
            if (SWORD4(v77) < 0)
              v23 = HIDWORD(v77);
            v18 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v77, v23 - 6, 6, (uint64_t)L"-short", 0, 6);
            v64 = L"-short";
            v17 = &v64;
          }
          icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v77);
          if (v12 != v18
            && ((v13 = *(_QWORD *)(a1 + 24) + 4 * v12 + 23128, *(_DWORD *)v13 != -1)
              ? (v24 = *(_DWORD *)v13 == v18)
              : (v24 = 1),
                v24))
          {
            *(_DWORD *)v13 = v18;
            v5 = (int *)v62;
          }
          else
          {
            v5 = (int *)v62;
            v13 = 3;
            *v62 = U_INVALID_FORMAT_ERROR;
          }
        }
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v80);
LABEL_60:
        result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v66, ++v9, (const char **)&v68, a3);
        if (!(_DWORD)result)
          return result;
      }
      v19 = sub_18BD5E47C(v68);
      *(_DWORD *)(a1 + 12) = v19;
      v20 = strlen(v11);
      if (v19 == 1)
        v21 = -6;
      else
        v21 = 0;
      if (v19 == 2)
        v21 = -7;
      switch(v21 + v20)
      {
        case 3:
          v22 = 3;
          if (!strncmp(v11, "day", 3uLL))
            goto LABEL_59;
          if (!strncmp(v11, "sun", 3uLL))
          {
            v22 = 8;
          }
          else if (!strncmp(v11, "mon", 3uLL))
          {
            v22 = 9;
          }
          else if (!strncmp(v11, "tue", 3uLL))
          {
            v22 = 10;
          }
          else if (!strncmp(v11, "wed", 3uLL))
          {
            v22 = 11;
          }
          else if (!strncmp(v11, "thu", 3uLL))
          {
            v22 = 12;
          }
          else if (!strncmp(v11, "fri", 3uLL))
          {
            v22 = 13;
          }
          else
          {
            if (strncmp(v11, "sat", 3uLL))
              goto LABEL_36;
            v22 = 14;
          }
          goto LABEL_59;
        case 4:
          if (!strncmp(v11, "hour", 4uLL))
          {
            v22 = 2;
            goto LABEL_59;
          }
          v22 = 4;
          if (!strncmp(v11, "week", 4uLL))
            goto LABEL_59;
          if (!strncmp(v11, "year", 4uLL))
          {
            v22 = 7;
            goto LABEL_59;
          }
          goto LABEL_36;
        case 5:
          v22 = 5;
          if (!strncmp(v11, "month", 5uLL))
            goto LABEL_59;
          goto LABEL_36;
        case 6:
          if (!strncmp(v11, "minute", 6uLL))
          {
            v22 = 1;
          }
          else
          {
            if (strncmp(v11, "second", 6uLL))
            {
LABEL_36:
              *(_DWORD *)(a1 + 16) = -1;
              goto LABEL_60;
            }
            v22 = 0;
          }
LABEL_59:
          *(_DWORD *)(a1 + 16) = v22;
          v70 = 0;
          __s1 = v11;
          memset(v69, 0, sizeof(v69));
          (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v69, a3, v5);
          if (*v5 > 0
            || !icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v69, 0, (const char **)&__s1, a3))
          {
            goto LABEL_60;
          }
          v25 = 0;
          break;
        case 7:
          if (strncmp(v11, "quarter", 7uLL))
            goto LABEL_36;
          v22 = 6;
          goto LABEL_59;
        default:
          goto LABEL_36;
      }
      while (1)
      {
        if (!strcmp(__s1, "dn")
          && !(*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3)
          && *v5 <= 0)
        {
          v27 = sub_18BD5E4F8(*(_DWORD *)(a1 + 16));
          if ((v27 & 0x80000000) == 0)
          {
            v28 = *(_QWORD *)(a1 + 24);
            v29 = *(_DWORD *)(a1 + 12);
            if (*(unsigned __int16 *)(v28 + 5760 * v29 + 384 * v27 + 352) <= 0x1Fu)
            {
              v30 = (UChar **)(v28 + 5760 * v29 + 384 * v27 + 344);
              LODWORD(v72[0]) = 0;
              *(_QWORD *)&v77 = (*(uint64_t (**)(icu::ResourceValue *, _QWORD *, int *))(*(_QWORD *)a3 + 32))(a3, v72, v5);
              icu::UnicodeString::UnicodeString(v80, 1, &v77);
              v65[5] = v77;
              icu::UnicodeString::fastCopyFrom(v30, v80);
              icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v80);
            }
          }
        }
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3) != 2)
          goto LABEL_100;
        v32 = __s1;
        if (!strcmp(__s1, "relative"))
          break;
        if (!strcmp(v32, "relativeTime"))
        {
          v73 = v32;
          memset(v72, 0, 40);
          (*(void (**)(_QWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v72, a3, v5);
          if (*v5 <= 0)
          {
            v33 = sub_18BD5E51C(*(_DWORD *)(a1 + 16));
            if ((v33 & 0x80000000) == 0)
            {
              v34 = v33;
              if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v72, 0, (const char **)&v73, a3))
              {
                v35 = 0;
                v63 = v34;
                do
                {
                  v36 = v73;
                  if (!strcmp(v73, "past"))
                  {
                    v37 = 0;
                  }
                  else
                  {
                    if (strcmp(v36, "future"))
                      goto LABEL_85;
                    v37 = 1;
                  }
                  *(_DWORD *)(a1 + 8) = v37;
                  v74 = (icu::StandardPlural *)v36;
                  v79 = 0;
                  v77 = 0u;
                  v78 = 0u;
                  (*(void (**)(__int128 *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(&v77, a3, v5);
                  if (*v5 <= 0
                    && icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v77, 0, (const char **)&v74, a3))
                  {
                    v38 = 1;
                    while (1)
                    {
                      if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3))
                        goto LABEL_90;
                      v41 = icu::StandardPlural::indexOrNegativeFromString(v74, v39);
                      if ((v41 & 0x80000000) != 0)
                        goto LABEL_90;
                      v43 = *(_QWORD *)(a1 + 24)
                          + 1920 * *(unsigned int *)(a1 + 12)
                          + (v63 << 7)
                          + ((uint64_t)*(int *)(a1 + 8) << 6)
                          + 17304;
                      if (*(_QWORD *)(v43 + 8 * v41))
                        goto LABEL_90;
                      v44 = v41;
                      v45 = icu::UMemory::operator new(0, (icu::UMemory *)0x48, v42);
                      if (!v45)
                        break;
                      v46 = v45;
                      v76 = 0;
                      v5 = (int *)v62;
                      v75 = (char *)(*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v76, v62);
                      icu::UnicodeString::UnicodeString(v80, 1, &v75);
                      v65[4] = v75;
                      v46[1] = (uint64_t)off_1E2256B38;
                      *((_WORD *)v46 + 8) = 2;
                      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v46, (const icu::UnicodeString *)v80, 0, 1, 0, v62);
                      *(_QWORD *)(v43 + 8 * v44) = v46;
                      icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v80);
                      if (!*(_QWORD *)(v43 + 8 * v44))
                        goto LABEL_98;
LABEL_90:
                      if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v77, v38++, (const char **)&v74, a3))goto LABEL_85;
                    }
                    *(_QWORD *)(v43 + 8 * v44) = 0;
                    v5 = (int *)v62;
LABEL_98:
                    *v5 = 7;
                    goto LABEL_90;
                  }
LABEL_85:
                  ++v35;
                }
                while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v72, v35, (const char **)&v73, a3));
              }
            }
          }
        }
LABEL_100:
        if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v69, ++v25, (const char **)&__s1, a3))goto LABEL_60;
      }
      v75 = v32;
      v79 = 0;
      v77 = 0u;
      v78 = 0u;
      (*(void (**)(__int128 *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(&v77, a3, v5);
      if (*v5 > 0
        || !icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v77, 0, (const char **)&v75, a3))
      {
        goto LABEL_100;
      }
      v48 = 1;
      while (1)
      {
        if (!(*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3))
        {
          v50 = v75;
          if (!strcmp(v75, "-2"))
          {
            v51 = 0;
            goto LABEL_117;
          }
          if (!strcmp(v50, "-1"))
          {
            v51 = 1;
            goto LABEL_117;
          }
          if (!strcmp(v50, "0"))
          {
            v51 = 2;
            goto LABEL_117;
          }
          if (!strcmp(v50, "1"))
          {
            v51 = 3;
LABEL_117:
            v52 = *(_DWORD *)(a1 + 16);
            if (sub_18BD5E51C(v52) == 7 && !strcmp(v50, "0"))
            {
              v53 = *(_QWORD *)(a1 + 24);
              v54 = *(_DWORD *)(a1 + 12);
              if (*(unsigned __int16 *)(v53 + 5760 * v54 + 4576) <= 0x1Fu)
              {
                v55 = (UChar **)(v53 + 5760 * v54 + 4568);
                LODWORD(v74) = 0;
                v72[0] = (*(uint64_t (**)(icu::ResourceValue *, icu::StandardPlural **, int *))(*(_QWORD *)a3 + 32))(a3, &v74, v5);
                icu::UnicodeString::UnicodeString(v80, 1, v72);
                v65[3] = v72[0];
                icu::UnicodeString::fastCopyFrom(v55, v80);
                icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v80);
                v52 = *(_DWORD *)(a1 + 16);
              }
            }
            v57 = sub_18BD5E4F8(v52);
            if ((v57 & 0x80000000) == 0)
            {
              v58 = *(_QWORD *)(a1 + 24);
              v59 = *(_DWORD *)(a1 + 12);
              if (*(unsigned __int16 *)(v58 + 5760 * v59 + 384 * v57 + (v51 << 6) + 32) <= 0x1Fu)
              {
                v60 = (UChar **)(v58 + 5760 * v59 + 384 * v57 + (v51 << 6) + 24);
                LODWORD(v74) = 0;
                v72[0] = (*(uint64_t (**)(icu::ResourceValue *, icu::StandardPlural **, int *))(*(_QWORD *)a3 + 32))(a3, &v74, v5);
                icu::UnicodeString::UnicodeString(v80, 1, v72);
                v65[2] = v72[0];
                icu::UnicodeString::fastCopyFrom(v60, v80);
                icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)v80);
              }
            }
            goto LABEL_105;
          }
          if (!strcmp(v50, "2"))
          {
            v51 = 4;
            goto LABEL_117;
          }
        }
LABEL_105:
        if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)&v77, v48++, (const char **)&v75, a3))goto LABEL_100;
      }
    }
  }
  return result;
}

uint64_t sub_18BD5E47C(const char *a1)
{
  int v2;
  int v3;

  v2 = strlen(a1);
  v3 = v2;
  if (v2 < 7)
  {
    if (v2 != 6)
      return 0;
  }
  else if (!strcmp(&a1[v2 - 7], "-narrow"))
  {
    return 2;
  }
  return !strcmp(&a1[v3 - 6], "-short");
}

uint64_t sub_18BD5E4F8(int a1)
{
  if ((a1 - 1) > 0xD)
    return 0xFFFFFFFFLL;
  else
    return dword_18BE2A750[a1 - 1];
}

uint64_t sub_18BD5E51C(unsigned int a1)
{
  if (a1 > 0xE)
    return 0xFFFFFFFFLL;
  else
    return dword_18BE2A788[a1];
}

void sub_18BD5E53C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E22658E8;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18BD5E56C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E22658E8;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BD5E5A0(uint64_t a1)
{
  int v2;
  unsigned int v3;

  v2 = strlen((const char *)((unint64_t)"N3icu25RelativeDateTimeCacheDataE" & 0x7FFFFFFFFFFFFFFFLL));
  v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu25RelativeDateTimeCacheDataE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18BD5E5F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *v4 = (uint64_t)off_1E22658E8;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18BD5E64C(uint64_t a1, char *__dst, int a3)
{
  char *result;

  result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18BD5E684(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = sub_18BC8C418(a1, a2);
  if (result)
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return result;
}

void *icu::RelativeDateFormat::getStaticClassID(icu::RelativeDateFormat *this)
{
  return &unk_1EE009DD8;
}

void *sub_18BD5E6CC()
{
  return &unk_1EE009DD8;
}

uint64_t sub_18BD5E6D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = icu::DateFormat::DateFormat((icu::DateFormat *)a1, (const icu::DateFormat *)a2);
  *v4 = off_1E2265968;
  v4[44] = 0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 45), (UChar **)(a2 + 360));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 424), (UChar **)(a2 + 424));
  *(_QWORD *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a2 + 496);
  icu::Locale::Locale((icu::Locale *)(a1 + 504), a2 + 504);
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a2 + 744);
  *(_QWORD *)(a1 + 752) = 0;
  v6 = *(_QWORD *)(a2 + 352);
  if (v6)
    *(_QWORD *)(a1 + 352) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v7 = *(uint64_t **)(a2 + 488);
  if (v7)
  {
    v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x48, v5);
    v9 = v8;
    if (v8)
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 1), (UChar **)(*(_QWORD *)(a2 + 488) + 8));
    *(_QWORD *)(a1 + 488) = v9;
  }
  v10 = *(unsigned int *)(a1 + 728);
  if ((int)v10 >= 1)
  {
    v11 = uprv_malloc(16 * v10);
    *(_QWORD *)(a1 + 736) = v11;
    memcpy(v11, *(const void **)(a2 + 736), 16 * *(int *)(a1 + 728));
  }
  v12 = *(_QWORD *)(a2 + 752);
  if (v12)
    *(_QWORD *)(a1 + 752) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  return a1;
}

uint64_t sub_18BD5E7E4(uint64_t a1, uint64_t a2, int a3, const icu::Locale *a4, UErrorCode *a5)
{
  _QWORD *v10;
  int v11;
  icu::SimpleDateFormat *DateInstance;
  void *v14;
  icu::SimpleDateFormat *TimeInstance;
  void *v16;
  void *v17;

  v10 = icu::DateFormat::DateFormat((icu::DateFormat *)a1);
  *v10 = off_1E2265968;
  v10[44] = 0;
  v10[45] = off_1E2256B38;
  *((_WORD *)v10 + 184) = 2;
  v10[53] = off_1E2256B38;
  *((_WORD *)v10 + 216) = 2;
  v10[61] = 0;
  *((_DWORD *)v10 + 124) = a3;
  icu::Locale::Locale((icu::Locale *)(v10 + 63), (uint64_t)a4);
  *(_DWORD *)(a1 + 728) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  if (*(int *)a5 > 0)
    return a1;
  if ((a3 - 132) <= 0xFFFFFFFB || (a2 - 4) <= 0xFFFFFFFA)
  {
    v11 = 1;
LABEL_5:
    *a5 = v11;
    return a1;
  }
  DateInstance = icu::DateFormat::createDateInstance(a3 & 0xFFFFFF7F, a4);
  if (!DateInstance)
  {
    *(_QWORD *)(a1 + 352) = 0;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 352) = v14;
  if (!v14)
  {
LABEL_15:
    v11 = 16;
    goto LABEL_5;
  }
  (*(void (**)(void *, uint64_t))(*(_QWORD *)v14 + 240))(v14, a1 + 360);
  if ((_DWORD)a2 != -1)
  {
    TimeInstance = icu::DateFormat::createTimeInstance(a2, a4);
    if (TimeInstance)
    {
      if (v16)
      {
        v17 = v16;
        (*(void (**)(void *, uint64_t))(*(_QWORD *)v16 + 240))(v16, a1 + 424);
        (*(void (**)(void *))(*(_QWORD *)v17 + 8))(v17);
      }
    }
  }
  sub_18BD5E96C((icu::TimeZone *)a1, 0, a4, a5);
  sub_18BD5E9E4(a1, (int *)a5);
  return a1;
}

uint64_t sub_18BD5E96C(icu::TimeZone *a1, icu::Calendar *this, icu::TimeZone *a3, UErrorCode *a4)
{
  uint64_t result;

  if (*(int *)a4 > 0)
    return *((_QWORD *)a1 + 41);
  if (!this)
    this = (icu::Calendar *)icu::TimeZone::createDefault(a1);
  result = icu::Calendar::createInstance(this, a3, a4, a4);
  *((_QWORD *)a1 + 41) = result;
  if (*(int *)a4 >= 1)
    return *((_QWORD *)a1 + 41);
  if (!result)
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

void sub_18BD5E9E4(uint64_t a1, int *a2)
{
  char *BaseName;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int Size;
  unsigned int v10;
  unsigned int v11;
  const UChar *StringByIndex;
  unint64_t v13;
  const UChar *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  void *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  const UChar *v22;
  unsigned int v23;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 504));
  v5 = ures_open(0, BaseName, a2);
  v6 = ures_getByKeyWithFallback((uint64_t)v5, "calendar/gregorian/DateTimePatterns%atTime", 0, (UErrorCode *)a2);
  v7 = (_QWORD *)v6;
  if (*a2 < 1)
  {
    ures_getSize(v6);
    v23 = 0;
    if ((*(_DWORD *)(a1 + 496) & 0xFFFFFF7F) >= 0x84)
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + 496) & 0xFFFFFF7F;
  }
  else
  {
    *a2 = 0;
    v8 = ures_getByKeyWithFallback((uint64_t)v5, "calendar/gregorian/DateTimePatterns", 0, (UErrorCode *)a2);
    if (v7)
      ures_close(v7);
    if (*a2 > 0 || (Size = ures_getSize(v8), Size <= 8))
    {
      v7 = (_QWORD *)v8;
      goto LABEL_22;
    }
    v23 = 0;
    v10 = 8;
    if (Size >= 0xD)
    {
      v11 = *(_DWORD *)(a1 + 496) & 0xFFFFFF7F;
      if (v11 >= 0x84)
        v10 = 8;
      else
        v10 = v11 + 9;
    }
    v7 = (_QWORD *)v8;
  }
  StringByIndex = ures_getStringByIndex((uint64_t)v7, v10, (int *)&v23, a2);
  v14 = StringByIndex;
  v15 = *a2;
  if ((int)v15 <= 0)
  {
    v15 = v23;
    if ((int)v23 >= 3 && !u_strncmp(StringByIndex, (const UChar *)a1_3, 3))
    {
      v15 = 1;
      *(_BYTE *)(a1 + 744) = 1;
    }
  }
  v16 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x48, v13);
  if (v16)
  {
    v17 = v16;
    v22 = v14;
    icu::UnicodeString::UnicodeString(v24, 1, &v22);
    v17[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)v17 + 8) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v17, (const icu::UnicodeString *)v24, 2, 2, 0, (UErrorCode *)a2);
    *(_QWORD *)(a1 + 488) = v17;
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v24);
  }
  else
  {
    *(_QWORD *)(a1 + 488) = 0;
  }
LABEL_22:
  *(_DWORD *)(a1 + 728) = 6;
  v19 = (char *)uprv_malloc(0x60uLL);
  *(_QWORD *)(a1 + 736) = v19;
  v24[1] = v19;
  v25 = 0;
  v20 = *(unsigned int *)(a1 + 728);
  v24[0] = &off_1E2265AA0;
  LODWORD(v25) = v20;
  if ((int)v20 >= 1)
  {
    v21 = v19 + 8;
    do
    {
      *v21 = 0;
      *(v21 - 1) = 0xFFFFFFFF00000000;
      v21 += 2;
      --v20;
    }
    while (v20);
  }
  ures_getAllItemsWithFallback((uint64_t)v5, "fields/day/relative", (uint64_t)v24, a2);
  ures_close(v5);
  if (*a2 >= 1)
    *(_DWORD *)(a1 + 728) = 0;
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v24);
  if (v7)
    ures_close(v7);
}

void sub_18BD5EC80(uint64_t a1)
{
  uint64_t v2;
  icu::SimpleFormatter *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = off_1E2265968;
  v2 = *(_QWORD *)(a1 + 352);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(icu::SimpleFormatter **)(a1 + 488);
  if (v3)
  {
    icu::SimpleFormatter::~SimpleFormatter(v3);
    icu::UMemory::operator delete(v4);
  }
  uprv_free(*(void **)(a1 + 736));
  v5 = *(_QWORD *)(a1 + 752);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  icu::Locale::~Locale((icu::Locale *)(a1 + 504));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 424));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 360));
  icu::DateFormat::~DateFormat((icu::DateFormat *)a1);
}

void sub_18BD5ED08(uint64_t a1)
{
  void *v1;

  sub_18BD5EC80(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BD5ED1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x2F8, a2);
  if (result)
    return (uint64_t *)sub_18BD5E6D8((uint64_t)result, a1);
  return result;
}

BOOL sub_18BD5ED4C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  if (!icu::DateFormat::operator==(a1, a2) || *(_DWORD *)(a1 + 496) != *(_DWORD *)(a2 + 496))
    return 0;
  v4 = *(unsigned __int16 *)(a1 + 368);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 368) & 1) == 0)
      return 0;
  }
  else
  {
    if ((v4 & 0x8000) != 0)
      v5 = *(_DWORD *)(a1 + 372);
    else
      v5 = v4 >> 5;
    v6 = *(unsigned __int16 *)(a2 + 368);
    if ((v6 & 0x8000u) == 0)
      v7 = v6 >> 5;
    else
      v7 = *(_DWORD *)(a2 + 372);
    if ((v6 & 1) != 0
      || v5 != v7
      || !icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 360), (const icu::UnicodeString *)(a2 + 360), v5))
    {
      return 0;
    }
  }
  v8 = *(unsigned __int16 *)(a1 + 432);
  if ((v8 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 432) & 1) != 0)
      return icu::Locale::operator==(a1 + 504, a2 + 504);
  }
  else
  {
    if ((v8 & 0x8000) != 0)
      v9 = *(_DWORD *)(a1 + 436);
    else
      v9 = v8 >> 5;
    v10 = *(unsigned __int16 *)(a2 + 432);
    if ((v10 & 0x8000u) == 0)
      v11 = v10 >> 5;
    else
      v11 = *(_DWORD *)(a2 + 436);
    if ((v10 & 1) == 0
      && v9 == v11
      && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 424), (const icu::UnicodeString *)(a2 + 424), v9))
    {
      return icu::Locale::operator==(a1 + 504, a2 + 504);
    }
  }
  return 0;
}

uint64_t sub_18BD5EE4C(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  UChar32 v18;
  icu::BreakIterator *v19;
  void (*v20)(void);
  UChar **v21;
  int v22;
  int32_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void (*v30)(void);
  uint64_t v31;
  const char *v33;
  const char *v34;
  const __int16 *v35;
  UErrorCode v36;
  _BYTE v37[8];
  unsigned __int16 v38;
  int v39;
  void (**v40)(icu::UnicodeString *__hidden);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  UChar *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  const UChar *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v36 = U_ZERO_ERROR;
  v51 = 0u;
  v54 = 0;
  v53 = 0u;
  v52 = 0u;
  v50 = (const UChar *)off_1E2256B38;
  LOWORD(v51) = 2;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)a1 + 208))(a1, 1, &v36);
  v9 = sub_18BD5F2F8(a2, &v36);
  if (v36 > U_ZERO_ERROR)
    goto LABEL_23;
  if (v9 < -2)
    goto LABEL_23;
  v10 = (v9 + 2);
  if ((int)v10 >= *(_DWORD *)(a1 + 728))
    goto LABEL_23;
  v11 = *(_QWORD *)(a1 + 736);
  if (*(_DWORD *)(v11 + 16 * (v9 + 2)) != v9)
    goto LABEL_23;
  v12 = v11 + 16 * v10;
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
    goto LABEL_23;
  v14 = *(unsigned int *)(v12 + 4);
  icu::UnicodeString::unBogus((uint64_t)&v50);
  if ((v51 & 0x8000u) == 0)
    v15 = (unsigned __int16)v51 >> 5;
  else
    v15 = DWORD1(v51);
  icu::UnicodeString::doReplace((uint64_t)&v50, 0, v15, v13, 0, v14);
  v16 = (unsigned __int16)v51 >> 5;
  if ((v51 & 0x8000u) != 0)
    v16 = DWORD1(v51);
  if (v16 < 1
    || *(unsigned __int16 *)(a1 + 368) < 0x20u
    || (v17 = (uint64_t *)*(unsigned __int16 *)(a1 + 432), v17 >= 0x20)
    && (v17 = *(uint64_t **)(a1 + 488)) != 0
    && (v17 = (uint64_t *)*(unsigned __int8 *)(a1 + 744), !*(_BYTE *)(a1 + 744)))
  {
LABEL_23:
    v20 = *(void (**)(void))(**(_QWORD **)(a1 + 352) + 200);
    goto LABEL_24;
  }
  v18 = icu::UnicodeString::char32At(v17, (icu::UnicodeString *)&v50, 0);
  if (u_islower(v18))
  {
    v19 = *(icu::BreakIterator **)(a1 + 752);
    if (v19)
    {
      if (v8 == 258)
        goto LABEL_50;
      if (v8 != 260)
      {
        if (v8 != 259 || !*(_BYTE *)(a1 + 746))
          goto LABEL_51;
        goto LABEL_50;
      }
      if (*(_BYTE *)(a1 + 747))
LABEL_50:
        icu::UnicodeString::toTitle(&v50, v19, (const icu::Locale *)(a1 + 504), 768);
    }
  }
LABEL_51:
  v20 = *(void (**)(void))(**(_QWORD **)(a1 + 352) + 200);
LABEL_24:
  v20();
  if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
  {
    v30 = *(void (**)(void))(**(_QWORD **)(a1 + 352) + 256);
    goto LABEL_47;
  }
  v21 = (UChar **)(a1 + 360);
  if (*(unsigned __int16 *)(a1 + 432) < 0x20u || !*(_QWORD *)(a1 + 488))
  {
    if ((v51 & 0x8000u) == 0)
      v31 = (unsigned __int16)v51 >> 5;
    else
      v31 = DWORD1(v51);
    if ((int)v31 >= 1)
    {
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v50, 0, v31);
      goto LABEL_48;
    }
    v30 = *(void (**)(void))(**(_QWORD **)(a1 + 352) + 256);
LABEL_47:
    v30();
    (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 352) + 64))(*(_QWORD *)(a1 + 352), a2, a3, a4);
    goto LABEL_48;
  }
  v46 = 0u;
  v49 = 0;
  v48 = 0u;
  v47 = 0u;
  v45 = (UChar *)off_1E2256B38;
  LOWORD(v46) = 2;
  v22 = (unsigned __int16)v51 >> 5;
  if ((v51 & 0x8000u) != 0)
    v22 = DWORD1(v51);
  if (v22 >= 1)
  {
    v35 = L"'";
    icu::UnicodeString::UnicodeString(&v40, 1, &v35);
    v34 = "'";
    icu::UnicodeString::UnicodeString(v37, 1, &v34);
    if ((v51 & 0x8000u) == 0)
      v23 = (unsigned __int16)v51 >> 5;
    else
      v23 = DWORD1(v51);
    if ((v41 & 0x8000u) == 0)
      v24 = (unsigned __int16)v41 >> 5;
    else
      v24 = DWORD1(v41);
    v25 = v38 >> 5;
    if ((v38 & 0x8000u) != 0)
      v25 = v39;
    v21 = (UChar **)&v50;
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v50, 0, v23, (const icu::UnicodeString *)&v40, 0, v24, (const icu::UnicodeString *)v37, 0, v25);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v37);
    v33 = v34;
    icu::UnicodeString::~UnicodeString(&v33, (icu::UnicodeString *)&v40);
    LOWORD(v40) = 39;
    icu::UnicodeString::doReplace((uint64_t)&v50, 0, 0, (uint64_t)&v40, 0, 1);
    LOWORD(v40) = 39;
    icu::UnicodeString::doAppend((uint64_t)&v50, (uint64_t)&v40, 0, 1);
  }
  icu::UnicodeString::copyFrom(&v45, v21, 0);
  v41 = 0u;
  v44 = 0;
  v43 = 0u;
  v42 = 0u;
  v40 = off_1E2256B38;
  LOWORD(v41) = 2;
  icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(a1 + 488), (const icu::UnicodeString *)(a1 + 424), (const icu::UnicodeString *)&v45, (icu::UnicodeString *)&v40, &v36);
  (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden)))(**(_QWORD **)(a1 + 352) + 256))(*(_QWORD *)(a1 + 352), &v40);
  (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 352) + 64))(*(_QWORD *)(a1 + 352), a2, a3, a4);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v40);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v45);
LABEL_48:
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v50);
  return a3;
}

uint64_t sub_18BD5F2F8(_BYTE *a1, UErrorCode *a2)
{
  uint64_t v2;
  _BYTE *v4;
  icu::Calendar *v5;
  double v6;

  if (*(int *)a2 > 0)
    return 0;
  v4 = a1;
  v5 = (icu::Calendar *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 24))(a1);
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)v5, v6, a2);
  LODWORD(v4) = icu::Calendar::get(v4, 0x14u, a2);
  v2 = v4 - icu::Calendar::get(v5, 0x14u, a2);
  if (v5)
    (*(void (**)(icu::Calendar *))(*(_QWORD *)v5 + 8))(v5);
  return v2;
}

void *sub_18BD5F398(uint64_t a1, UChar **a2, uint64_t a3, uint64_t a4)
{
  UErrorCode v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  UErrorCode v14;
  UErrorCode v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  icu::Calendar *v29;
  void *result;
  double v31;
  icu::Calendar *v32;
  double v33;
  void *v34;
  void *v35;
  UErrorCode v36;
  _QWORD v37[3];
  void (**v38)(icu::UnicodeString *__hidden);
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  UErrorCode v43[4];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
  {
    v24 = *(void (**)(void))(**(_QWORD **)(a1 + 352) + 256);
    goto LABEL_39;
  }
  v8 = *(_DWORD *)(a4 + 8);
  if (*(unsigned __int16 *)(a1 + 432) < 0x20u || !*(_QWORD *)(a1 + 488))
  {
    if (*(int *)(a1 + 728) >= 1)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = *(_QWORD *)(a1 + 736) + v25;
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
        {
          v29 = (icu::Calendar *)icu::UnicodeString::doCompare((uint64_t)a2, v8, *(_DWORD *)(v27 + 4), v28, 0, *(_DWORD *)(v27 + 4));
          if (!(_DWORD)v29)
          {
            v43[0] = U_ZERO_ERROR;
            icu::Calendar::getNow(v29);
            icu::Calendar::setTimeInMillis(a3, v31, v43);
            result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, UErrorCode *))(*(_QWORD *)a3 + 56))(a3, 5, *(unsigned int *)(*(_QWORD *)(a1 + 736) + v25), v43);
            if (v43[0] < U_ILLEGAL_ARGUMENT_ERROR)
              *(_DWORD *)(a4 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 736) + v25 + 4) + v8;
            else
              *(_DWORD *)(a4 + 12) = v8;
            return result;
          }
        }
        ++v26;
        v25 += 16;
      }
      while (v26 < *(int *)(a1 + 728));
    }
    v24 = *(void (**)(void))(**(_QWORD **)(a1 + 352) + 256);
LABEL_39:
    v24();
    return (void *)(*(uint64_t (**)(_QWORD, UChar **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 352) + 88))(*(_QWORD *)(a1 + 352), a2, a3, a4);
  }
  v46 = 0u;
  v44 = 0u;
  v45 = 0u;
  *(_OWORD *)v43 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v43, a2);
  v37[2] = 0;
  v37[0] = off_1E225EF78;
  v37[1] = 0xFFFFFFFFLL;
  v36 = U_ZERO_ERROR;
  v9 = *(_DWORD *)(a1 + 728);
  if (v9 < 1)
  {
LABEL_21:
    LODWORD(v17) = 0;
    LODWORD(v18) = 0;
    LODWORD(v19) = 0;
    goto LABEL_22;
  }
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v12 = *(_QWORD *)(a1 + 736) + v10;
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      break;
LABEL_20:
    ++v11;
    v10 += 16;
    if (v11 >= v9)
      goto LABEL_21;
  }
  if (v8 < 0)
  {
    v15 = U_ZERO_ERROR;
    if ((v43[2] & 0x8000) != 0)
      v14 = v43[3];
    else
      v14 = LOWORD(v43[2]) >> 5;
  }
  else if ((v43[2] & 0x8000) != 0)
  {
    v14 = v43[3];
    if (v43[3] >= v8)
      v15 = v8;
    else
      v15 = v43[3];
  }
  else
  {
    v14 = LOWORD(v43[2]) >> 5;
    if (v14 >= v8)
      v15 = v8;
    else
      v15 = LOWORD(v43[2]) >> 5;
  }
  v16 = icu::UnicodeString::indexOf((uint64_t)v43, v13, 0, *(_DWORD *)(v12 + 4), v15, v14 - v15);
  if ((int)v16 < v8)
  {
    v9 = *(_DWORD *)(a1 + 728);
    goto LABEL_20;
  }
  v19 = v16;
  v39 = 0u;
  v42 = 0;
  v41 = 0u;
  v40 = 0u;
  v38 = off_1E2256B38;
  LOWORD(v39) = 2;
  v32 = (icu::Calendar *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  icu::Calendar::getNow(v32);
  icu::Calendar::setTimeInMillis((uint64_t)v32, v33, &v36);
  (*(void (**)(icu::Calendar *, uint64_t, _QWORD, UErrorCode *))(*(_QWORD *)v32 + 56))(v32, 5, *(unsigned int *)(*(_QWORD *)(a1 + 736) + v10), &v36);
  if (v36 > U_ZERO_ERROR)
  {
    *(_DWORD *)(a4 + 12) = v8;
    (*(void (**)(icu::Calendar *))(*(_QWORD *)v32 + 8))(v32);
    goto LABEL_45;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 352) + 256))(*(_QWORD *)(a1 + 352), a1 + 360);
  (*(void (**)(_QWORD, icu::Calendar *, void (***)(icu::UnicodeString *__hidden), _QWORD *))(**(_QWORD **)(a1 + 352) + 64))(*(_QWORD *)(a1 + 352), v32, &v38, v37);
  v18 = *(unsigned int *)(*(_QWORD *)(a1 + 736) + v10 + 4);
  if ((v39 & 0x8000u) == 0)
    v17 = (unsigned __int16)v39 >> 5;
  else
    v17 = DWORD1(v39);
  icu::UnicodeString::doReplace((icu::UnicodeString *)v43, v19, v18, (const icu::UnicodeString *)&v38, 0, v17);
  (*(void (**)(icu::Calendar *))(*(_QWORD *)v32 + 8))(v32);
  icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v38);
LABEL_22:
  v39 = 0u;
  v42 = 0;
  v41 = 0u;
  v40 = 0u;
  v38 = off_1E2256B38;
  LOWORD(v39) = 2;
  icu::SimpleFormatter::format(*(icu::SimpleFormatter **)(a1 + 488), (const icu::UnicodeString *)(a1 + 424), (const icu::UnicodeString *)(a1 + 360), (icu::UnicodeString *)&v38, &v36);
  (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden)))(**(_QWORD **)(a1 + 352) + 256))(*(_QWORD *)(a1 + 352), &v38);
  (*(void (**)(_QWORD, UErrorCode *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 352) + 88))(*(_QWORD *)(a1 + 352), v43, a3, a4);
  v20 = *(_DWORD *)(a4 + 8);
  v21 = *(_DWORD *)(a4 + 12);
  if (v21 >= 0)
    v20 = *(_DWORD *)(a4 + 12);
  if (v20 >= (int)v19)
    v22 = v19;
  else
    v22 = v20;
  if (v20 >= (int)v19 + (int)v17)
    v23 = (v18 - v17 + v20);
  else
    v23 = v22;
  if (v21 < 0)
    *(_DWORD *)(a4 + 8) = v23;
  else
    *(_DWORD *)(a4 + 12) = v23;
LABEL_45:
  icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v38);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v37);
  return icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v43);
}

icu::UnicodeString *sub_18BD5F82C(uint64_t a1, icu::UnicodeString *a2, UErrorCode *a3)
{
  __int16 v4;
  const icu::UnicodeString *v5;
  const icu::UnicodeString *v7;
  icu::SimpleFormatter *v8;
  UChar **v9;

  if (*(int *)a3 <= 0)
  {
    if ((*((_WORD *)a2 + 4) & 1) != 0)
      v4 = 2;
    else
      v4 = *((_WORD *)a2 + 4) & 0x1F;
    *((_WORD *)a2 + 4) = v4;
    v5 = (const icu::UnicodeString *)(a1 + 424);
    if (*(unsigned __int16 *)(a1 + 368) <= 0x1Fu)
    {
      v9 = (UChar **)a2;
    }
    else
    {
      v7 = (const icu::UnicodeString *)(a1 + 360);
      if (*(unsigned __int16 *)(a1 + 432) >= 0x20u)
      {
        v8 = *(icu::SimpleFormatter **)(a1 + 488);
        if (v8)
        {
          icu::SimpleFormatter::format(v8, v5, v7, a2, a3);
          return a2;
        }
      }
      v9 = (UChar **)a2;
      v5 = v7;
    }
    icu::UnicodeString::copyFrom(v9, (UChar **)v5, 0);
  }
  return a2;
}

icu::UnicodeString *sub_18BD5F8C0(uint64_t a1, icu::UnicodeString *this, int *a3)
{
  __int16 v4;

  if (*a3 <= 0)
  {
    if ((*((_WORD *)this + 4) & 1) != 0)
      v4 = 2;
    else
      v4 = *((_WORD *)this + 4) & 0x1F;
    *((_WORD *)this + 4) = v4;
    icu::UnicodeString::copyFrom((UChar **)this, (UChar **)(a1 + 360), 0);
  }
  return this;
}

icu::UnicodeString *sub_18BD5F914(uint64_t a1, icu::UnicodeString *this, int *a3)
{
  __int16 v4;

  if (*a3 <= 0)
  {
    if ((*((_WORD *)this + 4) & 1) != 0)
      v4 = 2;
    else
      v4 = *((_WORD *)this + 4) & 0x1F;
    *((_WORD *)this + 4) = v4;
    icu::UnicodeString::copyFrom((UChar **)this, (UChar **)(a1 + 424), 0);
  }
  return this;
}

icu::UnicodeString *sub_18BD5F968(icu::UnicodeString *result, UChar **a2, UChar **a3, int *a4)
{
  icu::UnicodeString *v5;

  if (*a4 <= 0)
  {
    v5 = result;
    icu::UnicodeString::copyFrom((UChar **)result + 45, a2, 0);
    return icu::UnicodeString::copyFrom((UChar **)v5 + 53, a3, 0);
  }
  return result;
}

uint64_t sub_18BD5F9B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 352) + 272))(*(_QWORD *)(a1 + 352));
}

void sub_18BD5F9C8(uint64_t a1, int a2, int *a3)
{
  UErrorCode *v6;
  UErrorCode *v7;
  char *SentenceInstance;

  icu::DateFormat::setContext(a1, a2, a3);
  if (*a3 <= 0)
  {
    if ((a2 - 259) <= 1 && !*(_BYTE *)(a1 + 745))
    {
      sub_18BD5FA98(a1, (icu::Locale *)(a1 + 504));
      *(_BYTE *)(a1 + 745) = 1;
    }
    if (!*(_QWORD *)(a1 + 752))
    {
      if (a2 != 258)
      {
        if (a2 == 260)
        {
          if (!*(_BYTE *)(a1 + 747))
            return;
        }
        else if (a2 != 259 || !*(_BYTE *)(a1 + 746))
        {
          return;
        }
      }
      *a3 = 0;
      SentenceInstance = icu::BreakIterator::createSentenceInstance((char **)(a1 + 504), (const icu::Locale *)a3, v6, v7);
      *(_QWORD *)(a1 + 752) = SentenceInstance;
      if (*a3 >= 1)
      {
        if (SentenceInstance)
          (*(void (**)(char *))(*(_QWORD *)SentenceInstance + 8))(SentenceInstance);
        *(_QWORD *)(a1 + 752) = 0;
      }
    }
  }
}

void sub_18BD5FA98(uint64_t a1, icu::Locale *a2)
{
  char *BaseName;
  _QWORD *v5;
  int *IntVector;
  int v7;
  int v8[56];
  uint64_t *v9;

  v9 = (uint64_t *)*MEMORY[0x1E0C80C00];
  icu::Locale::Locale(v9, (icu::Locale *)v8, 0, 0, 0, 0);
  BaseName = 0;
  if (!icu::Locale::operator==((uint64_t)a2, (uint64_t)v8))
    BaseName = (char *)icu::Locale::getBaseName(a2);
  icu::Locale::~Locale((icu::Locale *)v8);
  v8[0] = 0;
  v5 = ures_open(0, BaseName, v8);
  ures_getByKeyWithFallback((uint64_t)v5, "contextTransforms/relative", (uint64_t)v5, (UErrorCode *)v8);
  if (v8[0] <= 0)
  {
    if (!v5)
      return;
    v7 = 0;
    IntVector = ures_getIntVector((uint64_t)v5, &v7, v8);
    if (v8[0] <= 0 && IntVector && v7 >= 2)
    {
      *(_BYTE *)(a1 + 746) = *IntVector;
      *(_BYTE *)(a1 + 747) = IntVector[1];
    }
    goto LABEL_11;
  }
  if (v5)
LABEL_11:
    ures_close(v5);
}

void sub_18BD5FBC4(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD5FBD8(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _OWORD v16[2];
  uint64_t v17;
  char *v18;

  v17 = 0;
  v18 = a2;
  memset(v16, 0, sizeof(v16));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, uint64_t))(*(_QWORD *)a3 + 88))(v16, a3, a5);
  v15 = 0;
  result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, 0, (const char **)&v18, a3);
  if ((_DWORD)result)
  {
    v9 = 1;
    do
    {
      v10 = atoi(v18);
      v11 = v10 + 2;
      if ((int)v11 < *(_DWORD *)(a1 + 16))
      {
        v12 = *(_QWORD *)(a1 + 8);
        if (!*(_QWORD *)(v12 + 16 * v11 + 8))
        {
          *(_DWORD *)(v12 + 16 * v11) = v10;
          v13 = (*(uint64_t (**)(icu::ResourceValue *, int *, uint64_t))(*(_QWORD *)a3 + 32))(a3, &v15, a5);
          v14 = *(_QWORD *)(a1 + 8) + 16 * v11;
          *(_QWORD *)(v14 + 8) = v13;
          *(_DWORD *)(v14 + 4) = v15;
        }
      }
      result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, v9++, (const char **)&v18, a3);
    }
    while ((_DWORD)result);
  }
  return result;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, const icu::RegexPattern *a2)
{
  UErrorCode *v4;

  *(_QWORD *)this = off_1E2265AE8;
  v4 = (UErrorCode *)((char *)this + 316);
  *((_DWORD *)this + 79) = 0;
  icu::RegexMatcher::init(this, (UErrorCode *)this + 79);
  if (*((int *)this + 79) <= 0)
  {
    if (a2)
    {
      *((_QWORD *)this + 1) = a2;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_1ECD284E8 + 3832), v4);
    }
    else
    {
      *v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

double icu::RegexMatcher::init(icu::RegexMatcher *this, UErrorCode *a2)
{
  double result;

  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_BYTE *)this + 128) = 0;
  *(_WORD *)((char *)this + 129) = 1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
  *((_WORD *)this + 84) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 264) = xmmword_18BE2A820;
  *((_BYTE *)this + 313) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((UErrorCode *)this + 79) = *a2;
  *((_QWORD *)this + 24) = (char *)this + 200;
  *((_BYTE *)this + 312) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  return result;
}

uint64_t *icu::RegexMatcher::init2(uint64_t *this, UText *a2, UErrorCode *a3)
{
  uint64_t *v3;
  UErrorCode v4;
  uint64_t *v7;
  char *v8;

  v3 = this;
  v4 = *a3;
  if (*(int *)a3 >= 1)
    goto LABEL_2;
  v7 = (uint64_t *)*(unsigned int *)(this[1] + 132);
  if ((int)v7 >= 9)
  {
    this = (uint64_t *)uprv_malloc(8 * (_QWORD)v7);
    v3[24] = (uint64_t)this;
    if (!this)
      goto LABEL_9;
  }
  this = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, (unint64_t)a2);
  if (!this)
  {
    v3[22] = 0;
LABEL_9:
    *((_DWORD *)v3 + 79) = 7;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return this;
  }
  v3[22] = (uint64_t)icu::UVector64::UVector64((icu::UVector64 *)this, a3);
  v8 = (char *)icu::RegexMatcher::reset((icu::RegexMatcher *)v3, a2);
  this = (uint64_t *)icu::RegexMatcher::setStackLimit(v8, 0x7A1200u, a3);
  v4 = *a3;
  if (*(int *)a3 >= 1)
LABEL_2:
    *((_DWORD *)v3 + 79) = v4;
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, UChar **a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  UErrorCode *v10;
  uint64_t *v11;
  UText v13;
  UParseError v14;

  *(_QWORD *)this = off_1E2265AE8;
  icu::RegexMatcher::init(this, a5);
  if (*(int *)a5 <= 0)
  {
    memset(&v14, 0, sizeof(v14));
    v11 = icu::RegexPattern::compile(a2, a4, &v14, a5, v10);
    *((_QWORD *)this + 1) = v11;
    *((_QWORD *)this + 2) = v11;
    memset(&v13, 0, sizeof(v13));
    v13.magic = 878368812;
    v13.sizeOfStruct = 144;
    utext_openConstUnicodeString(&v13, (uint64_t)a3, a5);
    icu::RegexMatcher::init2((uint64_t *)this, &v13, a5);
    utext_close(&v13);
    *((_BYTE *)this + 312) = 1;
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, UText *a2, UText *a3, UText *a4, UErrorCode *a5)
{
  UErrorCode *v10;
  uint64_t *v11;
  UParseError v13;

  *(_QWORD *)this = off_1E2265AE8;
  icu::RegexMatcher::init(this, a5);
  if (*(int *)a5 <= 0)
  {
    memset(&v13, 0, sizeof(v13));
    v11 = icu::RegexPattern::compile(a2, a4, &v13, a5, v10);
    *((_QWORD *)this + 2) = v11;
    if (*(int *)a5 <= 0)
    {
      *((_QWORD *)this + 1) = v11;
      icu::RegexMatcher::init2((uint64_t *)this, a3, a5);
    }
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, UChar **a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  UErrorCode *v8;
  uint64_t *v9;
  UParseError v11;

  *(_QWORD *)this = off_1E2265AE8;
  icu::RegexMatcher::init(this, a4);
  if (*(int *)a4 <= 0)
  {
    memset(&v11, 0, sizeof(v11));
    v9 = icu::RegexPattern::compile(a2, a3, &v11, a4, v8);
    *((_QWORD *)this + 2) = v9;
    if (*(int *)a4 <= 0)
    {
      *((_QWORD *)this + 1) = v9;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_1ECD284E8 + 3832), a4);
    }
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::RegexMatcher(icu::RegexMatcher *this, UText *a2, UText *a3, UErrorCode *a4)
{
  UErrorCode *v8;
  uint64_t *v9;
  UParseError v11;

  *(_QWORD *)this = off_1E2265AE8;
  icu::RegexMatcher::init(this, a4);
  if (*(int *)a4 <= 0)
  {
    memset(&v11, 0, sizeof(v11));
    v9 = icu::RegexPattern::compile(a2, a3, &v11, a4, v8);
    *((_QWORD *)this + 2) = v9;
    if (*(int *)a4 <= 0)
    {
      *((_QWORD *)this + 1) = v9;
      icu::RegexMatcher::init2((uint64_t *)this, *(UText **)(qword_1ECD284E8 + 3832), a4);
    }
  }
  return this;
}

void icu::RegexMatcher::~RegexMatcher(icu::RegexMatcher *this)
{
  uint64_t v2;
  char *v3;
  icu::RegexPattern *v4;
  void *v5;
  uint64_t v6;
  UText *v7;
  UText *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 22);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (char *)*((_QWORD *)this + 24);
  if (v3 != (char *)this + 200)
  {
    uprv_free(v3);
    *((_QWORD *)this + 24) = 0;
  }
  v4 = (icu::RegexPattern *)*((_QWORD *)this + 2);
  if (v4)
  {
    icu::RegexPattern::~RegexPattern(v4);
    icu::UMemory::operator delete(v5);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  v6 = *((_QWORD *)this + 3);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (UText *)*((_QWORD *)this + 4);
  if (v7)
    utext_close(v7);
  v8 = (UText *)*((_QWORD *)this + 5);
  if (v8)
    utext_close(v8);
  v9 = *((_QWORD *)this + 40);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 41);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::RegexMatcher::~RegexMatcher(this);
  icu::UMemory::operator delete(v1);
}

icu::RegexMatcher *icu::RegexMatcher::reset(icu::RegexMatcher *this, UText *a2)
{
  UText *v3;
  UText *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (UText *)*((_QWORD *)this + 4);
  if (v3 == a2)
  {
LABEL_11:
    v9 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = v9;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = v9;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = v9;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = v9;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
    *((_BYTE *)this + 130) = 0;
    *((_WORD *)this + 84) = 0;
    *(_QWORD *)((char *)this + 268) = 0x271000000000;
    *((_BYTE *)this + 312) = 0;
    return this;
  }
  v5 = utext_clone(v3, a2, 0, 1, (UErrorCode *)this + 79);
  *((_QWORD *)this + 4) = v5;
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 184))
    *((_QWORD *)this + 5) = utext_clone(*((UText **)this + 5), v5, 0, 1, (UErrorCode *)this + 79);
  if (*((int *)this + 79) <= 0)
  {
    *((_QWORD *)this + 6) = utext_nativeLength(*((UText **)this + 4));
    v6 = *((_QWORD *)this + 3);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 3) = 0;
    v7 = *((_QWORD *)this + 40);
    if (v7)
      (*(void (**)(uint64_t, UText *, char *))(*(_QWORD *)v7 + 64))(v7, a2, (char *)this + 316);
    v8 = *((_QWORD *)this + 41);
    if (v8)
      (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)v8 + 64))(v8, *((_QWORD *)this + 4), (char *)this + 316);
    goto LABEL_11;
  }
  return this;
}

char *icu::RegexMatcher::setStackLimit(char *this, unsigned int a2, UErrorCode *a3)
{
  _DWORD *v3;
  UErrorCode v4;
  uint64_t v6;
  int v7;

  if (*(int *)a3 <= 0)
  {
    v3 = this;
    v4 = *((_DWORD *)this + 79);
    if (v4 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
LABEL_3:
      *a3 = v4;
      return this;
    }
    if ((a2 & 0x80000000) != 0)
    {
      v4 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_3;
    }
    v6 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = v6;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = v6;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = v6;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = v6;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *(_OWORD *)(this + 152) = xmmword_18BE2A810;
    this[130] = 0;
    *((_WORD *)this + 84) = 0;
    *(_QWORD *)(this + 268) = 0x271000000000;
    if (a2)
    {
      if ((signed int)(a2 >> 2) <= *(_DWORD *)(*((_QWORD *)this + 1) + 128))
        v7 = *(_DWORD *)(*((_QWORD *)this + 1) + 128);
      else
        v7 = a2 >> 2;
    }
    else
    {
      v7 = 0;
    }
    this = (char *)icu::UVector64::setMaxCapacity(*((void **)this + 22), v7);
    v3[69] = a2;
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::appendReplacement(icu::RegexMatcher *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *status)
{
  UText v8;
  UText ut;

  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  utext_openConstUnicodeString(&ut, (uint64_t)a3, status);
  if (*(int *)status <= 0)
  {
    memset(&v8, 0, sizeof(v8));
    v8.magic = 878368812;
    v8.sizeOfStruct = 144;
    utext_openUnicodeString(&v8, (uint64_t)a2, status);
    if (*(int *)status <= 0)
    {
      icu::RegexMatcher::appendReplacement(this, &v8, &ut, status);
      utext_close(&v8);
    }
    utext_close(&ut);
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::appendReplacement(icu::RegexMatcher *this, UText *ut, UText *a3, UErrorCode *a4)
{
  UErrorCode v6;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  UText *v13;
  uint64_t v14;
  int32_t v15;
  UChar *v16;
  UChar *v17;
  int64_t chunkNativeStart;
  int64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  UText *v24;
  int64_t v25;
  int64_t v26;
  int32_t v27;
  UChar32 v28;
  _QWORD *v29;
  int v30;
  UChar32 v31;
  UChar32 v32;
  int v33;
  int v34;
  uint64_t chunkOffset;
  unsigned int v36;
  int v37;
  uint64_t v38;
  UText *v39;
  int64_t v40;
  int64_t v41;
  int32_t v42;
  uint64_t v43;
  int32_t v44;
  BOOL v45;
  int32_t v46;
  uint64_t v47;
  uint64_t v48;
  UChar replacementText[2];
  int32_t offset;
  UErrorCode status[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    v6 = *((_DWORD *)this + 79);
    if (v6 > U_ZERO_ERROR)
    {
LABEL_3:
      *a4 = v6;
      return this;
    }
    if (!*((_BYTE *)this + 130))
    {
      v6 = U_REGEX_INVALID_STATE;
      goto LABEL_3;
    }
    v10 = utext_nativeLength(ut);
    v11 = *((_QWORD *)this + 17);
    v12 = *((_QWORD *)this + 20);
    if (v11 > v12)
    {
      v13 = (UText *)*((_QWORD *)this + 4);
      if (!v13->chunkNativeStart
        && (v14 = *((_QWORD *)this + 6), v14 == v13->chunkNativeLimit)
        && v14 == v13->nativeIndexingLimit)
      {
        v10 += utext_replace(ut, v10, v10, &v13->chunkContents[v12], v11 - v12, a4);
      }
      else
      {
        if (v13->pFuncs->mapNativeIndexToUTF16)
        {
          status[0] = U_ZERO_ERROR;
          v15 = utext_extract(v13, v12, v11, 0, 0, status);
        }
        else
        {
          v15 = v11 - v12;
        }
        v16 = (UChar *)uprv_malloc(2 * (v15 + 1));
        if (!v16)
        {
          v6 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_3;
        }
        v17 = v16;
        utext_extract(*((UText **)this + 4), *((_QWORD *)this + 20), *((_QWORD *)this + 17), v16, v15 + 1, a4);
        v10 += utext_replace(ut, v10, v10, v17, v15, a4);
        uprv_free(v17);
      }
    }
    *((_QWORD *)this + 20) = *((_QWORD *)this + 18);
    chunkNativeStart = a3->chunkNativeStart;
    if (chunkNativeStart > 0
      || (v19 = -chunkNativeStart, v19 >= a3->nativeIndexingLimit)
      || a3->chunkContents[v19] >> 10 > 0x36u)
    {
      utext_setNativeIndex(a3, 0);
      LODWORD(v19) = a3->chunkOffset;
    }
    else
    {
      a3->chunkOffset = v19;
    }
    if ((int)v19 >= a3->chunkLength || (v20 = a3->chunkContents[(int)v19], v20 >> 11 > 0x1A))
      v20 = utext_next32(a3);
    else
      a3->chunkOffset = v19 + 1;
    while (*(int *)a4 <= 0 && v20 != -1)
    {
      if (v20 == 36)
      {
        v28 = utext_current32(a3);
        if (v28 == 123)
        {
          v55 = 0;
          v53 = 0u;
          v54 = 0u;
          v52 = 0u;
          *(_QWORD *)status = off_1E2256B38;
          LOWORD(v52) = 2;
          utext_next32(a3);
          v29 = (_QWORD *)*(unsigned int *)a4;
          if ((int)v29 > 0)
          {
            v30 = 0;
            goto LABEL_40;
          }
          while (2)
          {
            v31 = utext_next32(a3);
            v32 = v31;
            if (v31 == -1)
            {
LABEL_45:
              *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
            }
            else
            {
              if ((v31 - 49) >= 9)
              {
                v29 = (_QWORD *)((v31 & 0xFFFFFFDF) - 65);
                if (v29 > 0x19)
                {
                  if (v31 == 125)
                  {
                    v29 = (_QWORD *)*((_QWORD *)this + 1);
                    v47 = v29[24];
                    if (!v47 || (v30 = uhash_geti(v47, (uint64_t)status)) == 0)
                    {
                      v30 = 0;
                      *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
                    }
LABEL_40:
                    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)status);
                    goto LABEL_88;
                  }
                  goto LABEL_45;
                }
              }
              icu::UnicodeString::append((uint64_t)status, v31);
            }
            v30 = 0;
            if (v32 == 125)
              goto LABEL_40;
            v29 = (_QWORD *)*(unsigned int *)a4;
            if ((int)v29 >= 1)
              goto LABEL_40;
            continue;
          }
        }
        if (u_isdigit(v28))
        {
          v33 = 0;
          v30 = 0;
          v34 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 136) + 8);
          while (1)
          {
            chunkOffset = a3->chunkOffset;
            if ((int)chunkOffset >= a3->chunkLength || (v36 = a3->chunkContents[chunkOffset], v36 >> 11 > 0x1A))
            {
              v36 = utext_current32(a3);
              if (v36 == -1)
                goto LABEL_88;
            }
            if (!u_isdigit(v36))
              goto LABEL_88;
            v37 = u_charDigitValue(v36) + 10 * v30;
            if (v37 > v34)
              break;
            v38 = a3->chunkOffset;
            if ((int)v38 >= a3->chunkLength || a3->chunkContents[v38] >> 11 > 0x1Au)
              utext_next32(a3);
            else
              a3->chunkOffset = v38 + 1;
            --v33;
            v30 = v37;
          }
          if (v33)
          {
LABEL_88:
            if (*(int *)a4 <= 0)
              v10 += icu::RegexMatcher::appendGroup(this, v30, ut, a4);
          }
          else
          {
            *a4 = U_INDEX_OUTOFBOUNDS_ERROR;
          }
        }
        else
        {
          *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
        }
      }
      else
      {
        if (v20 != 92)
        {
          if (!HIWORD(v20))
          {
            LOWORD(status[0]) = v20;
            goto LABEL_72;
          }
          LOWORD(status[0]) = (v20 >> 10) - 10304;
          HIWORD(status[0]) = v20 & 0x3FF | 0xDC00;
LABEL_65:
          v39 = ut;
          v40 = v10;
          v41 = v10;
          v42 = 2;
LABEL_73:
          v10 += utext_replace(v39, v40, v41, (const UChar *)status, v42, a4);
          goto LABEL_95;
        }
        v21 = a3->chunkOffset;
        if ((int)v21 >= a3->chunkLength || (v22 = a3->chunkContents[v21], v22 >> 11 > 0x1A))
        {
          v22 = utext_current32(a3);
          if (v22 == -1)
            return this;
        }
        if ((v22 & 0xFFFFFFDF) == 0x55)
        {
          offset = 0;
          *(_QWORD *)status = a3;
          *(_QWORD *)&v52 = 0xFFFFFFFFLL;
          v23 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18BD582D0, &offset, 0x7FFFFFFF, status);
          if (v23 != -1)
          {
            if (!HIWORD(v23))
            {
              replacementText[0] = v23;
              v24 = ut;
              v25 = v10;
              v26 = v10;
              v27 = 1;
              goto LABEL_80;
            }
            replacementText[0] = (v23 >> 10) - 10304;
            replacementText[1] = v23 & 0x3FF | 0xDC00;
            if (*(int *)a4 <= 0)
            {
              v24 = ut;
              v25 = v10;
              v26 = v10;
              v27 = 2;
LABEL_80:
              v10 += utext_replace(v24, v25, v26, replacementText, v27, a4);
            }
            if ((_DWORD)v52 == offset)
            {
              v44 = a3->chunkOffset;
              v45 = __OFSUB__(v44, 1);
              v46 = v44 - 1;
              if (v46 < 0 != v45 || a3->chunkContents[v46] >> 11 > 0x1Au)
                utext_previous32(a3);
              else
                a3->chunkOffset = v46;
            }
            else if ((_DWORD)v52 != offset - 1)
            {
              utext_moveIndex32(a3, offset + ~(_DWORD)v52);
            }
          }
        }
        else
        {
          v43 = a3->chunkOffset;
          if ((int)v43 >= a3->chunkLength || a3->chunkContents[v43] >> 11 > 0x1Au)
            utext_next32(a3);
          else
            a3->chunkOffset = v43 + 1;
          if (!HIWORD(v22))
          {
            LOWORD(status[0]) = v22;
LABEL_72:
            v39 = ut;
            v40 = v10;
            v41 = v10;
            v42 = 1;
            goto LABEL_73;
          }
          LOWORD(status[0]) = (v22 >> 10) - 10304;
          HIWORD(status[0]) = v22 & 0x3FF | 0xDC00;
          if (*(int *)a4 <= 0)
            goto LABEL_65;
        }
      }
LABEL_95:
      v48 = a3->chunkOffset;
      if ((int)v48 >= a3->chunkLength || (v20 = a3->chunkContents[v48], v20 >> 11 > 0x1A))
        v20 = utext_next32(a3);
      else
        a3->chunkOffset = v48 + 1;
    }
  }
  return this;
}

uint64_t icu::RegexMatcher::appendGroup(icu::RegexMatcher *this, int a2, UText *ut, UErrorCode *a4)
{
  uint64_t v4;
  UErrorCode v7;
  int64_t v10;
  uint64_t v11;
  int v12;
  UErrorCode v13;
  UText *v14;
  int64_t v15;
  int64_t v16;
  const UChar *v17;
  int32_t v18;
  int v20;
  int64_t *v21;
  int64_t *v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  UText *v26;
  uint64_t v27;
  int32_t v28;
  UChar *v29;
  UChar *v30;
  UErrorCode status;

  if (*(int *)a4 <= 0)
  {
    v7 = *((_DWORD *)this + 79);
    if (v7 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      v4 = 0;
LABEL_5:
      *a4 = v7;
      return v4;
    }
    v10 = utext_nativeLength(ut);
    if (*((_BYTE *)this + 130))
    {
      if ((a2 & 0x80000000) == 0)
      {
        v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 136);
        v12 = *(_DWORD *)(v11 + 8);
        if (v12 >= a2)
        {
          if (a2)
          {
            if (v12 < 1)
              v20 = 0;
            else
              v20 = *(_DWORD *)(*(_QWORD *)(v11 + 24) + 4 * (a2 - 1));
            v23 = *((_QWORD *)this + 23) + 8 * v20;
            v21 = (int64_t *)(v23 + 16);
            v22 = (int64_t *)(v23 + 24);
          }
          else
          {
            v21 = (int64_t *)((char *)this + 136);
            v22 = (int64_t *)((char *)this + 144);
          }
          v24 = *v21;
          if ((*v21 & 0x8000000000000000) == 0)
          {
            v25 = *v22;
            v26 = (UText *)*((_QWORD *)this + 4);
            if (v26->chunkNativeStart
              || (v27 = *((_QWORD *)this + 6), v27 != v26->chunkNativeLimit)
              || v27 != v26->nativeIndexingLimit)
            {
              if (v26->pFuncs->mapNativeIndexToUTF16)
              {
                status = U_ZERO_ERROR;
                v28 = utext_extract(v26, v24, v25, 0, 0, &status);
              }
              else
              {
                v28 = v25 - v24;
              }
              v29 = (UChar *)uprv_malloc(2 * (v28 + 1));
              if (v29)
              {
                v30 = v29;
                utext_extract(*((UText **)this + 4), v24, v25, v29, v28 + 1, a4);
                v4 = utext_replace(ut, v10, v10, v30, v28, a4);
                uprv_free(v30);
                return v4;
              }
              v4 = 0;
              v7 = U_MEMORY_ALLOCATION_ERROR;
              goto LABEL_5;
            }
            v17 = &v26->chunkContents[v24];
            v18 = v25 - v24;
            v14 = ut;
            v15 = v10;
            v16 = v10;
            return utext_replace(v14, v15, v16, v17, v18, a4);
          }
LABEL_12:
          v14 = ut;
          v15 = v10;
          v16 = v10;
          v17 = 0;
          v18 = 0;
          return utext_replace(v14, v15, v16, v17, v18, a4);
        }
      }
      v13 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else
    {
      v13 = U_REGEX_INVALID_STATE;
    }
    *a4 = v13;
    goto LABEL_12;
  }
  return 0;
}

icu::UnicodeString *icu::RegexMatcher::appendTail(icu::RegexMatcher *this, icu::UnicodeString *a2)
{
  UText v5;
  UErrorCode status;

  status = U_ZERO_ERROR;
  memset(&v5, 0, sizeof(v5));
  v5.magic = 878368812;
  v5.sizeOfStruct = 144;
  utext_openUnicodeString(&v5, (uint64_t)a2, &status);
  if (status <= U_ZERO_ERROR)
  {
    icu::RegexMatcher::appendTail(this, &v5, &status);
    utext_close(&v5);
  }
  return a2;
}

UText *icu::RegexMatcher::appendTail(icu::RegexMatcher *this, UText *ut, UErrorCode *status)
{
  UErrorCode v6;
  int64_t v7;
  int64_t v8;
  UText *v9;
  int64_t v10;
  int32_t v11;
  UChar *v12;
  UChar *v13;
  int64_t v14;

  if (*(int *)status <= 0)
  {
    v6 = *((_DWORD *)this + 79);
    if (v6 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      v7 = *((_QWORD *)this + 6);
      v8 = *((_QWORD *)this + 20);
      if (v7 > v8)
      {
        v9 = (UText *)*((_QWORD *)this + 4);
        if (!v9->chunkNativeStart && v7 == v9->chunkNativeLimit && v7 == v9->nativeIndexingLimit)
        {
          v10 = utext_nativeLength(ut);
          utext_replace(ut, v10, v10, (const UChar *)(*(_QWORD *)(*((_QWORD *)this + 4) + 48) + 2 * *((_QWORD *)this + 20)), *((_DWORD *)this + 12) - *((_QWORD *)this + 20), status);
        }
        else
        {
          if (v9->pFuncs->mapNativeIndexToUTF16)
          {
            v11 = utext_extract(v9, v8, v7, 0, 0, status);
            *status = U_ZERO_ERROR;
          }
          else
          {
            v11 = v7 - v8;
          }
          v12 = (UChar *)uprv_malloc(2 * v11);
          if (v12)
          {
            v13 = v12;
            utext_extract(*((UText **)this + 4), *((_QWORD *)this + 20), *((_QWORD *)this + 6), v12, v11, status);
            v14 = utext_nativeLength(ut);
            utext_replace(ut, v14, v14, v13, v11, status);
            uprv_free(v13);
          }
          else
          {
            *((_DWORD *)this + 79) = 7;
          }
        }
      }
    }
    else
    {
      *status = v6;
    }
  }
  return ut;
}

uint64_t icu::RegexMatcher::end(icu::RegexMatcher *this, UErrorCode *a2)
{
  UErrorCode v3;

  if (*(int *)a2 <= 0)
  {
    if (*((_BYTE *)this + 130))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 136) + 8) & 0x80000000) == 0)
        return *((unsigned int *)this + 36);
      v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else
    {
      v3 = U_REGEX_INVALID_STATE;
    }
    *a2 = v3;
  }
  return 0xFFFFFFFFLL;
}

uint64_t icu::RegexMatcher::end(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  return icu::RegexMatcher::end64(this, a2, a3);
}

uint64_t icu::RegexMatcher::end64(icu::RegexMatcher *this, UErrorCode *a2)
{
  UErrorCode v3;

  if (*(int *)a2 <= 0)
  {
    if (*((_BYTE *)this + 130))
    {
      if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 136) + 8) & 0x80000000) == 0)
        return *((_QWORD *)this + 18);
      v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else
    {
      v3 = U_REGEX_INVALID_STATE;
    }
    *a2 = v3;
  }
  return -1;
}

uint64_t icu::RegexMatcher::end64(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  uint64_t v3;
  int v4;
  UErrorCode v5;
  uint64_t v7;
  char *v8;

  if (*(int *)a3 > 0)
    return -1;
  if (!*((_BYTE *)this + 130))
  {
    v5 = U_REGEX_INVALID_STATE;
    goto LABEL_7;
  }
  if (a2 < 0 || (v3 = *(_QWORD *)(*((_QWORD *)this + 1) + 136), v4 = *(_DWORD *)(v3 + 8), v4 < a2))
  {
    v5 = U_INDEX_OUTOFBOUNDS_ERROR;
LABEL_7:
    *a3 = v5;
    return -1;
  }
  if (a2)
  {
    if (v4 < 1)
      v7 = 1;
    else
      v7 = *(int *)(*(_QWORD *)(v3 + 24) + 4 * (a2 - 1)) + 1;
    v8 = (char *)(*((_QWORD *)this + 23) + 8 * v7 + 16);
  }
  else
  {
    v8 = (char *)this + 144;
  }
  return *(_QWORD *)v8;
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this)
{
  UErrorCode v2;

  if (*((int *)this + 79) > 0)
    return 0;
  v2 = U_ZERO_ERROR;
  return icu::RegexMatcher::find(this, &v2);
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this, UErrorCode *a2)
{
  char v2;
  UErrorCode v5;
  UText *v6;
  int64_t chunkNativeStart;
  uint64_t v8;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  int32_t chunkOffset;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int64_t v17;
  int v18;
  uint64_t v19;
  UText *v20;
  uint64_t v21;
  unsigned int v22;
  int32_t v23;
  int64_t v24;
  UText *v25;
  uint64_t v26;
  unsigned int (*v27)(_QWORD, int64_t);
  UText *v28;
  uint64_t v29;
  int32_t v30;
  unsigned int (*v31)(_QWORD, int64_t);
  uint64_t v32;
  UText *v33;
  uint64_t v34;
  unsigned int v35;
  int32_t v36;
  uint64_t v37;
  uint64_t v38;
  UText *v39;
  uint64_t v40;
  unsigned int (*v41)(_QWORD, uint64_t);
  uint64_t v42;
  BOOL v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  UText *v47;
  uint64_t v48;
  unsigned int v49;
  UText *v50;
  uint64_t v51;
  int32_t v52;
  UText *v53;
  uint64_t v54;
  UText *v55;
  uint64_t v56;
  int32_t v57;
  unsigned int (*v58)(_QWORD, int64_t);
  UText *v59;
  uint64_t v60;
  UText *v61;
  uint64_t v62;
  int32_t v63;
  unsigned int (*v64)(_QWORD, int64_t);
  UText *v65;
  uint64_t v66;
  int32_t v67;

  if (*(int *)a2 <= 0)
  {
    v5 = *((_DWORD *)this + 79);
    if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      v2 = 0;
LABEL_5:
      *a2 = v5;
      return v2;
    }
    v6 = (UText *)*((_QWORD *)this + 4);
    chunkNativeStart = v6->chunkNativeStart;
    if (!chunkNativeStart)
    {
      v8 = *((_QWORD *)this + 6);
      if (v8 == v6->chunkNativeLimit && v8 == v6->nativeIndexingLimit)
        return icu::RegexMatcher::findUsingChunk(this, a2);
    }
    v10 = *((_QWORD *)this + 18);
    v11 = v10;
    if (!v10)
      v11 = *((_QWORD *)this + 14);
    if (*((_BYTE *)this + 130))
    {
      *((_QWORD *)this + 19) = v10;
      if (*((_QWORD *)this + 17) == v10)
      {
        if (v11 >= *((_QWORD *)this + 15))
        {
LABEL_32:
          v2 = 0;
          *((_BYTE *)this + 130) = 0;
          goto LABEL_33;
        }
        v12 = v11 - chunkNativeStart;
        if (v12 < 0 || v12 >= v6->nativeIndexingLimit || v6->chunkContents[v12] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v6, v11);
          v6 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v12) = v6->chunkOffset;
        }
        else
        {
          v6->chunkOffset = v12;
        }
        if ((int)v12 >= v6->chunkLength || v6->chunkContents[(int)v12] >> 11 > 0x1Au)
        {
          utext_next32(v6);
          v6 = (UText *)*((_QWORD *)this + 4);
          chunkOffset = v6->chunkOffset;
        }
        else
        {
          chunkOffset = v12 + 1;
          v6->chunkOffset = chunkOffset;
        }
        if (chunkOffset <= v6->nativeIndexingLimit)
        {
          v11 = v6->chunkNativeStart + chunkOffset;
        }
        else
        {
          v11 = ((uint64_t (*)(void))v6->pFuncs->mapOffsetToNative)();
          v6 = (UText *)*((_QWORD *)this + 4);
        }
      }
    }
    else if ((*((_QWORD *)this + 19) & 0x8000000000000000) == 0)
    {
LABEL_20:
      v2 = 0;
LABEL_33:
      *((_BYTE *)this + 168) = 1;
      return v2;
    }
    v14 = *((_QWORD *)this + 15);
    v15 = (int *)*((_QWORD *)this + 1);
    v16 = v15[31];
    if (v6->pFuncs->mapNativeIndexToUTF16)
    {
      v17 = v14 - ((int)v16 > 0);
      goto LABEL_35;
    }
    v17 = v14 - v16;
    if (v11 <= v14 - v16)
    {
LABEL_35:
      switch(v15[36])
      {
        case 0:
          icu::RegexMatcher::MatchAt(this, v11, 0, a2);
          v2 = 0;
          if (*(int *)a2 > 0)
            return v2;
          while (2)
          {
            if (*((_BYTE *)this + 130))
              return 1;
            if (v11 >= v17)
              goto LABEL_20;
            v28 = (UText *)*((_QWORD *)this + 4);
            v29 = v11 - v28->chunkNativeStart;
            if (v29 < 0 || v29 >= v28->nativeIndexingLimit || v28->chunkContents[v29] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v28, v11);
              v28 = (UText *)*((_QWORD *)this + 4);
              LODWORD(v29) = v28->chunkOffset;
            }
            else
            {
              v28->chunkOffset = v29;
            }
            if ((int)v29 >= v28->chunkLength || v28->chunkContents[(int)v29] >> 11 > 0x1Au)
            {
              utext_next32(v28);
              v28 = (UText *)*((_QWORD *)this + 4);
              v30 = v28->chunkOffset;
            }
            else
            {
              v30 = v29 + 1;
              v28->chunkOffset = v30;
            }
            if (v30 <= v28->nativeIndexingLimit)
              v11 = v28->chunkNativeStart + v30;
            else
              v11 = ((uint64_t (*)(void))v28->pFuncs->mapOffsetToNative)();
            v31 = (unsigned int (*)(_QWORD, int64_t))*((_QWORD *)this + 37);
            if (!v31 || v31(*((_QWORD *)this + 38), v11))
            {
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              v2 = 0;
              if (*(int *)a2 >= 1)
                return v2;
              continue;
            }
            goto LABEL_186;
          }
        case 1:
        case 5:
          v18 = v15[42];
          v19 = v11 - v6->chunkNativeStart;
          if (v19 < 0 || v19 >= v6->nativeIndexingLimit || v6->chunkContents[v19] >> 10 > 0x36u)
            utext_setNativeIndex(v6, v11);
          else
            v6->chunkOffset = v19;
          while (1)
          {
            v20 = (UText *)*((_QWORD *)this + 4);
            v21 = v20->chunkOffset;
            if ((int)v21 >= v20->chunkLength || (v22 = v20->chunkContents[v21], v22 >> 11 > 0x1A))
            {
              v22 = utext_next32(v20);
              v20 = (UText *)*((_QWORD *)this + 4);
              v23 = v20->chunkOffset;
            }
            else
            {
              v23 = v21 + 1;
              v20->chunkOffset = v23;
            }
            if (v23 <= v20->nativeIndexingLimit)
              v24 = v20->chunkNativeStart + v23;
            else
              v24 = ((uint64_t (*)(void))v20->pFuncs->mapOffsetToNative)();
            if (v22 == v18)
            {
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              if (*(int *)a2 > 0)
                return 0;
              if (*((_BYTE *)this + 130))
                return 1;
              v25 = (UText *)*((_QWORD *)this + 4);
              v26 = v24 - v25->chunkNativeStart;
              if (v26 < 0 || v26 >= v25->nativeIndexingLimit || v25->chunkContents[v26] >> 10 > 0x36u)
                utext_setNativeIndex(v25, v24);
              else
                v25->chunkOffset = v26;
            }
            if (v24 > v17)
              goto LABEL_32;
            v27 = (unsigned int (*)(_QWORD, int64_t))*((_QWORD *)this + 37);
            v11 = v24;
            if (v27)
            {
              v11 = v24;
              if (!v27(*((_QWORD *)this + 38), v24))
                goto LABEL_186;
            }
          }
        case 2:
          v32 = v11 - v6->chunkNativeStart;
          if (v32 < 0 || v32 >= v6->nativeIndexingLimit || v6->chunkContents[v32] >> 10 > 0x36u)
            utext_setNativeIndex(v6, v11);
          else
            v6->chunkOffset = v32;
          while (1)
          {
            v33 = (UText *)*((_QWORD *)this + 4);
            v34 = v33->chunkOffset;
            if ((int)v34 >= v33->chunkLength || (v35 = v33->chunkContents[v34], v35 >> 11 > 0x1A))
            {
              v35 = utext_next32(v33);
              v33 = (UText *)*((_QWORD *)this + 4);
              v36 = v33->chunkOffset;
            }
            else
            {
              v36 = v34 + 1;
              v33->chunkOffset = v36;
            }
            if (v36 <= v33->nativeIndexingLimit)
            {
              v37 = v33->chunkNativeStart + v36;
              if ((v35 & 0x80000000) != 0)
                goto LABEL_111;
            }
            else
            {
              v37 = ((uint64_t (*)(void))v33->pFuncs->mapOffsetToNative)();
              if ((v35 & 0x80000000) != 0)
                goto LABEL_111;
            }
            v38 = *((_QWORD *)this + 1);
            if (v35 > 0xFF)
            {
              if (icu::UnicodeSet::contains(*(icu::UnicodeSet **)(v38 + 160), v35))
              {
LABEL_104:
                icu::RegexMatcher::MatchAt(this, v11, 0, a2);
                if (*(int *)a2 > 0)
                  return 0;
                if (*((_BYTE *)this + 130))
                  return 1;
                v39 = (UText *)*((_QWORD *)this + 4);
                v40 = v11 - v39->chunkNativeStart;
                if (v40 < 0 || v40 >= v39->nativeIndexingLimit || v39->chunkContents[v40] >> 10 > 0x36u)
                  utext_setNativeIndex(v39, v11);
                else
                  v39->chunkOffset = v40;
              }
            }
            else if (((*(unsigned __int8 *)(*(_QWORD *)(v38 + 176) + ((unint64_t)v35 >> 3)) >> (v35 & 7)) & 1) != 0)
            {
              goto LABEL_104;
            }
LABEL_111:
            if (v37 > v17)
              goto LABEL_32;
            v41 = (unsigned int (*)(_QWORD, uint64_t))*((_QWORD *)this + 37);
            v11 = v37;
            if (v41)
            {
              v11 = v37;
              if (!v41(*((_QWORD *)this + 38), v37))
                goto LABEL_186;
            }
          }
        case 3:
          if (v11 <= *((_QWORD *)this + 14))
          {
            icu::RegexMatcher::MatchAt(this, v11, 0, a2);
            v2 = 0;
            if (*(int *)a2 <= 0)
              return (char)*((_BYTE *)this + 130);
          }
          else
          {
            v2 = 0;
            *((_BYTE *)this + 130) = 0;
          }
          return v2;
        case 4:
          if (v11 == *((_QWORD *)this + 10))
          {
            icu::RegexMatcher::MatchAt(this, v11, 0, a2);
            v2 = 0;
            if (*(int *)a2 > 0)
              return v2;
            if (*((_BYTE *)this + 130))
              return 1;
            v65 = (UText *)*((_QWORD *)this + 4);
            v66 = v11 - v65->chunkNativeStart;
            if (v66 < 0 || v66 >= v65->nativeIndexingLimit || v65->chunkContents[v66] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v65, v11);
              v65 = (UText *)*((_QWORD *)this + 4);
              LODWORD(v66) = v65->chunkOffset;
            }
            else
            {
              v65->chunkOffset = v66;
            }
            if ((int)v66 >= v65->chunkLength || (v45 = v65->chunkContents[(int)v66], v45 >> 11 > 0x1A))
            {
              v45 = utext_next32(v65);
              v65 = (UText *)*((_QWORD *)this + 4);
              v67 = v65->chunkOffset;
            }
            else
            {
              v67 = v66 + 1;
              v65->chunkOffset = v67;
            }
            if (v67 <= v65->nativeIndexingLimit)
              v11 = v65->chunkNativeStart + v67;
            else
              v11 = ((uint64_t (*)(void))v65->pFuncs->mapOffsetToNative)();
          }
          else
          {
            v42 = v11 - v6->chunkNativeStart;
            if (v42 < 0 || v42 >= v6->nativeIndexingLimit || v6->chunkContents[v42] >> 10 > 0x36u)
            {
              utext_setNativeIndex(v6, v11);
              v6 = (UText *)*((_QWORD *)this + 4);
              LODWORD(v42) = v6->chunkOffset;
            }
            else
            {
              v6->chunkOffset = v42;
            }
            v43 = __OFSUB__((_DWORD)v42, 1);
            v44 = v42 - 1;
            if (v44 < 0 != v43 || (v45 = v6->chunkContents[v44], v45 >> 11 > 0x1A))
            {
              v45 = utext_previous32(v6);
              v6 = (UText *)*((_QWORD *)this + 4);
            }
            else
            {
              v6->chunkOffset = v44;
            }
            v46 = v11 - v6->chunkNativeStart;
            if (v46 < 0 || v46 >= v6->nativeIndexingLimit || v6->chunkContents[v46] >> 10 > 0x36u)
              utext_setNativeIndex(v6, v11);
            else
              v6->chunkOffset = v46;
          }
          if ((*(_BYTE *)(*((_QWORD *)this + 1) + 24) & 1) != 0)
          {
            do
            {
              if (v45 == 10)
              {
                icu::RegexMatcher::MatchAt(this, v11, 0, a2);
                if (*(int *)a2 > 0)
                  return 0;
                if (*((_BYTE *)this + 130))
                  return 1;
                v59 = (UText *)*((_QWORD *)this + 4);
                v60 = v11 - v59->chunkNativeStart;
                if (v60 < 0 || v60 >= v59->nativeIndexingLimit || v59->chunkContents[v60] >> 10 > 0x36u)
                  utext_setNativeIndex(v59, v11);
                else
                  v59->chunkOffset = v60;
              }
              if (v11 >= v17)
                goto LABEL_32;
              v61 = (UText *)*((_QWORD *)this + 4);
              v62 = v61->chunkOffset;
              if ((int)v62 >= v61->chunkLength || (v45 = v61->chunkContents[v62], v45 >> 11 > 0x1A))
              {
                v45 = utext_next32(v61);
                v61 = (UText *)*((_QWORD *)this + 4);
                v63 = v61->chunkOffset;
              }
              else
              {
                v63 = v62 + 1;
                v61->chunkOffset = v63;
              }
              if (v63 <= v61->nativeIndexingLimit)
                v11 = v61->chunkNativeStart + v63;
              else
                v11 = ((uint64_t (*)(void))v61->pFuncs->mapOffsetToNative)();
              v64 = (unsigned int (*)(_QWORD, int64_t))*((_QWORD *)this + 37);
            }
            while (!v64 || v64(*((_QWORD *)this + 38), v11));
LABEL_186:
            v2 = 0;
            v5 = U_REGEX_STOPPED_BY_CALLER;
            goto LABEL_5;
          }
          break;
        default:
          v2 = 0;
          v5 = U_INTERNAL_PROGRAM_ERROR;
          goto LABEL_5;
      }
      while (1)
      {
        if ((v45 & 0xFFFFDF50) == 0)
        {
          if ((int)v45 > 132)
          {
            if (v45 - 8232 < 2 || v45 == 133)
              goto LABEL_146;
          }
          else
          {
            if (v45 - 10 < 3)
              goto LABEL_146;
            if (v45 == 13)
            {
              if (v11 < *((_QWORD *)this + 15))
              {
                v47 = (UText *)*((_QWORD *)this + 4);
                v48 = v47->chunkOffset;
                if ((int)v48 >= v47->chunkLength || (v49 = v47->chunkContents[v48], v49 >> 11 > 0x1A))
                  v49 = utext_current32(v47);
                if (v49 == 10)
                {
                  v50 = (UText *)*((_QWORD *)this + 4);
                  v51 = v50->chunkOffset;
                  if ((int)v51 >= v50->chunkLength || v50->chunkContents[v51] >> 11 > 0x1Au)
                  {
                    utext_next32(v50);
                    v50 = (UText *)*((_QWORD *)this + 4);
                    v52 = v50->chunkOffset;
                  }
                  else
                  {
                    v52 = v51 + 1;
                    v50->chunkOffset = v52;
                  }
                  if (v52 <= v50->nativeIndexingLimit)
                    v11 = v50->chunkNativeStart + v52;
                  else
                    v11 = ((uint64_t (*)(void))v50->pFuncs->mapOffsetToNative)();
                }
              }
LABEL_146:
              icu::RegexMatcher::MatchAt(this, v11, 0, a2);
              if (*(int *)a2 > 0)
                return 0;
              if (*((_BYTE *)this + 130))
                return 1;
              v53 = (UText *)*((_QWORD *)this + 4);
              v54 = v11 - v53->chunkNativeStart;
              if (v54 < 0 || v54 >= v53->nativeIndexingLimit || v53->chunkContents[v54] >> 10 > 0x36u)
                utext_setNativeIndex(v53, v11);
              else
                v53->chunkOffset = v54;
            }
          }
        }
        if (v11 >= v17)
          goto LABEL_32;
        v55 = (UText *)*((_QWORD *)this + 4);
        v56 = v55->chunkOffset;
        if ((int)v56 >= v55->chunkLength || (v45 = v55->chunkContents[v56], v45 >> 11 > 0x1A))
        {
          v45 = utext_next32(v55);
          v55 = (UText *)*((_QWORD *)this + 4);
          v57 = v55->chunkOffset;
        }
        else
        {
          v57 = v56 + 1;
          v55->chunkOffset = v57;
        }
        if (v57 <= v55->nativeIndexingLimit)
          v11 = v55->chunkNativeStart + v57;
        else
          v11 = ((uint64_t (*)(void))v55->pFuncs->mapOffsetToNative)();
        v58 = (unsigned int (*)(_QWORD, int64_t))*((_QWORD *)this + 37);
        if (v58 && !v58(*((_QWORD *)this + 38), v11))
          goto LABEL_186;
      }
    }
    goto LABEL_32;
  }
  return 0;
}

uint64_t icu::RegexMatcher::findUsingChunk(icu::RegexMatcher *this, UErrorCode *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _DWORD *v9;
  int v10;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t (*v19)(_QWORD, _QWORD);
  int v20;
  UErrorCode v21;
  uint64_t v22;
  unsigned int (*v23)(_QWORD, _QWORD);
  uint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int (*v29)(_QWORD, _QWORD);
  int v30;
  uint64_t v31;
  unsigned int (*v32)(_QWORD, _QWORD);
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(_QWORD, _QWORD);
  uint64_t v36;

  v4 = *((_QWORD *)this + 18);
  v5 = v4;
  if (!(_DWORD)v4)
    v5 = *((_DWORD *)this + 28);
  v6 = *(_QWORD *)(*((_QWORD *)this + 4) + 48);
  if (*((_BYTE *)this + 130))
  {
    *((_QWORD *)this + 19) = v4;
    if (*((_QWORD *)this + 17) == v4)
    {
      if (*((_QWORD *)this + 15) <= v5)
      {
LABEL_15:
        v8 = 0;
        *((_BYTE *)this + 130) = 0;
        goto LABEL_16;
      }
      v7 = v5 + 1;
      if ((*(_WORD *)(v6 + 2 * v5) & 0xFC00) == 0xD800 && *((_QWORD *)this + 6) != v7)
      {
        if ((*(_WORD *)(v6 + 2 * v7) & 0xFC00) == 0xDC00)
          v5 += 2;
        else
          ++v5;
      }
      else
      {
        ++v5;
      }
    }
  }
  else if ((*((_QWORD *)this + 19) & 0x8000000000000000) == 0)
  {
LABEL_10:
    v8 = 0;
LABEL_16:
    *((_BYTE *)this + 168) = 1;
    return v8;
  }
  v9 = (_DWORD *)*((_QWORD *)this + 1);
  v10 = *((_DWORD *)this + 30) - v9[31];
  if (v5 > v10)
    goto LABEL_15;
  switch(v9[36])
  {
    case 0:
      icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
      v8 = 0;
      if (*(int *)a2 <= 0)
      {
        do
        {
          if (*((_BYTE *)this + 130))
            return 1;
          if (v5 >= v10)
            goto LABEL_10;
          v22 = v5 + 1;
          if ((*(_WORD *)(v6 + 2 * v5) & 0xFC00) == 0xD800 && *((_QWORD *)this + 15) != v22)
          {
            if ((*(_WORD *)(v6 + 2 * v22) & 0xFC00) == 0xDC00)
              v5 += 2;
            else
              ++v5;
          }
          else
          {
            ++v5;
          }
          v23 = (unsigned int (*)(_QWORD, _QWORD))*((_QWORD *)this + 37);
          if (v23 && !v23(*((_QWORD *)this + 38), v5))
            goto LABEL_109;
          icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
          v8 = 0;
        }
        while (*(int *)a2 < 1);
      }
      return v8;
    case 1:
    case 5:
      v12 = v9[42];
      v13 = v5;
      while (1)
      {
        v14 = v13 + 1;
        v15 = *(unsigned __int16 *)(v6 + 2 * v13);
        if ((v15 & 0xFC00) == 0xD800 && *((_QWORD *)this + 15) != v14)
        {
          v16 = *(unsigned __int16 *)(v6 + 2 * v14);
          v17 = (v16 & 0xFC00) == 56320;
          v18 = (v15 << 10) - 56613888 + v16;
          if (v17)
            LODWORD(v14) = v13 + 2;
          if (v17)
            v15 = v18;
        }
        if (v15 == v12)
        {
          icu::RegexMatcher::MatchChunkAt(this, v13, 0, a2);
          if (*(int *)a2 > 0)
            return 0;
          if (*((_BYTE *)this + 130))
            return 1;
        }
        if ((int)v14 > v10)
          goto LABEL_15;
        v19 = (uint64_t (*)(_QWORD, _QWORD))*((_QWORD *)this + 37);
        v13 = v14;
        if (v19)
        {
          v20 = v19(*((_QWORD *)this + 38), (int)v14);
          v13 = v14;
          if (!v20)
            goto LABEL_109;
        }
      }
    case 2:
      while (2)
      {
        v24 = v5 + 1;
        v25 = *(unsigned __int16 *)(v6 + 2 * v5);
        if ((v25 & 0xFC00) == 0xD800)
        {
          if (*((_QWORD *)this + 15) != v24)
          {
            v26 = *(unsigned __int16 *)(v6 + 2 * v24);
            v27 = (v26 & 0xFC00) == 56320;
            v28 = ((_DWORD)v25 << 10) - 56613888 + v26;
            if (v27)
              LODWORD(v25) = v28;
            if (v27)
              LODWORD(v24) = v5 + 2;
          }
        }
        else if (v25 <= 0xFF)
        {
          if (((*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 176) + (v25 >> 3)) >> (v25 & 7)) & 1) == 0)
            goto LABEL_63;
          goto LABEL_61;
        }
        if (!icu::UnicodeSet::contains(*(icu::UnicodeSet **)(*((_QWORD *)this + 1) + 160), v25))
          goto LABEL_63;
LABEL_61:
        icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
        if (*(int *)a2 > 0)
          return 0;
        if (*((_BYTE *)this + 130))
          return 1;
LABEL_63:
        if ((int)v24 > v10)
          goto LABEL_15;
        v29 = (unsigned int (*)(_QWORD, _QWORD))*((_QWORD *)this + 37);
        v5 = v24;
        if (v29)
        {
          v5 = v24;
          if (!v29(*((_QWORD *)this + 38), (int)v24))
            goto LABEL_109;
        }
        continue;
      }
    case 3:
      if (*((_QWORD *)this + 14) >= v5)
      {
        icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
        v8 = 0;
        if (*(int *)a2 <= 0)
          return (char)*((_BYTE *)this + 130);
      }
      else
      {
        v8 = 0;
        *((_BYTE *)this + 130) = 0;
      }
      return v8;
    case 4:
      if (*((_QWORD *)this + 10) != v5)
        goto LABEL_75;
      icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
      v8 = 0;
      if (*(int *)a2 > 0)
        return v8;
      if (*((_BYTE *)this + 130))
        return 1;
      if (v5 >= v10)
        goto LABEL_10;
      v36 = v5 + 1;
      if ((*(_WORD *)(v6 + 2 * v5) & 0xFC00) == 0xD800 && *((_QWORD *)this + 15) != v36)
      {
        if ((*(_WORD *)(v6 + 2 * v36) & 0xFC00) == 0xDC00)
          v5 += 2;
        else
          ++v5;
      }
      else
      {
        ++v5;
      }
LABEL_75:
      if ((*(_BYTE *)(*((_QWORD *)this + 1) + 24) & 1) == 0)
      {
        while (1)
        {
          v30 = *(unsigned __int16 *)(v6 + 2 * v5 - 2);
          if ((v30 & 0xDF50) == 0)
          {
            if (*(unsigned __int16 *)(v6 + 2 * v5 - 2) > 0x84u)
            {
              if ((v30 - 8232) < 2 || v30 == 133)
                goto LABEL_86;
            }
            else
            {
              if ((v30 - 10) < 3)
                goto LABEL_86;
              if (v30 == 13)
              {
                if (*((_QWORD *)this + 15) > v5 && *(_WORD *)(v6 + 2 * v5) == 10)
                  ++v5;
LABEL_86:
                icu::RegexMatcher::MatchChunkAt(this, v5, 0, a2);
                if (*(int *)a2 > 0)
                  return 0;
                if (*((_BYTE *)this + 130))
                  return 1;
              }
            }
          }
          if (v5 >= v10)
            goto LABEL_15;
          v31 = v5 + 1;
          if ((*(_WORD *)(v6 + 2 * v5) & 0xFC00) == 0xD800 && *((_QWORD *)this + 15) != v31)
          {
            if ((*(_WORD *)(v6 + 2 * v31) & 0xFC00) == 0xDC00)
              v5 += 2;
            else
              ++v5;
          }
          else
          {
            ++v5;
          }
          v32 = (unsigned int (*)(_QWORD, _QWORD))*((_QWORD *)this + 37);
          if (v32 && !v32(*((_QWORD *)this + 38), v5))
            goto LABEL_109;
        }
      }
      LODWORD(v33) = v5;
      do
      {
        v34 = (int)v33;
        if (*(_WORD *)(v6 + 2 * (int)v33 - 2) == 10)
        {
          icu::RegexMatcher::MatchChunkAt(this, v33, 0, a2);
          if (*(int *)a2 > 0)
            return 0;
          if (*((_BYTE *)this + 130))
            return 1;
        }
        if ((int)v33 >= v10)
          goto LABEL_15;
        v33 = (int)v33 + 1;
        if ((*(_WORD *)(v6 + 2 * v34) & 0xFC00) == 0xD800
          && *((_QWORD *)this + 15) != v33
          && (*(_WORD *)(v6 + 2 * v33) & 0xFC00) == 0xDC00)
        {
          LODWORD(v33) = v34 + 2;
        }
        v35 = (unsigned int (*)(_QWORD, _QWORD))*((_QWORD *)this + 37);
      }
      while (!v35 || v35(*((_QWORD *)this + 38), (int)v33));
LABEL_109:
      v8 = 0;
      v21 = U_REGEX_STOPPED_BY_CALLER;
LABEL_110:
      *a2 = v21;
      return v8;
    default:
      v8 = 0;
      v21 = U_INTERNAL_PROGRAM_ERROR;
      goto LABEL_110;
  }
}

void icu::RegexMatcher::MatchAt(icu::RegexMatcher *this, int64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  icu::UVector *v12;
  int64_t *v13;
  UErrorCode v14;
  int64_t *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  UErrorCode v20;
  int v21;
  int64_t v22;
  UText *v23;
  uint64_t v24;
  uint64_t v25;
  UText *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int64_t v33;
  int64_t *v34;
  int64_t *v35;
  int64_t v36;
  int v37;
  int64_t v38;
  UText *v39;
  uint64_t v40;
  int64_t v41;
  UText *v42;
  uint64_t v43;
  int64_t v44;
  UText *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int isWordBoundary;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int64_t *v59;
  uint64_t v60;
  int64_t v61;
  int64_t v62;
  UText *v63;
  uint64_t v64;
  int64_t v65;
  UText *v66;
  uint64_t v67;
  int64_t v68;
  UText *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int64_t v81;
  UText *v82;
  uint64_t v83;
  uint64_t v84;
  int64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v90;
  BOOL v91;
  uint64_t v92;
  int64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v98;
  int64_t v99;
  UText *v100;
  uint64_t v101;
  uint64_t v102;
  icu::UVector64 *v103;
  uint64_t v104;
  int64_t *v105;
  int64_t v106;
  int64_t v107;
  int64_t v108;
  UText *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int64_t *v117;
  uint64_t v118;
  int64_t *v119;
  int64_t v120;
  int64_t v121;
  UText *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int64_t v127;
  int64_t v128;
  int v129;
  int64_t v130;
  UText *v131;
  uint64_t v132;
  int64_t v133;
  UText *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  UText *v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int64_t v142;
  uint64_t v143;
  uint64_t v144;
  UText *v145;
  uint64_t v146;
  uint64_t v147;
  int64_t v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  UText *v152;
  uint64_t v153;
  uint64_t v154;
  icu::UnicodeSet *v155;
  uint64_t v156;
  UText *v157;
  uint64_t v158;
  int64_t v159;
  int64_t v160;
  UText *v161;
  uint64_t v162;
  uint64_t v163;
  UText *v164;
  uint64_t v165;
  int64_t v166;
  UText *v167;
  uint64_t v168;
  int64_t v169;
  UText *v170;
  uint64_t v171;
  int64_t v172;
  UText *v173;
  uint64_t v174;
  int64_t v175;
  UText *v176;
  uint64_t v177;
  int64_t v178;
  UText *v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  UText *v184;
  uint64_t chunkOffset;
  int nativeIndexingLimit;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  int v192;
  int v194;
  BOOL v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  _BOOL4 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v207;
  BOOL v208;
  int v209;
  uint64_t v210;
  UText *v211;
  uint64_t v212;
  UChar32 v213;
  uint64_t v214;
  uint64_t v215;
  int64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  int v220;
  UText *v221;
  uint64_t v222;
  int64_t NativeIndex;
  UChar32 v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unsigned int v232;
  UChar32 v233;
  UChar32 v234;
  unsigned int v235;
  unsigned int v236;
  int32_t v237;
  unsigned int v238;
  unsigned int v239;
  int32_t v240;
  unsigned int v241;
  int32_t v242;
  unsigned int v243;
  unsigned int v244;
  UChar32 v245;
  UText *v246;
  int v247;
  int32_t v248;
  unsigned int v249;
  int32_t v250;
  unsigned int v251;
  UChar32 v252;
  int32_t v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  BOOL v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  int v263;
  int v264;
  unsigned int v265;
  UChar32 v266;
  unsigned int v267;
  UChar32 v268;
  unsigned int v269;
  int64_t v270;
  uint64_t v271;
  uint64_t v272;
  int64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  BOOL v277;
  uint64_t v278;
  BOOL v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  int v289;
  int v290;
  int64_t *v291;
  int64_t *v292;
  int64_t v293;
  int64_t *v294;
  int64_t *v295;
  int64_t v296;
  unsigned int v298;
  icu::UnicodeSet *v299;
  UText *v300;
  uint64_t v301;
  unsigned int v302;
  uint64_t v303;
  int32_t v304;
  UText *v305;
  uint64_t v306;
  unsigned int v307;
  int v308;
  unsigned int v309;
  BOOL v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  UText *v314;
  int32_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  int64_t v340;
  uint64_t v341;
  int v342;
  int v343;
  int v344;
  uint64_t v345;
  int64_t v346;
  uint64_t v347;
  int v348;
  int v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  int64_t v356;
  int64_t *v357;
  uint64_t v358;
  uint64_t v359;
  int64_t *v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  int64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  int64_t *v373;
  uint64_t v374;
  int v375;
  int64_t v376;
  uint64_t v377;
  int v378;
  int v379;
  int v380;
  uint64_t v381;
  int64_t v382;
  uint64_t v383;
  int64_t *v384;
  uint64_t v385;
  int v386;
  int32_t v387;
  unsigned int v388;
  uint64_t v389;
  int64_t v390;
  uint64_t v391;
  int64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  int64_t v398;
  int v399;
  icu::UVector *v400;
  _QWORD v401[3];
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;

  if (*(int *)a4 > 0)
    return;
  v8 = *((_QWORD *)this + 1);
  v9 = *(_WORD *)(v8 + 48);
  if ((v9 & 0x11) != 0)
  {
    v10 = 0;
  }
  else if ((v9 & 2) != 0)
  {
    v10 = v8 + 50;
  }
  else
  {
    v10 = *(_QWORD *)(v8 + 64);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 24);
  v12 = *(icu::UVector **)(v8 + 104);
  *((_DWORD *)this + 14) = *(_DWORD *)(v8 + 128);
  v13 = (int64_t *)icu::RegexMatcher::resetStack(this);
  v14 = *((_DWORD *)this + 79);
  if (v14 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a4 = v14;
    return;
  }
  v15 = v13;
  v400 = v12;
  v399 = a3;
  *v13 = a2;
  v13[1] = 0;
  v398 = a2;
  v16 = *(unsigned int *)(*((_QWORD *)this + 1) + 132);
  if ((int)v16 >= 1)
    bzero(*((void **)this + 24), 8 * v16);
  while (2)
  {
    v17 = v15[1];
    v18 = *(_QWORD *)(v11 + 8 * v17);
    v19 = v17 + 1;
    v15[1] = v17 + 1;
    v20 = U_INTERNAL_PROGRAM_ERROR;
    v21 = v18 & 0xFFFFFF;
    switch(BYTE3(v18))
    {
      case 1:
        goto LABEL_317;
      case 2:
        if (v399 && *v15 != *((_QWORD *)this + 15))
          goto LABEL_317;
        *((_BYTE *)this + 130) = 1;
        *((_QWORD *)this + 19) = *((_QWORD *)this + 18);
        *((_QWORD *)this + 17) = v398;
        *((_QWORD *)this + 18) = *v15;
        goto LABEL_778;
      case 3:
        v22 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v23 = (UText *)*((_QWORD *)this + 4);
        v24 = v22 - v23->chunkNativeStart;
        if (v24 < 0 || v24 >= v23->nativeIndexingLimit || v23->chunkContents[v24] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v23, v22);
          v23 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v24) = v23->chunkOffset;
        }
        else
        {
          v23->chunkOffset = v24;
        }
        if ((int)v24 >= v23->chunkLength || (v232 = v23->chunkContents[(int)v24], v232 >> 11 > 0x1A))
          v232 = utext_next32(v23);
        else
          v23->chunkOffset = v24 + 1;
        if (v232 == v21)
          goto LABEL_614;
        goto LABEL_317;
      case 4:
        v25 = *(_QWORD *)(v11 + 8 * v19);
        v15[1] = v17 + 2;
        v26 = (UText *)*((_QWORD *)this + 4);
        v27 = *v15 - v26->chunkNativeStart;
        if (v27 < 0 || v27 >= v26->nativeIndexingLimit || v26->chunkContents[v27] >> 10 > 0x36u)
          utext_setNativeIndex(v26, *v15);
        else
          v26->chunkOffset = v27;
        v181 = 0;
        v182 = v25 & 0xFFFFFF;
        v183 = v10 + 2 * (v18 & 0xFFFFFF);
        while (1)
        {
          v184 = (UText *)*((_QWORD *)this + 4);
          chunkOffset = v184->chunkOffset;
          nativeIndexingLimit = v184->nativeIndexingLimit;
          if (v181 >= v182)
            goto LABEL_616;
          if ((int)chunkOffset <= nativeIndexingLimit)
            v187 = v184->chunkNativeStart + chunkOffset;
          else
            v187 = ((uint64_t (*)(void))v184->pFuncs->mapOffsetToNative)();
          if (v187 >= *((_QWORD *)this + 15))
            goto LABEL_316;
          v188 = *((_QWORD *)this + 4);
          v189 = *(int *)(v188 + 40);
          if ((int)v189 >= *(_DWORD *)(v188 + 44)
            || (v190 = *(unsigned __int16 *)(*(_QWORD *)(v188 + 48) + 2 * v189), v190 >> 11 > 0x1A))
          {
            v190 = utext_next32(*((UText **)this + 4));
          }
          else
          {
            *(_DWORD *)(v188 + 40) = v189 + 1;
          }
          v191 = v181 + 1;
          v192 = *(unsigned __int16 *)(v183 + 2 * v181);
          if ((v192 & 0xFC00) == 0xD800 && (_DWORD)v191 != v182)
          {
            v194 = *(unsigned __int16 *)(v183 + 2 * v191);
            v195 = (v194 & 0xFC00) == 56320;
            v196 = (v192 << 10) - 56613888 + v194;
            if (v195)
              v192 = v196;
            if (v195)
              LODWORD(v191) = v181 + 2;
          }
          v181 = v191;
          if (v192 != v190)
            goto LABEL_317;
        }
      case 6:
        if (*(int *)a4 > 0)
          goto LABEL_777;
        v28 = *((_QWORD *)this + 22);
        v29 = *((_DWORD *)this + 14);
        v30 = *(_DWORD *)(v28 + 8);
        v31 = v30 + v29;
        if (v30 + v29 >= 0 && *(_DWORD *)(v28 + 12) >= v31)
          goto LABEL_29;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v31, a4))
        {
          v30 = *(_DWORD *)(v28 + 8);
          v31 = v30 + v29;
LABEL_29:
          v32 = *(_QWORD *)(v28 + 24) + 8 * v30;
          *(_DWORD *)(v28 + 8) = v31;
        }
        else
        {
          v32 = 0;
        }
        if (*(int *)a4 > 0)
          goto LABEL_775;
        v317 = 0;
        v318 = *((int *)this + 14);
        v319 = v32 - 8 * v318;
        v320 = -8 * v318;
        do
        {
          *(_QWORD *)(v32 + v317) = *(_QWORD *)(v319 + v317);
          v317 += 8;
        }
        while (v320 + v317);
        v321 = *((_DWORD *)this + 68);
        v91 = __OFSUB__(v321--, 1);
        *((_DWORD *)this + 68) = v321;
        if ((v321 < 0) ^ v91 | (v321 == 0))
          icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        *(_QWORD *)(v319 + 8) = v18 & 0xFFFFFF;
LABEL_666:
        v15 = (int64_t *)v32;
        goto LABEL_318;
      case 7:
        goto LABEL_318;
      case 8:
        v33 = *v15;
        v34 = &v15[v21 + 2];
        goto LABEL_133;
      case 9:
        v35 = v15 + 2;
        v36 = *v15;
        v15[(v18 & 0xFFFFFF) + 2] = v15[(v21 + 2) + 2];
        v37 = v21 + 1;
        goto LABEL_170;
      case 0xA:
        v38 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v39 = (UText *)*((_QWORD *)this + 4);
        v40 = v38 - v39->chunkNativeStart;
        if (v40 < 0 || v40 >= v39->nativeIndexingLimit || v39->chunkContents[v40] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v39, v38);
          v39 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v40) = v39->chunkOffset;
        }
        else
        {
          v39->chunkOffset = v40;
        }
        if ((int)v40 >= v39->chunkLength || (v233 = v39->chunkContents[(int)v40], v233 >> 11 > 0x1A))
          v233 = utext_next32(v39);
        else
          v39->chunkOffset = v40 + 1;
        v276 = v18 & 0x7FFFFF;
        if (v233 > 255)
          v277 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 200 * v276 + 8), v233) == 0;
        else
          v277 = ((*(unsigned __int8 *)(qword_1ECD284E8 + 32 * v276 + (v233 >> 3) + 2608) >> (v233 & 7)) & 1) == 0;
        if (v277)
          v298 = (v18 & 0x800000) >> 23;
        else
          v298 = (v18 & 0x800000) == 0;
        if (!v298)
          goto LABEL_317;
        goto LABEL_614;
      case 0xB:
        v41 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v42 = (UText *)*((_QWORD *)this + 4);
        v43 = v41 - v42->chunkNativeStart;
        if (v43 < 0 || v43 >= v42->nativeIndexingLimit || v42->chunkContents[v43] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v42, v41);
          v42 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v43) = v42->chunkOffset;
        }
        else
        {
          v42->chunkOffset = v43;
        }
        if ((int)v43 >= v42->chunkLength || (v234 = v42->chunkContents[(int)v43], v234 >> 11 > 0x1A))
          v234 = utext_next32(v42);
        else
          v42->chunkOffset = v43 + 1;
        if (v234 > 255)
        {
          v299 = (icu::UnicodeSet *)icu::UVector::elementAt(v400, v18 & 0xFFFFFF);
          if (icu::UnicodeSet::contains(v299, v234))
            goto LABEL_614;
        }
        else if (((*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 112) + 32 * (v18 & 0xFFFFFF) + (v234 >> 3)) >> (v234 & 7)) & 1) != 0)
        {
          goto LABEL_614;
        }
        goto LABEL_317;
      case 0xC:
        v44 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v45 = (UText *)*((_QWORD *)this + 4);
        v46 = v44 - v45->chunkNativeStart;
        if (v46 < 0 || v46 >= v45->nativeIndexingLimit || v45->chunkContents[v46] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v45, v44);
          v45 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v46) = v45->chunkOffset;
        }
        else
        {
          v45->chunkOffset = v46;
        }
        if ((int)v46 >= v45->chunkLength || (v235 = v45->chunkContents[(int)v46], v235 >> 11 > 0x1A))
          v235 = utext_next32(v45);
        else
          v45->chunkOffset = v46 + 1;
        if ((v235 & 0xFFFFDF50) != 0 || v235 - 10 >= 4 && v235 - 8232 >= 2 && v235 != 133)
          goto LABEL_614;
        goto LABEL_317;
      case 0xD:
        goto LABEL_135;
      case 0xE:
        goto LABEL_777;
      case 0xF:
        if (*(int *)a4 > 0)
          goto LABEL_664;
        v47 = *((_QWORD *)this + 22);
        v48 = *((_DWORD *)this + 14);
        v49 = *(_DWORD *)(v47 + 8);
        v50 = v49 + v48;
        if (v49 + v48 >= 0 && *(_DWORD *)(v47 + 12) >= v50)
          goto LABEL_52;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v50, a4))
        {
          v49 = *(_DWORD *)(v47 + 8);
          v50 = v49 + v48;
LABEL_52:
          v32 = *(_QWORD *)(v47 + 24) + 8 * v49;
          *(_DWORD *)(v47 + 8) = v50;
        }
        else
        {
          v32 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v351 = 0;
          v352 = *((int *)this + 14);
          v353 = v32 - 8 * v352;
          v354 = -8 * v352;
          do
          {
            *(_QWORD *)(v32 + v351) = *(_QWORD *)(v353 + v351);
            v351 += 8;
          }
          while (v354 + v351);
          v355 = *((_DWORD *)this + 68);
          v91 = __OFSUB__(v355--, 1);
          *((_DWORD *)this + 68) = v355;
          if ((v355 < 0) ^ v91 | (v355 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          *(_QWORD *)(v353 + 8) = v19;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_664:
          v32 = (uint64_t)v15;
        }
        *(_QWORD *)(v32 + 8) = v18 & 0xFFFFFF;
        goto LABEL_666;
      case 0x10:
        isWordBoundary = icu::RegexMatcher::isWordBoundary(this, *v15);
        goto LABEL_213;
      case 0x11:
        v52 = *v15;
        if (*((_BYTE *)this + 130))
          v53 = *((_QWORD *)this + 18);
        else
          v53 = *((_QWORD *)this + 14);
        goto LABEL_440;
      case 0x12:
        v54 = *(_QWORD *)(v11 + 8 * (v21 - 1)) & 0xFFFFFFLL;
        if (v15[v54 + 2] >= *v15)
          goto LABEL_318;
        if (*(int *)a4 > 0)
          goto LABEL_688;
        v55 = *((_QWORD *)this + 22);
        v56 = *((_DWORD *)this + 14);
        v57 = *(_DWORD *)(v55 + 8);
        v58 = v57 + v56;
        if (v57 + v56 >= 0 && *(_DWORD *)(v55 + 12) >= v58)
          goto LABEL_62;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v58, a4))
        {
          v57 = *(_DWORD *)(v55 + 8);
          v58 = v57 + v56;
LABEL_62:
          v59 = (int64_t *)(*(_QWORD *)(v55 + 24) + 8 * v57);
          *(_DWORD *)(v55 + 8) = v58;
        }
        else
        {
          v59 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v358 = 0;
          v359 = *((int *)this + 14);
          v360 = &v59[-v359];
          v361 = -8 * v359;
          do
          {
            v59[v358] = v360[v358];
            ++v358;
          }
          while (v361 + v358 * 8);
          v362 = *((_DWORD *)this + 68);
          v91 = __OFSUB__(v362--, 1);
          *((_DWORD *)this + 68) = v362;
          if ((v362 < 0) ^ v91 | (v362 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          v360[1] = v19;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_688:
          v59 = v15;
        }
        v59[1] = v18 & 0xFFFFFF;
        v356 = *v59;
        v357 = &v59[v54];
        goto LABEL_721;
      case 0x13:
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v60 = icu::RegexMatcher::followingGCBoundary(this, *v15, a4);
        *v15 = v60;
        v61 = *((_QWORD *)this + 15);
        if (v60 >= v61)
        {
          *((_BYTE *)this + 168) = 1;
          *v15 = v61;
        }
        goto LABEL_318;
      case 0x14:
        if (*v15 >= *((_QWORD *)this + 11))
          goto LABEL_751;
        goto LABEL_317;
      case 0x15:
        v62 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v63 = (UText *)*((_QWORD *)this + 4);
        v64 = v62 - v63->chunkNativeStart;
        if (v64 < 0 || v64 >= v63->nativeIndexingLimit || v63->chunkContents[v64] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v63, v62);
          v63 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v64) = v63->chunkOffset;
        }
        else
        {
          v63->chunkOffset = v64;
        }
        if ((int)v64 >= v63->chunkLength || (v236 = v63->chunkContents[(int)v64], v236 >> 11 > 0x1A))
        {
          v236 = utext_next32(v63);
          v63 = (UText *)*((_QWORD *)this + 4);
          v237 = v63->chunkOffset;
        }
        else
        {
          v237 = v64 + 1;
          v63->chunkOffset = v237;
        }
        if (v237 <= v63->nativeIndexingLimit)
          v278 = v63->chunkNativeStart + v237;
        else
          v278 = ((uint64_t (*)(void))v63->pFuncs->mapOffsetToNative)();
        *v15 = v278;
        if (v236 != 13 || v278 >= *((_QWORD *)this + 15))
          goto LABEL_318;
        v300 = (UText *)*((_QWORD *)this + 4);
        v301 = v300->chunkOffset;
        if ((int)v301 >= v300->chunkLength || (v302 = v300->chunkContents[v301], v302 >> 11 > 0x1A))
          v302 = utext_current32(v300);
        if (v302 != 10)
          goto LABEL_318;
        v184 = (UText *)*((_QWORD *)this + 4);
        v303 = v184->chunkOffset;
        if ((int)v303 >= v184->chunkLength || v184->chunkContents[v303] >> 11 > 0x1Au)
        {
          utext_next32(v184);
          v184 = (UText *)*((_QWORD *)this + 4);
          v304 = v184->chunkOffset;
        }
        else
        {
          v304 = v303 + 1;
          v184->chunkOffset = v304;
        }
        if (v304 > v184->nativeIndexingLimit)
          goto LABEL_617;
        v322 = v184->chunkNativeStart + v304;
        goto LABEL_619;
      case 0x16:
        v65 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v66 = (UText *)*((_QWORD *)this + 4);
        v67 = v65 - v66->chunkNativeStart;
        if (v67 < 0 || v67 >= v66->nativeIndexingLimit || v66->chunkContents[v67] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v66, v65);
          v66 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v67) = v66->chunkOffset;
        }
        else
        {
          v66->chunkOffset = v67;
        }
        if ((int)v67 >= v66->chunkLength || (v238 = v66->chunkContents[(int)v67], v238 >> 11 > 0x1A))
          v238 = utext_next32(v66);
        else
          v66->chunkOffset = v67 + 1;
        v279 = u_charType(v238) == 9;
        goto LABEL_497;
      case 0x17:
        v52 = *v15;
        v53 = *((_QWORD *)this + 10);
LABEL_440:
        if (v52 == v53)
          goto LABEL_318;
        goto LABEL_317;
      case 0x18:
        v68 = *v15;
        if (*v15 >= *((_QWORD *)this + 11))
          goto LABEL_751;
        v69 = (UText *)*((_QWORD *)this + 4);
        v70 = v68 - v69->chunkNativeStart;
        if (v70 < 0 || v70 >= v69->nativeIndexingLimit || v69->chunkContents[v70] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v69, v68);
          v69 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v70) = v69->chunkOffset;
        }
        else
        {
          v69->chunkOffset = v70;
        }
        if ((int)v70 >= v69->chunkLength || (v239 = v69->chunkContents[(int)v70], v239 >> 11 > 0x1A))
        {
          v239 = utext_next32(v69);
          v69 = (UText *)*((_QWORD *)this + 4);
          v240 = v69->chunkOffset;
        }
        else
        {
          v240 = v70 + 1;
          v69->chunkOffset = v240;
        }
        if (v240 <= v69->nativeIndexingLimit)
          v280 = v69->chunkNativeStart + v240;
        else
          v280 = ((uint64_t (*)(void))v69->pFuncs->mapOffsetToNative)();
        if (v280 >= *((_QWORD *)this + 11))
        {
          if (sub_18BD64B00(v239))
          {
            if (v239 != 10 || *v15 <= *((_QWORD *)this + 10))
              goto LABEL_751;
            v314 = (UText *)*((_QWORD *)this + 4);
            v315 = v314->chunkOffset;
            v91 = __OFSUB__(v315, 1);
            v316 = v315 - 1;
            if (v316 < 0 != v91 || v314->chunkContents[v316] >> 11 > 0x1Au)
            {
              utext_previous32(v314);
              v314 = (UText *)*((_QWORD *)this + 4);
              v316 = v314->chunkOffset;
            }
            else
            {
              v314->chunkOffset = v316;
            }
            v387 = v316 - 1;
            if (v316 < 1 || (v388 = v314->chunkContents[v387], v388 >> 11 > 0x1A))
              v388 = utext_previous32(v314);
            else
              v314->chunkOffset = v387;
            if (v388 != 13)
            {
LABEL_751:
              *((_WORD *)this + 84) = 257;
              goto LABEL_318;
            }
          }
        }
        else
        {
          v305 = (UText *)*((_QWORD *)this + 4);
          v306 = v305->chunkOffset;
          if ((int)v306 >= v305->chunkLength || (v307 = v305->chunkContents[v306], v307 >> 11 > 0x1A))
            v307 = utext_next32(v305);
          else
            v305->chunkOffset = v306 + 1;
          if (v239 == 13 && v307 == 10)
          {
            v323 = *((_QWORD *)this + 4);
            v324 = *(int *)(v323 + 40);
            v325 = (int)v324 <= *(_DWORD *)(v323 + 28)
                 ? *(_QWORD *)(v323 + 32) + v324
                 : (*(uint64_t (**)(void))(*(_QWORD *)(v323 + 56) + 64))();
            if (v325 >= *((_QWORD *)this + 11))
              goto LABEL_751;
          }
        }
LABEL_317:
        v225 = *((_QWORD *)this + 22);
        v226 = *((int *)this + 14);
        v227 = (*(_DWORD *)(v225 + 8) - v226) & ~((*(_DWORD *)(v225 + 8) - (int)v226) >> 31);
        *(_DWORD *)(v225 + 8) = v227;
        v15 = (int64_t *)(*(_QWORD *)(v225 + 24) + 8 * v227 - 8 * v226);
        goto LABEL_318;
      case 0x19:
        v15[(v18 & 0xFFFFFF) + 2] = 0;
        v15[1] = v17 + 4;
        v71 = *(_DWORD *)(v11 + (((v19 << 32) + 0x200000000) >> 29));
        if (*(_DWORD *)(v11 + (((v19 << 32) + 0x100000000) >> 29)) || *(int *)a4 > 0)
          goto LABEL_718;
        v72 = *(_QWORD *)(v11 + 8 * (int)v19);
        v73 = *((_QWORD *)this + 22);
        v74 = *((_DWORD *)this + 14);
        v75 = *(_DWORD *)(v73 + 8);
        v76 = v75 + v74;
        if (v75 + v74 >= 0 && *(_DWORD *)(v73 + 12) >= v76)
          goto LABEL_90;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v76, a4))
        {
          v75 = *(_DWORD *)(v73 + 8);
          v76 = v75 + v74;
LABEL_90:
          v59 = (int64_t *)(*(_QWORD *)(v73 + 24) + 8 * v75);
          *(_DWORD *)(v73 + 8) = v76;
        }
        else
        {
          v59 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v371 = 0;
          v372 = *((int *)this + 14);
          v373 = &v59[-v372];
          v374 = -8 * v372;
          do
          {
            v59[v371] = v373[v371];
            ++v371;
          }
          while (v374 + v371 * 8);
          v375 = *((_DWORD *)this + 68);
          v91 = __OFSUB__(v375--, 1);
          *((_DWORD *)this + 68) = v375;
          if ((v375 < 0) ^ v91 | (v375 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          v373[1] = (v72 & 0xFFFFFF) + 1;
          if (!v71)
            goto LABEL_317;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_718:
          v59 = v15;
          if (!v71)
            goto LABEL_317;
        }
        if (v71 == -1)
        {
          v356 = *v59;
          v357 = &v59[v21 + 1];
LABEL_721:
          v357[2] = v356;
        }
        goto LABEL_764;
      case 0x1A:
        v15[(v18 & 0xFFFFFF) + 2] = 0;
        v77 = v17 + 4;
        v15[1] = v17 + 4;
        v78 = *(_QWORD *)(v11 + 8 * (int)v19);
        v79 = *(unsigned int *)(v11 + (((v19 << 32) + 0x100000000) >> 29));
        v80 = *(_DWORD *)(v11 + (((v19 << 32) + 0x200000000) >> 29));
        if (v80 == -1)
        {
          v15[(v21 + 1) + 2] = *v15;
          if (v79)
            goto LABEL_318;
LABEL_443:
          v15 = (int64_t *)sub_18BD69360(this, (uint64_t)v15, v77, a4);
          goto LABEL_444;
        }
        if (*(_DWORD *)(v11 + (((v19 << 32) + 0x100000000) >> 29)))
          goto LABEL_318;
        if (v80)
          goto LABEL_443;
LABEL_444:
        v111 = (v78 & 0xFFFFFF) + 1;
LABEL_654:
        v15[1] = v111;
        goto LABEL_318;
      case 0x1B:
        v81 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v82 = (UText *)*((_QWORD *)this + 4);
        v83 = v81 - v82->chunkNativeStart;
        if (v83 < 0 || v83 >= v82->nativeIndexingLimit || v82->chunkContents[v83] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v82, v81);
          v82 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v83) = v82->chunkOffset;
        }
        else
        {
          v82->chunkOffset = v83;
        }
        if ((int)v83 >= v82->chunkLength || (v241 = v82->chunkContents[(int)v83], v241 >> 11 > 0x1A))
          v241 = utext_next32(v82);
        else
          v82->chunkOffset = v83 + 1;
        if (v241 != 10)
          goto LABEL_614;
        goto LABEL_317;
      case 0x1C:
        v84 = *(_QWORD *)(v11 + 8 * (v18 & 0xFFFFFF)) & 0xFFFFFFLL;
        v85 = &v15[v84];
        v86 = *(_QWORD *)(v11 + 8 * (v21 + 2));
        v87 = *(_QWORD *)(v11 + 8 * (v21 + 3));
        v88 = v85[2] + 1;
        v85[2] = v88;
        if ((_DWORD)v87 != -1 && v88 >= (unint64_t)v87)
          goto LABEL_318;
        if (v88 >= (int)v86)
        {
          if ((_DWORD)v87 == -1)
          {
            v291 = &v15[v84];
            v293 = v291[3];
            v292 = v291 + 3;
            if (*v15 == v293)
              goto LABEL_318;
            *v292 = *v15;
          }
          v15 = (int64_t *)sub_18BD69360(this, (uint64_t)v15, v19, a4);
        }
        else
        {
          v90 = *((_DWORD *)this + 68);
          v91 = __OFSUB__(v90--, 1);
          *((_DWORD *)this + 68) = v90;
          if ((v90 < 0) ^ v91 | (v90 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        v111 = (v21 + 4);
        goto LABEL_654;
      case 0x1D:
        v92 = *(_QWORD *)(v11 + 8 * (v18 & 0xFFFFFF)) & 0xFFFFFFLL;
        v93 = &v15[v92];
        v94 = *(_QWORD *)(v11 + 8 * (v21 + 2));
        v95 = *(_QWORD *)(v11 + 8 * (v21 + 3));
        v96 = v93[2] + 1;
        v93[2] = v96;
        if ((_DWORD)v95 != -1 && v96 >= (unint64_t)v95)
          goto LABEL_318;
        if (v96 >= (int)v94)
        {
          if ((_DWORD)v95 == -1)
          {
            v294 = &v15[v92];
            v296 = v294[3];
            v295 = v294 + 3;
            if (*v15 == v296)
              goto LABEL_318;
            *v295 = *v15;
          }
          v15 = (int64_t *)sub_18BD69360(this, (uint64_t)v15, (v21 + 4), a4);
        }
        else
        {
          v15[1] = (v21 + 4);
          v98 = *((_DWORD *)this + 68);
          v91 = __OFSUB__(v98--, 1);
          *((_DWORD *)this + 68) = v98;
          if ((v98 < 0) ^ v91 | (v98 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        goto LABEL_318;
      case 0x1E:
        v99 = *v15;
        if (*v15 <= *((_QWORD *)this + 10))
          goto LABEL_318;
        v100 = (UText *)*((_QWORD *)this + 4);
        v101 = v99 - v100->chunkNativeStart;
        if (v101 < 0 || v101 >= v100->nativeIndexingLimit || v100->chunkContents[v101] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v100, v99);
          v100 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v101) = v100->chunkOffset;
        }
        else
        {
          v100->chunkOffset = v101;
        }
        v242 = v101 - 1;
        if ((int)v101 < 1 || (v243 = v100->chunkContents[v242], v243 >> 11 > 0x1A))
        {
          v266 = utext_previous32(v100);
LABEL_512:
          v243 = v266;
        }
        else
        {
          v100->chunkOffset = v242;
        }
LABEL_513:
        if (v243 == 10)
          goto LABEL_318;
        goto LABEL_317;
      case 0x20:
        *(_QWORD *)(*((_QWORD *)this + 24) + 8 * (v18 & 0xFFFFFF)) = *(int *)(*((_QWORD *)this + 22) + 8);
        goto LABEL_318;
      case 0x21:
        v102 = *(_QWORD *)(*((_QWORD *)this + 24) + 8 * (v18 & 0xFFFFFF));
        v103 = (icu::UVector64 *)*((_QWORD *)this + 22);
        v32 = *((_QWORD *)v103 + 3) + 8 * (int)v102 - 8 * *((int *)this + 14);
        if ((int64_t *)v32 == v15)
          goto LABEL_318;
        v104 = *((unsigned int *)this + 14);
        if ((int)v104 >= 1)
        {
          v105 = (int64_t *)(*((_QWORD *)v103 + 3) + 8 * (int)v102 - 8 * *((int *)this + 14));
          do
          {
            v106 = *v15++;
            *v105++ = v106;
            --v104;
          }
          while (v104);
        }
        icu::UVector64::setSize(v103, v102);
        goto LABEL_666;
      case 0x22:
        v107 = v15[(v18 & 0xFFFFFF) + 2];
        if (v107 < 0)
          goto LABEL_317;
        v108 = v15[(v21 + 1) + 2];
        v109 = (UText *)*((_QWORD *)this + 5);
        v110 = v107 - v109->chunkNativeStart;
        if (v110 < 0 || v110 >= v109->nativeIndexingLimit || v109->chunkContents[v110] >> 10 > 0x36u)
          utext_setNativeIndex(v109, v107);
        else
          v109->chunkOffset = v110;
        v221 = (UText *)*((_QWORD *)this + 4);
        v222 = *v15 - v221->chunkNativeStart;
        if (v222 < 0 || v222 >= v221->nativeIndexingLimit || v221->chunkContents[v222] >> 10 > 0x36u)
          utext_setNativeIndex(v221, *v15);
        else
          v221->chunkOffset = v222;
        while (2)
        {
          NativeIndex = utext_getNativeIndex(*((const UText **)this + 5));
          v184 = (UText *)*((_QWORD *)this + 4);
          if (NativeIndex >= v108)
          {
LABEL_615:
            chunkOffset = v184->chunkOffset;
            nativeIndexingLimit = v184->nativeIndexingLimit;
LABEL_616:
            if ((int)chunkOffset <= nativeIndexingLimit)
              v322 = v184->chunkNativeStart + chunkOffset;
            else
LABEL_617:
              v322 = ((uint64_t (*)(void))v184->pFuncs->mapOffsetToNative)();
LABEL_619:
            *v15 = v322;
            goto LABEL_318;
          }
          if (utext_getNativeIndex(v184) < *((_QWORD *)this + 15))
          {
            v224 = utext_next32(*((UText **)this + 5));
            if (utext_next32(*((UText **)this + 4)) != v224)
              goto LABEL_317;
            continue;
          }
          break;
        }
LABEL_316:
        *((_BYTE *)this + 168) = 1;
        goto LABEL_317;
      case 0x23:
        v33 = *v15;
        v34 = &v15[v18 & 0xFFFFFF];
LABEL_133:
        v34[2] = v33;
        goto LABEL_318;
      case 0x24:
        v15[1] = v17 + 2;
        if (v15[(*(_QWORD *)(v11 + 8 * (int)v19) & 0xFFFFFFLL) + 2] >= *v15)
          goto LABEL_317;
LABEL_135:
        v111 = v18 & 0xFFFFFF;
        goto LABEL_654;
      case 0x25:
        v112 = *((_QWORD *)this + 24);
        *(_QWORD *)(v112 + 8 * (v18 & 0xFFFFFF)) = *(int *)(*((_QWORD *)this + 22) + 8);
        *(_QWORD *)(v112 + 8 * (v21 + 1)) = *v15;
        *(_QWORD *)(v112 + 8 * (v21 + 2)) = *((_QWORD *)this + 14);
        *(_QWORD *)(v112 + 8 * (v21 + 3)) = *((_QWORD *)this + 15);
        *((_OWORD *)this + 7) = *((_OWORD *)this + 6);
        goto LABEL_318;
      case 0x26:
        v113 = *((_QWORD *)this + 22);
        v114 = *((_QWORD *)this + 24);
        v115 = *(_QWORD *)(v114 + 8 * (v18 & 0xFFFFFF));
        if (*(_DWORD *)(v113 + 8) <= (int)v115)
        {
          v117 = v15;
        }
        else
        {
          v116 = *((int *)this + 14);
          v117 = (int64_t *)(*(_QWORD *)(v113 + 24) + 8 * (int)v115 - 8 * v116);
          if ((int)v116 >= 1)
          {
            v118 = *((unsigned int *)this + 14);
            v119 = v117;
            do
            {
              v120 = *v15++;
              *v119++ = v120;
              --v118;
            }
            while (v118);
          }
          icu::UVector64::setSize((icu::UVector64 *)v113, v115);
          v114 = *((_QWORD *)this + 24);
          v15 = v117;
        }
        *v117 = *(_QWORD *)(v114 + 8 * (v21 + 1));
        goto LABEL_322;
      case 0x27:
        v121 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v122 = (UText *)*((_QWORD *)this + 4);
        v123 = v121 - v122->chunkNativeStart;
        if (v123 < 0 || v123 >= v122->nativeIndexingLimit || v122->chunkContents[v123] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v122, v121);
          v122 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v123) = v122->chunkOffset;
        }
        else
        {
          v122->chunkOffset = v123;
        }
        if ((int)v123 >= v122->chunkLength || (v244 = v122->chunkContents[(int)v123], v244 >> 11 > 0x1A))
          v244 = utext_next32(v122);
        else
          v122->chunkOffset = v123 + 1;
        if (u_foldCase(v244, 0) == v21)
          goto LABEL_614;
        goto LABEL_317;
      case 0x28:
        v124 = *(_QWORD *)(v11 + 8 * v19);
        v15[1] = v17 + 2;
        v125 = *((_QWORD *)this + 4);
        v126 = *v15 - *(_QWORD *)(v125 + 32);
        if (v126 < 0
          || v126 >= *(int *)(v125 + 28)
          || *(unsigned __int16 *)(*(_QWORD *)(v125 + 48) + 2 * v126) >> 10 > 0x36u)
        {
          utext_setNativeIndex(*((UText **)this + 4), *v15);
          v125 = *((_QWORD *)this + 4);
        }
        else
        {
          *(_DWORD *)(v125 + 40) = v126;
        }
        v197 = v10 + 2 * (v18 & 0xFFFFFF);
        v198 = v124 & 0xFFFFFF;
        v402 = 0;
        v403 = 0;
        v404 = 0;
        sub_18BD579D0((uint64_t)&v402, v125);
        v199 = 0;
        while (2)
        {
          v200 = sub_18BC35690((uint64_t)&v402);
          if (v199 < v198)
          {
            if (v200
              || ((v201 = *((_QWORD *)this + 4), v202 = *(int *)(v201 + 40), (int)v202 <= *(_DWORD *)(v201 + 28))
                ? (v203 = *(_QWORD *)(v201 + 32) + v202)
                : (v203 = (*(uint64_t (**)(void))(*(_QWORD *)(v201 + 56) + 64))()),
                  v203 < *((_QWORD *)this + 15)))
            {
              v204 = v199 + 1;
              v205 = *(unsigned __int16 *)(v197 + 2 * v199);
              if ((v205 & 0xFC00) == 0xD800 && (_DWORD)v204 != v198)
              {
                v207 = *(unsigned __int16 *)(v197 + 2 * v204);
                v208 = (v207 & 0xFC00) == 56320;
                v209 = (v205 << 10) - 56613888 + v207;
                if (v208)
                  LODWORD(v204) = v199 + 2;
                if (v208)
                  v205 = v209;
              }
              v199 = v204;
              if (sub_18BD579DC((uint64_t)&v402) != v205)
                goto LABEL_626;
              continue;
            }
            *((_BYTE *)this + 168) = 1;
LABEL_626:
            sub_18BC35690((uint64_t)&v402);
LABEL_627:
            v326 = *((_QWORD *)this + 22);
            v327 = *((int *)this + 14);
            v328 = (*(_DWORD *)(v326 + 8) - v327) & ~((*(_DWORD *)(v326 + 8) - (int)v327) >> 31);
            *(_DWORD *)(v326 + 8) = v328;
            v15 = (int64_t *)(*(_QWORD *)(v326 + 24) + 8 * v328 - 8 * v327);
            goto LABEL_681;
          }
          break;
        }
        if (v200)
          goto LABEL_627;
        v229 = *((_QWORD *)this + 4);
        v230 = *(int *)(v229 + 40);
        if ((int)v230 <= *(_DWORD *)(v229 + 28))
          v231 = *(_QWORD *)(v229 + 32) + v230;
        else
          v231 = (*(uint64_t (**)(void))(*(_QWORD *)(v229 + 56) + 64))();
        *v15 = v231;
        goto LABEL_681;
      case 0x29:
        v127 = v15[(v18 & 0xFFFFFF) + 2];
        if (v127 < 0)
          goto LABEL_317;
        v128 = v15[(v21 + 1) + 2];
        utext_setNativeIndex(*((UText **)this + 5), v127);
        utext_setNativeIndex(*((UText **)this + 4), *v15);
        v402 = 0;
        v403 = 0;
        v404 = 0;
        sub_18BD579D0((uint64_t)&v402, *((_QWORD *)this + 5));
        memset(v401, 0, sizeof(v401));
        sub_18BD579D0((uint64_t)v401, *((_QWORD *)this + 4));
        while (2)
        {
          if (sub_18BC35690((uint64_t)&v402) || utext_getNativeIndex(*((const UText **)this + 5)) < v128)
          {
            if (sub_18BC35690((uint64_t)v401)
              || utext_getNativeIndex(*((const UText **)this + 4)) < *((_QWORD *)this + 15))
            {
              v129 = sub_18BD579DC((uint64_t)&v402);
              if (sub_18BD579DC((uint64_t)v401) != v129)
                goto LABEL_632;
              continue;
            }
            *((_BYTE *)this + 168) = 1;
LABEL_632:
            v332 = *((_QWORD *)this + 22);
            v333 = *((int *)this + 14);
            v334 = (*(_DWORD *)(v332 + 8) - v333) & ~((*(_DWORD *)(v332 + 8) - (int)v333) >> 31);
            *(_DWORD *)(v332 + 8) = v334;
            v15 = (int64_t *)(*(_QWORD *)(v332 + 24) + 8 * v334 - 8 * v333);
            goto LABEL_633;
          }
          break;
        }
        if (sub_18BC35690((uint64_t)v401))
          goto LABEL_632;
        v329 = *((_QWORD *)this + 4);
        v330 = *(int *)(v329 + 40);
        if ((int)v330 <= *(_DWORD *)(v329 + 28))
          v331 = *(_QWORD *)(v329 + 32) + v330;
        else
          v331 = (*(uint64_t (**)(void))(*(_QWORD *)(v329 + 56) + 64))();
        *v15 = v331;
LABEL_633:
        nullsub_17(v401);
LABEL_681:
        nullsub_17(&v402);
        goto LABEL_318;
      case 0x2A:
        v130 = *v15;
        if (*v15 >= *((_QWORD *)this + 11))
          goto LABEL_751;
        v131 = (UText *)*((_QWORD *)this + 4);
        v132 = v130 - v131->chunkNativeStart;
        if (v132 < 0 || v132 >= v131->nativeIndexingLimit || v131->chunkContents[v132] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v131, v130);
          v131 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v132) = v131->chunkOffset;
        }
        else
        {
          v131->chunkOffset = v132;
        }
        if ((int)v132 >= v131->chunkLength || (v245 = v131->chunkContents[(int)v132], v245 >> 11 > 0x1A))
          v245 = utext_current32(v131);
        if ((v245 & 0xFFFFDF50) != 0)
          goto LABEL_317;
        if (v245 > 132)
        {
          if ((v245 - 8232) < 2 || v245 == 133)
            goto LABEL_318;
          goto LABEL_317;
        }
        if ((v245 - 11) >= 3)
        {
          if (v245 != 10)
            goto LABEL_317;
          if (*v15 > *((_QWORD *)this + 10))
          {
            v246 = (UText *)*((_QWORD *)this + 4);
            v247 = v246->chunkOffset;
            v248 = v247 - 1;
            if (v247 < 1 || (v249 = v246->chunkContents[v248], v249 >> 11 > 0x1A))
              v249 = utext_previous32(v246);
            else
              v246->chunkOffset = v248;
            if (v249 == 13)
              goto LABEL_317;
          }
        }
        goto LABEL_318;
      case 0x2B:
        v133 = *v15;
        if (*v15 != *((_QWORD *)this + 10))
        {
          v134 = (UText *)*((_QWORD *)this + 4);
          v135 = v133 - v134->chunkNativeStart;
          if (v135 < 0 || v135 >= v134->nativeIndexingLimit || v134->chunkContents[v135] >> 10 > 0x36u)
          {
            utext_setNativeIndex(v134, v133);
            v134 = (UText *)*((_QWORD *)this + 4);
            LODWORD(v135) = v134->chunkOffset;
          }
          else
          {
            v134->chunkOffset = v135;
          }
          v250 = v135 - 1;
          if ((int)v135 < 1 || (v251 = v134->chunkContents[v250], v251 >> 11 > 0x1A))
            v251 = utext_previous32(v134);
          else
            v134->chunkOffset = v250;
          if (*v15 >= *((_QWORD *)this + 11) || !sub_18BD64B00(v251))
            goto LABEL_317;
        }
        goto LABEL_318;
      case 0x2C:
        v35 = (int64_t *)*((_QWORD *)this + 24);
        v35[v18 & 0xFFFFFF] = *(int *)(*((_QWORD *)this + 22) + 8);
        v35[v21 + 1] = *v15;
        v35[v21 + 2] = *((_QWORD *)this + 14);
        v35[v21 + 3] = *((_QWORD *)this + 15);
        *((_QWORD *)this + 14) = *((_QWORD *)this + 8);
        *((_QWORD *)this + 15) = *v15;
        v37 = v21 + 4;
        v36 = -1;
LABEL_170:
        v35[v37] = v36;
        goto LABEL_318;
      case 0x2D:
        v15[1] = v17 + 2;
        v136 = *(_QWORD *)(v11 + 8 * v19);
        v15[1] = v17 + 3;
        v137 = *(_QWORD *)(v11 + 8 * (v17 + 2));
        v138 = (UText *)*((_QWORD *)this + 4);
        if (v138->pFuncs->mapNativeIndexToUTF16)
          v139 = 3 * v137;
        else
          v139 = v137;
        v140 = *((_QWORD *)this + 24);
        v141 = (v21 + 4);
        v142 = *(_QWORD *)(v140 + 8 * v141);
        if ((v142 & 0x8000000000000000) == 0)
        {
          if (!v142)
          {
            *(_QWORD *)(v140 + 8 * v141) = -1;
LABEL_641:
            v335 = *((_QWORD *)this + 22);
            v336 = *((int *)this + 14);
            v337 = (*(_DWORD *)(v335 + 8) - v336) & ~((*(_DWORD *)(v335 + 8) - (int)v336) >> 31);
            *(_DWORD *)(v335 + 8) = v337;
            v338 = *(_QWORD *)(v335 + 24) + 8 * v337;
            v339 = *((_QWORD *)this + 24);
            v15 = (int64_t *)(v338 - 8 * v336);
            *((_QWORD *)this + 14) = *(_QWORD *)(v339 + 8 * (v21 + 2));
            v228 = *(_QWORD *)(v339 + 8 * (v21 + 3));
LABEL_642:
            *((_QWORD *)this + 15) = v228;
            goto LABEL_318;
          }
          v143 = v142 - v138->chunkNativeStart;
          if (v143 < 0 || v143 >= v138->nativeIndexingLimit || v138->chunkContents[v143] >> 10 > 0x36u)
          {
            utext_setNativeIndex(v138, v142);
            v138 = (UText *)*((_QWORD *)this + 4);
            LODWORD(v143) = v138->chunkOffset;
          }
          else
          {
            v138->chunkOffset = v143;
          }
          v91 = __OFSUB__((_DWORD)v143, 1);
          v289 = v143 - 1;
          if (v289 < 0 != v91 || v138->chunkContents[v289] >> 11 > 0x1Au)
          {
            utext_previous32(v138);
            v138 = (UText *)*((_QWORD *)this + 4);
            v289 = v138->chunkOffset;
          }
          else
          {
            v138->chunkOffset = v289;
          }
          if (v289 <= v138->nativeIndexingLimit)
          {
            v270 = v138->chunkNativeStart + v289;
            goto LABEL_638;
          }
LABEL_605:
          v270 = ((uint64_t (*)(void))v138->pFuncs->mapOffsetToNative)();
          goto LABEL_638;
        }
        v270 = *v15 - (int)v136;
        *(_QWORD *)(v140 + 8 * v141) = v270;
        if (v270 < 1)
          goto LABEL_639;
        v271 = v270 - v138->chunkNativeStart;
        if (v271 < 0 || (v272 = v138->nativeIndexingLimit, v271 >= v272) || v138->chunkContents[v271] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v138, v270);
          v138 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v271) = v138->chunkOffset;
          LODWORD(v272) = v138->nativeIndexingLimit;
        }
        else
        {
          v138->chunkOffset = v271;
        }
        if ((int)v271 > (int)v272)
          goto LABEL_605;
        v270 = v138->chunkNativeStart + (int)v271;
LABEL_638:
        *(_QWORD *)(v140 + 8 * v141) = v270;
LABEL_639:
        if (v270 < 0 || v270 < *v15 - v139)
          goto LABEL_641;
        if (*(int *)a4 > 0)
          goto LABEL_762;
        v340 = v15[1];
        v341 = *((_QWORD *)this + 22);
        v342 = *((_DWORD *)this + 14);
        v343 = *(_DWORD *)(v341 + 8);
        v344 = v343 + v342;
        if (v343 + v342 >= 0 && *(_DWORD *)(v341 + 12) >= v344)
          goto LABEL_648;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v344, a4))
        {
          v343 = *(_DWORD *)(v341 + 8);
          v344 = v343 + v342;
LABEL_648:
          v59 = (int64_t *)(*(_QWORD *)(v341 + 24) + 8 * v343);
          *(_DWORD *)(v341 + 8) = v344;
        }
        else
        {
          v59 = 0;
        }
        if (*(int *)a4 >= 1)
          goto LABEL_761;
        v389 = 0;
        v390 = v340 - 3;
        v391 = *((int *)this + 14);
        v392 = &v59[-v391];
        v393 = -8 * v391;
        do
        {
          v59[v389] = v392[v389];
          ++v389;
        }
        while (v393 + v389 * 8);
        goto LABEL_767;
      case 0x2E:
        if (*v15 != *((_QWORD *)this + 15))
          goto LABEL_317;
        v114 = *((_QWORD *)this + 24);
LABEL_322:
        *((_QWORD *)this + 14) = *(_QWORD *)(v114 + 8 * (v21 + 2));
        v228 = *(_QWORD *)(v114 + 8 * (v21 + 3));
        goto LABEL_642;
      case 0x2F:
        v15[1] = v17 + 2;
        v144 = *(_QWORD *)(v11 + 8 * v19);
        v15[1] = v17 + 3;
        v145 = (UText *)*((_QWORD *)this + 4);
        if (v145->pFuncs->mapNativeIndexToUTF16)
          v146 = 3 * *(_QWORD *)(v11 + 8 * (v17 + 2));
        else
          v146 = *(_QWORD *)(v11 + 8 * (v17 + 2));
        v15[1] = v17 + 4;
        v147 = *(_QWORD *)(v11 + 8 * (v17 + 3));
        v140 = *((_QWORD *)this + 24);
        v141 = (v21 + 4);
        v148 = *(_QWORD *)(v140 + 8 * v141);
        if ((v148 & 0x8000000000000000) == 0)
        {
          if (!v148)
          {
            *(_QWORD *)(v140 + 8 * v141) = -1;
LABEL_653:
            v111 = v147 & 0xFFFFFF;
            v345 = *((_QWORD *)this + 24);
            *((_QWORD *)this + 14) = *(_QWORD *)(v345 + 8 * (v21 + 2));
            *((_QWORD *)this + 15) = *(_QWORD *)(v345 + 8 * (v21 + 3));
            goto LABEL_654;
          }
          v149 = v148 - v145->chunkNativeStart;
          if (v149 < 0 || v149 >= v145->nativeIndexingLimit || v145->chunkContents[v149] >> 10 > 0x36u)
          {
            utext_setNativeIndex(v145, v148);
            v145 = (UText *)*((_QWORD *)this + 4);
            LODWORD(v149) = v145->chunkOffset;
          }
          else
          {
            v145->chunkOffset = v149;
          }
          v91 = __OFSUB__((_DWORD)v149, 1);
          v290 = v149 - 1;
          if (v290 < 0 != v91 || v145->chunkContents[v290] >> 11 > 0x1Au)
          {
            utext_previous32(v145);
            v145 = (UText *)*((_QWORD *)this + 4);
            v290 = v145->chunkOffset;
          }
          else
          {
            v145->chunkOffset = v290;
          }
          if (v290 <= v145->nativeIndexingLimit)
          {
            v273 = v145->chunkNativeStart + v290;
            goto LABEL_650;
          }
LABEL_608:
          v273 = ((uint64_t (*)(void))v145->pFuncs->mapOffsetToNative)();
          goto LABEL_650;
        }
        v273 = *v15 - (int)v144;
        *(_QWORD *)(v140 + 8 * v141) = v273;
        if (v273 < 1)
          goto LABEL_651;
        v274 = v273 - v145->chunkNativeStart;
        if (v274 < 0 || (v275 = v145->nativeIndexingLimit, v274 >= v275) || v145->chunkContents[v274] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v145, v273);
          v145 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v274) = v145->chunkOffset;
          LODWORD(v275) = v145->nativeIndexingLimit;
        }
        else
        {
          v145->chunkOffset = v274;
        }
        if ((int)v274 > (int)v275)
          goto LABEL_608;
        v273 = v145->chunkNativeStart + (int)v274;
LABEL_650:
        *(_QWORD *)(v140 + 8 * v141) = v273;
LABEL_651:
        if (v273 < 0 || v273 < *v15 - (int)v146)
          goto LABEL_653;
        if (*(int *)a4 > 0)
          goto LABEL_762;
        v346 = v15[1];
        v347 = *((_QWORD *)this + 22);
        v348 = *((_DWORD *)this + 14);
        v349 = *(_DWORD *)(v347 + 8);
        v350 = v349 + v348;
        if (v349 + v348 >= 0 && *(_DWORD *)(v347 + 12) >= v350)
          goto LABEL_660;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v350, a4))
        {
          v349 = *(_DWORD *)(v347 + 8);
          v350 = v349 + v348;
LABEL_660:
          v59 = (int64_t *)(*(_QWORD *)(v347 + 24) + 8 * v349);
          *(_DWORD *)(v347 + 8) = v350;
        }
        else
        {
          v59 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v394 = 0;
          v390 = v346 - 4;
          v395 = *((int *)this + 14);
          v392 = &v59[-v395];
          v396 = -8 * v395;
          do
          {
            v59[v394] = v392[v394];
            ++v394;
          }
          while (v396 + v394 * 8);
LABEL_767:
          v397 = *((_DWORD *)this + 68);
          v91 = __OFSUB__(v397--, 1);
          *((_DWORD *)this + 68) = v397;
          if ((v397 < 0) ^ v91 | (v397 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          v392[1] = v390;
        }
        else
        {
LABEL_761:
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_762:
          v59 = v15;
        }
        *v59 = *(_QWORD *)(v140 + 8 * v141);
        goto LABEL_764;
      case 0x30:
        if (*v15 == *((_QWORD *)this + 15))
        {
          v150 = *((_QWORD *)this + 24);
          *((_QWORD *)this + 14) = *(_QWORD *)(v150 + 8 * (v21 + 2));
          *((_QWORD *)this + 15) = *(_QWORD *)(v150 + 8 * (v21 + 3));
          icu::UVector64::setSize(*((icu::UVector64 **)this + 22), *(_QWORD *)(v150 + 8 * (v18 & 0xFFFFFF)));
        }
        goto LABEL_317;
      case 0x31:
        v151 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v152 = (UText *)*((_QWORD *)this + 4);
        v153 = v151 - v152->chunkNativeStart;
        if (v153 < 0 || v153 >= v152->nativeIndexingLimit || v152->chunkContents[v153] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v152, v151);
          v152 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v153) = v152->chunkOffset;
        }
        else
        {
          v152->chunkOffset = v153;
        }
        if ((int)v153 >= v152->chunkLength || (v252 = v152->chunkContents[(int)v153], v252 >> 11 > 0x1A))
          v252 = utext_next32(v152);
        else
          v152->chunkOffset = v153 + 1;
        v281 = v18 & 0xFFFFFF;
        if (v252 > 255)
        {
          if (icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 200 * v281 + 8), v252))goto LABEL_317;
        }
        else if (((*(unsigned __int8 *)(qword_1ECD284E8 + 32 * v281 + (v252 >> 3) + 2608) >> (v252 & 7)) & 1) != 0)
        {
          goto LABEL_317;
        }
        goto LABEL_614;
      case 0x32:
        v154 = *(_QWORD *)(*((_QWORD *)this + 1) + 112);
        v155 = (icu::UnicodeSet *)icu::UVector::elementAt(v400, v18 & 0xFFFFFF);
        v156 = *v15;
        v157 = (UText *)*((_QWORD *)this + 4);
        v158 = *v15 - v157->chunkNativeStart;
        if (v158 < 0 || v158 >= v157->nativeIndexingLimit || v157->chunkContents[v158] >> 10 > 0x36u)
          utext_setNativeIndex(v157, *v15);
        else
          v157->chunkOffset = v158;
        if (v156 >= *((_QWORD *)this + 15))
          goto LABEL_298;
        v210 = v154 + 32 * (v18 & 0xFFFFFF);
        do
        {
          v211 = (UText *)*((_QWORD *)this + 4);
          v212 = v211->chunkOffset;
          if ((int)v212 >= v211->chunkLength || (v213 = v211->chunkContents[v212], v213 >> 11 > 0x1A))
            v213 = utext_next32(v211);
          else
            v211->chunkOffset = v212 + 1;
          if (v213 > 255)
          {
            if (!icu::UnicodeSet::contains(v155, v213))
              goto LABEL_299;
          }
          else if (((*(unsigned __int8 *)(v210 + (v213 >> 3)) >> (v213 & 7)) & 1) == 0)
          {
            goto LABEL_299;
          }
          v214 = *((_QWORD *)this + 4);
          v215 = *(int *)(v214 + 40);
          if ((int)v215 <= *(_DWORD *)(v214 + 28))
            v156 = *(_QWORD *)(v214 + 32) + v215;
          else
            v156 = (*(uint64_t (**)(void))(*(_QWORD *)(v214 + 56) + 64))();
        }
        while (v156 < *((_QWORD *)this + 15));
LABEL_298:
        *((_BYTE *)this + 168) = 1;
LABEL_299:
        v216 = v15[1];
        if (v156 == *v15)
          goto LABEL_412;
        v15[(*(_QWORD *)(v11 + 8 * v216) & 0xFFFFFFLL) + 2] = *v15;
        *v15 = v156;
        if (*(int *)a4 > 0)
          goto LABEL_704;
        v217 = *((_QWORD *)this + 22);
        v218 = *((_DWORD *)this + 14);
        v219 = *(_DWORD *)(v217 + 8);
        v220 = v219 + v218;
        if (v219 + v218 >= 0 && *(_DWORD *)(v217 + 12) >= v220)
          goto LABEL_305;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v220, a4))
        {
          v219 = *(_DWORD *)(v217 + 8);
          v220 = v219 + v218;
LABEL_305:
          v59 = (int64_t *)(*(_QWORD *)(v217 + 24) + 8 * v219);
          *(_DWORD *)(v217 + 8) = v220;
        }
        else
        {
          v59 = 0;
        }
        if (*(int *)a4 >= 1)
          goto LABEL_703;
        v363 = 0;
        v364 = *((int *)this + 14);
        v365 = &v59[-v364];
        v366 = -8 * v364;
        do
        {
          v59[v363] = v365[v363];
          ++v363;
        }
        while (v366 + v363 * 8);
        goto LABEL_708;
      case 0x33:
        v159 = v15[(v18 & 0xFFFFFF) + 2];
        v160 = *v15;
        if (v159 == *v15)
          goto LABEL_318;
        v161 = (UText *)*((_QWORD *)this + 4);
        v162 = v160 - v161->chunkNativeStart;
        if (v162 < 0 || v162 >= v161->nativeIndexingLimit || v161->chunkContents[v162] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v161, v160);
          v161 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v162) = v161->chunkOffset;
        }
        else
        {
          v161->chunkOffset = v162;
        }
        v253 = v162 - 1;
        if ((int)v162 < 1 || (v254 = v161->chunkContents[v253], v254 >> 11 > 0x1A))
        {
          v254 = utext_previous32(v161);
          v161 = (UText *)*((_QWORD *)this + 4);
          v253 = v161->chunkOffset;
        }
        else
        {
          v161->chunkOffset = v253;
        }
        if (v253 <= v161->nativeIndexingLimit)
        {
          v288 = v161->chunkNativeStart + v253;
        }
        else
        {
          v288 = ((uint64_t (*)(void))v161->pFuncs->mapOffsetToNative)();
          v161 = (UText *)*((_QWORD *)this + 4);
          v253 = v161->chunkOffset;
        }
        *v15 = v288;
        v91 = __OFSUB__(v253, 1);
        v308 = v253 - 1;
        if (v308 < 0 != v91 || (v309 = v161->chunkContents[v308], v309 >> 11 > 0x1A))
          v309 = utext_previous32(v161);
        else
          v161->chunkOffset = v308;
        if (v254 == 10)
        {
          v310 = *v15 > v159 && v309 == 13;
          if (v310 && (unint64_t)*(unsigned __int8 *)(v11 + 8 * v15[1] - 13) << 24 == 872415232)
          {
            v311 = *((_QWORD *)this + 4);
            v312 = *(int *)(v311 + 40);
            if ((int)v312 <= *(_DWORD *)(v311 + 28))
              v313 = *(_QWORD *)(v311 + 32) + v312;
            else
              v313 = (*(uint64_t (**)(void))(*(_QWORD *)(v311 + 56) + 64))();
            *v15 = v313;
          }
        }
        if (*(int *)a4 > 0)
          goto LABEL_777;
        v376 = v15[1];
        v377 = *((_QWORD *)this + 22);
        v378 = *((_DWORD *)this + 14);
        v379 = *(_DWORD *)(v377 + 8);
        v380 = v379 + v378;
        if (v379 + v378 >= 0 && *(_DWORD *)(v377 + 12) >= v380)
          goto LABEL_736;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v380, a4))
        {
          v379 = *(_DWORD *)(v377 + 8);
          v380 = v379 + v378;
LABEL_736:
          v59 = (int64_t *)(*(_QWORD *)(v377 + 24) + 8 * v379);
          *(_DWORD *)(v377 + 8) = v380;
        }
        else
        {
          v59 = 0;
        }
        if (*(int *)a4 <= 0)
        {
          v381 = 0;
          v382 = v376 - 1;
          v383 = *((int *)this + 14);
          v384 = &v59[-v383];
          v385 = -8 * v383;
          do
          {
            v59[v381] = v384[v381];
            ++v381;
          }
          while (v385 + v381 * 8);
          v386 = *((_DWORD *)this + 68);
          v91 = __OFSUB__(v386--, 1);
          *((_DWORD *)this + 68) = v386;
          if ((v386 < 0) ^ v91 | (v386 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          v384[1] = v382;
LABEL_764:
          v15 = v59;
LABEL_318:
          if (*(int *)a4 >= 1)
            goto LABEL_777;
          continue;
        }
LABEL_775:
        v20 = U_REGEX_STACK_OVERFLOW;
LABEL_776:
        *a4 = v20;
LABEL_777:
        *((_BYTE *)this + 130) = 0;
LABEL_778:
        *((_QWORD *)this + 23) = v15;
        return;
      case 0x34:
        if ((v18 & 1) != 0)
        {
          v163 = *((_QWORD *)this + 15);
LABEL_410:
          *((_BYTE *)this + 168) = 1;
          goto LABEL_411;
        }
        v163 = *v15;
        v164 = (UText *)*((_QWORD *)this + 4);
        v165 = *v15 - v164->chunkNativeStart;
        if (v165 < 0 || v165 >= v164->nativeIndexingLimit || v164->chunkContents[v165] >> 10 > 0x36u)
          utext_setNativeIndex(v164, *v15);
        else
          v164->chunkOffset = v165;
        if (v163 >= *((_QWORD *)this + 15))
          goto LABEL_410;
        while (1)
        {
          v255 = *((_QWORD *)this + 4);
          v256 = *(int *)(v255 + 40);
          if ((int)v256 >= *(_DWORD *)(v255 + 44)
            || (v257 = *(unsigned __int16 *)(*(_QWORD *)(v255 + 48) + 2 * v256), v257 >> 11 > 0x1A))
          {
            v257 = utext_next32(*((UText **)this + 4));
          }
          else
          {
            *(_DWORD *)(v255 + 40) = v256 + 1;
          }
          if ((v257 & 0x7E) <= 0x29)
          {
            if (v257 == 10)
              break;
            if (!(v257 & 0xFFFFDF50 | v18 & 2))
            {
              v258 = v257 - 11 >= 3 && v257 - 8232 >= 2;
              if (!v258 || v257 == 133)
                break;
            }
          }
          v259 = *((_QWORD *)this + 4);
          v260 = *(int *)(v259 + 40);
          if ((int)v260 <= *(_DWORD *)(v259 + 28))
            v163 = *(_QWORD *)(v259 + 32) + v260;
          else
            v163 = (*(uint64_t (**)(void))(*(_QWORD *)(v259 + 56) + 64))();
          if (v163 >= *((_QWORD *)this + 15))
            goto LABEL_410;
        }
LABEL_411:
        v216 = v15[1];
        if (v163 == *v15)
        {
LABEL_412:
          v111 = v216 + 1;
          goto LABEL_654;
        }
        v15[(*(_QWORD *)(v11 + 8 * v216) & 0xFFFFFFLL) + 2] = *v15;
        *v15 = v163;
        if (*(int *)a4 > 0)
          goto LABEL_704;
        v261 = *((_QWORD *)this + 22);
        v262 = *((_DWORD *)this + 14);
        v263 = *(_DWORD *)(v261 + 8);
        v264 = v263 + v262;
        if (v263 + v262 >= 0 && *(_DWORD *)(v261 + 12) >= v264)
          goto LABEL_418;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v264, a4))
        {
          v263 = *(_DWORD *)(v261 + 8);
          v264 = v263 + v262;
LABEL_418:
          v59 = (int64_t *)(*(_QWORD *)(v261 + 24) + 8 * v263);
          *(_DWORD *)(v261 + 8) = v264;
        }
        else
        {
          v59 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v367 = 0;
          v368 = *((int *)this + 14);
          v365 = &v59[-v368];
          v369 = -8 * v368;
          do
          {
            v59[v367] = v365[v367];
            ++v367;
          }
          while (v369 + v367 * 8);
LABEL_708:
          v370 = *((_DWORD *)this + 68);
          v91 = __OFSUB__(v370--, 1);
          *((_DWORD *)this + 68) = v370;
          if ((v370 < 0) ^ v91 | (v370 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          v365[1] = v216;
        }
        else
        {
LABEL_703:
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_704:
          v59 = v15;
        }
        ++v59[1];
        goto LABEL_764;
      case 0x35:
        isWordBoundary = icu::RegexMatcher::isUWordBoundary(this, *v15, a4);
LABEL_213:
        if (isWordBoundary != (v21 != 0))
          goto LABEL_318;
        goto LABEL_317;
      case 0x36:
        v166 = *v15;
        if (*v15 >= *((_QWORD *)this + 11))
          goto LABEL_751;
        v167 = (UText *)*((_QWORD *)this + 4);
        v168 = v166 - v167->chunkNativeStart;
        if (v168 < 0 || v168 >= v167->nativeIndexingLimit || v167->chunkContents[v168] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v167, v166);
          v167 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v168) = v167->chunkOffset;
        }
        else
        {
          v167->chunkOffset = v168;
        }
        if ((int)v168 >= v167->chunkLength || (v265 = v167->chunkContents[(int)v168], v265 >> 11 > 0x1A))
          v265 = utext_next32(v167);
        else
          v167->chunkOffset = v168 + 1;
        if (v265 == 10)
        {
          v282 = *((_QWORD *)this + 4);
          v283 = *(int *)(v282 + 40);
          v284 = (int)v283 <= *(_DWORD *)(v282 + 28)
               ? *(_QWORD *)(v282 + 32) + v283
               : (*(uint64_t (**)(void))(*(_QWORD *)(v282 + 56) + 64))();
          if (v284 == *((_QWORD *)this + 11))
            goto LABEL_751;
        }
        goto LABEL_317;
      case 0x37:
        v169 = *v15;
        if (*v15 >= *((_QWORD *)this + 11))
          goto LABEL_751;
        v170 = (UText *)*((_QWORD *)this + 4);
        v171 = v169 - v170->chunkNativeStart;
        if (v171 < 0 || v171 >= v170->nativeIndexingLimit || v170->chunkContents[v171] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v170, v169);
          v170 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v171) = v170->chunkOffset;
        }
        else
        {
          v170->chunkOffset = v171;
        }
        if ((int)v171 < v170->chunkLength)
        {
          v243 = v170->chunkContents[(int)v171];
          if (v243 >> 11 <= 0x1A)
            goto LABEL_513;
        }
        v266 = utext_current32(v170);
        goto LABEL_512;
      case 0x38:
        v172 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v173 = (UText *)*((_QWORD *)this + 4);
        v174 = v172 - v173->chunkNativeStart;
        if (v174 < 0 || v174 >= v173->nativeIndexingLimit || v173->chunkContents[v174] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v173, v172);
          v173 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v174) = v173->chunkOffset;
        }
        else
        {
          v173->chunkOffset = v174;
        }
        if ((int)v174 >= v173->chunkLength || (v267 = v173->chunkContents[(int)v174], v267 >> 11 > 0x1A))
          v267 = utext_next32(v173);
        else
          v173->chunkOffset = v174 + 1;
        v285 = u_charType(v267);
        v279 = v267 == 9 || v285 == 12;
LABEL_497:
        v286 = v279;
        v287 = v21 != 0;
        goto LABEL_613;
      case 0x39:
        v175 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v176 = (UText *)*((_QWORD *)this + 4);
        v177 = v175 - v176->chunkNativeStart;
        if (v177 < 0 || v177 >= v176->nativeIndexingLimit || v176->chunkContents[v177] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v176, v175);
          v176 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v177) = v176->chunkOffset;
        }
        else
        {
          v176->chunkOffset = v177;
        }
        if ((int)v177 >= v176->chunkLength || (v268 = v176->chunkContents[(int)v177], v268 >> 11 > 0x1A))
          v268 = utext_next32(v176);
        else
          v176->chunkOffset = v177 + 1;
        if ((v268 & 0xFFFFDF50) != 0)
          goto LABEL_317;
        if (v268 <= 132)
        {
          if ((v268 - 10) >= 3)
          {
            if (v268 != 13)
              goto LABEL_317;
            if (utext_current32(*((UText **)this + 4)) == 10)
              utext_next32(*((UText **)this + 4));
          }
LABEL_614:
          v184 = (UText *)*((_QWORD *)this + 4);
          goto LABEL_615;
        }
        if ((v268 - 8232) < 2 || v268 == 133)
          goto LABEL_614;
        goto LABEL_317;
      case 0x3A:
        v178 = *v15;
        if (*v15 >= *((_QWORD *)this + 15))
          goto LABEL_316;
        v179 = (UText *)*((_QWORD *)this + 4);
        v180 = v178 - v179->chunkNativeStart;
        if (v180 < 0 || v180 >= v179->nativeIndexingLimit || v179->chunkContents[v180] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v179, v178);
          v179 = (UText *)*((_QWORD *)this + 4);
          LODWORD(v180) = v179->chunkOffset;
        }
        else
        {
          v179->chunkOffset = v180;
        }
        if ((int)v180 >= v179->chunkLength || (v269 = v179->chunkContents[(int)v180], v269 >> 11 > 0x1A))
          v269 = utext_next32(v179);
        else
          v179->chunkOffset = v180 + 1;
        if ((v269 & 0xFFFFDF50) != 0 || (v287 = 1, v269 - 10 >= 4) && v269 - 8232 >= 2 && v269 != 133)
          v287 = 0;
        v286 = v21 != 0;
LABEL_613:
        if (v287 != v286)
          goto LABEL_614;
        goto LABEL_317;
      default:
        goto LABEL_776;
    }
  }
}

uint64_t sub_18BD64B00(int a1)
{
  _BOOL4 v1;
  unsigned int v2;

  v1 = (a1 - 8232) < 2 || a1 == 133;
  v2 = (a1 - 10) < 4 || v1;
  if ((a1 & 0xFFFFDF50) != 0)
    return 0;
  else
    return v2;
}

uint64_t icu::RegexMatcher::find(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  UErrorCode v3;
  uint64_t v4;

  if (*(int *)a3 > 0)
    return 0;
  v3 = *((_DWORD *)this + 79);
  if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_6:
    *a3 = v3;
    return 0;
  }
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = v4;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = v4;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = v4;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = v4;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 268) = 0x271000000000;
  if (a2 < 0 || v4 < a2)
  {
    v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_6;
  }
  *((_QWORD *)this + 18) = a2;
  return icu::RegexMatcher::find(this, a3);
}

double icu::RegexMatcher::reset(icu::RegexMatcher *this)
{
  uint64_t v1;
  double result;

  v1 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = v1;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = v1;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = v1;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = v1;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  result = NAN;
  *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 268) = 0x271000000000;
  return result;
}

void icu::RegexMatcher::MatchChunkAt(icu::RegexMatcher *this, int a2, int a3, UErrorCode *a4)
{
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  icu::UVector *v12;
  uint64_t v13;
  _QWORD *v14;
  UErrorCode v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  UErrorCode v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v63;
  BOOL v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int isChunkWordBoundary;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  UChar32 v89;
  int v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  BOOL v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v127;
  int v128;
  uint64_t v129;
  icu::UVector64 *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned __int16 *v140;
  uint64_t v141;
  unsigned __int16 *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  UChar32 v156;
  int v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  int v164;
  int v166;
  BOOL v167;
  int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  icu::UnicodeSet *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  int v212;
  BOOL v213;
  int v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  BOOL v227;
  int v228;
  BOOL v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  UChar32 v235;
  int v237;
  int v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  int v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  int v269;
  int v270;
  int v271;
  BOOL v272;
  unsigned int v274;
  icu::UnicodeSet *v275;
  BOOL v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  BOOL v283;
  uint64_t v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  unsigned int v300;
  unsigned int v302;
  BOOL v303;
  unsigned int v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  int v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  uint64_t v330;
  uint64_t v331;
  _QWORD *v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  int v360;
  uint64_t v361;
  int v362;
  icu::UVector *v363;
  uint64_t v364;
  _OWORD v365[2];
  uint64_t v366;
  __int128 v367;
  __int128 v368;
  uint64_t v369;

  if (*(int *)a4 > 0)
    return;
  v8 = *((_QWORD *)this + 1);
  v9 = *(_WORD *)(v8 + 48);
  if ((v9 & 0x11) != 0)
  {
    v10 = 0;
  }
  else if ((v9 & 2) != 0)
  {
    v10 = v8 + 50;
  }
  else
  {
    v10 = *(_QWORD *)(v8 + 64);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 24);
  v12 = *(icu::UVector **)(v8 + 104);
  v13 = *(_QWORD *)(*((_QWORD *)this + 4) + 48);
  *((_DWORD *)this + 14) = *(_DWORD *)(v8 + 128);
  v14 = (_QWORD *)icu::RegexMatcher::resetStack(this);
  v15 = *((_DWORD *)this + 79);
  if (v15 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *a4 = v15;
    return;
  }
  v16 = (uint64_t)v14;
  v363 = v12;
  v364 = v10;
  v362 = a3;
  *v14 = a2;
  v14[1] = 0;
  v361 = a2;
  v17 = *(unsigned int *)(*((_QWORD *)this + 1) + 132);
  if ((int)v17 >= 1)
    bzero(*((void **)this + 24), 8 * v17);
  while (1)
  {
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v11 + 8 * v18);
    v20 = v18 + 1;
    *(_QWORD *)(v16 + 8) = v18 + 1;
    v21 = U_INTERNAL_PROGRAM_ERROR;
    v22 = v19 & 0xFFFFFF;
    switch(BYTE3(v19))
    {
      case 1:
        goto LABEL_337;
      case 2:
        if (v362 && *(_QWORD *)v16 != *((_QWORD *)this + 15))
          goto LABEL_337;
        *((_BYTE *)this + 130) = 1;
        *((_QWORD *)this + 19) = *((_QWORD *)this + 18);
        *((_QWORD *)this + 17) = v361;
        *((_QWORD *)this + 18) = *(_QWORD *)v16;
        goto LABEL_604;
      case 3:
        v23 = *(_QWORD *)v16;
        v24 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v24)
          goto LABEL_336;
        v25 = v23 + 1;
        *(_QWORD *)v16 = v23 + 1;
        v26 = *(unsigned __int16 *)(v13 + 2 * v23);
        if ((v26 & 0xFC00) == 0xD800 && v25 != v24)
        {
          v28 = *(unsigned __int16 *)(v13 + 2 * v25);
          if ((v28 & 0xFC00) == 0xDC00)
          {
            *(_QWORD *)v16 = v23 + 2;
            v26 = (v26 << 10) - 56613888 + v28;
          }
        }
        if (v26 == v22)
          goto LABEL_602;
        goto LABEL_337;
      case 4:
        v29 = *(_QWORD *)(v11 + 8 * v20);
        *(_QWORD *)(v16 + 8) = v18 + 2;
        v30 = v29 & 0xFFFFFF;
        v31 = (unsigned __int16 *)(v13 + 2 * *(_QWORD *)v16);
        v32 = (unsigned __int16 *)(v364 + 2 * (v19 & 0xFFFFFF));
        v33 = &v31[v30];
        while (v31 < v33)
        {
          if ((unint64_t)v31 >= v13 + 2 * *((_QWORD *)this + 15))
            goto LABEL_336;
          v35 = *v31++;
          v34 = v35;
          v36 = *v32++;
          if (v34 != v36)
            goto LABEL_337;
        }
        v137 = *(_QWORD *)v16 + v30;
        goto LABEL_395;
      case 6:
        if (*(int *)a4 > 0)
          goto LABEL_603;
        v37 = *((_QWORD *)this + 22);
        v38 = *((_DWORD *)this + 14);
        v39 = *(_DWORD *)(v37 + 8);
        v40 = v39 + v38;
        if (v39 + v38 >= 0 && *(_DWORD *)(v37 + 12) >= v40)
          goto LABEL_34;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v40, a4))
        {
          v39 = *(_DWORD *)(v37 + 8);
          v40 = v39 + v38;
LABEL_34:
          v41 = *(_QWORD *)(v37 + 24) + 8 * v39;
          *(_DWORD *)(v37 + 8) = v40;
        }
        else
        {
          v41 = 0;
        }
        if (*(int *)a4 > 0)
          goto LABEL_607;
        v293 = 0;
        v294 = *((int *)this + 14);
        v295 = v41 - 8 * v294;
        v296 = -8 * v294;
        do
        {
          *(_QWORD *)(v41 + v293) = *(_QWORD *)(v295 + v293);
          v293 += 8;
        }
        while (v296 + v293);
        v297 = *((_DWORD *)this + 68);
        v120 = __OFSUB__(v297--, 1);
        *((_DWORD *)this + 68) = v297;
        if ((v297 < 0) ^ v120 | (v297 == 0))
          icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        *(_QWORD *)(v295 + 8) = v19 & 0xFFFFFF;
LABEL_441:
        v16 = v41;
        goto LABEL_602;
      case 7:
        goto LABEL_602;
      case 8:
        v42 = *(_QWORD *)v16;
        v43 = v16 + 8 * (v22 + 2);
        goto LABEL_157;
      case 9:
        v44 = v16 + 16;
        v45 = *(_QWORD *)v16;
        *(_QWORD *)(v16 + 16 + 8 * (v19 & 0xFFFFFF)) = *(_QWORD *)(v16 + 16 + 8 * (v22 + 2));
        v46 = v22 + 1;
        goto LABEL_209;
      case 0xA:
        v47 = *(_QWORD *)v16;
        v48 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v48)
          goto LABEL_336;
        v49 = v19 & 0x7FFFFF;
        v50 = v47 + 1;
        *(_QWORD *)v16 = v47 + 1;
        v51 = *(unsigned __int16 *)(v13 + 2 * v47);
        if ((v51 & 0xFC00) == 0xD800)
        {
          if (v50 != v48)
          {
            v52 = *(unsigned __int16 *)(v13 + 2 * v50);
            if ((v52 & 0xFC00) == 0xDC00)
            {
              *(_QWORD *)v16 = v47 + 2;
              LODWORD(v51) = ((_DWORD)v51 << 10) - 56613888 + v52;
            }
          }
        }
        else if (v51 <= 0xFF)
        {
          v272 = ((*(unsigned __int8 *)(qword_1ECD284E8 + 32 * v49 + (v51 >> 3) + 2608) >> (v51 & 7)) & 1) == 0;
          goto LABEL_374;
        }
        v272 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 200 * v49 + 8), v51) == 0;
LABEL_374:
        if (v272)
          v274 = (v19 & 0x800000) >> 23;
        else
          v274 = (v19 & 0x800000) == 0;
        if (!v274)
          goto LABEL_337;
        goto LABEL_602;
      case 0xB:
        v53 = *(_QWORD *)v16;
        v54 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v54)
          goto LABEL_336;
        v55 = v53 + 1;
        *(_QWORD *)v16 = v53 + 1;
        v56 = *(unsigned __int16 *)(v13 + 2 * v53);
        if ((v56 & 0xFC00) == 0xD800)
        {
          if (v55 != v54)
          {
            v57 = *(unsigned __int16 *)(v13 + 2 * v55);
            if ((v57 & 0xFC00) == 0xDC00)
            {
              *(_QWORD *)v16 = v53 + 2;
              LODWORD(v56) = ((_DWORD)v56 << 10) - 56613888 + v57;
            }
          }
        }
        else if (v56 <= 0xFF)
        {
          if (((*(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 112) + 32 * (v19 & 0xFFFFFF) + (v56 >> 3)) >> (v56 & 7)) & 1) != 0)
            goto LABEL_602;
          goto LABEL_337;
        }
        v275 = (icu::UnicodeSet *)icu::UVector::elementAt(v363, v19 & 0xFFFFFF);
        v179 = icu::UnicodeSet::contains(v275, v56);
LABEL_386:
        if (v179)
          goto LABEL_602;
        goto LABEL_337;
      case 0xC:
        v58 = *(_QWORD *)v16;
        v59 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v59)
          goto LABEL_336;
        v60 = v58 + 1;
        *(_QWORD *)v16 = v58 + 1;
        v61 = *(unsigned __int16 *)(v13 + 2 * v58);
        if ((v61 & 0xFC00) == 0xD800 && v60 != v59)
        {
          v63 = *(unsigned __int16 *)(v13 + 2 * v60);
          if ((v63 & 0xFC00) == 0xDC00)
          {
            *(_QWORD *)v16 = v58 + 2;
            v61 = (v61 << 10) - 56613888 + v63;
          }
        }
        if ((v61 & 0xFFFFDF50) != 0)
          goto LABEL_602;
        v64 = (v61 - 10) >= 4 && (v61 - 8232) >= 2;
        if (v64 && v61 != 133)
          goto LABEL_602;
        goto LABEL_337;
      case 0xD:
        goto LABEL_159;
      case 0xE:
        goto LABEL_603;
      case 0xF:
        if (*(int *)a4 > 0)
          goto LABEL_506;
        v65 = *((_QWORD *)this + 22);
        v66 = *((_DWORD *)this + 14);
        v67 = *(_DWORD *)(v65 + 8);
        v68 = v67 + v66;
        if (v67 + v66 >= 0 && *(_DWORD *)(v65 + 12) >= v68)
          goto LABEL_67;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v68, a4))
        {
          v67 = *(_DWORD *)(v65 + 8);
          v68 = v67 + v66;
LABEL_67:
          v69 = *(_QWORD *)(v65 + 24) + 8 * v67;
          *(_DWORD *)(v65 + 8) = v68;
        }
        else
        {
          v69 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v325 = 0;
          v326 = *((int *)this + 14);
          v327 = v69 - 8 * v326;
          v328 = -8 * v326;
          do
          {
            *(_QWORD *)(v69 + v325) = *(_QWORD *)(v327 + v325);
            v325 += 8;
          }
          while (v328 + v325);
          v329 = *((_DWORD *)this + 68);
          v120 = __OFSUB__(v329--, 1);
          *((_DWORD *)this + 68) = v329;
          if ((v329 < 0) ^ v120 | (v329 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          *(_QWORD *)(v327 + 8) = v20;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_506:
          v69 = v16;
        }
        v324 = v19 & 0xFFFFFF;
        goto LABEL_541;
      case 0x10:
        isChunkWordBoundary = icu::RegexMatcher::isChunkWordBoundary(this, *(_DWORD *)v16);
        goto LABEL_280;
      case 0x11:
        v71 = *(_QWORD *)v16;
        if (*((_BYTE *)this + 130))
          v72 = *((_QWORD *)this + 18);
        else
          v72 = *((_QWORD *)this + 14);
        goto LABEL_365;
      case 0x12:
        v73 = *(_QWORD *)(v11 + 8 * (v22 - 1)) & 0xFFFFFFLL;
        if (*(int *)(v16 + 8 * v73 + 16) >= *(_QWORD *)v16)
          goto LABEL_602;
        if (*(int *)a4 > 0)
          goto LABEL_528;
        v74 = *((_QWORD *)this + 22);
        v75 = *((_DWORD *)this + 14);
        v76 = *(_DWORD *)(v74 + 8);
        v77 = v76 + v75;
        if (v76 + v75 >= 0 && *(_DWORD *)(v74 + 12) >= v77)
          goto LABEL_77;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v77, a4))
        {
          v76 = *(_DWORD *)(v74 + 8);
          v77 = v76 + v75;
LABEL_77:
          v78 = (_QWORD *)(*(_QWORD *)(v74 + 24) + 8 * v76);
          *(_DWORD *)(v74 + 8) = v77;
        }
        else
        {
          v78 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v330 = 0;
          v331 = *((int *)this + 14);
          v332 = &v78[-v331];
          v333 = -8 * v331;
          do
          {
            v78[v330] = v332[v330];
            ++v330;
          }
          while (v333 + v330 * 8);
          v334 = *((_DWORD *)this + 68);
          v120 = __OFSUB__(v334--, 1);
          *((_DWORD *)this + 68) = v334;
          if ((v334 < 0) ^ v120 | (v334 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          v332[1] = v20;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_528:
          v78 = (_QWORD *)v16;
        }
        v78[1] = v19 & 0xFFFFFF;
        v78[v73 + 2] = *v78;
        goto LABEL_553;
      case 0x13:
        if (*(_QWORD *)v16 >= *((_QWORD *)this + 15))
        {
          *((_BYTE *)this + 168) = 1;
          v263 = *((_QWORD *)this + 22);
          v264 = *((int *)this + 14);
          v265 = (*(_DWORD *)(v263 + 8) - v264) & ~((*(_DWORD *)(v263 + 8) - (int)v264) >> 31);
          *(_DWORD *)(v263 + 8) = v265;
          v16 = *(_QWORD *)(v263 + 24) + 8 * v265 - 8 * v264;
        }
        else
        {
          v79 = icu::RegexMatcher::followingGCBoundary(this, *(_QWORD *)v16, a4);
          *(_QWORD *)v16 = v79;
          v80 = *((_QWORD *)this + 15);
          if (v79 >= v80)
          {
            *((_BYTE *)this + 168) = 1;
            *(_QWORD *)v16 = v80;
          }
        }
        goto LABEL_602;
      case 0x14:
        if (*(_QWORD *)v16 >= *((_QWORD *)this + 11))
          goto LABEL_601;
        goto LABEL_337;
      case 0x15:
        v81 = *(_QWORD *)v16;
        v82 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v82)
          goto LABEL_336;
        v83 = v81 + 1;
        *(_QWORD *)v16 = v81 + 1;
        v84 = *(unsigned __int16 *)(v13 + 2 * v81);
        if ((v84 & 0xFC00) == 0xD800)
        {
          if (v83 == v82)
            goto LABEL_602;
          v85 = *(_WORD *)(v13 + 2 * v83);
          goto LABEL_118;
        }
        v276 = v84 == 13 && v83 < v82;
        if (!v276 || *(_WORD *)(v13 + 2 * v83) != 10)
          goto LABEL_602;
        goto LABEL_394;
      case 0x16:
        v86 = *(_QWORD *)v16;
        v87 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v87)
          goto LABEL_336;
        v88 = v86 + 1;
        *(_QWORD *)v16 = v86 + 1;
        v89 = *(unsigned __int16 *)(v13 + 2 * v86);
        if ((v89 & 0xFC00) == 0xD800 && v88 != v87)
        {
          v91 = *(unsigned __int16 *)(v13 + 2 * v88);
          if ((v91 & 0xFC00) == 0xDC00)
          {
            *(_QWORD *)v16 = v86 + 2;
            v89 = (v89 << 10) - 56613888 + v91;
          }
        }
        v92 = u_charType(v89) == 9;
        goto LABEL_301;
      case 0x17:
        v71 = *(_QWORD *)v16;
        v72 = *((_QWORD *)this + 10);
LABEL_365:
        if (v71 == v72)
          goto LABEL_602;
        goto LABEL_337;
      case 0x18:
        v93 = *(_QWORD *)v16;
        v94 = *((_QWORD *)this + 11);
        if (*(_QWORD *)v16 < v94 - 2)
          goto LABEL_337;
        if (v93 >= v94)
          goto LABEL_601;
        if (v93 == v94 - 1)
        {
          v95 = *(unsigned __int16 *)(v13 + 2 * v93);
          if ((v95 & 0xF800) == 0xD800)
          {
            if ((v95 & 0x400) != 0)
            {
              if (v93 <= *((_QWORD *)this + 10))
                goto LABEL_597;
              v360 = *(unsigned __int16 *)(v13 + 2 * v93 - 2);
              v97 = (v360 & 0xFC00) == 55296;
              v98 = v95 - 56613888 + (v360 << 10);
            }
            else
            {
              if (v93 + 1 == v94)
                goto LABEL_597;
              v96 = *(unsigned __int16 *)(v13 + 2 * (v93 + 1));
              v97 = (v96 & 0xFC00) == 56320;
              v98 = (v95 << 10) - 56613888 + v96;
            }
            if (v97)
              v95 = v98;
          }
LABEL_597:
          if (sub_18BD64B00(v95)
            && (v95 != 10 || v93 <= *((_QWORD *)this + 10) || *(_WORD *)(v13 + 2 * v93 - 2) != 13))
          {
            goto LABEL_601;
          }
          goto LABEL_337;
        }
        if (v93 == v94 - 2 && *(_WORD *)(v13 + 2 * v93) == 13)
        {
          v231 = *(unsigned __int16 *)(v13 + 2 * v93 + 2);
LABEL_285:
          if (v231 == 10)
          {
LABEL_601:
            *((_WORD *)this + 84) = 257;
            goto LABEL_602;
          }
        }
        goto LABEL_337;
      case 0x19:
        *(_QWORD *)(v16 + 8 * (v19 & 0xFFFFFF) + 16) = 0;
        *(_QWORD *)(v16 + 8) = v18 + 4;
        v99 = *(_DWORD *)(v11 + (((v20 << 32) + 0x200000000) >> 29));
        if (*(_DWORD *)(v11 + (((v20 << 32) + 0x100000000) >> 29)) || *(int *)a4 > 0)
          goto LABEL_565;
        v100 = *(_QWORD *)(v11 + 8 * (int)v20);
        v101 = *((_QWORD *)this + 22);
        v102 = *((_DWORD *)this + 14);
        v103 = *(_DWORD *)(v101 + 8);
        v104 = v103 + v102;
        if (v103 + v102 >= 0 && *(_DWORD *)(v101 + 12) >= v104)
          goto LABEL_109;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v104, a4))
        {
          v103 = *(_DWORD *)(v101 + 8);
          v104 = v103 + v102;
LABEL_109:
          v105 = (_QWORD *)(*(_QWORD *)(v101 + 24) + 8 * v103);
          *(_DWORD *)(v101 + 8) = v104;
        }
        else
        {
          v105 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v345 = 0;
          v346 = (v100 & 0xFFFFFF) + 1;
          v347 = *((int *)this + 14);
          v348 = &v105[-v347];
          v349 = -8 * v347;
          do
          {
            v105[v345] = v348[v345];
            ++v345;
          }
          while (v349 + v345 * 8);
          v350 = *((_DWORD *)this + 68);
          v120 = __OFSUB__(v350--, 1);
          *((_DWORD *)this + 68) = v350;
          if ((v350 < 0) ^ v120 | (v350 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          v348[1] = v346;
          if (v99)
            goto LABEL_566;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_565:
          v105 = (_QWORD *)v16;
          if (v99)
          {
LABEL_566:
            if (v99 == -1)
              v105[(v22 + 1) + 2] = *v105;
            goto LABEL_585;
          }
        }
        goto LABEL_337;
      case 0x1A:
        *(_QWORD *)(v16 + 8 * (v19 & 0xFFFFFF) + 16) = 0;
        v106 = v18 + 4;
        *(_QWORD *)(v16 + 8) = v18 + 4;
        v107 = *(_QWORD *)(v11 + 8 * (int)v20);
        v108 = *(unsigned int *)(v11 + (((v20 << 32) + 0x100000000) >> 29));
        v109 = *(_DWORD *)(v11 + (((v20 << 32) + 0x200000000) >> 29));
        if (v109 == -1)
        {
          *(_QWORD *)(v16 + 8 * (v22 + 1) + 16) = *(_QWORD *)v16;
          if (v108)
            goto LABEL_602;
LABEL_368:
          v16 = sub_18BD69360(this, v16, v106, a4);
          goto LABEL_369;
        }
        if (*(_DWORD *)(v11 + (((v20 << 32) + 0x100000000) >> 29)))
          goto LABEL_602;
        if (v109)
          goto LABEL_368;
LABEL_369:
        v143 = (v107 & 0xFFFFFF) + 1;
        goto LABEL_484;
      case 0x1B:
        v81 = *(_QWORD *)v16;
        v110 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v110)
          goto LABEL_336;
        v111 = v81 + 1;
        *(_QWORD *)v16 = v81 + 1;
        v112 = *(unsigned __int16 *)(v13 + 2 * v81);
        if ((v112 & 0xFC00) == 0xD800)
        {
          if (v111 != v110)
          {
            v85 = *(_WORD *)(v13 + 2 * v111);
LABEL_118:
            if ((v85 & 0xFC00) == 0xDC00)
            {
LABEL_394:
              v137 = v81 + 2;
              goto LABEL_395;
            }
          }
        }
        else if (v112 == 10)
        {
          goto LABEL_337;
        }
        goto LABEL_602;
      case 0x1C:
        v113 = *(_QWORD *)(v11 + 8 * (v19 & 0xFFFFFF)) & 0xFFFFFFLL;
        v114 = v16 + 8 * v113;
        v115 = *(_QWORD *)(v11 + 8 * (v22 + 2));
        v116 = *(_QWORD *)(v11 + 8 * (v22 + 3));
        v117 = *(_QWORD *)(v114 + 16) + 1;
        *(_QWORD *)(v114 + 16) = v117;
        if ((_DWORD)v116 != -1 && v117 >= (unint64_t)v116)
          goto LABEL_602;
        if (v117 >= (int)v115)
        {
          if ((_DWORD)v116 == -1)
          {
            v277 = v16 + 8 * v113;
            v279 = *(_QWORD *)(v277 + 24);
            v278 = (_QWORD *)(v277 + 24);
            if (*(_QWORD *)v16 == v279)
              goto LABEL_602;
            *v278 = *(_QWORD *)v16;
          }
          v16 = sub_18BD69360(this, v16, v18 + 1, a4);
        }
        else
        {
          v119 = *((_DWORD *)this + 68);
          v120 = __OFSUB__(v119--, 1);
          *((_DWORD *)this + 68) = v119;
          if ((v119 < 0) ^ v120 | (v119 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        v143 = (v22 + 4);
        goto LABEL_484;
      case 0x1D:
        v121 = *(_QWORD *)(v11 + 8 * (v19 & 0xFFFFFF)) & 0xFFFFFFLL;
        v122 = v16 + 8 * v121;
        v123 = *(_QWORD *)(v11 + 8 * (v22 + 2));
        v124 = *(_QWORD *)(v11 + 8 * (v22 + 3));
        v125 = *(_QWORD *)(v122 + 16) + 1;
        *(_QWORD *)(v122 + 16) = v125;
        if ((_DWORD)v124 != -1 && v125 >= (unint64_t)v124)
          goto LABEL_602;
        if (v125 >= (int)v123)
        {
          if ((_DWORD)v124 == -1)
          {
            v280 = v16 + 8 * v121;
            v282 = *(_QWORD *)(v280 + 24);
            v281 = (_QWORD *)(v280 + 24);
            if (*(_QWORD *)v16 == v282)
              goto LABEL_602;
            *v281 = *(_QWORD *)v16;
          }
          v16 = sub_18BD69360(this, v16, (v22 + 4), a4);
        }
        else
        {
          *(_QWORD *)(v16 + 8) = (v22 + 4);
          v127 = *((_DWORD *)this + 68);
          v120 = __OFSUB__(v127--, 1);
          *((_DWORD *)this + 68) = v127;
          if ((v127 < 0) ^ v120 | (v127 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
        }
        goto LABEL_602;
      case 0x1E:
        if (*(_QWORD *)v16 <= *((_QWORD *)this + 10))
          goto LABEL_602;
        v128 = *(unsigned __int16 *)(v13 + 2 * *(_QWORD *)v16 - 2);
        goto LABEL_289;
      case 0x20:
        *(_QWORD *)(*((_QWORD *)this + 24) + 8 * (v19 & 0xFFFFFF)) = *(int *)(*((_QWORD *)this + 22) + 8);
        goto LABEL_602;
      case 0x21:
        v129 = *(_QWORD *)(*((_QWORD *)this + 24) + 8 * (v19 & 0xFFFFFF));
        v130 = (icu::UVector64 *)*((_QWORD *)this + 22);
        v41 = *((_QWORD *)v130 + 3) + 8 * (int)v129 - 8 * *((int *)this + 14);
        if (v41 == v16)
          goto LABEL_602;
        v131 = *((unsigned int *)this + 14);
        if ((int)v131 >= 1)
        {
          v132 = (uint64_t *)(*((_QWORD *)v130 + 3) + 8 * (int)v129 - 8 * *((int *)this + 14));
          do
          {
            v133 = *(_QWORD *)v16;
            v16 += 8;
            *v132++ = v133;
            --v131;
          }
          while (v131);
        }
        icu::UVector64::setSize(v130, v129);
        goto LABEL_441;
      case 0x22:
        v134 = *(_QWORD *)(v16 + 16 + 8 * (v19 & 0xFFFFFF));
        if (v134 < 0)
          goto LABEL_337;
        v135 = *(_QWORD *)(v16 + 16 + 8 * (v22 + 1));
        v136 = *(_QWORD *)v16;
        v137 = *(_QWORD *)v16;
        v138 = v135 - v134;
        if (v135 <= v134)
          goto LABEL_395;
        v139 = *((_QWORD *)this + 15);
        v137 = v136 + v135 - v134;
        if (v136 > v139)
          v139 = *(_QWORD *)v16;
        v140 = (unsigned __int16 *)(v13 + 2 * v134);
        v141 = v139 - v136;
        v142 = (unsigned __int16 *)(v13 + 2 * v136);
        do
        {
          if (!v141)
          {
LABEL_336:
            *((_BYTE *)this + 168) = 1;
            goto LABEL_337;
          }
          if (*v140 != *v142)
            goto LABEL_337;
          ++v140;
          --v141;
          ++v142;
          --v138;
        }
        while (v138);
        if ((*(_WORD *)(v13 + 2 * v135 - 2) & 0xFC00) == 0xD800
          && v137 < *((_QWORD *)this + 15)
          && (*(_WORD *)(v13 + 2 * v137) & 0xFC00) == 0xDC00)
        {
          goto LABEL_337;
        }
LABEL_395:
        *(_QWORD *)v16 = v137;
        goto LABEL_602;
      case 0x23:
        v42 = *(_QWORD *)v16;
        v43 = v16 + 8 * (v19 & 0xFFFFFF);
LABEL_157:
        *(_QWORD *)(v43 + 16) = v42;
        goto LABEL_602;
      case 0x24:
        *(_QWORD *)(v16 + 8) = v18 + 2;
        if (*(int *)(v16 + 8 * (*(_QWORD *)(v11 + 8 * (int)v20) & 0xFFFFFFLL) + 16) >= *(_QWORD *)v16)
          goto LABEL_337;
LABEL_159:
        v143 = v19 & 0xFFFFFF;
        goto LABEL_484;
      case 0x25:
        v144 = *((_QWORD *)this + 24);
        *(_QWORD *)(v144 + 8 * (v19 & 0xFFFFFF)) = *(int *)(*((_QWORD *)this + 22) + 8);
        *(_QWORD *)(v144 + 8 * (v22 + 1)) = *(_QWORD *)v16;
        *(_QWORD *)(v144 + 8 * (v22 + 2)) = *((_QWORD *)this + 14);
        *(_QWORD *)(v144 + 8 * (v22 + 3)) = *((_QWORD *)this + 15);
        *((_OWORD *)this + 7) = *((_OWORD *)this + 6);
        goto LABEL_602;
      case 0x26:
        v145 = *((_QWORD *)this + 22);
        v146 = *((_QWORD *)this + 24);
        v147 = *(_QWORD *)(v146 + 8 * (v19 & 0xFFFFFF));
        if (*(_DWORD *)(v145 + 8) <= (int)v147)
        {
          v149 = (uint64_t *)v16;
        }
        else
        {
          v148 = *((int *)this + 14);
          v149 = (uint64_t *)(*(_QWORD *)(v145 + 24) + 8 * (int)v147 - 8 * v148);
          if ((int)v148 >= 1)
          {
            v150 = *((unsigned int *)this + 14);
            v151 = v149;
            do
            {
              v152 = *(_QWORD *)v16;
              v16 += 8;
              *v151++ = v152;
              --v150;
            }
            while (v150);
          }
          icu::UVector64::setSize((icu::UVector64 *)v145, v147);
          v146 = *((_QWORD *)this + 24);
          v16 = (uint64_t)v149;
        }
        *v149 = *(_QWORD *)(v146 + 8 * (v22 + 1));
        *((_QWORD *)this + 14) = *(_QWORD *)(v146 + 8 * (v22 + 2));
        *((_QWORD *)this + 15) = *(_QWORD *)(v146 + 8 * (v22 + 3));
        goto LABEL_602;
      case 0x27:
        v153 = *(_QWORD *)v16;
        v154 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v154)
          goto LABEL_336;
        v155 = v153 + 1;
        *(_QWORD *)v16 = v153 + 1;
        v156 = *(unsigned __int16 *)(v13 + 2 * v153);
        if ((v156 & 0xFC00) == 0xD800 && v155 != v154)
        {
          v158 = *(unsigned __int16 *)(v13 + 2 * v155);
          if ((v158 & 0xFC00) == 0xDC00)
          {
            *(_QWORD *)v16 = v153 + 2;
            v156 = (v156 << 10) - 56613888 + v158;
          }
        }
        if (u_foldCase(v156, 0) == v22)
          goto LABEL_602;
        goto LABEL_337;
      case 0x28:
        v159 = v364 + 2 * (v19 & 0xFFFFFF);
        v160 = *(_QWORD *)(v11 + 8 * v20);
        *(_QWORD *)(v16 + 8) = v18 + 2;
        v161 = v160 & 0xFFFFFF;
        v369 = 0;
        v367 = 0u;
        v368 = 0u;
        sub_18BD57AE8((uint64_t)&v367, v13, *(_QWORD *)v16, *((_QWORD *)this + 15));
        v162 = 0;
        while (v162 < v161)
        {
          v163 = v162 + 1;
          v164 = *(unsigned __int16 *)(v159 + 2 * v162);
          if ((v164 & 0xFC00) == 0xD800 && (_DWORD)v163 != v161)
          {
            v166 = *(unsigned __int16 *)(v159 + 2 * v163);
            v167 = (v166 & 0xFC00) == 56320;
            v168 = v162 + 2;
            v169 = (v164 << 10) - 56613888 + v166;
            if (v167)
              v164 = v169;
            if (v167)
              LODWORD(v163) = v168;
          }
          v170 = sub_18BD57AF8((uint64_t *)&v367);
          v162 = v163;
          if (v170 != v164)
          {
            if (v170 == -1)
              *((_BYTE *)this + 168) = 1;
            sub_18BD57C20((uint64_t)&v367);
            goto LABEL_339;
          }
        }
        if (sub_18BD57C20((uint64_t)&v367))
        {
LABEL_339:
          v260 = *((_QWORD *)this + 22);
          v261 = *((int *)this + 14);
          v262 = (*(_DWORD *)(v260 + 8) - v261) & ~((*(_DWORD *)(v260 + 8) - (int)v261) >> 31);
          *(_DWORD *)(v260 + 8) = v262;
          v16 = *(_QWORD *)(v260 + 24) + 8 * v262 - 8 * v261;
          goto LABEL_455;
        }
        *(_QWORD *)v16 = sub_18BD57C30((uint64_t)&v367);
        goto LABEL_455;
      case 0x29:
        v171 = *(_QWORD *)(v16 + 8 * (v19 & 0xFFFFFF) + 16);
        if (v171 < 0)
          goto LABEL_337;
        v172 = *(_QWORD *)(v16 + 8 * (v22 + 1) + 16);
        v369 = 0;
        v367 = 0u;
        v368 = 0u;
        sub_18BD57AE8((uint64_t)&v367, v13, v171, v172);
        v366 = 0;
        memset(v365, 0, sizeof(v365));
        sub_18BD57AE8((uint64_t)v365, v13, *(_QWORD *)v16, *((_QWORD *)this + 15));
        while (2)
        {
          v173 = sub_18BD57AF8((uint64_t *)&v367);
          if (v173 == -1)
          {
            if (!sub_18BD57C20((uint64_t)v365))
            {
              *(_QWORD *)v16 = sub_18BD57C30((uint64_t)v365);
              goto LABEL_448;
            }
          }
          else
          {
            v174 = v173;
            v175 = sub_18BD57AF8((uint64_t *)v365);
            if (v175 != -1)
            {
              if (v175 != v174)
                break;
              continue;
            }
            *((_BYTE *)this + 168) = 1;
          }
          break;
        }
        v298 = *((_QWORD *)this + 22);
        v299 = *((int *)this + 14);
        v300 = (*(_DWORD *)(v298 + 8) - v299) & ~((*(_DWORD *)(v298 + 8) - (int)v299) >> 31);
        *(_DWORD *)(v298 + 8) = v300;
        v16 = *(_QWORD *)(v298 + 24) + 8 * v300 - 8 * v299;
LABEL_448:
        nullsub_17(v365);
LABEL_455:
        nullsub_17(&v367);
        goto LABEL_602;
      case 0x2A:
        v176 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 >= *((_QWORD *)this + 11))
          goto LABEL_601;
        v177 = *(unsigned __int16 *)(v13 + 2 * v176);
        if ((v177 & 0xDF50) != 0)
          goto LABEL_337;
        if (*(unsigned __int16 *)(v13 + 2 * v176) <= 0x84u)
        {
          if ((v177 - 11) >= 3
            && (v177 != 10 || v176 > *((_QWORD *)this + 10) && *(_WORD *)(v13 + 2 * v176 - 2) == 13))
          {
            goto LABEL_337;
          }
          goto LABEL_602;
        }
        if ((v177 - 8232) < 2 || v177 == 133)
          goto LABEL_602;
        goto LABEL_337;
      case 0x2B:
        v178 = *(_QWORD *)v16;
        if (*(_QWORD *)v16 == *((_QWORD *)this + 10))
          goto LABEL_602;
        if (v178 >= *((_QWORD *)this + 11))
          goto LABEL_337;
        v179 = sub_18BD64B00(*(unsigned __int16 *)(v13 + 2 * v178 - 2));
        goto LABEL_386;
      case 0x2C:
        v44 = *((_QWORD *)this + 24);
        *(_QWORD *)(v44 + 8 * (v19 & 0xFFFFFF)) = *(int *)(*((_QWORD *)this + 22) + 8);
        *(_QWORD *)(v44 + 8 * (v22 + 1)) = *(_QWORD *)v16;
        *(_QWORD *)(v44 + 8 * (v22 + 2)) = *((_QWORD *)this + 14);
        *(_QWORD *)(v44 + 8 * (v22 + 3)) = *((_QWORD *)this + 15);
        *((_QWORD *)this + 14) = *((_QWORD *)this + 8);
        *((_QWORD *)this + 15) = *(_QWORD *)v16;
        v46 = v22 + 4;
        v45 = -1;
LABEL_209:
        *(_QWORD *)(v44 + 8 * v46) = v45;
        goto LABEL_602;
      case 0x2D:
        *(_QWORD *)(v16 + 8) = v18 + 2;
        v180 = *(_QWORD *)(v11 + 8 * v20);
        *(_QWORD *)(v16 + 8) = v18 + 3;
        v181 = *(_QWORD *)(v11 + 8 * (v18 + 2));
        v182 = *((_QWORD *)this + 24);
        v183 = (v22 + 4);
        v184 = *(_QWORD *)(v182 + 8 * v183);
        if (v184 < 0)
        {
          v185 = *(_QWORD *)v16 - (int)v180;
          *(_QWORD *)(v182 + 8 * v183) = v185;
          v187 = v185 - 1;
          if (v185 < 1)
          {
            if (v185 < 0)
              goto LABEL_472;
            v185 = 0;
            goto LABEL_471;
          }
          if (v185 >= *((_QWORD *)this + 6) || (*(_WORD *)(v13 + 2 * v185) & 0xFC00) != 0xDC00)
            goto LABEL_471;
        }
        else
        {
          if (!v184)
          {
            *(_QWORD *)(v182 + 8 * v183) = -1;
LABEL_472:
            v306 = *((_QWORD *)this + 22);
            v307 = *((int *)this + 14);
            v308 = (*(_DWORD *)(v306 + 8) - v307) & ~((*(_DWORD *)(v306 + 8) - (int)v307) >> 31);
            *(_DWORD *)(v306 + 8) = v308;
            v16 = *(_QWORD *)(v306 + 24) + 8 * v308 - 8 * v307;
            *((_QWORD *)this + 14) = *(_QWORD *)(v182 + 8 * (v22 + 2));
            v189 = *(_QWORD *)(v182 + 8 * (v22 + 3));
LABEL_473:
            *((_QWORD *)this + 15) = v189;
            goto LABEL_602;
          }
          v185 = v184 - 1;
          *(_QWORD *)(v182 + 8 * v183) = v184 - 1;
          if (v184 == 1 || (*(_WORD *)(v13 + 2 * (v184 - 1)) & 0xFC00) != 56320)
          {
LABEL_471:
            if (v185 < *(_QWORD *)v16 - (int)v181)
              goto LABEL_472;
            if (*(int *)a4 > 0)
              goto LABEL_583;
            v309 = *(_QWORD *)(v16 + 8);
            v310 = *((_QWORD *)this + 22);
            v311 = *((_DWORD *)this + 14);
            v312 = *(_DWORD *)(v310 + 8);
            v313 = v312 + v311;
            if (v312 + v311 < 0 || *(_DWORD *)(v310 + 12) < v313)
            {
              if (!icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v313, a4))
              {
                v105 = 0;
                goto LABEL_576;
              }
              v312 = *(_DWORD *)(v310 + 8);
              v313 = v312 + v311;
            }
            v105 = (_QWORD *)(*(_QWORD *)(v310 + 24) + 8 * v312);
            *(_DWORD *)(v310 + 8) = v313;
LABEL_576:
            if (*(int *)a4 >= 1)
              goto LABEL_582;
            v351 = 0;
            v352 = v309 - 3;
            v353 = *((int *)this + 14);
            v354 = &v105[-v353];
            v355 = -8 * v353;
            do
            {
              v105[v351] = v354[v351];
              ++v351;
            }
            while (v355 + v351 * 8);
            goto LABEL_588;
          }
          v187 = v184 - 2;
        }
        if ((*(_WORD *)(v13 + 2 * v187) & 0xFC00) == 0xD800)
        {
          *(_QWORD *)(v182 + 8 * v183) = v187;
          v185 = v187;
        }
        goto LABEL_471;
      case 0x2E:
        if (*(_QWORD *)v16 != *((_QWORD *)this + 15))
          goto LABEL_337;
        v188 = *((_QWORD *)this + 24);
        *((_QWORD *)this + 14) = *(_QWORD *)(v188 + 8 * (v22 + 2));
        v189 = *(_QWORD *)(v188 + 8 * (v22 + 3));
        goto LABEL_473;
      case 0x2F:
        *(_QWORD *)(v16 + 8) = v18 + 2;
        v190 = *(_QWORD *)(v11 + 8 * v20);
        *(_QWORD *)(v16 + 8) = v18 + 3;
        v191 = *(_QWORD *)(v11 + 8 * (v18 + 2));
        *(_QWORD *)(v16 + 8) = v18 + 4;
        v192 = *(_QWORD *)(v11 + 8 * (v18 + 3));
        v182 = *((_QWORD *)this + 24);
        v183 = (v22 + 4);
        v193 = *(_QWORD *)(v182 + 8 * v183);
        if (v193 < 0)
        {
          v194 = *(_QWORD *)v16 - (int)v190;
          *(_QWORD *)(v182 + 8 * v183) = v194;
          v196 = v194 - 1;
          if (v194 < 1)
          {
            if (v194 < 0)
              goto LABEL_483;
            v194 = 0;
            goto LABEL_482;
          }
          if (v194 >= *((_QWORD *)this + 6) || (*(_WORD *)(v13 + 2 * v194) & 0xFC00) != 0xDC00)
            goto LABEL_482;
        }
        else
        {
          if (!v193)
          {
            *(_QWORD *)(v182 + 8 * v183) = -1;
LABEL_483:
            v143 = v192 & 0xFFFFFF;
            *((_QWORD *)this + 14) = *(_QWORD *)(v182 + 8 * (v22 + 2));
            *((_QWORD *)this + 15) = *(_QWORD *)(v182 + 8 * (v22 + 3));
            goto LABEL_484;
          }
          v194 = v193 - 1;
          *(_QWORD *)(v182 + 8 * v183) = v193 - 1;
          if (v193 == 1 || (*(_WORD *)(v13 + 2 * (v193 - 1)) & 0xFC00) != 56320)
          {
LABEL_482:
            if (v194 < *(_QWORD *)v16 - (int)v191)
              goto LABEL_483;
            if (*(int *)a4 > 0)
              goto LABEL_583;
            v314 = *(_QWORD *)(v16 + 8);
            v315 = *((_QWORD *)this + 22);
            v316 = *((_DWORD *)this + 14);
            v317 = *(_DWORD *)(v315 + 8);
            v318 = v317 + v316;
            if (v317 + v316 < 0 || *(_DWORD *)(v315 + 12) < v318)
            {
              if (!icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v318, a4))
              {
                v105 = 0;
                goto LABEL_581;
              }
              v317 = *(_DWORD *)(v315 + 8);
              v318 = v317 + v316;
            }
            v105 = (_QWORD *)(*(_QWORD *)(v315 + 24) + 8 * v317);
            *(_DWORD *)(v315 + 8) = v318;
LABEL_581:
            if (*(int *)a4 < 1)
            {
              v356 = 0;
              v352 = v314 - 4;
              v357 = *((int *)this + 14);
              v354 = &v105[-v357];
              v358 = -8 * v357;
              do
              {
                v105[v356] = v354[v356];
                ++v356;
              }
              while (v358 + v356 * 8);
LABEL_588:
              v359 = *((_DWORD *)this + 68);
              v120 = __OFSUB__(v359--, 1);
              *((_DWORD *)this + 68) = v359;
              if ((v359 < 0) ^ v120 | (v359 == 0))
                icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
              v354[1] = v352;
LABEL_584:
              *v105 = *(_QWORD *)(v182 + 8 * v183);
LABEL_585:
              v16 = (uint64_t)v105;
              goto LABEL_602;
            }
LABEL_582:
            *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_583:
            v105 = (_QWORD *)v16;
            goto LABEL_584;
          }
          v196 = v193 - 2;
        }
        if ((*(_WORD *)(v13 + 2 * v196) & 0xFC00) == 0xD800)
        {
          *(_QWORD *)(v182 + 8 * v183) = v196;
          v194 = v196;
        }
        goto LABEL_482;
      case 0x30:
        if (*(_QWORD *)v16 == *((_QWORD *)this + 15))
        {
          v197 = *((_QWORD *)this + 24);
          *((_QWORD *)this + 14) = *(_QWORD *)(v197 + 8 * (v22 + 2));
          *((_QWORD *)this + 15) = *(_QWORD *)(v197 + 8 * (v22 + 3));
          icu::UVector64::setSize(*((icu::UVector64 **)this + 22), *(_QWORD *)(v197 + 8 * (v19 & 0xFFFFFF)));
        }
        goto LABEL_337;
      case 0x31:
        v198 = *(_QWORD *)v16;
        v199 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v199)
          goto LABEL_336;
        v200 = v198 + 1;
        *(_QWORD *)v16 = v198 + 1;
        v201 = *(unsigned __int16 *)(v13 + 2 * v198);
        if ((v201 & 0xFC00) == 0xD800)
        {
          if (v200 != v199)
          {
            v202 = *(unsigned __int16 *)(v13 + 2 * v200);
            if ((v202 & 0xFC00) == 0xDC00)
            {
              *(_QWORD *)v16 = v198 + 2;
              LODWORD(v201) = ((_DWORD)v201 << 10) - 56613888 + v202;
            }
          }
        }
        else if (v201 <= 0xFF)
        {
          if (((*(unsigned __int8 *)(qword_1ECD284E8 + 32 * (v19 & 0xFFFFFF) + (v201 >> 3) + 2608) >> (v201 & 7)) & 1) != 0)
            goto LABEL_337;
          goto LABEL_602;
        }
        if (icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 200 * (v19 & 0xFFFFFF) + 8), v201))goto LABEL_337;
        goto LABEL_602;
      case 0x32:
        v203 = *(_QWORD *)(*((_QWORD *)this + 1) + 112);
        v204 = icu::UVector::elementAt(v363, v19 & 0xFFFFFF);
        v205 = *(_QWORD *)v16;
        v206 = *((_QWORD *)this + 15);
        if (v206 <= (int)*(_QWORD *)v16)
        {
          v210 = *(_QWORD *)v16;
LABEL_344:
          *((_BYTE *)this + 168) = 1;
          LODWORD(v205) = v210;
          goto LABEL_345;
        }
        v207 = (icu::UnicodeSet *)v204;
        v208 = v203 + 32 * (v19 & 0xFFFFFF);
        v209 = (int)v205;
        while (2)
        {
          v210 = (int)v205 + 1;
          v211 = *(unsigned __int16 *)(v13 + 2 * v209);
          if ((v211 & 0xFC00) == 0xD800)
          {
            if (v206 != v210)
            {
              v212 = *(unsigned __int16 *)(v13 + 2 * v210);
              v213 = (v212 & 0xFC00) == 56320;
              v214 = v205 + 2;
              v215 = ((_DWORD)v211 << 10) - 56613888 + v212;
              if (v213)
                LODWORD(v211) = v215;
              if (v213)
                LODWORD(v210) = v214;
            }
          }
          else if (v211 <= 0xFF)
          {
            if (((*(unsigned __int8 *)(v208 + (v211 >> 3)) >> (v211 & 7)) & 1) != 0)
              goto LABEL_250;
            v302 = v205 - 1;
            if ((int)v205 >= 1 && (*(_WORD *)(v13 + 2 * (int)v205) & 0xFC00) == 0xDC00)
              goto LABEL_522;
            goto LABEL_345;
          }
          if (icu::UnicodeSet::contains(v207, v211))
          {
            v206 = *((_QWORD *)this + 15);
LABEL_250:
            LODWORD(v205) = v210;
            v209 = (int)v210;
            if (v206 <= (int)v210)
              goto LABEL_344;
            continue;
          }
          break;
        }
        LODWORD(v205) = v210 - 1;
        if ((*(_WORD *)(v13 + 2 * ((int)v210 - 1)) & 0xFC00) == 0xDC00 && (int)v210 >= 2)
        {
          v302 = v210 - 2;
LABEL_522:
          if ((*(_WORD *)(v13 + 2 * v302) & 0xFC00) == 0xD800)
            LODWORD(v205) = v302;
        }
LABEL_345:
        v266 = *(_QWORD *)(v16 + 8);
        if (*(_QWORD *)v16 != (int)v205)
        {
          *(_QWORD *)(v16 + 8 * (*(_QWORD *)(v11 + 8 * v266) & 0xFFFFFFLL) + 16) = *(_QWORD *)v16;
          *(_QWORD *)v16 = (int)v205;
          if (*(int *)a4 > 0)
            goto LABEL_551;
          v268 = *((_QWORD *)this + 22);
          v269 = *((_DWORD *)this + 14);
          v270 = *(_DWORD *)(v268 + 8);
          v271 = v270 + v269;
          if (v270 + v269 >= 0 && *(_DWORD *)(v268 + 12) >= v271)
          {
LABEL_353:
            v78 = (_QWORD *)(*(_QWORD *)(v268 + 24) + 8 * v270);
            *(_DWORD *)(v268 + 8) = v271;
          }
          else
          {
            if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v271, a4))
            {
              v270 = *(_DWORD *)(v268 + 8);
              v271 = v270 + v269;
              goto LABEL_353;
            }
            v78 = 0;
          }
          if (*(int *)a4 < 1)
          {
            v340 = 0;
            v341 = *((int *)this + 14);
            v342 = &v78[-v341];
            v343 = -8 * v341;
            do
            {
              v78[v340] = v342[v340];
              ++v340;
            }
            while (v343 + v340 * 8);
            v344 = *((_DWORD *)this + 68);
            v120 = __OFSUB__(v344--, 1);
            *((_DWORD *)this + 68) = v344;
            if ((v344 < 0) ^ v120 | (v344 == 0))
              icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
            v342[1] = v266;
          }
          else
          {
            *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_551:
            v78 = (_QWORD *)v16;
          }
          ++v78[1];
LABEL_553:
          v16 = (uint64_t)v78;
          goto LABEL_602;
        }
        v143 = v266 + 1;
LABEL_484:
        *(_QWORD *)(v16 + 8) = v143;
        goto LABEL_602;
      case 0x33:
        v216 = *(int *)(v16 + 8 * (v19 & 0xFFFFFF) + 16);
        v217 = *(_QWORD *)v16;
        if (v216 == *(_QWORD *)v16)
          goto LABEL_602;
        v218 = v217 - 1;
        *(_QWORD *)v16 = v217 - 1;
        v219 = *(unsigned __int16 *)(v13 + 2 * (v217 - 1));
        v276 = v217 < 2;
        v220 = v217 - 2;
        if (!v276 && (v219 & 0xFC00) == 0xDC00)
        {
          if ((*(_WORD *)(v13 + 2 * v220) & 0xFC00) != 0xD800)
            goto LABEL_418;
LABEL_256:
          *(_QWORD *)v16 = v220;
          goto LABEL_418;
        }
        v283 = v219 != 10 || v218 <= v216;
        if (!v283
          && *(_WORD *)(v13 + 2 * v220) == 13
          && (unint64_t)*(unsigned __int8 *)(v11 + 8 * v18 - 5) << 24 == 872415232)
        {
          goto LABEL_256;
        }
LABEL_418:
        if (*(int *)a4 > 0)
          goto LABEL_603;
        v284 = *((_QWORD *)this + 22);
        v285 = *((_DWORD *)this + 14);
        v286 = *(_DWORD *)(v284 + 8);
        v287 = v286 + v285;
        if (v286 + v285 >= 0 && *(_DWORD *)(v284 + 12) >= v287)
          goto LABEL_423;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v287, a4))
        {
          v286 = *(_DWORD *)(v284 + 8);
          v287 = v286 + v285;
LABEL_423:
          v288 = *(_QWORD *)(v284 + 24) + 8 * v286;
          *(_DWORD *)(v284 + 8) = v287;
        }
        else
        {
          v288 = 0;
        }
        if (*(int *)a4 <= 0)
        {
          v319 = 0;
          v320 = *((int *)this + 14);
          v321 = v288 - 8 * v320;
          v322 = -8 * v320;
          do
          {
            *(_QWORD *)(v288 + v319) = *(_QWORD *)(v321 + v319);
            v319 += 8;
          }
          while (v322 + v319);
          v323 = *((_DWORD *)this + 68);
          v120 = __OFSUB__(v323--, 1);
          *((_DWORD *)this + 68) = v323;
          if ((v323 < 0) ^ v120 | (v323 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          *(_QWORD *)(v321 + 8) = v18;
          v16 = v288;
          goto LABEL_602;
        }
LABEL_607:
        v21 = U_REGEX_STACK_OVERFLOW;
LABEL_608:
        *a4 = v21;
LABEL_603:
        *((_BYTE *)this + 130) = 0;
LABEL_604:
        *((_QWORD *)this + 23) = v16;
        return;
      case 0x34:
        if ((v19 & 1) != 0)
        {
          v267 = *((_DWORD *)this + 30);
          *((_BYTE *)this + 168) = 1;
          goto LABEL_425;
        }
        v221 = *(_QWORD *)v16;
        v222 = *((_QWORD *)this + 15);
        if (v222 <= (int)*(_QWORD *)v16)
          goto LABEL_424;
        v223 = (int)v221;
        while (1)
        {
          v224 = v221;
          LODWORD(v221) = v221 + 1;
          v225 = *(unsigned __int16 *)(v13 + 2 * v223);
          if ((v225 & 0xFC00) == 0xD800 && v222 != (int)v221)
          {
            v226 = *(unsigned __int16 *)(v13 + 2 * (int)v221);
            v227 = (v226 & 0xFC00) == 56320;
            v228 = (v225 << 10) - 56613888 + v226;
            LODWORD(v221) = (v226 & 0xFC00) == 0xDC00 ? v224 + 2 : v224 + 1;
            if (v227)
              v225 = v228;
          }
          if ((v225 & 0x7Eu) <= 0x29)
          {
            if (v225 == 10)
              break;
            if (!(v225 & 0xFFFFDF50 | v19 & 2))
            {
              v229 = (v225 - 10) >= 4 && (v225 - 8232) >= 2;
              if (!v229 || v225 == 133)
                break;
            }
          }
          v223 = (int)v221;
          if (v222 <= (int)v221)
          {
LABEL_424:
            *((_BYTE *)this + 168) = 1;
            v267 = v221;
            goto LABEL_425;
          }
        }
        v267 = v221 - 1;
        if ((*(_WORD *)(v13 + 2 * ((int)v221 - 1)) & 0xFC00) == 0xDC00 && (int)v221 >= 2)
        {
          v305 = v221 - 2;
          if ((*(_WORD *)(v13 + 2 * v305) & 0xFC00) == 0xD800)
            v267 = v305;
        }
LABEL_425:
        if (*(_QWORD *)v16 == v267)
        {
          v143 = v18 + 2;
          goto LABEL_484;
        }
        *(_QWORD *)(v16 + 8 * (*(_QWORD *)(v11 + 8 * v20) & 0xFFFFFFLL) + 16) = *(_QWORD *)v16;
        *(_QWORD *)v16 = v267;
        if (*(int *)a4 > 0)
          goto LABEL_539;
        v289 = *((_QWORD *)this + 22);
        v290 = *((_DWORD *)this + 14);
        v291 = *(_DWORD *)(v289 + 8);
        v292 = v291 + v290;
        if (v291 + v290 >= 0 && *(_DWORD *)(v289 + 12) >= v292)
          goto LABEL_432;
        if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v292, a4))
        {
          v291 = *(_DWORD *)(v289 + 8);
          v292 = v291 + v290;
LABEL_432:
          v69 = *(_QWORD *)(v289 + 24) + 8 * v291;
          *(_DWORD *)(v289 + 8) = v292;
        }
        else
        {
          v69 = 0;
        }
        if (*(int *)a4 < 1)
        {
          v335 = 0;
          v336 = *((int *)this + 14);
          v337 = v69 - 8 * v336;
          v338 = -8 * v336;
          do
          {
            *(_QWORD *)(v69 + v335) = *(_QWORD *)(v337 + v335);
            v335 += 8;
          }
          while (v338 + v335);
          v339 = *((_DWORD *)this + 68);
          v120 = __OFSUB__(v339--, 1);
          *((_DWORD *)this + 68) = v339;
          if ((v339 < 0) ^ v120 | (v339 == 0))
            icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
          *(_QWORD *)(v337 + 8) = v20;
        }
        else
        {
          *a4 = U_REGEX_STACK_OVERFLOW;
LABEL_539:
          v69 = v16;
        }
        v324 = *(_QWORD *)(v69 + 8) + 1;
LABEL_541:
        *(_QWORD *)(v69 + 8) = v324;
        v16 = v69;
        goto LABEL_602;
      case 0x35:
        isChunkWordBoundary = icu::RegexMatcher::isUWordBoundary(this, *(_QWORD *)v16, a4);
LABEL_280:
        if (isChunkWordBoundary != (v22 != 0))
          goto LABEL_602;
        goto LABEL_337;
      case 0x36:
        v230 = *((_QWORD *)this + 11) - 1;
        if (*(_QWORD *)v16 < v230)
          goto LABEL_337;
        if (*(_QWORD *)v16 != v230)
          goto LABEL_601;
        v231 = *(unsigned __int16 *)(v13 + 2 * *(_QWORD *)v16);
        goto LABEL_285;
      case 0x37:
        if (*(_QWORD *)v16 >= *((_QWORD *)this + 11))
          goto LABEL_601;
        v128 = *(unsigned __int16 *)(v13 + 2 * *(_QWORD *)v16);
LABEL_289:
        if (v128 == 10)
          goto LABEL_602;
        goto LABEL_337;
      case 0x38:
        v232 = *(_QWORD *)v16;
        v233 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v233)
          goto LABEL_336;
        v234 = v232 + 1;
        *(_QWORD *)v16 = v232 + 1;
        v235 = *(unsigned __int16 *)(v13 + 2 * v232);
        if ((v235 & 0xFC00) == 0xD800 && v234 != v233)
        {
          v237 = *(unsigned __int16 *)(v13 + 2 * v234);
          if ((v237 & 0xFC00) == 0xDC00)
          {
            *(_QWORD *)v16 = v232 + 2;
            v235 = (v235 << 10) - 56613888 + v237;
          }
        }
        v238 = u_charType(v235);
        v92 = v235 == 9 || v238 == 12;
LABEL_301:
        v239 = v92;
        if ((((v22 != 0) ^ v239) & 1) != 0)
          goto LABEL_602;
        goto LABEL_337;
      case 0x39:
        v240 = *(_QWORD *)v16;
        v241 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v241)
          goto LABEL_336;
        v242 = v240 + 1;
        *(_QWORD *)v16 = v240 + 1;
        v243 = *(unsigned __int16 *)(v13 + 2 * v240);
        if ((v243 & 0xFC00) == 0xD800 && v242 != v241)
        {
          v245 = *(unsigned __int16 *)(v13 + 2 * v242);
          if ((v245 & 0xFC00) == 0xDC00)
          {
            v242 = v240 + 2;
            *(_QWORD *)v16 = v240 + 2;
            v243 = (v243 << 10) - 56613888 + v245;
          }
        }
        if ((v243 & 0xFFFFDF50) != 0)
          goto LABEL_337;
        if (v243 <= 132)
        {
          if ((v243 - 10) < 3)
            goto LABEL_602;
          if (v243 != 13)
            goto LABEL_337;
          if (v242 >= v241)
            goto LABEL_602;
          v246 = v242 + 1;
          *(_QWORD *)v16 = v242 + 1;
          v247 = *(unsigned __int16 *)(v13 + 2 * v242);
          if (v247 >> 10 == 54)
          {
            if (v246 != v241)
            {
              v248 = *(unsigned __int16 *)(v13 + 2 * v246);
              v241 = v242 + 1;
              if (v248 >> 10 == 55)
              {
                v246 = v242 + 2;
                *(_QWORD *)v16 = v242 + 2;
                LOWORD(v247) = v248 + ((_WORD)v247 << 10) + 9216;
                goto LABEL_322;
              }
            }
          }
          else
          {
LABEL_322:
            v241 = v246;
            if ((unsigned __int16)v247 == 10)
              goto LABEL_602;
          }
          v249 = v241 - 1;
          *(_QWORD *)v16 = v241 - 1;
          v276 = v241 < 2;
          v137 = v241 - 2;
          if (!v276
            && (*(_WORD *)(v13 + 2 * v249) & 0xFC00) == 0xDC00
            && (*(_WORD *)(v13 + 2 * v137) & 0xFC00) == 0xD800)
          {
            goto LABEL_395;
          }
          goto LABEL_602;
        }
        if ((v243 - 8232) < 2 || v243 == 133)
          goto LABEL_602;
LABEL_337:
        v257 = *((_QWORD *)this + 22);
        v258 = *((int *)this + 14);
        v259 = (*(_DWORD *)(v257 + 8) - v258) & ~((*(_DWORD *)(v257 + 8) - (int)v258) >> 31);
        *(_DWORD *)(v257 + 8) = v259;
        v16 = *(_QWORD *)(v257 + 24) + 8 * v259 - 8 * v258;
LABEL_602:
        if (*(int *)a4 >= 1)
          goto LABEL_603;
        break;
      case 0x3A:
        v250 = *(_QWORD *)v16;
        v251 = *((_QWORD *)this + 15);
        if (*(_QWORD *)v16 >= v251)
          goto LABEL_336;
        v252 = v250 + 1;
        *(_QWORD *)v16 = v250 + 1;
        v253 = *(unsigned __int16 *)(v13 + 2 * v250);
        if ((v253 & 0xFC00) == 0xD800 && v252 != v251)
        {
          v255 = *(unsigned __int16 *)(v13 + 2 * v252);
          if ((v255 & 0xFC00) == 0xDC00)
          {
            *(_QWORD *)v16 = v250 + 2;
            v253 = (v253 << 10) - 56613888 + v255;
          }
        }
        if ((v253 & 0xFFFFDF50) != 0
          || ((v256 = 1, (v253 - 10) >= 4) ? (v303 = (v253 - 8232) >= 2) : (v303 = 0),
              v303 && v253 != 133))
        {
          v256 = 0;
        }
        if (v256 != (v22 != 0))
          goto LABEL_602;
        goto LABEL_337;
      default:
        goto LABEL_608;
    }
  }
}

uint64_t icu::RegexMatcher::group@<X0>(UText **this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::RegexMatcher::group(this, a2, 0, a3);
}

uint64_t icu::RegexMatcher::group@<X0>(UText **this@<X0>, UErrorCode *a2@<X2>, int a3@<W1>, uint64_t a4@<X8>)
{
  int64_t v8;
  uint64_t result;
  int64_t v12;
  int32_t v13;
  int32_t v14;

  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = off_1E2256B38;
  *(_WORD *)(a4 + 8) = 2;
  v8 = icu::RegexMatcher::start64((icu::RegexMatcher *)this, a3, a2);
  result = icu::RegexMatcher::end64((icu::RegexMatcher *)this, a3, a2);
  if (*(int *)a2 <= 0 && v8 != -1 && v8 != result)
  {
    v12 = result;
    result = utext_extract(this[4], v8, result, 0, 0, a2);
    if (*a2 == U_BUFFER_OVERFLOW_ERROR)
    {
      v13 = result;
      *a2 = U_ZERO_ERROR;
      result = icu::UnicodeString::getBuffer((icu::UnicodeString *)a4, result);
      if (result)
      {
        v14 = utext_extract(this[4], v8, v12, (UChar *)result, v13, a2);
        return icu::UnicodeString::releaseBuffer(a4, v14);
      }
      else
      {
        *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return result;
}

UText *icu::RegexMatcher::group(icu::RegexMatcher *this, UText *dest, uint64_t *a3, UErrorCode *a4)
{
  return icu::RegexMatcher::group(this, 0, dest, a3, a4);
}

UText *icu::RegexMatcher::group(icu::RegexMatcher *this, int a2, UText *dest, uint64_t *a4, UErrorCode *a5)
{
  UText *v5;
  UErrorCode v6;
  uint64_t v7;
  int v8;
  int64_t *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  int64_t v15;
  UText *v16;
  uint64_t v17;

  v5 = dest;
  *a4 = 0;
  if (*(int *)a5 > 0)
    return v5;
  v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_8:
    *a5 = v6;
    return v5;
  }
  if (!*((_BYTE *)this + 130))
  {
    v6 = U_REGEX_INVALID_STATE;
    goto LABEL_8;
  }
  if (a2 < 0 || (v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 136), v8 = *(_DWORD *)(v7 + 8), v8 < a2))
  {
    v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_8;
  }
  if (a2)
  {
    if (v8 < 1 || v8 < a2)
      v13 = 0;
    else
      v13 = *(_DWORD *)(*(_QWORD *)(v7 + 24) + 4 * (a2 - 1));
    v14 = *((_QWORD *)this + 23) + 8 * v13;
    v11 = (int64_t *)(v14 + 16);
    v12 = (_QWORD *)(v14 + 24);
  }
  else
  {
    v11 = (int64_t *)((char *)this + 136);
    v12 = (_QWORD *)((char *)this + 144);
  }
  v15 = *v11;
  if ((*v11 & 0x8000000000000000) == 0)
  {
    *a4 = *v12 - v15;
    v16 = utext_clone(dest, *((const UText **)this + 4), 0, 1, a5);
    v5 = v16;
    if (v16)
    {
      v17 = v15 - v16->chunkNativeStart;
      if (v17 < 0 || v17 >= v16->nativeIndexingLimit || v16->chunkContents[v17] >> 10 > 0x36u)
        utext_setNativeIndex(v16, v15);
      else
        v16->chunkOffset = v17;
    }
    return v5;
  }
  return utext_clone(dest, *((const UText **)this + 4), 0, 1, a5);
}

uint64_t icu::RegexMatcher::start64(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  UErrorCode v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  char *v8;

  if (*(int *)a3 > 0)
    return -1;
  v3 = *((_DWORD *)this + 79);
  if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_8:
    *a3 = v3;
    return -1;
  }
  if (!*((_BYTE *)this + 130))
  {
    v3 = U_REGEX_INVALID_STATE;
    goto LABEL_8;
  }
  if (a2 < 0 || (v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 136), v5 = *(_DWORD *)(v4 + 8), v5 < a2))
  {
    v3 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_8;
  }
  if (a2)
  {
    if (v5 < 1)
      v7 = 0;
    else
      v7 = *(int *)(*(_QWORD *)(v4 + 24) + 4 * (a2 - 1));
    v8 = (char *)(*((_QWORD *)this + 23) + 8 * v7 + 16);
  }
  else
  {
    v8 = (char *)this + 136;
  }
  return *(_QWORD *)v8;
}

uint64_t icu::RegexMatcher::groupCount(icu::RegexMatcher *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 136) + 8);
}

uint64_t icu::RegexMatcher::hasAnchoringBounds(icu::RegexMatcher *this)
{
  return *((char *)this + 129);
}

uint64_t icu::RegexMatcher::hasTransparentBounds(icu::RegexMatcher *this)
{
  return *((char *)this + 128);
}

uint64_t icu::RegexMatcher::hitEnd(icu::RegexMatcher *this)
{
  return *((char *)this + 168);
}

icu::UnicodeString *icu::RegexMatcher::input(icu::RegexMatcher *this, unint64_t a2)
{
  icu::UnicodeString *v2;
  UText *v4;
  uint64_t *mapNativeIndexToUTF16;
  uint64_t v6;
  icu::UnicodeString *v7;
  UChar *Buffer;
  UErrorCode status;

  v2 = (icu::UnicodeString *)*((_QWORD *)this + 3);
  if (!v2)
  {
    status = U_ZERO_ERROR;
    v4 = (UText *)*((_QWORD *)this + 4);
    mapNativeIndexToUTF16 = (uint64_t *)v4->pFuncs->mapNativeIndexToUTF16;
    v6 = *((_QWORD *)this + 6);
    if (mapNativeIndexToUTF16)
    {
      LODWORD(v6) = utext_extract(v4, 0, *((_QWORD *)this + 6), 0, 0, &status);
      status = U_ZERO_ERROR;
    }
    v7 = (icu::UnicodeString *)icu::UMemory::operator new(mapNativeIndexToUTF16, (icu::UMemory *)0x40, a2);
    v2 = v7;
    if (v7)
      icu::UnicodeString::UnicodeString(v7, v6, 0, 0);
    Buffer = (UChar *)icu::UnicodeString::getBuffer(v2, v6);
    utext_extract(*((UText **)this + 4), 0, *((_QWORD *)this + 6), Buffer, v6, &status);
    icu::UnicodeString::releaseBuffer((uint64_t)v2, v6);
    *((_QWORD *)this + 3) = v2;
  }
  return v2;
}

uint64_t icu::RegexMatcher::inputText(icu::RegexMatcher *this)
{
  return *((_QWORD *)this + 4);
}

UText *icu::RegexMatcher::getInput(icu::RegexMatcher *this, UText *ut, UErrorCode *status)
{
  UErrorCode v6;
  UText *v8;
  uint64_t v9;
  int64_t v10;
  int32_t v11;
  UChar *v12;
  UChar *v13;
  int64_t v14;
  UErrorCode statusa;

  if (*(int *)status > 0)
    return ut;
  v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    *status = v6;
    return ut;
  }
  v8 = (UText *)*((_QWORD *)this + 4);
  if (ut)
  {
    if (!v8->chunkNativeStart
      && (v9 = *((_QWORD *)this + 6), v9 == v8->chunkNativeLimit)
      && v9 == v8->nativeIndexingLimit)
    {
      v10 = utext_nativeLength(ut);
      utext_replace(ut, 0, v10, *(const UChar **)(*((_QWORD *)this + 4) + 48), *((_DWORD *)this + 12), status);
    }
    else
    {
      if (v8->pFuncs->mapNativeIndexToUTF16)
      {
        statusa = U_ZERO_ERROR;
        v11 = utext_extract(v8, 0, *((_QWORD *)this + 6), 0, 0, &statusa);
      }
      else
      {
        v11 = *((_DWORD *)this + 12);
      }
      v12 = (UChar *)uprv_malloc(2 * v11);
      if (v12)
      {
        v13 = v12;
        *status = U_ZERO_ERROR;
        utext_extract(*((UText **)this + 4), 0, *((_QWORD *)this + 6), v12, v11, status);
        *status = U_ZERO_ERROR;
        v14 = utext_nativeLength(ut);
        utext_replace(ut, 0, v14, v13, v11, status);
        uprv_free(v13);
      }
    }
    return ut;
  }
  return utext_clone(0, v8, 0, 1, status);
}

uint64_t icu::RegexMatcher::lookingAt(icu::RegexMatcher *this, UErrorCode *a2)
{
  char v2;
  UErrorCode v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(int *)a2 > 0)
    return 0;
  v5 = *((_DWORD *)this + 79);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v2 = 0;
    *a2 = v5;
    return v2;
  }
  if (*((_BYTE *)this + 312))
  {
    if (!sub_18BD672C8(*((UText **)this + 4)))
      goto LABEL_9;
    v6 = utext_nativeLength(*((UText **)this + 4));
    *((_QWORD *)this + 6) = v6;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = v6;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = v6;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = v6;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = v6;
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 268) = 0x271000000000;
LABEL_9:
  v7 = *((_QWORD *)this + 4);
  if (!*(_QWORD *)(v7 + 32) && (v8 = *((_QWORD *)this + 6), v8 == *(_QWORD *)(v7 + 16)) && v8 == *(_DWORD *)(v7 + 28))
    icu::RegexMatcher::MatchChunkAt(this, *((_DWORD *)this + 28), 0, a2);
  else
    icu::RegexMatcher::MatchAt(this, *((_QWORD *)this + 14), 0, a2);
  return (char)*((_BYTE *)this + 130);
}

uint64_t sub_18BD672C8(UText *a1)
{
  unsigned __int16 *context;
  unsigned int v4;
  int32_t v5;
  const UChar *v6;

  if (utext_nativeLength(a1) == a1->nativeIndexingLimit)
    return 0;
  context = (unsigned __int16 *)a1->context;
  v4 = context[4];
  if ((__int16)context[4] < 0)
    v5 = *((_DWORD *)context + 3);
  else
    v5 = v4 >> 5;
  if ((v4 & 0x11) != 0)
  {
    v6 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    v6 = context + 5;
  }
  else
  {
    v6 = (const UChar *)*((_QWORD *)context + 3);
  }
  a1->chunkContents = v6;
  a1->chunkLength = v5;
  a1->chunkNativeLimit = v5;
  a1->nativeIndexingLimit = v5;
  return 1;
}

double icu::RegexMatcher::resetPreserveRegion(icu::RegexMatcher *this)
{
  double result;

  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  result = NAN;
  *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 268) = 0x271000000000;
  return result;
}

uint64_t icu::RegexMatcher::lookingAt(icu::RegexMatcher *this, int64_t a2, UErrorCode *a3)
{
  char v3;
  UErrorCode v6;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (*(int *)a3 > 0)
    return 0;
  v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v3 = 0;
LABEL_14:
    *a3 = v6;
    return v3;
  }
  *((_QWORD *)this + 17) = 0;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = v8;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = v8;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = v8;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = v8;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 268) = 0x271000000000;
  if (a2 < 0)
    goto LABEL_13;
  if (*((_BYTE *)this + 312))
  {
    if (sub_18BD672C8(*((UText **)this + 4)))
    {
      v9 = utext_nativeLength(*((UText **)this + 4));
      v10 = 0;
      *((_QWORD *)this + 6) = v9;
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = v9;
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = v9;
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = v9;
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = v9;
      *((_QWORD *)this + 17) = 0;
      *((_QWORD *)this + 18) = 0;
      *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
      *((_BYTE *)this + 130) = 0;
      *((_WORD *)this + 84) = 0;
      *(_QWORD *)((char *)this + 268) = 0x271000000000;
    }
    else
    {
      v10 = *((_QWORD *)this + 14);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v10 > a2 || *((_QWORD *)this + 15) < a2)
  {
LABEL_13:
    v3 = 0;
    v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_14;
  }
  v12 = *((_QWORD *)this + 4);
  if (!*(_QWORD *)(v12 + 32)
    && (v13 = *((_QWORD *)this + 6), v13 == *(_QWORD *)(v12 + 16))
    && v13 == *(_DWORD *)(v12 + 28))
  {
    icu::RegexMatcher::MatchChunkAt(this, a2, 0, a3);
  }
  else
  {
    icu::RegexMatcher::MatchAt(this, a2, 0, a3);
  }
  return (char)*((_BYTE *)this + 130);
}

uint64_t icu::RegexMatcher::matches(icu::RegexMatcher *this, UErrorCode *a2)
{
  char v2;
  UErrorCode v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(int *)a2 > 0)
    return 0;
  v5 = *((_DWORD *)this + 79);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v2 = 0;
    *a2 = v5;
    return v2;
  }
  if (*((_BYTE *)this + 312))
  {
    if (!sub_18BD672C8(*((UText **)this + 4)))
      goto LABEL_9;
    v6 = utext_nativeLength(*((UText **)this + 4));
    *((_QWORD *)this + 6) = v6;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = v6;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = v6;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = v6;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = v6;
  }
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 268) = 0x271000000000;
LABEL_9:
  v7 = *((_QWORD *)this + 4);
  if (!*(_QWORD *)(v7 + 32) && (v8 = *((_QWORD *)this + 6), v8 == *(_QWORD *)(v7 + 16)) && v8 == *(_DWORD *)(v7 + 28))
    icu::RegexMatcher::MatchChunkAt(this, *((_DWORD *)this + 28), 1, a2);
  else
    icu::RegexMatcher::MatchAt(this, *((_QWORD *)this + 14), 1, a2);
  return (char)*((_BYTE *)this + 130);
}

uint64_t icu::RegexMatcher::matches(icu::RegexMatcher *this, int64_t a2, UErrorCode *a3)
{
  char v3;
  UErrorCode v6;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (*(int *)a3 > 0)
    return 0;
  v6 = *((_DWORD *)this + 79);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v3 = 0;
LABEL_14:
    *a3 = v6;
    return v3;
  }
  *((_QWORD *)this + 17) = 0;
  v8 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = v8;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = v8;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = v8;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = v8;
  *((_QWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
  *((_BYTE *)this + 130) = 0;
  *((_WORD *)this + 84) = 0;
  *(_QWORD *)((char *)this + 268) = 0x271000000000;
  if (a2 < 0)
    goto LABEL_13;
  if (*((_BYTE *)this + 312))
  {
    if (sub_18BD672C8(*((UText **)this + 4)))
    {
      v9 = utext_nativeLength(*((UText **)this + 4));
      v10 = 0;
      *((_QWORD *)this + 6) = v9;
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = v9;
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = v9;
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = v9;
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = v9;
      *((_QWORD *)this + 17) = 0;
      *((_QWORD *)this + 18) = 0;
      *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
      *((_BYTE *)this + 130) = 0;
      *((_WORD *)this + 84) = 0;
      *(_QWORD *)((char *)this + 268) = 0x271000000000;
    }
    else
    {
      v10 = *((_QWORD *)this + 14);
    }
  }
  else
  {
    v10 = 0;
  }
  if (v10 > a2 || *((_QWORD *)this + 15) < a2)
  {
LABEL_13:
    v3 = 0;
    v6 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_14;
  }
  v12 = *((_QWORD *)this + 4);
  if (!*(_QWORD *)(v12 + 32)
    && (v13 = *((_QWORD *)this + 6), v13 == *(_QWORD *)(v12 + 16))
    && v13 == *(_DWORD *)(v12 + 28))
  {
    icu::RegexMatcher::MatchChunkAt(this, a2, 1, a3);
  }
  else
  {
    icu::RegexMatcher::MatchAt(this, a2, 1, a3);
  }
  return (char)*((_BYTE *)this + 130);
}

uint64_t icu::RegexMatcher::pattern(icu::RegexMatcher *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t icu::RegexMatcher::region(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v5;

  if (*(int *)a5 <= 0)
  {
    if (a2 > a3 || (a3 | a2) < 0)
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    v5 = *(_QWORD *)(this + 48);
    if (v5 < a2 || v5 < a3)
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    if (a4 == -1)
    {
      *(_QWORD *)(this + 80) = 0;
      *(_QWORD *)(this + 88) = v5;
      *(_QWORD *)(this + 96) = 0;
      *(_QWORD *)(this + 104) = v5;
      *(_QWORD *)(this + 136) = 0;
      *(_QWORD *)(this + 144) = 0;
      *(_OWORD *)(this + 152) = xmmword_18BE2A810;
      *(_BYTE *)(this + 130) = 0;
      *(_WORD *)(this + 168) = 0;
      *(_QWORD *)(this + 268) = 0x271000000000;
      *(_QWORD *)(this + 64) = a2;
      *(_QWORD *)(this + 72) = a3;
      *(_QWORD *)(this + 112) = a2;
      *(_QWORD *)(this + 120) = a3;
    }
    else
    {
      *(_QWORD *)(this + 136) = 0;
      *(_OWORD *)(this + 152) = xmmword_18BE2A810;
      *(_BYTE *)(this + 130) = 0;
      *(_WORD *)(this + 168) = 0;
      *(_QWORD *)(this + 268) = 0x271000000000;
      *(_QWORD *)(this + 64) = a2;
      *(_QWORD *)(this + 72) = a3;
      *(_QWORD *)(this + 112) = a2;
      *(_QWORD *)(this + 120) = a3;
      if (a2 > a4 || a4 > a3)
        *a5 = U_INDEX_OUTOFBOUNDS_ERROR;
      *(_QWORD *)(this + 144) = a4;
    }
    if (!*(_BYTE *)(this + 128))
    {
      *(_QWORD *)(this + 96) = a2;
      *(_QWORD *)(this + 104) = a3;
    }
    if (*(_BYTE *)(this + 129))
    {
      *(_QWORD *)(this + 80) = a2;
      *(_QWORD *)(this + 88) = a3;
    }
  }
  return this;
}

uint64_t icu::RegexMatcher::region(icu::RegexMatcher *this, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  return icu::RegexMatcher::region((uint64_t)this, a2, a3, -1, a4);
}

uint64_t icu::RegexMatcher::regionEnd(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t icu::RegexMatcher::regionEnd64(icu::RegexMatcher *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t icu::RegexMatcher::regionStart(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t icu::RegexMatcher::regionStart64(icu::RegexMatcher *this)
{
  return *((_QWORD *)this + 8);
}

UText *icu::RegexMatcher::replaceAll@<X0>(UText *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  icu::RegexMatcher *v6;
  UText v7;
  UText ut;

  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  memset(&v7, 0, sizeof(v7));
  v7.magic = 878368812;
  v7.sizeOfStruct = 144;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)a4 = off_1E2256B38;
  *(_WORD *)(a4 + 8) = 2;
  if (*(int *)a3 <= 0)
  {
    v6 = (icu::RegexMatcher *)this;
    utext_openConstUnicodeString(&ut, (uint64_t)a2, a3);
    utext_openUnicodeString(&v7, a4, a3);
    icu::RegexMatcher::replaceAll(v6, &ut, &v7, a3);
    utext_close(&v7);
    return utext_close(&ut);
  }
  return this;
}

UText *icu::RegexMatcher::replaceAll(icu::RegexMatcher *this, UText *a2, UText *ut, UErrorCode *status)
{
  UText *v4;
  UErrorCode v7;
  uint64_t v9;
  void *v10;
  UText v12;
  void (**v13)(icu::UnicodeString *__hidden);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = ut;
  v18 = *MEMORY[0x1E0C80C00];
  if (*(int *)status <= 0)
  {
    v7 = *((_DWORD *)this + 79);
    if (v7 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      if (ut)
        goto LABEL_5;
      v14 = 0u;
      v17 = 0;
      v16 = 0u;
      v15 = 0u;
      v13 = off_1E2256B38;
      LOWORD(v14) = 2;
      memset(&v12, 0, sizeof(v12));
      v12.magic = 878368812;
      v12.sizeOfStruct = 144;
      utext_openUnicodeString(&v12, (uint64_t)&v13, status);
      v4 = utext_clone(0, &v12, 1, 0, status);
      utext_close(&v12);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v13);
      if (*(int *)status <= 0)
      {
LABEL_5:
        v9 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 8) = 0;
        *((_QWORD *)this + 9) = v9;
        *((_QWORD *)this + 14) = 0;
        *((_QWORD *)this + 15) = v9;
        *((_QWORD *)this + 10) = 0;
        *((_QWORD *)this + 11) = v9;
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 13) = v9;
        *((_QWORD *)this + 17) = 0;
        *((_QWORD *)this + 18) = 0;
        *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
        *((_BYTE *)this + 130) = 0;
        *((_WORD *)this + 84) = 0;
        *(_QWORD *)((char *)this + 268) = 0x271000000000;
        do
        {
          if (*((int *)this + 79) > 0)
            break;
          v12.magic = 0;
          if (!icu::RegexMatcher::find(this, (UErrorCode *)&v12))
            break;
          icu::RegexMatcher::appendReplacement(this, v4, a2, status);
        }
        while (*(int *)status < 1);
        icu::RegexMatcher::appendTail(this, v4, status);
      }
    }
    else
    {
      *status = v7;
    }
  }
  return v4;
}

UText *icu::RegexMatcher::replaceFirst@<X0>(icu::RegexMatcher *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  UText v8;
  UText ut;

  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  memset(&v8, 0, sizeof(v8));
  v8.magic = 878368812;
  v8.sizeOfStruct = 144;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)a4 = off_1E2256B38;
  *(_WORD *)(a4 + 8) = 2;
  utext_openConstUnicodeString(&ut, (uint64_t)a2, a3);
  utext_openUnicodeString(&v8, a4, a3);
  icu::RegexMatcher::replaceFirst(this, &ut, &v8, a3);
  utext_close(&v8);
  return utext_close(&ut);
}

UText *icu::RegexMatcher::replaceFirst(icu::RegexMatcher *this, UText *a2, UText *a3, UErrorCode *a4)
{
  UErrorCode v7;
  uint64_t v9;
  void *v10;
  icu::RegexMatcher *appended;
  UText v13;
  void (**v14)(icu::UnicodeString *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    v7 = *((_DWORD *)this + 79);
    if (v7 < U_ILLEGAL_ARGUMENT_ERROR)
    {
      v9 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = v9;
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = v9;
      *((_QWORD *)this + 10) = 0;
      *((_QWORD *)this + 11) = v9;
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = v9;
      *((_QWORD *)this + 17) = 0;
      *((_QWORD *)this + 18) = 0;
      *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
      *((_BYTE *)this + 130) = 0;
      *((_WORD *)this + 84) = 0;
      *(_QWORD *)((char *)this + 268) = 0x271000000000;
      v13.magic = 0;
      if (icu::RegexMatcher::find(this, (UErrorCode *)&v13))
      {
        if (!a3)
        {
          v15 = 0u;
          v18 = 0;
          v17 = 0u;
          v16 = 0u;
          v14 = off_1E2256B38;
          LOWORD(v15) = 2;
          memset(&v13, 0, sizeof(v13));
          v13.magic = 878368812;
          v13.sizeOfStruct = 144;
          utext_openUnicodeString(&v13, (uint64_t)&v14, a4);
          a3 = utext_clone(0, &v13, 1, 0, a4);
          utext_close(&v13);
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14);
        }
        appended = icu::RegexMatcher::appendReplacement(this, a3, a2, a4);
        icu::RegexMatcher::appendTail(appended, a3, a4);
      }
      else
      {
        return icu::RegexMatcher::getInput(this, a3, a4);
      }
    }
    else
    {
      *a4 = v7;
    }
  }
  return a3;
}

uint64_t icu::RegexMatcher::requireEnd(icu::RegexMatcher *this)
{
  return *((char *)this + 169);
}

icu::RegexMatcher *icu::RegexMatcher::reset(icu::RegexMatcher *this, const icu::UnicodeString *a2)
{
  int *v3;
  UText *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (int *)((char *)this + 316);
  v4 = utext_openConstUnicodeString(*((UText **)this + 4), (uint64_t)a2, (UErrorCode *)this + 79);
  *((_QWORD *)this + 4) = v4;
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 184))
    *((_QWORD *)this + 5) = utext_clone(*((UText **)this + 5), v4, 0, 1, (UErrorCode *)this + 79);
  if (*v3 <= 0)
  {
    v5 = utext_nativeLength(*((UText **)this + 4));
    *((_QWORD *)this + 6) = v5;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = v5;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = v5;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = v5;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = v5;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *(_OWORD *)((char *)this + 152) = xmmword_18BE2A810;
    *((_BYTE *)this + 130) = 0;
    *((_WORD *)this + 84) = 0;
    *(_QWORD *)((char *)this + 268) = 0x271000000000;
    v6 = *((_QWORD *)this + 3);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 3) = 0;
    *((_BYTE *)this + 312) = 1;
    v7 = *((_QWORD *)this + 40);
    if (v7)
      (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)v7 + 64))(v7, *((_QWORD *)this + 4), (char *)this + 316);
    v8 = *((_QWORD *)this + 41);
    if (v8)
      (*(void (**)(uint64_t, _QWORD, char *))(*(_QWORD *)v8 + 64))(v8, *((_QWORD *)this + 4), (char *)this + 316);
  }
  return this;
}

uint64_t icu::RegexMatcher::reset(uint64_t this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v3;

  if (*(int *)a3 <= 0)
  {
    v3 = *(_QWORD *)(this + 48);
    *(_QWORD *)(this + 64) = 0;
    *(_QWORD *)(this + 72) = v3;
    *(_QWORD *)(this + 112) = 0;
    *(_QWORD *)(this + 120) = v3;
    *(_QWORD *)(this + 80) = 0;
    *(_QWORD *)(this + 88) = v3;
    *(_QWORD *)(this + 96) = 0;
    *(_QWORD *)(this + 104) = v3;
    *(_QWORD *)(this + 136) = 0;
    *(_QWORD *)(this + 144) = 0;
    *(_OWORD *)(this + 152) = xmmword_18BE2A810;
    *(_BYTE *)(this + 130) = 0;
    *(_WORD *)(this + 168) = 0;
    *(_QWORD *)(this + 268) = 0x271000000000;
    if (a2 < 0 || v3 < a2)
      *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    else
      *(_QWORD *)(this + 144) = a2;
  }
  return this;
}

icu::RegexMatcher *icu::RegexMatcher::refreshInputText(const UText **this, UText *a2, UErrorCode *a3)
{
  int64_t v6;
  int64_t NativeIndex;
  UText *v8;
  const UText *v9;
  int64_t v10;
  UText *v11;

  if (*(int *)a3 <= 0)
  {
    if (a2 && (v6 = utext_nativeLength((UText *)this[4]), v6 == utext_nativeLength(a2)))
    {
      NativeIndex = utext_getNativeIndex(this[4]);
      v8 = utext_clone((UText *)this[4], a2, 0, 1, a3);
      this[4] = v8;
      if (*(int *)a3 <= 0)
      {
        utext_setNativeIndex(v8, NativeIndex);
        v9 = this[5];
        if (v9)
        {
          v10 = utext_getNativeIndex(v9);
          v11 = utext_clone((UText *)this[5], a2, 0, 1, a3);
          this[5] = v11;
          if (*(int *)a3 <= 0)
            utext_setNativeIndex(v11, v10);
        }
      }
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return (icu::RegexMatcher *)this;
}

uint64_t icu::RegexMatcher::setTrace(uint64_t this, char a2)
{
  *(_BYTE *)(this + 313) = a2;
  return this;
}

uint64_t icu::RegexMatcher::split(int64_t *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, int a4, UErrorCode *status)
{
  uint64_t v9;
  UText **v10;
  UText **v11;
  uint64_t v12;
  uint64_t v13;
  UText **v14;
  UText *v15;
  UText v17;

  memset(&v17, 0, sizeof(v17));
  v17.magic = 878368812;
  v17.sizeOfStruct = 144;
  utext_openConstUnicodeString(&v17, (uint64_t)a2, status);
  if (*(int *)status > 0)
    return 0;
  v10 = (UText **)uprv_malloc(8 * a4);
  if (v10)
  {
    v11 = v10;
    if (a4 <= 0)
    {
      v9 = icu::RegexMatcher::split(this, &v17, v10, a4, status);
    }
    else
    {
      v12 = 0;
      v13 = a4;
      do
      {
        v11[v12++] = utext_openUnicodeString(0, (uint64_t)a3, status);
        a3 = (icu::UnicodeString *)((char *)a3 + 64);
      }
      while (a4 != v12);
      v9 = icu::RegexMatcher::split(this, &v17, v11, a4, status);
      v14 = v11;
      do
      {
        v15 = *v14++;
        utext_close(v15);
        --v13;
      }
      while (v13);
    }
    uprv_free(v11);
    utext_close(&v17);
  }
  else
  {
    v9 = 0;
    *status = U_MEMORY_ALLOCATION_ERROR;
  }
  return v9;
}

uint64_t icu::RegexMatcher::split(int64_t *this, UText *a2, UText **a3, int a4, UErrorCode *a5)
{
  uint64_t result;
  UText *v9;
  int64_t v11;
  uint64_t v12;
  int v13;
  int64_t v14;
  int64_t v15;
  UText *v16;
  int64_t v17;
  int32_t v18;
  UChar *v19;
  UChar *v20;
  UText *v21;
  int64_t v22;
  uint64_t v23;
  UText **v24;
  uint64_t v25;
  int v26;
  UText *v27;
  UText *v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  int32_t v34;
  UChar *v35;
  int32_t v36;
  UChar *v37;
  int64_t v38;
  int32_t v39;
  int64_t v40;
  UChar *v41;
  int32_t providerProperties;
  size_t v43;
  UChar *v44;
  UText *v45;
  const UChar *v46;
  int64_t v47;
  int64_t v48;
  UText *v49;
  int64_t v50;
  int32_t v51;
  UChar *v52;
  UChar *v53;
  UText *v54;
  int64_t v55;
  int64_t v56;
  UText *v57;
  int64_t v58;
  int32_t v59;
  UChar *v60;
  UChar *v61;
  UText *v62;
  int64_t v63;
  int v64;
  UText *v65;
  int64_t v66;
  const UChar *v67;
  const UChar *v68;
  int64_t v69;
  int v70;
  UText **v71;
  UText *v72;
  uint64_t v73;
  UText **v74;
  int64_t v75;
  int v76;
  int32_t v77;
  int32_t replacementLength;
  uint64_t v79;
  uint64_t v80;
  int v81;
  UErrorCode status;
  UText ut;

  if (*(int *)a5 > 0)
    return 0;
  if (a4 <= 0)
  {
    result = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    v9 = a2;
    v11 = *((_QWORD *)icu::RegexMatcher::reset((icu::RegexMatcher *)this, a2) + 15);
    if (!v11)
      return 0;
    v12 = (a4 - 1);
    if (a4 < 2)
    {
      v14 = 0;
LABEL_65:
      if (v11 > v14)
      {
        if (!v9->chunkNativeStart && (v48 = this[6], v48 == v9->chunkNativeLimit) && v48 == v9->nativeIndexingLimit)
        {
          v49 = a3[v12];
          if (v49)
          {
            v50 = utext_nativeLength(a3[v12]);
            utext_replace(v49, 0, v50, &v9->chunkContents[v14], *((_DWORD *)this + 30) - v14, a5);
          }
          else
          {
            memset(&ut, 0, sizeof(ut));
            v67 = &v9->chunkContents[v14];
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v67, v11 - v14, a5);
            a3[v12] = utext_clone(0, &ut, 1, 0, a5);
            utext_close(&ut);
          }
        }
        else
        {
          status = U_ZERO_ERROR;
          v51 = utext_extract(v9, v14, v11, 0, 0, &status);
          v52 = (UChar *)uprv_malloc(2 * (v51 + 1));
          if (v52)
          {
            v53 = v52;
            utext_extract(v9, v14, this[15], v52, v51 + 1, a5);
            v54 = a3[v12];
            if (v54)
            {
              v55 = utext_nativeLength(a3[v12]);
              utext_replace(v54, 0, v55, v53, v51, a5);
            }
            else
            {
              memset(&ut, 0, sizeof(ut));
              ut.magic = 878368812;
              ut.sizeOfStruct = 144;
              utext_openUChars(&ut, v53, v51, a5);
              a3[v12] = utext_clone(0, &ut, 1, 0, a5);
              utext_close(&ut);
            }
            uprv_free(v53);
          }
          else
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }
    else
    {
      v79 = (a4 - 2);
      v70 = a4;
      v13 = 0;
      v14 = 0;
      v81 = *(_DWORD *)(*(_QWORD *)(this[1] + 136) + 8);
      v71 = a3 + 1;
      v72 = v9;
      v73 = (a4 - 1);
      v74 = a3;
      while (*((int *)this + 79) <= 0)
      {
        ut.magic = 0;
        if (!icu::RegexMatcher::find((icu::RegexMatcher *)this, (UErrorCode *)&ut))
          break;
        if (!v9->chunkNativeStart && (v15 = this[6], v15 == v9->chunkNativeLimit) && v15 == v9->nativeIndexingLimit)
        {
          v16 = a3[v13];
          if (v16)
          {
            v17 = utext_nativeLength(a3[v13]);
            utext_replace(v16, 0, v17, &v9->chunkContents[v14], *((_DWORD *)this + 34) - v14, a5);
          }
          else
          {
            memset(&ut, 0, sizeof(ut));
            v46 = &v9->chunkContents[v14];
            v47 = this[17] - v14;
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v46, v47, a5);
            a3[v13] = utext_clone(0, &ut, 1, 0, a5);
            utext_close(&ut);
          }
        }
        else
        {
          status = U_ZERO_ERROR;
          v18 = utext_extract(v9, v14, this[17], 0, 0, &status);
          v19 = (UChar *)uprv_malloc(2 * (v18 + 1));
          if (!v19)
            goto LABEL_82;
          v20 = v19;
          utext_extract(v9, v14, this[17], v19, v18 + 1, a5);
          v21 = a3[v13];
          if (v21)
          {
            v22 = utext_nativeLength(a3[v13]);
            utext_replace(v21, 0, v22, v20, v18, a5);
          }
          else
          {
            memset(&ut, 0, sizeof(ut));
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v20, v18, a5);
            a3[v13] = utext_clone(0, &ut, 1, 0, a5);
            utext_close(&ut);
          }
          uprv_free(v20);
        }
        v14 = this[18];
        if (v81 >= 1 && v13 < (int)v79)
        {
          v75 = this[18];
          v76 = v13;
          v23 = 0;
          v80 = v13 + 1;
          v24 = &v71[v13];
          v25 = v79;
          while (1)
          {
            v26 = v23 + 1;
            v27 = (UText *)this[4];
            v28 = v24[v23];
            v29 = icu::RegexMatcher::start64((icu::RegexMatcher *)this, (int)v23 + 1, a5);
            v30 = icu::RegexMatcher::end64((icu::RegexMatcher *)this, (int)v23 + 1, a5);
            if (*(int *)a5 <= 0)
            {
              v32 = v30;
              if (v29 == v30)
              {
                if (v28)
                {
                  v33 = utext_nativeLength(v28);
                  utext_replace(v28, 0, v33, 0, 0, a5);
                }
                else
                {
                  v28 = utext_openUChars(0, 0, 0, a5);
                }
              }
              else
              {
                v34 = utext_extract(v27, v29, v30, 0, 0, a5);
                if (*a5 == U_BUFFER_OVERFLOW_ERROR || *(int *)a5 <= 0)
                {
                  *a5 = U_ZERO_ERROR;
                  v35 = (UChar *)&ut.sizeOfStruct + 1;
                  memset(&ut.providerProperties, 0, 88);
                  *(_QWORD *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                  v36 = v34 + 1;
                  ut.providerProperties = 40;
                  replacementLength = v34;
                  if (v34 >= 40)
                  {
                    v77 = v34 + 1;
                    v37 = (UChar *)uprv_malloc(2 * (v34 + 1));
                    if (v37)
                    {
                      v35 = v37;
                      if (LOBYTE(ut.sizeOfStruct))
                        uprv_free(*(void **)&ut.magic);
                      *(_QWORD *)&ut.magic = v35;
                      v36 = v77;
                      ut.providerProperties = v77;
                      LOBYTE(ut.sizeOfStruct) = 1;
                    }
                    else
                    {
                      *a5 = U_MEMORY_ALLOCATION_ERROR;
                      v35 = *(UChar **)&ut.magic;
                      v36 = v77;
                    }
                  }
                  v38 = v29;
                  v39 = v36;
                  utext_extract(v27, v38, v32, v35, v36, a5);
                  if (v28)
                  {
                    v40 = utext_nativeLength(v28);
                    utext_replace(v28, 0, v40, *(const UChar **)&ut.magic, replacementLength, a5);
                    goto LABEL_40;
                  }
                  v25 = v79;
                  if (*(int *)a5 > 0)
                  {
                    v28 = 0;
LABEL_43:
                    if (LOBYTE(ut.sizeOfStruct))
                      uprv_free(*(void **)&ut.magic);
                    goto LABEL_23;
                  }
                  if (LOBYTE(ut.sizeOfStruct))
                  {
                    v41 = *(UChar **)&ut.magic;
                    *(_QWORD *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                    ut.providerProperties = 40;
                    LOBYTE(ut.sizeOfStruct) = 0;
                    if (!v41)
                      goto LABEL_55;
LABEL_53:
                    v45 = utext_openUChars(0, v41, replacementLength, a5);
                    if (*(int *)a5 < 1)
                    {
                      v28 = v45;
                      v45->providerProperties |= 0x20u;
                    }
                    else
                    {
                      uprv_free(v41);
                      v28 = 0;
                    }
                  }
                  else
                  {
                    if ((replacementLength & 0x80000000) == 0)
                    {
                      providerProperties = ut.providerProperties;
                      if (ut.providerProperties >= v39)
                        providerProperties = v39;
                      v43 = 2 * providerProperties;
                      v44 = (UChar *)uprv_malloc(v43);
                      if (v44)
                      {
                        v41 = v44;
                        memcpy(v44, *(const void **)&ut.magic, v43);
                        *(_QWORD *)&ut.magic = (char *)&ut.sizeOfStruct + 2;
                        ut.providerProperties = 40;
                        LOBYTE(ut.sizeOfStruct) = 0;
                        goto LABEL_53;
                      }
                    }
LABEL_55:
                    v28 = 0;
                    *a5 = U_MEMORY_ALLOCATION_ERROR;
                  }
LABEL_40:
                  v25 = v79;
                  goto LABEL_43;
                }
              }
            }
LABEL_23:
            v24[v23] = v28;
            if (v26 < v81)
            {
              v31 = v80 + v23++;
              if (v31 < v25)
                continue;
            }
            v14 = v75;
            v13 = v76 + v26;
            v12 = v73;
            a3 = v74;
            v9 = v72;
            break;
          }
        }
        v11 = this[15];
        if (v14 == v11)
        {
          v64 = v13 + 1;
          LODWORD(v12) = v13;
          if (v13 + 1 < v70)
          {
            v65 = a3[v64];
            if (v65)
            {
              v66 = utext_nativeLength(a3[v64]);
              utext_replace(v65, 0, v66, &word_18BE2A924, 0, a5);
            }
            else
            {
              a3[v64] = utext_openUChars(0, 0, 0, a5);
            }
            LODWORD(v12) = v13 + 1;
          }
          return (v12 + 1);
        }
        if (*(int *)a5 > 0)
          goto LABEL_91;
        if (++v13 >= (int)v12)
          goto LABEL_65;
      }
      if (!v9->chunkNativeStart && (v56 = this[6], v56 == v9->chunkNativeLimit) && v56 == v9->nativeIndexingLimit)
      {
        v57 = a3[v13];
        if (v57)
        {
          v58 = utext_nativeLength(a3[v13]);
          utext_replace(v57, 0, v58, &v9->chunkContents[v14], *((_DWORD *)this + 30) - v14, a5);
        }
        else
        {
          memset(&ut, 0, sizeof(ut));
          v68 = &v9->chunkContents[v14];
          v69 = this[15] - v14;
          ut.magic = 878368812;
          ut.sizeOfStruct = 144;
          utext_openUChars(&ut, v68, v69, a5);
          a3[v13] = utext_clone(0, &ut, 1, 0, a5);
          utext_close(&ut);
        }
      }
      else
      {
        status = U_ZERO_ERROR;
        v59 = utext_extract(v9, v14, this[15], 0, 0, &status);
        v60 = (UChar *)uprv_malloc(2 * (v59 + 1));
        if (v60)
        {
          v61 = v60;
          utext_extract(v9, v14, this[15], v60, v59 + 1, a5);
          v62 = a3[v13];
          if (v62)
          {
            v63 = utext_nativeLength(a3[v13]);
            utext_replace(v62, 0, v63, v61, v59, a5);
          }
          else
          {
            memset(&ut, 0, sizeof(ut));
            ut.magic = 878368812;
            ut.sizeOfStruct = 144;
            utext_openUChars(&ut, v61, v59, a5);
            a3[v13] = utext_clone(0, &ut, 1, 0, a5);
            utext_close(&ut);
          }
          uprv_free(v61);
        }
        else
        {
LABEL_82:
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
LABEL_91:
      LODWORD(v12) = v13;
    }
    return (v12 + 1);
  }
  return result;
}

uint64_t icu::RegexMatcher::start(icu::RegexMatcher *this, UErrorCode *a2)
{
  UErrorCode v2;

  if (*(int *)a2 > 0)
    return 0xFFFFFFFFLL;
  v2 = *((_DWORD *)this + 79);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_3:
    *a2 = v2;
    return 0xFFFFFFFFLL;
  }
  if (!*((_BYTE *)this + 130))
  {
    v2 = U_REGEX_INVALID_STATE;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 136) + 8) & 0x80000000) != 0)
  {
    v2 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_3;
  }
  return *((unsigned int *)this + 34);
}

uint64_t icu::RegexMatcher::start(icu::RegexMatcher *this, int a2, UErrorCode *a3)
{
  return icu::RegexMatcher::start64(this, a2, a3);
}

uint64_t icu::RegexMatcher::start64(icu::RegexMatcher *this, UErrorCode *a2)
{
  UErrorCode v2;

  if (*(int *)a2 > 0)
    return -1;
  v2 = *((_DWORD *)this + 79);
  if (v2 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_3:
    *a2 = v2;
    return -1;
  }
  if (!*((_BYTE *)this + 130))
  {
    v2 = U_REGEX_INVALID_STATE;
    goto LABEL_3;
  }
  if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 136) + 8) & 0x80000000) != 0)
  {
    v2 = U_INDEX_OUTOFBOUNDS_ERROR;
    goto LABEL_3;
  }
  return *((_QWORD *)this + 17);
}

uint64_t icu::RegexMatcher::useAnchoringBounds(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(this + 129) = a2;
  if (a2)
    v2 = *(_QWORD *)(this + 64);
  else
    v2 = 0;
  *(_QWORD *)(this + 80) = v2;
  v3 = 72;
  if (!a2)
    v3 = 48;
  *(_QWORD *)(this + 88) = *(_QWORD *)(this + v3);
  return this;
}

uint64_t icu::RegexMatcher::useTransparentBounds(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(this + 128) = a2;
  if (a2)
    v2 = 0;
  else
    v2 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 96) = v2;
  v3 = 48;
  if (!a2)
    v3 = 72;
  *(_QWORD *)(this + 104) = *(_QWORD *)(this + v3);
  return this;
}

uint64_t icu::RegexMatcher::setTimeLimit(uint64_t this, int a2, UErrorCode *a3)
{
  UErrorCode v3;

  if (*(int *)a3 <= 0)
  {
    v3 = *(_DWORD *)(this + 316);
    if (v3 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
LABEL_3:
      *a3 = v3;
      return this;
    }
    if (a2 < 0)
    {
      v3 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_3;
    }
    *(_DWORD *)(this + 264) = a2;
  }
  return this;
}

uint64_t icu::RegexMatcher::getTimeLimit(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 66);
}

uint64_t icu::RegexMatcher::getStackLimit(icu::RegexMatcher *this)
{
  return *((unsigned int *)this + 69);
}

uint64_t icu::RegexMatcher::setMatchCallback(uint64_t this, signed __int8 (*a2)(const void *, int), const void *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *(_QWORD *)(this + 280) = a2;
    *(_QWORD *)(this + 288) = a3;
  }
  return this;
}

uint64_t icu::RegexMatcher::getMatchCallback(uint64_t this, signed __int8 (**a2)(const void *, int), const void **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *a2 = *(signed __int8 (**)(const void *, int))(this + 280);
    *a3 = *(const void **)(this + 288);
  }
  return this;
}

uint64_t icu::RegexMatcher::setFindProgressCallback(uint64_t this, signed __int8 (*a2)(const void *, uint64_t), const void *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *(_QWORD *)(this + 296) = a2;
    *(_QWORD *)(this + 304) = a3;
  }
  return this;
}

uint64_t icu::RegexMatcher::getFindProgressCallback(uint64_t this, signed __int8 (**a2)(const void *, uint64_t), const void **a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    *a2 = *(signed __int8 (**)(const void *, uint64_t))(this + 296);
    *a3 = *(const void **)(this + 304);
  }
  return this;
}

uint64_t icu::RegexMatcher::resetStack(icu::RegexMatcher *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  icu::UVector64::removeAllElements(*((_QWORD *)this + 22));
  v2 = *((_QWORD *)this + 22);
  v3 = *(_DWORD *)(*((_QWORD *)this + 1) + 128);
  v4 = *(_DWORD *)(v2 + 8);
  v5 = v4 + v3;
  if (v4 + v3 >= 0 && *(_DWORD *)(v2 + 12) >= v5)
    goto LABEL_5;
  if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v5, (UErrorCode *)this + 79))
  {
    v4 = *(_DWORD *)(v2 + 8);
    v5 = v4 + v3;
LABEL_5:
    v6 = *(_QWORD *)(v2 + 24) + 8 * v4;
    *(_DWORD *)(v2 + 8) = v5;
    goto LABEL_7;
  }
  v6 = 0;
LABEL_7:
  if (*((int *)this + 79) > 0)
    return 0;
  v7 = *(_DWORD *)(*((_QWORD *)this + 1) + 128);
  if (v7 >= 3)
    memset((void *)(v6 + 16), 255, 8 * (v7 - 2));
  return v6;
}

uint64_t icu::RegexMatcher::isWordBoundary(icu::RegexMatcher *this, int64_t a2)
{
  UText *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  UText *v9;
  int32_t chunkOffset;
  BOOL v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v16;

  if (*((_QWORD *)this + 13) <= a2)
  {
    v5 = 0;
    *((_BYTE *)this + 168) = 1;
    goto LABEL_7;
  }
  v3 = (UText *)*((_QWORD *)this + 4);
  v4 = a2 - v3->chunkNativeStart;
  if (v4 < 0 || v4 >= v3->nativeIndexingLimit || v3->chunkContents[v4] >> 10 > 0x36u)
  {
    utext_setNativeIndex(v3, a2);
    v3 = (UText *)*((_QWORD *)this + 4);
    LODWORD(v4) = v3->chunkOffset;
  }
  else
  {
    v3->chunkOffset = v4;
  }
  if ((int)v4 >= v3->chunkLength || (v16 = v3->chunkContents[(int)v4], v16 >> 11 > 0x1A))
    v16 = utext_current32(v3);
  if (u_hasBinaryProperty(v16, UCHAR_GRAPHEME_EXTEND) || u_charType(v16) == 16)
    return 0;
  v5 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 208), v16);
LABEL_7:
  while (1)
  {
    v6 = *((_QWORD *)this + 4);
    v7 = *(int *)(v6 + 40);
    v8 = (int)v7 <= *(_DWORD *)(v6 + 28)
       ? *(_QWORD *)(v6 + 32) + v7
       : (*(uint64_t (**)(void))(*(_QWORD *)(v6 + 56) + 64))();
    if (v8 <= *((_QWORD *)this + 12))
      break;
    v9 = (UText *)*((_QWORD *)this + 4);
    chunkOffset = v9->chunkOffset;
    v11 = __OFSUB__(chunkOffset, 1);
    v12 = chunkOffset - 1;
    if (v12 < 0 != v11 || (v13 = v9->chunkContents[v12], v13 >> 11 > 0x1A))
      v13 = utext_previous32(v9);
    else
      v9->chunkOffset = v12;
    if (!u_hasBinaryProperty(v13, UCHAR_GRAPHEME_EXTEND) && u_charType(v13) != 16)
    {
      v14 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 208), v13);
      return v14 ^ v5;
    }
  }
  v14 = 0;
  return v14 ^ v5;
}

uint64_t icu::RegexMatcher::isChunkWordBoundary(icu::RegexMatcher *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  UChar32 v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  UChar32 v14;
  int v16;
  int v17;
  BOOL v18;
  int v19;
  int v20;
  int v22;
  UChar32 v23;

  LODWORD(v2) = a2;
  v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 48);
  v5 = a2;
  v6 = *((_QWORD *)this + 13);
  if (v6 <= a2)
  {
    v11 = 0;
    *((_BYTE *)this + 168) = 1;
    goto LABEL_7;
  }
  v7 = *(unsigned __int16 *)(v4 + 2 * a2);
  if ((v7 & 0xF800) == 0xD800)
  {
    if ((v7 & 0x400) != 0)
    {
      if (*((_QWORD *)this + 12) < a2)
      {
        v22 = *(unsigned __int16 *)(v4 + 2 * a2 - 2);
        v9 = (v22 & 0xFC00) == 55296;
        v10 = v7 + (v22 << 10);
LABEL_26:
        v23 = v10 - 56613888;
        if (v9)
          v7 = v23;
      }
    }
    else if (v6 != a2 + 1)
    {
      v8 = *(unsigned __int16 *)(v4 + 2 * (a2 + 1));
      v9 = (v8 & 0xFC00) == 56320;
      v10 = v8 + (v7 << 10);
      goto LABEL_26;
    }
  }
  if (u_hasBinaryProperty(v7, UCHAR_GRAPHEME_EXTEND) || u_charType(v7) == 16)
    return 0;
  v11 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 208), v7);
LABEL_7:
  v12 = *((_QWORD *)this + 12);
  if (v12 >= v5)
  {
LABEL_22:
    v20 = 0;
  }
  else
  {
    while (1)
    {
      v13 = (int)v2;
      v2 = (int)v2 - 1;
      v14 = *(unsigned __int16 *)(v4 + 2 * v2);
      if (v12 < v2 && (v14 & 0xFC00) == 56320)
      {
        v16 = v13 - 2;
        v17 = *(unsigned __int16 *)(v4 + 2 * (v13 - 2));
        v18 = (v17 & 0xFC00) == 55296;
        v19 = v14 - 56613888 + (v17 << 10);
        if (v18)
          LODWORD(v2) = v16;
        if (v18)
          v14 = v19;
      }
      if (!u_hasBinaryProperty(v14, UCHAR_GRAPHEME_EXTEND) && u_charType(v14) != 16)
        break;
      v12 = *((_QWORD *)this + 12);
      if (v12 >= (int)v2)
        goto LABEL_22;
    }
    v20 = icu::UnicodeSet::contains((icu::UnicodeSet *)(qword_1ECD284E8 + 208), v14);
  }
  return v20 ^ v11;
}

uint64_t icu::RegexMatcher::isUWordBoundary(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t result;
  char **English;
  UErrorCode *v8;
  UErrorCode *v9;
  char *WordInstance;

  if (!*((_QWORD *)this + 40))
  {
    English = (char **)icu::Locale::getEnglish(this);
    WordInstance = icu::BreakIterator::createWordInstance(English, (const icu::Locale *)a3, v8, v9);
    *((_QWORD *)this + 40) = WordInstance;
    if (*(int *)a3 > 0)
      return 0;
    (*(void (**)(char *, _QWORD, UErrorCode *))(*(_QWORD *)WordInstance + 64))(WordInstance, *((_QWORD *)this + 4), a3);
  }
  if (*((_QWORD *)this + 13) > a2)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 40) + 136))(*((_QWORD *)this + 40), a2);
  result = 1;
  *((_BYTE *)this + 168) = 1;
  return result;
}

uint64_t icu::RegexMatcher::followingGCBoundary(icu::RegexMatcher *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v5;
  int v6;
  char **English;
  UErrorCode *v9;
  UErrorCode *v10;
  char *CharacterInstance;

  v5 = *((_QWORD *)this + 41);
  if (!v5)
  {
    English = (char **)icu::Locale::getEnglish(0);
    CharacterInstance = icu::BreakIterator::createCharacterInstance(English, (const icu::Locale *)a3, v9, v10);
    *((_QWORD *)this + 41) = CharacterInstance;
    if (*(int *)a3 > 0)
      return a2;
    (*(void (**)(char *, _QWORD, UErrorCode *))(*(_QWORD *)CharacterInstance + 64))(CharacterInstance, *((_QWORD *)this + 4), a3);
    v5 = *((_QWORD *)this + 41);
  }
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)v5 + 120))(v5, a2, a3);
  if (v6 != -1)
    return v6;
  return a2;
}

uint64_t icu::RegexMatcher::IncrementTime(uint64_t this, UErrorCode *a2)
{
  uint64_t v3;
  UErrorCode v4;
  uint64_t (*v5)(_QWORD);
  int v6;

  v3 = this;
  v4 = U_REGEX_TIME_OUT;
  *(_DWORD *)(this + 272) = 10000;
  ++*(_DWORD *)(this + 268);
  v5 = *(uint64_t (**)(_QWORD))(this + 280);
  if (v5)
  {
    this = v5(*(_QWORD *)(this + 288));
    if (!(_DWORD)this)
    {
      v4 = U_REGEX_STOPPED_BY_CALLER;
LABEL_7:
      *a2 = v4;
      return this;
    }
  }
  v6 = *(_DWORD *)(v3 + 264);
  if (v6 >= 1 && *(_DWORD *)(v3 + 268) >= v6)
    goto LABEL_7;
  return this;
}

uint64_t sub_18BD69360(icu::RegexMatcher *this, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;

  if (*(int *)a4 > 0)
    return a2;
  v8 = *((_QWORD *)this + 22);
  v9 = *((_DWORD *)this + 14);
  v10 = *(_DWORD *)(v8 + 8);
  v11 = v10 + v9;
  if (v10 + v9 >= 0 && *(_DWORD *)(v8 + 12) >= v11)
    goto LABEL_6;
  if (icu::UVector64::expandCapacity(*((icu::UVector64 **)this + 22), v11, a4))
  {
    v10 = *(_DWORD *)(v8 + 8);
    v11 = v10 + v9;
LABEL_6:
    v12 = *(_QWORD *)(v8 + 24) + 8 * v10;
    *(_DWORD *)(v8 + 8) = v11;
    goto LABEL_8;
  }
  v12 = 0;
LABEL_8:
  if (*(int *)a4 >= 1)
  {
    *a4 = U_REGEX_STACK_OVERFLOW;
    return a2;
  }
  v14 = 0;
  v15 = *((int *)this + 14);
  v16 = v12 - 8 * v15;
  v17 = -8 * v15;
  do
  {
    *(_QWORD *)(v12 + v14) = *(_QWORD *)(v16 + v14);
    v14 += 8;
  }
  while (v17 + v14);
  v18 = *((_DWORD *)this + 68);
  v19 = __OFSUB__(v18--, 1);
  *((_DWORD *)this + 68) = v18;
  if ((v18 < 0) ^ v19 | (v18 == 0))
    icu::RegexMatcher::IncrementTime((uint64_t)this, a4);
  *(_QWORD *)(v16 + 8) = a3;
  return v12;
}

void *icu::RegexMatcher::getStaticClassID(icu::RegexMatcher *this)
{
  return &unk_1EE009DD9;
}

void *icu::RegexMatcher::getDynamicClassID(icu::RegexMatcher *this)
{
  return &unk_1EE009DD9;
}

void *icu::RemoveTransliterator::getStaticClassID(icu::RemoveTransliterator *this)
{
  return &unk_1EE009DDA;
}

void *sub_18BD6947C()
{
  return &unk_1EE009DDA;
}

void *sub_18BD69488()
{
  unint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD v5[2];
  const __int16 *v6;
  const char *v7;
  const __int16 *v8;
  _BYTE v9[64];
  _BYTE v10[64];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = L"Any-Remove";
  v0 = icu::UnicodeString::UnicodeString(v10, 1, &v8);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18BD69584, 0);
  v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v10);
  v5[1] = v8;
  v7 = "R";
  icu::UnicodeString::UnicodeString(v2, 1, &v7);
  v6 = L"Null";
  icu::UnicodeString::UnicodeString(v9, 1, &v6);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v10, (const icu::UnicodeString *)v9, 0);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v9);
  v5[0] = v6;
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v10);
}

icu::Transliterator *sub_18BD69584@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  icu::Transliterator *result;

  result = (icu::Transliterator *)icu::UMemory::operator new(a2, (icu::UMemory *)0x58, a1);
  if (result)
    return sub_18BD695A4(result);
  return result;
}

icu::Transliterator *sub_18BD695A4(icu::Transliterator *a1)
{
  void *v2;
  const __int16 *v4;
  UChar *v5[9];

  v5[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v4 = L"Any-Remove";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  icu::Transliterator::Transliterator(a1, v5, 0);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(_QWORD *)a1 = &off_1E2265D00;
  return a1;
}

void sub_18BD6964C(icu::Transliterator *a1)
{
  void *v1;

  icu::Transliterator::~Transliterator(a1);
  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18BD69660@<X0>(icu::Transliterator *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;
  uint64_t Filter;
  icu::UnicodeFilter *v7;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x58, a2);
  v5 = v4;
  if (v4)
  {
    sub_18BD695A4(v4);
    if (icu::Transliterator::getFilter(a1))
    {
      Filter = icu::Transliterator::getFilter(a1);
      v7 = (icu::UnicodeFilter *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Filter + 24))(Filter);
      icu::Transliterator::adoptFilter(v5, v7);
    }
  }
  return v5;
}

void sub_18BD696C4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v4;
  void (**v5)(icu::UnicodeString *__hidden);
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v9 = 0;
  v8 = 0u;
  v5 = off_1E2256B38;
  LOWORD(v6) = 2;
  (*(void (**)(uint64_t, _QWORD, _QWORD, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 32))(a2, a3[2], a3[3], &v5);
  v4 = a3[2];
  a3[1] += v4 - a3[3];
  a3[3] = v4;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v5);
}

icu::RegexPattern *icu::RegexPattern::RegexPattern(icu::RegexPattern *this, unint64_t a2)
{
  *(_QWORD *)this = off_1E2265DB0;
  *((_QWORD *)this + 5) = off_1E2256B38;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E2265DB0;
  *((_QWORD *)this + 5) = off_1E2256B38;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, a2);
  return this;
}

uint64_t *icu::RegexPattern::init(icu::RegexPattern *this, unint64_t a2)
{
  UErrorCode *v3;
  uint64_t v4;
  _DWORD *v5;
  icu::UVector64 *v6;
  unint64_t v7;
  uint64_t *v8;
  icu::UVector32 *v9;
  unint64_t v10;
  uint64_t *v11;
  icu::UVector *v12;
  unint64_t v13;
  uint64_t *v14;
  icu::UnicodeSet *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *result;

  *(_OWORD *)((char *)this + 104) = 0u;
  v3 = (UErrorCode *)((char *)this + 104);
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  if ((*((_WORD *)this + 24) & 1) != 0)
    v4 = 2;
  else
    v4 = *((_WORD *)this + 24) & 0x1F;
  *((_WORD *)this + 24) = v4;
  *(_OWORD *)((char *)this + 120) = 0uLL;
  v5 = (_DWORD *)((char *)this + 120);
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 136) = 0uLL;
  *((_DWORD *)this + 38) = 0;
  v6 = (icu::UVector64 *)icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x20, a2);
  if (v6)
    v6 = icu::UVector64::UVector64(v6, v3 + 4);
  *((_QWORD *)this + 4) = v6;
  v9 = (icu::UVector32 *)icu::UMemory::operator new(v8, (icu::UMemory *)0x20, v7);
  if (v9)
    v9 = icu::UVector32::UVector32(v9, v3 + 4);
  *((_QWORD *)this + 17) = v9;
  v12 = (icu::UVector *)icu::UMemory::operator new(v11, (icu::UMemory *)0x28, v10);
  if (v12)
    v12 = icu::UVector::UVector(v12, v3 + 4);
  *(_QWORD *)v3 = v12;
  v15 = (icu::UnicodeSet *)icu::UMemory::operator new(v14, (icu::UMemory *)0xC8, v13);
  if (v15)
    icu::UnicodeSet::UnicodeSet(v15);
  *((_QWORD *)this + 20) = v15;
  result = icu::UMemory::operator new(v17, (icu::UMemory *)0x20, v16);
  if (result)
  {
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
  }
  *((_QWORD *)this + 22) = result;
  if (*((int *)this + 30) <= 0)
  {
    if (*((_QWORD *)this + 4) && *((_QWORD *)this + 17) && *(_QWORD *)v3 && result && *((_QWORD *)this + 20))
      return (uint64_t *)icu::UVector::addElement(*(icu::UVector **)v3, 0, v3 + 4);
    else
      *v5 = 7;
  }
  return result;
}

uint64_t icu::RegexPattern::RegexPattern(icu::RegexPattern *this, const icu::RegexPattern *a2)
{
  *(_QWORD *)this = off_1E2265DB0;
  *((_QWORD *)this + 5) = off_1E2256B38;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, (unint64_t)a2);
  return icu::RegexPattern::operator=((uint64_t)this, (uint64_t)a2);
}

{
  *(_QWORD *)this = off_1E2265DB0;
  *((_QWORD *)this + 5) = off_1E2256B38;
  *((_WORD *)this + 24) = 2;
  icu::RegexPattern::init(this, (unint64_t)a2);
  return icu::RegexPattern::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::RegexPattern::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int *v7;
  uint64_t *v8;
  icu::UnicodeString *v9;
  uint64_t v10;
  UText *v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  const icu::UnicodeSet *v23;
  unint64_t v24;
  uint64_t *v25;
  icu::UnicodeSet *v26;
  icu::UnicodeSet *v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  UChar **v36;
  icu::UnicodeString *v37;
  uint64_t v38;
  int v39;

  if (a1 == a2)
    return a1;
  icu::RegexPattern::zap((icu::RegexPattern *)a1);
  icu::RegexPattern::init((icu::RegexPattern *)a1, v4);
  v6 = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 120) = v6;
  v7 = (int *)(a1 + 120);
  if (v6 > 0)
    return a1;
  v8 = *(uint64_t **)(a2 + 16);
  if (v8)
  {
    v9 = (icu::UnicodeString *)icu::UMemory::operator new(v8, (icu::UMemory *)0x40, v5);
    if (!v9)
    {
      *(_QWORD *)(a1 + 16) = 0;
LABEL_21:
      *(_DWORD *)(a1 + 120) = 7;
      return a1;
    }
    v10 = (uint64_t)v9;
    *(_QWORD *)(a1 + 16) = icu::UnicodeString::UnicodeString(v9, *(UChar ***)(a2 + 16));
    v11 = utext_openConstUnicodeString(0, v10, (UErrorCode *)(a1 + 120));
  }
  else
  {
    *(_QWORD *)(a1 + 16) = 0;
    v11 = utext_clone(*(UText **)(a1 + 8), *(const UText **)(a2 + 8), 0, 1, (UErrorCode *)(a1 + 120));
  }
  *(_QWORD *)(a1 + 8) = v11;
  if (*v7 > 0)
    return a1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  icu::UnicodeString::operator=((UChar **)(a1 + 40), (UChar **)(a2 + 40));
  *(_QWORD *)(a1 + 124) = *(_QWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  icu::UnicodeSet::operator=(*(icu::UnicodeSet **)(a1 + 160), *(const icu::UnicodeSet **)(a2 + 160));
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  v12 = *(_OWORD **)(a2 + 176);
  v13 = *(_OWORD **)(a1 + 176);
  v14 = v12[1];
  *v13 = *v12;
  v13[1] = v14;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  icu::UVector64::assign(*(icu::UVector64 **)(a1 + 32), *(const icu::UVector64 **)(a2 + 32), (UErrorCode *)(a1 + 120));
  icu::UVector32::assign(*(icu::UVector32 **)(a1 + 136), *(const icu::UVector32 **)(a2 + 136), (UErrorCode *)(a1 + 120));
  v16 = *(int *)(*(_QWORD *)(a2 + 104) + 8);
  if ((int)v16 < 0)
    v17 = -1;
  else
    v17 = 32 * v16;
  v18 = (void *)icu::UMemory::operator new[]((icu::UMemory *)v17, v15);
  if (!v18)
  {
    *(_QWORD *)(a1 + 112) = 0;
    goto LABEL_21;
  }
  v19 = v18;
  if (!(_DWORD)v16)
  {
    *(_QWORD *)(a1 + 112) = v18;
    goto LABEL_25;
  }
  bzero(v18, 32 * v16);
  *(_QWORD *)(a1 + 112) = v19;
  if ((int)v16 < 2)
  {
LABEL_25:
    if (*(_QWORD *)(a2 + 192))
    {
      if (icu::RegexPattern::initNamedCaptureMap((icu::RegexPattern *)a1))
      {
        v39 = -1;
        v32 = uhash_nextElement(*(uint64_t **)(a2 + 192), &v39);
        if (v32)
        {
          v34 = v32;
          do
          {
            v35 = (uint64_t *)*v7;
            if ((int)v35 > 0)
              break;
            v36 = *(UChar ***)(v34 + 16);
            v37 = (icu::UnicodeString *)icu::UMemory::operator new(v35, (icu::UMemory *)0x40, v33);
            if (v37)
            {
              v38 = (uint64_t)v37;
              icu::UnicodeString::UnicodeString(v37, v36);
              uhash_puti(*(_QWORD *)(a1 + 192), v38, *(_DWORD *)(v34 + 8), (int *)(a1 + 120));
            }
            else
            {
              *v7 = 7;
            }
            v34 = uhash_nextElement(*(uint64_t **)(a2 + 192), &v39);
          }
          while (v34);
        }
      }
    }
    return a1;
  }
  v20 = 32 * v16;
  v21 = 1;
  v22 = 32;
  while (*v7 <= 0)
  {
    v23 = (const icu::UnicodeSet *)icu::UVector::elementAt(*(icu::UVector **)(a2 + 104), v21);
    v26 = (icu::UnicodeSet *)icu::UMemory::operator new(v25, (icu::UMemory *)0xC8, v24);
    if (!v26)
    {
      *v7 = 7;
      goto LABEL_25;
    }
    v27 = v26;
    icu::UnicodeSet::UnicodeSet(v26, v23);
    icu::UVector::addElement(*(icu::UVector **)(a1 + 104), v27, (UErrorCode *)(a1 + 120));
    v28 = (_OWORD *)(*(_QWORD *)(a2 + 112) + v22);
    v29 = (_OWORD *)(*(_QWORD *)(a1 + 112) + v22);
    v30 = v28[1];
    *v29 = *v28;
    v29[1] = v30;
    ++v21;
    v22 += 32;
    if (v20 == v22)
      goto LABEL_25;
  }
  return a1;
}

void icu::RegexPattern::zap(icu::RegexPattern *this)
{
  uint64_t v2;
  icu::UVector *v3;
  signed int v4;
  icu::UnicodeSet *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  icu::UnicodeSet *v11;
  void *v12;
  void *v13;
  UText *v14;
  uint64_t v15;
  void **v16;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 4) = 0;
  v3 = (icu::UVector *)*((_QWORD *)this + 13);
  if (*((int *)v3 + 2) >= 2)
  {
    v4 = 1;
    do
    {
      v5 = (icu::UnicodeSet *)icu::UVector::elementAt(v3, v4);
      if (v5)
      {
        v7 = icu::UnicodeSet::~UnicodeSet(v6, v5);
        icu::UMemory::operator delete(v7);
      }
      ++v4;
      v3 = (icu::UVector *)*((_QWORD *)this + 13);
    }
    while (v4 < *((_DWORD *)v3 + 2));
  }
  (*(void (**)(icu::UVector *))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 13) = 0;
  v9 = (void *)*((_QWORD *)this + 14);
  if (v9)
    icu::UMemory::operator delete[](v9);
  *((_QWORD *)this + 14) = 0;
  v10 = *((_QWORD *)this + 17);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 17) = 0;
  v11 = (icu::UnicodeSet *)*((_QWORD *)this + 20);
  if (v11)
  {
    v12 = icu::UnicodeSet::~UnicodeSet(v8, v11);
    icu::UMemory::operator delete(v12);
  }
  *((_QWORD *)this + 20) = 0;
  v13 = (void *)*((_QWORD *)this + 22);
  if (v13)
    icu::UMemory::operator delete(v13);
  *((_QWORD *)this + 22) = 0;
  v14 = (UText *)*((_QWORD *)this + 1);
  if (v14)
  {
    utext_close(v14);
    *((_QWORD *)this + 1) = 0;
  }
  v15 = *((_QWORD *)this + 2);
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    *((_QWORD *)this + 2) = 0;
  }
  v16 = (void **)*((_QWORD *)this + 24);
  if (v16)
  {
    uhash_close(v16);
    *((_QWORD *)this + 24) = 0;
  }
}

uint64_t icu::RegexPattern::initNamedCaptureMap(icu::RegexPattern *this)
{
  int32x2_t *v3;

  if (*((_QWORD *)this + 24))
    return 1;
  v3 = uhash_openSize((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, (uint64_t)uhash_compareLong, 7, (int *)this + 30);
  *((_QWORD *)this + 24) = v3;
  if (*((int *)this + 30) <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v3, (uint64_t)uprv_deleteUObject);
    return 1;
  }
  return 0;
}

void icu::RegexPattern::~RegexPattern(icu::RegexPattern *this)
{
  void *v2;

  icu::RegexPattern::zap(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RegexPattern *)((char *)this + 40));
  icu::UObject::~UObject(this);
}

{
  void *v2;

  icu::RegexPattern::zap(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RegexPattern *)((char *)this + 40));
  icu::UObject::~UObject(this);
}

{
  void *v2;
  void *v3;

  icu::RegexPattern::zap(this);
  icu::UnicodeString::~UnicodeString(v2, (icu::RegexPattern *)((char *)this + 40));
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::RegexPattern::clone@<X0>(icu::RegexPattern *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xC8, a2);
  v6 = (uint64_t)v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E2265DB0;
    v4[5] = (uint64_t)off_1E2256B38;
    *((_WORD *)v4 + 24) = 2;
    icu::RegexPattern::init((icu::RegexPattern *)v4, v5);
    icu::RegexPattern::operator=(v6, (uint64_t)this);
  }
  return v6;
}

uint64_t icu::RegexPattern::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  UText *v8;
  UText *v9;
  uint64_t chunkNativeStart;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;

  if (*(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24) || *(_DWORD *)(a1 + 120) != *(_DWORD *)(a2 + 120))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || (v5 = *(_QWORD *)(a2 + 16)) == 0)
  {
    v8 = *(UText **)(a1 + 8);
    v9 = *(UText **)(a2 + 8);
    if (v8)
    {
      if (v9)
      {
        chunkNativeStart = v8->chunkNativeStart;
        if (chunkNativeStart > 0
          || (v11 = -chunkNativeStart, v11 >= v8->nativeIndexingLimit)
          || v8->chunkContents[v11] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v8, 0);
          v9 = *(UText **)(a2 + 8);
        }
        else
        {
          v8->chunkOffset = v11;
        }
        v14 = v9->chunkNativeStart;
        if (v14 > 0 || (v15 = -v14, v15 >= v9->nativeIndexingLimit) || v9->chunkContents[v15] >> 10 > 0x36u)
        {
          utext_setNativeIndex(v9, 0);
          v9 = *(UText **)(a2 + 8);
        }
        else
        {
          v9->chunkOffset = v15;
        }
        v16 = utext_equals(*(const UText **)(a1 + 8), v9);
        return v16 != 0;
      }
    }
    else if (!v9)
    {
      return 1;
    }
    return 0;
  }
  v6 = *(unsigned __int16 *)(v4 + 8);
  if ((v6 & 1) != 0)
    return *(_WORD *)(v5 + 8) & 1;
  if ((v6 & 0x8000) != 0)
    v7 = *(_DWORD *)(v4 + 12);
  else
    v7 = v6 >> 5;
  v12 = 0;
  v17 = *(unsigned __int16 *)(v5 + 8);
  if ((v17 & 0x8000u) == 0)
    v18 = v17 >> 5;
  else
    v18 = *(_DWORD *)(v5 + 12);
  if ((v17 & 1) == 0 && v7 == v18)
  {
    v16 = icu::UnicodeString::doEquals((icu::UnicodeString *)v4, (const icu::UnicodeString *)v5, v7);
    return v16 != 0;
  }
  return v12;
}

uint64_t *icu::RegexPattern::compile(UChar **this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t *v5;
  int v7;
  int32_t v8;
  uint64_t *v11;
  unint64_t v12;
  int32_t v13;
  void *v14;
  void *v15;
  uint64_t *v17;
  void *v18;
  _OWORD v19[32];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  v7 = (int)a2;
  if ((a2 & 0xFFFFFC40) != 0)
  {
    v5 = 0;
    v8 = 66315;
LABEL_11:
    *a4 = v8;
    return v5;
  }
  if ((a2 & 0x80) != 0)
  {
    v5 = 0;
    v8 = 66309;
    goto LABEL_11;
  }
  v11 = icu::UMemory::operator new((uint64_t *)0xFFFFFC40, (icu::UMemory *)0xC8, (unint64_t)a2);
  v5 = v11;
  if (!v11)
  {
    v8 = 7;
    goto LABEL_11;
  }
  *v11 = (uint64_t)off_1E2265DB0;
  v11[5] = (uint64_t)off_1E2256B38;
  *((_WORD *)v11 + 24) = 2;
  icu::RegexPattern::init((icu::RegexPattern *)v11, v12);
  v13 = *((_DWORD *)v5 + 30);
  if (v13 >= 1)
  {
    *a4 = v13;
    icu::RegexPattern::zap((icu::RegexPattern *)v5);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v5 + 5));
    icu::UObject::~UObject((icu::UObject *)v5);
    icu::UMemory::operator delete(v15);
    return 0;
  }
  *((_DWORD *)v5 + 6) = v7;
  memset(v19, 0, sizeof(v19));
  icu::RegexCompile::RegexCompile((icu::RegexCompile *)v19, (icu::RegexPattern *)v5, a4);
  icu::RegexCompile::compile((icu::RegexCompile *)v19, this, a3, a4, v17);
  if (*(int *)a4 >= 1)
  {
    icu::RegexPattern::~RegexPattern((icu::RegexPattern *)v5);
    icu::UMemory::operator delete(v18);
    v5 = 0;
  }
  icu::RegexCompile::~RegexCompile((icu::RegexCompile *)v19);
  return v5;
}

uint64_t *icu::RegexPattern::compile(UText *this, UText *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t *v5;
  int v7;
  int32_t v8;
  uint64_t *v11;
  unint64_t v12;
  int32_t v13;
  void *v14;
  void *v15;
  void *v17;
  _OWORD v18[32];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  v7 = (int)a2;
  if ((a2 & 0xFFFFFC40) != 0)
  {
    v5 = 0;
    v8 = 66315;
LABEL_11:
    *a4 = v8;
    return v5;
  }
  if ((a2 & 0x80) != 0)
  {
    v5 = 0;
    v8 = 66309;
    goto LABEL_11;
  }
  v11 = icu::UMemory::operator new((uint64_t *)0xFFFFFC40, (icu::UMemory *)0xC8, (unint64_t)a2);
  v5 = v11;
  if (!v11)
  {
    v8 = 7;
    goto LABEL_11;
  }
  *v11 = (uint64_t)off_1E2265DB0;
  v11[5] = (uint64_t)off_1E2256B38;
  *((_WORD *)v11 + 24) = 2;
  icu::RegexPattern::init((icu::RegexPattern *)v11, v12);
  v13 = *((_DWORD *)v5 + 30);
  if (v13 >= 1)
  {
    *a4 = v13;
    icu::RegexPattern::zap((icu::RegexPattern *)v5);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v5 + 5));
    icu::UObject::~UObject((icu::UObject *)v5);
    icu::UMemory::operator delete(v15);
    return 0;
  }
  *((_DWORD *)v5 + 6) = v7;
  memset(v18, 0, sizeof(v18));
  icu::RegexCompile::RegexCompile((icu::RegexCompile *)v18, (icu::RegexPattern *)v5, a4);
  icu::RegexCompile::compile((icu::RegexCompile *)v18, this, a3, a4);
  if (*(int *)a4 >= 1)
  {
    icu::RegexPattern::~RegexPattern((icu::RegexPattern *)v5);
    icu::UMemory::operator delete(v17);
    v5 = 0;
  }
  icu::RegexCompile::~RegexCompile((icu::RegexCompile *)v18);
  return v5;
}

uint64_t *icu::RegexPattern::compile(UChar **this, UParseError *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  return icu::RegexPattern::compile(this, 0, a2, a3, a5);
}

uint64_t *icu::RegexPattern::compile(UText *this, UParseError *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  return icu::RegexPattern::compile(this, 0, a2, a3, a5);
}

uint64_t *icu::RegexPattern::compile(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  UParseError v6;

  memset(&v6, 0, sizeof(v6));
  return icu::RegexPattern::compile(this, a2, &v6, a3, a5);
}

uint64_t *icu::RegexPattern::compile(UText *this, UText *a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  UParseError v6;

  memset(&v6, 0, sizeof(v6));
  return icu::RegexPattern::compile(this, a2, &v6, a3, a5);
}

uint64_t icu::RegexPattern::flags(icu::RegexPattern *this)
{
  return *((unsigned int *)this + 6);
}

UErrorCode *icu::RegexPattern::matcher(icu::RegexPattern *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  UErrorCode *v5;
  UErrorCode *v6;

  v5 = (UErrorCode *)icu::RegexPattern::matcher(this, a3);
  v6 = v5;
  if (v5)
  {
    v5[79] = *a3;
    icu::RegexMatcher::reset((icu::RegexMatcher *)v5, a2);
  }
  return v6;
}

icu::RegexMatcher *icu::RegexPattern::matcher(icu::RegexPattern *this, UErrorCode *a2)
{
  icu::RegexMatcher *result;
  UErrorCode v5;

  if (*(int *)a2 > 0)
    return 0;
  v5 = *((_DWORD *)this + 30);
  if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    result = 0;
LABEL_5:
    *a2 = v5;
    return result;
  }
  result = (icu::RegexMatcher *)icu::UMemory::operator new((icu::UMemory *)0x150, (unint64_t)a2);
  if (!result)
  {
    v5 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  return (icu::RegexMatcher *)icu::RegexMatcher::RegexMatcher(result, this);
}

uint64_t icu::RegexPattern::matches(UChar **this, const icu::UnicodeString *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v5;
  uint64_t *v8;
  UErrorCode *v9;
  void *v10;
  void *v11;
  void *v12;

  if (*(int *)a4 > 0)
    return 0;
  v8 = icu::RegexPattern::compile(this, 0, a3, a4, a5);
  v9 = icu::RegexPattern::matcher((icu::RegexPattern *)v8, a2, a4);
  v5 = icu::RegexMatcher::matches((icu::RegexMatcher *)v9, a4);
  if (v9)
  {
    icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v9);
    icu::UMemory::operator delete(v10);
  }
  if (v8)
  {
    icu::RegexPattern::zap((icu::RegexPattern *)v8);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)(v8 + 5));
    icu::UObject::~UObject((icu::UObject *)v8);
    icu::UMemory::operator delete(v12);
  }
  return v5;
}

uint64_t icu::RegexPattern::matches(UText *this, UText *a2, UParseError *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v5;
  uint64_t *v8;
  icu::RegexMatcher *v9;
  icu::RegexMatcher *v10;
  void *v11;
  void *v12;
  void *v13;

  if (*(int *)a4 > 0)
    return 0;
  v8 = icu::RegexPattern::compile(this, 0, a3, a4, a5);
  v9 = icu::RegexPattern::matcher((icu::RegexPattern *)v8, a4);
  v10 = v9;
  v5 = 0;
  if (*(int *)a4 <= 0)
  {
    icu::RegexMatcher::reset(v9, a2);
    v5 = icu::RegexMatcher::matches(v10, a4);
  }
  if (v10)
  {
    icu::RegexMatcher::~RegexMatcher(v10);
    icu::UMemory::operator delete(v11);
  }
  if (v8)
  {
    icu::RegexPattern::zap((icu::RegexPattern *)v8);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)(v8 + 5));
    icu::UObject::~UObject((icu::UObject *)v8);
    icu::UMemory::operator delete(v13);
  }
  return v5;
}

UText *icu::RegexPattern::pattern@<X0>(icu::RegexPattern *this@<X0>, uint64_t a2@<X8>)
{
  UChar **v3;
  UText *result;
  int64_t v6;
  int32_t v7;
  UChar *Buffer;
  UErrorCode status;

  v3 = (UChar **)*((_QWORD *)this + 2);
  if (v3)
    return (UText *)icu::UnicodeString::UnicodeString((icu::UnicodeString *)a2, v3);
  result = (UText *)*((_QWORD *)this + 1);
  if (result)
  {
    status = U_ZERO_ERROR;
    v6 = utext_nativeLength(result);
    v7 = utext_extract(*((UText **)this + 1), 0, v6, 0, 0, &status);
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)a2 = off_1E2256B38;
    *(_WORD *)(a2 + 8) = 2;
    status = U_ZERO_ERROR;
    Buffer = (UChar *)icu::UnicodeString::getBuffer((icu::UnicodeString *)a2, v7);
    utext_extract(*((UText **)this + 1), 0, v6, Buffer, v7, &status);
    return (UText *)icu::UnicodeString::releaseBuffer(a2, v7);
  }
  else
  {
    *(_QWORD *)a2 = off_1E2256B38;
    *(_WORD *)(a2 + 8) = 2;
  }
  return result;
}

uint64_t icu::RegexPattern::patternText(icu::RegexPattern *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)a2 > 0)
    return 0;
  *a2 = U_ZERO_ERROR;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    sub_18BD5819C(a2);
    return *(_QWORD *)(qword_1ECD284E8 + 3832);
  }
  return result;
}

uint64_t icu::RegexPattern::groupNumberFromName(icu::RegexPattern *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t result;
  uint64_t v5;

  if (*(int *)a3 > 0)
    return 0;
  v5 = *((_QWORD *)this + 24);
  if (!v5 || (result = uhash_geti(v5, (uint64_t)a2), !(_DWORD)result))
  {
    result = 0;
    *a3 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
  }
  return result;
}

uint64_t icu::RegexPattern::groupNumberFromName(icu::RegexPattern *this, const char *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _OWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  memset(v10, 0, sizeof(v10));
  icu::UnicodeString::UnicodeString(v10, a2, a3, 0);
  v4 = 0;
  v7 = *(unsigned int *)a4;
  if ((int)v7 <= 0)
  {
    v8 = *((_QWORD *)this + 24);
    if (!v8 || (v4 = uhash_geti(v8, (uint64_t)v10), !(_DWORD)v4))
    {
      v4 = 0;
      v7 = 66325;
      *a4 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v10);
  return v4;
}

uint64_t icu::RegexPattern::split(icu::RegexPattern *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  uint64_t v5;
  _OWORD v11[19];
  __int128 v12;
  __int128 v13;

  if (*(int *)a5 > 0)
    return 0;
  v12 = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  icu::RegexMatcher::RegexMatcher((icu::RegexMatcher *)v11, this);
  if (*((uint64_t *)&v12 + 1) <= 0)
    v5 = icu::RegexMatcher::split((int64_t *)v11, a2, a3, a4, a5);
  else
    v5 = 0;
  icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v11);
  return v5;
}

uint64_t icu::RegexPattern::split(icu::RegexPattern *this, UText *a2, UText **a3, int a4, UErrorCode *a5)
{
  uint64_t v5;
  _OWORD v11[19];
  __int128 v12;
  __int128 v13;

  if (*(int *)a5 > 0)
    return 0;
  v12 = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  icu::RegexMatcher::RegexMatcher((icu::RegexMatcher *)v11, this);
  if (*((uint64_t *)&v12 + 1) <= 0)
    v5 = icu::RegexMatcher::split((int64_t *)v11, a2, a3, a4, a5);
  else
    v5 = 0;
  icu::RegexMatcher::~RegexMatcher((icu::RegexMatcher *)v11);
  return v5;
}

void *icu::RegexPattern::getStaticClassID(icu::RegexPattern *this)
{
  return &unk_1EE009DDB;
}

void *icu::RegexPattern::getDynamicClassID(icu::RegexPattern *this)
{
  return &unk_1EE009DDB;
}

void sub_18BD6AAD0(icu::ByteSink *a1)
{
  void *v1;

  icu::ByteSink::~ByteSink(a1);
  icu::UMemory::operator delete(v1);
}

void *sub_18BD6AAE4(_QWORD *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  int v5;
  void *result;

  v4 = a4;
  v5 = a3;
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 48))(a1, a3, a4);
  if ((_DWORD)result)
    return memcpy((void *)(a1[1] + v4), a2, v5);
  return result;
}

BOOL sub_18BD6AB4C(uint64_t a1, int a2, int a3)
{
  int v4;
  int v5;
  void *v6;
  _BOOL8 result;
  int v8;

  if (!*(_QWORD *)(a1 + 8))
    return 0;
  v4 = 2 * *(_DWORD *)(a1 + 16);
  if (v4 <= a3 + 2 * a2)
    v4 = a3 + 2 * a2;
  if (v4 <= 200)
    v5 = 200;
  else
    v5 = v4;
  v6 = icu::CollationKey::reallocate(*(icu::CollationKey **)(a1 + 32), v5, a3);
  result = v6 != 0;
  if (v6)
    v8 = v5;
  else
    v8 = 0;
  *(_QWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t icu::RuleBasedCollator::RuleBasedCollator(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = icu::Collator::Collator((_QWORD *)a1, (const icu::Collator *)a2);
  *v4 = off_1E2265E40;
  *(_OWORD *)(v4 + 1) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 3) = *(_OWORD *)(a2 + 24);
  icu::Locale::Locale((icu::Locale *)(v4 + 5), a2 + 40);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  icu::SharedObject::addRef(*(_QWORD *)(a1 + 16));
  icu::SharedObject::addRef(*(_QWORD *)(a1 + 32));
  return a1;
}

{
  _QWORD *v4;
  uint64_t v5;

  v4 = icu::Collator::Collator((_QWORD *)a1);
  *v4 = off_1E2265E40;
  v5 = *(_QWORD *)(a2 + 248);
  *(_OWORD *)(v4 + 1) = *(_OWORD *)(v5 + 24);
  v4[3] = v5;
  v4[4] = a2;
  icu::Locale::Locale((icu::Locale *)(v4 + 5), a2 + 24);
  *(_DWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 268) = 0;
  icu::SharedObject::addRef(*(_QWORD *)(a1 + 16));
  icu::SharedObject::addRef(*(_QWORD *)(a1 + 32));
  return a1;
}

icu::RuleBasedCollator *icu::RuleBasedCollator::RuleBasedCollator(icu::RuleBasedCollator *this, const icu::CollationTailoring *a2, const unsigned __int8 *a3, const icu::RuleBasedCollator *a4, UErrorCode *a5)
{
  _QWORD *v10;
  UErrorCode *v11;
  uint64_t Root;
  unint64_t v13;
  uint64_t *v14;
  UErrorCode v15;
  icu::CollationTailoring *v17;
  uint64_t v18;
  UErrorCode *v19;

  v10 = icu::Collator::Collator(this);
  *v10 = off_1E2265E40;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  icu::Locale::Locale((uint64_t *)off_1E2265E40, (icu::Locale *)(v10 + 5), "", 0, 0, 0);
  *((_DWORD *)this + 66) = 0;
  *((_BYTE *)this + 268) = 0;
  if (*(int *)a5 <= 0)
  {
    if (!a2 || !(_DWORD)a3 || !a4)
    {
      v15 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
      *a5 = v15;
      return this;
    }
    Root = icu::CollationRoot::getRoot((icu::CollationRoot *)a5, v11);
    if (*(int *)a5 <= 0)
    {
      v14 = (uint64_t *)*((_QWORD *)a4 + 3);
      if (v14 == (uint64_t *)Root)
      {
        v17 = (icu::CollationTailoring *)icu::UMemory::operator new(v14, (icu::UMemory *)0x190, v13);
        if (v17)
        {
          v18 = (uint64_t)v17;
          if (*(_QWORD *)(icu::CollationTailoring::CollationTailoring(v17, *(const icu::CollationSettings **)(*((_QWORD *)a4 + 3) + 32))+ 32))
          {
            icu::CollationDataReader::read(*((_QWORD *)a4 + 3), a2, a3, v18, a5, v19);
            if (*(int *)a5 <= 0)
            {
              icu::Locale::setToBogus((icu::Locale *)(v18 + 104));
              icu::RuleBasedCollator::adoptTailoring(this, (icu::CollationTailoring *)v18, a5);
              return this;
            }
          }
          else
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          return this;
        }
        v15 = U_MEMORY_ALLOCATION_ERROR;
      }
      else
      {
        v15 = U_UNSUPPORTED_ERROR;
      }
      goto LABEL_9;
    }
  }
  return this;
}

icu::Locale *icu::RuleBasedCollator::adoptTailoring(icu::RuleBasedCollator *this, icu::CollationTailoring *a2, UErrorCode *a3)
{
  uint64_t *v4;
  icu::Locale *result;
  uint64_t *v8;
  uint64_t v9;

  v4 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v4 >= 1)
    return (icu::Locale *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)a2);
  v8 = icu::UMemory::operator new(v4, (icu::UMemory *)0x100, (unint64_t)a2);
  if (!v8)
  {
    *((_QWORD *)this + 4) = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return (icu::Locale *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)a2);
  }
  *((_QWORD *)this + 4) = sub_18BCA2564(v8, (uint64_t)a2 + 104, (uint64_t)a2);
  v9 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = v9;
  icu::SharedObject::addRef(v9);
  *((_QWORD *)this + 3) = a2;
  icu::SharedObject::addRef(*((_QWORD *)this + 4));
  result = icu::Locale::operator=((icu::RuleBasedCollator *)((char *)this + 40), (uint64_t)a2 + 104);
  *((_BYTE *)this + 268) = 0;
  return result;
}

void icu::RuleBasedCollator::~RuleBasedCollator(icu::RuleBasedCollator *this)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2)
  {
    icu::SharedObject::removeRef(v2);
    *((_QWORD *)this + 2) = 0;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 4);
  if (v3)
  {
    icu::SharedObject::removeRef(v3);
    *((_QWORD *)this + 4) = 0;
  }
  icu::Locale::~Locale((icu::RuleBasedCollator *)((char *)this + 40));
  icu::Collator::~Collator(this);
}

{
  void *v1;

  icu::RuleBasedCollator::~RuleBasedCollator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t *icu::RuleBasedCollator::clone@<X0>(icu::RuleBasedCollator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x110, a2);
  if (result)
    return (uint64_t *)icu::RuleBasedCollator::RuleBasedCollator((uint64_t)result, (uint64_t)this);
  return result;
}

uint64_t icu::RuleBasedCollator::operator=(uint64_t a1, uint64_t a2)
{
  icu::SharedObject *v4;

  if (a1 != a2)
  {
    sub_18BC4A244(*(icu::SharedObject **)(a2 + 16), (icu::SharedObject **)(a1 + 16));
    v4 = *(icu::SharedObject **)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    sub_18BC4A244(v4, (icu::SharedObject **)(a1 + 32));
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    icu::Locale::operator=((icu::Locale *)(a1 + 40), a2 + 40);
    *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
    *(_BYTE *)(a1 + 268) = *(_BYTE *)(a2 + 268);
  }
  return a1;
}

void *icu::RuleBasedCollator::getStaticClassID(icu::RuleBasedCollator *this)
{
  return &unk_1EE009DDC;
}

void *icu::RuleBasedCollator::getDynamicClassID(icu::RuleBasedCollator *this)
{
  return &unk_1EE009DDC;
}

uint64_t icu::RuleBasedCollator::operator==(icu::RuleBasedCollator *a1, icu::RuleBasedCollator *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  icu::UnicodeSet *TailoredSet;
  icu::UnicodeSet *v12;
  void *v13;
  void *v14;
  UErrorCode v15;

  if (a1 == a2)
    return 1;
  if (!icu::Collator::operator==(a1, a2)
    || !icu::CollationSettings::operator==(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2)))
  {
    return 0;
  }
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a2 + 1);
  if (v4 == v5)
    return 1;
  v6 = *(_QWORD *)(v4 + 32);
  v7 = *(_QWORD *)(v5 + 32);
  if ((v6 == 0) != (v7 == 0))
    return 0;
  if (!v6 || *(unsigned __int16 *)(*((_QWORD *)a1 + 3) + 48) >= 0x20u)
  {
    v9 = *((_QWORD *)a2 + 3);
    if ((!v7 || *(unsigned __int16 *)(v9 + 48) >= 0x20u) && sub_18BBED900(*((_QWORD *)a1 + 3) + 40, v9 + 40))
      return 1;
  }
  v15 = U_ZERO_ERROR;
  TailoredSet = icu::RuleBasedCollator::getTailoredSet(a1, &v15);
  v12 = icu::RuleBasedCollator::getTailoredSet(a2, &v15);
  v8 = 0;
  if (v15 <= U_ZERO_ERROR)
    v8 = icu::UnicodeSet::operator==((uint64_t)TailoredSet, (uint64_t)v12);
  if (v12)
  {
    icu::UnicodeSet::~UnicodeSet(v12);
    icu::UMemory::operator delete(v13);
  }
  if (TailoredSet)
  {
    icu::UnicodeSet::~UnicodeSet(TailoredSet);
    icu::UMemory::operator delete(v14);
  }
  return v8;
}

icu::UnicodeSet *icu::RuleBasedCollator::getTailoredSet(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  uint64_t *v2;
  icu::UnicodeSet *v3;
  icu::UnicodeSet *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  _QWORD v11[3];
  void (**v12)(icu::UnicodeString *__hidden);
  __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 > 0)
    return 0;
  v7 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, (unint64_t)a2);
  v3 = v7;
  if (!v7)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v3;
  }
  icu::UnicodeSet::UnicodeSet(v7);
  v8 = (uint64_t *)*((_QWORD *)this + 1);
  if (v8[4])
  {
    v11[0] = 0;
    v11[1] = 0;
    v11[2] = v3;
    v12 = off_1E2256B38;
    v13 = 2;
    v14 = 0;
    v15 = 0;
    sub_18BCA6194((uint64_t)v11, v8, a2);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v12);
    if (*(int *)a2 >= 1)
    {
      icu::UnicodeSet::~UnicodeSet(v3);
      icu::UMemory::operator delete(v10);
      return 0;
    }
  }
  return v3;
}

uint64_t icu::RuleBasedCollator::hashCode(icu::RuleBasedCollator *this)
{
  uint64_t v2;
  uint64_t v3;
  icu::UnicodeSet *TailoredSet;
  icu::UnicodeSet *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  _OWORD v10[4];
  UErrorCode v11;

  v2 = icu::CollationSettings::hashCode(*((icu::CollationSettings **)this + 2));
  v3 = v2;
  if (!*(_QWORD *)(*((_QWORD *)this + 1) + 32))
    return v2;
  v11 = U_ZERO_ERROR;
  TailoredSet = icu::RuleBasedCollator::getTailoredSet(this, &v11);
  v5 = TailoredSet;
  v6 = 0;
  v7 = v11;
  if (v11 > U_ZERO_ERROR)
  {
    if (!TailoredSet)
      return v6;
    goto LABEL_11;
  }
  memset(v10, 0, sizeof(v10));
  icu::UnicodeSetIterator::UnicodeSetIterator((icu::UnicodeSetIterator *)v10, TailoredSet);
  while (icu::UnicodeSetIterator::next((icu::UnicodeSetIterator *)v10)
       && (DWORD2(v10[0]) & 0x80000000) == 0)
    v3 = sub_18BC902F4(*((uint64_t **)this + 1), DWORD2(v10[0])) ^ v3;
  icu::UnicodeSetIterator::~UnicodeSetIterator((icu::UnicodeSetIterator *)v10);
  v6 = v3;
  if (v5)
  {
LABEL_11:
    v8 = icu::UnicodeSet::~UnicodeSet((void *)v7, v5);
    icu::UMemory::operator delete(v8);
  }
  return v6;
}

icu::Locale *icu::RuleBasedCollator::setLocales(icu::RuleBasedCollator *this, const icu::Locale *a2, const icu::Locale *a3, const icu::Locale *a4)
{
  *((_BYTE *)this + 268) = !icu::Locale::operator==((uint64_t)a4, *((_QWORD *)this + 3) + 104);
  return icu::Locale::operator=((icu::RuleBasedCollator *)((char *)this + 40), (uint64_t)a3);
}

icu::Locale *icu::RuleBasedCollator::getLocale@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  uint64_t Root;

  if (*a3 >= 1)
    goto LABEL_2;
  if ((a2 - 1) < 2)
  {
LABEL_6:
    Root = a1 + 40;
    return icu::Locale::Locale(a4, Root);
  }
  if (!a2)
  {
    if (!*(_BYTE *)(a1 + 268))
    {
      Root = *(_QWORD *)(a1 + 24) + 104;
      return icu::Locale::Locale(a4, Root);
    }
    goto LABEL_6;
  }
  *a3 = 1;
LABEL_2:
  Root = icu::Locale::getRoot((icu::Locale *)a1);
  return icu::Locale::Locale(a4, Root);
}

const char *icu::RuleBasedCollator::internalGetLocaleID(uint64_t a1, int a2, int *a3)
{
  uint64_t v3;
  const char *result;
  _BYTE *v5;

  if (*a3 > 0)
    return 0;
  if ((a2 - 1) < 2)
    goto LABEL_5;
  if (a2)
  {
    result = 0;
    *a3 = 1;
    return result;
  }
  if (*(_BYTE *)(a1 + 268))
LABEL_5:
    v3 = a1 + 40;
  else
    v3 = *(_QWORD *)(a1 + 24) + 104;
  if (*(_BYTE *)(v3 + 216))
    return 0;
  v5 = *(_BYTE **)(v3 + 40);
  if (*v5)
    return v5;
  else
    return "root";
}

uint64_t icu::RuleBasedCollator::getRules(icu::RuleBasedCollator *this)
{
  return *((_QWORD *)this + 3) + 40;
}

icu::UnicodeString *icu::RuleBasedCollator::getRules(uint64_t a1, int a2, uint64_t a3)
{
  __int16 v5;
  uint64_t v6;
  const icu::UnicodeString *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  icu::UnicodeString *v13;

  if (!a2)
    return icu::UnicodeString::operator=((UChar **)a3, (UChar **)(*(_QWORD *)(a1 + 24) + 40));
  if ((*(_WORD *)(a3 + 8) & 1) != 0)
    v5 = 2;
  else
    v5 = *(_WORD *)(a3 + 8) & 0x1F;
  *(_WORD *)(a3 + 8) = v5;
  sub_18BDA232C(a3);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (const icu::UnicodeString *)(v6 + 40);
  v8 = *(unsigned __int16 *)(v6 + 48);
  v9 = (__int16)v8;
  v10 = v8 >> 5;
  v11 = *(_DWORD *)(v6 + 52);
  if (v9 >= 0)
    v12 = v10;
  else
    v12 = v11;
  v13 = (icu::UnicodeString *)icu::UnicodeString::doAppend(a3, v7, 0, v12);
  return (icu::UnicodeString *)icu::UnicodeString::getTerminatedBuffer(v13);
}

uint64_t icu::RuleBasedCollator::getVersion(uint64_t this, unsigned __int8 *a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(this + 24) + 328);
  *(_DWORD *)a2 = v2;
  if ((v2 & 0xFF00) == 0x7800 && BYTE2(v2) <= 0x3Fu)
    a2[2] = BYTE2(v2) | 0x40;
  *a2 = v2 - 112;
  return this;
}

void *icu::RuleBasedCollator::internalGetContractionsAndExpansions(void *this, icu::UnicodeSet *a2, icu::UnicodeSet *a3, char a4, UErrorCode *a5)
{
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[4];
  char v14;
  char v15;
  _BYTE v16[200];
  _BYTE v17[200];
  void (**v18)(icu::UnicodeString *__hidden);
  __int16 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v9 = (uint64_t)this;
    if (a2)
      icu::UnicodeSet::clear(a2);
    if (a3)
      icu::UnicodeSet::clear(a3);
    v13[0] = 0;
    v13[1] = a2;
    v13[2] = a3;
    v13[3] = 0;
    v14 = a4;
    v15 = 0;
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v16);
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v17);
    v18 = off_1E2256B38;
    v19 = 2;
    v20 = 0;
    v21 = 0;
    sub_18BCA7084((uint64_t)v13, *(uint64_t **)(v9 + 8), (int *)a5);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v18);
    icu::UnicodeSet::~UnicodeSet(v11, (icu::UnicodeSet *)v17);
    return icu::UnicodeSet::~UnicodeSet(v12, (icu::UnicodeSet *)v16);
  }
  return this;
}

void icu::RuleBasedCollator::internalAddContractions(uint64_t **this, uint64_t a2, icu::UnicodeSet *a3, UErrorCode *a4)
{
  void *v7;
  _QWORD v8[4];
  __int16 v9;
  _BYTE v10[200];
  _BYTE v11[200];
  void (**v12)(icu::UnicodeString *__hidden);
  __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    v8[0] = 0;
    v8[1] = a3;
    v8[2] = 0;
    v8[3] = 0;
    v9 = 0;
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v10);
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v11);
    v12 = off_1E2256B38;
    v13 = 2;
    v14 = 0;
    v15 = 0;
    sub_18BCA7264((uint64_t)v8, this[1], a2, a4);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v12);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v11);
    icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)v10);
  }
}

uint64_t icu::RuleBasedCollator::getDefaultSettings(icu::RuleBasedCollator *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 32);
}

uint64_t icu::RuleBasedCollator::getAttribute(uint64_t a1, int a2, int *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;

  if (*a3 > 0)
    return 0xFFFFFFFFLL;
  v3 = 16;
  v4 = 2048;
  switch(a2)
  {
    case 0:
      goto LABEL_18;
    case 1:
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 24) & 0xC) != 0)
        return 20;
      else
        return 21;
    case 2:
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24);
      if ((v5 & 0x300) == 0x200)
        v6 = 24;
      else
        v6 = 25;
      if ((v5 & 0x300) != 0)
        return v6;
      else
        return 16;
    case 3:
      v4 = 1024;
      goto LABEL_18;
    case 4:
      v4 = 1;
      goto LABEL_18;
    case 5:
      return (*(int *)(*(_QWORD *)(a1 + 16) + 24) >> 12);
    case 6:
      return v3;
    case 7:
      v4 = 2;
LABEL_18:
      if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 24) & v4) != 0)
        v3 = 17;
      else
        v3 = 16;
      break;
    default:
      *a3 = 1;
      return 0xFFFFFFFFLL;
  }
  return v3;
}

icu::SharedObject **icu::RuleBasedCollator::setAttribute(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  icu::SharedObject **result;
  int v9;
  int v10;
  uint64_t v11;
  icu::SharedObject **v12;
  int v13;
  int v14;
  int v15;

  result = (icu::SharedObject **)icu::RuleBasedCollator::getAttribute(a1, a2, a4);
  if (*a4 <= 0)
  {
    if ((_DWORD)result == a3)
    {
      v9 = 1 << a2;
LABEL_4:
      v10 = *(_DWORD *)(a1 + 264) | v9;
LABEL_9:
      *(_DWORD *)(a1 + 264) = v10;
      return result;
    }
    result = (icu::SharedObject **)(a1 + 16);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
    if (a3 == -1 && *(_QWORD *)(a1 + 16) == v11)
    {
      v9 = 1 << a2;
LABEL_8:
      v10 = *(_DWORD *)(a1 + 264) & ~v9;
      goto LABEL_9;
    }
    result = (icu::SharedObject **)sub_18BC921DC(result);
    if (result)
    {
      v12 = result;
      switch(a2)
      {
        case 0:
          v13 = *(_DWORD *)(v11 + 24);
          v14 = 2048;
          goto LABEL_25;
        case 1:
          result = (icu::SharedObject **)icu::CollationSettings::setAlternateHandling((uint64_t)result, a3, *(_DWORD *)(v11 + 24), a4);
          goto LABEL_26;
        case 2:
          result = (icu::SharedObject **)icu::CollationSettings::setCaseFirst((uint64_t)result, a3, *(_DWORD *)(v11 + 24), a4);
          goto LABEL_26;
        case 3:
          v13 = *(_DWORD *)(v11 + 24);
          v14 = 1024;
          goto LABEL_25;
        case 4:
          v13 = *(_DWORD *)(v11 + 24);
          v14 = 1;
          goto LABEL_25;
        case 5:
          result = (icu::SharedObject **)icu::CollationSettings::setStrength((uint64_t)result, a3, *(_DWORD *)(v11 + 24), (UErrorCode *)a4);
          goto LABEL_26;
        case 6:
          if (a3 + 1 > 0x12 || ((1 << (a3 + 1)) & 0x60001) == 0)
            goto LABEL_23;
          goto LABEL_26;
        case 7:
          v13 = *(_DWORD *)(v11 + 24);
          v14 = 2;
LABEL_25:
          result = (icu::SharedObject **)icu::CollationSettings::setFlag((uint64_t)result, v14, a3, v13, a4);
LABEL_26:
          if (*a4 > 0)
            return result;
          result = (icu::SharedObject **)icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(a1 + 8), (const icu::CollationData *)v12, (const icu::CollationSettings *)((char *)v12 + 84), (unsigned __int16 *)0x180);
          *((_DWORD *)v12 + 20) = (_DWORD)result;
          v9 = 1 << a2;
          if (a3 == -1)
            goto LABEL_8;
          goto LABEL_4;
        default:
LABEL_23:
          v15 = 1;
          goto LABEL_15;
      }
    }
    v15 = 7;
LABEL_15:
    *a4 = v15;
  }
  return result;
}

uint64_t icu::RuleBasedCollator::setFastLatinOptions(icu::CollationFastLatin **this, icu::CollationSettings *a2)
{
  uint64_t result;

  result = icu::CollationFastLatin::getOptions(this[1], a2, (icu::CollationSettings *)((char *)a2 + 84), (unsigned __int16 *)0x180);
  *((_DWORD *)a2 + 20) = result;
  return result;
}

uint64_t icu::RuleBasedCollator::setMaxVariable(uint64_t a1, unsigned int a2, UErrorCode *a3)
{
  unsigned int v6;
  icu::SharedObject **v7;
  int v8;
  icu::SharedObject **v9;
  uint64_t v10;
  uint64_t v11;
  const icu::CollationSettings *v12;
  const icu::CollationSettings *v13;
  unsigned int v14;
  int v15;
  const icu::CollationSettings *v16;
  int LastPrimaryForGroup;
  unsigned int v18;

  if (*(int *)a3 > 0)
    return a1;
  if (a2 == -1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = (icu::SharedObject **)(a1 + 16);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
    if (v10 == v11)
    {
      v8 = *(_DWORD *)(a1 + 264);
      goto LABEL_16;
    }
    v12 = sub_18BC921DC(v9);
    if (v12)
    {
      v13 = v12;
      v14 = (*(_DWORD *)(v11 + 24) >> 4) & 7 | 0x1000;
      v6 = -1;
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  if ((a2 & 0xFFFFFFFC) != 0x1000)
  {
    v15 = 1;
LABEL_19:
    *a3 = v15;
    return a1;
  }
  v6 = a2 - 4096;
  v7 = (icu::SharedObject **)(a1 + 16);
  if (a2 - 4096 == ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 24) >> 4) & 7))
  {
    v8 = *(_DWORD *)(a1 + 264);
LABEL_14:
    v18 = v8 | 0x100;
LABEL_17:
    *(_DWORD *)(a1 + 264) = v18;
    return a1;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  v16 = sub_18BC921DC(v7);
  if (!v16)
  {
LABEL_18:
    v15 = 7;
    goto LABEL_19;
  }
  v13 = v16;
  v14 = a2;
LABEL_12:
  LastPrimaryForGroup = icu::CollationData::getLastPrimaryForGroup(*(icu::CollationData **)(a1 + 8), v14);
  icu::CollationSettings::setMaxVariable((uint64_t)v13, v6, *(_DWORD *)(v11 + 24), a3);
  if (*(int *)a3 <= 0)
  {
    *((_DWORD *)v13 + 7) = LastPrimaryForGroup;
    *((_DWORD *)v13 + 20) = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(a1 + 8), v13, (const icu::CollationSettings *)((char *)v13 + 84), (unsigned __int16 *)0x180);
    v8 = *(_DWORD *)(a1 + 264);
    if (a2 != -1)
      goto LABEL_14;
LABEL_16:
    v18 = v8 & 0xFFFFFEFF;
    goto LABEL_17;
  }
  return a1;
}

uint64_t icu::RuleBasedCollator::getMaxVariable(icu::RuleBasedCollator *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 2) + 24) >> 4) & 7 | 0x1000u;
}

uint64_t icu::RuleBasedCollator::getVariableTop(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 2) + 28);
}

uint64_t icu::RuleBasedCollator::setVariableTop(uint64_t a1, UChar *s, int32_t a3, UErrorCode *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  UErrorCode v12;
  _QWORD *v13;
  uint64_t v14;
  void (**v15)(icu::UTF16CollationIterator *__hidden);
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  if (!s && a3)
    goto LABEL_10;
  if (a3 < 0)
  {
    a3 = u_strlen(s);
    if (a3)
      goto LABEL_7;
LABEL_10:
    result = 0;
    v12 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_11;
  }
  if (!a3)
    goto LABEL_10;
LABEL_7:
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if ((v8 & 1) != 0)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v49 = 0;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v25 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    v13 = *(_QWORD **)(a1 + 8);
    v14 = *v13;
    v17 = v13;
    *((_QWORD *)&v18 + 1) = (char *)&v19 + 8;
    LODWORD(v19) = 40;
    DWORD2(v39) = 0;
    DWORD2(v40) = -1;
    BYTE12(v40) = (v8 & 2) != 0;
    *(_QWORD *)&v41 = s;
    *((_QWORD *)&v41 + 1) = s;
    v15 = off_1E22684F0;
    v16 = v14;
    *(_QWORD *)&v42 = &s[a3];
    *((_QWORD *)&v42 + 1) = s;
    *(_QWORD *)&v43 = s;
    *(_QWORD *)&v44 = v42;
    *((_QWORD *)&v44 + 1) = v13[6];
    *(_QWORD *)&v45 = off_1E2256B38;
    WORD4(v45) = 2;
    LOBYTE(v49) = 1;
    v10 = sub_18BC8F6EC((icu::CollationIterator::CEBuffer *)&v15, a4);
    v11 = sub_18BC8F6EC((icu::CollationIterator::CEBuffer *)&v15, a4);
    icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v15);
  }
  else
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v25 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    v9 = **(_QWORD **)(a1 + 8);
    v17 = *(_QWORD **)(a1 + 8);
    *((_QWORD *)&v18 + 1) = (char *)&v19 + 8;
    LODWORD(v19) = 40;
    DWORD2(v39) = 0;
    DWORD2(v40) = -1;
    BYTE12(v40) = (v8 & 2) != 0;
    v15 = off_1E2268460;
    v16 = v9;
    *(_QWORD *)&v41 = s;
    *((_QWORD *)&v41 + 1) = s;
    *(_QWORD *)&v42 = &s[a3];
    v10 = sub_18BC8F6EC((icu::CollationIterator::CEBuffer *)&v15, a4);
    v11 = sub_18BC8F6EC((icu::CollationIterator::CEBuffer *)&v15, a4);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v15);
  }
  if (v10 != 0x101000100 && v11 == 0x101000100)
  {
    icu::RuleBasedCollator::setVariableTop(a1, HIDWORD(v10), a4);
    return *(unsigned int *)(*(_QWORD *)(a1 + 16) + 28);
  }
  result = 0;
  v12 = U_CE_NOT_FOUND_ERROR;
LABEL_11:
  *a4 = v12;
  return result;
}

uint64_t icu::RuleBasedCollator::setVariableTop(uint64_t this, unsigned int a2, UErrorCode *a3)
{
  unsigned int v3;
  uint64_t v4;
  icu::SharedObject **v5;
  UErrorCode v7;
  int v8;
  int v9;
  unsigned int v10;
  _DWORD *v11;

  if (*(int *)a3 > 0)
    return this;
  v3 = a2;
  v4 = this;
  v5 = (icu::SharedObject **)(this + 16);
  if (*(_DWORD *)(*(_QWORD *)(this + 16) + 28) == a2)
    goto LABEL_7;
  this = icu::CollationData::getGroupForPrimary(*(icu::CollationData **)(this + 8), a2);
  if ((this - 4100) <= 0xFFFFFFFB)
  {
    v7 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_5:
    *a3 = v7;
    return this;
  }
  v8 = this;
  this = icu::CollationData::getLastPrimaryForGroup(*(icu::CollationData **)(v4 + 8), this);
  v3 = this;
  if ((_DWORD)this == *(_DWORD *)(*(_QWORD *)(v4 + 16) + 28))
    goto LABEL_7;
  this = (uint64_t)sub_18BC921DC(v5);
  if (!this)
  {
    v7 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  v11 = (_DWORD *)this;
  this = icu::CollationSettings::setMaxVariable(this, v8 - 4096, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 32) + 24), a3);
  if (*(int *)a3 <= 0)
  {
    v11[7] = v3;
    this = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(v4 + 8), (const icu::CollationData *)v11, (const icu::CollationSettings *)(v11 + 21), (unsigned __int16 *)0x180);
    v11[20] = this;
LABEL_7:
    v9 = *(_DWORD *)(v4 + 264);
    if (v3 == *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 24) + 32) + 28))
      v10 = v9 & 0xFFFFFEFF;
    else
      v10 = v9 | 0x100;
    *(_DWORD *)(v4 + 264) = v10;
  }
  return this;
}

uint64_t icu::RuleBasedCollator::setVariableTop(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v4;
  UChar *v5;
  int v6;
  int32_t v7;
  int32_t v8;

  v4 = *((unsigned __int16 *)a2 + 4);
  if ((v4 & 0x11) != 0)
  {
    v5 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    v5 = (UChar *)((char *)a2 + 10);
  }
  else
  {
    v5 = (UChar *)*((_QWORD *)a2 + 3);
  }
  v6 = (__int16)v4;
  v7 = v4 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *((_DWORD *)a2 + 3);
  return icu::RuleBasedCollator::setVariableTop((uint64_t)this, v5, v8, a3);
}

uint64_t icu::RuleBasedCollator::getReorderCodes(icu::RuleBasedCollator *this, void *__dst, int a3, UErrorCode *a4)
{
  uint64_t v4;
  UErrorCode v5;
  uint64_t v7;

  if (*(int *)a4 > 0)
    return 0;
  if (a3 < 0 || !__dst && a3)
  {
    v4 = 0;
    v5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    v7 = *((_QWORD *)this + 2);
    v4 = *(unsigned int *)(v7 + 72);
    if (!(_DWORD)v4)
      return v4;
    if ((int)v4 <= a3)
    {
      memcpy(__dst, *(const void **)(v7 + 64), 4 * (int)v4);
      return v4;
    }
    v5 = U_BUFFER_OVERFLOW_ERROR;
  }
  *a4 = v5;
  return v4;
}

uint64_t icu::RuleBasedCollator::setReorderCodes(uint64_t this, const int *__s1, int a3, UErrorCode *a4)
{
  int v5;
  uint64_t v7;
  UErrorCode v8;
  uint64_t v9;
  _DWORD *v10;
  const icu::CollationSettings *v11;
  _DWORD *v12;

  if (*(int *)a4 <= 0)
  {
    v5 = a3;
    if (a3 < 0 || (v7 = this, !__s1) && a3)
    {
      v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_6:
      *a4 = v8;
      return this;
    }
    if (a3 == 1)
      v5 = *__s1 != 103;
    v9 = *(_QWORD *)(this + 16);
    if (v5 != *(_DWORD *)(v9 + 72) || (this = memcmp(__s1, *(const void **)(v9 + 64), 4 * v5), (_DWORD)this))
    {
      if (v5 != 1 || *__s1 != -1)
      {
        this = (uint64_t)sub_18BC921DC((icu::SharedObject **)(v7 + 16));
        if (this)
        {
          v10 = (_DWORD *)this;
          icu::CollationSettings::setReordering((icu::CollationSettings *)this, *(const icu::CollationData **)(v7 + 8), __s1, v5, a4);
          this = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(v7 + 8), (const icu::CollationData *)v10, (const icu::CollationSettings *)(v10 + 21), (unsigned __int16 *)0x180);
          v10[20] = this;
          return this;
        }
LABEL_19:
        v8 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_6;
      }
      v11 = *(const icu::CollationSettings **)(*(_QWORD *)(v7 + 24) + 32);
      if ((const icu::CollationSettings *)v9 != v11)
      {
        this = (uint64_t)sub_18BC921DC((icu::SharedObject **)(v7 + 16));
        if (this)
        {
          v12 = (_DWORD *)this;
          icu::CollationSettings::copyReorderingFrom((_DWORD *)this, v11, a4);
          this = icu::CollationFastLatin::getOptions(*(icu::CollationFastLatin **)(v7 + 8), (const icu::CollationData *)v12, (const icu::CollationSettings *)(v12 + 21), (unsigned __int16 *)0x180);
          v12[20] = this;
          return this;
        }
        goto LABEL_19;
      }
    }
  }
  return this;
}

unint64_t icu::RuleBasedCollator::compare(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  unsigned int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned __int16 *v13;
  int v14;
  unsigned int v15;
  unint64_t v16;

  if (*(int *)a4 > 0)
    return 0;
  v7 = *((unsigned __int16 *)a2 + 4);
  if ((v7 & 0x11) != 0)
  {
    v8 = 0;
  }
  else if ((v7 & 2) != 0)
  {
    v8 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else
  {
    v8 = (unsigned __int16 *)*((_QWORD *)a2 + 3);
  }
  v9 = (__int16)v7;
  v10 = v7 >> 5;
  v11 = *((_DWORD *)a2 + 3);
  if (v9 >= 0)
    v11 = v10;
  v12 = *((unsigned __int16 *)a3 + 4);
  if ((v12 & 0x11) != 0)
  {
    v13 = 0;
  }
  else if ((v12 & 2) != 0)
  {
    v13 = (unsigned __int16 *)((char *)a3 + 10);
  }
  else
  {
    v13 = (unsigned __int16 *)*((_QWORD *)a3 + 3);
  }
  v14 = (__int16)v12;
  v15 = v12 >> 5;
  if (v14 >= 0)
    v16 = v15;
  else
    v16 = *((unsigned int *)a3 + 3);
  return icu::RuleBasedCollator::doCompare((uint64_t)this, v8, v11, v13, (UErrorCode *)v16, a4);
}

unint64_t icu::RuleBasedCollator::doCompare(uint64_t a1, unsigned __int16 *a2, int a3, unsigned __int16 *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v6;
  unint64_t v11;
  UChar *v12;
  UChar *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  icu::CollationIterator **v18;
  int v19;
  unsigned int v20;
  unsigned __int16 *v21;
  int v22;
  icu::CollationIterator *v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  UChar *v27;
  UErrorCode *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  icu::Normalizer2Impl *v34;
  UChar *v35;
  void *v36;
  void *v37;
  __int128 v40;
  __int128 v41;
  _BYTE v42[88];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  UChar *v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  uint64_t v65;
  UChar *v66;
  uint64_t v67;
  void (**v68)(icu::UnicodeString *__hidden);
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[120];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;

  v6 = (int)a5;
  v101 = *MEMORY[0x1E0C80C00];
  if (a2 == a4 && a3 == (_DWORD)a5)
    return 0;
  if (a3 < 0)
  {
    v15 = *a2;
    if (v15 == *a4)
    {
      v16 = 0;
      while (v15)
      {
        LODWORD(v14) = v16 + 1;
        v15 = a2[v16 + 1];
        v17 = a4[++v16];
        if (v15 != v17)
        {
          v12 = 0;
          v13 = 0;
          goto LABEL_20;
        }
      }
      return 0;
    }
    v13 = 0;
    v12 = 0;
    LODWORD(v14) = 0;
    v18 = (icu::CollationIterator **)(a1 + 16);
    v19 = (*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 24) >> 1) & 1;
  }
  else
  {
    v12 = &a2[a3];
    v13 = &a4[(int)a5];
    if (a3)
    {
      v14 = 0;
      while (a5 != v14)
      {
        if (a2[v14] != a4[v14])
          goto LABEL_20;
        if (a3 == ++v14)
          goto LABEL_10;
      }
      LODWORD(v14) = (_DWORD)a5;
    }
    else
    {
LABEL_10:
      LODWORD(v14) = a3;
      if (a3 == (_DWORD)a5)
        return 0;
    }
LABEL_20:
    v18 = (icu::CollationIterator **)(a1 + 16);
    v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 24);
    v19 = (v20 >> 1) & 1;
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == a3 || !sub_18BCA0F30(*(_QWORD *)(a1 + 8), a2[v14], (v20 >> 1) & 1))
      {
        if ((_DWORD)v14 == v6)
        {
          LODWORD(v14) = v6;
          goto LABEL_32;
        }
        if (!sub_18BCA0F30(*(_QWORD *)(a1 + 8), a4[v14], v19))
          goto LABEL_32;
      }
      v21 = &a2[(v14 - 1)];
      while ((int)v14 >= 2)
      {
        v22 = *v21--;
        LODWORD(v14) = v14 - 1;
        if (!sub_18BCA0F30(*(_QWORD *)(a1 + 8), v22, v19))
          goto LABEL_31;
      }
      LODWORD(v14) = 0;
LABEL_31:
      v18 = (icu::CollationIterator **)(a1 + 16);
    }
  }
LABEL_32:
  v23 = *v18;
  v24 = *((_DWORD *)*v18 + 20);
  if ((v24 & 0x80000000) != 0
    || (a5 = (UErrorCode *)(a3 - v14), a3 != (_DWORD)v14) && a2[(int)v14] > 0x17Fu)
  {
    v27 = v13;
    v28 = a6;
  }
  else
  {
    v26 = v6 - v14;
    v25 = v6 == (_DWORD)v14;
    v27 = v13;
    v28 = a6;
    if (v25 || a4[(int)v14] <= 0x17Fu)
    {
      if (a3 < 0)
      {
        LODWORD(a5) = -1;
        v26 = -1;
      }
      v11 = icu::CollationFastLatin::compareUTF16(*(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 88), (uint64_t)v23 + 84, v24, (uint64_t)&a2[(int)v14], (int)a5, (uint64_t)&a4[(int)v14], v26);
      if ((_DWORD)v11 != -2)
      {
LABEL_44:
        if ((_DWORD)v11)
          return v11;
        goto LABEL_47;
      }
      v23 = *v18;
    }
  }
  if ((*((_BYTE *)v23 + 24) & 1) == 0)
  {
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v83 = 0u;
    v82 = 0u;
    v81 = 0u;
    v80 = 0u;
    v79 = 0u;
    v78 = 0u;
    v77 = 0u;
    v76 = 0u;
    v75 = 0u;
    memset(&v74[40], 0, 80);
    *(_OWORD *)&v74[24] = 0u;
    v29 = *(uint64_t **)(a1 + 8);
    v30 = *v29;
    *(_QWORD *)&v74[16] = v29;
    *(_QWORD *)&v74[32] = &v74[48];
    *(_DWORD *)&v74[40] = 40;
    DWORD2(v90) = 0;
    DWORD2(v91) = -1;
    BYTE12(v91) = v19;
    *(_QWORD *)&v74[8] = v30;
    *(_QWORD *)v74 = off_1E2268460;
    *(_QWORD *)&v92 = a2;
    *((_QWORD *)&v92 + 1) = &a2[(int)v14];
    *(_QWORD *)&v93 = v12;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    memset(&v42[8], 0, 80);
    *((_QWORD *)&v40 + 1) = v30;
    v41 = (unint64_t)v29;
    *(_QWORD *)v42 = &v42[16];
    *(_DWORD *)&v42[8] = 40;
    DWORD2(v58) = 0;
    DWORD2(v59) = -1;
    BYTE12(v59) = v19;
    *(_QWORD *)&v40 = off_1E2268460;
    v60 = a4;
    v61 = &a4[(int)v14];
    v62 = v27;
    v11 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)v74, (icu::CollationIterator *)&v40, v23, v28, a5);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v40);
    icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)v74);
    goto LABEL_44;
  }
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v100 = 0;
  v83 = 0u;
  v82 = 0u;
  v81 = 0u;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  memset(&v74[40], 0, 80);
  *(_OWORD *)&v74[24] = 0u;
  v31 = *(uint64_t **)(a1 + 8);
  v32 = *v31;
  *(_QWORD *)&v74[16] = v31;
  *(_QWORD *)&v74[32] = &v74[48];
  *(_DWORD *)&v74[40] = 40;
  DWORD2(v90) = 0;
  DWORD2(v91) = -1;
  BYTE12(v91) = v19;
  *(_QWORD *)&v92 = a2;
  *((_QWORD *)&v92 + 1) = &a2[(int)v14];
  *(_QWORD *)&v74[8] = v32;
  *(_QWORD *)v74 = off_1E22684F0;
  *(_QWORD *)&v93 = v12;
  *((_QWORD *)&v93 + 1) = a2;
  *(_QWORD *)&v94 = *((_QWORD *)&v92 + 1);
  *(_QWORD *)&v95 = v12;
  *((_QWORD *)&v95 + 1) = v31[6];
  *(_QWORD *)&v96 = off_1E2256B38;
  WORD4(v96) = 2;
  LOBYTE(v100) = 1;
  v71 = 0u;
  v72 = 0u;
  v69 = 2;
  v70 = 0u;
  v65 = 0;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v73 = 1;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v47 = 0u;
  v46 = 0u;
  v45 = 0u;
  v44 = 0u;
  v43 = 0u;
  memset(&v42[8], 0, 80);
  *((_QWORD *)&v40 + 1) = v32;
  v41 = (unint64_t)v31;
  *(_QWORD *)v42 = &v42[16];
  *(_DWORD *)&v42[8] = 40;
  DWORD2(v58) = 0;
  DWORD2(v59) = -1;
  BYTE12(v59) = v19;
  v60 = a4;
  v61 = &a4[(int)v14];
  *(_QWORD *)&v40 = off_1E22684F0;
  v62 = v27;
  v63 = a4;
  v64 = v61;
  v66 = v27;
  v67 = *((_QWORD *)&v95 + 1);
  v68 = off_1E2256B38;
  v11 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)v74, (icu::CollationIterator *)&v40, v23, v28, a5);
  icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v40);
  icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)v74);
  if ((_DWORD)v11)
    return v11;
LABEL_47:
  v33 = *((_DWORD *)*v18 + 6);
  if (v33 >= 61440 && *(int *)v28 <= 0)
  {
    v34 = *(icu::Normalizer2Impl **)(*(_QWORD *)(a1 + 8) + 48);
    v35 = &a4[(int)v14];
    if ((v33 & 1) != 0)
    {
      memset(v74, 0, 112);
      sub_18BD6D50C((uint64_t)v74, v34, &a2[(int)v14], v12);
      v41 = 0u;
      memset(v42, 0, 80);
      v40 = 0u;
      sub_18BD6D50C((uint64_t)&v40, v34, v35, v27);
      v11 = sub_18BD6D428((uint64_t)v34, (uint64_t)v74, (uint64_t)&v40);
      *(_QWORD *)&v40 = off_1E2266070;
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v42[16]);
      icu::UObject::~UObject((icu::UObject *)&v40);
      *(_QWORD *)v74 = off_1E2266070;
      icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v74[48]);
    }
    else
    {
      *(_QWORD *)&v74[16] = 0;
      *(_QWORD *)&v74[24] = 0xFFFFFFFFLL;
      *(_QWORD *)&v74[8] = 0;
      *(_QWORD *)v74 = &off_1E2266010;
      *(_QWORD *)&v74[32] = &a2[(int)v14];
      *(_QWORD *)&v74[40] = v12;
      *((_QWORD *)&v40 + 1) = 0;
      *(_QWORD *)&v41 = 0;
      *((_QWORD *)&v41 + 1) = 0xFFFFFFFFLL;
      *(_QWORD *)&v40 = &off_1E2266010;
      *(_QWORD *)v42 = v35;
      *(_QWORD *)&v42[8] = v27;
      v11 = sub_18BD6D428((uint64_t)v34, (uint64_t)v74, (uint64_t)&v40);
      icu::UObject::~UObject((icu::UObject *)&v40);
    }
    icu::UObject::~UObject((icu::UObject *)v74);
  }
  return v11;
}

unint64_t icu::RuleBasedCollator::compare(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unsigned __int16 *v11;
  unsigned __int16 *v13;

  if (!a4 || *(int *)a5 > 0)
    return 0;
  if (a4 < 0)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }
  v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x8000u) == 0)
    v7 = v6 >> 5;
  else
    v7 = *((_DWORD *)a2 + 3);
  v8 = *((unsigned __int16 *)a3 + 4);
  if ((v8 & 0x8000u) == 0)
    v9 = v8 >> 5;
  else
    v9 = *((_DWORD *)a3 + 3);
  if (v7 >= a4)
    v7 = a4;
  if (v9 >= a4)
    v10 = a4;
  else
    v10 = v9;
  if ((v6 & 0x11) != 0)
  {
    v11 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    v11 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else
  {
    v11 = (unsigned __int16 *)*((_QWORD *)a2 + 3);
  }
  if ((v8 & 0x11) != 0)
  {
    v13 = 0;
  }
  else if ((v8 & 2) != 0)
  {
    v13 = (unsigned __int16 *)((char *)a3 + 10);
  }
  else
  {
    v13 = (unsigned __int16 *)*((_QWORD *)a3 + 3);
  }
  return icu::RuleBasedCollator::doCompare((uint64_t)this, v11, v7, v13, (UErrorCode *)v10, a5);
}

unint64_t icu::RuleBasedCollator::compare(uint64_t a1, UChar *s, int32_t a3, UChar *a4, UErrorCode *a5, UErrorCode *a6)
{
  UErrorCode *v7;
  int32_t v9;

  if (*(int *)a6 > 0)
    return 0;
  v7 = a5;
  v9 = a3;
  if (!s && a3 || !a4 && (_DWORD)a5)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }
  if (a3 < 0)
  {
    if ((a5 & 0x80000000) == 0)
      v9 = u_strlen(s);
  }
  else if ((a5 & 0x80000000) != 0)
  {
    v7 = (UErrorCode *)u_strlen(a4);
  }
  return icu::RuleBasedCollator::doCompare(a1, s, v9, a4, v7, a6);
}

unint64_t icu::RuleBasedCollator::compareUTF8(icu::RuleBasedCollator *this, const icu::StringPiece *a2, const unsigned __int8 **a3, UErrorCode *a4)
{
  const unsigned __int8 *v6;
  int32_t v7;
  BOOL v8;
  UErrorCode *v9;

  if (*(int *)a4 <= 0)
  {
    v6 = *(const unsigned __int8 **)a2;
    v7 = *((_DWORD *)a2 + 2);
    if (v6)
      v8 = 1;
    else
      v8 = v7 == 0;
    if (v8)
    {
      v9 = (UErrorCode *)*((unsigned int *)a3 + 2);
      if (*a3 || (_DWORD)v9 == 0)
        return icu::RuleBasedCollator::doCompare(this, v6, v7, *a3, v9, a4);
    }
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

unint64_t icu::RuleBasedCollator::doCompare(icu::RuleBasedCollator *this, const unsigned __int8 *a2, int32_t a3, const unsigned __int8 *a4, UErrorCode *a5, UErrorCode *a6)
{
  int v7;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int32_t v17;
  uint64_t v18;
  int v19;
  icu::FCDUTF8CollationIterator *v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  icu::CollationIterator *v42;
  const unsigned __int16 *v43;
  UErrorCode *v44;
  const unsigned __int16 *v45;
  uint64_t v46;
  const unsigned __int8 *v47;
  uint64_t v48;
  const unsigned __int16 *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  int32_t v57;
  const unsigned __int8 *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v63;
  UChar32 v64;
  const unsigned __int8 *v65;
  icu::FCDUTF8CollationIterator *v66;
  int32_t pi;
  void (**v68)(icu::UObject *__hidden);
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void (**v72)(icu::FCDUTF8CollationIterator *__hidden);
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  const unsigned __int8 *v95;
  int32_t v96;
  int v97;
  __int128 v98;
  const unsigned __int8 *v99;
  void (**v100)(icu::UnicodeString *__hidden);
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  void (**v105)(icu::UObject *__hidden);
  uint64_t v106;
  _QWORD *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;

  v7 = (int)a5;
  v138 = *MEMORY[0x1E0C80C00];
  if (a2 == a4 && a3 == (_DWORD)a5)
    return 0;
  if (a3 < 0)
  {
    v14 = *a2;
    if (v14 == *a4)
    {
      v15 = 0;
      while (v14)
      {
        LODWORD(v13) = v15 + 1;
        v14 = a2[v15 + 1];
        v16 = a4[++v15];
        if (v14 != v16)
          goto LABEL_19;
      }
      return 0;
    }
    LODWORD(v13) = 0;
LABEL_19:
    pi = v13;
  }
  else if (a3)
  {
    v13 = 0;
    while ((int)a5 != v13)
    {
      if (a2[v13] != a4[v13])
        goto LABEL_19;
      if (a3 == (_DWORD)++v13)
        goto LABEL_10;
    }
    pi = (int)a5;
    LODWORD(v13) = (_DWORD)a5;
  }
  else
  {
LABEL_10:
    pi = a3;
    LODWORD(v13) = a3;
    if (a3 == (_DWORD)a5)
      return 0;
  }
  if ((int)v13 <= 0)
  {
    v20 = (icu::RuleBasedCollator *)((char *)this + 16);
    v21 = (*(unsigned __int8 *)(*((_QWORD *)this + 2) + 24) >> 1) & 1;
    goto LABEL_77;
  }
  if ((_DWORD)v13 == a3 || (char)a2[v13] >= -64)
  {
    v17 = (int)a5;
    if ((_DWORD)v13 == (_DWORD)a5)
      goto LABEL_32;
    if ((char)a4[v13] >= -64)
    {
      v20 = (icu::RuleBasedCollator *)((char *)this + 16);
      v21 = (*(unsigned __int8 *)(*((_QWORD *)this + 2) + 24) >> 1) & 1;
      goto LABEL_35;
    }
  }
  v17 = v13;
  v18 = v13 - 1;
  while (v17 >= 2)
  {
    v19 = (char)a2[v18];
    --v17;
    --v18;
    if (v19 >= -64)
      goto LABEL_31;
  }
  v17 = 0;
LABEL_31:
  pi = v17;
LABEL_32:
  v20 = (icu::RuleBasedCollator *)((char *)this + 16);
  v21 = (*(unsigned __int8 *)(*((_QWORD *)this + 2) + 24) >> 1) & 1;
  LODWORD(v13) = v17;
  if (v17 < 1)
    goto LABEL_77;
LABEL_35:
  if ((_DWORD)v13 == a3)
    goto LABEL_40;
  v22 = (char)a2[v13];
  v23 = a2[v13];
  if (v22 < 0)
  {
    v24 = v13 + 1;
    if ((_DWORD)v24 == a3)
    {
LABEL_38:
      v23 = 65533;
      goto LABEL_39;
    }
    if (v23 < 0xE0)
    {
      if (v23 < 0xC2)
        goto LABEL_38;
      v33 = v23 & 0x1F;
    }
    else
    {
      if (v23 > 0xEF)
      {
        if (v23 > 0xF4)
          goto LABEL_38;
        v39 = a2[v24];
        if (((byte_18BE2A9A0[v39 >> 4] >> (v23 + 16)) & 1) == 0)
          goto LABEL_38;
        v24 = v13 + 2;
        if ((_DWORD)v13 + 2 == a3)
          goto LABEL_38;
        v32 = a2[v24] ^ 0x80;
        if (v32 > 0x3F)
          goto LABEL_38;
        LODWORD(v31) = v39 & 0x3F | ((v23 - 240) << 6);
      }
      else
      {
        v31 = v22 & 0xF;
        if (((a00000000000000[v31] >> (a2[v24] >> 5)) & 1) == 0)
          goto LABEL_38;
        v32 = a2[v24] & 0x3F;
      }
      LODWORD(v24) = v24 + 1;
      if ((_DWORD)v24 == a3)
        goto LABEL_38;
      v33 = v32 | ((_DWORD)v31 << 6);
    }
    v34 = a2[v24] ^ 0x80;
    v35 = v34 > 0x3F;
    v36 = v34 | (v33 << 6);
    if (v35)
      v23 = 65533;
    else
      v23 = v36;
  }
LABEL_39:
  if (sub_18BCA0F30(*((_QWORD *)this + 1), v23, v21))
    goto LABEL_102;
LABEL_40:
  if ((_DWORD)v13 == v7)
    goto LABEL_77;
  v25 = (char)a4[v13];
  v26 = a4[v13];
  if ((v25 & 0x80000000) == 0)
    goto LABEL_76;
  v27 = v13 + 1;
  if ((_DWORD)v27 == v7)
    goto LABEL_75;
  if (v26 >= 0xE0)
  {
    if (v26 > 0xEF)
    {
      if (v26 > 0xF4)
        goto LABEL_75;
      v40 = a4[v27];
      if (((byte_18BE2A9A0[v40 >> 4] >> (v26 + 16)) & 1) == 0)
        goto LABEL_75;
      v27 = v13 + 2;
      if ((_DWORD)v13 + 2 == v7)
        goto LABEL_75;
      v29 = a4[v27] ^ 0x80;
      if (v29 > 0x3F)
        goto LABEL_75;
      LODWORD(v28) = v40 & 0x3F | ((v26 - 240) << 6);
    }
    else
    {
      v28 = v25 & 0xF;
      if (((a00000000000000[v28] >> (a4[v27] >> 5)) & 1) == 0)
        goto LABEL_75;
      v29 = a4[v27] & 0x3F;
    }
    LODWORD(v27) = v27 + 1;
    if ((_DWORD)v27 != v7)
    {
      v30 = v29 | ((_DWORD)v28 << 6);
      goto LABEL_62;
    }
LABEL_75:
    v26 = 65533;
    goto LABEL_76;
  }
  if (v26 < 0xC2)
    goto LABEL_75;
  v30 = v26 & 0x1F;
LABEL_62:
  v37 = a4[v27] ^ 0x80;
  v35 = v37 > 0x3F;
  v38 = v37 | (v30 << 6);
  if (v35)
    v26 = 65533;
  else
    v26 = v38;
LABEL_76:
  v41 = *((_QWORD *)this + 1);
  while (sub_18BCA0F30(v41, v26, v21))
  {
LABEL_102:
    v63 = --pi;
    v64 = a2[v63];
    if ((v64 & 0x80) != 0)
    {
      v64 = utf8_prevCharSafeBody(a2, 0, &pi, v64, -3);
      LODWORD(v63) = pi;
    }
    if ((int)v63 < 1)
      break;
    v41 = *((_QWORD *)this + 1);
    v26 = v64;
  }
LABEL_77:
  v42 = *(icu::CollationIterator **)v20;
  v43 = (const unsigned __int16 *)*(unsigned int *)(*(_QWORD *)v20 + 80);
  v66 = v20;
  if ((v43 & 0x80000000) == 0 && (a3 == pi || a2[pi] <= 0xC5u) && (v7 == pi || a4[pi] <= 0xC5u))
  {
    v44 = a6;
    v45 = (const unsigned __int16 *)((char *)v42 + 84);
    if (a3 < 0)
    {
      v47 = &a4[pi];
      v49 = v43;
      v46 = 0xFFFFFFFFLL;
      v48 = 0xFFFFFFFFLL;
    }
    else
    {
      v46 = (a3 - pi);
      v47 = &a4[pi];
      v48 = (v7 - pi);
      v49 = v43;
    }
    v12 = icu::CollationFastLatin::compareUTF8(*(icu::CollationFastLatin **)(*((_QWORD *)this + 1) + 88), v45, v49, (uint64_t)&a2[pi], (const unsigned __int8 *)v46, (uint64_t)v47, (const unsigned __int8 *)v48);
    if ((_DWORD)v12 != -2)
    {
LABEL_89:
      if ((_DWORD)v12)
        return v12;
      goto LABEL_92;
    }
    v42 = *(icu::CollationIterator **)v66;
    a6 = v44;
  }
  if ((*((_BYTE *)v42 + 24) & 1) == 0)
  {
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v122 = 0u;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    v117 = 0u;
    v116 = 0u;
    v115 = 0u;
    v114 = 0u;
    v113 = 0u;
    v112 = 0u;
    v111 = 0u;
    v110 = 0u;
    v109 = 0u;
    v108 = 0u;
    v50 = (_QWORD *)*((_QWORD *)this + 1);
    v51 = *v50;
    v107 = v50;
    *((_QWORD *)&v108 + 1) = (char *)&v109 + 8;
    LODWORD(v109) = 40;
    DWORD2(v129) = 0;
    DWORD2(v130) = -1;
    BYTE12(v130) = v21;
    v105 = (void (**)(icu::UObject *__hidden))&unk_1E2268640;
    v106 = v51;
    *(_QWORD *)&v131 = a2;
    *((_QWORD *)&v131 + 1) = __PAIR64__(a3, pi);
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v86 = 0u;
    v85 = 0u;
    v84 = 0u;
    v83 = 0u;
    v82 = 0u;
    v81 = 0u;
    v80 = 0u;
    v79 = 0u;
    v78 = 0u;
    v77 = 0u;
    v76 = 0u;
    v75 = 0u;
    v74 = 0u;
    v73 = 0u;
    v71 = 0;
    v69 = v51;
    v70 = v50;
    v72 = (void (**)(icu::FCDUTF8CollationIterator *__hidden))&v73 + 1;
    LODWORD(v73) = 40;
    DWORD2(v93) = 0;
    DWORD2(v94) = -1;
    BYTE12(v94) = v21;
    v68 = (void (**)(icu::UObject *__hidden))&unk_1E2268640;
    v95 = a4;
    v96 = pi;
    v97 = v7;
    v44 = a6;
    v12 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)&v105, (icu::CollationIterator *)&v68, v42, a6, a5);
    icu::UTF8CollationIterator::~UTF8CollationIterator((icu::UTF8CollationIterator *)&v68);
    icu::UTF8CollationIterator::~UTF8CollationIterator((icu::UTF8CollationIterator *)&v105);
    goto LABEL_89;
  }
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  v137 = 0;
  v122 = 0u;
  v121 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  v117 = 0u;
  v116 = 0u;
  v115 = 0u;
  v114 = 0u;
  v113 = 0u;
  v112 = 0u;
  v111 = 0u;
  v110 = 0u;
  v109 = 0u;
  v108 = 0u;
  v52 = (_QWORD *)*((_QWORD *)this + 1);
  v53 = *v52;
  v107 = v52;
  *((_QWORD *)&v108 + 1) = (char *)&v109 + 8;
  LODWORD(v109) = 40;
  DWORD2(v129) = 0;
  DWORD2(v130) = -1;
  BYTE12(v130) = v21;
  *(_QWORD *)&v131 = a2;
  *((_QWORD *)&v131 + 1) = __PAIR64__(a3, pi);
  v105 = off_1E22685B0;
  v106 = v53;
  DWORD1(v132) = pi;
  *(_QWORD *)&v133 = v52[6];
  *((_QWORD *)&v133 + 1) = off_1E2256B38;
  LOWORD(v134) = 2;
  v102 = 0u;
  v103 = 0u;
  v101 = 0u;
  v98 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v104 = 0;
  v86 = 0u;
  v85 = 0u;
  v84 = 0u;
  v83 = 0u;
  v82 = 0u;
  v81 = 0u;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v71 = 0;
  v69 = v53;
  v70 = v52;
  v72 = (void (**)(icu::FCDUTF8CollationIterator *__hidden))&v73 + 1;
  LODWORD(v73) = 40;
  DWORD2(v93) = 0;
  DWORD2(v94) = -1;
  BYTE12(v94) = v21;
  v95 = a4;
  v96 = pi;
  v97 = v7;
  v68 = off_1E22685B0;
  DWORD1(v98) = pi;
  v99 = (const unsigned __int8 *)v133;
  v100 = off_1E2256B38;
  LOWORD(v101) = 2;
  v44 = a6;
  v12 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)&v105, (icu::CollationIterator *)&v68, v42, a6, a5);
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)&v68);
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)&v105);
  if ((_DWORD)v12)
    return v12;
LABEL_92:
  v54 = *(_DWORD *)(*(_QWORD *)v66 + 24);
  if (v54 >= 61440 && *(int *)v44 <= 0)
  {
    v55 = (uint64_t *)*((_QWORD *)this + 1);
    v56 = v55[6];
    v57 = pi;
    v58 = &a2[pi];
    if (a3 <= 0)
      v57 = 0;
    v59 = a3 - v57;
    v60 = v7 - v57;
    if ((v54 & 1) != 0)
    {
      v65 = &a4[pi];
      bzero(&v106, 0x208uLL);
      LODWORD(v108) = -1;
      v105 = (void (**)(icu::UObject *__hidden))off_1E2266100;
      v61 = *v55;
      *((_QWORD *)&v109 + 1) = v55;
      *((_QWORD *)&v110 + 1) = (char *)&v111 + 8;
      LODWORD(v111) = 40;
      DWORD2(v131) = 0;
      DWORD2(v132) = -1;
      *(_QWORD *)&v133 = v58;
      HIDWORD(v133) = v59;
      *((_QWORD *)&v108 + 1) = off_1E22685B0;
      *(_QWORD *)&v109 = v61;
      DWORD1(v134) = 0;
      *(_QWORD *)&v135 = v56;
      *((_QWORD *)&v135 + 1) = off_1E2256B38;
      LOWORD(v136) = 2;
      bzero(&v69, 0x208uLL);
      LODWORD(v71) = -1;
      v68 = (void (**)(icu::UObject *__hidden))off_1E2266100;
      *(_QWORD *)&v73 = v61;
      *((_QWORD *)&v73 + 1) = v55;
      *((_QWORD *)&v74 + 1) = (char *)&v75 + 8;
      LODWORD(v75) = 40;
      v96 = 0;
      DWORD2(v98) = -1;
      v99 = v65;
      HIDWORD(v100) = v60;
      v72 = off_1E22685B0;
      DWORD1(v101) = 0;
      *(_QWORD *)&v102 = v56;
      *((_QWORD *)&v102 + 1) = off_1E2256B38;
      LOWORD(v103) = 2;
      v12 = sub_18BD6D428(v56, (uint64_t)&v105, (uint64_t)&v68);
      v68 = (void (**)(icu::UObject *__hidden))off_1E2266100;
      icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)&v72);
      icu::UObject::~UObject((icu::UObject *)&v68);
      v105 = (void (**)(icu::UObject *__hidden))off_1E2266100;
      icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)((char *)&v108 + 8));
    }
    else
    {
      v106 = 0;
      v107 = 0;
      *(_QWORD *)&v108 = 0xFFFFFFFFLL;
      v105 = &off_1E22660B8;
      *((_QWORD *)&v108 + 1) = v58;
      LODWORD(v109) = 0;
      DWORD1(v109) = v59;
      v69 = 0;
      v70 = 0;
      v71 = 0xFFFFFFFFLL;
      v68 = &off_1E22660B8;
      v72 = (void (**)(icu::FCDUTF8CollationIterator *__hidden))&a4[pi];
      LODWORD(v73) = 0;
      DWORD1(v73) = v7 - v57;
      v12 = sub_18BD6D428(v56, (uint64_t)&v105, (uint64_t)&v68);
      icu::UObject::~UObject((icu::UObject *)&v68);
    }
    icu::UObject::~UObject((icu::UObject *)&v105);
  }
  return v12;
}

unint64_t icu::RuleBasedCollator::internalCompareUTF8(icu::RuleBasedCollator *this, const char *a2, int32_t a3, const char *a4, UErrorCode *a5, UErrorCode *a6)
{
  UErrorCode *v7;
  int32_t v9;

  if (*(int *)a6 > 0)
    return 0;
  v7 = a5;
  v9 = a3;
  if (!a2 && a3 || !a4 && (_DWORD)a5)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0;
  }
  if (a3 < 0)
  {
    if ((a5 & 0x80000000) == 0)
      v9 = strlen(a2);
  }
  else if ((a5 & 0x80000000) != 0)
  {
    v7 = (UErrorCode *)strlen(a4);
  }
  return icu::RuleBasedCollator::doCompare(this, (const unsigned __int8 *)a2, v9, (const unsigned __int8 *)a4, v7, a6);
}

uint64_t sub_18BD6D428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  while (1)
  {
    while (1)
    {
      v6 = sub_18BD6F498(a2);
      v7 = sub_18BD6F498(a3);
      if ((_DWORD)v6 != (_DWORD)v7)
        break;
      if ((v6 & 0x80000000) != 0)
        return 0;
    }
    v8 = v7;
    if ((v6 & 0x80000000) != 0)
    {
      v9 = -2;
      if ((v7 & 0x80000000) != 0)
        goto LABEL_12;
    }
    else if ((_DWORD)v6 == 65534)
    {
      v9 = -1;
      if ((v7 & 0x80000000) != 0)
        goto LABEL_12;
    }
    else
    {
      v9 = sub_18BD6F504(a2, a1, v6);
      if ((v8 & 0x80000000) != 0)
      {
LABEL_12:
        v10 = -2;
        goto LABEL_14;
      }
    }
    v10 = (_DWORD)v8 == 65534 ? -1 : sub_18BD6F504(a3, a1, v8);
LABEL_14:
    if (v9 < v10)
      return 0xFFFFFFFFLL;
    if (v9 > v10)
      return 1;
  }
}

uint64_t sub_18BD6D50C(uint64_t a1, icu::Normalizer2Impl *this, UChar *src, UChar *a4)
{
  icu::UnicodeString *v8;
  unsigned __int16 *FCD;
  UChar *v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  UChar *v18;
  icu::UnicodeString *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  UErrorCode v23;

  *(_DWORD *)(a1 + 24) = -1;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)a1 = off_1E2266070;
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  v8 = (icu::UnicodeString *)(a1 + 48);
  *(_WORD *)(a1 + 56) = 2;
  v23 = U_ZERO_ERROR;
  FCD = icu::Normalizer2Impl::makeFCD(this, src, a4, 0, &v23);
  if (v23 <= U_ZERO_ERROR)
  {
    v10 = FCD;
    if (FCD == a4 || !a4 && !*FCD)
    {
      *(_QWORD *)(a1 + 32) = src;
LABEL_26:
      *(_QWORD *)(a1 + 40) = v10;
      return a1;
    }
    icu::UnicodeString::unBogus((uint64_t)v8);
    if (*(__int16 *)(a1 + 56) < 0)
      v11 = *(unsigned int *)(a1 + 60);
    else
      v11 = *(unsigned __int16 *)(a1 + 56) >> 5;
    icu::UnicodeString::doReplace((uint64_t)v8, 0, v11, (uint64_t)src, 0, (unint64_t)((char *)v10 - (char *)src) >> 1);
    v22 = 0u;
    v18 = (UChar *)this;
    v19 = v8;
    v21 = 0u;
    v20 = 0u;
    *(_QWORD *)((char *)&v21 + 5) = 0;
    v12 = *(unsigned __int16 *)(a1 + 56);
    if ((v12 & 0x8000) != 0)
      v13 = *(_DWORD *)(a1 + 60);
    else
      v13 = v12 >> 5;
    if (icu::ReorderingBuffer::init((icu::ReorderingBuffer *)&v18, v13, &v23))
      icu::Normalizer2Impl::makeFCD(this, v10, a4, &v18, &v23);
    if ((_QWORD)v20)
      icu::UnicodeString::releaseBuffer((uint64_t)v19, ((_QWORD)v21 - (_QWORD)v20) >> 1);
    if (v23 <= U_ZERO_ERROR)
    {
      v14 = *(unsigned __int16 *)(a1 + 56);
      if ((v14 & 0x11) != 0)
      {
        v15 = 0;
      }
      else if ((v14 & 2) != 0)
      {
        v15 = a1 + 58;
      }
      else
      {
        v15 = *(_QWORD *)(a1 + 72);
      }
      *(_QWORD *)(a1 + 32) = v15;
      if ((v14 & 0x8000) != 0)
        v16 = *(_DWORD *)(a1 + 60);
      else
        v16 = v14 >> 5;
      v10 = (UChar *)(v15 + 2 * (int)v16);
      goto LABEL_26;
    }
  }
  return a1;
}

void sub_18BD6D6DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2266070;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 48));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BD6D710(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2266100;
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)(a1 + 32));
  icu::UObject::~UObject((icu::UObject *)a1);
}

unint64_t icu::RuleBasedCollator::compare(icu::RuleBasedCollator *this, UCharIterator *a2, UCharIterator *a3, UErrorCode *a4)
{
  unint64_t v4;
  unsigned int v9;
  int v10;
  int v11;
  UErrorCode *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int i;
  int v19;
  icu::CollationIterator *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void (**v29)(icu::UObject *__hidden);
  __int128 v30;
  uint64_t v31;
  void (**v32)(icu::FCDUIterCollationIterator *__hidden);
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  void (**v57)(icu::UnicodeString *__hidden);
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void (**v64)(icu::UObject *__hidden);
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v4 = 0;
  v97 = *MEMORY[0x1E0C80C00];
  if (a2 != a3 && *(int *)a4 <= 0)
  {
    v9 = *(unsigned __int8 *)(*((_QWORD *)this + 2) + 24);
    v10 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
    v11 = ((uint64_t (*)(UCharIterator *))a3->next)(a3);
    if (v10 == v11)
    {
      LODWORD(v13) = 0;
      do
      {
        if (v10 < 0)
          return 0;
        v13 = (v13 + 1);
        v10 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
        v14 = ((uint64_t (*)(UCharIterator *))a3->next)(a3);
      }
      while (v10 == v14);
      v15 = v14;
      if ((v10 & 0x80000000) == 0)
        goto LABEL_10;
    }
    else
    {
      v15 = v11;
      v13 = 0;
      if ((v10 & 0x80000000) == 0)
LABEL_10:
        ((void (*)(UCharIterator *))a2->previous)(a2);
    }
    if ((v15 & 0x80000000) == 0)
      ((void (*)(UCharIterator *))a3->previous)(a3);
    v16 = (v9 >> 1) & 1;
    if ((_DWORD)v13)
    {
      if ((v10 & 0x80000000) == 0 && sub_18BCA0F30(*((_QWORD *)this + 1), v10, v16))
        goto LABEL_20;
      if ((v15 & 0x80000000) == 0)
      {
        v17 = *((_QWORD *)this + 1);
        for (i = v15; sub_18BCA0F30(v17, i, v16); i = v19)
        {
LABEL_20:
          v19 = ((uint64_t (*)(UCharIterator *))a2->previous)(a2);
          ((void (*)(UCharIterator *))a3->previous)(a3);
          if ((int)v13 < 2)
          {
            v13 = 0;
            break;
          }
          v13 = (v13 - 1);
          v17 = *((_QWORD *)this + 1);
        }
      }
    }
    v20 = (icu::CollationIterator *)*((_QWORD *)this + 2);
    if ((*((_BYTE *)v20 + 24) & 1) != 0)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      v79 = 0u;
      v78 = 0u;
      v77 = 0u;
      v76 = 0u;
      v75 = 0u;
      v74 = 0u;
      v73 = 0u;
      v72 = 0u;
      v71 = 0u;
      v70 = 0u;
      v69 = 0u;
      v68 = 0u;
      v67 = 0u;
      v66 = 0u;
      v23 = (uint64_t *)*((_QWORD *)this + 1);
      v24 = *v23;
      *((_QWORD *)&v65 + 1) = v23;
      *((_QWORD *)&v66 + 1) = (char *)&v67 + 8;
      LODWORD(v67) = 40;
      DWORD2(v87) = 0;
      DWORD2(v88) = -1;
      BYTE12(v88) = v16;
      *(_QWORD *)&v89 = a2;
      *(_QWORD *)&v65 = v24;
      v64 = off_1E2268040;
      HIDWORD(v89) = v13;
      *((_QWORD *)&v90 + 1) = v23[6];
      *(_QWORD *)&v91 = off_1E2256B38;
      WORD4(v91) = 2;
      v60 = 0u;
      v61 = 0u;
      v58 = 2;
      v59 = 0u;
      DWORD2(v55) = 0;
      *(_QWORD *)&v56 = 0;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      v45 = 0u;
      v44 = 0u;
      v43 = 0u;
      v42 = 0u;
      v41 = 0u;
      v40 = 0u;
      v39 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0;
      *(_QWORD *)&v30 = v24;
      *((_QWORD *)&v30 + 1) = v23;
      v32 = (void (**)(icu::FCDUIterCollationIterator *__hidden))&v33 + 1;
      LODWORD(v33) = 40;
      DWORD2(v53) = 0;
      DWORD2(v54) = -1;
      BYTE12(v54) = v16;
      *(_QWORD *)&v55 = a3;
      v29 = off_1E2268040;
      HIDWORD(v55) = v13;
      *((_QWORD *)&v56 + 1) = *((_QWORD *)&v90 + 1);
      v57 = off_1E2256B38;
      v4 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)&v64, (icu::CollationIterator *)&v29, v20, a4, v12);
      icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v29);
      icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v64);
      if ((_DWORD)v4)
        return v4;
    }
    else
    {
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v80 = 0u;
      v79 = 0u;
      v78 = 0u;
      v77 = 0u;
      v76 = 0u;
      v75 = 0u;
      v74 = 0u;
      v73 = 0u;
      v72 = 0u;
      v71 = 0u;
      v70 = 0u;
      v69 = 0u;
      v68 = 0u;
      v67 = 0u;
      v66 = 0u;
      v21 = (uint64_t *)*((_QWORD *)this + 1);
      v22 = *v21;
      *((_QWORD *)&v65 + 1) = v21;
      *((_QWORD *)&v66 + 1) = (char *)&v67 + 8;
      LODWORD(v67) = 40;
      DWORD2(v87) = 0;
      DWORD2(v88) = -1;
      BYTE12(v88) = v16;
      *(_QWORD *)&v65 = v22;
      v64 = (void (**)(icu::UObject *__hidden))&unk_1E22680D0;
      *(_QWORD *)&v89 = a2;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      v45 = 0u;
      v44 = 0u;
      v43 = 0u;
      v42 = 0u;
      v41 = 0u;
      v40 = 0u;
      v39 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0;
      *(_QWORD *)&v30 = v22;
      *((_QWORD *)&v30 + 1) = v21;
      v32 = (void (**)(icu::FCDUIterCollationIterator *__hidden))&v33 + 1;
      LODWORD(v33) = 40;
      DWORD2(v53) = 0;
      DWORD2(v54) = -1;
      BYTE12(v54) = v16;
      v29 = (void (**)(icu::UObject *__hidden))&unk_1E22680D0;
      *(_QWORD *)&v55 = a3;
      v4 = icu::CollationCompare::compareUpToQuaternary((icu::CollationCompare *)&v64, (icu::CollationIterator *)&v29, v20, a4, v12);
      icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)&v29);
      icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)&v64);
      if ((_DWORD)v4)
        return v4;
    }
    if (*(int *)(*((_QWORD *)this + 2) + 24) >= 61440 && *(int *)a4 <= 0)
    {
      ((void (*)(UCharIterator *, uint64_t, uint64_t))a2->move)(a2, v13, 3);
      ((void (*)(UCharIterator *, uint64_t, uint64_t))a3->move)(a3, v13, 3);
      v25 = (uint64_t *)*((_QWORD *)this + 1);
      v26 = v25[6];
      if ((*(_BYTE *)(*((_QWORD *)this + 2) + 24) & 1) != 0)
      {
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v80 = 0u;
        v79 = 0u;
        v78 = 0u;
        v77 = 0u;
        v76 = 0u;
        v75 = 0u;
        v74 = 0u;
        v73 = 0u;
        v72 = 0u;
        v71 = 0u;
        v70 = 0u;
        v69 = 0u;
        v68 = 0u;
        v67 = 0u;
        v66 = 0u;
        v65 = 0u;
        LODWORD(v66) = -1;
        v64 = (void (**)(icu::UObject *__hidden))off_1E2266190;
        v27 = *v25;
        *((_QWORD *)&v67 + 1) = v25;
        *((_QWORD *)&v68 + 1) = (char *)&v69 + 8;
        LODWORD(v69) = 40;
        DWORD2(v89) = 0;
        DWORD2(v90) = -1;
        *(_QWORD *)&v91 = a2;
        *(_QWORD *)&v67 = v27;
        *((_QWORD *)&v66 + 1) = off_1E2268040;
        HIDWORD(v91) = v13;
        *((_QWORD *)&v92 + 1) = v26;
        *(_QWORD *)&v93 = off_1E2256B38;
        WORD4(v93) = 2;
        v62 = 0u;
        v63 = 0u;
        *((_QWORD *)&v60 + 1) = 2;
        v61 = 0u;
        LODWORD(v58) = 0;
        *(_QWORD *)&v59 = 0;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v46 = 0u;
        v45 = 0u;
        v44 = 0u;
        v43 = 0u;
        v42 = 0u;
        v41 = 0u;
        v40 = 0u;
        v39 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        *(_QWORD *)&v34 = 0;
        v30 = 0u;
        v31 = 0xFFFFFFFFLL;
        v29 = (void (**)(icu::UObject *__hidden))off_1E2266190;
        *(_QWORD *)&v33 = v27;
        *((_QWORD *)&v33 + 1) = v25;
        *((_QWORD *)&v34 + 1) = (char *)&v35 + 8;
        LODWORD(v35) = 40;
        DWORD2(v55) = 0;
        DWORD2(v56) = -1;
        v57 = (void (**)(icu::UnicodeString *__hidden))a3;
        v32 = off_1E2268040;
        HIDWORD(v58) = v13;
        *((_QWORD *)&v59 + 1) = v26;
        *(_QWORD *)&v60 = off_1E2256B38;
        v4 = sub_18BD6D428(v26, (uint64_t)&v64, (uint64_t)&v29);
        v29 = (void (**)(icu::UObject *__hidden))off_1E2266190;
        icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v32);
        icu::UObject::~UObject((icu::UObject *)&v29);
        v64 = (void (**)(icu::UObject *__hidden))off_1E2266190;
        icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)((char *)&v66 + 8));
      }
      else
      {
        *(_QWORD *)&v66 = 0xFFFFFFFFLL;
        v65 = 0uLL;
        v64 = &off_1E2266148;
        *((_QWORD *)&v66 + 1) = a2;
        v30 = 0uLL;
        v31 = 0xFFFFFFFFLL;
        v29 = &off_1E2266148;
        v32 = (void (**)(icu::FCDUIterCollationIterator *__hidden))a3;
        v4 = sub_18BD6D428(v26, (uint64_t)&v64, (uint64_t)&v29);
        icu::UObject::~UObject((icu::UObject *)&v29);
      }
      icu::UObject::~UObject((icu::UObject *)&v64);
    }
  }
  return v4;
}

void sub_18BD6DDEC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2266190;
  icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)(a1 + 32));
  icu::UObject::~UObject((icu::UObject *)a1);
}

icu::CollationKey *icu::RuleBasedCollator::getCollationKey(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, icu::CollationKey *a3, UErrorCode *a4)
{
  unsigned int v6;
  UChar *v7;
  int v8;
  int v9;
  int v10;

  v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    v7 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    v7 = (UChar *)((char *)a2 + 10);
  }
  else
  {
    v7 = (UChar *)*((_QWORD *)a2 + 3);
  }
  v8 = (__int16)v6;
  v9 = v6 >> 5;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = *((_DWORD *)a2 + 3);
  return icu::RuleBasedCollator::getCollationKey((uint64_t)this, v7, v10, a3, a4);
}

icu::CollationKey *icu::RuleBasedCollator::getCollationKey(uint64_t a1, UChar *a2, int a3, icu::CollationKey *this, UErrorCode *a5)
{
  int v11;
  BOOL v12;
  char *v13;
  int v14;
  _QWORD v15[2];
  int v16;
  int v17;
  uint64_t v18;
  icu::CollationKey *v19;

  if (*(int *)a5 >= 1)
    return (icu::CollationKey *)icu::CollationKey::setToBogus((uint64_t)this);
  if (!a2 && a3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return (icu::CollationKey *)icu::CollationKey::setToBogus((uint64_t)this);
  }
  icu::CollationKey::reset((uint64_t)this);
  v11 = *((_DWORD *)this + 2);
  v12 = v11 < 0;
  if (v11 < 0)
    v13 = (char *)*((_QWORD *)this + 2);
  else
    v13 = (char *)this + 16;
  if (v12)
    v14 = *((_DWORD *)this + 6);
  else
    v14 = 32;
  v16 = v14;
  v17 = 0;
  v15[0] = &off_1E2265FB0;
  v15[1] = v13;
  v18 = 0;
  v19 = this;
  icu::RuleBasedCollator::writeSortKey(a1, a2, a3, v15, a5);
  if (*(int *)a5 < 1)
  {
    if (*((_DWORD *)this + 3) == 2)
      *a5 = U_MEMORY_ALLOCATION_ERROR;
    else
      icu::CollationKey::setLength((uint64_t)this, v17);
  }
  else
  {
    icu::CollationKey::setToBogus((uint64_t)this);
  }
  icu::ByteSink::~ByteSink((icu::ByteSink *)v15);
  return this;
}

void icu::RuleBasedCollator::writeSortKey(uint64_t a1, UChar *a2, int a3, _DWORD *a4, UErrorCode *a5)
{
  UChar *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  void (**v17)(icu::UTF16CollationIterator *__hidden);
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    if (a3 < 0)
      v9 = 0;
    else
      v9 = &a2[a3];
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24);
    v16 = &unk_1E225B318;
    if ((v11 & 1) != 0)
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v51 = 0;
      v34 = 0u;
      v33 = 0u;
      v32 = 0u;
      v31 = 0u;
      v30 = 0u;
      v29 = 0u;
      v28 = 0u;
      v27 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v14 = *(_QWORD **)(a1 + 8);
      v15 = *v14;
      v19 = v14;
      *((_QWORD *)&v20 + 1) = (char *)&v21 + 8;
      LODWORD(v21) = 40;
      DWORD2(v41) = 0;
      DWORD2(v42) = -1;
      BYTE12(v42) = (v11 & 2) != 0;
      *(_QWORD *)&v43 = a2;
      *((_QWORD *)&v43 + 1) = a2;
      v17 = off_1E22684F0;
      v18 = v15;
      *(_QWORD *)&v44 = v9;
      *((_QWORD *)&v44 + 1) = a2;
      *(_QWORD *)&v45 = a2;
      *(_QWORD *)&v46 = v9;
      *((_QWORD *)&v46 + 1) = v14[6];
      *(_QWORD *)&v47 = off_1E2256B38;
      WORD4(v47) = 2;
      LOBYTE(v51) = 1;
      icu::CollationKeys::writeSortKeyUpToQuaternary((icu::CollationIterator::CEBuffer *)&v17, v14[9], v10, a4, 1, (uint64_t)&v16, 1, a5);
      icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v17);
    }
    else
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      v33 = 0u;
      v32 = 0u;
      v31 = 0u;
      v30 = 0u;
      v29 = 0u;
      v28 = 0u;
      v27 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v12 = *(_QWORD **)(a1 + 8);
      v13 = *v12;
      v19 = v12;
      *((_QWORD *)&v20 + 1) = (char *)&v21 + 8;
      LODWORD(v21) = 40;
      DWORD2(v41) = 0;
      DWORD2(v42) = -1;
      BYTE12(v42) = (v11 & 2) != 0;
      v17 = off_1E2268460;
      v18 = v13;
      *(_QWORD *)&v43 = a2;
      *((_QWORD *)&v43 + 1) = a2;
      *(_QWORD *)&v44 = v9;
      icu::CollationKeys::writeSortKeyUpToQuaternary((icu::CollationIterator::CEBuffer *)&v17, v12[9], v10, a4, 1, (uint64_t)&v16, 1, a5);
      icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v17);
    }
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 24) & 0xFFFFF000) == 0xF000)
      icu::RuleBasedCollator::writeIdenticalLevel(a1, a2, v9, a4, a5);
    (*(void (**)(_DWORD *, void *, uint64_t))(*(_QWORD *)a4 + 16))(a4, &unk_18BE2A9B1, 1);
    icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)&v16);
  }
}

uint64_t icu::RuleBasedCollator::getSortKey(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, char *a3, int a4)
{
  unsigned int v6;
  UChar *v7;
  int v8;
  int v9;
  int v10;

  v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    v7 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    v7 = (UChar *)((char *)a2 + 10);
  }
  else
  {
    v7 = (UChar *)*((_QWORD *)a2 + 3);
  }
  v8 = (__int16)v6;
  v9 = v6 >> 5;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = *((_DWORD *)a2 + 3);
  return icu::RuleBasedCollator::getSortKey((uint64_t)this, v7, v10, a3, a4);
}

uint64_t icu::RuleBasedCollator::getSortKey(uint64_t a1, UChar *a2, int a3, char *a4, int a5)
{
  uint64_t v5;
  BOOL v6;
  char *v7;
  int v8;
  UErrorCode v10;
  _QWORD v11[2];
  int v12;
  unsigned int v13;
  uint64_t v14;
  char v15;

  v5 = 0;
  if (a3)
    v6 = a2 == 0;
  else
    v6 = 0;
  if (!v6 && (a5 & 0x80000000) == 0)
  {
    if (a4 || !a5)
    {
      v15 = 0;
      v7 = &v15;
      if (a4)
      {
        v7 = a4;
        v8 = a5;
      }
      else
      {
        v8 = 0;
      }
      v14 = 0;
      v12 = v8;
      v13 = 0;
      v11[0] = &off_1E22661D8;
      v11[1] = v7;
      v10 = U_ZERO_ERROR;
      icu::RuleBasedCollator::writeSortKey(a1, a2, a3, v11, &v10);
      if (v10 <= U_ZERO_ERROR)
        v5 = v13;
      else
        v5 = 0;
      icu::ByteSink::~ByteSink((icu::ByteSink *)v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

UChar *icu::RuleBasedCollator::writeIdenticalLevel(uint64_t a1, UChar *a2, UChar *a3, _DWORD *a4, UErrorCode *a5)
{
  UChar *result;
  UChar *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  int v15;
  void *v16;
  void (**v17)(icu::UnicodeString *__hidden);
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  result = icu::Normalizer2Impl::decompose(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), a2, a3, 0, a5);
  if (*(int *)a5 > 0)
    return result;
  v11 = result;
  result = (UChar *)sub_18BCA1FE4(a4, 1);
  if (v11 == a2)
  {
    v12 = 0;
    if (a3)
      goto LABEL_4;
LABEL_7:
    if (!*v11)
      return result;
    LODWORD(v13) = -1;
    goto LABEL_9;
  }
  result = (UChar *)sub_18BC861AC(0, (uint64_t)a2, (unint64_t)((char *)v11 - (char *)a2) >> 1, (uint64_t)a4);
  v12 = (uint64_t)result;
  if (!a3)
    goto LABEL_7;
LABEL_4:
  if (v11 == a3)
    return result;
  v13 = (unint64_t)((char *)a3 - (char *)v11) >> 1;
LABEL_9:
  v18 = 0u;
  v19 = 0u;
  v21 = 0;
  v20 = 0u;
  v17 = off_1E2256B38;
  LOWORD(v18) = 2;
  icu::Normalizer2Impl::decompose(*(UChar **)(*(_QWORD *)(a1 + 8) + 48), v11, a3, (icu::UnicodeString *)&v17, v13, a5);
  v14 = 0;
  if ((v18 & 0x11) == 0)
  {
    if ((v18 & 2) != 0)
      v14 = (char *)&v18 + 2;
    else
      v14 = (char *)v19;
  }
  if ((v18 & 0x8000u) == 0)
    v15 = (unsigned __int16)v18 >> 5;
  else
    v15 = DWORD1(v18);
  sub_18BC861AC(v12, (uint64_t)v14, v15, (uint64_t)a4);
  return (UChar *)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v17);
}

uint64_t icu::RuleBasedCollator::internalNextSortKeyPart(icu::RuleBasedCollator *this, UCharIterator *a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v6;
  uint64_t v10;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  UChar *v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  unsigned int v33;
  uint64_t v34;
  void (**v35)(icu::UnicodeString *__hidden);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    if (!a2 || !a3 || (v10 = a5, (a5 & 0x80000000) != 0) || !a4 && (_DWORD)a5)
    {
      v6 = 0;
      *a6 = U_ILLEGAL_ARGUMENT_ERROR;
      return v6;
    }
    if ((_DWORD)a5)
    {
      v34 = 0;
      v32 = a5;
      v33 = 0;
      v31[0] = &off_1E22661D8;
      v31[1] = a4;
      v14 = a3[1];
      LODWORD(v34) = v14;
      ((void (*)(UCharIterator *, _QWORD, _QWORD))a2->move)(a2, 0, 0);
      v15 = *a3;
      if ((int)*a3 > 5)
      {
        v6 = 0;
      }
      else
      {
        v16 = *((_QWORD *)this + 2);
        v17 = *(_DWORD *)(v16 + 24);
        v29[0] = &off_1E2266238;
        v29[1] = v31;
        LODWORD(v30) = 1;
        HIDWORD(v30) = v14 + v10;
        if ((v17 & 1) != 0)
        {
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v51 = 0u;
          v50 = 0u;
          v49 = 0u;
          v48 = 0u;
          v47 = 0u;
          v46 = 0u;
          v45 = 0u;
          v44 = 0u;
          v43 = 0u;
          v42 = 0u;
          v41 = 0u;
          v40 = 0u;
          v38 = 0u;
          v39 = 0u;
          v37 = 0u;
          v25 = (uint64_t *)*((_QWORD *)this + 1);
          v26 = *v25;
          *((_QWORD *)&v36 + 1) = v25;
          *((_QWORD *)&v37 + 1) = (char *)&v38 + 8;
          LODWORD(v38) = 40;
          DWORD2(v58) = 0;
          DWORD2(v59) = -1;
          BYTE12(v59) = (v17 & 2) != 0;
          *(_QWORD *)&v60 = a2;
          v35 = off_1E2268040;
          *(_QWORD *)&v36 = v26;
          HIDWORD(v60) = 0;
          *((_QWORD *)&v61 + 1) = v25[6];
          *(_QWORD *)&v62 = off_1E2256B38;
          WORD4(v62) = 2;
          icu::CollationKeys::writeSortKeyUpToQuaternary((icu::CollationIterator::CEBuffer *)&v35, v25[9], v16, v31, v15, (uint64_t)v29, 0, a6);
          icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)&v35);
        }
        else
        {
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v51 = 0u;
          v50 = 0u;
          v49 = 0u;
          v48 = 0u;
          v47 = 0u;
          v46 = 0u;
          v45 = 0u;
          v44 = 0u;
          v43 = 0u;
          v42 = 0u;
          v41 = 0u;
          v40 = 0u;
          v38 = 0u;
          v39 = 0u;
          v37 = 0u;
          v18 = (uint64_t *)*((_QWORD *)this + 1);
          v19 = *v18;
          *((_QWORD *)&v36 + 1) = v18;
          *((_QWORD *)&v37 + 1) = (char *)&v38 + 8;
          LODWORD(v38) = 40;
          DWORD2(v58) = 0;
          DWORD2(v59) = -1;
          BYTE12(v59) = (v17 & 2) != 0;
          v35 = (void (**)(icu::UnicodeString *__hidden))&unk_1E22680D0;
          *(_QWORD *)&v36 = v19;
          *(_QWORD *)&v60 = a2;
          icu::CollationKeys::writeSortKeyUpToQuaternary((icu::CollationIterator::CEBuffer *)&v35, v18[9], v16, v31, v15, (uint64_t)v29, 0, a6);
          icu::UIterCollationIterator::~UIterCollationIterator((icu::UIterCollationIterator *)&v35);
        }
        if (*(int *)a6 > 0)
        {
          v10 = 0;
LABEL_25:
          icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)v29);
LABEL_40:
          v6 = v10;
LABEL_44:
          icu::ByteSink::~ByteSink((icu::ByteSink *)v31);
          return v6;
        }
        if ((int)v33 > (int)v10)
        {
          *(_QWORD *)a3 = v30;
          goto LABEL_25;
        }
        if ((*(_DWORD *)(*((_QWORD *)this + 2) + 24) & 0xFFFFF000) == 0xF000)
        {
          ((void (*)(UCharIterator *, _QWORD, _QWORD))a2->move)(a2, 0, 0);
          v15 = 6;
        }
        icu::CollationKeys::LevelCallback::~LevelCallback((icu::CollationKeys::LevelCallback *)v29);
        v6 = v33;
      }
      if (v15 != 6)
        goto LABEL_42;
      v20 = v34;
      v21 = v32;
      v36 = 0u;
      *(_QWORD *)&v39 = 0;
      v38 = 0u;
      v37 = 0u;
      v35 = off_1E2256B38;
      v22 = 2;
      LOWORD(v36) = 2;
      v23 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
      if ((v23 & 0x80000000) == 0)
      {
        do
        {
          LOWORD(v29[0]) = v23;
          icu::UnicodeString::doAppend((uint64_t)&v35, (uint64_t)v29, 0, 1);
          v23 = ((uint64_t (*)(UCharIterator *))a2->next)(a2);
        }
        while ((v23 & 0x80000000) == 0);
        v22 = (unsigned __int16)v36;
        if ((v36 & 0x11) != 0)
        {
          v24 = 0;
LABEL_32:
          if ((v22 & 0x8000u) == 0)
            v27 = v22 >> 5;
          else
            v27 = DWORD1(v36);
          icu::RuleBasedCollator::writeIdenticalLevel((uint64_t)this, v24, &v24[v27], v31, a6);
          v28 = *(unsigned int *)a6;
          if ((int)v28 > 0)
          {
            v10 = 0;
LABEL_39:
            icu::UnicodeString::~UnicodeString((void *)v28, (icu::UnicodeString *)&v35);
            goto LABEL_40;
          }
          if ((int)v33 > (int)v10)
          {
            v28 = (v21 + v20 - v6);
            *a3 = 6;
            a3[1] = v28;
            goto LABEL_39;
          }
          icu::UnicodeString::~UnicodeString((void *)v33, (icu::UnicodeString *)&v35);
          v6 = v33;
LABEL_42:
          *(_QWORD *)a3 = 7;
          if ((int)v6 < (int)v10)
            bzero(&a4[(int)v6], (~(_DWORD)v6 + v10) + 1);
          goto LABEL_44;
        }
        if ((v36 & 2) == 0)
        {
          v24 = (UChar *)v37;
          goto LABEL_32;
        }
      }
      v24 = (UChar *)&v36 + 1;
      goto LABEL_32;
    }
  }
  return 0;
}

void icu::RuleBasedCollator::internalGetCEs(icu::RuleBasedCollator *this, const icu::UnicodeString *a2, icu::UVector64 *a3, UErrorCode *a4)
{
  unsigned int v6;
  char *v7;
  int v8;
  unsigned int v9;
  char *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  void (**v25)(icu::UTF16CollationIterator *__hidden);
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return;
  v6 = *((unsigned __int16 *)a2 + 4);
  if ((v6 & 0x11) != 0)
  {
    v7 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    v7 = (char *)a2 + 10;
  }
  else
  {
    v7 = (char *)*((_QWORD *)a2 + 3);
  }
  v8 = (__int16)v6;
  v9 = v6 >> 5;
  if (v8 < 0)
    v9 = *((_DWORD *)a2 + 3);
  v10 = &v7[2 * v9];
  v11 = *(_DWORD *)(*((_QWORD *)this + 2) + 24);
  if ((v11 & 1) != 0)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v59 = 0;
    v42 = 0u;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    v18 = (_QWORD *)*((_QWORD *)this + 1);
    v19 = *v18;
    v27 = v18;
    *((_QWORD *)&v28 + 1) = (char *)&v29 + 8;
    LODWORD(v29) = 40;
    DWORD2(v49) = 0;
    DWORD2(v50) = -1;
    BYTE12(v50) = (v11 & 2) != 0;
    *(_QWORD *)&v51 = v7;
    *((_QWORD *)&v51 + 1) = v7;
    v25 = off_1E22684F0;
    v26 = v19;
    *(_QWORD *)&v52 = v10;
    *((_QWORD *)&v52 + 1) = v7;
    *(_QWORD *)&v53 = v7;
    *(_QWORD *)&v54 = v10;
    *((_QWORD *)&v54 + 1) = v18[6];
    *(_QWORD *)&v55 = off_1E2256B38;
    WORD4(v55) = 2;
    LOBYTE(v59) = 1;
    v20 = sub_18BC8F6EC((icu::CollationIterator::CEBuffer *)&v25, a4);
    if (v20 == 0x101000100)
    {
LABEL_33:
      icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator((icu::FCDUTF16CollationIterator *)&v25);
      return;
    }
    v21 = v20;
    while (1)
    {
      v22 = *((_DWORD *)a3 + 2);
      v23 = v22 + 1;
      if (v22 >= -1 && *((_DWORD *)a3 + 3) > v22)
        goto LABEL_31;
      if (icu::UVector64::expandCapacity(a3, v23, a4))
        break;
LABEL_32:
      v21 = sub_18BC8F6EC((icu::CollationIterator::CEBuffer *)&v25, a4);
      if (v21 == 0x101000100)
        goto LABEL_33;
    }
    v22 = *((_DWORD *)a3 + 2);
    v23 = v22 + 1;
LABEL_31:
    *(_QWORD *)(*((_QWORD *)a3 + 3) + 8 * v22) = v21;
    *((_DWORD *)a3 + 2) = v23;
    goto LABEL_32;
  }
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v12 = **((_QWORD **)this + 1);
  v27 = (_QWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)&v28 + 1) = (char *)&v29 + 8;
  LODWORD(v29) = 40;
  DWORD2(v49) = 0;
  DWORD2(v50) = -1;
  BYTE12(v50) = (v11 & 2) != 0;
  v25 = off_1E2268460;
  v26 = v12;
  *(_QWORD *)&v51 = v7;
  *((_QWORD *)&v51 + 1) = v7;
  *(_QWORD *)&v52 = v10;
  v13 = sub_18BC8F6EC((icu::CollationIterator::CEBuffer *)&v25, a4);
  if (v13 != 0x101000100)
  {
    v14 = v13;
    while (1)
    {
      v15 = *((_DWORD *)a3 + 2);
      v16 = v15 + 1;
      if (v15 >= -1 && *((_DWORD *)a3 + 3) > v15)
        goto LABEL_19;
      if (icu::UVector64::expandCapacity(a3, v16, a4))
        break;
LABEL_20:
      v14 = sub_18BC8F6EC((icu::CollationIterator::CEBuffer *)&v25, a4);
      if (v14 == 0x101000100)
        goto LABEL_21;
    }
    v15 = *((_DWORD *)a3 + 2);
    v16 = v15 + 1;
LABEL_19:
    *(_QWORD *)(*((_QWORD *)a3 + 3) + 8 * v15) = v14;
    *((_DWORD *)a3 + 2) = v16;
    goto LABEL_20;
  }
LABEL_21:
  icu::UTF16CollationIterator::~UTF16CollationIterator((icu::UTF16CollationIterator *)&v25);
}

uint64_t icu::RuleBasedCollator::internalGetShortDefinitionString(icu::RuleBasedCollator *this, const char *a2, char *a3, int a4, UErrorCode *a5)
{
  uint64_t v5;
  const char *v10;
  int FunctionalEquivalent;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int Language;
  int v22;
  char *v23;
  int v24;
  int Country;
  int v26;
  int Variant;
  int Script;
  _QWORD v29[2];
  void *v30[7];
  int v31[2];
  _OWORD v32[6];
  int v33;
  void *v34[8];
  char __s[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[30];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 > 0)
    return 0;
  v10 = a2;
  if (a3)
  {
    if ((a4 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_10:
    v5 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }
  if (a4)
    goto LABEL_10;
LABEL_6:
  if (!a2)
  {
    if (*((_BYTE *)this + 256))
    {
      v10 = 0;
    }
    else if (**((_BYTE **)this + 10))
    {
      v10 = (const char *)*((_QWORD *)this + 10);
    }
    else
    {
      v10 = "root";
    }
  }
  v42 = 0u;
  memset(v43, 0, sizeof(v43));
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)__s = 0u;
  FunctionalEquivalent = ucol_getFunctionalEquivalent((uint64_t)__s, 157, (uint64_t)"collation", (uint64_t)v10, 0, (int *)a5);
  if (*(int *)a5 > 0)
    return 0;
  if (FunctionalEquivalent)
    __s[FunctionalEquivalent] = 0;
  else
    strcpy(__s, "root");
  memset(&v34[1], 0, 56);
  v34[0] = (char *)&v34[1] + 5;
  LODWORD(v34[1]) = 40;
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v13 = *((_DWORD *)this + 66);
  if ((v13 & 2) != 0)
  {
    if ((*(_DWORD *)(*((_QWORD *)this + 2) + 24) & 0xC) != 0)
      v14 = 20;
    else
      v14 = 21;
    sub_18BD6F0FC((icu::CharString *)v34, 65, v14, a5);
    v13 = *((_DWORD *)this + 66);
    if ((v13 & 4) == 0)
    {
LABEL_20:
      if ((v13 & 0x80) == 0)
        goto LABEL_21;
      goto LABEL_37;
    }
  }
  else if ((v13 & 4) == 0)
  {
    goto LABEL_20;
  }
  if (*(int *)a5 <= 0)
  {
    v16 = *(_DWORD *)(*((_QWORD *)this + 2) + 24);
    if ((v16 & 0x300) == 0x200)
      v17 = 24;
    else
      v17 = 25;
    if ((v16 & 0x300) != 0)
      v15 = v17;
    else
      v15 = 16;
  }
  else
  {
    v15 = -1;
  }
  sub_18BD6F0FC((icu::CharString *)v34, 67, v15, a5);
  v13 = *((_DWORD *)this + 66);
  if ((v13 & 0x80) == 0)
  {
LABEL_21:
    if ((v13 & 8) == 0)
      goto LABEL_22;
LABEL_43:
    if (*(int *)a5 <= 0)
    {
      if ((*(_BYTE *)(*((_QWORD *)this + 2) + 25) & 4) != 0)
        v19 = 17;
      else
        v19 = 16;
    }
    else
    {
      v19 = -1;
    }
    sub_18BD6F0FC((icu::CharString *)v34, 69, v19, a5);
    if ((*((_DWORD *)this + 66) & 1) == 0)
      goto LABEL_55;
    goto LABEL_49;
  }
LABEL_37:
  if (*(int *)a5 <= 0)
  {
    if ((*(_BYTE *)(*((_QWORD *)this + 2) + 24) & 2) != 0)
      v18 = 17;
    else
      v18 = 16;
  }
  else
  {
    v18 = -1;
  }
  sub_18BD6F0FC((icu::CharString *)v34, 68, v18, a5);
  v13 = *((_DWORD *)this + 66);
  if ((v13 & 8) != 0)
    goto LABEL_43;
LABEL_22:
  if ((v13 & 1) != 0)
  {
LABEL_49:
    if (*(int *)a5 <= 0)
    {
      if ((*(_BYTE *)(*((_QWORD *)this + 2) + 25) & 8) != 0)
        v20 = 17;
      else
        v20 = 16;
    }
    else
    {
      v20 = -1;
    }
    sub_18BD6F0FC((icu::CharString *)v34, 70, v20, a5);
  }
LABEL_55:
  memset(&v30[1], 0, 48);
  *(_QWORD *)v31 = 0;
  v29[1] = 0;
  v30[0] = (char *)&v30[1] + 5;
  LODWORD(v30[1]) = 40;
  v29[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v29, (uint64_t)v30);
  ulocimp_getKeywordValue(__s, "collation", (uint64_t)v29, (int *)a5);
  sub_18BD6F184((icu::CharString *)v34, 75, (char *)v30[0], v31[0], a5);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v29);
  if (BYTE4(v30[1]))
    uprv_free(v30[0]);
  Language = uloc_getLanguage((uint64_t)__s, (char *)v32, 100, (int *)a5);
  if (Language)
  {
    v22 = Language;
    v23 = (char *)v32;
  }
  else
  {
    v23 = "root";
    v22 = 4;
  }
  sub_18BD6F184((icu::CharString *)v34, 76, v23, v22, a5);
  if ((*((_BYTE *)this + 264) & 0x10) != 0)
  {
    if (*(int *)a5 <= 0)
      v24 = *(_DWORD *)(*((_QWORD *)this + 2) + 24) & 1 | 0x10;
    else
      v24 = -1;
    sub_18BD6F0FC((icu::CharString *)v34, 78, v24, a5);
  }
  Country = uloc_getCountry((uint64_t)__s, (char *)v32, 100, (int *)a5);
  sub_18BD6F184((icu::CharString *)v34, 82, (char *)v32, Country, a5);
  if ((*((_BYTE *)this + 264) & 0x20) != 0)
  {
    if (*(int *)a5 <= 0)
      v26 = *(int *)(*((_QWORD *)this + 2) + 24) >> 12;
    else
      v26 = -1;
    sub_18BD6F0FC((icu::CharString *)v34, 83, v26, a5);
  }
  Variant = uloc_getVariant(__s, (char *)v32, 100, (int *)a5);
  sub_18BD6F184((icu::CharString *)v34, 86, (char *)v32, Variant, a5);
  Script = uloc_getScript((uint64_t)__s, (char *)v32, 100, (int *)a5);
  sub_18BD6F184((icu::CharString *)v34, 90, (char *)v32, Script, a5);
  if (*(int *)a5 <= 0)
    v5 = icu::CharString::extract((char **)v34, a3, a4, a5);
  else
    v5 = 0;
  if (BYTE4(v34[1]))
    uprv_free(v34[0]);
  return v5;
}

icu::CharString *sub_18BD6F0FC(icu::CharString *this, char a2, int a3, UErrorCode *a4)
{
  icu::CharString *v7;

  if (*(int *)a4 <= 0)
  {
    v7 = this;
    if (*((_DWORD *)this + 14))
      icu::CharString::append(this, 95, a4);
    icu::CharString::append(v7, a2, a4);
    return icu::CharString::append(v7, a1234IxoSnLu[a3], a4);
  }
  return this;
}

icu::CharString *sub_18BD6F184(icu::CharString *this, char a2, char *a3, int a4, UErrorCode *a5)
{
  uint64_t v6;
  icu::CharString *v9;
  int v10;
  char v11;

  if (a4 && *(int *)a5 <= 0)
  {
    LODWORD(v6) = a4;
    v9 = this;
    if (*((_DWORD *)this + 14))
      icu::CharString::append(this, 95, a5);
    this = icu::CharString::append(v9, a2, a5);
    if ((int)v6 >= 1)
    {
      v6 = v6;
      do
      {
        v10 = *a3++;
        v11 = uprv_toupper(v10);
        this = icu::CharString::append(v9, v11, a5);
        --v6;
      }
      while (v6);
    }
  }
  return this;
}

uint64_t icu::RuleBasedCollator::isUnsafe(icu::RuleBasedCollator *this, int a2)
{
  return sub_18BCA0F30(*((_QWORD *)this + 1), a2, (*(unsigned __int8 *)(*((_QWORD *)this + 2) + 24) >> 1) & 1);
}

void **icu::RuleBasedCollator::computeMaxExpansions(icu::CollationElementIterator **this, const icu::CollationTailoring *a2, UErrorCode *a3)
{
  void **result;

  result = icu::CollationElementIterator::computeMaxExpansions(this[3], a2, a3);
  this[48] = (icu::CollationElementIterator *)result;
  return result;
}

BOOL icu::RuleBasedCollator::initMaxExpansions(icu::RuleBasedCollator *this, UErrorCode *a2)
{
  uint64_t v3;
  unsigned int v4;
  UErrorCode *v5;
  UErrorCode v6;

  if (*(int *)a2 <= 0)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = atomic_load((unsigned int *)(v3 + 392));
    if (v4 == 2 || !icu::umtx_initImplPreInit((unsigned int *)(v3 + 392)))
    {
      v6 = *(_DWORD *)(v3 + 396);
      if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
        *a2 = v6;
    }
    else
    {
      *(_QWORD *)(v3 + 384) = icu::CollationElementIterator::computeMaxExpansions(*(icu::CollationElementIterator **)(v3 + 24), (const icu::CollationData *)a2, v5);
      *(UErrorCode *)(v3 + 396) = *a2;
      icu::umtx_initImplPostInit((unsigned int *)(v3 + 392));
    }
  }
  return *a2 < U_ILLEGAL_ARGUMENT_ERROR;
}

icu::CollationElementIterator *icu::RuleBasedCollator::createCollationElementIterator(icu::RuleBasedCollator *this, UChar **a2)
{
  unint64_t v4;
  uint64_t *v5;
  icu::CollationElementIterator *result;
  void *v7;
  UErrorCode v8;

  v8 = U_ZERO_ERROR;
  if (!icu::RuleBasedCollator::initMaxExpansions(this, &v8))
    return 0;
  result = (icu::CollationElementIterator *)icu::UMemory::operator new(v5, (icu::UMemory *)0x68, v4);
  if (result)
  {
    result = (icu::CollationElementIterator *)icu::CollationElementIterator::CollationElementIterator((uint64_t)result, a2, (uint64_t)this, &v8);
    if (v8 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::CollationElementIterator::~CollationElementIterator(result);
      icu::UMemory::operator delete(v7);
      return 0;
    }
  }
  return result;
}

icu::CollationElementIterator *icu::RuleBasedCollator::createCollationElementIterator(icu::RuleBasedCollator *this, const icu::CharacterIterator *a2)
{
  unint64_t v4;
  uint64_t *v5;
  icu::CollationElementIterator *result;
  void *v7;
  UErrorCode v8;

  v8 = U_ZERO_ERROR;
  if (!icu::RuleBasedCollator::initMaxExpansions(this, &v8))
    return 0;
  result = (icu::CollationElementIterator *)icu::UMemory::operator new(v5, (icu::UMemory *)0x68, v4);
  if (result)
  {
    result = (icu::CollationElementIterator *)icu::CollationElementIterator::CollationElementIterator(result, a2, this, &v8);
    if (v8 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      icu::CollationElementIterator::~CollationElementIterator(result);
      icu::UMemory::operator delete(v7);
      return 0;
    }
  }
  return result;
}

uint64_t icu::RuleBasedCollator::getMaxExpansion(icu::RuleBasedCollator *this, unsigned int a2)
{
  UErrorCode v5;

  v5 = U_ZERO_ERROR;
  icu::RuleBasedCollator::initMaxExpansions(this, &v5);
  return icu::CollationElementIterator::getMaxExpansion(*(_QWORD *)(*((_QWORD *)this + 3) + 384), a2);
}

void sub_18BD6F40C(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD6F420(uint64_t a1)
{
  unsigned __int16 *v1;
  unsigned __int16 *v2;
  uint64_t result;
  unsigned __int16 *v5;
  BOOL v6;
  int v8;

  v1 = *(unsigned __int16 **)(a1 + 32);
  v2 = *(unsigned __int16 **)(a1 + 40);
  if (v1 == v2)
    return 0xFFFFFFFFLL;
  v5 = v1 + 1;
  result = *v1;
  *(_QWORD *)(a1 + 32) = v1 + 1;
  if (v2)
    v6 = 0;
  else
    v6 = (_DWORD)result == 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = 0;
    return 0xFFFFFFFFLL;
  }
  if ((result & 0xFC00) == 0xD800 && v5 != v2)
  {
    v8 = *v5;
    if ((v8 & 0xFC00) == 0xDC00)
    {
      *(_QWORD *)(a1 + 32) = v1 + 2;
      return (v8 + ((_DWORD)result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t sub_18BD6F498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(a1 + 24);
  if ((v1 & 0x80000000) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v1 == *(_DWORD *)(a1 + 28))
  {
    *(_DWORD *)(a1 + 24) = -1;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1 + 1;
  v4 = *(unsigned __int16 *)(v3 + 2 * v1);
  if ((v4 & 0xFC00) == 0xD800)
  {
    *(_DWORD *)(a1 + 24) = v1 + 2;
    return *(unsigned __int16 *)(v3 + 2 * (v1 + 1)) + ((_DWORD)v4 << 10) - 56613888;
  }
  return v4;
}

uint64_t sub_18BD6F504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _WORD *Decomposition;

  v3 = a3;
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) != 0)
  {
    Decomposition = icu::Normalizer2Impl::getDecomposition(a2, a3, (_WORD *)(a1 + 16), (int *)(a1 + 28));
    *(_QWORD *)(a1 + 8) = Decomposition;
    if (Decomposition)
    {
      *(_DWORD *)(a1 + 24) = 1;
      v3 = (unsigned __int16)*Decomposition;
      if ((v3 & 0xFC00) == 0xD800)
      {
        *(_DWORD *)(a1 + 24) = 2;
        return (unsigned __int16)Decomposition[1] + ((_DWORD)v3 << 10) - 56613888;
      }
    }
  }
  return v3;
}

void sub_18BD6F588(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2266070;
  icu::UnicodeString::~UnicodeString(off_1E2266070, (icu::UnicodeString *)(a1 + 48));
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD6F5BC(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD6F5D0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v1 = *(_DWORD *)(a1 + 44);
  v2 = *(int *)(a1 + 40);
  if ((_DWORD)v2 != v1)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if ((v1 & 0x80000000) == 0 || *(_BYTE *)(v3 + v2))
    {
      v6 = v2 + 1;
      *(_DWORD *)(a1 + 40) = v2 + 1;
      v7 = *(char *)(v3 + v2);
      v4 = *(unsigned __int8 *)(v3 + v2);
      if ((v7 & 0x80000000) == 0)
        return v4;
      if ((_DWORD)v6 != v1)
      {
        if (v4 < 0xE0)
        {
          if (v4 < 0xC2)
            return 65533;
          v10 = v4 & 0x1F;
        }
        else
        {
          if (v4 > 0xEF)
          {
            if (v4 > 0xF4)
              return 65533;
            v12 = v4 - 240;
            v8 = *(unsigned __int8 *)(v3 + v6);
            if (((byte_18BE2A9A0[v8 >> 4] >> v12) & 1) == 0)
              return 65533;
            v6 = v2 + 2;
            *(_DWORD *)(a1 + 40) = v2 + 2;
            if ((_DWORD)v2 + 2 == v1)
              return 65533;
            v9 = *(unsigned __int8 *)(v3 + v6) ^ 0x80;
            if (v9 > 0x3F)
              return 65533;
            LODWORD(v8) = v8 & 0x3F | (v12 << 6);
          }
          else
          {
            v8 = v7 & 0xF;
            if (((a00000000000000[v8] >> (*(_BYTE *)(v3 + v6) >> 5)) & 1) == 0)
              return 65533;
            v9 = *(_BYTE *)(v3 + v6) & 0x3F;
          }
          LODWORD(v6) = v6 + 1;
          *(_DWORD *)(a1 + 40) = v6;
          if ((_DWORD)v6 == v1)
            return 65533;
          v10 = v9 | ((_DWORD)v8 << 6);
        }
        v11 = *(unsigned __int8 *)(v3 + (int)v6) ^ 0x80;
        if (v11 <= 0x3F)
        {
          v4 = v11 | (v10 << 6);
          *(_DWORD *)(a1 + 40) = v6 + 1;
          return v4;
        }
      }
      return 65533;
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18BD6F6EC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2266100;
  icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator((icu::FCDUTF8CollationIterator *)(a1 + 32));
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BD6F720(uint64_t a1)
{
  UErrorCode v2;

  v2 = U_ZERO_ERROR;
  return icu::FCDUTF8CollationIterator::nextCodePoint((icu::FCDUTF8CollationIterator *)(a1 + 32), &v2);
}

void sub_18BD6F748(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD6F75C(uint64_t a1)
{
  return uiter_next32(*(UCharIterator **)(a1 + 32));
}

void sub_18BD6F764(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2266190;
  icu::FCDUIterCollationIterator::~FCDUIterCollationIterator((icu::FCDUIterCollationIterator *)(a1 + 32));
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t *sub_18BD6F798(uint64_t a1)
{
  UErrorCode v2;

  v2 = U_ZERO_ERROR;
  return icu::FCDUIterCollationIterator::nextCodePoint((icu::FCDUIterCollationIterator *)(a1 + 32), &v2);
}

void sub_18BD6F7C0(icu::ByteSink *a1)
{
  void *v1;

  icu::ByteSink::~ByteSink(a1);
  icu::UMemory::operator delete(v1);
}

_DWORD *sub_18BD6F7D4(_DWORD *result, const void *a2, uint64_t a3, int a4)
{
  size_t v4;

  v4 = (result[4] - a4);
  if ((int)v4 >= 1)
    return memcpy((void *)(*((_QWORD *)result + 1) + a4), a2, v4);
  return result;
}

uint64_t sub_18BD6F7F4()
{
  return 0;
}

void sub_18BD6F7FC(icu::CollationKeys::LevelCallback *a1)
{
  void *v1;

  icu::CollationKeys::LevelCallback::~LevelCallback(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD6F810(uint64_t a1, int a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  BOOL v5;
  int v6;
  int v7;

  v2 = *(_DWORD **)(a1 + 8);
  v4 = v2[4];
  v3 = v2[5];
  v5 = __OFSUB__(v4, v3);
  v6 = v4 - v3;
  if (v6 < 0 != v5)
    return 0;
  v7 = v6 + v2[6];
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = v7;
  return 1;
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createSuperscriptInstance@<X0>(icu::ScientificNumberFormatter *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  Style *v6;
  UErrorCode *v7;

  v6 = (Style *)icu::UMemory::operator new(a3, (icu::UMemory *)8, (unint64_t)a2);
  if (v6)
    *(_QWORD *)v6 = &off_1E2266308;
  return icu::ScientificNumberFormatter::createInstance(this, v6, a2, v7);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createInstance(icu::ScientificNumberFormatter *this, Style *a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t *v6;
  icu::ScientificNumberFormatter *v8;
  icu::ScientificNumberFormatter *result;

  v6 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v6 > 0)
  {
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = (icu::ScientificNumberFormatter *)icu::UMemory::operator new(v6, (icu::UMemory *)0x58, (unint64_t)a2);
  if (!v8)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    if (!a2)
    {
LABEL_4:
      if (!this)
        return 0;
      goto LABEL_8;
    }
LABEL_3:
    (*(void (**)(Style *))(*(_QWORD *)a2 + 8))(a2);
    goto LABEL_4;
  }
  result = icu::ScientificNumberFormatter::ScientificNumberFormatter(v8, this, a2, a3);
  this = result;
  if (*(int *)a3 < 1)
    return result;
LABEL_8:
  (*(void (**)(icu::ScientificNumberFormatter *))(*(_QWORD *)this + 8))(this);
  return 0;
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createSuperscriptInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  icu::DecimalFormat *ScientificInstance;
  unint64_t v5;
  uint64_t *v6;
  Style *v7;
  UErrorCode *v8;

  ScientificInstance = icu::NumberFormat::createScientificInstance(this, a2, a3);
  v7 = (Style *)icu::UMemory::operator new(v6, (icu::UMemory *)8, v5);
  if (v7)
    *(_QWORD *)v7 = &off_1E2266308;
  return icu::ScientificNumberFormatter::createInstance(ScientificInstance, v7, a2, v8);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createMarkupInstance@<X0>(icu::ScientificNumberFormatter *this@<X0>, UChar **a2@<X1>, UChar **a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v10;
  UErrorCode *v11;
  Style *v12;

  v10 = icu::UMemory::operator new(a5, (icu::UMemory *)0x88, (unint64_t)a2);
  v12 = (Style *)v10;
  if (v10)
  {
    *v10 = (uint64_t)off_1E22662A0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v10 + 1), a2);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v12 + 72), a3);
  }
  return icu::ScientificNumberFormatter::createInstance(this, v12, a4, v11);
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::createMarkupInstance(char **this, UChar **a2, UErrorCode *a3, UErrorCode *a4, UErrorCode *a5)
{
  icu::DecimalFormat *ScientificInstance;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  UErrorCode *v12;
  Style *v13;

  ScientificInstance = icu::NumberFormat::createScientificInstance(this, a4, a3);
  v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x88, v9);
  v13 = (Style *)v11;
  if (v11)
  {
    *v11 = (uint64_t)off_1E22662A0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v11 + 1), a2);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v13 + 72), (UChar **)a3);
  }
  return icu::ScientificNumberFormatter::createInstance(ScientificInstance, v13, a4, v12);
}

_QWORD *icu::ScientificNumberFormatter::SuperscriptStyle::clone(icu::ScientificNumberFormatter::SuperscriptStyle *this, unint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)8, a2);
  if (result)
    *result = &off_1E2266308;
  return result;
}

icu::UnicodeString *icu::ScientificNumberFormatter::SuperscriptStyle::format(icu::ScientificNumberFormatter::SuperscriptStyle *this, const icu::UnicodeString *a2, icu::FieldPositionIterator *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  icu::UnicodeSet *v23;
  __int16 v24;
  icu::UnicodeSet *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  void (**v30)(icu::FieldPosition *__hidden);
  uint64_t v31;
  uint64_t v32;
  __int16 v33;

  if (*(int *)a6 > 0)
    return a5;
  v32 = 0;
  v30 = off_1E225EF78;
  v31 = 0xFFFFFFFFLL;
  if (!icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v30))
  {
    LODWORD(v12) = 0;
LABEL_28:
    v26 = *((unsigned __int16 *)a2 + 4);
    v27 = (__int16)v26;
    v28 = v26 >> 5;
    if (v27 < 0)
      v28 = *((_DWORD *)a2 + 3);
    icu::UnicodeString::doAppend((uint64_t)a5, a2, v12, v28 - v12);
    goto LABEL_32;
  }
  v11 = 0;
  while ((_DWORD)v31 != 5)
  {
    if ((_DWORD)v31 == 4)
    {
      v21 = HIDWORD(v31);
      v12 = v32;
      v22 = icu::UnicodeString::char32At((uint64_t *)4, a2, SHIDWORD(v31));
      v23 = (icu::UnicodeSet *)icu::unisets::get(11);
      if (icu::UnicodeSet::contains(v23, v22))
      {
        icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v21 - v11));
        v24 = 8315;
      }
      else
      {
        v25 = (icu::UnicodeSet *)icu::unisets::get(12);
        if (!icu::UnicodeSet::contains(v25, v22))
          goto LABEL_31;
        icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v21 - v11));
        v24 = 8314;
      }
      v33 = v24;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v33, 0, 1);
    }
    else if ((_DWORD)v31 == 3)
    {
      icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v31) - v11));
      v12 = v32;
      v13 = *((unsigned __int16 *)a4 + 4);
      v14 = (__int16)v13;
      v15 = v13 >> 5;
      if (v14 >= 0)
        v16 = v15;
      else
        v16 = *((unsigned int *)a4 + 3);
      icu::UnicodeString::doAppend((uint64_t)a5, a4, 0, v16);
    }
    else
    {
      v12 = v11;
    }
LABEL_25:
    v11 = v12;
    if (!icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v30))
      goto LABEL_28;
  }
  icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v31) - v11));
  v17 = *(unsigned int *)a6;
  if ((int)v17 > 0)
    goto LABEL_32;
  v18 = HIDWORD(v31);
  v12 = v32;
  if (SHIDWORD(v31) >= (int)v32)
    goto LABEL_25;
  while (1)
  {
    v19 = icu::UnicodeString::char32At((uint64_t *)v17, a2, v18);
    v20 = u_charDigitValue(v19);
    if ((v20 & 0x80000000) != 0)
      break;
    v33 = word_18BE2ABFE[v20];
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v33, 0, 1);
    if (v19 < 0x10000)
      v17 = 1;
    else
      v17 = 2;
    v18 += v17;
    if (v18 >= (int)v12)
    {
      v12 = v32;
      goto LABEL_25;
    }
  }
LABEL_31:
  *a6 = U_INVALID_CHAR_FOUND;
LABEL_32:
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v30);
  return a5;
}

uint64_t *icu::ScientificNumberFormatter::MarkupStyle::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x88, a2);
  v5 = v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E22662A0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 1), this + 1);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v5 + 9), this + 9);
  }
  return v5;
}

icu::UnicodeString *icu::ScientificNumberFormatter::MarkupStyle::format(icu::ScientificNumberFormatter::MarkupStyle *this, const icu::UnicodeString *a2, icu::FieldPositionIterator *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  int v11;
  char *v12;
  char *v13;
  const icu::UnicodeString *v14;
  char *v15;
  char *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int *v22;
  const icu::UnicodeString *v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  icu::UnicodeString *v33;
  void (**v34)(icu::FieldPosition *__hidden);
  uint64_t v35;
  uint64_t v36;

  if (*(int *)a6 <= 0)
  {
    v36 = 0;
    v34 = off_1E225EF78;
    v35 = 0xFFFFFFFFLL;
    v11 = 0;
    if (icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v34))
    {
      v33 = (icu::ScientificNumberFormatter::MarkupStyle *)((char *)this + 72);
      v12 = (char *)this + 80;
      v13 = (char *)this + 84;
      v14 = (icu::ScientificNumberFormatter::MarkupStyle *)((char *)this + 8);
      v15 = (char *)this + 16;
      v16 = (char *)this + 20;
      while ((_DWORD)v35 != 5)
      {
        if ((_DWORD)v35 == 3)
        {
          icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (HIDWORD(v35) - v11));
          v11 = v36;
          v17 = *((unsigned __int16 *)a4 + 4);
          v18 = (__int16)v17;
          v19 = v17 >> 5;
          if (v18 >= 0)
            v20 = v19;
          else
            v20 = *((unsigned int *)a4 + 3);
          icu::UnicodeString::doAppend((uint64_t)a5, a4, 0, v20);
          v21 = (unsigned __int16 *)v15;
          v22 = (unsigned int *)v16;
          v23 = v14;
          goto LABEL_11;
        }
LABEL_15:
        if (!icu::FieldPositionIterator::next(a3, (icu::FieldPosition *)&v34))
          goto LABEL_16;
      }
      icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, (v36 - v11));
      v11 = v36;
      v21 = (unsigned __int16 *)v12;
      v22 = (unsigned int *)v13;
      v23 = v33;
LABEL_11:
      v24 = *v21;
      v25 = (__int16)v24;
      v26 = v24 >> 5;
      v27 = *v22;
      if (v25 >= 0)
        v28 = v26;
      else
        v28 = v27;
      icu::UnicodeString::doAppend((uint64_t)a5, v23, 0, v28);
      goto LABEL_15;
    }
LABEL_16:
    v29 = *((unsigned __int16 *)a2 + 4);
    v30 = (__int16)v29;
    v31 = v29 >> 5;
    if (v30 < 0)
      v31 = *((_DWORD *)a2 + 3);
    icu::UnicodeString::doAppend((uint64_t)a5, a2, v11, v31 - v11);
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v34);
  }
  return a5;
}

icu::ScientificNumberFormatter *icu::ScientificNumberFormatter::ScientificNumberFormatter(icu::ScientificNumberFormatter *this, icu::DecimalFormat *a2, Style *a3, UErrorCode *a4)
{
  const icu::DecimalFormatSymbols *v5;
  icu::ScientificNumberFormatter *v7;
  icu::UnicodeString *v8;

  *(_QWORD *)this = off_1E2266278;
  *((_QWORD *)this + 1) = off_1E2256B38;
  v5 = (icu::ScientificNumberFormatter *)((char *)this + 8);
  *((_WORD *)this + 8) = 2;
  *((_QWORD *)this + 9) = a2;
  *((_QWORD *)this + 10) = a3;
  if (*(int *)a4 <= 0)
  {
    if (a2
      && a3
      && (v7 = (icu::ScientificNumberFormatter *)(*(uint64_t (**)(icu::DecimalFormat *))(*(_QWORD *)a2 + 320))(a2)) != 0)
    {
      icu::ScientificNumberFormatter::getPreExponent(v7, v5, v8);
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::ScientificNumberFormatter::getPreExponent(icu::ScientificNumberFormatter *this, const icu::DecimalFormatSymbols *a2, icu::UnicodeString *a3)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;

  v5 = *((unsigned __int16 *)this + 872);
  v6 = (__int16)v5;
  v7 = v5 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *((unsigned int *)this + 437);
  icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 1736), 0, v8);
  v9 = *((unsigned __int16 *)this + 584);
  v10 = (__int16)v9;
  v11 = v9 >> 5;
  if (v10 >= 0)
    v12 = v11;
  else
    v12 = *((unsigned int *)this + 293);
  icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 1160), 0, v12);
  v13 = *((unsigned __int16 *)this + 136);
  v14 = (__int16)v13;
  v15 = v13 >> 5;
  if (v14 >= 0)
    v16 = v15;
  else
    v16 = *((unsigned int *)this + 69);
  return icu::UnicodeString::doAppend((uint64_t)a2, (icu::ScientificNumberFormatter *)((char *)this + 264), 0, v16);
}

_QWORD *icu::ScientificNumberFormatter::ScientificNumberFormatter(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1E2266278;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 1), (UChar **)(a2 + 8));
  a1[9] = 0;
  a1[10] = 0;
  a1[9] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 32))(*(_QWORD *)(a2 + 72));
  a1[10] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 80) + 24))(*(_QWORD *)(a2 + 80));
  return a1;
}

{
  *a1 = off_1E2266278;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 1), (UChar **)(a2 + 8));
  a1[9] = 0;
  a1[10] = 0;
  a1[9] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 32))(*(_QWORD *)(a2 + 72));
  a1[10] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 80) + 24))(*(_QWORD *)(a2 + 80));
  return a1;
}

void icu::ScientificNumberFormatter::~ScientificNumberFormatter(icu::ScientificNumberFormatter *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2266278;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeString::~UnicodeString((icu::ScientificNumberFormatter *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::ScientificNumberFormatter::~ScientificNumberFormatter(this);
  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *icu::ScientificNumberFormatter::format(icu::ScientificNumberFormatter *this, const icu::Formattable *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  void *v8;
  _QWORD v10[3];
  void (**v11)(icu::UnicodeString *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    v12 = 0u;
    v13 = 0u;
    v15 = 0;
    v14 = 0u;
    v11 = off_1E2256B38;
    LOWORD(v12) = 2;
    memset(v10, 0, sizeof(v10));
    icu::FieldPositionIterator::FieldPositionIterator((uint64_t)v10);
    (*(void (**)(_QWORD, const icu::Formattable *, void (***)(icu::UnicodeString *__hidden), _QWORD *, UErrorCode *))(**((_QWORD **)this + 9) + 48))(*((_QWORD *)this + 9), a2, &v11, v10, a4);
    a3 = (icu::UnicodeString *)(*(uint64_t (**)(_QWORD, void (***)(icu::UnicodeString *__hidden), _QWORD *, char *, icu::UnicodeString *, UErrorCode *))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10), &v11, v10, (char *)this + 8, a3, a4);
    icu::FieldPositionIterator::~FieldPositionIterator((icu::FieldPositionIterator *)v10);
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11);
  }
  return a3;
}

void sub_18BD70278(uint64_t a1)
{
  icu::UnicodeString *v2;

  *(_QWORD *)a1 = off_1E22662A0;
  v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v2);
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BD702B8(uint64_t a1)
{
  icu::UnicodeString *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_1E22662A0;
  v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString(off_1E22662A0, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v3, v2);
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v4);
}

void sub_18BD70300(icu::UObject *a1)
{
  void *v1;

  icu::UObject::~UObject(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::ScriptSet::ScriptSet(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

__n128 icu::ScriptSet::ScriptSet(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *(__n128 *)this = result;
  return result;
}

{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)((char *)a2 + 12);
  *(__n128 *)this = result;
  return result;
}

__n128 icu::ScriptSet::operator=(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

BOOL icu::ScriptSet::operator==(_DWORD *a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;

  if (*a1 != *a2)
    return 0;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 6)
      break;
    v4 = a1[v2 + 1];
    v5 = a2[++v2];
  }
  while (v4 == v5);
  return v3 > 5;
}

uint64_t icu::ScriptSet::test(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t result;

  if (*a3 > 0)
    return 0;
  if (a2 < 0xE0)
    return (*(_DWORD *)(a1 + 4 * (a2 >> 5)) >> a2) & 1;
  result = 0;
  *a3 = 1;
  return result;
}

uint64_t icu::ScriptSet::set(uint64_t result, unsigned int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2 < 0xE0)
      *(_DWORD *)(result + 4 * (a2 >> 5)) |= 1 << a2;
    else
      *a3 = 1;
  }
  return result;
}

uint64_t icu::ScriptSet::reset(uint64_t result, unsigned int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (a2 < 0xE0)
      *(_DWORD *)(result + 4 * (a2 >> 5)) &= ~(1 << a2);
    else
      *a3 = 1;
  }
  return result;
}

uint64_t icu::ScriptSet::Union(uint64_t this, const icu::ScriptSet *a2)
{
  uint64_t i;

  for (i = 0; i != 28; i += 4)
    *(_DWORD *)(this + i) |= *(_DWORD *)((char *)a2 + i);
  return this;
}

uint64_t icu::ScriptSet::intersect(uint64_t this, const icu::ScriptSet *a2)
{
  uint64_t i;

  for (i = 0; i != 28; i += 4)
    *(_DWORD *)(this + i) &= *(_DWORD *)((char *)a2 + i);
  return this;
}

uint64_t icu::ScriptSet::intersect(uint64_t result, unsigned int a2, int *a3)
{
  uint64_t v3;
  _QWORD v4[3];
  int v5;

  v5 = 0;
  v4[2] = 0;
  if (*a3 <= 0)
  {
    if (a2 < 0xE0)
    {
      v3 = 0;
      *((_DWORD *)v4 + (a2 >> 5)) |= 1 << a2;
      do
      {
        *(_DWORD *)(result + v3) &= *(_DWORD *)((char *)v4 + v3);
        v3 += 4;
      }
      while (v3 != 28);
    }
    else
    {
      *a3 = 1;
    }
  }
  return result;
}

BOOL icu::ScriptSet::intersects(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;

  if ((*(_DWORD *)a2 & *(_DWORD *)this) != 0)
    return 1;
  v3 = 0;
  do
  {
    v4 = v3;
    if (v3 == 6)
      break;
    v5 = *((_DWORD *)this + v3 + 1);
    v6 = *((_DWORD *)a2 + ++v3);
  }
  while ((v6 & v5) == 0);
  return v4 < 6;
}

BOOL icu::ScriptSet::contains(icu::ScriptSet *this, const icu::ScriptSet *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  _DWORD v8[8];

  v2 = 0;
  *(_OWORD *)&v8[3] = *(_OWORD *)((char *)this + 12);
  do
  {
    v8[v2] &= *(_DWORD *)((char *)a2 + v2 * 4);
    ++v2;
  }
  while (v2 != 7);
  if (v8[0] != *(_DWORD *)a2)
    return 0;
  v3 = 0;
  do
  {
    v4 = v3;
    if (v3 == 6)
      break;
    v5 = v8[v3 + 1];
    v6 = *((_DWORD *)a2 + ++v3);
  }
  while (v5 == v6);
  return v4 > 5;
}

uint64_t icu::ScriptSet::setAll(uint64_t this)
{
  *(_QWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = -1;
  *(_QWORD *)this = -1;
  *(_DWORD *)(this + 24) = -1;
  return this;
}

uint64_t icu::ScriptSet::resetAll(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t icu::ScriptSet::countMembers(icu::ScriptSet *this, int8x8_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = 0;
  do
  {
    if (*(_DWORD *)((char *)this + v2))
    {
      a2.i32[0] = *(_DWORD *)((char *)this + v2);
      a2 = vcnt_s8(a2);
      a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
      v3 = (a2.i32[0] + v3);
    }
    v2 += 4;
  }
  while (v2 != 28);
  return v3;
}

uint64_t icu::ScriptSet::hashCode(icu::ScriptSet *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  LODWORD(v2) = 0;
  do
  {
    v2 = *(_DWORD *)((char *)this + v1) ^ v2;
    v1 += 4;
  }
  while (v1 != 28);
  return v2;
}

uint64_t icu::ScriptSet::nextSetBit(icu::ScriptSet *this, uint64_t a2)
{
  int v3;

  if (a2 <= 0xDF)
  {
    v3 = 0;
    do
    {
      if (v3 <= 0)
      {
        if (a2 <= 0xDF)
        {
          if (((*((_DWORD *)this + (a2 >> 5)) >> a2) & 1) != 0)
            return a2;
        }
        else
        {
          v3 = 1;
        }
      }
      a2 = (a2 + 1);
    }
    while ((_DWORD)a2 != 224);
  }
  return 0xFFFFFFFFLL;
}

BOOL icu::ScriptSet::isEmpty(icu::ScriptSet *this)
{
  unint64_t v2;
  unint64_t v3;

  if (*(_DWORD *)this)
    return 0;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 6)
      break;
  }
  while (!*((_DWORD *)this + ++v2));
  return v3 > 5;
}

icu::UnicodeString *icu::ScriptSet::displayScripts(icu::ScriptSet *this, icu::UnicodeString *a2)
{
  unsigned int v4;
  const char *ShortName;
  uint64_t v7;
  void *v8;
  int v9;
  __int16 v10;
  unsigned __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v4 = 0;
  v13 = *MEMORY[0x1E0C80C00];
  do
  {
    if (((*((_DWORD *)this + (v4 >> 5)) >> v4) & 1) != 0)
    {
      while (1)
      {
        ShortName = uscript_getShortName(v4);
        icu::UnicodeString::UnicodeString(&v10, ShortName, 0xFFFFFFFFLL, 0);
        if ((v11 & 0x8000u) == 0)
          v7 = v11 >> 5;
        else
          v7 = v12;
        icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v10, 0, v7);
        icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v10);
        if (v4 > 0xDE)
          return a2;
        v9 = 0;
        ++v4;
        while (v9 > 0)
        {
LABEL_11:
          if (++v4 == 224)
            return a2;
        }
        if (v4 > 0xDF)
          break;
        if (((*((_DWORD *)this + (v4 >> 5)) >> v4) & 1) == 0)
          goto LABEL_11;
        v10 = 32;
        icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v10, 0, 1);
      }
      v9 = 1;
      goto LABEL_11;
    }
    ++v4;
  }
  while (v4 != 224);
  return a2;
}

icu::ScriptSet *icu::ScriptSet::parseScripts(icu::ScriptSet *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v5;
  int v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int PropertyValueEnum;
  __int16 v16;
  unsigned int v17;
  int v18;
  _OWORD v20[2];
  uint64_t v21;
  void (**v22)(icu::UnicodeString *__hidden);
  int32_t length[4];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  if (*(int *)a3 <= 0)
  {
    *(_OWORD *)length = 0u;
    v26 = 0;
    v25 = 0u;
    v24 = 0u;
    v22 = off_1E2256B38;
    LOWORD(length[0]) = 2;
    v5 = *((unsigned __int16 *)a2 + 4);
    v6 = (__int16)v5;
    LODWORD(v7) = v5 >> 5;
    if (v6 >= 0)
      v7 = v7;
    else
      v7 = *((unsigned int *)a2 + 3);
    if ((int)v7 >= 1)
    {
      v9 = 0;
      do
      {
        v10 = icu::UnicodeString::char32At((uint64_t *)v7, a2, v9);
        v9 = icu::UnicodeString::moveIndex32(a2, v9, 1);
        if (!u_isUWhiteSpace(v10))
        {
          icu::UnicodeString::append((uint64_t)&v22, v10);
          v11 = *((unsigned __int16 *)a2 + 4);
          v12 = (__int16)v11;
          v13 = v11 >> 5;
          if (v12 < 0)
            v13 = *((_DWORD *)a2 + 3);
          if (v9 < v13)
            goto LABEL_23;
        }
        if (SLOWORD(length[0]) < 0)
        {
          v14 = length[1];
          if (length[1] <= 0)
            goto LABEL_23;
          v21 = 0;
        }
        else
        {
          if (LOWORD(length[0]) < 0x20u)
            goto LABEL_23;
          v21 = 0;
          v14 = LOWORD(length[0]) >> 5;
        }
        memset(v20, 0, sizeof(v20));
        icu::UnicodeString::extract((uint64_t)&v22, 0, v14, (char *)v20, 39);
        HIBYTE(v21) = 0;
        PropertyValueEnum = u_getPropertyValueEnum(UCHAR_SCRIPT, (const char *)v20);
        if (PropertyValueEnum == -1)
          goto LABEL_28;
        v7 = *(unsigned int *)a3;
        if ((int)v7 > 0)
          break;
        if (PropertyValueEnum > 0xDF)
        {
LABEL_28:
          v7 = 1;
          *a3 = U_ILLEGAL_ARGUMENT_ERROR;
          break;
        }
        *((_DWORD *)this + (PropertyValueEnum >> 5)) |= 1 << PropertyValueEnum;
        if ((length[0] & 1) != 0)
          v16 = 2;
        else
          v16 = length[0] & 0x1F;
        LOWORD(length[0]) = v16;
LABEL_23:
        v17 = *((unsigned __int16 *)a2 + 4);
        v18 = (__int16)v17;
        LODWORD(v7) = v17 >> 5;
        if (v18 >= 0)
          v7 = v7;
        else
          v7 = *((unsigned int *)a2 + 3);
      }
      while (v9 < (int)v7);
    }
    icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)&v22);
  }
  return this;
}

void icu::ScriptSet::setScriptExtensions(icu::ScriptSet *this, unsigned int a2, UErrorCode *a3)
{
  int ScriptExtensions;
  UErrorCode v7;
  void *v8;
  void *v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  UErrorCode v15;
  void *v16;
  _OWORD v17[5];
  uint64_t v18;

  if (*(int *)a3 <= 0)
  {
    memset(v17, 0, sizeof(v17));
    v18 = 0;
    v16 = (char *)v17 + 8;
    LODWORD(v17[0]) = 20;
    v15 = U_ZERO_ERROR;
    ScriptExtensions = uscript_getScriptExtensions(a2, (int *)v17 + 2, 20, (int *)&v15);
    v7 = v15;
    if (v15 == U_BUFFER_OVERFLOW_ERROR)
    {
      while (ScriptExtensions >= 1)
      {
        v8 = uprv_malloc(4 * ScriptExtensions);
        if (!v8)
          break;
        v9 = v8;
        if (BYTE4(v17[0]))
          uprv_free(v16);
        v16 = v9;
        LODWORD(v17[0]) = ScriptExtensions;
        BYTE4(v17[0]) = 1;
        v15 = U_ZERO_ERROR;
        ScriptExtensions = uscript_getScriptExtensions(a2, (int *)v9, ScriptExtensions, (int *)&v15);
        v7 = v15;
        if (v15 != U_BUFFER_OVERFLOW_ERROR)
          goto LABEL_8;
      }
      v7 = U_MEMORY_ALLOCATION_ERROR;
    }
    else
    {
LABEL_8:
      if (v7 <= U_ZERO_ERROR)
      {
        if (ScriptExtensions >= 1)
        {
          v10 = *a3;
          v11 = (unsigned int *)v16;
          v12 = ScriptExtensions;
          while (v10 <= 0)
          {
            v14 = *v11++;
            v13 = v14;
            if (v14 >= 0xE0)
            {
              v7 = U_ILLEGAL_ARGUMENT_ERROR;
              goto LABEL_16;
            }
            *(_DWORD *)((char *)this + ((v13 >> 3) & 0x1FFFFFFC)) |= 1 << v13;
            if (!--v12)
              goto LABEL_17;
          }
        }
        goto LABEL_17;
      }
    }
LABEL_16:
    *a3 = v7;
LABEL_17:
    if (BYTE4(v17[0]))
      uprv_free(v16);
  }
}

BOOL uhash_equalsScriptSet(_DWORD *a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;

  if (*a1 != *a2)
    return 0;
  v2 = 0;
  do
  {
    v3 = v2;
    if (v2 == 6)
      break;
    v4 = a1[v2 + 1];
    v5 = a2[++v2];
  }
  while (v4 == v5);
  return v3 > 5;
}

uint64_t uhash_compareScriptSet(uint64_t a1, uint64_t a2, int8x8_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v3 = 0;
  v4 = 0;
  do
  {
    if (*(_DWORD *)(a1 + v3))
    {
      a3.i32[0] = *(_DWORD *)(a1 + v3);
      a3 = vcnt_s8(a3);
      a3.i16[0] = vaddlv_u8((uint8x8_t)a3);
      v4 += a3.i32[0];
    }
    v3 += 4;
  }
  while (v3 != 28);
  v5 = 0;
  v6 = 0;
  do
  {
    if (*(_DWORD *)(a2 + v5))
    {
      a3.i32[0] = *(_DWORD *)(a2 + v5);
      a3 = vcnt_s8(a3);
      a3.i16[0] = vaddlv_u8((uint8x8_t)a3);
      v6 += a3.i32[0];
    }
    v5 += 4;
  }
  while (v5 != 28);
  v7 = v4 - v6;
  if (!v7)
  {
    v8 = 0;
    while (((*(_DWORD *)(a1 + 4 * (v8 >> 5)) >> v8) & 1) == 0)
    {
      if (++v8 == 224)
      {
        v8 = -1;
        break;
      }
    }
    v7 = 0;
    while (((*(_DWORD *)(a2 + 4 * (v7 >> 5)) >> v7) & 1) == 0)
    {
      if (++v7 == 224)
      {
        v7 = -1;
        break;
      }
    }
    if (v8 >= 1 && v8 == v7)
    {
      while (v8 <= 0xDE)
      {
        v9 = 0;
        v7 = v8 + 1;
        v10 = v8 + 1;
        do
        {
          if (v9 <= 0)
          {
            if (v10 <= 0xDF)
            {
              if (((*(_DWORD *)(a1 + 4 * (v10 >> 5)) >> v10) & 1) != 0)
                goto LABEL_28;
            }
            else
            {
              v9 = 1;
            }
          }
          ++v10;
        }
        while (v10 != 224);
        v10 = -1;
LABEL_28:
        v11 = 0;
        do
        {
          if (v11 <= 0)
          {
            if (v7 <= 0xDF)
            {
              if (((*(_DWORD *)(a2 + 4 * (v7 >> 5)) >> v7) & 1) != 0)
                goto LABEL_35;
            }
            else
            {
              v11 = 1;
            }
          }
          ++v7;
        }
        while (v7 != 224);
        v7 = -1;
LABEL_35:
        if (v10 >= 1)
        {
          v8 = v10;
          if (v10 == v7)
            continue;
        }
        goto LABEL_40;
      }
      LOBYTE(v10) = -1;
      LOBYTE(v7) = -1;
    }
    else
    {
      LOBYTE(v10) = v8;
    }
LABEL_40:
    LOBYTE(v7) = v10 - v7;
  }
  return (char)v7;
}

uint64_t uhash_hashScriptSet(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  LODWORD(v2) = 0;
  do
  {
    v2 = *(_DWORD *)(a1 + v1) ^ v2;
    v1 += 4;
  }
  while (v1 != 28);
  return v2;
}

void uhash_deleteScriptSet(void *a1)
{
  if (a1)
    icu::UMemory::operator delete(a1);
}

uint64_t icu::SearchIterator::SearchIterator(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = off_1E2256B38;
  *(_QWORD *)a1 = off_1E2266370;
  *(_WORD *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
  v4 = uprv_malloc(0x30uLL);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 8);
  v4[3] = *(_QWORD *)(v5 + 24);
  *((_DWORD *)v4 + 3) = *(_DWORD *)(v5 + 12);
  v4[4] = *(_QWORD *)(v5 + 32);
  *v4 = *(_QWORD *)v5;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(v5 + 8);
  return a1;
}

void icu::SearchIterator::~SearchIterator(icu::SearchIterator *this)
{
  void (**v2)(icu::SearchIterator *__hidden);
  void *v3;

  v2 = off_1E2266370;
  *(_QWORD *)this = off_1E2266370;
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
    uprv_free(v3);
  icu::UnicodeString::~UnicodeString(v2, (icu::SearchIterator *)((char *)this + 24));
  icu::UObject::~UObject(this);
}

uint64_t icu::SearchIterator::setAttribute(uint64_t result, int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 == 2)
    {
      if ((a3 - 3) <= 1)
      {
        *(_WORD *)(*(_QWORD *)(result + 8) + 14) = a3;
        return result;
      }
      *(_WORD *)(*(_QWORD *)(result + 8) + 14) = 0;
    }
    else if (a2 == 1)
    {
      *(_BYTE *)(*(_QWORD *)(result + 8) + 13) = a3 == 1;
    }
    else if (a2)
    {
      *a4 = 1;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(result + 8) + 12) = a3 == 1;
    }
  }
  if (a3 == 5)
    *a4 = 1;
  return result;
}

uint64_t icu::SearchIterator::getAttribute(uint64_t a1, int a2)
{
  int v2;
  __int16 v3;

  switch(a2)
  {
    case 2:
      v3 = *(_WORD *)(*(_QWORD *)(a1 + 8) + 14);
      if (((v3 - 3) & 0xFFFE) != 0)
        return 2;
      return v3;
    case 1:
      v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 13);
      return v2 != 0;
    case 0:
      v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 12);
      return v2 != 0;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t icu::SearchIterator::getMatchedStart(icu::SearchIterator *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 32);
}

uint64_t icu::SearchIterator::getMatchedLength(icu::SearchIterator *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 36);
}

uint64_t icu::SearchIterator::getMatchedText(uint64_t this, icu::UnicodeString *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *(_QWORD *)(this + 8);
  v4 = *(unsigned int *)(v3 + 36);
  v5 = *(int *)(v3 + 32);
  if ((_DWORD)v5 == -1 || (_DWORD)v4 == 0)
  {
    if ((*((_WORD *)a2 + 4) & 1) != 0)
      v7 = 2;
    else
      v7 = *((_WORD *)a2 + 4) & 0x1F;
    *((_WORD *)a2 + 4) = v7;
  }
  else
  {
    v8 = *(_QWORD *)v3 + 2 * v5;
    icu::UnicodeString::unBogus((uint64_t)a2);
    v9 = *((unsigned __int16 *)a2 + 4);
    v10 = (__int16)v9;
    v11 = v9 >> 5;
    if (v10 >= 0)
      v12 = v11;
    else
      v12 = *((unsigned int *)a2 + 3);
    return icu::UnicodeString::doReplace((uint64_t)a2, 0, v12, v8, 0, v4);
  }
  return this;
}

uint64_t icu::SearchIterator::setBreakIterator(uint64_t this, icu::BreakIterator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    *(_QWORD *)(*(_QWORD *)(this + 8) + 24) = a2;
    *(_QWORD *)(this + 16) = a2;
  }
  return this;
}

uint64_t icu::SearchIterator::getBreakIterator(icu::SearchIterator *this)
{
  return *((_QWORD *)this + 2);
}

icu::UnicodeString *icu::SearchIterator::setText(icu::UnicodeString *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (*(int *)a3 <= 0)
  {
    v3 = *((unsigned __int16 *)a2 + 4);
    v4 = (__int16)v3;
    v5 = v3 >> 5;
    if (v4 < 0)
      v5 = *((_DWORD *)a2 + 3);
    if (v5)
    {
      v6 = (uint64_t)this;
      this = icu::UnicodeString::operator=((UChar **)this + 3, (UChar **)a2);
      v7 = *(_WORD *)(v6 + 32);
      if ((v7 & 0x11) != 0)
      {
        v8 = 0;
      }
      else if ((v7 & 2) != 0)
      {
        v8 = v6 + 34;
      }
      else
      {
        v8 = *(_QWORD *)(v6 + 48);
      }
      v9 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)v9 = v8;
      if (*(__int16 *)(v6 + 32) < 0)
        v10 = *(_DWORD *)(v6 + 36);
      else
        v10 = *(unsigned __int16 *)(v6 + 32) >> 5;
      *(_DWORD *)(v9 + 8) = v10;
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

uint64_t icu::SearchIterator::setText(uint64_t this, icu::CharacterIterator *a2, UErrorCode *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    v5 = this + 24;
    (*(void (**)(icu::CharacterIterator *, uint64_t))(*(_QWORD *)a2 + 208))(a2, this + 24);
    return (*(uint64_t (**)(uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)v4 + 40))(v4, v5, a3);
  }
  return this;
}

uint64_t icu::SearchIterator::getText(icu::SearchIterator *this)
{
  return (uint64_t)this + 24;
}

BOOL icu::SearchIterator::operator==(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 == (_QWORD *)a2)
    return 1;
  if (a1[2] != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = a1[1];
  v5 = *(_QWORD *)(a2 + 8);
  if (*(unsigned __int8 *)(v4 + 13) != *(unsigned __int8 *)(v5 + 13))
    return 0;
  if (*(unsigned __int8 *)(v4 + 12) != *(unsigned __int8 *)(v5 + 12))
    return 0;
  if (*(unsigned __int16 *)(v4 + 14) != *(unsigned __int16 *)(v5 + 14))
    return 0;
  if (*(_DWORD *)(v4 + 32) != *(_DWORD *)(v5 + 32))
    return 0;
  if (*(_DWORD *)(v4 + 36) != *(_DWORD *)(v5 + 36))
    return 0;
  if (*(_DWORD *)(v4 + 8) != *(_DWORD *)(v5 + 8))
    return 0;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if (v6 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
    return 0;
  v7 = a1[1];
  v8 = *(int *)(v7 + 8);
  return !(_DWORD)v8 || memcmp(*(const void **)v7, **(const void ***)(a2 + 8), 2 * v8) == 0;
}

uint64_t icu::SearchIterator::first(icu::SearchIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0)
    return 0xFFFFFFFFLL;
  (*(void (**)(icu::SearchIterator *, _QWORD, UErrorCode *))(*(_QWORD *)this + 24))(this, 0, a2);
  return (*(uint64_t (**)(icu::SearchIterator *, _QWORD, UErrorCode *))(*(_QWORD *)this + 80))(this, 0, a2);
}

uint64_t icu::SearchIterator::following(icu::SearchIterator *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0)
    return 0xFFFFFFFFLL;
  (*(void (**)(icu::SearchIterator *))(*(_QWORD *)this + 24))(this);
  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(_QWORD *)this + 80))(this, a2, a3);
}

uint64_t icu::SearchIterator::last(icu::SearchIterator *this, UErrorCode *a2)
{
  if (*(int *)a2 > 0)
    return 0xFFFFFFFFLL;
  (*(void (**)(icu::SearchIterator *, _QWORD, UErrorCode *))(*(_QWORD *)this + 24))(this, *(unsigned int *)(*((_QWORD *)this + 1) + 8), a2);
  return (*(uint64_t (**)(icu::SearchIterator *, _QWORD, UErrorCode *))(*(_QWORD *)this + 88))(this, *(unsigned int *)(*((_QWORD *)this + 1) + 8), a2);
}

uint64_t icu::SearchIterator::preceding(icu::SearchIterator *this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0)
    return 0xFFFFFFFFLL;
  (*(void (**)(icu::SearchIterator *))(*(_QWORD *)this + 24))(this);
  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(_QWORD *)this + 88))(this, a2, a3);
}

uint64_t icu::SearchIterator::next(icu::SearchIterator *this, UErrorCode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  BOOL v9;
  BOOL v10;
  unsigned int v11;

  if (*(int *)a2 > 0)
    return 0xFFFFFFFFLL;
  v4 = (*(uint64_t (**)(icu::SearchIterator *))(*(_QWORD *)this + 32))(this);
  v5 = *((_QWORD *)this + 1);
  result = *(unsigned int *)(v5 + 32);
  v7 = *(_DWORD *)(v5 + 36);
  *(_BYTE *)(v5 + 41) = 0;
  if (*(_BYTE *)(v5 + 40))
  {
    v8 = *(_DWORD *)(v5 + 8);
    v9 = (_DWORD)v4 == v8 || (_DWORD)result == v8;
    if (v9 || ((_DWORD)result != -1 ? (v10 = v7 + (int)result < v8) : (v10 = 1), !v10))
    {
      icu::SearchIterator::setMatchNotFound(this);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_BYTE *)(v5 + 40) = 1;
    if ((_DWORD)result != -1)
      return result;
  }
  if (v7 >= 1)
  {
    v11 = v7 + v4;
    if (*(_BYTE *)(v5 + 12))
      v4 = (v4 + 1);
    else
      v4 = v11;
  }
  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(_QWORD *)this + 80))(this, v4, a2);
}

uint64_t icu::SearchIterator::setMatchNotFound(icu::SearchIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  int v5;

  (*(void (**)(icu::SearchIterator *, uint64_t))(*(_QWORD *)this + 104))(this, 0xFFFFFFFFLL);
  (*(void (**)(icu::SearchIterator *, _QWORD))(*(_QWORD *)this + 96))(this, 0);
  v5 = 0;
  v2 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v2 + 40))
    v3 = *(unsigned int *)(v2 + 8);
  else
    v3 = 0;
  return (*(uint64_t (**)(icu::SearchIterator *, uint64_t, int *))(*(_QWORD *)this + 24))(this, v3, &v5);
}

uint64_t icu::SearchIterator::previous(icu::SearchIterator *this, UErrorCode *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t (*v10)(icu::SearchIterator *, uint64_t, UErrorCode *);
  icu::SearchIterator *v11;

  if (*(int *)a2 > 0)
    return 0xFFFFFFFFLL;
  v6 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v6 + 41))
  {
    v7 = *(unsigned int *)(v6 + 8);
    *(_WORD *)(v6 + 40) = 0;
    (*(void (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(_QWORD *)this + 24))(this, v7, a2);
  }
  else
  {
    v7 = (*(uint64_t (**)(icu::SearchIterator *))(*(_QWORD *)this + 32))(this);
  }
  v8 = *((_QWORD *)this + 1);
  v2 = *(unsigned int *)(v8 + 32);
  if (*(_BYTE *)(v8 + 40))
  {
    *(_BYTE *)(v8 + 40) = 0;
    if ((_DWORD)v2 != -1)
      return v2;
  }
  else
  {
    if ((_DWORD)v7)
      v9 = (_DWORD)v2 == 0;
    else
      v9 = 1;
    if (v9)
    {
      icu::SearchIterator::setMatchNotFound(this);
      return 0xFFFFFFFFLL;
    }
    if ((_DWORD)v2 != -1)
    {
      if (*(_BYTE *)(v8 + 12))
        v2 = (v2 + *(_DWORD *)(v8 + 36) - 2);
      v10 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(_QWORD *)this + 88);
      v11 = this;
      return v10(v11, v2, a2);
    }
  }
  v10 = *(uint64_t (**)(icu::SearchIterator *, uint64_t, UErrorCode *))(*(_QWORD *)this + 88);
  v11 = this;
  v2 = v7;
  return v10(v11, v2, a2);
}

uint64_t icu::SearchIterator::reset(icu::SearchIterator *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;

  v4 = 0;
  icu::SearchIterator::setMatchNotFound(this);
  result = (*(uint64_t (**)(icu::SearchIterator *, _QWORD, int *))(*(_QWORD *)this + 24))(this, 0, &v4);
  v3 = *((_QWORD *)this + 1);
  *(_DWORD *)(v3 + 12) = 0;
  *(_WORD *)(v3 + 40) = 257;
  return result;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator(icu::SearchIterator *this)
{
  _QWORD *v2;

  *(_QWORD *)this = off_1E2266370;
  *((_QWORD *)this + 3) = off_1E2256B38;
  *((_WORD *)this + 16) = 2;
  v2 = uprv_malloc(0x30uLL);
  v2[3] = 0;
  *((_WORD *)v2 + 20) = 257;
  v2[4] = 0xFFFFFFFFLL;
  *v2 = 0;
  v2[1] = 0;
  *((_QWORD *)this + 1) = v2;
  *((_QWORD *)this + 2) = 0;
  return this;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator(icu::SearchIterator *this, UChar **a2, icu::BreakIterator *a3)
{
  _QWORD *v5;
  char *v6;
  __int16 v7;
  unsigned int v8;
  int v9;
  unsigned int v10;

  *(_QWORD *)this = off_1E2266370;
  *((_QWORD *)this + 2) = a3;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)this + 24), a2);
  v5 = uprv_malloc(0x30uLL);
  v6 = 0;
  *((_QWORD *)this + 1) = v5;
  v5[3] = 0;
  *((_DWORD *)v5 + 3) = 0;
  *((_WORD *)v5 + 20) = 257;
  v5[4] = 0xFFFFFFFFLL;
  v7 = *((_WORD *)this + 16);
  if ((v7 & 0x11) == 0)
  {
    if ((v7 & 2) != 0)
      v6 = (char *)this + 34;
    else
      v6 = (char *)*((_QWORD *)this + 6);
  }
  *v5 = v6;
  v8 = *((unsigned __int16 *)a2 + 4);
  v9 = (__int16)v8;
  v10 = v8 >> 5;
  if (v9 < 0)
    v10 = *((_DWORD *)a2 + 3);
  *((_DWORD *)v5 + 2) = v10;
  return this;
}

icu::SearchIterator *icu::SearchIterator::SearchIterator(icu::SearchIterator *this, icu::CharacterIterator *a2, icu::BreakIterator *a3)
{
  char *v6;
  _QWORD *v7;
  char *v8;
  __int16 v9;
  uint64_t v10;
  int v11;

  *(_QWORD *)this = off_1E2266370;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = off_1E2256B38;
  v6 = (char *)this + 24;
  *((_WORD *)this + 16) = 2;
  v7 = uprv_malloc(0x30uLL);
  *((_QWORD *)this + 1) = v7;
  v7[3] = 0;
  *((_DWORD *)v7 + 3) = 0;
  *((_WORD *)v7 + 20) = 257;
  v7[4] = 0xFFFFFFFFLL;
  (*(void (**)(icu::CharacterIterator *, char *))(*(_QWORD *)a2 + 208))(a2, v6);
  v8 = 0;
  v9 = *((_WORD *)this + 16);
  if ((v9 & 0x11) == 0)
  {
    if ((v9 & 2) != 0)
      v8 = (char *)this + 34;
    else
      v8 = (char *)*((_QWORD *)this + 6);
  }
  v10 = *((_QWORD *)this + 1);
  *(_QWORD *)v10 = v8;
  if (*((__int16 *)this + 16) < 0)
    v11 = *((_DWORD *)this + 9);
  else
    v11 = *((unsigned __int16 *)this + 16) >> 5;
  *(_DWORD *)(v10 + 8) = v11;
  *((_QWORD *)this + 2) = a3;
  return this;
}

uint64_t icu::SearchIterator::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(v4 + 24);
    *(_DWORD *)(v5 + 12) = *(_DWORD *)(v4 + 12);
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(v4 + 32);
    *(_QWORD *)v5 = *(_QWORD *)v4;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(v4 + 8);
  }
  return a1;
}

uint64_t icu::SearchIterator::setMatchLength(uint64_t this, int a2)
{
  *(_DWORD *)(*(_QWORD *)(this + 8) + 36) = a2;
  return this;
}

uint64_t icu::SearchIterator::setMatchStart(uint64_t this, int a2)
{
  *(_DWORD *)(*(_QWORD *)(this + 8) + 32) = a2;
  return this;
}

void *icu::SelectFormat::getStaticClassID(icu::SelectFormat *this)
{
  return &unk_1EE009DDD;
}

void *icu::SelectFormat::getDynamicClassID(icu::SelectFormat *this)
{
  return &unk_1EE009DDD;
}

icu::SelectFormat *icu::SelectFormat::SelectFormat(icu::SelectFormat *this, UChar **a2, UErrorCode *a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v6 = off_1E2266408;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v6 + 41), a3);
  icu::SelectFormat::applyPattern(this, a2, a3);
  return this;
}

icu::MessagePattern *icu::SelectFormat::applyPattern(icu::MessagePattern *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 <= 0)
  {
    v4 = (uint64_t)this + 328;
    this = icu::MessagePattern::parseSelectStyle((icu::MessagePattern *)((char *)this + 328), a2, 0, a3);
    if (*(int *)a3 >= 1)
      return (icu::MessagePattern *)icu::MessagePattern::clear(v4);
  }
  return this;
}

icu::SelectFormat *icu::SelectFormat::SelectFormat(icu::SelectFormat *this, const icu::SelectFormat *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *v4 = off_1E2266408;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v4 + 41), (const icu::SelectFormat *)((char *)a2 + 328));
  return this;
}

{
  _QWORD *v4;

  v4 = (_QWORD *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *v4 = off_1E2266408;
  icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v4 + 41), (const icu::SelectFormat *)((char *)a2 + 328));
  return this;
}

void icu::SelectFormat::~SelectFormat(icu::SelectFormat *this)
{
  *(_QWORD *)this = off_1E2266408;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  *(_QWORD *)this = off_1E2266408;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E2266408;
  icu::MessagePattern::~MessagePattern((icu::SelectFormat *)((char *)this + 328));
  icu::Format::~Format(this);
  icu::UMemory::operator delete(v2);
}

icu::UnicodeString *icu::SelectFormat::format(icu::SelectFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  const icu::UnicodeString *String;
  icu::FieldPosition *v10;

  if (*(int *)a5 <= 0)
  {
    if (icu::Formattable::getType(a2) == 3)
    {
      String = (const icu::UnicodeString *)icu::Formattable::getString(a2, a5);
      return icu::SelectFormat::format(this, String, a3, v10, a5);
    }
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return a3;
}

icu::UnicodeString *icu::SelectFormat::format(icu::SelectFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  unsigned int v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  int v14;
  UErrorCode *v15;
  const icu::MessagePattern *SubMessage;
  icu::UnicodeString *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  if (*(int *)a5 > 0)
    return a3;
  v10 = *((unsigned __int16 *)a2 + 4);
  if ((v10 & 0x11) != 0)
  {
    v11 = 0;
  }
  else if ((v10 & 2) != 0)
  {
    v11 = (unsigned __int16 *)((char *)a2 + 10);
  }
  else
  {
    v11 = (unsigned __int16 *)*((_QWORD *)a2 + 3);
  }
  v12 = (__int16)v10;
  v13 = v10 >> 5;
  if (v12 >= 0)
    v14 = v13;
  else
    v14 = *((_DWORD *)a2 + 3);
  if (!icu::PatternProps::isIdentifier(v11, v14))
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  if (!*((_DWORD *)this + 106))
  {
    *a5 = U_INVALID_STATE_ERROR;
    return a3;
  }
  SubMessage = (const icu::MessagePattern *)icu::SelectFormat::findSubMessage((icu::SelectFormat *)((char *)this + 328), 0, (uint64_t)a2, (const icu::UnicodeString *)a5, v15);
  if (*((_DWORD *)this + 84) != 1)
  {
    v18 = *((_QWORD *)this + 52);
    v19 = v18 + 16 * (int)SubMessage;
    v20 = *(_DWORD *)(v19 + 4) + *(unsigned __int16 *)(v19 + 8);
    v21 = *(_DWORD *)(v19 + 12);
    if (v21 <= (int)SubMessage)
      v21 = (int)SubMessage;
    icu::UnicodeString::doAppend((uint64_t)a3, (icu::SelectFormat *)((char *)this + 344), v20, (*(_DWORD *)(v18 + 16 * v21 + 4) - v20));
    return a3;
  }
  return (icu::UnicodeString *)icu::MessageImpl::appendSubMessageWithoutSkipSyntax((icu::SelectFormat *)((char *)this + 328), SubMessage, a3, v17);
}

uint64_t icu::SelectFormat::findSubMessage(icu::SelectFormat *this, const icu::MessagePattern *a2, uint64_t a3, const icu::UnicodeString *a4, UErrorCode *a5)
{
  uint64_t v5;
  int v7;
  int v9;
  _DWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  const char *v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  v7 = (int)a2;
  memset(v16, 0, sizeof(v16));
  v15 = "o";
  icu::UnicodeString::UnicodeString(v16, 0, &v15);
  v5 = 0;
  v9 = *((_DWORD *)this + 24);
  v10 = (_DWORD *)*((_QWORD *)this + 11);
  do
  {
    v11 = &v10[4 * v7];
    v10 = (_DWORD *)*v11;
    if ((_DWORD)v10 == 6)
      break;
    v12 = v7 + 1;
    if (sub_18BCFDDA4((uint64_t)this, (uint64_t)v11, a3))
    {
      v5 = v12;
      break;
    }
    if (!(_DWORD)v5)
    {
      if (sub_18BCFDDA4((uint64_t)this, (uint64_t)v11, (uint64_t)v16))
        v5 = v12;
      else
        v5 = 0;
    }
    v10 = (_DWORD *)*((_QWORD *)this + 11);
    v13 = v10[4 * v12 + 3];
    if (v13 <= (int)v12)
      v13 = v12;
    v7 = v13 + 1;
  }
  while (v13 + 1 < v9);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  return v5;
}

icu::UnicodeString *icu::SelectFormat::toPattern(icu::SelectFormat *this, icu::UnicodeString *a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;

  if (*((_DWORD *)this + 106))
  {
    v3 = *((unsigned __int16 *)this + 176);
    v4 = (__int16)v3;
    v5 = v3 >> 5;
    if (v4 >= 0)
      v6 = v5;
    else
      v6 = *((unsigned int *)this + 89);
    icu::UnicodeString::doAppend((uint64_t)a2, (icu::SelectFormat *)((char *)this + 344), 0, v6);
  }
  else
  {
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

uint64_t *icu::SelectFormat::clone@<X0>(icu::SelectFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x1C8, a2);
  v5 = v4;
  if (v4)
  {
    icu::Format::Format((uint64_t)v4, (uint64_t)this);
    *v5 = (uint64_t)off_1E2266408;
    icu::MessagePattern::MessagePattern((icu::MessagePattern *)(v5 + 41), (icu::SelectFormat *)((char *)this + 328));
  }
  return v5;
}

uint64_t icu::SelectFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    icu::MessagePattern::operator=(a1 + 328, a2 + 328);
  return a1;
}

uint64_t icu::SelectFormat::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  result = icu::Format::operator==(a1, a2);
  if ((_DWORD)result)
    return icu::MessagePattern::operator==((uint64_t)(a1 + 41), (uint64_t)(a2 + 41));
  return result;
}

uint64_t icu::SelectFormat::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
}

void icu::SelectFormat::parseObject(icu::SelectFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  *((_DWORD *)a4 + 3) = *((_DWORD *)a4 + 2);
}

_QWORD *icu::SharedBreakIterator::SharedBreakIterator(_QWORD *this, icu::BreakIterator *a2)
{
  *this = off_1E2266478;
  this[1] = 0;
  this[2] = 0;
  this[3] = a2;
  return this;
}

{
  *this = off_1E2266478;
  this[1] = 0;
  this[2] = 0;
  this[3] = a2;
  return this;
}

void icu::SharedBreakIterator::~SharedBreakIterator(icu::SharedBreakIterator *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2266478;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2266478;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2266478;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
  icu::UMemory::operator delete(v3);
}

void *icu::SimpleTimeZone::getStaticClassID(icu::SimpleTimeZone *this)
{
  return &unk_1EE009DE0;
}

void *icu::SimpleTimeZone::getDynamicClassID(icu::SimpleTimeZone *this)
{
  return &unk_1EE009DE0;
}

double icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, int a2, UChar **a3)
{
  icu::TimeZone *v4;
  double result;

  v4 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(_QWORD *)v4 = off_1E22664B8;
  *((_WORD *)v4 + 36) = 0;
  *((_BYTE *)v4 + 74) = 0;
  *((_DWORD *)v4 + 23) = 0;
  *((_DWORD *)v4 + 24) = 0;
  *(_QWORD *)((char *)v4 + 76) = 0;
  *(_QWORD *)((char *)v4 + 83) = 0;
  *((_DWORD *)v4 + 25) = a2;
  *((_BYTE *)v4 + 104) = 0;
  *(_QWORD *)((char *)v4 + 108) = 0x100000001;
  *((_DWORD *)v4 + 29) = 3600000;
  *((_BYTE *)v4 + 120) = 0;
  result = 0.0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  return result;
}

{
  icu::TimeZone *v4;
  double result;

  v4 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(_QWORD *)v4 = off_1E22664B8;
  *((_WORD *)v4 + 36) = 0;
  *((_BYTE *)v4 + 74) = 0;
  *((_DWORD *)v4 + 23) = 0;
  *((_DWORD *)v4 + 24) = 0;
  *(_QWORD *)((char *)v4 + 76) = 0;
  *(_QWORD *)((char *)v4 + 83) = 0;
  *((_DWORD *)v4 + 25) = a2;
  *((_BYTE *)v4 + 104) = 0;
  *(_QWORD *)((char *)v4 + 108) = 0x100000001;
  *((_DWORD *)v4 + 29) = 3600000;
  *((_BYTE *)v4 + 120) = 0;
  result = 0.0;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  return result;
}

double icu::SimpleTimeZone::clearTransitionRules(icu::SimpleTimeZone *this)
{
  double result;

  *((_BYTE *)this + 120) = 0;
  result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  return result;
}

icu::SimpleTimeZone *icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, int a2, UChar **a3, char a4, char a5, char a6, int a7, char a8, char a9, char a10, int a11, UErrorCode *a12)
{
  icu::TimeZone *v18;

  v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(_QWORD *)v18 = off_1E22664B8;
  *((_BYTE *)v18 + 120) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  *((_DWORD *)v18 + 24) = 0;
  *((_DWORD *)v18 + 25) = a2;
  *((_BYTE *)v18 + 72) = a4;
  *((_BYTE *)v18 + 73) = a5;
  *((_BYTE *)v18 + 74) = a6;
  *((_BYTE *)v18 + 88) = a8;
  *((_BYTE *)v18 + 89) = a9;
  *((_BYTE *)v18 + 90) = a10;
  *((_QWORD *)v18 + 10) = 0;
  *((_DWORD *)v18 + 19) = a7;
  *((_DWORD *)v18 + 29) = 3600000;
  *((_DWORD *)v18 + 23) = a11;
  *(_QWORD *)((char *)v18 + 108) = 0x100000001;
  icu::SimpleTimeZone::decodeStartRule((uint64_t)v18, a12);
  icu::SimpleTimeZone::decodeEndRule((uint64_t)this, a12);
  return this;
}

{
  return icu::SimpleTimeZone::SimpleTimeZone(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t icu::SimpleTimeZone::construct(uint64_t a1, int a2, char a3, char a4, char a5, int a6, int a7, char a8, char a9, char a10, int a11, int a12, int a13, UErrorCode *a14)
{
  uint64_t result;

  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 100) = a2;
  *(_BYTE *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 73) = a4;
  *(_BYTE *)(a1 + 74) = a5;
  *(_DWORD *)(a1 + 76) = a6;
  *(_DWORD *)(a1 + 80) = a7;
  *(_BYTE *)(a1 + 88) = a8;
  *(_BYTE *)(a1 + 89) = a9;
  *(_BYTE *)(a1 + 90) = a10;
  *(_DWORD *)(a1 + 84) = a12;
  *(_DWORD *)(a1 + 116) = a13;
  *(_DWORD *)(a1 + 92) = a11;
  *(_QWORD *)(a1 + 108) = 0x100000001;
  icu::SimpleTimeZone::decodeStartRule(a1, a14);
  result = icu::SimpleTimeZone::decodeEndRule(a1, a14);
  if (!a13)
    *a14 = U_ILLEGAL_ARGUMENT_ERROR;
  return result;
}

icu::SimpleTimeZone *icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, int a2, UChar **a3, char a4, char a5, char a6, int a7, char a8, char a9, char a10, int a11, int a12, UErrorCode *a13)
{
  icu::TimeZone *v18;

  v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(_QWORD *)v18 = off_1E22664B8;
  *((_BYTE *)v18 + 120) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v18, a2, a4, a5, a6, a7, 0, a8, a9, a10, a11, 0, a12, a13);
  return this;
}

{
  icu::TimeZone *v18;

  v18 = icu::BasicTimeZone::BasicTimeZone(this, a3);
  *(_QWORD *)v18 = off_1E22664B8;
  *((_BYTE *)v18 + 120) = 0;
  *((_OWORD *)v18 + 8) = 0u;
  *((_OWORD *)v18 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v18, a2, a4, a5, a6, a7, 0, a8, a9, a10, a11, 0, a12, a13);
  return this;
}

icu::BasicTimeZone *icu::SimpleTimeZone::SimpleTimeZone(icu::BasicTimeZone *a1, int a2, UChar **a3, char a4, char a5, char a6, int a7, int a8, char a9, char a10, char a11, int a12, int a13, int a14, UErrorCode *a15)
{
  icu::TimeZone *v19;

  v19 = icu::BasicTimeZone::BasicTimeZone(a1, a3);
  *(_QWORD *)v19 = off_1E22664B8;
  *((_BYTE *)v19 + 120) = 0;
  *((_OWORD *)v19 + 8) = 0u;
  *((_OWORD *)v19 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v19, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

{
  icu::TimeZone *v19;

  v19 = icu::BasicTimeZone::BasicTimeZone(a1, a3);
  *(_QWORD *)v19 = off_1E22664B8;
  *((_BYTE *)v19 + 120) = 0;
  *((_OWORD *)v19 + 8) = 0u;
  *((_OWORD *)v19 + 9) = 0u;
  icu::SimpleTimeZone::construct((uint64_t)v19, a2, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

uint64_t icu::SimpleTimeZone::decodeRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  icu::SimpleTimeZone::decodeStartRule((uint64_t)this, a2);
  return icu::SimpleTimeZone::decodeEndRule((uint64_t)this, a2);
}

void icu::SimpleTimeZone::~SimpleTimeZone(icu::SimpleTimeZone *this)
{
  *(_QWORD *)this = off_1E22664B8;
  icu::SimpleTimeZone::deleteTransitionRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  *(_QWORD *)this = off_1E22664B8;
  icu::SimpleTimeZone::deleteTransitionRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E22664B8;
  icu::SimpleTimeZone::deleteTransitionRules(this);
  icu::BasicTimeZone::~BasicTimeZone(this);
  icu::UMemory::operator delete(v2);
}

double icu::SimpleTimeZone::deleteTransitionRules(icu::SimpleTimeZone *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = (_OWORD *)((char *)this + 128);
  v2 = *((_QWORD *)this + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_QWORD *)this + 17);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 18);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 19);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_BYTE *)this + 120) = 0;
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  return result;
}

uint64_t icu::SimpleTimeZone::SimpleTimeZone(icu::SimpleTimeZone *this, UChar **a2)
{
  icu::TimeZone *v3;

  v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(_QWORD *)v3 = off_1E22664B8;
  return icu::SimpleTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

{
  icu::TimeZone *v3;

  v3 = icu::BasicTimeZone::BasicTimeZone(this, a2);
  *(_QWORD *)v3 = off_1E22664B8;
  return icu::SimpleTimeZone::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::SimpleTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::TimeZone::operator=(a1, a2);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    *(_QWORD *)(a1 + 76) = *(_QWORD *)(a2 + 76);
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
    *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
    *(_QWORD *)(a1 + 108) = *(_QWORD *)(a2 + 108);
    *(_QWORD *)(a1 + 92) = *(_QWORD *)(a2 + 92);
    *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
  }
  return a1;
}

uint64_t icu::SimpleTimeZone::operator==(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if ((_QWORD *)a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*a2 - 8));
  if ((_DWORD)result)
  {
    result = icu::TimeZone::operator==(a1, (uint64_t)a2);
    if ((_DWORD)result)
      return (*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2) != 0;
  }
  return result;
}

icu::BasicTimeZone *icu::SimpleTimeZone::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::BasicTimeZone *result;
  icu::TimeZone *v5;

  result = (icu::BasicTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result)
  {
    v5 = icu::BasicTimeZone::BasicTimeZone(result, this);
    *(_QWORD *)v5 = off_1E22664B8;
    return (icu::BasicTimeZone *)icu::SimpleTimeZone::operator=((uint64_t)v5, (uint64_t)this);
  }
  return result;
}

uint64_t icu::SimpleTimeZone::setStartYear(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  *(_BYTE *)(this + 120) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::setStartRule(uint64_t a1, char a2, char a3, char a4, int a5, int a6, UErrorCode *a7)
{
  uint64_t result;

  *(_BYTE *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 73) = a3;
  *(_BYTE *)(a1 + 74) = a4;
  *(_DWORD *)(a1 + 76) = a5;
  *(_DWORD *)(a1 + 80) = a6;
  result = icu::SimpleTimeZone::decodeStartRule(a1, a7);
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::decodeStartRule(uint64_t this, UErrorCode *a2)
{
  int v2;
  int v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;

  if (*(int *)a2 <= 0)
  {
    v2 = *(char *)(this + 73);
    if (!*(_BYTE *)(this + 73))
    {
      *(_BYTE *)(this + 104) = 0;
      return this;
    }
    v3 = *(unsigned __int8 *)(this + 89);
    *(_BYTE *)(this + 104) = *(_BYTE *)(this + 89) != 0;
    if (v3 && !*(_DWORD *)(this + 116))
      *(_DWORD *)(this + 116) = 3600000;
    v4 = *(unsigned __int8 *)(this + 72);
    if (v4 >= 0xC || *(_DWORD *)(this + 76) > 0x5265C00u || *(_DWORD *)(this + 80) >= 3u)
      goto LABEL_24;
    v5 = *(char *)(this + 74);
    if (*(_BYTE *)(this + 74))
    {
      if (v5 <= 0)
      {
        v7 = -v5;
        *(_BYTE *)(this + 74) = -(char)v5;
        if (v2 <= 0)
        {
          v2 = -v2;
          *(_BYTE *)(this + 73) = v2;
          v6 = 4;
        }
        else
        {
          v6 = 3;
        }
      }
      else
      {
        v6 = 2;
        LOBYTE(v7) = *(_BYTE *)(this + 74);
      }
      *(_DWORD *)(this + 108) = v6;
      if ((char)v7 >= 8)
        goto LABEL_24;
      if (v5 >= 1)
      {
        if ((v2 - 6) > 0xF4u)
          return this;
        goto LABEL_24;
      }
    }
    else
    {
      *(_DWORD *)(this + 108) = 1;
    }
    if ((char)v2 >= 1 && icu::SimpleTimeZone::STATICMONTHLENGTH[v4] >= (char)v2)
      return this;
LABEL_24:
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return this;
}

uint64_t icu::SimpleTimeZone::setStartRule(uint64_t a1, char a2, char a3, int a4, int a5, UErrorCode *a6)
{
  uint64_t result;

  *(_BYTE *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 73) = a3;
  *(_BYTE *)(a1 + 74) = 0;
  *(_DWORD *)(a1 + 76) = a4;
  *(_DWORD *)(a1 + 80) = a5;
  result = icu::SimpleTimeZone::decodeStartRule(a1, a6);
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setStartRule(uint64_t a1, char a2, int a3, char a4, int a5, int a6, int a7, UErrorCode *a8)
{
  int v9;
  uint64_t result;

  *(_BYTE *)(a1 + 72) = a2;
  if (a7)
    LOBYTE(v9) = a3;
  else
    v9 = -a3;
  *(_BYTE *)(a1 + 73) = v9;
  *(_BYTE *)(a1 + 74) = -a4;
  *(_DWORD *)(a1 + 76) = a5;
  *(_DWORD *)(a1 + 80) = a6;
  result = icu::SimpleTimeZone::decodeStartRule(a1, a8);
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setEndRule(uint64_t a1, char a2, char a3, char a4, int a5, int a6, UErrorCode *a7)
{
  uint64_t result;

  *(_BYTE *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 89) = a3;
  *(_BYTE *)(a1 + 90) = a4;
  *(_DWORD *)(a1 + 92) = a5;
  *(_DWORD *)(a1 + 84) = a6;
  result = icu::SimpleTimeZone::decodeEndRule(a1, a7);
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::decodeEndRule(uint64_t this, UErrorCode *a2)
{
  int v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(int *)a2 <= 0)
  {
    if (*(_BYTE *)(this + 73))
    {
      v2 = *(unsigned __int8 *)(this + 89);
      *(_BYTE *)(this + 104) = *(_BYTE *)(this + 89) != 0;
      if (!v2)
        return this;
      if (!*(_DWORD *)(this + 116))
        *(_DWORD *)(this + 116) = 3600000;
    }
    else
    {
      *(_BYTE *)(this + 104) = 0;
      LOBYTE(v2) = *(_BYTE *)(this + 89);
      if (!(_BYTE)v2)
        return this;
    }
    v3 = *(unsigned __int8 *)(this + 88);
    if (v3 > 0xB || *(_DWORD *)(this + 92) > 0x5265C00u || *(_DWORD *)(this + 84) > 2u)
      goto LABEL_24;
    v4 = *(char *)(this + 90);
    if (*(_BYTE *)(this + 90))
    {
      if (v4 <= 0)
      {
        v6 = -v4;
        *(_BYTE *)(this + 90) = -(char)v4;
        if ((char)v2 <= 0)
        {
          *(_BYTE *)(this + 89) = -(char)v2;
          v5 = 4;
        }
        else
        {
          v5 = 3;
        }
      }
      else
      {
        v5 = 2;
        LOBYTE(v6) = *(_BYTE *)(this + 90);
      }
      *(_DWORD *)(this + 112) = v5;
      if ((char)v6 > 7)
        goto LABEL_24;
      if (v4 >= 1)
      {
        if (*(unsigned __int8 *)(this + 89) - 6 >= 0xF5)
          return this;
        goto LABEL_24;
      }
    }
    else
    {
      *(_DWORD *)(this + 112) = 1;
    }
    v7 = *(char *)(this + 89);
    if (v7 >= 1 && v7 <= icu::SimpleTimeZone::STATICMONTHLENGTH[v3])
      return this;
LABEL_24:
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return this;
}

uint64_t icu::SimpleTimeZone::setEndRule(uint64_t a1, char a2, char a3, int a4, int a5, UErrorCode *a6)
{
  uint64_t result;

  *(_BYTE *)(a1 + 88) = a2;
  *(_BYTE *)(a1 + 89) = a3;
  *(_BYTE *)(a1 + 90) = 0;
  *(_DWORD *)(a1 + 92) = a4;
  *(_DWORD *)(a1 + 84) = a5;
  result = icu::SimpleTimeZone::decodeEndRule(a1, a6);
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::setEndRule(uint64_t a1, char a2, int a3, char a4, int a5, int a6, int a7, UErrorCode *a8)
{
  int v9;
  uint64_t result;

  *(_BYTE *)(a1 + 88) = a2;
  if (a7)
    LOBYTE(v9) = a3;
  else
    v9 = -a3;
  *(_BYTE *)(a1 + 89) = v9;
  *(_BYTE *)(a1 + 90) = -a4;
  *(_DWORD *)(a1 + 92) = a5;
  *(_DWORD *)(a1 + 84) = a6;
  result = icu::SimpleTimeZone::decodeEndRule(a1, a8);
  *(_BYTE *)(a1 + 120) = 0;
  return result;
}

uint64_t icu::SimpleTimeZone::getOffset(icu::SimpleTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, UErrorCode *a8)
{
  if (a4 < 0xC)
    return (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)this + 40))(this);
  *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0;
}

uint64_t icu::SimpleTimeZone::getOffset(icu::SimpleTimeZone *this, unsigned __int8 a2, int a3, unsigned int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  if (a4 < 0xC)
    return (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)this + 168))(this);
  *a9 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0xFFFFFFFFLL;
}

uint64_t icu::SimpleTimeZone::getOffset(icu::SimpleTimeZone *this, unsigned int a2, int a3, unsigned int a4, int a5, char a6, unsigned int a7, int a8, int a9, UErrorCode *a10)
{
  uint64_t v10;
  BOOL v12;
  BOOL v13;
  int v15;
  int v16;
  int v17;
  char v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v25;
  int v26;
  char v27;
  int v28;
  int v29;
  char v30;

  if (*(int *)a10 > 0)
    return 0;
  if (a2 > 1
    || a4 > 0xB
    || a5 < 1
    || ((a9 - 32) >= 0xFFFFFFFC ? (v12 = (a8 - 32) >= 0xFFFFFFFC) : (v12 = 0),
        v12 ? (v13 = a7 > 0x5265BFF) : (v13 = 1),
        v13 || (a6 - 8) < 0xF9u || a5 > a8))
  {
    *a10 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  else
  {
    v10 = *((unsigned int *)this + 25);
    if (*((_BYTE *)this + 104) && a2 == 1 && *((_DWORD *)this + 24) <= a3)
    {
      v15 = *((char *)this + 72);
      v16 = *((char *)this + 88);
      if (*((_DWORD *)this + 20) == 2)
        v17 = -(int)v10;
      else
        v17 = 0;
      v18 = a5;
      v19 = a6;
      v30 = a4;
      v29 = (char)a8;
      v20 = icu::SimpleTimeZone::compareToRule(a4, (char)a8, a9, a5, a6, a7, v17, *((_DWORD *)this + 27), v15, *((_BYTE *)this + 74), *((_BYTE *)this + 73), *((_DWORD *)this + 19));
      v21 = 0;
      if (v15 > v16 != v20 >= 0)
      {
        v22 = *((_DWORD *)this + 21);
        if (v22 == 2)
        {
          v23 = -(int)v10;
        }
        else if (v22)
        {
          v23 = 0;
        }
        else
        {
          v23 = *((_DWORD *)this + 29);
        }
        v21 = icu::SimpleTimeZone::compareToRule(v30, v29, a9, v18, v19, a7, v23, *((_DWORD *)this + 28), v16, *((_BYTE *)this + 90), *((_BYTE *)this + 89), *((_DWORD *)this + 23)) >> 31;
      }
      v25 = v20 >= 0;
      if (v20 >= 0)
        v26 = 1;
      else
        v26 = v21;
      if (v15 > v16)
        v25 = 0;
      v27 = v25 & v21;
      if (v15 > v16)
        v28 = v26;
      else
        v28 = 0;
      if ((v27 & 1) != 0 || v28)
        return (*((_DWORD *)this + 29) + v10);
    }
  }
  return v10;
}

uint64_t icu::SimpleTimeZone::compareToRule(char a1, int a2, char a3, char a4, unsigned int a5, int a6, int a7, int a8, char a9, char a10, char a11, signed int a12)
{
  signed int v12;
  int v13;
  char v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;

  v12 = a7 + a6;
  if (a7 + a6 <= 86399999)
  {
    if (v12 < 0)
    {
      do
      {
        v12 += 86400000;
        a5 = (char)a5 + 5 - 7 * (((18725 * ((char)a5 + 5)) >> 17) + ((18725 * ((char)a5 + 5)) >> 31)) + 1;
        v14 = (char)(a4 - 1) < 1;
        if ((char)(a4 - 1) >= 1)
          --a4;
        else
          a4 = a3;
        a1 -= v14;
      }
      while (v12 >= 0x5265C00);
    }
  }
  else
  {
    do
    {
      v12 -= 86400000;
      v13 = (char)(a4 + 1);
      a5 = a5
         - 7
         * (((char)((unsigned __int16)(147 * (char)a5) >> 8) >> 2)
          + (((a5 + ((-109 * (char)a5) >> 8)) & 0x80) >> 7))
         + 1;
      if (v13 <= a2)
        ++a4;
      else
        a4 = 1;
      if (v13 > a2)
        ++a1;
    }
    while ((v12 + 86400000) > 0xA4CB7FF);
  }
  if (a9 > a1)
    return 0xFFFFFFFFLL;
  if (a9 < a1)
    return 1;
  LOBYTE(v16) = a11;
  if (a11 >= a2)
    LOBYTE(v16) = a2;
  switch(a8)
  {
    case 1:
      v16 = (char)v16;
      break;
    case 2:
      v17 = (char)v16;
      v18 = 7 * (char)v16;
      if (v17 < 1)
      {
        v21 = a2 + 7 + (char)a5 - (a10 + a4);
        v16 = a2 + 7 + v18 + (__int16)(7 * (v21 / 7) - v21);
      }
      else
      {
        v16 = v18 + (__int16)(a10 + (char)~(_BYTE)a5 + a4 + 7) % 7 - 6;
      }
      break;
    case 3:
      v19 = (__int16)(a10 - ((char)v16 + (char)a5) + a4 + 49) % 7;
      goto LABEL_26;
    case 4:
      v20 = (char)v16 - a10 + (char)a5 - a4 + 49;
      v19 = 7 * (v20 / 7) - v20;
LABEL_26:
      v16 = v19 + (char)v16;
      break;
    default:
      v16 = 0;
      break;
  }
  if (v16 > a4)
    return 0xFFFFFFFFLL;
  if (v16 < a4)
    return 1;
  if (v12 >= a12)
    return v12 > a12;
  else
    return 0xFFFFFFFFLL;
}

uint64_t icu::SimpleTimeZone::getOffsetFromLocal(uint64_t result, int a2, char a3, _DWORD *a4, int *a5, int *a6, double a7)
{
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  if (*a6 <= 0)
  {
    v13 = result;
    *a4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
    v20 = 0;
    v18 = 0;
    v19 = 0;
    v14 = sub_18BCE8294(86400000, &v18, a7);
    v21 = 0;
    sub_18BCE8448(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v14);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, 1);
    v15 = result - *a4;
    *a5 = v15;
    if (*a6 <= 0)
    {
      if (v15 >= 1)
      {
        if ((a2 & 3) != 1 && ((a2 & 3) == 3 || (~a2 & 0xC) == 0))
          return result;
LABEL_11:
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
        v17 = sub_18BCE8294(86400000, &v18, a7 - (double)v16);
        v21 = 0;
        sub_18BCE8448(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v17);
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, 1);
        *a5 = result - *a4;
        return result;
      }
      if ((a3 & 3) != 1 && ((a3 & 3) == 3 || (a3 & 0xC) == 4))
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t icu::SimpleTimeZone::getRawOffset(icu::SimpleTimeZone *this)
{
  return *((unsigned int *)this + 25);
}

uint64_t icu::SimpleTimeZone::setRawOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 100) = a2;
  *(_BYTE *)(this + 120) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::setDSTSavings(uint64_t this, int a2, UErrorCode *a3)
{
  if (a2)
    *(_DWORD *)(this + 116) = a2;
  else
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  *(_BYTE *)(this + 120) = 0;
  return this;
}

uint64_t icu::SimpleTimeZone::getDSTSavings(icu::SimpleTimeZone *this)
{
  return *((unsigned int *)this + 29);
}

uint64_t icu::SimpleTimeZone::useDaylightTime(icu::SimpleTimeZone *this)
{
  return *((char *)this + 104);
}

uint64_t icu::SimpleTimeZone::inDaylightTime(icu::SimpleTimeZone *this, double a2, UErrorCode *a3)
{
  uint64_t *v3;
  icu::GregorianCalendar *v8;
  icu::GregorianCalendar *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v3 > 0)
    return 0;
  v8 = (icu::GregorianCalendar *)icu::UMemory::operator new(v3, (icu::UMemory *)0x290, (unint64_t)a3);
  if (!v8)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return 0;
  }
  v9 = v8;
  v10 = icu::GregorianCalendar::GregorianCalendar(v8, this, a3);
  icu::Calendar::setTimeInMillis(v10, a2, a3);
  v11 = (*(uint64_t (**)(icu::GregorianCalendar *, UErrorCode *))(*(_QWORD *)v9 + 96))(v9, a3);
  (*(void (**)(icu::GregorianCalendar *))(*(_QWORD *)v9 + 8))(v9);
  return v11;
}

BOOL icu::SimpleTimeZone::hasSameRules(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
  {
    if (*(_DWORD *)(a1 + 100) != *(_DWORD *)(a2 + 100)
      || *(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
    {
      return 0;
    }
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(_DWORD *)(a1 + 116) == *(_DWORD *)(a2 + 116)
        && *(_DWORD *)(a1 + 108) == *(_DWORD *)(a2 + 108)
        && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72)
        && *(unsigned __int8 *)(a1 + 73) == *(unsigned __int8 *)(a2 + 73)
        && *(unsigned __int8 *)(a1 + 74) == *(unsigned __int8 *)(a2 + 74)
        && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
        && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
        && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)
        && *(unsigned __int8 *)(a1 + 88) == *(unsigned __int8 *)(a2 + 88)
        && *(unsigned __int8 *)(a1 + 89) == *(unsigned __int8 *)(a2 + 89)
        && *(unsigned __int8 *)(a1 + 90) == *(unsigned __int8 *)(a2 + 90)
        && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92)
        && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84))
      {
        return *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96);
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t icu::SimpleTimeZone::getNextTransition(icu::TimeZoneTransition **this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t result;
  double Time;
  icu::TimeZoneRule **v10;
  icu::TimeZoneRule *v11;
  uint64_t v12;
  uint64_t RawOffset;
  uint64_t DSTSavings;
  icu::TimeZoneRule *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const icu::TimeZoneRule **v19;
  double v20;
  double v21;
  UErrorCode v22;

  if (*((_BYTE *)this + 104))
  {
    v22 = U_ZERO_ERROR;
    icu::SimpleTimeZone::checkTransitionRules((icu::SimpleTimeZone *)this, &v22);
    result = 0;
    if (v22 > U_ZERO_ERROR)
      return result;
    Time = icu::TimeZoneTransition::getTime(this[17]);
    if (Time > a2 || (_DWORD)a3 && Time == a2)
      icu::TimeZoneTransition::operator=(a4, this[17]);
    v20 = 0.0;
    v21 = 0.0;
    v11 = this[19];
    v10 = this + 19;
    v12 = (uint64_t)*(v10 - 1);
    RawOffset = icu::TimeZoneRule::getRawOffset(v11);
    DSTSavings = icu::TimeZoneRule::getDSTSavings(*v10);
    LODWORD(v12) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v12 + 72))(v12, RawOffset, DSTSavings, a3, &v21, a2);
    v15 = *v10;
    v16 = icu::TimeZoneRule::getRawOffset(*(v10 - 1));
    v17 = icu::TimeZoneRule::getDSTSavings(*(v10 - 1));
    result = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v15 + 72))(v15, v16, v17, a3, &v20, a2);
    if (!(_DWORD)v12)
    {
      if (!(_DWORD)result)
        return result;
      v18 = v20;
      v19 = v10 - 1;
      goto LABEL_14;
    }
    if (!(_DWORD)result || (v18 = v20, v21 < v20))
    {
      v18 = v21;
      v19 = v10--;
LABEL_14:
      icu::TimeZoneTransition::setTime((uint64_t)a4, v18);
      icu::TimeZoneTransition::setFrom(a4, *v19);
      icu::TimeZoneTransition::setTo(a4, *v10);
      return 1;
    }
    v19 = v10 - 1;
    if (v20 < v21)
      goto LABEL_14;
  }
  return 0;
}

void icu::SimpleTimeZone::checkTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_1ECD28110);
    if (!*((_BYTE *)this + 120))
      icu::SimpleTimeZone::initTransitionRules(this, a2);
    umtx_unlock((std::mutex **)&unk_1ECD28110);
  }
}

uint64_t icu::SimpleTimeZone::getPreviousTransition(icu::SimpleTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  uint64_t result;
  double Time;
  icu::TimeZoneRule **v10;
  icu::TimeZoneRule *v11;
  uint64_t v12;
  uint64_t RawOffset;
  uint64_t DSTSavings;
  icu::TimeZoneRule *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const icu::TimeZoneRule **v19;
  double v20;
  double v21;
  UErrorCode v22;

  if (!*((_BYTE *)this + 104))
    return 0;
  v22 = U_ZERO_ERROR;
  icu::SimpleTimeZone::checkTransitionRules(this, &v22);
  result = 0;
  if (v22 > U_ZERO_ERROR)
    return result;
  Time = icu::TimeZoneTransition::getTime(*((icu::TimeZoneTransition **)this + 17));
  if (Time > a2 || !(_DWORD)a3 && Time == a2)
    return 0;
  v20 = 0.0;
  v21 = 0.0;
  v11 = (icu::TimeZoneRule *)*((_QWORD *)this + 19);
  v10 = (icu::TimeZoneRule **)((char *)this + 152);
  v12 = (uint64_t)*(v10 - 1);
  RawOffset = icu::TimeZoneRule::getRawOffset(v11);
  DSTSavings = icu::TimeZoneRule::getDSTSavings(*v10);
  LODWORD(v12) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v12 + 80))(v12, RawOffset, DSTSavings, a3, &v21, a2);
  v15 = *v10;
  v16 = icu::TimeZoneRule::getRawOffset(*(v10 - 1));
  v17 = icu::TimeZoneRule::getDSTSavings(*(v10 - 1));
  result = (*(uint64_t (**)(icu::TimeZoneRule *, uint64_t, uint64_t, uint64_t, double *, double))(*(_QWORD *)v15 + 80))(v15, v16, v17, a3, &v20, a2);
  if ((_DWORD)v12)
  {
    if ((_DWORD)result && (v18 = v20, v21 <= v20))
    {
      v19 = v10 - 1;
      if (v20 <= v21)
        return 0;
    }
    else
    {
      v18 = v21;
      v19 = v10--;
    }
LABEL_15:
    icu::TimeZoneTransition::setTime((uint64_t)a4, v18);
    icu::TimeZoneTransition::setFrom(a4, *v19);
    icu::TimeZoneTransition::setTo(a4, *v10);
    return 1;
  }
  if ((_DWORD)result)
  {
    v18 = v20;
    v19 = v10 - 1;
    goto LABEL_15;
  }
  return result;
}

icu::SimpleTimeZone *icu::SimpleTimeZone::initTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  icu::SimpleTimeZone *v2;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  icu::DateTimeRule *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  icu::InitialTimeZoneRule *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  icu::AnnualTimeZoneRule *v24;
  int v25;
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t *v43;
  icu::AnnualTimeZoneRule *v44;
  int v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t DSTSavings;
  double v51;
  double v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  icu::InitialTimeZoneRule *v56;
  int v57;
  int v58;
  void *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  double v64;
  const icu::TimeZoneRule *v65;
  const icu::TimeZoneRule *v66;
  int v67;
  void *v68;
  void *v69;
  unint64_t v70;
  uint64_t *v71;
  double v72;
  double v73;
  _BYTE v74[64];
  UChar *v75[8];
  UChar *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    v2 = this;
    if (!*((_BYTE *)this + 120))
    {
      icu::SimpleTimeZone::deleteTransitionRules(this);
      v77 = 0u;
      v80 = 0;
      v79 = 0u;
      v78 = 0u;
      v76 = (UChar *)off_1E2256B38;
      LOWORD(v77) = 2;
      icu::UnicodeString::operator=(&v76, (UChar **)v2 + 1);
      if (*((_BYTE *)v2 + 104))
      {
        v72 = 0.0;
        v73 = 0.0;
        v5 = *((_DWORD *)v2 + 20);
        if (v5 == 1)
          v6 = 1;
        else
          v6 = 2 * (v5 == 2);
        v7 = (uint64_t *)(*((_DWORD *)v2 + 27) - 1);
        switch(*((_DWORD *)v2 + 27))
        {
          case 1:
            v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v8)
              goto LABEL_28;
            v9 = (icu::DateTimeRule *)v8;
            icu::DateTimeRule::DateTimeRule((uint64_t)v8, *((char *)v2 + 72), *((char *)v2 + 73), *((_DWORD *)v2 + 19), v6);
            goto LABEL_20;
          case 2:
            v16 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v16)
              goto LABEL_28;
            v9 = (icu::DateTimeRule *)v16;
            icu::DateTimeRule::DateTimeRule((uint64_t)v16, *((char *)v2 + 72), *((char *)v2 + 73), *((char *)v2 + 74), *((_DWORD *)v2 + 19), v6);
            goto LABEL_20;
          case 3:
            v17 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v17)
              goto LABEL_28;
            v9 = (icu::DateTimeRule *)v17;
            v18 = *((char *)v2 + 72);
            v19 = *((char *)v2 + 73);
            v20 = *((char *)v2 + 74);
            v21 = *((_DWORD *)v2 + 19);
            v22 = 1;
            goto LABEL_19;
          case 4:
            v17 = icu::UMemory::operator new(v7, (icu::UMemory *)0x28, v4);
            if (!v17)
            {
LABEL_28:
              v15 = 7;
LABEL_30:
              *a2 = v15;
              return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
            }
            v9 = (icu::DateTimeRule *)v17;
            v18 = *((char *)v2 + 72);
            v19 = *((char *)v2 + 73);
            v20 = *((char *)v2 + 74);
            v21 = *((_DWORD *)v2 + 19);
            v22 = 0;
LABEL_19:
            icu::DateTimeRule::DateTimeRule((uint64_t)v17, v18, v19, v20, v22, v21, v6);
LABEL_20:
            v23 = icu::UMemory::operator new(v11, (icu::UMemory *)0x60, v10);
            if (!v23)
            {
              *((_QWORD *)v2 + 19) = 0;
              break;
            }
            v24 = (icu::AnnualTimeZoneRule *)v23;
            icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(DST)");
            icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
            v25 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)v2 + 64))(v2);
            v26 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)v2 + 104))(v2);
            icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v24, v75, v25, v26, v9, *((_DWORD *)v2 + 24), 0x7FFFFFFF);
            *((_QWORD *)v2 + 19) = v24;
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v75);
            icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v74);
            v29 = *((_QWORD *)v2 + 19);
            if (!v29)
              break;
            v30 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)v2 + 64))(v2);
            (*(void (**)(uint64_t, uint64_t, _QWORD, double *))(*(_QWORD *)v29 + 56))(v29, v30, 0, &v72);
            v32 = *((_DWORD *)v2 + 21);
            if (v32 == 1)
              v33 = 1;
            else
              v33 = 2 * (v32 == 2);
            v34 = (uint64_t *)(*((_DWORD *)v2 + 28) - 1);
            switch(*((_DWORD *)v2 + 28))
            {
              case 1:
                v35 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v35)
                  goto LABEL_55;
                v9 = (icu::DateTimeRule *)v35;
                icu::DateTimeRule::DateTimeRule((uint64_t)v35, *((char *)v2 + 88), *((char *)v2 + 89), *((_DWORD *)v2 + 23), v33);
                break;
              case 2:
                v36 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v36)
                  goto LABEL_55;
                v9 = (icu::DateTimeRule *)v36;
                icu::DateTimeRule::DateTimeRule((uint64_t)v36, *((char *)v2 + 88), *((char *)v2 + 89), *((char *)v2 + 90), *((_DWORD *)v2 + 23), v33);
                break;
              case 3:
                v37 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v37)
                  goto LABEL_55;
                v9 = (icu::DateTimeRule *)v37;
                v38 = *((char *)v2 + 88);
                v39 = *((char *)v2 + 89);
                v40 = *((char *)v2 + 90);
                v41 = *((_DWORD *)v2 + 23);
                v42 = 1;
                goto LABEL_38;
              case 4:
                v37 = icu::UMemory::operator new(v34, (icu::UMemory *)0x28, v31);
                if (!v37)
                  goto LABEL_55;
                v9 = (icu::DateTimeRule *)v37;
                v38 = *((char *)v2 + 88);
                v39 = *((char *)v2 + 89);
                v40 = *((char *)v2 + 90);
                v41 = *((_DWORD *)v2 + 23);
                v42 = 0;
LABEL_38:
                icu::DateTimeRule::DateTimeRule((uint64_t)v37, v38, v39, v40, v42, v41, v33);
                break;
              default:
                break;
            }
            v43 = icu::UMemory::operator new(v34, (icu::UMemory *)0x60, v31);
            if (!v43)
            {
              *((_QWORD *)v2 + 18) = 0;
              break;
            }
            v44 = (icu::AnnualTimeZoneRule *)v43;
            icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(STD)");
            icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
            v45 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)v2 + 64))(v2);
            icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v44, v75, v45, 0, v9, *((_DWORD *)v2 + 24), 0x7FFFFFFF);
            *((_QWORD *)v2 + 18) = v44;
            icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)v75);
            icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)v74);
            v48 = *((_QWORD *)v2 + 18);
            if (!v48)
              break;
            v49 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)v2 + 64))(v2);
            DSTSavings = icu::TimeZoneRule::getDSTSavings(*((icu::TimeZoneRule **)v2 + 19));
            (*(void (**)(uint64_t, uint64_t, uint64_t, double *))(*(_QWORD *)v48 + 56))(v48, v49, DSTSavings, &v73);
            v52 = v72;
            v51 = v73;
            v55 = icu::UMemory::operator new(v54, (icu::UMemory *)0x50, v53);
            v56 = (icu::InitialTimeZoneRule *)v55;
            if (v51 >= v52)
            {
              if (!v55)
                goto LABEL_54;
              icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(STD)");
              icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
              v67 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)v2 + 64))(v2);
              icu::InitialTimeZoneRule::InitialTimeZoneRule(v56, v75, v67, 0);
              *((_QWORD *)v2 + 16) = v56;
              icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)v75);
              icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v74);
              v71 = (uint64_t *)*((_QWORD *)v2 + 16);
              if (!v71)
                break;
              v63 = icu::UMemory::operator new(v71, (icu::UMemory *)0x20, v70);
              if (v63)
              {
                v64 = v72;
                v65 = (const icu::TimeZoneRule *)*((_QWORD *)v2 + 16);
                v66 = (const icu::TimeZoneRule *)*((_QWORD *)v2 + 19);
                goto LABEL_51;
              }
            }
            else
            {
              if (!v55)
                goto LABEL_54;
              icu::UnicodeString::UnicodeString((uint64_t)v74, (uint64_t)L"(DST)");
              icu::operator+((uint64_t)&v76, (uint64_t)v74, (uint64_t)v75);
              v57 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)v2 + 64))(v2);
              v58 = icu::TimeZoneRule::getDSTSavings(*((icu::TimeZoneRule **)v2 + 19));
              icu::InitialTimeZoneRule::InitialTimeZoneRule(v56, v75, v57, v58);
              *((_QWORD *)v2 + 16) = v56;
              icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)v75);
              icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v74);
              v62 = (uint64_t *)*((_QWORD *)v2 + 16);
              if (!v62)
                break;
              v63 = icu::UMemory::operator new(v62, (icu::UMemory *)0x20, v61);
              if (v63)
              {
                v64 = v73;
                v65 = (const icu::TimeZoneRule *)*((_QWORD *)v2 + 16);
                v66 = (const icu::TimeZoneRule *)*((_QWORD *)v2 + 18);
LABEL_51:
                v63 = (uint64_t *)icu::TimeZoneTransition::TimeZoneTransition((icu::TimeZoneTransition *)v63, v64, v65, v66);
              }
            }
            *((_QWORD *)v2 + 17) = v63;
            if (v63)
              goto LABEL_12;
            break;
          default:
            v15 = 27;
            goto LABEL_30;
        }
      }
      else
      {
        v12 = icu::UMemory::operator new((uint64_t *)*((unsigned __int8 *)v2 + 104), (icu::UMemory *)0x50, v4);
        if (v12)
        {
          v13 = (icu::InitialTimeZoneRule *)v12;
          v14 = (*(uint64_t (**)(icu::SimpleTimeZone *))(*(_QWORD *)v2 + 64))(v2);
          icu::InitialTimeZoneRule::InitialTimeZoneRule(v13, &v76, v14, 0);
          *((_QWORD *)v2 + 16) = v13;
LABEL_12:
          v15 = 1;
          *((_BYTE *)v2 + 120) = 1;
          return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
        }
LABEL_54:
        *((_QWORD *)v2 + 16) = 0;
      }
LABEL_55:
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      icu::SimpleTimeZone::deleteTransitionRules(v2);
      return (icu::SimpleTimeZone *)icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v76);
    }
  }
  return this;
}

uint64_t icu::SimpleTimeZone::countTransitionRules(icu::SimpleTimeZone *this, UErrorCode *a2)
{
  return 2 * (*((_BYTE *)this + 104) != 0);
}

void icu::SimpleTimeZone::getTimeZoneRules(icu::SimpleTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  const icu::TimeZoneRule *v10;
  int v11;

  if (*(int *)a5 <= 0)
  {
    icu::SimpleTimeZone::checkTransitionRules(this, a5);
    if (*(int *)a5 <= 0)
    {
      *a2 = (const icu::InitialTimeZoneRule *)*((_QWORD *)this + 16);
      v10 = (const icu::TimeZoneRule *)*((_QWORD *)this + 18);
      if (v10)
      {
        v11 = *a4;
        if (*a4 < 1)
        {
          LODWORD(v10) = 0;
        }
        else
        {
          *a3 = v10;
          LODWORD(v10) = 1;
        }
        if ((int)v10 < v11)
        {
          a3[v10] = (const icu::TimeZoneRule *)*((_QWORD *)this + 19);
          LODWORD(v10) = (_DWORD)v10 + 1;
        }
      }
      *a4 = (int)v10;
    }
  }
}

void *icu::SimpleDateFormat::getStaticClassID(icu::SimpleDateFormat *this)
{
  return &unk_1EE009DE8;
}

void *icu::SimpleDateFormat::getDynamicClassID(icu::SimpleDateFormat *this)
{
  return &unk_1EE009DE8;
}

void icu::SimpleDateFormat::NSOverride::~NSOverride(icu::SimpleDateFormat::NSOverride *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if (v1)
    icu::SharedObject::removeRef(v1);
}

{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if (v1)
    icu::SharedObject::removeRef(v1);
}

void icu::SimpleDateFormat::NSOverride::free(icu::SimpleDateFormat::NSOverride *this)
{
  icu::SimpleDateFormat::NSOverride *v1;
  icu::SimpleDateFormat::NSOverride *v2;

  if (this)
  {
    v1 = this;
    do
    {
      v2 = (icu::SimpleDateFormat::NSOverride *)*((_QWORD *)v1 + 2);
      if (*(_QWORD *)v1)
        icu::SharedObject::removeRef(*(_QWORD **)v1);
      icu::UMemory::operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

uint64_t icu::SimpleDateFormat::getNumberFormatByIndex(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 800);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8 * a2)) != 0)
    v4 = v3 + 24;
  else
    v4 = a1 + 336;
  return *(_QWORD *)v4;
}

void icu::SimpleDateFormat::~SimpleDateFormat(icu::SimpleDateFormat *this)
{
  void (**v2)(icu::SimpleDateFormat *__hidden);
  icu::DateFormatSymbols *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;

  v2 = off_1E2266590;
  *(_QWORD *)this = off_1E2266590;
  v3 = (icu::DateFormatSymbols *)*((_QWORD *)this + 96);
  if (v3)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v3);
    icu::UMemory::operator delete(v4);
  }
  v5 = (char *)*((_QWORD *)this + 100);
  if (v5)
    sub_18BD742D4(v5);
  v6 = *((_QWORD *)this + 97);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (void *)*((_QWORD *)this + 101);
  if (v7)
  {
    icu::number::SimpleNumberFormatter::cleanup(*((icu::number::SimpleNumberFormatter **)this + 101), v2);
    icu::UMemory::operator delete(v7);
  }
  v8 = *((_QWORD *)this + 103);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  icu::Locale::~Locale((icu::SimpleDateFormat *)((char *)this + 544));
  icu::UnicodeString::~UnicodeString(v9, (icu::SimpleDateFormat *)((char *)this + 480));
  icu::UnicodeString::~UnicodeString(v10, (icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::~UnicodeString(v11, (icu::SimpleDateFormat *)((char *)this + 352));
  icu::DateFormat::~DateFormat(this);
}

{
  void *v1;

  icu::SimpleDateFormat::~SimpleDateFormat(this);
  icu::UMemory::operator delete(v1);
}

void sub_18BD742D4(char *a1)
{
  uint64_t i;
  _QWORD *v3;

  for (i = 0; i != 304; i += 8)
  {
    v3 = *(_QWORD **)&a1[i];
    if (v3)
    {
      icu::SharedObject::removeRef(v3);
      *(_QWORD *)&a1[i] = 0;
    }
  }
  uprv_free(a1);
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  _QWORD *v4;
  icu::Locale *v5;
  uint64_t *Default;

  v4 = icu::DateFormat::DateFormat(this);
  *v4 = off_1E2266590;
  v4[44] = off_1E2256B38;
  *((_WORD *)v4 + 180) = 2;
  v4[52] = off_1E2256B38;
  *((_WORD *)v4 + 212) = 2;
  v4[60] = off_1E2256B38;
  *((_WORD *)v4 + 244) = 2;
  v5 = (icu::Locale *)(v4 + 68);
  Default = icu::Locale::getDefault((icu::Locale *)v4);
  icu::Locale::Locale(v5, (uint64_t)Default);
  *((_QWORD *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::construct((UChar **)this, 3u, 7, (uint64_t)v5, a2);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::initializeBooleanAttributes(icu::SimpleDateFormat *this)
{
  int v3;

  v3 = 0;
  (*(void (**)(icu::SimpleDateFormat *, _QWORD, uint64_t, int *))(*(_QWORD *)this + 216))(this, 0, 1, &v3);
  (*(void (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(_QWORD *)this + 216))(this, 1, 1, &v3);
  (*(void (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(_QWORD *)this + 216))(this, 2, 1, &v3);
  return (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, uint64_t, int *))(*(_QWORD *)this + 216))(this, 3, 1, &v3);
}

void icu::SimpleDateFormat::construct(UChar **a1, unsigned int a2, signed int a3, uint64_t a4, UErrorCode *a5)
{
  UChar *v10;
  const char *v11;
  _QWORD *v12;
  _QWORD *v13;
  const UChar *StringByKeyWithFallback;
  const UChar *v15;
  icu::CharString *v16;
  _QWORD *v17;
  _QWORD *v18;
  UErrorCode v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  _QWORD *v24;
  int v25;
  uint64_t LocaleByType;
  const char *v27;
  const char *v28;
  UErrorCode *v29;
  uint64_t *v30;
  icu::CharString *v31;
  _QWORD *v32;
  UErrorCode v33;
  int v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void **v38;
  signed int v39;
  uint64_t v40;
  void *v41;
  const UChar **v42;
  void *v43;
  UChar **v44;
  int v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  const UChar *v49;
  const UChar *StringByIndex;
  char *v51;
  int v52;
  char *v53;
  int v54;
  char *v55;
  int v56;
  int v57;
  char *v58;
  int v59;
  char *v60;
  int v61;
  char *v62;
  int v63;
  BOOL v64;
  int v65;
  _BYTE v66[64];
  void *v67[10];
  _OWORD v68[4];
  _OWORD v69[4];
  _OWORD v70[4];
  char __dst[16];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[29];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 > 0)
    return;
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)a1, 0, (char **)a4, a5);
  if (*(int *)a5 > 0)
    return;
  v65 = 0;
  v78 = 0u;
  memset(v79, 0, sizeof(v79));
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  *(_OWORD *)__dst = 0u;
  if (!ulocimp_setRegionToSupplementalRegion(*(char **)(a4 + 40), __dst, 157))
    strcpy(__dst, *(const char **)(a4 + 40));
  v10 = a1[41];
  if (v10)
    v11 = (const char *)(*(uint64_t (**)(UChar *))(*(_QWORD *)v10 + 184))(v10);
  else
    v11 = 0;
  v64 = 0;
  v12 = ures_open(0, __dst, (int *)a5);
  v13 = ures_openWithCountryFallback(0, *(char **)(a4 + 40), &v64, (int *)a5);
  if (*(int *)a5 <= 0)
  {
    if (v64)
    {
      LODWORD(v67[0]) = -1;
      StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v12, "NumberElements/default", (int *)v67, a5);
      v15 = ures_getStringByKeyWithFallback((uint64_t)v13, "NumberElements/default", (int *)v67, a5);
      if (*(int *)a5 > 0 || u_strcmp(StringByKeyWithFallback, v15))
        v64 = 0;
    }
    if (!v11 || !strcmp(v11, "gregorian"))
    {
      *a5 = U_ZERO_ERROR;
      v20 = ures_getByKeyWithFallback((uint64_t)v12, "calendar/gregorian/DateTimePatterns", 0, a5);
      v21 = ures_getByKeyWithFallback((uint64_t)v13, "calendar/gregorian/DateTimePatterns", 0, a5);
      v23 = 0;
      v22 = 1;
    }
    else
    {
      memset(v67, 0, 64);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v62, "calendar/");
      v67[0] = (void *)((unint64_t)v67 | 0xD);
      LODWORD(v67[1]) = 40;
      WORD2(v67[1]) = 0;
      LODWORD(v67[7]) = 0;
      icu::CharString::append((icu::CharString *)v67, v62, v63, a5);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v60, v11);
      v16 = icu::CharString::append((icu::CharString *)v67, v60, v61, a5);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v58, "/DateTimePatterns");
      icu::CharString::append(v16, v58, v59, a5);
      v17 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v12, (char *)v67[0], 0, a5);
      v18 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v13, (char *)v67[0], 0, a5);
      if (BYTE4(v67[1]))
        uprv_free(v67[0]);
      v19 = *a5;
      if (*a5 != U_MISSING_RESOURCE_ERROR)
      {
        v22 = 0;
        v23 = 1;
LABEL_25:
        if (v19 > U_ZERO_ERROR)
        {
LABEL_65:
          if (v18)
            ures_close(v18);
          if (v17)
            ures_close(v17);
          goto LABEL_69;
        }
        v45 = v22;
        v46 = v23;
        if ((int)ures_getSize((uint64_t)v17) <= 8)
        {
          v25 = 3;
LABEL_28:
          *a5 = v25;
          goto LABEL_65;
        }
        v48 = (uint64_t)v17;
        LocaleByType = ures_getLocaleByType((uint64_t)v17, 1, (int *)a5);
        v27 = (const char *)ures_getLocaleByType(v48, 0, (int *)a5);
        v28 = (const char *)LocaleByType;
        v17 = (_QWORD *)v48;
        icu::Format::setLocaleIDs((icu::Format *)a1, v28, v27);
        v30 = icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)a4, a5, v29);
        a1[96] = (UChar *)v30;
        if (*(int *)a5 > 0)
          goto LABEL_65;
        if (!v30)
        {
          v25 = 7;
          goto LABEL_28;
        }
        v57 = 0;
        v44 = a1 + 52;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 52));
        icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 60));
        if (a2 != -1 && a3 != -1)
        {
          memset((char *)v70 + 8, 0, 56);
          *(_QWORD *)&v70[0] = off_1E2256B38;
          WORD4(v70[0]) = 2;
          memset(v69, 0, sizeof(v69));
          icu::SimpleDateFormat::getPatternForTimeStyle((uint64_t)a1, a2, (char **)a4, v48, (icu::UnicodeString *)v70, (int *)a5, (uint64_t)v69);
          if (WORD4(v70[0]) >= 0x20u)
            icu::UnicodeString::operator=(a1 + 60, (UChar **)v70);
          memset(v68, 0, sizeof(v68));
          icu::SimpleDateFormat::getPatternForDateStyle(a3, v48, (uint64_t)v18, &v64, (UChar **)v70, (int *)a5, (uint64_t)v68);
          if (WORD4(v70[0]) >= 0x20u)
            icu::UnicodeString::operator=(v44, (UChar **)v70);
          if ((v46 & 1) != 0)
          {
            memset(&v67[1], 0, 56);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v55, "calendar/");
            v67[0] = (char *)&v67[1] + 5;
            LODWORD(v67[1]) = 40;
            WORD2(v67[1]) = 0;
            LODWORD(v67[7]) = 0;
            icu::CharString::append((icu::CharString *)v67, v55, v56, a5);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v53, v11);
            v31 = icu::CharString::append((icu::CharString *)v67, v53, v54, a5);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v51, "/DateTimePatterns%atTime");
            icu::CharString::append(v31, v51, v52, a5);
            v32 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v12, (char *)v67[0], 0, a5);
            if (BYTE4(v67[1]))
              uprv_free(v67[0]);
            v33 = *a5;
            v34 = v45;
            if (*a5 == U_MISSING_RESOURCE_ERROR)
              v34 = 1;
            if (v34 != 1)
              goto LABEL_53;
            *a5 = U_ZERO_ERROR;
            v35 = ures_getByKeyWithFallback((uint64_t)v12, "calendar/gregorian/DateTimePatterns%atTime", 0, a5);
            if (v32)
              ures_close(v32);
          }
          else
          {
            *a5 = U_ZERO_ERROR;
            v35 = ures_getByKeyWithFallback((uint64_t)v12, "calendar/gregorian/DateTimePatterns%atTime", 0, a5);
          }
          v33 = *a5;
          v32 = (_QWORD *)v35;
LABEL_53:
          v17 = (_QWORD *)v48;
          if (v33 > U_ZERO_ERROR || (int)ures_getSize((uint64_t)v32) < 4)
          {
            *a5 = U_ZERO_ERROR;
            if ((int)ures_getSize(v48) <= 12)
              v39 = 8;
            else
              v39 = a3 + 5;
            v40 = v48;
          }
          else
          {
            v39 = a3 - 4;
            v40 = (uint64_t)v32;
          }
          StringByIndex = ures_getStringByIndex(v40, v39, &v57, (int *)a5);
          icu::UnicodeString::UnicodeString(v66, 1, &StringByIndex);
          v67[1] = off_1E2256B38;
          LOWORD(v67[2]) = 2;
          icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v67, (const icu::UnicodeString *)v66, 2, 2, 0, a5);
          icu::SimpleFormatter::format((icu::SimpleFormatter *)v67, (const icu::UnicodeString *)v69, (const icu::UnicodeString *)v68, (icu::UnicodeString *)(a1 + 44), a5);
          icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v67);
          icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v66);
          v49 = StringByIndex;
          v42 = &v49;
          if (v32)
            ures_close(v32);
          icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v68);
          icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v69);
          v38 = (void **)v70;
          goto LABEL_63;
        }
        if (a2 == -1)
        {
          if (a3 == -1)
          {
            *a5 = U_INVALID_FORMAT_ERROR;
            v17 = (_QWORD *)v48;
            goto LABEL_64;
          }
          memset(&v67[1], 0, 56);
          v67[0] = off_1E2256B38;
          LOWORD(v67[1]) = 2;
          memset(v70, 0, sizeof(v70));
          v17 = (_QWORD *)v48;
          icu::SimpleDateFormat::getPatternForDateStyle(a3, v48, (uint64_t)v18, &v64, (UChar **)v67, (int *)a5, (uint64_t)v70);
          if (LOWORD(v67[1]) < 0x20u)
            goto LABEL_50;
        }
        else
        {
          memset(&v67[1], 0, 56);
          v67[0] = off_1E2256B38;
          LOWORD(v67[1]) = 2;
          memset(v70, 0, sizeof(v70));
          v17 = (_QWORD *)v48;
          icu::SimpleDateFormat::getPatternForTimeStyle((uint64_t)a1, a2, (char **)a4, v48, (icu::UnicodeString *)v67, (int *)a5, (uint64_t)v70);
          if (LOWORD(v67[1]) < 0x20u)
          {
LABEL_50:
            icu::UnicodeString::operator=(a1 + 44, (UChar **)v70);
            icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v70);
            v38 = v67;
LABEL_63:
            icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v38);
LABEL_64:
            icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)a1, (const icu::Locale *)a4, a5);
            goto LABEL_65;
          }
        }
        icu::UnicodeString::operator=(v44, (UChar **)v67);
        goto LABEL_50;
      }
      v47 = v18;
      *a5 = U_ZERO_ERROR;
      v20 = ures_getByKeyWithFallback((uint64_t)v12, "calendar/gregorian/DateTimePatterns", 0, a5);
      if (v17)
        ures_close(v17);
      v21 = ures_getByKeyWithFallback((uint64_t)v13, "calendar/gregorian/DateTimePatterns", 0, a5);
      if (v47)
        ures_close(v47);
      v22 = 0;
      v23 = 1;
    }
    v19 = *a5;
    v24 = (_QWORD *)v20;
    v18 = (_QWORD *)v21;
    v17 = v24;
    goto LABEL_25;
  }
LABEL_69:
  if (v13)
    ures_close(v13);
  if (v12)
    ures_close(v12);
}

uint64_t icu::SimpleDateFormat::initializeDefaultCentury(icu::SimpleDateFormat *this)
{
  uint64_t result;
  int v3;

  result = *((_QWORD *)this + 41);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 400))(result);
    *((_BYTE *)this + 816) = v3;
    if (v3)
    {
      *((double *)this + 98) = (*(double (**)(_QWORD))(**((_QWORD **)this + 41) + 408))(*((_QWORD *)this + 41));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 416))(*((_QWORD *)this + 41));
    }
    else
    {
      *((_QWORD *)this + 98) = 0x10000000000000;
      result = 0xFFFFFFFFLL;
    }
    *((_DWORD *)this + 199) = result;
  }
  return result;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UChar **a2, UErrorCode *a3)
{
  _QWORD *v6;
  icu::Locale *v7;
  uint64_t *Default;
  UErrorCode *v9;

  v6 = icu::DateFormat::DateFormat(this);
  *v6 = off_1E2266590;
  v7 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 44), a2);
  *((_QWORD *)this + 52) = off_1E2256B38;
  *((_WORD *)this + 212) = 2;
  *((_QWORD *)this + 60) = off_1E2256B38;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v7);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  *((_QWORD *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a3);
  *((_QWORD *)this + 96) = icu::DateFormatSymbols::createForLocale((icu::SimpleDateFormat *)((char *)this + 544), a3, v9);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a3);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::initializeCalendar(icu::SimpleDateFormat *this, icu::TimeZone *a2, char **a3, UErrorCode *a4)
{
  uint64_t result;

  if (*(int *)a4 >= 1)
    return *((_QWORD *)this + 41);
  if (!a2)
    a2 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a3, 0);
  result = icu::Calendar::createInstance(a2, (icu::TimeZone *)a3, a4, a4);
  *((_QWORD *)this + 41) = result;
  return result;
}

void icu::SimpleDateFormat::initialize(icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  const char *v6;
  const char *v7;
  int KeywordValue;
  UErrorCode *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  icu::DecimalFormat *Instance;
  UErrorCode v14;
  UErrorCode v15;
  uint8_t buf[16];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    *((_BYTE *)this + 795) = 0;
    v6 = getprogname();
    if (v6)
    {
      v7 = v6;
      if (!strncmp(v6, "Wells_Fargo_Mobile_Banking", 0x1AuLL) || !strncmp(v7, "FioSB2", 6uLL))
      {
        *((_BYTE *)this + 795) = 1;
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18BBAA000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "ICU using compatibility space for date formatting", buf, 2u);
        }
      }
    }
    icu::SimpleDateFormat::parsePattern(this);
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v15 = U_ZERO_ERROR;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    v17 = 0u;
    icu::Locale::Locale((icu::Locale *)buf, (uint64_t)a2);
    KeywordValue = icu::Locale::getKeywordValue((char **)buf, "numbers", (char *)&v30, 96, &v15);
    if (v15 <= U_ZERO_ERROR && KeywordValue >= 1 && !((unint64_t)v30 ^ 0x73796164696E6168 | BYTE8(v30)))
    {
      icu::Locale::setKeywordValue((char **)buf, "numbers", 0, &v15);
      icu::UnicodeString::unBogus((uint64_t)this + 416);
      if (*((__int16 *)this + 212) < 0)
        v10 = *((unsigned int *)this + 107);
      else
        v10 = *((unsigned __int16 *)this + 212) >> 5;
      icu::UnicodeString::doReplace((uint64_t)this + 416, 0, v10, (uint64_t)&unk_18BE2AD56, 0, 0xFFFFFFFFLL);
    }
    if ((*((_WORD *)this + 212) & 1) != 0)
    {
      if (*((_BYTE *)this + 794))
      {
        v11 = *((_QWORD *)this + 41);
        if (v11)
        {
          v12 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 184))(v11);
          if (!strcmp(v12, "japanese") && !strcmp((const char *)this + 552, "ja"))
            sub_18BD2FA48((uint64_t)this + 416, (uint64_t)"y", 0xFFFFFFFFLL);
        }
      }
    }
    Instance = icu::NumberFormat::createInstance((char **)buf, a3, v9);
    *((_QWORD *)this + 42) = Instance;
    v14 = *a3;
    if (Instance && v14 <= U_ZERO_ERROR)
    {
      (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)Instance + 288))(Instance);
      icu::SimpleDateFormat::initNumberFormatters(this, a2, a3);
      icu::SimpleDateFormat::initSimpleNumberFormatter(this, a3);
    }
    else if (v14 <= U_ZERO_ERROR)
    {
      *a3 = U_MISSING_RESOURCE_ERROR;
    }
    icu::Locale::~Locale((icu::Locale *)buf);
  }
}

UChar **icu::SimpleDateFormat::SimpleDateFormat(UChar **this, UChar **a2, UChar **a3, UErrorCode *a4)
{
  _QWORD *v8;
  icu::Locale *v9;
  uint64_t *Default;
  UErrorCode *v11;

  v8 = icu::DateFormat::DateFormat((icu::DateFormat *)this);
  *v8 = off_1E2266590;
  v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  this[52] = (UChar *)off_1E2256B38;
  *((_WORD *)this + 212) = 2;
  this[60] = (UChar *)off_1E2256B38;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::Locale *)(this + 68), (uint64_t)Default);
  this[103] = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::copyFrom(this + 52, a3, 0);
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(this + 60));
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)this, 0, (char **)this + 68, a4);
  this[96] = (UChar *)icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)(this + 68), a4, v11);
  icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)this, (const icu::Locale *)(this + 68), a4);
  icu::SimpleDateFormat::initializeDefaultCentury((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::processOverrideString(this, (const icu::Locale *)(this + 68), (const icu::UnicodeString *)a3, 2u, a4);
  return this;
}

void *icu::SimpleDateFormat::processOverrideString(void *this, const icu::Locale *a2, const icu::UnicodeString *a3, unsigned int a4, UErrorCode *a5)
{
  uint64_t v6;
  icu::SimpleDateFormat::NSOverride *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  icu::SimpleDateFormat::NSOverride *v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  const char *v30;
  uint64_t *v31;
  UErrorCode *v32;
  icu::SharedObject *v33;
  UErrorCode v34;
  icu::SharedObject *v35;
  uint64_t v36;
  int v37;
  UChar *v38;
  UChar v39;
  unint64_t v40;
  uint64_t i;
  uint64_t j;
  unsigned int PatternCharIndex;
  void *v44;
  void *v45;
  const char *v46;
  const char *v47;
  uint64_t *v51;
  _OWORD v52[14];
  char v53[25];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[27];
  UChar *v58[9];
  void (**v59)(icu::UnicodeString *__hidden);
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  UChar *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)a3 + 4) & 1) != 0 || *(int *)a5 > 0)
    return this;
  v6 = (uint64_t)this;
  v7 = 0;
  v8 = 0;
  v65 = 0u;
  v68 = 0;
  v67 = 0u;
  v66 = 0u;
  v63 = 0;
  v64 = (UChar *)off_1E2256B38;
  LOWORD(v65) = 2;
  v60 = 0u;
  v47 = (char *)a2 + 8;
  v62 = 0u;
  v61 = 0u;
  v59 = off_1E2256B38;
  LOWORD(v60) = 2;
  v46 = (char *)a2 + 26;
  do
  {
    v9 = *((unsigned __int16 *)a3 + 4);
    if (v8 < 0)
    {
      v11 = 0;
      if ((v9 & 0x8000) != 0)
        v10 = *((_DWORD *)a3 + 3);
      else
        v10 = v9 >> 5;
    }
    else if ((v9 & 0x8000) != 0)
    {
      v10 = *((_DWORD *)a3 + 3);
      if ((int)v10 >= v8)
        v11 = v8;
      else
        v11 = *((_DWORD *)a3 + 3);
    }
    else
    {
      v10 = v9 >> 5;
      if (v10 >= v8)
        v11 = v8;
      else
        v11 = v10;
    }
    v12 = icu::UnicodeString::doIndexOf((uint64_t)a3, 0x3Bu, v11, v10 - v11);
    v13 = v12;
    if (v12 == -1)
    {
      if (*((__int16 *)a3 + 4) < 0)
        v13 = *((_DWORD *)a3 + 3);
      else
        v13 = *((unsigned __int16 *)a3 + 4) >> 5;
    }
    v14 = (v13 - v8);
    memset(v58, 0, 64);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v58, a3, v8, v14);
    if (SLOWORD(v58[1]) < 0)
    {
      v16 = HIDWORD(v58[1]);
      v15 = HIDWORD(v58[1]) & (SHIDWORD(v58[1]) >> 31);
    }
    else
    {
      v15 = 0;
      v16 = LOWORD(v58[1]) >> 5;
    }
    v17 = icu::UnicodeString::doIndexOf((uint64_t)v58, 0x3Du, v15, v16 - v15);
    if (v17 == -1)
    {
      icu::UnicodeString::copyFrom(&v64, v58, 0);
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v59);
      goto LABEL_38;
    }
    v18 = v17;
    icu::UnicodeString::unBogus((uint64_t)&v64);
    v19 = LOWORD(v58[1]) >> 5;
    if (v18 < -1)
    {
      v20 = 0;
LABEL_28:
      v21 = v20;
      goto LABEL_29;
    }
    v21 = v18 + 1;
    if (((uint64_t)v58[1] & 0x8000) != 0)
    {
      v20 = HIDWORD(v58[1]);
      if (SHIDWORD(v58[1]) > v18)
        goto LABEL_29;
      goto LABEL_28;
    }
    v20 = LOWORD(v58[1]) >> 5;
    if (v18 >= v20)
      goto LABEL_28;
LABEL_29:
    if ((v65 & 0x8000u) == 0)
      v22 = (unsigned __int16)v65 >> 5;
    else
      v22 = DWORD1(v65);
    if (SLOWORD(v58[1]) < 0)
      v19 = HIDWORD(v58[1]);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v64, 0, v22, (const icu::UnicodeString *)v58, v21, (v19 - v21));
    icu::UnicodeString::unBogus((uint64_t)&v59);
    if ((v60 & 0x8000u) == 0)
      v23 = (unsigned __int16)v60 >> 5;
    else
      v23 = DWORD1(v60);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v59, 0, v23, (const icu::UnicodeString *)v58, 0, 1);
LABEL_38:
    v24 = icu::UnicodeString::doHashCode((icu::UnicodeString *)&v64);
    v27 = v24;
    if (v7)
    {
      v26 = v7;
      while (*((_DWORD *)v26 + 2) != v24)
      {
        v26 = (icu::SimpleDateFormat::NSOverride *)*((_QWORD *)v26 + 2);
        if (!v26)
          goto LABEL_42;
      }
      v35 = *(icu::SharedObject **)v26;
    }
    else
    {
LABEL_42:
      v51 = 0;
      v28 = icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x18, v25);
      if (!v28)
      {
        v51 = 0;
        *a5 = U_MEMORY_ALLOCATION_ERROR;
        if (v7)
          icu::SimpleDateFormat::NSOverride::free(v7);
        sub_18BD7D3FC((_QWORD ***)&v51);
        goto LABEL_81;
      }
      *v28 = 0;
      *((_DWORD *)v28 + 2) = 0;
      v28[2] = 0;
      v51 = v28;
      v56 = 0u;
      memset(v57, 0, sizeof(v57));
      v54 = 0u;
      v55 = 0u;
      *(_OWORD *)&v53[9] = 0u;
      strcpy(v53, "numbers=");
      icu::UnicodeString::extract((uint64_t)&v64, 0, v14, &v53[8], 92);
      v29 = (uint64_t *)*((_QWORD *)a2 + 26);
      v30 = (char *)v29 + *((int *)a2 + 8);
      memset(v52, 0, sizeof(v52));
      icu::Locale::Locale(v29, (icu::Locale *)v52, v47, v46, v30, v53);
      v31 = v51;
      *((_DWORD *)v51 + 2) = v27;
      v31[2] = (uint64_t)v7;
      v33 = (icu::SharedObject *)sub_18BD7836C((char **)v52, a5, v32);
      sub_18BC4A244(v33, (icu::SharedObject **)v51);
      v34 = *a5;
      if (*(int *)a5 < 1)
      {
        v7 = (icu::SimpleDateFormat::NSOverride *)v51;
        v35 = (icu::SharedObject *)*v51;
        v51 = 0;
      }
      else
      {
        if (v7)
          icu::SimpleDateFormat::NSOverride::free(v7);
        v35 = 0;
      }
      icu::Locale::~Locale((icu::Locale *)v52);
      sub_18BD7D3FC((_QWORD ***)&v51);
      if (v34 > U_ZERO_ERROR)
        goto LABEL_81;
    }
    if ((v60 & 1) != 0)
    {
      if (a4 != 2)
      {
        if (a4 == 1)
          goto LABEL_64;
        v40 = a4;
        if (a4)
          goto LABEL_70;
      }
      for (i = 0; i != 16; ++i)
        sub_18BC4A244(v35, (icu::SharedObject **)(*(_QWORD *)(v6 + 800) + 8 * dword_18BE2B17C[i]));
      v40 = a4;
      if (a4)
      {
LABEL_64:
        for (j = 0; j != 10; ++j)
          sub_18BC4A244(v35, (icu::SharedObject **)(*(_QWORD *)(v6 + 800) + 8 * dword_18BE2B1BC[j]));
      }
    }
    else
    {
      if ((v60 & 0x8000u) == 0)
        v37 = (unsigned __int16)v60 >> 5;
      else
        v37 = DWORD1(v60);
      if (v37)
      {
        v38 = (UChar *)&v60 + 1;
        if ((v60 & 2) == 0)
          v38 = (UChar *)v61;
        v39 = *v38;
      }
      else
      {
        v39 = -1;
      }
      PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v39);
      if (PatternCharIndex == 38)
      {
        v36 = 3;
        *a5 = U_INVALID_FORMAT_ERROR;
        if (v7)
          icu::SimpleDateFormat::NSOverride::free(v7);
LABEL_81:
        icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)v58);
        goto LABEL_82;
      }
      sub_18BC4A244(v35, (icu::SharedObject **)(*(_QWORD *)(v6 + 800) + 8 * PatternCharIndex));
    }
LABEL_70:
    icu::UnicodeString::~UnicodeString((void *)v40, (icu::UnicodeString *)v58);
    v8 = v12 + 1;
  }
  while (v12 != -1);
  if (v7)
    icu::SimpleDateFormat::NSOverride::free(v7);
LABEL_82:
  icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v59);
  return icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v64);
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UChar **a2, const icu::Locale *a3, UErrorCode *a4)
{
  _QWORD *v8;
  UErrorCode *v9;

  v8 = icu::DateFormat::DateFormat(this);
  *v8 = off_1E2266590;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((_QWORD *)this + 52) = off_1E2256B38;
  *((_WORD *)this + 212) = 2;
  *((_QWORD *)this + 60) = off_1E2256B38;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)a3);
  *((_QWORD *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a4);
  *((_QWORD *)this + 96) = icu::DateFormatSymbols::createForLocale((icu::SimpleDateFormat *)((char *)this + 544), a4, v9);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

UChar **icu::SimpleDateFormat::SimpleDateFormat(UChar **this, UChar **a2, UChar **a3, const icu::Locale *a4, UErrorCode *a5)
{
  _QWORD *v10;
  UErrorCode *v11;

  v10 = icu::DateFormat::DateFormat((icu::DateFormat *)this);
  *v10 = off_1E2266590;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v10 + 44), a2);
  this[52] = (UChar *)off_1E2256B38;
  *((_WORD *)this + 212) = 2;
  this[60] = (UChar *)off_1E2256B38;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::Locale *)(this + 68), (uint64_t)a4);
  this[103] = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::copyFrom(this + 52, a3, 0);
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(this + 60));
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::initializeCalendar((icu::SimpleDateFormat *)this, 0, (char **)this + 68, a5);
  this[96] = (UChar *)icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)(this + 68), a5, v11);
  icu::SimpleDateFormat::initialize((icu::SimpleDateFormat *)this, (const icu::Locale *)(this + 68), a5);
  icu::SimpleDateFormat::initializeDefaultCentury((icu::SimpleDateFormat *)this);
  icu::SimpleDateFormat::processOverrideString(this, a4, (const icu::UnicodeString *)a3, 2u, a5);
  return this;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UChar **a2, icu::DateFormatSymbols *a3, UErrorCode *a4)
{
  _QWORD *v8;
  icu::Locale *v9;
  uint64_t *Default;

  v8 = icu::DateFormat::DateFormat(this);
  *v8 = off_1E2266590;
  v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((_QWORD *)this + 52) = off_1E2256B38;
  *((_WORD *)this + 212) = 2;
  *((_QWORD *)this + 60) = off_1E2256B38;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  *((_QWORD *)this + 96) = a3;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 103) = 0;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a4);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, UChar **a2, const icu::DateFormatSymbols *a3, UErrorCode *a4)
{
  _QWORD *v8;
  icu::Locale *v9;
  uint64_t *Default;
  unint64_t v11;
  uint64_t *v12;
  icu::DateFormatSymbols *v13;

  v8 = icu::DateFormat::DateFormat(this);
  *v8 = off_1E2266590;
  v9 = icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 44), a2);
  *((_QWORD *)this + 52) = off_1E2256B38;
  *((_WORD *)this + 212) = 2;
  *((_QWORD *)this + 60) = off_1E2256B38;
  *((_WORD *)this + 244) = 2;
  Default = icu::Locale::getDefault(v9);
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)Default);
  v13 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v12, (icu::UMemory *)0x4F8, v11);
  if (v13)
    v13 = icu::DateFormatSymbols::DateFormatSymbols(v13, a3);
  *((_QWORD *)this + 96) = v13;
  *((_QWORD *)this + 97) = 0;
  *((_QWORD *)this + 103) = 0;
  *((_OWORD *)this + 50) = 0u;
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
  icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a4);
  icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a4);
  icu::SimpleDateFormat::initializeDefaultCentury(this);
  return this;
}

uint64_t icu::SimpleDateFormat::SimpleDateFormat(uint64_t a1, unsigned int a2, signed int a3, uint64_t a4, UErrorCode *a5)
{
  _QWORD *v10;
  uint64_t v11;

  v10 = icu::DateFormat::DateFormat((icu::DateFormat *)a1);
  *v10 = off_1E2266590;
  v10[44] = off_1E2256B38;
  *((_WORD *)v10 + 180) = 2;
  v10[52] = off_1E2256B38;
  *((_WORD *)v10 + 212) = 2;
  v10[60] = off_1E2256B38;
  *((_WORD *)v10 + 244) = 2;
  v11 = (uint64_t)(v10 + 68);
  icu::Locale::Locale((icu::Locale *)(v10 + 68), a4);
  *(_QWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes((icu::SimpleDateFormat *)a1);
  icu::SimpleDateFormat::construct((UChar **)a1, a2, a3, v11, a5);
  if (*(int *)a5 <= 0)
    icu::SimpleDateFormat::initializeDefaultCentury((icu::SimpleDateFormat *)a1);
  return a1;
}

icu::SimpleDateFormat *icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  _QWORD *v6;
  UErrorCode *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  void *v11;
  _QWORD *v12;
  icu::DateFormatSymbols *v13;

  v6 = icu::DateFormat::DateFormat(this);
  *v6 = off_1E2266590;
  icu::UnicodeString::UnicodeString((uint64_t)(v6 + 44), (uint64_t)&unk_18BE2AD3A);
  *((_QWORD *)this + 52) = off_1E2256B38;
  *((_WORD *)this + 212) = 2;
  *((_QWORD *)this + 60) = off_1E2256B38;
  *((_WORD *)this + 244) = 2;
  icu::Locale::Locale((icu::SimpleDateFormat *)((char *)this + 544), (uint64_t)a2);
  *((_QWORD *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  if (*(int *)a3 <= 0)
  {
    icu::SimpleDateFormat::initializeBooleanAttributes(this);
    icu::SimpleDateFormat::initializeCalendar(this, 0, (char **)this + 68, a3);
    v8 = icu::DateFormatSymbols::createForLocale((icu::SimpleDateFormat *)((char *)this + 544), a3, v7);
    *((_QWORD *)this + 96) = v8;
    v10 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v10 >= 1)
    {
      *a3 = U_ZERO_ERROR;
      if (v8)
      {
        icu::DateFormatSymbols::~DateFormatSymbols((icu::DateFormatSymbols *)v8);
        icu::UMemory::operator delete(v11);
      }
      v12 = (_QWORD *)((char *)this + 768);
      v13 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v10, (icu::UMemory *)0x4F8, v9);
      if (!v13)
      {
        *v12 = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        return this;
      }
      *v12 = icu::DateFormatSymbols::DateFormatSymbols(v13, a3);
    }
    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 480));
    icu::SimpleDateFormat::initialize(this, (icu::SimpleDateFormat *)((char *)this + 544), a3);
    if (*(int *)a3 <= 0)
      icu::SimpleDateFormat::initializeDefaultCentury(this);
  }
  return this;
}

uint64_t icu::SimpleDateFormat::SimpleDateFormat(icu::SimpleDateFormat *this, const icu::SimpleDateFormat *a2)
{
  _QWORD *v4;
  void *v5;

  v4 = icu::DateFormat::DateFormat(this, a2);
  *v4 = off_1E2266590;
  v4[44] = off_1E2256B38;
  *((_WORD *)v4 + 180) = 2;
  v4[52] = off_1E2256B38;
  *((_WORD *)v4 + 212) = 2;
  v4[60] = off_1E2256B38;
  *((_WORD *)v4 + 244) = 2;
  icu::Locale::Locale((icu::Locale *)(v4 + 68), (uint64_t)a2 + 544);
  *((_QWORD *)this + 103) = 0;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 50) = 0u;
  icu::SimpleDateFormat::initializeBooleanAttributes(this);
  return icu::SimpleDateFormat::operator=((uint64_t)this, (uint64_t)a2, v5);
}

uint64_t icu::SimpleDateFormat::operator=@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void *v5;
  unint64_t v6;
  icu::DateFormatSymbols *v7;
  void *v8;
  uint64_t *v9;
  icu::DateFormatSymbols *v10;
  uint64_t v11;
  const icu::TimeZoneFormat *v12;
  unint64_t v13;
  uint64_t *v14;
  icu::TimeZoneFormat *v15;
  uint64_t v16;
  char *v17;
  _OWORD *v18;
  uint64_t v19;
  UErrorCode v21;

  if (a1 != a2)
  {
    v5 = *(void **)(a1 + 808);
    if (v5)
    {
      icu::number::SimpleNumberFormatter::cleanup(*(icu::number::SimpleNumberFormatter **)(a1 + 808), a3);
      icu::UMemory::operator delete(v5);
    }
    *(_QWORD *)(a1 + 808) = 0;
    icu::DateFormat::operator=((_QWORD *)a1, (_QWORD *)a2);
    icu::UnicodeString::operator=((UChar **)(a1 + 416), (UChar **)(a2 + 416));
    icu::UnicodeString::operator=((UChar **)(a1 + 480), (UChar **)(a2 + 480));
    v7 = *(icu::DateFormatSymbols **)(a1 + 768);
    if (v7)
    {
      icu::DateFormatSymbols::~DateFormatSymbols(v7);
      icu::UMemory::operator delete(v8);
    }
    *(_QWORD *)(a1 + 768) = 0;
    v9 = *(uint64_t **)(a2 + 768);
    if (v9)
    {
      v10 = (icu::DateFormatSymbols *)icu::UMemory::operator new(v9, (icu::UMemory *)0x4F8, v6);
      if (v10)
        v10 = icu::DateFormatSymbols::DateFormatSymbols(v10, *(const icu::DateFormatSymbols **)(a2 + 768));
      *(_QWORD *)(a1 + 768) = v10;
    }
    *(_QWORD *)(a1 + 784) = *(_QWORD *)(a2 + 784);
    *(_DWORD *)(a1 + 796) = *(_DWORD *)(a2 + 796);
    *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
    icu::UnicodeString::operator=((UChar **)(a1 + 352), (UChar **)(a2 + 352));
    *(_WORD *)(a1 + 792) = *(_WORD *)(a2 + 792);
    *(_BYTE *)(a1 + 795) = *(_BYTE *)(a2 + 795);
    icu::Locale::operator=((icu::Locale *)(a1 + 544), a2 + 544);
    v11 = *(_QWORD *)(a1 + 776);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    *(_QWORD *)(a1 + 776) = 0;
    umtx_lock((icu::UMutex *)&unk_1ECD28160);
    v12 = *(const icu::TimeZoneFormat **)(a2 + 776);
    umtx_unlock((std::mutex **)&unk_1ECD28160);
    if (v12)
    {
      v15 = (icu::TimeZoneFormat *)icu::UMemory::operator new(v14, (icu::UMemory *)0x530, v13);
      if (v15)
        v15 = (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(v15, v12);
      *(_QWORD *)(a1 + 776) = v15;
    }
    v16 = *(_QWORD *)(a2 + 824);
    if (v16)
      *(_QWORD *)(a1 + 824) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    v17 = *(char **)(a1 + 800);
    if (v17)
    {
      sub_18BD742D4(v17);
      *(_QWORD *)(a1 + 800) = 0;
    }
    if (*(_QWORD *)(a2 + 800))
    {
      v18 = uprv_malloc(0x130uLL);
      if (v18)
      {
        v19 = 0;
        v18[17] = 0u;
        v18[18] = 0u;
        v18[15] = 0u;
        v18[16] = 0u;
        v18[13] = 0u;
        v18[14] = 0u;
        v18[11] = 0u;
        v18[12] = 0u;
        v18[9] = 0u;
        v18[10] = 0u;
        v18[7] = 0u;
        v18[8] = 0u;
        v18[5] = 0u;
        v18[6] = 0u;
        v18[3] = 0u;
        v18[4] = 0u;
        v18[1] = 0u;
        v18[2] = 0u;
        *v18 = 0u;
        *(_QWORD *)(a1 + 800) = v18;
        do
        {
          sub_18BC4A244(*(icu::SharedObject **)(*(_QWORD *)(a2 + 800) + v19), (icu::SharedObject **)(*(_QWORD *)(a1 + 800) + v19));
          v19 += 8;
        }
        while (v19 != 304);
      }
      else
      {
        *(_QWORD *)(a1 + 800) = 0;
      }
    }
    v21 = U_ZERO_ERROR;
    icu::SimpleDateFormat::initSimpleNumberFormatter((icu::SimpleDateFormat *)a1, &v21);
  }
  return a1;
}

void icu::SimpleDateFormat::initSimpleNumberFormatter(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  const void *v3;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  if (*(int *)a2 <= 0)
  {
    v3 = (const void *)*((_QWORD *)this + 42);
    if (v3)
    {
      if (v5)
      {
        v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 320))(v5);
        if (v6)
        {
          v9 = v6;
          v10 = icu::UMemory::operator new(v8, (icu::UMemory *)0x20, v7);
          if (v10)
          {
            v11 = v10;
            icu::number::SimpleNumberFormatter::forLocaleAndSymbolsAndGroupingStrategy((icu::SimpleDateFormat *)((char *)this + 544), v9, 0, (int *)a2, v10);
            *((_QWORD *)this + 101) = v11;
          }
          else
          {
            *((_QWORD *)this + 101) = 0;
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
      }
    }
  }
}

icu::SimpleDateFormat *icu::SimpleDateFormat::clone@<X0>(icu::SimpleDateFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::SimpleDateFormat *result;

  result = (icu::SimpleDateFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x340, a2);
  if (result)
    return (icu::SimpleDateFormat *)icu::SimpleDateFormat::SimpleDateFormat(result, this);
  return result;
}

uint64_t icu::SimpleDateFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = icu::DateFormat::operator==(a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *(unsigned __int16 *)(a1 + 360);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 360) & 1) == 0)
      return 0;
    goto LABEL_14;
  }
  if ((v5 & 0x8000) != 0)
    v6 = *(_DWORD *)(a1 + 364);
  else
    v6 = v5 >> 5;
  result = 0;
  v7 = *(unsigned __int16 *)(a2 + 360);
  if ((v7 & 0x8000u) == 0)
    v8 = v7 >> 5;
  else
    v8 = *(_DWORD *)(a2 + 364);
  if ((v7 & 1) == 0 && v6 == v8)
  {
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 352), (const icu::UnicodeString *)(a2 + 352), v6);
    if ((_DWORD)result)
    {
LABEL_14:
      result = *(_QWORD *)(a1 + 768);
      if (!result)
        return result;
      v9 = *(_QWORD *)(a2 + 768);
      if (v9)
      {
        result = icu::DateFormatSymbols::operator==(result, v9);
        if (!(_DWORD)result)
          return result;
        if (*(unsigned __int8 *)(a1 + 816) == *(unsigned __int8 *)(a2 + 816)
          && *(double *)(a1 + 784) == *(double *)(a2 + 784))
        {
          v10 = *(_QWORD *)(a1 + 776);
          v11 = *(_QWORD *)(a2 + 776);
          if (v10)
          {
            if (v11)
            {
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
              if (!(_DWORD)result)
                return result;
              goto LABEL_26;
            }
          }
          else if (!v11)
          {
LABEL_26:
            result = sub_18BBED900(a1 + 416, a2 + 416);
            if ((_DWORD)result)
            {
              result = sub_18BBED900(a1 + 480, a2 + 480);
              if ((_DWORD)result)
                return (*(_BYTE *)(a1 + 795) != 0) ^ (*(_BYTE *)(a2 + 795) == 0);
            }
            return result;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t icu::SimpleDateFormat::getPatternForTimeStyle@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, char **a3@<X2>, uint64_t a4@<X3>, icu::UnicodeString *a5@<X4>, int *a6@<X5>, uint64_t a7@<X8>)
{
  char *BaseName;
  int v15;
  uint64_t result;
  int v17;
  icu::DateTimePatternGenerator *v18;
  void *v19;
  void *v20;
  void *v21;
  __int16 *v22;
  UErrorCode v23;
  UErrorCode v24;
  _BYTE v25[64];
  _OWORD v26[4];
  char __s2[8];
  _QWORD v28[2];
  char v29[168];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a7 + 8) = 0u;
  *(_QWORD *)(a7 + 56) = 0;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 24) = 0u;
  *(_QWORD *)a7 = off_1E2256B38;
  *(_WORD *)(a7 + 8) = 2;
  if (a2 <= 3)
  {
    memset(v29, 0, 157);
    BaseName = v29;
    v15 = ulocimp_setRegionToSupplementalRegion(a3[5], v29, 157);
    if (*a6 > 0 || v15 <= 0)
      BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)a3);
    v24 = U_ZERO_ERROR;
    result = icu::Locale::getKeywordValue(a3, "hours", 0, 0, &v24);
    if (BaseName)
    {
      if (*BaseName)
      {
        v17 = result;
        result = strcmp(BaseName, "und");
        if ((_DWORD)result)
        {
          v23 = U_ZERO_ERROR;
          result = icu::Format::getLocaleID(a1, 1, (int *)&v23);
          if (v17 > 0 || v23 <= U_ZERO_ERROR && (result = strcmp((const char *)result, BaseName), (_DWORD)result))
          {
            *(_QWORD *)__s2 = 0;
            memset(v28, 0, 14);
            uloc_minimizeSubtags(BaseName, __s2, 22, &v23);
            BYTE5(v28[1]) = 0;
            result = icu::Format::getLocaleID(a1, 0, (int *)&v23);
            if (v23 <= U_ZERO_ERROR)
            {
              result = strcmp((const char *)result, __s2);
              if (!(_DWORD)result && v17 <= 0)
                goto LABEL_20;
            }
            else if (v17 < 1)
            {
              goto LABEL_20;
            }
            result = (uint64_t)icu::DateTimePatternGenerator::createInstance((const char **)a3, &v23, (UErrorCode *)1);
            v18 = (icu::DateTimePatternGenerator *)result;
            if (v23 <= U_ZERO_ERROR)
            {
              memset(v26, 0, sizeof(v26));
              v22 = off_1E22666D0[a2];
              icu::UnicodeString::UnicodeString(v26, 1, &v22);
              icu::DateTimePatternGenerator::getBestPattern(v18, (const icu::UnicodeString *)v26, &v23, (icu::UnicodeString *)v25);
              icu::UnicodeString::operator=((icu::UnicodeString *)a7, (icu::UnicodeString *)v25);
              icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v25);
              result = (uint64_t)icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
            }
            if (v18)
              result = (*(uint64_t (**)(icu::DateTimePatternGenerator *))(*(_QWORD *)v18 + 8))(v18);
          }
        }
      }
    }
LABEL_20:
    if (*(unsigned __int16 *)(a7 + 8) > 0x1Fu)
      return result;
  }
  icu::SimpleDateFormat::getPatternString(a2, a4, a5, a6, (uint64_t)v29);
  icu::UnicodeString::operator=((icu::UnicodeString *)a7, (icu::UnicodeString *)v29);
  return (uint64_t)icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
}

void *icu::SimpleDateFormat::getPatternForDateStyle@<X0>(signed int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X4>, UChar **a5@<X5>, int *a6@<X6>, uint64_t a7@<X8>)
{
  unint64_t v14;
  char *LocaleByType;
  char *v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unsigned int v22;
  int v23;
  int32_t v24;
  int32_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void (**v30)(icu::UnicodeString *__hidden);
  __int16 v31;
  _BYTE v32[8];
  unsigned __int16 v33;
  unsigned int v34;
  _OWORD v35[4];
  UChar *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[4];
  UChar *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43 = 0u;
  v42 = (UChar *)off_1E2256B38;
  LOWORD(v43) = 2;
  memset(v41, 0, sizeof(v41));
  icu::SimpleDateFormat::getPatternString(a1, a2, (icu::UnicodeString *)&v42, a6, (uint64_t)v41);
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)a7, (UChar **)v41);
  icu::UnicodeString::operator=(a5, &v42);
  v14 = *a4;
  if (*a4)
  {
    *a4 = 0;
    v14 = a1 & 0xFFFFFFFE;
    if ((_DWORD)v14 == 6)
    {
      v37 = 0u;
      v40 = 0;
      v39 = 0u;
      v38 = 0u;
      v36 = (UChar *)off_1E2256B38;
      LOWORD(v37) = 2;
      memset(v35, 0, sizeof(v35));
      icu::SimpleDateFormat::getPatternString(a1, a3, (icu::UnicodeString *)&v36, a6, (uint64_t)v35);
      LocaleByType = (char *)ures_getLocaleByType(a3, 0, a6);
      if (uloc_isRightToLeft(LocaleByType))
      {
        v16 = (char *)ures_getLocaleByType(a2, 0, a6);
        v17 = uloc_isRightToLeft(v16) == 0;
      }
      else
      {
        v17 = 0;
      }
      v18 = *a6;
      if ((int)v18 > 0)
        goto LABEL_7;
      if (sub_18BCDD7BC((icu::UnicodeString *)v35))
      {
        icu::UnicodeString::operator=(a5, &v36);
        icu::UnicodeString::operator=((UChar **)a7, (UChar **)v35);
        v18 = 1;
        *a4 = 1;
        if (!v17)
        {
LABEL_7:
          icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v35);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v36);
          goto LABEL_8;
        }
        icu::UnicodeString::UnicodeString((uint64_t)v32, 8207);
        v30 = off_1E2256B38;
        v31 = 2;
        v22 = *(unsigned __int16 *)(a7 + 8);
        v23 = (__int16)v22;
        v24 = v22 >> 5;
        if (v23 >= 0)
          v25 = v24;
        else
          v25 = *(_DWORD *)(a7 + 12);
        if ((v33 & 0x8000u) == 0)
          v26 = v33 >> 5;
        else
          v26 = v34;
        icu::UnicodeString::findAndReplace((icu::UnicodeString *)a7, 0, v25, (const icu::UnicodeString *)v32, 0, v26, (const icu::UnicodeString *)&v30, 0, 0);
      }
      else
      {
        if (a1 != 6)
          goto LABEL_7;
        if (!sub_18BCDD7BC((icu::UnicodeString *)v41))
          goto LABEL_7;
        icu::SimpleDateFormat::getPatternString(7, a3, (icu::UnicodeString *)&v36, a6, (uint64_t)v32);
        icu::UnicodeString::operator=((icu::UnicodeString *)v35, (icu::UnicodeString *)v32);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v32);
        if (!sub_18BCDD7BC((icu::UnicodeString *)v35))
          goto LABEL_7;
        icu::UnicodeString::operator=(a5, &v36);
        icu::UnicodeString::operator=((UChar **)a7, (UChar **)v35);
        v18 = 1;
        *a4 = 1;
        if (!v17)
          goto LABEL_7;
        icu::UnicodeString::UnicodeString((uint64_t)v32, 8207);
        v30 = off_1E2256B38;
        v31 = 2;
        sub_18BCAF394(a7, (icu::UnicodeString *)v32, (icu::UnicodeString *)&v30);
      }
      icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v30);
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v32);
      goto LABEL_7;
    }
  }
LABEL_8:
  icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)v41);
  return icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v42);
}

void icu::SimpleDateFormat::getPatternString(signed int a1@<W1>, uint64_t a2@<X2>, icu::UnicodeString *a3@<X3>, int *a4@<X4>, uint64_t a5@<X8>)
{
  char *v8;
  char *v9;
  __int16 v10;
  int Type;
  const UChar *String;
  const UChar *StringByIndex;
  icu::UnicodeString *v14;
  void *v15;
  const UChar *v16;
  void *v17;
  const UChar *v18;
  int v19;
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a5 + 8) = 0u;
  *(_QWORD *)(a5 + 56) = 0;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_QWORD *)a5 = off_1E2256B38;
  *(_WORD *)(a5 + 8) = 2;
  v8 = ures_getByIndex(a2, a1, 0, a4);
  v9 = v8;
  if ((*((_WORD *)a3 + 4) & 1) != 0)
    v10 = 2;
  else
    v10 = *((_WORD *)a3 + 4) & 0x1F;
  *((_WORD *)a3 + 4) = v10;
  if (*a4 >= 1)
  {
LABEL_5:
    *a4 = 3;
    if (!v9)
      return;
    goto LABEL_6;
  }
  Type = ures_getType((uint64_t)v8);
  if (Type == 8)
  {
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0;
    v20 = off_1E2256B38;
    LOWORD(v21) = 2;
    v19 = 0;
    StringByIndex = ures_getStringByIndex((uint64_t)v9, 0, &v19, a4);
    if (*a4 <= 0)
    {
      v18 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }
    icu::UnicodeString::operator=((icu::UnicodeString *)a5, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v20);
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0;
    v20 = off_1E2256B38;
    LOWORD(v21) = 2;
    v19 = 0;
    v16 = ures_getStringByIndex((uint64_t)v9, 1, &v19, a4);
    if (*a4 <= 0)
    {
      v18 = v16;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }
    v14 = a3;
  }
  else
  {
    if (Type)
      goto LABEL_5;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0;
    v20 = off_1E2256B38;
    LOWORD(v21) = 2;
    v19 = 0;
    String = ures_getString((uint64_t)v9, &v19, a4);
    if (*a4 <= 0)
    {
      v18 = String;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, 1, &v18, v19);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v20);
    }
    v14 = (icu::UnicodeString *)a5;
  }
  icu::UnicodeString::operator=(v14, (icu::UnicodeString *)&v20);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v20);
  if (!v9)
    return;
LABEL_6:
  ures_close(v9);
}

icu::UnicodeString *icu::SimpleDateFormat::parsePattern(icu::UnicodeString *this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int16 v10;

  v1 = (uint64_t)this;
  *((_WORD *)this + 396) = 0;
  *((_BYTE *)this + 794) = 0;
  v2 = *((unsigned __int16 *)this + 180);
  if ((v2 & 0x8000) != 0)
    v3 = *((_DWORD *)this + 91);
  else
    v3 = v2 >> 5;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = v3;
    do
    {
      v7 = *(unsigned __int16 *)(v1 + 360);
      if (*(__int16 *)(v1 + 360) < 0)
        v8 = *(_DWORD *)(v1 + 364);
      else
        v8 = v7 >> 5;
      if (v4 >= v8)
        goto LABEL_26;
      v9 = v1 + 362;
      if ((v7 & 2) == 0)
        v9 = *(_QWORD *)(v1 + 376);
      v10 = *(_WORD *)(v9 + 2 * v4);
      if (v10 == 39)
        v5 = !v5;
      if (v10 == 24180)
      {
        *(_BYTE *)(v1 + 794) = 1;
      }
      else
      {
        if (!v5)
        {
          if (v10 != 8239)
          {
            if (v10 == 115)
            {
              v5 = 0;
              *(_BYTE *)(v1 + 793) = 1;
            }
            else
            {
              v5 = 0;
              if (v10 == 109)
                *(_BYTE *)(v1 + 792) = 1;
            }
            goto LABEL_26;
          }
LABEL_23:
          if (*(_BYTE *)(v1 + 795))
            this = icu::UnicodeString::setCharAt((icu::UnicodeString *)(v1 + 352), v4, 32);
          goto LABEL_26;
        }
        if (v10 == 8239)
          goto LABEL_23;
      }
LABEL_26:
      ++v4;
    }
    while (v6 != v4);
  }
  return this;
}

void icu::SimpleDateFormat::initNumberFormatters(icu::SimpleDateFormat *this, const icu::Locale *a2, UErrorCode *a3)
{
  _OWORD *v6;

  if (*(int *)a3 <= 0 && ((*((_WORD *)this + 212) & 1) == 0 || (*((_WORD *)this + 244) & 1) == 0))
  {
    umtx_lock((icu::UMutex *)&unk_1ECD28160);
    if (!*((_QWORD *)this + 100))
    {
      v6 = uprv_malloc(0x130uLL);
      if (v6)
      {
        v6[17] = 0u;
        v6[18] = 0u;
        v6[15] = 0u;
        v6[16] = 0u;
        v6[13] = 0u;
        v6[14] = 0u;
        v6[11] = 0u;
        v6[12] = 0u;
        v6[9] = 0u;
        v6[10] = 0u;
        v6[7] = 0u;
        v6[8] = 0u;
        v6[5] = 0u;
        v6[6] = 0u;
        v6[3] = 0u;
        v6[4] = 0u;
        v6[1] = 0u;
        v6[2] = 0u;
        *v6 = 0u;
        *((_QWORD *)this + 100) = v6;
      }
      else
      {
        *((_QWORD *)this + 100) = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    umtx_unlock((std::mutex **)&unk_1ECD28160);
    if (*(int *)a3 <= 0)
    {
      icu::SimpleDateFormat::processOverrideString(this, a2, (icu::SimpleDateFormat *)((char *)this + 416), 0, a3);
      icu::SimpleDateFormat::processOverrideString(this, a2, (icu::SimpleDateFormat *)((char *)this + 480), 1u, a3);
    }
  }
}

uint64_t icu::SimpleDateFormat::parseAmbiguousDatesAsAfter(uint64_t this, double a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    this = *(_QWORD *)(this + 328);
    if (this)
    {
      this = icu::Calendar::setTimeInMillis(this, a2, a3);
      if (*(int *)a3 <= 0)
      {
        *(_BYTE *)(v4 + 816) = 1;
        *(double *)(v4 + 784) = a2;
        this = icu::Calendar::get(*(_BYTE **)(v4 + 328), 1u, a3);
        *(_DWORD *)(v4 + 796) = this;
      }
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

icu::UnicodeString *icu::SimpleDateFormat::format(icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  _OWORD v8[2];
  UErrorCode v9;

  v9 = U_ZERO_ERROR;
  memset(v8, 0, sizeof(v8));
  sub_18BCE50E0((uint64_t)v8, (uint64_t)a4);
  icu::SimpleDateFormat::_format(this, a2, a3, (icu::FieldPositionHandler *)v8, &v9);
  nullsub_32(v8);
  return a3;
}

icu::UnicodeString *icu::SimpleDateFormat::_format(icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPositionHandler *a4, UErrorCode *a5)
{
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  double TimeInMillis;
  uint64_t TimeZone;
  BOOL v16;
  UChar v17;
  uint64_t v18;
  uint64_t v19;
  int i;
  unsigned int v21;
  unsigned int v23;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  char *v30;
  uint64_t v32;
  icu::Calendar *v33;
  icu::FieldPositionHandler *v34;
  unsigned int v35;
  __int16 v36;
  __int16 v37;

  if (*(int *)a5 > 0)
    return a3;
  if (*((icu::Calendar **)this + 41) == a2
    || (v10 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a2 + 184))(a2),
        v11 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 184))(*((_QWORD *)this + 41)),
        !strcmp(v10, v11)))
  {
    v33 = a2;
    v34 = a4;
    v32 = 0;
  }
  else
  {
    v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 24))(*((_QWORD *)this + 41));
    if (!v12)
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      return a3;
    }
    v13 = v12;
    v34 = a4;
    TimeInMillis = icu::Calendar::getTimeInMillis(a2, a5);
    icu::Calendar::setTimeInMillis(v13, TimeInMillis, a5);
    TimeZone = icu::Calendar::getTimeZone(a2);
    icu::Calendar::setTimeZone(v13, TimeZone);
    v32 = v13;
    v33 = (icu::Calendar *)v13;
  }
  v35 = (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, UErrorCode *))(*(_QWORD *)this + 208))(this, 1, a5);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  for (i = 0; ; ++i)
  {
    v21 = *((unsigned __int16 *)this + 180);
    if (*((__int16 *)this + 180) < 0)
      break;
    if (i >= (int)(v21 >> 5) || *a5 >= U_ILLEGAL_ARGUMENT_ERROR)
      goto LABEL_45;
    v23 = v21 >> 5;
LABEL_20:
    if (v23 <= i)
    {
      v26 = 0xFFFF;
    }
    else
    {
      v25 = (char *)this + 362;
      if ((v21 & 2) == 0)
        v25 = (char *)*((_QWORD *)this + 47);
      v26 = *(unsigned __int16 *)&v25[2 * i];
    }
    if (v26 != v17 && (int)v18 >= 1)
    {
      icu::SimpleDateFormat::subFormat((uint64_t)this, (uint64_t)a3, v17, v18, v35, v19, v17, (uint64_t)v34, v33, a5);
      v18 = 0;
      v19 = (v19 + 1);
    }
    if (v26 == 39)
    {
      v27 = i + 1;
      v28 = *((unsigned __int16 *)this + 180);
      if (*((__int16 *)this + 180) < 0)
      {
        v29 = *((_DWORD *)this + 91);
        if ((int)v27 < v29)
        {
LABEL_38:
          if (v29 > v27)
          {
            v30 = (char *)this + 362;
            if ((v28 & 2) == 0)
              v30 = (char *)*((_QWORD *)this + 47);
            if (*(_WORD *)&v30[2 * v27] == 39)
            {
              v36 = 39;
              icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v36, 0, 1);
              ++i;
              continue;
            }
          }
        }
      }
      else if ((int)v27 < (int)(v28 >> 5))
      {
        v29 = v28 >> 5;
        goto LABEL_38;
      }
      v16 = !v16;
      continue;
    }
    if (v16 || v26 > 0x7F || !byte_18BE2AFCC[v26])
    {
      v37 = v26;
      icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v37, 0, 1);
    }
    else
    {
      v16 = 0;
      v18 = (v18 + 1);
      v17 = v26;
    }
  }
  v23 = *((_DWORD *)this + 91);
  if (i < (int)v23 && *a5 <= U_ZERO_ERROR)
    goto LABEL_20;
LABEL_45:
  if ((int)v18 > 0)
    icu::SimpleDateFormat::subFormat((uint64_t)this, (uint64_t)a3, v17, v18, v35, v19, v17, (uint64_t)v34, v33, a5);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  return a3;
}

icu::UnicodeString *icu::SimpleDateFormat::format(icu::SimpleDateFormat *this, icu::Calendar *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  _OWORD v10[2];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v10, a4, a5);
  icu::SimpleDateFormat::_format(this, a2, a3, (icu::FieldPositionHandler *)v10, a5);
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v10);
  return a3;
}

uint64_t icu::SimpleDateFormat::subFormat(uint64_t result, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, UChar a7, uint64_t a8, icu::Calendar *a9, UErrorCode *a10)
{
  uint64_t v14;
  unsigned int PatternCharIndex;
  unsigned int v16;
  int v17;
  unsigned int v18;
  const char *v19;
  int v20;
  const char *v21;
  const char *v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  icu::NumberFormat **v27;
  icu::NumberFormat *v28;
  uint64_t TimeZone;
  double TimeInMillis;
  icu::TimeZoneFormat *v31;
  unsigned int v32;
  void (*v33)(double);
  unsigned int v34;
  icu::SimpleDateFormat *v35;
  const icu::NumberFormat *v36;
  icu::UnicodeString *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  signed int v43;
  const icu::NumberFormat *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  int v62;
  int v63;
  icu::UnicodeString *TimeSeparatorString;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  void *v69;
  icu::HebrewCalendar *v70;
  _BOOL4 isLeapYear;
  int v74;
  icu::HebrewCalendar *v75;
  _BOOL4 v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  icu::UnicodeString *v86;
  uint64_t v87;
  signed int v88;
  void *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  signed int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  icu::UnicodeString *v105;
  uint64_t v106;
  icu::UnicodeString *v107;
  uint64_t v108;
  icu::SimpleDateFormat *v109;
  icu::UnicodeString *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  icu::UnicodeString *v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  UChar v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  _BYTE *v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  unsigned int v134;
  int v135;
  uint64_t *v136;
  UChar32 v137;
  int v138;
  _BYTE *v139;
  icu::BreakIterator *v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  void *v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unsigned int v161;
  uint64_t v162;
  icu::Calendar *v163;
  UErrorCode *v164;
  icu::NumberFormat *lpsrc;
  signed int v166;
  unsigned int v168;
  _OWORD v171[4];
  _OWORD v172[16];
  _OWORD v173[4];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  if (*(int *)a10 > 0)
    return result;
  v14 = result;
  PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(a3);
  v16 = *(unsigned __int16 *)(a2 + 8);
  v17 = (__int16)v16;
  v18 = v16 >> 5;
  if (v17 < 0)
    v18 = *(_DWORD *)(a2 + 12);
  v168 = v18;
  v19 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a9 + 184))(a9);
  v20 = strcmp(v19, "hebrew");
  v21 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a9 + 184))(a9);
  result = strcmp(v21, "chinese");
  if ((_DWORD)result)
  {
    v22 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a9 + 184))(a9);
    result = strcmp(v22, "dangi");
    v23 = result == 0;
  }
  else
  {
    v23 = 1;
  }
  if (PatternCharIndex == 38)
  {
    if (a3 == 108)
      return result;
    v24 = 3;
LABEL_28:
    *a10 = v24;
    return result;
  }
  if (PatternCharIndex > 0x22)
  {
    result = 0;
  }
  else if (PatternCharIndex == 34)
  {
    result = (*(uint64_t (**)(icu::Calendar *, UErrorCode *))(*(_QWORD *)a9 + 424))(a9, a10);
  }
  else
  {
    result = icu::Calendar::get(a9, icu::SimpleDateFormat::fgPatternIndexToCalendarField[PatternCharIndex], a10);
  }
  if (*(int *)a10 <= 0)
  {
    v25 = *(_QWORD *)(v14 + 800);
    if (v25 && (v26 = *(_QWORD *)(v25 + 8 * PatternCharIndex)) != 0)
      v27 = (icu::NumberFormat **)(v26 + 24);
    else
      v27 = (icu::NumberFormat **)(v14 + 336);
    v28 = *v27;
    if (!v28)
    {
      v24 = 5;
      goto LABEL_28;
    }
    lpsrc = v28;
    v166 = result;
    memset(v173, 0, sizeof(v173));
    icu::UnicodeString::UnicodeString(v173, "hebr", 4, 0);
    switch(PatternCharIndex)
    {
      case 0u:
        if (v23)
        {
          v35 = (icu::SimpleDateFormat *)v14;
          v36 = lpsrc;
          v37 = (icu::UnicodeString *)a2;
          v38 = v166;
          v39 = 1;
          v40 = 9;
          goto LABEL_70;
        }
        v46 = v168;
        if ((_DWORD)a4 == 4)
        {
          sub_18BD785E8(a2, v166, *(_QWORD *)(*(_QWORD *)(v14 + 768) + 24), *(_DWORD *)(*(_QWORD *)(v14 + 768) + 32));
          v32 = 7;
        }
        else if ((_DWORD)a4 == 5)
        {
          sub_18BD785E8(a2, v166, *(_QWORD *)(*(_QWORD *)(v14 + 768) + 40), *(_DWORD *)(*(_QWORD *)(v14 + 768) + 48));
          v32 = 9;
        }
        else
        {
          sub_18BD785E8(a2, v166, *(_QWORD *)(*(_QWORD *)(v14 + 768) + 8), *(_DWORD *)(*(_QWORD *)(v14 + 768) + 16));
          v32 = 8;
        }
        goto LABEL_191;
      case 1u:
      case 0x12u:
        goto LABEL_56;
      case 2u:
      case 0x1Au:
        if (v20)
        {
          v34 = v166;
        }
        else
        {
          v70 = (icu::HebrewCalendar *)icu::Calendar::get(a9, 1u, a10);
          isLeapYear = icu::HebrewCalendar::isLeapYear(v70);
          if (v166 != 6 || !isLeapYear || (int)a4 <= 2)
            v74 = v166;
          else
            v74 = 13;
          v75 = (icu::HebrewCalendar *)icu::Calendar::get(a9, 1u, a10);
          v78 = !icu::HebrewCalendar::isLeapYear(v75) && v74 > 5 && (int)a4 < 3;
          v34 = v74 - v78;
        }
        v79 = *(_QWORD *)(v14 + 768);
        if (*(_QWORD *)(v79 + 472) && *(int *)(v79 + 480) >= 7)
        {
          v80 = v34;
          v81 = icu::Calendar::get(a9, 0x16u, a10);
          v34 = v80;
          v82 = v81;
        }
        else
        {
          v82 = 0;
        }
        switch((_DWORD)a4)
        {
          case 3:
            v102 = *(_QWORD *)(v14 + 768);
            if (PatternCharIndex == 2)
            {
              v103 = *(_QWORD *)(v102 + 72);
              v104 = *(_DWORD *)(v102 + 80);
              v46 = v168;
              if (v82)
              {
                v105 = (icu::UnicodeString *)(*(_QWORD *)(v102 + 472) + 64);
LABEL_177:
                sub_18BD78620((icu::UnicodeString *)a2, v34, v103, v104, v105, a10);
                v32 = 1;
                goto LABEL_191;
              }
LABEL_176:
              v105 = 0;
              goto LABEL_177;
            }
            v115 = *(_QWORD *)(v102 + 120);
            v116 = *(_DWORD *)(v102 + 128);
            v46 = v168;
            if (v82)
            {
              v117 = (icu::UnicodeString *)(*(_QWORD *)(v102 + 472) + 256);
LABEL_183:
              sub_18BD78620((icu::UnicodeString *)a2, v34, v115, v116, v117, a10);
              v32 = 2;
              goto LABEL_191;
            }
            break;
          case 4:
            v106 = *(_QWORD *)(v14 + 768);
            if (PatternCharIndex == 2)
            {
              v103 = *(_QWORD *)(v106 + 56);
              v104 = *(_DWORD *)(v106 + 64);
              v46 = v168;
              if (v82)
              {
                v105 = *(icu::UnicodeString **)(v106 + 472);
                goto LABEL_177;
              }
              goto LABEL_176;
            }
            v115 = *(_QWORD *)(v106 + 104);
            v116 = *(_DWORD *)(v106 + 112);
            v46 = v168;
            if (v82)
            {
              v117 = (icu::UnicodeString *)(*(_QWORD *)(v106 + 472) + 192);
              goto LABEL_183;
            }
            break;
          case 5:
            v83 = *(_QWORD *)(v14 + 768);
            if (PatternCharIndex == 2)
            {
              v84 = *(_QWORD *)(v83 + 88);
              v85 = *(_DWORD *)(v83 + 96);
              v46 = v168;
              if (v82)
              {
                v86 = (icu::UnicodeString *)(*(_QWORD *)(v83 + 472) + 128);
LABEL_181:
                sub_18BD78620((icu::UnicodeString *)a2, v34, v84, v85, v86, a10);
                v32 = 3;
                goto LABEL_191;
              }
            }
            else
            {
              v84 = *(_QWORD *)(v83 + 136);
              v85 = *(_DWORD *)(v83 + 144);
              v46 = v168;
              if (v82)
              {
                v86 = (icu::UnicodeString *)(*(_QWORD *)(v83 + 472) + 320);
                goto LABEL_181;
              }
            }
            v86 = 0;
            goto LABEL_181;
          default:
            memset((char *)v172 + 8, 0, 56);
            *(_QWORD *)&v172[0] = off_1E2256B38;
            WORD4(v172[0]) = 2;
            icu::SimpleDateFormat::zeroPaddingNumber((icu::SimpleDateFormat *)v14, lpsrc, (icu::UnicodeString *)v172, v34 + 1, a4, 10);
            if (v82)
              v107 = (icu::UnicodeString *)(*(_QWORD *)(*(_QWORD *)(v14 + 768) + 472) + 384);
            else
              v107 = 0;
            v46 = v168;
            sub_18BD78620((icu::UnicodeString *)a2, 0, (uint64_t)v172, 1, v107, a10);
            icu::UnicodeString::~UnicodeString(v118, (icu::UnicodeString *)v172);
            goto LABEL_190;
        }
        v117 = 0;
        goto LABEL_183;
      case 4u:
        v38 = v166;
        if (v166)
          goto LABEL_67;
        v41 = (*(uint64_t (**)(icu::Calendar *, uint64_t))(*(_QWORD *)a9 + 128))(a9, 11);
        goto LABEL_45;
      case 8u:
        if ((int)a4 >= 3)
          v42 = 3;
        else
          v42 = a4;
        if ((_DWORD)a4 == 1)
        {
          v45 = 100;
          v46 = v168;
          v43 = v166;
          v44 = lpsrc;
        }
        else
        {
          v43 = v166;
          v44 = lpsrc;
          if ((_DWORD)a4 != 2)
          {
            icu::SimpleDateFormat::zeroPaddingNumber((icu::SimpleDateFormat *)v14, lpsrc, (icu::UnicodeString *)a2, v166, v42, 10);
            v46 = v168;
            if ((int)a4 >= 4)
            {
              v109 = (icu::SimpleDateFormat *)v14;
              v44 = lpsrc;
              v110 = (icu::UnicodeString *)a2;
              v108 = 0;
              v42 = (a4 - 3);
LABEL_161:
              icu::SimpleDateFormat::zeroPaddingNumber(v109, v44, v110, v108, v42, 10);
            }
LABEL_190:
            v32 = 0;
            goto LABEL_191;
          }
          v45 = 10;
          v46 = v168;
        }
        v108 = (v43 / v45);
        v109 = (icu::SimpleDateFormat *)v14;
        v110 = (icu::UnicodeString *)a2;
        goto LABEL_161;
      case 9u:
        goto LABEL_122;
      case 0xEu:
        v47 = *(_QWORD *)(v14 + 768);
        if ((int)a4 > 4)
        {
          v48 = *(_QWORD *)(v47 + 296);
          v49 = *(_DWORD *)(v47 + 304);
        }
        else
        {
          v48 = *(_QWORD *)(v47 + 280);
          v49 = *(_DWORD *)(v47 + 288);
        }
        v87 = a2;
        v50 = v166;
        goto LABEL_164;
      case 0xFu:
        v38 = v166;
        if (v166)
          goto LABEL_67;
        v41 = (*(uint64_t (**)(icu::Calendar *, uint64_t))(*(_QWORD *)a9 + 160))(a9, 10);
LABEL_45:
        v38 = (v41 + 1);
        goto LABEL_67;
      case 0x11u:
      case 0x17u:
      case 0x18u:
      case 0x1Du:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
        memset(v172, 0, sizeof(v172));
        memset(v171, 0, sizeof(v171));
        icu::UnicodeString::UnicodeString(v171, v172, 0, 128);
        TimeZone = icu::Calendar::getTimeZone(a9);
        TimeInMillis = icu::Calendar::getTimeInMillis(a9, a10);
        v31 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)v14, a10);
        v32 = 0;
        if (*(int *)a10 <= 0)
        {
          switch(PatternCharIndex)
          {
            case 0x11u:
              v33 = *(void (**)(double))(*(_QWORD *)v31 + 64);
              if ((int)a4 <= 3)
                goto LABEL_149;
              goto LABEL_195;
            case 0x17u:
              goto LABEL_219;
            case 0x18u:
              if ((_DWORD)a4 == 4)
              {
                v33 = *(void (**)(double))(*(_QWORD *)v31 + 64);
LABEL_195:
                v33(TimeInMillis);
                v32 = 12;
              }
              else if ((_DWORD)a4 == 1)
              {
                v33 = *(void (**)(double))(*(_QWORD *)v31 + 64);
LABEL_149:
                v33(TimeInMillis);
                v32 = 13;
              }
              else
              {
LABEL_220:
                v32 = 0;
              }
              break;
            case 0x1Du:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                  goto LABEL_219;
                case 4:
                  (*(void (**)(icu::TimeZoneFormat *, _QWORD, uint64_t, _OWORD *, _QWORD, double))(*(_QWORD *)v31 + 64))(v31, 0, TimeZone, v171, 0, TimeInMillis);
                  v32 = 10;
                  break;
                default:
                  goto LABEL_220;
              }
              break;
            case 0x1Fu:
              if ((_DWORD)a4 == 4 || (_DWORD)a4 == 1)
LABEL_219:
                (*(void (**)(double))(*(_QWORD *)v31 + 64))(TimeInMillis);
              goto LABEL_220;
            case 0x20u:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                  goto LABEL_219;
                default:
                  goto LABEL_220;
              }
              goto LABEL_220;
            case 0x21u:
              switch((int)a4)
              {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                  goto LABEL_219;
                default:
                  goto LABEL_220;
              }
              goto LABEL_220;
            default:
              abort();
          }
        }
        if ((SWORD4(v171[0]) & 0x8000u) == 0)
          v132 = WORD4(v171[0]) >> 5;
        else
          v132 = HIDWORD(v171[0]);
        icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v171, 0, v132);
        icu::UnicodeString::~UnicodeString(v133, (icu::UnicodeString *)v171);
        goto LABEL_225;
      case 0x13u:
        if ((int)a4 <= 2)
          goto LABEL_47;
        v88 = icu::Calendar::get(a9, 7u, a10);
        v89 = (void *)*(unsigned int *)a10;
        if ((int)v89 > 0)
          return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v173);
        v166 = v88;
LABEL_122:
        if ((_DWORD)a4 == 4)
        {
          sub_18BD785E8(a2, v166, *(_QWORD *)(*(_QWORD *)(v14 + 768) + 152), *(_DWORD *)(*(_QWORD *)(v14 + 768) + 160));
          v32 = 4;
          goto LABEL_225;
        }
        v46 = v168;
        v90 = v166;
        if ((_DWORD)a4 == 6)
        {
          v111 = *(_QWORD *)(v14 + 768);
          v112 = *(_QWORD *)(v111 + 184);
          v113 = *(_DWORD *)(v111 + 192);
        }
        else
        {
          if ((_DWORD)a4 == 5)
          {
            v91 = *(_QWORD *)(v14 + 768);
            v92 = *(_QWORD *)(v91 + 200);
            v93 = *(_DWORD *)(v91 + 208);
            goto LABEL_126;
          }
          v114 = *(_QWORD *)(v14 + 768);
          v112 = *(_QWORD *)(v114 + 168);
          v113 = *(_DWORD *)(v114 + 176);
        }
        sub_18BD785E8(a2, v166, v112, v113);
        v32 = 4;
        goto LABEL_191;
      case 0x19u:
        if ((int)a4 <= 2)
        {
          v35 = (icu::SimpleDateFormat *)v14;
          v36 = lpsrc;
          v37 = (icu::UnicodeString *)a2;
          v38 = v166;
          v39 = 1;
          goto LABEL_69;
        }
        v94 = icu::Calendar::get(a9, 7u, a10);
        v89 = (void *)*(unsigned int *)a10;
        if ((int)v89 > 0)
          return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v173);
        v90 = v94;
        if ((_DWORD)a4 == 4)
        {
          sub_18BD785E8(a2, v94, *(_QWORD *)(*(_QWORD *)(v14 + 768) + 216), *(_DWORD *)(*(_QWORD *)(v14 + 768) + 224));
          v32 = 5;
          goto LABEL_225;
        }
        v46 = v168;
        if ((_DWORD)a4 == 6)
        {
          v151 = *(_QWORD *)(v14 + 768);
          v152 = *(_QWORD *)(v151 + 248);
          v153 = *(_DWORD *)(v151 + 256);
        }
        else
        {
          if ((_DWORD)a4 == 5)
          {
            v95 = *(_QWORD *)(v14 + 768);
            v92 = *(_QWORD *)(v95 + 264);
            v93 = *(_DWORD *)(v95 + 272);
LABEL_126:
            sub_18BD785E8(a2, v90, v92, v93);
            v32 = 6;
LABEL_191:
            v121 = a7;
            if ((_DWORD)a6)
              goto LABEL_244;
LABEL_226:
            if (*(_QWORD *)(v14 + 824))
            {
              v134 = *(unsigned __int16 *)(a2 + 8);
              v135 = (__int16)v134;
              LODWORD(v136) = v134 >> 5;
              v136 = v135 >= 0 ? (uint64_t *)v136 : (uint64_t *)*(unsigned int *)(a2 + 12);
              if ((int)v136 > (int)v46)
              {
                v137 = icu::UnicodeString::char32At(v136, (icu::UnicodeString *)a2, v46);
                v138 = u_islower(v137);
                v121 = a7;
                if (v138)
                {
                  switch(a5)
                  {
                    case 0x102u:
                      goto LABEL_238;
                    case 0x104u:
                      v139 = (_BYTE *)(*(_QWORD *)(v14 + 768) + 2 * v32 + 833);
                      break;
                    case 0x103u:
                      v139 = (_BYTE *)(*(_QWORD *)(v14 + 768) + 2 * v32 + 832);
                      break;
                    default:
                      goto LABEL_244;
                  }
                  if (*v139)
                  {
LABEL_238:
                    v140 = (icu::BreakIterator *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 824) + 32))(*(_QWORD *)(v14 + 824));
                    memset(v172, 0, 64);
                    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v172, (const icu::UnicodeString *)a2, v46);
                    icu::UnicodeString::toTitle((const UChar **)v172, v140, (const icu::Locale *)(v14 + 544), 768);
                    v141 = *(unsigned __int16 *)(a2 + 8);
                    v142 = (__int16)v141;
                    v143 = v141 >> 5;
                    if (v142 >= 0)
                      v144 = v143;
                    else
                      v144 = *(_DWORD *)(a2 + 12);
                    sub_18BD787AC((icu::UnicodeString *)a2, v46, v144, (uint64_t)v172);
                    if (v140)
                      (*(void (**)(icu::BreakIterator *))(*(_QWORD *)v140 + 8))(v140);
                    icu::UnicodeString::~UnicodeString(v145, (icu::UnicodeString *)v172);
                    v121 = a7;
                  }
                }
              }
            }
LABEL_244:
            v146 = icu::DateFormatSymbols::getPatternCharIndex(v121);
            v147 = *(unsigned __int16 *)(a2 + 8);
            v148 = (__int16)v147;
            v149 = v147 >> 5;
            if (v148 >= 0)
              v150 = v149;
            else
              v150 = *(unsigned int *)(a2 + 12);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a8 + 16))(a8, v146, v46, v150);
            return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v173);
          }
          v154 = *(_QWORD *)(v14 + 768);
          v152 = *(_QWORD *)(v154 + 232);
          v153 = *(_DWORD *)(v154 + 240);
        }
        sub_18BD785E8(a2, v94, v152, v153);
        v32 = 5;
        goto LABEL_191;
      case 0x1Bu:
        if ((int)a4 >= 5)
        {
          v50 = v166 / 3;
          v51 = *(_QWORD *)(v14 + 768);
          v48 = *(_QWORD *)(v51 + 408);
          v49 = *(_DWORD *)(v51 + 416);
          goto LABEL_163;
        }
        v46 = v168;
        v96 = v166;
        if ((_DWORD)a4 == 3)
        {
          v97 = v166 / 3;
          v119 = *(_QWORD *)(v14 + 768);
          v99 = *(_QWORD *)(v119 + 392);
          v100 = *(_DWORD *)(v119 + 400);
        }
        else
        {
          if ((_DWORD)a4 != 4)
            goto LABEL_160;
          v97 = v166 / 3;
          v98 = *(_QWORD *)(v14 + 768);
          v99 = *(_QWORD *)(v98 + 376);
          v100 = *(_DWORD *)(v98 + 384);
        }
        goto LABEL_189;
      case 0x1Cu:
        if ((int)a4 >= 5)
        {
          v50 = v166 / 3;
          v52 = *(_QWORD *)(v14 + 768);
          v48 = *(_QWORD *)(v52 + 456);
          v49 = *(_DWORD *)(v52 + 464);
          goto LABEL_163;
        }
        v46 = v168;
        v96 = v166;
        if ((_DWORD)a4 == 3)
        {
          v97 = v166 / 3;
          v120 = *(_QWORD *)(v14 + 768);
          v99 = *(_QWORD *)(v120 + 440);
          v100 = *(_DWORD *)(v120 + 448);
        }
        else
        {
          if ((_DWORD)a4 != 4)
          {
LABEL_160:
            v108 = (v96 / 3 + 1);
            v109 = (icu::SimpleDateFormat *)v14;
            v44 = lpsrc;
            v110 = (icu::UnicodeString *)a2;
            v42 = a4;
            goto LABEL_161;
          }
          v97 = v166 / 3;
          v101 = *(_QWORD *)(v14 + 768);
          v99 = *(_QWORD *)(v101 + 424);
          v100 = *(_DWORD *)(v101 + 432);
        }
LABEL_189:
        sub_18BD785E8(a2, v97, v99, v100);
        goto LABEL_190;
      case 0x1Eu:
        v53 = *(_QWORD *)(v14 + 768);
        v48 = *(_QWORD *)(v53 + 488);
        if (v48 && (v49 = *(_DWORD *)(v53 + 496), v166 <= v49))
        {
          v50 = v166 - 1;
LABEL_163:
          v87 = a2;
LABEL_164:
          sub_18BD785E8(v87, v50, v48, v49);
        }
        else
        {
LABEL_56:
          v54 = sub_18BD2FB50(v14 + 416, (uint64_t)v173);
          if (v166 < 6000 && v166 > 5000 && v54 == 0)
            v38 = (v166 - 5000);
          else
            v38 = v166;
          if ((_DWORD)a4 == 2)
          {
            v35 = (icu::SimpleDateFormat *)v14;
            v36 = lpsrc;
            v37 = (icu::UnicodeString *)a2;
            v39 = 2;
            v40 = 2;
          }
          else
          {
LABEL_67:
            v35 = (icu::SimpleDateFormat *)v14;
            v36 = lpsrc;
            v37 = (icu::UnicodeString *)a2;
LABEL_68:
            v39 = a4;
LABEL_69:
            v40 = 10;
          }
LABEL_70:
          icu::SimpleDateFormat::zeroPaddingNumber(v35, v36, v37, v38, v39, v40);
        }
        goto LABEL_165;
      case 0x23u:
        if (icu::Calendar::get(a9, 0xBu, a10) == 12
          && (!*(_BYTE *)(v14 + 792) || !icu::Calendar::get(a9, 0xCu, a10))
          && (!*(_BYTE *)(v14 + 793) || !icu::Calendar::get(a9, 0xDu, a10)))
        {
          v57 = icu::Calendar::get(a9, 9u, a10);
          if ((int)a4 > 3)
          {
            v126 = *(_QWORD *)(v14 + 768);
            v59 = v57;
            if ((_DWORD)a4 == 4 || a4 >= 6)
              v58 = *(_QWORD *)(v126 + 880);
            else
              v58 = *(_QWORD *)(v126 + 896);
          }
          else
          {
            v58 = *(_QWORD *)(*(_QWORD *)(v14 + 768) + 864);
            v59 = v57;
          }
          v155 = v58 + (v59 << 6);
          if (v155)
          {
            v156 = *(unsigned __int16 *)(v155 + 8);
            if ((v156 & 1) == 0)
              goto LABEL_276;
          }
        }
        icu::SimpleDateFormat::subFormat(v14, a2, 97, a4, a5, a6, 98, a8, a9, a10);
        return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v173);
      case 0x24u:
        v60 = sub_18BCB132C((icu::Locale *)(v14 + 544), (int *)a10);
        if (*(int *)a10 > 0)
          goto LABEL_165;
        v61 = (_BYTE *)v60;
        if (!v60)
        {
          v163 = a9;
          v164 = a10;
          v122 = v14;
          v123 = a2;
          v124 = a4;
          v125 = a5;
          goto LABEL_281;
        }
        v62 = icu::Calendar::get(a9, 0xBu, a10);
        if (*(_BYTE *)(v14 + 792))
          v63 = icu::Calendar::get(a9, 0xCu, a10);
        else
          v63 = 0;
        if (*(_BYTE *)(v14 + 793))
          v127 = icu::Calendar::get(a9, 0xDu, a10);
        else
          v127 = 0;
        v125 = a5;
        v128 = &v61[4 * v62];
        if (v62 || v63 || v127)
        {
          if (v62 == 12 && !v63 && !v127 && v61[1])
          {
            v129 = 1;
LABEL_216:
            if ((int)a4 > 3)
            {
              v157 = *(_QWORD *)(v14 + 768);
              v131 = (int)v129;
              if ((_DWORD)a4 == 4 || a4 >= 6)
                v130 = *(_QWORD *)(v157 + 880);
              else
                v130 = *(_QWORD *)(v157 + 896);
            }
            else
            {
              v130 = *(_QWORD *)(*(_QWORD *)(v14 + 768) + 864);
              v131 = (int)v129;
            }
            v155 = v130 + (v131 << 6);
            if (v155)
            {
              if (v129 > 1)
              {
                v125 = a5;
                goto LABEL_274;
              }
              v125 = a5;
              if ((*(_WORD *)(v155 + 8) & 1) == 0)
              {
LABEL_274:
                if ((v129 & 0xFFFFFFFE) != 0xA)
                {
                  v156 = *(unsigned __int16 *)(v155 + 8);
                  if ((v156 & 1) == 0)
                  {
LABEL_276:
                    v160 = (__int16)v156;
                    v161 = v156 >> 5;
                    if (v160 >= 0)
                      v162 = v161;
                    else
                      v162 = *(unsigned int *)(v155 + 12);
                    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v155, 0, v162);
LABEL_165:
                    v32 = 0;
LABEL_225:
                    v121 = a7;
                    v46 = v168;
                    if ((_DWORD)a6)
                      goto LABEL_244;
                    goto LABEL_226;
                  }
                }
                v163 = a9;
                v164 = a10;
                v122 = v14;
                v123 = a2;
                v124 = a4;
LABEL_281:
                icu::SimpleDateFormat::subFormat(v122, v123, 97, v124, v125, a6, 66, a8, v163, v164);
                return (uint64_t)icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v173);
              }
LABEL_266:
              v129 = *((_DWORD *)v128 + 1);
              if ((int)a4 > 3)
              {
                v159 = *(_QWORD *)(v14 + 768);
                if ((_DWORD)a4 == 4 || a4 >= 6)
                  v158 = *(_QWORD *)(v159 + 880);
                else
                  v158 = *(_QWORD *)(v159 + 896);
              }
              else
              {
                v158 = *(_QWORD *)(*(_QWORD *)(v14 + 768) + 864);
              }
              v155 = v158 + ((uint64_t)(int)v129 << 6);
              goto LABEL_274;
            }
LABEL_265:
            v125 = a5;
            if (v129 > 1)
            {
              v155 = 0;
              goto LABEL_274;
            }
            goto LABEL_266;
          }
        }
        else if (*v61)
        {
          goto LABEL_266;
        }
        v129 = *((_DWORD *)v128 + 1);
        if (v129 <= 0xB && ((1 << v129) & 0xC01) != 0)
          goto LABEL_265;
        goto LABEL_216;
      case 0x25u:
        memset((char *)v172 + 8, 0, 56);
        *(_QWORD *)&v172[0] = off_1E2256B38;
        WORD4(v172[0]) = 2;
        TimeSeparatorString = icu::DateFormatSymbols::getTimeSeparatorString(*(UChar ***)(v14 + 768), (UChar **)v172);
        v65 = *((unsigned __int16 *)TimeSeparatorString + 4);
        v66 = (__int16)v65;
        v67 = v65 >> 5;
        if (v66 >= 0)
          v68 = v67;
        else
          v68 = *((unsigned int *)TimeSeparatorString + 3);
        icu::UnicodeString::doAppend(a2, TimeSeparatorString, 0, v68);
        icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v172);
        goto LABEL_165;
      default:
LABEL_47:
        v35 = (icu::SimpleDateFormat *)v14;
        v36 = lpsrc;
        v37 = (icu::UnicodeString *)a2;
        v38 = v166;
        goto LABEL_68;
    }
  }
  return result;
}

uint64_t icu::SimpleDateFormat::isSyntaxChar(unsigned int a1)
{
  if (a1 > 0x7F)
    return 0;
  else
    return (char)byte_18BE2AFCC[a1];
}

uint64_t icu::SimpleDateFormat::getLevelFromChar(unsigned int a1)
{
  if (a1 > 0x7F)
    return 0xFFFFFFFFLL;
  else
    return dword_18BE2ADCC[a1];
}

_QWORD *sub_18BD7836C(char **a1, UErrorCode *a2, UErrorCode *a3)
{
  icu::DecimalFormat *Instance;
  _QWORD *result;

  Instance = icu::NumberFormat::createInstance(a1, a2, a3);
  if (*(int *)a2 > 0)
    return 0;
  result = sub_18BD789E0((uint64_t)Instance);
  if (!result)
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

void icu::SimpleDateFormat::zeroPaddingNumber(icu::SimpleDateFormat *this, const icu::NumberFormat *lpsrc, icu::UnicodeString *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void **v17;
  int v18;
  _QWORD v19[3];
  void **v20;
  uint64_t v21;
  UErrorCode v22;
  void (**v23)(icu::FieldPosition *__hidden);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*((const icu::NumberFormat **)this + 42) == lpsrc && *((_QWORD *)this + 101))
  {
    v22 = U_ZERO_ERROR;
    v20 = 0;
    v21 = 0;
    icu::number::SimpleNumber::forInt64((void **)(int)a4, (int *)&v22, &v20);
    icu::number::SimpleNumber::setMinimumIntegerDigits(&v20, a5, &v22);
    icu::number::SimpleNumber::truncateStart((icu::number::SimpleNumber *)&v20, a6, &v22);
    memset(v19, 0, sizeof(v19));
    v13 = *((_QWORD *)this + 101);
    v17 = v20;
    v18 = v21;
    v20 = 0;
    icu::number::SimpleNumberFormatter::format(v13, (uint64_t)&v17, &v22, (uint64_t)v19);
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v17);
    if (v22 <= U_ZERO_ERROR)
    {
      icu::number::FormattedNumber::toTempString((icu::number::FormattedNumber *)v19, &v22, (uint64_t)&v23);
      if ((v24 & 0x8000u) == 0)
        v14 = (unsigned __int16)v24 >> 5;
      else
        v14 = HIDWORD(v24);
      icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)&v23, 0, v14);
      icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v23);
    }
    icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v19);
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v20);
  }
  else if (lpsrc)
  {
    v25 = 0;
    v23 = off_1E225EF78;
    v24 = 0xFFFFFFFFLL;
    if (v11)
    {
      (*(void (**)(void *, uint64_t, icu::UnicodeString *, void (***)(icu::FieldPosition *__hidden)))(*(_QWORD *)v11 + 88))(v11, a4, a3, &v23);
    }
    else
    {
      v16 = (*(uint64_t (**)(const icu::NumberFormat *))(*(_QWORD *)lpsrc + 32))(lpsrc);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 224))(v16, a5);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 216))(v16, a6);
      (*(void (**)(uint64_t, uint64_t, icu::UnicodeString *, void (***)(icu::FieldPosition *__hidden)))(*(_QWORD *)v16 + 88))(v16, a4, a3, &v23);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v23);
  }
}

uint64_t sub_18BD785E8(uint64_t result, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  if ((a2 & 0x80000000) == 0 && (int)a2 < a4)
  {
    v4 = a3 + ((unint64_t)a2 << 6);
    v5 = *(unsigned __int16 *)(v4 + 8);
    v6 = (__int16)v5;
    v7 = v5 >> 5;
    if (v6 >= 0)
      v8 = v7;
    else
      v8 = *(unsigned int *)(v4 + 12);
    return icu::UnicodeString::doAppend(result, (const icu::UnicodeString *)v4, 0, v8);
  }
  return result;
}

void sub_18BD78620(icu::UnicodeString *this, unsigned int a2, uint64_t a3, int a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD v15[2];
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x80000000) == 0 && (int)a2 < a4)
  {
    if (a5)
    {
      v15[1] = off_1E2256B38;
      v16 = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v15, a5, 1, 1, 0, a6);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v15, (const icu::UnicodeString *)(a3 + ((unint64_t)a2 << 6)), this, a6);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v15);
    }
    else
    {
      v10 = a3 + ((unint64_t)a2 << 6);
      v11 = *(unsigned __int16 *)(v10 + 8);
      v12 = (__int16)v11;
      v13 = v11 >> 5;
      if (v12 >= 0)
        v14 = v13;
      else
        v14 = *(unsigned int *)(v10 + 12);
      icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v10, 0, v14);
    }
  }
}

icu::TimeZoneFormat *icu::SimpleDateFormat::tzFormat(icu::SimpleDateFormat *this, UErrorCode *a2)
{
  icu::TimeZoneFormat *Instance;
  uint64_t *v5;
  BOOL v6;

  umtx_lock((icu::UMutex *)&unk_1ECD28160);
  Instance = (icu::TimeZoneFormat *)*((_QWORD *)this + 97);
  v5 = (uint64_t *)*(unsigned int *)a2;
  if (Instance)
    v6 = 0;
  else
    v6 = (int)v5 <= 0;
  if (v6)
  {
    Instance = icu::TimeZoneFormat::createInstance((char **)this + 68, a2, v5);
    *((_QWORD *)this + 97) = Instance;
  }
  umtx_unlock((std::mutex **)&unk_1ECD28160);
  return Instance;
}

uint64_t icu::SimpleDateFormat::getSmpFmtLocale(icu::SimpleDateFormat *this)
{
  return (uint64_t)this + 544;
}

uint64_t sub_18BD787AC(icu::UnicodeString *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (a3 - a2);
  v5 = *(unsigned __int16 *)(a4 + 8);
  v6 = (__int16)v5;
  v7 = v5 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *(unsigned int *)(a4 + 12);
  return icu::UnicodeString::doReplace(a1, a2, v4, (const icu::UnicodeString *)a4, 0, v8);
}

void icu::SimpleDateFormat::adoptNumberFormat(icu::SimpleDateFormat *this@<X0>, icu::NumberFormat *a2@<X1>, void *a3@<X8>)
{
  void *v5;
  uint64_t v6;
  char *v7;
  UErrorCode v8;

  v5 = (void *)*((_QWORD *)this + 101);
  if (v5)
  {
    icu::number::SimpleNumberFormatter::cleanup(*((icu::number::SimpleNumberFormatter **)this + 101), a3);
    icu::UMemory::operator delete(v5);
  }
  *((_QWORD *)this + 101) = 0;
  (*(void (**)(icu::NumberFormat *))(*(_QWORD *)a2 + 288))(a2);
  v6 = *((_QWORD *)this + 42);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 42) = a2;
  v7 = (char *)*((_QWORD *)this + 100);
  if (v7)
  {
    sub_18BD742D4(v7);
    *((_QWORD *)this + 100) = 0;
  }
  v8 = U_ZERO_ERROR;
  icu::SimpleDateFormat::initSimpleNumberFormatter(this, &v8);
}

icu::SharedObject *icu::SimpleDateFormat::adoptNumberFormat(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::NumberFormat *a3, UErrorCode *a4)
{
  icu::SharedObject *result;
  _OWORD *v9;
  icu::SharedObject *v10;
  unint64_t i;
  int v12;
  unint64_t v13;
  const icu::UnicodeString *v14;
  UChar v15;
  unsigned int PatternCharIndex;

  (*(void (**)(icu::NumberFormat *))(*(_QWORD *)a3 + 288))(a3);
  if (*(int *)a4 > 0)
    return (icu::SharedObject *)(*(uint64_t (**)(icu::NumberFormat *))(*(_QWORD *)a3 + 8))(a3);
  if (!*((_QWORD *)this + 100))
  {
    v9 = uprv_malloc(0x130uLL);
    if (!v9)
    {
      *((_QWORD *)this + 100) = 0;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      return (icu::SharedObject *)(*(uint64_t (**)(icu::NumberFormat *))(*(_QWORD *)a3 + 8))(a3);
    }
    v9[17] = 0u;
    v9[18] = 0u;
    v9[15] = 0u;
    v9[16] = 0u;
    v9[13] = 0u;
    v9[14] = 0u;
    v9[11] = 0u;
    v9[12] = 0u;
    v9[9] = 0u;
    v9[10] = 0u;
    v9[7] = 0u;
    v9[8] = 0u;
    v9[5] = 0u;
    v9[6] = 0u;
    v9[3] = 0u;
    v9[4] = 0u;
    v9[1] = 0u;
    v9[2] = 0u;
    *v9 = 0u;
    *((_QWORD *)this + 100) = v9;
  }
  result = (icu::SharedObject *)sub_18BD789E0((uint64_t)a3);
  if (result)
  {
    v10 = result;
    for (i = 0; ; ++i)
    {
      v12 = *((__int16 *)a2 + 4);
      if (v12 < 0)
      {
        if ((uint64_t)i >= *((int *)a2 + 3))
          return (icu::SharedObject *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)v10);
        v13 = *((unsigned int *)a2 + 3);
      }
      else
      {
        if (i >= (unint64_t)*((unsigned __int16 *)a2 + 4) >> 5)
          return (icu::SharedObject *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)v10);
        v13 = (unint64_t)*((unsigned __int16 *)a2 + 4) >> 5;
      }
      if (v13 <= i)
      {
        v15 = -1;
      }
      else
      {
        v14 = (v12 & 2) != 0
            ? (const icu::UnicodeString *)((char *)a2 + 10)
            : (const icu::UnicodeString *)*((_QWORD *)a2 + 3);
        v15 = *((_WORD *)v14 + i);
      }
      PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v15);
      if (PatternCharIndex == 38)
        break;
      sub_18BC4A244(v10, (icu::SharedObject **)(*((_QWORD *)this + 100) + 8 * PatternCharIndex));
    }
    *a4 = U_INVALID_FORMAT_ERROR;
    return (icu::SharedObject *)icu::SharedObject::deleteIfZeroRefCount((uint64_t)v10);
  }
  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

_QWORD *sub_18BD789E0(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
  v3 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x20, v2);
  v4 = v3;
  if (v3)
  {
    *v3 = off_1E2263B08;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = a1;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  }
  return v4;
}

uint64_t icu::SimpleDateFormat::getNumberFormatForField(uint64_t a1, UChar c)
{
  unsigned int PatternCharIndex;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(c);
  if (PatternCharIndex == 38)
    return 0;
  v5 = *(_QWORD *)(a1 + 800);
  if (v5 && (v6 = *(_QWORD *)(v5 + 8 * PatternCharIndex)) != 0)
    v7 = v6 + 24;
  else
    v7 = a1 + 336;
  return *(_QWORD *)v7;
}

uint64_t icu::SimpleDateFormat::isAtNumericField(icu::SimpleDateFormat *this, const icu::UnicodeString *a2)
{
  int v2;
  unsigned int v4;
  int v5;
  icu::SimpleDateFormat *v6;
  int v7;
  int PatternCharIndex;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  int v15;

  v2 = (int)a2;
  v4 = *((unsigned __int16 *)this + 4);
  if (*((__int16 *)this + 4) < 0)
    v5 = *((_DWORD *)this + 3);
  else
    v5 = v4 >> 5;
  if (v5 <= (int)a2)
    return 0;
  if (v5 <= a2)
  {
    v7 = 0xFFFF;
  }
  else
  {
    v6 = (v4 & 2) != 0 ? (icu::SimpleDateFormat *)((char *)this + 10) : (icu::SimpleDateFormat *)*((_QWORD *)this + 3);
    v7 = *((unsigned __int16 *)v6 + (int)a2);
  }
  PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v7);
  if (PatternCharIndex == 38)
    return 0;
  v10 = 0;
  v11 = *((unsigned __int16 *)this + 4);
  if ((v11 & 0x8000u) == 0)
    v12 = v11 >> 5;
  else
    v12 = *((_DWORD *)this + 3);
  if ((v11 & 2) != 0)
    v13 = (char *)this + 10;
  else
    v13 = (char *)*((_QWORD *)this + 3);
  v14 = (uint64_t)&v13[2 * v2 + 2];
  do
  {
    if (v12 <= v2 + 1 + (int)v10)
      v15 = 0xFFFF;
    else
      v15 = *(unsigned __int16 *)(v14 + 2 * v10);
    ++v10;
  }
  while (v15 == v7);
  return icu::DateFormatSymbols::isNumericField(PatternCharIndex, v10);
}

BOOL icu::SimpleDateFormat::isAfterNonNumericField(icu::SimpleDateFormat *this, const icu::UnicodeString *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v5;
  unsigned int v6;
  icu::SimpleDateFormat *v7;
  int v8;
  int PatternCharIndex;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  int v16;

  v2 = (_DWORD)a2 - 1;
  if ((int)a2 < 1)
    return 0;
  v3 = (int)a2;
  v5 = *((unsigned __int16 *)this + 4);
  v6 = (v5 & 0x8000u) == 0 ? v5 >> 5 : *((_DWORD *)this + 3);
  if (v6 <= v2)
  {
    v8 = 0xFFFF;
  }
  else
  {
    v7 = (v5 & 2) != 0 ? (icu::SimpleDateFormat *)((char *)this + 10) : (icu::SimpleDateFormat *)*((_QWORD *)this + 3);
    v8 = *((unsigned __int16 *)v7 + v2);
  }
  PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v8);
  if (PatternCharIndex == 38)
    return 0;
  v11 = 0;
  v12 = *((unsigned __int16 *)this + 4);
  if ((v12 & 0x8000u) == 0)
    v13 = v12 >> 5;
  else
    v13 = *((_DWORD *)this + 3);
  if ((v12 & 2) != 0)
    v14 = (char *)this + 10;
  else
    v14 = (char *)*((_QWORD *)this + 3);
  v15 = (uint64_t)&v14[2 * v2 - 2];
  do
  {
    if (v13 <= v3 - 2 + (int)v11)
      v16 = 0xFFFF;
    else
      v16 = *(unsigned __int16 *)(v15 + 2 * v11);
    --v11;
  }
  while (v16 == v8);
  return icu::DateFormatSymbols::isNumericField(PatternCharIndex, -(int)v11) == 0;
}

void icu::SimpleDateFormat::parse(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Calendar *a3, icu::ParsePosition *a4)
{
  icu::ParsePosition *v4;
  unsigned int v5;
  icu::Calendar *v6;
  const icu::UnicodeString *v7;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double TimeInMillis;
  uint64_t TimeZone;
  uint64_t v15;
  uint64_t *v16;
  icu::MessageFormat *v17;
  uint64_t v18;
  signed int v19;
  icu::SimpleDateFormat *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  signed int i;
  uint64_t v30;
  int64_t v31;
  char *v32;
  int v33;
  int *v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  char *v55;
  const icu::UnicodeString *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  double v62;
  int v63;
  double v64;
  BOOL v65;
  icu::Calendar *v66;
  unsigned int v67;
  int v68;
  int v69;
  icu::Calendar *v70;
  icu::Calendar *v71;
  __n128 v72;
  uint64_t v73;
  icu::Calendar *v74;
  const void *v75;
  const void *v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  int v82;
  int v83;
  double v84;
  __n128 v85;
  icu::TimeZoneRule *v86;
  int DSTSavings;
  double j;
  icu::TimeZoneRule *v89;
  int v90;
  uint64_t v91;
  double v92;
  int v93;
  int v94;
  icu::Calendar *v95;
  icu::ParsePosition *v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  icu::Calendar *v101;
  _OWORD v102[2];
  uint64_t v103;
  int v104;
  int v105;
  BOOL v106;
  unsigned int v107;
  _QWORD v108[2];

  v4 = a4;
  v5 = *((_DWORD *)a4 + 2);
  v108[0] = v5;
  if ((v5 & 0x80000000) != 0)
  {
    *((_DWORD *)a4 + 3) = 0;
    return;
  }
  v6 = a3;
  v7 = a2;
  v97 = v5;
  v107 = -1;
  v106 = 0;
  v104 = 0;
  v105 = -1;
  if (*((icu::Calendar **)this + 41) == a3
    || (v9 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a3 + 184))(a3),
        v10 = (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 184))(*((_QWORD *)this + 41)),
        !strcmp(v9, v10)))
  {
    v12 = 0;
    v101 = v6;
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 24))(*((_QWORD *)this + 41));
    if (!v11)
      goto LABEL_176;
    v12 = v11;
    TimeInMillis = icu::Calendar::getTimeInMillis(v6, (UErrorCode *)v108 + 1);
    icu::Calendar::setTimeInMillis(v12, TimeInMillis, (UErrorCode *)v108 + 1);
    if (SHIDWORD(v108[0]) > 0)
      goto LABEL_174;
    TimeZone = icu::Calendar::getTimeZone(v6);
    icu::Calendar::setTimeZone(v12, TimeZone);
    v101 = (icu::Calendar *)v12;
  }
  v15 = *((_QWORD *)this + 96);
  if (*(_QWORD *)(v15 + 472) && (v16 = (uint64_t *)*(unsigned int *)(v15 + 480), (int)v16 >= 7))
  {
    v17 = (icu::MessageFormat *)icu::UMemory::operator new(v16, (icu::UMemory *)0x330, (unint64_t)a2);
    v18 = (uint64_t)v17;
    if (!v17)
      goto LABEL_135;
    icu::MessageFormat::MessageFormat(v17, (const icu::UnicodeString *)(*(_QWORD *)(*((_QWORD *)this + 96) + 472) + 384), (icu::SimpleDateFormat *)((char *)this + 544), (UErrorCode *)v108 + 1);
    if (SHIDWORD(v108[0]) > 0)
      goto LABEL_168;
  }
  else
  {
    v18 = 0;
  }
  v95 = v6;
  v96 = v4;
  v19 = 0;
  v94 = 0;
  v100 = 0;
  v20 = (icu::SimpleDateFormat *)((char *)this + 352);
  v21 = -1;
  v98 = (uint64_t)v7;
  v99 = v18;
  while (1)
  {
    LODWORD(v102[0]) = v19;
    v22 = *((unsigned __int16 *)this + 180);
    if ((v22 & 0x8000) != 0)
      break;
    if (v19 >= (int)(v22 >> 5))
      goto LABEL_83;
    v23 = v22 >> 5;
    if (v23 <= v19)
      goto LABEL_37;
LABEL_20:
    v24 = (char *)this + 362;
    if ((v22 & 2) == 0)
      v24 = (char *)*((_QWORD *)this + 47);
    v25 = *(unsigned __int16 *)&v24[2 * v19];
    if (v25 <= 0x7F && byte_18BE2AFCC[v25])
    {
      v26 = 0;
      v27 = (uint64_t)v19 << 32;
      v28 = v19 + 2;
      for (i = v19; ; ++i)
      {
        v30 = v19 + 1 + v26;
        if ((v22 & 0x8000) != 0)
        {
          v31 = *((int *)this + 91);
          if (v30 >= v31)
            break;
        }
        else
        {
          v31 = v22 >> 5;
          if (v30 >= (uint64_t)(v22 >> 5))
            break;
        }
        if (v31 <= v19 + (int)v26 + 1)
        {
          v33 = 0xFFFF;
        }
        else
        {
          v32 = (char *)this + 362;
          if ((v22 & 2) == 0)
            v32 = (char *)*((_QWORD *)this + 47);
          v33 = *(unsigned __int16 *)&v32[2 * v19 + 2 + 2 * v26];
        }
        if (v33 != (_DWORD)v25)
          break;
        ++v26;
        v27 += 0x100000000;
        ++v28;
      }
      v37 = v26 + v19;
      LODWORD(v102[0]) = v26 + v19;
      v38 = v26 + 1;
      if (!icu::DateFormatSymbols::isNumericPatternChar(v25, v26 + 1))
      {
        v21 = -1;
        goto LABEL_46;
      }
      if (v21 < 0)
      {
        if (!icu::SimpleDateFormat::isAtNumericField((icu::SimpleDateFormat *)((char *)this + 352), (const icu::UnicodeString *)(v37 + 1)))goto LABEL_46;
        v94 = v108[0];
        if (v19 < 0)
        {
          v100 = 0;
          v21 = v19;
LABEL_46:
          if ((_DWORD)v25 == 108)
          {
            v7 = (const icu::UnicodeString *)v98;
            v18 = v99;
            v20 = (icu::SimpleDateFormat *)((char *)this + 352);
            goto LABEL_39;
          }
          v7 = (const icu::UnicodeString *)v98;
          v18 = v99;
          v40 = icu::SimpleDateFormat::subParse((icu::NumberFormat **)this, v98, (int *)v108, v25, v38, 0, 1, &v106, &v105, v101, v37, v99, (uint64_t)&v104);
          v41 = v108[0];
          if (v40 == ~LODWORD(v108[0]))
          {
            v42 = v37 + 1;
            v43 = *((unsigned __int16 *)this + 180);
            if (*((__int16 *)this + 180) < 0)
            {
              v44 = *((_DWORD *)this + 91);
              if (v42 >= (int)v44)
                goto LABEL_60;
LABEL_64:
              if (v44 <= v42)
              {
                v46 = 0xFFFFLL;
              }
              else
              {
                v45 = (char *)this + 362;
                if ((v43 & 2) == 0)
                  v45 = (char *)*((_QWORD *)this + 47);
                v46 = *(unsigned __int16 *)&v45[2 * v42];
              }
              if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v46))
              {
                v18 = v99;
                goto LABEL_60;
              }
              v47 = i + 2;
              v20 = (icu::SimpleDateFormat *)((char *)this + 352);
              do
              {
                v48 = v47;
                if (*((__int16 *)this + 180) < 0)
                {
                  v49 = *((int *)this + 91);
                  if (v47 >= v49)
                    break;
                }
                else
                {
                  if (v47 >= (uint64_t)((unint64_t)*((unsigned __int16 *)this + 180) >> 5))
                    break;
                  v49 = (unint64_t)*((unsigned __int16 *)this + 180) >> 5;
                }
                if (v49 <= v47)
                {
                  v51 = 0xFFFFLL;
                }
                else
                {
                  v50 = (char *)this + 362;
                  if ((*((_WORD *)this + 180) & 2) == 0)
                    v50 = (char *)*((_QWORD *)this + 47);
                  v51 = *(unsigned __int16 *)&v50[2 * v47];
                }
                ++v47;
              }
              while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v51));
              LODWORD(v37) = v48 - 1;
              LODWORD(v102[0]) = v48 - 1;
              v18 = v99;
            }
            else
            {
              if (v42 < (int)(v43 >> 5))
              {
                v44 = v43 >> 5;
                goto LABEL_64;
              }
LABEL_60:
              v20 = (icu::SimpleDateFormat *)((char *)this + 352);
            }
            LODWORD(v108[0]) = v41;
            goto LABEL_39;
          }
          if (v40 < 1)
          {
LABEL_94:
            HIDWORD(v108[0]) = 9;
            v6 = v95;
            v4 = v96;
            goto LABEL_168;
          }
          v41 = v40;
          goto LABEL_60;
        }
        v100 = 0;
        v21 = v19;
      }
      v18 = v99;
      v20 = (icu::SimpleDateFormat *)((char *)this + 352);
      if (v19 == v21)
      {
        if ((_DWORD)v26 - v100 == -1)
          goto LABEL_94;
        v39 = v100 + 1;
        v38 = v26 - v100 + 1;
      }
      else
      {
        v39 = v100;
      }
      v100 = v39;
      v7 = (const icu::UnicodeString *)v98;
      LODWORD(v108[0]) = icu::SimpleDateFormat::subParse((icu::NumberFormat **)this, v98, (int *)v108, v25, v38, 1, 0, &v106, &v105, v101, v37, v99, (uint64_t)&v104);
      if ((v108[0] & 0x80000000) != 0)
      {
        LODWORD(v37) = v21 - 1;
        LODWORD(v102[0]) = v21 - 1;
        LODWORD(v108[0]) = v94;
      }
    }
    else
    {
LABEL_37:
      v34 = (int *)(*(uint64_t (**)(icu::SimpleDateFormat *, _QWORD, char *))(*(_QWORD *)this + 224))(this, 0, (char *)v108 + 4);
      v35 = (*(uint64_t (**)(icu::SimpleDateFormat *, uint64_t, char *))(*(_QWORD *)this + 224))(this, 2, (char *)v108 + 4);
      v36 = (*(uint64_t (**)(icu::SimpleDateFormat *))(*(_QWORD *)this + 96))(this);
      if (!icu::SimpleDateFormat::matchLiterals(v20, (const icu::UnicodeString *)v102, (int *)v7, (const icu::UnicodeString *)v108, v34, v35, v36))goto LABEL_94;
      v21 = -1;
      LODWORD(v37) = v102[0];
    }
LABEL_39:
    v19 = v37 + 1;
  }
  v23 = *((_DWORD *)this + 91);
  if (v19 < (int)v23)
    goto LABEL_20;
LABEL_83:
  v52 = v108[0];
  v53 = *((unsigned __int16 *)v7 + 4);
  if ((v53 & 0x8000u) == 0)
    v54 = v53 >> 5;
  else
    v54 = *((_DWORD *)v7 + 3);
  if (v54 <= LODWORD(v108[0]))
  {
    v6 = v95;
  }
  else
  {
    if ((v53 & 2) != 0)
      v55 = (char *)v7 + 10;
    else
      v55 = (char *)*((_QWORD *)v7 + 3);
    v6 = v95;
    if (*(_WORD *)&v55[2 * SLODWORD(v108[0])] == 46
      && (*(unsigned int (**)(icu::SimpleDateFormat *, _QWORD, char *))(*(_QWORD *)this + 224))(this, 0, (char *)v108 + 4))
    {
      v56 = *((__int16 *)this + 180) < 0
          ? (const icu::UnicodeString *)*((unsigned int *)this + 91)
          : (const icu::UnicodeString *)(*((unsigned __int16 *)this + 180) >> 5);
      if (icu::SimpleDateFormat::isAfterNonNumericField(v20, v56))
        LODWORD(v108[0]) = ++v52;
    }
  }
  v57 = v107;
  if ((v107 & 0x80000000) == 0)
  {
    v58 = sub_18BCB132C((icu::SimpleDateFormat *)((char *)this + 544), (int *)v108 + 1);
    if (icu::Calendar::isSet((uint64_t)v6, 0xAu) || icu::Calendar::isSet((uint64_t)v6, 0xBu))
    {
      if (icu::Calendar::isSet((uint64_t)v6, 0xBu))
      {
        v59 = icu::Calendar::get(v6, 0xBu, (UErrorCode *)v108 + 1);
        if (!v59)
        {
LABEL_115:
          v66 = v6;
          v67 = 11;
          v68 = v59;
          goto LABEL_116;
        }
      }
      else
      {
        v60 = icu::Calendar::get(v6, 0xAu, (UErrorCode *)v108 + 1);
        if (v60)
          v59 = v60;
        else
          v59 = 12;
      }
      if ((v59 - 13) <= 0xA)
        goto LABEL_115;
      v61 = icu::Calendar::get(v6, 0xCu, (UErrorCode *)v108 + 1);
      v62 = sub_18BCB154C(v58, v57, (int *)v108 + 1);
      if (SHIDWORD(v108[0]) <= 0)
      {
        if (v59 == 12)
          v63 = 0;
        else
          v63 = v59;
        v64 = (double)v61 / 60.0 + (double)v63 - v62;
        v65 = v64 >= -6.0 && v64 < 6.0;
        v66 = v6;
        v67 = 9;
        v68 = !v65;
        goto LABEL_116;
      }
    }
    else
    {
      v81 = sub_18BCB154C(v58, v57, (int *)v108 + 1);
      if (SHIDWORD(v108[0]) <= 0)
      {
        if (v81 - (double)(int)v81 <= 0.0)
          v82 = 0;
        else
          v82 = 30;
        icu::Calendar::set(v6, 0xBu, (int)v81);
        v66 = v6;
        v67 = 12;
        v68 = v82;
LABEL_116:
        icu::Calendar::set(v66, v67, v68);
      }
    }
  }
  *((_DWORD *)v96 + 2) = v52;
  v4 = v96;
  v69 = v104;
  if (v106 || v104)
  {
    if (!v106)
      goto LABEL_125;
    v70 = (icu::Calendar *)(*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)v6 + 24))(v6);
    if (!v70)
      goto LABEL_135;
    v71 = v70;
    v72.n128_f64[0] = icu::Calendar::getTimeInMillis(v70, (UErrorCode *)v108 + 1);
    if (*((_BYTE *)this + 816) && v72.n128_f64[0] < *((double *)this + 98))
      icu::Calendar::set(v6, 1u, *((_DWORD *)this + 199) + 100);
    (*(void (**)(icu::Calendar *, __n128))(*(_QWORD *)v71 + 8))(v71, v72);
    v69 = v104;
LABEL_125:
    if (v69)
    {
      v73 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)v6 + 24))(v6);
      if (v73)
      {
        v74 = (icu::Calendar *)v73;
        v75 = (const void *)icu::Calendar::getTimeZone(v6);
        {
          v76 = v75;
        }
        else
        {
          v76 = 0;
        }
        icu::Calendar::set(v74, 0xFu, 0);
        icu::Calendar::set(v74, 0x10u, 0);
        v77 = icu::Calendar::getTimeInMillis(v74, (UErrorCode *)v108 + 1);
        v78 = v77;
        v103 = 0;
        if (v76)
        {
          if (v104 == 1)
          {
            v79 = 5;
            v80 = 13;
          }
          else
          {
            v79 = 7;
            v80 = 15;
          }
          (*(void (**)(const void *, uint64_t, uint64_t, char *, uint64_t *, char *))(*(_QWORD *)v76 + 160))(v76, v79, v80, (char *)&v103 + 4, &v103, (char *)v108 + 4);
        }
        else
        {
          (*(void (**)(const void *, uint64_t, char *, uint64_t *, char *, double))(*(_QWORD *)v75 + 48))(v75, 1, (char *)&v103 + 4, &v103, (char *)v108 + 4, v77);
        }
        if (v104 == 1)
        {
          v83 = 0;
        }
        else
        {
          v83 = v103;
          if (!(_DWORD)v103)
          {
            if (v76)
            {
              v84 = v78 + (double)SHIDWORD(v103);
              memset(v102, 0, sizeof(v102));
              icu::TimeZoneTransition::TimeZoneTransition(v102);
              if (v84 < v84 + 9.4608e11)
              {
                v85.n128_f64[0] = v84;
                do
                {
                  if (!(*(unsigned int (**)(const void *, _QWORD, _OWORD *, __n128))(*(_QWORD *)v76 + 112))(v76, 0, v102, v85))break;
                  v86 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v102);
                  DSTSavings = icu::TimeZoneRule::getDSTSavings(v86);
                  if (DSTSavings)
                    goto LABEL_162;
                  v85.n128_f64[0] = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102);
                }
                while (v85.n128_f64[0] < v84 + 9.4608e11);
              }
              for (j = v84 + -9.4608e11;
                    v84 > j;
                    v84 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v102) + -1.0)
              {
                if (!(*(unsigned int (**)(const void *, uint64_t, _OWORD *, double))(*(_QWORD *)v76 + 120))(v76, 1, v102, v84))break;
                v89 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v102);
                DSTSavings = icu::TimeZoneRule::getDSTSavings(v89);
                if (DSTSavings)
                  goto LABEL_162;
              }
              DSTSavings = (*(uint64_t (**)(const void *))(*(_QWORD *)v76 + 104))(v76);
LABEL_162:
              v90 = DSTSavings;
              icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v102);
            }
            else
            {
              v90 = (*(uint64_t (**)(const void *))(*(_QWORD *)v75 + 104))(v75);
            }
            if (v90)
              v83 = v90;
            else
              v83 = 3600000;
          }
        }
        icu::Calendar::set(v6, 0xFu, SHIDWORD(v103));
        icu::Calendar::set(v6, 0x10u, v83);
        (*(void (**)(icu::Calendar *))(*(_QWORD *)v74 + 8))(v74);
        goto LABEL_168;
      }
LABEL_135:
      HIDWORD(v108[0]) = 7;
    }
  }
LABEL_168:
  if (v101 != v6 && SHIDWORD(v108[0]) <= 0)
  {
    v91 = icu::Calendar::getTimeZone(v101);
    icu::Calendar::setTimeZone((uint64_t)v6, v91);
    v92 = icu::Calendar::getTimeInMillis(v101, (UErrorCode *)v108 + 1);
    icu::Calendar::setTimeInMillis((uint64_t)v6, v92, (UErrorCode *)v108 + 1);
  }
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v12)
LABEL_174:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (SHIDWORD(v108[0]) >= 1)
  {
LABEL_176:
    v93 = v108[0];
    *((_DWORD *)v4 + 2) = v97;
    *((_DWORD *)v4 + 3) = v93;
  }
}

uint64_t icu::SimpleDateFormat::subParse(icu::NumberFormat **a1, uint64_t a2, int *a3, UChar a4, int a5, int a6, int a7, BOOL *a8, int *a9, _BYTE *a10, int a11, uint64_t a12, uint64_t a13)
{
  unint64_t v14;
  unsigned int PatternCharIndex;
  _BOOL8 v20;
  icu::NumberFormat *v21;
  uint64_t v22;
  icu::NumberFormat **v23;
  const char *v24;
  const char *v25;
  _BOOL4 v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  icu::PatternProps *v33;
  uint64_t isWhiteSpace;
  int v35;
  unsigned int v36;
  int v37;
  icu::Formattable *v39;
  BOOL v40;
  icu::Formattable *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  const icu::UnicodeString *v46;
  unsigned int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  _BOOL4 v57;
  int v58;
  int v59;
  icu::NumberFormat *v60;
  const icu::UnicodeString *v61;
  int v62;
  const icu::UnicodeString *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  icu::TimeZoneFormat *v67;
  BOOL v68;
  unsigned int v69;
  const char *v70;
  int v71;
  _BYTE *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  icu::NumberFormat *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  const icu::UnicodeString *v91;
  const icu::UnicodeString *v92;
  const icu::UnicodeString *v93;
  icu::SimpleDateFormat *v94;
  icu::NumberFormat *v95;
  int v96;
  _BYTE *v97;
  int v98;
  icu::NumberFormat *v99;
  uint64_t v100;
  int v101;
  unsigned int *v102;
  uint64_t v103;
  icu::HebrewCalendar *v104;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  icu::NumberFormat *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  int v114;
  const icu::UnicodeString *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  icu::NumberFormat *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  icu::NumberFormat *v123;
  int v124;
  int v125;
  uint32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  uint64_t v131;
  icu::NumberFormat *v132;
  icu::NumberFormat *v133;
  uint64_t v134;
  unsigned int matched;
  icu::SimpleDateFormat *v136;
  icu::NumberFormat *v137;
  int v138;
  uint64_t v139;
  icu::NumberFormat *v140;
  int v141;
  unsigned int v142;
  int v143;
  int v144;
  _BYTE *v145;
  icu::SimpleDateFormat *v146;
  int v147;
  uint64_t v148;
  int v149;
  int v150;
  const char *v151;
  int v152;
  uint64_t v153;
  UChar32 v154;
  int v155;
  uint64_t *v156;
  UChar32 v157;
  int v158;
  int v159;
  int v160;
  _BOOL4 isLeapYear;
  int v162;
  int v164;
  int v165;
  int v166;
  UChar32 v167;
  int v168;
  uint64_t *v169;
  UChar32 v170;
  int v171;
  int v172;
  uint32x4_t v173;
  int32x4_t v174;
  unsigned int v175;
  int32x4_t v176;
  int8x16_t v177;
  int8x16_t v178;
  icu::HebrewCalendar *v179;
  _BOOL4 v181;
  char *v182;
  int v183;
  _BOOL4 v184;
  int v185;
  unsigned int v186;
  icu::NumberFormat *lpsrc;
  void (**v190)(icu::ParsePosition *__hidden);
  unsigned int v191[3];
  UErrorCode v192;
  UErrorCode v193[4];
  _OWORD v194[4];
  void (**v195)(icu::UnicodeString *__hidden);
  __int128 v196;
  __int128 v197;
  __int128 v198;
  uint64_t v199;
  _OWORD v200[7];
  uint64_t v201;

  LODWORD(v14) = a5;
  v201 = *MEMORY[0x1E0C80C00];
  memset(v200, 0, sizeof(v200));
  icu::Formattable::Formattable((icu::Formattable *)v200);
  v192 = U_ZERO_ERROR;
  v190 = off_1E224A8B0;
  *(_QWORD *)v191 = 0xFFFFFFFF00000000;
  PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(a4);
  lpsrc = 0;
  v196 = 0u;
  v199 = 0;
  v198 = 0u;
  v197 = 0u;
  v195 = off_1E2256B38;
  LOWORD(v196) = 2;
  v20 = (*((unsigned int (**)(icu::NumberFormat **))*a1 + 12))(a1) != 0;
  if (PatternCharIndex != 38)
  {
    v21 = a1[100];
    if (v21 && (v22 = *((_QWORD *)v21 + PatternCharIndex)) != 0)
      v23 = (icu::NumberFormat **)(v22 + 24);
    else
      v23 = a1 + 42;
    lpsrc = *v23;
    if (lpsrc)
    {
      v186 = icu::SimpleDateFormat::fgPatternIndexToCalendarField[PatternCharIndex];
      memset(v194, 0, sizeof(v194));
      icu::UnicodeString::UnicodeString(v194, "hebr", 4, 0);
      if (a12)
        (*(void (**)(uint64_t, icu::NumberFormat **, uint64_t))(*(_QWORD *)a12 + 120))(a12, &lpsrc, 1);
      v24 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a10 + 184))(a10);
      if (!strcmp(v24, "chinese"))
      {
        v26 = 1;
      }
      else
      {
        v25 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a10 + 184))(a10);
        v26 = strcmp(v25, "dangi") == 0;
      }
      v29 = *a3;
      v30 = *(unsigned __int16 *)(a2 + 8);
      v31 = (__int16)v30;
      LODWORD(v32) = v30 >> 5;
      if (v31 >= 0)
        v32 = v32;
      else
        v32 = *(unsigned int *)(a2 + 12);
      if (v29 >= (int)v32)
      {
LABEL_27:
        v28 = -v29;
        goto LABEL_28;
      }
      v184 = v26;
      v185 = v14;
      v32 = a13;
      while (1)
      {
        v33 = (icu::PatternProps *)icu::UnicodeString::char32At((uint64_t *)v32, (icu::UnicodeString *)a2, v29);
        if (!u_isUWhiteSpace((UChar32)v33))
        {
          isWhiteSpace = icu::PatternProps::isWhiteSpace(v33);
          if (!(_DWORD)isWhiteSpace)
            break;
        }
        if (v33 < 0x10000)
          v35 = 1;
        else
          v35 = 2;
        v29 = *a3 + v35;
        *a3 = v29;
        v36 = *(unsigned __int16 *)(a2 + 8);
        v37 = (__int16)v36;
        LODWORD(v32) = v36 >> 5;
        if (v37 >= 0)
          v32 = v32;
        else
          v32 = *(unsigned int *)(a2 + 12);
        if (v29 >= (int)v32)
          goto LABEL_27;
      }
      v183 = *a3;
      v191[0] = *a3;
      if (PatternCharIndex > 0x10 || ((1 << PatternCharIndex) & 0x18030) == 0)
      {
        v52 = PatternCharIndex == 19 || PatternCharIndex == 25;
        v53 = v52 || PatternCharIndex == 2;
        v54 = v53 || (PatternCharIndex & 0xFFFFFFFE) == 26;
        v55 = v54 || PatternCharIndex == 28;
        v56 = v55;
        if (((int)v14 > 2 || !v56) && ((1 << PatternCharIndex) & 0x40040002) == 0)
        {
LABEL_76:
          v57 = v184;
          if (PatternCharIndex)
            v57 = 0;
          if (PatternCharIndex != 8 && !v57)
          {
            v14 = 0;
            v51 = 1;
            goto LABEL_90;
          }
        }
      }
      if (a12 && (PatternCharIndex == 26 || PatternCharIndex == 2))
      {
        v193[0] = U_ZERO_ERROR;
        v39 = (icu::Formattable *)(*(uint64_t (**)(uint64_t, uint64_t, void (***)(icu::ParsePosition *__hidden), UErrorCode *))(*(_QWORD *)a12 + 184))(a12, a2, &v190, v193);
        if (v39)
          v40 = v193[0] == U_ILLEGAL_ARGUMENT_ERROR;
        else
          v40 = 0;
        if (v40 && (signed int)v191[0] > v183)
        {
          v42 = v39;
          if (icu::Formattable::isNumeric(v39))
          {
            icu::Formattable::setLong((icu::Formattable *)v200, *((_DWORD *)v42 + 2));
            icu::Calendar::set(a10, 0x16u, 1);
            v182 = (char *)v42 - 16;
            v43 = *((_QWORD *)v42 - 1);
            if (v43)
            {
              v44 = 112 * v43;
              v45 = (char *)v42 - 112;
              do
              {
                icu::Formattable::~Formattable((icu::Formattable *)&v45[v44]);
                v44 -= 112;
              }
              while (v44);
            }
            icu::UMemory::operator delete[](v182);
            goto LABEL_54;
          }
        }
        v191[0] = v183;
        isWhiteSpace = (uint64_t)icu::Calendar::set(a10, 0x16u, 0);
      }
      v46 = (const icu::UnicodeString *)a2;
      if (a6)
      {
        v32 = *a3;
        v47 = *(unsigned __int16 *)(a2 + 8);
        v48 = (__int16)v47;
        v49 = v47 >> 5;
        if (v48 < 0)
          v49 = *(_DWORD *)(a2 + 12);
        if ((int)v32 + (int)v14 > v49)
          goto LABEL_278;
        v46 = (const icu::UnicodeString *)&v195;
        isWhiteSpace = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 0);
      }
      isWhiteSpace = (uint64_t)icu::SimpleDateFormat::parseInt((icu::SimpleDateFormat *)isWhiteSpace, v46, (icu::Formattable *)v200, -1, (icu::ParsePosition *)&v190, a7, lpsrc);
LABEL_54:
      if ((int)v191[0] <= v183)
      {
        v14 = 0;
        v51 = 1;
        v183 = v191[0];
      }
      else
      {
        v14 = DWORD2(v200[0]);
        v50 = (a11 + 1);
        if ((DWORD2(v200[0]) & 0x80000000) != 0)
        {
          v183 = icu::SimpleDateFormat::checkIntSuffix((icu::SimpleDateFormat *)a1, (const icu::UnicodeString *)a2, v191[0], v50, 1);
          if (v183 == v191[0])
            v14 = v14;
          else
            v14 = -(int)v14;
        }
        else
        {
          v183 = icu::SimpleDateFormat::checkIntSuffix((icu::SimpleDateFormat *)a1, (const icu::UnicodeString *)a2, v191[0], v50, 0);
        }
        isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, _QWORD, UErrorCode *))*a1 + 28))(a1, 0, &v192);
        if ((_DWORD)isWhiteSpace)
        {
          if (((0x60000CCuLL >> PatternCharIndex) & 1) != 0)
          {
            v58 = dword_18BE2B274[PatternCharIndex];
            isWhiteSpace = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a10 + 128))(a10, v186);
            if ((int)v14 > (int)isWhiteSpace + v58)
              goto LABEL_277;
          }
        }
        else if (((0x60000CCuLL >> PatternCharIndex) & 1) != 0)
        {
          v59 = dword_18BE2B1E4[PatternCharIndex];
          if ((int)v14 > (int)((*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a10 + 128))(a10, v186) + v59))
            goto LABEL_277;
          isWhiteSpace = (*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)a10 + 112))(a10, v186);
          if ((int)v14 < (int)isWhiteSpace + v59)
            goto LABEL_277;
        }
        v51 = 0;
        v191[0] = v183;
      }
LABEL_90:
      if (PatternCharIndex > 0x25)
      {
LABEL_268:
        v141 = v191[0];
        if (a6)
        {
          v32 = *a3;
          v142 = *(unsigned __int16 *)(a2 + 8);
          v143 = (__int16)v142;
          v144 = v142 >> 5;
          if (v143 < 0)
            v144 = *(_DWORD *)(a2 + 12);
          v145 = a10;
          if ((int)v32 + v185 > v144)
            goto LABEL_278;
          v146 = (icu::SimpleDateFormat *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, 0);
          icu::SimpleDateFormat::parseInt(v146, (const icu::UnicodeString *)&v195, (icu::Formattable *)v200, -1, (icu::ParsePosition *)&v190, a7, lpsrc);
          v147 = (*((uint64_t (**)(icu::NumberFormat **))*a1 + 12))(a1);
          v32 = v191[0];
          if (!v147 && (int)v191[0] < *a3 + v185)
          {
            v28 = -*a3;
            goto LABEL_28;
          }
        }
        else
        {
          icu::SimpleDateFormat::parseInt((icu::SimpleDateFormat *)isWhiteSpace, (const icu::UnicodeString *)a2, (icu::Formattable *)v200, -1, (icu::ParsePosition *)&v190, a7, lpsrc);
          LODWORD(v32) = v191[0];
          v145 = a10;
        }
        if ((_DWORD)v32 == v141)
        {
LABEL_277:
          v32 = *a3;
LABEL_278:
          v28 = -(int)v32;
          goto LABEL_28;
        }
        v148 = DWORD2(v200[0]);
        if ((*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v192))
        {
          if (((0x60000CCuLL >> PatternCharIndex) & 1) != 0)
          {
            v149 = dword_18BE2B274[PatternCharIndex];
            if ((int)v14 > (int)((*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v145 + 128))(v145, v186)
                                + v149))
              goto LABEL_277;
          }
        }
        else if (((0x60000CCuLL >> PatternCharIndex) & 1) != 0)
        {
          v150 = dword_18BE2B1E4[PatternCharIndex];
          if ((int)((*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v145 + 128))(v145, v186) + v150) < (int)v148
            || (int)((*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)v145 + 112))(v145, v186) + v150) > (int)v148)
          {
            goto LABEL_277;
          }
        }
        switch(PatternCharIndex)
        {
          case 0x19u:
            goto LABEL_326;
          case 0x1Au:
            v71 = v148 - 1;
            goto LABEL_330;
          case 0x1Bu:
          case 0x1Cu:
            v71 = 3 * v148 - 3;
LABEL_330:
            v72 = v145;
            goto LABEL_201;
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
            goto LABEL_327;
          case 0x22u:
            (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v145 + 432))(v145, v148);
            goto LABEL_325;
          default:
            if (PatternCharIndex == 19)
            {
LABEL_326:
              v72 = v145;
              v73 = 18;
            }
            else
            {
              if (PatternCharIndex == 2)
              {
                v151 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v145 + 184))(v145);
                if (strcmp(v151, "hebrew"))
                {
                  v71 = v148 - 1;
                  goto LABEL_163;
                }
                if (!icu::Calendar::isSet((uint64_t)a10, 1u))
                {
                  v32 = (uint64_t)a9;
                  *a9 = v148;
                  goto LABEL_325;
                }
                v193[0] = U_ZERO_ERROR;
                v179 = (icu::HebrewCalendar *)icu::Calendar::get(a10, 1u, v193);
                v181 = icu::HebrewCalendar::isLeapYear(v179) || (int)v148 < 6;
                v71 = v148 - v181;
                v72 = a10;
                goto LABEL_201;
              }
LABEL_327:
              v72 = v145;
              v73 = v186;
            }
            v71 = v148;
            goto LABEL_324;
        }
      }
      switch(PatternCharIndex)
      {
        case 0u:
          if (!v184)
          {
            if (v185 == 4)
            {
              v98 = *a3;
              v133 = a1[96];
              v100 = *((_QWORD *)v133 + 3);
              v101 = *((_DWORD *)v133 + 8);
              v134 = a2;
              v97 = a10;
            }
            else
            {
              v97 = a10;
              v98 = *a3;
              v99 = a1[96];
              if (v185 == 5)
              {
                v100 = *((_QWORD *)v99 + 5);
                v101 = *((_DWORD *)v99 + 12);
              }
              else
              {
                v100 = *((_QWORD *)v99 + 1);
                v101 = *((_DWORD *)v99 + 4);
              }
              v134 = a2;
            }
            matched = icu::SimpleDateFormat::matchString(isWhiteSpace, v134, v98, 0, v100, v101, 0, v97);
            v32 = matched + *a3 == 0;
            v28 = (__PAIR64__(matched, matched + *a3) - 1) >> 32;
            goto LABEL_28;
          }
          if (v51)
            goto LABEL_277;
          v72 = a10;
          v73 = 0;
          goto LABEL_323;
        case 1u:
        case 8u:
        case 0x12u:
          goto LABEL_93;
        case 2u:
        case 0x1Au:
          if ((v51 & 1) == 0)
          {
LABEL_114:
            v70 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a10 + 184))(a10);
            if (!strcmp(v70, "hebrew"))
            {
              if (!icu::Calendar::isSet((uint64_t)a10, 1u))
              {
                v32 = (uint64_t)a9;
                *a9 = v14;
LABEL_325:
                v28 = v191[0];
                goto LABEL_28;
              }
              v193[0] = U_ZERO_ERROR;
              v104 = (icu::HebrewCalendar *)icu::Calendar::get(a10, 1u, v193);
              v106 = icu::HebrewCalendar::isLeapYear(v104) || (int)v14 < 6;
              v71 = v14 - v106;
            }
            else
            {
              v71 = v14 - 1;
            }
            v72 = a10;
            goto LABEL_201;
          }
          v60 = a1[96];
          v61 = (const icu::UnicodeString *)*((_QWORD *)v60 + 59);
          if (v61 && *((int *)v60 + 120) >= 7)
          {
            v62 = v185;
            if (PatternCharIndex == 2)
            {
              v63 = (const icu::UnicodeString *)((char *)v61 + 64);
              goto LABEL_178;
            }
            v92 = (const icu::UnicodeString *)((char *)v61 + 192);
            v91 = (const icu::UnicodeString *)((char *)v61 + 256);
          }
          else
          {
            v63 = 0;
            v61 = 0;
            v91 = 0;
            v92 = 0;
            v62 = v185;
            if (PatternCharIndex == 2)
            {
LABEL_178:
              v93 = v63;
              v94 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1
                                              + 28))(a1, 3, &v192);
              v28 = 0;
              if ((v62 - 3) <= 1 && (_DWORD)v94)
              {
                v95 = a1[96];
                if (*((_QWORD *)v95 + 59) || (v96 = *((_DWORD *)v95 + 16), v96 != *((_DWORD *)v95 + 20)))
                {
                  v28 = 0;
                }
                else
                {
                  v28 = icu::SimpleDateFormat::matchAlphaMonthStrings(v94, (const icu::UnicodeString *)a2, *a3, *((const icu::UnicodeString **)v95 + 7), *((const icu::UnicodeString **)v95 + 9), v96, (icu::Calendar *)a10);
                  if ((int)v28 > 0)
                    goto LABEL_28;
                }
              }
              v131 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
              if (v185 == 4 || (_DWORD)v131)
              {
                v28 = icu::SimpleDateFormat::matchString(v131, a2, *a3, 2, *((_QWORD *)a1[96] + 7), *((_DWORD *)a1[96] + 16), v61, a10);
                if ((int)v28 > 0)
                  goto LABEL_28;
              }
              v108 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
              if (v185 != 3 && !(_DWORD)v108)
                goto LABEL_267;
              v109 = *a3;
              v132 = a1[96];
              v111 = *((_QWORD *)v132 + 9);
              v112 = *((_DWORD *)v132 + 20);
              v113 = a2;
              v114 = 2;
              v115 = v93;
              goto LABEL_266;
            }
          }
          v136 = (icu::SimpleDateFormat *)(*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1
                                           + 28))(a1, 3, &v192);
          v28 = 0;
          if ((v62 - 3) <= 1 && (_DWORD)v136)
          {
            v137 = a1[96];
            if (*((_QWORD *)v137 + 59) || (v138 = *((_DWORD *)v137 + 28), v138 != *((_DWORD *)v137 + 32)))
            {
              v28 = 0;
            }
            else
            {
              v28 = icu::SimpleDateFormat::matchAlphaMonthStrings(v136, (const icu::UnicodeString *)a2, *a3, *((const icu::UnicodeString **)v137 + 13), *((const icu::UnicodeString **)v137 + 15), v138, (icu::Calendar *)a10);
              if ((int)v28 > 0)
                goto LABEL_28;
            }
          }
          v139 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 4 || (_DWORD)v139)
          {
            v28 = icu::SimpleDateFormat::matchString(v139, a2, *a3, 2, *((_QWORD *)a1[96] + 13), *((_DWORD *)a1[96] + 28), v92, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          v108 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 != 3 && !(_DWORD)v108)
            goto LABEL_267;
          v109 = *a3;
          v140 = a1[96];
          v111 = *((_QWORD *)v140 + 15);
          v112 = *((_DWORD *)v140 + 32);
          v113 = a2;
          v114 = 2;
          v115 = v91;
LABEL_266:
          v28 = icu::SimpleDateFormat::matchString(v108, v113, v109, v114, v111, v112, v115, a10);
          if ((int)v28 > 0)
            goto LABEL_28;
LABEL_267:
          isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v192);
          if ((_DWORD)isWhiteSpace)
            goto LABEL_268;
LABEL_28:
          icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)v194);
          goto LABEL_29;
        case 3u:
        case 6u:
        case 7u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0x14u:
        case 0x15u:
        case 0x16u:
          goto LABEL_268;
        case 4u:
        case 5u:
        case 0xFu:
        case 0x10u:
          if (v14 < 0x19)
          {
LABEL_93:
            if (!v51)
            {
              switch(PatternCharIndex)
              {
                case 1u:
                  if (sub_18BD2FB50((uint64_t)(a1 + 52), (uint64_t)v194) || (int)v14 > 999)
                  {
                    v152 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 2);
                    v153 = v152 != v191[0] || v184;
                    if ((v153 & 1) == 0)
                    {
                      v154 = icu::UnicodeString::char32At((uint64_t *)v153, (icu::UnicodeString *)a2, *a3);
                      if (u_isdigit(v154))
                      {
                        v155 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 1);
                        v157 = icu::UnicodeString::char32At(v156, (icu::UnicodeString *)a2, v155);
                        v158 = u_isdigit(v157);
                        if (v185 <= 2 && v158 && *((_BYTE *)a1 + 816))
                        {
                          v159 = *((_DWORD *)a1 + 199) % 100;
                          *a8 = (_DWORD)v14 == v159;
                          if ((int)v14 >= v159)
                            v160 = 0;
                          else
                            v160 = 100;
                          v14 = (v14 + 100 * (*((_DWORD *)a1 + 199) / 100) + v160);
                        }
                      }
                    }
                  }
                  else
                  {
                    v14 = (v14 + 5000);
                  }
                  icu::Calendar::set(a10, 1u, v14);
                  v32 = *a9;
                  if ((v32 & 0x80000000) == 0)
                  {
                    isLeapYear = icu::HebrewCalendar::isLeapYear((icu::HebrewCalendar *)v14);
                    v162 = *a9;
                    v164 = isLeapYear || v162 < 6;
                    icu::Calendar::set(a10, 2u, v162 - v164);
                    v32 = 0xFFFFFFFFLL;
                    *a9 = -1;
                  }
                  goto LABEL_325;
                case 2u:
                  goto LABEL_114;
                case 4u:
                  if ((_DWORD)v14 == (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)a10 + 128))(a10, 11)+ 1)LODWORD(v14) = 0;
                  goto LABEL_229;
                case 5u:
LABEL_229:
                  v72 = a10;
                  v73 = 11;
                  goto LABEL_323;
                case 8u:
                  v124 = icu::SimpleDateFormat::countDigits((const icu::UnicodeString *)a2, *a3, v183, PatternCharIndex - 1);
                  if (v124 > 2)
                  {
                    if (v124 == 3)
                    {
                      v165 = 1;
                    }
                    else
                    {
                      v173 = (uint32x4_t)vdupq_n_s32(v124 - 4);
                      v174.i64[0] = 0x100000001;
                      v174.i64[1] = 0x100000001;
                      v175 = -4;
                      v176.i64[0] = 0xA0000000ALL;
                      v176.i64[1] = 0xA0000000ALL;
                      do
                      {
                        v177 = (int8x16_t)v174;
                        v174 = vmulq_s32(v174, v176);
                        v175 += 4;
                      }
                      while (((v124 - 4) & 0xFFFFFFFC) != v175);
                      v178 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v175), (int8x16_t)xmmword_18BE14860), v173), v177, (int8x16_t)v174);
                      *(int32x2_t *)v178.i8 = vmul_s32(*(int32x2_t *)v178.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v178, v178, 8uLL));
                      v165 = v178.i32[0] * v178.i32[1];
                    }
                    v71 = (int)v14 / v165;
                  }
                  else
                  {
                    v125 = 0;
                    v126 = (uint32x4_t)vdupq_n_s32(2 - v124);
                    v127.i64[1] = 0x100000001;
                    v127.i64[0] = v14 | 0x100000000;
                    v128.i64[0] = 0xA0000000ALL;
                    v128.i64[1] = 0xA0000000ALL;
                    do
                    {
                      v129 = (int8x16_t)v127;
                      v127 = vmulq_s32(v127, v128);
                      v125 += 4;
                    }
                    while (((6 - v124) & 0xFFFFFFFC) != v125);
                    v130 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v125 - 4), (int8x16_t)xmmword_18BE14860), v126), v129, (int8x16_t)v127);
                    *(int32x2_t *)v130.i8 = vmul_s32(*(int32x2_t *)v130.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL));
                    v71 = v130.i32[0] * v130.i32[1];
                  }
                  v72 = a10;
                  v73 = 14;
                  goto LABEL_324;
                case 9u:
                  goto LABEL_120;
                case 0xEu:
                  goto LABEL_106;
                case 0xFu:
                  if ((_DWORD)v14 == (*(unsigned int (**)(_BYTE *, uint64_t))(*(_QWORD *)a10 + 160))(a10, 10)+ 1)LODWORD(v14) = 0;
                  goto LABEL_236;
                case 0x10u:
LABEL_236:
                  v72 = a10;
                  v73 = 10;
                  goto LABEL_323;
                case 0x11u:
                  goto LABEL_112;
                case 0x12u:
                  if (sub_18BD2FB50((uint64_t)(a1 + 52), (uint64_t)v194) || (int)v14 > 999)
                  {
                    v166 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 2);
                    if (v166 == v191[0])
                    {
                      v167 = icu::UnicodeString::char32At((uint64_t *)v191[0], (icu::UnicodeString *)a2, *a3);
                      if (u_isdigit(v167))
                      {
                        v168 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)a2, *a3, 1);
                        v170 = icu::UnicodeString::char32At(v169, (icu::UnicodeString *)a2, v168);
                        if (u_isdigit(v170))
                        {
                          if (*((_BYTE *)a1 + 816))
                          {
                            v171 = *((_DWORD *)a1 + 199) % 100;
                            *a8 = (_DWORD)v14 == v171;
                            if ((int)v14 >= v171)
                              v172 = 0;
                            else
                              v172 = 100;
                            LODWORD(v14) = v14 + 100 * (*((_DWORD *)a1 + 199) / 100) + v172;
                          }
                        }
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v14) = v14 + 5000;
                  }
                  v72 = a10;
                  v73 = 17;
                  goto LABEL_323;
                default:
                  goto LABEL_268;
              }
            }
          }
          goto LABEL_277;
        case 9u:
          goto LABEL_120;
        case 0xEu:
LABEL_106:
          v64 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 >= 5 && !(_DWORD)v64
            || (v28 = icu::SimpleDateFormat::matchString(v64, a2, *a3, 9, *((_QWORD *)a1[96] + 35), *((_DWORD *)a1[96] + 72), 0, a10), (int)v28 <= 0))
          {
            v65 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
            if (v185 <= 4 && !(_DWORD)v65)
              goto LABEL_277;
            v66 = icu::SimpleDateFormat::matchString(v65, a2, *a3, 9, *((_QWORD *)a1[96] + 37), *((_DWORD *)a1[96] + 76), 0, a10);
            v28 = v66;
            if ((int)v66 <= 0)
              goto LABEL_277;
          }
          goto LABEL_28;
        case 0x11u:
LABEL_112:
          v67 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v192);
          if (v192 > U_ZERO_ERROR)
            goto LABEL_277;
          v68 = v185 < 4;
          v69 = 3;
          goto LABEL_132;
        case 0x13u:
          if ((v51 & 1) == 0)
            goto LABEL_161;
LABEL_120:
          v74 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 4 || (_DWORD)v74)
          {
            v28 = icu::SimpleDateFormat::matchString(v74, a2, *a3, 7, *((_QWORD *)a1[96] + 19), *((_DWORD *)a1[96] + 40), 0, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          else
          {
            v28 = 0;
          }
          v88 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 3 || (_DWORD)v88)
          {
            v28 = icu::SimpleDateFormat::matchString(v88, a2, *a3, 7, *((_QWORD *)a1[96] + 21), *((_DWORD *)a1[96] + 44), 0, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          v89 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 6 || (_DWORD)v89)
          {
            v28 = icu::SimpleDateFormat::matchString(v89, a2, *a3, 7, *((_QWORD *)a1[96] + 23), *((_DWORD *)a1[96] + 48), 0, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          v90 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 5 || (_DWORD)v90)
          {
            v28 = icu::SimpleDateFormat::matchString(v90, a2, *a3, 7, *((_QWORD *)a1[96] + 25), *((_DWORD *)a1[96] + 52), 0, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v192);
          if (!(_DWORD)isWhiteSpace || PatternCharIndex == 9)
            goto LABEL_28;
          goto LABEL_268;
        case 0x17u:
          v75 = (unsigned int *)icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v192);
          if (v192 <= U_ZERO_ERROR)
          {
            v76 = v185 == 5 ? 15 : 5;
            v77 = v185 >= 4 ? v76 : 12;
            v79 = icu::TimeZoneFormat::parse(v75, v77, a2, (uint64_t)&v190, a13);
            if (v79)
              goto LABEL_158;
          }
          goto LABEL_277;
        case 0x18u:
          v67 = icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v192);
          if (v192 > U_ZERO_ERROR)
            goto LABEL_277;
          v68 = v185 < 4;
          v69 = 1;
LABEL_132:
          if (v68)
            v78 = v69 + 1;
          else
            v78 = v69;
          v79 = (*(uint64_t (**)(icu::TimeZoneFormat *, uint64_t, uint64_t, void (***)(icu::ParsePosition *__hidden), _BOOL8, uint64_t))(*(_QWORD *)v67 + 72))(v67, v78, a2, &v190, v20, a13);
          if (!v79)
            goto LABEL_277;
LABEL_158:
          v85 = v79;
          v86 = a10;
          goto LABEL_191;
        case 0x19u:
          if ((v51 & 1) == 0)
          {
LABEL_161:
            v72 = a10;
            v73 = 18;
LABEL_323:
            v71 = v14;
            goto LABEL_324;
          }
          v80 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 4 || (_DWORD)v80)
          {
            v28 = icu::SimpleDateFormat::matchString(v80, a2, *a3, 7, *((_QWORD *)a1[96] + 27), *((_DWORD *)a1[96] + 56), 0, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          else
          {
            v28 = 0;
          }
          v107 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 3 || (_DWORD)v107)
          {
            v28 = icu::SimpleDateFormat::matchString(v107, a2, *a3, 7, *((_QWORD *)a1[96] + 29), *((_DWORD *)a1[96] + 60), 0, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          v108 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 != 6 && !(_DWORD)v108)
            goto LABEL_267;
          v109 = *a3;
          v110 = a1[96];
          v111 = *((_QWORD *)v110 + 31);
          v112 = *((_DWORD *)v110 + 64);
          v113 = a2;
          v114 = 7;
          v115 = 0;
          goto LABEL_266;
        case 0x1Bu:
          if ((v51 & 1) == 0)
            goto LABEL_162;
          v81 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 4 || (_DWORD)v81)
          {
            v28 = icu::SimpleDateFormat::matchQuarterString(v81, a2, *a3, 2u, *((_QWORD *)a1[96] + 47), *((_DWORD *)a1[96] + 96), a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          else
          {
            v28 = 0;
          }
          v116 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 3 || (_DWORD)v116)
          {
            v28 = icu::SimpleDateFormat::matchQuarterString(v116, a2, *a3, 2u, *((_QWORD *)a1[96] + 49), *((_DWORD *)a1[96] + 100), a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          v117 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 5 || (_DWORD)v117)
          {
            v118 = *a3;
            v119 = a1[96];
            v120 = *((_QWORD *)v119 + 51);
            v121 = *((_DWORD *)v119 + 104);
LABEL_223:
            v28 = icu::SimpleDateFormat::matchQuarterString(v117, a2, v118, 2u, v120, v121, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
LABEL_224:
          if ((*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v192))
          {
            isWhiteSpace = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
            if (!(_DWORD)isWhiteSpace)
              goto LABEL_277;
            goto LABEL_268;
          }
          goto LABEL_28;
        case 0x1Cu:
          if ((v51 & 1) == 0)
          {
LABEL_162:
            v71 = 3 * v14 - 3;
LABEL_163:
            v72 = a10;
LABEL_201:
            v73 = 2;
LABEL_324:
            icu::Calendar::set(v72, v73, v71);
            goto LABEL_325;
          }
          v82 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 4 || (_DWORD)v82)
          {
            v28 = icu::SimpleDateFormat::matchQuarterString(v82, a2, *a3, 2u, *((_QWORD *)a1[96] + 53), *((_DWORD *)a1[96] + 108), a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          else
          {
            v28 = 0;
          }
          v122 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 == 3 || (_DWORD)v122)
          {
            v28 = icu::SimpleDateFormat::matchQuarterString(v122, a2, *a3, 2u, *((_QWORD *)a1[96] + 55), *((_DWORD *)a1[96] + 112), a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          v117 = (*((uint64_t (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 3, &v192);
          if (v185 != 5 && !(_DWORD)v117)
            goto LABEL_224;
          v118 = *a3;
          v123 = a1[96];
          v120 = *((_QWORD *)v123 + 57);
          v121 = *((_DWORD *)v123 + 116);
          goto LABEL_223;
        case 0x1Du:
          if ((v185 - 1) > 2)
            v87 = 0;
          else
            v87 = dword_18BE2B328[v185 - 1];
          v102 = (unsigned int *)icu::SimpleDateFormat::tzFormat((icu::SimpleDateFormat *)a1, &v192);
          if (v192 > U_ZERO_ERROR)
            goto LABEL_277;
          v103 = icu::TimeZoneFormat::parse(v102, v87, a2, (uint64_t)&v190, a13);
          if (!v103)
            goto LABEL_277;
          v85 = v103;
          v86 = a10;
LABEL_191:
          icu::Calendar::adoptTimeZone(v86, v85);
          goto LABEL_325;
        case 0x1Eu:
          v83 = a1[96];
          v84 = *((_QWORD *)v83 + 61);
          if (v84)
          {
            v28 = icu::SimpleDateFormat::matchString(isWhiteSpace, a2, *a3, 1, v84, *((_DWORD *)v83 + 124), 0, a10);
            if ((int)v28 > 0)
              goto LABEL_28;
          }
          if ((v51 & 1) != 0
            || !(*((unsigned int (**)(icu::NumberFormat **, uint64_t, UErrorCode *))*a1 + 28))(a1, 1, &v192)
            && (int)v14 <= *((_DWORD *)a1[96] + 124))
          {
            goto LABEL_277;
          }
          v72 = a10;
          v73 = 1;
          goto LABEL_323;
        default:
          goto LABEL_76;
      }
    }
  }
  v27 = *a3;
  v28 = -(int)v27;
LABEL_29:
  icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)&v195);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v190);
  icu::Formattable::~Formattable((icu::Formattable *)v200);
  return v28;
}

uint64_t icu::SimpleDateFormat::matchLiterals(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int *a3, const icu::UnicodeString *a4, int *a5, unsigned int a6, int a7)
{
  _BOOL8 v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BOOL8 v18;
  int64_t i;
  int v20;
  int64_t v21;
  int *v22;
  UChar32 v23;
  unsigned int v24;
  char *v25;
  UChar v26;
  unsigned int PatternCharIndex;
  icu::UnicodeSet *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  unsigned int v43;
  char *v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  int v48;
  int64_t j;
  int v50;
  int64_t v51;
  BOOL v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  __int128 *v59;
  int v60;
  char *v61;
  int v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  int v70;
  int64_t v71;
  char *v72;
  int v73;
  unsigned int v74;
  __int128 *v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  char *v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  char *v83;
  UChar32 v84;
  icu::UnicodeSet *v86;
  unsigned int v90;
  __int16 v91;
  void (**v92)(icu::UnicodeString *__hidden);
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;

  v90 = a5;
  v9 = 0;
  v97 = *MEMORY[0x1E0C80C00];
  v93 = 0u;
  v94 = 0u;
  v96 = 0;
  v95 = 0u;
  v92 = off_1E2256B38;
  LOWORD(v93) = 2;
  v10 = *(_DWORD *)a2;
  v11 = (char *)this + 10;
  while (1)
  {
    v12 = *((unsigned __int16 *)this + 4);
    if (*((__int16 *)this + 4) < 0)
    {
      v13 = *((_DWORD *)this + 3);
      if ((int)v10 >= (int)v13)
        goto LABEL_31;
    }
    else
    {
      if ((int)v10 >= (int)(v12 >> 5))
        goto LABEL_31;
      v13 = v12 >> 5;
    }
    if (v13 <= v10)
    {
      LOWORD(v15) = -1;
LABEL_20:
      v91 = v15;
      icu::UnicodeString::doAppend((uint64_t)&v92, (uint64_t)&v91, 0, 1);
LABEL_21:
      v18 = v9;
      goto LABEL_22;
    }
    if ((v12 & 2) != 0)
      v14 = v11;
    else
      v14 = (char *)*((_QWORD *)this + 3);
    v15 = *(unsigned __int16 *)&v14[2 * v10];
    if (v9)
      goto LABEL_13;
    if (v15 <= 0x7F)
      break;
    v18 = 0;
    if ((v15 - 8206) >= 2 && (_DWORD)v15 != 1564)
      goto LABEL_20;
LABEL_22:
    ++v10;
    v9 = v18;
  }
  if (!byte_18BE2AFCC[v15])
  {
LABEL_13:
    if ((v15 - 8206) < 2 || (_DWORD)v15 == 1564)
      goto LABEL_21;
    if ((_DWORD)v15 != 39)
      goto LABEL_20;
    v16 = (int)v10 + 1;
    if ((v12 & 0x8000) != 0)
    {
      v17 = *((_DWORD *)this + 3);
      if ((int)v16 < v17)
        goto LABEL_27;
    }
    else if ((int)v16 < (int)(v12 >> 5))
    {
      v17 = v12 >> 5;
LABEL_27:
      if (v17 > v16 && *(_WORD *)&v14[2 * v16] == 39)
      {
        LOWORD(v15) = 39;
        ++v10;
        goto LABEL_20;
      }
    }
    v18 = !v9;
    goto LABEL_22;
  }
LABEL_31:
  LODWORD(i) = *(_DWORD *)a4;
  if (v90)
  {
    i = (int)i;
    icu::UnicodeString::trim((icu::UnicodeString *)&v92);
    while (1)
    {
      v20 = *((__int16 *)a3 + 4);
      if (v20 < 0)
      {
        v21 = a3[3];
        if (i >= v21)
          break;
      }
      else
      {
        if (i >= (uint64_t)((unint64_t)*((unsigned __int16 *)a3 + 4) >> 5))
          break;
        v21 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
      }
      if (v21 <= i)
      {
        v23 = 0xFFFF;
      }
      else
      {
        v22 = (v20 & 2) != 0 ? (int *)((char *)a3 + 10) : (int *)*((_QWORD *)a3 + 3);
        v23 = *((unsigned __int16 *)v22 + i);
      }
      if (!u_isWhitespace(v23) && (v23 - 8206) >= 2 && v23 != 1564)
        break;
      ++i;
    }
    v12 = *((unsigned __int16 *)this + 4);
  }
  if ((v12 & 0x8000u) == 0)
    v24 = v12 >> 5;
  else
    v24 = *((_DWORD *)this + 3);
  if (v24 <= v10)
  {
    v26 = -1;
  }
  else
  {
    if ((v12 & 2) != 0)
      v25 = v11;
    else
      v25 = (char *)*((_QWORD *)this + 3);
    v26 = *(_WORD *)&v25[2 * v10];
  }
  PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(v26);
  if (PatternCharIndex == 38)
    v28 = 0;
  else
    v28 = (icu::UnicodeSet *)sub_18BD7D6C8(PatternCharIndex);
  v29 = (unsigned __int16)v93;
  if ((v93 & 0x8000u) == 0)
    v30 = (unsigned __int16)v93 >> 5;
  else
    v30 = DWORD1(v93);
  if (v30 < 1)
  {
LABEL_166:
    for (i = *(int *)a4; ; ++i)
    {
      v70 = *((__int16 *)a3 + 4);
      if (v70 < 0)
      {
        v71 = a3[3];
        if (i >= v71)
          goto LABEL_164;
      }
      else
      {
        if (i >= (uint64_t)((unint64_t)*((unsigned __int16 *)a3 + 4) >> 5))
          goto LABEL_164;
        v71 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
      }
      if (v71 <= i)
      {
        v73 = 0xFFFF;
        if (!v28)
          goto LABEL_164;
      }
      else
      {
        if ((v70 & 2) != 0)
          v72 = (char *)a3 + 10;
        else
          v72 = (char *)*((_QWORD *)a3 + 3);
        v73 = *(unsigned __int16 *)&v72[2 * i];
        if ((v73 - 8206) < 2 || v73 == 1564)
          continue;
        if (!v28)
          goto LABEL_164;
      }
      if (!icu::UnicodeSet::contains(v28, v73))
        goto LABEL_164;
    }
  }
  v86 = v28;
  v31 = 0;
  while (1)
  {
    v32 = *((unsigned __int16 *)a3 + 4);
    v33 = (__int16)v32;
    v34 = v32 >> 5;
    if (v33 < 0)
      v34 = a3[3];
    if ((int)i >= v34)
      goto LABEL_163;
    v35 = (int)v31;
    v36 = v31 << 32;
    v37 = 1;
    if ((v29 & 0x8000) == 0)
    {
LABEL_69:
      v38 = v29 >> 5;
      if (v35 >= v38)
        goto LABEL_81;
      goto LABEL_72;
    }
    while (1)
    {
      LODWORD(v38) = DWORD1(v93);
      if (v35 >= SDWORD1(v93))
        break;
LABEL_72:
      if (v38 <= v31)
      {
        v40 = 0xFFFFLL;
      }
      else
      {
        v39 = (v29 & 2) != 0 ? (__int128 *)((char *)&v93 + 2) : (__int128 *)v94;
        v40 = *((unsigned __int16 *)v39 + v35);
      }
      if (!icu::PatternProps::isWhiteSpace((icu::PatternProps *)v40))
        break;
      v37 = 0;
      ++v35;
      v29 = (unsigned __int16)v93;
      v36 += 0x100000000;
      v31 = (v31 + 1);
      if ((v93 & 0x8000) == 0)
        goto LABEL_69;
    }
LABEL_81:
    if ((v37 & 1) == 0)
    {
      v48 = 0;
      for (j = (int)i; ; ++j)
      {
        v50 = *((__int16 *)a3 + 4);
        if (v50 < 0)
        {
          v51 = a3[3];
          if (j >= v51)
            goto LABEL_114;
        }
        else
        {
          if (j >= (uint64_t)((unint64_t)*((unsigned __int16 *)a3 + 4) >> 5))
            goto LABEL_114;
          v51 = (unint64_t)*((unsigned __int16 *)a3 + 4) >> 5;
        }
        if (v51 <= i)
        {
          v54 = 0xFFFFLL;
        }
        else
        {
          v52 = (v50 & 2) == 0;
          v53 = (char *)a3 + 10;
          if (v52)
            v53 = (char *)*((_QWORD *)a3 + 3);
          v54 = *(unsigned __int16 *)&v53[2 * j];
        }
        if (u_isUWhiteSpace(v54) || icu::PatternProps::isWhiteSpace((icu::PatternProps *)v54))
        {
          v48 = 1;
        }
        else if ((v54 - 8206) >= 2 && (_DWORD)v54 != 1564)
        {
LABEL_114:
          v55 = v90;
          if (!v90 && !v48)
            goto LABEL_211;
          v56 = (unsigned __int16)v93 >> 5;
          if ((v93 & 0x8000u) != 0)
            v56 = DWORD1(v93);
          if (v56 <= (int)v31)
            goto LABEL_163;
          LODWORD(v41) = *((unsigned __int16 *)a3 + 4);
          v43 = a3[3];
          LODWORD(v42) = v41 >> 5;
          goto LABEL_120;
        }
        LODWORD(i) = i + 1;
      }
    }
    v41 = *((unsigned __int16 *)a3 + 4);
    v42 = v41 >> 5;
    v43 = a3[3];
    v44 = (char *)*((_QWORD *)a3 + 3);
    if ((v41 & 2) != 0)
      v44 = (char *)a3 + 10;
    if ((v41 & 0x8000u) == 0)
      v45 = v41 >> 5;
    else
      v45 = a3[3];
    i = (int)i;
    if ((v41 & 0x8000) == 0)
    {
LABEL_88:
      v46 = v41 >> 5;
      if (i >= v42)
        goto LABEL_120;
      goto LABEL_91;
    }
    while (1)
    {
      LODWORD(v46) = a3[3];
      if (i >= (int)v43)
        break;
LABEL_91:
      if (v46 <= i || *(_WORD *)&v44[2 * i] != 8206)
      {
        if (v45 <= i)
          break;
        v47 = *(unsigned __int16 *)&v44[2 * i];
        if (v47 != 8207 && v47 != 1564)
          break;
      }
      ++i;
      if ((v41 & 0x8000) == 0)
        goto LABEL_88;
    }
LABEL_120:
    if ((v41 & 0x8000u) == 0)
      v57 = v42;
    else
      v57 = v43;
    if ((int)i < (int)v57)
    {
      v58 = (v93 & 0x8000u) == 0 ? (unsigned __int16)v93 >> 5 : DWORD1(v93);
      if (v58 <= v31)
      {
        v60 = 0xFFFF;
      }
      else
      {
        v59 = (v93 & 2) != 0 ? (__int128 *)((char *)&v93 + 2) : (__int128 *)v94;
        v60 = *(unsigned __int16 *)((char *)v59 + (v36 >> 31));
      }
      if (v57 <= i)
      {
        v62 = 0xFFFF;
      }
      else
      {
        v61 = (char *)*((_QWORD *)a3 + 3);
        if ((v41 & 2) != 0)
          v61 = (char *)a3 + 10;
        v62 = *(unsigned __int16 *)&v61[2 * (int)i];
      }
      if (v60 == v62)
      {
        v31 = (v31 + 1);
        goto LABEL_156;
      }
    }
    if (!v90)
      goto LABEL_161;
    if ((_DWORD)i != *(_DWORD *)a4 || v57 <= i)
      goto LABEL_148;
    v63 = (char *)*((_QWORD *)a3 + 3);
    if ((v41 & 2) != 0)
      v63 = (char *)a3 + 10;
    if (*(_WORD *)&v63[2 * (int)i] != 46)
      goto LABEL_148;
    if (!icu::SimpleDateFormat::isAfterNonNumericField(this, (const icu::UnicodeString *)*(unsigned int *)a2))
      break;
LABEL_156:
    LODWORD(i) = i + 1;
    v29 = (unsigned __int16)v93;
    if ((v93 & 0x8000u) == 0)
      v66 = (unsigned __int16)v93 >> 5;
    else
      v66 = DWORD1(v93);
    if ((int)v31 >= v66)
      goto LABEL_163;
  }
  LODWORD(v41) = *((unsigned __int16 *)a3 + 4);
  v43 = a3[3];
  LODWORD(v42) = v41 >> 5;
LABEL_148:
  if ((v41 & 0x8000u) == 0)
    v43 = v42;
  if (v43 <= i)
  {
    v65 = 0xFFFFLL;
  }
  else
  {
    v52 = (v41 & 2) == 0;
    v64 = (char *)a3 + 10;
    if (v52)
      v64 = (char *)*((_QWORD *)a3 + 3);
    v65 = *(unsigned __int16 *)&v64[2 * (int)i];
  }
  if (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v65))
    goto LABEL_156;
LABEL_161:
  v55 = a6;
  if (!a6)
    goto LABEL_211;
  if (!a7)
  {
    v55 = (unint64_t)v86;
    if (!v86)
      goto LABEL_211;
    v74 = (v93 & 0x8000u) == 0 ? (unsigned __int16)v93 >> 5 : DWORD1(v93);
    if (v74 <= v31)
    {
      v76 = 0xFFFF;
    }
    else
    {
      v75 = (v93 & 2) != 0 ? (__int128 *)((char *)&v93 + 2) : (__int128 *)v94;
      v76 = *(unsigned __int16 *)((char *)v75 + (v36 >> 31));
    }
    if (!icu::UnicodeSet::contains(v86, v76))
      goto LABEL_211;
    v77 = *((unsigned __int16 *)a3 + 4);
    v78 = (v77 & 0x8000u) == 0 ? v77 >> 5 : a3[3];
    if (v78 <= i)
    {
      v80 = 0xFFFF;
    }
    else
    {
      v52 = (v77 & 2) == 0;
      v79 = (char *)a3 + 10;
      if (v52)
        v79 = (char *)*((_QWORD *)a3 + 3);
      v80 = *(unsigned __int16 *)&v79[2 * (int)i];
    }
    if (!icu::UnicodeSet::contains(v86, v80))
    {
      v81 = *((unsigned __int16 *)a3 + 4);
      v82 = (v81 & 0x8000u) == 0 ? v81 >> 5 : a3[3];
      if (v82 <= i)
      {
        v84 = 0xFFFF;
      }
      else
      {
        v52 = (v81 & 2) == 0;
        v83 = (char *)a3 + 10;
        if (v52)
          v83 = (char *)*((_QWORD *)a3 + 3);
        v84 = *(unsigned __int16 *)&v83[2 * (int)i];
      }
      if (!u_isalpha(v84))
      {
LABEL_211:
        v68 = 0;
        goto LABEL_165;
      }
    }
  }
LABEL_163:
  v67 = (int)v31 <= 0;
  v28 = v86;
  if (v67)
    goto LABEL_166;
LABEL_164:
  *(_DWORD *)a2 = v10 - 1;
  v55 = (unint64_t)a4;
  *(_DWORD *)a4 = i;
  v68 = 1;
LABEL_165:
  icu::UnicodeString::~UnicodeString((void *)v55, (icu::UnicodeString *)&v92);
  return v68;
}

uint64_t icu::SimpleDateFormat::matchQuarterString(uint64_t a1, uint64_t a2, int a3, unsigned int a4, uint64_t a5, int a6, _BYTE *a7)
{
  uint64_t v8;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  void (**v23)(icu::UnicodeString *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v27 = 0;
  v26 = 0u;
  v25 = 0u;
  v23 = off_1E2256B38;
  v8 = 2;
  LOWORD(v24) = 2;
  if (a6 < 1)
    goto LABEL_10;
  v13 = 0;
  v14 = 0;
  v15 = -1;
  v16 = a6;
  do
  {
    v17 = sub_18BD7BD98(a2, a3, a5);
    v20 = __OFSUB__(v17, v14);
    v18 = v17 == v14;
    v19 = v17 - v14 < 0;
    if (v17 > v14)
      v14 = v17;
    if (!(v19 ^ v20 | v18))
      v15 = v13;
    ++v13;
    a5 += 64;
  }
  while (v16 != v13);
  if (v15 < 0)
  {
LABEL_10:
    v21 = -a3;
  }
  else
  {
    icu::Calendar::set(a7, a4, 3 * v15);
    v21 = (v14 + a3);
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v23);
  return v21;
}

uint64_t sub_18BD7BD98(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v24;
  uint64_t v25;

  v25 = 0;
  v24 = 0;
  v5 = *(unsigned __int16 *)(a1 + 8);
  if ((v5 & 0x11) != 0)
  {
    v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    v6 = a1 + 10;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 24);
  }
  v7 = (__int16)v5;
  v8 = v6 + 2 * a2;
  v9 = v5 >> 5;
  v10 = *(_DWORD *)(a1 + 12);
  if (v7 >= 0)
    v10 = v9;
  v11 = v10 - a2;
  v12 = *(unsigned __int16 *)(a3 + 8);
  if ((v12 & 0x11) != 0)
  {
    v13 = 0;
  }
  else if ((v12 & 2) != 0)
  {
    v13 = a3 + 10;
  }
  else
  {
    v13 = *(_QWORD *)(a3 + 24);
  }
  v14 = (__int16)v12;
  v15 = v12 >> 5;
  if (v14 >= 0)
    v16 = v15;
  else
    v16 = *(unsigned int *)(a3 + 12);
  u_caseInsensitivePrefixMatch(v8, v11, v13, v16, 0, &v25, &v24, (char *)&v25 + 4);
  v17 = *(unsigned __int16 *)(a3 + 8);
  if (*(__int16 *)(a3 + 8) < 0)
  {
    v18 = *(_DWORD *)(a3 + 12);
    if (v24 != v18)
      goto LABEL_20;
    return v25;
  }
  if (v24 == v17 >> 5)
    return v25;
  v18 = v17 >> 5;
LABEL_20:
  if (v18)
  {
    v19 = v18 - 1;
    v20 = a3 + 10;
    if ((v17 & 2) == 0)
      v20 = *(_QWORD *)(a3 + 24);
    if (*(_WORD *)(v20 + 2 * (int)v19) == 46)
    {
      v21 = (__int16)v17;
      v22 = v17 >> 5;
      if (v21 < 0)
        v22 = *(_DWORD *)(a3 + 12);
      if (v24 == v22 - 1)
        return v25;
    }
  }
  return 0;
}

uint64_t icu::SimpleDateFormat::matchDayPeriodStrings(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3, const icu::UnicodeString *a4, int a5, int *a6)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  if (a5 < 1)
    return -a3;
  v10 = 0;
  v11 = 0;
  v12 = -1;
  v13 = a5;
  do
  {
    v14 = sub_18BD7BD98((uint64_t)a2, a3, (uint64_t)a4);
    if (v14 > v11)
    {
      v11 = v14;
      v12 = v10;
    }
    ++v10;
    a4 = (const icu::UnicodeString *)((char *)a4 + 64);
  }
  while (v13 != v10);
  if (v12 < 0)
    return -a3;
  *a6 = v12;
  return (v11 + a3);
}

uint64_t icu::SimpleDateFormat::matchAlphaMonthStrings(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, int a6, icu::Calendar *a7)
{
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t i;
  int v18;
  const char *v19;
  int v20;
  int v22;

  if (a6 < 1)
    return -a3;
  v12 = 0;
  v13 = 0;
  v14 = -1;
  v15 = a6;
  do
  {
    v16 = sub_18BD7BD98((uint64_t)a2, a3, (uint64_t)a4);
    if (v16 > v13)
    {
      v13 = v16;
      v14 = v12;
    }
    ++v12;
    a4 = (const icu::UnicodeString *)((char *)a4 + 64);
  }
  while (v15 != v12);
  for (i = 0; i != v15; ++i)
  {
    v18 = sub_18BD7BD98((uint64_t)a2, a3, (uint64_t)a5);
    if (v18 > v13)
    {
      v13 = v18;
      v14 = i;
    }
    a5 = (const icu::UnicodeString *)((char *)a5 + 64);
  }
  if (v14 < 0)
    return -a3;
  v19 = (const char *)(*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a7 + 184))(a7);
  v20 = strcmp(v19, "hebrew");
  if (v14 == 13 && v20 == 0)
    v22 = 6;
  else
    v22 = v14;
  icu::Calendar::set(a7, 2u, v22);
  return (v13 + a3);
}

uint64_t icu::SimpleDateFormat::matchString(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int a6, const icu::UnicodeString *a7, _BYTE *a8)
{
  uint64_t v9;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const icu::UnicodeString *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  const char *v20;
  int v21;
  BOOL v22;
  _BYTE *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v30;
  UErrorCode v31;
  _BYTE v32[8];
  void (**v33)(icu::UnicodeString *__hidden);
  __int16 v34;
  void (**v35)(icu::UnicodeString *__hidden);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void (**v40)(icu::UnicodeString *__hidden);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v41 = 0u;
  v44 = 0;
  v43 = 0u;
  v42 = 0u;
  v40 = off_1E2256B38;
  v9 = 2;
  LOWORD(v41) = 2;
  if ((a4 == 7) >= a6)
    goto LABEL_22;
  v30 = 0;
  v12 = 0;
  v13 = a4 == 7;
  v14 = a6;
  v15 = (const icu::UnicodeString *)(a5 + (v13 << 6));
  v16 = -1;
  do
  {
    v17 = sub_18BD7BD98(a2, a3, (uint64_t)v15);
    if (v17 > v12)
    {
      v12 = v17;
      v16 = v13;
    }
    if (a7)
    {
      v31 = U_ZERO_ERROR;
      v39 = 0;
      v37 = 0u;
      v38 = 0u;
      v36 = 0u;
      v35 = off_1E2256B38;
      LOWORD(v36) = 2;
      v33 = off_1E2256B38;
      v34 = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v32, a7, 1, 1, 0, &v31);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v32, v15, (icu::UnicodeString *)&v35, &v31);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v32);
      v18 = v31;
      if (v31 <= U_ZERO_ERROR)
      {
        v19 = sub_18BD7BD98(a2, a3, (uint64_t)&v35);
        if (v19 <= v12)
        {
          v18 = v30;
        }
        else
        {
          v12 = v19;
          v16 = v13;
          v18 = 1;
        }
        v30 = v18;
      }
      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v35);
    }
    ++v13;
    v15 = (const icu::UnicodeString *)((char *)v15 + 64);
  }
  while (v14 != v13);
  if (v16 < 0)
  {
LABEL_22:
    v26 = -a3;
  }
  else
  {
    if (a4 <= 23)
    {
      v20 = (const char *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a8 + 184))(a8);
      v21 = strcmp(v20, "hebrew");
      if (a4 == 2 && (!v21 ? (v22 = v16 == 13) : (v22 = 0), v22))
      {
        v23 = a8;
        v24 = 2;
        v25 = 6;
      }
      else
      {
        if (a4 == 1)
          v25 = v16 + 1;
        else
          v25 = v16;
        v23 = a8;
        v24 = a4;
      }
      icu::Calendar::set(v23, v24, v25);
      if (a7)
        icu::Calendar::set(a8, 0x16u, v30);
    }
    v26 = (v12 + a3);
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v40);
  return v26;
}

void *icu::SimpleDateFormat::parseInt(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4, int a5, const icu::NumberFormat *a6)
{
  return icu::SimpleDateFormat::parseInt(this, a2, a3, -1, a4, a5, a6);
}

uint64_t icu::SimpleDateFormat::checkIntSuffix(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  const void *v13;
  icu::DecimalFormat *v14;
  UChar **NegativeSuffix;
  int v16;
  int v17;
  int v18;
  int v19;
  UChar *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a3;
  v26 = *MEMORY[0x1E0C80C00];
  v22 = 0u;
  v25 = 0;
  v24 = 0u;
  v23 = 0u;
  v21 = (UChar *)off_1E2256B38;
  LOWORD(v22) = 2;
  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = (__int16)v6;
  LODWORD(v8) = v6 >> 5;
  if (v7 >= 0)
    v8 = v8;
  else
    v8 = *((unsigned int *)a2 + 3);
  if (((a4 | a3) & 0x80000000) == 0 && (int)v8 >= (int)a3)
  {
    v8 = *((__int16 *)this + 180) < 0 ? *((unsigned int *)this + 91) : *((unsigned __int16 *)this + 180) >> 5;
    if ((int)v8 >= (int)a4)
    {
      v13 = (const void *)*((_QWORD *)this + 42);
      if (v13)
      {
        if (v14)
        {
          if (a5)
            NegativeSuffix = (UChar **)icu::DecimalFormat::getNegativeSuffix(v14, (icu::UnicodeString *)&v21);
          else
            NegativeSuffix = (UChar **)icu::DecimalFormat::getPositiveSuffix(v14, (icu::UnicodeString *)&v21);
          icu::UnicodeString::operator=(&v21, NegativeSuffix);
        }
      }
      LODWORD(v8) = (unsigned __int16)v22 >> 5;
      if ((v22 & 0x8000u) == 0)
        v8 = v8;
      else
        v8 = DWORD1(v22);
      if ((int)v8 >= 1)
      {
        v16 = icu::SimpleDateFormat::compareSimpleAffix(this, (const icu::UnicodeString *)&v21, (icu::SimpleDateFormat *)((char *)this + 352), a4);
        v17 = icu::SimpleDateFormat::compareSimpleAffix(this, (const icu::UnicodeString *)&v21, a2, v5);
        v18 = (unsigned __int16)v22 >> 5;
        if ((v22 & 0x8000u) != 0)
          v18 = DWORD1(v22);
        v19 = icu::SimpleDateFormat::compareSimpleAffix(this, (const icu::UnicodeString *)&v21, a2, (v5 - v18));
        if ((v17 < 0 || v16 < 0 || v17 != v16) && (v19 & 0x80000000) == 0 && (v16 & 0x80000000) == 0 && v19 == v16)
        {
          LODWORD(v8) = (unsigned __int16)v22 >> 5;
          if ((v22 & 0x8000u) == 0)
            v8 = v8;
          else
            v8 = DWORD1(v22);
          v5 = (v5 - v8);
        }
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v21);
  return v5;
}

uint64_t icu::SimpleDateFormat::countDigits@<X0>(const icu::UnicodeString *a1@<X1>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X8>)
{
  int v6;
  uint64_t v8;
  unsigned int v9;

  if (a2 >= a3)
    return 0;
  v6 = a2;
  LODWORD(v8) = 0;
  do
  {
    v9 = icu::UnicodeString::char32At((uint64_t *)a4, a1, v6);
    if (u_isdigit(v9))
      v8 = (v8 + 1);
    else
      v8 = v8;
    if (v9 < 0x10000)
      a4 = 1;
    else
      a4 = 2;
    v6 += a4;
  }
  while (v6 < a3);
  return v8;
}

void *icu::SimpleDateFormat::parseInt(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, int a4, icu::ParsePosition *a5, int a6, const icu::NumberFormat *lpsrc)
{
  const icu::NumberFormat *v7;
  void *v13;
  const icu::NumberFormat *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  unsigned int v22;
  void *v24;
  _BYTE v25[64];
  void (**v26)(icu::UnicodeString *__hidden);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v7 = lpsrc;
  v31 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  v30 = 0;
  v29 = 0u;
  v26 = off_1E2256B38;
  LOWORD(v27) = 2;
  v14 = 0;
  if (!a6 && v13)
  {
    v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 32))(v13);
    if (!v15)
      return icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
    v14 = (const icu::NumberFormat *)v15;
    v24 = &unk_18BE2B308;
    icu::UnicodeString::UnicodeString(v25, 1, &v24);
    (*(void (**)(const icu::NumberFormat *, _BYTE *))(*(_QWORD *)v14 + 376))(v14, v25);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
    v7 = v14;
  }
  v18 = *((_DWORD *)a5 + 2);
  (*(void (**)(const icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, icu::ParsePosition *))(*(_QWORD *)v7 + 160))(v7, a2, a3, a5);
  if (a4 >= 1)
  {
    v19 = *((_DWORD *)a5 + 2) - v18;
    v20 = __OFSUB__(v19, a4);
    v16 = (v19 - a4);
    if (!(((v16 & 0x80000000) != 0) ^ v20 | ((_DWORD)v16 == 0)))
    {
      v21 = *((_DWORD *)a3 + 2);
      if ((int)v16 >= 1)
      {
        v22 = v16 + 1;
        do
        {
          v21 /= 10;
          --v22;
        }
        while (v22 > 1);
      }
      *((_DWORD *)a5 + 2) = v18 + a4;
      icu::Formattable::setLong(a3, v21);
    }
  }
  if (v14)
    (*(void (**)(const icu::NumberFormat *))(*(_QWORD *)v14 + 8))(v14);
  return icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v26);
}

uint64_t icu::SimpleDateFormat::translatePattern(uint64_t this, const icu::UnicodeString *a2, icu::UnicodeString *a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, UErrorCode *a6)
{
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  __int16 v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  UChar v19;
  unsigned int v20;
  int v21;
  int32_t v22;
  int32_t v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  UChar v27;

  if (*(int *)a5 > 0)
    return this;
  v10 = this;
  v11 = 0;
  v12 = 0;
  if ((*((_WORD *)a2 + 4) & 1) != 0)
    v13 = 2;
  else
    v13 = *((_WORD *)a2 + 4) & 0x1F;
  *((_WORD *)a2 + 4) = v13;
  v14 = this + 10;
  v15 = (char *)a4 + 10;
  while (1)
  {
    v16 = *(__int16 *)(v10 + 8);
    if (v16 < 0)
      break;
    if (v11 >= (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 5)
      goto LABEL_38;
    v17 = (unint64_t)*(unsigned __int16 *)(v10 + 8) >> 5;
LABEL_11:
    if (v17 <= v11)
    {
      v12 = v12;
LABEL_18:
      v19 = -1;
      goto LABEL_19;
    }
    if ((v16 & 2) != 0)
      v18 = v14;
    else
      v18 = *(_QWORD *)(v10 + 24);
    v19 = *(_WORD *)(v18 + 2 * v11);
    if (v12)
    {
      v12 = v19 != 39;
      goto LABEL_19;
    }
    if (v19 == 39)
    {
      v19 = 39;
      v12 = 1;
    }
    else if (v19 <= 0x7Fu && byte_18BE2AFCC[v19])
    {
      v20 = *((unsigned __int16 *)a3 + 4);
      v21 = (__int16)v20;
      v22 = v20 >> 5;
      if (v21 >= 0)
        v23 = v22;
      else
        v23 = *((_DWORD *)a3 + 3);
      this = icu::UnicodeString::doIndexOf((uint64_t)a3, v19, 0, v23);
      if ((_DWORD)this == -1)
        goto LABEL_39;
      v24 = *((unsigned __int16 *)a4 + 4);
      if ((v24 & 0x8000u) == 0)
        v25 = v24 >> 5;
      else
        v25 = *((_DWORD *)a4 + 3);
      if (v25 <= this)
      {
        v12 = 0;
        goto LABEL_18;
      }
      v12 = 0;
      if ((v24 & 2) != 0)
        v26 = v15;
      else
        v26 = (char *)*((_QWORD *)a4 + 3);
      v19 = *(_WORD *)&v26[2 * (int)this];
    }
    else
    {
      v12 = 0;
    }
LABEL_19:
    v27 = v19;
    this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v27, 0, 1);
    ++v11;
  }
  if ((uint64_t)v11 < *(int *)(v10 + 12))
  {
    v17 = *(unsigned int *)(v10 + 12);
    goto LABEL_11;
  }
LABEL_38:
  if (!v12)
    return this;
LABEL_39:
  *(_DWORD *)a5 = 3;
  return this;
}

UChar **icu::SimpleDateFormat::toPattern(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(a2, this + 44);
  return a2;
}

icu::UnicodeString *icu::SimpleDateFormat::toLocalizedPattern(icu::SimpleDateFormat *this, icu::UnicodeString *a2, UErrorCode *a3)
{
  char *v6;
  const __int16 *PatternUChars;
  UErrorCode *v8;
  void *v9;
  _BYTE v11[64];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = (char *)this + 352;
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(this);
  icu::UnicodeString::UnicodeString((uint64_t)v11, (uint64_t)PatternUChars);
  icu::SimpleDateFormat::translatePattern((uint64_t)v6, a2, (icu::UnicodeString *)v11, (const icu::UnicodeString *)(*((_QWORD *)this + 96) + 768), (const icu::UnicodeString *)a3, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
  return a2;
}

void icu::SimpleDateFormat::applyPattern(icu::SimpleDateFormat *this, UChar **a2)
{
  uint64_t v3;
  const char *v4;
  unsigned int v5;
  int v6;
  void *v7;
  int v8;
  char *v9;
  _OWORD *v10;
  uint64_t *v11;
  const char *v12;
  UErrorCode *v13;
  icu::SharedObject *v14;
  icu::SharedObject *v15;
  unsigned int PatternCharIndex;
  int v17;
  _OWORD v18[14];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::operator=((UChar **)this + 44, a2);
  icu::SimpleDateFormat::parsePattern(this);
  v3 = *((_QWORD *)this + 41);
  if (!v3)
    return;
  v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 184))(v3);
  if (strcmp(v4, "japanese") || strcmp((const char *)this + 552, "ja"))
    return;
  icu::UnicodeString::UnicodeString((uint64_t)v18, (uint64_t)"y");
  v5 = *((unsigned __int16 *)this + 212);
  if ((v5 & 1) != 0)
  {
    v7 = (void *)WORD4(v18[0]);
    if ((BYTE8(v18[0]) & 1) != 0)
      goto LABEL_16;
LABEL_20:
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
    goto LABEL_21;
  }
  if ((v5 & 0x8000) != 0)
    v6 = *((_DWORD *)this + 107);
  else
    v6 = v5 >> 5;
  if ((SWORD4(v18[0]) & 0x8000u) == 0)
    v7 = (void *)(WORD4(v18[0]) >> 5);
  else
    v7 = (void *)HIDWORD(v18[0]);
  if ((BYTE8(v18[0]) & 1) != 0
    || v6 != (_DWORD)v7
    || !icu::UnicodeString::doEquals((icu::SimpleDateFormat *)((char *)this + 416), (const icu::UnicodeString *)v18, v6))
  {
    goto LABEL_20;
  }
LABEL_16:
  v8 = *((unsigned __int8 *)this + 794);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
  if (!v8)
  {
    v9 = (char *)*((_QWORD *)this + 100);
    if (v9)
    {
      sub_18BD742D4(v9);
      *((_QWORD *)this + 100) = 0;
    }
    icu::UnicodeString::setToBogus((icu::SimpleDateFormat *)((char *)this + 416));
    return;
  }
LABEL_21:
  if ((*((_WORD *)this + 212) & 1) != 0 && *((_BYTE *)this + 794))
  {
    umtx_lock((icu::UMutex *)&unk_1ECD28160);
    if (!*((_QWORD *)this + 100))
    {
      v10 = uprv_malloc(0x130uLL);
      if (v10)
      {
        v10[17] = 0u;
        v10[18] = 0u;
        v10[15] = 0u;
        v10[16] = 0u;
        v10[13] = 0u;
        v10[14] = 0u;
        v10[11] = 0u;
        v10[12] = 0u;
        v10[9] = 0u;
        v10[10] = 0u;
        v10[7] = 0u;
        v10[8] = 0u;
        v10[5] = 0u;
        v10[6] = 0u;
        v10[3] = 0u;
        v10[4] = 0u;
        v10[1] = 0u;
        v10[2] = 0u;
        *v10 = 0u;
      }
      *((_QWORD *)this + 100) = v10;
    }
    umtx_unlock((std::mutex **)&unk_1ECD28160);
    if (*((_QWORD *)this + 100))
    {
      v11 = (uint64_t *)*((_QWORD *)this + 94);
      v12 = (char *)v11 + *((int *)this + 144);
      memset(v18, 0, sizeof(v18));
      icu::Locale::Locale(v11, (icu::Locale *)v18, (const char *)this + 552, (const char *)this + 570, v12, "numbers=jpanyear");
      v17 = 0;
      v14 = (icu::SharedObject *)sub_18BD7836C((char **)v18, (UErrorCode *)&v17, v13);
      if (v17 <= 0)
      {
        v15 = v14;
        PatternCharIndex = icu::DateFormatSymbols::getPatternCharIndex(0x79u);
        sub_18BC4A244(v15, (icu::SharedObject **)(*((_QWORD *)this + 100) + 8 * PatternCharIndex));
        icu::SharedObject::deleteIfZeroRefCount((uint64_t)v15);
        sub_18BD2FA48((uint64_t)this + 416, (uint64_t)"y", 0xFFFFFFFFLL);
      }
      icu::Locale::~Locale((icu::Locale *)v18);
    }
  }
}

void *icu::SimpleDateFormat::applyLocalizedPattern(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  const icu::UnicodeString *v5;
  icu::UnicodeString *v6;
  const __int16 *PatternUChars;
  UErrorCode *v8;
  void *v9;
  _BYTE v11[64];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = (icu::SimpleDateFormat *)((char *)this + 352);
  v6 = (icu::UnicodeString *)(*((_QWORD *)this + 96) + 768);
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(this);
  icu::UnicodeString::UnicodeString((uint64_t)v11, (uint64_t)PatternUChars);
  icu::SimpleDateFormat::translatePattern((uint64_t)a2, v5, v6, (const icu::UnicodeString *)v11, (const icu::UnicodeString *)a3, v8);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
}

uint64_t icu::SimpleDateFormat::getDateFormatSymbols(icu::SimpleDateFormat *this)
{
  return *((_QWORD *)this + 96);
}

void icu::SimpleDateFormat::adoptDateFormatSymbols(icu::SimpleDateFormat *this, icu::DateFormatSymbols *a2)
{
  icu::DateFormatSymbols *v4;
  void *v5;

  v4 = (icu::DateFormatSymbols *)*((_QWORD *)this + 96);
  if (v4)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v4);
    icu::UMemory::operator delete(v5);
  }
  *((_QWORD *)this + 96) = a2;
}

icu::DateFormatSymbols *icu::SimpleDateFormat::setDateFormatSymbols@<X0>(icu::SimpleDateFormat *this@<X0>, const icu::DateFormatSymbols *a2@<X1>, uint64_t *a3@<X8>)
{
  icu::DateFormatSymbols *v5;
  void *v6;
  icu::DateFormatSymbols *result;

  v5 = (icu::DateFormatSymbols *)*((_QWORD *)this + 96);
  if (v5)
  {
    icu::DateFormatSymbols::~DateFormatSymbols(v5);
    icu::UMemory::operator delete(v6);
  }
  result = (icu::DateFormatSymbols *)icu::UMemory::operator new(a3, (icu::UMemory *)0x4F8, (unint64_t)a2);
  if (result)
    result = icu::DateFormatSymbols::DateFormatSymbols(result, a2);
  *((_QWORD *)this + 96) = result;
  return result;
}

icu::TimeZoneFormat *icu::SimpleDateFormat::getTimeZoneFormat(icu::SimpleDateFormat *this)
{
  UErrorCode v2;

  v2 = U_ZERO_ERROR;
  return icu::SimpleDateFormat::tzFormat(this, &v2);
}

uint64_t icu::SimpleDateFormat::adoptTimeZoneFormat(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 776);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 776) = a2;
  return result;
}

icu::TimeZoneFormat *icu::SimpleDateFormat::setTimeZoneFormat(icu::SimpleDateFormat *this, const icu::TimeZoneFormat *a2)
{
  uint64_t v4;
  icu::TimeZoneFormat *result;

  v4 = *((_QWORD *)this + 97);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = (icu::TimeZoneFormat *)icu::UMemory::operator new((icu::UMemory *)0x530, (unint64_t)a2);
  if (result)
    result = (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(result, a2);
  *((_QWORD *)this + 97) = result;
  return result;
}

void icu::SimpleDateFormat::adoptCalendar(icu::SimpleDateFormat *this, icu::Calendar *a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  UErrorCode *v7;
  uint64_t *v8;
  icu::DateFormatSymbols *v9;
  void *v10;
  UErrorCode v11;
  _OWORD v12[14];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = U_ZERO_ERROR;
  memset(v12, 0, sizeof(v12));
  icu::Locale::Locale((icu::Locale *)v12, (uint64_t)this + 544);
  v4 = (uint64_t *)*((_QWORD *)this + 96);
  if (!v4
    || (v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 41) + 184))(*((_QWORD *)this + 41)),
        v5 != (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a2 + 184))(a2)))
  {
    v6 = (char *)(*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a2 + 184))(a2);
    icu::Locale::setKeywordValue((char **)v12, "calendar", v6, &v11);
    v8 = icu::DateFormatSymbols::createForLocale((icu::DateFormatSymbols *)v12, &v11, v7);
    if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      (*(void (**)(icu::Calendar *))(*(_QWORD *)a2 + 8))(a2);
      goto LABEL_11;
    }
    v4 = v8;
  }
  icu::DateFormat::adoptCalendar(this, a2);
  v9 = (icu::DateFormatSymbols *)*((_QWORD *)this + 96);
  if (v9 != (icu::DateFormatSymbols *)v4)
  {
    if (v9)
    {
      icu::DateFormatSymbols::~DateFormatSymbols(v9);
      icu::UMemory::operator delete(v10);
    }
    *((_QWORD *)this + 96) = v4;
  }
  icu::SimpleDateFormat::initializeDefaultCentury(this);
LABEL_11:
  icu::Locale::~Locale((icu::Locale *)v12);
}

uint64_t icu::SimpleDateFormat::setContext(uint64_t a1, int a2, int *a3)
{
  uint64_t result;
  UErrorCode *v7;
  UErrorCode *v8;

  result = icu::DateFormat::setContext(a1, a2, a3);
  if (*a3 <= 0 && (a2 - 258) <= 2 && !*(_QWORD *)(a1 + 824))
  {
    *a3 = 0;
    result = (uint64_t)icu::BreakIterator::createSentenceInstance((char **)(a1 + 544), (const icu::Locale *)a3, v7, v8);
    *(_QWORD *)(a1 + 824) = result;
    if (*a3 >= 1)
    {
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      *(_QWORD *)(a1 + 824) = 0;
    }
  }
  return result;
}

uint64_t icu::SimpleDateFormat::isFieldUnitIgnored(uint64_t a1, unsigned int a2)
{
  return icu::SimpleDateFormat::isFieldUnitIgnored(a1 + 352, a2);
}

{
  BOOL v2;
  unsigned __int16 v3;
  int v4;
  int v5;
  signed int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  signed int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  signed int v17;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = icu::SimpleDateFormat::fgCalendarFieldToLevel[a2];
  v7 = *(unsigned __int16 *)(a1 + 8);
  v8 = v7 >> 5;
  v9 = *(_DWORD *)(a1 + 12);
  v10 = *(_QWORD *)(a1 + 24);
  if ((v7 & 2) != 0)
    v10 = a1 + 10;
  if ((v7 & 0x8000) != 0)
    goto LABEL_6;
LABEL_4:
  v11 = v7 >> 5;
  if (v5 < v8)
  {
    while (1)
    {
      if (v11 <= v5)
        v12 = 0xFFFF;
      else
        v12 = *(unsigned __int16 *)(v10 + 2 * v5);
      if (v12 != v3 && v4 >= 1)
      {
        v13 = v3 > 0x7Fu ? -1 : dword_18BE2ADCC[v3];
        v4 = 0;
        if (v6 <= v13)
          return 0;
      }
      if (v12 == 39)
        break;
      if (v2)
      {
        v2 = 1;
      }
      else
      {
        if (v12 > 0x7F)
          v16 = 0;
        else
          v16 = byte_18BE2AFCC[v12];
        v2 = 0;
        if (v16)
        {
          v3 = v12;
          ++v4;
        }
      }
LABEL_32:
      ++v5;
      if ((v7 & 0x8000) == 0)
        goto LABEL_4;
LABEL_6:
      v11 = v9;
      if (v5 >= v9)
        goto LABEL_34;
    }
    v14 = v5 + 1;
    if ((v7 & 0x8000) != 0)
    {
      v15 = v9;
      if ((int)v14 >= v9)
      {
LABEL_26:
        v2 = !v2;
        goto LABEL_32;
      }
    }
    else
    {
      v15 = v7 >> 5;
      if ((int)v14 >= v8)
        goto LABEL_26;
    }
    if (v15 > v14 && *(_WORD *)(v10 + 2 * v14) == 39)
    {
      ++v5;
      goto LABEL_32;
    }
    goto LABEL_26;
  }
LABEL_34:
  if (v4 >= 1 && (v3 > 0x7Fu ? (v17 = -1) : (v17 = dword_18BE2ADCC[v3]), v6 <= v17))
    return 0;
  else
    return 1;
}

uint64_t icu::SimpleDateFormat::compareSimpleAffix(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v11;
  icu::PatternProps *v12;
  int v13;
  int v14;
  uint64_t *isWhiteSpace;
  int v16;
  uint64_t *v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  icu::PatternProps *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  char v26;
  icu::SimpleDateFormat *v27;
  icu::SimpleDateFormat *v28;
  icu::SimpleDateFormat *v29;
  unsigned int v30;
  int v31;

  v4 = a4;
  v5 = *((unsigned __int16 *)a2 + 4);
  v6 = (__int16)v5;
  LODWORD(v7) = v5 >> 5;
  if (v6 >= 0)
    v7 = v7;
  else
    v7 = *((unsigned int *)a2 + 3);
  LODWORD(v8) = a4;
  if ((int)v7 < 1)
    return (v8 - v4);
  v11 = 0;
  v8 = a4;
  while (1)
  {
    v12 = (icu::PatternProps *)icu::UnicodeString::char32At((uint64_t *)v7, a2, v11);
    v13 = (int)v12;
    v14 = v12 < 0x10000 ? 1 : 2;
    isWhiteSpace = (uint64_t *)icu::PatternProps::isWhiteSpace(v12);
    LODWORD(v17) = *((unsigned __int16 *)a3 + 4);
    v16 = (__int16)v17;
    LODWORD(v17) = v17 >> 5;
    v17 = v16 >= 0 ? (uint64_t *)v17 : (uint64_t *)*((unsigned int *)a3 + 3);
    if ((_DWORD)isWhiteSpace)
      break;
    if ((int)v8 >= (int)v17 || icu::UnicodeString::char32At(v17, a3, v8) != v13)
      return 0xFFFFFFFFLL;
    v11 += v14;
    v8 = (v14 + v8);
LABEL_36:
    v30 = *((unsigned __int16 *)a2 + 4);
    v31 = (__int16)v30;
    LODWORD(v7) = v30 >> 5;
    if (v31 >= 0)
      v7 = v7;
    else
      v7 = *((unsigned int *)a2 + 3);
    if (v11 >= (int)v7)
      return (v8 - v4);
  }
  if ((int)v8 < (int)v17 && (isWhiteSpace = icu::UnicodeString::char32At(v17, a3, v8), (_DWORD)isWhiteSpace == v13))
  {
    while (1)
    {
      v11 += v14;
      v8 = (v14 + v8);
      v18 = *((unsigned __int16 *)a2 + 4);
      v19 = (__int16)v18;
      LODWORD(v20) = v18 >> 5;
      v20 = v19 >= 0 ? (uint64_t *)v20 : (uint64_t *)*((unsigned int *)a2 + 3);
      if (v11 == (_DWORD)v20)
        break;
      v21 = (icu::PatternProps *)icu::UnicodeString::char32At(v20, a2, v11);
      v22 = v21;
      isWhiteSpace = (uint64_t *)icu::PatternProps::isWhiteSpace(v21);
      if (!(_DWORD)isWhiteSpace)
        break;
      v23 = *((unsigned __int16 *)a3 + 4);
      v24 = (__int16)v23;
      LODWORD(v25) = v23 >> 5;
      if (v24 >= 0)
        v25 = v25;
      else
        v25 = *((unsigned int *)a3 + 3);
      v26 = 1;
      if ((int)v8 < (int)v25)
      {
        v14 = v22 < 0x10000 ? 1 : 2;
        isWhiteSpace = icu::UnicodeString::char32At((uint64_t *)v25, a3, v8);
        if ((_DWORD)isWhiteSpace == v22)
          continue;
      }
      goto LABEL_30;
    }
    v26 = 1;
  }
  else
  {
    v26 = 0;
  }
LABEL_30:
  v27 = (icu::SimpleDateFormat *)icu::SimpleDateFormat::skipPatternWhiteSpace((icu::SimpleDateFormat *)isWhiteSpace, a2, v11);
  v28 = (icu::SimpleDateFormat *)icu::SimpleDateFormat::skipUWhiteSpace(v27, a3, v8);
  v29 = v28;
  if ((v26 & 1) != 0 || (_DWORD)v28 != (_DWORD)v8)
  {
    v11 = icu::SimpleDateFormat::skipUWhiteSpace(v28, a2, (uint64_t)v27);
    v8 = (uint64_t)v29;
    goto LABEL_36;
  }
  return 0xFFFFFFFFLL;
}

unint64_t icu::SimpleDateFormat::skipPatternWhiteSpace(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, int a3)
{
  unsigned int v3;
  char *v4;
  int v5;
  unsigned int v6;

  v3 = *((unsigned __int16 *)a2 + 4);
  if ((v3 & 0x11) != 0)
  {
    v4 = 0;
  }
  else if ((v3 & 2) != 0)
  {
    v4 = (char *)a2 + 10;
  }
  else
  {
    v4 = (char *)*((_QWORD *)a2 + 3);
  }
  v5 = (__int16)v3;
  v6 = v3 >> 5;
  if (v5 < 0)
    v6 = *((_DWORD *)a2 + 3);
  return (unint64_t)((char *)icu::PatternProps::skipWhiteSpace((unsigned __int16 *)&v4[2 * a3], v6 - a3) - v4) >> 1;
}

uint64_t icu::SimpleDateFormat::skipUWhiteSpace(icu::SimpleDateFormat *this, const icu::UnicodeString *a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  int isUWhiteSpace;
  int v10;

  do
  {
    v4 = a3;
    v5 = *((unsigned __int16 *)a2 + 4);
    v6 = (__int16)v5;
    LODWORD(v7) = v5 >> 5;
    if (v6 >= 0)
      v7 = v7;
    else
      v7 = *((unsigned int *)a2 + 3);
    if ((int)a3 >= (int)v7)
      break;
    v8 = icu::UnicodeString::char32At((uint64_t *)v7, a2, a3);
    isUWhiteSpace = u_isUWhiteSpace(v8);
    v10 = v8 < 0x10000 ? 1 : 2;
    a3 = (v10 + v4);
  }
  while (isUWhiteSpace);
  return v4;
}

_QWORD ***sub_18BD7D3FC(_QWORD ***a1)
{
  _QWORD **v2;

  v2 = *a1;
  if (*a1)
  {
    if (*v2)
      icu::SharedObject::removeRef(*v2);
    icu::UMemory::operator delete(v2);
  }
  return a1;
}

icu::UnicodeSet **sub_18BD7D438(icu::UnicodeSet **a1, UErrorCode *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  icu::UnicodeSet *v8;
  void *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  icu::UnicodeSet *v13;
  void *v14;
  uint64_t *v15;
  const __int16 **v16;
  icu::UnicodeSet *v17;
  void *v18;
  icu::UnicodeSet *v19;
  icu::UnicodeSet *v20;
  void *v21;
  icu::UnicodeSet *v22;
  void *v23;
  icu::UnicodeSet *v24;
  void *v25;
  const __int16 *v27;
  const __int16 *v28;
  const char *v29;
  const __int16 *v30;
  const __int16 *v31;
  const char *v32;
  _BYTE v33[64];
  uint64_t *v34;

  v34 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v4 = v34;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = icu::UMemory::operator new(v4, (icu::UMemory *)0xC8, (unint64_t)a2);
  if (v5)
  {
    v8 = (icu::UnicodeSet *)v5;
    v32 = "[";
    icu::UnicodeString::UnicodeString(v33, 1, &v32);
    icu::UnicodeSet::UnicodeSet(v8, (const icu::UnicodeString *)v33, a2);
    *a1 = v8;
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v33);
    v29 = v32;
    v7 = (uint64_t *)&v29;
  }
  else
  {
    *a1 = 0;
  }
  v10 = icu::UMemory::operator new(v7, (icu::UMemory *)0xC8, v6);
  if (v10)
  {
    v13 = (icu::UnicodeSet *)v10;
    v31 = L"[-.:[:whitespace:]]";
    icu::UnicodeString::UnicodeString(v33, 1, &v31);
    icu::UnicodeSet::UnicodeSet(v13, (const icu::UnicodeString *)v33, a2);
    a1[1] = v13;
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v33);
    v28 = v31;
    v12 = (uint64_t *)&v28;
  }
  else
  {
    a1[1] = 0;
  }
  v15 = icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
  if (v15)
  {
    v17 = (icu::UnicodeSet *)v15;
    v30 = L"[:whitespace:]";
    icu::UnicodeString::UnicodeString(v33, 1, &v30);
    icu::UnicodeSet::UnicodeSet(v17, (const icu::UnicodeString *)v33, a2);
    a1[2] = v17;
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v33);
    v27 = v30;
    v16 = &v27;
  }
  else
  {
    a1[2] = 0;
  }
  v19 = *a1;
  if (*a1)
  {
    v20 = a1[1];
    if (v20)
    {
      v20 = a1[2];
      if (v20)
      {
        icu::UnicodeSet::freeze(v19);
        icu::UnicodeSet::freeze(a1[1]);
        icu::UnicodeSet::freeze(a1[2]);
        return a1;
      }
    }
    v21 = icu::UnicodeSet::~UnicodeSet(v20, v19);
    icu::UMemory::operator delete(v21);
  }
  *a1 = 0;
  v22 = a1[1];
  if (v22)
  {
    v23 = icu::UnicodeSet::~UnicodeSet(v16, v22);
    icu::UMemory::operator delete(v23);
  }
  a1[1] = 0;
  v24 = a1[2];
  if (v24)
  {
    v25 = icu::UnicodeSet::~UnicodeSet(v16, v24);
    icu::UMemory::operator delete(v25);
  }
  a1[2] = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return a1;
}

icu::UnicodeSet **sub_18BD7D62C@<X0>(icu::UnicodeSet **a1@<X0>, void *a2@<X8>)
{
  icu::UnicodeSet *v3;
  void *v4;
  icu::UnicodeSet *v5;
  void *v6;
  icu::UnicodeSet *v7;
  void *v8;

  v3 = *a1;
  if (v3)
  {
    v4 = icu::UnicodeSet::~UnicodeSet(a2, v3);
    icu::UMemory::operator delete(v4);
  }
  *a1 = 0;
  v5 = a1[1];
  if (v5)
  {
    v6 = icu::UnicodeSet::~UnicodeSet(a2, v5);
    icu::UMemory::operator delete(v6);
  }
  a1[1] = 0;
  v7 = a1[2];
  if (v7)
  {
    v8 = icu::UnicodeSet::~UnicodeSet(a2, v7);
    icu::UMemory::operator delete(v8);
  }
  a1[2] = 0;
  return a1;
}

uint64_t sub_18BD7D688@<X0>(void *a1@<X8>)
{
  icu::UnicodeSet **v1;

  if (qword_1ECD284F8)
  {
    v1 = sub_18BD7D62C((icu::UnicodeSet **)qword_1ECD284F8, a1);
    icu::UMemory::operator delete(v1);
  }
  qword_1ECD284F8 = 0;
  atomic_store(0, &dword_1ECD28500);
  return 1;
}

uint64_t sub_18BD7D6C8(unsigned int a1)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t *v4;
  icu::UnicodeSet **v5;
  int v6;
  uint64_t v8;
  int v10;

  v10 = 0;
  v2 = atomic_load(&dword_1ECD28500);
  if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD28500))
  {
    if (dword_1ECD28504 > 0 || v10 > 0)
      return 0;
LABEL_10:
    if (a1 <= 0x1A)
    {
      if (((1 << a1) & 0x180F0) != 0)
      {
        v8 = qword_1ECD284F8 + 8;
        return *(_QWORD *)v8;
      }
      if (((1 << a1) & 0x600000E) != 0)
      {
        v8 = qword_1ECD284F8;
        return *(_QWORD *)v8;
      }
    }
    v8 = qword_1ECD284F8 + 16;
    return *(_QWORD *)v8;
  }
  sub_18BDA1768(0x19u, (uint64_t)sub_18BD7D7E8);
  v5 = (icu::UnicodeSet **)icu::UMemory::operator new(v4, (icu::UMemory *)0x18, v3);
  if (v5)
  {
    v5 = sub_18BD7D438(v5, (UErrorCode *)&v10);
    v6 = v10;
  }
  else
  {
    v6 = 7;
    v10 = 7;
  }
  qword_1ECD284F8 = (uint64_t)v5;
  dword_1ECD28504 = v6;
  icu::umtx_initImplPostInit(&dword_1ECD28500);
  if (v10 < 1)
    goto LABEL_10;
  return 0;
}

uint64_t sub_18BD7D7E8@<X0>(void *a1@<X8>)
{
  sub_18BD7D688(a1);
  return 1;
}

void *icu::CollationKey::getStaticClassID(icu::CollationKey *this)
{
  return &unk_1EE009DF0;
}

void *icu::CollationKey::getDynamicClassID(icu::CollationKey *this)
{
  return &unk_1EE009DF0;
}

double icu::CollationKey::CollationKey(icu::CollationKey *this)
{
  double result;

  *(_QWORD *)this = off_1E2266718;
  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 1) = 0x100000000;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1E2266718;
  *(_QWORD *)&result = 0x100000000;
  *((_QWORD *)this + 1) = 0x100000000;
  return result;
}

icu::CollationKey *icu::CollationKey::CollationKey(icu::CollationKey *this, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3;
  _QWORD *v6;

  v3 = a3;
  *(_QWORD *)this = off_1E2266718;
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = 0;
  if ((a3 & 0x80000000) != 0 || !a2 && a3)
    goto LABEL_4;
  if (a3 < 0x21)
  {
    if (!a3)
      return this;
    v6 = (_QWORD *)((char *)this + 16);
LABEL_11:
    memcpy(v6, a2, v3);
    return this;
  }
  if (icu::CollationKey::reallocate(this, a3, 0))
  {
    v6 = (_QWORD *)((char *)this + 16);
    if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
      v6 = (_QWORD *)*v6;
    goto LABEL_11;
  }
  v3 = *((_DWORD *)this + 2);
LABEL_4:
  *((_DWORD *)this + 2) = v3 & 0x80000000;
  *((_DWORD *)this + 3) = 2;
  return this;
}

void *icu::CollationKey::reallocate(icu::CollationKey *this, int a2, int a3)
{
  void *v6;
  void *v7;
  int v8;
  _QWORD *v9;

  v6 = uprv_malloc(a2);
  v7 = v6;
  if (v6)
  {
    v8 = *((_DWORD *)this + 2);
    if (a3 >= 1)
    {
      v9 = (_QWORD *)((char *)this + 16);
      if (v8 < 0)
        v9 = (_QWORD *)*v9;
      memcpy(v6, v9, a3);
    }
    if (v8 < 0)
    {
      uprv_free(*((void **)this + 2));
      v8 = *((_DWORD *)this + 2);
    }
    *((_QWORD *)this + 2) = v7;
    *((_DWORD *)this + 6) = a2;
    *((_DWORD *)this + 2) = v8 | 0x80000000;
  }
  return v7;
}

uint64_t icu::CollationKey::setToBogus(uint64_t this)
{
  *(_DWORD *)(this + 8) &= 0x80000000;
  *(_DWORD *)(this + 12) = 2;
  return this;
}

icu::CollationKey *icu::CollationKey::CollationKey(icu::CollationKey *this, const icu::CollationKey *a2)
{
  int v3;
  size_t v4;
  void *v6;
  int v7;
  _QWORD *v8;
  const void *v9;
  char *v10;
  const void *v11;
  const void *v12;

  *(_QWORD *)this = off_1E2266718;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 2) & 0x7FFFFFFF;
  *((_DWORD *)this + 2) = v4;
  *((_DWORD *)this + 3) = v3;
  if (*((_DWORD *)a2 + 3) == 2)
  {
    *((_QWORD *)this + 1) = 0x200000000;
  }
  else
  {
    if (v4 < 0x21)
    {
      if (!(_DWORD)v4)
        return this;
      v8 = (_QWORD *)((char *)this + 16);
    }
    else
    {
      v6 = icu::CollationKey::reallocate(this, v4, 0);
      v7 = *((_DWORD *)this + 2);
      if (!v6)
      {
        *((_DWORD *)this + 2) = v7 & 0x80000000;
        *((_DWORD *)this + 3) = 2;
        return this;
      }
      v8 = (_QWORD *)((char *)this + 16);
      if (v7 < 0)
        v8 = (_QWORD *)*v8;
    }
    v11 = (const void *)*((_QWORD *)a2 + 2);
    v10 = (char *)a2 + 16;
    v9 = v11;
    if (*((int *)v10 - 2) >= 0)
      v12 = v10;
    else
      v12 = v9;
    memcpy(v8, v12, v4);
  }
  return this;
}

void icu::CollationKey::~CollationKey(void **this)
{
  *this = off_1E2266718;
  if (((_DWORD)this[1] & 0x80000000) != 0)
    uprv_free(this[2]);
  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v1;

  icu::CollationKey::~CollationKey(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::CollationKey::setLength(uint64_t this, int a2)
{
  *(_QWORD *)(this + 8) = *(_DWORD *)(this + 8) & 0x80000000 | a2;
  return this;
}

uint64_t icu::CollationKey::reset(uint64_t this)
{
  *(_DWORD *)(this + 8) &= 0x80000000;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

BOOL icu::CollationKey::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  size_t v3;
  int v4;
  _QWORD *v5;
  const void *v6;
  const void *v7;
  const void *v8;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = v2 & 0x7FFFFFFF;
  v4 = *(_DWORD *)(a2 + 8);
  if ((v2 & 0x7FFFFFFF) != (v4 & 0x7FFFFFFF))
    return 0;
  if (a1 == a2)
    return 1;
  v5 = (_QWORD *)(a1 + 16);
  if (v2 < 0)
    v5 = (_QWORD *)*v5;
  v8 = *(const void **)(a2 + 16);
  v6 = (const void *)(a2 + 16);
  v7 = v8;
  if (v4 < 0)
    v6 = v7;
  return memcmp(v5, v6, v3) == 0;
}

icu::CollationKey *icu::CollationKey::operator=(icu::CollationKey *this, icu::CollationKey *a2)
{
  int v4;
  int v5;
  size_t v6;
  int v7;
  void *v8;
  _QWORD *v9;
  const void *v10;

  if (this != a2)
  {
    if (*((_DWORD *)a2 + 3) == 2)
    {
      v4 = *((_DWORD *)this + 2);
    }
    else
    {
      v6 = *((_DWORD *)a2 + 2) & 0x7FFFFFFF;
      v4 = *((_DWORD *)this + 2);
      if (v4 < 0)
        v7 = *((_DWORD *)this + 6);
      else
        v7 = 32;
      if ((int)v6 <= v7
        || (v8 = icu::CollationKey::reallocate(this, *((_DWORD *)a2 + 2) & 0x7FFFFFFF, 0), v4 = *((_DWORD *)this + 2),
                                                                                           v8))
      {
        if ((_DWORD)v6)
        {
          v9 = (_QWORD *)((char *)this + 16);
          if (v4 < 0)
            v9 = (_QWORD *)*v9;
          if (*((int *)a2 + 2) >= 0)
            v10 = (char *)a2 + 16;
          else
            v10 = (const void *)*((_QWORD *)a2 + 2);
          memcpy(v9, v10, v6);
          v4 = *((_DWORD *)this + 2);
        }
        *((_DWORD *)this + 2) = v4 & 0x80000000 | v6;
        v5 = *((_DWORD *)a2 + 3);
        goto LABEL_18;
      }
    }
    *((_DWORD *)this + 2) = v4 & 0x80000000;
    v5 = 2;
LABEL_18:
    *((_DWORD *)this + 3) = v5;
  }
  return this;
}

uint64_t icu::CollationKey::compareTo(icu::CollationKey *this, const icu::CollationKey *a2)
{
  UErrorCode v3;

  v3 = U_ZERO_ERROR;
  return icu::CollationKey::compareTo(this, a2, &v3);
}

uint64_t icu::CollationKey::compareTo(icu::CollationKey *this, const icu::CollationKey *a2, UErrorCode *a3)
{
  uint64_t v3;
  int v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  size_t v13;
  int v14;
  uint64_t v15;

  if (*(int *)a3 > 0)
    return 0;
  v5 = *((_DWORD *)this + 2);
  v6 = (char *)this + 16;
  if (v5 < 0)
    v6 = *(char **)v6;
  v9 = (char *)*((_QWORD *)a2 + 2);
  v7 = (char *)a2 + 16;
  v8 = v9;
  v10 = *((_DWORD *)v7 - 2);
  if (v10 < 0)
    v7 = v8;
  if (v6 == v7)
    return 0;
  v11 = v5 & 0x7FFFFFFF;
  v12 = v10 & 0x7FFFFFFF;
  if (v11 < v12)
    v3 = 0xFFFFFFFFLL;
  else
    v3 = v11 != v12;
  if (v11 >= v12)
    v13 = v12;
  else
    v13 = v11;
  if ((_DWORD)v13)
  {
    v14 = memcmp(v6, v7, v13);
    if (v14 < 1)
      v15 = 0xFFFFFFFFLL;
    else
      v15 = 1;
    if (v14)
      return v15;
  }
  return v3;
}

uint64_t icu::CollationKey::hashCode(icu::CollationKey *this)
{
  uint64_t result;
  int v3;
  unsigned __int8 *v4;

  result = *((unsigned int *)this + 3);
  if (!(_DWORD)result)
  {
    v3 = *((_DWORD *)this + 2);
    v4 = (unsigned __int8 *)this + 16;
    if (v3 < 0)
      v4 = *(unsigned __int8 **)v4;
    if ((v3 & 0x7FFFFFFF) == 0 || v4 == 0)
    {
      result = 1;
    }
    else
    {
      LODWORD(result) = ustr_hashCharsN(v4, v3 & 0x7FFFFFFF);
      if ((result & 0xFFFFFFFD) != 0)
        result = result;
      else
        result = 1;
    }
    *((_DWORD *)this + 3) = result;
  }
  return result;
}

uint64_t ucol_keyHashCode(unsigned __int8 *a1, int a2)
{
  uint64_t result;

  result = 1;
  if (a1 && a2)
  {
    LODWORD(result) = ustr_hashCharsN(a1, a2);
    if ((result & 0xFFFFFFFD) != 0)
      return result;
    else
      return 1;
  }
  return result;
}

char *icu::StandardPlural::getKeyword(int a1)
{
  return off_1E2266748[a1];
}

uint64_t icu::StandardPlural::indexOrNegativeFromString(icu::StandardPlural *this, const char *a2)
{
  int v2;
  const char *v3;
  uint64_t result;

  v3 = (char *)this + 1;
  v2 = *(char *)this;
  if (v2 <= 108)
  {
    if (v2 > 60)
    {
      if (v2 == 61)
      {
        if (strcmp((const char *)this + 1, "0"))
        {
          if (!strcmp(v3, "1"))
            return 7;
          return 0xFFFFFFFFLL;
        }
        return 6;
      }
      if (v2 == 102 && !strcmp((const char *)this + 1, "ew"))
        return 3;
    }
    else
    {
      if (v2 != 48)
      {
        if (v2 == 49 && !*v3)
          return 7;
        return 0xFFFFFFFFLL;
      }
      if (!*v3)
        return 6;
    }
    return 0xFFFFFFFFLL;
  }
  if (v2 > 115)
  {
    if (v2 == 116)
    {
      if (strcmp((const char *)this + 1, "wo"))
        return 0xFFFFFFFFLL;
      return 2;
    }
    else
    {
      if (v2 != 122)
        return 0xFFFFFFFFLL;
      result = strcmp((const char *)this + 1, "ero");
      if ((_DWORD)result)
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (v2 == 109)
    {
      if (!strcmp((const char *)this + 1, "any"))
        return 4;
      return 0xFFFFFFFFLL;
    }
    if (v2 != 111)
      return 0xFFFFFFFFLL;
    if (strcmp((const char *)this + 1, "ther"))
    {
      if (!strcmp(v3, "ne"))
        return 1;
      return 0xFFFFFFFFLL;
    }
    return 5;
  }
  return result;
}

uint64_t icu::StandardPlural::indexOrNegativeFromString(icu::StandardPlural *this, const icu::UnicodeString *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned __int16 *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int32_t v11;
  int32_t v12;
  unsigned int v13;
  int v14;
  int32_t v15;
  int32_t v16;
  unsigned int v17;
  int v18;
  int32_t v19;
  int32_t v20;
  unsigned int v21;
  int v22;
  int32_t v23;
  int32_t v24;

  v2 = *((unsigned __int16 *)this + 4);
  if ((v2 & 0x8000u) == 0)
    v3 = v2 >> 5;
  else
    v3 = *((_DWORD *)this + 3);
  switch(v3)
  {
    case 1u:
      if ((v2 & 2) != 0)
        v5 = (unsigned __int16 *)((char *)this + 10);
      else
        v5 = (unsigned __int16 *)*((_QWORD *)this + 3);
      v6 = *v5;
      if (v6 == 49)
        v7 = 7;
      else
        v7 = -1;
      if (v6 == 48)
        v8 = 6;
      else
        v8 = v7;
      break;
    case 2u:
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 2, (uint64_t)"=", 0, 2))
      {
        v9 = *((unsigned __int16 *)this + 4);
        v10 = (__int16)v9;
        v11 = v9 >> 5;
        if (v10 >= 0)
          v12 = v11;
        else
          v12 = *((_DWORD *)this + 3);
        if (icu::UnicodeString::doCompare((uint64_t)this, 0, v12, (uint64_t)L"=1", 0, 2))
          goto LABEL_37;
        v8 = 7;
      }
      else
      {
        v8 = 6;
      }
      break;
    case 3u:
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 3, (uint64_t)"o", 0, 3))
      {
        v13 = *((unsigned __int16 *)this + 4);
        v14 = (__int16)v13;
        v15 = v13 >> 5;
        if (v14 >= 0)
          v16 = v15;
        else
          v16 = *((_DWORD *)this + 3);
        if (icu::UnicodeString::doCompare((uint64_t)this, 0, v16, (uint64_t)"t", 0, 3))
        {
          v17 = *((unsigned __int16 *)this + 4);
          v18 = (__int16)v17;
          v19 = v17 >> 5;
          if (v18 >= 0)
            v20 = v19;
          else
            v20 = *((_DWORD *)this + 3);
          v8 = 3;
          if (icu::UnicodeString::doCompare((uint64_t)this, 0, v20, (uint64_t)"f", 0, 3))
            goto LABEL_37;
        }
        else
        {
          v8 = 2;
        }
      }
      else
      {
        v8 = 1;
      }
      break;
    case 4u:
      v8 = 4;
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 4, (uint64_t)"m", 0, 4))
      {
        v21 = *((unsigned __int16 *)this + 4);
        v22 = (__int16)v21;
        v23 = v21 >> 5;
        if (v22 >= 0)
          v24 = v23;
        else
          v24 = *((_DWORD *)this + 3);
        if (icu::UnicodeString::doCompare((uint64_t)this, 0, v24, (uint64_t)L"zero", 0, 4))
          goto LABEL_37;
        v8 = 0;
      }
      break;
    case 5u:
      v8 = 5;
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, 5, (uint64_t)"o", 0, 5))
        goto LABEL_37;
      break;
    default:
LABEL_37:
      v8 = 0xFFFFFFFFLL;
      break;
  }
  return v8;
}

uint64_t icu::StandardPlural::indexFromString(icu::StandardPlural *this, char *a2, UErrorCode *a3)
{
  uint64_t result;

  if (*(int *)a2 > 0)
    return 5;
  result = icu::StandardPlural::indexOrNegativeFromString(this, a2);
  if ((result & 0x80000000) != 0)
  {
    *(_DWORD *)a2 = 1;
    return 5;
  }
  return result;
}

uint64_t icu::StandardPlural::indexFromString(icu::StandardPlural *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t result;

  if (*(int *)a2 > 0)
    return 5;
  result = icu::StandardPlural::indexOrNegativeFromString(this, a2);
  if ((result & 0x80000000) != 0)
  {
    *(_DWORD *)a2 = 1;
    return 5;
  }
  return result;
}

uint64_t icu::StringSegment::StringSegment(uint64_t this, const icu::UnicodeString *a2, char a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;

  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  v3 = *((unsigned __int16 *)a2 + 4);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 < 0)
    v5 = *((_DWORD *)a2 + 3);
  *(_DWORD *)(this + 12) = v5;
  *(_BYTE *)(this + 16) = a3;
  return this;
}

{
  unsigned int v3;
  int v4;
  unsigned int v5;

  *(_QWORD *)this = a2;
  *(_DWORD *)(this + 8) = 0;
  v3 = *((unsigned __int16 *)a2 + 4);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 < 0)
    v5 = *((_DWORD *)a2 + 3);
  *(_DWORD *)(this + 12) = v5;
  *(_BYTE *)(this + 16) = a3;
  return this;
}

uint64_t icu::StringSegment::getOffset(icu::StringSegment *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::StringSegment::setOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t icu::StringSegment::adjustOffset(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) += a2;
  return this;
}

unint64_t icu::StringSegment::adjustOffsetByCodePoint(icu::StringSegment *this)
{
  unint64_t result;
  int v3;

  result = icu::StringSegment::getCodePoint(this);
  if (result < 0x10000)
    v3 = 1;
  else
    v3 = 2;
  *((_DWORD *)this + 2) += v3;
  return result;
}

unint64_t icu::StringSegment::getCodePoint(icu::StringSegment *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;

  v2 = *(_QWORD *)this;
  v3 = *((int *)this + 2);
  v4 = *(unsigned __int16 *)(v2 + 8);
  if (*(__int16 *)(v2 + 8) < 0)
    v5 = *(_DWORD *)(v2 + 12);
  else
    v5 = v4 >> 5;
  if (v5 <= v3)
  {
    v7 = 0xFFFF;
  }
  else
  {
    if ((v4 & 2) != 0)
      v6 = v2 + 10;
    else
      v6 = *(_QWORD *)(v2 + 24);
    v7 = *(unsigned __int16 *)(v6 + 2 * v3);
    if ((v7 & 0xFC00) == 0xD800)
    {
      v8 = (uint64_t *)*((unsigned int *)this + 3);
      if ((int)v3 + 1 < (int)v8)
        return (unint64_t)icu::UnicodeString::char32At(v8, (icu::UnicodeString *)v2, v3);
    }
  }
  if ((v7 & 0xF800) == 0xD800)
    return 0xFFFFFFFFLL;
  else
    return v7;
}

uint64_t icu::StringSegment::setLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = *(_DWORD *)(this + 8) + a2;
  return this;
}

_DWORD *icu::StringSegment::resetLength(_DWORD *this)
{
  int v1;

  if (*(__int16 *)(*(_QWORD *)this + 8) < 0)
    v1 = *(_DWORD *)(*(_QWORD *)this + 12);
  else
    v1 = *(unsigned __int16 *)(*(_QWORD *)this + 8) >> 5;
  this[3] = v1;
  return this;
}

uint64_t icu::StringSegment::length(icu::StringSegment *this)
{
  return (*((_DWORD *)this + 3) - *((_DWORD *)this + 2));
}

uint64_t icu::StringSegment::charAt(icu::StringSegment *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v2 = *(_QWORD *)this;
  v3 = *((_DWORD *)this + 2) + a2;
  v4 = *(unsigned __int16 *)(*(_QWORD *)this + 8);
  if (*(__int16 *)(*(_QWORD *)this + 8) < 0)
    v5 = *(_DWORD *)(v2 + 12);
  else
    v5 = v4 >> 5;
  if (v5 <= v3)
    return 0xFFFFLL;
  if ((v4 & 2) != 0)
    v6 = v2 + 10;
  else
    v6 = *(_QWORD *)(v2 + 24);
  return *(unsigned __int16 *)(v6 + 2 * (int)v3);
}

uint64_t *icu::StringSegment::codePointAt(uint64_t **this, int a2)
{
  return icu::UnicodeString::char32At(*this, (icu::UnicodeString *)*this, *((_DWORD *)this + 2) + a2);
}

uint64_t icu::StringSegment::toUnicodeString@<X0>(icu::StringSegment *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v4 = *(_QWORD *)this;
  v5 = *(_WORD *)(*(_QWORD *)this + 8);
  if ((v5 & 0x11) != 0)
  {
    v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    v6 = v4 + 10;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 24);
  }
  return icu::UnicodeString::UnicodeString(a2, v6 + 2 * *((int *)this + 2), (*((_DWORD *)this + 3) - *((_DWORD *)this + 2)));
}

uint64_t icu::StringSegment::toTempUnicodeString@<X0>(icu::StringSegment *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(_QWORD *)this;
  v5 = *(_WORD *)(*(_QWORD *)this + 8);
  if ((v5 & 0x11) != 0)
  {
    v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    v6 = v4 + 10;
  }
  else
  {
    v6 = *(_QWORD *)(v4 + 24);
  }
  v8 = v6 + 2 * *((int *)this + 2);
  return icu::UnicodeString::UnicodeString(a2, 0, &v8);
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, UChar32 a2)
{
  UChar32 CodePoint;

  CodePoint = icu::StringSegment::getCodePoint(this);
  return icu::StringSegment::codePointsEqual(CodePoint, a2, *((unsigned __int8 *)this + 16));
}

BOOL icu::StringSegment::codePointsEqual(UChar32 c, UChar32 a2, int a3)
{
  BOOL v4;
  _BOOL8 result;
  UChar32 v7;

  v4 = c == a2;
  result = c == a2;
  if (!v4)
  {
    if (a3)
    {
      v7 = u_foldCase(c, 1u);
      return v7 == u_foldCase(a2, 1u);
    }
  }
  return result;
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, const icu::UnicodeSet *a2)
{
  int CodePoint;

  CodePoint = icu::StringSegment::getCodePoint(this);
  return CodePoint != -1 && icu::UnicodeSet::contains(a2, CodePoint) != 0;
}

BOOL icu::StringSegment::startsWith(icu::StringSegment *this, const icu::UnicodeString *a2)
{
  unsigned int v2;
  int v4;
  unsigned int v5;
  UChar32 CodePoint;
  uint64_t *v9;
  UChar32 v10;

  v2 = *((unsigned __int16 *)a2 + 4);
  if ((v2 & 1) != 0)
    return 0;
  v4 = (__int16)v2;
  v5 = v2 >> 5;
  if (v4 < 0)
    v5 = *((_DWORD *)a2 + 3);
  if (!v5 || *((_DWORD *)this + 3) == *((_DWORD *)this + 2))
    return 0;
  CodePoint = icu::StringSegment::getCodePoint(this);
  v10 = icu::UnicodeString::char32At(v9, a2, 0);
  return icu::StringSegment::codePointsEqual(CodePoint, v10, *((unsigned __int8 *)this + 16));
}

unint64_t icu::StringSegment::getCommonPrefixLength(icu::StringSegment *this, const icu::UnicodeString *a2)
{
  return icu::StringSegment::getPrefixLengthInternal(this, a2, *((unsigned __int8 *)this + 16));
}

unint64_t icu::StringSegment::getPrefixLengthInternal(icu::StringSegment *this, const icu::UnicodeString *a2, int a3)
{
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  UChar32 v18;
  unsigned int v19;
  unint64_t v20;
  char *v21;
  UChar32 v22;
  BOOL v23;

  v6 = 0;
  v7 = (char *)a2 + 10;
  do
  {
    v8 = v6;
    v9 = *((unsigned __int16 *)a2 + 4);
    v10 = (__int16)v9;
    v11 = v9 >> 5;
    if (v10 >= 0)
      v12 = v11;
    else
      v12 = *((_DWORD *)a2 + 3);
    if ((uint64_t)v8 >= (int)uprv_min((*((_DWORD *)this + 3) - *((_DWORD *)this + 2)), v12))
      break;
    v13 = *(_QWORD *)this;
    v14 = *(unsigned __int16 *)(*(_QWORD *)this + 8);
    v15 = *(__int16 *)(*(_QWORD *)this + 8) < 0 ? *(_DWORD *)(v13 + 12) : v14 >> 5;
    v16 = v8 + *((_DWORD *)this + 2);
    if (v15 <= v16)
    {
      v18 = 0xFFFF;
    }
    else
    {
      v17 = (v14 & 2) != 0 ? v13 + 10 : *(_QWORD *)(v13 + 24);
      v18 = *(unsigned __int16 *)(v17 + 2 * (int)v16);
    }
    v19 = *((unsigned __int16 *)a2 + 4);
    v20 = (v19 & 0x8000u) == 0 ? v19 >> 5 : *((unsigned int *)a2 + 3);
    if (v8 >= v20)
    {
      v22 = 0xFFFF;
    }
    else
    {
      v21 = (v19 & 2) != 0 ? v7 : (char *)*((_QWORD *)a2 + 3);
      v22 = *(unsigned __int16 *)&v21[2 * v8];
    }
    v23 = icu::StringSegment::codePointsEqual(v18, v22, a3);
    v6 = v8 + 1;
  }
  while (v23);
  return v8;
}

unint64_t icu::StringSegment::getCaseSensitivePrefixLength(icu::StringSegment *this, const icu::UnicodeString *a2)
{
  return icu::StringSegment::getPrefixLengthInternal(this, a2, 0);
}

BOOL icu::StringSegment::operator==(icu::StringSegment *a1, uint64_t a2)
{
  _BOOL8 v3;
  int v4;
  unsigned int v5;
  void *v6;
  _BYTE v8[8];
  unsigned __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v6 = (void *)*(unsigned __int16 *)(a2 + 8);
    v3 = v6 & 1;
  }
  else
  {
    v3 = 0;
    if ((v9 & 0x8000u) == 0)
      v4 = v9 >> 5;
    else
      v4 = v10;
    v5 = *(unsigned __int16 *)(a2 + 8);
    if ((v5 & 0x8000u) == 0)
      v6 = (void *)(v5 >> 5);
    else
      v6 = (void *)*(unsigned int *)(a2 + 12);
    if ((v5 & 1) == 0 && v4 == (_DWORD)v6)
      v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v8, (const icu::UnicodeString *)a2, v4);
  }
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  return v3;
}

void *sub_18BD7E7CC()
{
  return &unk_1EE009DF1;
}

uint64_t sub_18BD7E7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  *(_QWORD *)a1 = off_1E2266798;
  *(_QWORD *)(a1 + 8) = &unk_1E2266818;
  *(_QWORD *)(a1 + 16) = &unk_1E2266858;
  *(_QWORD *)(a1 + 24) = off_1E2256B38;
  *(_WORD *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 88) = a6;
  *(_DWORD *)(a1 + 96) = a5;
  *(_QWORD *)(a1 + 100) = -1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3, a4, a1 + 24);
  return a1;
}

void sub_18BD7E858(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2266798;
  *(_QWORD *)(a1 + 8) = &unk_1E2266818;
  *(_QWORD *)(a1 + 16) = &unk_1E2266858;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 24));
  icu::UnicodeReplacer::~UnicodeReplacer((icu::UnicodeReplacer *)(a1 + 16));
  icu::UnicodeMatcher::~UnicodeMatcher((icu::UnicodeMatcher *)(a1 + 8));
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18BD7E8BC(uint64_t a1)
{
  sub_18BD7E858(a1 - 8);
}

void sub_18BD7E8C4(uint64_t a1)
{
  sub_18BD7E858(a1 - 16);
}

void sub_18BD7E8CC(uint64_t a1)
{
  void *v1;

  sub_18BD7E858(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD7E8E0(uint64_t a1)
{
  void *v1;

  sub_18BD7E858(a1 - 8);
  icu::UMemory::operator delete(v1);
}

void sub_18BD7E8F8(uint64_t a1)
{
  void *v1;

  sub_18BD7E858(a1 - 16);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BD7E910@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x70, a2);
  v5 = v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E2266798;
    v4[1] = (uint64_t)&unk_1E2266818;
    v4[2] = (uint64_t)&unk_1E2266858;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 3), (UChar **)(a1 + 24));
    v5[11] = *(_QWORD *)(a1 + 88);
    v5[12] = *(_QWORD *)(a1 + 96);
    *((_DWORD *)v5 + 26) = *(_DWORD *)(a1 + 104);
  }
  return v5;
}

uint64_t sub_18BD7E97C(uint64_t a1)
{
  if (a1)
    return a1 + 8;
  else
    return 0;
}

uint64_t sub_18BD7E98C(uint64_t a1)
{
  if (a1)
    return a1 + 16;
  else
    return 0;
}

uint64_t sub_18BD7E99C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  int v11;
  unint64_t i;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;

  v10 = *a3;
  v27 = v10;
  if (v10 <= (int)a4)
  {
    for (i = 0; ; ++i)
    {
      v13 = *(unsigned __int16 *)(a1 + 32);
      if (*(__int16 *)(a1 + 32) < 0)
        v14 = *(_DWORD *)(a1 + 36);
      else
        v14 = v13 >> 5;
      if ((uint64_t)i >= (int)v14)
      {
        *(_DWORD *)(a1 + 100) = *a3;
        v26 = v27;
        v10 = v27;
        goto LABEL_49;
      }
      if ((_DWORD)a5 && v27 == (_DWORD)a4)
        break;
      if ((v13 & 0x8000) != 0)
        v15 = *(_DWORD *)(a1 + 36);
      else
        v15 = v13 >> 5;
      if (i >= v15)
      {
        v17 = 0xFFFF;
      }
      else
      {
        v16 = a1 + 34;
        if ((v13 & 2) == 0)
          v16 = *(_QWORD *)(a1 + 48);
        v17 = *(unsigned __int16 *)(v16 + 2 * i);
      }
      v18 = sub_18BD4AF38(*(_QWORD *)(a1 + 88), v17);
      if (v18)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, a2, &v27, a4, a5);
        if ((_DWORD)result != 2)
          return result;
      }
      else
      {
        if (v27 >= (int)a4 || v17 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2))
          return 0;
        ++v27;
      }
    }
    return 1;
  }
  else
  {
    if (*(__int16 *)(a1 + 32) < 0)
      v11 = *(_DWORD *)(a1 + 36);
    else
      v11 = *(unsigned __int16 *)(a1 + 32) >> 5;
    if (v11 >= 1)
    {
      v20 = v11;
      do
      {
        v21 = *(unsigned __int16 *)(a1 + 32);
        if (*(__int16 *)(a1 + 32) < 0)
          v22 = *(_DWORD *)(a1 + 36);
        else
          v22 = v21 >> 5;
        if (v22 <= --v20)
        {
          v24 = 0xFFFF;
        }
        else
        {
          v23 = a1 + 34;
          if ((v21 & 2) == 0)
            v23 = *(_QWORD *)(a1 + 48);
          v24 = *(unsigned __int16 *)(v23 + 2 * v20);
        }
        v25 = sub_18BD4AF38(*(_QWORD *)(a1 + 88), v24);
        if (v25)
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, a2, &v27, a4, a5);
          if ((_DWORD)result != 2)
            return result;
        }
        else
        {
          if (v27 <= (int)a4 || v24 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2))
            return 0;
          --v27;
        }
      }
      while ((unint64_t)(v20 + 1) > 1);
      v10 = v27;
    }
    if ((*(_DWORD *)(a1 + 100) & 0x80000000) != 0)
    {
      *(_DWORD *)(a1 + 100) = v10 + 1;
      v26 = *a3 + 1;
LABEL_49:
      *(_DWORD *)(a1 + 104) = v26;
    }
    *a3 = v10;
    return 2;
  }
}

uint64_t sub_18BD7EBF4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  return sub_18BD7E99C(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_18BD7EBFC(uint64_t a1, icu::ICU_Utility *this, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  icu::UnicodeString *v16;
  icu::UnicodeString *v17;
  icu::UnicodeString *v18;
  void *v19;
  void *v20;
  __int16 v22;
  void (**v23)(icu::UnicodeString *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void (**v28)(icu::UnicodeString *__hidden);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = *((unsigned __int16 *)this + 4);
  if ((v9 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v9 & 0x8000u) == 0)
      v10 = v9 >> 5;
    else
      v10 = *((_DWORD *)this + 3);
    if (v10)
      *((_WORD *)this + 4) &= 0x1Fu;
  }
  v29 = 0u;
  v30 = 0u;
  v32 = 0;
  v31 = 0u;
  v27 = 0;
  v28 = off_1E2256B38;
  LOWORD(v29) = 2;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = off_1E2256B38;
  LOWORD(v24) = 2;
  if (*(int *)(a1 + 96) >= 1)
  {
    v22 = 40;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v22, 0, 1);
  }
  v11 = 0;
  while ((*(__int16 *)(a1 + 32) & 0x80000000) == 0)
  {
    if (v11 >= (unint64_t)*(unsigned __int16 *)(a1 + 32) >> 5)
      goto LABEL_25;
    v12 = (unint64_t)*(unsigned __int16 *)(a1 + 32) >> 5;
LABEL_16:
    if (v12 <= v11)
    {
      v14 = 0xFFFFLL;
    }
    else
    {
      v13 = a1 + 34;
      if ((*(_WORD *)(a1 + 32) & 2) == 0)
        v13 = *(_QWORD *)(a1 + 48);
      v14 = *(unsigned __int16 *)(v13 + 2 * v11);
    }
    v15 = sub_18BD4AF38(*(_QWORD *)(a1 + 88), v14);
    if (v15)
    {
      v17 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t))(*(_QWORD *)v15 + 24))(v15, &v28, a3);
      icu::ICU_Utility::appendToRule(this, v17, (const icu::UnicodeString *)1, a3, (icu::UnicodeString *)&v23, v18);
    }
    else
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)v14, 0, a3, (icu::UnicodeString *)&v23, v16);
    }
    ++v11;
  }
  if ((uint64_t)v11 < *(int *)(a1 + 36))
  {
    v12 = *(unsigned int *)(a1 + 36);
    goto LABEL_16;
  }
LABEL_25:
  if (*(int *)(a1 + 96) > 0)
  {
    v22 = 41;
    icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v22, 0, 1);
  }
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0xFFFFFFFFLL, 1, a3, (icu::UnicodeString *)&v23, a6);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v23);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v28);
  return this;
}

icu::ICU_Utility *sub_18BD7EE04(uint64_t a1, icu::ICU_Utility *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  return sub_18BD7EBFC(a1 - 8, a2, a3, a4, a5, a6);
}

uint64_t sub_18BD7EE0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  unsigned __int8 v6;
  uint64_t v7;

  if ((*(__int16 *)(a1 + 32) & 0x80000000) == 0)
  {
    v4 = (uint64_t *)(*(unsigned __int16 *)(a1 + 32) >> 5);
    if ((_DWORD)v4)
      goto LABEL_3;
    return 1;
  }
  v4 = (uint64_t *)*(unsigned int *)(a1 + 36);
  if (!(_DWORD)v4)
    return 1;
LABEL_3:
  v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)(a1 + 24), 0);
  v6 = v5;
  v7 = sub_18BD4AF38(*(_QWORD *)(a1 + 88), v5);
  if (v7)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2);
  else
    return (_DWORD)a2 == v6;
}

uint64_t sub_18BD7EE9C(uint64_t a1, uint64_t a2)
{
  return sub_18BD7EE0C(a1 - 8, a2);
}

icu::UnicodeSet *sub_18BD7EEA4(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  icu::UnicodeSet *v3;
  int v4;
  icu::UnicodeString *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;

  v3 = result;
  v4 = 0;
  v5 = (icu::UnicodeSet *)((char *)result + 24);
  while (1)
  {
    v6 = *((__int16 *)v3 + 16) < 0
       ? (uint64_t *)*((unsigned int *)v3 + 9)
       : (uint64_t *)(*((unsigned __int16 *)v3 + 16) >> 5);
    if (v4 >= (int)v6)
      break;
    v7 = icu::UnicodeString::char32At(v6, v5, v4);
    v8 = sub_18BD4AF38(*((_QWORD *)v3 + 11), v7);
    if (v8)
      result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(_QWORD *)v8 + 40))(v8, a2);
    else
      result = icu::UnicodeSet::add(a2, v7);
    if (v7 < 0x10000)
      v9 = 1;
    else
      v9 = 2;
    v4 += v9;
  }
  return result;
}

icu::UnicodeSet *sub_18BD7EF50(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_18BD7EEA4((icu::UnicodeSet *)(a1 - 8), a2);
}

uint64_t sub_18BD7EF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v9;
  void (**v11)(icu::UnicodeString *__hidden);
  __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v7 = *(_DWORD *)(a1 + 100);
  if (v7 < 0 || v7 == *(_DWORD *)(a1 + 104))
  {
    v9 = 0;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v9 = (*(_DWORD *)(a1 + 104) - *(_DWORD *)(a1 + 100));
  }
  v11 = off_1E2256B38;
  v12 = 2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 32))(a2, a3, a4, &v11);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v11);
  return v9;
}

uint64_t sub_18BD7F034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18BD7EF58(a1 - 16, a2, a3, a4);
}

icu::UnicodeString *sub_18BD7F03C(uint64_t a1, icu::UnicodeString *this)
{
  unsigned int v4;
  unsigned int v5;
  __int16 v7;

  v4 = *((unsigned __int16 *)this + 4);
  if ((v4 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v4 & 0x8000u) == 0)
      v5 = v4 >> 5;
    else
      v5 = *((_DWORD *)this + 3);
    if (v5)
      *((_WORD *)this + 4) &= 0x1Fu;
  }
  v7 = 36;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v7, 0, 1);
  icu::ICU_Utility::appendNumber(this, (icu::UnicodeString *)*(unsigned int *)(a1 + 96), 0xAu, 1);
  return this;
}

icu::UnicodeString *sub_18BD7F0CC(uint64_t a1, icu::UnicodeString *a2)
{
  return sub_18BD7F03C(a1 - 16, a2);
}

double sub_18BD7F0D8(uint64_t a1)
{
  double result;

  result = NAN;
  *(_QWORD *)(a1 + 100) = -1;
  return result;
}

_QWORD *sub_18BD7F0EC(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  icu::UnicodeString *v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;

  v2 = result;
  v3 = 0;
  result[11] = a2;
  v4 = (icu::UnicodeString *)(result + 3);
  while (1)
  {
    v5 = (__int16)v2[4] < 0 ? (uint64_t *)*((unsigned int *)v2 + 9) : (uint64_t *)(*((unsigned __int16 *)v2 + 16) >> 5);
    if (v3 >= (int)v5)
      break;
    v6 = icu::UnicodeString::char32At(v5, v4, v3);
    result = (_QWORD *)sub_18BD4AF0C(v2[11], v6);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 48))(result, v2[11]);
    if (v6 < 0x10000)
      v7 = 1;
    else
      v7 = 2;
    v3 += v7;
  }
  return result;
}

void *sub_18BD7F194()
{
  return &unk_1EE009DF2;
}

uint64_t sub_18BD7F1A0(uint64_t a1, UChar **a2, int a3, uint64_t a4)
{
  *(_QWORD *)a1 = off_1E22668D8;
  *(_QWORD *)(a1 + 8) = &unk_1E2266938;
  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 24) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 16), a2);
  *(_DWORD *)(a1 + 80) = a3;
  *(_WORD *)(a1 + 84) = 257;
  *(_QWORD *)(a1 + 88) = a4;
  return a1;
}

uint64_t sub_18BD7F20C(uint64_t a1, UChar **a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E22668D8;
  *(_QWORD *)(a1 + 8) = &unk_1E2266938;
  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 24) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 16), a2);
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 84) = 256;
  *(_QWORD *)(a1 + 88) = a3;
  return a1;
}

void sub_18BD7F26C(_QWORD *a1)
{
  *a1 = off_1E22668D8;
  a1[1] = &unk_1E2266938;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 2));
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18BD7F2A0(_QWORD *a1)
{
  icu::UnicodeFunctor *v1;

  *(a1 - 1) = off_1E22668D8;
  v1 = (icu::UnicodeFunctor *)(a1 - 1);
  *a1 = &unk_1E2266938;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  icu::UnicodeFunctor::~UnicodeFunctor(v1);
}

void sub_18BD7F2D8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E22668D8;
  a1[1] = &unk_1E2266938;
  icu::UnicodeString::~UnicodeString(off_1E22668D8, (icu::UnicodeString *)(a1 + 2));
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD7F310(uint64_t a1)
{
  sub_18BD7F2D8((_QWORD *)(a1 - 8));
}

uint64_t *sub_18BD7F318@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E22668D8;
    v4[1] = (uint64_t)&unk_1E2266938;
    v4[2] = (uint64_t)off_1E2256B38;
    *((_WORD *)v4 + 12) = 2;
    icu::UnicodeString::operator=((UChar **)v4 + 2, (UChar **)(a1 + 16));
    *((_DWORD *)v5 + 20) = *(_DWORD *)(a1 + 80);
    *((_WORD *)v5 + 42) = *(_WORD *)(a1 + 84);
    v5[11] = *(_QWORD *)(a1 + 88);
  }
  return v5;
}

uint64_t sub_18BD7F394(uint64_t a1)
{
  if (a1)
    return a1 + 8;
  else
    return 0;
}

uint64_t sub_18BD7F3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  BOOL v38;
  int v40;
  int v41;
  unsigned int v42;
  _OWORD v44[4];
  void (**v45)(icu::UnicodeString *__hidden);
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a3;
  v50 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 85))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3, a4, a1 + 16);
    if (*(__int16 *)(a1 + 24) < 0)
      v10 = *(unsigned int *)(a1 + 28);
    else
      v10 = *(unsigned __int16 *)(a1 + 24) >> 5;
    v13 = *(_DWORD *)(a1 + 80);
    goto LABEL_45;
  }
  v41 = a4;
  v46 = 0u;
  v49 = 0;
  v48 = 0u;
  v47 = 0u;
  v45 = off_1E2256B38;
  LOWORD(v46) = 2;
  *(_BYTE *)(a1 + 85) = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v42 = v5;
  if ((int)v5 < 1)
  {
    memset(v44, 0, sizeof(v44));
    icu::UnicodeString::UnicodeString((uint64_t)v44, 0xFFFF);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v8, v8, v44);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v44);
    v9 = 1;
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 80))(a2, (v5 - 1)) < 0x10000)
      v9 = 1;
    else
      v9 = 2;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, (v5 - v9), v5, v8);
  }
  v12 = 0;
  v13 = 0;
  v40 = v8;
  v14 = (v9 + v8);
  v15 = v14;
  while (1)
  {
    v16 = *(__int16 *)(a1 + 24) < 0 ? *(_DWORD *)(a1 + 28) : *(unsigned __int16 *)(a1 + 24) >> 5;
    if (v12 >= v16)
      break;
    v17 = (uint64_t *)*(unsigned int *)(a1 + 80);
    if (v12 == (_DWORD)v17)
      v13 = v15 - v14;
    v18 = icu::UnicodeString::char32At(v17, (icu::UnicodeString *)(a1 + 16), v12);
    v19 = sub_18BD4AF70(*(_QWORD *)(a1 + 88), v18);
    if (!v19)
    {
      icu::UnicodeString::append((uint64_t)&v45, v18);
      goto LABEL_30;
    }
    v20 = v19;
    *(_BYTE *)(a1 + 85) = 1;
    v21 = (unsigned __int16)v46 >> 5;
    if ((v46 & 0x8000u) != 0)
      v21 = DWORD1(v46);
    if (v21 >= 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 32))(a2, v15, v15, &v45);
      if ((__int16)v46 < 0)
      {
        v22 = DWORD1(v46);
        v15 = (DWORD1(v46) + v15);
        if ((v46 & 1) == 0)
          goto LABEL_26;
      }
      else
      {
        v15 = v15 + ((unsigned __int16)v46 >> 5);
        if ((v46 & 1) == 0)
        {
          v22 = (unsigned __int16)v46 >> 5;
LABEL_26:
          if (v22)
          {
            LOBYTE(v46) = v46 & 0x1F;
            LOWORD(v46) = v46;
          }
          goto LABEL_29;
        }
      }
      icu::UnicodeString::unBogus((uint64_t)&v45);
    }
LABEL_29:
    v15 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v20 + 16))(v20, a2, v15, v15, a5)+ v15;
LABEL_30:
    if (v18 < 0x10000)
      v23 = 1;
    else
      v23 = 2;
    v12 += v23;
  }
  v24 = (unsigned __int16)v46 >> 5;
  if ((v46 & 0x8000u) != 0)
    v24 = DWORD1(v46);
  if (v24 >= 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 32))(a2, v15, v15, &v45);
    v25 = (unsigned __int16)v46 >> 5;
    if ((v46 & 0x8000u) != 0)
      v25 = DWORD1(v46);
    v15 = (v25 + v15);
  }
  v10 = (v15 - v14);
  if (v12 == *(_DWORD *)(a1 + 80))
    v13 = v15 - v14;
  LODWORD(v5) = v42;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 40))(a2, v14, v15, v42);
  *(_QWORD *)&v44[0] = off_1E2256B38;
  WORD4(v44[0]) = 2;
  (*(void (**)(uint64_t, _QWORD, _QWORD, _OWORD *))(*(_QWORD *)a2 + 32))(a2, (v10 + v40), (v10 + v15), v44);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v44);
  *(_QWORD *)&v44[0] = off_1E2256B38;
  WORD4(v44[0]) = 2;
  (*(void (**)(uint64_t, _QWORD, _QWORD, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v10 + v42, (v10 + v41), v44);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v44);
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v45);
LABEL_45:
  if (*(_BYTE *)(a1 + 84))
  {
    v29 = *(_DWORD *)(a1 + 80);
    if (v29 < 0)
    {
      if ((int)v5 >= 1)
      {
        v32 = -v29;
        do
        {
          if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 80))(a2, (v5 - 1)) >= 0x10000)
            v33 = -2;
          else
            v33 = -1;
          LODWORD(v5) = v33 + v5;
          --v32;
        }
        while (v32 && (int)v5 > 0);
        v29 = -v32;
      }
      v34 = v29 + v5;
    }
    else if (*(__int16 *)(a1 + 24) < 0)
    {
      v31 = *(_DWORD *)(a1 + 28);
      if (v29 <= v31)
        goto LABEL_69;
LABEL_60:
      v35 = (v10 + v5);
      v36 = v29 - v31;
      if (v29 - v31 >= 1)
      {
        while ((int)v35 < (*(int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v35) < 0x10000)
            v37 = 1;
          else
            v37 = 2;
          v35 = (v37 + v35);
          v38 = __OFSUB__(v36--, 1);
          if ((v36 < 0) ^ v38 | (v36 == 0))
          {
            v36 = 0;
            break;
          }
        }
      }
      v34 = v36 + v35;
    }
    else
    {
      v30 = *(unsigned __int16 *)(a1 + 24);
      if (v29 > v30 >> 5)
      {
        v31 = v30 >> 5;
        goto LABEL_60;
      }
LABEL_69:
      v34 = v13 + v5;
    }
    *a5 = v34;
  }
  return v10;
}

uint64_t sub_18BD7F860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  return sub_18BD7F3A4(a1 - 8, a2, a3, a4, a5);
}

icu::ICU_Utility *sub_18BD7F868(uint64_t a1, icu::ICU_Utility *this, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  icu::UnicodeString *v22;
  icu::UnicodeString *v23;
  void *v24;
  int v25;
  unsigned int v26;
  void *v27;
  __int16 v29;
  void (**v30)(icu::UnicodeString *__hidden);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  void (**v35)(icu::UnicodeString *__hidden);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = *((unsigned __int16 *)this + 4);
  if ((v9 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v9 & 0x8000u) == 0)
      v10 = v9 >> 5;
    else
      v10 = *((_DWORD *)this + 3);
    if (v10)
      *((_WORD *)this + 4) &= 0x1Fu;
  }
  v36 = 0u;
  v37 = 0u;
  v39 = 0;
  v38 = 0u;
  v35 = off_1E2256B38;
  LOWORD(v36) = 2;
  v11 = *(_DWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 84) && (v11 & 0x80000000) != 0)
  {
    do
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x40, 1, a3, (icu::UnicodeString *)&v35, a6);
    while (!__CFADD__(v11++, 1));
    v11 = 1;
  }
  v13 = 0;
  v14 = v11;
  while (1)
  {
    v15 = *(__int16 *)(a1 + 24);
    v16 = *(unsigned __int16 *)(a1 + 24);
    v17 = v15 < 0 ? *(_DWORD *)(a1 + 28) : v16 >> 5;
    if ((uint64_t)v13 >= v17)
      break;
    if (*(_BYTE *)(a1 + 84) && v14 == v13)
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7C, 1, a3, (icu::UnicodeString *)&v35, a6);
      LOWORD(v15) = *(_WORD *)(a1 + 24);
    }
    if ((v15 & 0x8000) != 0)
      v18 = *(_DWORD *)(a1 + 28);
    else
      v18 = (unsigned __int16)v15 >> 5;
    if (v13 >= v18)
    {
      v20 = 0xFFFFLL;
    }
    else
    {
      v19 = a1 + 26;
      if ((v15 & 2) == 0)
        v19 = *(_QWORD *)(a1 + 40);
      v20 = *(unsigned __int16 *)(v19 + 2 * v13);
    }
    v21 = sub_18BD4AF70(*(_QWORD *)(a1 + 88), v20);
    if (v21)
    {
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      v30 = off_1E2256B38;
      LOWORD(v31) = 2;
      (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t))(*(_QWORD *)v21 + 24))(v21, &v30, a3);
      v29 = 32;
      icu::UnicodeString::doReplace((uint64_t)&v30, 0, 0, (uint64_t)&v29, 0, 1);
      v29 = 32;
      icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1);
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)&v30, (const icu::UnicodeString *)1, a3, (icu::UnicodeString *)&v35, v23);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v30);
    }
    else
    {
      icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)v20, 0, a3, (icu::UnicodeString *)&v35, v22);
    }
    ++v13;
  }
  if (*(_BYTE *)(a1 + 84))
  {
    if (v15 < 0)
    {
      v25 = *(_DWORD *)(a1 + 28);
      if ((int)v14 <= v25)
        goto LABEL_42;
    }
    else
    {
      if ((int)v14 <= (int)(v16 >> 5))
        goto LABEL_42;
      v25 = v16 >> 5;
    }
    if ((int)v14 - v25 >= 1)
    {
      v26 = v14 - v25 + 1;
      do
      {
        icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x40, 1, a3, (icu::UnicodeString *)&v35, a6);
        --v26;
      }
      while (v26 > 1);
    }
    icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0x7C, 1, a3, (icu::UnicodeString *)&v35, a6);
  }
LABEL_42:
  icu::ICU_Utility::appendToRule(this, (icu::UnicodeString *)0xFFFFFFFFLL, 1, a3, (icu::UnicodeString *)&v35, a6);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v35);
  return this;
}

icu::ICU_Utility *sub_18BD7FB58(uint64_t a1, icu::ICU_Utility *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  return sub_18BD7F868(a1 - 8, a2, a3, a4, a5, a6);
}

icu::UnicodeSet *sub_18BD7FB60(icu::UnicodeSet *result, icu::UnicodeSet *a2)
{
  icu::UnicodeSet *v3;
  int v4;
  icu::UnicodeString *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;

  v3 = result;
  v4 = 0;
  v5 = (icu::UnicodeSet *)((char *)result + 16);
  while (1)
  {
    v6 = *((__int16 *)v3 + 12) < 0
       ? (uint64_t *)*((unsigned int *)v3 + 7)
       : (uint64_t *)(*((unsigned __int16 *)v3 + 12) >> 5);
    if (v4 >= (int)v6)
      break;
    v7 = icu::UnicodeString::char32At(v6, v5, v4);
    v8 = sub_18BD4AF70(*((_QWORD *)v3 + 11), v7);
    if (v8)
      result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t, icu::UnicodeSet *))(*(_QWORD *)v8 + 32))(v8, a2);
    else
      result = icu::UnicodeSet::add(a2, v7);
    if (v7 < 0x10000)
      v9 = 1;
    else
      v9 = 2;
    v4 += v9;
  }
  return result;
}

icu::UnicodeSet *sub_18BD7FC0C(uint64_t a1, icu::UnicodeSet *a2)
{
  return sub_18BD7FB60((icu::UnicodeSet *)(a1 - 8), a2);
}

_QWORD *sub_18BD7FC14(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  icu::UnicodeString *v4;
  uint64_t *v5;
  unsigned int v6;
  int v7;

  v2 = result;
  v3 = 0;
  result[11] = a2;
  v4 = (icu::UnicodeString *)(result + 2);
  while (1)
  {
    v5 = (__int16)v2[3] < 0 ? (uint64_t *)*((unsigned int *)v2 + 7) : (uint64_t *)(*((unsigned __int16 *)v2 + 12) >> 5);
    if (v3 >= (int)v5)
      break;
    v6 = icu::UnicodeString::char32At(v5, v4, v3);
    result = (_QWORD *)sub_18BD4AF0C(v2[11], v6);
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 48))(result, v2[11]);
    if (v6 < 0x10000)
      v7 = 1;
    else
      v7 = 2;
    v3 += v7;
  }
  return result;
}

void *icu::StringSearch::getStaticClassID(icu::StringSearch *this)
{
  return &unk_1EE009DF3;
}

void *icu::StringSearch::getDynamicClassID(icu::StringSearch *this)
{
  return &unk_1EE009DF3;
}

void **icu::StringSearch::StringSearch(void **this, UChar **a2, UChar **a3, char **a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  icu::SearchIterator *v11;
  unsigned int v12;
  const UChar *v13;
  int32_t v14;
  unsigned int v15;
  const UChar *v16;
  int32_t v17;

  v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(_QWORD *)v11 = off_1E22669F0;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1)
  {
    this[19] = 0;
    return this;
  }
  v12 = *((unsigned __int16 *)this + 48);
  if ((v12 & 0x11) != 0)
  {
    v13 = 0;
    if ((v12 & 0x8000) != 0)
      goto LABEL_10;
LABEL_8:
    v14 = v12 >> 5;
    goto LABEL_11;
  }
  if ((v12 & 2) != 0)
  {
    v13 = (const UChar *)this + 49;
    if ((v12 & 0x8000) == 0)
      goto LABEL_8;
  }
  else
  {
    v13 = (const UChar *)this[14];
    if ((v12 & 0x8000) == 0)
      goto LABEL_8;
  }
LABEL_10:
  v14 = *((_DWORD *)this + 25);
LABEL_11:
  v15 = *((unsigned __int16 *)this + 16);
  if ((v15 & 0x11) != 0)
  {
    v16 = 0;
    if ((v15 & 0x8000) != 0)
      goto LABEL_18;
LABEL_16:
    v17 = v15 >> 5;
    goto LABEL_19;
  }
  if ((v15 & 2) != 0)
  {
    v16 = (const UChar *)this + 17;
    if ((v15 & 0x8000) == 0)
      goto LABEL_16;
  }
  else
  {
    v16 = (const UChar *)this[6];
    if ((v15 & 0x8000) == 0)
      goto LABEL_16;
  }
LABEL_18:
  v17 = *((_DWORD *)this + 9);
LABEL_19:
  this[19] = usearch_open(v13, v14, v16, v17, a4[5], (uint64_t)a5, (const icu::Locale *)a6);
  uprv_free(this[1]);
  this[1] = 0;
  if (*(int *)a6 <= 0)
    this[1] = *(void **)this[19];
  return this;
}

void **icu::StringSearch::StringSearch(void **this, UChar **a2, UChar **a3, icu::RuleBasedCollator *a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  icu::SearchIterator *v11;
  unsigned int v13;
  const UChar *v14;
  int32_t v15;
  unsigned int v16;
  const UChar *v17;
  int32_t v18;

  v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(_QWORD *)v11 = off_1E22669F0;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1)
    goto LABEL_2;
  if (!a4)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_2:
    this[19] = 0;
    return this;
  }
  v13 = *((unsigned __int16 *)this + 48);
  if ((v13 & 0x11) != 0)
  {
    v14 = 0;
    if ((v13 & 0x8000) != 0)
      goto LABEL_13;
LABEL_11:
    v15 = v13 >> 5;
    goto LABEL_14;
  }
  if ((v13 & 2) != 0)
  {
    v14 = (const UChar *)this + 49;
    if ((v13 & 0x8000) == 0)
      goto LABEL_11;
  }
  else
  {
    v14 = (const UChar *)this[14];
    if ((v13 & 0x8000) == 0)
      goto LABEL_11;
  }
LABEL_13:
  v15 = *((_DWORD *)this + 25);
LABEL_14:
  v16 = *((unsigned __int16 *)this + 16);
  if ((v16 & 0x11) != 0)
  {
    v17 = 0;
    if ((v16 & 0x8000) != 0)
      goto LABEL_21;
LABEL_19:
    v18 = v16 >> 5;
    goto LABEL_22;
  }
  if ((v16 & 2) != 0)
  {
    v17 = (const UChar *)this + 17;
    if ((v16 & 0x8000) == 0)
      goto LABEL_19;
  }
  else
  {
    v17 = (const UChar *)this[6];
    if ((v16 & 0x8000) == 0)
      goto LABEL_19;
  }
LABEL_21:
  v18 = *((_DWORD *)this + 9);
LABEL_22:
  this[19] = usearch_openFromCollator(v14, v15, v17, v18, a4, (uint64_t)a5, (int *)a6);
  uprv_free(this[1]);
  this[1] = 0;
  if (*(int *)a6 <= 0)
    this[1] = *(void **)this[19];
  return this;
}

void **icu::StringSearch::StringSearch(void **this, UChar **a2, icu::CharacterIterator *a3, char **a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  icu::SearchIterator *v11;
  unsigned int v12;
  const UChar *v13;
  int32_t v14;
  unsigned int v15;
  const UChar *v16;
  int32_t v17;

  v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(_QWORD *)v11 = off_1E22669F0;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1)
  {
    this[19] = 0;
    return this;
  }
  v12 = *((unsigned __int16 *)this + 48);
  if ((v12 & 0x11) != 0)
  {
    v13 = 0;
    if ((v12 & 0x8000) != 0)
      goto LABEL_10;
LABEL_8:
    v14 = v12 >> 5;
    goto LABEL_11;
  }
  if ((v12 & 2) != 0)
  {
    v13 = (const UChar *)this + 49;
    if ((v12 & 0x8000) == 0)
      goto LABEL_8;
  }
  else
  {
    v13 = (const UChar *)this[14];
    if ((v12 & 0x8000) == 0)
      goto LABEL_8;
  }
LABEL_10:
  v14 = *((_DWORD *)this + 25);
LABEL_11:
  v15 = *((unsigned __int16 *)this + 16);
  if ((v15 & 0x11) != 0)
  {
    v16 = 0;
    if ((v15 & 0x8000) != 0)
      goto LABEL_18;
LABEL_16:
    v17 = v15 >> 5;
    goto LABEL_19;
  }
  if ((v15 & 2) != 0)
  {
    v16 = (const UChar *)this + 17;
    if ((v15 & 0x8000) == 0)
      goto LABEL_16;
  }
  else
  {
    v16 = (const UChar *)this[6];
    if ((v15 & 0x8000) == 0)
      goto LABEL_16;
  }
LABEL_18:
  v17 = *((_DWORD *)this + 9);
LABEL_19:
  this[19] = usearch_open(v13, v14, v16, v17, a4[5], (uint64_t)a5, (const icu::Locale *)a6);
  uprv_free(this[1]);
  this[1] = 0;
  if (*(int *)a6 <= 0)
    this[1] = *(void **)this[19];
  return this;
}

void **icu::StringSearch::StringSearch(void **this, UChar **a2, icu::CharacterIterator *a3, icu::RuleBasedCollator *a4, icu::BreakIterator *a5, UErrorCode *a6)
{
  icu::SearchIterator *v11;
  unsigned int v13;
  const UChar *v14;
  int32_t v15;
  unsigned int v16;
  const UChar *v17;
  int32_t v18;

  v11 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, a3, a5);
  *(_QWORD *)v11 = off_1E22669F0;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v11 + 88), a2);
  if (*(int *)a6 >= 1)
    goto LABEL_2;
  if (!a4)
  {
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_2:
    this[19] = 0;
    return this;
  }
  v13 = *((unsigned __int16 *)this + 48);
  if ((v13 & 0x11) != 0)
  {
    v14 = 0;
    if ((v13 & 0x8000) != 0)
      goto LABEL_13;
LABEL_11:
    v15 = v13 >> 5;
    goto LABEL_14;
  }
  if ((v13 & 2) != 0)
  {
    v14 = (const UChar *)this + 49;
    if ((v13 & 0x8000) == 0)
      goto LABEL_11;
  }
  else
  {
    v14 = (const UChar *)this[14];
    if ((v13 & 0x8000) == 0)
      goto LABEL_11;
  }
LABEL_13:
  v15 = *((_DWORD *)this + 25);
LABEL_14:
  v16 = *((unsigned __int16 *)this + 16);
  if ((v16 & 0x11) != 0)
  {
    v17 = 0;
    if ((v16 & 0x8000) != 0)
      goto LABEL_21;
LABEL_19:
    v18 = v16 >> 5;
    goto LABEL_22;
  }
  if ((v16 & 2) != 0)
  {
    v17 = (const UChar *)this + 17;
    if ((v16 & 0x8000) == 0)
      goto LABEL_19;
  }
  else
  {
    v17 = (const UChar *)this[6];
    if ((v16 & 0x8000) == 0)
      goto LABEL_19;
  }
LABEL_21:
  v18 = *((_DWORD *)this + 9);
LABEL_22:
  this[19] = usearch_openFromCollator(v14, v15, v17, v18, a4, (uint64_t)a5, (int *)a6);
  uprv_free(this[1]);
  this[1] = 0;
  if (*(int *)a6 <= 0)
    this[1] = *(void **)this[19];
  return this;
}

void **icu::StringSearch::StringSearch(void **this, const icu::StringSearch *a2)
{
  icu::SearchIterator *v4;
  uint64_t v5;
  unsigned int v6;
  const UChar *v7;
  int32_t v8;
  unsigned int v9;
  const UChar *v10;
  int32_t v11;
  void **v12;
  int v14;

  v4 = icu::SearchIterator::SearchIterator((icu::SearchIterator *)this, (UChar **)a2 + 3, *((icu::BreakIterator **)a2 + 2));
  *(_QWORD *)v4 = off_1E22669F0;
  icu::UnicodeString::UnicodeString((icu::SearchIterator *)((char *)v4 + 88), (UChar **)a2 + 11);
  v14 = 0;
  uprv_free(this[1]);
  this[1] = 0;
  v5 = *((_QWORD *)a2 + 19);
  if (!v5)
  {
    this[19] = 0;
    return this;
  }
  v6 = *((unsigned __int16 *)this + 48);
  if ((v6 & 0x11) != 0)
  {
    v7 = 0;
    if ((v6 & 0x8000) != 0)
      goto LABEL_10;
LABEL_8:
    v8 = v6 >> 5;
    goto LABEL_11;
  }
  if ((v6 & 2) != 0)
  {
    v7 = (const UChar *)this + 49;
    if ((v6 & 0x8000) == 0)
      goto LABEL_8;
  }
  else
  {
    v7 = (const UChar *)this[14];
    if ((v6 & 0x8000) == 0)
      goto LABEL_8;
  }
LABEL_10:
  v8 = *((_DWORD *)this + 25);
LABEL_11:
  v9 = *((unsigned __int16 *)this + 16);
  if ((v9 & 0x11) != 0)
  {
    v10 = 0;
    if ((v9 & 0x8000) != 0)
      goto LABEL_18;
LABEL_16:
    v11 = v9 >> 5;
    goto LABEL_19;
  }
  if ((v9 & 2) != 0)
  {
    v10 = (const UChar *)this + 17;
    if ((v9 & 0x8000) == 0)
      goto LABEL_16;
  }
  else
  {
    v10 = (const UChar *)this[6];
    if ((v9 & 0x8000) == 0)
      goto LABEL_16;
  }
LABEL_18:
  v11 = *((_DWORD *)this + 9);
LABEL_19:
  v12 = (void **)usearch_openFromCollator(v7, v8, v10, v11, *(icu::RuleBasedCollator **)(v5 + 3128), *((_QWORD *)a2 + 2), &v14);
  this[19] = v12;
  if (v14 <= 0)
    this[1] = *v12;
  return this;
}

void icu::StringSearch::~StringSearch(icu::StringSearch *this@<X0>, void *a2@<X8>)
{
  char *v3;

  v3 = (char *)*((_QWORD *)this + 19);
  if (v3)
  {
    usearch_close(v3);
    *((_QWORD *)this + 1) = 0;
  }
  icu::UnicodeString::~UnicodeString(a2, (icu::StringSearch *)((char *)this + 88));
  icu::SearchIterator::~SearchIterator(this);
}

{
  void *v2;

  icu::StringSearch::~StringSearch(this, a2);
  icu::UMemory::operator delete(v2);
}

void **icu::StringSearch::clone@<X0>(icu::StringSearch *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void **result;

  result = (void **)icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result)
    return icu::StringSearch::StringSearch(result, this);
  return result;
}

uint64_t icu::StringSearch::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  const UChar *v5;
  int32_t v6;
  unsigned int v7;
  const UChar *v8;
  int32_t v9;
  _QWORD *v10;
  int v12;

  if (a1 == a2)
    return a1;
  v12 = 0;
  icu::UnicodeString::operator=((UChar **)(a1 + 24), (UChar **)(a2 + 24));
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  icu::UnicodeString::operator=((UChar **)(a1 + 88), (UChar **)(a2 + 88));
  usearch_close(*(char **)(a1 + 152));
  v4 = *(unsigned __int16 *)(a1 + 96);
  if ((v4 & 0x11) != 0)
  {
    v5 = 0;
    if ((v4 & 0x8000) != 0)
      goto LABEL_9;
LABEL_7:
    v6 = v4 >> 5;
    goto LABEL_10;
  }
  if ((v4 & 2) != 0)
  {
    v5 = (const UChar *)(a1 + 98);
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
  }
  else
  {
    v5 = *(const UChar **)(a1 + 112);
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
  }
LABEL_9:
  v6 = *(_DWORD *)(a1 + 100);
LABEL_10:
  v7 = *(unsigned __int16 *)(a1 + 32);
  if ((v7 & 0x11) != 0)
  {
    v8 = 0;
    if ((v7 & 0x8000) != 0)
      goto LABEL_17;
LABEL_15:
    v9 = v7 >> 5;
    goto LABEL_18;
  }
  if ((v7 & 2) != 0)
  {
    v8 = (const UChar *)(a1 + 34);
    if ((v7 & 0x8000) == 0)
      goto LABEL_15;
  }
  else
  {
    v8 = *(const UChar **)(a1 + 48);
    if ((v7 & 0x8000) == 0)
      goto LABEL_15;
  }
LABEL_17:
  v9 = *(_DWORD *)(a1 + 36);
LABEL_18:
  v10 = usearch_openFromCollator(v5, v6, v8, v9, *(icu::RuleBasedCollator **)(*(_QWORD *)(a2 + 152) + 3128), 0, &v12);
  *(_QWORD *)(a1 + 152) = v10;
  if (v10)
    *(_QWORD *)(a1 + 8) = *v10;
  return a1;
}

uint64_t icu::StringSearch::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  uint64_t result;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;

  if (a1 == a2)
    return 1;
  v4 = icu::SearchIterator::operator==((_QWORD *)a1, a2);
  result = 0;
  if (v4 && *(void (***)(icu::StringSearch *__hidden))a2 == off_1E22669F0)
  {
    v6 = *(unsigned __int16 *)(a1 + 96);
    if ((v6 & 1) != 0)
    {
      if ((*(_WORD *)(a2 + 96) & 1) == 0)
        return 0;
      return *(_QWORD *)(*(_QWORD *)(a1 + 152) + 3128) == *(_QWORD *)(*(_QWORD *)(a2 + 152) + 3128);
    }
    if ((v6 & 0x8000) != 0)
      v7 = *(_DWORD *)(a1 + 100);
    else
      v7 = v6 >> 5;
    result = 0;
    v8 = *(unsigned __int16 *)(a2 + 96);
    if ((v8 & 0x8000u) == 0)
      v9 = v8 >> 5;
    else
      v9 = *(_DWORD *)(a2 + 100);
    if ((v8 & 1) == 0 && v7 == v9)
    {
      result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 88), (const icu::UnicodeString *)(a2 + 88), v7);
      if ((_DWORD)result)
        return *(_QWORD *)(*(_QWORD *)(a1 + 152) + 3128) == *(_QWORD *)(*(_QWORD *)(a2 + 152) + 3128);
    }
  }
  return result;
}

double icu::StringSearch::setOffset(uint64_t **this, uint64_t a2, UErrorCode *a3)
{
  return usearch_setOffset(this[19], a2, a3);
}

uint64_t icu::StringSearch::getOffset(icu::StringSearch *this)
{
  return usearch_getOffset(*((_QWORD **)this + 19));
}

uint64_t icu::StringSearch::setText(uint64_t this, UChar **a2, UErrorCode *a3)
{
  uint64_t v5;
  unsigned int v6;
  UChar *v7;
  int v8;
  int v9;
  int v10;

  if (*(int *)a3 <= 0)
  {
    v5 = this;
    icu::UnicodeString::operator=((UChar **)(this + 24), a2);
    v6 = *((unsigned __int16 *)a2 + 4);
    if ((v6 & 0x11) != 0)
    {
      v7 = 0;
    }
    else if ((v6 & 2) != 0)
    {
      v7 = (UChar *)a2 + 5;
    }
    else
    {
      v7 = a2[3];
    }
    v8 = (__int16)v6;
    v9 = v6 >> 5;
    if (v8 >= 0)
      v10 = v9;
    else
      v10 = *((_DWORD *)a2 + 3);
    return usearch_setText(*(_QWORD *)(v5 + 152), v7, v10, a3);
  }
  return this;
}

uint64_t icu::StringSearch::setText(uint64_t this, icu::CharacterIterator *a2, UErrorCode *a3)
{
  uint64_t v4;
  unsigned int v5;
  UChar *v6;
  int v7;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    (*(void (**)(icu::CharacterIterator *, uint64_t))(*(_QWORD *)a2 + 208))(a2, this + 24);
    v5 = *(unsigned __int16 *)(v4 + 32);
    if ((v5 & 0x11) != 0)
    {
      v6 = 0;
      if ((v5 & 0x8000) != 0)
        goto LABEL_9;
LABEL_7:
      v7 = v5 >> 5;
      return usearch_setText(*(_QWORD *)(v4 + 152), v6, v7, a3);
    }
    if ((v5 & 2) != 0)
    {
      v6 = (UChar *)(v4 + 34);
      if ((v5 & 0x8000) == 0)
        goto LABEL_7;
    }
    else
    {
      v6 = *(UChar **)(v4 + 48);
      if ((v5 & 0x8000) == 0)
        goto LABEL_7;
    }
LABEL_9:
    v7 = *(_DWORD *)(v4 + 36);
    return usearch_setText(*(_QWORD *)(v4 + 152), v6, v7, a3);
  }
  return this;
}

void (***icu::StringSearch::getCollator(icu::StringSearch *this))(icu::RuleBasedCollator *__hidden this)
{
  void (***result)(icu::RuleBasedCollator *__hidden);

  result = *(void (****)(icu::RuleBasedCollator *__hidden))(*((_QWORD *)this + 19) + 3128);
  if (!result || *result != off_1E2265E40)
    return 0;
  return result;
}

uint64_t icu::StringSearch::setCollator(uint64_t this, icu::RuleBasedCollator *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
    return usearch_setCollator(*(_QWORD *)(this + 152), a2, (int *)a3);
  return this;
}

uint64_t icu::StringSearch::setPattern(uint64_t this, UChar **a2, UErrorCode *a3)
{
  uint64_t v4;
  unsigned int v5;
  UChar *v6;
  int v7;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    icu::UnicodeString::operator=((UChar **)(this + 88), a2);
    v5 = *(unsigned __int16 *)(v4 + 96);
    if ((v5 & 0x11) != 0)
    {
      v6 = 0;
      if ((v5 & 0x8000) != 0)
        goto LABEL_9;
LABEL_7:
      v7 = v5 >> 5;
      return usearch_setPattern(*(_QWORD *)(v4 + 152), v6, v7, a3);
    }
    if ((v5 & 2) != 0)
    {
      v6 = (UChar *)(v4 + 98);
      if ((v5 & 0x8000) == 0)
        goto LABEL_7;
    }
    else
    {
      v6 = *(UChar **)(v4 + 112);
      if ((v5 & 0x8000) == 0)
        goto LABEL_7;
    }
LABEL_9:
    v7 = *(_DWORD *)(v4 + 100);
    return usearch_setPattern(*(_QWORD *)(v4 + 152), v6, v7, a3);
  }
  return this;
}

uint64_t icu::StringSearch::getPattern(icu::StringSearch *this)
{
  return (uint64_t)this + 88;
}

double icu::StringSearch::reset(icu::StringSearch *this)
{
  return usearch_reset(*((_QWORD *)this + 19));
}

void **icu::StringSearch::safeClone@<X0>(icu::StringSearch *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  void **result;
  uint64_t v5;
  icu::RuleBasedCollator *v6;
  uint64_t Offset;
  UErrorCode v8;

  v8 = U_ZERO_ERROR;
  result = (void **)icu::UMemory::operator new(a3, (icu::UMemory *)0xA0, a2);
  if (result)
  {
    v5 = (uint64_t)result;
    v6 = *(icu::RuleBasedCollator **)(*((_QWORD *)this + 19) + 3128);
    if (!v6 || *(void (***)(icu::RuleBasedCollator *__hidden))v6 != off_1E2265E40)
      v6 = 0;
    icu::StringSearch::StringSearch(result, (UChar **)this + 11, (UChar **)this + 3, v6, *((icu::BreakIterator **)this + 2), &v8);
    Offset = usearch_getOffset(*((_QWORD **)this + 19));
    usearch_setOffset(*(uint64_t **)(v5 + 152), Offset, &v8);
    icu::SearchIterator::setMatchStart(v5, *(_DWORD *)(**((_QWORD **)this + 19) + 32));
    icu::SearchIterator::setMatchLength(v5, *(_DWORD *)(**((_QWORD **)this + 19) + 36));
    if (v8 >= U_ILLEGAL_ARGUMENT_ERROR)
      return 0;
    else
      return (void **)v5;
  }
  return result;
}

uint64_t icu::StringSearch::handleNext(icu::StringSearch *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t Offset;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(int *)a3 > 0)
    return 0xFFFFFFFFLL;
  v6 = *((_QWORD *)this + 19);
  v7 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v6 + 20))
  {
    if (*(int *)(v7 + 36) <= 0)
      *(_DWORD *)(v7 + 32) = a2 - 1;
    ucol_setOffset(*(_QWORD *)(v6 + 3144), a2, a3);
    sub_18BDB81A4(*((uint64_t **)this + 19), a3);
    if (*(int *)a3 > 0)
      return 0xFFFFFFFFLL;
    v10 = *((_QWORD *)this + 1);
    v11 = *(unsigned int *)(v10 + 32);
    if ((_DWORD)v11 == -1)
      v11 = *(unsigned int *)(v10 + 8);
    ucol_setOffset(*(_QWORD *)(*((_QWORD *)this + 19) + 3144), v11, a3);
    return *(unsigned int *)(*((_QWORD *)this + 1) + 32);
  }
  else
  {
    v8 = *(_DWORD *)(v7 + 32);
    if (v8 == -1)
    {
      Offset = usearch_getOffset((_QWORD *)v6);
      v7 = *((_QWORD *)this + 1);
      v6 = *((_QWORD *)this + 19);
    }
    else
    {
      Offset = (v8 + 1);
    }
    *(_DWORD *)(v7 + 32) = Offset;
    *(_DWORD *)(v7 + 36) = 0;
    ucol_setOffset(*(_QWORD *)(v6 + 3144), Offset, a3);
    v12 = *((_QWORD *)this + 1);
    result = 0xFFFFFFFFLL;
    if (*(_DWORD *)(v12 + 32) == *(_DWORD *)(v12 + 8))
      *(_DWORD *)(v12 + 32) = -1;
  }
  return result;
}

uint64_t icu::StringSearch::handlePrev(icu::StringSearch *this, uint64_t a2, UErrorCode *a3)
{
  uint64_t v6;
  uint64_t v7;
  int Offset;
  uint64_t v9;
  uint64_t v10;

  if (*(int *)a3 > 0)
    return 0xFFFFFFFFLL;
  v6 = *((_QWORD *)this + 19);
  if (*(_DWORD *)(v6 + 20))
  {
    ucol_setOffset(*(_QWORD *)(v6 + 3144), a2, a3);
    sub_18BDB826C(*((_QWORD *)this + 19), a3);
    if (*(int *)a3 > 0)
      return 0xFFFFFFFFLL;
    goto LABEL_12;
  }
  v7 = *((_QWORD *)this + 1);
  Offset = *(_DWORD *)(v7 + 32);
  if (Offset == -1)
  {
    Offset = usearch_getOffset((_QWORD *)v6);
    v7 = *((_QWORD *)this + 1);
  }
  *(_DWORD *)(v7 + 32) = Offset;
  if (!Offset)
  {
    icu::SearchIterator::setMatchNotFound(this);
LABEL_12:
    v10 = *((_QWORD *)this + 1);
    return *(unsigned int *)(v10 + 32);
  }
  v9 = (Offset - 1);
  *(_DWORD *)(v7 + 32) = v9;
  ucol_setOffset(*(_QWORD *)(*((_QWORD *)this + 19) + 3144), v9, a3);
  v10 = *((_QWORD *)this + 1);
  *(_DWORD *)(v10 + 36) = 0;
  return *(unsigned int *)(v10 + 32);
}

void *icu::TaiwanCalendar::getStaticClassID(icu::TaiwanCalendar *this)
{
  return &unk_1EE009DF4;
}

void *sub_18BD8098C()
{
  return &unk_1EE009DF4;
}

icu::GregorianCalendar *sub_18BD80998(icu::GregorianCalendar *a1, char **a2, UErrorCode *a3)
{
  icu::GregorianCalendar *v5;
  double v6;

  v5 = icu::GregorianCalendar::GregorianCalendar(a1, a2, a3);
  *(_QWORD *)v5 = &off_1E2266A88;
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v6, a3);
  return a1;
}

void sub_18BD809E4(icu::GregorianCalendar *a1)
{
  void *v1;

  icu::GregorianCalendar::~GregorianCalendar(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD809F8(const icu::GregorianCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::GregorianCalendar *v4;
  _QWORD *v5;

  v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  if (v4)
  {
    icu::GregorianCalendar::GregorianCalendar(v4, a1);
    *v5 = &off_1E2266A88;
  }
}

const char *sub_18BD80A34()
{
  return "roc";
}

uint64_t sub_18BD80A40(_DWORD *a1)
{
  int v3;

  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19
    && icu::Calendar::newerField((uint64_t)a1, 0x13u, 0) == 19)
  {
    if ((int)a1[52] >= 1)
      return a1[22];
    return 1970;
  }
  if ((int)a1[33] < 1)
    goto LABEL_8;
  v3 = a1[3];
  if (v3)
  {
    if (v3 != 1)
      return 1970;
LABEL_8:
    if ((int)a1[34] < 1)
      return 1912;
    else
      return (a1[4] + 1911);
  }
  if ((int)a1[34] < 1)
    return 1911;
  else
    return (1912 - a1[4]);
}

double sub_18BD80B00(uint64_t a1, int a2, UErrorCode *a3)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  double result;

  icu::GregorianCalendar::handleComputeFields((_DWORD *)a1, a2, a3);
  v4 = *(_DWORD *)(a1 + 88);
  v5 = 1912 - v4;
  v6 = __OFSUB__(v4, 1911);
  v7 = v4 - 1911;
  if ((v7 < 0) ^ v6 | (v7 == 0))
    v8 = 0;
  else
    v8 = 1;
  if ((v7 < 0) ^ v6 | (v7 == 0))
    v7 = v5;
  *(_WORD *)(a1 + 108) = 257;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v7;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  return result;
}

uint64_t sub_18BD80B4C(uint64_t a1, int a2, unsigned int a3)
{
  if (a2)
    return icu::GregorianCalendar::handleGetLimit(a1, a2, a3);
  else
    return a3 > 1;
}

uint64_t sub_18BD80B60()
{
  return 1;
}

double sub_18BD80B68()
{
  unsigned int v0;

  v0 = atomic_load((unsigned int *)&unk_1ECD281B0);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD281B0))
  {
    sub_18BD80BB4();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD281B0);
  }
  return *(double *)&qword_1ECD26D68;
}

void sub_18BD80BB4()
{
  uint64_t *v0;
  icu::Calendar *v1;
  double v2;
  UErrorCode v3;
  char *v4[28];
  _BYTE v5[656];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = U_ZERO_ERROR;
  bzero(v5, 0x290uLL);
  icu::Locale::Locale(v0, (icu::Locale *)v4, "@calendar=roc", 0, 0, 0);
  sub_18BD80998((icu::GregorianCalendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v1);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v2, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    qword_1ECD26D68 = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_1ECD26D70 = icu::Calendar::get(v5, 1u, &v3);
  }
  icu::GregorianCalendar::~GregorianCalendar((icu::GregorianCalendar *)v5);
}

uint64_t sub_18BD80CA8()
{
  unsigned int v0;

  v0 = atomic_load((unsigned int *)&unk_1ECD281B0);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD281B0))
  {
    sub_18BD80BB4();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD281B0);
  }
  return dword_1ECD26D70;
}

uint64_t icu::TimeZone::loadRule(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  _OWORD v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memset(v9, 0, sizeof(v9));
  icu::UnicodeString::extract(a2, 0, 63, (char *)v9, 63);
  v7 = ures_getByKey(a1, "Rules", a3, a4);
  return ures_getByKey(v7, (const char *)v9, v7, a4);
}

uint64_t *icu::TimeZone::getUnknown(icu::TimeZone *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)&unk_1EE009F54);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1EE009F54))
  {
    sub_18BD80DF0();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1EE009F54);
  }
  return qword_1EE009DF8;
}

void *sub_18BD80DF0()
{
  void *v0;
  void *v1;
  void *result;
  const __int16 *v3;
  const __int16 *v4;
  UChar *v5[9];

  v5[8] = *(UChar **)MEMORY[0x1E0C80C00];
  sub_18BDA1768(0x13u, (uint64_t)sub_18BD815C0);
  v4 = L"GMT";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)qword_1EE009E98, 0, v5);
  icu::UnicodeString::~UnicodeString(v0, (icu::UnicodeString *)v5);
  v3 = L"Etc/Unknown";
  icu::UnicodeString::UnicodeString(v5, 1, &v3);
  icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)qword_1EE009DF8, 0, v5);
  result = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v5);
  byte_1EE009F5C = 1;
  return result;
}

uint64_t *icu::TimeZone::getGMT(icu::TimeZone *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)&unk_1EE009F54);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1EE009F54))
  {
    sub_18BD80DF0();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1EE009F54);
  }
  return qword_1EE009E98;
}

void *icu::TimeZone::getStaticClassID(icu::TimeZone *this)
{
  return &unk_1EE009F38;
}

uint64_t icu::TimeZone::TimeZone(uint64_t this)
{
  *(_QWORD *)this = off_1E2266C88;
  *(_QWORD *)(this + 8) = off_1E2256B38;
  *(_WORD *)(this + 16) = 2;
  return this;
}

icu::TimeZone *icu::TimeZone::TimeZone(icu::TimeZone *this, UChar **a2)
{
  *(_QWORD *)this = off_1E2266C88;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)this + 8), a2);
  return this;
}

{
  *(_QWORD *)this = off_1E2266C88;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)this + 8), a2 + 1);
  return this;
}

void icu::TimeZone::~TimeZone(icu::TimeZone *this)
{
  *(_QWORD *)this = off_1E2266C88;
  icu::UnicodeString::~UnicodeString((icu::TimeZone *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

uint64_t icu::TimeZone::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
  return a1;
}

BOOL icu::TimeZone::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
  {
    v5 = *(unsigned __int16 *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      return *(_WORD *)(a2 + 16) & 1;
    }
    else
    {
      if ((v5 & 0x8000) != 0)
        v6 = *(_DWORD *)(a1 + 20);
      else
        v6 = v5 >> 5;
      result = 0;
      v7 = *(unsigned __int16 *)(a2 + 16);
      if ((v7 & 0x8000u) == 0)
        v8 = v7 >> 5;
      else
        v8 = *(_DWORD *)(a2 + 20);
      if ((v7 & 1) == 0 && v6 == v8)
        return icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v6);
    }
  }
  return result;
}

void *icu::TimeZone::createTimeZone(UChar **this, const icu::UnicodeString *a2)
{
  void *result;
  const icu::UnicodeString *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;

  v9 = 0;
  result = sub_18BD83C70((uint64_t)this, &v9);
  if (!result)
  {
    result = icu::TimeZone::createCustomTimeZone(this, v4, v5, v6, v7, v8);
    if (!result)
    {
      icu::TimeZone::getUnknown(0);
      return (void *)(*(uint64_t (**)(void))(qword_1EE009DF8[0] + 96))();
    }
  }
  return result;
}

icu::SimpleTimeZone *icu::TimeZone::createCustomTimeZone(UChar **this, const icu::UnicodeString *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  icu::UnicodeString *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  icu::SimpleTimeZone *v13;
  void *v14;
  icu::SimpleTimeZone *v15;
  int v17[2];
  int v18[2];
  UChar *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v17 = 0;
  *(_QWORD *)v18 = 0;
  if (!icu::TimeZone::parseCustomID(this, (const icu::UnicodeString *)&v18[1], v18, &v17[1], v17, a6))
    return 0;
  v20 = 0u;
  v21 = 0u;
  v23 = 0;
  v22 = 0u;
  v19 = (UChar *)off_1E2256B38;
  LOWORD(v20) = 2;
  v8 = v17[1];
  v7 = v18[0];
  v9 = v17[0];
  v10 = v18[1];
  icu::TimeZone::formatCustomID((icu::TimeZone *)v18[0], v17[1], v17[0], v18[1] >> 31, (icu::UnicodeString *)&v19, v6);
  v13 = (icu::SimpleTimeZone *)icu::UMemory::operator new(v12, (icu::UMemory *)0xA0, v11);
  v15 = v13;
  if (v13)
    icu::SimpleTimeZone::SimpleTimeZone(v13, 1000 * v10 * (v9 + 60 * (v8 + 60 * v7)), &v19);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  return v15;
}

uint64_t icu::TimeZone::detectHostTimeZone(icu::TimeZone *this)
{
  const char *v1;
  int v2;
  int v3;
  void *v4;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  void *v11;
  const __int16 *v15;
  int v16[16];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  uprv_tzset();
  uprv_tzname_clear_cache();
  v1 = uprv_tzname(0);
  v2 = uprv_timezone();
  memset(v17, 0, sizeof(v17));
  icu::UnicodeString::UnicodeString(v17, v1, 0xFFFFFFFFLL, 0);
  if ((SWORD4(v17[0]) & 0x8000u) == 0)
    v3 = WORD4(v17[0]) >> 5;
  else
    v3 = HIDWORD(v17[0]);
  if (!v3)
  {
    v15 = L"Etc/Unknown";
    icu::UnicodeString::UnicodeString(v16, 1, &v15);
    icu::UnicodeString::operator=((icu::UnicodeString *)v17, (icu::UnicodeString *)v16);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v16);
  }
  v5 = -1000 * v2;
  v16[0] = 0;
  v6 = sub_18BD83C70((uint64_t)v17, v16);
  if (!v6)
    goto LABEL_19;
  v9 = (uint64_t)v6;
  if ((SWORD4(v17[0]) & 0x8000u) == 0)
    v10 = WORD4(v17[0]) >> 5;
  else
    v10 = HIDWORD(v17[0]);
  if (v5 != (*(unsigned int (**)(uint64_t *))(*v6 + 64))(v6) && v10 >= 3 && v10 <= 4)
  {
    v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
LABEL_19:
    if (v3 && (v6 = icu::UMemory::operator new(v8, (icu::UMemory *)0xA0, v7)) != 0)
    {
      v9 = (uint64_t)v6;
      icu::SimpleTimeZone::SimpleTimeZone((icu::SimpleTimeZone *)v6, v5, (UChar **)v17);
    }
    else
    {
      icu::TimeZone::getUnknown((icu::TimeZone *)v6);
      v9 = (*(uint64_t (**)(uint64_t *))(qword_1EE009DF8[0] + 96))(qword_1EE009DF8);
    }
  }
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  return v9;
}

uint64_t icu::TimeZone::createDefault(icu::TimeZone *this)
{
  unsigned int v1;
  icu::TimeZone *v2;
  uint64_t v3;

  v1 = atomic_load((unsigned int *)&unk_1ECD281C0);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD281C0))
  {
    sub_18BDA1768(0x13u, (uint64_t)sub_18BD815C0);
    umtx_lock((icu::UMutex *)&unk_1ECD281C8);
    if (!qword_1ECD281B8)
      qword_1ECD281B8 = icu::TimeZone::detectHostTimeZone(v2);
    umtx_unlock((std::mutex **)&unk_1ECD281C8);
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD281C0);
  }
  umtx_lock((icu::UMutex *)&unk_1ECD281C8);
  if (qword_1ECD281B8)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1ECD281B8 + 96))(qword_1ECD281B8);
  else
    v3 = 0;
  umtx_unlock((std::mutex **)&unk_1ECD281C8);
  return v3;
}

void *icu::TimeZone::forLocaleOrDefault(char **this, const icu::Locale *a2)
{
  icu::TimeZone *KeywordValue;
  uint64_t v4;
  const icu::UnicodeString *v5;
  void *TimeZone;
  void *v7;
  UErrorCode v9;
  UChar *v10[8];
  char v11[16];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)v11 = 0u;
  v12 = 0u;
  v9 = U_ZERO_ERROR;
  KeywordValue = (icu::TimeZone *)icu::Locale::getKeywordValue(this, "timezone", v11, 96, &v9);
  if (v9 != U_STRING_NOT_TERMINATED_WARNING && v9 <= U_ZERO_ERROR)
    v4 = KeywordValue;
  else
    v4 = 0;
  if ((int)v4 < 1)
    return (void *)icu::TimeZone::createDefault(KeywordValue);
  icu::UnicodeString::UnicodeString(v10, v11, v4, 0);
  TimeZone = icu::TimeZone::createTimeZone(v10, v5);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v10);
  return TimeZone;
}

void icu::TimeZone::adoptDefault(icu::TimeZone *this, icu::TimeZone *a2)
{
  uint64_t v3;

  if (this)
  {
    umtx_lock((icu::UMutex *)&unk_1ECD281C8);
    v3 = qword_1ECD281B8;
    qword_1ECD281B8 = (uint64_t)this;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    umtx_unlock((std::mutex **)&unk_1ECD281C8);
    sub_18BDA1768(0x13u, (uint64_t)sub_18BD815C0);
  }
}

uint64_t sub_18BD815C0()
{
  if (qword_1ECD281B8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ECD281B8 + 8))(qword_1ECD281B8);
  qword_1ECD281B8 = 0;
  atomic_store(0, (unsigned int *)&unk_1ECD281C0);
  if (byte_1EE009F5C == 1)
  {
    (*(void (**)(void))qword_1EE009E98)();
    (*(void (**)(void))qword_1EE009DF8)();
    byte_1EE009F5C = 0;
    atomic_store(0, (unsigned int *)&unk_1EE009F54);
  }
  qword_1EE009F41 = 0;
  unk_1EE009F49 = 0;
  atomic_store(0, &dword_1EE009FA8);
  dword_1EE009F60 = 0;
  uprv_free((void *)qword_1EE009F68);
  qword_1EE009F68 = 0;
  atomic_store(0, (unsigned int *)&unk_1EE009F90);
  dword_1EE009F70 = 0;
  uprv_free((void *)qword_1EE009F78);
  qword_1EE009F78 = 0;
  atomic_store(0, (unsigned int *)&unk_1EE009F98);
  dword_1EE009F80 = 0;
  uprv_free((void *)qword_1EE009F88);
  qword_1EE009F88 = 0;
  atomic_store(0, (unsigned int *)&unk_1EE009FA0);
  return 1;
}

void icu::TimeZone::setDefault(icu::TimeZone *this, const icu::TimeZone *a2)
{
  icu::TimeZone *v2;
  icu::TimeZone *v3;

  v2 = (icu::TimeZone *)(*(uint64_t (**)(icu::TimeZone *, const icu::TimeZone *))(*(_QWORD *)this + 96))(this, a2);
  icu::TimeZone::adoptDefault(v2, v3);
}

uint64_t icu::TimeZone::getOffset(uint64_t this, double a2, int a3, int *a4, int *a5, UErrorCode *a6)
{
  uint64_t v10;
  int v11;
  char v12;
  double v13;
  double v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  if (*(int *)a6 <= 0)
  {
    v10 = this;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 64))(this);
    v12 = 0;
    *a4 = v11;
    v13 = (double)v11;
    if (a3)
      v13 = -0.0;
    v14 = v13 + a2;
    while (1)
    {
      v20 = 0;
      v18 = 0;
      v19 = 0;
      v15 = sub_18BCE8294(86400000, &v18, v14);
      v21 = 0;
      sub_18BCE8448(&v20, (_DWORD *)&v19 + 1, &v19, (int *)&v18 + 1, &v21, (double)v15);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, 1);
      v16 = *a4;
      v17 = this - *a4;
      *a5 = v17;
      if ((a3 == 0) | v12 & 1 || (_DWORD)this == v16)
        break;
      v14 = v14 - (double)v17;
      v12 = 1;
    }
  }
  return this;
}

void sub_18BD81884(icu::StringEnumeration *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E2266D08;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
    uprv_free(v2);
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18BD818C0(icu::StringEnumeration *a1)
{
  void *v1;

  sub_18BD81884(a1);
  icu::UMemory::operator delete(v1);
}

void *sub_18BD818D4()
{
  return &unk_1EE009F40;
}

uint64_t sub_18BD818E4(int a1, unsigned __int8 *a2, unint64_t a3, int *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  signed int v18;
  const UChar *StringByIndex;
  UErrorCode *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  int v28;
  BOOL v29;
  void *v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  _QWORD *v34;
  int v35;
  unsigned int v36;
  int v37;
  const UChar *v38;
  int v39;
  void (**v40)(icu::UnicodeString *__hidden);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  v37 = 0;
  v7 = sub_18BD83D90(a1, &v37, a4);
  if (*a4 > 0)
    return 0;
  v10 = v7;
  v11 = (unint64_t)a2 | a3;
  if (!((unint64_t)a2 | a3))
    goto LABEL_38;
  result = (uint64_t)uprv_malloc(0x20uLL);
  if (!result)
  {
LABEL_41:
    *a4 = 7;
    return result;
  }
  v12 = (void *)result;
  v13 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a4);
  v14 = ures_getByKey(v13, "Names", v13, a4);
  v15 = (_QWORD *)v14;
  if (v37 < 1)
  {
    LODWORD(v17) = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v35 = 8;
    v34 = (_QWORD *)v14;
    while (1)
    {
      v18 = *(_DWORD *)(v10 + 4 * v16);
      v44 = 0;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      v40 = off_1E2256B38;
      LOWORD(v41) = 2;
      v39 = 0;
      v36 = v18;
      StringByIndex = ures_getStringByIndex((uint64_t)v15, v18, &v39, a4);
      if (*a4 <= 0)
      {
        v38 = StringByIndex;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v40, 1, &v38, v39);
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v40);
      }
      v21 = *a4;
      if ((int)v21 > 0)
        break;
      if (a2)
      {
        LODWORD(v38) = 0;
        icu::TimeZone::getRegion((icu::TimeZone *)&v40, (const icu::UnicodeString *)&v38, (char *)4, a4, v20);
        v21 = *a4;
        if ((int)v21 >= 1)
          break;
        if (uprv_stricmp(&v38, a2))
          goto LABEL_24;
      }
      if (!a3)
        goto LABEL_20;
      v23 = sub_18BD83C70((uint64_t)&v40, a4);
      v21 = *a4;
      if ((int)v21 >= 1)
        break;
      v24 = v23;
      v25 = v17;
      v26 = v10;
      v27 = v12;
      v28 = (*(uint64_t (**)(uint64_t *))(*v23 + 64))(v23);
      (*(void (**)(uint64_t *))(*v24 + 8))(v24);
      v22 = (void *)*(unsigned int *)a3;
      v29 = v28 == (_DWORD)v22;
      v12 = v27;
      v10 = v26;
      v17 = v25;
      v15 = v34;
      if (!v29)
      {
LABEL_24:
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v40);
      }
      else
      {
LABEL_20:
        if (v35 <= (int)v17)
        {
          v35 += 8;
          v30 = uprv_realloc(v12, 4 * v35);
          if (!v30)
          {
            v21 = 7;
            *a4 = 7;
            break;
          }
          v12 = v30;
        }
        *((_DWORD *)v12 + (int)v17) = v36;
        icu::UnicodeString::~UnicodeString((void *)v36, (icu::UnicodeString *)&v40);
        v17 = (v17 + 1);
      }
      if (++v16 >= v37)
        goto LABEL_30;
    }
    icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v40);
  }
LABEL_30:
  if (*a4 >= 1)
  {
    uprv_free(v12);
    v12 = 0;
  }
  ures_close(v15);
  v11 = *a4;
  if ((int)v11 <= 0)
  {
    if (v12)
    {
      v31 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x90, v8);
      if (v31)
      {
        result = icu::StringEnumeration::StringEnumeration((uint64_t)v31);
        *(_QWORD *)result = &off_1E2266D08;
        *(_QWORD *)(result + 120) = v12;
        *(_QWORD *)(result + 128) = v12;
        *(_DWORD *)(result + 136) = v17;
        *(_DWORD *)(result + 140) = 0;
        return result;
      }
LABEL_40:
      result = 0;
      goto LABEL_41;
    }
LABEL_38:
    v32 = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x90, v8);
    if (v32)
    {
      v33 = v37;
      result = icu::StringEnumeration::StringEnumeration((uint64_t)v32);
      *(_QWORD *)result = &off_1E2266D08;
      *(_QWORD *)(result + 120) = v10;
      *(_QWORD *)(result + 128) = 0;
      *(_DWORD *)(result + 136) = v33;
      *(_DWORD *)(result + 140) = 0;
      return result;
    }
    goto LABEL_40;
  }
  if (v12)
    uprv_free(v12);
  return 0;
}

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this, UErrorCode *a2)
{
  return sub_18BD818E4(0, 0, 0, (int *)this);
}

uint64_t icu::TimeZone::createEnumerationForRawOffset(icu::TimeZone *this, int *a2, UErrorCode *a3)
{
  int v4;

  v4 = (int)this;
  return sub_18BD818E4(0, 0, (unint64_t)&v4, a2);
}

uint64_t icu::TimeZone::createEnumerationForRegion(icu::TimeZone *this, char *a2, UErrorCode *a3)
{
  return sub_18BD818E4(0, (unsigned __int8 *)this, 0, (int *)a2);
}

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this)
{
  int v2;

  v2 = 0;
  return sub_18BD818E4(0, 0, 0, &v2);
}

{
  int v2;
  int v3;

  v2 = 0;
  v3 = (int)this;
  return sub_18BD818E4(0, 0, (unint64_t)&v3, &v2);
}

uint64_t icu::TimeZone::createEnumeration(icu::TimeZone *this, const char *a2)
{
  int v3;

  v3 = 0;
  return sub_18BD818E4(0, (unsigned __int8 *)this, 0, &v3);
}

uint64_t icu::TimeZone::countEquivalentIDs(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD v7[8];
  uint64_t v8;
  char v9[128];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v9);
  v3 = (_QWORD *)sub_18BD81E3C((uint64_t)this, v9, (int *)&v6);
  if ((int)v6 <= 0)
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v7);
    ures_getByKey((uint64_t)v9, "links", (uint64_t)v7, (int *)&v6);
    ures_getIntVector((uint64_t)v7, (int *)&v6 + 1, (int *)&v6);
    icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v7);
  }
  ures_close(v3);
  v4 = HIDWORD(v6);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v9);
  return v4;
}

uint64_t sub_18BD81E3C(uint64_t a1, char *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  signed int v8;
  signed int v10;
  signed int Int;
  _QWORD *v12;

  v6 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a3);
  v7 = (_QWORD *)ures_getByKey(v6, "Names", 0, a3);
  v8 = sub_18BD821E4((uint64_t)v7, a1, a3);
  if (v8 == -1 && *a3 <= 0)
  {
    *a3 = 2;
  }
  else
  {
    v10 = v8;
    v7 = (_QWORD *)ures_getByKey(v6, "Zones", (uint64_t)v7, a3);
    ures_getByIndex((uint64_t)v7, v10, a2, a3);
  }
  ures_close(v7);
  if (ures_getType((uint64_t)a2) == 7)
  {
    Int = ures_getInt((uint64_t)a2, a3);
    v12 = (_QWORD *)ures_getByKey(v6, "Zones", 0, a3);
    ures_getByIndex((uint64_t)v12, Int, a2, a3);
    ures_close(v12);
  }
  return v6;
}

void icu::TimeZone::getEquivalentID(icu::TimeZone *this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  _QWORD *v6;
  int *IntVector;
  signed int v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  const UChar *StringByIndex;
  int v13;
  int v14;
  _OWORD v15[8];
  uint64_t v16;
  char v17[128];
  uint64_t v18;
  uint64_t v19;

  v3 = (int)a2;
  v19 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = off_1E2256B38;
  *(_WORD *)(a3 + 8) = 2;
  v14 = 0;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v17);
  v6 = (_QWORD *)sub_18BD81E3C((uint64_t)this, v17, &v14);
  if (v14 <= 0)
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v15);
    v13 = 0;
    ures_getByKey((uint64_t)v17, "links", (uint64_t)v15, &v14);
    IntVector = ures_getIntVector((uint64_t)v15, &v13, &v14);
    if (v3 < 0 || v14 > 0 || v13 <= v3)
    {
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v15);
    }
    else
    {
      v8 = IntVector[v3];
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v15);
      if ((v8 & 0x80000000) == 0)
      {
        v9 = ures_getByKey((uint64_t)v6, "Names", 0, &v14);
        v10 = (_QWORD *)v9;
        if (v14 <= 0)
        {
          v13 = 0;
          StringByIndex = ures_getStringByIndex(v9, v8, &v13, &v14);
          icu::UnicodeString::UnicodeString(v15, 1, &StringByIndex);
          icu::UnicodeString::fastCopyFrom((UChar **)a3, (UChar **)v15);
          icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
        }
        ures_close(v10);
      }
    }
  }
  ures_close(v6);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v17);
}

const UChar *icu::TimeZone::findID(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  signed int v5;
  const UChar *StringByIndex;
  const UChar *v7;
  int v9;

  v9 = 0;
  v3 = (_QWORD *)ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)&v9);
  v4 = (_QWORD *)ures_getByKey((uint64_t)v3, "Names", 0, &v9);
  v5 = sub_18BD821E4((uint64_t)v4, (uint64_t)this, &v9);
  StringByIndex = ures_getStringByIndex((uint64_t)v4, v5, 0, &v9);
  if (v9 >= 1)
    v7 = 0;
  else
    v7 = StringByIndex;
  ures_close(v4);
  ures_close(v3);
  return v7;
}

uint64_t sub_18BD821E4(uint64_t a1, uint64_t a2, int *a3)
{
  int Size;
  unint64_t v7;
  int v10;
  int v11;
  uint64_t v12;
  const UChar *StringByIndex;
  unsigned int v14;
  int v15;
  int32_t v16;
  int32_t v17;
  int v18;
  char *v19;
  int v20;
  const UChar *v21;
  int v22;
  void (**v23)(icu::UnicodeString *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v27 = 0;
  v26 = 0u;
  v25 = 0u;
  v23 = off_1E2256B38;
  LOWORD(v24) = 2;
  v22 = 0;
  Size = ures_getSize(a1);
  v7 = *a3;
  if ((int)v7 <= 0 && Size >= 1)
  {
    v10 = Size;
    v11 = 0;
    LODWORD(v12) = 0x7FFFFFFF;
    while (1)
    {
      LODWORD(v7) = v10 + v11;
      v7 = v10 + v11 < 0 != __OFADD__(v10, v11) ? (v7 + 1) : v7;
      if ((_DWORD)v12 == (int)v7 >> 1)
        break;
      v12 = ((int)v7 >> 1);
      StringByIndex = ures_getStringByIndex(a1, (int)v7 >> 1, &v22, a3);
      v7 = *a3;
      if ((int)v7 > 0)
        break;
      v21 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v23, 1, &v21, v22);
      v14 = *(unsigned __int16 *)(a2 + 8);
      v7 = (unsigned __int16)v24;
      if ((v24 & 1) != 0)
      {
        v20 = (v14 & 1) == 0;
      }
      else
      {
        v15 = (__int16)v14;
        v16 = v14 >> 5;
        if (v15 >= 0)
          v17 = v16;
        else
          v17 = *(_DWORD *)(a2 + 12);
        if ((v24 & 0x8000u) == 0)
          v18 = (unsigned __int16)v24 >> 5;
        else
          v18 = DWORD1(v24);
        if ((v24 & 2) != 0)
          v19 = (char *)&v24 + 2;
        else
          v19 = (char *)v25;
        v20 = icu::UnicodeString::doCompare(a2, 0, v17, (uint64_t)v19, v18 & (v18 >> 31), v18 & ~(v18 >> 31));
      }
      if (v20 < 0)
        v10 = v12;
      else
        v11 = v12;
      if (!v20)
        goto LABEL_7;
    }
  }
  v12 = 0xFFFFFFFFLL;
LABEL_7:
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)&v23);
  return v12;
}

const UChar *icu::TimeZone::dereferOlsonLink(icu::TimeZone *this, const icu::UnicodeString *a2)
{
  char *v3;
  _QWORD *v4;
  signed int v5;
  const UChar *StringByIndex;
  signed int Int;
  const UChar *v8;
  int v10;

  v10 = 0;
  v3 = (char *)ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)&v10);
  v4 = (_QWORD *)ures_getByKey((uint64_t)v3, "Names", 0, &v10);
  v5 = sub_18BD821E4((uint64_t)v4, (uint64_t)this, &v10);
  StringByIndex = ures_getStringByIndex((uint64_t)v4, v5, 0, &v10);
  ures_getByKey((uint64_t)v3, "Zones", (uint64_t)v3, &v10);
  ures_getByIndex((uint64_t)v3, v5, v3, &v10);
  if (v10 <= 0 && ures_getType((uint64_t)v3) == 7)
  {
    Int = ures_getInt((uint64_t)v3, &v10);
    v8 = ures_getStringByIndex((uint64_t)v4, Int, 0, &v10);
    if (v10 <= 0)
      StringByIndex = v8;
  }
  ures_close(v4);
  ures_close(v3);
  return StringByIndex;
}

const UChar *icu::TimeZone::getRegion(icu::TimeZone *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  int v4;

  v4 = 0;
  return icu::TimeZone::getRegion(this, (const icu::UnicodeString *)&v4, a3);
}

{
  const UChar *v3;
  _QWORD *v6;
  _QWORD *v7;
  const UChar *StringByIndex;

  if (*(int *)a2 > 0)
    return 0;
  v6 = (_QWORD *)ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a2);
  v7 = (_QWORD *)ures_getByKey((uint64_t)v6, "Names", 0, (int *)a2);
  LODWORD(this) = sub_18BD821E4((uint64_t)v7, (uint64_t)this, (int *)a2);
  ures_getByKey((uint64_t)v6, "Regions", (uint64_t)v7, (int *)a2);
  StringByIndex = ures_getStringByIndex((uint64_t)v7, (signed int)this, 0, (int *)a2);
  if (*(int *)a2 <= 0)
    v3 = StringByIndex;
  else
    v3 = 0;
  ures_close(v7);
  ures_close(v6);
  return v3;
}

uint64_t icu::TimeZone::getRegion(icu::TimeZone *this, const icu::UnicodeString *a2, char *a3, int *a4, UErrorCode *a5)
{
  uint64_t v5;
  int v7;
  unsigned int v10;
  int v11;
  int32_t v12;
  int32_t v13;
  UErrorCode *v14;
  const UChar *Region;
  const UChar *v16;
  int32_t v17;
  int v18;
  int v20;

  v5 = 0;
  *(_BYTE *)a2 = 0;
  if (*a4 <= 0)
  {
    v7 = (int)a3;
    v10 = *((unsigned __int16 *)this + 4);
    v11 = (__int16)v10;
    v12 = v10 >> 5;
    if (v11 >= 0)
      v13 = v12;
    else
      v13 = *((_DWORD *)this + 3);
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v13, (uint64_t)L"Etc/Unknown", 0, 11)
      && (v20 = 0, (Region = icu::TimeZone::getRegion(this, (const icu::UnicodeString *)&v20, v14)) != 0))
    {
      v16 = Region;
      v5 = u_strlen(Region);
      v17 = uprv_min(v5, v7);
      u_UCharsToChars(v16, (char *)a2, v17);
      if ((int)v5 <= v7)
        return u_terminateChars((uint64_t)a2, v7, v5, a4);
      v18 = 15;
    }
    else
    {
      v5 = 0;
      v18 = 1;
    }
    *a4 = v18;
  }
  return v5;
}

uint64_t icu::TimeZone::getDisplayName(icu::TimeZone *this, icu::UnicodeString *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::TimeZone::getDisplayName(this, 0, 2u, (char **)Default, (uint64_t)a2);
}

uint64_t icu::TimeZone::getDisplayName(icu::Calendar *a1, int a2, unsigned int a3, char **a4, uint64_t a5)
{
  UErrorCode *v10;
  double v11;
  double v12;
  uint64_t *v13;
  icu::TimeZoneFormat *v14;
  UChar **Instance;
  __int16 v16;
  uint64_t v17;
  uint64_t *v18;
  icu::TimeZoneFormat *v19;
  UErrorCode v20;
  __int16 v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  const icu::TimeZone *v28;
  const UChar *CanonicalCLDRID;
  uint64_t *v30;
  UChar **v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int16 v36;
  int v38;
  UErrorCode v39;
  _OWORD v40[4];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v39 = U_ZERO_ERROR;
  icu::Calendar::getNow(a1);
  v12 = v11;
  v38 = 0;
  if (a3 <= 8)
  {
    v13 = (uint64_t *)(1 << a3);
    if (((unsigned __int16)v13 & 0x118) != 0)
    {
      v14 = icu::TimeZoneFormat::createInstance(a4, &v39, v13);
      Instance = (UChar **)v14;
      if (v39 > U_ZERO_ERROR)
      {
LABEL_4:
        if ((*(_WORD *)(a5 + 8) & 1) != 0)
          v16 = 2;
        else
          v16 = *(_WORD *)(a5 + 8) & 0x1F;
        *(_WORD *)(a5 + 8) = v16;
        if (Instance)
          (*((void (**)(UChar **))*Instance + 1))(Instance);
        return a5;
      }
      switch(a3)
      {
        case 3u:
          v17 = 2;
          goto LABEL_25;
        case 8u:
          v17 = 0;
          goto LABEL_25;
        case 4u:
          v17 = 1;
LABEL_25:
          (*(void (**)(icu::TimeZoneFormat *, uint64_t, icu::Calendar *, uint64_t, int *, double))(*(_QWORD *)v14 + 64))(v14, v17, a1, a5, &v38, v12);
          if (a2 && v38 == 1)
          {
            v25 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 64))(a1);
            v26 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 104))(a1) + v25;
          }
          else
          {
            if (a2 || v38 != 2)
              goto LABEL_62;
            v26 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 64))(a1);
          }
          if (a3 == 3)
            icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(Instance, v26, (UChar **)a5, &v39);
          else
            icu::TimeZoneFormat::formatOffsetLocalizedGMT(Instance, v26, (UChar **)a5, &v39);
LABEL_62:
          (*((void (**)(UChar **))*Instance + 1))(Instance);
LABEL_63:
          if (v39 >= U_ILLEGAL_ARGUMENT_ERROR)
          {
            if ((*(_WORD *)(a5 + 8) & 1) != 0)
              v36 = 2;
            else
              v36 = *(_WORD *)(a5 + 8) & 0x1F;
            *(_WORD *)(a5 + 8) = v36;
          }
          return a5;
      }
LABEL_69:
      abort();
    }
  }
  v18 = (uint64_t *)(a3 - 5);
  if (v18 > 1)
  {
    if (a3 == 1 || a3 == 7)
    {
      v22 = a2 == 0;
      v23 = 32;
      v24 = 16;
    }
    else
    {
      if (a3 != 2)
        goto LABEL_69;
      v22 = a2 == 0;
      v23 = 4;
      v24 = 2;
    }
    if (v22)
      v27 = v24;
    else
      v27 = v23;
    Instance = (UChar **)icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a4, (const icu::Locale *)&v39, v10);
    if (v39 > U_ZERO_ERROR)
      goto LABEL_4;
    memset(v40, 0, sizeof(v40));
    CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a1, v28);
    icu::UnicodeString::UnicodeString((uint64_t)v40, (uint64_t)CanonicalCLDRID);
    (*((void (**)(UChar **, _OWORD *, uint64_t, uint64_t, double))*Instance + 12))(Instance, v40, v27, a5, v12);
    v30 = (uint64_t *)*(unsigned __int16 *)(a5 + 8);
    if (v30 <= 0x1F)
    {
      v31 = (UChar **)icu::TimeZoneFormat::createInstance(a4, &v39, v30);
      if (a2 && (*(unsigned int (**)(icu::Calendar *))(*(_QWORD *)a1 + 72))(a1))
      {
        v32 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 64))(a1);
        v33 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 104))(a1) + v32;
      }
      else
      {
        v33 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 64))(a1);
      }
      if (a3 == 2)
        icu::TimeZoneFormat::formatOffsetLocalizedGMT(v31, v33, (UChar **)a5, &v39);
      else
        icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(v31, v33, (UChar **)a5, &v39);
      if (v31)
        (*((void (**)(UChar **))*v31 + 1))(v31);
    }
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v40);
    goto LABEL_62;
  }
  v19 = icu::TimeZoneFormat::createInstance(a4, &v39, v18);
  v20 = v39;
  if (v39 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (a2 && (*(unsigned int (**)(icu::Calendar *))(*(_QWORD *)a1 + 72))(a1))
    {
      v34 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 64))(a1);
      v35 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 104))(a1) + v34;
    }
    else
    {
      v35 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)a1 + 64))(a1);
    }
    if (a3 == 5)
    {
      icu::TimeZoneFormat::formatOffsetISO8601Basic(v19, v35, 0, 0, 0, (icu::UnicodeString *)a5, &v39);
    }
    else
    {
      if (a3 != 6)
        goto LABEL_69;
      icu::TimeZoneFormat::formatOffsetLocalizedGMT((UChar **)v19, v35, (UChar **)a5, &v39);
    }
  }
  else
  {
    if ((*(_WORD *)(a5 + 8) & 1) != 0)
      v21 = 2;
    else
      v21 = *(_WORD *)(a5 + 8) & 0x1F;
    *(_WORD *)(a5 + 8) = v21;
  }
  if (v19)
    (*(void (**)(icu::TimeZoneFormat *))(*(_QWORD *)v19 + 8))(v19);
  if (v20 <= U_ZERO_ERROR)
    goto LABEL_63;
  return a5;
}

uint64_t icu::TimeZone::getDisplayName(icu::TimeZone *this, char **a2, icu::UnicodeString *a3)
{
  return icu::TimeZone::getDisplayName(this, 0, 2u, a2, (uint64_t)a3);
}

uint64_t icu::TimeZone::getDisplayName(icu::Locale *a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(a1);
  return icu::TimeZone::getDisplayName(a1, a2, a3, (char **)Default, a4);
}

uint64_t icu::TimeZone::getDSTSavings(icu::TimeZone *this)
{
  if ((*(unsigned int (**)(icu::TimeZone *))(*(_QWORD *)this + 72))(this))
    return 3600000;
  else
    return 0;
}

BOOL icu::TimeZone::parseCustomID(UChar **this, const icu::UnicodeString *a2, int *a3, int *a4, int *a5, int *a6)
{
  int v11;
  unint64_t v12;
  _BOOL4 v13;
  UErrorCode *v14;
  _BOOL8 v15;
  unsigned int v16;
  unsigned int v17;
  UChar *v18;
  int v19;
  icu::DecimalFormat *Instance;
  icu::DecimalFormat *v21;
  int v22;
  uint64_t v23;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  UChar *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  icu::TimeZone *v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  const __int16 *v45;
  int v46;
  void (**v47)(icu::ParsePosition *__hidden);
  unint64_t v48;
  _OWORD v49[14];
  _OWORD v50[4];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  memset(v50, 0, sizeof(v50));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v50, this);
  icu::Locale::Locale((icu::Locale *)v49, "", 0, 0, 0);
  icu::UnicodeString::toUpper((const UChar **)v50, (const icu::Locale *)v49);
  icu::Locale::~Locale((icu::Locale *)v49);
  LODWORD(v12) = *((unsigned __int16 *)this + 4);
  v11 = (__int16)v12;
  LODWORD(v12) = v12 >> 5;
  if (v11 >= 0)
    v12 = v12;
  else
    v12 = *((unsigned int *)this + 3);
  if ((int)v12 >= 4)
  {
    v13 = icu::UnicodeString::doEqualsSubstring((uint64_t)v50, 0, 3, (uint64_t)L"GMT", 0, 3);
    v45 = L"GMT";
    v12 = (unint64_t)&v45;
    if (v13)
    {
      v15 = 0;
      v47 = off_1E224A8B0;
      v48 = 0xFFFFFFFF00000003;
      *(_DWORD *)a2 = 1;
      *a3 = 0;
      *a4 = 0;
      *a5 = 0;
      v16 = *((unsigned __int16 *)this + 4);
      v17 = *((_DWORD *)this + 3);
      if ((v16 & 0x8000u) == 0)
        v17 = v16 >> 5;
      if (v17 < 4)
        goto LABEL_21;
      if ((v16 & 2) != 0)
        v18 = (UChar *)this + 5;
      else
        v18 = this[3];
      v19 = v18[3];
      if (v19 != 43)
      {
        if (v19 != 45)
        {
          v15 = 0;
          goto LABEL_21;
        }
        *(_DWORD *)a2 = -1;
      }
      LODWORD(v48) = 4;
      v46 = 0;
      Instance = icu::NumberFormat::createInstance((icu::NumberFormat *)&v46, v14);
      v15 = 0;
      if (v46 > 0)
      {
LABEL_21:
        icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v47);
        goto LABEL_22;
      }
      v21 = Instance;
      (*(void (**)(icu::DecimalFormat *, uint64_t))(*(_QWORD *)Instance + 184))(Instance, 1);
      v22 = v48;
      memset(v49, 0, 112);
      icu::Formattable::Formattable((icu::Formattable *)v49, -99999);
      (*(void (**)(icu::DecimalFormat *, UChar **, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)v21 + 160))(v21, this, v49, &v47);
      v23 = (int)v48;
      if ((_DWORD)v48 == v22)
        goto LABEL_17;
      v25 = DWORD2(v49[0]);
      *a3 = DWORD2(v49[0]);
      v26 = *((unsigned __int16 *)this + 4);
      v27 = v26 >> 5;
      if ((v26 & 0x8000u) != 0)
        v27 = *((_DWORD *)this + 3);
      v28 = v23 - v22;
      if ((int)v23 < v27)
      {
        if (v28 > 2 || v27 <= v23)
          goto LABEL_17;
        v29 = this[3];
        if ((v26 & 2) != 0)
          v29 = (UChar *)this + 5;
        if (v29[v23] != 58)
          goto LABEL_17;
        v30 = v23 + 1;
        LODWORD(v48) = v23 + 1;
        icu::Formattable::setLong((icu::Formattable *)v49, -99999);
        (*(void (**)(icu::DecimalFormat *, UChar **, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)v21 + 160))(v21, this, v49, &v47);
        v31 = (int)v48;
        if ((_DWORD)v48 - v30 != 2)
          goto LABEL_17;
        *a4 = DWORD2(v49[0]);
        v32 = *((unsigned __int16 *)this + 4);
        if ((__int16)this[1] < 0)
        {
          v33 = *((_DWORD *)this + 3);
          if ((int)v31 < v33)
          {
LABEL_51:
            if (v33 > v31)
            {
              v40 = (v32 & 2) != 0 ? (icu::TimeZone *)((char *)this + 10) : (icu::TimeZone *)this[3];
              if (*((_WORD *)v40 + v31) == 58)
              {
                v41 = v31 + 1;
                LODWORD(v48) = v31 + 1;
                icu::Formattable::setLong((icu::Formattable *)v49, -99999);
                (*(void (**)(icu::DecimalFormat *, UChar **, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)v21 + 160))(v21, this, v49, &v47);
                v42 = *((unsigned __int16 *)this + 4);
                v43 = (__int16)v42;
                v44 = v42 >> 5;
                if (v43 < 0)
                  v44 = *((_DWORD *)this + 3);
                if ((_DWORD)v48 == v44 && (_DWORD)v48 - v41 == 2)
                {
                  *a5 = DWORD2(v49[0]);
                  goto LABEL_41;
                }
              }
            }
LABEL_17:
            (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)v21 + 8))(v21);
            v15 = 0;
LABEL_18:
            icu::Formattable::~Formattable((icu::Formattable *)v49);
            goto LABEL_21;
          }
        }
        else if ((int)v31 < (int)(v32 >> 5))
        {
          v33 = v32 >> 5;
          goto LABEL_51;
        }
LABEL_41:
        (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)v21 + 8))(v21);
        v15 = *a3 < 24 && *a4 < 60 && *a5 < 60;
        goto LABEL_18;
      }
      if ((v28 - 1) > 5)
        goto LABEL_17;
      if ((v28 - 5) < 2)
      {
        *a5 = v25 % 100;
        *a4 = *a3 / 100 % 100;
        v37 = 1759218605 * *a3;
        v35 = (unint64_t)v37 >> 63;
        v36 = v37 >> 44;
      }
      else
      {
        if ((v28 - 3) > 1)
          goto LABEL_41;
        *a4 = v25 % 100;
        v34 = 1374389535 * *a3;
        v35 = (unint64_t)v34 >> 63;
        v36 = v34 >> 37;
      }
      *a3 = v36 + v35;
      goto LABEL_41;
    }
  }
  v15 = 0;
LABEL_22:
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v50);
  return v15;
}

icu::UnicodeString *icu::TimeZone::formatCustomID(icu::TimeZone *this, int a2, int a3, int a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  __int16 v20;

  v10 = (int)this;
  icu::UnicodeString::unBogus((uint64_t)a5);
  v11 = *((unsigned __int16 *)a5 + 4);
  v12 = (__int16)v11;
  v13 = v11 >> 5;
  if (v12 >= 0)
    v14 = v13;
  else
    v14 = *((unsigned int *)a5 + 3);
  icu::UnicodeString::doReplace((uint64_t)a5, 0, v14, (uint64_t)L"GMT", 0, 3);
  if (a2 | v10 | a3)
  {
    v15 = a4 ? 45 : 43;
    v20 = v15;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    if (v10 > 9)
      v16 = v10 / 0xAu + 48;
    else
      LOWORD(v16) = 48;
    v20 = v16;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    v20 = v10 % 10 + 48;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    v20 = 58;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    if (a2 > 9)
      v17 = a2 / 0xAu + 48;
    else
      LOWORD(v17) = 48;
    v20 = v17;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    v20 = a2 % 10 + 48;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    if (a3)
    {
      v20 = 58;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
      if (a3 > 9)
        v18 = a3 / 0xAu + 48;
      else
        LOWORD(v18) = 48;
      v20 = v18;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
      v20 = a3 % 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v20, 0, 1);
    }
  }
  return a5;
}

const icu::UnicodeString *icu::TimeZone::getCustomID(UChar **this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, uint64_t a5, int *a6)
{
  __int16 v7;
  icu::UnicodeString *v9;
  int v11[2];
  int v12[2];

  if ((*((_WORD *)a2 + 4) & 1) != 0)
    v7 = 2;
  else
    v7 = *((_WORD *)a2 + 4) & 0x1F;
  *((_WORD *)a2 + 4) = v7;
  if (*(int *)a3 <= 0)
  {
    *(_QWORD *)v11 = 0;
    *(_QWORD *)v12 = 0;
    if (icu::TimeZone::parseCustomID(this, (const icu::UnicodeString *)&v12[1], v12, &v11[1], v11, a6))
      icu::TimeZone::formatCustomID((icu::TimeZone *)v12[0], v11[1], v11[0], v12[1] >> 31, a2, v9);
    else
      *(_DWORD *)a3 = 1;
  }
  return a2;
}

BOOL icu::TimeZone::hasSameRules(icu::TimeZone *this, const icu::TimeZone *a2)
{
  int v4;
  int v5;

  v4 = (*(uint64_t (**)(icu::TimeZone *))(*(_QWORD *)this + 64))(this);
  if (v4 != (*(unsigned int (**)(const icu::TimeZone *))(*(_QWORD *)a2 + 64))(a2))
    return 0;
  v5 = (*(uint64_t (**)(icu::TimeZone *))(*(_QWORD *)this + 72))(this);
  return v5 == (*(unsigned int (**)(const icu::TimeZone *))(*(_QWORD *)a2 + 72))(a2);
}

uint64_t *icu::TimeZone::getTZDataVersion(icu::TimeZone *this, UErrorCode *a2)
{
  unsigned int v3;
  const UChar *StringByKey;
  int32_t v5;
  int32_t v7;
  _OWORD v8[8];
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(int *)this <= 0)
  {
    v3 = atomic_load(&dword_1EE009FA8);
    if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009FA8))
    {
      if (dword_1EE009FAC >= 1)
        *(_DWORD *)this = dword_1EE009FAC;
    }
    else
    {
      sub_18BDA1768(0x13u, (uint64_t)sub_18BD815C0);
      v7 = 0;
      v9 = 0;
      memset(v8, 0, sizeof(v8));
      icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v8);
      ures_openDirectFillIn(v8, 0, "zoneinfo64", (int *)this);
      StringByKey = ures_getStringByKey((uint64_t)v8, "TZVersion", &v7, (int *)this);
      if (*(int *)this <= 0)
      {
        v5 = v7;
        if (v7 >= 16)
        {
          v5 = 15;
          v7 = 15;
        }
        u_UCharsToChars(StringByKey, (char *)&qword_1EE009F41, v5);
      }
      icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v8);
      dword_1EE009FAC = *(_DWORD *)this;
      icu::umtx_initImplPostInit(&dword_1EE009FA8);
    }
  }
  return &qword_1EE009F41;
}

const icu::UnicodeString *icu::TimeZone::getCanonicalID(icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, UErrorCode *a5)
{
  char v7;

  icu::TimeZone::getCanonicalID(this, a2, (icu::UnicodeString *)&v7, a3, a5);
  return a2;
}

const icu::UnicodeString *icu::TimeZone::getCanonicalID(icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  __int16 v6;
  unsigned int v11;
  int v12;
  int32_t v13;
  int32_t v14;
  UErrorCode *v15;
  UErrorCode *v16;
  uint64_t v17;
  int *v18;

  if ((*((_WORD *)a2 + 4) & 1) != 0)
    v6 = 2;
  else
    v6 = *((_WORD *)a2 + 4) & 0x1F;
  *((_WORD *)a2 + 4) = v6;
  *(_BYTE *)a3 = 0;
  if (*(int *)a4 <= 0)
  {
    v11 = *((unsigned __int16 *)this + 4);
    v12 = (__int16)v11;
    v13 = v11 >> 5;
    if (v12 >= 0)
      v14 = v13;
    else
      v14 = *((_DWORD *)this + 3);
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v14, (uint64_t)L"Etc/Unknown", 0, 11))
    {
      icu::ZoneMeta::getCanonicalCLDRID(this, a2, a4, v15);
      if (*(int *)a4 <= 0)
      {
        *(_BYTE *)a3 = 1;
      }
      else
      {
        *(_DWORD *)a4 = 0;
        icu::TimeZone::getCustomID((UChar **)this, a2, a4, v16, v17, v18);
      }
    }
    else
    {
      icu::UnicodeString::fastCopyFrom((UChar **)a2, (UChar **)this);
      *(_BYTE *)a3 = 0;
    }
  }
  return a2;
}

const icu::UnicodeString *icu::TimeZone::getIanaID(icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  __int16 v5;
  unsigned int v8;
  int v9;
  int32_t v10;
  int32_t v11;
  UErrorCode *v12;

  if ((*((_WORD *)a2 + 4) & 1) != 0)
    v5 = 2;
  else
    v5 = *((_WORD *)a2 + 4) & 0x1F;
  *((_WORD *)a2 + 4) = v5;
  if (*(int *)a3 <= 0)
  {
    v8 = *((unsigned __int16 *)this + 4);
    v9 = (__int16)v8;
    v10 = v8 >> 5;
    if (v9 >= 0)
      v11 = v10;
    else
      v11 = *((_DWORD *)this + 3);
    if (icu::UnicodeString::doCompare((uint64_t)this, 0, v11, (uint64_t)L"Etc/Unknown", 0, 11))
    {
      icu::ZoneMeta::getIanaID(this, a2, a3, v12);
    }
    else
    {
      *(_DWORD *)a3 = 1;
      icu::UnicodeString::setToBogus(a2);
    }
  }
  return a2;
}

const icu::UnicodeString *icu::TimeZone::getWindowsID(icu::TimeZone *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4, UErrorCode *a5)
{
  __int16 v6;
  void *v8;
  _QWORD *v9;
  char *v10;
  char *NextResource;
  char *v12;
  char *v13;
  const UChar *String;
  const UChar *v15;
  UChar *v16;
  UChar *v17;
  UChar *v18;
  int32_t v19;
  int v20;
  _BOOL4 hasNext;
  uint64_t Key;
  void *v23;
  _BOOL4 v24;
  int v26;
  char v27;
  _BYTE v28[64];
  void (**v29)(icu::UnicodeString *__hidden);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v6 = *((_WORD *)a2 + 4) & 0x1F;
  if ((*((_WORD *)a2 + 4) & 1) != 0)
    v6 = 2;
  *((_WORD *)a2 + 4) = v6;
  if (*(int *)a3 <= 0)
  {
    v30 = 0u;
    v33 = 0;
    v32 = 0u;
    v31 = 0u;
    v29 = off_1E2256B38;
    LOWORD(v30) = 2;
    v27 = 0;
    icu::TimeZone::getCanonicalID(this, (const icu::UnicodeString *)&v29, (icu::UnicodeString *)&v27, a3, a5);
    v8 = (void *)*(unsigned int *)a3;
    if ((int)v8 <= 0 && v27)
    {
      v9 = (_QWORD *)ures_openDirect(0, (uint64_t)"windowsZones", (uint64_t)a3);
      ures_getByKey((uint64_t)v9, "mapTimezones", (uint64_t)v9, (int *)a3);
      v8 = (void *)*(unsigned int *)a3;
      if ((int)v8 <= 0)
      {
        v10 = 0;
        if (ures_hasNext((_BOOL8)v9))
        {
          do
          {
            NextResource = ures_getNextResource((uint64_t)v9, v10, (int *)a3);
            v10 = NextResource;
            if (*(int *)a3 > 0)
              break;
            if (ures_getType((uint64_t)NextResource) == 2)
            {
              if (ures_hasNext((_BOOL8)v10))
              {
                v12 = 0;
                while (1)
                {
                  v13 = ures_getNextResource((uint64_t)v10, v12, (int *)a3);
                  v12 = v13;
                  if (*(int *)a3 > 0)
                    break;
                  if (ures_getType((uint64_t)v13))
                  {
LABEL_23:
                    v20 = 0;
                  }
                  else
                  {
                    v26 = 0;
                    String = ures_getString((uint64_t)v12, &v26, (int *)a3);
                    v15 = String;
                    if (*(int *)a3 > 0)
                      break;
                    while (1)
                    {
                      v16 = u_strchr(v15, 0x20u);
                      v17 = v16;
                      v18 = v16 ? v16 : (UChar *)&String[v26];
                      v19 = (v30 & 0x8000u) == 0 ? (unsigned __int16)v30 >> 5 : DWORD1(v30);
                      if (!icu::UnicodeString::doCompare((uint64_t)&v29, 0, v19, (uint64_t)v15, 0, (unint64_t)((char *)v18 - (char *)v15) >> 1))break;
                      v15 = v18 + 1;
                      if (!v17)
                        goto LABEL_23;
                    }
                    Key = ures_getKey((uint64_t)v10);
                    icu::UnicodeString::UnicodeString(v28, Key, 0xFFFFFFFFLL, 0);
                    icu::UnicodeString::operator=(a2, (icu::UnicodeString *)v28);
                    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v28);
                    v20 = 1;
                  }
                  hasNext = ures_hasNext((_BOOL8)v10);
                  if (v20 || !hasNext)
                    goto LABEL_31;
                }
                v20 = 0;
              }
              else
              {
                v20 = 0;
                v12 = 0;
              }
LABEL_31:
              ures_close(v12);
            }
            else
            {
              v20 = 0;
            }
            v24 = ures_hasNext((_BOOL8)v9);
            if (v20)
              break;
          }
          while (v24);
        }
        ures_close(v10);
        ures_close(v9);
      }
    }
    else if ((_DWORD)v8 == 1)
    {
      *(_DWORD *)a3 = 0;
    }
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v29);
  }
  return a2;
}

const char *icu::TimeZone::getIDForWindowsID(icu::TimeZone *this, const icu::UnicodeString *a2, const char *a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  __int16 v6;
  _QWORD *v10;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  const UChar *v17;
  const UChar *StringByKey;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const UChar *v22;
  UChar *v23;
  unsigned int v24;
  int v25;
  char v26[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if ((*((_WORD *)a3 + 4) & 1) != 0)
    v6 = 2;
  else
    v6 = *((_WORD *)a3 + 4) & 0x1F;
  *((_WORD *)a3 + 4) = v6;
  if (*(int *)a4 <= 0)
  {
    v10 = (_QWORD *)ures_openDirect(0, (uint64_t)"windowsZones", (uint64_t)a4);
    ures_getByKey((uint64_t)v10, "mapTimezones", (uint64_t)v10, (int *)a4);
    if (*(int *)a4 >= 1)
      goto LABEL_6;
    v25 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    *(_OWORD *)v26 = 0u;
    v27 = 0u;
    v12 = *((unsigned __int16 *)this + 4);
    v13 = (__int16)v12;
    v14 = v12 >> 5;
    v15 = v13 >= 0 ? v14 : *((unsigned int *)this + 3);
    v16 = icu::UnicodeString::extract((uint64_t)this, 0, v15, v26, 127);
    if (!v16)
      goto LABEL_6;
    if (v16 >= 128)
      goto LABEL_6;
    v26[v16] = 0;
    ures_getByKey((uint64_t)v10, v26, (uint64_t)v10, &v25);
    if (v25 >= 1)
      goto LABEL_6;
    v24 = 0;
    if (a2 && (v17 = ures_getStringByKey((uint64_t)v10, (const char *)a2, (int *)&v24, &v25), v25 <= 0))
    {
      v22 = v17;
      v23 = u_strchr(v17, 0x20u);
      if (v23)
      {
        v20 = (unint64_t)((char *)v23 - (char *)v22) >> 1;
        v21 = a3;
        v19 = (uint64_t)v22;
      }
      else
      {
        v21 = a3;
        v19 = (uint64_t)v22;
        v20 = 0xFFFFFFFFLL;
      }
    }
    else
    {
      StringByKey = ures_getStringByKey((uint64_t)v10, "001", (int *)&v24, (int *)a4);
      if (*(int *)a4 > 0)
      {
LABEL_6:
        ures_close(v10);
        return a3;
      }
      v19 = (uint64_t)StringByKey;
      v20 = v24;
      v21 = a3;
    }
    sub_18BD2FA48((uint64_t)v21, v19, v20);
    goto LABEL_6;
  }
  return a3;
}

uint64_t *sub_18BD83BB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x90, a2);
  if (result)
    return (uint64_t *)sub_18BD84218((uint64_t)result, a1);
  return result;
}

uint64_t sub_18BD83BE4(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return *(unsigned int *)(a1 + 136);
  else
    return 0;
}

uint64_t sub_18BD83C00(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (*a2 > 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
    return 0;
  v5 = *(int *)(a1 + 140);
  if ((int)v5 >= *(_DWORD *)(a1 + 136))
    return 0;
  sub_18BD842BC(a1, *(_DWORD *)(v4 + 4 * v5), a2);
  ++*(_DWORD *)(a1 + 140);
  return a1 + 8;
}

uint64_t sub_18BD83C68(uint64_t result)
{
  *(_DWORD *)(result + 140) = 0;
  return result;
}

uint64_t *sub_18BD83C70(uint64_t a1, int *a2)
{
  uint64_t *v2;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  _OWORD v10[8];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a2 > 0)
    return 0;
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v10);
  v6 = (_QWORD *)sub_18BD81E3C(a1, (char *)v10, a2);
  v2 = 0;
  v7 = (uint64_t *)*a2;
  if ((int)v7 <= 0)
  {
    v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0xE0, v5);
    v2 = v8;
    if (v8)
      icu::OlsonTimeZone::OlsonTimeZone(v8, v6, v10, a1, a2);
    else
      *a2 = 7;
  }
  ures_close(v6);
  if (*a2 >= 1 && v2)
  {
    (*(void (**)(uint64_t *))(*v2 + 8))(v2);
    v2 = 0;
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v10);
  return v2;
}

uint64_t sub_18BD83D90(int a1, int *a2, int *a3)
{
  uint64_t result;
  int v5;

  *a2 = 0;
  if (*a3 > 0)
    return 0;
  if (a1 == 2)
  {
    sub_18BBB1B60((unsigned int *)&unk_1EE009FA0, (void (*)(uint64_t, int *))sub_18BD83E74, 2, a3);
    result = qword_1EE009F88;
    v5 = dword_1EE009F80;
  }
  else if (a1 == 1)
  {
    sub_18BBB1B60((unsigned int *)&unk_1EE009F98, (void (*)(uint64_t, int *))sub_18BD83E74, 1, a3);
    result = qword_1EE009F78;
    v5 = dword_1EE009F70;
  }
  else if (a1)
  {
    v5 = 0;
    result = 0;
    *a3 = 1;
  }
  else
  {
    sub_18BBB1B60((unsigned int *)&unk_1EE009F90, (void (*)(uint64_t, int *))sub_18BD83E74, 0, a3);
    result = qword_1EE009F68;
    v5 = dword_1EE009F60;
  }
  *a2 = v5;
  return result;
}

void sub_18BD83E74(int a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int Size;
  signed int v8;
  int v9;
  const UChar *StringByIndex;
  unint64_t v11;
  int32_t v12;
  int v13;
  UErrorCode *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  void *v18;
  _BOOL4 v19;
  void *v20;
  UErrorCode *v21;
  char v22;
  const UChar *Region;
  void *v24;
  uint64_t v25;
  _DWORD *ptr;
  _QWORD v27[3];
  int v28;
  const UChar *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  void (**v34)(icu::UnicodeString *__hidden);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  sub_18BDA1768(0x13u, (uint64_t)sub_18BD815C0);
  v4 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a2);
  v5 = ures_getByKey(v4, "Names", v4, a2);
  v6 = (_QWORD *)v5;
  if (*a2 > 0)
    goto LABEL_2;
  Size = ures_getSize(v5);
  ptr = uprv_malloc(4 * Size);
  if (!ptr)
  {
    *a2 = 7;
    goto LABEL_2;
  }
  if (Size >= 1)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v38 = 0;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      v34 = off_1E2256B38;
      LOWORD(v35) = 2;
      v28 = 0;
      StringByIndex = ures_getStringByIndex((uint64_t)v6, v8, &v28, a2);
      v27[2] = StringByIndex;
      if (*a2 <= 0)
      {
        v29 = StringByIndex;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v34, 1, &v29, v28);
        v27[1] = v29;
      }
      else
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v34);
      }
      v11 = *a2;
      if ((int)v11 > 0)
      {
LABEL_38:
        icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v34);
        goto LABEL_39;
      }
      if ((v35 & 0x8000u) == 0)
        v12 = (unsigned __int16)v35 >> 5;
      else
        v12 = DWORD1(v35);
      v13 = icu::UnicodeString::doCompare((uint64_t)&v34, 0, v12, (uint64_t)L"Etc/Unknown", 0, 11);
      v27[0] = L"Etc/Unknown";
      v15 = (unint64_t)v27;
      if (v13)
      {
        if ((a1 - 1) > 1)
          goto LABEL_31;
        v33 = 0;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        v29 = (const UChar *)off_1E2256B38;
        LOWORD(v30) = 2;
        icu::ZoneMeta::getCanonicalCLDRID((icu::ZoneMeta *)&v34, (const icu::UnicodeString *)&v29, (icu::UnicodeString *)a2, v14);
        v16 = *a2;
        if ((int)v16 >= 1)
        {
          icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)&v29);
          goto LABEL_38;
        }
        if ((v30 & 1) != 0)
        {
          v22 = v35;
          icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v30, (icu::UnicodeString *)&v29);
          if ((v22 & 1) == 0)
            goto LABEL_32;
        }
        else
        {
          if ((v30 & 0x8000u) == 0)
            v17 = (unsigned __int16)v30 >> 5;
          else
            v17 = DWORD1(v30);
          if ((v35 & 0x8000u) == 0)
            v18 = (void *)((unsigned __int16)v35 >> 5);
          else
            v18 = (void *)DWORD1(v35);
          if ((v35 & 1) != 0 || v17 != (_DWORD)v18)
          {
            icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v29);
            goto LABEL_32;
          }
          v19 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v29, (const icu::UnicodeString *)&v34, v17);
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v29);
          if (!v19)
            goto LABEL_32;
        }
        if (a1 != 2)
          goto LABEL_31;
        Region = icu::TimeZone::getRegion((icu::TimeZone *)&v34, (const icu::UnicodeString *)a2, v21);
        v11 = *a2;
        if ((int)v11 > 0)
          goto LABEL_38;
        if (u_strcmp(Region, (const UChar *)"0"))
        {
LABEL_31:
          ptr[v9] = v8;
          v15 = ++v9;
        }
      }
LABEL_32:
      icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v34);
      if (Size == ++v8)
        goto LABEL_39;
    }
  }
  v9 = 0;
LABEL_39:
  if (*a2 <= 0)
  {
    v24 = uprv_realloc(ptr, 4 * v9);
    if (v24)
      v25 = (uint64_t)v24;
    else
      v25 = (uint64_t)ptr;
    switch(a1)
    {
      case 2:
        qword_1EE009F88 = v25;
        dword_1EE009F80 = v9;
        break;
      case 1:
        qword_1EE009F78 = v25;
        dword_1EE009F70 = v9;
        break;
      case 0:
        qword_1EE009F68 = v25;
        dword_1EE009F60 = v9;
        break;
    }
  }
LABEL_2:
  ures_close(v6);
}

uint64_t sub_18BD84218(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v4 = (_QWORD *)icu::StringEnumeration::StringEnumeration(a1);
  *v4 = &off_1E2266D08;
  v4[16] = 0;
  v4[17] = 0;
  v4[15] = 0;
  if (*(_QWORD *)(a2 + 128))
  {
    v5 = uprv_malloc(4 * *(int *)(a2 + 136));
    *(_QWORD *)(a1 + 128) = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *(int *)(a2 + 136);
      *(_DWORD *)(a1 + 136) = v7;
      memcpy(v5, *(const void **)(a2 + 128), 4 * v7);
      *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
      *(_QWORD *)(a1 + 120) = v6;
    }
    else
    {
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 120) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
  return a1;
}

BOOL sub_18BD842BC(uint64_t a1, signed int a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  const UChar *StringByIndex;
  unsigned int v9;
  void *v10;
  const UChar *v12;
  int v13;
  UChar *v14[9];

  v14[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v13 = 0;
  v6 = ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a3);
  v7 = (_QWORD *)ures_getByKey(v6, "Names", v6, a3);
  StringByIndex = ures_getStringByIndex((uint64_t)v7, a2, &v13, a3);
  if (*a3 < 1)
  {
    v12 = StringByIndex;
    icu::UnicodeString::UnicodeString(v14, 1, &v12);
    icu::UnicodeString::fastCopyFrom((UChar **)(a1 + 8), v14);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v14);
  }
  else
  {
    v9 = *(unsigned __int16 *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      icu::UnicodeString::unBogus(a1 + 8);
    }
    else
    {
      if ((v9 & 0x8000) == 0)
      {
        if (!(v9 >> 5))
          goto LABEL_10;
        goto LABEL_9;
      }
      if (*(_DWORD *)(a1 + 20))
LABEL_9:
        *(_WORD *)(a1 + 16) &= 0x1Fu;
    }
  }
LABEL_10:
  ures_close(v7);
  return *a3 < 1;
}

void *icu::TitlecaseTransliterator::getStaticClassID(icu::TitlecaseTransliterator *this)
{
  return &unk_1EE009FB0;
}

void *sub_18BD843F8()
{
  return &unk_1EE009FB0;
}

icu::Transliterator *sub_18BD84404(icu::Transliterator *a1)
{
  void *v2;
  const char *v4;
  UChar *v5[9];

  v5[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  sub_18BC8C53C(a1, v5, 0);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(_QWORD *)a1 = &off_1E2266DA0;
  icu::Transliterator::setMaximumContextLength((uint64_t)a1, 2);
  return a1;
}

void sub_18BD844BC(icu::Transliterator *a1)
{
  void *v1;

  icu::Transliterator::~Transliterator(a1);
  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18BD844D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *result;

  result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    result = sub_18BC8C57C(result, a1);
    *(_QWORD *)result = &off_1E2266DA0;
  }
  return result;
}

void sub_18BD8450C(uint64_t a1, uint64_t a2, int *a3, int a4)
{
  int v4;
  uint64_t v5;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int TypeOrIgnorable;
  int v13;
  BOOL v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  const UChar *v27;
  const UChar *v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  void (**v32)(icu::UnicodeString *__hidden);
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a3[2];
  v4 = a3[3];
  if ((int)v5 >= v4)
    return;
  v9 = *a3;
  if ((int)v5 <= *a3)
  {
    v14 = 1;
  }
  else
  {
    v10 = (v5 - 1);
    while (1)
    {
      v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v10);
      TypeOrIgnorable = ucase_getTypeOrIgnorable(v11);
      if (TypeOrIgnorable >= 1)
        break;
      v9 = *a3;
      if (TypeOrIgnorable)
      {
        v13 = v11 >= 0x10000 ? -2 : -1;
        v10 = (v13 + v10);
        if ((int)v10 >= v9)
          continue;
      }
      v14 = 1;
      goto LABEL_13;
    }
    v14 = 0;
    v9 = *a3;
LABEL_13:
    v5 = a3[2];
    v4 = a3[3];
  }
  v30 = 0;
  v31 = 0;
  v29[0] = a2;
  v29[1] = v9;
  LODWORD(v30) = a3[1];
  v33 = 0u;
  v34 = 0u;
  v36 = 0;
  v35 = 0u;
  v32 = off_1E2256B38;
  v15 = 2;
  LOWORD(v33) = 2;
  v28 = 0;
  if ((int)v5 >= v4)
  {
    LODWORD(v19) = v5;
    goto LABEL_39;
  }
  while (1)
  {
    HIDWORD(v30) = v5;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v5);
    v17 = v16;
    v18 = v16 < 0x10000 ? 1 : 2;
    v19 = (v18 + v5);
    LODWORD(v31) = v18 + v5;
    v20 = ucase_getTypeOrIgnorable(v16);
    if ((v20 & 0x80000000) == 0)
      break;
LABEL_35:
    v15 = a3[3];
    v5 = v19;
    if ((int)v19 >= (int)v15)
      goto LABEL_39;
  }
  v21 = v20;
  if (v14)
    v22 = ucase_toFullTitle(v17, (uint64_t (*)(uint64_t, _QWORD))sub_18BC8C454, (uint64_t)v29, &v28, 1);
  else
    v22 = ucase_toFullLower(v17, (uint64_t (*)(uint64_t, _QWORD))sub_18BC8C454, (uint64_t)v29, &v28, 1);
  v23 = v22;
  v14 = v21 == 0;
  if (!a4 || (v15 = BYTE5(v31), !BYTE5(v31)))
  {
    if ((v22 & 0x80000000) == 0)
    {
      if (v22 > 0x1F)
      {
        icu::UnicodeString::unBogus((uint64_t)&v32);
        if ((v33 & 0x8000u) == 0)
          v24 = (unsigned __int16)v33 >> 5;
        else
          v24 = DWORD1(v33);
        icu::UnicodeString::replace((icu::UnicodeString *)&v32, 0, v24, v23);
        if ((v33 & 0x8000) != 0)
          v23 = DWORD1(v33);
        else
          v23 = (unsigned __int16)v33 >> 5;
      }
      else
      {
        v27 = v28;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v32, 0, &v27, v22);
      }
      (*(void (**)(uint64_t, _QWORD, _QWORD, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 32))(a2, HIDWORD(v30), (v18 + v5), &v32);
      v25 = v23 - v18;
      if (v23 != v18)
      {
        v19 = v23 + v5;
        v26 = a3[1] + v25;
        a3[1] = v26;
        LODWORD(v30) = v26;
        a3[3] += v25;
      }
    }
    goto LABEL_35;
  }
  LODWORD(v19) = HIDWORD(v30);
LABEL_39:
  a3[2] = v19;
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v32);
}

void *icu::TimeUnit::getStaticClassID(icu::TimeUnit *this)
{
  return &unk_1EE009FB1;
}

void *icu::TimeUnit::getDynamicClassID(icu::TimeUnit *this)
{
  return &unk_1EE009FB1;
}

icu::MeasureUnit *icu::TimeUnit::createInstance(unsigned int a1, _DWORD *a2)
{
  uint64_t *v2;
  icu::MeasureUnit *result;

  v2 = (uint64_t *)*a2;
  if ((int)v2 > 0)
    return 0;
  if (a1 < 7)
  {
    result = (icu::MeasureUnit *)icu::UMemory::operator new(v2, (icu::UMemory *)0x18, (unint64_t)a2);
    if (result)
      return icu::TimeUnit::TimeUnit(result, a1);
  }
  else
  {
    result = 0;
    *a2 = 1;
  }
  return result;
}

icu::MeasureUnit *icu::TimeUnit::TimeUnit(icu::MeasureUnit *a1, unsigned int a2)
{
  uint64_t v4;

  v4 = icu::MeasureUnit::MeasureUnit((uint64_t)a1);
  *(_QWORD *)v4 = off_1E2266E50;
  *(_DWORD *)(v4 + 20) = a2;
  if (a2 >= 7)
    abort();
  icu::MeasureUnit::initTime(a1, off_1E2266E90[a2]);
  return a1;
}

uint64_t icu::TimeUnit::TimeUnit(icu::TimeUnit *this, const icu::TimeUnit *a2)
{
  uint64_t result;

  result = icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(_QWORD *)result = off_1E2266E50;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5);
  return result;
}

{
  uint64_t result;

  result = icu::MeasureUnit::MeasureUnit((uint64_t)this, (unint64_t)a2);
  *(_QWORD *)result = off_1E2266E50;
  *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5);
  return result;
}

uint64_t *icu::TimeUnit::clone@<X0>(icu::TimeUnit *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, a2);
  if (result)
  {
    result = (uint64_t *)icu::MeasureUnit::MeasureUnit((uint64_t)result, (unint64_t)this);
    *result = (uint64_t)off_1E2266E50;
    *((_DWORD *)result + 5) = *((_DWORD *)this + 5);
  }
  return result;
}

uint64_t icu::TimeUnit::operator=(uint64_t a1, unint64_t a2)
{
  if (a1 != a2)
  {
    icu::MeasureUnit::operator=(a1, a2);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  }
  return a1;
}

uint64_t icu::TimeUnit::getTimeUnitField(icu::TimeUnit *this)
{
  return *((unsigned int *)this + 5);
}

void icu::TimeUnit::~TimeUnit(icu::TimeUnit *this)
{
  void *v1;

  icu::MeasureUnit::~MeasureUnit(this);
  icu::UMemory::operator delete(v1);
}

void *icu::TimeUnitAmount::getStaticClassID(icu::TimeUnitAmount *this)
{
  return &unk_1EE009FB2;
}

void *icu::TimeUnitAmount::getDynamicClassID(icu::TimeUnitAmount *this)
{
  return &unk_1EE009FB2;
}

icu::Measure *icu::TimeUnitAmount::TimeUnitAmount(icu::Measure *a1, const icu::Formattable *a2, unsigned int a3, UErrorCode *a4)
{
  icu::MeasureUnit *Instance;
  icu::Measure *result;

  Instance = icu::TimeUnit::createInstance(a3, a4);
  result = icu::Measure::Measure(a1, a2, Instance, a4);
  *(_QWORD *)a1 = off_1E2266ED8;
  return result;
}

{
  icu::MeasureUnit *Instance;
  icu::Measure *result;

  Instance = icu::TimeUnit::createInstance(a3, a4);
  result = icu::Measure::Measure(a1, a2, Instance, a4);
  *(_QWORD *)a1 = off_1E2266ED8;
  return result;
}

icu::Measure *icu::TimeUnitAmount::TimeUnitAmount(icu::Measure *a1, unsigned int a2, UErrorCode *a3, double a4)
{
  icu::MeasureUnit *Instance;
  _BYTE v9[112];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  icu::Formattable::Formattable((icu::Formattable *)v9, a4);
  Instance = icu::TimeUnit::createInstance(a2, a3);
  icu::Measure::Measure(a1, (const icu::Formattable *)v9, Instance, a3);
  icu::Formattable::~Formattable((icu::Formattable *)v9);
  *(_QWORD *)a1 = off_1E2266ED8;
  return a1;
}

_QWORD *icu::TimeUnitAmount::TimeUnitAmount(icu::TimeUnitAmount *this, const icu::TimeUnitAmount *a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::Measure::Measure(this, a2);
  *result = off_1E2266ED8;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)icu::Measure::Measure(this, a2);
  *result = off_1E2266ED8;
  return result;
}

uint64_t icu::TimeUnitAmount::operator=(uint64_t a1, uint64_t a2)
{
  icu::Measure::operator=(a1, a2);
  return a1;
}

icu::Measure *icu::TimeUnitAmount::clone@<X0>(icu::TimeUnitAmount *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Measure *result;

  result = (icu::Measure *)icu::UMemory::operator new(a3, (icu::UMemory *)0x80, a2);
  if (result)
  {
    result = (icu::Measure *)icu::Measure::Measure(result, this);
    *(_QWORD *)result = off_1E2266ED8;
  }
  return result;
}

void icu::TimeUnitAmount::~TimeUnitAmount(icu::TimeUnitAmount *this)
{
  void *v1;

  icu::Measure::~Measure(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::TimeUnitAmount::getTimeUnit(icu::TimeUnitAmount *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t icu::TimeUnitAmount::getTimeUnitField(icu::TimeUnit **this)
{
  return icu::TimeUnit::getTimeUnitField(this[15]);
}

void *icu::TimeUnitFormat::getStaticClassID(icu::TimeUnitFormat *this)
{
  return &unk_1EE009FB3;
}

void *icu::TimeUnitFormat::getDynamicClassID(icu::TimeUnitFormat *this)
{
  return &unk_1EE009FB3;
}

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  icu::Locale *v4;
  uint64_t *Default;

  v4 = (icu::Locale *)icu::MeasureFormat::MeasureFormat(this);
  *(_QWORD *)v4 = off_1E2266F28;
  Default = icu::Locale::getDefault(v4);
  icu::MeasureFormat::initMeasureFormat((uint64_t)this, (const char **)Default, 0, 0, a2);
  *((_QWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  if (*(int *)a2 <= 0)
  {
    *((_DWORD *)this + 108) = 0;
    icu::TimeUnitFormat::setup(this, a2);
  }
  return this;
}

void icu::TimeUnitFormat::create(uint64_t a1, unsigned int a2, UErrorCode *a3)
{
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  if (*(int *)a3 <= 0)
  {
    if (a2 < 2)
    {
      *(_DWORD *)(a1 + 432) = a2;
      icu::TimeUnitFormat::setup((icu::TimeUnitFormat *)a1, a3);
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat *this, const char **a2, UErrorCode *a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)icu::MeasureFormat::MeasureFormat(this);
  *v6 = off_1E2266F28;
  icu::MeasureFormat::initMeasureFormat((uint64_t)v6, a2, 0, 0, a3);
  *((_QWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  if (*(int *)a3 <= 0)
  {
    *((_DWORD *)this + 108) = 0;
    icu::TimeUnitFormat::setup(this, a3);
  }
  return this;
}

uint64_t icu::TimeUnitFormat::TimeUnitFormat(uint64_t a1, const char **a2, unsigned int a3, UErrorCode *a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)icu::MeasureFormat::MeasureFormat((icu::MeasureFormat *)a1);
  *v8 = off_1E2266F28;
  icu::MeasureFormat::initMeasureFormat((uint64_t)v8, a2, a3 == 1, 0, a4);
  *(_QWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  if (*(int *)a4 <= 0)
  {
    if (a3 < 2)
    {
      *(_DWORD *)(a1 + 432) = a3;
      icu::TimeUnitFormat::setup((icu::TimeUnitFormat *)a1, a4);
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return a1;
}

icu::TimeUnitFormat *icu::TimeUnitFormat::TimeUnitFormat(icu::TimeUnitFormat *this, const icu::TimeUnitFormat *a2)
{
  icu::TimeUnitFormat *inited;
  uint64_t i;
  icu::TimeUnitFormat *v6;
  void **v7;
  UErrorCode v9;

  inited = icu::MeasureFormat::MeasureFormat(this, a2);
  *(_QWORD *)inited = off_1E2266F28;
  *((_DWORD *)inited + 108) = *((_DWORD *)a2 + 108);
  for (i = 376; i != 432; i += 8)
  {
    v9 = U_ZERO_ERROR;
    inited = (icu::TimeUnitFormat *)icu::TimeUnitFormat::initHash(inited, &v9);
    v6 = inited;
    *(_QWORD *)((char *)this + i) = inited;
    if (v9 <= U_ZERO_ERROR)
    {
      icu::TimeUnitFormat::copyHash((uint64_t)inited, *(uint64_t ***)((char *)a2 + i), (uint64_t *)inited, (int *)&v9);
    }
    else
    {
      if (inited)
      {
        v7 = *(void ***)inited;
        if (*(_QWORD *)v6)
          uhash_close(v7);
        icu::UMemory::operator delete(v6);
      }
      *(_QWORD *)((char *)this + i) = 0;
    }
  }
  return this;
}

uint64_t *icu::TimeUnitFormat::initHash(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  uint64_t *v2;
  int32x2_t *v4;
  uint64_t *v5;
  int32x2_t *v6;

  v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    v4 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, (unint64_t)a2);
    v5 = (uint64_t *)v4;
    if (!v4)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v5;
    }
    *v4 = 0;
    if (*(int *)a2 <= 0)
    {
      v6 = v4 + 1;
      uhash_init(v4 + 1, (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, (int *)a2);
      if (*(int *)a2 <= 0)
      {
        *v5 = (uint64_t)v6;
        uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
        if (*(int *)a2 < 1)
        {
          uhash_setValueComparator(*v5, (uint64_t)sub_18BD86290);
          return v5;
        }
      }
      if (*v5)
        uhash_close((void **)*v5);
    }
    icu::UMemory::operator delete(v5);
  }
  return 0;
}

void icu::TimeUnitFormat::copyHash(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4)
{
  uint64_t v7;
  UChar **v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  icu::UnicodeString *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  UChar *v19[9];

  v19[8] = *(UChar **)MEMORY[0x1E0C80C00];
  if (*a4 <= 0)
  {
    v18 = -1;
    if (a2)
    {
      while (1)
      {
        v7 = uhash_nextElement(*a2, &v18);
        if (!v7)
          break;
        v9 = *(_QWORD **)(v7 + 8);
        v8 = *(UChar ***)(v7 + 16);
        v10 = uprv_malloc(0x10uLL);
        *v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
        v10[1] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v9[1] + 32))(v9[1]);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v19, v8);
        v11 = *a3;
        v14 = (icu::UnicodeString *)icu::UMemory::operator new(v13, (icu::UMemory *)0x40, v12);
        v15 = (uint64_t)v14;
        if (v14)
          icu::UnicodeString::UnicodeString(v14, v19);
        uhash_put(v11, v15, (uint64_t)v10, a4);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v19);
        if (*a4 >= 1)
        {
          if (*v10)
            (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 8))(*v10);
          v17 = v10[1];
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          uprv_free(v10);
          return;
        }
      }
    }
  }
}

void icu::TimeUnitFormat::~TimeUnitFormat(icu::TimeUnitFormat *this)
{
  uint64_t i;

  *(_QWORD *)this = off_1E2266F28;
  for (i = 376; i != 432; i += 8)
  {
    icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)((char *)this + i));
    *(_QWORD *)((char *)this + i) = 0;
  }
  icu::MeasureFormat::~MeasureFormat(this);
}

{
  void *v1;

  icu::TimeUnitFormat::~TimeUnitFormat(this);
  icu::UMemory::operator delete(v1);
}

void icu::TimeUnitFormat::deleteHash(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  v6 = -1;
  if (a2)
  {
    while (1)
    {
      v3 = uhash_nextElement(*a2, &v6);
      if (!v3)
        break;
      v4 = *(_QWORD **)(v3 + 8);
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      v5 = v4[1];
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      uprv_free(v4);
    }
    if (*a2)
      uhash_close((void **)*a2);
    icu::UMemory::operator delete(a2);
  }
}

icu::TimeUnitFormat *icu::TimeUnitFormat::clone@<X0>(icu::TimeUnitFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::TimeUnitFormat *result;

  result = (icu::TimeUnitFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x1B8, a2);
  if (result)
    return icu::TimeUnitFormat::TimeUnitFormat(result, this);
  return result;
}

uint64_t icu::TimeUnitFormat::operator=(uint64_t a1, uint64_t a2)
{
  icu::TimeUnitFormat *inited;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  icu::TimeUnitFormat *v9;
  void **v10;
  UErrorCode v12;

  if (a1 != a2)
  {
    inited = (icu::TimeUnitFormat *)icu::MeasureFormat::operator=(a1, a2);
    v5 = 0;
    v6 = a1 + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)inited, *(uint64_t ***)(v6 + v5));
      *(_QWORD *)(v6 + v5) = 0;
      v5 += 8;
    }
    while (v5 != 56);
    v7 = 0;
    v8 = a1 + 376;
    do
    {
      v12 = U_ZERO_ERROR;
      inited = (icu::TimeUnitFormat *)icu::TimeUnitFormat::initHash(inited, &v12);
      v9 = inited;
      *(_QWORD *)(v8 + v7) = inited;
      if (v12 <= U_ZERO_ERROR)
      {
        icu::TimeUnitFormat::copyHash((uint64_t)inited, *(uint64_t ***)(a2 + 376 + v7), (uint64_t *)inited, (int *)&v12);
      }
      else
      {
        if (inited)
        {
          v10 = *(void ***)inited;
          if (*(_QWORD *)v9)
            uhash_close(v10);
          icu::UMemory::operator delete(v9);
        }
        *(_QWORD *)(v8 + v7) = 0;
      }
      v7 += 8;
    }
    while (v7 != 56);
    *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  }
  return a1;
}

void icu::TimeUnitFormat::parseObject(icu::TimeUnitFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  uint64_t v6;
  int v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  icu::MessageFormat *v14;
  char v15;
  UChar ***v16;
  uint64_t v17;
  uint64_t NumberFormatInternal;
  void (*v19)(uint64_t, UChar **, _OWORD *, int *);
  uint64_t v20;
  int v21;
  void *v22;
  int v23;
  int32_t v24;
  uint64_t *v25;
  int32_t v26;
  double v27;
  int32_t v28;
  icu::Measure *v29;
  icu::UObject *v30;
  uint64_t **i;
  int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  int v41;
  UChar *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[7];
  icu::Formattable *v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _OWORD v55[7];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  memset(v55, 0, sizeof(v55));
  icu::Formattable::Formattable((icu::Formattable *)v55, 0.0);
  v6 = 0;
  v35 = 0;
  v39 = 0;
  v7 = *((_DWORD *)a4 + 2);
  v36 = 7;
  v37 = 0;
  v34 = -1;
  do
  {
    v8 = (uint64_t **)*((_QWORD *)this + v6 + 47);
    v41 = -1;
    for (i = v8; ; v8 = i)
    {
      v9 = uhash_nextElement(*v8, &v41);
      if (!v9)
        break;
      v11 = 0;
      v12 = *(_QWORD *)(v9 + 8);
      v38 = *(_QWORD *)(v9 + 16);
      v13 = 1;
      do
      {
        v14 = *(icu::MessageFormat **)(v12 + 8 * v11);
        v15 = v13;
        *((_DWORD *)a4 + 2) = v7;
        *((_DWORD *)a4 + 3) = -1;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        *(_OWORD *)v48 = 0u;
        icu::Formattable::Formattable((icu::Formattable *)v48);
        (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, icu::Formattable **, icu::ParsePosition *))(*(_QWORD *)v14 + 56))(v14, a2, v48, a4);
        if (*((_DWORD *)a4 + 3) == -1 && *((_DWORD *)a4 + 2) != v7)
        {
          memset(v47, 0, sizeof(v47));
          icu::Formattable::Formattable((icu::Formattable *)v47, 0.0);
          if (icu::MessageFormat::getArgTypeCount(v14))
          {
            v16 = (UChar ***)v48[1];
            if (icu::Formattable::getType(v48[1]) == 3)
            {
              v46 = 0;
              v44 = 0u;
              v45 = 0u;
              v43 = 0u;
              v42 = (UChar *)off_1E2256B38;
              LOWORD(v43) = 2;
              v40 = 0;
              v17 = v6;
              NumberFormatInternal = icu::MeasureFormat::getNumberFormatInternal(this);
              icu::UnicodeString::operator=(&v42, v16[1]);
              v19 = *(void (**)(uint64_t, UChar **, _OWORD *, int *))(*(_QWORD *)NumberFormatInternal + 168);
              v20 = NumberFormatInternal;
              v6 = v17;
              v19(v20, &v42, v47, &v40);
              v21 = v40;
              icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v42);
              if (v21 < 1)
                goto LABEL_13;
LABEL_18:
              icu::Formattable::~Formattable((icu::Formattable *)v47);
              goto LABEL_19;
            }
            if (!icu::Formattable::isNumeric((icu::Formattable *)v16))
              goto LABEL_18;
            icu::Formattable::operator=((uint64_t)v47, (uint64_t)v16);
          }
LABEL_13:
          v23 = *((_DWORD *)a4 + 2) - v7;
          if (v23 > (int)v39)
          {
            if (icu::MessageFormat::getArgTypeCount(v14))
            {
              icu::Formattable::operator=((uint64_t)v55, (uint64_t)v47);
              v37 = 1;
            }
            else
            {
              v37 = 0;
            }
            v34 = *((_DWORD *)a4 + 2);
            v36 = v6;
            v39 = v23;
            v35 = v38;
          }
          goto LABEL_18;
        }
LABEL_19:
        icu::Formattable::~Formattable((icu::Formattable *)v48);
        v13 = 0;
        v11 = 1;
      }
      while ((v15 & 1) != 0);
    }
    ++v6;
  }
  while (v6 != 7);
  if (v37 || !v39)
  {
    v25 = (uint64_t *)v39;
    if (v39)
      goto LABEL_43;
LABEL_46:
    *((_DWORD *)a4 + 2) = v7;
    *((_DWORD *)a4 + 3) = 0;
    goto LABEL_48;
  }
  if (*(__int16 *)(v35 + 8) < 0)
    v24 = *(_DWORD *)(v35 + 12);
  else
    v24 = *(unsigned __int16 *)(v35 + 8) >> 5;
  if (icu::UnicodeString::doCompare(v35, 0, v24, (uint64_t)"z", 0, 4))
  {
    if (*(__int16 *)(v35 + 8) < 0)
      v26 = *(_DWORD *)(v35 + 12);
    else
      v26 = *(unsigned __int16 *)(v35 + 8) >> 5;
    if (icu::UnicodeString::doCompare(v35, 0, v26, (uint64_t)L"one", 0, 3))
    {
      if (*(__int16 *)(v35 + 8) < 0)
        v28 = *(_DWORD *)(v35 + 12);
      else
        v28 = *(unsigned __int16 *)(v35 + 8) >> 5;
      if (icu::UnicodeString::doCompare(v35, 0, v28, (uint64_t)L"two", 0, 3))
        v27 = 3.0;
      else
        v27 = 2.0;
    }
    else
    {
      v27 = 1.0;
    }
  }
  else
  {
    v27 = 0.0;
  }
  icu::Formattable::Formattable((icu::Formattable *)v48, v27);
  icu::Formattable::operator=((uint64_t)v55, (uint64_t)v48);
  icu::Formattable::~Formattable((icu::Formattable *)v48);
LABEL_43:
  LODWORD(v48[0]) = 0;
  v29 = (icu::Measure *)icu::UMemory::operator new(v25, (icu::UMemory *)0x80, v10);
  if (!v29)
    goto LABEL_46;
  v30 = v29;
  icu::TimeUnitAmount::TimeUnitAmount(v29, (const icu::Formattable *)v55, v36, (UErrorCode *)v48);
  if (SLODWORD(v48[0]) <= 0)
  {
    icu::Formattable::adoptObject(a3, v30);
    *((_DWORD *)a4 + 2) = v34;
    *((_DWORD *)a4 + 3) = -1;
  }
  else
  {
    *((_DWORD *)a4 + 2) = v7;
    *((_DWORD *)a4 + 3) = 0;
    (*(void (**)(icu::UObject *))(*(_QWORD *)v30 + 8))(v30);
  }
LABEL_48:
  icu::Formattable::~Formattable((icu::Formattable *)v55);
}

void icu::TimeUnitFormat::setup(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  uint64_t v4;
  char *v5;
  icu::PluralRules *PluralRules;
  uint64_t Keywords;
  uint64_t v8;
  UErrorCode v9;
  uint64_t v10;
  void *v11;
  _OWORD v12[2];
  uint64_t v13;

  if (*(int *)a2 <= 0)
  {
    v4 = 0;
    v5 = (char *)this + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)&v5[v4]);
      *(_QWORD *)&v5[v4] = 0;
      v4 += 8;
    }
    while (v4 != 56);
  }
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  icu::UVector::UVector(v12, 0, uhash_compareUnicodeString, 6, a2);
  PluralRules = (icu::PluralRules *)icu::MeasureFormat::getPluralRules(this);
  Keywords = icu::PluralRules::getKeywords(PluralRules, a2);
  v8 = Keywords;
  v9 = *a2;
  if (Keywords || v9 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (v9 <= U_ZERO_ERROR)
    {
      v10 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)Keywords + 56))(Keywords, a2);
      if (v10)
      {
        v11 = (void *)v10;
        do
        {
          icu::UVector::addElement((icu::UVector *)v12, v11, a2);
          v11 = (void *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)v8 + 56))(v8, a2);
        }
        while (v11);
      }
      icu::TimeUnitFormat::readFromCurrentLocale(this, 0, "units", (uint64_t)v12, (int *)a2);
      icu::TimeUnitFormat::checkConsistency(this, 0, "units", a2);
      icu::TimeUnitFormat::readFromCurrentLocale(this, 1u, "unitsShort", (uint64_t)v12, (int *)a2);
      icu::TimeUnitFormat::checkConsistency(this, 1u, "unitsShort", a2);
    }
    else if (!Keywords)
    {
      goto LABEL_15;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
LABEL_15:
  icu::UVector::~UVector((icu::UVector *)v12);
}

void icu::TimeUnitFormat::initDataMembers(icu::TimeUnitFormat *this, UErrorCode *a2)
{
  uint64_t v2;
  char *v3;

  if (*(int *)a2 <= 0)
  {
    v2 = 0;
    v3 = (char *)this + 376;
    do
    {
      icu::TimeUnitFormat::deleteHash((uint64_t)this, *(uint64_t ***)&v3[v2]);
      *(_QWORD *)&v3[v2] = 0;
      v2 += 8;
    }
    while (v2 != 56);
  }
}

void icu::TimeUnitFormat::readFromCurrentLocale(icu::MeasureFormat *a1, unsigned int a2, const char *a3, uint64_t a4, int *a5)
{
  char *LocaleID;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v12[4];
  UErrorCode v13;

  if (*a5 <= 0)
  {
    v13 = U_ZERO_ERROR;
    LocaleID = (char *)icu::MeasureFormat::getLocaleID(a1, &v13);
    v10 = ures_open("icudt74l-unit", LocaleID, (int *)&v13);
    v11 = (_QWORD *)ures_getByKey((uint64_t)v10, a3, 0, (int *)&v13);
    ures_getByKey((uint64_t)v11, "duration", (uint64_t)v11, (int *)&v13);
    if (v13 <= U_ZERO_ERROR)
    {
      v12[0] = &off_1E2266F90;
      v12[1] = a1;
      v12[2] = a4;
      v12[3] = a2;
      ures_getAllItemsWithFallback((uint64_t)v11, "", (uint64_t)v12, (int *)&v13);
      icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v12);
    }
    if (v11)
      ures_close(v11);
    if (v10)
      ures_close(v10);
  }
}

void icu::TimeUnitFormat::checkConsistency(icu::MeasureFormat *a1, unsigned int a2, const char *a3, UErrorCode *a4)
{
  icu::PluralRules *PluralRules;
  uint64_t Keywords;
  UErrorCode v10;
  uint64_t v11;
  icu::TimeUnitFormat *v12;
  const icu::UnicodeString *v13;
  uint64_t v14;
  char *v15;
  uint64_t *inited;
  const char *LocaleID;
  uint64_t v18;
  void *v19[7];
  int v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    PluralRules = (icu::PluralRules *)icu::MeasureFormat::getPluralRules(a1);
    Keywords = icu::PluralRules::getKeywords(PluralRules, a4);
    v10 = *a4;
    if (!Keywords && v10 <= U_ZERO_ERROR)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      return;
    }
    v18 = Keywords;
    if (v10 <= U_ZERO_ERROR)
    {
LABEL_9:
      v11 = v18;
      v12 = (icu::TimeUnitFormat *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)v18 + 56))(v18, a4);
      if (!v12)
      {
LABEL_7:
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        return;
      }
      v13 = v12;
      v14 = 0;
      while (1)
      {
        v15 = (char *)a1 + 8 * v14;
        inited = (uint64_t *)*((_QWORD *)v15 + 47);
        if (!inited)
        {
          inited = icu::TimeUnitFormat::initHash(v12, a4);
          *((_QWORD *)v15 + 47) = inited;
          if (*(int *)a4 > 0)
            break;
        }
        v12 = (icu::TimeUnitFormat *)uhash_get(*inited, (uint64_t)v13);
        if (!v12 || !*((_QWORD *)v12 + a2))
        {
          LocaleID = (const char *)icu::MeasureFormat::getLocaleID(a1, a4);
          v21 = 0;
          memset(&v19[1], 0, 48);
          v19[0] = (char *)&v19[1] + 5;
          LODWORD(v19[1]) = 40;
          v20 = 0;
          icu::CharString::appendInvariantChars((icu::CharString *)v19, v13, a4);
          icu::TimeUnitFormat::searchInLocaleChain(a1, a2, a3, LocaleID, v14, (UChar **)v13, (char *)v19[0], inited, (int *)a4);
          if (BYTE4(v19[1]))
            uprv_free(v19[0]);
        }
        if (++v14 == 7)
        {
          if (*(int *)a4 <= 0)
            goto LABEL_9;
          break;
        }
      }
    }
    v11 = v18;
    if (!v18)
      return;
    goto LABEL_7;
  }
}

void sub_18BD85BB0(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void icu::TimeUnitFormat::searchInLocaleChain(icu::MeasureFormat *a1, unsigned int a2, const char *a3, const char *a4, uint64_t a5, UChar **a6, char *a7, uint64_t *a8, int *a9)
{
  UErrorCode *v9;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  _QWORD *v18;
  const UChar *StringByKeyWithFallback;
  unint64_t v20;
  int v21;
  const UChar *v22;
  uint64_t *v23;
  icu::MessageFormat *v24;
  void *v25;
  _QWORD *v26;
  unint64_t v27;
  icu::UnicodeString *v28;
  icu::UnicodeString *v29;
  uint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  unint64_t v33;
  __int16 *v34;
  uint64_t *v35;
  icu::MessageFormat *v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int *v43;
  unsigned int v44;
  uint64_t v46;
  uint64_t v49;
  uint64_t v51;
  __int16 *v52;
  uint64_t v53;
  const UChar *v54;
  char *v55;
  int v56;
  UErrorCode v57;
  char *__s;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[8];
  _OWORD v64[3];
  __int128 v65;
  uint64_t v66;

  v9 = (UErrorCode *)a9;
  v66 = *MEMORY[0x1E0C80C00];
  if (*a9 > 0)
    return;
  v57 = U_ZERO_ERROR;
  v65 = 0u;
  memset(v64, 0, sizeof(v64));
  icu::StringPiece::StringPiece((icu::StringPiece *)&v55, a4);
  *(_QWORD *)&v64[0] = (unint64_t)v64 | 0xD;
  DWORD2(v64[0]) = 40;
  WORD6(v64[0]) = 0;
  DWORD2(v65) = 0;
  icu::CharString::append((icu::CharString *)v64, v55, v56, &v57);
  v44 = a2;
  v46 = a2;
  v51 = a5;
  v49 = (int)a5;
  do
  {
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    __s = (char *)&v59 + 5;
    LODWORD(v59) = 40;
    v62 = 0;
    v63[0] = 0;
    v63[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v63, (uint64_t)&__s);
    ulocimp_getParent(*(char **)&v64[0], (uint64_t)v63, (int *)&v57);
    icu::CharString::operator=((uint64_t)v64, (uint64_t)&__s);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v63);
    if (BYTE4(v59))
      uprv_free(__s);
    v14 = ures_open("icudt74l-unit", *(char **)&v64[0], (int *)&v57);
    v15 = ures_getByKey((uint64_t)v14, a3, 0, (int *)&v57);
    v16 = (_QWORD *)v15;
    v17 = 0;
    if (v57 <= U_ZERO_ERROR)
    {
      if (v51 >= 7)
      {
        v17 = 0;
        v57 = U_ILLEGAL_ARGUMENT_ERROR;
      }
      else
      {
        v17 = off_1E2267000[v49];
      }
    }
    v18 = (_QWORD *)ures_getByKey(v15, v17, 0, (int *)&v57);
    LODWORD(v53) = 0;
    StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v18, a7, (int *)&v53, &v57);
    if (v57 > U_ZERO_ERROR)
    {
      v57 = U_ZERO_ERROR;
      v21 = 2 * (DWORD2(v65) == 0);
      if (!v18)
        goto LABEL_12;
LABEL_11:
      ures_close(v18);
      goto LABEL_12;
    }
    v22 = StringByKeyWithFallback;
    v23 = icu::UMemory::operator new((uint64_t *)v57, (icu::UMemory *)0x330, v20);
    if (v23)
    {
      v24 = (icu::MessageFormat *)v23;
      v54 = v22;
      icu::UnicodeString::UnicodeString(v63, 1, &v54);
      icu::MeasureFormat::getLocale(a1, v9, (icu::Locale *)&__s);
      icu::MessageFormat::MessageFormat(v24, (const icu::UnicodeString *)v63, (const icu::Locale *)&__s, v9);
      icu::Locale::~Locale((icu::Locale *)&__s);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v63);
      if (*(int *)v9 > 0)
        goto LABEL_20;
      v26 = (_QWORD *)uhash_get(*a8, (uint64_t)a6);
      if (v26)
        goto LABEL_24;
      v43 = (int *)v9;
      v26 = uprv_malloc(0x10uLL);
      *v26 = 0;
      v26[1] = 0;
      v41 = *a8;
      v28 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)*a8, (icu::UMemory *)0x40, v27);
      v29 = v28;
      if (v28)
        icu::UnicodeString::UnicodeString(v28, a6);
      v30 = (uint64_t)v29;
      v9 = (UErrorCode *)v43;
      uhash_put(v41, v30, (uint64_t)v26, v43);
      v42 = *v43;
      uprv_free(0);
      if (v42 <= 0)
LABEL_24:
        v26[a2] = v24;
      else
LABEL_20:
        (*(void (**)(icu::MessageFormat *))(*(_QWORD *)v24 + 8))(v24);
    }
    else if (*(int *)v9 <= 0)
    {
      *v9 = U_MEMORY_ALLOCATION_ERROR;
    }
    v21 = 1;
    if (v18)
      goto LABEL_11;
LABEL_12:
    if (v16)
      ures_close(v16);
    if (v14)
      ures_close(v14);
  }
  while (!v21);
  if (v21 == 2)
  {
    if (DWORD2(v65) || strcmp(a3, "unitsShort"))
      goto LABEL_62;
    v59 = 0u;
    v62 = 0;
    v61 = 0u;
    v60 = 0u;
    __s = (char *)&v59 + 5;
    LODWORD(v59) = 40;
    icu::CharString::append((icu::CharString *)&__s, a4, -1, v9);
    icu::CharString::append((icu::CharString *)&__s, 95, v9);
    icu::TimeUnitFormat::searchInLocaleChain(a1, a2, "units", __s, v51, a6, a7, a8, v9);
    v31 = 0;
    if (*(int *)v9 <= 0)
    {
      v32 = uhash_get(*a8, (uint64_t)a6);
      v31 = !v32 || !*(_QWORD *)(v32 + 8 * v46);
    }
    if (BYTE4(v59))
      uprv_free(__s);
    if (v31)
    {
LABEL_62:
      if (strcmp(a7, "other"))
      {
        icu::TimeUnitFormat::searchInLocaleChain(a1, v44, a3, a4, v51, a6, "other", a8, v9);
        goto LABEL_58;
      }
      v53 = 0;
      if (v51 > 6)
      {
LABEL_47:
        if (*(int *)v9 <= 0)
        {
          v38 = uhash_get(*a8, (uint64_t)a6);
          if (!v38)
          {
            v39 = uprv_malloc(0x10uLL);
            if (!v39)
            {
              *v9 = U_MEMORY_ALLOCATION_ERROR;
              uprv_free(0);
              goto LABEL_56;
            }
            v38 = (uint64_t)v39;
            *v39 = 0;
            v39[1] = 0;
            sub_18BBB11FC(a8, a6, (uint64_t)v39, (int *)v9);
            uprv_free(0);
          }
          if (*(int *)v9 <= 0)
          {
            v40 = v53;
            v53 = 0;
            *(_QWORD *)(v38 + 8 * v46) = v40;
          }
        }
      }
      else
      {
        v34 = off_1E2266FC8[v49];
        v35 = icu::UMemory::operator new((uint64_t *)off_1E2266FC8, (icu::UMemory *)0x330, v33);
        if (v35)
        {
          v36 = (icu::MessageFormat *)v35;
          v52 = v34;
          icu::UnicodeString::UnicodeString(v63, 1, &v52);
          icu::MeasureFormat::getLocale(a1, v9, (icu::Locale *)&__s);
          icu::MessageFormat::MessageFormat(v36, (const icu::UnicodeString *)v63, (const icu::Locale *)&__s, v9);
          sub_18BBB709C((uint64_t)&v53, (uint64_t)v36, (int *)v9);
          icu::Locale::~Locale((icu::Locale *)&__s);
          icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v63);
          goto LABEL_47;
        }
        if (*(int *)v9 <= 0)
        {
          *v9 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_58;
        }
      }
LABEL_56:
      if (v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    }
  }
LABEL_58:
  if (BYTE12(v64[0]))
    uprv_free(*(void **)&v64[0]);
}

char *icu::TimeUnitFormat::getTimeUnitName(unsigned int a1, int *a2)
{
  char *result;

  if (*a2 > 0)
    return 0;
  if (a1 < 7)
    return off_1E2267000[a1];
  result = 0;
  *a2 = 1;
  return result;
}

void icu::TimeUnitFormat::setLocale(icu::TimeUnitFormat *this, const char **a2, UErrorCode *a3)
{
  if (icu::MeasureFormat::setMeasureFormatLocale(this, a2, a3))
    icu::TimeUnitFormat::setup(this, a3);
}

icu::SharedObject *icu::TimeUnitFormat::setNumberFormat(icu::SharedObject *this, const icu::NumberFormat *a2, UErrorCode *a3)
{
  icu::SharedObject *v4;
  unint64_t v5;

  if (*(int *)a3 <= 0)
  {
    v4 = this;
    v5 = (*(uint64_t (**)(const icu::NumberFormat *))(*(_QWORD *)a2 + 32))(a2);
    return icu::MeasureFormat::adoptNumberFormat(v4, v5, a3);
  }
  return this;
}

uint64_t sub_18BD86290(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, *a2);
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a1[1] + 24))(a1[1], a2[1]);
  return result;
}

void ****sub_18BD862DC(void ****result, char *a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  void ****v7;
  int v8;
  char *v9;
  icu::TimeUnitFormat *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t *inited;
  uint64_t *v14;
  unsigned int v15;
  icu::UnicodeString *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  uint64_t *v20;
  icu::MessageFormat *v21;
  void *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  icu::UnicodeString *v27;
  uint64_t v28;
  uint64_t v30;
  void ***v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void ***v35;
  _OWORD v36[2];
  uint64_t v37;
  void ***v38;
  _OWORD v39[2];
  uint64_t v40;
  char *__s1;
  _QWORD v42[28];
  UChar *v43[8];
  _BYTE v44[72];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  __s1 = a2;
  if (*((_BYTE *)result + 28))
    return result;
  v7 = result;
  *((_BYTE *)result + 28) = 1;
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  result = (void ****)(*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v39, a3, a5);
  if (*(int *)a5 > 0)
    return result;
  result = (void ****)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v39, 0, (const char **)&__s1, a3);
  if (!(_DWORD)result)
    return result;
  v8 = 0;
  while (1)
  {
    v9 = __s1;
    if (!__s1)
      goto LABEL_42;
    v10 = (icu::TimeUnitFormat *)strcmp(__s1, "year");
    if (!(_DWORD)v10)
    {
      v11 = 0;
      goto LABEL_20;
    }
    v10 = (icu::TimeUnitFormat *)strcmp(v9, "month");
    if (!(_DWORD)v10)
    {
      v11 = 1;
      goto LABEL_20;
    }
    v10 = (icu::TimeUnitFormat *)strcmp(v9, "day");
    if (!(_DWORD)v10)
    {
      v11 = 2;
      goto LABEL_20;
    }
    v10 = (icu::TimeUnitFormat *)strcmp(v9, "hour");
    if (!(_DWORD)v10)
    {
      v11 = 4;
      goto LABEL_20;
    }
    v10 = (icu::TimeUnitFormat *)strcmp(v9, "minute");
    if (!(_DWORD)v10)
    {
      v11 = 5;
      goto LABEL_20;
    }
    v10 = (icu::TimeUnitFormat *)strcmp(v9, "second");
    if (!(_DWORD)v10)
      break;
    v10 = (icu::TimeUnitFormat *)strcmp(v9, "week");
    if (!(_DWORD)v10)
    {
      v11 = 3;
      goto LABEL_20;
    }
LABEL_42:
    result = (void ****)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v39, ++v8, (const char **)&__s1, a3);
    if (!(_DWORD)result)
      return result;
  }
  v11 = 6;
LABEL_20:
  v38 = 0;
  v12 = 0uLL;
  v35 = (void ***)v7[1][v11 + 47];
  if (!v35)
  {
    inited = icu::TimeUnitFormat::initHash(v10, a5);
    sub_18BD86754(&v38, (void ***)inited, (int *)a5);
    if (*(int *)a5 >= 1)
      return sub_18BCAF47C(&v38);
    v35 = v38;
    v12 = 0uLL;
  }
  v37 = 0;
  v36[0] = v12;
  v36[1] = v12;
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v36, a3, a5);
  if (*(int *)a5 > 0)
  {
LABEL_41:
    sub_18BCAF47C(&v38);
    goto LABEL_42;
  }
  v34 = v11;
  v14 = (uint64_t *)v35;
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, 0, (const char **)&__s1, a3))
  {
LABEL_39:
    v30 = (uint64_t)&v7[1][v34];
    if (!*(_QWORD *)(v30 + 376))
    {
      v31 = v38;
      v38 = 0;
      *(_QWORD *)(v30 + 376) = v31;
    }
    goto LABEL_41;
  }
  v15 = 1;
  while (1)
  {
    *a5 = U_ZERO_ERROR;
    memset(v44, 0, 64);
    LODWORD(v43[0]) = 0;
    v42[0] = (*(uint64_t (**)(icu::ResourceValue *, UChar **, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, v43, a5);
    v16 = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(v44, 1, v42);
    v17 = (void *)*(unsigned int *)a5;
    if ((int)v17 < 1)
      break;
LABEL_38:
    icu::UnicodeString::~UnicodeString(v17, v16);
    if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, v15++, (const char **)&__s1, a3))
      goto LABEL_39;
  }
  memset(v43, 0, sizeof(v43));
  icu::UnicodeString::UnicodeString(v43, __s1, 0xFFFFFFFFLL, 0);
  if ((icu::UVector::indexOf((icu::UVector *)v7[2], (uint64_t)v43, 0) & 0x80000000) != 0)
  {
LABEL_37:
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v43);
    v16 = (icu::UnicodeString *)v44;
    goto LABEL_38;
  }
  v20 = icu::UMemory::operator new((uint64_t *)v19, (icu::UMemory *)0x330, v18);
  if (v20)
  {
    v21 = (icu::MessageFormat *)v20;
    icu::MeasureFormat::getLocale((icu::MeasureFormat *)v7[1], a5, (icu::Locale *)v42);
    icu::MessageFormat::MessageFormat(v21, (const icu::UnicodeString *)v44, (const icu::Locale *)v42, a5);
    icu::Locale::~Locale((icu::Locale *)v42);
    if (*(int *)a5 > 0)
      goto LABEL_48;
    v22 = (void *)uhash_get(*v14, (uint64_t)v43);
    if (!v22)
    {
      v23 = uprv_malloc(0x10uLL);
      v22 = v23;
      if (!v23)
      {
        *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_47:
        uprv_free(v22);
LABEL_48:
        (*(void (**)(icu::MessageFormat *))(*(_QWORD *)v21 + 8))(v21);
        goto LABEL_49;
      }
      *v23 = 0;
      v23[1] = 0;
      v26 = *v14;
      v27 = (icu::UnicodeString *)icu::UMemory::operator new(v25, (icu::UMemory *)0x40, v24);
      v28 = (uint64_t)v27;
      if (v27)
        icu::UnicodeString::UnicodeString(v27, v43);
      uhash_put(v26, v28, (uint64_t)v22, (int *)a5);
      if (*(int *)a5 >= 1)
        goto LABEL_47;
      uprv_free(0);
      v14 = (uint64_t *)v35;
    }
    v19 = (void *)*((unsigned int *)v7 + 6);
    *((_QWORD *)v22 + (_QWORD)v19) = v21;
    goto LABEL_37;
  }
  v32 = *(unsigned int *)a5;
  if ((int)v32 <= 0)
  {
    v32 = 7;
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }
LABEL_49:
  icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)v43);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  return sub_18BCAF47C(&v38);
}

void sub_18BD86754(void ****a1, void ***a2, int *a3)
{
  void ***v6;

  if (*a3 <= 0)
  {
    v6 = *a1;
    if (*a1)
    {
      if (*v6)
        uhash_close(*v6);
      icu::UMemory::operator delete(v6);
    }
    *a1 = a2;
    if (!a2)
      *a3 = 7;
  }
  else if (a2)
  {
    if (*a2)
      uhash_close(*a2);
    icu::UMemory::operator delete(a2);
  }
}

void *icu::LowercaseTransliterator::getStaticClassID(icu::LowercaseTransliterator *this)
{
  return &unk_1EE009FB4;
}

void *sub_18BD867E8()
{
  return &unk_1EE009FB4;
}

icu::Transliterator *sub_18BD867F4(icu::Transliterator *a1)
{
  void *v2;
  const char *v4;
  UChar *v5[9];

  v5[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  sub_18BC8C53C(a1, v5, (uint64_t)ucase_toFullLower);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(_QWORD *)a1 = &off_1E2267048;
  return a1;
}

void sub_18BD868A4(icu::Transliterator *a1)
{
  void *v1;

  icu::Transliterator::~Transliterator(a1);
  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18BD868B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *result;

  result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    result = sub_18BC8C57C(result, a1);
    *(_QWORD *)result = &off_1E2267048;
  }
  return result;
}

void *icu::UppercaseTransliterator::getStaticClassID(icu::UppercaseTransliterator *this)
{
  return &unk_1EE009FB5;
}

void *sub_18BD86900()
{
  return &unk_1EE009FB5;
}

icu::Transliterator *sub_18BD8690C(icu::Transliterator *a1)
{
  void *v2;
  const char *v4;
  UChar *v5[9];

  v5[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v4 = "A";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  sub_18BC8C53C(a1, v5, (uint64_t)ucase_toFullUpper);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(_QWORD *)a1 = &off_1E22670F8;
  return a1;
}

void sub_18BD869BC(icu::Transliterator *a1)
{
  void *v1;

  icu::Transliterator::~Transliterator(a1);
  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18BD869D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *result;

  result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    result = sub_18BC8C57C(result, a1);
    *(_QWORD *)result = &off_1E22670F8;
  }
  return result;
}

void *icu::Transliterator::getStaticClassID(icu::Transliterator *this)
{
  return &unk_1EE009FB8;
}

icu::Transliterator *icu::Transliterator::Transliterator(icu::Transliterator *this, UChar **a2, icu::UnicodeFilter *a3)
{
  char *v5;
  icu::UnicodeString *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  __int16 v11;

  *(_QWORD *)this = off_1E22671A8;
  v5 = (char *)this + 8;
  v6 = icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)this + 8), a2);
  *((_QWORD *)this + 9) = a3;
  *((_DWORD *)this + 20) = 0;
  v11 = 0;
  icu::UnicodeString::doAppend((uint64_t)v6, (uint64_t)&v11, 0, 1);
  v7 = *((unsigned __int16 *)this + 8);
  if (*((__int16 *)this + 8) < 0)
    v8 = *((_DWORD *)this + 5);
  else
    v8 = v7 >> 5;
  v9 = v8 - 1;
  if ((v7 & 1) != 0 && v8 == 1)
  {
    icu::UnicodeString::unBogus((uint64_t)v5);
  }
  else if (v8 > v9)
  {
    if (v9 > 1023)
    {
      *((_WORD *)this + 8) = v7 | 0xFFE0;
      *((_DWORD *)this + 5) = v9;
    }
    else
    {
      *((_WORD *)this + 8) = *((_WORD *)this + 8) & 0x1F | (32 * v9);
    }
  }
  return this;
}

void icu::Transliterator::~Transliterator(icu::Transliterator *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22671A8;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeString::~UnicodeString((icu::Transliterator *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

icu::Transliterator *icu::Transliterator::Transliterator(icu::Transliterator *this, UChar **a2)
{
  char *v4;
  icu::UnicodeString *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  UChar *v9;
  __int16 v11;

  *(_QWORD *)this = off_1E22671A8;
  v4 = (char *)this + 8;
  v5 = icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)this + 8), a2 + 1);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  v11 = 0;
  icu::UnicodeString::doAppend((uint64_t)v5, (uint64_t)&v11, 0, 1);
  v6 = *((unsigned __int16 *)this + 8);
  if (*((__int16 *)this + 8) < 0)
    v7 = *((_DWORD *)this + 5);
  else
    v7 = v6 >> 5;
  v8 = v7 - 1;
  if ((v6 & 1) != 0 && v7 == 1)
  {
    icu::UnicodeString::unBogus((uint64_t)v4);
  }
  else if (v7 > v8)
  {
    if (v8 > 1023)
    {
      *((_WORD *)this + 8) = v6 | 0xFFE0;
      *((_DWORD *)this + 5) = v8;
    }
    else
    {
      *((_WORD *)this + 8) = *((_WORD *)this + 8) & 0x1F | (32 * v8);
    }
  }
  v9 = a2[9];
  if (v9)
    *((_QWORD *)this + 9) = (*(uint64_t (**)(UChar *))(*(_QWORD *)v9 + 24))(v9);
  return this;
}

uint64_t icu::Transliterator::clone(icu::Transliterator *this)
{
  return 0;
}

uint64_t icu::Transliterator::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + 8));
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    v4 = *(_QWORD *)(a2 + 72);
    if (v4)
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    else
      v5 = 0;
    v6 = *(_QWORD *)(a1 + 72);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(a1 + 72) = v5;
  }
  return a1;
}

uint64_t icu::Transliterator::adoptFilter(icu::Transliterator *this, icu::UnicodeFilter *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = a2;
  return result;
}

uint64_t icu::Transliterator::transliterate(icu::Transliterator *this, icu::Replaceable *a2, int a3, int a4)
{
  uint64_t result;
  _DWORD v9[3];
  unsigned int v10;

  result = 0xFFFFFFFFLL;
  if ((a3 & 0x80000000) == 0 && a4 >= a3)
  {
    if ((*(int (**)(icu::Replaceable *))(*(_QWORD *)a2 + 64))(a2) >= a4)
    {
      v9[0] = a3;
      v9[1] = a4;
      v9[2] = a3;
      v10 = a4;
      (*(void (**)(icu::Transliterator *, icu::Replaceable *, _DWORD *, _QWORD, uint64_t))(*(_QWORD *)this + 96))(this, a2, v9, 0, 1);
      return v10;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t icu::Transliterator::transliterate(icu::Transliterator *this, icu::Replaceable *a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(icu::Replaceable *))(*(_QWORD *)a2 + 64))(a2);
  return (*(uint64_t (**)(icu::Transliterator *, icu::Replaceable *, _QWORD, uint64_t))(*(_QWORD *)this + 32))(this, a2, 0, v4);
}

uint64_t icu::Transliterator::_transliterate(uint64_t result, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;

  if (*a5 <= 0)
  {
    v9 = result;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    if (*a3 < 0
      || (v10 = a3[2], v10 < *a3)
      || (v11 = a3[3], (int)v11 < v10)
      || (v12 = a3[1], v12 < (int)v11)
      || v12 > (int)result)
    {
      *a5 = 1;
    }
    else
    {
      if (a4)
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11, a3[3], a4);
        if (*(__int16 *)(a4 + 8) < 0)
          v13 = *(_DWORD *)(a4 + 12);
        else
          v13 = *(unsigned __int16 *)(a4 + 8) >> 5;
        LODWORD(v11) = a3[3] + v13;
        a3[3] = v11;
        if (*(__int16 *)(a4 + 8) < 0)
          v14 = *(_DWORD *)(a4 + 12);
        else
          v14 = *(unsigned __int16 *)(a4 + 8) >> 5;
        a3[1] += v14;
      }
      if ((int)v11 < 1)
        return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, a2, a3, 1, 1);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
      if ((result & 0xFC00) != 0xD800)
        return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, uint64_t))(*(_QWORD *)v9 + 96))(v9, a2, a3, 1, 1);
    }
  }
  return result;
}

void *icu::Transliterator::transliterate(uint64_t a1, uint64_t a2, int *a3, unsigned int a4, int *a5)
{
  void *v9;
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  icu::UnicodeString::UnicodeString((uint64_t)v11, a4);
  icu::Transliterator::_transliterate(a1, a2, a3, (uint64_t)v11, a5);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
}

uint64_t icu::Transliterator::transliterate(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  return icu::Transliterator::_transliterate(a1, a2, a3, 0, a4);
}

uint64_t icu::Transliterator::finishTransliteration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  if ((*a3 & 0x80000000) == 0)
  {
    v7 = a3[2];
    if (v7 >= *a3)
    {
      v8 = a3[3];
      if (v8 >= v7)
      {
        v9 = a3[1];
        if (v9 >= v8 && v9 <= (int)result)
          return (*(uint64_t (**)(uint64_t, uint64_t, int *, _QWORD, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, a3, 0, 1);
      }
    }
  }
  return result;
}

void icu::Transliterator::filteredTransliterate(_QWORD *a1, uint64_t a2, _DWORD *a3, uint64_t a4, int a5)
{
  int v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v32;
  int v33;
  int v34;
  char v35;
  int v36;
  int v37;
  void (**v38)(icu::UnicodeString *__hidden);
  __int16 v39;
  uint64_t v40;

  v5 = a5;
  v6 = a4;
  v40 = *MEMORY[0x1E0C80C00];
  v10 = a1[9];
  if (!a5 && !v10)
  {
    (*(void (**)(_QWORD *, uint64_t, _DWORD *, uint64_t))(*a1 + 80))(a1, a2, a3, a4);
    return;
  }
  v11 = a3[2];
  v12 = a3[3];
  v32 = a4;
  do
  {
    if (v10)
    {
      while ((int)v11 < v12)
      {
        v13 = a1[9];
        v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v11);
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 56))(v13, v14);
        v11 = a3[2];
        if (v15)
          break;
        if (v14 < 0x10000)
          v16 = 1;
        else
          v16 = 2;
        v11 = (v11 + v16);
        a3[2] = v11;
      }
      a3[3] = v11;
      if ((int)v11 < v12)
      {
        do
        {
          v17 = a1[9];
          v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v11);
          if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 56))(v17, v18))
            break;
          v19 = v18 < 0x10000 ? 1 : 2;
          v11 = (a3[3] + v19);
          a3[3] = v11;
        }
        while ((int)v11 < v12);
        v11 = a3[2];
      }
    }
    v20 = a3[3];
    if ((_DWORD)v20 == (_DWORD)v11)
      break;
    if ((int)v20 >= v12)
      v21 = v6;
    else
      v21 = 0;
    if (v5 && v21)
    {
      v34 = v20 - v11;
      v35 = v21;
      v36 = v12;
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v11, v20, v22);
      v23 = a3[2];
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 80))(a2, v23) < 0x10000)
        v24 = 1;
      else
        v24 = 2;
      v25 = v24 + v23;
      v33 = v22;
      if ((int)v25 <= (int)v20)
      {
        v37 = 0;
        v28 = 0;
        do
        {
          v28 += v24;
          a3[3] = v25;
          (*(void (**)(_QWORD *, uint64_t, _DWORD *, uint64_t))(*a1 + 80))(a1, a2, a3, 1);
          v29 = a3[3];
          v30 = v29 - v25;
          if (a3[2] == v29)
          {
            LODWORD(v22) = v29 - v25 + v22 + v28;
            LODWORD(v20) = v30 + v20;
            v37 += v30;
            v11 = a3[3];
            v25 = v11;
            v28 = 0;
          }
          else
          {
            v38 = off_1E2256B38;
            v39 = 2;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11);
            icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v38);
            (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 40))(a2, (v22 - v25 + v11), (v22 - v25 + v11 + v28), v11);
            a3[2] = v11;
            a3[3] = v25;
            a3[1] -= v30;
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v25) < 0x10000)
            v24 = 1;
          else
            v24 = 2;
          v25 = (v24 + v25);
        }
        while ((int)v25 <= (int)v20);
      }
      else
      {
        v37 = 0;
      }
      v27 = v37;
      v38 = off_1E2256B38;
      v39 = 2;
      (*(void (**)(uint64_t, _QWORD, _QWORD, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 32))(a2, (v37 + v33), (v34 + v37 + v33), &v38);
      icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v38);
      v26 = v11;
      v5 = a5;
      v6 = v32;
      v21 = v35;
      v12 = v36;
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t, _DWORD *, _QWORD))(*a1 + 80))(a1, a2, a3, v21);
      v11 = a3[2];
      v26 = a3[3];
      v27 = v26 - v20;
      if (v6 || (_DWORD)v11 == (_DWORD)v26)
        goto LABEL_43;
    }
    a3[2] = v26;
    v11 = v26;
LABEL_43:
    v12 += v27;
    v10 = a1[9];
  }
  while (v10 && !v21);
  a3[3] = v12;
}

uint64_t icu::Transliterator::filteredTransliterate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(a1, a2, a3, a4, 0);
}

uint64_t icu::Transliterator::setMaximumContextLength(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t icu::Transliterator::getID(icu::Transliterator *this)
{
  return (uint64_t)this + 8;
}

const icu::Locale *icu::Transliterator::getDisplayName(icu::Transliterator *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  uint64_t *Default;
  icu::UnicodeString *v6;

  Default = icu::Locale::getDefault(this);
  return icu::Transliterator::getDisplayName(this, (char **)Default, a2, v6);
}

const icu::Locale *icu::Transliterator::getDisplayName(icu::Transliterator *this, char **a2, const icu::Locale *a3, icu::UnicodeString *a4)
{
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _WORD *v15;
  int v16;
  void *v17;
  unint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _WORD *v27;
  int v28;
  void *v29;
  UErrorCode v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  char v34;
  _QWORD v35[3];
  UErrorCode v36;
  _QWORD v37[14];
  UChar *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _BYTE v43[112];
  _BYTE v44[112];
  _BYTE v45[112];
  _WORD v46[408];
  UChar *v47[9];
  _DWORD v48[7];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[28];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void (**v63)(icu::UnicodeString *__hidden);
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  UChar *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  UChar *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v36 = U_ZERO_ERROR;
  memset(v35, 0, sizeof(v35));
  icu::ResourceBundle::ResourceBundle((icu::ResourceBundle *)v35, "icudt74l-translit", a2, &v36);
  v7 = *((unsigned __int16 *)a3 + 4);
  if ((v7 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
  }
  else
  {
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *((_DWORD *)a3 + 3);
    if (v8)
      *((_WORD *)a3 + 4) &= 0x1Fu;
  }
  v74 = 0u;
  v77 = 0;
  v76 = 0u;
  v75 = 0u;
  LOWORD(v74) = 2;
  v69 = 0u;
  v72 = 0;
  v73 = (UChar *)off_1E2256B38;
  v71 = 0u;
  v70 = 0u;
  LOWORD(v69) = 2;
  v64 = 0u;
  v67 = 0;
  v68 = (UChar *)off_1E2256B38;
  v66 = 0u;
  v65 = 0u;
  v63 = off_1E2256B38;
  LOWORD(v64) = 2;
  v34 = 0;
  sub_18BD8DFDC((uint64_t)this, (icu::UnicodeString *)&v73, (uint64_t)&v68, (uint64_t)&v63, &v34);
  LODWORD(v9) = (unsigned __int16)v69 >> 5;
  if ((v69 & 0x8000u) == 0)
    v9 = v9;
  else
    v9 = DWORD1(v69);
  if ((int)v9 >= 1)
  {
    v10 = (unsigned __int16)v64 >> 5;
    if ((v64 & 0x8000u) != 0)
      v10 = DWORD1(v64);
    if (v10 >= 1)
    {
      v46[0] = 47;
      icu::UnicodeString::doReplace((uint64_t)&v63, 0, 0, (uint64_t)v46, 0, 1);
    }
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v59 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v59, &v73);
    v46[0] = 45;
    v11 = icu::UnicodeString::doAppend((uint64_t)&v59, (uint64_t)v46, 0, 1);
    if ((v69 & 0x8000u) == 0)
      v12 = (unsigned __int16)v69 >> 5;
    else
      v12 = DWORD1(v69);
    v13 = icu::UnicodeString::doAppend(v11, (const icu::UnicodeString *)&v68, 0, v12);
    if ((v64 & 0x8000u) == 0)
      v14 = (unsigned __int16)v64 >> 5;
    else
      v14 = DWORD1(v64);
    icu::UnicodeString::doAppend(v13, (const icu::UnicodeString *)&v63, 0, v14);
    if ((BYTE8(v59) & 0x11) != 0)
    {
      v15 = 0;
    }
    else if ((BYTE8(v59) & 2) != 0)
    {
      v15 = (_WORD *)((unint64_t)&v59 | 0xA);
    }
    else
    {
      v15 = (_WORD *)*((_QWORD *)&v60 + 1);
    }
    if ((SWORD4(v59) & 0x8000u) == 0)
      v16 = WORD4(v59) >> 5;
    else
      v16 = HIDWORD(v59);
    if (uprv_isInvariantUString(v15, v16))
    {
      memset(v58, 0, sizeof(v58));
      v57 = 0u;
      v56 = 0u;
      v55 = 0u;
      v54 = 0u;
      v53 = 0u;
      v52 = 0u;
      v51 = 0u;
      v50 = 0u;
      v49 = 0u;
      strcpy((char *)v48, "%Translit%%");
      *(_OWORD *)&v48[3] = 0u;
      icu::UnicodeString::extract((uint64_t)&v59, 0, 189, (char *)&v48[2] + 3, 189);
      memset(v47, 0, 64);
      icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, (const char *)v48, &v36, (uint64_t)v47);
      if (v36 <= U_ZERO_ERROR)
      {
        v23 = LOWORD(v47[1]) >> 5;
        if (SLOWORD(v47[1]) < 0)
          v23 = HIDWORD(v47[1]);
        if (v23)
        {
          a3 = icu::UnicodeString::operator=((UChar **)a3, v47);
LABEL_68:
          icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v47);
          goto LABEL_35;
        }
      }
      v36 = U_ZERO_ERROR;
      icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, "TransliteratorNamePattern", &v36, (uint64_t)v46);
      icu::UnicodeString::operator=((icu::UnicodeString *)v47, (icu::UnicodeString *)v46);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v46);
      v18 = v36;
      if (v36 <= U_ZERO_ERROR)
      {
        LODWORD(v18) = LOWORD(v47[1]) >> 5;
        v18 = SLOWORD(v47[1]) >= 0 ? v18 : HIDWORD(v47[1]);
        if ((_DWORD)v18)
        {
          bzero(v46, 0x330uLL);
          icu::MessageFormat::MessageFormat((icu::MessageFormat *)v46, (const icu::UnicodeString *)v47, (const icu::Locale *)a2, &v36);
          v24 = 0;
          memset(v45, 0, sizeof(v45));
          memset(v44, 0, sizeof(v44));
          memset(v43, 0, sizeof(v43));
          do
          {
            icu::Formattable::Formattable((icu::Formattable *)&v43[v24]);
            v24 += 112;
          }
          while (v24 != 336);
          icu::Formattable::setLong((icu::Formattable *)v43, 2);
          icu::Formattable::setString((icu::Formattable *)v44, &v73);
          icu::Formattable::setString((icu::Formattable *)v45, &v68);
          v25 = 0;
          v39 = 0u;
          v42 = 0;
          v41 = 0u;
          v40 = 0u;
          v38 = (UChar *)off_1E2256B38;
          LOWORD(v39) = 2;
          do
          {
            v36 = U_ZERO_ERROR;
            strcpy((char *)v48, "%Translit%");
            icu::UnicodeString::operator=(&v38, *(UChar ***)&v44[v25 + 8]);
            v26 = (char *)v40;
            if ((v39 & 2) != 0)
              v26 = (char *)&v39 + 2;
            if ((v39 & 0x11) != 0)
              v27 = 0;
            else
              v27 = v26;
            if ((v39 & 0x8000u) == 0)
              v28 = (unsigned __int16)v39 >> 5;
            else
              v28 = DWORD1(v39);
            if (uprv_isInvariantUString(v27, v28))
            {
              icu::UnicodeString::extract((uint64_t)&v38, 0, 189, (char *)&v48[2] + 2, 189);
              icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v35, (const char *)v48, &v36, (uint64_t)v37);
              icu::UnicodeString::operator=((icu::UnicodeString *)v47, (icu::UnicodeString *)v37);
              icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v37);
              if (v36 <= U_ZERO_ERROR)
              {
                icu::Formattable::Formattable((icu::Formattable *)v37, (const icu::UnicodeString *)v47);
                icu::Formattable::operator=((uint64_t)&v43[v25 + 112], (uint64_t)v37);
                icu::Formattable::~Formattable((icu::Formattable *)v37);
              }
            }
            v25 += 112;
          }
          while (v25 != 224);
          v36 = U_ZERO_ERROR;
          v37[2] = 0;
          v37[0] = off_1E225EF78;
          v37[1] = 0xFFFFFFFFLL;
          icu::MessageFormat::format((icu::MessageFormat *)v46, (const icu::Formattable *)v43, 3u, a3, (icu::FieldPosition *)v37, &v36);
          v30 = v36;
          if (v36 <= U_ZERO_ERROR)
          {
            if ((v64 & 0x8000u) == 0)
              v31 = (unsigned __int16)v64 >> 5;
            else
              v31 = DWORD1(v64);
            icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)&v63, 0, v31);
          }
          icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v37);
          icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v38);
          for (i = 224; i != -112; i -= 112)
            icu::Formattable::~Formattable((icu::Formattable *)&v43[i]);
          icu::MessageFormat::~MessageFormat((icu::MessageFormat *)v46);
          if (v30 <= U_ZERO_ERROR)
            goto LABEL_68;
        }
      }
      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v47);
    }
    icu::UnicodeString::operator=((UChar **)a3, (UChar **)&v59);
LABEL_35:
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v59);
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v63);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v68);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v73);
  icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v35);
  return a3;
}

uint64_t icu::Transliterator::getFilter(icu::Transliterator *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t icu::Transliterator::orphanFilter(icu::Transliterator *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  return v1;
}

uint64_t icu::Transliterator::createInverse(icu::Transliterator *this, UErrorCode *a2)
{
  UParseError v3;

  memset(&v3, 0, sizeof(v3));
  return icu::Transliterator::createInstance((uint64_t)this + 8, 1, &v3, a2);
}

uint64_t icu::Transliterator::createInstance(uint64_t a1, int a2, UParseError *a3, UErrorCode *a4)
{
  uint64_t v4;
  icu::UnicodeSet *v9;
  unint64_t v10;
  icu::UnicodeSet *v11;
  void *v12;
  void *v13;
  uint64_t *v15;
  int32_t v16;
  icu::CompoundTransliterator *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  icu::UnicodeSet *v22;
  _OWORD v23[2];
  uint64_t v24;
  __int16 v25;
  UChar *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    v27 = 0u;
    v28 = 0u;
    v30 = 0;
    v29 = 0u;
    v26 = (UChar *)off_1E2256B38;
    LOWORD(v27) = 2;
    v24 = 0;
    memset(v23, 0, sizeof(v23));
    icu::UVector::UVector((icu::UVector *)v23, a4);
    v4 = 0;
    if (*(int *)a4 > 0)
    {
LABEL_11:
      icu::UVector::~UVector((icu::UVector *)v23);
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v26);
      return v4;
    }
    v22 = 0;
    if (!sub_18BD8DA90(a1, a2, (uint64_t)&v26, (icu::UVector *)v23, &v22))
    {
      *a4 = U_INVALID_ID;
      v11 = v22;
      if (v22)
        goto LABEL_9;
      goto LABEL_10;
    }
    v9 = v22;
    sub_18BD8DDC4((icu::UVector *)v23, a4);
    if (*(int *)a4 > 0)
    {
LABEL_6:
      if (v9)
      {
        v11 = v9;
LABEL_9:
        icu::UnicodeSet::~UnicodeSet(v11);
        icu::UMemory::operator delete(v12);
      }
LABEL_10:
      v4 = 0;
      goto LABEL_11;
    }
    v15 = (uint64_t *)DWORD2(v23[0]);
    if (SDWORD2(v23[0]) <= 1
      && ((v27 & 0x8000u) == 0 ? (v16 = (unsigned __int16)v27 >> 5) : (v16 = DWORD1(v27)),
          (icu::UnicodeString::doIndexOf((uint64_t)&v26, 0x3Bu, 0, v16) & 0x80000000) != 0))
    {
      v4 = icu::UVector::elementAt((icu::UVector *)v23, 0);
      if (v4)
        goto LABEL_20;
    }
    else
    {
      v17 = (icu::CompoundTransliterator *)icu::UMemory::operator new(v15, (icu::UMemory *)0x68, v10);
      if (v17)
      {
        v4 = (uint64_t)v17;
        icu::CompoundTransliterator::CompoundTransliterator(v17, (icu::UVector *)v23, a3, a4);
LABEL_20:
        icu::UnicodeString::operator=((UChar **)(v4 + 8), &v26);
        v25 = 0;
        icu::UnicodeString::doAppend(v4 + 8, (uint64_t)&v25, 0, 1);
        v18 = *(unsigned __int16 *)(v4 + 16);
        if (*(__int16 *)(v4 + 16) < 0)
          v19 = *(_DWORD *)(v4 + 20);
        else
          v19 = v18 >> 5;
        v20 = v19 - 1;
        if ((v18 & 1) != 0 && v19 == 1)
        {
          icu::UnicodeString::unBogus(v4 + 8);
        }
        else if (v19 > v20)
        {
          if (v20 > 1023)
          {
            *(_WORD *)(v4 + 16) = v18 | 0xFFE0;
            *(_DWORD *)(v4 + 20) = v20;
          }
          else
          {
            *(_WORD *)(v4 + 16) = *(_WORD *)(v4 + 16) & 0x1F | (32 * v20);
          }
        }
        if (v9)
        {
          v21 = *(_QWORD *)(v4 + 72);
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          *(_QWORD *)(v4 + 72) = v9;
        }
        goto LABEL_11;
      }
    }
    if (*(int *)a4 <= 0)
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_6;
  }
  return 0;
}

uint64_t icu::Transliterator::createInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  UParseError v4;

  memset(&v4, 0, sizeof(v4));
  return icu::Transliterator::createInstance(a1, a2, &v4, a3);
}

UChar **icu::Transliterator::createBasicInstance(UChar **this, UChar **a2, const icu::UnicodeString *a3)
{
  UErrorCode *v5;
  uint64_t v6;
  UChar **v7;
  _QWORD *v8;
  _QWORD *v10;
  UErrorCode *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17[2];
  UErrorCode v18;
  UParseError v19;
  _OWORD v20[31];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  memset(&v19, 0, sizeof(v19));
  v18 = U_ZERO_ERROR;
  *(_QWORD *)v17 = 0;
  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v6 = qword_1EE009FC0;
  if (qword_1EE009FC0)
    goto LABEL_4;
  if (icu::Transliterator::initializeRegistry(&v18, v5))
  {
    v6 = qword_1EE009FC0;
LABEL_4:
    v7 = (UChar **)sub_18BD8A554(v6, this, (uint64_t **)v17, &v18);
    goto LABEL_5;
  }
  v7 = 0;
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  if (v18 > U_ZERO_ERROR)
  {
LABEL_6:
    if (v7)
      (*((void (**)(UChar **))*v7 + 1))(v7);
    if (*(_QWORD *)v17)
    {
      v8 = sub_18BD898F4(*(_QWORD **)v17);
      icu::UMemory::operator delete(v8);
    }
    return 0;
  }
  while (*(_QWORD *)v17)
  {
    if (!sub_18BD89DA8(*(uint64_t *)v17))
    {
      v7 = (UChar **)sub_18BD898F8(*(uint64_t *)v17, &v19, &v18);
      if (*(_QWORD *)v17)
      {
        v13 = sub_18BD898F4(*(_QWORD **)v17);
        icu::UMemory::operator delete(v13);
      }
      *(_QWORD *)v17 = 0;
      break;
    }
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    sub_18BD4CA28(v20, &v18);
    sub_18BD89DB8(*(uint64_t *)v17, (uint64_t)v20, (uint64_t)&v19, &v18);
    if (*(_QWORD *)v17)
    {
      v10 = sub_18BD898F4(*(_QWORD **)v17);
      icu::UMemory::operator delete(v10);
    }
    *(_QWORD *)v17 = 0;
    umtx_lock((icu::UMutex *)&unk_1EE009FC8);
    v12 = qword_1EE009FC0;
    if (qword_1EE009FC0)
      goto LABEL_19;
    if (icu::Transliterator::initializeRegistry(&v18, v11))
    {
      v12 = qword_1EE009FC0;
LABEL_19:
      v7 = (UChar **)sub_18BD8AA58(v12, this, v20, (uint64_t **)v17, &v18);
    }
    umtx_unlock((std::mutex **)&unk_1EE009FC8);
    sub_18BD4CB0C(v20);
    if (v18 >= U_ILLEGAL_ARGUMENT_ERROR)
      goto LABEL_6;
  }
  if (a2 && v7)
  {
    icu::UnicodeString::operator=(v7 + 1, a2);
    LOWORD(v20[0]) = 0;
    icu::UnicodeString::doAppend((uint64_t)(v7 + 1), (uint64_t)v20, 0, 1);
    v14 = *((unsigned __int16 *)v7 + 8);
    if ((__int16)v7[2] < 0)
      v15 = *((_DWORD *)v7 + 5);
    else
      v15 = v14 >> 5;
    v16 = v15 - 1;
    if ((v14 & 1) != 0 && v15 == 1)
    {
      icu::UnicodeString::unBogus((uint64_t)(v7 + 1));
    }
    else if (v15 > v16)
    {
      if (v16 > 1023)
      {
        *((_WORD *)v7 + 8) = v14 | 0xFFE0;
        *((_DWORD *)v7 + 5) = v16;
      }
      else
      {
        *((_WORD *)v7 + 8) = (_WORD)v7[2] & 0x1F | (32 * v16);
      }
    }
  }
  return v7;
}

uint64_t icu::Transliterator::initializeRegistry(UErrorCode *this, UErrorCode *a2)
{
  uint64_t v2;
  uint64_t *v4;
  void *v5;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int Size;
  int v11;
  signed int v12;
  char *NextResource;
  char *v14;
  char *v15;
  char *Key;
  char *v17;
  char *v18;
  unint64_t v19;
  int v20;
  const UChar *String;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  const UChar *StringByKey;
  const UChar *v26;
  _BOOL4 v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  int v74;
  _QWORD v75[2];
  _QWORD v76[2];
  const __int16 *v77;
  const UChar *v78;
  const UChar *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  const char *v83;
  const __int16 *v84;
  const __int16 *v85;
  const UChar *v86;
  const UChar *v87;
  uint64_t v88;
  _BYTE v89[64];
  _BYTE v90[72];
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if (qword_1EE009FC0)
    return 1;
  v4 = icu::UMemory::operator new(0, (icu::UMemory *)0x138, (unint64_t)a2);
  if (!v4)
  {
LABEL_6:
    v2 = 0;
    qword_1EE009FC0 = 0;
    return v2;
  }
  qword_1EE009FC0 = sub_18BD8A500((int)v4, this);
  if (*(int *)this >= 1)
  {
    v5 = (void *)sub_18BD8A550();
    icu::UMemory::operator delete(v5);
    goto LABEL_6;
  }
  v7 = ures_open("icudt74l-translit", 0, (int *)this);
  v8 = ures_getByKey((uint64_t)v7, "RuleBasedTransliteratorIDs", 0, (int *)this);
  v9 = (_QWORD *)v8;
  if (*(int *)this <= 0)
  {
    v73 = v7;
    Size = ures_getSize(v8);
    if (Size >= 1)
    {
      v11 = Size;
      v12 = 0;
      NextResource = 0;
      v14 = 0;
      while (1)
      {
        v15 = ures_getByIndex((uint64_t)v9, v12, v14, (int *)this);
        v14 = v15;
        if (*(int *)this > 0)
          goto LABEL_29;
        Key = (char *)ures_getKey((uint64_t)v15);
        if (Key)
        {
          v17 = Key;
          if (!strstr(Key, "-t-"))
            break;
        }
LABEL_26:
        if (v11 == ++v12)
          goto LABEL_29;
      }
      NextResource = ures_getNextResource((uint64_t)v14, NextResource, (int *)this);
      if (*(int *)this > 0)
        goto LABEL_29;
      memset(v90, 0, 64);
      icu::UnicodeString::UnicodeString(v90, v17, 0xFFFFFFFFLL, 0);
      v18 = (char *)ures_getKey((uint64_t)NextResource);
      v88 = 0;
      v19 = *v18;
      switch((_DWORD)v19)
      {
        case 'a':
          String = ures_getString((uint64_t)NextResource, (int *)&v88 + 1, (int *)this);
          v22 = qword_1EE009FC0;
          v86 = String;
          icu::UnicodeString::UnicodeString(v89, 1, &v86);
          sub_18BD8B078(v22, (unint64_t)v90, (uint64_t)v89, 1, 1, v23);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v89);
          v79 = v86;
          v19 = (unint64_t)&v79;
          break;
        case 'i':
          v20 = 0;
          goto LABEL_21;
        case 'f':
          v20 = 1;
LABEL_21:
          StringByKey = ures_getStringByKey((uint64_t)NextResource, "resource", (int *)&v88 + 1, (int *)this);
          v26 = ures_getStringByKey((uint64_t)NextResource, "direction", (int *)&v88, (int *)this);
          v74 = v20;
          v27 = (int)v88 < 1 || *v26 == 70;
          v28 = !v27;
          v29 = qword_1EE009FC0;
          v87 = StringByKey;
          icu::UnicodeString::UnicodeString(v89, 1, &v87);
          sub_18BD8AF74(v29, (unint64_t)v90, (uint64_t)v89, v28, 1, v74, this, v30);
          icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v89);
          v78 = v87;
          v19 = (unint64_t)&v78;
          break;
      }
      icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)v90);
      goto LABEL_26;
    }
    v14 = 0;
    NextResource = 0;
LABEL_29:
    ures_close(NextResource);
    ures_close(v14);
    v7 = v73;
  }
  ures_close(v9);
  ures_close(v7);
  v34 = icu::UMemory::operator new(v33, (icu::UMemory *)0x58, v32);
  v37 = (unint64_t)v34;
  if (v34)
    sub_18BD092C0(v34);
  v38 = icu::UMemory::operator new(v36, (icu::UMemory *)0x60, v35);
  v41 = (unint64_t)v38;
  if (v38)
    sub_18BD8689C(v38);
  v42 = icu::UMemory::operator new(v40, (icu::UMemory *)0x60, v39);
  v45 = (unint64_t)v42;
  if (v42)
    sub_18BD869B4(v42);
  v46 = icu::UMemory::operator new(v44, (icu::UMemory *)0x60, v43);
  v49 = (unint64_t)v46;
  if (v46)
    sub_18BD844B4(v46);
  v50 = icu::UMemory::operator new(v48, (icu::UMemory *)0x58, v47);
  v53 = (unint64_t)v50;
  if (v50)
    sub_18BDACB98(v50, 0);
  v54 = icu::UMemory::operator new(v52, (icu::UMemory *)0x120, v51);
  v57 = (unint64_t)v54;
  if (v54)
    sub_18BD01438(v54, 0);
  v58 = icu::UMemory::operator new(v56, (icu::UMemory *)0xA8, v55);
  v59 = (unint64_t)v58;
  if (v58 && (sub_18BC86654(v58, 0), v57) && v37 && v41 && v45 && v49 && v53)
  {
    v2 = 1;
    sub_18BD8ACE0(qword_1EE009FC0, v37, 1, this, v60);
    sub_18BD8ACE0(qword_1EE009FC0, v41, 1, this, v61);
    sub_18BD8ACE0(qword_1EE009FC0, v45, 1, this, v62);
    sub_18BD8ACE0(qword_1EE009FC0, v49, 1, this, v63);
    sub_18BD8ACE0(qword_1EE009FC0, v53, 1, this, v64);
    sub_18BD8ACE0(qword_1EE009FC0, v57, 1, this, v65);
    sub_18BD8ACE0(qword_1EE009FC0, v59, 0, this, v66);
    sub_18BD69488();
    sub_18BCDEF10();
    sub_18BDAC1E8();
    sub_18BD08B10();
    sub_18BC82B0C();
    v85 = L"Null";
    icu::UnicodeString::UnicodeString(v90, 1, &v85);
    v84 = L"Null";
    icu::UnicodeString::UnicodeString(v89, 1, &v84);
    HIDWORD(v88) = 0;
    sub_18BD8E440((uint64_t)v90, (uint64_t)v89, 0, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v89);
    v77 = v84;
    v68 = icu::UnicodeString::~UnicodeString(&v77, (icu::UnicodeString *)v90);
    v76[1] = v85;
    v83 = "U";
    icu::UnicodeString::UnicodeString(v68, 1, &v83);
    v82 = "L";
    icu::UnicodeString::UnicodeString(v89, 1, &v82);
    HIDWORD(v88) = 0;
    sub_18BD8E440((uint64_t)v90, (uint64_t)v89, 1, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)v89);
    v76[0] = v82;
    v70 = icu::UnicodeString::~UnicodeString(v76, (icu::UnicodeString *)v90);
    v75[1] = v83;
    v81 = "T";
    icu::UnicodeString::UnicodeString(v70, 1, &v81);
    v80 = "L";
    icu::UnicodeString::UnicodeString(v89, 1, &v80);
    HIDWORD(v88) = 0;
    sub_18BD8E440((uint64_t)v90, (uint64_t)v89, 0, (int *)&v88 + 1);
    icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)v89);
    v75[0] = v80;
    icu::UnicodeString::~UnicodeString(v75, (icu::UnicodeString *)v90);
    sub_18BDA1768(5u, (uint64_t)sub_18BD89820);
  }
  else
  {
    if (v37)
      (*(void (**)(unint64_t))(*(_QWORD *)v37 + 8))(v37);
    if (v41)
      (*(void (**)(unint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (v45)
      (*(void (**)(unint64_t))(*(_QWORD *)v45 + 8))(v45);
    if (v49)
      (*(void (**)(unint64_t))(*(_QWORD *)v49 + 8))(v49);
    if (v53)
      (*(void (**)(unint64_t))(*(_QWORD *)v53 + 8))(v53);
    if (v57)
      (*(void (**)(unint64_t))(*(_QWORD *)v57 + 8))(v57);
    if (v59)
      (*(void (**)(unint64_t))(*(_QWORD *)v59 + 8))(v59);
    if (qword_1EE009FC0)
    {
      v72 = (void *)sub_18BD8A550();
      icu::UMemory::operator delete(v72);
    }
    v2 = 0;
    qword_1EE009FC0 = 0;
    *this = U_MEMORY_ALLOCATION_ERROR;
  }
  return v2;
}

uint64_t *icu::Transliterator::createFromRules(UChar **a1, uint64_t a2, int a3, UParseError *a4, UErrorCode *a5)
{
  unint64_t v10;
  uint64_t *Instance;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  signed int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  void *v26;
  void *v27;
  void *v28;
  icu::CompoundTransliterator *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  UChar **v45;
  _OWORD v46[2];
  uint64_t v47;
  _BYTE v48[64];
  _BYTE v49[64];
  void (**v50)(icu::UnicodeString *__hidden);
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  icu::UnicodeSet *v59[2];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  *(_OWORD *)v59 = 0u;
  v60 = 0u;
  memset(v58, 0, sizeof(v58));
  v56 = 0u;
  v57 = 0u;
  v55 = 0u;
  sub_18BD4CA28(&v55, a5);
  sub_18BD4CB10((uint64_t)&v55, a2, a3, (uint64_t)a4, a5);
  Instance = 0;
  if (*(int *)a5 > 0)
    goto LABEL_2;
  if (DWORD2(v58[0]) == 1)
  {
    if ((_DWORD)v56)
      goto LABEL_10;
    if (v59[1])
    {
      v51 = 0u;
      v54 = 0;
      v53 = 0u;
      v52 = 0u;
      v50 = off_1E2256B38;
      LOWORD(v51) = 2;
      icu::UnicodeSet::toPattern(v59[1], (icu::UnicodeString *)&v50, 0);
      icu::UnicodeString::UnicodeString((uint64_t)v46, 59);
      icu::operator+((uint64_t)&v50, (uint64_t)v46, (uint64_t)v48);
      v33 = icu::UVector::elementAt((icu::UVector *)v58, 0);
      icu::operator+((uint64_t)v48, v33, (uint64_t)v49);
      Instance = (uint64_t *)icu::Transliterator::createInstance((uint64_t)v49, 0, a4, a5);
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v49);
      icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v48);
      icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v46);
      icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v50);
      if (!Instance)
        goto LABEL_57;
    }
    else
    {
      v39 = icu::UVector::elementAt((icu::UVector *)v58, 0);
      Instance = (uint64_t *)icu::Transliterator::createInstance(v39, 0, a4, a5);
      if (!Instance)
      {
LABEL_57:
        if (!Instance && *(int *)a5 <= 0)
        {
          Instance = 0;
          *a5 = U_MEMORY_ALLOCATION_ERROR;
        }
        goto LABEL_2;
      }
    }
    icu::UnicodeString::operator=((UChar **)Instance + 1, a1);
    LOWORD(v50) = 0;
    icu::UnicodeString::doAppend((uint64_t)(Instance + 1), (uint64_t)&v50, 0, 1);
    v40 = *((unsigned __int16 *)Instance + 8);
    if ((__int16)Instance[2] < 0)
      v41 = *((_DWORD *)Instance + 5);
    else
      v41 = v40 >> 5;
    v44 = v41 - 1;
    if ((v40 & 1) != 0 && v41 == 1)
    {
      icu::UnicodeString::unBogus((uint64_t)(Instance + 1));
    }
    else if (v41 > v44)
    {
      if (v44 > 1023)
      {
        *((_WORD *)Instance + 8) = v40 | 0xFFE0;
        *((_DWORD *)Instance + 5) = v44;
      }
      else
      {
        *((_WORD *)Instance + 8) = Instance[2] & 0x1F | (32 * v44);
      }
    }
    goto LABEL_2;
  }
  if (!DWORD2(v58[0]))
  {
    if (!(_DWORD)v56)
    {
      v32 = icu::UMemory::operator new((uint64_t *)v56, (icu::UMemory *)0x58, v10);
      Instance = v32;
      if (v32)
      {
        sub_18BD092C0(v32);
        goto LABEL_2;
      }
      goto LABEL_57;
    }
    if ((_DWORD)v56 == 1)
    {
      Instance = icu::UMemory::operator new((uint64_t *)1, (icu::UMemory *)0x68, v10);
      if (Instance)
      {
        v13 = icu::UVector::orphanElementAt((icu::UVector *)((char *)&v55 + 8), 0);
        sub_18BD4A944(Instance, a1, v13, 1);
        goto LABEL_2;
      }
      goto LABEL_57;
    }
  }
LABEL_10:
  v45 = a1;
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  icu::UVector::UVector((icu::UVector *)v46, a5);
  v15 = DWORD2(v58[0]);
  if ((int)v56 <= SDWORD2(v58[0]))
    v16 = DWORD2(v58[0]);
  else
    v16 = v56;
  if (v16 < 1)
  {
    v18 = 1;
LABEL_29:
    v29 = (icu::CompoundTransliterator *)icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x68, v14);
    Instance = (uint64_t *)v29;
    if (v29)
    {
      icu::CompoundTransliterator::CompoundTransliterator(v29, (icu::UVector *)v46, v18 - 1, a4, a5);
      icu::UnicodeString::operator=((UChar **)Instance + 1, v45);
      LOWORD(v50) = 0;
      icu::UnicodeString::doAppend((uint64_t)(Instance + 1), (uint64_t)&v50, 0, 1);
      v30 = *((unsigned __int16 *)Instance + 8);
      if ((__int16)Instance[2] < 0)
        v31 = *((_DWORD *)Instance + 5);
      else
        v31 = v30 >> 5;
      v38 = v31 - 1;
      if ((v30 & 1) != 0 && v31 == 1)
      {
        icu::UnicodeString::unBogus((uint64_t)(Instance + 1));
      }
      else if (v31 > v38)
      {
        if (v38 > 1023)
        {
          *((_WORD *)Instance + 8) = v30 | 0xFFE0;
          *((_DWORD *)Instance + 5) = v38;
        }
        else
        {
          *((_WORD *)Instance + 8) = Instance[2] & 0x1F | (32 * v38);
        }
      }
      v42 = sub_18BD4D548((uint64_t)&v55);
      v43 = Instance[9];
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      Instance[9] = v42;
    }
    icu::UVector::~UVector((icu::UVector *)v46);
    goto LABEL_57;
  }
  v17 = 0;
  v18 = 1;
  while (1)
  {
    if (v17 < SDWORD2(v58[0]))
    {
      v19 = icu::UVector::elementAt((icu::UVector *)v58, v17);
      if (*(unsigned __int16 *)(v19 + 8) >= 0x20u)
      {
        v20 = (uint64_t *)icu::Transliterator::createInstance(v19, 0, a4, a5);
        v21 = v20;
        if (*(int *)a5 >= 1)
        {
          if (!v20)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t *))(*v21 + 8))(v21);
          goto LABEL_51;
        }
        if (v20)
        {
          if (sub_18BBE6718(*(_QWORD *)(*v20 - 8), (uint64_t)&unk_1E2262860))
          {
            (*(void (**)(uint64_t *))(*v21 + 8))(v21);
          }
          else
          {
            icu::UVector::addElement((icu::UVector *)v46, v21, a5);
            if (*(int *)a5 >= 1)
              goto LABEL_50;
          }
        }
      }
    }
    v15 = v56;
    if ((_DWORD)v56)
      break;
LABEL_26:
    if (v16 == ++v17)
      goto LABEL_29;
  }
  v22 = icu::UVector::orphanElementAt((icu::UVector *)((char *)&v55 + 8), 0);
  v25 = icu::UMemory::operator new(v24, (icu::UMemory *)0x68, v23);
  if (v25)
  {
    v21 = v25;
    icu::UnicodeString::UnicodeString((uint64_t)v49, (uint64_t)L"%Pass");
    icu::UnicodeString::UnicodeString((uint64_t)v48, v18);
    icu::operator+((uint64_t)v49, (uint64_t)v48, (uint64_t)&v50);
    sub_18BD4A944(v21, &v50, v22, 1);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v50);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v48);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v49);
    icu::UVector::addElement((icu::UVector *)v46, v21, a5);
    v15 = *(unsigned int *)a5;
    if ((int)v15 >= 1)
      goto LABEL_50;
    ++v18;
    goto LABEL_26;
  }
  if (*(int *)a5 <= 0)
    *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_51:
  icu::UVector::~UVector((icu::UVector *)v46);
  Instance = 0;
LABEL_2:
  sub_18BD4CB0C(&v55);
  return Instance;
}

icu::UnicodeString *icu::Transliterator::toRules(icu::Transliterator *this, icu::UnicodeString *a2, int a3)
{
  unsigned int v5;
  unsigned int v6;
  UChar **v7;
  UChar **v8;
  unint64_t v9;
  int v10;
  icu::UnicodeString *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  void *v15;
  const char *v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v5 = *((unsigned __int16 *)a2 + 4);
    if ((v5 & 1) != 0)
    {
      icu::UnicodeString::unBogus((uint64_t)a2);
    }
    else
    {
      if ((v5 & 0x8000u) == 0)
        v6 = v5 >> 5;
      else
        v6 = *((_DWORD *)a2 + 3);
      if (v6)
        *((_WORD *)a2 + 4) &= 0x1Fu;
    }
    memset(v18, 0, sizeof(v18));
    v8 = (UChar **)(*(uint64_t (**)(icu::Transliterator *))(*(_QWORD *)this + 104))(this);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, v8);
    LODWORD(v9) = WORD4(v18[0]) >> 5;
    if ((SWORD4(v18[0]) & 0x8000u) == 0)
      v9 = v9;
    else
      v9 = HIDWORD(v18[0]);
    if ((int)v9 >= 1)
    {
      v10 = 0;
      do
      {
        v11 = (icu::UnicodeString *)icu::UnicodeString::char32At((uint64_t *)v9, (icu::UnicodeString *)v18, v10);
        v12 = v11;
        if (!icu::ICU_Utility::escapeUnprintable(a2, v11))
          icu::UnicodeString::append((uint64_t)a2, v12);
        if (v12 < 0x10000)
          v13 = 1;
        else
          v13 = 2;
        v10 += v13;
        LODWORD(v9) = WORD4(v18[0]) >> 5;
        if ((SWORD4(v18[0]) & 0x8000u) == 0)
          v9 = v9;
        else
          v9 = HIDWORD(v18[0]);
      }
      while (v10 < (int)v9);
    }
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)v18);
  }
  else
  {
    v7 = (UChar **)(*(uint64_t (**)(icu::Transliterator *))(*(_QWORD *)this + 104))(this);
    icu::UnicodeString::operator=((UChar **)a2, v7);
  }
  v17 = ":";
  icu::UnicodeString::UnicodeString(v18, 1, &v17);
  if ((SWORD4(v18[0]) & 0x8000u) == 0)
    v14 = WORD4(v18[0]) >> 5;
  else
    v14 = HIDWORD(v18[0]);
  icu::UnicodeString::doReplace(a2, 0, 0, (const icu::UnicodeString *)v18, 0, v14);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
  LOWORD(v18[0]) = 59;
  icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)v18, 0, 1);
  return a2;
}

uint64_t icu::Transliterator::countElements(icu::Transliterator *this)
{
  void *v1;

  if (this
  {
    return (*(uint64_t (**)(void *))(*(_QWORD *)v1 + 136))(v1);
  }
  else
  {
    return 0;
  }
}

icu::Transliterator *icu::Transliterator::getElement(icu::Transliterator *this, uint64_t a2, UErrorCode *a3)
{
  void *v6;
  void *v7;
  int v8;

  if (*(int *)a3 > 0)
    return this;
  if (this)
  {
    v7 = v6;
    if (v6)
    {
      v8 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 136))(v6);
      if ((a2 & 0x80000000) != 0)
        goto LABEL_11;
      goto LABEL_8;
    }
  }
  else
  {
    v7 = 0;
  }
  v8 = 1;
  if ((a2 & 0x80000000) != 0)
  {
LABEL_11:
    *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    return this;
  }
LABEL_8:
  if (v8 <= (int)a2)
    goto LABEL_11;
  if (v8 != 1)
    return (icu::Transliterator *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v7 + 144))(v7, a2);
  return this;
}

icu::UVector **icu::Transliterator::getSourceSet(const icu::UnicodeSet **this, icu::UVector **a2)
{
  const icu::UnicodeSet *v4;
  icu::UnicodeSet *v5;
  const icu::UnicodeSet *v6;
  double v7;
  void *v8;
  void *v9;

  (*((void (**)(const icu::UnicodeSet **))*this + 15))(this);
  v4 = this[9];
  if (v4)
  {
    if (*(void (***)(icu::UnicodeSet *__hidden))v4 == off_1E2256980)
    {
      icu::UnicodeSet::retainAll(a2, v4);
    }
    else
    {
      v5 = (icu::UnicodeSet *)icu::UMemory::operator new(*(uint64_t **)v4, (icu::UMemory *)0xC8, (unint64_t)v4);
      if (v5)
      {
        v6 = v5;
        v7 = icu::UnicodeSet::UnicodeSet(v5);
        (*(void (**)(uint64_t, const icu::UnicodeSet *, double))(*((_QWORD *)this[9] + 1) + 40))((uint64_t)this[9] + 8, v6, v7);
        icu::UnicodeSet::retainAll(a2, v6);
        v9 = icu::UnicodeSet::~UnicodeSet(v8, v6);
        icu::UMemory::operator delete(v9);
      }
    }
  }
  return a2;
}

icu::UnicodeSet *icu::Transliterator::handleGetSourceSet(icu::Transliterator *this, icu::UnicodeSet *a2)
{
  return icu::UnicodeSet::clear(a2);
}

icu::UnicodeSet *icu::Transliterator::getTargetSet(icu::Transliterator *this, icu::UnicodeSet *a2)
{
  return icu::UnicodeSet::clear(a2);
}

void icu::Transliterator::registerFactory(unint64_t a1, uint64_t a2, uint64_t a3)
{
  UErrorCode *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;

  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v9 = 0;
  v8 = qword_1EE009FC0;
  if (qword_1EE009FC0)
    goto LABEL_4;
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v9, v6))
  {
    v8 = qword_1EE009FC0;
LABEL_4:
    v10 = 0;
    sub_18BD8AED4(v8, a1, a2, a3, 1, &v10, v7);
  }
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
}

uint64_t *icu::Transliterator::_registerFactory(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = 0;
  return sub_18BD8AED4(qword_1EE009FC0, a1, a2, a3, 1, &v4, qword_1EE009000);
}

void icu::Transliterator::_registerSpecialInverse(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  int v3;

  v3 = 0;
  sub_18BD8E440((uint64_t)this, (uint64_t)a2, (int)a3, &v3);
}

void icu::Transliterator::registerInstance(icu::Transliterator *this, icu::Transliterator *a2)
{
  UErrorCode *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v6 = 0;
  v5 = qword_1EE009FC0;
  if (qword_1EE009FC0)
    goto LABEL_4;
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v6, v3))
  {
    v5 = qword_1EE009FC0;
LABEL_4:
    v7 = 0;
    sub_18BD8ACE0(v5, (unint64_t)this, 1, &v7, v4);
  }
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
}

uint64_t *icu::Transliterator::_registerInstance(icu::Transliterator *this, icu::Transliterator *a2)
{
  int v3;

  v3 = 0;
  return sub_18BD8ACE0(qword_1EE009FC0, (unint64_t)this, 1, &v3, qword_1EE009000);
}

void icu::Transliterator::registerAlias(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  UErrorCode *v5;
  uint64_t *v6;
  uint64_t v7;
  UErrorCode v8[2];

  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v8[0] = U_ZERO_ERROR;
  v7 = qword_1EE009FC0;
  if (qword_1EE009FC0)
    goto LABEL_4;
  if (icu::Transliterator::initializeRegistry(v8, v5))
  {
    v7 = qword_1EE009FC0;
LABEL_4:
    v8[1] = U_ZERO_ERROR;
    sub_18BD8B078(v7, (unint64_t)this, (uint64_t)a2, 0, 1, v6);
  }
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
}

uint64_t *icu::Transliterator::_registerAlias(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  return sub_18BD8B078(qword_1EE009FC0, (unint64_t)this, (uint64_t)a2, 0, 1, qword_1EE009000);
}

void icu::Transliterator::unregister(icu::Transliterator *this, const icu::UnicodeString *a2)
{
  UErrorCode *v3;
  uint64_t v4;
  int v5;

  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v5 = 0;
  v4 = qword_1EE009FC0;
  if (qword_1EE009FC0)
    goto LABEL_4;
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v3))
  {
    v4 = qword_1EE009FC0;
LABEL_4:
    sub_18BD8B15C(v4, (uint64_t)this);
  }
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
}

uint64_t icu::Transliterator::countAvailableIDs(icu::Transliterator *this)
{
  UErrorCode *v1;
  uint64_t v2;
  uint64_t v3;
  int v5;

  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v5 = 0;
  v2 = qword_1EE009FC0;
  if (!qword_1EE009FC0)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v1))
    {
      v3 = 0;
      goto LABEL_5;
    }
    v2 = qword_1EE009FC0;
  }
  v3 = sub_18BD8B3A0(v2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  return v3;
}

uint64_t *icu::Transliterator::getAvailableID(icu::Transliterator *this)
{
  int v1;
  UErrorCode *v2;
  uint64_t v3;
  uint64_t *v4;
  int v6;

  v1 = (int)this;
  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v6 = 0;
  v3 = qword_1EE009FC0;
  if (!qword_1EE009FC0)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v6, v2))
    {
      v4 = 0;
      goto LABEL_5;
    }
    v3 = qword_1EE009FC0;
  }
  v4 = sub_18BD8B3A8(v3, v1);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  return v4;
}

uint64_t *icu::Transliterator::getAvailableIDs(UErrorCode *this, UErrorCode *a2)
{
  uint64_t *v2;
  UErrorCode *v4;
  uint64_t *v5;
  uint64_t v6;

  if (*(int *)this <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_1EE009FC8);
    v6 = qword_1EE009FC0;
    if (!qword_1EE009FC0)
    {
      if (!icu::Transliterator::initializeRegistry(this, v4))
      {
        umtx_unlock((std::mutex **)&unk_1EE009FC8);
        goto LABEL_9;
      }
      v6 = qword_1EE009FC0;
    }
    v2 = sub_18BD8B48C(v6, (unint64_t)v4, v5);
    umtx_unlock((std::mutex **)&unk_1EE009FC8);
    if (v2)
      return v2;
LABEL_9:
    v2 = 0;
    *this = U_INTERNAL_TRANSLITERATOR_ERROR;
    return v2;
  }
  return 0;
}

uint64_t icu::Transliterator::countAvailableSources(icu::Transliterator *this)
{
  UErrorCode *v1;
  uint64_t v2;
  uint64_t v3;
  int v5;

  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v5 = 0;
  v2 = qword_1EE009FC0;
  if (!qword_1EE009FC0)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v5, v1))
    {
      v3 = 0;
      goto LABEL_5;
    }
    v2 = qword_1EE009FC0;
  }
  v3 = sub_18BD8B4E8(v2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  return v3;
}

uint64_t icu::Transliterator::_countAvailableSources(icu::Transliterator *this)
{
  return sub_18BD8B4E8(qword_1EE009FC0);
}

UChar **icu::Transliterator::getAvailableSource(icu::Transliterator *this, UChar **a2, icu::UnicodeString *a3)
{
  int v4;
  UErrorCode *v5;
  uint64_t v6;
  int v8;

  v4 = (int)this;
  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v8 = 0;
  v6 = qword_1EE009FC0;
  if (qword_1EE009FC0)
    goto LABEL_4;
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v8, v5))
  {
    v6 = qword_1EE009FC0;
LABEL_4:
    sub_18BD8B4F0(v6, v4, a2);
  }
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  return a2;
}

UChar **icu::Transliterator::_getAvailableSource(icu::Transliterator *this, UChar **a2, icu::UnicodeString *a3)
{
  return sub_18BD8B4F0(qword_1EE009FC0, (int)this, a2);
}

uint64_t *icu::Transliterator::countAvailableTargets(icu::Transliterator *this, const icu::UnicodeString *a2)
{
  UErrorCode *v3;
  uint64_t v4;
  uint64_t *v5;
  int v7;

  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v7 = 0;
  v4 = qword_1EE009FC0;
  if (!qword_1EE009FC0)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v7, v3))
    {
      v5 = 0;
      goto LABEL_5;
    }
    v4 = qword_1EE009FC0;
  }
  v5 = sub_18BD8B594(v4, (uint64_t)this);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  return v5;
}

uint64_t *icu::Transliterator::_countAvailableTargets(icu::Transliterator *this, const icu::UnicodeString *a2)
{
  return sub_18BD8B594(qword_1EE009FC0, (uint64_t)this);
}

const icu::UnicodeString *icu::Transliterator::getAvailableTarget(icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  int v6;
  UErrorCode *v7;
  uint64_t v8;
  int v10;

  v6 = (int)this;
  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v10 = 0;
  v8 = qword_1EE009FC0;
  if (qword_1EE009FC0)
    goto LABEL_4;
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v10, v7))
  {
    v8 = qword_1EE009FC0;
LABEL_4:
    sub_18BD8B5BC(v8, v6, a2, (uint64_t)a3);
  }
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  return a3;
}

uint64_t icu::Transliterator::_getAvailableTarget(icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  return sub_18BD8B5BC(qword_1EE009FC0, (int)this, a2, (uint64_t)a3);
}

uint64_t icu::Transliterator::countAvailableVariants(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  UErrorCode *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;

  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v9 = 0;
  v6 = qword_1EE009FC0;
  if (!qword_1EE009FC0)
  {
    if (!icu::Transliterator::initializeRegistry((UErrorCode *)&v9, v5))
    {
      v7 = 0;
      goto LABEL_5;
    }
    v6 = qword_1EE009FC0;
  }
  v7 = sub_18BD8B674(v6, (uint64_t)this, (uint64_t)a2);
LABEL_5:
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  return v7;
}

uint64_t icu::Transliterator::_countAvailableVariants(icu::Transliterator *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3)
{
  return sub_18BD8B674(qword_1EE009FC0, (uint64_t)this, (uint64_t)a2);
}

const icu::UnicodeString *icu::Transliterator::getAvailableVariant(icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5)
{
  int v8;
  UErrorCode *v9;
  uint64_t v10;
  int v12;

  v8 = (int)this;
  umtx_lock((icu::UMutex *)&unk_1EE009FC8);
  v12 = 0;
  v10 = qword_1EE009FC0;
  if (qword_1EE009FC0)
    goto LABEL_4;
  if (icu::Transliterator::initializeRegistry((UErrorCode *)&v12, v9))
  {
    v10 = qword_1EE009FC0;
LABEL_4:
    sub_18BD8B6CC(v10, v8, a2, (uint64_t)a3, (uint64_t)a4);
  }
  umtx_unlock((std::mutex **)&unk_1EE009FC8);
  return a4;
}

uint64_t icu::Transliterator::_getAvailableVariant(icu::Transliterator *this, uint64_t a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, icu::UnicodeString *a5)
{
  return sub_18BD8B6CC(qword_1EE009FC0, (int)this, a2, (uint64_t)a3, (uint64_t)a4);
}

uint64_t sub_18BD89820()
{
  void *v0;

  sub_18BD8E71C();
  if (qword_1EE009FC0)
  {
    v0 = (void *)sub_18BD8A550();
    icu::UMemory::operator delete(v0);
    qword_1EE009FC0 = 0;
  }
  return 1;
}

_QWORD *sub_18BD89858(_QWORD *a1, UChar **a2, UChar **a3, uint64_t a4, uint64_t a5)
{
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 1), a2);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 9), a3);
  a1[17] = a4;
  a1[18] = a5;
  a1[19] = 0x100000000;
  return a1;
}

_QWORD *sub_18BD898B0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[17];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 9));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

icu::CompoundTransliterator *sub_18BD898F8(uint64_t a1, UParseError *a2, UErrorCode *a3)
{
  icu::CompoundTransliterator *v3;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  icu::UnicodeSet *v12;
  icu::UnicodeFilter *v13;
  int v14;
  int32_t v15;
  int32_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  char v22;
  unsigned int v23;
  int32_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  void *Instance;
  icu::UVector *v30;
  void *v31;
  int32_t v32;
  void *i;
  icu::UVector *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  signed int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  icu::UnicodeSet *v42;
  icu::UnicodeFilter *v43;
  char v44;
  void *v45;
  _OWORD v46[2];
  uint64_t v47;
  void (**v48)(icu::UnicodeString *__hidden);
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 0;
  v8 = *(_DWORD *)(a1 + 156);
  if (v8)
  {
    if (v8 != 1)
    {
      if (v8 == 2)
        abort();
      return 0;
    }
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 8);
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    icu::UnicodeString::UnicodeString((uint64_t)&v53, 0xFFFF);
    LOWORD(v48) = -1;
    icu::UnicodeString::doAppend((uint64_t)&v53, (uint64_t)&v48, 0, 1);
    if ((SWORD4(v53) & 0x8000u) == 0)
      v15 = WORD4(v53) >> 5;
    else
      v15 = HIDWORD(v53);
    if (*(__int16 *)(a1 + 80) < 0)
    {
      v16 = *(_DWORD *)(a1 + 84);
      if ((BYTE8(v53) & 1) != 0)
        goto LABEL_45;
    }
    else
    {
      v16 = *(unsigned __int16 *)(a1 + 80) >> 5;
      if ((BYTE8(v53) & 1) != 0)
        goto LABEL_45;
    }
    if (v15 >= 1)
    {
      if ((BYTE8(v53) & 2) != 0)
        v17 = (unint64_t)&v53 | 0xA;
      else
        v17 = *((_QWORD *)&v54 + 1);
      v18 = a1 + 72;
      v19 = 0;
      while (1)
      {
        v20 = icu::UnicodeString::indexOf(v18, v17, 0, v15, v19, v16);
        if (v20 < 0)
          break;
        if (*(__int16 *)(a1 + 80) < 0)
        {
          v21 = *(_DWORD *)(a1 + 84);
          v22 = BYTE8(v53);
          if ((SWORD4(v53) & 0x8000u) == 0)
            v15 = WORD4(v53) >> 5;
          else
            v15 = HIDWORD(v53);
          if (v21 <= v20)
            v19 = *(_DWORD *)(a1 + 84);
          else
            v19 = v20 + 1;
          if ((BYTE8(v53) & 1) != 0)
            break;
        }
        else
        {
          v21 = *(unsigned __int16 *)(a1 + 80) >> 5;
          v22 = BYTE8(v53);
          if ((SWORD4(v53) & 0x8000u) == 0)
            v15 = WORD4(v53) >> 5;
          else
            v15 = HIDWORD(v53);
          if (v20 >= (*(unsigned __int16 *)(a1 + 80) >> 5))
            v19 = *(unsigned __int16 *)(a1 + 80) >> 5;
          else
            v19 = v20 + 1;
          if ((BYTE8(v53) & 1) != 0)
            break;
        }
        if (v15 < 1)
          break;
        v16 = v21 - v19;
        if ((v22 & 2) != 0)
          v17 = (unint64_t)&v53 | 0xA;
        else
          v17 = *((_QWORD *)&v54 + 1);
        v18 = a1 + 72;
      }
    }
LABEL_45:
    v47 = 0;
    memset(v46, 0, sizeof(v46));
    icu::UVector::UVector((uint64_t)v46, (uint64_t)uprv_deleteUObject, 0, (int *)a3);
    v49 = 0u;
    v52 = 0;
    v51 = 0u;
    v50 = 0u;
    v48 = off_1E2256B38;
    LOWORD(v49) = 2;
    v23 = *(unsigned __int16 *)(a1 + 80);
    if ((v23 & 0x8000) != 0)
      v24 = *(_DWORD *)(a1 + 84);
    else
      v24 = v23 >> 5;
    v25 = icu::UnicodeString::doIndexOf(a1 + 72, 0xFFFFu, 0, v24);
    if ((v25 & 0x80000000) == 0)
    {
      v26 = v25;
      do
      {
        if ((v49 & 0x8000u) == 0)
          v27 = (unsigned __int16)v49 >> 5;
        else
          v27 = DWORD1(v49);
        icu::UnicodeString::doReplace((icu::UnicodeString *)&v48, 0, v27, (const icu::UnicodeString *)(a1 + 72), 0, v26);
        if ((_DWORD)v26 == 2147483646)
        {
          if ((*(_WORD *)(a1 + 80) & 1) != 0)
            v28 = 2;
          else
            v28 = *(_WORD *)(a1 + 80) & 0x1F;
          *(_WORD *)(a1 + 80) = v28;
        }
        else
        {
          icu::UnicodeString::doReplace(a1 + 72, 0, (v26 + 1), 0, 0, 0);
        }
        if ((unsigned __int16)v49 >= 0x20u)
        {
          Instance = (void *)icu::Transliterator::createInstance((int)&v48, 0, (int)a2, a3);
          icu::UVector::adoptElement((icu::UVector *)v46, Instance, a3);
        }
        v30 = *(icu::UVector **)(a1 + 136);
        if (*((_DWORD *)v30 + 2))
        {
          v31 = (void *)icu::UVector::orphanElementAt(v30, 0);
          icu::UVector::adoptElement((icu::UVector *)v46, v31, a3);
        }
        if (*(__int16 *)(a1 + 80) < 0)
          v32 = *(_DWORD *)(a1 + 84);
        else
          v32 = *(unsigned __int16 *)(a1 + 80) >> 5;
        v26 = icu::UnicodeString::doIndexOf(a1 + 72, 0xFFFFu, 0, v32);
      }
      while ((v26 & 0x80000000) == 0);
    }
    if (*(unsigned __int16 *)(a1 + 80) < 0x20u)
      goto LABEL_71;
    for (i = (void *)icu::Transliterator::createInstance((int)a1 + 72, 0, (int)a2, a3);
          ;
          i = (void *)icu::UVector::orphanElementAt(v34, 0))
    {
      icu::UVector::adoptElement((icu::UVector *)v46, i, a3);
LABEL_71:
      v34 = *(icu::UVector **)(a1 + 136);
      if (!*((_DWORD *)v34 + 2))
        break;
    }
    icu::UVector::setDeleter((icu::UVector *)v46, 0);
    v36 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v36 < 1)
    {
      v3 = (icu::CompoundTransliterator *)icu::UMemory::operator new(v36, (icu::UMemory *)0x68, v35);
      if (!v3)
      {
        v44 = 0;
        v37 = 7;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_86;
      }
      v42 = *(icu::UnicodeSet **)(a1 + 144);
      if (v42)
        v43 = icu::UnicodeSet::clone(v42, v40, v41);
      else
        v43 = 0;
      icu::CompoundTransliterator::CompoundTransliterator(v3, (UChar **)(a1 + 8), (icu::UVector *)v46, v43, v14, a2, a3);
    }
    else
    {
      v37 = DWORD2(v46[0]);
      if (SDWORD2(v46[0]) >= 1)
      {
        v38 = 0;
        do
        {
          v39 = icu::UVector::elementAt((icu::UVector *)v46, v38);
          if (v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          ++v38;
          v37 = DWORD2(v46[0]);
        }
        while (v38 < SDWORD2(v46[0]));
      }
      v3 = 0;
    }
    v44 = 1;
LABEL_86:
    icu::UnicodeString::~UnicodeString((void *)v37, (icu::UnicodeString *)&v48);
    icu::UVector::~UVector((icu::UVector *)v46);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v53);
    if ((v44 & 1) != 0)
      return v3;
    return 0;
  }
  v9 = icu::Transliterator::createInstance((int)a1 + 72, 0, (int)a2, a3);
  v11 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v11 > 0)
    return 0;
  v3 = (icu::CompoundTransliterator *)v9;
  v12 = *(icu::UnicodeSet **)(a1 + 144);
  if (v12)
  {
    v13 = icu::UnicodeSet::clone(v12, v10, v11);
    icu::Transliterator::adoptFilter(v3, v13);
  }
  return v3;
}

BOOL sub_18BD89DA8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 156) == 2;
}

double sub_18BD89DB8(uint64_t a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  double result;

  if (*(int *)a4 <= 0)
    *(_QWORD *)&result = sub_18BD4CB10(a2, a1 + 72, *(_DWORD *)(a1 + 152), a3, a4).n128_u64[0];
  return result;
}

uint64_t sub_18BD89DE4(uint64_t a1, UChar **a2)
{
  UChar **v4;
  icu::Locale *v5;
  unint64_t v6;
  int *appended;
  icu::UnicodeString *v8;
  int Code;
  const char *Name;
  void *v11;
  void *v12;
  icu::ResourceBundle *v13;
  icu::ResourceBundle *v14;
  UErrorCode v16;
  void *v17[7];
  uint64_t v18;
  int32_t value;
  __int128 v20;
  __int128 v21;
  int v22;
  _OWORD v23[13];
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (UChar **)(a1 + 8);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 200) = off_1E2256B38;
  *(_QWORD *)(a1 + 72) = off_1E2256B38;
  *(_WORD *)(a1 + 80) = 2;
  *(_QWORD *)(a1 + 136) = off_1E2256B38;
  *(_WORD *)(a1 + 144) = 2;
  *(_WORD *)(a1 + 208) = 2;
  *(_QWORD *)(a1 + 272) = 0;
  v16 = U_ZERO_ERROR;
  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  icu::Locale::Locale((icu::Locale *)v23, "", 0, 0, 0);
  icu::LocaleUtility::initLocaleFromName((icu::LocaleUtility *)a2, (const icu::UnicodeString *)v23, v5);
  if (!BYTE8(v24))
  {
    v13 = (icu::ResourceBundle *)icu::UMemory::operator new(0, (icu::UMemory *)0x18, v6);
    if (!v13)
    {
      *(_QWORD *)(a1 + 272) = 0;
      goto LABEL_19;
    }
    v14 = icu::ResourceBundle::ResourceBundle(v13, "icudt74l-translit", (char **)v23, &v16);
    *(_QWORD *)(a1 + 272) = v14;
    if (v16 > U_ZERO_ERROR || v16 == U_USING_DEFAULT_WARNING)
    {
      (*(void (**)(icu::ResourceBundle *))(*(_QWORD *)v14 + 8))(v14);
      *(_QWORD *)(a1 + 272) = 0;
    }
  }
  v16 = U_ZERO_ERROR;
  v22 = 0;
  v21 = 0u;
  v20 = 0u;
  value = -1;
  v17[0] = (char *)&v17[1] + 5;
  LODWORD(v17[1]) = 40;
  WORD2(v17[1]) = 0;
  LODWORD(v18) = 0;
  appended = icu::CharString::appendInvariantChars((icu::CharString *)v17, (const icu::UnicodeString *)a2, &v16);
  Code = uscript_getCode(*(char **)appended, &value, 10, (int *)&v16);
  if (BYTE4(v17[1]))
    uprv_free(v17[0]);
  if (Code >= 1 && value != -1)
  {
    Name = uscript_getName(value);
    icu::UnicodeString::UnicodeString(v17, Name, 0xFFFFFFFFLL, 0);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 200), (icu::UnicodeString *)v17);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v17);
  }
  if (*(_QWORD *)(a1 + 272))
  {
    memset(&v17[1], 0, 48);
    v18 = 0;
    v17[0] = off_1E2256B38;
    LOWORD(v17[1]) = 2;
    icu::LocaleUtility::initNameFromLocale((icu::LocaleUtility *)v23, (const icu::Locale *)v17, v8);
    v12 = (void *)LOWORD(v17[1]);
    if (((uint64_t)v17[1] & 1) == 0)
      icu::UnicodeString::operator=(v4, (UChar **)v17);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v17);
    goto LABEL_18;
  }
  if (*(__int16 *)(a1 + 208) < 0)
  {
    if (!*(_DWORD *)(a1 + 212))
      goto LABEL_18;
    goto LABEL_17;
  }
  if (*(unsigned __int16 *)(a1 + 208) >> 5)
LABEL_17:
    icu::UnicodeString::operator=(v4, (UChar **)(a1 + 200));
LABEL_18:
  sub_18BD8A07C(a1);
LABEL_19:
  icu::Locale::~Locale((icu::Locale *)v23);
  return a1;
}

uint64_t sub_18BD8A07C(uint64_t result)
{
  uint64_t v1;
  UChar **v2;
  UChar **v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;

  v1 = result;
  v2 = (UChar **)(result + 72);
  v3 = (UChar **)(result + 8);
  v4 = *(unsigned __int16 *)(result + 80);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(result + 16) & 1) != 0)
      return result;
LABEL_14:
    icu::UnicodeString::operator=(v2, v3);
    *(_BYTE *)(v1 + 264) = *(_QWORD *)(v1 + 272) != 0;
    return sub_18BD8A184(v1);
  }
  if ((v4 & 0x8000) != 0)
    v5 = *(_DWORD *)(result + 84);
  else
    v5 = v4 >> 5;
  v6 = *(unsigned __int16 *)(result + 16);
  if ((v6 & 0x8000u) == 0)
    v7 = v6 >> 5;
  else
    v7 = *(_DWORD *)(result + 20);
  if ((v6 & 1) != 0)
    goto LABEL_14;
  if (v5 != v7)
    goto LABEL_14;
  result = icu::UnicodeString::doEquals((icu::UnicodeString *)(result + 72), (const icu::UnicodeString *)v3, v5);
  if (!(_DWORD)result)
    goto LABEL_14;
  return result;
}

_QWORD *sub_18BD8A130(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[34];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 25));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 17));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 9));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

uint64_t sub_18BD8A184(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int32_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v1 = result;
  *(_BYTE *)(result + 265) = 0;
  if (!*(_BYTE *)(result + 264))
  {
    v4 = *(unsigned __int16 *)(result + 144);
    if ((v4 & 1) != 0)
      return icu::UnicodeString::unBogus(result + 136);
    if ((v4 & 0x8000) != 0)
    {
      if (!*(_DWORD *)(result + 148))
        return result;
    }
    else if (!(v4 >> 5))
    {
      return result;
    }
    *(_WORD *)(result + 144) &= 0x1Fu;
    return result;
  }
  icu::UnicodeString::operator=((UChar **)(result + 136), (UChar **)(result + 72));
  v2 = *(unsigned __int16 *)(v1 + 144);
  if ((v2 & 0x8000) != 0)
    v3 = *(_DWORD *)(v1 + 148);
  else
    v3 = v2 >> 5;
  result = icu::UnicodeString::doLastIndexOf(v1 + 136, 0x5Fu, 0, v3);
  if ((int)result < 1)
    return (uint64_t)icu::UnicodeString::operator=((UChar **)(v1 + 136), (UChar **)(v1 + 200));
  v5 = *(unsigned __int16 *)(v1 + 144);
  if (*(__int16 *)(v1 + 144) < 0)
    v6 = *(_DWORD *)(v1 + 148);
  else
    v6 = v5 >> 5;
  if (v6 > result)
  {
    if (result > 0x3FF)
    {
      *(_WORD *)(v1 + 144) = v5 | 0xFFE0;
      *(_DWORD *)(v1 + 148) = result;
    }
    else
    {
      *(_WORD *)(v1 + 144) = *(_WORD *)(v1 + 144) & 0x1F | (32 * result);
    }
  }
  *(_BYTE *)(v1 + 265) = 1;
  return result;
}

_QWORD *sub_18BD8A280(_QWORD *a1)
{
  void *v2;
  icu::UVector *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  icu::UnicodeSet *v8;
  void *v9;

  v2 = (void *)*(unsigned int *)a1;
  switch((_DWORD)v2)
  {
    case 3:
      v3 = (icu::UVector *)a1[11];
      if (v3)
LABEL_9:
        (*(void (**)(icu::UVector *))(*(_QWORD *)v3 + 8))(v3);
      break;
    case 4:
      v6 = a1[11];
      if (v6)
      {
        v7 = (void *)sub_18BD4AF08(v6);
        icu::UMemory::operator delete(v7);
      }
      break;
    case 5:
      while (1)
      {
        v3 = (icu::UVector *)a1[11];
        if (!v3)
          break;
        if (!*((_DWORD *)v3 + 2))
          goto LABEL_9;
        v4 = icu::UVector::orphanElementAt(v3, 0);
        if (v4)
        {
          v5 = (void *)sub_18BD4AF08(v4);
          icu::UMemory::operator delete(v5);
        }
      }
      break;
  }
  v8 = (icu::UnicodeSet *)a1[10];
  if (v8)
  {
    v9 = icu::UnicodeSet::~UnicodeSet(v2, v8);
    icu::UMemory::operator delete(v9);
  }
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 1));
  return a1;
}

uint64_t sub_18BD8A324(uint64_t a1, UErrorCode *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v9;

  *(_QWORD *)(a1 + 8) = 0;
  if (*(int *)a2 <= 0
    && (v4 = a1 + 16,
        uhash_init((int32x2_t *)(a1 + 16), (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, (int *)a2), *(int *)a2 < 1))
  {
    *(_QWORD *)(a1 + 8) = v4;
    uhash_setKeyDeleter(a1 + 16, (uint64_t)uprv_deleteUObject);
    v9 = *a2;
    *(_QWORD *)(a1 + 96) = 0;
    if (v9 <= 0)
    {
      uhash_initSize((int32x2_t *)(a1 + 104), (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, 134, (int *)a2);
      if (*(int *)a2 <= 0)
      {
        *(_QWORD *)(a1 + 96) = a1 + 104;
        uhash_setKeyDeleter(a1 + 104, (uint64_t)uprv_deleteUObject);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  icu::UVector::UVector((icu::UVector *)(a1 + 184), 0xBu, a2);
  *(_QWORD *)(a1 + 224) = 0;
  if (*(int *)a2 <= 0)
  {
    uhash_initSize((int32x2_t *)(a1 + 232), (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, 493, (int *)a2);
    if (*(int *)a2 <= 0)
    {
      *(_QWORD *)(a1 + 224) = a1 + 232;
      uhash_setKeyDeleter(a1 + 232, (uint64_t)uprv_deleteUObject);
    }
  }
  uhash_setValueDeleter(*(_QWORD *)(a1 + 8), (uint64_t)sub_18BD8A4E4);
  icu::UVector::setDeleter((icu::UVector *)(a1 + 184), (void (*)(void *))uprv_deleteUObject);
  icu::UVector::setComparer(a1 + 184, (uint64_t)uhash_compareCaselessUnicodeString);
  v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0x40, v5);
  if (v7)
  {
    *v7 = (uint64_t)off_1E2256B38;
    *((_WORD *)v7 + 4) = 2;
    icu::UVector::adoptElement((icu::UVector *)(a1 + 184), v7, a2);
  }
  uhash_setValueDeleter(*(_QWORD *)(a1 + 96), (uint64_t)uhash_deleteHashtable);
  return a1;
}

void sub_18BD8A4E4(_QWORD *a1)
{
  _QWORD *v1;

  if (a1)
  {
    v1 = sub_18BD8A280(a1);
    icu::UMemory::operator delete(v1);
  }
}

_QWORD *sub_18BD8A504(_QWORD *a1)
{
  void **v2;
  void **v3;
  void **v4;

  v2 = (void **)a1[28];
  if (v2)
    uhash_close(v2);
  icu::UVector::~UVector((icu::UVector *)(a1 + 23));
  v3 = (void **)a1[12];
  if (v3)
    uhash_close(v3);
  v4 = (void **)a1[1];
  if (v4)
    uhash_close(v4);
  return a1;
}

uint64_t *sub_18BD8A554(uint64_t a1, UChar **a2, uint64_t **a3, UErrorCode *a4)
{
  uint64_t *result;

  result = (uint64_t *)sub_18BD8A5A8(a1, (uint64_t)a2);
  if (result)
    return sub_18BD8A6A0((uint64_t)result, a2, (unsigned int *)result, a3, a4);
  return result;
}

uint64_t sub_18BD8A5A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  char v8;
  void (**v9)(icu::UnicodeString *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  UChar *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  UChar *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v23 = 0;
  v22 = 0u;
  v21 = 0u;
  v19 = (UChar *)off_1E2256B38;
  LOWORD(v20) = 2;
  v15 = 0u;
  v16 = 0u;
  v18 = 0;
  v17 = 0u;
  v13 = 0;
  v14 = (UChar *)off_1E2256B38;
  LOWORD(v15) = 2;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = off_1E2256B38;
  LOWORD(v10) = 2;
  v8 = 0;
  sub_18BD8DFDC(a2, (icu::UnicodeString *)&v19, (uint64_t)&v14, (uint64_t)&v9, &v8);
  v3 = sub_18BD8C29C(a1, &v19, &v14, (uint64_t)&v9);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v19);
  return v3;
}

uint64_t *sub_18BD8A6A0(uint64_t a1, UChar **a2, unsigned int *a3, uint64_t **a4, UErrorCode *a5)
{
  uint64_t *v5;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t *result;
  uint64_t *v17;
  UChar **v18;
  unsigned int v19;
  icu::UVector *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  signed int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  _OWORD v35[31];
  uint64_t v36;
  _BYTE v37[64];
  _OWORD v38[4];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)*a3;
  switch((int)v5)
  {
    case 0:
    case 1:
      v36 = 0;
      memset(v35, 0, sizeof(v35));
      sub_18BD4CA28(v35, a5);
      memset(v38, 0, sizeof(v38));
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v38, (UChar **)a3 + 1);
      v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xA0, v10);
      v13 = v12;
      if (v12)
      {
        v14 = *a3 == 1;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v12 + 1), a2);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v13 + 9), (UChar **)v38);
        v13[17] = 0;
        v13[18] = 0;
        v15 = 2;
        *((_DWORD *)v13 + 38) = v14;
        *((_DWORD *)v13 + 39) = 2;
      }
      else
      {
        v15 = 7;
        *a5 = U_MEMORY_ALLOCATION_ERROR;
      }
      *a4 = v13;
      icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)v38);
      sub_18BD4CB0C(v35);
      return 0;
    case 2:
      result = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
      if (!result)
        goto LABEL_20;
      v17 = result;
      v18 = (UChar **)(a3 + 2);
      v19 = a3[18];
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), a2);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v17 + 9), v18);
      result = 0;
      v17[17] = 0;
      v17[18] = 0;
      *((_DWORD *)v17 + 38) = v19;
      *((_DWORD *)v17 + 39) = 2;
      *a4 = v17;
      return result;
    case 3:
      result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 11) + 24))(*((_QWORD *)a3 + 11));
      if (!result)
        goto LABEL_21;
      return result;
    case 4:
      result = icu::UMemory::operator new(v5, (icu::UMemory *)0x68, (unint64_t)a2);
      if (!result)
        goto LABEL_21;
      return (uint64_t *)sub_18BD4A8E0((int)result, (int)a2, *((_QWORD *)a3 + 11), 0);
    case 5:
      result = icu::UMemory::operator new(v5, (icu::UMemory *)0x28, (unint64_t)a2);
      if (!result)
        goto LABEL_21;
      v20 = (icu::UVector *)result;
      icu::UVector::UVector(result, uprv_deleteUObject, 0, *(unsigned int *)(*((_QWORD *)a3 + 11) + 8), a5);
      if (*(int *)a5 > 0)
        goto LABEL_12;
      v24 = 0;
      break;
    case 6:
      result = icu::UMemory::operator new(v5, (icu::UMemory *)0xA0, (unint64_t)a2);
      if (result)
      {
        v22 = result;
        v23 = *((_QWORD *)a3 + 10);
        result[1] = (uint64_t)off_1E2256B38;
        *((_WORD *)result + 8) = 2;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 9), (UChar **)a3 + 1);
        result = 0;
        v22[17] = 0;
        v22[18] = v23;
        v22[19] = 0;
        *a4 = v22;
        return result;
      }
LABEL_20:
      *a4 = 0;
      goto LABEL_21;
    case 7:
      result = (uint64_t *)(*((uint64_t (**)(UChar **, _QWORD))a3 + 11))(a2, *((_QWORD *)a3 + 12));
      if (!result)
        goto LABEL_21;
      return result;
    default:
      abort();
  }
  while (1)
  {
    v25 = (uint64_t *)*(unsigned int *)(*((_QWORD *)a3 + 11) + 8);
    if (v24 >= (int)v25)
      break;
    v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x68, v21);
    if (!v26)
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_12:
      (*(void (**)(icu::UVector *))(*(_QWORD *)v20 + 8))(v20);
      return 0;
    }
    v27 = v26;
    icu::UnicodeString::UnicodeString((uint64_t)v38, (uint64_t)L"%Pass");
    icu::UnicodeString::UnicodeString((uint64_t)v37, v24 + 1);
    icu::operator+((uint64_t)v38, (uint64_t)v37, (uint64_t)v35);
    v28 = icu::UVector::elementAt(*((icu::UVector **)a3 + 11), v24);
    sub_18BD4A944(v27, v35, v28, 0);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v35);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v37);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v38);
    icu::UVector::adoptElement(v20, v27, a5);
    ++v24;
    if (*(int *)a5 >= 1)
      goto LABEL_12;
  }
  icu::UVector::setDeleter(v20, 0);
  result = icu::UMemory::operator new(v33, (icu::UMemory *)0xA0, v32);
  v34 = result;
  if (result)
  {
    sub_18BD89858(result, a2, (UChar **)a3 + 1, (uint64_t)v20, *((_QWORD *)a3 + 10));
    result = 0;
    *a4 = v34;
  }
  else
  {
    *a4 = 0;
LABEL_21:
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t *sub_18BD8AA58(uint64_t a1, UChar **a2, _DWORD *a3, uint64_t **a4, UErrorCode *a5)
{
  uint64_t *result;
  uint64_t *v10;
  int v11;
  int v12;
  void *v13;
  unint64_t v14;
  uint64_t *v15;
  __int16 v16;
  int v17;
  signed int i;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  void *v24;
  UChar **v25;
  int v26;
  uint64_t **v27;
  const char *v28;
  _WORD v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  result = (uint64_t *)sub_18BD8A5A8(a1, (uint64_t)a2);
  if (result)
  {
    v10 = result;
    v27 = a4;
    if (*(_DWORD *)result > 2u)
      return sub_18BD8A6A0((uint64_t)result, a2, (unsigned int *)v10, v27, a5);
    v11 = a3[14];
    if (v11 == 1)
    {
      if (a3[4])
        goto LABEL_9;
      v25 = (UChar **)icu::UVector::elementAt((icu::UVector *)(a3 + 12), 0);
      icu::UnicodeString::operator=((UChar **)v10 + 1, v25);
      result = (uint64_t *)sub_18BD4D548((uint64_t)a3);
      v10[10] = (uint64_t)result;
      v26 = 6;
    }
    else
    {
      if (v11)
        goto LABEL_9;
      v12 = a3[4];
      if (v12 != 1)
      {
        if (!v12)
        {
          result[11] = 0;
          *(_DWORD *)result = 6;
          v28 = "A";
          icu::UnicodeString::UnicodeString(v29, 1, &v28);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v10 + 1), (icu::UnicodeString *)v29);
          result = (uint64_t *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v29);
          return sub_18BD8A6A0((uint64_t)result, a2, (unsigned int *)v10, v27, a5);
        }
LABEL_9:
        *(_DWORD *)result = 5;
        result[10] = sub_18BD4D548((uint64_t)a3);
        result = icu::UMemory::operator new(v15, (icu::UMemory *)0x28, v14);
        if (result)
          result = (uint64_t *)icu::UVector::UVector((icu::UVector *)result, a5);
        v10[11] = (uint64_t)result;
        if ((v10[2] & 1) != 0)
          v16 = 2;
        else
          v16 = v10[2] & 0x1F;
        *((_WORD *)v10 + 8) = v16;
        if (a3[4] <= a3[14])
          v17 = a3[14];
        else
          v17 = a3[4];
        if (v17 >= 1)
        {
          for (i = 0; i != v17; ++i)
          {
            if (i < a3[14])
            {
              result = (uint64_t *)icu::UVector::elementAt((icu::UVector *)(a3 + 12), i);
              v19 = *((unsigned __int16 *)result + 4);
              if (v19 >= 0x20)
              {
                v20 = (__int16)v19;
                v21 = v19 >> 5;
                if (v20 >= 0)
                  v22 = v21;
                else
                  v22 = *((unsigned int *)result + 3);
                result = (uint64_t *)icu::UnicodeString::doAppend((uint64_t)(v10 + 1), (const icu::UnicodeString *)result, 0, v22);
              }
            }
            if (a3[4])
            {
              v23 = (void *)icu::UVector::orphanElementAt((icu::UVector *)(a3 + 2), 0);
              icu::UVector::addElement((icu::UVector *)v10[11], v23, a5);
              if (v23)
              {
                if (*(int *)a5 >= 1)
                {
                  v24 = (void *)sub_18BD4AF08(v23);
                  icu::UMemory::operator delete(v24);
                }
              }
              v29[0] = -1;
              result = (uint64_t *)icu::UnicodeString::doAppend((uint64_t)(v10 + 1), (uint64_t)v29, 0, 1);
            }
          }
        }
        return sub_18BD8A6A0((uint64_t)result, a2, (unsigned int *)v10, v27, a5);
      }
      result = (uint64_t *)icu::UVector::orphanElementAt((icu::UVector *)(a3 + 2), 0);
      v10[11] = (uint64_t)result;
      v26 = 4;
    }
    *(_DWORD *)v10 = v26;
    return sub_18BD8A6A0((uint64_t)result, a2, (unsigned int *)v10, v27, a5);
  }
  return result;
}

uint64_t *sub_18BD8ACE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, _DWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *result;
  uint64_t v10;
  uint64_t v11;

  result = icu::UMemory::operator new(a5, (icu::UMemory *)0x68, a2);
  if (result)
  {
    v10 = (uint64_t)result;
    result[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)result + 8) = 2;
    *(_DWORD *)result = 3;
    result[10] = 0;
    result[11] = a2;
    v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 104))(a2);
    return (uint64_t *)sub_18BD8AD88(a1, v11, v10, a3);
  }
  else
  {
    *a4 = 7;
  }
  return result;
}

void *sub_18BD8AD88(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v13;
  UChar *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  UChar *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  UChar *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  UChar *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  v33 = 0;
  v32 = 0u;
  v31 = 0u;
  LOWORD(v30) = 2;
  v25 = 0u;
  v28 = 0;
  v29 = (UChar *)off_1E2256B38;
  v27 = 0u;
  v26 = 0u;
  v24 = (UChar *)off_1E2256B38;
  LOWORD(v25) = 2;
  v20 = 0u;
  v21 = 0u;
  v23 = 0;
  v22 = 0u;
  v19 = (UChar *)off_1E2256B38;
  LOWORD(v20) = 2;
  v13 = 0;
  sub_18BD8DFDC(a2, (icu::UnicodeString *)&v29, (uint64_t)&v24, (uint64_t)&v19, &v13);
  v15 = 0u;
  v16 = 0u;
  v18 = 0;
  v17 = 0u;
  v14 = (UChar *)off_1E2256B38;
  LOWORD(v15) = 2;
  sub_18BD8E29C(&v29, (uint64_t)&v24, (uint64_t)&v19, (uint64_t)&v14);
  sub_18BD8B9B8(a1, &v14, (uint64_t)&v29, &v24, &v19, a3, a4, v7);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v19);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v24);
  return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v29);
}

uint64_t *sub_18BD8AED4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _DWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a7, (icu::UMemory *)0x68, a2);
  if (result)
  {
    result[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)result + 8) = 2;
    *(_DWORD *)result = 7;
    result[10] = 0;
    result[11] = a3;
    result[12] = a4;
    return (uint64_t *)sub_18BD8AD88(a1, a2, (uint64_t)result, a5);
  }
  else
  {
    *a6 = 7;
  }
  return result;
}

uint64_t *sub_18BD8AF74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, _DWORD *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t *result;
  uint64_t v16;
  icu::UnicodeString *v17;
  __int16 v18;
  const UChar *v19;
  const UChar *v20;

  result = icu::UMemory::operator new(a8, (icu::UMemory *)0x68, a2);
  if (result)
  {
    v16 = (uint64_t)result;
    result[1] = (uint64_t)off_1E2256B38;
    v17 = (icu::UnicodeString *)(result + 1);
    *(_WORD *)(v16 + 16) = 2;
    *(_QWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = 0;
    *(_DWORD *)v16 = a4 != 0;
    if (a5)
    {
      v18 = *(_WORD *)(a3 + 8);
      if ((v18 & 0x11) != 0)
      {
        v19 = 0;
      }
      else if ((v18 & 2) != 0)
      {
        v19 = (const UChar *)(a3 + 10);
      }
      else
      {
        v19 = *(const UChar **)(a3 + 24);
      }
      v20 = v19;
      icu::UnicodeString::setTo(v17, 1, &v20, -1);
    }
    else
    {
      icu::UnicodeString::operator=((UChar **)v17, (UChar **)a3);
    }
    return (uint64_t *)sub_18BD8AD88(a1, a2, v16, a6);
  }
  else
  {
    *a7 = 7;
  }
  return result;
}

uint64_t *sub_18BD8B078@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t *result;
  uint64_t v12;
  icu::UnicodeString *v13;
  __int16 v14;
  const UChar *v15;
  const UChar *v16;

  result = icu::UMemory::operator new(a6, (icu::UMemory *)0x68, a2);
  if (result)
  {
    v12 = (uint64_t)result;
    result[1] = (uint64_t)off_1E2256B38;
    v13 = (icu::UnicodeString *)(result + 1);
    *(_WORD *)(v12 + 16) = 2;
    *(_QWORD *)(v12 + 80) = 0;
    *(_QWORD *)(v12 + 88) = 0;
    *(_DWORD *)v12 = 6;
    if (a4)
    {
      v14 = *(_WORD *)(a3 + 8);
      if ((v14 & 0x11) != 0)
      {
        v15 = 0;
      }
      else if ((v14 & 2) != 0)
      {
        v15 = (const UChar *)(a3 + 10);
      }
      else
      {
        v15 = *(const UChar **)(a3 + 24);
      }
      v16 = v15;
      icu::UnicodeString::setTo(v13, 1, &v16, -1);
    }
    else
    {
      icu::UnicodeString::operator=((UChar **)v13, (UChar **)a3);
    }
    return (uint64_t *)sub_18BD8AD88(a1, a2, v12, a5);
  }
  return result;
}

void *sub_18BD8B15C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v8;
  void (**v9)(icu::UnicodeString *__hidden);
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  void (**v14)(icu::UnicodeString *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  UChar *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  UChar *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v28 = 0;
  v27 = 0u;
  v26 = 0u;
  LOWORD(v25) = 2;
  v20 = 0u;
  v23 = 0;
  v24 = (UChar *)off_1E2256B38;
  v22 = 0u;
  v21 = 0u;
  v19 = (UChar *)off_1E2256B38;
  LOWORD(v20) = 2;
  v15 = 0u;
  v16 = 0u;
  v18 = 0;
  v17 = 0u;
  v14 = off_1E2256B38;
  LOWORD(v15) = 2;
  v8 = 0;
  sub_18BD8DFDC(a2, (icu::UnicodeString *)&v24, (uint64_t)&v19, (uint64_t)&v14, &v8);
  v10 = 0u;
  v11 = 0u;
  v13 = 0;
  v12 = 0u;
  v9 = off_1E2256B38;
  LOWORD(v10) = 2;
  sub_18BD8E29C(&v24, (uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v9);
  uhash_remove(*(_QWORD *)(a1 + 8), &v9);
  sub_18BD8B2A4(a1, (uint64_t)&v24, &v19, (uint64_t)&v14);
  uhash_remove(*(_QWORD *)(a1 + 224), &v9);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v19);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v24);
}

uint64_t sub_18BD8B2A4(uint64_t a1, uint64_t a2, UChar **a3, uint64_t a4)
{
  uint64_t result;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  icu::UnicodeString *v15;
  uint64_t v16;
  int v17;

  v17 = 0;
  result = uhash_get(*(_QWORD *)(a1 + 96), a2);
  if (result)
  {
    v9 = (uint64_t *)result;
    result = uhash_geti(*(_QWORD *)result, (uint64_t)a3);
    if ((_DWORD)result)
    {
      v10 = result;
      result = icu::UVector::indexOf((icu::UVector *)(a1 + 184), a4, 0);
      if ((result & 0x80000000) == 0)
      {
        v12 = (uint64_t *)(1 << result);
        v13 = *v9;
        v14 = v10 & ~(_DWORD)v12;
        if (v14)
        {
          v15 = (icu::UnicodeString *)icu::UMemory::operator new(v12, (icu::UMemory *)0x40, v11);
          v16 = (uint64_t)v15;
          if (v15)
            icu::UnicodeString::UnicodeString(v15, a3);
          return uhash_puti(v13, v16, v14, &v17);
        }
        else
        {
          uhash_remove(*v9, a3);
          result = uhash_count(*v9);
          if (!(_DWORD)result)
            return uhash_remove(*(_QWORD *)(a1 + 96), a2);
        }
      }
    }
  }
  return result;
}

uint64_t sub_18BD8B3A0(uint64_t a1)
{
  return uhash_count(*(_QWORD *)(a1 + 224));
}

uint64_t *sub_18BD8B3A8(uint64_t a1, int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned __int8 v7;
  int v9;

  if (a2 < 0 || (v3 = a2, (int)uhash_count(*(_QWORD *)(a1 + 224)) <= a2))
    v3 = 0;
  v9 = -1;
  v4 = v3 + 1;
  while (1)
  {
    v5 = uhash_nextElement(*(uint64_t **)(a1 + 224), &v9);
    if (!v5)
      break;
    if (--v4 < 1)
      return *(uint64_t **)(v5 + 16);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_1EE00A058);
  if ((v7 & 1) != 0)
    return &qword_1EE00A018;
  v6 = &qword_1EE00A018;
  if (__cxa_guard_acquire(&qword_1EE00A058))
  {
    qword_1EE00A018 = (uint64_t)off_1E2256B38;
    word_1EE00A020 = 2;
    __cxa_atexit((void (*)(void *))icu::UnicodeString::~UnicodeString, &qword_1EE00A018, &dword_18BBAA000);
    __cxa_guard_release(&qword_1EE00A058);
  }
  return v6;
}

uint64_t *sub_18BD8B48C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x88, a2);
  v5 = v4;
  if (v4)
  {
    icu::StringEnumeration::StringEnumeration((uint64_t)v4);
    *v5 = (uint64_t)&off_1E2267258;
    *((_DWORD *)v5 + 29) = -1;
    *((_DWORD *)v5 + 30) = uhash_count(*(_QWORD *)(a1 + 224));
    v5[16] = a1;
  }
  return v5;
}

uint64_t sub_18BD8B4E8(uint64_t a1)
{
  return uhash_count(*(_QWORD *)(a1 + 96));
}

UChar **sub_18BD8B4F0(uint64_t a1, int a2, UChar **this)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v10;

  v10 = -1;
  if ((a2 & 0x80000000) == 0)
  {
    v5 = a2 + 1;
    while (1)
    {
      v6 = uhash_nextElement(*(uint64_t **)(a1 + 96), &v10);
      if (!v6)
        break;
      if (--v5 < 1)
      {
        icu::UnicodeString::operator=(this, *(UChar ***)(v6 + 16));
        return this;
      }
    }
  }
  v7 = *((unsigned __int16 *)this + 4);
  if ((v7 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *((_DWORD *)this + 3);
    if (v8)
      *((_WORD *)this + 4) &= 0x1Fu;
  }
  return this;
}

uint64_t *sub_18BD8B594(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  result = (uint64_t *)uhash_get(*(_QWORD *)(a1 + 96), a2);
  if (result)
    return (uint64_t *)uhash_count(*result);
  return result;
}

uint64_t sub_18BD8B5BC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v13;

  v6 = uhash_get(*(_QWORD *)(a1 + 96), a3);
  if (v6)
  {
    v13 = -1;
    if ((a2 & 0x80000000) == 0)
    {
      v7 = (uint64_t **)v6;
      v8 = a2 + 1;
      while (1)
      {
        v9 = uhash_nextElement(*v7, &v13);
        if (!v9)
          break;
        if (--v8 < 1)
        {
          icu::UnicodeString::operator=((UChar **)a4, *(UChar ***)(v9 + 16));
          return a4;
        }
      }
    }
  }
  v10 = *(unsigned __int16 *)(a4 + 8);
  if ((v10 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a4);
  }
  else
  {
    if ((v10 & 0x8000u) == 0)
      v11 = v10 >> 5;
    else
      v11 = *(_DWORD *)(a4 + 12);
    if (v11)
      *(_WORD *)(a4 + 8) &= 0x1Fu;
  }
  return a4;
}

uint64_t sub_18BD8B674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;

  result = uhash_get(*(_QWORD *)(a1 + 96), a2);
  if (result)
  {
    result = uhash_geti(*(_QWORD *)result, a3);
    if ((_DWORD)result)
    {
      v5 = result;
      LODWORD(result) = 0;
      do
      {
        result = result + (v5 & 1);
        v6 = v5 > 1;
        v5 >>= 1;
      }
      while (v6);
    }
  }
  return result;
}

uint64_t sub_18BD8B6CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  UChar **v17;

  v9 = (uint64_t *)uhash_get(*(_QWORD *)(a1 + 96), a3);
  if (!v9)
    goto LABEL_8;
  v10 = uhash_geti(*v9, a4);
  if (!v10)
    goto LABEL_8;
  v11 = 0;
  v12 = 0;
  while ((v10 & 1) == 0)
  {
LABEL_7:
    ++v11;
    v13 = v10 > 1;
    v10 >>= 1;
    if (!v13)
      goto LABEL_8;
  }
  if (v12 != a2)
  {
    ++v12;
    goto LABEL_7;
  }
  v17 = (UChar **)icu::UVector::elementAt((icu::UVector *)(a1 + 184), v11);
  if (v17)
  {
    icu::UnicodeString::operator=((UChar **)a5, v17);
    return a5;
  }
LABEL_8:
  v14 = *(unsigned __int16 *)(a5 + 8);
  if ((v14 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a5);
  }
  else
  {
    if ((v14 & 0x8000u) == 0)
      v15 = v14 >> 5;
    else
      v15 = *(_DWORD *)(a5 + 12);
    if (v15)
      *(_WORD *)(a5 + 8) &= 0x1Fu;
  }
  return a5;
}

void sub_18BD8B7A0(icu::StringEnumeration *a1)
{
  void *v1;

  icu::StringEnumeration::~StringEnumeration(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD8B7B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

UChar **sub_18BD8B7BC(uint64_t a1, int *a2)
{
  UChar **v2;
  uint64_t Element;

  if (*a2 > 0)
    return 0;
  if (uhash_count(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 224)) != *(_DWORD *)(a1 + 120))
  {
    v2 = 0;
    *a2 = 25;
    return v2;
  }
  Element = uhash_nextElement(*(uint64_t **)(*(_QWORD *)(a1 + 128) + 224), (int *)(a1 + 116));
  if (!Element)
    return 0;
  v2 = (UChar **)(a1 + 8);
  icu::UnicodeString::operator=(v2, *(UChar ***)(Element + 16));
  return v2;
}

uint64_t sub_18BD8B840(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 116) = -1;
  result = uhash_count(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 224));
  *(_DWORD *)(a1 + 120) = result;
  return result;
}

void *sub_18BD8B874()
{
  return &unk_1EE00A060;
}

void *sub_18BD8B880(uint64_t a1, UChar **a2, UChar **a3, UChar **a4, uint64_t a5, int a6)
{
  int v12;
  uint64_t *v13;
  void *v14;
  void *v15;
  const UChar *v17;
  _OWORD v18[4];
  UChar *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v23 = 0;
  v22 = 0u;
  v19 = (UChar *)off_1E2256B38;
  LOWORD(v20) = 2;
  memset(v18, 0, sizeof(v18));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, a2);
  v12 = WORD4(v18[0]) >> 5;
  if (SWORD4(v18[0]) < 0)
    v12 = HIDWORD(v18[0]);
  if (!v12)
  {
    v17 = (const UChar *)&unk_18BE2B662;
    icu::UnicodeString::setTo((icu::UnicodeString *)v18, 1, &v17, 3);
  }
  sub_18BD8E29C(a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)&v19);
  sub_18BD8B9B8(a1, &v19, (uint64_t)v18, a3, a4, a5, a6, v13);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
  return icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v19);
}

uint64_t sub_18BD8B9B8@<X0>(uint64_t a1@<X0>, UChar **a2@<X1>, uint64_t a3@<X2>, UChar **a4@<X3>, UChar **a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t v15;
  icu::UnicodeString *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  icu::UnicodeString *v22;
  uint64_t v23;
  int v24;

  v24 = 0;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = (icu::UnicodeString *)icu::UMemory::operator new(a8, (icu::UMemory *)0x40, (unint64_t)a2);
  v17 = (uint64_t)v16;
  if (v16)
    icu::UnicodeString::UnicodeString(v16, a2);
  uhash_put(v15, v17, a6, &v24);
  if (a7)
  {
    sub_18BD8BABC(a1, a3, a4, a5);
    result = uhash_containsKey(*(_QWORD *)(a1 + 224), (uint64_t)a2);
    if (!(_DWORD)result)
    {
      v21 = *(_QWORD *)(a1 + 224);
      v22 = (icu::UnicodeString *)icu::UMemory::operator new(v20, (icu::UMemory *)0x40, v19);
      v23 = (uint64_t)v22;
      if (v22)
        icu::UnicodeString::UnicodeString(v22, a2);
      return uhash_puti(v21, v23, 1u, &v24);
    }
  }
  else
  {
    sub_18BD8B2A4(a1, a3, a4, (uint64_t)a5);
    return uhash_remove(*(_QWORD *)(a1 + 224), a2);
  }
  return result;
}

uint64_t sub_18BD8BABC(uint64_t a1, uint64_t a2, UChar **a3, UChar **a4)
{
  uint64_t *v8;
  uint64_t result;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  icu::UnicodeString *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int32_t v19;
  int32_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int32_t v26;
  int32_t v27;
  int v28;
  int v29;
  uint64_t *v30;
  void *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  icu::UnicodeString *v36;
  uint64_t v37;
  void *v38;
  UErrorCode v39;

  v39 = U_ZERO_ERROR;
  v8 = (uint64_t *)uhash_get(*(_QWORD *)(a1 + 96), a2);
  if (!v8)
  {
    v17 = *(unsigned __int16 *)(a2 + 8);
    v18 = (__int16)v17;
    v19 = v17 >> 5;
    if (v18 >= 0)
      v20 = v19;
    else
      v20 = *(_DWORD *)(a2 + 12);
    v21 = icu::UnicodeString::doCompare(a2, 0, v20, (uint64_t)&unk_18BE2B662, 0, 3);
    v38 = &unk_18BE2B662;
    v23 = (uint64_t)&v38;
    if (v21)
    {
      v24 = *(unsigned __int16 *)(a2 + 8);
      v25 = (__int16)v24;
      v26 = v24 >> 5;
      if (v25 >= 0)
        v27 = v26;
      else
        v27 = *(_DWORD *)(a2 + 12);
      v28 = icu::UnicodeString::doCompare(a2, 0, v27, (uint64_t)&unk_18BE2B66A, 0, 3);
      v23 = 23;
      if (v28)
        v29 = 3;
      else
        v29 = 23;
    }
    else
    {
      v29 = 102;
    }
    result = (uint64_t)icu::UMemory::operator new((uint64_t *)v23, (icu::UMemory *)0x58, v22);
    if (!result)
      return result;
    v8 = (uint64_t *)result;
    *(_QWORD *)result = 0;
    v33 = result + 8;
    result = (uint64_t)uhash_initSize((int32x2_t *)(result + 8), (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, v29, (int *)&v39);
    if (v39 > U_ZERO_ERROR)
      return result;
    *v8 = v33;
    result = uhash_setKeyDeleter(v33, (uint64_t)uprv_deleteUObject);
    if (v39 > U_ZERO_ERROR)
      return result;
    v35 = *(_QWORD *)(a1 + 96);
    v36 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v39, (icu::UMemory *)0x40, v34);
    v37 = (uint64_t)v36;
    if (v36)
      icu::UnicodeString::UnicodeString(v36, (UChar **)a2);
    uhash_put(v35, v37, (uint64_t)v8, (int *)&v39);
  }
  result = icu::UVector::indexOf((icu::UVector *)(a1 + 184), (uint64_t)a4, 0);
  if ((result & 0x80000000) == 0
    || (v30 = (uint64_t *)*(unsigned int *)(a1 + 192), (int)v30 <= 30)
    && (result = (uint64_t)icu::UMemory::operator new(v30, (icu::UMemory *)0x40, v10)) != 0
    && (v31 = (void *)result,
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)result, a4),
        result = icu::UVector::adoptElement((icu::UVector *)(a1 + 184), v31, &v39),
        v39 <= U_ZERO_ERROR)
    && (v32 = *(_DWORD *)(a1 + 192), result = (v32 - 1), v32 >= 1))
  {
    v11 = uhash_geti(*v8, (uint64_t)a3) | (1 << result);
    v12 = *v8;
    v15 = (icu::UnicodeString *)icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v13);
    v16 = (uint64_t)v15;
    if (v15)
      icu::UnicodeString::UnicodeString(v15, a3);
    return uhash_puti(v12, v16, v11, (int *)&v39);
  }
  return result;
}

uint64_t sub_18BD8BD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  void (**v8)(icu::UnicodeString *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v12 = 0;
  v11 = 0u;
  v8 = off_1E2256B38;
  LOWORD(v9) = 2;
  sub_18BD8E29C((UChar **)(a2 + 72), a3 + 72, a4, (uint64_t)&v8);
  v5 = uhash_get(*(_QWORD *)(a1 + 8), (uint64_t)&v8);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
  return v5;
}

uint64_t *sub_18BD8BDB8(uint64_t a1, uint64_t a2, uint64_t a3, UChar **a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;

  v6 = a2;
  if (*(_BYTE *)(a2 + 264))
  {
    v8 = a2;
    a2 = a3;
    v9 = (uint64_t)a4;
    v10 = 0;
  }
  else
  {
    if (!*(_BYTE *)(a3 + 264))
      return 0;
    v8 = a3;
    v9 = (uint64_t)a4;
    v10 = 1;
  }
  v11 = sub_18BD8BE58(v8, a2, v9, v10);
  if (v11)
    sub_18BD8B880(a1, (UChar **)(v6 + 8), (UChar **)(a3 + 8), a4, (uint64_t)v11, 0);
  return v11;
}

uint64_t *sub_18BD8BE58(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v6;
  UChar **v7;
  void *v8;
  char v9;
  int v10;
  icu::UnicodeString *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  icu::ResourceBundle *v16;
  int *appended;
  int v18;
  uint64_t *Locale;
  icu::UnicodeString *v20;
  const icu::Locale *inited;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t *v35;
  void *v36;
  void *v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  UChar **v42;
  int v43;
  icu::UnicodeString *v45;
  _QWORD v46[3];
  UErrorCode v47;
  void *v48;
  int v49;
  __int16 v50;
  int v51;
  void *v52;
  int v53;
  __int16 v54;
  int v55;
  _OWORD v56[4];
  UChar *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  void (**v62)(icu::UnicodeString *__hidden);
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v63 = 0u;
  v66 = 0;
  v65 = 0u;
  v64 = 0u;
  v61 = 0;
  v62 = off_1E2256B38;
  LOWORD(v63) = 2;
  if (a4)
    v6 = &unk_18BE2B692;
  else
    v6 = &unk_18BE2B672;
  v7 = (UChar **)(a2 + 72);
  v58 = 0uLL;
  v45 = (icu::UnicodeString *)(a1 + 72);
  v60 = 0uLL;
  v59 = 0uLL;
  v57 = (UChar *)off_1E2256B38;
  LOWORD(v58) = 2;
  LOBYTE(v8) = 1;
  while (1)
  {
    v9 = (char)v8;
    if ((v63 & 1) != 0)
    {
      icu::UnicodeString::unBogus((uint64_t)&v62);
    }
    else
    {
      if ((v63 & 0x8000u) == 0)
        v10 = (unsigned __int16)v63 >> 5;
      else
        v10 = DWORD1(v63);
      if (v10)
      {
        LOBYTE(v63) = v63 & 0x1F;
        LOWORD(v63) = v63;
      }
    }
    if ((v9 & 1) != 0)
      icu::UnicodeString::doAppend((uint64_t)&v62, (uint64_t)v6, 0, 0xFFFFFFFFLL);
    else
      icu::UnicodeString::doAppend((uint64_t)&v62, (uint64_t)&unk_18BE2B6B6, 0, 0xFFFFFFFFLL);
    memset(v56, 0, sizeof(v56));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v56, v7);
    icu::Locale::Locale((icu::Locale *)&v52, "", 0, 0, 0);
    v11 = icu::UnicodeString::toUpper((const UChar **)v56, (const icu::Locale *)&v52);
    v12 = *((unsigned __int16 *)v11 + 4);
    v13 = (__int16)v12;
    v14 = v12 >> 5;
    if (v13 >= 0)
      v15 = v14;
    else
      v15 = *((unsigned int *)v11 + 3);
    icu::UnicodeString::doAppend((uint64_t)&v62, v11, 0, v15);
    icu::Locale::~Locale((icu::Locale *)&v52);
    v47 = U_ZERO_ERROR;
    memset(v46, 0, sizeof(v46));
    v16 = *(icu::ResourceBundle **)(a1 + 272);
    v52 = (char *)&v54 + 1;
    v53 = 40;
    v54 = 0;
    v55 = 0;
    appended = icu::CharString::appendInvariantChars((icu::CharString *)&v52, (const icu::UnicodeString *)&v62, &v47);
    icu::ResourceBundle::get(v16, *(const char **)appended, &v47, v46);
    if ((_BYTE)v54)
      uprv_free(v52);
    if (v47 > U_ZERO_ERROR || v47 == U_USING_DEFAULT_WARNING)
      goto LABEL_49;
    if ((BYTE8(v56[0]) & 1) != 0)
    {
      icu::UnicodeString::unBogus((uint64_t)v56);
    }
    else
    {
      if ((SWORD4(v56[0]) & 0x8000u) == 0)
        v18 = WORD4(v56[0]) >> 5;
      else
        v18 = HIDWORD(v56[0]);
      if (v18)
      {
        BYTE8(v56[0]) &= 0x1Fu;
        WORD4(v56[0]) = BYTE8(v56[0]);
      }
    }
    Locale = icu::ResourceBundle::getLocale((icu::ResourceBundle *)v46);
    inited = icu::LocaleUtility::initNameFromLocale((icu::LocaleUtility *)Locale, (const icu::Locale *)v56, v20);
    v22 = *(unsigned __int16 *)(a1 + 80);
    if ((v22 & 1) != 0)
    {
      if ((*((_WORD *)inited + 4) & 1) == 0)
        goto LABEL_49;
    }
    else
    {
      v23 = (__int16)v22;
      v24 = v22 >> 5;
      if (v23 >= 0)
        v25 = v24;
      else
        v25 = *(_DWORD *)(a1 + 84);
      v26 = *((unsigned __int16 *)inited + 4);
      if ((v26 & 0x8000u) == 0)
        v27 = v26 >> 5;
      else
        v27 = *((_DWORD *)inited + 3);
      if ((v26 & 1) != 0 || v25 != v27 || !icu::UnicodeString::doEquals(v45, inited, v25))
        goto LABEL_49;
    }
    v28 = *(unsigned __int16 *)(a3 + 8);
    v29 = (__int16)v28;
    v30 = v28 >> 5;
    if (v29 < 0)
      v30 = *(_DWORD *)(a3 + 12);
    v47 = U_ZERO_ERROR;
    if (v30)
      break;
    icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v46, &v47, 1, (uint64_t)&v52);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v57, (icu::UnicodeString *)&v52);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v52);
    if (v47 < U_ILLEGAL_ARGUMENT_ERROR)
      goto LABEL_52;
LABEL_49:
    icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v46);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v56);
    v8 = 0;
    if ((v9 & 1) == 0)
    {
      v35 = 0;
      goto LABEL_51;
    }
  }
  v48 = (char *)&v50 + 1;
  v49 = 40;
  v50 = 0;
  v51 = 0;
  v31 = icu::CharString::appendInvariantChars((icu::CharString *)&v48, (const icu::UnicodeString *)a3, &v47);
  icu::ResourceBundle::getStringEx((icu::ResourceBundle *)v46, *(const char **)v31, &v47, (uint64_t)&v52);
  icu::UnicodeString::operator=((icu::UnicodeString *)&v57, (icu::UnicodeString *)&v52);
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v52);
  if ((_BYTE)v50)
    uprv_free(v48);
  if (v47 > U_ZERO_ERROR)
    goto LABEL_49;
LABEL_52:
  icu::ResourceBundle::~ResourceBundle((icu::ResourceBundle *)v46);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v56);
  v41 = icu::UMemory::operator new(v40, (icu::UMemory *)0x68, v39);
  v35 = v41;
  if (v41)
  {
    v41[1] = (uint64_t)off_1E2256B38;
    v42 = (UChar **)(v41 + 1);
    *((_WORD *)v35 + 8) = 2;
    v35[10] = 0;
    v35[11] = 0;
    if ((v9 & 1) != 0)
      v43 = 0;
    else
      v43 = a4;
    *(_DWORD *)v35 = 2;
    icu::UnicodeString::operator=(v42, &v57);
    *((_DWORD *)v35 + 18) = v43;
  }
LABEL_51:
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v57);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v62);
  return v35;
}

uint64_t sub_18BD8C29C(uint64_t a1, UChar **a2, UChar **a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unsigned int v11;
  int v12;
  unsigned int v13;
  void *v14;
  void *v15;
  int v16;
  void *v17;
  UChar *v18;
  __int16 v19;
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[8];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[8];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  memset(v36, 0, sizeof(v36));
  sub_18BD89DE4((uint64_t)v36, a2);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  memset(v25, 0, sizeof(v25));
  sub_18BD89DE4((uint64_t)v25, a3);
  v21 = 0u;
  v24 = 0;
  v23 = 0u;
  v22 = 0u;
  v20 = off_1E2256B38;
  LOWORD(v21) = 2;
  sub_18BD8E29C(a2, (uint64_t)a3, a4, (uint64_t)&v20);
  v9 = uhash_get(*(_QWORD *)(a1 + 8), (uint64_t)&v20);
  if (!v9)
  {
    v11 = *(unsigned __int16 *)(a4 + 8);
    v12 = (__int16)v11;
    v13 = v11 >> 5;
    if (v12 < 0)
      v13 = *(_DWORD *)(a4 + 12);
    if (!v13
      || (v9 = sub_18BD8BD0C(a1, (uint64_t)v36, (uint64_t)v25, a4)) == 0
      && (v9 = (uint64_t)sub_18BD8BDB8(a1, (uint64_t)v36, (uint64_t)v25, (UChar **)a4)) == 0)
    {
      sub_18BD8A07C((uint64_t)v36);
      v18 = (UChar *)off_1E2256B38;
      v19 = 2;
      v9 = sub_18BD8BD0C(a1, (uint64_t)v36, (uint64_t)v25, (uint64_t)&v18);
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v18);
      while (!v9)
      {
        v18 = (UChar *)off_1E2256B38;
        v19 = 2;
        v9 = (uint64_t)sub_18BD8BDB8(a1, (uint64_t)v36, (uint64_t)v25, &v18);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v18);
        if (v9)
          break;
        v16 = (unsigned __int16)v38 >> 5;
        if ((v38 & 0x8000u) != 0)
          v16 = DWORD1(v38);
        if (v16)
        {
          icu::UnicodeString::operator=((UChar **)&v36[4] + 1, (UChar **)&v37 + 1);
          BYTE8(v45) = BYTE9(v45);
          sub_18BD8A184((uint64_t)v36);
        }
        else
        {
          LODWORD(v8) = (unsigned __int16)v27 >> 5;
          if ((v27 & 0x8000u) == 0)
            v8 = v8;
          else
            v8 = DWORD1(v27);
          if (!(_DWORD)v8)
          {
            v9 = 0;
            break;
          }
          icu::UnicodeString::operator=((UChar **)&v25[4] + 1, (UChar **)&v26 + 1);
          BYTE8(v34) = BYTE9(v34);
          sub_18BD8A184((uint64_t)v25);
          sub_18BD8A07C((uint64_t)v36);
        }
        v18 = (UChar *)off_1E2256B38;
        v19 = 2;
        v9 = sub_18BD8BD0C(a1, (uint64_t)v36, (uint64_t)v25, (uint64_t)&v18);
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v18);
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v20);
  sub_18BD8A130(v25);
  sub_18BD8A130(v36);
  return v9;
}

uint64_t sub_18BD8C580(uint64_t a1, UChar **a2, UChar **a3, UChar **a4, char a5, UChar **a6)
{
  *(_QWORD *)(a1 + 8) = off_1E2256B38;
  *(_WORD *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 72) = off_1E2256B38;
  *(_QWORD *)(a1 + 136) = off_1E2256B38;
  *(_WORD *)(a1 + 80) = 2;
  *(_WORD *)(a1 + 144) = 2;
  *(_QWORD *)(a1 + 200) = off_1E2256B38;
  *(_WORD *)(a1 + 208) = 2;
  icu::UnicodeString::operator=((UChar **)(a1 + 8), a2);
  icu::UnicodeString::operator=((UChar **)(a1 + 72), a3);
  icu::UnicodeString::operator=((UChar **)(a1 + 136), a4);
  *(_BYTE *)(a1 + 264) = a5;
  icu::UnicodeString::operator=((UChar **)(a1 + 200), a6);
  return a1;
}

icu::Transliterator *sub_18BD8C630(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3)
{
  unint64_t v4;
  icu::Transliterator *BasicInstance;
  const icu::UnicodeString *v6;
  void *v7;
  uint64_t *v8;
  icu::UnicodeSet *v9;
  icu::UnicodeSet *v10;
  void *v11;
  void *v13;
  UErrorCode v14[16];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if ((*(__int16 *)(a1 + 80) & 0x80000000) == 0)
  {
    if (*(unsigned __int16 *)(a1 + 80) >> 5)
      goto LABEL_3;
LABEL_6:
    v13 = &unk_18BE2B6FE;
    icu::UnicodeString::UnicodeString(v14, 1, &v13);
    BasicInstance = (icu::Transliterator *)icu::Transliterator::createBasicInstance((icu::Transliterator *)v14, (const icu::UnicodeString *)(a1 + 8), v6);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v14);
    if (!BasicInstance)
      return BasicInstance;
    goto LABEL_7;
  }
  if (!*(_DWORD *)(a1 + 84))
    goto LABEL_6;
LABEL_3:
  BasicInstance = (icu::Transliterator *)icu::Transliterator::createBasicInstance((icu::Transliterator *)(a1 + 72), (const icu::UnicodeString *)(a1 + 8), a3);
  if (!BasicInstance)
    return BasicInstance;
LABEL_7:
  if (*(__int16 *)(a1 + 144) < 0)
  {
    v8 = (uint64_t *)*(unsigned int *)(a1 + 148);
    if (!(_DWORD)v8)
      return BasicInstance;
  }
  else
  {
    v8 = (uint64_t *)(*(unsigned __int16 *)(a1 + 144) >> 5);
    if (!(_DWORD)v8)
      return BasicInstance;
  }
  v14[0] = U_ZERO_ERROR;
  v9 = (icu::UnicodeSet *)icu::UMemory::operator new(v8, (icu::UMemory *)0xC8, v4);
  v10 = v9;
  if (v9
    && (icu::UnicodeSet::UnicodeSet(v9, (const icu::UnicodeString *)(a1 + 136), v14), v14[0] >= U_ILLEGAL_ARGUMENT_ERROR))
  {
    icu::UnicodeSet::~UnicodeSet(v10);
    icu::UMemory::operator delete(v11);
  }
  else
  {
    icu::Transliterator::adoptFilter(BasicInstance, v10);
  }
  return BasicInstance;
}

UChar **sub_18BD8C774(uint64_t a1, const icu::UnicodeString *a2, int a3, int *a4)
{
  UChar **v8;
  int v9;
  int v10;
  uint64_t v11;
  UChar **v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  icu::UnicodeString *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  UChar **v26;
  uint64_t *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  __int16 v53;
  __int16 v54;
  __int16 v55;
  __int16 v56;

  v8 = 0;
  v9 = *(_DWORD *)a2;
  v10 = 2;
  while (1)
  {
    if (v10 == 1)
    {
      v8 = (UChar **)sub_18BD8CAC8(a1, a2, 1);
      if (!v8)
        goto LABEL_23;
    }
    if (icu::ICU_Utility::parseChar(a1, a2, 40))
      break;
    if (!--v10)
    {
      v11 = (uint64_t)v8;
      if (a3)
      {
        v12 = (UChar **)sub_18BD8D33C((uint64_t)v8, a4);
        if (!v12)
        {
          v11 = (uint64_t)v8;
          v13 = 1;
          goto LABEL_25;
        }
        goto LABEL_26;
      }
      v13 = 0;
LABEL_25:
      v12 = (UChar **)sub_18BD8D02C(v11, v13);
      if (v12)
      {
LABEL_26:
        icu::UnicodeString::operator=(v12 + 17, v8 + 25);
        v14 = 0;
        if (v8)
          goto LABEL_27;
        goto LABEL_28;
      }
LABEL_45:
      *a4 = 7;
      return v12;
    }
  }
  if (icu::ICU_Utility::parseChar(a1, a2, 41))
  {
    v14 = 0;
  }
  else
  {
    v27 = sub_18BD8CAC8(a1, a2, 1);
    if (!v27 || (v14 = (uint64_t)v27, !icu::ICU_Utility::parseChar(a1, a2, 41)))
    {
      if (v8)
      {
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)(v8 + 25));
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)(v8 + 17));
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)(v8 + 9));
        icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)(v8 + 1));
        icu::UMemory::operator delete(v8);
      }
LABEL_23:
      v12 = 0;
      *(_DWORD *)a2 = v9;
      return v12;
    }
  }
  if (a3)
  {
    v15 = sub_18BD8D02C((uint64_t)v8, 0);
    v16 = sub_18BD8D02C(v14, 0);
    v12 = (UChar **)v16;
    if (v15 && v16)
    {
      v55 = 40;
      v18 = icu::UnicodeString::doAppend((uint64_t)(v16 + 1), (uint64_t)&v55, 0, 1);
      v19 = (icu::UnicodeString *)(v15 + 1);
      v20 = *((unsigned __int16 *)v15 + 8);
      v21 = (__int16)v20;
      v22 = v20 >> 5;
      if (v21 >= 0)
        v23 = v22;
      else
        v23 = *((unsigned int *)v15 + 5);
      v24 = icu::UnicodeString::doAppend(v18, (const icu::UnicodeString *)(v15 + 1), 0, v23);
      v56 = 41;
      icu::UnicodeString::doAppend(v24, (uint64_t)&v56, 0, 1);
      if (v14)
      {
        v26 = (UChar **)(v14 + 200);
LABEL_37:
        icu::UnicodeString::operator=(v12 + 17, v26);
        goto LABEL_38;
      }
      goto LABEL_38;
    }
LABEL_40:
    if (v15)
    {
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(v15 + 17));
      icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)(v15 + 9));
      icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)(v15 + 1));
      icu::UMemory::operator delete(v15);
    }
    if (v12)
    {
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(v12 + 17));
      icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)(v12 + 9));
      icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
    }
    v12 = 0;
    goto LABEL_45;
  }
  v15 = sub_18BD8D02C(v14, 0);
  v39 = sub_18BD8D02C((uint64_t)v8, 0);
  v12 = (UChar **)v39;
  if (!v15 || !v39)
    goto LABEL_40;
  v53 = 40;
  v40 = icu::UnicodeString::doAppend((uint64_t)(v39 + 1), (uint64_t)&v53, 0, 1);
  v19 = (icu::UnicodeString *)(v15 + 1);
  v41 = *((unsigned __int16 *)v15 + 8);
  v42 = (__int16)v41;
  v43 = v41 >> 5;
  if (v42 >= 0)
    v44 = v43;
  else
    v44 = *((unsigned int *)v15 + 5);
  v45 = icu::UnicodeString::doAppend(v40, (const icu::UnicodeString *)(v15 + 1), 0, v44);
  v54 = 41;
  icu::UnicodeString::doAppend(v45, (uint64_t)&v54, 0, 1);
  if (v8)
  {
    v26 = v8 + 25;
    goto LABEL_37;
  }
LABEL_38:
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)(v15 + 17));
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)(v15 + 9));
  icu::UnicodeString::~UnicodeString(v47, v19);
  icu::UMemory::operator delete(v15);
  if (v8)
  {
LABEL_27:
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)(v8 + 25));
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)(v8 + 17));
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)(v8 + 9));
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)(v8 + 1));
    icu::UMemory::operator delete(v8);
  }
LABEL_28:
  if (v14)
  {
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)(v14 + 200));
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)(v14 + 136));
    icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)(v14 + 72));
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)(v14 + 8));
    icu::UMemory::operator delete((void *)v14);
  }
  return v12;
}

uint64_t *sub_18BD8CAC8(uint64_t a1, const icu::UnicodeString *a2, int a3)
{
  unint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  UChar **v12;
  int v13;
  char v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  void *v33;
  UChar **v34;
  void *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  unsigned int v51;
  UErrorCode v52;
  void (**v53)(icu::ParsePosition *__hidden);
  unsigned int v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  UChar *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  UChar *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  UChar *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  UChar *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  UChar *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v90 = 0u;
  v93 = 0;
  v92 = 0u;
  v91 = 0u;
  LOWORD(v90) = 2;
  v85 = 0u;
  v88 = 0;
  v89 = (UChar *)off_1E2256B38;
  v87 = 0u;
  v86 = 0u;
  LOWORD(v85) = 2;
  v80 = 0u;
  v83 = 0;
  v84 = (UChar *)off_1E2256B38;
  v82 = 0u;
  v81 = 0u;
  LOWORD(v80) = 2;
  v75 = 0u;
  v78 = 0;
  v79 = (UChar *)off_1E2256B38;
  v77 = 0u;
  v76 = 0u;
  v74 = (UChar *)off_1E2256B38;
  LOWORD(v75) = 2;
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  v70 = 0u;
  v69 = (UChar *)off_1E2256B38;
  LOWORD(v70) = 2;
  v51 = *(_DWORD *)a2;
  icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
  v6 = *(unsigned int *)a2;
  v7 = *(unsigned __int16 *)(a1 + 8);
  v8 = (__int16)v7;
  v9 = v7 >> 5;
  if (v8 < 0)
    v9 = *(_DWORD *)(a1 + 12);
  if ((_DWORD)v6 != v9)
  {
    v15 = 0;
    while (1)
    {
      v16 = 0;
      while (1)
      {
        if (a3)
        {
          while (1)
          {
            v17 = (unsigned __int16)v70 >> 5;
            if ((v70 & 0x8000u) != 0)
              v17 = DWORD1(v70);
            if (v17 || !icu::UnicodeSet::resemblesPattern((icu::UnicodeSet *)a1, (const icu::UnicodeString *)v6))
              break;
            v18 = *(_DWORD *)a2;
            v53 = off_1E224A8B0;
            v54 = v18;
            v55 = -1;
            v52 = U_ZERO_ERROR;
            v68 = 0;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v63 = 0u;
            v61 = 0u;
            v62 = 0u;
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v56 = 0u;
            icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v56, (const icu::UnicodeString *)a1, (icu::ParsePosition *)&v53, 1u, 0, &v52);
            if (v52 > U_ZERO_ERROR)
            {
              *(_DWORD *)a2 = v51;
              icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v56);
              icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v53);
              v45 = 0;
              goto LABEL_81;
            }
            (*(void (**)(uint64_t, _QWORD, _QWORD, UChar **))(*(_QWORD *)a1 + 24))(a1, *(unsigned int *)a2, v54, &v69);
            *(_DWORD *)a2 = v54;
            icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)&v56);
            icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v53);
            icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
            v6 = *(unsigned int *)a2;
            v19 = *(unsigned __int16 *)(a1 + 8);
            v20 = (__int16)v19;
            v21 = v19 >> 5;
            if (v20 < 0)
              v21 = *(_DWORD *)(a1 + 12);
            if ((_DWORD)v6 == v21)
              goto LABEL_4;
          }
        }
        if (v16)
          break;
        v22 = *(int *)a2;
        v23 = *(unsigned __int16 *)(a1 + 8);
        if ((v23 & 0x8000u) == 0)
          v24 = v23 >> 5;
        else
          v24 = *(_DWORD *)(a1 + 12);
        if (v24 <= v22)
          goto LABEL_48;
        v25 = (v23 & 2) != 0 ? a1 + 10 : *(_QWORD *)(a1 + 24);
        v26 = *(unsigned __int16 *)(v25 + 2 * v22);
        if (v26 == 47)
        {
          v27 = (__int16)v75;
          v28 = (unsigned __int16)v75 >> 5;
          v29 = DWORD1(v75);
        }
        else
        {
          if (v26 != 45)
            goto LABEL_48;
          v27 = (__int16)v80;
          v28 = (unsigned __int16)v80 >> 5;
          v29 = DWORD1(v80);
        }
        if (v27 < 0)
          v28 = v29;
        if (v28)
        {
LABEL_48:
          if (v15)
            goto LABEL_4;
          break;
        }
        *(_DWORD *)a2 = v22 + 1;
        icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
        v6 = *(unsigned int *)a2;
        v30 = *(unsigned __int16 *)(a1 + 8);
        v31 = (__int16)v30;
        v32 = v30 >> 5;
        if (v31 < 0)
          v32 = *(_DWORD *)(a1 + 12);
        v16 = v26;
        if ((_DWORD)v6 == v32)
          goto LABEL_4;
      }
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      icu::ICU_Utility::parseUnicodeIdentifier(a1, a2, (uint64_t)&v56);
      LODWORD(v33) = WORD4(v56) >> 5;
      v33 = (SWORD4(v56) & 0x8000u) == 0 ? (void *)v33 : (void *)HIDWORD(v56);
      if (!(_DWORD)v33)
        break;
      if (v16)
      {
        if (v16 == 47)
          v34 = &v74;
        else
          v34 = &v79;
      }
      else
      {
        v34 = &v89;
      }
      icu::UnicodeString::operator=(v34, (UChar **)&v56);
      ++v15;
      icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v56);
      icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, a2, (int *)1);
      v6 = *(unsigned int *)a2;
      v36 = *(unsigned __int16 *)(a1 + 8);
      v37 = (__int16)v36;
      v38 = v36 >> 5;
      if (v37 < 0)
        v38 = *(_DWORD *)(a1 + 12);
      if ((_DWORD)v6 == v38)
        goto LABEL_4;
    }
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v56);
  }
LABEL_4:
  v10 = (unsigned __int16)v90 >> 5;
  if ((v90 & 0x8000u) != 0)
    v10 = DWORD1(v90);
  if (v10)
  {
    v11 = (unsigned __int16)v80 >> 5;
    if ((v80 & 0x8000u) != 0)
      v11 = DWORD1(v80);
    if (v11)
      v12 = &v84;
    else
      v12 = &v79;
    icu::UnicodeString::operator=(v12, &v89);
  }
  v13 = (unsigned __int16)v85 >> 5;
  if ((v85 & 0x8000u) != 0)
    v13 = DWORD1(v85);
  if (v13)
  {
    v14 = 1;
  }
  else
  {
    v39 = (unsigned __int16)v80 >> 5;
    if ((v80 & 0x8000u) != 0)
      v39 = DWORD1(v80);
    if (!v39)
    {
      v45 = 0;
      v44 = v51;
      *(_DWORD *)a2 = v51;
      goto LABEL_81;
    }
    icu::UnicodeString::unBogus((uint64_t)&v84);
    if ((v85 & 0x8000u) == 0)
      v40 = (unsigned __int16)v85 >> 5;
    else
      v40 = DWORD1(v85);
    icu::UnicodeString::doReplace((uint64_t)&v84, 0, v40, (uint64_t)L"Any", 0, 3);
    v14 = 0;
  }
  LODWORD(v41) = (unsigned __int16)v80 >> 5;
  if ((v80 & 0x8000u) == 0)
    v41 = v41;
  else
    v41 = DWORD1(v80);
  if (!(_DWORD)v41)
  {
    icu::UnicodeString::unBogus((uint64_t)&v79);
    if ((v80 & 0x8000u) == 0)
      v42 = (unsigned __int16)v80 >> 5;
    else
      v42 = DWORD1(v80);
    icu::UnicodeString::doReplace((uint64_t)&v79, 0, v42, (uint64_t)L"Any", 0, 3);
  }
  v43 = icu::UMemory::operator new((uint64_t *)v41, (icu::UMemory *)0x110, v6);
  v45 = v43;
  if (v43)
    sub_18BD8C580((uint64_t)v43, &v84, &v79, &v74, v14, &v69);
LABEL_81:
  icu::UnicodeString::~UnicodeString((void *)v44, (icu::UnicodeString *)&v69);
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v74);
  icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v79);
  icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v84);
  icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v89);
  return v45;
}

uint64_t *sub_18BD8D02C(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  UChar **v9;
  const icu::UnicodeString *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  const icu::UnicodeString *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  UChar **v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t *v35;
  void *v36;
  uint64_t *v37;
  void *v38;
  void *v39;
  __int16 v41;
  UChar *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  UChar *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  UChar *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  UChar *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v58 = 0u;
  v61 = 0;
  v60 = 0u;
  v59 = 0u;
  v2 = (uint64_t *)off_1E2256B38;
  LOWORD(v58) = 2;
  v53 = 0u;
  v56 = 0;
  v57 = (UChar *)off_1E2256B38;
  v55 = 0u;
  v54 = 0u;
  v52 = (UChar *)off_1E2256B38;
  LOWORD(v53) = 2;
  v48 = 0u;
  v49 = 0u;
  v51 = 0;
  v50 = 0u;
  v47 = (UChar *)off_1E2256B38;
  LOWORD(v48) = 2;
  if (a1)
  {
    v43 = 0uLL;
    v44 = 0uLL;
    v46 = 0;
    v45 = 0uLL;
    v42 = (UChar *)off_1E2256B38;
    LOWORD(v43) = 2;
    if ((_DWORD)a2)
    {
      v4 = *(unsigned __int16 *)(a1 + 80);
      v5 = (__int16)v4;
      v6 = v4 >> 5;
      if (v5 >= 0)
        v7 = v6;
      else
        v7 = *(unsigned int *)(a1 + 84);
      v8 = icu::UnicodeString::doAppend((uint64_t)&v42, (const icu::UnicodeString *)(a1 + 72), 0, v7);
      v41 = 45;
      v9 = (UChar **)icu::UnicodeString::doAppend(v8, (uint64_t)&v41, 0, 1);
      v10 = (const icu::UnicodeString *)(a1 + 8);
      v11 = *(unsigned __int16 *)(a1 + 16);
      v12 = (__int16)v11;
      v13 = v11 >> 5;
      if (v12 >= 0)
        v14 = v13;
      else
        v14 = *(unsigned int *)(a1 + 20);
    }
    else
    {
      v15 = (const icu::UnicodeString *)(a1 + 8);
      if (*(_BYTE *)(a1 + 264))
      {
        v16 = *(unsigned __int16 *)(a1 + 16);
        v17 = (__int16)v16;
        v18 = v16 >> 5;
        if (v17 >= 0)
          v19 = v18;
        else
          v19 = *(unsigned int *)(a1 + 20);
        v20 = (UChar **)icu::UnicodeString::doAppend((uint64_t)&v42, v15, 0, v19);
        v41 = 45;
      }
      else
      {
        icu::UnicodeString::operator=(&v47, (UChar **)v15);
        v41 = 45;
        v20 = &v47;
      }
      icu::UnicodeString::doAppend((uint64_t)v20, (uint64_t)&v41, 0, 1);
      v10 = (const icu::UnicodeString *)(a1 + 72);
      v21 = *(unsigned __int16 *)(a1 + 80);
      v22 = (__int16)v21;
      v23 = v21 >> 5;
      if (v22 >= 0)
        v14 = v23;
      else
        v14 = *(unsigned int *)(a1 + 84);
      v9 = &v42;
    }
    icu::UnicodeString::doAppend((uint64_t)v9, v10, 0, v14);
    if (*(__int16 *)(a1 + 144) < 0)
    {
      if (!*(_DWORD *)(a1 + 148))
        goto LABEL_25;
    }
    else if (!(*(unsigned __int16 *)(a1 + 144) >> 5))
    {
      goto LABEL_25;
    }
    v41 = 47;
    v24 = icu::UnicodeString::doAppend((uint64_t)&v42, (uint64_t)&v41, 0, 1);
    v25 = *(unsigned __int16 *)(a1 + 144);
    v26 = (__int16)v25;
    v27 = v25 >> 5;
    if (v26 >= 0)
      v28 = v27;
    else
      v28 = *(unsigned int *)(a1 + 148);
    icu::UnicodeString::doAppend(v24, (const icu::UnicodeString *)(a1 + 136), 0, v28);
LABEL_25:
    icu::UnicodeString::operator=(&v52, &v47);
    if ((v43 & 0x8000u) == 0)
      v29 = (unsigned __int16)v43 >> 5;
    else
      v29 = DWORD1(v43);
    icu::UnicodeString::doAppend((uint64_t)&v52, (const icu::UnicodeString *)&v42, 0, v29);
    v30 = *(unsigned __int16 *)(a1 + 208);
    if ((v30 & 0x8000) != 0)
    {
      if (*(_DWORD *)(a1 + 212))
        goto LABEL_30;
    }
    else if (v30 >> 5)
    {
LABEL_30:
      v31 = (__int16)v30;
      v32 = v30 >> 5;
      if (v31 >= 0)
        v33 = v32;
      else
        v33 = *(unsigned int *)(a1 + 212);
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v42, 0, 0, (const icu::UnicodeString *)(a1 + 200), 0, v33);
    }
    icu::UnicodeString::operator=(&v57, &v42);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v42);
  }
  v35 = icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, a2);
  v37 = v35;
  if (v35)
  {
    v35[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)v35 + 8) = 2;
    v35[9] = (uint64_t)off_1E2256B38;
    *((_WORD *)v35 + 40) = 2;
    v35[17] = (uint64_t)off_1E2256B38;
    *((_WORD *)v35 + 72) = 2;
    icu::UnicodeString::operator=((UChar **)v35 + 1, &v57);
    icu::UnicodeString::operator=((UChar **)v37 + 9, &v52);
  }
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v47);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v52);
  icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v57);
  return v37;
}

uint64_t *sub_18BD8D33C(uint64_t a1, int *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  void *v42;
  void *v43;
  const __int16 *v44;
  __int16 v45;
  _OWORD v46[4];
  UChar *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  v5 = *(unsigned __int16 *)(a1 + 16);
  v6 = (__int16)v5;
  v7 = v5 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *(_DWORD *)(a1 + 20);
  if (icu::UnicodeString::doCaseCompare(v4, 0, v8, (uint64_t)L"Any", 0, 3, 0))
    v9 = 0;
  else
    v9 = *a2 <= 0;
  if (!v9)
    return 0;
  v10 = atomic_load(&dword_1EE00A070);
  if (v10 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A070))
  {
    if (dword_1EE00A074 >= 1)
    {
      v11 = 0;
      *a2 = dword_1EE00A074;
      return v11;
    }
  }
  else
  {
    sub_18BD8E650(a2);
    dword_1EE00A074 = *a2;
    icu::umtx_initImplPostInit(&dword_1EE00A070);
  }
  if (*a2 > 0)
    return 0;
  umtx_lock((icu::UMutex *)&unk_1ECD28218);
  v13 = uhash_get(*(_QWORD *)qword_1EE00A068, a1 + 72);
  umtx_unlock((std::mutex **)&unk_1ECD28218);
  if (!v13)
    return 0;
  v48 = 0u;
  v51 = 0;
  v50 = 0u;
  v49 = 0u;
  v47 = (UChar *)off_1E2256B38;
  LOWORD(v48) = 2;
  v14 = *(unsigned __int16 *)(a1 + 208);
  v15 = (__int16)v14;
  v16 = v14 >> 5;
  if (v15 >= 0)
    v17 = v16;
  else
    v17 = *(unsigned int *)(a1 + 212);
  if ((_DWORD)v17)
    icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)(a1 + 200), 0, v17);
  if (*(_BYTE *)(a1 + 264))
  {
    v18 = icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)L"Any", 0, 3);
    LOWORD(v46[0]) = 45;
    icu::UnicodeString::doAppend(v18, (uint64_t)v46, 0, 1);
  }
  v19 = *(unsigned __int16 *)(v13 + 8);
  v20 = (__int16)v19;
  v21 = v19 >> 5;
  if (v20 >= 0)
    v22 = v21;
  else
    v22 = *(unsigned int *)(v13 + 12);
  icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)v13, 0, v22);
  memset(v46, 0, sizeof(v46));
  v44 = L"Any";
  icu::UnicodeString::UnicodeString(v46, 1, &v44);
  v45 = 45;
  v23 = icu::UnicodeString::doAppend((uint64_t)v46, (uint64_t)&v45, 0, 1);
  v24 = *(unsigned __int16 *)(v13 + 8);
  v25 = (__int16)v24;
  v26 = v24 >> 5;
  if (v25 >= 0)
    v27 = v26;
  else
    v27 = *(unsigned int *)(v13 + 12);
  icu::UnicodeString::doAppend(v23, (const icu::UnicodeString *)v13, 0, v27);
  LODWORD(v30) = *(unsigned __int16 *)(a1 + 144);
  v29 = (__int16)v30;
  LODWORD(v30) = v30 >> 5;
  if (v29 >= 0)
    v30 = v30;
  else
    v30 = *(unsigned int *)(a1 + 148);
  if ((_DWORD)v30)
  {
    v45 = 47;
    v31 = icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v45, 0, 1);
    v32 = *(unsigned __int16 *)(a1 + 144);
    v33 = (__int16)v32;
    v34 = v32 >> 5;
    if (v33 >= 0)
      v35 = v34;
    else
      v35 = *(unsigned int *)(a1 + 148);
    icu::UnicodeString::doAppend(v31, (const icu::UnicodeString *)(a1 + 136), 0, v35);
    v45 = 47;
    v36 = icu::UnicodeString::doAppend((uint64_t)v46, (uint64_t)&v45, 0, 1);
    v37 = *(unsigned __int16 *)(a1 + 144);
    v38 = (__int16)v37;
    v39 = v37 >> 5;
    if (v38 >= 0)
      v40 = v39;
    else
      v40 = *(unsigned int *)(a1 + 148);
    icu::UnicodeString::doAppend(v36, (const icu::UnicodeString *)(a1 + 136), 0, v40);
  }
  v41 = icu::UMemory::operator new((uint64_t *)v30, (icu::UMemory *)0xC8, v28);
  v11 = v41;
  if (v41)
  {
    v41[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)v41 + 8) = 2;
    v41[9] = (uint64_t)off_1E2256B38;
    *((_WORD *)v41 + 40) = 2;
    v41[17] = (uint64_t)off_1E2256B38;
    *((_WORD *)v41 + 72) = 2;
    icu::UnicodeString::operator=((UChar **)v41 + 1, &v47);
    icu::UnicodeString::operator=((UChar **)v11 + 9, (UChar **)v46);
  }
  icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v46);
  icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v47);
  return v11;
}

uint64_t *sub_18BD8D6C0(uint64_t a1, const icu::UnicodeString *a2)
{
  int v3;
  uint64_t *v4;
  UChar **v5;
  uint64_t *v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = *(_DWORD *)a2;
  v4 = sub_18BD8CAC8(a1, a2, 1);
  if (v4)
  {
    v5 = (UChar **)v4;
    v6 = sub_18BD8D02C((uint64_t)v4, 0);
    v8 = v6;
    if (v6)
      icu::UnicodeString::operator=((UChar **)v6 + 17, v5 + 25);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(v5 + 25));
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(v5 + 17));
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)(v5 + 9));
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)(v5 + 1));
    icu::UMemory::operator delete(v5);
  }
  else
  {
    v8 = 0;
    *(_DWORD *)a2 = v3;
  }
  return v8;
}

icu::UnicodeSet *sub_18BD8D74C(icu::ICU_Utility *this, icu::UnicodeString *a2, int a3, int *a4, icu::UnicodeString *a5)
{
  int v10;
  unint64_t v11;
  uint64_t *v12;
  icu::UnicodeSet *v13;
  icu::UnicodeSet *v14;
  void *v15;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  UErrorCode v25;
  void (**v26)(icu::ParsePosition *__hidden);
  unsigned int v27;
  int v28;
  __int16 v29;
  void (**v30)(icu::UnicodeString *__hidden);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)a2;
  if (*a4 == 1)
  {
    if (!icu::ICU_Utility::parseChar((uint64_t)this, a2, 40))
    {
      v14 = 0;
      *(_DWORD *)a2 = v10;
      return v14;
    }
  }
  else if (*a4 == -1)
  {
    *a4 = icu::ICU_Utility::parseChar((uint64_t)this, a2, 40);
  }
  icu::ICU_Utility::skipWhitespace(this, a2, (int *)1);
  if (!icu::UnicodeSet::resemblesPattern(this, (const icu::UnicodeString *)*(unsigned int *)a2))
    return 0;
  v12 = (uint64_t *)*(unsigned int *)a2;
  v26 = off_1E224A8B0;
  v27 = v12;
  v28 = -1;
  v25 = U_ZERO_ERROR;
  v13 = (icu::UnicodeSet *)icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
  if (!v13)
    goto LABEL_9;
  v14 = v13;
  icu::UnicodeSet::UnicodeSet(v13, this, (icu::ParsePosition *)&v26, 1u, 0, &v25);
  if (v25 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    icu::UnicodeSet::~UnicodeSet(v14);
    icu::UMemory::operator delete(v15);
LABEL_9:
    *(_DWORD *)a2 = v10;
LABEL_10:
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v26);
    return 0;
  }
  v31 = 0u;
  v32 = 0u;
  v34 = 0;
  v33 = 0u;
  v30 = off_1E2256B38;
  LOWORD(v31) = 2;
  (*(void (**)(icu::ICU_Utility *, _QWORD, _QWORD, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)this + 24))(this, *(unsigned int *)a2, v27, &v30);
  *(_DWORD *)a2 = v27;
  v17 = *a4;
  if ((_DWORD)v17 == 1 && !icu::ICU_Utility::parseChar((uint64_t)this, a2, 41))
  {
    icu::UnicodeSet::~UnicodeSet(v14);
    icu::UMemory::operator delete(v23);
    *(_DWORD *)a2 = v10;
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v30);
    goto LABEL_10;
  }
  if (a5)
  {
    v18 = *a4;
    if (a3)
    {
      if (!v18)
      {
        v29 = 40;
        icu::UnicodeString::doReplace((uint64_t)&v30, 0, 0, (uint64_t)&v29, 0, 1);
        v29 = 41;
        icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1);
      }
      if ((v31 & 0x8000u) == 0)
        v19 = (unsigned __int16)v31 >> 5;
      else
        v19 = DWORD1(v31);
      icu::UnicodeString::doReplace(a5, 0, 0, (const icu::UnicodeString *)&v30, 0, v19);
      if ((v31 & 0x8000u) == 0)
        v20 = (unsigned __int16)v31 >> 5;
      else
        v20 = DWORD1(v31);
      v29 = 59;
      icu::UnicodeString::doReplace((uint64_t)a5, v20, 0, (uint64_t)&v29, 0, 1);
    }
    else
    {
      if (v18 == 1)
      {
        v29 = 40;
        icu::UnicodeString::doReplace((uint64_t)&v30, 0, 0, (uint64_t)&v29, 0, 1);
        v29 = 41;
        icu::UnicodeString::doAppend((uint64_t)&v30, (uint64_t)&v29, 0, 1);
      }
      if ((v31 & 0x8000u) == 0)
        v21 = (unsigned __int16)v31 >> 5;
      else
        v21 = DWORD1(v31);
      v22 = icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)&v30, 0, v21);
      v29 = 59;
      icu::UnicodeString::doAppend(v22, (uint64_t)&v29, 0, 1);
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v30);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v26);
  return v14;
}

uint64_t sub_18BD8DA90(uint64_t a1, int a2, uint64_t a3, icu::UVector *this, icu::UnicodeSet **a5)
{
  void (*v10)(void *);
  unsigned int v11;
  unsigned int v12;
  icu::UnicodeSet *v13;
  icu::UnicodeSet *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  UChar **v18;
  int v19;
  signed int i;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  signed int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t result;
  void *v31;
  icu::UnicodeSet *v32;
  icu::UnicodeSet *v33;
  void *v34;
  int v35;
  int v36;
  UErrorCode v37;
  __int16 v38;

  v36 = 0;
  v37 = U_ZERO_ERROR;
  icu::UVector::removeAllElements((uint64_t)this);
  v10 = (void (*)(void *))icu::UVector::setDeleter(this, (void (*)(void *))sub_18BD8DD84);
  *a5 = 0;
  v11 = *(unsigned __int16 *)(a3 + 8);
  if ((v11 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a3);
  }
  else
  {
    if ((v11 & 0x8000u) == 0)
      v12 = v11 >> 5;
    else
      v12 = *(_DWORD *)(a3 + 12);
    if (v12)
      *(_WORD *)(a3 + 8) &= 0x1Fu;
  }
  v35 = 0;
  v13 = sub_18BD8D74C((icu::ICU_Utility *)a1, (icu::UnicodeString *)&v36, a2, &v35, (icu::UnicodeString *)a3);
  if (v13)
  {
    v14 = v13;
    if (icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59))
    {
      if (a2)
      {
LABEL_11:
        icu::UnicodeSet::~UnicodeSet(v14);
        icu::UMemory::operator delete(v15);
        goto LABEL_21;
      }
    }
    else
    {
      v16 = *(unsigned __int16 *)(a3 + 8);
      if ((v16 & 1) != 0)
      {
        icu::UnicodeString::unBogus(a3);
      }
      else
      {
        if ((v16 & 0x8000u) == 0)
          v17 = v16 >> 5;
        else
          v17 = *(_DWORD *)(a3 + 12);
        if (v17)
          *(_WORD *)(a3 + 8) &= 0x1Fu;
      }
      v36 = 0;
      if (a2)
        goto LABEL_11;
    }
    *a5 = v14;
    goto LABEL_21;
  }
  do
  {
LABEL_21:
    v18 = sub_18BD8C774(a1, (const icu::UnicodeString *)&v36, a2, (int *)&v37);
    if (!v18)
      break;
    if (a2)
      icu::UVector::insertElementAt((uint64_t (**)(void *))this, v18, 0, &v37);
    else
      icu::UVector::adoptElement(this, v18, &v37);
    if (v37 > U_ZERO_ERROR)
      goto LABEL_41;
  }
  while (icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59));
  v19 = *((_DWORD *)this + 2);
  if (v19)
  {
    if (v19 >= 1)
    {
      for (i = 0; i < v26; ++i)
      {
        v21 = icu::UVector::elementAt(this, i);
        v22 = *(unsigned __int16 *)(v21 + 16);
        v23 = (__int16)v22;
        v24 = v22 >> 5;
        if (v23 >= 0)
          v25 = v24;
        else
          v25 = *(unsigned int *)(v21 + 20);
        icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)(v21 + 8), 0, v25);
        v26 = *((_DWORD *)this + 2);
        if (i != v26 - 1)
        {
          v38 = 59;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v38, 0, 1);
          v26 = *((_DWORD *)this + 2);
        }
      }
    }
    if (!v18)
    {
      v35 = 1;
      v32 = sub_18BD8D74C((icu::ICU_Utility *)a1, (icu::UnicodeString *)&v36, a2, &v35, (icu::UnicodeString *)a3);
      if (v32)
      {
        v33 = v32;
        icu::ICU_Utility::parseChar(a1, (const icu::UnicodeString *)&v36, 59);
        if (a2 == 1)
        {
          *a5 = v33;
        }
        else
        {
          icu::UnicodeSet::~UnicodeSet(v33);
          icu::UMemory::operator delete(v34);
        }
      }
    }
    icu::ICU_Utility::skipWhitespace((icu::ICU_Utility *)a1, (const icu::UnicodeString *)&v36, (int *)1);
    v27 = *(unsigned __int16 *)(a1 + 8);
    v28 = (__int16)v27;
    v29 = v27 >> 5;
    if (v28 < 0)
      v29 = *(_DWORD *)(a1 + 12);
    if (v36 == v29)
    {
      icu::UVector::setDeleter(this, v10);
      return 1;
    }
  }
LABEL_41:
  icu::UVector::removeAllElements((uint64_t)this);
  icu::UVector::setDeleter(this, v10);
  if (*a5)
  {
    icu::UnicodeSet::~UnicodeSet(*a5);
    icu::UMemory::operator delete(v31);
  }
  result = 0;
  *a5 = 0;
  return result;
}

void sub_18BD8DD84(uint64_t a1@<X0>, void *a2@<X8>)
{
  void *v3;
  void *v4;

  if (a1)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 136));
    icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 72));
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 8));
    icu::UMemory::operator delete((void *)a1);
  }
}

void sub_18BD8DDC4(icu::UVector *a1, UErrorCode *a2)
{
  void (*v4)(void *);
  void *v5;
  signed int i;
  uint64_t v7;
  uint64_t v8;
  const icu::UnicodeString *v9;
  unsigned int v10;
  icu::Transliterator *v11;
  const icu::UnicodeString *v12;
  UChar **BasicInstance;
  void *v14;
  void *v15;
  _OWORD v16[2];
  uint64_t v17;
  UChar *v18[9];

  v18[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  icu::UVector::UVector((icu::UVector *)v16, a2);
  if (*(int *)a2 > 0)
    goto LABEL_2;
  icu::UVector::setDeleter((icu::UVector *)v16, (void (*)(void *))sub_18BD8DFC8);
  if (*((int *)a1 + 2) >= 1)
  {
    for (i = 0; i < *((_DWORD *)a1 + 2); ++i)
    {
      v7 = icu::UVector::elementAt(a1, i);
      v10 = *(unsigned __int16 *)(v7 + 80);
      if ((v10 & 0x8000) != 0)
      {
        if (!*(_DWORD *)(v7 + 84))
          continue;
      }
      else if (!(v10 >> 5))
      {
        continue;
      }
      v11 = sub_18BD8C630(v7, v8, v9);
      if (!v11)
      {
        *a2 = U_INVALID_ID;
        goto LABEL_2;
      }
      icu::UVector::adoptElement((icu::UVector *)v16, v11, a2);
      if (*(int *)a2 > 0)
        goto LABEL_2;
    }
  }
  if (!DWORD2(v16[0]))
  {
    v15 = &unk_18BE2B6FE;
    icu::UnicodeString::UnicodeString(v18, 1, &v15);
    BasicInstance = icu::Transliterator::createBasicInstance(v18, 0, v12);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
    if (!BasicInstance)
      *a2 = U_INTERNAL_TRANSLITERATOR_ERROR;
    icu::UVector::adoptElement((icu::UVector *)v16, BasicInstance, a2);
  }
LABEL_2:
  v4 = (void (*)(void *))icu::UVector::setDeleter(a1, (void (*)(void *))sub_18BD8DD84);
  icu::UVector::removeAllElements((uint64_t)a1);
  if (*(int *)a2 <= 0)
  {
    icu::UVector::setDeleter(a1, (void (*)(void *))sub_18BD8DFC8);
    while (SDWORD2(v16[0]) >= 1)
    {
      v5 = (void *)icu::UVector::orphanElementAt((icu::UVector *)v16, 0);
      icu::UVector::adoptElement(a1, v5, a2);
      if (*(int *)a2 >= 1)
      {
        icu::UVector::removeAllElements((uint64_t)a1);
        break;
      }
    }
  }
  icu::UVector::setDeleter(a1, v4);
  icu::UVector::~UVector((icu::UVector *)v16);
}

uint64_t sub_18BD8DFC8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_18BD8DFDC(uint64_t a1, icu::UnicodeString *this, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int32_t v20;
  int32_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int32_t v25;
  int32_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t result;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;

  icu::UnicodeString::unBogus((uint64_t)this);
  v10 = *((unsigned __int16 *)this + 4);
  v11 = (__int16)v10;
  v12 = v10 >> 5;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = *((unsigned int *)this + 3);
  icu::UnicodeString::doReplace((uint64_t)this, 0, v13, (uint64_t)L"Any", 0, 3);
  v14 = *(unsigned __int16 *)(a3 + 8);
  if ((v14 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a3);
  }
  else
  {
    if ((v14 & 0x8000u) == 0)
      v15 = v14 >> 5;
    else
      v15 = *(_DWORD *)(a3 + 12);
    if (v15)
      *(_WORD *)(a3 + 8) &= 0x1Fu;
  }
  v16 = *(unsigned __int16 *)(a4 + 8);
  if ((v16 & 1) != 0)
  {
    icu::UnicodeString::unBogus(a4);
  }
  else
  {
    if ((v16 & 0x8000u) == 0)
      v17 = v16 >> 5;
    else
      v17 = *(_DWORD *)(a4 + 12);
    if (v17)
      *(_WORD *)(a4 + 8) &= 0x1Fu;
  }
  v18 = *(unsigned __int16 *)(a1 + 8);
  v19 = (__int16)v18;
  v20 = v18 >> 5;
  if (v19 >= 0)
    v21 = v20;
  else
    v21 = *(_DWORD *)(a1 + 12);
  v22 = icu::UnicodeString::doIndexOf(a1, 0x2Du, 0, v21);
  v23 = *(unsigned __int16 *)(a1 + 8);
  v24 = (__int16)v23;
  v25 = v23 >> 5;
  if (v24 >= 0)
    v26 = v25;
  else
    v26 = *(_DWORD *)(a1 + 12);
  v27 = icu::UnicodeString::doIndexOf(a1, 0x2Fu, 0, v26);
  if ((v27 & 0x80000000) != 0)
  {
    if (*(__int16 *)(a1 + 8) < 0)
      v27 = *(unsigned int *)(a1 + 12);
    else
      v27 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  *a5 = 0;
  if ((v22 & 0x80000000) != 0)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, 0, v27, a3);
LABEL_34:
    v28 = *(unsigned __int16 *)(a1 + 8);
    v29 = (__int16)v28;
    v30 = v28 >> 5;
    if (v29 >= 0)
      v31 = v30;
    else
      v31 = *(unsigned int *)(a1 + 12);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v27, v31, a4);
    goto LABEL_44;
  }
  if ((int)v22 < (int)v27)
  {
    if ((_DWORD)v22)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t, icu::UnicodeString *))(*(_QWORD *)a1 + 24))(a1, 0, v22, this);
      *a5 = 1;
    }
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, (v22 + 1), v27, a3);
    goto LABEL_34;
  }
  if ((int)v27 >= 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t, icu::UnicodeString *))(*(_QWORD *)a1 + 24))(a1, 0, v27, this);
    *a5 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v27, v22, a4);
  v33 = *(unsigned __int16 *)(a1 + 8);
  v34 = (__int16)v33;
  v35 = v33 >> 5;
  if (v34 >= 0)
    v36 = v35;
  else
    v36 = *(unsigned int *)(a1 + 12);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, (v22 + 1), v36, a3);
LABEL_44:
  v37 = *(unsigned __int16 *)(a4 + 8);
  v38 = (__int16)v37;
  v39 = v37 >> 5;
  if (v38 < 0)
    v39 = *(_DWORD *)(a4 + 12);
  if (v39 >= 1)
    return icu::UnicodeString::doReplace(a4, 0, 1, 0, 0, 0);
  return result;
}

uint64_t sub_18BD8E29C(UChar **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  unsigned int v28;
  unsigned int v29;
  int v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;

  icu::UnicodeString::operator=((UChar **)a4, a1);
  v7 = *(unsigned __int16 *)(a4 + 8);
  v8 = (__int16)v7;
  v9 = v7 >> 5;
  if (v8 < 0)
    v9 = *(_DWORD *)(a4 + 12);
  if (!v9)
  {
    icu::UnicodeString::unBogus(a4);
    v10 = *(unsigned __int16 *)(a4 + 8);
    v11 = (__int16)v10;
    v12 = v10 >> 5;
    if (v11 >= 0)
      v13 = v12;
    else
      v13 = *(unsigned int *)(a4 + 12);
    icu::UnicodeString::doReplace(a4, 0, v13, (uint64_t)L"Any", 0, 3);
  }
  v31 = 45;
  v14 = icu::UnicodeString::doAppend(a4, (uint64_t)&v31, 0, 1);
  v15 = *(unsigned __int16 *)(a2 + 8);
  v16 = (__int16)v15;
  v17 = v15 >> 5;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(unsigned int *)(a2 + 12);
  icu::UnicodeString::doAppend(v14, (const icu::UnicodeString *)a2, 0, v18);
  v19 = *(unsigned __int16 *)(a3 + 8);
  v20 = (__int16)v19;
  v21 = v19 >> 5;
  if (v20 < 0)
    v21 = *(_DWORD *)(a3 + 12);
  if (v21)
  {
    v32 = 47;
    v22 = icu::UnicodeString::doAppend(a4, (uint64_t)&v32, 0, 1);
    v23 = *(unsigned __int16 *)(a3 + 8);
    v24 = (__int16)v23;
    v25 = v23 >> 5;
    if (v24 >= 0)
      v26 = v25;
    else
      v26 = *(unsigned int *)(a3 + 12);
    icu::UnicodeString::doAppend(v22, (const icu::UnicodeString *)a3, 0, v26);
  }
  v33 = 0;
  result = icu::UnicodeString::doAppend(a4, (uint64_t)&v33, 0, 1);
  v28 = *(unsigned __int16 *)(a4 + 8);
  if (*(__int16 *)(a4 + 8) < 0)
    v29 = *(_DWORD *)(a4 + 12);
  else
    v29 = v28 >> 5;
  v30 = v29 - 1;
  if ((v28 & 1) != 0 && v29 == 1)
    return icu::UnicodeString::unBogus(a4);
  if (v29 > v30)
  {
    if (v30 > 1023)
    {
      *(_WORD *)(a4 + 8) = v28 | 0xFFE0;
      *(_DWORD *)(a4 + 12) = v30;
    }
    else
    {
      *(_WORD *)(a4 + 8) = *(_WORD *)(a4 + 8) & 0x1F | (32 * v30);
    }
  }
  return result;
}

void sub_18BD8E440(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unint64_t v18;
  uint64_t *v19;
  icu::UnicodeString *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  icu::UnicodeString *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  icu::UnicodeString *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  icu::UnicodeString *v32;
  uint64_t v33;

  if (*a4 <= 0)
  {
    v8 = atomic_load(&dword_1EE00A070);
    if (v8 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A070))
    {
      if (dword_1EE00A074 >= 1)
      {
        *a4 = dword_1EE00A074;
        return;
      }
    }
    else
    {
      sub_18BD8E650(a4);
      dword_1EE00A074 = *a4;
      icu::umtx_initImplPostInit(&dword_1EE00A070);
    }
    if (*a4 <= 0)
    {
      if (a3)
      {
        v9 = *(unsigned __int16 *)(a1 + 8);
        v10 = *(unsigned __int16 *)(a2 + 8);
        if ((v10 & 1) != 0)
        {
          v16 = (v9 & 1) == 0;
        }
        else
        {
          v11 = (__int16)v9;
          v12 = v9 >> 5;
          if (v11 >= 0)
            v13 = v12;
          else
            v13 = *(_DWORD *)(a1 + 12);
          if ((v10 & 0x8000u) == 0)
            v14 = v10 >> 5;
          else
            v14 = *(_DWORD *)(a2 + 12);
          if ((v10 & 2) != 0)
            v15 = a2 + 10;
          else
            v15 = *(_QWORD *)(a2 + 24);
          v16 = icu::UnicodeString::doCaseCompare(a1, 0, v13, v15, v14 & (v14 >> 31), v14 & ~(v14 >> 31), 0);
        }
        v17 = v16 == 0;
      }
      else
      {
        v17 = 1;
      }
      umtx_lock((icu::UMutex *)&unk_1ECD28218);
      v20 = (icu::UnicodeString *)icu::UMemory::operator new(v19, (icu::UMemory *)0x40, v18);
      if (!v20)
        goto LABEL_32;
      v21 = (uint64_t)v20;
      icu::UnicodeString::UnicodeString(v20, (UChar **)a2);
      v22 = *(_QWORD *)qword_1EE00A068;
      v24 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)qword_1EE00A068, (icu::UMemory *)0x40, v23);
      v25 = (uint64_t)v24;
      if (v24)
        icu::UnicodeString::UnicodeString(v24, (UChar **)a1);
      uhash_put(v22, v25, v21, a4);
      if (v17)
        goto LABEL_33;
      v28 = (icu::UnicodeString *)icu::UMemory::operator new(v27, (icu::UMemory *)0x40, v26);
      if (v28)
      {
        v29 = (uint64_t)v28;
        icu::UnicodeString::UnicodeString(v28, (UChar **)a1);
        v30 = *(_QWORD *)qword_1EE00A068;
        v32 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)qword_1EE00A068, (icu::UMemory *)0x40, v31);
        v33 = (uint64_t)v32;
        if (v32)
          icu::UnicodeString::UnicodeString(v32, (UChar **)a2);
        uhash_put(v30, v33, v29, a4);
      }
      else
      {
LABEL_32:
        *a4 = 7;
      }
LABEL_33:
      umtx_unlock((std::mutex **)&unk_1ECD28218);
    }
  }
}

int32x2_t *sub_18BD8E650(int *a1)
{
  unint64_t v2;
  uint64_t *v3;
  int32x2_t *result;
  uint64_t *v5;
  int32x2_t *v6;

  sub_18BDA1768(5u, (uint64_t)sub_18BD89820);
  result = (int32x2_t *)icu::UMemory::operator new(v3, (icu::UMemory *)0x58, v2);
  if (result)
  {
    v5 = (uint64_t *)result;
    *result = 0;
    if (*a1 <= 0)
    {
      v6 = result + 1;
      uhash_init(result + 1, (uint64_t)uhash_hashCaselessUnicodeString, (uint64_t)uhash_compareCaselessUnicodeString, 0, a1);
      if (*a1 <= 0)
      {
        *v5 = (uint64_t)v6;
        uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
      }
    }
    qword_1EE00A068 = (uint64_t)v5;
    return (int32x2_t *)uhash_setValueDeleter(*v5, (uint64_t)uprv_deleteUObject);
  }
  else
  {
    qword_1EE00A068 = 0;
    *a1 = 7;
  }
  return result;
}

void sub_18BD8E71C()
{
  void *v0;

  v0 = (void *)qword_1EE00A068;
  if (qword_1EE00A068)
  {
    if (*(_QWORD *)qword_1EE00A068)
      uhash_close(*(void ***)qword_1EE00A068);
    icu::UMemory::operator delete(v0);
    qword_1EE00A068 = 0;
  }
  atomic_store(0, &dword_1EE00A070);
}

_QWORD *sub_18BD8E764(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E22672D8;
  v2 = (void *)a1[1];
  if (v2)
    uprv_free(v2);
  return a1;
}

void sub_18BD8E79C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E22672D8;
  v2 = (void *)a1[1];
  if (v2)
    uprv_free(v2);
  icu::UMemory::operator delete(a1);
}

uint64_t *sub_18BD8E7D4(uint64_t a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v7;
  unsigned int v8;
  int v9;
  int32_t v10;
  int32_t v11;
  UChar *v12;
  __int16 v13;
  const UChar *v14;

  v2 = (uint64_t *)*a2;
  if ((int)v2 > 0)
    return 0;
  v7 = icu::UMemory::operator new(v2, (icu::UMemory *)0x18, (unint64_t)a2);
  v3 = v7;
  if (!v7)
  {
    *a2 = 7;
    return v3;
  }
  *v7 = (uint64_t)&off_1E22672D8;
  v7[1] = 0;
  *((_DWORD *)v7 + 4) = 0;
  *((_BYTE *)v7 + 20) = 0;
  v8 = *(unsigned __int16 *)(a1 + 8);
  v9 = (__int16)v8;
  v10 = v8 >> 5;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(_DWORD *)(a1 + 12);
  v12 = (UChar *)uprv_malloc(2 * (v11 + 1));
  v3[1] = (uint64_t)v12;
  if (!v12)
  {
    *a2 = 7;
    (*(void (**)(uint64_t *))(*v3 + 8))(v3);
    return 0;
  }
  v13 = *(_WORD *)(a1 + 8);
  if ((v13 & 0x11) != 0)
  {
    v14 = 0;
  }
  else if ((v13 & 2) != 0)
  {
    v14 = (const UChar *)(a1 + 10);
  }
  else
  {
    v14 = *(const UChar **)(a1 + 24);
  }
  u_strncpy(v12, v14, v11);
  *(_WORD *)(v3[1] + 2 * v11) = 0;
  *((_DWORD *)v3 + 4) = 0;
  return v3;
}

void *icu::TimeZoneFormat::getStaticClassID(icu::TimeZoneFormat *this)
{
  return &unk_1EE00A078;
}

void *icu::TimeZoneFormat::getDynamicClassID(icu::TimeZoneFormat *this)
{
  return &unk_1EE00A078;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::TimeZoneFormat(icu::TimeZoneFormat *this, char **a2, UErrorCode *a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  UErrorCode *v10;
  int v11;
  char *v12;
  int Country;
  _QWORD *v14;
  uint64_t v15;
  const __int16 *v16;
  const UChar *v17;
  _QWORD *v18;
  const UChar *StringByKeyWithFallback;
  const UChar *v20;
  int v21;
  const __int16 *v22;
  void *v23;
  UChar *v24;
  UChar *v25;
  UErrorCode *v26;
  UErrorCode *v27;
  UErrorCode *v28;
  UErrorCode *v29;
  UErrorCode *v30;
  icu::NumberingSystem *Instance;
  icu::NumberingSystem *v32;
  int v33;
  void *v34;
  const UChar *v36;
  const UChar *v37;
  const UChar *v38;
  const UChar *v39;
  const UChar *v40;
  const UChar *v41;
  const UChar *v42;
  const UChar *v43;
  const __int16 *v44;
  const UChar *v45;
  _QWORD v46[2];
  void *v47[12];

  v47[9] = *(void **)MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v6 = off_1E22672F8;
  icu::Locale::Locale((icu::Locale *)(v6 + 41), (uint64_t)a2);
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 72) = off_1E2256B38;
  *((_WORD *)this + 292) = 2;
  v7 = (char *)this + 1024;
  v8 = 640;
  do
  {
    v9 = (char *)this + v8;
    *(_QWORD *)v9 = off_1E2256B38;
    *((_WORD *)v9 + 4) = 2;
    v8 += 64;
  }
  while (v9 + 64 != v7);
  *((_QWORD *)this + 133) = off_1E2256B38;
  *((_WORD *)this + 536) = 2;
  *((_DWORD *)this + 282) = 0;
  *((_QWORD *)this + 142) = off_1E2256B38;
  *((_WORD *)this + 572) = 2;
  *((_QWORD *)this + 150) = off_1E2256B38;
  *((_WORD *)this + 604) = 2;
  *((_QWORD *)this + 165) = 0;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  v11 = strlen((const char *)this + 354);
  if (v11)
  {
    v12 = (char *)this + 552;
    if (v11 > 3)
      *v12 = 0;
    else
      strcpy(v12, (const char *)this + 354);
LABEL_12:
    *((_QWORD *)this + 70) = icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a2, (const icu::Locale *)a3, v10);
    if (*(int *)a3 <= 0)
    {
      v14 = ures_open("icudt74l-zone", a2[5], (int *)a3);
      v15 = ures_getByKeyWithFallback((uint64_t)v14, "zoneStrings", 0, a3);
      v16 = 0;
      v17 = 0;
      if (*(int *)a3 <= 0)
      {
        v18 = (_QWORD *)v15;
        LODWORD(v47[0]) = 0;
        StringByKeyWithFallback = ures_getStringByKeyWithFallback(v15, "gmtFormat", (int *)v47, a3);
        if (SLODWORD(v47[0]) <= 0)
          v16 = 0;
        else
          v16 = (const __int16 *)StringByKeyWithFallback;
        v20 = ures_getStringByKeyWithFallback((uint64_t)v18, "gmtZeroFormat", (int *)v47, a3);
        if (SLODWORD(v47[0]) >= 1)
        {
          v45 = v20;
          icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 1064), 1, &v45, (int)v47[0]);
        }
        v17 = ures_getStringByKeyWithFallback((uint64_t)v18, "hourFormat", (int *)v47, a3);
        v21 = (int)v47[0];
        ures_close(v18);
        ures_close(v14);
        if (v21 <= 0)
          v17 = 0;
      }
      v22 = L"GMT{0}";
      if (v16)
        v22 = v16;
      v44 = v22;
      icu::UnicodeString::UnicodeString(v47, 1, &v44);
      icu::TimeZoneFormat::initGMTPattern((uint64_t)this, (const icu::UnicodeString *)v47, a3);
      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v47);
      if (!v17)
        goto LABEL_26;
      v24 = u_strchr(v17, 0x3Bu);
      if (!v24)
        goto LABEL_26;
      v25 = v24;
      LODWORD(v47[0]) = 0;
      v43 = v17;
      icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 640), 0, &v43, (unint64_t)((char *)v24 - (char *)v17) >> 1);
      v42 = v25 + 1;
      icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 768), 1, &v42, -1);
      icu::TimeZoneFormat::expandOffsetPattern((icu::TimeZoneFormat *)((char *)this + 640), (icu::TimeZoneFormat *)((char *)this + 704), (icu::UnicodeString *)v47, v26);
      icu::TimeZoneFormat::expandOffsetPattern((icu::TimeZoneFormat *)((char *)this + 768), (icu::TimeZoneFormat *)((char *)this + 832), (icu::UnicodeString *)v47, v27);
      icu::TimeZoneFormat::truncateOffsetPattern((icu::TimeZoneFormat *)((char *)this + 640), (icu::TimeZoneFormat *)((char *)this + 896), (icu::UnicodeString *)v47, v28);
      icu::TimeZoneFormat::truncateOffsetPattern((icu::TimeZoneFormat *)((char *)this + 768), (icu::TimeZoneFormat *)((char *)this + 960), (icu::UnicodeString *)v47, v29);
      if (SLODWORD(v47[0]) >= 1)
      {
LABEL_26:
        v41 = (const UChar *)"+";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 896), 1, &v41, -1);
        v40 = (const UChar *)L"+H:mm";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 640), 1, &v40, -1);
        v39 = (const UChar *)L"+H:mm:ss";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 704), 1, &v39, -1);
        v38 = (const UChar *)"-";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 960), 1, &v38, -1);
        v37 = (const UChar *)L"-H:mm";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 768), 1, &v37, -1);
        v36 = (const UChar *)L"-H:mm:ss";
        icu::UnicodeString::setTo((icu::TimeZoneFormat *)((char *)this + 832), 1, &v36, -1);
      }
      icu::TimeZoneFormat::initGMTOffsetPatterns(this, a3);
      Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)a2, a3, v30);
      if (Instance)
      {
        v32 = Instance;
        if (icu::NumberingSystem::isAlgorithmic(Instance)
          || (memset(v47, 0, 64),
              (*(void (**)(void **__return_ptr, icu::NumberingSystem *))(*(_QWORD *)v32 + 24))(v47, v32),
              v33 = icu::TimeZoneFormat::toCodePoints((icu::TimeZoneFormat *)v47, (icu::TimeZoneFormat *)((char *)this + 1024), (int *)0xA), icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v47), !v33))
        {
          *((_QWORD *)this + 132) = 0x3900000038;
          *(_OWORD *)v7 = *(_OWORD *)L"0";
          *((_OWORD *)this + 65) = *(_OWORD *)L"4";
        }
        (*(void (**)(icu::NumberingSystem *))(*(_QWORD *)v32 + 8))(v32);
      }
      else
      {
        *((_QWORD *)this + 132) = 0x3900000038;
        *(_OWORD *)v7 = *(_OWORD *)L"0";
        *((_OWORD *)this + 65) = *(_OWORD *)L"4";
      }
    }
    return this;
  }
  memset(&v47[1], 0, 56);
  v46[1] = 0;
  v47[0] = (char *)&v47[1] + 5;
  LODWORD(v47[1]) = 40;
  v46[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v46, (uint64_t)v47);
  ulocimp_addLikelySubtags(*((_QWORD *)this + 46), v46, a3);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v46);
  Country = uloc_getCountry((uint64_t)v47[0], (char *)this + 552, 4, (int *)a3);
  if (*(int *)a3 <= 0)
  {
    *((_BYTE *)this + Country + 552) = 0;
    if (BYTE4(v47[1]))
      uprv_free(v47[0]);
    goto LABEL_12;
  }
  if (BYTE4(v47[1]))
    uprv_free(v47[0]);
  return this;
}

uint64_t icu::TimeZoneFormat::initGMTPattern(uint64_t this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  UChar **v5;
  int v6;
  int v7;
  int32_t v8;
  icu::UnicodeString *v9;
  void *v10;
  icu::UnicodeString *v11;
  void *v12;
  _BYTE v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v5 = (UChar **)this;
    if (*((__int16 *)a2 + 4) < 0)
    {
      v7 = *((_DWORD *)a2 + 3);
      v6 = v7 & (v7 >> 31);
    }
    else
    {
      v6 = 0;
      v7 = *((unsigned __int16 *)a2 + 4) >> 5;
    }
    this = icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)L"{0}mm", 0, 3, v6, v7 - v6);
    if ((this & 0x80000000) != 0)
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      v8 = this;
      icu::UnicodeString::copyFrom(v5 + 72, (UChar **)a2, 0);
      icu::UnicodeString::tempSubString(a2, 0, v8, (icu::UnicodeString *)v13);
      icu::TimeZoneFormat::unquote((icu::TimeZoneFormat *)v13, (const icu::UnicodeString *)(v5 + 142), v9);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
      icu::UnicodeString::tempSubString(a2, v8 + 3, 0x7FFFFFFF, (icu::UnicodeString *)v13);
      icu::TimeZoneFormat::unquote((icu::TimeZoneFormat *)v13, (const icu::UnicodeString *)(v5 + 150), v11);
      return (uint64_t)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v13);
    }
  }
  return this;
}

const icu::UnicodeString *icu::TimeZoneFormat::expandOffsetPattern(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  int v7;
  int v8;
  int32_t v9;
  int32_t v10;
  int32_t v11;
  int IndexOf;
  void *v13;
  void *v14;
  int32_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  UChar *v22;
  unsigned __int16 v23;
  unsigned int v24;
  void (**v25)(icu::UnicodeString *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::setToBogus(a2);
  if (*(int *)a3 <= 0)
  {
    if (*((__int16 *)this + 4) < 0)
    {
      v8 = *((_DWORD *)this + 3);
      v7 = v8 & (v8 >> 31);
    }
    else
    {
      v7 = 0;
      v8 = *((unsigned __int16 *)this + 4) >> 5;
    }
    v9 = icu::UnicodeString::indexOf((uint64_t)this, (uint64_t)L"mm", 0, 2, v7, v8 - v7);
    if (v9 < 0)
    {
      *(_DWORD *)a3 = 1;
    }
    else
    {
      v10 = v9;
      v26 = 0u;
      v27 = 0u;
      v29 = 0;
      v28 = 0u;
      v25 = off_1E2256B38;
      LOWORD(v26) = 2;
      icu::UnicodeString::tempSubString(this, 0, v9, (icu::UnicodeString *)&v22);
      if ((v23 & 0x8000u) == 0)
        v11 = v23 >> 5;
      else
        v11 = v24;
      IndexOf = icu::UnicodeString::doLastIndexOf((uint64_t)&v22, 0x48u, 0, v11);
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v22);
      if ((IndexOf & 0x80000000) == 0)
      {
        icu::UnicodeString::tempSubString(this, IndexOf + 1, v10 - (IndexOf + 1), (icu::UnicodeString *)&v22);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v25, (icu::UnicodeString *)&v22);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v22);
      }
      v15 = v10 + 2;
      icu::UnicodeString::tempSubString(this, 0, v15, (icu::UnicodeString *)&v22);
      icu::UnicodeString::copyFrom((UChar **)a2, &v22, 0);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v22);
      if ((v26 & 0x8000u) == 0)
        v17 = (unsigned __int16)v26 >> 5;
      else
        v17 = DWORD1(v26);
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v25, 0, v17);
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L"ss", 0, 0xFFFFFFFFLL);
      icu::UnicodeString::tempSubString(this, v15, 0x7FFFFFFF, (icu::UnicodeString *)&v22);
      if ((v23 & 0x8000u) == 0)
        v18 = v23 >> 5;
      else
        v18 = v24;
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v22, 0, v18);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v22);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v25);
    }
  }
  return a2;
}

icu::UnicodeString *icu::TimeZoneFormat::truncateOffsetPattern(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  icu::UnicodeString *v5;
  int v7;
  int v8;
  int32_t v9;
  int32_t v10;
  int v11;
  int v12;
  int IndexOf;
  void *v14;
  int32_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  void *v20;
  int v22;
  UChar *v23;
  unsigned __int16 v24;
  int v25;
  uint64_t v26;

  v5 = a2;
  v26 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::setToBogus(a2);
  if (*(int *)a3 <= 0)
  {
    if (*((__int16 *)this + 4) < 0)
    {
      v8 = *((_DWORD *)this + 3);
      v7 = v8 & (v8 >> 31);
    }
    else
    {
      v7 = 0;
      v8 = *((unsigned __int16 *)this + 4) >> 5;
    }
    v9 = icu::UnicodeString::indexOf((uint64_t)this, (uint64_t)L"mm", 0, 2, v7, v8 - v7);
    if ((v9 & 0x80000000) == 0)
    {
      v10 = v9;
      v22 = 4718664;
      icu::UnicodeString::tempSubString(this, 0, v9, (icu::UnicodeString *)&v23);
      if ((__int16)v24 < 0)
      {
        v12 = v25;
        v11 = v25 & (v25 >> 31);
      }
      else
      {
        v11 = 0;
        v12 = v24 >> 5;
      }
      IndexOf = icu::UnicodeString::lastIndexOf((uint64_t)&v23, (uint64_t)&v22, 0, 2, v11, v12 - v11);
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v23);
      if ((IndexOf & 0x80000000) == 0)
      {
        v15 = IndexOf + 2;
LABEL_16:
        icu::UnicodeString::tempSubString(this, 0, v15, (icu::UnicodeString *)&v23);
        v5 = icu::UnicodeString::copyFrom((UChar **)v5, &v23, 0);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v23);
        return v5;
      }
      icu::UnicodeString::tempSubString(this, 0, v10, (icu::UnicodeString *)&v23);
      if ((__int16)v24 < 0)
      {
        v17 = v25;
        v16 = v25 & (v25 >> 31);
      }
      else
      {
        v16 = 0;
        v17 = v24 >> 5;
      }
      v18 = icu::UnicodeString::doLastIndexOf((uint64_t)&v23, 0x48u, v16, v17 - v16);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v23);
      if ((v18 & 0x80000000) == 0)
      {
        v15 = v18 + 1;
        goto LABEL_16;
      }
    }
    *(_DWORD *)a3 = 1;
  }
  return v5;
}

icu::UVector *icu::TimeZoneFormat::initGMTOffsetPatterns(icu::UVector *this, UErrorCode *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (uint64_t)this;
  v4 = 0;
  v5 = (uint64_t)this + 640;
  do
  {
    if (v4 <= 5)
    {
      this = icu::TimeZoneFormat::parseOffsetPattern(v5, dword_18BE2B93C[v4], (int *)a2);
      *(_QWORD *)(v3 + 8 * v4 + 1264) = this;
    }
    ++v4;
    v5 += 64;
  }
  while (v4 != 6);
  if (*(int *)a2 < 1)
    return (icu::UVector *)icu::TimeZoneFormat::checkAbuttingHoursAndMinutes(v3);
  return this;
}

uint64_t icu::TimeZoneFormat::toCodePoints(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int *a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  LODWORD(v3) = (_DWORD)a3;
  v7 = 0;
  if (icu::UnicodeString::countChar32(this, 0, 0x7FFFFFFF) == (_DWORD)a3)
  {
    if ((int)v3 < 1)
    {
      return 1;
    }
    else
    {
      v8 = 0;
      v3 = v3;
      v7 = 1;
      do
      {
        *(_DWORD *)a2 = icu::UnicodeString::char32At(v6, this, v8);
        a2 = (const icu::UnicodeString *)((char *)a2 + 4);
        v8 = icu::UnicodeString::moveIndex32(this, v8, 1);
        --v3;
      }
      while (v3);
    }
  }
  return v7;
}

uint64_t icu::TimeZoneFormat::TimeZoneFormat(icu::TimeZoneFormat *this, const icu::TimeZoneFormat *a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;

  v4 = (_QWORD *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *v4 = off_1E22672F8;
  icu::Locale::Locale((icu::Locale *)(v4 + 41));
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 72) = off_1E2256B38;
  *((_WORD *)this + 292) = 2;
  v5 = 640;
  do
  {
    v6 = (char *)this + v5;
    *(_QWORD *)v6 = off_1E2256B38;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64;
  }
  while (v6 + 64 != (char *)this + 1024);
  *((_QWORD *)this + 133) = off_1E2256B38;
  *((_WORD *)this + 536) = 2;
  *((_QWORD *)this + 142) = off_1E2256B38;
  *((_WORD *)this + 572) = 2;
  *((_QWORD *)this + 150) = off_1E2256B38;
  *((_WORD *)this + 604) = 2;
  *((_QWORD *)this + 165) = 0;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 81) = 0u;
  return icu::TimeZoneFormat::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::TimeZoneFormat::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  UErrorCode v14;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 560);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(a1 + 568);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 568) = 0;
    v6 = *(_QWORD *)(a1 + 1320);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(a1 + 1320) = 0;
    icu::Locale::operator=((icu::Locale *)(a1 + 328), a2 + 328);
    *(_DWORD *)(a1 + 552) = *(_DWORD *)(a2 + 552);
    *(_QWORD *)(a1 + 560) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 560) + 32))(*(_QWORD *)(a2 + 560));
    v7 = *(_QWORD *)(a2 + 568);
    if (v7)
      *(_QWORD *)(a1 + 568) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    icu::UnicodeString::operator=((UChar **)(a1 + 576), (UChar **)(a2 + 576));
    icu::UnicodeString::operator=((UChar **)(a1 + 1136), (UChar **)(a2 + 1136));
    icu::UnicodeString::operator=((UChar **)(a1 + 1200), (UChar **)(a2 + 1200));
    v14 = U_ZERO_ERROR;
    v8 = 640;
    v9 = 1264;
    do
    {
      icu::UnicodeString::operator=((UChar **)(a1 + v8), (UChar **)(a2 + v8));
      v10 = *(_QWORD *)(a1 + v9);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      *(_QWORD *)(a1 + v9) = 0;
      v8 += 64;
      v9 += 8;
    }
    while (v8 != 1024);
    icu::TimeZoneFormat::initGMTOffsetPatterns((icu::UVector *)a1, &v14);
    icu::UnicodeString::operator=((UChar **)(a1 + 1064), (UChar **)(a2 + 1064));
    v11 = *(_OWORD *)(a2 + 1040);
    v12 = *(_QWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
    *(_QWORD *)(a1 + 1056) = v12;
    *(_OWORD *)(a1 + 1040) = v11;
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a2 + 1128);
  }
  return a1;
}

void icu::TimeZoneFormat::~TimeZoneFormat(icu::TimeZoneFormat *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t j;

  *(_QWORD *)this = off_1E22672F8;
  v2 = *((_QWORD *)this + 70);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 71);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 165);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  for (i = 1264; i != 1312; i += 8)
  {
    v6 = *(_QWORD *)((char *)this + i);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1200));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1136));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 1064));
  for (j = 960; j != 576; j -= 64)
    icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + j));
  icu::UnicodeString::~UnicodeString((icu::TimeZoneFormat *)((char *)this + 576));
  icu::Locale::~Locale((icu::TimeZoneFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  void *v1;

  icu::TimeZoneFormat::~TimeZoneFormat(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::TimeZoneFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;

  result = icu::Locale::operator==(a1 + 328, a2 + 328);
  if (!(_DWORD)result)
    return result;
  v5 = *(unsigned __int16 *)(a1 + 584);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 584) & 1) == 0)
      return 0;
  }
  else
  {
    if ((v5 & 0x8000) != 0)
      v6 = *(_DWORD *)(a1 + 588);
    else
      v6 = v5 >> 5;
    result = 0;
    v7 = *(unsigned __int16 *)(a2 + 584);
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *(_DWORD *)(a2 + 588);
    if ((v7 & 1) != 0)
      return result;
    if (v6 != v8)
      return result;
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 576), (const icu::UnicodeString *)(a2 + 576), v6);
    if (!(_DWORD)result)
      return result;
  }
  v9 = *(unsigned __int16 *)(a1 + 1072);
  if ((v9 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 1072) & 1) == 0)
      return 0;
    goto LABEL_26;
  }
  if ((v9 & 0x8000) != 0)
    v10 = *(_DWORD *)(a1 + 1076);
  else
    v10 = v9 >> 5;
  result = 0;
  v11 = *(unsigned __int16 *)(a2 + 1072);
  if ((v11 & 0x8000u) == 0)
    v12 = v11 >> 5;
  else
    v12 = *(_DWORD *)(a2 + 1076);
  if ((v11 & 1) == 0 && v10 == v12)
  {
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 1064), (const icu::UnicodeString *)(a2 + 1064), v10);
    if ((_DWORD)result)
    {
LABEL_26:
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 560) + 24))(*(_QWORD *)(a1 + 560), *(_QWORD *)(a2 + 560));
      if (!(_DWORD)result)
        return result;
      v13 = 0;
      v14 = a1 + 640;
      v15 = a2 + 640;
      do
      {
        v16 = *(unsigned __int16 *)(v14 + 8);
        if ((v16 & 1) != 0)
        {
          v18 = *(_WORD *)(v15 + 8) & 1;
        }
        else
        {
          if ((v16 & 0x8000) != 0)
            v17 = *(_DWORD *)(v14 + 12);
          else
            v17 = v16 >> 5;
          result = 0;
          v19 = *(unsigned __int16 *)(v15 + 8);
          if ((v19 & 0x8000u) == 0)
            v20 = v19 >> 5;
          else
            v20 = *(_DWORD *)(v15 + 12);
          if ((v19 & 1) != 0 || v17 != v20)
            return result;
          v18 = icu::UnicodeString::doEquals((icu::UnicodeString *)v14, (const icu::UnicodeString *)v15, v17);
        }
        if (v13 > 4)
          break;
        ++v13;
        v14 += 64;
        v15 += 64;
      }
      while ((v18 & 1) != 0);
      if (v18)
      {
        v21 = 0;
        do
        {
          v22 = *(_DWORD *)(a1 + 1024 + 4 * v21);
          v23 = *(_DWORD *)(a2 + 1024 + 4 * v21);
          result = v22 == v23;
          if (v21 > 8)
            break;
          ++v21;
        }
        while (v22 == v23);
        return result;
      }
      return 0;
    }
  }
  return result;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::clone@<X0>(icu::TimeZoneFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::TimeZoneFormat *result;

  result = (icu::TimeZoneFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x530, a2);
  if (result)
    return (icu::TimeZoneFormat *)icu::TimeZoneFormat::TimeZoneFormat(result, this);
  return result;
}

icu::TimeZoneFormat *icu::TimeZoneFormat::createInstance@<X0>(char **this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  icu::TimeZoneFormat *result;

  result = (icu::TimeZoneFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x530, (unint64_t)a2);
  if (result)
  {
    result = icu::TimeZoneFormat::TimeZoneFormat(result, this, a2);
    if (*(int *)a2 >= 1)
    {
      (*(void (**)(icu::TimeZoneFormat *))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t icu::TimeZoneFormat::getTimeZoneNames(icu::TimeZoneFormat *this)
{
  return *((_QWORD *)this + 70);
}

uint64_t icu::TimeZoneFormat::adoptTimeZoneNames(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 560);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 560) = a2;
  return result;
}

uint64_t icu::TimeZoneFormat::setTimeZoneNames(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 560);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  *(_QWORD *)(a1 + 560) = result;
  return result;
}

uint64_t icu::TimeZoneFormat::setDefaultParseOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 1128) = a2;
  return this;
}

uint64_t icu::TimeZoneFormat::getDefaultParseOptions(icu::TimeZoneFormat *this)
{
  return *((unsigned int *)this + 282);
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTPattern(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(a2, this + 72, 0);
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTOffsetPattern(uint64_t a1, unsigned int a2, UChar **this)
{
  return icu::UnicodeString::copyFrom(this, (UChar **)(a1 + ((unint64_t)a2 << 6) + 640), 0);
}

icu::UVector *icu::TimeZoneFormat::setGMTOffsetPattern(icu::UVector *result, unsigned int a2, icu::UnicodeString *this, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  UChar **v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  icu::UVector *v17;
  icu::UVector **v18;

  if (*a4 > 0)
    return result;
  v7 = (uint64_t)result;
  v8 = a2;
  v9 = (char *)result + 64 * (unint64_t)a2;
  v10 = (UChar **)(v9 + 640);
  v11 = *((unsigned __int16 *)this + 4);
  if ((v11 & 1) != 0)
  {
    if ((*((_WORD *)v9 + 324) & 1) != 0)
      return result;
    goto LABEL_14;
  }
  v12 = (__int16)v11;
  v13 = v11 >> 5;
  if (v12 >= 0)
    v14 = v13;
  else
    v14 = *((_DWORD *)this + 3);
  v15 = *((unsigned __int16 *)v9 + 324);
  v16 = *((_DWORD *)v9 + 163);
  if ((v15 & 0x8000u) == 0)
    v16 = v15 >> 5;
  if ((v15 & 1) != 0
    || v14 != v16
    || (result = (icu::UVector *)icu::UnicodeString::doEquals(this, (const icu::UnicodeString *)v10, v14),
        !(_DWORD)result))
  {
LABEL_14:
    if (a2 >= 6)
      abort();
    result = icu::TimeZoneFormat::parseOffsetPattern((uint64_t)this, dword_18BE2B93C[a2], a4);
    if (result)
    {
      v17 = result;
      icu::UnicodeString::copyFrom(v10, (UChar **)this, 0);
      v18 = (icu::UVector **)(v7 + 8 * v8 + 1264);
      if (*v18)
        (*(void (**)(icu::UVector *))(*(_QWORD *)*v18 + 8))(*v18);
      *v18 = v17;
      return (icu::UVector *)icu::TimeZoneFormat::checkAbuttingHoursAndMinutes(v7);
    }
  }
  return result;
}

icu::UVector *icu::TimeZoneFormat::parseOffsetPattern(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t *v3;
  icu::UVector *v4;
  unsigned int v6;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  int v24;
  uint64_t *v25;
  __int16 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  void *v37;
  unsigned int v39;
  __int16 v40;
  _OWORD v41[4];
  _OWORD v42[4];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)*a3;
  if ((int)v3 > 0)
    return 0;
  v6 = a2;
  v8 = icu::UMemory::operator new(v3, (icu::UMemory *)0x28, a2);
  v4 = (icu::UVector *)v8;
  if (!v8)
  {
    *a3 = 7;
    return v4;
  }
  v39 = v6;
  icu::UVector::UVector((uint64_t)v8, (uint64_t)sub_18BD9428C, 0, a3);
  memset(v42, 0, sizeof(v42));
  memset(v41, 0, sizeof(v41));
  icu::UnicodeString::UnicodeString(v41, v42, 0, 32);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 1;
  while (1)
  {
    v16 = *(__int16 *)(a1 + 8);
    if (v16 < 0)
      break;
    if (v10 >= (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5)
      goto LABEL_72;
    v17 = (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5;
LABEL_10:
    if (v17 <= v10)
    {
      v19 = 0xFFFF;
    }
    else
    {
      if ((v16 & 2) != 0)
        v18 = a1 + 10;
      else
        v18 = *(_QWORD *)(a1 + 24);
      v19 = *(unsigned __int16 *)(v18 + 2 * v10);
      if (v19 == 39)
      {
        if (v13)
        {
          v40 = 39;
          icu::UnicodeString::doAppend((uint64_t)v41, (uint64_t)&v40, 0, 1);
          v13 = 0;
        }
        else
        {
          v13 = 1;
          switch((int)v11)
          {
            case 0:
              break;
            case 1:
              if ((v15 - 1) <= 1)
                goto LABEL_38;
              goto LABEL_83;
            case 2:
            case 4:
              if (v15 != 2)
                goto LABEL_83;
LABEL_38:
              v21 = (uint64_t *)*a3;
              if ((int)v21 <= 0)
              {
                v23 = icu::UMemory::operator new(v21, (icu::UMemory *)0x18, v9);
                v22 = v23;
                if (v23)
                {
                  *v23 = (uint64_t)&off_1E22672D8;
                  v23[1] = 0;
                  *((_DWORD *)v23 + 4) = v11;
                  *((_BYTE *)v23 + 20) = v15;
                }
                else
                {
                  *a3 = 7;
                }
              }
              else
              {
                v22 = 0;
              }
              icu::UVector::adoptElement(v4, v22, (UErrorCode *)a3);
              if (*a3 > 0)
                goto LABEL_91;
              v11 = 0;
              v13 = 1;
              break;
            default:
              goto LABEL_94;
          }
        }
        v12 = !v12;
        goto LABEL_64;
      }
    }
    if (v12)
    {
      v40 = v19;
      v12 = 1;
      icu::UnicodeString::doAppend((uint64_t)v41, (uint64_t)&v40, 0, 1);
      v13 = 0;
LABEL_64:
      v20 = v11;
      goto LABEL_65;
    }
    switch(v19)
    {
      case 'H':
        v20 = 1;
        break;
      case 's':
        v20 = 4;
        break;
      case 'm':
        v20 = 2;
        break;
      default:
        switch((int)v11)
        {
          case 0:
            goto LABEL_71;
          case 1:
            if ((v15 - 1) <= 1)
              goto LABEL_56;
            goto LABEL_83;
          case 2:
          case 4:
            if (v15 != 2)
              goto LABEL_83;
LABEL_56:
            v30 = (uint64_t *)*a3;
            if ((int)v30 <= 0)
            {
              v32 = icu::UMemory::operator new(v30, (icu::UMemory *)0x18, v9);
              v31 = v32;
              if (v32)
              {
                *v32 = (uint64_t)&off_1E22672D8;
                v32[1] = 0;
                *((_DWORD *)v32 + 4) = v11;
                *((_BYTE *)v32 + 20) = v15;
              }
              else
              {
                *a3 = 7;
              }
            }
            else
            {
              v31 = 0;
            }
            icu::UVector::adoptElement(v4, v31, (UErrorCode *)a3);
            if (*a3 > 0)
              goto LABEL_91;
LABEL_71:
            v40 = v19;
            icu::UnicodeString::doAppend((uint64_t)v41, (uint64_t)&v40, 0, 1);
            v13 = 0;
            v12 = 0;
            v20 = 0;
            break;
          default:
            goto LABEL_94;
        }
        goto LABEL_65;
    }
    if ((_DWORD)v20 == (_DWORD)v11)
    {
      v13 = 0;
      v12 = 0;
      ++v15;
      goto LABEL_64;
    }
    switch((int)v11)
    {
      case 0:
        v24 = WORD4(v41[0]) >> 5;
        if (SWORD4(v41[0]) < 0)
          v24 = HIDWORD(v41[0]);
        if (v24 < 1)
          goto LABEL_68;
        v25 = sub_18BD8E7D4((uint64_t)v41, a3);
        icu::UVector::adoptElement(v4, v25, (UErrorCode *)a3);
        if (*a3 > 0)
          goto LABEL_91;
        if ((BYTE8(v41[0]) & 1) != 0)
          v26 = 2;
        else
          v26 = BYTE8(v41[0]) & 0x1F;
        WORD4(v41[0]) = v26;
LABEL_68:
        v13 = 0;
        v12 = 0;
        v14 |= v20;
        v15 = 1;
        break;
      case 1:
        if ((v15 - 1) <= 1)
          goto LABEL_51;
        goto LABEL_83;
      case 2:
      case 4:
        if (v15 != 2)
          goto LABEL_83;
LABEL_51:
        v27 = (uint64_t *)*a3;
        if ((int)v27 <= 0)
        {
          v29 = icu::UMemory::operator new(v27, (icu::UMemory *)0x18, v9);
          v28 = v29;
          if (v29)
          {
            *v29 = (uint64_t)&off_1E22672D8;
            v29[1] = 0;
            *((_DWORD *)v29 + 4) = v11;
            *((_BYTE *)v29 + 20) = v15;
          }
          else
          {
            *a3 = 7;
          }
        }
        else
        {
          v28 = 0;
        }
        icu::UVector::adoptElement(v4, v28, (UErrorCode *)a3);
        if (*a3 <= 0)
          goto LABEL_68;
        goto LABEL_91;
      default:
        goto LABEL_94;
    }
LABEL_65:
    ++v10;
    v11 = v20;
  }
  if ((uint64_t)v10 < *(int *)(a1 + 12))
  {
    v17 = *(unsigned int *)(a1 + 12);
    goto LABEL_10;
  }
LABEL_72:
  if (*a3 <= 0)
  {
    v33 = v11;
    switch((int)v11)
    {
      case 0:
        v36 = WORD4(v41[0]) >> 5;
        if (SWORD4(v41[0]) < 0)
          v36 = HIDWORD(v41[0]);
        if (v36 < 1)
          goto LABEL_86;
        v35 = sub_18BD8E7D4((uint64_t)v41, a3);
        goto LABEL_85;
      case 1:
        v33 = (v15 - 1);
        if (v33 > 1)
          goto LABEL_83;
        goto LABEL_75;
      case 2:
      case 4:
        if (v15 != 2)
        {
LABEL_83:
          *a3 = 1;
          break;
        }
LABEL_75:
        v34 = icu::UMemory::operator new((uint64_t *)v33, (icu::UMemory *)0x18, v9);
        v35 = v34;
        if (v34)
        {
          *v34 = (uint64_t)&off_1E22672D8;
          v34[1] = 0;
          *((_DWORD *)v34 + 4) = v11;
          *((_BYTE *)v34 + 20) = v15;
        }
        else
        {
          *a3 = 7;
        }
LABEL_85:
        icu::UVector::adoptElement(v4, v35, (UErrorCode *)a3);
LABEL_86:
        if (*a3 > 0)
          break;
        v37 = v39 > 2 ? 0 : (void *)dword_18BE2B954[v39];
        if (v14 != (_DWORD)v37)
          break;
        goto LABEL_92;
      default:
LABEL_94:
        abort();
    }
  }
LABEL_91:
  (*(void (**)(icu::UVector *))(*(_QWORD *)v4 + 8))(v4);
  v4 = 0;
LABEL_92:
  icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v41);
  return v4;
}

uint64_t icu::TimeZoneFormat::checkAbuttingHoursAndMinutes(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  icu::UVector *v3;
  signed int v4;
  BOOL v5;
  int v6;

  v1 = this;
  v2 = 0;
  *(_BYTE *)(this + 1312) = 0;
  do
  {
    v3 = *(icu::UVector **)(v1 + 8 * v2 + 1264);
    if (*((int *)v3 + 2) >= 1)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        this = icu::UVector::elementAt(v3, v4);
        v6 = *(_DWORD *)(this + 16);
        if (v6)
        {
          if (v5)
          {
            *(_BYTE *)(v1 + 1312) = 1;
            return this;
          }
          v5 = v6 == 1;
        }
        else
        {
          if (v5)
            break;
          v5 = 0;
        }
        ++v4;
      }
      while (v4 < *((_DWORD *)v3 + 2));
      if (*(_BYTE *)(v1 + 1312))
        return this;
    }
    ++v2;
  }
  while (v2 != 6);
  return this;
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTOffsetDigits(icu::TimeZoneFormat *this, icu::UnicodeString *a2)
{
  uint64_t v3;
  __int16 v4;
  char *v5;

  v3 = 0;
  if ((*((_WORD *)a2 + 4) & 1) != 0)
    v4 = 2;
  else
    v4 = *((_WORD *)a2 + 4) & 0x1F;
  *((_WORD *)a2 + 4) = v4;
  v5 = (char *)this + 1024;
  do
  {
    icu::UnicodeString::append((uint64_t)a2, *(_DWORD *)&v5[v3]);
    v3 += 4;
  }
  while (v3 != 40);
  return a2;
}

uint64_t icu::TimeZoneFormat::setGMTOffsetDigits(uint64_t this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v4 = this;
    v8 = 0;
    v6 = 0u;
    v7 = 0u;
    this = icu::TimeZoneFormat::toCodePoints(a2, (const icu::UnicodeString *)&v6, (int *)0xA);
    if ((_DWORD)this)
    {
      v5 = v7;
      *(_OWORD *)(v4 + 1024) = v6;
      *(_OWORD *)(v4 + 1040) = v5;
      *(_QWORD *)(v4 + 1056) = v8;
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return this;
}

icu::UnicodeString *icu::TimeZoneFormat::getGMTZeroFormat(UChar **this, UChar **a2)
{
  return icu::UnicodeString::copyFrom(a2, this + 133, 0);
}

icu::UnicodeString *icu::TimeZoneFormat::setGMTZeroFormat(icu::UnicodeString *this, UChar **a2, UErrorCode *a3)
{
  unsigned int v4;
  UChar **v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  if (*(int *)a3 <= 0)
  {
    v4 = *((unsigned __int16 *)a2 + 4);
    if (v4 <= 0x1F)
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
      return this;
    }
    v5 = (UChar **)((char *)this + 1064);
    if ((v4 & 1) != 0)
    {
      if ((*((_WORD *)this + 536) & 1) != 0)
        return this;
      return icu::UnicodeString::copyFrom(v5, a2, 0);
    }
    v6 = (__int16)v4;
    v7 = v4 >> 5;
    if (v6 >= 0)
      v8 = v7;
    else
      v8 = *((_DWORD *)a2 + 3);
    v9 = *((unsigned __int16 *)this + 536);
    if ((v9 & 0x8000u) == 0)
      v10 = v9 >> 5;
    else
      v10 = *((_DWORD *)this + 269);
    if ((v9 & 1) != 0)
      return icu::UnicodeString::copyFrom(v5, a2, 0);
    if (v8 != v10)
      return icu::UnicodeString::copyFrom(v5, a2, 0);
    this = (icu::UnicodeString *)icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)v5, v8);
    if (!(_DWORD)this)
      return icu::UnicodeString::copyFrom(v5, a2, 0);
  }
  return this;
}

uint64_t icu::TimeZoneFormat::format(icu::TimeZoneFormat *a1, const icu::TimeZone *a2, UChar **a3, uint64_t a4, int *a5, double a6)
{
  int v10;
  const icu::TimeZone *v12;
  int v13;
  icu::ZoneMeta *v14;
  uint64_t v15;
  uint64_t v16;
  icu::TimeZoneFormat *v17;
  int v18;
  UChar **v19;
  int v20;
  const UChar *ShortID;
  const __int16 *v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  icu::UnicodeString *v30;
  int v31;
  int v32;
  int v34;
  UErrorCode v35[2];

  v10 = (int)a2;
  if (a5)
    *a5 = 0;
  switch((int)a2)
  {
    case 0:
      v12 = (const icu::TimeZone *)a3;
      v13 = 1;
      goto LABEL_7;
    case 1:
      v12 = (const icu::TimeZone *)a3;
      v13 = 2;
      goto LABEL_7;
    case 2:
      v12 = (const icu::TimeZone *)a3;
      v13 = 4;
LABEL_7:
      icu::TimeZoneFormat::formatGeneric(a1, v12, v13, a6, (icu::UnicodeString *)a4);
      goto LABEL_11;
    case 3:
      v14 = (icu::ZoneMeta *)a3;
      v15 = 2;
      v16 = 4;
      goto LABEL_10;
    case 4:
      v14 = (icu::ZoneMeta *)a3;
      v15 = 16;
      v16 = 32;
LABEL_10:
      icu::TimeZoneFormat::formatSpecific((uint64_t)a1, v14, v15, v16, (icu::UnicodeString *)a4, a5, a6);
      goto LABEL_11;
    case 17:
      icu::UnicodeString::operator=((UChar **)a4, a3 + 1);
      return a4;
    case 18:
      ShortID = icu::ZoneMeta::getShortID((const UChar **)a3, a2);
      if (ShortID)
        v22 = (const __int16 *)ShortID;
      else
        v22 = L"unk";
      icu::UnicodeString::unBogus(a4);
      v23 = *(unsigned __int16 *)(a4 + 8);
      v24 = (__int16)v23;
      v25 = v23 >> 5;
      if (v24 >= 0)
        v26 = v25;
      else
        v26 = *(unsigned int *)(a4 + 12);
      icu::UnicodeString::doReplace(a4, 0, v26, (uint64_t)v22, 0, 0xFFFFFFFFLL);
      return a4;
    case 19:
      icu::TimeZoneFormat::formatExemplarLocation(a1, (const icu::TimeZone *)a3, (UChar **)a4);
      return a4;
    default:
LABEL_11:
      if (*(unsigned __int16 *)(a4 + 8) <= 0x1Fu)
      {
        *(_QWORD *)v35 = 0;
        v34 = 0;
        v17 = (icu::TimeZoneFormat *)(*((uint64_t (**)(UChar **, _QWORD, UErrorCode *, int *, UErrorCode *, double))*a3
                                      + 6))(a3, 0, v35, &v34, &v35[1], a6);
        if (v35[1] <= U_ZERO_ERROR)
        {
          v18 = v34 + v35[0];
          switch(v10)
          {
            case 0:
            case 1:
            case 3:
            case 5:
              v19 = (UChar **)a1;
              v20 = 0;
              goto LABEL_25;
            case 2:
            case 4:
            case 6:
              v19 = (UChar **)a1;
              v20 = 1;
LABEL_25:
              icu::TimeZoneFormat::formatOffsetLocalizedGMT(v19, v18, v20, (UChar **)a4, &v35[1]);
              break;
            case 7:
              v27 = 1;
              v28 = 1;
              v29 = 1;
              v30 = (icu::UnicodeString *)a4;
              v31 = 1;
              goto LABEL_44;
            case 8:
              v27 = 1;
              v28 = 0;
              v29 = 1;
              goto LABEL_37;
            case 9:
              v27 = 1;
              goto LABEL_33;
            case 10:
              v27 = 1;
              goto LABEL_35;
            case 11:
              v27 = 1;
              goto LABEL_39;
            case 12:
              v27 = 1;
              goto LABEL_41;
            case 13:
              v27 = 0;
LABEL_33:
              v28 = 1;
              goto LABEL_36;
            case 14:
              v27 = 0;
LABEL_35:
              v28 = 0;
LABEL_36:
              v29 = 0;
LABEL_37:
              v31 = 1;
              goto LABEL_43;
            case 15:
              v27 = 0;
LABEL_39:
              v28 = 1;
              goto LABEL_42;
            case 16:
              v27 = 0;
LABEL_41:
              v28 = 0;
LABEL_42:
              v29 = 0;
              v31 = 0;
LABEL_43:
              v30 = (icu::UnicodeString *)a4;
LABEL_44:
              icu::TimeZoneFormat::formatOffsetISO8601(v17, v18, v27, v28, v29, v31, v30, &v35[1]);
              break;
            default:
              break;
          }
          if (a5)
          {
            if (v34)
              v32 = 2;
            else
              v32 = 1;
            *a5 = v32;
          }
        }
      }
      return a4;
  }
}

icu::UnicodeString *icu::TimeZoneFormat::formatGeneric(icu::TimeZoneFormat *this, const icu::TimeZone *a2, int a3, double a4, icu::UnicodeString *GenericLocationName)
{
  uint64_t TimeZoneGenericNames;
  const icu::TimeZone *v10;
  icu::TimeZoneGenericNames *v11;
  const UChar *CanonicalCLDRID;
  void *v13;
  const UChar *v15;
  UErrorCode v16;
  _BYTE v17[64];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = U_ZERO_ERROR;
  TimeZoneGenericNames = icu::TimeZoneFormat::getTimeZoneGenericNames(this, &v16);
  if (v16 >= U_ILLEGAL_ARGUMENT_ERROR)
    goto LABEL_2;
  v11 = (icu::TimeZoneGenericNames *)TimeZoneGenericNames;
  if (a3 != 1)
    return icu::TimeZoneGenericNames::getDisplayName(TimeZoneGenericNames, a2, a3, GenericLocationName, a4);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
  if (CanonicalCLDRID)
  {
    v15 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v17, 1, &v15);
    GenericLocationName = icu::TimeZoneGenericNames::getGenericLocationName(v11, (const icu::UnicodeString *)v17, GenericLocationName);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v17);
  }
  else
  {
LABEL_2:
    icu::UnicodeString::setToBogus(GenericLocationName);
  }
  return GenericLocationName;
}

icu::UnicodeString *icu::TimeZoneFormat::formatSpecific(uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, uint64_t a4, icu::UnicodeString *this, int *a6, double a7)
{
  int v14;
  const icu::TimeZone *v15;
  const UChar *CanonicalCLDRID;
  BOOL v17;
  uint64_t v19;
  void *v20;
  void *v21;
  int v22;
  const UChar *v23;
  const UChar *v24;
  int v25;
  _BYTE v26[64];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 560)
    || ((v25 = 0,
         v14 = (*(uint64_t (**)(icu::ZoneMeta *, int *))(*(_QWORD *)a2 + 80))(a2, &v25),
         CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v15),
         v25 <= 0)
      ? (v17 = CanonicalCLDRID == 0)
      : (v17 = 1),
        v17))
  {
    icu::UnicodeString::setToBogus(this);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 560);
    if (v14)
    {
      v24 = CanonicalCLDRID;
      icu::UnicodeString::UnicodeString(v26, 1, &v24);
      (*(void (**)(uint64_t, _BYTE *, uint64_t, icu::UnicodeString *, double))(*(_QWORD *)v19 + 96))(v19, v26, a4, this, a7);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
      if (!a6)
        return this;
    }
    else
    {
      v23 = CanonicalCLDRID;
      icu::UnicodeString::UnicodeString(v26, 1, &v23);
      (*(void (**)(uint64_t, _BYTE *, uint64_t, icu::UnicodeString *, double))(*(_QWORD *)v19 + 96))(v19, v26, a3, this, a7);
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v26);
      if (!a6)
        return this;
    }
    if (*((unsigned __int16 *)this + 4) >= 0x20u)
    {
      if (v14)
        v22 = 2;
      else
        v22 = 1;
      *a6 = v22;
    }
  }
  return this;
}

UChar **icu::TimeZoneFormat::formatExemplarLocation(icu::TimeZoneFormat *this, const icu::TimeZone *a2, UChar **a3)
{
  const icu::TimeZone *v6;
  const UChar *CanonicalCLDRID;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  int v13;
  void *v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  const __int16 *v20;
  const UChar *v21;
  _BYTE v22[64];
  _OWORD v23[4];
  _OWORD v24[16];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  icu::UnicodeString::UnicodeString(v23, v24, 0, 128);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v6);
  if (CanonicalCLDRID)
  {
    v8 = *((_QWORD *)this + 70);
    v21 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v22, 1, &v21);
    (*(void (**)(uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)v8 + 88))(v8, v22, v23);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v22);
  }
  v10 = WORD4(v23[0]) >> 5;
  if (SWORD4(v23[0]) < 0)
    v10 = HIDWORD(v23[0]);
  if (v10 >= 1)
    goto LABEL_9;
  v11 = *((_QWORD *)this + 70);
  v20 = L"Etc/Unknown";
  icu::UnicodeString::UnicodeString(v22, 1, &v20);
  (*(void (**)(uint64_t, _BYTE *, _OWORD *))(*(_QWORD *)v11 + 88))(v11, v22, v23);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v22);
  v13 = WORD4(v23[0]) >> 5;
  if (SWORD4(v23[0]) < 0)
    v13 = HIDWORD(v23[0]);
  if (v13 < 1)
  {
    icu::UnicodeString::unBogus((uint64_t)a3);
    v16 = *((unsigned __int16 *)a3 + 4);
    v17 = (__int16)v16;
    v18 = v16 >> 5;
    if (v17 >= 0)
      v19 = v18;
    else
      v19 = *((unsigned int *)a3 + 3);
    icu::UnicodeString::doReplace((uint64_t)a3, 0, v19, (uint64_t)L"Unknown", 0, 0xFFFFFFFFLL);
  }
  else
  {
LABEL_9:
    icu::UnicodeString::copyFrom(a3, (UChar **)v23, 0);
  }
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v23);
  return a3;
}

UChar **icu::TimeZoneFormat::formatOffsetLocalizedGMT(UChar **this, int a2, UChar **a3, UErrorCode *a4)
{
  return icu::TimeZoneFormat::formatOffsetLocalizedGMT(this, a2, 0, a3, a4);
}

UChar **icu::TimeZoneFormat::formatOffsetShortLocalizedGMT(UChar **this, int a2, UChar **a3, UErrorCode *a4)
{
  return icu::TimeZoneFormat::formatOffsetLocalizedGMT(this, a2, 1, a3, a4);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601Basic(icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, icu::UnicodeString *a6, UErrorCode *a7)
{
  return icu::TimeZoneFormat::formatOffsetISO8601(this, a2, 1, a3, a4, a5, a6, a7);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601Extended(icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, icu::UnicodeString *a6, UErrorCode *a7)
{
  return icu::TimeZoneFormat::formatOffsetISO8601(this, a2, 0, a3, a4, a5, a6, a7);
}

icu::UnicodeString *icu::TimeZoneFormat::format(icu::TimeZoneFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  double v10;
  double TimeInMillis;
  const void *Object;
  const void *v13;
  void *v14;
  uint64_t TimeZone;
  icu::Calendar *v16;
  icu::Calendar *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _OWORD v22[4];
  _OWORD v23[16];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    icu::Calendar::getNow(this);
    TimeInMillis = v10;
    if (icu::Formattable::getType(a2) == 6)
    {
      Object = (const void *)icu::Formattable::getObject(a2);
      if (Object)
      {
        v13 = Object;
        if (v14)
        {
          TimeZone = (uint64_t)v14;
        }
        else
        {
          if (!v16)
            return a3;
          v17 = v16;
          TimeZone = icu::Calendar::getTimeZone(v16);
          TimeInMillis = icu::Calendar::getTimeInMillis(v17, a5);
        }
        v21 = 0;
        (*(void (**)(uint64_t, _QWORD, char *, uint64_t *, UErrorCode *, double))(*(_QWORD *)TimeZone + 48))(TimeZone, 0, (char *)&v21 + 4, &v21, a5, TimeInMillis);
        memset(v23, 0, sizeof(v23));
        memset(v22, 0, sizeof(v22));
        icu::UnicodeString::UnicodeString(v22, v23, 0, 128);
        icu::TimeZoneFormat::formatOffsetLocalizedGMT((UChar **)this, v21 + HIDWORD(v21), 0, (UChar **)v22, a5);
        v18 = *(unsigned int *)a5;
        if ((int)v18 <= 0)
        {
          v19 = (SWORD4(v22[0]) & 0x8000u) == 0 ? WORD4(v22[0]) >> 5 : HIDWORD(v22[0]);
          icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v22, 0, v19);
          v18 = *((unsigned int *)a4 + 2);
          if ((_DWORD)v18 == 17)
          {
            LODWORD(v18) = WORD4(v22[0]) >> 5;
            if ((SWORD4(v22[0]) & 0x8000u) == 0)
              v18 = v18;
            else
              v18 = HIDWORD(v22[0]);
            *((_DWORD *)a4 + 3) = 0;
            *((_DWORD *)a4 + 4) = v18;
          }
        }
        icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v22);
      }
    }
  }
  return a3;
}

uint64_t icu::TimeZoneFormat::parse(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, a2, a3, a4, a1[282], a5);
}

uint64_t icu::TimeZoneFormat::parse(icu::TimeZoneFormat *this, unsigned int a2, icu::UnicodeString *a3, _DWORD *a4, unsigned int a5, int *a6)
{
  int *v6;
  _DWORD *v8;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  signed int v16;
  signed __int8 v18;
  icu::TimeZoneFormat *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  icu::UnicodeString *v23;
  int v24;
  icu::TimeZoneNames::MatchInfoCollection *BestMatch;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  icu::UnicodeString *v29;
  signed int v30;
  uint64_t v31;
  icu::ZoneMeta *v32;
  uint64_t TimeZoneGenericNames;
  unint64_t v34;
  const icu::UnicodeString *v35;
  icu::UVector **v36;
  int v37;
  int v38;
  int v39;
  void *TimeZone;
  signed int v41;
  unsigned int v42;
  int NameTypeAt;
  int v44;
  __int16 v45;
  icu::TimeZoneFormat *TZDBTimeZoneNames;
  const icu::UnicodeString *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  icu::UnicodeString *v51;
  int *v52;
  uint64_t v53;
  char v54;
  icu::TimeZoneFormat *v55;
  signed int v56;
  int *v57;
  int *v58;
  icu::TimeZoneFormat *v59;
  int v60;
  uint64_t v61;
  icu::UVector **v62;
  UErrorCode v63;
  signed int v64;
  icu::ZoneMeta *v65;
  int v66;
  signed int v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v70;
  int v71;
  int *v72;
  int v73;
  int v74;
  icu::UVector **v75;
  UErrorCode v76;
  icu::SimpleTimeZone *v77;
  int v78;
  icu::SimpleTimeZone *TimeZoneForOffset;
  int v81;
  signed int v82;
  unsigned int v83;
  const icu::UnicodeString *v84;
  signed int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  const icu::UnicodeString *v90;
  int *v91;
  int *v92;
  int *v93;
  int *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  __int16 v98;
  __int16 v99;
  __int16 v100;
  icu::SimpleTimeZone *v101;
  icu::TimeZoneNames::MatchInfoCollection *v102;
  icu::TimeZoneFormat *v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  signed int v108;
  signed __int8 v109[4];
  UErrorCode v110;
  void (**v111)(icu::ParsePosition *__hidden);
  int v112;
  unsigned int v113;
  _OWORD v114[4];
  signed __int8 v115[16];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  UChar *v119[8];
  _OWORD v120[4];
  uint64_t v121;

  v6 = a6;
  v8 = a4;
  v121 = *MEMORY[0x1E0C80C00];
  if (a6)
    *a6 = 0;
  v12 = a4[2];
  v13 = *((unsigned __int16 *)a3 + 4);
  v14 = (__int16)v13;
  v15 = v13 >> 5;
  if (v14 >= 0)
    v16 = v15;
  else
    v16 = *((_DWORD *)a3 + 3);
  v18 = a2 == 4 || a2 == 2;
  v111 = off_1E224A8B0;
  v112 = v12;
  v113 = -1;
  if ((a2 > 3 || ((0xBu >> (a2 & 0xF)) & 1) == 0) && a2 != 4 && a2 != 2)
  {
    v104 = a5;
    v105 = 0;
    v24 = -1;
    LODWORD(v19) = 0x7FFFFFFF;
    goto LABEL_21;
  }
  LOBYTE(v120[0]) = 0;
  v19 = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a3, (icu::ParsePosition *)&v111, v18, (signed __int8 *)v120);
  if (v113 != -1)
  {
    v24 = -1;
    LODWORD(v19) = 0x7FFFFFFF;
LABEL_20:
    v104 = a5;
    v105 = 96;
LABEL_21:
    v107 = v19;
    v110 = U_ZERO_ERROR;
    memset(v120, 0, sizeof(v120));
    memset(v119, 0, sizeof(v119));
    BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::UnicodeString::UnicodeString(v119, v120, 0, 32);
    v108 = v16;
    v30 = 1;
    v31 = 6;
    switch(a2)
    {
      case 0u:
        goto LABEL_32;
      case 1u:
        v30 = 3;
        goto LABEL_32;
      case 2u:
        v30 = 5;
LABEL_32:
        *(_DWORD *)v115 = 0;
        TimeZoneGenericNames = icu::TimeZoneFormat::getTimeZoneGenericNames(this, &v110);
        v34 = v110;
        if (v110 > U_ZERO_ERROR
          || (BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneGenericNames::findBestMatch(TimeZoneGenericNames, (uint64_t)a3, v12, v30, v119, v115, &v110), v34 = v110, v110 >= U_ILLEGAL_ARGUMENT_ERROR))
        {
          v31 = 0;
          v8[3] = v12;
          goto LABEL_176;
        }
        v30 = v108;
        if ((int)BestMatch < 1)
        {
LABEL_71:
          v103 = this;
          goto LABEL_72;
        }
        if (v6)
          *v6 = *(_DWORD *)v115;
        v39 = (_DWORD)BestMatch + v12;
LABEL_54:
        v8[2] = v39;
        TimeZone = icu::TimeZone::createTimeZone(v119, v35);
        goto LABEL_75;
      case 3u:
        goto LABEL_36;
      case 4u:
        v31 = 48;
LABEL_36:
        v95 = v8;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(_QWORD, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(**((_QWORD **)this + 70) + 120))(*((_QWORD *)this + 70), a3, v12, v31, &v110);
        v36 = (icu::UVector **)BestMatch;
        v34 = v110;
        v103 = this;
        if (v110 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          v31 = 0;
          LOBYTE(v37) = 0;
          v34 = (unint64_t)v95;
          v95[3] = v12;
LABEL_38:
          v30 = v108;
          goto LABEL_39;
        }
        if (!BestMatch)
          goto LABEL_122;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneNames::MatchInfoCollection::size(BestMatch);
        if ((int)BestMatch < 1)
          goto LABEL_122;
        v91 = v6;
        v41 = 0;
        v42 = -1;
        do
        {
          v37 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v36, v41) + v12;
          if (v37 > v24)
          {
            v24 = v37;
            v42 = v41;
          }
          ++v41;
          BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v36);
        }
        while (v41 < (int)BestMatch);
        if ((v42 & 0x80000000) == 0)
        {
          v6 = v91;
          if (!v91)
          {
LABEL_191:
            v95[2] = v37;
            icu::TimeZoneFormat::getTimeZoneID(v103, v36, v42, (icu::UnicodeString *)v119);
            BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZone::createTimeZone(v119, v84);
            v31 = (uint64_t)BestMatch;
            LOBYTE(v37) = 0;
            goto LABEL_38;
          }
          NameTypeAt = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v36, v42);
          v44 = 1;
          if (NameTypeAt > 15)
          {
            if (NameTypeAt == 16)
              goto LABEL_190;
            if (NameTypeAt != 32)
              goto LABEL_66;
          }
          else
          {
            if (NameTypeAt == 2)
            {
LABEL_190:
              *v91 = v44;
              goto LABEL_191;
            }
            if (NameTypeAt != 4)
            {
LABEL_66:
              v44 = 0;
              goto LABEL_190;
            }
          }
          v44 = 2;
          goto LABEL_190;
        }
        v6 = v91;
LABEL_122:
        LOBYTE(v37) = 1;
        v30 = v108;
        if (a2 != 4)
          goto LABEL_39;
        v34 = v104;
        if ((v104 & 2) == 0)
          goto LABEL_39;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::getTZDBTimeZoneNames(v103, &v110);
        v34 = v110;
        if (v110 > U_ZERO_ERROR)
          goto LABEL_125;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(icu::TimeZoneNames::MatchInfoCollection *, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)BestMatch + 120))(BestMatch, a3, v12, v31, &v110);
        v31 = (uint64_t)BestMatch;
        v34 = v110;
        if (v110 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          v102 = BestMatch;
          v31 = 0;
          v37 = 0;
          v34 = (unint64_t)v95;
          v95[3] = v12;
          goto LABEL_129;
        }
        if (!BestMatch)
          goto LABEL_125;
        if ((int)icu::TimeZoneNames::MatchInfoCollection::size(BestMatch) < 1)
        {
          BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          goto LABEL_125;
        }
        v94 = v6;
        v85 = 0;
        v86 = -1;
        do
        {
          v87 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt((icu::UVector **)v31, v85) + v12;
          if (v87 > v24)
          {
            v24 = v87;
            v86 = v85;
          }
          ++v85;
        }
        while (v85 < (int)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v31));
        v102 = (icu::TimeZoneNames::MatchInfoCollection *)v31;
        if ((v86 & 0x80000000) != 0)
        {
          v37 = 1;
          v6 = v94;
LABEL_230:
          v30 = v108;
LABEL_129:
          BestMatch = v102;
          if (v102)
          {
            BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(icu::TimeZoneNames::MatchInfoCollection *))(*(_QWORD *)v102 + 8))(v102);
            if ((v37 & 1) == 0)
            {
              LOBYTE(v37) = 0;
              goto LABEL_39;
            }
          }
          else if (!v37)
          {
LABEL_39:
            if (v36)
              BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)(*((uint64_t (**)(icu::UVector **))*v36
                                                                      + 1))(v36);
            v8 = v95;
            if ((v37 & 1) == 0)
              goto LABEL_176;
LABEL_72:
            if (v24 > (int)v12)
            {
              v8[2] = v24;
              v32 = (icu::ZoneMeta *)v107;
LABEL_74:
              TimeZone = icu::TimeZoneFormat::createTimeZoneForOffset(BestMatch, v32, v26, v27, v28, v29);
LABEL_75:
              v31 = (uint64_t)TimeZone;
              goto LABEL_176;
            }
            v45 = word_18BE2B834[a2];
            v118 = 0u;
            v116 = 0u;
            v117 = 0u;
            *(_OWORD *)v115 = 0u;
            memset(v114, 0, sizeof(v114));
            TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::UnicodeString::UnicodeString(v114, v115, 0, 32);
            if (v24 < v30 && (v45 & 0x180) != 0x180)
            {
              v52 = v6;
              v112 = v12;
              v113 = -1;
              v109[0] = 0;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetISO8601(TZDBTimeZoneNames, a3, (icu::ParsePosition *)&v111, 0, v109);
              if (v113 == -1)
              {
                v65 = TZDBTimeZoneNames;
                v66 = v112;
                if (v112 == v30 || v109[0])
                  goto LABEL_106;
                if (v24 < v112)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v114);
                  v107 = v65;
                  v24 = v66;
                }
              }
              v6 = v52;
            }
            v53 = v105;
            v54 = v105 | v45;
            v55 = v103;
            v101 = (icu::SimpleTimeZone *)v31;
            if (v24 < v30 && ((v105 | v45) & 0x20) == 0)
            {
              v98 = v45;
              v56 = v30;
              v57 = v6;
              v112 = v12;
              v113 = -1;
              v109[0] = 0;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(v103, a3, (icu::ParsePosition *)&v111, 0, v109);
              v53 = v113;
              if (v113 == -1)
              {
                v65 = TZDBTimeZoneNames;
                v66 = v112;
                if (v112 == v56)
                  goto LABEL_106;
                v53 = v109[0];
                if (v109[0])
                  goto LABEL_106;
                if (v24 < v112)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v114);
                  v107 = v65;
                  v24 = v66;
                }
              }
              v6 = v57;
              v30 = v56;
              v55 = v103;
              v45 = v98;
            }
            if (v24 >= v30 || (v54 & 0x40) != 0)
            {
LABEL_88:
              if ((v104 & 1) == 0)
              {
                v60 = 0;
                v61 = v107;
                goto LABEL_165;
              }
              if (v24 >= v30)
              {
                v106 = 0;
                v64 = v24;
                goto LABEL_140;
              }
              v99 = v45;
              v92 = v6;
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*(uint64_t (**)(_QWORD *, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(**((_QWORD **)v55 + 70) + 120))(*((_QWORD **)v55 + 70), a3, v12, 118, &v110);
              v62 = (icu::UVector **)TZDBTimeZoneNames;
              v63 = v110;
              if (v110 >= U_ILLEGAL_ARGUMENT_ERROR)
              {
                v101 = 0;
                v106 = 0;
                v8[3] = v12;
                v64 = v24;
                goto LABEL_136;
              }
              v96 = v8;
              if (TZDBTimeZoneNames
                && (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size(TZDBTimeZoneNames),
                    (int)TZDBTimeZoneNames >= 1))
              {
                v67 = 0;
                v64 = -1;
                v68 = -1;
                do
                {
                  if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v62, v67) + v12) > v64)
                  {
                    v64 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v62, v67) + v12;
                    v68 = v67;
                  }
                  ++v67;
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v62);
                }
                while (v67 < (int)TZDBTimeZoneNames);
              }
              else
              {
                v68 = -1;
                v64 = -1;
              }
              if (v24 >= v64)
              {
                v106 = 0;
                v64 = v24;
                v8 = v96;
                v30 = v108;
                goto LABEL_136;
              }
              icu::TimeZoneFormat::getTimeZoneID(v55, v62, v68, (icu::UnicodeString *)v114);
              TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v62, v68);
              v53 = 0x7FFFFFFFLL;
              v106 = 1;
              v107 = 0x7FFFFFFF;
              v8 = v96;
              if ((int)TZDBTimeZoneNames > 15)
              {
                v30 = v108;
                if ((_DWORD)TZDBTimeZoneNames == 16)
                  goto LABEL_136;
                if ((_DWORD)TZDBTimeZoneNames != 32)
                  goto LABEL_119;
              }
              else
              {
                v30 = v108;
                if ((_DWORD)TZDBTimeZoneNames == 2)
                  goto LABEL_136;
                if ((_DWORD)TZDBTimeZoneNames != 4)
                {
LABEL_119:
                  v106 = 0;
LABEL_135:
                  v107 = 0x7FFFFFFF;
LABEL_136:
                  if (v62)
                    TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*((uint64_t (**)(icu::UVector **))*v62 + 1))(v62);
                  v69 = v63 <= U_ZERO_ERROR;
                  v6 = v92;
                  v45 = v99;
                  if (!v69)
                    goto LABEL_175;
LABEL_140:
                  if ((v104 & 2) == 0
                    || v64 >= v30
                    || (v45 & 0x10) != 0
                    || (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::getTZDBTimeZoneNames(v55, &v110),
                        v53 = v110,
                        v110 > U_ZERO_ERROR))
                  {
                    v24 = v64;
LABEL_145:
                    if (v24 >= v30)
                    {
                      v72 = v6;
                      v61 = v107;
                    }
                    else
                    {
                      *(_DWORD *)v109 = 0;
                      v70 = icu::TimeZoneFormat::getTimeZoneGenericNames(v55, &v110);
                      v53 = v110;
                      v61 = v107;
                      if (v110 > U_ZERO_ERROR
                        || (TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneGenericNames::findBestMatch(v70, (uint64_t)a3, v12, 7u, v119, v109, &v110), v53 = v110, v110 > U_ZERO_ERROR))
                      {
LABEL_170:
                        v101 = 0;
                        v8[3] = v12;
                        goto LABEL_175;
                      }
                      if ((int)TZDBTimeZoneNames >= 1)
                      {
                        v71 = (_DWORD)TZDBTimeZoneNames + v12;
                        if (v24 < (int)TZDBTimeZoneNames + (int)v12)
                        {
                          TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v114, v119, 0);
                          v61 = 0x7FFFFFFFLL;
                          v53 = *(unsigned int *)v109;
                          v106 = *(_DWORD *)v109;
                          v24 = v71;
                        }
                      }
                      v72 = v6;
                    }
                    v73 = v45 & 0x200;
                    if (v24 >= v30)
                    {
                      v60 = v106;
                    }
                    else
                    {
                      v60 = v106;
                      if (!v73)
                      {
                        v112 = v12;
                        v113 = -1;
                        TZDBTimeZoneNames = icu::TimeZoneFormat::parseZoneID(TZDBTimeZoneNames, a3, (icu::ParsePosition *)&v111, (icu::UnicodeString *)v119);
                        v53 = v113;
                        if (v113 == -1)
                        {
                          v74 = v112;
                          if (v24 < v112)
                          {
                            TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v114, v119, 0);
                            v60 = 0;
                            v61 = 0x7FFFFFFFLL;
                            v24 = v74;
                          }
                        }
                      }
                    }
                    if (v24 < v30
                      && !v73
                      && (v112 = v12,
                          v113 = -1,
                          TZDBTimeZoneNames = icu::TimeZoneFormat::parseShortZoneID(TZDBTimeZoneNames, a3, (icu::ParsePosition *)&v111, (icu::UnicodeString *)v119), v53 = v113, v113 == -1))
                    {
                      v81 = v112;
                      v6 = v72;
                      if (v24 < v112)
                      {
                        TZDBTimeZoneNames = icu::UnicodeString::copyFrom((UChar **)v114, v119, 0);
                        v60 = 0;
                        v61 = 0x7FFFFFFFLL;
                        v24 = v81;
                      }
                    }
                    else
                    {
                      v6 = v72;
                    }
LABEL_165:
                    if (v24 > (int)v12)
                    {
                      v78 = WORD4(v114[0]) >> 5;
                      if (SWORD4(v114[0]) < 0)
                        v78 = HIDWORD(v114[0]);
                      if (v78 < 1)
                        TimeZoneForOffset = icu::TimeZoneFormat::createTimeZoneForOffset(TZDBTimeZoneNames, (icu::ZoneMeta *)v61, v48, v49, v50, v51);
                      else
                        TimeZoneForOffset = (icu::SimpleTimeZone *)icu::TimeZone::createTimeZone((UChar **)v114, v47);
                      v101 = TimeZoneForOffset;
                      if (v6)
                        *v6 = v60;
                      v8[2] = v24;
                      goto LABEL_175;
                    }
                    goto LABEL_170;
                  }
                  v93 = v6;
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*(uint64_t (**)(icu::TimeZoneFormat *, icu::UnicodeString *, uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)TZDBTimeZoneNames + 120))(TZDBTimeZoneNames, a3, v12, 118, &v110);
                  v75 = (icu::UVector **)TZDBTimeZoneNames;
                  v76 = v110;
                  if (v110 >= U_ILLEGAL_ARGUMENT_ERROR)
                  {
                    v77 = 0;
                    v8[3] = v12;
                    v24 = v64;
                    goto LABEL_218;
                  }
                  v97 = v8;
                  v100 = v45;
                  if (TZDBTimeZoneNames)
                  {
                    TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size(TZDBTimeZoneNames);
                    v77 = v101;
                    if ((int)TZDBTimeZoneNames < 1)
                    {
                      v83 = -1;
                      v24 = -1;
                    }
                    else
                    {
                      v82 = 0;
                      v24 = -1;
                      v83 = -1;
                      do
                      {
                        if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v75, v82) + v12) > v24)
                        {
                          v24 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v75, v82) + v12;
                          v83 = v82;
                        }
                        ++v82;
                        TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v75);
                      }
                      while (v82 < (int)TZDBTimeZoneNames);
                    }
                  }
                  else
                  {
                    v83 = -1;
                    v24 = -1;
                    v77 = v101;
                  }
                  if (v64 >= v24)
                  {
                    v24 = v64;
                    v8 = v97;
                    v45 = v100;
                    goto LABEL_218;
                  }
                  icu::TimeZoneFormat::getTimeZoneID(v55, v75, v83, (icu::UnicodeString *)v114);
                  TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v75, v83);
                  v53 = 0x7FFFFFFFLL;
                  v106 = 1;
                  v107 = 0x7FFFFFFF;
                  v8 = v97;
                  if ((int)TZDBTimeZoneNames > 15)
                  {
                    v45 = v100;
                    if ((_DWORD)TZDBTimeZoneNames == 16)
                      goto LABEL_218;
                    if ((_DWORD)TZDBTimeZoneNames != 32)
                      goto LABEL_212;
                  }
                  else
                  {
                    v45 = v100;
                    if ((_DWORD)TZDBTimeZoneNames == 2)
                      goto LABEL_218;
                    if ((_DWORD)TZDBTimeZoneNames != 4)
                    {
LABEL_212:
                      v106 = 0;
LABEL_217:
                      v107 = 0x7FFFFFFF;
LABEL_218:
                      v101 = v77;
                      if (v75)
                        TZDBTimeZoneNames = (icu::TimeZoneFormat *)(*((uint64_t (**)(icu::UVector **))*v75 + 1))(v75);
                      v69 = v76 <= U_ZERO_ERROR;
                      v6 = v93;
                      v30 = v108;
                      if (!v69)
                        goto LABEL_175;
                      goto LABEL_145;
                    }
                  }
                  v106 = 2;
                  v53 = 0x7FFFFFFFLL;
                  goto LABEL_217;
                }
              }
              v106 = 2;
              v53 = 0x7FFFFFFFLL;
              goto LABEL_135;
            }
            v58 = v6;
            v112 = v12;
            v113 = -1;
            v109[0] = 0;
            v59 = v55;
            TZDBTimeZoneNames = (icu::TimeZoneFormat *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(v55, a3, (icu::ParsePosition *)&v111, 1, v109);
            v53 = v113;
            if (v113 != -1)
            {
LABEL_87:
              v6 = v58;
              v55 = v59;
              goto LABEL_88;
            }
            v65 = TZDBTimeZoneNames;
            v66 = v112;
            if (v112 != v30)
            {
              v53 = v109[0];
              if (!v109[0])
              {
                if (v24 < v112)
                {
                  icu::UnicodeString::setToBogus((icu::UnicodeString *)v114);
                  v107 = v65;
                  v24 = v66;
                }
                goto LABEL_87;
              }
            }
LABEL_106:
            v8[2] = v66;
            v101 = icu::TimeZoneFormat::createTimeZoneForOffset(TZDBTimeZoneNames, v65, v48, v49, v50, v51);
LABEL_175:
            icu::UnicodeString::~UnicodeString((void *)v53, (icu::UnicodeString *)v114);
            v31 = (uint64_t)v101;
LABEL_176:
            icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)v119);
            goto LABEL_177;
          }
LABEL_125:
          LOBYTE(v37) = 1;
          goto LABEL_39;
        }
        v6 = v94;
        if (!v94)
          goto LABEL_229;
        v88 = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt((icu::UVector **)v31, v86);
        v89 = 1;
        if (v88 > 15)
        {
          if (v88 == 16)
            goto LABEL_228;
          if (v88 != 32)
            goto LABEL_203;
        }
        else
        {
          if (v88 == 2)
          {
LABEL_228:
            *v94 = v89;
LABEL_229:
            v95[2] = v87;
            icu::TimeZoneFormat::getTimeZoneID(v103, (icu::UVector **)v31, v86, (icu::UnicodeString *)v119);
            v31 = (uint64_t)icu::TimeZone::createTimeZone(v119, v90);
            v37 = 0;
            goto LABEL_230;
          }
          if (v88 != 4)
          {
LABEL_203:
            v89 = 0;
            goto LABEL_228;
          }
        }
        v89 = 2;
        goto LABEL_228;
      case 5u:
        v112 = v12;
        v113 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a3, (icu::ParsePosition *)&v111, 0, 0);
        if (v113 == -1)
          goto LABEL_26;
        v103 = this;
        v38 = v105 | 0x40;
        goto LABEL_47;
      case 6u:
        v112 = v12;
        v113 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a3, (icu::ParsePosition *)&v111, 1, 0);
        if (v113 == -1)
          goto LABEL_26;
        v103 = this;
        v38 = v105 | 0x20;
LABEL_47:
        v105 = v38;
        goto LABEL_48;
      case 7u:
      case 9u:
      case 0xBu:
      case 0xDu:
      case 0xFu:
        v103 = this;
        v112 = v12;
        v113 = -1;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetISO8601(BestMatch, a3, (icu::ParsePosition *)&v111, 0, 0);
        v30 = v108;
        if (v113 == -1)
          goto LABEL_26;
        goto LABEL_72;
      case 8u:
      case 0xAu:
      case 0xCu:
      case 0xEu:
      case 0x10u:
        v112 = v12;
        v113 = -1;
        v115[0] = 0;
        BestMatch = (icu::TimeZoneNames::MatchInfoCollection *)icu::TimeZoneFormat::parseOffsetISO8601(BestMatch, a3, (icu::ParsePosition *)&v111, 0, v115);
        if (v113 == -1 && v115[0])
        {
LABEL_26:
          v8[2] = v112;
          v32 = BestMatch;
          goto LABEL_74;
        }
        v103 = this;
LABEL_48:
        v30 = v108;
        goto LABEL_72;
      case 0x11u:
        v103 = this;
        v112 = v12;
        v113 = -1;
        BestMatch = icu::TimeZoneFormat::parseZoneID(BestMatch, a3, (icu::ParsePosition *)&v111, (icu::UnicodeString *)v119);
        goto LABEL_52;
      case 0x12u:
        v103 = this;
        v112 = v12;
        v113 = -1;
        BestMatch = icu::TimeZoneFormat::parseShortZoneID(BestMatch, a3, (icu::ParsePosition *)&v111, (icu::UnicodeString *)v119);
        goto LABEL_52;
      case 0x13u:
        v112 = v12;
        v113 = -1;
        v103 = this;
        BestMatch = icu::TimeZoneFormat::parseExemplarLocation(this, a3, (icu::ParsePosition *)&v111, (icu::UnicodeString *)v119);
LABEL_52:
        v30 = v108;
        if (v113 != -1)
          goto LABEL_72;
        v39 = v112;
        goto LABEL_54;
      default:
        goto LABEL_71;
    }
  }
  v24 = v112;
  if (v112 != v16 && !LOBYTE(v120[0]))
    goto LABEL_20;
  v8[2] = v112;
  v31 = (uint64_t)icu::TimeZoneFormat::createTimeZoneForOffset(v19, v19, v20, v21, v22, v23);
LABEL_177:
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v111);
  return v31;
}

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMT(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, signed __int8 a4, signed __int8 *a5)
{
  int v8;
  uint64_t result;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  int32_t v17;
  int v18;
  int v19;

  v8 = *((_DWORD *)a3 + 2);
  v19 = 0;
  if (a5)
  {
    *a5 = 0;
    result = icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(this, a2, v8, 0, &v19);
    v11 = v19;
    if (v19 >= 1
      || (result = icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(this, a2, v8, &v19), v11 = v19, v19 >= 1))
    {
      *a5 = 1;
LABEL_26:
      v18 = v11 + v8;
      goto LABEL_27;
    }
  }
  else
  {
    result = icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(this, a2, v8, 0, &v19);
    v11 = v19;
    if (v19 > 0)
      goto LABEL_26;
    result = icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(this, a2, v8, &v19);
    v11 = v19;
    if (v19 > 0)
      goto LABEL_26;
  }
  v12 = *((unsigned __int16 *)this + 536);
  v13 = v12 >> 5;
  if ((*((__int16 *)this + 536) & 0x80000000) == 0)
  {
    v14 = v12 >> 5;
    if ((v12 & 1) == 0)
      goto LABEL_9;
LABEL_20:
    if ((*((_WORD *)a2 + 4) & 1) == 0)
      goto LABEL_15;
LABEL_21:
    if (*((__int16 *)this + 536) < 0)
      v11 = *((_DWORD *)this + 269);
    else
      v11 = *((unsigned __int16 *)this + 536) >> 5;
    result = 0;
    goto LABEL_26;
  }
  v14 = *((_DWORD *)this + 269);
  if ((v12 & 1) != 0)
    goto LABEL_20;
LABEL_9:
  if ((v12 & 0x8000u) != 0)
    v13 = *((_DWORD *)this + 269);
  if ((v12 & 2) != 0)
    v15 = (char *)this + 1074;
  else
    v15 = (char *)*((_QWORD *)this + 136);
  if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, v8, v14, (uint64_t)v15, v13 & (v13 >> 31), v13 & ~(v13 >> 31), 0))goto LABEL_21;
LABEL_15:
  v16 = 0;
  while (1)
  {
    v17 = u_strlen((const UChar *)&aGmt_1[v16]);
    result = icu::UnicodeString::doCaseCompare((uint64_t)a2, v8, v17, (uint64_t)&aGmt_1[v16], 0, v17, 0);
    if (!(_DWORD)result)
      break;
    v16 += 4;
    if (v16 == 12)
    {
      result = 0;
      *((_DWORD *)a3 + 3) = v8;
      return result;
    }
  }
  v18 = v17 + v8;
LABEL_27:
  *((_DWORD *)a3 + 2) = v18;
  return result;
}

icu::SimpleTimeZone *icu::TimeZoneFormat::createTimeZoneForOffset(icu::TimeZoneFormat *this, icu::ZoneMeta *a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  const icu::UnicodeString *v7;
  void *TimeZone;
  void *v9;
  const char *v10;
  UChar *v11[9];

  v11[8] = *(UChar **)MEMORY[0x1E0C80C00];
  if ((_DWORD)a2)
    return icu::ZoneMeta::createCustomTimeZone(a2, (int)a2, a3, a4, a5, a6);
  v10 = "E";
  icu::UnicodeString::UnicodeString(v11, 1, &v10);
  TimeZone = icu::TimeZone::createTimeZone(v11, v7);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v11);
  return (icu::SimpleTimeZone *)TimeZone;
}

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMT(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a2, a3, 0, 0);
}

uint64_t icu::TimeZoneFormat::parseOffsetShortLocalizedGMT(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetLocalizedGMT(this, a2, a3, 1, 0);
}

uint64_t icu::TimeZoneFormat::parseOffsetISO8601(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  return icu::TimeZoneFormat::parseOffsetISO8601(this, a2, a3, 0, 0);
}

uint64_t icu::TimeZoneFormat::parseOffsetISO8601(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, int a4, signed __int8 *a5)
{
  int v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v17;
  int v18;
  int v19;
  void (**v20)(icu::ParsePosition *__hidden);
  int v21;
  int v22;
  void (**v23)(icu::ParsePosition *__hidden);
  int v24;
  int v25;

  if (a5)
    *a5 = 0;
  v9 = *((_DWORD *)a3 + 2);
  v10 = *((unsigned __int16 *)a2 + 4);
  if (*((__int16 *)a2 + 4) < 0)
  {
    v11 = *((_DWORD *)a2 + 3);
    if (v9 >= (int)v11)
      goto LABEL_16;
  }
  else
  {
    if (v9 >= (int)(v10 >> 5))
      goto LABEL_16;
    v11 = v10 >> 5;
  }
  if (v11 <= v9)
    goto LABEL_16;
  if ((v10 & 2) != 0)
    v12 = (char *)a2 + 10;
  else
    v12 = (char *)*((_QWORD *)a2 + 3);
  v13 = *(unsigned __int16 *)&v12[2 * v9];
  if ((v13 & 0xFFFFFFDF) != 0x5A)
  {
    if (v13 == 43)
    {
      v15 = 1;
      goto LABEL_19;
    }
    if (v13 == 45)
    {
      v15 = -1;
LABEL_19:
      v23 = off_1E224A8B0;
      v24 = v9 + 1;
      v25 = -1;
      v17 = icu::TimeZoneFormat::parseAsciiOffsetFields((uint64_t)a2, (uint64_t)&v23, 58, 0, 2);
      if (a4 || v25 != -1)
      {
        if (v25 != -1)
        {
          v14 = 0;
          *((_DWORD *)a3 + 3) = v9;
LABEL_31:
          icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v23);
          return v14;
        }
      }
      else
      {
        v18 = v24;
        if (v24 - v9 <= 3)
        {
          v20 = off_1E224A8B0;
          v21 = v9 + 1;
          v22 = -1;
          v19 = icu::TimeZoneFormat::parseAbuttingAsciiOffsetFields((uint64_t)a2, (uint64_t)&v20, 0, 2, 0);
          if (v22 == -1 && v21 > v18)
          {
            v24 = v21;
            v17 = v19;
          }
          icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v20);
        }
      }
      *((_DWORD *)a3 + 2) = v24;
      if (a5)
        *a5 = 1;
      v14 = (v17 * v15);
      goto LABEL_31;
    }
LABEL_16:
    v14 = 0;
    *((_DWORD *)a3 + 3) = v9;
    return v14;
  }
  v14 = 0;
  *((_DWORD *)a3 + 2) = v9 + 1;
  return v14;
}

uint64_t icu::TimeZoneFormat::getTimeType(int a1)
{
  uint64_t result;

  result = 1;
  if (a1 > 15)
  {
    if (a1 == 16)
      return result;
    if (a1 != 32)
      return 0;
  }
  else
  {
    if (a1 == 2)
      return result;
    if (a1 != 4)
      return 0;
  }
  return 2;
}

icu::UnicodeString *icu::TimeZoneFormat::getTimeZoneID(icu::TimeZoneFormat *this, icu::UVector **a2, unsigned int a3, icu::UnicodeString *a4)
{
  void *v8;
  _OWORD v10[4];
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt(a2, a3, a4))
  {
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    icu::UnicodeString::UnicodeString(v10, v11, 0, 32);
    if (icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt(a2, a3, (icu::UnicodeString *)v10))
      (*(void (**)(_QWORD, _OWORD *, char *, icu::UnicodeString *))(**((_QWORD **)this + 70) + 64))(*((_QWORD *)this + 70), v10, (char *)this + 552, a4);
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
  }
  return a4;
}

uint64_t icu::TimeZoneFormat::getTZDBTimeZoneNames(icu::TimeZoneFormat *this, UErrorCode *a2)
{
  unint64_t v5;
  uint64_t *v6;

  if (*(int *)a2 > 0)
    return 0;
  umtx_lock((icu::UMutex *)&unk_1EE00A090);
  if (!*((_QWORD *)this + 165))
  {
    v6 = icu::UMemory::operator new(0, (icu::UMemory *)0xF0, v5);
    if (v6)
      *((_QWORD *)this + 165) = sub_18BD9AD78(v6, (char *)this + 328);
    else
      *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  umtx_unlock((std::mutex **)&unk_1EE00A090);
  return *((_QWORD *)this + 165);
}

uint64_t icu::TimeZoneFormat::getTimeZoneGenericNames(icu::TimeZoneFormat *this, UErrorCode *a2)
{
  UErrorCode *v5;

  if (*(int *)a2 > 0)
    return 0;
  umtx_lock((icu::UMutex *)&unk_1EE00A090);
  if (!*((_QWORD *)this + 71))
    *((_QWORD *)this + 71) = icu::TimeZoneGenericNames::createInstance((icu::TimeZoneFormat *)((char *)this + 328), a2, v5);
  umtx_unlock((std::mutex **)&unk_1EE00A090);
  return *((_QWORD *)this + 71);
}

icu::UnicodeString *icu::TimeZoneFormat::parseZoneID(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  UErrorCode *v11;
  uint64_t Enumeration;
  UErrorCode v13;
  uint64_t v14;
  icu::ZoneMeta *v15;
  const icu::UnicodeString *v16;
  void *TimeZoneID;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  UErrorCode v30;

  v30 = U_ZERO_ERROR;
  v7 = atomic_load(&dword_1EE00A0E0);
  if (v7 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A0E0))
  {
    if (dword_1EE00A0E4 >= 1)
      v30 = dword_1EE00A0E4;
  }
  else
  {
    sub_18BDA1768(0xEu, (uint64_t)sub_18BD94320);
    v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x38, v8);
    if (v10)
    {
      qword_1EE00A080 = icu::TextTrieMap::TextTrieMap((uint64_t)v10, 1, 0);
      Enumeration = icu::TimeZone::createEnumeration((icu::TimeZone *)&v30, v11);
      v13 = v30;
      if (v30 <= U_ZERO_ERROR)
      {
        v14 = Enumeration;
        while (1)
        {
          v15 = (icu::ZoneMeta *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)v14 + 56))(v14, &v30);
          if (!v15)
            break;
          TimeZoneID = (void *)icu::ZoneMeta::findTimeZoneID(v15, v16);
          if (TimeZoneID)
            icu::TextTrieMap::put(TimeZoneID, &v30, qword_1EE00A080, TimeZoneID, v18);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        v13 = v30;
      }
    }
    else
    {
      qword_1EE00A080 = 0;
      v13 = U_MEMORY_ALLOCATION_ERROR;
      v30 = U_MEMORY_ALLOCATION_ERROR;
    }
    dword_1EE00A0E4 = v13;
    icu::umtx_initImplPostInit(&dword_1EE00A0E0);
  }
  v19 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  if (v30 > U_ZERO_ERROR)
    goto LABEL_15;
  v21 = icu::UMemory::operator new((uint64_t *)v30, (icu::UMemory *)0x18, v20);
  v22 = v21;
  if (v21)
  {
    *v21 = (uint64_t)&off_1E2267358;
    *((_DWORD *)v21 + 2) = 0;
    v21[2] = 0;
  }
  icu::TextTrieMap::search((icu::TextTrieMap *)qword_1EE00A080, (uint64_t)a2, v19, (uint64_t (***)(_QWORD, _QWORD, _QWORD *, int *))v21, &v30);
  v23 = *((_DWORD *)v22 + 2);
  if (v23 <= 0)
  {
    (*(void (**)(uint64_t *))(*v22 + 16))(v22);
LABEL_15:
    *((_DWORD *)a3 + 3) = v19;
    return a4;
  }
  v24 = v22[2];
  icu::UnicodeString::unBogus((uint64_t)a4);
  v25 = *((unsigned __int16 *)a4 + 4);
  v26 = (__int16)v25;
  v27 = v25 >> 5;
  if (v26 >= 0)
    v28 = v27;
  else
    v28 = *((unsigned int *)a4 + 3);
  icu::UnicodeString::doReplace((uint64_t)a4, 0, v28, v24, 0, 0xFFFFFFFFLL);
  (*(void (**)(uint64_t *))(*v22 + 16))(v22);
  *((_DWORD *)a3 + 2) = v23 + v19;
  return a4;
}

icu::UnicodeString *icu::TimeZoneFormat::parseShortZoneID(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  UErrorCode v11;
  uint64_t *v12;
  uint64_t v13;
  const icu::UnicodeString *v14;
  icu::ZoneMeta *v15;
  void *TimeZoneID;
  const icu::UnicodeString *v17;
  UErrorCode *v18;
  UChar *ShortID;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  UErrorCode v32;

  v32 = U_ZERO_ERROR;
  v7 = atomic_load(&dword_1EE00A0E8);
  if (v7 != 2 && icu::umtx_initImplPreInit(&dword_1EE00A0E8))
  {
    sub_18BDA1768(0xEu, (uint64_t)sub_18BD94320);
    v8 = icu::TimeZone::createTimeZoneIDEnumeration(1, 0, 0, &v32);
    v10 = v8;
    v11 = v32;
    if (v32 <= U_ZERO_ERROR)
    {
      v12 = icu::UMemory::operator new((uint64_t *)v32, (icu::UMemory *)0x38, v9);
      if (v12)
      {
        qword_1EE00A088 = icu::TextTrieMap::TextTrieMap((uint64_t)v12, 1, 0);
        v13 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)v10 + 56))(v10, &v32);
        if (v13)
        {
          v15 = (icu::ZoneMeta *)v13;
          do
          {
            TimeZoneID = (void *)icu::ZoneMeta::findTimeZoneID(v15, v14);
            ShortID = (UChar *)icu::ZoneMeta::getShortID(v15, v17, v18);
            if (ShortID && TimeZoneID)
              icu::TextTrieMap::put(ShortID, &v32, qword_1EE00A088, TimeZoneID, v20);
            v15 = (icu::ZoneMeta *)(*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)v10 + 56))(v10, &v32);
          }
          while (v15);
        }
      }
      else
      {
        qword_1EE00A088 = 0;
        v11 = U_MEMORY_ALLOCATION_ERROR;
        v32 = U_MEMORY_ALLOCATION_ERROR;
        if (!v10)
        {
LABEL_18:
          dword_1EE00A0EC = v11;
          icu::umtx_initImplPostInit(&dword_1EE00A0E8);
          goto LABEL_19;
        }
      }
    }
    else if (!v8)
    {
      goto LABEL_18;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v32;
    goto LABEL_18;
  }
  if (dword_1EE00A0EC >= 1)
    v32 = dword_1EE00A0EC;
LABEL_19:
  v21 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  if (v32 > U_ZERO_ERROR)
  {
LABEL_20:
    *((_DWORD *)a3 + 3) = v21;
    return a4;
  }
  v23 = icu::UMemory::operator new((uint64_t *)v32, (icu::UMemory *)0x18, v22);
  v24 = v23;
  if (v23)
  {
    *v23 = (uint64_t)&off_1E2267358;
    *((_DWORD *)v23 + 2) = 0;
    v23[2] = 0;
  }
  icu::TextTrieMap::search((icu::TextTrieMap *)qword_1EE00A088, (uint64_t)a2, v21, (uint64_t (***)(_QWORD, _QWORD, _QWORD *, int *))v23, &v32);
  v25 = *((_DWORD *)v24 + 2);
  if (v25 <= 0)
  {
    (*(void (**)(uint64_t *))(*v24 + 16))(v24);
    goto LABEL_20;
  }
  v26 = v24[2];
  icu::UnicodeString::unBogus((uint64_t)a4);
  v27 = *((unsigned __int16 *)a4 + 4);
  v28 = (__int16)v27;
  v29 = v27 >> 5;
  if (v28 >= 0)
    v30 = v29;
  else
    v30 = *((unsigned int *)a4 + 3);
  icu::UnicodeString::doReplace((uint64_t)a4, 0, v30, v26, 0, 0xFFFFFFFFLL);
  (*(void (**)(uint64_t *))(*v24 + 16))(v24);
  *((_DWORD *)a3 + 2) = v25 + v21;
  return a4;
}

icu::UnicodeString *icu::TimeZoneFormat::parseExemplarLocation(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, icu::UnicodeString *a4)
{
  uint64_t v8;
  icu::TimeZoneNames::MatchInfoCollection *v9;
  icu::UVector **v10;
  signed int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v18;

  v8 = *((unsigned int *)a3 + 2);
  icu::UnicodeString::setToBogus(a4);
  v18 = 0;
  v9 = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(_QWORD, const icu::UnicodeString *, uint64_t, uint64_t, int *))(**((_QWORD **)this + 70) + 120))(*((_QWORD *)this + 70), a2, v8, 64, &v18);
  v10 = (icu::UVector **)v9;
  if (v18 > 0)
    goto LABEL_2;
  if (v9 && (int)icu::TimeZoneNames::MatchInfoCollection::size(v9) >= 1)
  {
    v11 = 0;
    v12 = -1;
    v13 = -1;
    do
    {
      if ((int)(icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v10, v11) + v8) > v13)
      {
        v13 = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v10, v11) + v8;
        v12 = v11;
      }
      ++v11;
    }
    while (v11 < (int)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v10));
    if (v13 > 0)
    {
      *((_DWORD *)a3 + 2) = v13;
      icu::TimeZoneFormat::getTimeZoneID(this, v10, v12, a4);
    }
  }
  v14 = *((unsigned __int16 *)a4 + 4);
  v15 = (__int16)v14;
  v16 = v14 >> 5;
  if (v15 < 0)
    v16 = *((_DWORD *)a4 + 3);
  if (!v16)
LABEL_2:
    *((_DWORD *)a3 + 3) = v8;
  if (v10)
    (*((void (**)(icu::UVector **))*v10 + 1))(v10);
  return a4;
}

uint64_t icu::TimeZoneFormat::parseObject(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  icu::UObject *v5;

  v5 = (icu::UObject *)(*(uint64_t (**)(icu::TimeZoneFormat *, _QWORD, const icu::UnicodeString *, icu::ParsePosition *, uint64_t, _QWORD))(*(_QWORD *)this + 72))(this, 0, a2, a4, 1, 0);
  return icu::Formattable::adoptObject(a3, v5);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetISO8601(icu::TimeZoneFormat *this, int a2, int a3, int a4, int a5, int a6, icu::UnicodeString *a7, UErrorCode *a8)
{
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  __int16 v21;
  uint64_t v22;
  _DWORD *v23;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  __int16 v33;
  _DWORD v34[3];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(int *)a8 < 1)
  {
    if (a2 >= 0)
      v11 = a2;
    else
      v11 = -a2;
    if (a4 && (v11 < 0x3E8 || a6 && v11 >> 5 <= 0x752))
    {
      LOWORD(v34[0]) = 90;
      icu::UnicodeString::unBogus((uint64_t)a7);
      v12 = *((unsigned __int16 *)a7 + 4);
      v13 = (__int16)v12;
      v14 = v12 >> 5;
      if (v13 >= 0)
        v15 = v14;
      else
        v15 = *((unsigned int *)a7 + 3);
      icu::UnicodeString::doReplace((uint64_t)a7, 0, v15, (uint64_t)v34, 0, 1);
    }
    else
    {
      v16 = a5 == 0;
      if (a3)
        v17 = 0;
      else
        v17 = 58;
      if (v11 < 0x5265C00)
      {
        if (a6)
          v18 = 1;
        else
          v18 = 2;
        v19 = v11 / 0x36EE80;
        v20 = v11 % 0x36EE80;
        v34[0] = v19;
        v34[1] = v20 / 0xEA60;
        v34[2] = v20 % 0xEA60 / 0x3E8;
        if (v18 > v16)
        {
          while (!v34[v18])
          {
            if ((int)--v18 <= (int)v16)
            {
              v18 = a5 == 0;
              break;
            }
          }
        }
        v21 = 43;
        if (a2 < 0 && (v18 & 0x80000000) == 0)
        {
          v22 = v18 + 1;
          v23 = v34;
          while (!*v23++)
          {
            if (!--v22)
            {
              v21 = 43;
              goto LABEL_33;
            }
          }
          v21 = 45;
        }
LABEL_33:
        v33 = v21;
        icu::UnicodeString::unBogus((uint64_t)a7);
        v25 = *((unsigned __int16 *)a7 + 4);
        v26 = (__int16)v25;
        v27 = v25 >> 5;
        if (v26 >= 0)
          v28 = v27;
        else
          v28 = *((unsigned int *)a7 + 3);
        icu::UnicodeString::doReplace((uint64_t)a7, 0, v28, (uint64_t)&v33, 0, 1);
        if ((v18 & 0x80000000) == 0)
        {
          v29 = 0;
          v30 = 4 * (v18 + 1);
          do
          {
            if (!a3 && v29)
            {
              v33 = v17;
              icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1);
            }
            v31 = v34[v29 / 4];
            v33 = (__int16)v31 / 10 + 48;
            icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1);
            v33 = v31 % 10 + 48;
            icu::UnicodeString::doAppend((uint64_t)a7, (uint64_t)&v33, 0, 1);
            v29 += 4;
          }
          while (v30 != v29);
        }
      }
      else
      {
        icu::UnicodeString::setToBogus(a7);
        *a8 = U_ILLEGAL_ARGUMENT_ERROR;
      }
    }
  }
  else
  {
    icu::UnicodeString::setToBogus(a7);
  }
  return a7;
}

UChar **icu::TimeZoneFormat::formatOffsetLocalizedGMT(UChar **this, int a2, int a3, UChar **a4, UErrorCode *a5)
{
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  icu::UVector *v15;
  signed int v16;
  unsigned int v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  icu::TimeZoneFormat *v21;
  icu::UnicodeString *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;

  if (*(int *)a5 < 1)
  {
    if ((a2 - 86400000) > 0xF5B34800)
    {
      if (a2)
      {
        if (a2 >= 0)
          v9 = a2;
        else
          v9 = -a2;
        v10 = v9 / 0x36EE80;
        v11 = v9 % 0x36EE80;
        v12 = v11 / 0xEA60;
        v13 = v11 % 0xEA60;
        if (a2 < 0)
        {
          if (v13 >= 0x3E8)
          {
            v14 = (char *)(this + 161);
          }
          else if (a3 && v11 >> 5 < 0x753)
          {
            v14 = (char *)(this + 163);
          }
          else
          {
            v14 = (char *)(this + 160);
          }
        }
        else if (v13 >= 0x3E8)
        {
          v14 = (char *)(this + 159);
        }
        else if (a3 && v11 >> 5 < 0x753)
        {
          v14 = (char *)(this + 162);
        }
        else
        {
          v14 = (char *)(this + 158);
        }
        v15 = *(icu::UVector **)v14;
        icu::UnicodeString::copyFrom(a4, this + 142, 0);
        if (*((int *)v15 + 2) >= 1)
        {
          v16 = 0;
          v17 = (unsigned __int16)v13 / 0x3E8u;
          if (a3)
            v18 = 1;
          else
            v18 = 2;
          v19 = v18;
          do
          {
            v20 = icu::UVector::elementAt(v15, v16);
            switch(*(_DWORD *)(v20 + 16))
            {
              case 0:
                icu::UnicodeString::doAppend((uint64_t)a4, *(_QWORD *)(v20 + 8), 0, 0xFFFFFFFFLL);
                break;
              case 1:
                v21 = (icu::TimeZoneFormat *)this;
                v22 = (icu::UnicodeString *)a4;
                v23 = v10;
                v24 = v19;
                goto LABEL_34;
              case 2:
                v21 = (icu::TimeZoneFormat *)this;
                v22 = (icu::UnicodeString *)a4;
                v23 = v12;
                goto LABEL_33;
              case 4:
                v21 = (icu::TimeZoneFormat *)this;
                v22 = (icu::UnicodeString *)a4;
                v23 = v17;
LABEL_33:
                v24 = 2;
LABEL_34:
                icu::TimeZoneFormat::appendOffsetDigits(v21, v22, v23, v24);
                break;
              default:
                break;
            }
            ++v16;
          }
          while (v16 < *((_DWORD *)v15 + 2));
        }
        v25 = *((unsigned __int16 *)this + 604);
        v26 = (__int16)v25;
        v27 = v25 >> 5;
        if (v26 >= 0)
          v28 = v27;
        else
          v28 = *((unsigned int *)this + 303);
        icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)(this + 150), 0, v28);
      }
      else
      {
        icu::UnicodeString::copyFrom(a4, this + 133, 0);
      }
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a4);
  }
  return a4;
}

uint64_t icu::TimeZoneFormat::appendOffsetDigits(icu::TimeZoneFormat *this, icu::UnicodeString *a2, int a3, int a4)
{
  int v7;
  int v8;

  if (a3 > 9)
    v7 = -2;
  else
    v7 = -1;
  v8 = v7 + a4;
  if (v7 + a4 >= 1)
  {
    do
    {
      icu::UnicodeString::append((uint64_t)a2, *((_DWORD *)this + 256));
      --v8;
    }
    while (v8);
  }
  if (a3 > 9)
    icu::UnicodeString::append((uint64_t)a2, *((_DWORD *)this + a3 / 0xAuLL + 256));
  return icu::UnicodeString::append((uint64_t)a2, *((_DWORD *)this + a3 % 10 + 256));
}

uint64_t icu::TimeZoneFormat::parseAsciiOffsetFields(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v6 = 0;
  result = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v8 = *(int *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 8);
  v25 = 0;
  v24 = 0;
  v23 = -1;
  v22 = 0xFFFFFFFF00000000;
  v10 = *(unsigned __int16 *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  v12 = a1 + 10;
  v13 = *(_QWORD *)(a1 + 24);
  if ((v10 & 2) == 0)
    v12 = v13;
  v14 = v12 + 2 * v8;
  while (1)
  {
    v15 = v8 + v6;
    if ((v10 & 0x8000) != 0)
    {
      if (v15 >= v11)
        break;
      LODWORD(v16) = v11;
    }
    else
    {
      if (v15 >= (uint64_t)(v10 >> 5))
        break;
      v16 = v10 >> 5;
    }
    if ((int)result > a5)
      break;
    if (v16 <= v9 + (int)v6)
      v17 = 0xFFFF;
    else
      v17 = *(unsigned __int16 *)(v14 + 2 * v6);
    if (v17 == a3)
    {
      if ((_DWORD)result)
      {
        if (*((_DWORD *)&v22 + (int)result) != -1)
          break;
        *((_DWORD *)&v22 + (int)result) = 0;
      }
      else if (!(_DWORD)v22)
      {
        v20 = -1;
        v21 = 0;
        goto LABEL_30;
      }
    }
    else
    {
      v18 = *((_DWORD *)&v22 + (int)result);
      if (v18 == -1)
        break;
      v19 = v17 - 48;
      if (v19 >= 0xA)
        v19 = -1;
      if ((v19 & 0x80000000) != 0)
        break;
      *((_DWORD *)&v24 + (int)result) = v19 + 10 * *((_DWORD *)&v24 + (int)result);
      *((_DWORD *)&v22 + (int)result) = v18 + 1;
      if (v18 <= 0)
        result = result;
      else
        result = (result + 1);
    }
    ++v6;
  }
  if ((_DWORD)v22)
  {
    if ((int)v24 < 24)
    {
      v20 = 0;
      result = (3600000 * v24);
      if (HIDWORD(v22) == 2)
      {
        v21 = v22;
        if (SHIDWORD(v24) <= 59)
        {
          result = (result + 60000 * HIDWORD(v24));
          v21 = v22 + 3;
          v20 = 1;
          if (v23 == 2 && v25 <= 59)
          {
            result = (result + 1000 * v25);
            v21 = v22 + 6;
            v20 = 2;
          }
        }
      }
      else
      {
        v21 = v22;
      }
    }
    else
    {
      v20 = 0;
      result = 3600000 * (v24 / 0xA);
      v21 = 1;
    }
  }
  else
  {
    result = 0;
    v21 = 0;
    v20 = -1;
  }
LABEL_30:
  if (v20 >= a4)
  {
    *(_DWORD *)(a2 + 8) = v21 + v9;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a2 + 12) = v9;
  }
  return result;
}

uint64_t icu::TimeZoneFormat::parseAbuttingAsciiOffsetFields(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a2 + 8);
  v6 = ((__PAIR64__(2 * a3, a5) - 1) >> 32) + 2;
  v7 = (2 * a4 + 2);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  if ((int)v7 < 1)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v8 = 0;
    v9 = *(unsigned __int16 *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 12);
    v11 = *(_QWORD *)(a1 + 24);
    if ((v9 & 2) != 0)
      v11 = a1 + 10;
    v12 = v11 + 2 * v5;
    while (1)
    {
      v13 = v5 + v8;
      if ((v9 & 0x8000) != 0)
      {
        LODWORD(v14) = v10;
        if (v13 >= v10)
          break;
      }
      else
      {
        v14 = v9 >> 5;
        if (v13 >= (uint64_t)(v9 >> 5))
          break;
      }
      if (v14 <= v5 + (int)v8)
        break;
      v15 = *(unsigned __int16 *)(v12 + 2 * v8) - 48;
      if (v15 >= 0xA)
        v15 = -1;
      if ((v15 & 0x80000000) != 0)
        break;
      *((_DWORD *)&v22 + v8++) = v15;
      if (v7 == v8)
        goto LABEL_17;
    }
    LODWORD(v7) = v8;
  }
LABEL_17:
  v16 = v7 & ~(a5 != 0);
  if (v16 < v6)
  {
LABEL_33:
    result = 0;
    *(_DWORD *)(a2 + 12) = v5;
  }
  else
  {
    if (a5)
      v17 = -2;
    else
      v17 = -1;
    while (1)
    {
      switch(v16)
      {
        case 1:
          v18 = 0;
          v19 = 0;
          v20 = v22;
          break;
        case 2:
          v18 = 0;
          v19 = 0;
          v20 = HIDWORD(v22) + 10 * v22;
          break;
        case 3:
          v19 = 0;
          v20 = v22;
          v18 = v23 + 10 * HIDWORD(v22);
          break;
        case 4:
          v19 = 0;
          v20 = HIDWORD(v22) + 10 * v22;
          v18 = HIDWORD(v23) + 10 * v23;
          break;
        case 5:
          v20 = v22;
          v18 = v23 + 10 * HIDWORD(v22);
          v19 = v24 + 10 * HIDWORD(v23);
          break;
        case 6:
          v20 = HIDWORD(v22) + 10 * v22;
          v18 = HIDWORD(v23) + 10 * v23;
          v19 = HIDWORD(v24) + 10 * v24;
          break;
        default:
          v20 = 0;
          v18 = 0;
          v19 = 0;
          break;
      }
      if (v20 <= 23 && v18 <= 59 && v19 < 60)
        break;
      v16 += v17;
      if (v16 < v6)
        goto LABEL_33;
    }
    *(_DWORD *)(a2 + 8) = v5 + v16;
    return (1000 * (v19 + 60 * (v18 + 60 * v20)));
  }
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetLocalizedGMTPattern(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, signed __int8 a4, int *a5)
{
  unsigned int v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  int v22;

  v9 = *((unsigned __int16 *)this + 572);
  if (*((__int16 *)this + 572) < 0)
    v10 = *((_DWORD *)this + 287);
  else
    v10 = v9 >> 5;
  v22 = v10;
  if (v10 >= 1)
  {
    if ((v9 & 1) != 0)
    {
      if ((*((_WORD *)a2 + 4) & 1) == 0)
      {
LABEL_13:
        v13 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      if ((v9 & 0x8000u) == 0)
        v11 = v9 >> 5;
      else
        v11 = *((_DWORD *)this + 287);
      if ((v9 & 2) != 0)
        v12 = (char *)this + 1146;
      else
        v12 = (char *)*((_QWORD *)this + 145);
      if (icu::UnicodeString::doCaseCompare((uint64_t)a2, a3, v10, (uint64_t)v12, v11 & (v11 >> 31), v11 & ~(v11 >> 31), 0))goto LABEL_13;
    }
  }
  v14 = v10 + a3;
  v13 = icu::TimeZoneFormat::parseOffsetFields(this, a2, v10 + a3, 0, &v22);
  v15 = v22;
  if (v22)
  {
    v16 = *((unsigned __int16 *)this + 604);
    if (*((__int16 *)this + 604) < 0)
      v17 = *((_DWORD *)this + 303);
    else
      v17 = v16 >> 5;
    if (v17 >= 1)
    {
      if ((v16 & 1) != 0)
      {
        if ((*((_WORD *)a2 + 4) & 1) == 0)
          goto LABEL_28;
      }
      else
      {
        if ((v16 & 0x8000u) == 0)
          v18 = v16 >> 5;
        else
          v18 = *((_DWORD *)this + 303);
        if ((v16 & 2) != 0)
          v19 = (char *)this + 1210;
        else
          v19 = (char *)*((_QWORD *)this + 153);
        if (icu::UnicodeString::doCaseCompare((uint64_t)a2, v22 + v14, v17, (uint64_t)v19, v18 & (v18 >> 31), v18 & ~(v18 >> 31), 0))goto LABEL_28;
      }
    }
    v20 = v15 + v10 + v17;
    goto LABEL_31;
  }
LABEL_28:
  v20 = 0;
LABEL_31:
  *a5 = v20;
  return v13;
}

uint64_t icu::TimeZoneFormat::parseOffsetDefaultLocalizedGMT(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  uint64_t v8;
  int32_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  uint64_t result;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;

  v8 = 0;
  while (1)
  {
    v9 = u_strlen((const UChar *)&aGmt_1[v8]);
    if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, a3, v9, (uint64_t)&aGmt_1[v8], 0, v9, 0))
      break;
    v8 += 4;
    if (v8 == 12)
      goto LABEL_17;
  }
  if (!v9)
    goto LABEL_17;
  v10 = v9 + a3;
  v11 = v9 + a3 + 1;
  v12 = *((unsigned __int16 *)a2 + 4);
  if (*((__int16 *)a2 + 4) < 0)
  {
    v13 = *((_DWORD *)a2 + 3);
    if (v11 >= v13)
      goto LABEL_17;
  }
  else
  {
    if (v11 >= (int)(v12 >> 5))
      goto LABEL_17;
    v13 = v12 >> 5;
  }
  if (v13 <= v10)
    goto LABEL_17;
  if ((v12 & 2) != 0)
    v14 = (char *)a2 + 10;
  else
    v14 = (char *)*((_QWORD *)a2 + 3);
  v15 = *(unsigned __int16 *)&v14[2 * v10];
  if (v15 == 43)
  {
    v16 = 1;
    goto LABEL_20;
  }
  if (v15 != 45)
  {
LABEL_17:
    result = 0;
    v18 = 0;
    goto LABEL_18;
  }
  v16 = -1;
LABEL_20:
  v26 = 0;
  v19 = icu::TimeZoneFormat::parseDefaultOffsetFields(this, (uint64_t)a2, v11, 58, &v26);
  v20 = v26;
  v21 = *((unsigned __int16 *)a2 + 4);
  v22 = (__int16)v21;
  v23 = v21 >> 5;
  if (v22 < 0)
    v23 = *((_DWORD *)a2 + 3);
  if (v26 != v23 - v11)
  {
    v25 = 0;
    v24 = icu::TimeZoneFormat::parseAbuttingOffsetFields(this, a2, v11, &v25);
    if (v20 <= v25)
    {
      v19 = v24;
      v20 = v25;
    }
  }
  result = (v19 * v16);
  v18 = v9 + v20 + 1;
LABEL_18:
  *a4 = v18;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFields(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, signed __int8 a4, int *a5)
{
  uint64_t v9;
  int v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17[2];
  int v18;
  int v19[3];

  v9 = 0;
  *a5 = 0;
  memset(v19, 0, sizeof(v19));
  while (1)
  {
    v10 = icu::TimeZoneFormat::parseOffsetFieldsWithPattern(this, a2, a3, *((icu::UVector **)this + dword_18BE2B8A4[v9] + 158), 0, &v19[2], &v19[1], v19);
    if (v10 >= 1)
      break;
    if (++v9 == 6)
      return 0;
  }
  v12 = v10;
  if (v9 >= 5)
    v13 = -1;
  else
    v13 = dword_18BE2B960[v9];
  if (*((_BYTE *)this + 1312))
  {
    v14 = 0;
    v18 = 0;
    *(_QWORD *)v17 = 0;
    while (1)
    {
      v15 = icu::TimeZoneFormat::parseOffsetFieldsWithPattern(this, a2, a3, *((icu::UVector **)this + dword_18BE2B8A4[v14] + 158), 1, &v18, &v17[1], v17);
      if (v15 >= 1)
        break;
      if (++v14 == 6)
      {
        v16 = 1;
        goto LABEL_16;
      }
    }
    v16 = v14 >= 5 ? -1 : dword_18BE2B960[v14];
LABEL_16:
    if (v15 > v12)
    {
      v19[2] = v18;
      *(_QWORD *)v19 = *(_QWORD *)v17;
      v13 = v16;
      v12 = v15;
    }
    if (v12 < 1)
      return 0;
  }
  result = (1000 * v13 * (v19[0] + 60 * (v19[1] + 60 * v19[2])));
  *a5 = v12;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFieldsWithPattern(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, icu::UVector *a4, int a5, int *a6, int *a7, int *a8)
{
  unsigned int v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  const UChar *v16;
  int32_t v17;
  unsigned int v18;
  int v19;
  uint64_t *v20;
  icu::PatternProps *v21;
  icu::PatternProps *v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t result;
  unsigned int v33;
  int v34;
  int v35;
  int v36;

  if (*((int *)a4 + 2) >= 1)
  {
    v11 = 0;
    v34 = 0;
    v35 = 0;
    v12 = 0;
    if (a5)
      v13 = 1;
    else
      v13 = 2;
    v33 = v13;
    v14 = a3;
    while (2)
    {
      v36 = 0;
      v15 = icu::UVector::elementAt(a4, v11);
      switch(*(_DWORD *)(v15 + 16))
      {
        case 0:
          v16 = *(const UChar **)(v15 + 8);
          v17 = u_strlen(v16);
          if (!v11)
          {
            v18 = *((unsigned __int16 *)a2 + 4);
            v19 = (__int16)v18;
            LODWORD(v20) = v18 >> 5;
            v20 = v19 >= 0 ? (uint64_t *)v20 : (uint64_t *)*((unsigned int *)a2 + 3);
            if (v14 < (int)v20)
            {
              v21 = (icu::PatternProps *)icu::UnicodeString::char32At(v20, a2, v14);
              if (!icu::PatternProps::isWhiteSpace(v21) && v17 >= 1)
              {
                do
                {
                  v22 = (icu::PatternProps *)*v16;
                  if (((unsigned __int16)v22 & 0xF800) == 0xD800 && ((unsigned __int16)v22 & 0x400) == 0 && v17 != 1)
                  {
                    v23 = v16[1];
                    v24 = (v23 & 0xFC00) == 56320;
                    v25 = v23 + ((_DWORD)v22 << 10) - 56613888;
                    if (v24)
                      v22 = (icu::PatternProps *)v25;
                    else
                      v22 = (icu::PatternProps *)*v16;
                  }
                  if (!icu::PatternProps::isWhiteSpace(v22))
                    break;
                  v26 = v22 < 0x10000 ? 1 : 2;
                  v16 += v26;
                  v27 = __OFSUB__(v17, v26);
                  v17 -= v26;
                }
                while (!((v17 < 0) ^ v27 | (v17 == 0)));
              }
            }
          }
          if (!icu::UnicodeString::doCaseCompare((uint64_t)a2, v14, v17, (uint64_t)v16, 0, v17, 0))
            goto LABEL_32;
          goto LABEL_36;
        case 1:
          v12 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v14, 1u, v33, 0, 23, &v36);
          goto LABEL_31;
        case 2:
          v34 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v14, 2u, 2u, 0, 59, &v36);
          goto LABEL_31;
        case 4:
          v35 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(this, a2, v14, 2u, 2u, 0, 59, &v36);
LABEL_31:
          v17 = v36;
          if (!v36)
            goto LABEL_36;
LABEL_32:
          v14 += v17;
          if ((signed int)++v11 >= *((_DWORD *)a4 + 2))
            goto LABEL_35;
          continue;
        default:
LABEL_36:
          result = 0;
          *a8 = 0;
          *a7 = 0;
          *a6 = 0;
          return result;
      }
    }
  }
  v12 = 0;
  v34 = 0;
  v35 = 0;
  v14 = a3;
LABEL_35:
  *a6 = v12;
  *a7 = v34;
  result = (v14 - a3);
  *a8 = v35;
  return result;
}

uint64_t icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, unsigned int a4, unsigned int a5, int a6, int a7, int *a8)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t result;
  int v30;

  v10 = 0;
  v11 = 0;
  *a8 = 0;
  v12 = *((unsigned __int16 *)a2 + 4);
  v13 = (__int16)v12;
  v14 = v12 >> 5;
  if (v13 < 0)
    v14 = *((_DWORD *)a2 + 3);
  v30 = 0;
  v15 = v14 <= a3 || a5 == 0;
  v16 = a3;
  if (!v15)
  {
    v11 = 0;
    v21 = 0;
    v16 = a3;
    while (1)
    {
      v22 = icu::TimeZoneFormat::parseSingleLocalizedDigit(this, a2, v16, &v30);
      if (v22 < 0)
        break;
      v10 = (v22 + 10 * v21);
      if ((int)v10 > a7)
        break;
      ++v11;
      v16 += v30;
      v23 = *((unsigned __int16 *)a2 + 4);
      v24 = (__int16)v23;
      v25 = v23 >> 5;
      if (v24 < 0)
        v25 = *((_DWORD *)a2 + 3);
      v26 = v16 >= v25 || v11 >= a5;
      v21 = (v22 + 10 * v21);
      if (v26)
        goto LABEL_19;
    }
    v10 = v21;
  }
LABEL_19:
  result = 0xFFFFFFFFLL;
  if ((int)v10 >= a6 && v11 >= a4)
  {
    *a8 = v16 - a3;
    return v10;
  }
  return result;
}

uint64_t icu::TimeZoneFormat::parseAbuttingOffsetFields(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t result;
  int v17;
  int v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = 0;
  v23 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v9 = a3;
  while (1)
  {
    v10 = icu::TimeZoneFormat::parseSingleLocalizedDigit(this, a2, v9, &v18);
    *((_DWORD *)&v20 + v8) = v10;
    if (v10 < 0)
      break;
    v9 += v18;
    *((_DWORD *)v19 + v8++) = v9 - a3;
    if (v8 == 6)
      goto LABEL_7;
  }
  if (!(_DWORD)v8)
  {
    v17 = 0;
    result = 0;
    goto LABEL_24;
  }
  if ((int)v8 < 1)
    return 0;
LABEL_7:
  v11 = (int *)v19 + (v8 - 1);
  while (1)
  {
    switch((int)v8)
    {
      case 1:
        v12 = 0;
        v13 = 0;
        v14 = v20;
        break;
      case 2:
        v12 = 0;
        v13 = 0;
        v14 = HIDWORD(v20) + 10 * v20;
        break;
      case 3:
        v13 = 0;
        v14 = v20;
        v12 = v21 + 10 * HIDWORD(v20);
        break;
      case 4:
        v13 = 0;
        v14 = HIDWORD(v20) + 10 * v20;
        v12 = HIDWORD(v21) + 10 * v21;
        break;
      case 5:
        v14 = v20;
        v12 = v21 + 10 * HIDWORD(v20);
        v13 = v22 + 10 * HIDWORD(v21);
        break;
      case 6:
        v14 = HIDWORD(v20) + 10 * v20;
        v12 = HIDWORD(v21) + 10 * v21;
        v13 = HIDWORD(v22) + 10 * v22;
        break;
      default:
        v14 = 0;
        v12 = 0;
        v13 = 0;
        break;
    }
    if (v14 <= 23 && v12 <= 59 && v13 <= 59)
      break;
    --v11;
    v15 = __OFSUB__((_DWORD)v8, 1);
    LODWORD(v8) = v8 - 1;
    if (((int)v8 < 0) ^ v15 | ((_DWORD)v8 == 0))
      return 0;
  }
  result = (3600000 * v14 + 60000 * v12 + 1000 * v13);
  v17 = *v11;
LABEL_24:
  *a4 = v17;
  return result;
}

uint64_t icu::TimeZoneFormat::parseSingleLocalizedDigit(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, int a3, int *a4)
{
  unsigned int v4;
  int v5;
  unint64_t v6;
  UChar32 v11;
  uint64_t v12;

  *a4 = 0;
  v4 = *((unsigned __int16 *)a2 + 4);
  v5 = (__int16)v4;
  LODWORD(v6) = v4 >> 5;
  if (v5 >= 0)
    v6 = v6;
  else
    v6 = *((unsigned int *)a2 + 3);
  if ((int)v6 <= a3)
    return 0xFFFFFFFFLL;
  v11 = icu::UnicodeString::char32At((uint64_t *)v6, a2, a3);
  v12 = 0;
  while (v11 != *((_DWORD *)this + v12 + 256))
  {
    if (++v12 == 10)
    {
      v12 = u_charDigitValue(v11);
      if (v12 >= 0xA)
        return 0xFFFFFFFFLL;
      break;
    }
  }
  *a4 = icu::UnicodeString::moveIndex32(a2, a3, 1) - a3;
  return v12;
}

uint64_t icu::TimeZoneFormat::parseDefaultOffsetFields(icu::TimeZoneFormat *a1, uint64_t a2, int a3, int a4, _DWORD *a5)
{
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v30;
  int v31;

  v10 = *(unsigned __int16 *)(a2 + 8);
  v11 = (__int16)v10;
  v12 = v10 >> 5;
  if (v11 >= 0)
    v13 = v12;
  else
    v13 = *(_DWORD *)(a2 + 12);
  v31 = 0;
  *a5 = 0;
  v14 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(a1, (const icu::UnicodeString *)a2, a3, 1u, 2u, 0, 23, &v31);
  if (!v31)
    return 0;
  v15 = v14;
  v16 = v31 + a3;
  v17 = v31 + a3 + 1;
  if (v17 >= v13
    || ((v18 = *(unsigned __int16 *)(a2 + 8), (v18 & 0x8000u) == 0) ? (v19 = v18 >> 5) : (v19 = *(_DWORD *)(a2 + 12)),
        v19 <= v16
      ? (v21 = 0xFFFF)
      : ((v18 & 2) != 0 ? (v20 = a2 + 10) : (v20 = *(_QWORD *)(a2 + 24)), v21 = *(unsigned __int16 *)(v20 + 2 * v16)),
        v21 != a4))
  {
    v22 = 0;
LABEL_27:
    v23 = 0;
    goto LABEL_28;
  }
  v22 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(a1, (const icu::UnicodeString *)a2, v16 + 1, 2u, 2u, 0, 59, &v31);
  v23 = v31;
  if (!v31)
    goto LABEL_28;
  v16 = v17 + v31;
  v24 = v17 + v31 + 1;
  if (v24 >= v13)
    goto LABEL_27;
  v25 = *(unsigned __int16 *)(a2 + 8);
  v26 = (v25 & 0x8000u) == 0 ? v25 >> 5 : *(_DWORD *)(a2 + 12);
  if (v26 <= v16)
  {
    v28 = 0xFFFF;
  }
  else
  {
    v27 = (v25 & 2) != 0 ? a2 + 10 : *(_QWORD *)(a2 + 24);
    v28 = *(unsigned __int16 *)(v27 + 2 * v16);
  }
  if (v28 != a4)
    goto LABEL_27;
  v30 = icu::TimeZoneFormat::parseOffsetFieldWithLocalizedDigits(a1, (const icu::UnicodeString *)a2, v16 + 1, 2u, 2u, 0, 59, &v31);
  if (v31)
    v16 = v24 + v31;
  v23 = 1000 * v30;
LABEL_28:
  if (v16 == a3)
    return 0;
  *a5 = v16 - a3;
  return (3600000 * v15 + 60000 * v22 + v23);
}

icu::UnicodeString *icu::TimeZoneFormat::formatOffsetWithAsciiDigits(int a1, int a2, int a3, int a4, icu::UnicodeString *this)
{
  uint64_t v6;
  unsigned int v9;
  __int16 v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v19;
  _DWORD v20[3];
  uint64_t v21;

  LODWORD(v6) = a4;
  v21 = *MEMORY[0x1E0C80C00];
  if (a1 >= 0)
    v9 = a1;
  else
    v9 = -a1;
  if (a1 >= 0)
    v10 = 43;
  else
    v10 = 45;
  LOWORD(v20[0]) = v10;
  icu::UnicodeString::unBogus((uint64_t)this);
  v11 = *((unsigned __int16 *)this + 4);
  v12 = (__int16)v11;
  v13 = v11 >> 5;
  if (v12 >= 0)
    v14 = v13;
  else
    v14 = *((unsigned int *)this + 3);
  icu::UnicodeString::doReplace((uint64_t)this, 0, v14, (uint64_t)v20, 0, 1);
  v20[0] = v9 / 0x36EE80;
  v20[1] = v9 % 0x36EE80 / 0xEA60;
  v20[2] = v9 % 0x36EE80 % 0xEA60 / 0x3E8;
  if ((int)v6 <= a3)
  {
LABEL_15:
    if ((v6 & 0x80000000) != 0)
      return this;
    goto LABEL_18;
  }
  v6 = (int)v6;
  while (!v20[v6])
  {
    if (--v6 <= a3)
    {
      LODWORD(v6) = a3;
      goto LABEL_15;
    }
  }
  if ((v6 & 0x80000000) == 0)
  {
LABEL_18:
    v15 = 0;
    v16 = 4 * (v6 + 1);
    do
    {
      if (a2 && v15)
      {
        v19 = a2;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1);
      }
      v17 = v20[v15 / 4];
      v19 = (__int16)v17 / 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1);
      v19 = v17 % 10 + 48;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1);
      v15 += 4;
    }
    while (v16 != v15);
  }
  return this;
}

const icu::UnicodeString *icu::TimeZoneFormat::unquote(icu::TimeZoneFormat *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  unsigned int v5;
  int v6;
  int32_t v7;
  int32_t v8;
  unint64_t v9;
  int v10;
  __int16 v11;
  int v12;
  unint64_t v13;
  char *v14;
  int v15;
  __int16 *v16;
  __int16 v18;
  __int16 v19;

  v5 = *((unsigned __int16 *)this + 4);
  v6 = (__int16)v5;
  v7 = v5 >> 5;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = *((_DWORD *)this + 3);
  if ((icu::UnicodeString::doIndexOf((uint64_t)this, 0x27u, 0, v8) & 0x80000000) == 0)
  {
    v9 = 0;
    v10 = 0;
    if ((*((_WORD *)a2 + 4) & 1) != 0)
      v11 = 2;
    else
      v11 = *((_WORD *)a2 + 4) & 0x1F;
    *((_WORD *)a2 + 4) = v11;
    while (1)
    {
      v12 = *((__int16 *)this + 4);
      if (v12 < 0)
      {
        if ((uint64_t)v9 >= *((int *)this + 3))
          return a2;
        v13 = *((unsigned int *)this + 3);
      }
      else
      {
        if (v9 >= (unint64_t)*((unsigned __int16 *)this + 4) >> 5)
          return a2;
        v13 = (unint64_t)*((unsigned __int16 *)this + 4) >> 5;
      }
      if (v13 <= v9)
        break;
      if ((v12 & 2) != 0)
        v14 = (char *)this + 10;
      else
        v14 = (char *)*((_QWORD *)this + 3);
      v15 = *(unsigned __int16 *)&v14[2 * v9];
      if (v15 != 39)
        goto LABEL_22;
      if (!v10)
      {
        v10 = 1;
        goto LABEL_24;
      }
      v18 = 39;
      v16 = &v18;
LABEL_23:
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)v16, 0, 1);
      v10 = 0;
LABEL_24:
      ++v9;
    }
    LOWORD(v15) = -1;
LABEL_22:
    v19 = v15;
    v16 = &v19;
    goto LABEL_23;
  }
  icu::UnicodeString::copyFrom((UChar **)a2, (UChar **)this, 0);
  return a2;
}

uint64_t sub_18BD9428C(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_18BD942A4(uint64_t a1)
{
  void *v1;

  v1 = (void *)nullsub_17(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD942B8(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  icu::UVector *v6;

  if (*a4 > 0)
    return 0;
  v6 = *(icu::UVector **)a3;
  if (*(_QWORD *)a3)
  {
    if ((!*(_BYTE *)(a3 + 14) || (v6 = (icu::UVector *)icu::UVector::elementAt(v6, 0)) != 0)
      && *(_DWORD *)(a1 + 8) < a2)
    {
      *(_QWORD *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
  return 1;
}

uint64_t sub_18BD94320()
{
  if (qword_1EE00A080)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE00A080 + 8))(qword_1EE00A080);
  qword_1EE00A080 = 0;
  atomic_store(0, &dword_1EE00A0E0);
  if (qword_1EE00A088)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE00A088 + 8))(qword_1EE00A088);
  qword_1EE00A088 = 0;
  atomic_store(0, &dword_1EE00A0E8);
  return 1;
}

icu::UnicodeString *sub_18BD9438C(icu::UVector **a1, unsigned int a2, icu::UnicodeString *a3)
{
  uint64_t v4;
  const UChar *v6;

  v4 = icu::UVector::elementAt(*a1, a2);
  if (v4 && *(_QWORD *)(*(_QWORD *)v4 + 8))
  {
    v6 = *(const UChar **)(*(_QWORD *)v4 + 8);
    icu::UnicodeString::setTo(a3, 1, &v6, -1);
  }
  else
  {
    icu::UnicodeString::setToBogus(a3);
  }
  return a3;
}

uint64_t sub_18BD943FC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E22673C8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return nullsub_17(a1);
}

void sub_18BD9443C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = off_1E22673C8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)nullsub_17(a1);
  icu::UMemory::operator delete(v3);
}

uint64_t sub_18BD94480(uint64_t a1, unint64_t a2, _BYTE *a3, int *a4)
{
  uint64_t result;
  int v7;
  int v9;
  unsigned int v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t v13;

  if (*a4 > 0)
    return 0;
  if (*(_QWORD *)a3)
  {
    v7 = a2;
    if (a3[14])
    {
      v9 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      if (v9 < 1)
        return 1;
    }
    else
    {
      v9 = 1;
    }
    v10 = 0;
    do
    {
      v11 = *(_DWORD **)a3;
      if (a3[14])
        v11 = (_DWORD *)icu::UVector::elementAt(*(icu::UVector **)a3, v10);
      if (!v11)
        break;
      if ((*(_DWORD *)(a1 + 8) & *v11) != 0)
      {
        if (!*(_QWORD *)(a1 + 16))
        {
          v12 = icu::UMemory::operator new(0, (icu::UMemory *)0x28, a2);
          if (!v12)
          {
            if (*a4 > 0)
              return 0;
            result = 0;
LABEL_25:
            *a4 = 7;
            return result;
          }
          v13 = icu::UVector::UVector((uint64_t)v12, (uint64_t)uprv_free, 0, a4);
          if (*a4 > 0)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
            return 0;
          }
          *(_QWORD *)(a1 + 16) = v13;
        }
        result = (uint64_t)uprv_malloc(0x10uLL);
        if (!result)
          goto LABEL_25;
        *(_QWORD *)result = v11;
        *(_DWORD *)(result + 8) = v7;
        *(_DWORD *)(result + 12) = 0;
        icu::UVector::adoptElement(*(icu::UVector **)(a1 + 16), (void *)result, (UErrorCode *)a4);
        if (*a4 > 0)
          return 0;
        if (*(_DWORD *)(a1 + 24) < v7)
          *(_DWORD *)(a1 + 24) = v7;
      }
    }
    while (v9 != ++v10);
  }
  return 1;
}

uint64_t sub_18BD945E4(uint64_t a1, char **a2, UErrorCode *a3)
{
  *(_QWORD *)a1 = off_1E22673F0;
  icu::Locale::Locale((icu::Locale *)(a1 + 8), (uint64_t)a2);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  icu::UnicodeString::UnicodeString(a1 + 264, 0);
  icu::UnicodeString::UnicodeString(a1 + 336, 0);
  *(_QWORD *)(a1 + 400) = 0;
  icu::ZNStringPool::ZNStringPool((icu::ZNStringPool *)(a1 + 408), a3);
  icu::TextTrieMap::TextTrieMap(a1 + 424, 1, (void (*)(void *))j__uprv_free_3);
  *(_BYTE *)(a1 + 480) = 0;
  sub_18BD94680((_QWORD *)a1, a2, (const icu::Locale *)a3);
  return a1;
}

_QWORD *sub_18BD94680(_QWORD *result, char **a2, const icu::Locale *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  const UChar *StringByKeyWithFallback;
  uint64_t v10;
  uint64_t v11;
  const UChar *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  void *v16;
  void *v17;
  int v18;
  char *Country;
  int v20;
  icu::ZoneMeta *Default;
  const icu::TimeZone *v22;
  const UChar *CanonicalCLDRID;
  void *v24;
  const UChar *v25;
  _QWORD v26[2];
  int v27;
  const __int16 *v28;
  const __int16 *v29;
  void *v30[8];
  _DWORD v31[16];
  _DWORD v32[18];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v5 = (uint64_t)result;
    result = icu::TimeZoneNames::createInstance((icu::TimeZoneNames *)a2, a3, (UErrorCode *)a3);
    *(_QWORD *)(v5 + 232) = result;
    if (*(int *)a3 <= 0)
    {
      memset(v32, 0, 64);
      v29 = L"{0}";
      icu::UnicodeString::UnicodeString(v32, 1, &v29);
      memset(v31, 0, sizeof(v31));
      v28 = L"{1} ({0})";
      icu::UnicodeString::UnicodeString(v31, 1, &v28);
      v27 = 0;
      v6 = ures_open("icudt74l-zone", a2[5], &v27);
      v7 = ures_getByKeyWithFallback((uint64_t)v6, "zoneStrings", (uint64_t)v6, (UErrorCode *)&v27);
      v8 = (_QWORD *)v7;
      if (v27 <= 0)
      {
        StringByKeyWithFallback = ures_getStringByKeyWithFallback(v7, "regionFormat", 0, (UErrorCode *)&v27);
        if (v27 <= 0)
        {
          v10 = (uint64_t)StringByKeyWithFallback;
          if (u_strlen(StringByKeyWithFallback) >= 1)
          {
            icu::UnicodeString::unBogus((uint64_t)v32);
            if (SLOWORD(v32[2]) >= 0)
              v11 = LOWORD(v32[2]) >> 5;
            else
              v11 = v32[3];
            icu::UnicodeString::doReplace((uint64_t)v32, 0, v11, v10, 0, 0xFFFFFFFFLL);
          }
        }
        v27 = 0;
        v12 = ures_getStringByKeyWithFallback((uint64_t)v8, "fallbackFormat", 0, (UErrorCode *)&v27);
        if (v27 <= 0)
        {
          v13 = (uint64_t)v12;
          if (u_strlen(v12) >= 1)
          {
            icu::UnicodeString::unBogus((uint64_t)v31);
            if (SLOWORD(v31[2]) >= 0)
              v14 = LOWORD(v31[2]) >> 5;
            else
              v14 = v31[3];
            icu::UnicodeString::doReplace((uint64_t)v31, 0, v14, v13, 0, 0xFFFFFFFFLL);
          }
        }
      }
      ures_close(v8);
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(v5 + 256), (const icu::UnicodeString *)v32, 1, 1, 0, (UErrorCode *)a3);
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(v5 + 328), (const icu::UnicodeString *)v31, 2, 2, 0, (UErrorCode *)a3);
      if (*(int *)a3 < 1
        && (*(_QWORD *)(v5 + 400) = icu::LocaleDisplayNames::createInstance((uint64_t)a2, 0),
            *(_QWORD *)(v5 + 240) = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, (int *)a3),
            *(int *)a3 < 1)
        && (v15 = uhash_open((uint64_t)sub_18BD94B68, (uint64_t)sub_18BD94C60, 0, (int *)a3),
            *(_QWORD *)(v5 + 248) = v15,
            *(int *)a3 < 1))
      {
        uhash_setKeyDeleter((uint64_t)v15, (uint64_t)uprv_free);
        v18 = strlen((const char *)(v5 + 34));
        if (v18)
        {
          Country = (char *)(v5 + 481);
          if (v18 > 3)
            *Country = 0;
          else
            Country = strcpy(Country, (const char *)(v5 + 34));
        }
        else
        {
          memset(&v30[1], 0, 56);
          v30[0] = (char *)&v30[1] + 5;
          LODWORD(v30[1]) = 40;
          v26[0] = 0;
          v26[1] = 0;
          icu::CharStringByteSink::CharStringByteSink(v26, (uint64_t)v30);
          ulocimp_addLikelySubtags(*(_QWORD *)(v5 + 48), v26, a3);
          icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v26);
          Country = (char *)uloc_getCountry((uint64_t)v30[0], (char *)(v5 + 481), 4, (int *)a3);
          v20 = *(_DWORD *)a3;
          if (v20 <= 0)
            *(_BYTE *)(v5 + (int)Country + 481) = 0;
          else
            sub_18BD94B00(v5);
          v16 = (void *)BYTE4(v30[1]);
          if (BYTE4(v30[1]))
            uprv_free(v30[0]);
          if (v20 > 0)
            goto LABEL_20;
        }
        Default = (icu::ZoneMeta *)icu::TimeZone::createDefault((icu::TimeZone *)Country);
        CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(Default, v22);
        if (CanonicalCLDRID)
        {
          v25 = CanonicalCLDRID;
          icu::UnicodeString::UnicodeString(v30, 1, &v25);
          sub_18BD94CBC(v5, (uint64_t)v30);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v30);
        }
        (*(void (**)(icu::ZoneMeta *))(*(_QWORD *)Default + 8))(Default);
      }
      else
      {
        sub_18BD94B00(v5);
      }
LABEL_20:
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v31);
      return icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v32);
    }
  }
  return result;
}

_QWORD *sub_18BD94AA4(_QWORD *a1)
{
  icu::Locale *v2;

  *a1 = off_1E22673F0;
  v2 = (icu::Locale *)(a1 + 1);
  sub_18BD94B00((uint64_t)a1);
  icu::TextTrieMap::~TextTrieMap((icu::TextTrieMap *)(a1 + 53));
  icu::ZNStringPool::~ZNStringPool((icu::ZNStringPool *)(a1 + 51));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 41));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 32));
  icu::Locale::~Locale(v2);
  return a1;
}

void sub_18BD94B00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 400);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 232);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  uhash_close(*(void ***)(a1 + 240));
  uhash_close(*(void ***)(a1 + 248));
}

void sub_18BD94B54(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_18BD94AA4(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BD94B68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t *v7;
  void *v8;
  uint64_t v10;
  __int16 v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v12, 0, sizeof(v12));
  icu::UnicodeString::UnicodeString((uint64_t)v12, *(_QWORD *)a1);
  v11 = 38;
  v2 = icu::UnicodeString::doAppend((uint64_t)v12, (uint64_t)&v11, 0, 1);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = icu::UnicodeString::doAppend(v2, v3, 0, 0xFFFFFFFFLL);
  v11 = 35;
  v5 = icu::UnicodeString::doAppend(v4, (uint64_t)&v11, 0, 1);
  if (*(_BYTE *)(a1 + 16))
    v6 = 76;
  else
    v6 = 83;
  v11 = v6;
  icu::UnicodeString::doAppend(v5, (uint64_t)&v11, 0, 1);
  v10 = v3;
  v7 = icu::UnicodeString::doHashCode(&v10, (icu::UnicodeString *)v12);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v12);
  return v7;
}

BOOL sub_18BD94C60(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  result = 0;
  if (a1 && a2)
    return *(_QWORD *)a1 == *(_QWORD *)a2
        && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
        && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  return result;
}

void *sub_18BD94CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  UChar **v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t i;
  BOOL v14;
  void *v15;
  void *v16;
  int v18;
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void (**v24)(icu::UnicodeString *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  sub_18BD9570C(a1, a2);
  v18 = 0;
  v25 = 0u;
  v26 = 0u;
  v28 = 0;
  v27 = 0u;
  v23 = 0;
  v24 = off_1E2256B38;
  LOWORD(v25) = 2;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = off_1E2256B38;
  LOWORD(v20) = 2;
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 232) + 48))(*(_QWORD *)(a1 + 232), a2, &v18);
  v5 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v4 + 56))(v4, &v18);
  if (v5)
    v6 = v18 <= 0;
  else
    v6 = 0;
  if (v6)
  {
    v7 = (UChar **)v5;
    do
    {
      (*(void (**)(_QWORD, UChar **, uint64_t, void (***)(icu::UnicodeString *__hidden)))(**(_QWORD **)(a1 + 232) + 64))(*(_QWORD *)(a1 + 232), v7, a1 + 481, &v24);
      v8 = *(unsigned __int16 *)(a2 + 8);
      if ((v8 & 1) != 0)
      {
        if ((v25 & 1) == 0)
          goto LABEL_19;
      }
      else
      {
        v9 = (__int16)v8;
        v10 = v8 >> 5;
        if (v9 >= 0)
          v11 = v10;
        else
          v11 = *(_DWORD *)(a2 + 12);
        if ((v25 & 0x8000u) == 0)
          v12 = (unsigned __int16)v25 >> 5;
        else
          v12 = DWORD1(v25);
        if ((v25 & 1) != 0
          || v11 != v12
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v24, v11))
        {
LABEL_19:
          for (i = 0; i != 2; ++i)
          {
            (*(void (**)(_QWORD, UChar **, _QWORD, void (***)(icu::UnicodeString *__hidden)))(**(_QWORD **)(a1 + 232) + 72))(*(_QWORD *)(a1 + 232), v7, dword_18BE2B9D8[i], &v19);
            if ((unsigned __int16)v20 >= 0x20u)
              sub_18BD95B70(a1, a2, v7, i == 0, (const icu::UnicodeString *)&v19);
          }
        }
      }
      v7 = (UChar **)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v4 + 56))(v4, &v18);
      if (v7)
        v14 = v18 < 1;
      else
        v14 = 0;
    }
    while (v14);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v19);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v24);
}

icu::UnicodeString *sub_18BD94EC8(uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *this, double a5)
{
  const icu::TimeZone *v10;
  const UChar *v11;
  void *v12;
  const icu::TimeZone *v13;
  const UChar *CanonicalCLDRID;
  void *v15;
  const UChar *v17;
  const UChar *v18;
  _BYTE v19[64];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::setToBogus(this);
  if (a3 == 4 || a3 == 2)
  {
    sub_18BD950CC(a1, a2, a3, this, a5);
    if (*((unsigned __int16 *)this + 4) <= 0x1Fu)
    {
      CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v13);
      if (CanonicalCLDRID)
      {
        v17 = CanonicalCLDRID;
        icu::UnicodeString::UnicodeString(v19, 1, &v17);
        sub_18BD95014(a1, (uint64_t)v19, this);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v19);
      }
    }
  }
  else if (a3 == 1)
  {
    v11 = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
    if (v11)
    {
      v18 = v11;
      icu::UnicodeString::UnicodeString(v19, 1, &v18);
      sub_18BD95014(a1, (uint64_t)v19, this);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v19);
    }
  }
  return this;
}

icu::UnicodeString *sub_18BD95014(uint64_t a1, uint64_t a2, icu::UnicodeString *this)
{
  UChar *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  if (*(unsigned __int16 *)(a2 + 8) > 0x1Fu
    && (umtx_lock((icu::UMutex *)&unk_1EE00A100),
        v6 = sub_18BD9570C(a1, a2),
        umtx_unlock((std::mutex **)&unk_1EE00A100),
        v6))
  {
    v7 = u_strlen(v6);
    icu::UnicodeString::unBogus((uint64_t)this);
    v8 = *((unsigned __int16 *)this + 4);
    v9 = (__int16)v8;
    v10 = v8 >> 5;
    if (v9 >= 0)
      v11 = v10;
    else
      v11 = *((unsigned int *)this + 3);
    icu::UnicodeString::doReplace((uint64_t)this, 0, v11, (uint64_t)v6, 0, v7);
  }
  else
  {
    icu::UnicodeString::setToBogus(this);
  }
  return this;
}

icu::UnicodeString *sub_18BD950CC(uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *this, double a5)
{
  const icu::TimeZone *v10;
  const UChar *CanonicalCLDRID;
  uint64_t v12;
  void *v13;
  void *v14;
  const void *v15;
  const void *v16;
  icu::TimeZoneRule *v17;
  _BOOL4 v18;
  icu::TimeZoneRule *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  const icu::UnicodeString *v24;
  void *TimeZone;
  void *v26;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  const UChar *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[256];
  _WORD v58[32];
  _BYTE v59[64];
  _BYTE v60[72];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::setToBogus(this);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(a2, v10);
  if (CanonicalCLDRID)
  {
    memset(v60, 0, 64);
    v32 = CanonicalCLDRID;
    icu::UnicodeString::UnicodeString(v60, 1, &v32);
    if (a3 == 2)
      v12 = 1;
    else
      v12 = 8;
    (*(void (**)(_QWORD, _BYTE *, uint64_t, icu::UnicodeString *))(**(_QWORD **)(a1 + 232) + 80))(*(_QWORD *)(a1 + 232), v60, v12, this);
    v13 = (void *)*((unsigned __int16 *)this + 4);
    if (v13 > 0x1F)
      goto LABEL_48;
    memset(v59, 0, sizeof(v59));
    memset(v58, 0, sizeof(v58));
    icu::UnicodeString::UnicodeString(v58, v59, 0, 32);
    (*(void (**)(_QWORD, _BYTE *, _WORD *, double))(**(_QWORD **)(a1 + 232) + 56))(*(_QWORD *)(a1 + 232), v60, v58, a5);
    v14 = (void *)v58[4];
    if (v58[4] >= 0x20u)
    {
      v31 = 0;
      v30 = 0;
      memset(v57, 0, sizeof(v57));
      (*(void (**)(icu::ZoneMeta *, _QWORD, uint64_t *, int *, char *, double))(*(_QWORD *)a2 + 48))(a2, 0, &v31, &v30, (char *)&v31 + 4, a5);
      v14 = (void *)HIDWORD(v31);
      if (SHIDWORD(v31) <= 0)
      {
        if (!v30)
        {
          v15 = (const void *)(*(uint64_t (**)(icu::ZoneMeta *))(*(_QWORD *)a2 + 96))(a2);
          v16 = v15;
          if (v15
          {
            v37 = 0u;
            v38 = 0u;
            icu::TimeZoneTransition::TimeZoneTransition(&v37);
            if ((*(unsigned int (**)(const void *, uint64_t, __int128 *, double))(*(_QWORD *)v16 + 120))(v16, 1, &v37, a5)&& a5 - icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)&v37) < 1.58976e10&& (v17 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)&v37), icu::TimeZoneRule::getDSTSavings(v17)))
            {
              v18 = 0;
            }
            else
            {
              v53 = 0u;
              v54 = 0u;
              icu::TimeZoneTransition::TimeZoneTransition(&v53);
              if ((*(unsigned int (**)(const void *, _QWORD, __int128 *, double))(*(_QWORD *)v16 + 112))(v16, 0, &v53, a5)&& icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)&v53) - a5 < 1.58976e10)
              {
                v19 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)&v53);
                v18 = icu::TimeZoneRule::getDSTSavings(v19) == 0;
              }
              else
              {
                v18 = 1;
              }
              icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)&v53);
            }
            icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)&v37);
          }
          else
          {
            (*(void (**)(const void *, _QWORD, uint64_t *, int *, char *, double))(*(_QWORD *)v16 + 48))(v16, 0, &v31, &v30, (char *)&v31 + 4, a5 + -1.58976e10);
            v18 = 0;
            if (!v30)
            {
              (*(void (**)(const void *, _QWORD, uint64_t *, int *, char *, double))(*(_QWORD *)v16 + 48))(v16, 0, &v31, &v30, (char *)&v31 + 4, a5 + 1.58976e10);
              v18 = v30 == 0;
            }
            if (SHIDWORD(v31) >= 1)
            {
              (*(void (**)(const void *))(*(_QWORD *)v16 + 8))(v16);
              goto LABEL_47;
            }
          }
          (*(void (**)(const void *))(*(_QWORD *)v16 + 8))(v16);
          if (v18)
          {
            v55 = 0u;
            v56 = 0u;
            if (a3 == 2)
              v20 = 2;
            else
              v20 = 16;
            v53 = 0uLL;
            v54 = 0uLL;
            icu::UnicodeString::UnicodeString(&v53, v57, 0, 128);
            (*(void (**)(_QWORD, _BYTE *, uint64_t, __int128 *, double))(**(_QWORD **)(a1 + 232) + 96))(*(_QWORD *)(a1 + 232), v60, v20, &v53, a5);
            v21 = (void *)WORD4(v53);
            if (WORD4(v53) >= 0x20u)
            {
              icu::UnicodeString::copyFrom((UChar **)this, (UChar **)&v53, 0);
              v51 = 0u;
              v52 = 0u;
              v49 = 0u;
              v50 = 0u;
              v47 = 0u;
              v48 = 0u;
              v45 = 0u;
              v46 = 0u;
              v43 = 0u;
              v44 = 0u;
              v41 = 0u;
              v42 = 0u;
              v39 = 0u;
              v40 = 0u;
              v37 = 0u;
              v38 = 0u;
              v35 = 0u;
              v36 = 0u;
              v33 = 0u;
              v34 = 0u;
              icu::UnicodeString::UnicodeString(&v33, &v37, 0, 128);
              (*(void (**)(_QWORD, _WORD *, uint64_t, __int128 *))(**(_QWORD **)(a1 + 232) + 72))(*(_QWORD *)(a1 + 232), v58, v12, &v33);
              if (!sub_18BD95A24((uint64_t)&v53, (uint64_t)&v33, 0))
                icu::UnicodeString::setToBogus(this);
              icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v33);
            }
            icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v53);
          }
        }
        v14 = (void *)*((unsigned __int16 *)this + 4);
        if (v14 <= 0x1F)
        {
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          icu::UnicodeString::UnicodeString(&v37, v57, 0, 128);
          (*(void (**)(_QWORD, _WORD *, uint64_t, __int128 *))(**(_QWORD **)(a1 + 232) + 72))(*(_QWORD *)(a1 + 232), v58, v12, &v37);
          v23 = (void *)WORD4(v37);
          if (WORD4(v37) < 0x20u)
          {
LABEL_46:
            icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v37);
            goto LABEL_47;
          }
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          icu::UnicodeString::UnicodeString(&v33, &v53, 0, 32);
          (*(void (**)(_QWORD, _WORD *, uint64_t, __int128 *))(**(_QWORD **)(a1 + 232) + 64))(*(_QWORD *)(a1 + 232), v58, a1 + 481, &v33);
          if (WORD4(v33) >= 0x20u && sub_18BC59708((uint64_t)&v33, (uint64_t)v60))
          {
            TimeZone = icu::TimeZone::createTimeZone((UChar **)&v33, v24);
            v28 = 0;
            v29 = 0;
            (*(void (**)(void *, uint64_t, int *, int *, char *, double))(*(_QWORD *)TimeZone + 48))(TimeZone, 1, &v29, &v28, (char *)&v31 + 4, (double)(int)v31 + a5 + (double)v30);
            (*(void (**)(void *))(*(_QWORD *)TimeZone + 8))(TimeZone);
            v26 = (void *)HIDWORD(v31);
            if (SHIDWORD(v31) > 0)
            {
LABEL_45:
              icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v33);
              goto LABEL_46;
            }
            if ((_DWORD)v31 != v29 || v30 != v28)
            {
              sub_18BD95A88(a1, (uint64_t)v60, (uint64_t)v58, a3 == 2, (unsigned __int16 *)&v37, this);
              goto LABEL_45;
            }
          }
          icu::UnicodeString::copyFrom((UChar **)this, (UChar **)&v37, 0);
          goto LABEL_45;
        }
      }
    }
LABEL_47:
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v58);
LABEL_48:
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v60);
  }
  return this;
}

UChar *sub_18BD9570C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int v4;
  UChar *v5;
  void *v8;
  signed __int8 *v9;
  const icu::UnicodeString *v10;
  uint64_t v11;
  void *v12;
  const icu::UnicodeString *v13;
  unint64_t v14;
  uint64_t TimeZoneID;
  _QWORD *v16;
  void *v17;
  char v19[7];
  char v20;
  UChar *v21;
  UErrorCode v22;
  void (**v23)(icu::UnicodeString *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void (**v28)(icu::UnicodeString *__hidden);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void (**v33)(icu::UnicodeString *__hidden);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[16];
  __int16 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int16 *)(a2 + 8);
  v3 = (__int16)v2;
  v4 = v2 >> 5;
  if (v3 < 0)
    v4 = *(_DWORD *)(a2 + 12);
  if (v4 > 128)
    return 0;
  v22 = U_ZERO_ERROR;
  v39 = 0;
  memset(v38, 0, sizeof(v38));
  v21 = (UChar *)v38;
  *((_WORD *)v38 + (int)icu::UnicodeString::extract(a2, &v21, 129, (int *)&v22)) = 0;
  v8 = (void *)uhash_get(*(_QWORD *)(a1 + 240), (uint64_t)v38);
  if (!v8)
  {
    v34 = 0u;
    v37 = 0;
    v36 = 0u;
    v35 = 0u;
    v32 = 0;
    v33 = off_1E2256B38;
    LOWORD(v34) = 2;
    v29 = 0u;
    v31 = 0u;
    v30 = 0u;
    v28 = off_1E2256B38;
    LOWORD(v29) = 2;
    v20 = 0;
    icu::ZoneMeta::getCanonicalCountry((int32_t *)a2, (const icu::UnicodeString *)&v28, (UErrorCode *)&v20, v9);
    v5 = 0;
    if ((unsigned __int16)v29 >= 0x20u)
    {
      if (v20)
      {
        *(_DWORD *)v19 = 0;
        if ((v29 & 0x8000u) == 0)
          v11 = (unsigned __int16)v29 >> 5;
        else
          v11 = DWORD1(v29);
        v19[(int)icu::UnicodeString::extract((uint64_t)&v28, 0, v11, v19, 4)] = 0;
        v24 = 0u;
        v27 = 0;
        v26 = 0u;
        v25 = 0u;
        v23 = off_1E2256B38;
        LOWORD(v24) = 2;
        (*(void (**)(_QWORD, char *))(**(_QWORD **)(a1 + 400) + 88))(*(_QWORD *)(a1 + 400), v19);
      }
      else
      {
        v24 = 0u;
        v27 = 0;
        v26 = 0u;
        v25 = 0u;
        v23 = off_1E2256B38;
        LOWORD(v24) = 2;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 232) + 88))(*(_QWORD *)(a1 + 232), a2);
      }
      icu::SimpleFormatter::format((icu::SimpleFormatter *)(a1 + 256), (const icu::UnicodeString *)&v23, (icu::UnicodeString *)&v33, &v22);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v23);
      v14 = v22;
      if (v22 > U_ZERO_ERROR)
        goto LABEL_26;
      if ((unsigned __int16)v34 <= 0x1Fu)
      {
        TimeZoneID = icu::ZoneMeta::findTimeZoneID((icu::ZoneMeta *)a2, v13);
LABEL_25:
        uhash_put(*(_QWORD *)(a1 + 240), TimeZoneID, (uint64_t)&unk_18BE2B9D4, (int *)&v22);
LABEL_26:
        v5 = 0;
        goto LABEL_27;
      }
      v5 = icu::ZNStringPool::get((icu::ZNStringPool *)(a1 + 408), (const icu::UnicodeString *)&v33, &v22);
    }
    v14 = v22;
    if (v22 > U_ZERO_ERROR)
    {
LABEL_27:
      icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v28);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v33);
      return v5;
    }
    TimeZoneID = icu::ZoneMeta::findTimeZoneID((icu::ZoneMeta *)a2, v10);
    if (v5)
    {
      uhash_put(*(_QWORD *)(a1 + 240), TimeZoneID, (uint64_t)v5, (int *)&v22);
      v14 = v22;
      if (v22 <= U_ZERO_ERROR)
      {
        v16 = uprv_malloc(0x10uLL);
        if (v16)
        {
          *(_DWORD *)v16 = 1;
          v16[1] = TimeZoneID;
          icu::TextTrieMap::put(v5, &v22, a1 + 424, v16, (uint64_t *)1);
        }
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v8 == &unk_18BE2B9D4)
    return 0;
  else
    return (UChar *)v8;
}

uint64_t sub_18BD95A24(uint64_t a1, uint64_t a2, __int16 a3)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v4 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
    v5 = *(_DWORD *)(a1 + 12);
  else
    v5 = v4 >> 5;
  v6 = *(unsigned __int16 *)(a2 + 8);
  if ((v6 & 1) != 0)
    return (v4 & 1) == 0;
  if ((v6 & 0x8000u) == 0)
    v7 = v6 >> 5;
  else
    v7 = *(_DWORD *)(a2 + 12);
  if ((v6 & 2) != 0)
    v8 = a2 + 10;
  else
    v8 = *(_QWORD *)(a2 + 24);
  return icu::UnicodeString::doCaseCompare(a1, 0, v5, v8, v7 & (v7 >> 31), v7 & ~(v7 >> 31), a3);
}

icu::UnicodeString *sub_18BD95A88(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned __int16 *a5, icu::UnicodeString *this)
{
  const UChar *v12;
  const UChar *v14;

  icu::UnicodeString::setToBogus(this);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u && *(unsigned __int16 *)(a3 + 8) >= 0x20u && a5[4] >= 0x20u)
  {
    umtx_lock((icu::UMutex *)&unk_1EE00A100);
    v12 = (const UChar *)sub_18BD95B70(a1, a2, (UChar **)a3, a4, (const icu::UnicodeString *)a5);
    umtx_unlock((std::mutex **)&unk_1EE00A100);
    if (v12)
    {
      v14 = v12;
      icu::UnicodeString::setTo(this, 1, &v14, -1);
    }
    else
    {
      icu::UnicodeString::setToBogus(this);
    }
  }
  return this;
}

void *sub_18BD95B70(uint64_t a1, uint64_t a2, UChar **a3, int a4, const icu::UnicodeString *a5)
{
  const icu::UnicodeString *v10;
  signed __int8 *v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void (*v19)(void);
  void *v20;
  unint64_t v21;
  void *v22;
  void *v23;
  _OWORD *v25;
  void *v26;
  _QWORD *v27;
  int v28;
  uint64_t *v29;
  UErrorCode v30;
  __int128 v31;
  uint64_t v32;
  void (**v33)(icu::UnicodeString *__hidden);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void (**v38)(icu::UnicodeString *__hidden);
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  UChar *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v31 = icu::ZoneMeta::findTimeZoneID((icu::ZoneMeta *)a2, (const icu::UnicodeString *)a2);
  *((_QWORD *)&v31 + 1) = icu::ZoneMeta::findMetaZoneID(a3, v10);
  v32 = a4;
  v12 = (void *)uhash_get(*(_QWORD *)(a1 + 248), (uint64_t)&v31);
  if (v12)
    return v12;
  v44 = 0u;
  v47 = 0;
  v46 = 0u;
  v45 = 0u;
  LOWORD(v44) = 2;
  v39 = 0u;
  v40 = 0u;
  v42 = 0;
  v43 = (UChar *)off_1E2256B38;
  v41 = 0u;
  v38 = off_1E2256B38;
  LOWORD(v39) = 2;
  icu::ZoneMeta::getCanonicalCountry((int32_t *)a2, (const icu::UnicodeString *)&v38, 0, v11);
  if ((unsigned __int16)v39 < 0x20u)
  {
    (*(void (**)(_QWORD, uint64_t, UChar **))(**(_QWORD **)(a1 + 232) + 88))(*(_QWORD *)(a1 + 232), a2, &v43);
    if ((unsigned __int16)v44 <= 0x1Fu)
      icu::UnicodeString::copyFrom(&v43, (UChar **)a2, 0);
    goto LABEL_22;
  }
  v30 = U_ZERO_ERROR;
  if ((v39 & 0x8000u) == 0)
    v13 = (unsigned __int16)v39 >> 5;
  else
    v13 = DWORD1(v39);
  *((_BYTE *)&v30 + (int)icu::UnicodeString::extract((uint64_t)&v38, 0, v13, (char *)&v30, 4)) = 0;
  v34 = 0u;
  v35 = 0u;
  v37 = 0;
  v36 = 0u;
  v33 = off_1E2256B38;
  LOWORD(v34) = 2;
  (*(void (**)(_QWORD, UChar **, UErrorCode *, void (***)(icu::UnicodeString *__hidden)))(**(_QWORD **)(a1 + 232) + 64))(*(_QWORD *)(a1 + 232), a3, &v30, &v33);
  v14 = *(unsigned __int16 *)(a2 + 8);
  if ((v14 & 1) == 0)
  {
    v15 = (__int16)v14;
    v16 = v14 >> 5;
    if (v15 >= 0)
      v17 = v16;
    else
      v17 = *(_DWORD *)(a2 + 12);
    if ((v34 & 0x8000u) == 0)
      v18 = (unsigned __int16)v34 >> 5;
    else
      v18 = DWORD1(v34);
    if ((v34 & 1) == 0
      && v17 == v18
      && icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v33, v17))
    {
      goto LABEL_16;
    }
LABEL_20:
    v19 = *(void (**)(void))(**(_QWORD **)(a1 + 232) + 88);
    goto LABEL_21;
  }
  if ((v34 & 1) == 0)
    goto LABEL_20;
LABEL_16:
  v19 = *(void (**)(void))(**(_QWORD **)(a1 + 400) + 88);
LABEL_21:
  v19();
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v33);
LABEL_22:
  v30 = U_ZERO_ERROR;
  v34 = 0u;
  v35 = 0u;
  v37 = 0;
  v36 = 0u;
  v33 = off_1E2256B38;
  LOWORD(v34) = 2;
  icu::SimpleFormatter::format((icu::SimpleFormatter *)(a1 + 328), (const icu::UnicodeString *)&v43, a5, (icu::UnicodeString *)&v33, &v30);
  v12 = 0;
  v21 = v30;
  if (v30 <= U_ZERO_ERROR)
  {
    v12 = icu::ZNStringPool::get((icu::ZNStringPool *)(a1 + 408), (const icu::UnicodeString *)&v33, &v30);
    v21 = v30;
    if (v30 <= U_ZERO_ERROR)
    {
      v25 = uprv_malloc(0x18uLL);
      if (v25)
      {
        v26 = v25;
        *v25 = v31;
        *((_BYTE *)v25 + 16) = v32;
        uhash_put(*(_QWORD *)(a1 + 248), (uint64_t)v25, (uint64_t)v12, (int *)&v30);
        if (v30 < U_ILLEGAL_ARGUMENT_ERROR)
        {
          v27 = uprv_malloc(0x10uLL);
          if (v27)
          {
            if (a4)
              v28 = 2;
            else
              v28 = 4;
            *(_DWORD *)v27 = v28;
            v29 = (uint64_t *)v31;
            v27[1] = v31;
            icu::TextTrieMap::put(v12, &v30, a1 + 424, v27, v29);
          }
        }
        else
        {
          uprv_free(v26);
        }
      }
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v33);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v38);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v43);
  return v12;
}

uint64_t sub_18BD95EC8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UChar **this, _DWORD *a6, UErrorCode *a7)
{
  UChar **v9;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  icu::TimeZoneNames::MatchInfoCollection *v17;
  icu::UVector **v18;
  uint64_t *v19;
  void *v20;
  signed int v21;
  uint64_t v22;
  uint64_t MatchLengthAt;
  int NameTypeAt;
  icu::UVector **v25;
  icu::UVector *v26;
  signed int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  UChar **v37;
  uint64_t v38;
  void (**v39)(icu::UnicodeString *__hidden);
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  UChar *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v9 = this;
  v49 = *MEMORY[0x1E0C80C00];
  *a6 = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
  v14 = 0;
  if (*(int *)a7 <= 0)
  {
    if (a4)
    {
      v15 = ((int)(a4 << 30) >> 31) & 3;
      if ((a4 & 4) != 0)
        v16 = v15 | 0x18;
      else
        v16 = v15;
      v17 = (icu::TimeZoneNames::MatchInfoCollection *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, UErrorCode *))(**(_QWORD **)(a1 + 232) + 120))(*(_QWORD *)(a1 + 232), a2, a3, v16, a7);
      if (*(int *)a7 > 0)
        return 0;
      v18 = (icu::UVector **)v17;
      v45 = 0u;
      v48 = 0;
      v47 = 0u;
      v46 = 0u;
      v44 = (UChar *)off_1E2256B38;
      LOWORD(v45) = 2;
      if (v17)
      {
        v37 = v9;
        v40 = 0uLL;
        v43 = 0;
        v42 = 0uLL;
        v41 = 0uLL;
        v39 = off_1E2256B38;
        LOWORD(v40) = 2;
        if ((int)icu::TimeZoneNames::MatchInfoCollection::size(v17) >= 1)
        {
          v21 = 0;
          v22 = 0;
          v38 = 0;
          while (1)
          {
            MatchLengthAt = icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(v18, v21);
            if ((int)MatchLengthAt <= (int)v22)
            {
              v14 = v22;
            }
            else
            {
              v14 = MatchLengthAt;
              if (!icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt(v18, v21, (icu::UnicodeString *)&v44)&& icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt(v18, v21, (icu::UnicodeString *)&v39))
              {
                (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden), uint64_t, UChar **))(**(_QWORD **)(a1 + 232) + 64))(*(_QWORD *)(a1 + 232), &v39, a1 + 481, &v44);
              }
              NameTypeAt = icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(v18, v21);
              if (*(int *)a7 > 0)
                goto LABEL_46;
              HIDWORD(v38) = 1;
              if (NameTypeAt > 15)
              {
                if (NameTypeAt == 16)
                {
LABEL_27:
                  LODWORD(v38) = 1;
                  goto LABEL_28;
                }
                if (NameTypeAt == 32)
                {
LABEL_26:
                  HIDWORD(v38) = 2;
                  goto LABEL_28;
                }
              }
              else
              {
                if (NameTypeAt == 2)
                  goto LABEL_27;
                if (NameTypeAt == 4)
                  goto LABEL_26;
              }
              HIDWORD(v38) = 0;
            }
LABEL_28:
            ++v21;
            v22 = v14;
            if (v21 >= (int)icu::TimeZoneNames::MatchInfoCollection::size((icu::TimeZoneNames::MatchInfoCollection *)v18))
              goto LABEL_46;
          }
        }
        v38 = 0;
        v14 = 0;
LABEL_46:
        (*((void (**)(icu::UVector **))*v18 + 1))(v18);
        v31 = (void *)*(unsigned int *)a7;
        if ((int)v31 > 0)
        {
          v14 = 0;
LABEL_60:
          icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v39);
LABEL_61:
          icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v44);
          return v14;
        }
        v32 = *(unsigned __int16 *)(a2 + 8);
        v33 = (__int16)v32;
        v34 = v32 >> 5;
        if (v33 < 0)
          v34 = *(_DWORD *)(a2 + 12);
        if ((_DWORD)v14 == v34 - (_DWORD)a3 && (_DWORD)v38 == 0)
        {
          icu::UnicodeString::copyFrom(v37, &v44, 0);
          v31 = (void *)HIDWORD(v38);
          *a6 = HIDWORD(v38);
          goto LABEL_60;
        }
        icu::UnicodeString::~UnicodeString((void *)v38, (icu::UnicodeString *)&v39);
        v9 = v37;
        LODWORD(v18) = HIDWORD(v38);
      }
      else
      {
        v14 = 0;
      }
    }
    else
    {
      v14 = 0;
      LODWORD(v18) = 0;
      v45 = 0u;
      v48 = 0;
      v47 = 0u;
      v46 = 0u;
      v44 = (UChar *)off_1E2256B38;
      LOWORD(v45) = 2;
    }
    v19 = sub_18BD962BC(a1, a2, a3, a4, a7);
    v20 = (void *)*(unsigned int *)a7;
    if ((int)v20 <= 0)
    {
      v25 = (icu::UVector **)v19;
      if (v19)
      {
        v26 = (icu::UVector *)*v19;
        if (*v25)
        {
          v27 = 0;
          while (v27 < *((_DWORD *)v26 + 2))
          {
            v28 = icu::UVector::elementAt(v26, v27);
            if (v28)
              v29 = *(_DWORD *)(v28 + 8);
            else
              v29 = -1;
            if (v29 >= (int)v14)
            {
              v30 = icu::UVector::elementAt(*v25, v27);
              if (v30)
                v14 = *(unsigned int *)(v30 + 8);
              else
                v14 = 0xFFFFFFFFLL;
              sub_18BD9438C(v25, v27, (icu::UnicodeString *)&v44);
              LODWORD(v18) = 0;
            }
            ++v27;
            v26 = *v25;
            if (!*v25)
              goto LABEL_56;
          }
          (*(void (**)(icu::UVector *))(*(_QWORD *)v26 + 8))(v26);
        }
LABEL_56:
        icu::UMemory::operator delete(v25);
      }
      if ((int)v14 >= 1)
      {
        *a6 = (_DWORD)v18;
        icu::UnicodeString::copyFrom(v9, &v44, 0);
      }
    }
    else
    {
      v14 = 0;
    }
    goto LABEL_61;
  }
  return v14;
}

uint64_t *sub_18BD962BC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UErrorCode *a5)
{
  unint64_t v9;
  uint64_t *v10;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t TimeZoneIDEnumeration;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t (**v28[2])(_QWORD, _QWORD, _QWORD *, int *);
  uint64_t v29;
  uint64_t v30;

  v29 = 0;
  v30 = 0;
  v28[0] = (uint64_t (**)(_QWORD, _QWORD, _QWORD *, int *))off_1E22673C8;
  v28[1] = (uint64_t (**)(_QWORD, _QWORD, _QWORD *, int *))a4;
  umtx_lock((icu::UMutex *)&unk_1EE00A100);
  icu::TextTrieMap::search((icu::TextTrieMap *)(a1 + 424), a2, a3, v28, a5);
  umtx_unlock((std::mutex **)&unk_1EE00A100);
  v10 = 0;
  if (*(int *)a5 > 0)
    goto LABEL_2;
  v12 = v29;
  v13 = v30;
  v29 = 0;
  LODWORD(v30) = 0;
  if (v12)
  {
    v14 = *(unsigned __int16 *)(a2 + 8);
    v15 = (__int16)v14;
    v16 = v14 >> 5;
    if (v15 < 0)
      v16 = *(_DWORD *)(a2 + 12);
    if ((_DWORD)v13 == v16 - (_DWORD)a3 || (v13 = *(unsigned __int8 *)(a1 + 480), *(_BYTE *)(a1 + 480)))
    {
      v17 = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)8, v9);
      v10 = v17;
      if (v17)
      {
        *v17 = v12;
      }
      else
      {
        *a5 = U_MEMORY_ALLOCATION_ERROR;
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      goto LABEL_2;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  umtx_lock((icu::UMutex *)&unk_1EE00A100);
  if (!*(_BYTE *)(a1 + 480))
  {
    TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(1, 0, 0, a5);
    v19 = TimeZoneIDEnumeration;
    if (*(int *)a5 <= 0)
    {
      v20 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)TimeZoneIDEnumeration + 56))(TimeZoneIDEnumeration, a5);
      if (v20)
        v21 = *a5 <= U_ZERO_ERROR;
      else
        v21 = 0;
      if (v21)
      {
        v22 = v20;
        do
        {
          sub_18BD94CBC(a1, v22);
          v22 = (*(uint64_t (**)(uint64_t, UErrorCode *))(*(_QWORD *)v19 + 56))(v19, a5);
          if (v22)
            v23 = *a5 < U_ILLEGAL_ARGUMENT_ERROR;
          else
            v23 = 0;
        }
        while (v23);
      }
    }
    else if (!TimeZoneIDEnumeration)
    {
      goto LABEL_30;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (*(int *)a5 <= 0)
      *(_BYTE *)(a1 + 480) = 1;
  }
LABEL_30:
  umtx_unlock((std::mutex **)&unk_1EE00A100);
  if (*(int *)a5 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_1EE00A100);
    icu::TextTrieMap::search((icu::TextTrieMap *)(a1 + 424), a2, a3, v28, a5);
    umtx_unlock((std::mutex **)&unk_1EE00A100);
    v25 = v29;
    v26 = (uint64_t *)v30;
    v29 = 0;
    LODWORD(v30) = 0;
    if (!v25 || (int)v26 <= 0)
    {
      v10 = 0;
      v28[0] = (uint64_t (**)(_QWORD, _QWORD, _QWORD *, int *))off_1E22673C8;
      goto LABEL_4;
    }
    v27 = icu::UMemory::operator new(v26, (icu::UMemory *)8, v24);
    v10 = v27;
    if (v27)
    {
      *v27 = v25;
    }
    else
    {
      *a5 = U_MEMORY_ALLOCATION_ERROR;
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  else
  {
    v10 = 0;
  }
LABEL_2:
  v28[0] = (uint64_t (**)(_QWORD, _QWORD, _QWORD *, int *))off_1E22673C8;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
LABEL_4:
  nullsub_17(v28);
  return v10;
}

_QWORD *icu::TimeZoneGenericNames::TimeZoneGenericNames(_QWORD *this)
{
  *this = off_1E2267410;
  this[1] = 0;
  return this;
}

{
  *this = off_1E2267410;
  this[1] = 0;
  return this;
}

void icu::TimeZoneGenericNames::~TimeZoneGenericNames(icu::TimeZoneGenericNames *this)
{
  *(_QWORD *)this = off_1E2267410;
  umtx_lock((icu::UMutex *)&unk_1EE00A150);
  --*(_DWORD *)(*((_QWORD *)this + 1) + 8);
  umtx_unlock((std::mutex **)&unk_1EE00A150);
}

{
  *(_QWORD *)this = off_1E2267410;
  umtx_lock((icu::UMutex *)&unk_1EE00A150);
  --*(_DWORD *)(*((_QWORD *)this + 1) + 8);
  umtx_unlock((std::mutex **)&unk_1EE00A150);
}

{
  *(_QWORD *)this = off_1E2267410;
  umtx_lock((icu::UMutex *)&unk_1EE00A150);
  --*(_DWORD *)(*((_QWORD *)this + 1) + 8);
  umtx_unlock((std::mutex **)&unk_1EE00A150);
  icu::UMemory::operator delete(this);
}

uint64_t *icu::TimeZoneGenericNames::createInstance(icu::TimeZoneGenericNames *this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t *v7;
  int32x2_t *v8;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  void *v14;
  int v15;
  double UTCtime;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  size_t v23;
  char *v24;
  _QWORD *v25;
  int v26;

  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0)
    return 0;
  v6 = icu::UMemory::operator new(v3, (icu::UMemory *)0x10, (unint64_t)a2);
  v7 = v6;
  if (!v6)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v7;
  }
  *v6 = (uint64_t)off_1E2267410;
  v6[1] = 0;
  umtx_lock((icu::UMutex *)&unk_1EE00A150);
  if ((byte_1EE00A0F0 & 1) != 0)
  {
LABEL_6:
    if (*(int *)a2 >= 1)
      goto LABEL_7;
    v10 = (const char *)*((_QWORD *)this + 5);
    v11 = uhash_get(qword_1EE00A0F8, (uint64_t)v10);
    if (v11)
    {
      v14 = (void *)v11;
      ++*(_DWORD *)(v11 + 8);
      *(double *)(v11 + 16) = uprv_getUTCtime();
LABEL_13:
      v15 = dword_1ECD28268++;
      if (v15 > 98)
      {
        v26 = -1;
        UTCtime = uprv_getUTCtime();
        v17 = uhash_nextElement((uint64_t *)qword_1EE00A0F8, &v26);
        if (v17)
        {
          v18 = v17;
          do
          {
            v19 = *(_QWORD *)(v18 + 8);
            if (*(int *)(v19 + 8) <= 0 && UTCtime - *(double *)(v19 + 16) > 180000.0)
              uhash_removeElement(qword_1EE00A0F8, (_DWORD *)v18);
            v18 = uhash_nextElement((uint64_t *)qword_1EE00A0F8, &v26);
          }
          while (v18);
        }
        dword_1ECD28268 = 0;
      }
      umtx_unlock((std::mutex **)&unk_1EE00A150);
      if (v14)
      {
        v7[1] = (uint64_t)v14;
        return v7;
      }
      (*(void (**)(uint64_t *))(*v7 + 8))(v7);
      return 0;
    }
    v20 = icu::UMemory::operator new(v13, (icu::UMemory *)0x1E8, v12);
    if (!v20)
    {
      v14 = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_13;
    }
    v21 = v20;
    sub_18BD945E4((uint64_t)v20, (char **)this, a2);
    if (*(int *)a2 > 0)
    {
      v22 = 0;
LABEL_26:
      v14 = 0;
      goto LABEL_27;
    }
    v23 = strlen(v10);
    v24 = (char *)uprv_malloc(v23 + 1);
    v22 = v24;
    if (v24)
    {
      strcpy(v24, v10);
      if (*(int *)a2 > 0)
        goto LABEL_26;
      v25 = uprv_malloc(0x18uLL);
      if (v25)
      {
        v14 = v25;
        *v25 = v21;
        *((_DWORD *)v25 + 2) = 1;
        *((double *)v25 + 2) = uprv_getUTCtime();
        uhash_put(qword_1EE00A0F8, (uint64_t)v22, (uint64_t)v14, (int *)a2);
        if (*(int *)a2 < 1)
          goto LABEL_13;
LABEL_27:
        (*(void (**)(uint64_t *))(*v21 + 8))(v21);
        if (v22)
          uprv_free(v22);
        if (v14)
        {
          uprv_free(v14);
          v14 = 0;
        }
        goto LABEL_13;
      }
    }
    v14 = 0;
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_27;
  }
  v8 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, (int *)a2);
  qword_1EE00A0F8 = (uint64_t)v8;
  if (*(int *)a2 <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v8, (uint64_t)uprv_free);
    uhash_setValueDeleter(qword_1EE00A0F8, (uint64_t)sub_18BD96978);
    byte_1EE00A0F0 = 1;
    sub_18BDA1768(0x10u, (uint64_t)sub_18BD969AC);
    goto LABEL_6;
  }
LABEL_7:
  umtx_unlock((std::mutex **)&unk_1EE00A150);
  return 0;
}

void sub_18BD96978(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uprv_free(a1);
}

uint64_t sub_18BD969AC()
{
  if (qword_1EE00A0F8)
  {
    uhash_close((void **)qword_1EE00A0F8);
    qword_1EE00A0F8 = 0;
  }
  byte_1EE00A0F0 = 0;
  return 1;
}

BOOL icu::TimeZoneGenericNames::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

uint64_t *icu::TimeZoneGenericNames::clone@<X0>(icu::TimeZoneGenericNames *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x10, a2);
  v5 = v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E2267410;
    v4[1] = 0;
    umtx_lock((icu::UMutex *)&unk_1EE00A150);
    v6 = *((_QWORD *)this + 1);
    ++*(_DWORD *)(v6 + 8);
    v5[1] = v6;
    umtx_unlock((std::mutex **)&unk_1EE00A150);
  }
  return v5;
}

icu::UnicodeString *icu::TimeZoneGenericNames::getDisplayName(uint64_t a1, icu::ZoneMeta *a2, int a3, icu::UnicodeString *a4, double a5)
{
  return sub_18BD94EC8(**(_QWORD **)(a1 + 8), a2, a3, a4, a5);
}

icu::UnicodeString *icu::TimeZoneGenericNames::getGenericLocationName(icu::TimeZoneGenericNames *this, const icu::UnicodeString *a2, icu::UnicodeString *a3)
{
  return sub_18BD95014(**((_QWORD **)this + 1), (uint64_t)a2, a3);
}

uint64_t icu::TimeZoneGenericNames::findBestMatch(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, UChar **a5, _DWORD *a6, UErrorCode *a7)
{
  return sub_18BD95EC8(**(_QWORD **)(a1 + 8), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_18BD96A8C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) ^ 1;
}

_QWORD *sub_18BD96AAC(_QWORD *a1, uint64_t a2, int *a3)
{
  int32x2_t *v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  void *v11;
  int v12;
  double UTCtime;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  size_t v21;
  char *v22;
  _QWORD *v23;
  int v24;

  *a1 = off_1E2267490;
  umtx_lock((icu::UMutex *)&unk_1ECD28288);
  if ((byte_1ECD28270 & 1) == 0)
  {
    v6 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a3);
    qword_1ECD28278 = (uint64_t)v6;
    if (*a3 > 0)
      goto LABEL_16;
    uhash_setKeyDeleter((uint64_t)v6, (uint64_t)uprv_free);
    uhash_setValueDeleter(qword_1ECD28278, (uint64_t)sub_18BD96D4C);
    byte_1ECD28270 = 1;
    sub_18BDA1768(0x11u, (uint64_t)sub_18BD96D80);
  }
  if (*a3 > 0)
    goto LABEL_16;
  v7 = *(const char **)(a2 + 40);
  v8 = uhash_get(qword_1ECD28278, (uint64_t)v7);
  if (!v8)
  {
    v18 = icu::UMemory::operator new(v10, (icu::UMemory *)0x140, v9);
    if (!v18)
    {
      v11 = 0;
      *a3 = 7;
      goto LABEL_7;
    }
    v19 = v18;
    sub_18BD98B78(v18, a2, a3);
    if (*a3 > 0)
    {
      v20 = 0;
LABEL_20:
      v11 = 0;
      goto LABEL_21;
    }
    v21 = strlen(v7);
    v22 = (char *)uprv_malloc(v21 + 1);
    v20 = v22;
    if (v22)
    {
      strcpy(v22, v7);
      if (*a3 > 0)
        goto LABEL_20;
      v23 = uprv_malloc(0x18uLL);
      if (v23)
      {
        v11 = v23;
        *v23 = v19;
        *((_DWORD *)v23 + 2) = 1;
        *((double *)v23 + 2) = uprv_getUTCtime();
        uhash_put(qword_1ECD28278, (uint64_t)v20, (uint64_t)v11, a3);
        if (*a3 < 1)
          goto LABEL_7;
LABEL_21:
        (*(void (**)(uint64_t *))(*v19 + 8))(v19);
        if (v20)
          uprv_free(v20);
        if (v11)
        {
          uprv_free(v11);
          v11 = 0;
        }
        goto LABEL_7;
      }
    }
    v11 = 0;
    *a3 = 7;
    goto LABEL_21;
  }
  v11 = (void *)v8;
  ++*(_DWORD *)(v8 + 8);
  *(double *)(v8 + 16) = uprv_getUTCtime();
LABEL_7:
  v12 = dword_1ECD28280++;
  if (v12 >= 99)
  {
    v24 = -1;
    UTCtime = uprv_getUTCtime();
    v14 = uhash_nextElement((uint64_t *)qword_1ECD28278, &v24);
    if (v14)
    {
      v15 = v14;
      do
      {
        v16 = *(_QWORD *)(v15 + 8);
        if (*(int *)(v16 + 8) <= 0 && UTCtime - *(double *)(v16 + 16) > 180000.0)
          uhash_removeElement(qword_1ECD28278, (_DWORD *)v15);
        v15 = uhash_nextElement((uint64_t *)qword_1ECD28278, &v24);
      }
      while (v15);
    }
    dword_1ECD28280 = 0;
  }
  a1[1] = v11;
LABEL_16:
  umtx_unlock((std::mutex **)&unk_1ECD28288);
  return a1;
}

void sub_18BD96D4C(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uprv_free(a1);
}

uint64_t sub_18BD96D80()
{
  if (qword_1ECD28278)
  {
    uhash_close((void **)qword_1ECD28278);
    qword_1ECD28278 = 0;
  }
  byte_1ECD28270 = 0;
  return 1;
}

void sub_18BD96DB8(icu::UObject *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E2267490;
  umtx_lock((icu::UMutex *)&unk_1ECD28288);
  v2 = *((_QWORD *)a1 + 1);
  if (v2)
    --*(_DWORD *)(v2 + 8);
  umtx_unlock((std::mutex **)&unk_1ECD28288);
  icu::UObject::~UObject(a1);
}

void sub_18BD96E18(icu::UObject *a1)
{
  void *v1;

  sub_18BD96DB8(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD96E2C(_QWORD *a1, _QWORD *lpsrc)
{
  uint64_t result;

  if (a1 == lpsrc)
    return 1;
  if (result)
    return a1[1] == *(_QWORD *)(result + 8);
  return result;
}

uint64_t *sub_18BD96E8C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x10, a2);
  v5 = v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E2267490;
    v4[1] = 0;
    umtx_lock((icu::UMutex *)&unk_1ECD28288);
    v6 = *(_QWORD *)(a1 + 8);
    ++*(_DWORD *)(v6 + 8);
    v5[1] = v6;
    umtx_unlock((std::mutex **)&unk_1ECD28288);
  }
  return v5;
}

uint64_t sub_18BD96EFC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96F10(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 48))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96F24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 56))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96F38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 64))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96F4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 72))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96F60(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 80))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96F74(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 88))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96F88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 104))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96F9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 112))(**(_QWORD **)(a1 + 8));
}

uint64_t sub_18BD96FB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 120))(**(_QWORD **)(a1 + 8));
}

_QWORD *icu::TimeZoneNames::createInstance(icu::TimeZoneNames *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t *v3;
  _QWORD *result;
  uint64_t *v7;

  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0)
    return 0;
  v7 = icu::UMemory::operator new(v3, (icu::UMemory *)0x10, (unint64_t)a2);
  if (v7)
    return sub_18BD96AAC(v7, (uint64_t)this, (int *)a2);
  if (*(int *)a2 > 0)
    return 0;
  result = 0;
  *(_DWORD *)a2 = 7;
  return result;
}

uint64_t icu::TimeZoneNames::createTZDBInstance(icu::TimeZoneNames *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t result;
  uint64_t v6;

  if (*(int *)a2 > 0)
    return 0;
  v6 = icu::UMemory::operator new((icu::UMemory *)0xF0, (unint64_t)a2);
  if (v6)
    return sub_18BD9AD78(v6, this);
  if (*(int *)a2 > 0)
    return 0;
  result = 0;
  *(_DWORD *)a2 = 7;
  return result;
}

icu::UnicodeString *icu::TimeZoneNames::getExemplarLocationName(icu::TimeZoneNames *this, const icu::UnicodeString *a2, int32_t *a3)
{
  return sub_18BD9A3FC((uint64_t)a2, a3);
}

uint64_t icu::TimeZoneNames::getDisplayName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  _OWORD v11[4];
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (*(unsigned __int16 *)(a4 + 8) <= 0x1Fu)
  {
    memset(v12, 0, sizeof(v12));
    memset(v11, 0, sizeof(v11));
    icu::UnicodeString::UnicodeString(v11, v12, 0, 32);
    (*(void (**)(uint64_t, uint64_t, _OWORD *, double))(*(_QWORD *)a1 + 56))(a1, a2, v11, a5);
    (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, v11, a3, a4);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v11);
  }
  return a4;
}

void icu::TimeZoneNames::getDisplayNames(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, uint64_t a5, int *a6, double a7)
{
  uint64_t v12;
  void (**v13)(icu::UnicodeString *__hidden);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a6 <= 0 && *(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    v14 = 0u;
    v17 = 0;
    v16 = 0u;
    v15 = 0u;
    v13 = off_1E2256B38;
    LOWORD(v14) = 2;
    if (a4 >= 1)
    {
      v12 = a4;
      do
      {
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, *a3, a5);
        if (*(unsigned __int16 *)(a5 + 8) <= 0x1Fu)
        {
          if ((unsigned __int16)v14 <= 0x1Fu)
            (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), double))(*(_QWORD *)a1 + 56))(a1, a2, &v13, a7);
          (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), _QWORD, uint64_t))(*(_QWORD *)a1 + 72))(a1, &v13, *a3, a5);
        }
        a5 += 64;
        ++a3;
        --v12;
      }
      while (v12);
    }
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v13);
  }
}

_QWORD *icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(_QWORD *this)
{
  *this = off_1E2267558;
  this[1] = 0;
  return this;
}

{
  *this = off_1E2267558;
  this[1] = 0;
  return this;
}

void icu::TimeZoneNames::MatchInfoCollection::~MatchInfoCollection(icu::TimeZoneNames::MatchInfoCollection *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E2267558;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = off_1E2267558;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2267558;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UMemory::operator delete(this);
}

void icu::TimeZoneNames::MatchInfoCollection::addZone(icu::TimeZoneNames::MatchInfoCollection *a1, unint64_t a2, int a3, UChar **a4, UErrorCode *a5)
{
  uint64_t *v5;
  int v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;

  v5 = (uint64_t *)*(unsigned int *)a5;
  if ((int)v5 > 0)
    return;
  v9 = a2;
  v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x50, a2);
  v12 = v11;
  if (v11)
  {
    v11[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)v11 + 8) = 2;
    *(_DWORD *)v11 = v9;
    *((_DWORD *)v11 + 18) = a3;
    icu::UnicodeString::copyFrom((UChar **)v11 + 1, a4, 0);
    *((_BYTE *)v12 + 76) = 1;
    v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
    v14 = (void *)*(unsigned int *)a5;
    if ((int)v14 > 0)
    {
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
      return;
    }
    goto LABEL_9;
  }
  if (*(int *)a5 <= 0)
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
  if (*(int *)a5 < 1)
LABEL_9:
    icu::UVector::adoptElement((icu::UVector *)v13, v12, a5);
}

uint64_t *icu::TimeZoneNames::MatchInfoCollection::matches(icu::TimeZoneNames::MatchInfoCollection *this, UErrorCode *a2)
{
  uint64_t *v2;
  uint64_t *result;

  v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 > 0)
    return 0;
  result = (uint64_t *)*((_QWORD *)this + 1);
  if (!result)
  {
    result = icu::UMemory::operator new(v2, (icu::UMemory *)0x28, (unint64_t)a2);
    if (result)
    {
      result = (uint64_t *)icu::UVector::UVector((uint64_t)result, (uint64_t)sub_18BD97798, 0, (int *)a2);
      *((_QWORD *)this + 1) = result;
      if (*(int *)a2 >= 1)
      {
        (*(void (**)(uint64_t *))(*result + 8))(result);
        result = 0;
        *((_QWORD *)this + 1) = 0;
      }
    }
    else
    {
      *((_QWORD *)this + 1) = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return result;
}

void icu::TimeZoneNames::MatchInfoCollection::addMetaZone(icu::TimeZoneNames::MatchInfoCollection *a1, unint64_t a2, int a3, UChar **a4, UErrorCode *a5)
{
  uint64_t *v5;
  int v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v14;

  v5 = (uint64_t *)*(unsigned int *)a5;
  if ((int)v5 > 0)
    return;
  v9 = a2;
  v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x50, a2);
  v12 = v11;
  if (v11)
  {
    v11[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)v11 + 8) = 2;
    *(_DWORD *)v11 = v9;
    *((_DWORD *)v11 + 18) = a3;
    icu::UnicodeString::copyFrom((UChar **)v11 + 1, a4, 0);
    *((_BYTE *)v12 + 76) = 0;
    v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
    v14 = (void *)*(unsigned int *)a5;
    if ((int)v14 > 0)
    {
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(v12 + 1));
      icu::UMemory::operator delete(v12);
      return;
    }
    goto LABEL_9;
  }
  if (*(int *)a5 <= 0)
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  v13 = icu::TimeZoneNames::MatchInfoCollection::matches(a1, a5);
  if (*(int *)a5 < 1)
LABEL_9:
    icu::UVector::adoptElement((icu::UVector *)v13, v12, a5);
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::size(icu::TimeZoneNames::MatchInfoCollection *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  else
    return 0;
}

unsigned int *icu::TimeZoneNames::MatchInfoCollection::getNameTypeAt(icu::UVector **this, unsigned int a2)
{
  unsigned int *result;

  result = (unsigned int *)icu::UVector::elementAt(this[1], a2);
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getMatchLengthAt(icu::UVector **this, unsigned int a2)
{
  uint64_t result;

  result = icu::UVector::elementAt(this[1], a2);
  if (result)
    return *(unsigned int *)(result + 72);
  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getTimeZoneIDAt(icu::UVector **this, unsigned int a2, icu::UnicodeString *a3)
{
  __int16 v4;
  uint64_t result;

  if ((*((_WORD *)a3 + 4) & 1) != 0)
    v4 = 2;
  else
    v4 = *((_WORD *)a3 + 4) & 0x1F;
  *((_WORD *)a3 + 4) = v4;
  result = icu::UVector::elementAt(this[1], a2);
  if (result)
  {
    if (*(_BYTE *)(result + 76))
    {
      icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(result + 8), 0);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::TimeZoneNames::MatchInfoCollection::getMetaZoneIDAt(icu::UVector **this, unsigned int a2, icu::UnicodeString *a3)
{
  __int16 v4;
  uint64_t result;

  if ((*((_WORD *)a3 + 4) & 1) != 0)
    v4 = 2;
  else
    v4 = *((_WORD *)a3 + 4) & 0x1F;
  *((_WORD *)a3 + 4) = v4;
  result = icu::UVector::elementAt(this[1], a2);
  if (result)
  {
    if (*(_BYTE *)(result + 76))
    {
      return 0;
    }
    else
    {
      icu::UnicodeString::copyFrom((UChar **)a3, (UChar **)(result + 8), 0);
      return 1;
    }
  }
  return result;
}

void sub_18BD97798(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(a1 + 8));
    icu::UMemory::operator delete((void *)a1);
  }
}

uint64_t sub_18BD977C8(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
}

uint64_t *sub_18BD977E8(uint64_t *result, void *a2, uint64_t (*a3)(void *), UErrorCode *a4)
{
  uint64_t v5;
  icu::UVector *v6;
  uint64_t (*v8)(void *);
  void *v9;

  if (*(int *)a4 >= 1)
  {
    if (a3)
      return (uint64_t *)a3(a2);
    return result;
  }
  v5 = (uint64_t)result;
  v6 = (icu::UVector *)*result;
  if (!*result)
  {
    *result = (uint64_t)a2;
    return result;
  }
  if (*((_BYTE *)result + 14))
    goto LABEL_6;
  result = icu::UMemory::operator new((uint64_t *)*((unsigned __int8 *)result + 14), (icu::UMemory *)0x28, (unint64_t)a2);
  v6 = (icu::UVector *)result;
  if (result)
  {
    result = (uint64_t *)icu::UVector::UVector(result, a3, 0, 1, a4);
    v8 = a3;
    if (*(int *)a4 < 1)
    {
      v9 = *(void **)v5;
      if (*((_QWORD *)v6 + 3))
        icu::UVector::adoptElement(v6, v9, a4);
      else
        icu::UVector::addElement(v6, v9, a4);
      *(_QWORD *)v5 = v6;
      *(_BYTE *)(v5 + 14) = 1;
LABEL_6:
      if (*((_QWORD *)v6 + 3))
        return (uint64_t *)icu::UVector::adoptElement(v6, a2, a4);
      else
        return (uint64_t *)icu::UVector::addElement(v6, a2, a4);
    }
  }
  else
  {
    v8 = a3;
    if (*(int *)a4 <= 0)
      *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  if (v8)
    result = (uint64_t *)v8(a2);
  if (v6)
    return (uint64_t *)(*(uint64_t (**)(icu::UVector *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t icu::TextTrieMap::TextTrieMap(uint64_t this, char a2, void (*a3)(void *))
{
  *(_QWORD *)this = off_1E2267620;
  *(_BYTE *)(this + 8) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 40) = 1;
  *(_QWORD *)(this + 48) = a3;
  return this;
}

{
  *(_QWORD *)this = off_1E2267620;
  *(_BYTE *)(this + 8) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 40) = 1;
  *(_QWORD *)(this + 48) = a3;
  return this;
}

void icu::TextTrieMap::~TextTrieMap(icu::TextTrieMap *this)
{
  int v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  icu::UVector *v8;
  int v9;
  void (*v10)(uint64_t);
  uint64_t v11;

  *(_QWORD *)this = off_1E2267620;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    v3 = 0;
    for (i = 0; i < v2; ++i)
    {
      v5 = *((_QWORD *)this + 2);
      v6 = *(_QWORD *)(v5 + v3);
      if (v6)
      {
        if (*(_BYTE *)(v5 + v3 + 14))
        {
          v7 = *(void (**)(void))(*(_QWORD *)v6 + 8);
LABEL_7:
          v7();
          v2 = *((_DWORD *)this + 7);
          goto LABEL_8;
        }
        v7 = (void (*)(void))*((_QWORD *)this + 6);
        if (v7)
          goto LABEL_7;
      }
LABEL_8:
      v3 += 16;
    }
  }
  uprv_free(*((void **)this + 2));
  v8 = (icu::UVector *)*((_QWORD *)this + 4);
  if (v8)
  {
    if (*((int *)v8 + 2) >= 1)
    {
      v9 = 0;
      do
      {
        v10 = (void (*)(uint64_t))*((_QWORD *)this + 6);
        if (v10)
        {
          v11 = icu::UVector::elementAt(v8, v9 + 1);
          v10(v11);
          v8 = (icu::UVector *)*((_QWORD *)this + 4);
        }
        v9 += 2;
      }
      while (v9 < *((_DWORD *)v8 + 2));
    }
    (*(void (**)(icu::UVector *))(*(_QWORD *)v8 + 8))(v8);
  }
}

{
  void *v1;

  icu::TextTrieMap::~TextTrieMap(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::TextTrieMap::isEmpty(icu::TextTrieMap *this)
{
  return *((char *)this + 40);
}

icu::UVector *icu::TextTrieMap::put(icu::TextTrieMap *this, const icu::UnicodeString *a2, void *a3, icu::ZNStringPool *a4, UErrorCode *a5)
{
  const UChar *TerminatedBuffer;
  UChar *v10;
  uint64_t *v11;

  TerminatedBuffer = (const UChar *)icu::UnicodeString::getTerminatedBuffer(a2);
  v10 = icu::ZNStringPool::get((uint64_t *)a4, TerminatedBuffer, (int *)a5);
  return icu::TextTrieMap::put(v10, a5, (uint64_t)this, a3, v11);
}

UChar *icu::ZNStringPool::get(icu::ZNStringPool *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  const UChar *TerminatedBuffer;

  TerminatedBuffer = (const UChar *)icu::UnicodeString::getTerminatedBuffer(a2);
  return icu::ZNStringPool::get((uint64_t *)this, TerminatedBuffer, (int *)a3);
}

icu::UVector *icu::TextTrieMap::put@<X0>(void *a1@<X1>, UErrorCode *a2@<X3>, uint64_t a3@<X0>, void *a4@<X2>, uint64_t *a5@<X8>)
{
  icu::UVector *result;
  uint64_t (*v10)(void *);

  *(_BYTE *)(a3 + 40) = 0;
  result = *(icu::UVector **)(a3 + 32);
  if (!result)
  {
    result = (icu::UVector *)icu::UMemory::operator new(a5, (icu::UMemory *)0x28, (unint64_t)a1);
    if (result)
    {
      result = icu::UVector::UVector(result, a2);
    }
    else if (*(int *)a2 <= 0)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
    *(_QWORD *)(a3 + 32) = result;
  }
  if (*(int *)a2 < 1)
  {
    result = (icu::UVector *)icu::UVector::addElement(result, a1, a2);
    if (*(int *)a2 < 1)
      return (icu::UVector *)icu::UVector::addElement(*(icu::UVector **)(a3 + 32), a4, a2);
  }
  v10 = *(uint64_t (**)(void *))(a3 + 48);
  if (v10)
    return (icu::UVector *)v10(a1);
  return result;
}

_QWORD *icu::TextTrieMap::putImpl(icu::TextTrieMap *this, const icu::UnicodeString *a2, void *a3, UErrorCode *a4)
{
  _QWORD *result;
  const UChar **v9;
  unsigned int v10;
  char *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  void *v16;
  UChar *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 2))
  {
    *((_DWORD *)this + 6) = 512;
    result = uprv_malloc(0x2000uLL);
    *((_QWORD *)this + 2) = result;
    if (!result)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    *result = 0;
    result[1] = 0;
    *((_DWORD *)this + 7) = 1;
  }
  v18 = 0u;
  v21 = 0;
  v20 = 0u;
  v19 = 0u;
  v17 = (UChar *)off_1E2256B38;
  LOWORD(v18) = 2;
  if (!*((_BYTE *)this + 8))
  {
    v10 = *((unsigned __int16 *)a2 + 4);
    if ((v10 & 0x11) != 0)
    {
      v11 = 0;
      if ((v10 & 0x8000) == 0)
        goto LABEL_21;
    }
    else if ((v10 & 2) != 0)
    {
      v11 = (char *)a2 + 10;
      if ((v10 & 0x8000) == 0)
        goto LABEL_21;
    }
    else
    {
      v11 = (char *)*((_QWORD *)a2 + 3);
      if ((v10 & 0x8000) == 0)
        goto LABEL_21;
    }
    v12 = *((_DWORD *)a2 + 3);
    goto LABEL_22;
  }
  v9 = (const UChar **)icu::UnicodeString::fastCopyFrom(&v17, (UChar **)a2);
  icu::UnicodeString::foldCase(v9, 0);
  v10 = (unsigned __int16)v18;
  if ((v18 & 0x11) != 0)
  {
    v11 = 0;
    if ((v18 & 0x8000) != 0)
      goto LABEL_19;
LABEL_21:
    v12 = v10 >> 5;
    goto LABEL_22;
  }
  if ((v18 & 2) == 0)
  {
    v11 = (char *)v19;
    if ((v18 & 0x8000) != 0)
      goto LABEL_19;
    goto LABEL_21;
  }
  v11 = (char *)&v18 + 2;
  if ((v18 & 0x8000) == 0)
    goto LABEL_21;
LABEL_19:
  v12 = DWORD1(v18);
LABEL_22:
  v13 = (uint64_t *)*((_QWORD *)this + 2);
  if (v12 >= 1)
  {
    v14 = v12;
    do
    {
      v15 = *(unsigned __int16 *)v11;
      v11 += 2;
      v13 = (uint64_t *)icu::TextTrieMap::addChildNode(this, (uint64_t)v13, v15, (int *)a4);
      --v14;
    }
    while (v14);
  }
  sub_18BD977E8(v13, a3, *((uint64_t (**)(void *))this + 6), a4);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v17);
}

uint64_t icu::TextTrieMap::addChildNode(icu::TextTrieMap *this, uint64_t a2, unsigned int a3, int *a4)
{
  uint64_t result;
  __int16 v6;
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  if (*a4 > 0)
    return 0;
  v6 = a3;
  v7 = a2;
  v9 = *(unsigned __int16 *)(a2 + 10);
  if (*(_WORD *)(a2 + 10))
  {
    v10 = 0;
    v11 = *((_QWORD *)this + 2);
    while (1)
    {
      v12 = v9;
      v13 = *(unsigned __int16 *)(v11 + 16 * v9 + 8);
      if (v13 == a3)
        return v11 + 16 * v9;
      if (v13 > a3)
        goto LABEL_11;
      v9 = *(unsigned __int16 *)(v11 + 16 * v9 + 12);
      v10 = v12;
      if (!v9)
      {
        v10 = v12;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = 0;
LABEL_10:
    LOWORD(v12) = 0;
LABEL_11:
    v14 = *((_DWORD *)this + 7);
    v15 = *((_QWORD *)this + 2);
    if (v14 == *((_DWORD *)this + 6))
    {
      if (!icu::TextTrieMap::growNodes(this))
      {
        result = 0;
        *a4 = 7;
        return result;
      }
      v16 = v7 - v15;
      v15 = *((_QWORD *)this + 2);
      v7 = v15 + 16 * (int)(v16 >> 4);
      v14 = *((_DWORD *)this + 7);
    }
    result = v15 + 16 * v14;
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 8) = v6;
    *(_WORD *)(result + 12) = v12;
    v17 = *((_DWORD *)this + 7);
    if (v10)
      *(_WORD *)(*((_QWORD *)this + 2) + 16 * v10 + 12) = v17;
    else
      *(_WORD *)(v7 + 10) = v17;
    *((_DWORD *)this + 7) = v17 + 1;
  }
  return result;
}

uint64_t icu::TextTrieMap::growNodes(icu::TextTrieMap *this)
{
  int v1;
  uint64_t result;
  int v4;
  uint64_t v5;
  void *v6;

  v1 = *((_DWORD *)this + 6);
  if (v1 == 0xFFFF)
    return 0;
  if (v1 >= 64535)
    v1 = 64535;
  v4 = v1 + 1000;
  result = (uint64_t)uprv_malloc(16 * (v1 + 1000));
  if (result)
  {
    v5 = result;
    v6 = (void *)*((_QWORD *)this + 2);
    memcpy((void *)result, v6, 16 * *((int *)this + 7));
    uprv_free(v6);
    *((_QWORD *)this + 2) = v5;
    *((_DWORD *)this + 6) = v4;
    return 1;
  }
  return result;
}

uint64_t icu::TextTrieMap::getChildNode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v3 = *(unsigned __int16 *)(a2 + 10);
  if (!*(_WORD *)(a2 + 10))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v5 = v3;
    v6 = *(unsigned __int16 *)(v4 + 16 * v3 + 8);
    if (v6 == a3)
      break;
    if (v6 <= a3)
    {
      v3 = *(unsigned __int16 *)(v4 + 16 * v5 + 12);
      if (*(_WORD *)(v4 + 16 * v5 + 12))
        continue;
    }
    return 0;
  }
  return v4 + 16 * v5;
}

icu::UVector *icu::TextTrieMap::buildTrie(icu::TextTrieMap *this, UErrorCode *a2)
{
  icu::UVector *result;
  signed int v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _OWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = (icu::UVector *)*((_QWORD *)this + 4);
  if (result)
  {
    if (*((int *)result + 2) >= 1)
    {
      v5 = 0;
      do
      {
        v6 = icu::UVector::elementAt(result, v5);
        v7 = (void *)icu::UVector::elementAt(*((icu::UVector **)this + 4), v5 + 1);
        memset(v10, 0, sizeof(v10));
        v9 = v6;
        icu::UnicodeString::UnicodeString(v10, 1, &v9);
        icu::TextTrieMap::putImpl(this, (const icu::UnicodeString *)v10, v7, a2);
        icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
        result = (icu::UVector *)*((_QWORD *)this + 4);
        v5 += 2;
      }
      while (v5 < *((_DWORD *)result + 2));
    }
    result = (icu::UVector *)(*(uint64_t (**)(icu::UVector *, UErrorCode *))(*(_QWORD *)result + 8))(result, a2);
    *((_QWORD *)this + 4) = 0;
  }
  return result;
}

void icu::TextTrieMap::search(icu::TextTrieMap *a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD, _QWORD, _QWORD *, int *), UErrorCode *a5)
{
  _QWORD *v10;

  umtx_lock((icu::UMutex *)&unk_1EE00A1A0);
  if (*((_QWORD *)a1 + 4))
    icu::TextTrieMap::buildTrie(a1, a5);
  umtx_unlock((std::mutex **)&unk_1EE00A1A0);
  v10 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v10)
    icu::TextTrieMap::search(a1, v10, a2, a3, a3, a4, (int *)a5);
}

_QWORD *icu::TextTrieMap::search(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, uint64_t (***a6)(_QWORD, _QWORD, _QWORD *, int *), int *a7)
{
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0)
    return result;
  v12 = a2;
  v13 = result;
  if (*a2)
  {
    result = (_QWORD *)(**a6)(a6, (a5 - a4), a2, a7);
    if (!(_DWORD)result || *a7 > 0)
      return result;
  }
  if (*((_BYTE *)v13 + 8))
  {
    v15 = icu::UnicodeString::char32At((uint64_t *)*((unsigned __int8 *)v13 + 8), (icu::UnicodeString *)a3, a5);
    v35 = 0u;
    v36 = 0u;
    if (v15 < 0x10000)
      v16 = 1;
    else
      v16 = 2;
    v33 = 0uLL;
    v34 = 0uLL;
    icu::UnicodeString::UnicodeString((uint64_t)&v33, v15);
    icu::UnicodeString::foldCase((const UChar **)&v33, 0);
    v17 = 0;
    v18 = (unint64_t)&v33 | 0xA;
    if ((BYTE8(v33) & 2) == 0)
      v18 = *((_QWORD *)&v34 + 1);
    if ((WORD4(v33) & 0x8000) != 0)
      goto LABEL_18;
LABEL_16:
    v19 = (unint64_t)WORD4(v33) >> 5;
    if (v17 < v19)
    {
      while (1)
      {
        v20 = v19 <= v17 ? 0xFFFF : *(unsigned __int16 *)(v18 + 2 * v17);
        v21 = *((unsigned __int16 *)v12 + 5);
        if (!*((_WORD *)v12 + 5))
          break;
        ++v17;
        v22 = v13[2];
        while (1)
        {
          v23 = v21;
          v24 = *(unsigned __int16 *)(v22 + 16 * v21 + 8);
          if (v24 == v20)
            break;
          if (v24 <= v20)
          {
            v21 = *(unsigned __int16 *)(v22 + 16 * v23 + 12);
            if (*(_WORD *)(v22 + 16 * v23 + 12))
              continue;
          }
          goto LABEL_30;
        }
        v12 = (_QWORD *)(v22 + 16 * v23);
        if ((WORD4(v33) & 0x8000) == 0)
          goto LABEL_16;
LABEL_18:
        v19 = HIDWORD(v33);
        if (v17 >= SHIDWORD(v33))
          goto LABEL_31;
      }
LABEL_30:
      v12 = 0;
    }
LABEL_31:
    result = icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v33);
    if (v12)
      return (_QWORD *)icu::TextTrieMap::search(v13, v12, a3, a4, (v16 + a5), a6, a7);
  }
  else
  {
    v25 = *(unsigned __int16 *)(a3 + 8);
    if ((v25 & 0x8000u) == 0)
      v26 = v25 >> 5;
    else
      v26 = *(_DWORD *)(a3 + 12);
    if (v26 <= a5)
    {
      v28 = 0xFFFF;
    }
    else
    {
      if ((v25 & 2) != 0)
        v27 = a3 + 10;
      else
        v27 = *(_QWORD *)(a3 + 24);
      v28 = *(unsigned __int16 *)(v27 + 2 * a5);
    }
    v29 = *((unsigned __int16 *)v12 + 5);
    if (*((_WORD *)v12 + 5))
    {
      v30 = v13[2];
      while (1)
      {
        v31 = v29;
        v32 = *(unsigned __int16 *)(v30 + 16 * v29 + 8);
        if (v32 == v28)
          break;
        if (v32 <= v28)
        {
          v29 = *(unsigned __int16 *)(v30 + 16 * v31 + 12);
          if (*(_WORD *)(v30 + 16 * v31 + 12))
            continue;
        }
        return result;
      }
      v12 = (_QWORD *)(v30 + 16 * v31);
      v16 = 1;
      if (v12)
        return (_QWORD *)icu::TextTrieMap::search(v13, v12, a3, a4, (v16 + a5), a6, a7);
    }
  }
  return result;
}

icu::ZNStringPool *icu::ZNStringPool::ZNStringPool(icu::ZNStringPool *this, UErrorCode *a2)
{
  uint64_t *v3;
  uint64_t *v5;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 <= 0)
  {
    v5 = icu::UMemory::operator new(v3, (icu::UMemory *)0xFB0, (unint64_t)a2);
    if (v5)
    {
      *v5 = 0;
      *((_DWORD *)v5 + 2) = 0;
      *(_QWORD *)this = v5;
      *((_QWORD *)this + 1) = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, (uint64_t)uhash_compareUChars, (int *)a2);
    }
    else
    {
      *(_QWORD *)this = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

void icu::ZNStringPool::~ZNStringPool(icu::ZNStringPool *this)
{
  void **v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (void **)*((_QWORD *)this + 1);
  if (v2)
  {
    uhash_close(v2);
    *((_QWORD *)this + 1) = 0;
  }
  v3 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    do
    {
      v4 = (_QWORD *)*v3;
      icu::UMemory::operator delete(v3);
      *(_QWORD *)this = v4;
      v3 = v4;
    }
    while (v4);
  }
}

UChar *icu::ZNStringPool::get(uint64_t *a1, const UChar *a2, int *a3)
{
  UChar *v3;
  int32_t v7;
  unint64_t v8;
  int32_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;

  if (*a3 > 0)
    return (UChar *)&unk_18BE2BA98;
  v3 = (UChar *)uhash_get(a1[1], (uint64_t)a2);
  if (v3)
    return v3;
  v7 = u_strlen(a2);
  v9 = v7;
  v10 = *a1;
  v11 = (uint64_t *)*(unsigned int *)(*a1 + 8);
  if (2000 - (int)v11 > v7)
    goto LABEL_9;
  if (v7 < 2000)
  {
    v13 = icu::UMemory::operator new(v11, (icu::UMemory *)0xFB0, v8);
    if (!v13)
    {
      *a1 = 0;
      v12 = 7;
      goto LABEL_12;
    }
    LODWORD(v11) = 0;
    *((_DWORD *)v13 + 2) = 0;
    *v13 = v10;
    v10 = (uint64_t)v13;
    *a1 = (uint64_t)v13;
LABEL_9:
    v3 = (UChar *)(v10 + 2 * (int)v11 + 12);
    u_strcpy(v3, a2);
    v14 = a1[1];
    *(_DWORD *)(*a1 + 8) += v9 + 1;
    uhash_put(v14, (uint64_t)v3, (uint64_t)v3, a3);
    return v3;
  }
  v12 = 5;
LABEL_12:
  *a3 = v12;
  return (UChar *)&unk_18BE2BA98;
}

void *icu::ZNStringPool::adopt(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;

  if (*a3 > 0)
    return &unk_18BE2BA98;
  v3 = a2;
  if (a2 && !uhash_get(*(_QWORD *)(a1 + 8), a2))
    uhash_put(*(_QWORD *)(a1 + 8), v3, v3, a3);
  return (void *)v3;
}

void icu::ZNStringPool::freeze(void ***this)
{
  uhash_close(this[1]);
  this[1] = 0;
}

void sub_18BD985FC(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void *sub_18BD98610()
{
  return &unk_1EE00A1F0;
}

uint64_t sub_18BD9861C(uint64_t a1, int *a2)
{
  uint64_t v2;
  icu::UVector *v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;

  if (*a2 > 0)
    return 0;
  v5 = *(icu::UVector **)(a1 + 128);
  if (!v5)
    return 0;
  v6 = *(_DWORD *)(a1 + 120);
  if (v6 >= *(_DWORD *)(a1 + 116))
    return 0;
  v2 = a1 + 8;
  *(_DWORD *)(a1 + 120) = v6 + 1;
  v7 = icu::UVector::elementAt(v5, v6);
  icu::UnicodeString::unBogus(a1 + 8);
  if (*(__int16 *)(a1 + 16) < 0)
    v8 = *(unsigned int *)(a1 + 20);
  else
    v8 = *(unsigned __int16 *)(a1 + 16) >> 5;
  icu::UnicodeString::doReplace(a1 + 8, 0, v8, v7, 0, 0xFFFFFFFFLL);
  return v2;
}

uint64_t sub_18BD986B8(uint64_t result)
{
  *(_DWORD *)(result + 120) = 0;
  return result;
}

uint64_t sub_18BD986C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 116);
}

void sub_18BD986C8(icu::StringEnumeration *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2267640;
  v2 = *((_QWORD *)this + 17);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18BD98708(icu::StringEnumeration *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2267640;
  v2 = *((_QWORD *)this + 17);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::StringEnumeration::~StringEnumeration(this);
  icu::UMemory::operator delete(v3);
}

_QWORD *sub_18BD9874C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E22676A8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18BD9878C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E22676A8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BD987CC(uint64_t a1, unint64_t a2, _BYTE *a3, UErrorCode *a4)
{
  int v7;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t *v12;
  icu::TimeZoneNames::MatchInfoCollection *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  UChar *v18[9];

  v18[8] = *(UChar **)MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  if (*(_QWORD *)a3)
  {
    v7 = a2;
    if (a3[14])
    {
      v9 = *(_DWORD *)(*(_QWORD *)a3 + 8);
      if (v9 < 1)
        return 1;
    }
    else
    {
      v9 = 1;
    }
    v10 = 0;
    while (1)
    {
      v11 = *(unsigned int **)a3;
      if (a3[14])
        v11 = (unsigned int *)icu::UVector::elementAt(*(icu::UVector **)a3, v10);
      if (!v11)
        goto LABEL_24;
      v12 = (uint64_t *)*v11;
      if ((*(_DWORD *)(a1 + 8) & v12) == 0)
        goto LABEL_24;
      v13 = *(icu::TimeZoneNames::MatchInfoCollection **)(a1 + 16);
      if (v13)
        goto LABEL_16;
      v14 = icu::UMemory::operator new(v12, (icu::UMemory *)0x10, a2);
      if (v14)
        break;
      *(_QWORD *)(a1 + 16) = 0;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
LABEL_24:
      if (v9 == ++v10)
        return 1;
    }
    v13 = (icu::TimeZoneNames::MatchInfoCollection *)v14;
    *(_QWORD *)(a1 + 16) = icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(v14);
LABEL_16:
    if (*(int *)a4 <= 0)
    {
      v15 = *((_QWORD *)v11 + 1);
      v16 = *v11;
      if (v15)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v18, v15, 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addZone(v13, v16, v7, v18, a4);
      }
      else
      {
        icu::UnicodeString::UnicodeString((uint64_t)v18, *((_QWORD *)v11 + 2), 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addMetaZone(v13, v16, v7, v18, a4);
      }
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v18);
      if (*(int *)a4 <= 0 && *(_DWORD *)(a1 + 12) < v7)
        *(_DWORD *)(a1 + 12) = v7;
    }
    goto LABEL_24;
  }
  return 1;
}

uint64_t sub_18BD98980(uint64_t a1, uint64_t a2, int *a3)
{
  *(_QWORD *)a1 = off_1E22676D0;
  icu::Locale::Locale((icu::Locale *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = off_1E2267620;
  *(_BYTE *)(a1 + 272) = 1;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 304) = 1;
  *(_QWORD *)(a1 + 312) = j__uprv_free_4;
  sub_18BD98A0C((_QWORD *)a1, a2, a3);
  return a1;
}

void sub_18BD98A0C(_QWORD *a1, uint64_t a2, int *a3)
{
  _QWORD *v5;
  icu::TimeZone *v6;
  icu::ZoneMeta *Default;
  const icu::TimeZone *v8;
  const UChar *CanonicalCLDRID;
  void *v10;
  int v11;
  UChar *v12[9];

  v12[8] = *(UChar **)MEMORY[0x1E0C80C00];
  if (*a3 <= 0)
  {
    v11 = 0;
    v5 = ures_open("icudt74l-zone", *(char **)(a2 + 40), &v11);
    a1[29] = v5;
    a1[29] = ures_getByKeyWithFallback((uint64_t)v5, "zoneStrings", (uint64_t)v5, (UErrorCode *)&v11);
    if (v11 >= 1)
    {
      *a3 = v11;
LABEL_5:
      sub_18BD98B7C(a1);
      return;
    }
    a1[31] = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a3);
    a1[30] = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a3);
    if (*a3 >= 1)
      goto LABEL_5;
    uhash_setValueDeleter(a1[31], (uint64_t)sub_18BD98BC8);
    v6 = (icu::TimeZone *)uhash_setValueDeleter(a1[30], (uint64_t)sub_18BD98BC8);
    Default = (icu::ZoneMeta *)icu::TimeZone::createDefault(v6);
    CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(Default, v8);
    if (CanonicalCLDRID)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v12, (uint64_t)CanonicalCLDRID);
      sub_18BD98C10((uint64_t)a1, v12, a3);
      icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v12);
    }
    (*(void (**)(icu::ZoneMeta *))(*(_QWORD *)Default + 8))(Default);
  }
}

void sub_18BD98B7C(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;

  v2 = (_QWORD *)a1[29];
  if (v2)
  {
    ures_close(v2);
    a1[29] = 0;
  }
  v3 = (void **)a1[31];
  if (v3)
  {
    uhash_close(v3);
    a1[31] = 0;
  }
  v4 = (void **)a1[30];
  if (v4)
  {
    uhash_close(v4);
    a1[30] = 0;
  }
}

void sub_18BD98BC8(void **a1)
{
  if (a1 != (void **)"<empty>" && a1 != 0)
  {
    if (*((_BYTE *)a1 + 57))
      uprv_free(*a1);
    icu::UMemory::operator delete(a1);
  }
}

uint64_t sub_18BD98C10(uint64_t a1, UChar **a2, int *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;

  sub_18BD98CE4(a1, a2, a3);
  result = (*(uint64_t (**)(uint64_t, UChar **, int *))(*(_QWORD *)a1 + 48))(a1, a2, a3);
  v7 = result;
  if (*a3 <= 0)
  {
    v8 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 56))(result, a3);
    if (v8)
      v9 = *a3 <= 0;
    else
      v9 = 0;
    if (v9)
    {
      v10 = v8;
      do
      {
        sub_18BD98E5C(a1, v10, a3);
        v10 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 56))(v7, a3);
        if (v10)
          v11 = *a3 <= 0;
        else
          v11 = 0;
      }
      while (v11);
    }
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t sub_18BD98CE4(uint64_t a1, UChar **a2, int *a3)
{
  uint64_t v3;
  uint64_t v8;
  uint64_t i;
  int v10;
  void (**v11)(icu::ResourceSink *__hidden);
  _OWORD v12[3];
  uint64_t v13;
  UChar *v14;
  _OWORD v15[16];
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return 0;
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v14 = (UChar *)v15;
  *((_WORD *)v15 + (int)icu::UnicodeString::extract((uint64_t)a2, &v14, 129, a3)) = 0;
  v3 = uhash_get(*(_QWORD *)(a1 + 240), (uint64_t)v15);
  if (!v3)
  {
    v11 = &off_1E22678A8;
    memset(v12, 0, sizeof(v12));
    v13 = 0;
    sub_18BD99750((uint64_t)&v11, *(_QWORD *)(a1 + 232), a2, (unsigned int *)a3);
    v8 = *(_QWORD *)(a1 + 240);
    for (i = 1; i != 8; ++i)
    {
      if ((&v11)[i] == (void (**)(icu::ResourceSink *__hidden))&unk_18BE2BC38)
        (&v11)[i] = 0;
    }
    v3 = (uint64_t)sub_18BD998C4(v8, (const icu::UnicodeString *)v12, (icu::ZoneMeta *)a2, a3);
    v10 = *a3;
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v11);
    if (v10 > 0)
      return 0;
  }
  return v3;
}

char *sub_18BD98E5C(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  void (**v14)(icu::ResourceSink *__hidden);
  _OWORD v15[3];
  uint64_t v16;
  UChar *v17;
  _OWORD v18[16];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return 0;
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v17 = (UChar *)v18;
  icu::UnicodeString::extract(a2, &v17, 129, a3);
  v7 = *(unsigned __int16 *)(a2 + 8);
  v8 = (__int16)v7;
  v9 = v7 >> 5;
  if (v8 < 0)
    v9 = *(_DWORD *)(a2 + 12);
  *((_WORD *)v18 + (int)v9) = 0;
  v10 = (char *)uhash_get(*(_QWORD *)(a1 + 248), (uint64_t)v18);
  if (!v10)
  {
    v14 = &off_1E22678A8;
    memset(v15, 0, sizeof(v15));
    v16 = 0;
    sub_18BD995B8((uint64_t)&v14, *(_QWORD *)(a1 + 232), (unsigned __int16 *)a2, a3);
    v11 = *(_QWORD *)(a1 + 248);
    for (i = 1; i != 8; ++i)
    {
      if ((&v14)[i] == (void (**)(icu::ResourceSink *__hidden))&unk_18BE2BC38)
        (&v14)[i] = 0;
    }
    v10 = (char *)sub_18BD99684(v11, (const icu::UnicodeString *)v15, (UChar **)a2, a3);
    v13 = *a3;
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v14);
    if (v13 > 0)
      return 0;
  }
  if (v10 == "<empty>")
    return 0;
  return v10;
}

void sub_18BD98FF8(_QWORD *a1)
{
  icu::Locale *v2;

  *a1 = off_1E22676D0;
  v2 = (icu::Locale *)(a1 + 1);
  sub_18BD98B7C(a1);
  icu::TextTrieMap::~TextTrieMap((icu::TextTrieMap *)(a1 + 33));
  icu::Locale::~Locale(v2);
  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);
}

void sub_18BD99040(_QWORD *a1)
{
  void *v1;

  sub_18BD98FF8(a1);
  icu::UMemory::operator delete(v1);
}

BOOL sub_18BD99054(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t *sub_18BD99060@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  int v5;

  v5 = 0;
  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x140, a2);
  if (result)
    return (uint64_t *)sub_18BD98980((uint64_t)result, a1 + 8, &v5);
  return result;
}

uint64_t *sub_18BD990A0(uint64_t a1, icu::ZoneMeta *a2)
{
  return sub_18BD990A8(a2);
}

uint64_t *sub_18BD990A8(icu::ZoneMeta *a1)
{
  uint64_t *result;
  uint64_t AvailableMetazoneIDs;
  unint64_t v3;
  uint64_t *v4;

  if (*(int *)a1 > 0)
    return 0;
  AvailableMetazoneIDs = icu::ZoneMeta::getAvailableMetazoneIDs(a1);
  result = icu::UMemory::operator new(v4, (icu::UMemory *)0x90, v3);
  if (AvailableMetazoneIDs)
  {
    if (result)
    {
      result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
      *result = (uint64_t)off_1E2267640;
      result[16] = AvailableMetazoneIDs;
      result[17] = 0;
      *(uint64_t *)((char *)result + 116) = *(unsigned int *)(AvailableMetazoneIDs + 8);
    }
  }
  else if (result)
  {
    result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
    *result = (uint64_t)off_1E2267640;
    *((_DWORD *)result + 29) = 0;
    *((_DWORD *)result + 30) = 0;
    result[16] = 0;
    result[17] = 0;
  }
  return result;
}

uint64_t *sub_18BD99128(uint64_t a1, icu::ZoneMeta *a2, const icu::UnicodeString *a3)
{
  return sub_18BD99134(a2, a3);
}

uint64_t *sub_18BD99134(icu::ZoneMeta *a1, const icu::UnicodeString *a2)
{
  uint64_t *result;
  uint64_t MetazoneMappings;
  unint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  signed int v11;
  uint64_t *v12;
  void *v13;
  uint64_t *v14;

  if (*(int *)a2 > 0)
    return 0;
  MetazoneMappings = icu::ZoneMeta::getMetazoneMappings(a1, a2);
  if (!MetazoneMappings)
  {
    result = icu::UMemory::operator new(v6, (icu::UMemory *)0x90, v5);
    if (result)
    {
      result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)result);
      *result = (uint64_t)off_1E2267640;
      *((_DWORD *)result + 29) = 0;
      *((_DWORD *)result + 30) = 0;
      result[16] = 0;
      result[17] = 0;
    }
    return result;
  }
  v7 = (unsigned int *)MetazoneMappings;
  v8 = icu::UMemory::operator new(v6, (icu::UMemory *)0x28, v5);
  if (!v8)
  {
    if (*(int *)a2 <= 0)
    {
      result = 0;
      *(_DWORD *)a2 = 7;
      return result;
    }
    return 0;
  }
  v9 = v8;
  icu::UVector::UVector((uint64_t)v8, 0, (uint64_t)uhash_compareUChars, (int *)a2);
  if (*(int *)a2 > 0)
  {
LABEL_12:
    (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    return 0;
  }
  v11 = 0;
  while (1)
  {
    v12 = (uint64_t *)v7[2];
    if (v11 >= (int)v12)
      break;
    v13 = *(void **)icu::UVector::elementAt((icu::UVector *)v7, v11);
    if ((icu::UVector::indexOf((icu::UVector *)v9, (uint64_t)v13, 0) & 0x80000000) != 0)
      icu::UVector::addElement((icu::UVector *)v9, v13, (UErrorCode *)a2);
    ++v11;
    if (*(int *)a2 > 0)
      goto LABEL_12;
  }
  v14 = icu::UMemory::operator new(v12, (icu::UMemory *)0x90, v10);
  if (!v14)
  {
    if (*(int *)a2 <= 0)
      *(_DWORD *)a2 = 7;
    goto LABEL_12;
  }
  result = (uint64_t *)icu::StringEnumeration::StringEnumeration((uint64_t)v14);
  *result = (uint64_t)off_1E2267640;
  *((_DWORD *)result + 29) = 0;
  *((_DWORD *)result + 30) = 0;
  result[16] = (uint64_t)v9;
  result[17] = (uint64_t)v9;
  *((_DWORD *)result + 29) = *((_DWORD *)v9 + 2);
  if (*(int *)a2 > 0)
  {
    sub_18BD98708((icu::StringEnumeration *)result);
    return 0;
  }
  return result;
}

const icu::UnicodeString *sub_18BD992B0(double a1, uint64_t a2, icu::ZoneMeta *a3, const icu::UnicodeString *a4)
{
  icu::ZoneMeta::getMetazoneID(a3, a4, a1, a4);
  return a4;
}

const icu::UnicodeString *sub_18BD992DC(uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, const icu::UnicodeString *a4)
{
  return sub_18BD992EC(a2, a3, a4);
}

const icu::UnicodeString *sub_18BD992EC(icu::ZoneMeta *a1, uint64_t a2, const icu::UnicodeString *a3)
{
  icu::UnicodeString *v5;
  void *v6;
  _BYTE v8[64];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::UnicodeString(v8, a2, 0xFFFFFFFFLL, 0);
  icu::ZoneMeta::getZoneIdByMetazone(a1, (const icu::UnicodeString *)v8, a3, v5);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  return a3;
}

icu::UnicodeString *sub_18BD9936C(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  char *v8;
  int v9;
  int v11;
  const UChar *v13;
  int v14;

  icu::UnicodeString::setToBogus(this);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    umtx_lock((icu::UMutex *)&unk_1ECD282D8);
    v14 = 0;
    v8 = sub_18BD98E5C(a1, a2, &v14);
    v9 = v14;
    umtx_unlock((std::mutex **)&unk_1ECD282D8);
    if (v9 <= 0 && v8 != 0)
    {
      v11 = sub_18BD9B830(a3);
      if ((v11 & 0x80000000) == 0)
      {
        if (*(_QWORD *)&v8[8 * v11])
        {
          v13 = *(const UChar **)&v8[8 * v11];
          icu::UnicodeString::setTo(this, 1, &v13, -1);
        }
      }
    }
  }
  return this;
}

icu::UnicodeString *sub_18BD9943C(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  uint64_t v8;
  int v9;
  unsigned int v11;
  const UChar *v13;
  int v14;

  icu::UnicodeString::setToBogus(this);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    umtx_lock((icu::UMutex *)&unk_1ECD282D8);
    v14 = 0;
    v8 = sub_18BD98CE4(a1, (UChar **)a2, &v14);
    v9 = v14;
    umtx_unlock((std::mutex **)&unk_1ECD282D8);
    if (v9 <= 0 && v8 != 0)
    {
      v11 = sub_18BD9B830(a3);
      if ((v11 & 0x80000000) == 0)
      {
        if (*(_QWORD *)(v8 + 8 * v11))
        {
          v13 = *(const UChar **)(v8 + 8 * v11);
          icu::UnicodeString::setTo(this, 1, &v13, -1);
        }
      }
    }
  }
  return this;
}

icu::UnicodeString *sub_18BD9950C(uint64_t a1, UChar **a2, icu::UnicodeString *this)
{
  const UChar **v6;
  BOOL v7;
  const UChar *v9;
  int v10;

  icu::UnicodeString::setToBogus(this);
  umtx_lock((icu::UMutex *)&unk_1ECD282D8);
  v10 = 0;
  v6 = (const UChar **)sub_18BD98CE4(a1, a2, &v10);
  LODWORD(a1) = v10;
  umtx_unlock((std::mutex **)&unk_1ECD282D8);
  v7 = (int)a1 > 0 || v6 == 0;
  if (!v7 && *v6)
  {
    v9 = *v6;
    icu::UnicodeString::setTo(this, 1, &v9, -1);
  }
  return this;
}

void sub_18BD995B8(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int *a4)
{
  int v7;
  _OWORD v8[8];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*a4 <= 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_18BD9B57C(a3, v8);
    v7 = 0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_QWORD *)(a1 + 56) = 0;
    ures_getAllItemsWithFallback(a2, (char *)v8, a1, &v7);
    if (v7 <= 0)
      *a4 = v7;
  }
}

const char *sub_18BD99684(uint64_t a1, const icu::UnicodeString *a2, UChar **a3, int *a4)
{
  const char *v4;
  uint64_t MetaZoneID;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (*a4 > 0)
    return 0;
  MetaZoneID = icu::ZoneMeta::findMetaZoneID(a3, a2);
  if (!memcmp(a2, &unk_18BE2BC00, 0x38uLL))
  {
    v4 = "<empty>";
  }
  else
  {
    v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x40, v9);
    v4 = (const char *)v11;
    if (!v11)
    {
      *a4 = 7;
      return v4;
    }
    *((_BYTE *)v11 + 56) = 0;
    v12 = *(_OWORD *)a2;
    v13 = *((_OWORD *)a2 + 1);
    v14 = *((_OWORD *)a2 + 2);
    v11[6] = *((_QWORD *)a2 + 6);
    *((_OWORD *)v11 + 1) = v13;
    *((_OWORD *)v11 + 2) = v14;
    *(_OWORD *)v11 = v12;
    *((_BYTE *)v11 + 57) = 0;
  }
  uhash_put(a1, MetaZoneID, (uint64_t)v4, a4);
  return v4;
}

void *sub_18BD99750(uint64_t a1, uint64_t a2, UChar **a3, unsigned int *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unsigned int v12;
  char v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v22, a3);
  v7 = 0;
  while ((SWORD4(v22) & 0x80000000) == 0)
  {
    v8 = (unint64_t)WORD4(v22) >> 5;
    if (v7 >= v8)
      goto LABEL_14;
LABEL_7:
    if (v8 > v7)
    {
      v9 = (BYTE8(v22) & 2) != 0 ? (unint64_t)&v22 | 0xA : *((_QWORD *)&v23 + 1);
      if (*(_WORD *)(v9 + 2 * v7) == 47)
        icu::UnicodeString::setCharAt((icu::UnicodeString *)&v22, v7, 58);
    }
    ++v7;
  }
  v8 = SHIDWORD(v22);
  if ((uint64_t)v7 < SHIDWORD(v22))
  {
    v8 = HIDWORD(v22);
    goto LABEL_7;
  }
LABEL_14:
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v13 = 0u;
  v14 = 0u;
  icu::UnicodeString::extract((uint64_t)&v22, 0, v8, v13, 129);
  v12 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  ures_getAllItemsWithFallback(a2, v13, a1, (int *)&v12);
  v10 = (void *)v12;
  if ((int)v12 <= 0)
    *a4 = v12;
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v22);
}

uint64_t *sub_18BD998C4(uint64_t a1, const icu::UnicodeString *a2, icu::ZoneMeta *a3, int *a4)
{
  uint64_t *v4;
  uint64_t v9;
  unint64_t v10;
  const void *TerminatedBuffer;
  int v12;
  size_t v13;
  void *v14;
  uint64_t TimeZoneID;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  void (**v24)(icu::UnicodeString *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  if (*(_QWORD *)a2)
  {
    v9 = 0;
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
    v28 = 0;
    v27 = 0u;
    v24 = off_1E2256B38;
    LOWORD(v25) = 2;
    sub_18BD9A3FC((uint64_t)a3, (int32_t *)&v24);
    LODWORD(v10) = (unsigned __int16)v25 >> 5;
    if ((v25 & 0x8000u) == 0)
      v10 = v10;
    else
      v10 = DWORD1(v25);
    if ((int)v10 < 1)
    {
      v9 = 0;
    }
    else
    {
      TerminatedBuffer = (const void *)icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)&v24);
      v12 = (unsigned __int16)v25 >> 5;
      if ((v25 & 0x8000u) != 0)
        v12 = DWORD1(v25);
      v13 = 2 * v12 + 2;
      v14 = uprv_malloc(v13);
      if (!v14)
      {
        *a4 = 7;
        icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)&v24);
        return 0;
      }
      v9 = (uint64_t)v14;
      memcpy(v14, TerminatedBuffer, v13);
    }
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
  }
  TimeZoneID = icu::ZoneMeta::findTimeZoneID(a3, a2);
  v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x40, v16);
  v4 = v18;
  if (v18)
  {
    *((_BYTE *)v18 + 56) = 0;
    v19 = *(_OWORD *)a2;
    v20 = *((_OWORD *)a2 + 1);
    v21 = *((_OWORD *)a2 + 2);
    v18[6] = *((_QWORD *)a2 + 6);
    *((_OWORD *)v18 + 1) = v20;
    *((_OWORD *)v18 + 2) = v21;
    *(_OWORD *)v18 = v19;
    if (v9)
    {
      *v18 = v9;
      v22 = 1;
    }
    else
    {
      v22 = 0;
    }
    *((_BYTE *)v18 + 57) = v22;
    uhash_put(a1, TimeZoneID, (uint64_t)v18, a4);
  }
  else
  {
    *a4 = 7;
  }
  return v4;
}

uint64_t sub_18BD99A94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UErrorCode *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v13)();
  int v14;
  int v15;
  uint64_t v16;

  v14 = a4;
  v15 = 0;
  v13 = off_1E22676A8;
  v16 = 0;
  umtx_lock((icu::UMutex *)&unk_1ECD282D8);
  v9 = sub_18BD99BD8(a1, (uint64_t)&v13, a2, a3, a5);
  v10 = 0;
  if (*(int *)a5 <= 0)
  {
    v10 = v9;
    if (!v9)
    {
      sub_18BD99C88(a1, a5);
      v11 = sub_18BD99BD8(a1, (uint64_t)&v13, a2, a3, a5);
      if (*(int *)a5 > 0)
      {
LABEL_4:
        v10 = 0;
        goto LABEL_6;
      }
      v10 = v11;
      if (!v11)
      {
        sub_18BD99D8C(a1, (int *)a5);
        sub_18BD99C88(a1, a5);
        *(_BYTE *)(a1 + 256) = 1;
        if (*(int *)a5 > 0)
          goto LABEL_4;
        v10 = sub_18BD99BD8(a1, (uint64_t)&v13, a2, a3, a5);
      }
    }
  }
LABEL_6:
  umtx_unlock((std::mutex **)&unk_1ECD282D8);
  v13 = off_1E22676A8;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return v10;
}

uint64_t sub_18BD99BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  int v6;
  uint64_t result;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v6 = a4;
  icu::TextTrieMap::search((icu::TextTrieMap *)(a1 + 264), a3, a4, (uint64_t (***)(_QWORD, _QWORD, _QWORD *, int *))a2, a5);
  if (*(int *)a5 > 0)
    return 0;
  result = *(_QWORD *)(a2 + 16);
  v11 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 12) = 0;
  if (result)
  {
    v12 = *(unsigned __int16 *)(a3 + 8);
    v13 = (__int16)v12;
    v14 = v12 >> 5;
    if (v13 < 0)
      v14 = *(_DWORD *)(a3 + 12);
    if (v11 != v14 - v6 && !*(_BYTE *)(a1 + 256))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t sub_18BD99C88(uint64_t result, UErrorCode *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(int *)a2 <= 0)
  {
    v3 = result;
    v5 = -1;
    v4 = uhash_nextElement(*(uint64_t **)(result + 248), &v5);
    if (v4)
    {
      while (1)
      {
        if (*(char **)(v4 + 8) != "<empty>")
        {
          result = (uint64_t)sub_18BD9B8A8(*(_BYTE **)(v4 + 8), *(_QWORD *)(v4 + 16), 0, v3 + 264, a2);
          if (*(int *)a2 >= 1)
            break;
        }
        v4 = uhash_nextElement(*(uint64_t **)(v3 + 248), &v5);
        if (!v4)
          goto LABEL_7;
      }
    }
    else
    {
LABEL_7:
      v5 = -1;
      for (result = uhash_nextElement(*(uint64_t **)(v3 + 240), &v5);
            result;
            result = uhash_nextElement(*(uint64_t **)(v3 + 240), &v5))
      {
        if (*(char **)(result + 8) != "<empty>")
        {
          result = (uint64_t)sub_18BD9B8A8(*(_BYTE **)(result + 8), 0, *(_QWORD *)(result + 16), v3 + 264, a2);
          if (*(int *)a2 >= 1)
            break;
        }
      }
    }
  }
  return result;
}

void sub_18BD99D8C(uint64_t a1, int *a2)
{
  uint64_t TimeZoneIDEnumeration;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  UChar **v8;
  uint64_t v9;
  uint64_t TerminatedBuffer;
  void *v11;
  BOOL v12;
  _QWORD v13[2];
  void *v14;
  _OWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 257))
  {
    *(_BYTE *)(a1 + 257) = 1;
    v13[0] = 0;
    v13[1] = 0;
    v14 = 0;
    sub_18BD9B988(v13, a1, a2);
    sub_18BD9A240((uint64_t)v13, a2);
    if (*a2 <= 0)
    {
      TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(1, 0, 0, a2);
      v5 = TimeZoneIDEnumeration;
      if (*a2 <= 0)
      {
        v6 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)TimeZoneIDEnumeration + 56))(TimeZoneIDEnumeration, a2);
        if (v6)
          v7 = *a2 <= 0;
        else
          v7 = 0;
        if (v7)
        {
          v8 = (UChar **)v6;
          do
          {
            memset(v15, 0, sizeof(v15));
            icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, v8);
            v9 = *(_QWORD *)(a1 + 240);
            TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v15);
            if (!uhash_get(v9, TerminatedBuffer))
              sub_18BD98C10(a1, v8, a2);
            icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v15);
            v8 = (UChar **)(*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 56))(v5, a2);
            if (v8)
              v12 = *a2 < 1;
            else
              v12 = 0;
          }
          while (v12);
        }
      }
      else if (!TimeZoneIDEnumeration)
      {
        goto LABEL_19;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
LABEL_19:
    v13[0] = off_1E2267760;
    uhash_close((void **)v14);
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v13);
  }
}

void sub_18BD99F24(void ***a1)
{
  *a1 = (void **)off_1E2267760;
  uhash_close(a1[2]);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

void sub_18BD99F58(void ***a1)
{
  void *v2;

  *a1 = (void **)off_1E2267760;
  uhash_close(a1[2]);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD99F90(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_1ECD282D8);
    sub_18BD99D8C(a1, a2);
    umtx_unlock((std::mutex **)&unk_1ECD282D8);
  }
}

void sub_18BD99FF4(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, icu::UnicodeString *a5, int *a6, double a7)
{
  UChar **v7;
  int *v8;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  void (**v17)(icu::UnicodeString *__hidden);
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  const UChar *v21;
  unint64_t v22;
  uint64_t v23;
  void (**v24)(icu::UnicodeString *__hidden);
  UChar **v25;
  char *v26;
  int *v27;
  int v28;
  int v29;
  const UChar *v31;
  void (**v32)(icu::UnicodeString *__hidden);
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*a6 <= 0)
  {
    v7 = (UChar **)a2;
    if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
    {
      v8 = a6;
      umtx_lock((icu::UMutex *)&unk_1ECD282D8);
      v13 = sub_18BD98CE4(a1, v7, v8);
      v14 = *v8;
      umtx_unlock((std::mutex **)&unk_1ECD282D8);
      if (v14 <= 0 && a4 >= 1)
      {
        v15 = 0;
        v16 = a4;
        v17 = off_1E2256B38;
        do
        {
          v19 = *a3++;
          v18 = v19;
          v20 = sub_18BD9B830(v19);
          if ((v20 & 0x80000000) == 0)
          {
            v21 = *(const UChar **)(v13 + 8 * v20);
            if (v21)
              goto LABEL_19;
          }
          if (!v15)
          {
            v36 = 0;
            v34 = 0u;
            v35 = 0u;
            v33 = 0u;
            v32 = v17;
            LOWORD(v33) = 2;
            (*(void (**)(uint64_t, UChar **, void (***)(icu::UnicodeString *__hidden), double))(*(_QWORD *)a1 + 56))(a1, v7, &v32, a7);
            v22 = (unsigned __int16)v33;
            v15 = "<empty>";
            if ((unsigned __int16)v33 >= 0x20u)
            {
              v23 = v13;
              v24 = v17;
              v25 = v7;
              umtx_lock((icu::UMutex *)&unk_1ECD282D8);
              v26 = sub_18BD98E5C(a1, (uint64_t)&v32, v8);
              v27 = v8;
              v28 = *v8;
              if (v26)
                v15 = v26;
              else
                v15 = "<empty>";
              umtx_unlock((std::mutex **)&unk_1ECD282D8);
              if (v28 > 0)
              {
                icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v32);
                return;
              }
              v8 = v27;
              v7 = v25;
              v17 = v24;
              v13 = v23;
            }
            icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v32);
          }
          if (v15 == "<empty>" || (v29 = sub_18BD9B830(v18), v29 < 0) || (v21 = *(const UChar **)&v15[8 * v29]) == 0)
          {
            icu::UnicodeString::setToBogus(a5);
          }
          else
          {
LABEL_19:
            v31 = v21;
            icu::UnicodeString::setTo(a5, 1, &v31, -1);
          }
          a5 = (icu::UnicodeString *)((char *)a5 + 64);
          --v16;
        }
        while (v16);
      }
    }
  }
}

void sub_18BD9A240(uint64_t a1, int *a2)
{
  uint64_t i;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t j;
  void *v10;
  uint64_t v11;
  uint64_t k;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  ures_getAllItemsWithFallback(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 232), "", a1, a2);
  if (*a2 <= 0)
  {
    v13 = -1;
    for (i = uhash_nextElement(*(uint64_t **)(a1 + 16), &v13); i; i = uhash_nextElement(*(uint64_t **)(a1 + 16), &v13))
    {
      v5 = *(char **)(i + 8);
      if (v5 != "<dummy>")
      {
        v6 = *(char **)(i + 16);
        if (sub_18BD9BA24(a1, v6))
        {
          v16 = 0uLL;
          v17 = 0uLL;
          v14 = 0uLL;
          v15 = 0uLL;
          v7 = strlen(v6);
          icu::UnicodeString::UnicodeString(&v14, v6 + 5, (v7 - 5), 0);
          v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 248);
          for (j = 8; j != 64; j += 8)
          {
            if (*(_UNKNOWN **)&v5[j] == &unk_18BE2BC38)
              *(_QWORD *)&v5[j] = 0;
          }
          sub_18BD99684(v8, (const icu::UnicodeString *)(v5 + 8), (UChar **)&v14, a2);
        }
        else
        {
          v16 = 0uLL;
          v17 = 0uLL;
          v14 = 0uLL;
          v15 = 0uLL;
          sub_18BD9BA78((uint64_t)v6, (uint64_t)&v14);
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 240);
          for (k = 8; k != 64; k += 8)
          {
            if (*(_UNKNOWN **)&v5[k] == &unk_18BE2BC38)
              *(_QWORD *)&v5[k] = 0;
          }
          sub_18BD998C4(v11, (const icu::UnicodeString *)(v5 + 8), (icu::ZoneMeta *)&v14, a2);
        }
        icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14);
        if (*a2 >= 1)
          break;
      }
    }
  }
}

icu::UnicodeString *sub_18BD9A3FC(uint64_t a1, int32_t *this)
{
  int v4;
  int v5;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int32_t v10;
  int IndexOf;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int32_t v27;
  int32_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  void *v32;
  _BYTE v33[8];
  unsigned __int16 v34;
  int v35;
  _BYTE v36[8];
  unsigned __int16 v37;
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int16 *)(a1 + 8) < 0x20u
    || icu::UnicodeString::doEqualsSubstring(a1, 0, 4, (uint64_t)"E", 0, 4)
    || icu::UnicodeString::doEqualsSubstring(a1, 0, 8, (uint64_t)&aTcSystemvRiyad[3], 0, 8))
  {
    goto LABEL_8;
  }
  if (*(__int16 *)(a1 + 8) < 0)
  {
    v5 = *(_DWORD *)(a1 + 12);
    v4 = v5 & (v5 >> 31);
  }
  else
  {
    v4 = 0;
    v5 = *(unsigned __int16 *)(a1 + 8) >> 5;
  }
  if ((int)icu::UnicodeString::indexOf(a1, (uint64_t)&aTcSystemvRiyad[11], 0, 7, v4, v5 - v4) > 0)
    goto LABEL_8;
  v7 = *(unsigned __int16 *)(a1 + 8);
  v8 = (__int16)v7;
  v9 = v7 >> 5;
  v10 = v8 >= 0 ? v9 : *(_DWORD *)(a1 + 12);
  IndexOf = icu::UnicodeString::doLastIndexOf(a1, 0x2Fu, 0, v10);
  if (IndexOf < 1)
    goto LABEL_8;
  v12 = IndexOf;
  v13 = IndexOf + 1;
  v14 = *(unsigned __int16 *)(a1 + 8);
  v15 = (__int16)v14;
  v16 = v14 >> 5;
  if (v15 < 0)
    v16 = *(_DWORD *)(a1 + 12);
  if (v13 >= v16)
  {
LABEL_8:
    icu::UnicodeString::setToBogus((icu::UnicodeString *)this);
    return (icu::UnicodeString *)this;
  }
  icu::UnicodeString::unBogus((uint64_t)this);
  v17 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    v18 = *(_DWORD *)(a1 + 12);
    if (v18 <= v12)
      goto LABEL_21;
  }
  else if (v12 >= v17 >> 5)
  {
    v18 = v17 >> 5;
LABEL_21:
    v13 = v18;
  }
  v19 = (__int16)v17;
  v20 = *((unsigned __int16 *)this + 4);
  v21 = (__int16)v20;
  v22 = v20 >> 5;
  if (v21 >= 0)
    v23 = v22;
  else
    v23 = this[3];
  v24 = v17 >> 5;
  if (v19 < 0)
    v24 = *(_DWORD *)(a1 + 12);
  icu::UnicodeString::doReplace((icu::UnicodeString *)this, 0, v23, (const icu::UnicodeString *)a1, v13, v24 - v13);
  icu::UnicodeString::UnicodeString((uint64_t)v36, 95);
  icu::UnicodeString::UnicodeString((uint64_t)v33, 32);
  v25 = *((unsigned __int16 *)this + 4);
  v26 = (__int16)v25;
  v27 = v25 >> 5;
  if (v26 >= 0)
    v28 = v27;
  else
    v28 = this[3];
  if ((v37 & 0x8000u) == 0)
    v29 = v37 >> 5;
  else
    v29 = v38;
  v30 = v34 >> 5;
  if ((v34 & 0x8000u) != 0)
    v30 = v35;
  icu::UnicodeString::findAndReplace((icu::UnicodeString *)this, 0, v28, (const icu::UnicodeString *)v36, 0, v29, (const icu::UnicodeString *)v33, 0, v30);
  icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v33);
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v36);
  return (icu::UnicodeString *)this;
}

uint64_t sub_18BD9A694(uint64_t a1)
{
  void *v2;
  void **v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E2267790;
  v2 = *(void **)(a1 + 8);
  if (v2)
    uprv_free(v2);
  v3 = *(void ***)(a1 + 16);
  if (v3)
  {
    if (*(int *)(a1 + 24) >= 1)
    {
      v4 = 0;
      do
        uprv_free(v3[v4++]);
      while ((int)v4 < *(_DWORD *)(a1 + 24));
      v3 = *(void ***)(a1 + 16);
    }
    uprv_free(v3);
  }
  return a1;
}

void sub_18BD9A714(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BD9A694(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BD9A728(uint64_t a1, const char *a2)
{
  uint64_t *result;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  const UChar *StringByKey;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  void **v19;
  void *v20;
  int Size;
  void **v22;
  uint64_t v23;
  const UChar *StringByIndex;
  const UChar *v25;
  char *v26;
  int32_t length[2];

  result = 0;
  if (a1 && a2)
  {
    if (!*a2)
      return 0;
    *(_QWORD *)length = 0;
    v4 = (_QWORD *)ures_getByKey(a1, a2, 0, &length[1]);
    result = 0;
    if (length[1] <= 0)
    {
      result = (uint64_t *)uprv_malloc(0x10uLL);
      if (result)
      {
        v5 = result;
        v6 = 0;
        v7 = 0;
        do
        {
          while (1)
          {
            v8 = v6;
            length[1] = 0;
            StringByKey = ures_getStringByKey((uint64_t)v4, off_1E22677A0[v6], length, &length[1]);
            if (length[1] > 0 || length[0] == 0)
              break;
            v5[v8] = (uint64_t)StringByKey;
            v6 = 1;
            v7 = 1;
            if (v8)
              goto LABEL_17;
          }
          v5[v8] = 0;
          v6 = 1;
        }
        while (!v8);
        if ((v7 & 1) == 0)
        {
          v18 = v5;
          goto LABEL_29;
        }
LABEL_17:
        v11 = ures_getByKey((uint64_t)v4, "parseRegions", 0, &length[1]);
        v12 = (_QWORD *)v11;
        if (length[1] <= 0)
        {
          Size = ures_getSize(v11);
          v14 = Size;
          if (Size <= 0)
          {
            v13 = 0;
          }
          else
          {
            v22 = (void **)uprv_malloc(8 * Size);
            v13 = v22;
            if (v22)
            {
              bzero(v22, 8 * v14);
              v23 = 0;
              while (1)
              {
                length[1] = 0;
                StringByIndex = ures_getStringByIndex((uint64_t)v12, v23, length, &length[1]);
                if (length[1] > 0)
                  break;
                v25 = StringByIndex;
                v26 = (char *)uprv_malloc(length[0] + 1);
                v13[v23] = v26;
                if (!v26)
                  break;
                u_UCharsToChars(v25, v26, length[0]);
                *((_BYTE *)v13[v23++] + length[0]) = 0;
                if ((_DWORD)v14 == (_DWORD)v23)
                  goto LABEL_19;
              }
              v15 = 0;
              goto LABEL_20;
            }
          }
        }
        else
        {
          v13 = 0;
          LODWORD(v14) = 0;
        }
LABEL_19:
        v15 = 1;
LABEL_20:
        ures_close(v12);
        ures_close(v4);
        if ((v15 & 1) != 0)
        {
          result = icu::UMemory::operator new(v17, (icu::UMemory *)0x20, v16);
          if (result)
          {
            *result = (uint64_t)off_1E2267790;
            result[1] = (uint64_t)v5;
            result[2] = (uint64_t)v13;
            *((_DWORD *)result + 6) = v14;
          }
          return result;
        }
        uprv_free(v5);
        if (!v13)
          return 0;
        if ((int)v14 >= 1)
        {
          v19 = v13;
          do
          {
            v20 = *v19++;
            uprv_free(v20);
            LODWORD(v14) = v14 - 1;
          }
          while ((_DWORD)v14);
        }
        v18 = v13;
LABEL_29:
        uprv_free(v18);
        return 0;
      }
    }
  }
  return result;
}

_QWORD *sub_18BD9A96C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E22677C0;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18BD9A9AC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E22677C0;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BD9A9EC(uint64_t a1, unint64_t a2, _BYTE *a3, int *a4)
{
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char **v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  UErrorCode *v22;
  icu::TimeZoneNames::MatchInfoCollection *v23;
  uint64_t *v24;
  void *v25;
  int v26;
  uint64_t v28;
  UChar *v29[9];

  v29[8] = *(UChar **)MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  if (!*(_QWORD *)a3)
    return 1;
  if (a3[14])
  {
    v7 = *(_DWORD *)(*(_QWORD *)a3 + 8);
    if (v7 < 1)
      return 1;
  }
  else
  {
    v7 = 1;
  }
  v26 = a2;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *(_QWORD *)a3;
    if (a3[14])
      v11 = icu::UVector::elementAt(*(icu::UVector **)a3, v8);
    if (!v11 || (*(_DWORD *)(a1 + 8) & *(_DWORD *)(v11 + 8)) == 0)
      goto LABEL_33;
    v12 = *(const char ***)(v11 + 16);
    if (!v12)
    {
      if (!v9)
      {
        v10 = v11;
        v9 = v11;
      }
      goto LABEL_33;
    }
    v13 = *(unsigned int *)(v11 + 24);
    if ((int)v13 <= 0)
    {
      if (!v10)
        v10 = v11;
      goto LABEL_33;
    }
    v14 = *(const char **)(a1 + 24);
    if (!strcmp(v14, *v12))
    {
      v18 = 1;
      v10 = v11;
    }
    else
    {
      v28 = v9;
      v15 = 1;
      while (1)
      {
        v16 = v15;
        if (v13 == v15)
          break;
        v17 = strcmp(v14, v12[v15]);
        v15 = v16 + 1;
        if (!v17)
        {
          v10 = v11;
          break;
        }
      }
      v18 = v16 < v13;
      v9 = v28;
    }
    v19 = v10 ? v10 : v11;
    if (v18)
      break;
    v10 = v19;
LABEL_33:
    ++v8;
  }
  while (v8 != v7);
  if (v10)
  {
    v20 = *(unsigned int *)(v10 + 8);
    v21 = *(unsigned __int8 *)(v10 + 12);
    if (*(_BYTE *)(v10 + 12))
    {
      v22 = (UErrorCode *)a4;
      if ((_DWORD)v20 == 32 || (_DWORD)v20 == 16)
      {
        v21 = 8;
        if ((~*(_DWORD *)(a1 + 8) & 0x30) != 0)
          v20 = v20;
        else
          v20 = 8;
      }
    }
    else
    {
      v22 = (UErrorCode *)a4;
    }
    v23 = *(icu::TimeZoneNames::MatchInfoCollection **)(a1 + 16);
    if (v23)
    {
LABEL_45:
      if (*(int *)v22 <= 0)
      {
        icu::UnicodeString::UnicodeString((uint64_t)v29, *(_QWORD *)v10, 0xFFFFFFFFLL);
        icu::TimeZoneNames::MatchInfoCollection::addMetaZone(v23, v20, v26, v29, v22);
        icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v29);
        if (*(int *)v22 <= 0 && *(_DWORD *)(a1 + 12) < v26)
          *(_DWORD *)(a1 + 12) = v26;
      }
    }
    else
    {
      v24 = icu::UMemory::operator new((uint64_t *)v21, (icu::UMemory *)0x10, a2);
      if (v24)
      {
        v23 = (icu::TimeZoneNames::MatchInfoCollection *)v24;
        *(_QWORD *)(a1 + 16) = icu::TimeZoneNames::MatchInfoCollection::MatchInfoCollection(v24);
        goto LABEL_45;
      }
      *(_QWORD *)(a1 + 16) = 0;
      *v22 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return 1;
}

uint64_t sub_18BD9AC50(uint64_t a1, uint64_t a2)
{
  const char *v3;
  int v4;
  int Country;
  BOOL v7;
  _QWORD v9[2];
  int v10;
  void *v11[9];

  v11[8] = *(void **)MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E22677E8;
  v3 = (const char *)(a1 + 34);
  icu::Locale::Locale((icu::Locale *)(a1 + 8), a2);
  v4 = strlen(v3);
  if (v4)
  {
    if (v4 <= 3)
    {
      strcpy((char *)(a1 + 232), v3);
      return a1;
    }
LABEL_13:
    *(_DWORD *)(a1 + 232) = 3223600;
    return a1;
  }
  v10 = 0;
  memset(&v11[1], 0, 56);
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  v9[0] = 0;
  v9[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v9, (uint64_t)v11);
  ulocimp_addLikelySubtags(*(_QWORD *)(a1 + 48), v9, &v10);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v9);
  Country = uloc_getCountry((uint64_t)v11[0], (char *)(a1 + 232), 4, &v10);
  v7 = v10 < 1 && Country < 4;
  if (BYTE4(v11[1]))
    uprv_free(v11[0]);
  if (!v7)
    goto LABEL_13;
  return a1;
}

void sub_18BD9AD7C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E22677E8;
  icu::Locale::~Locale((icu::Locale *)(a1 + 8));
  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);
}

void sub_18BD9ADAC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E22677E8;
  icu::Locale::~Locale((icu::Locale *)(a1 + 8));
  icu::TimeZoneNames::~TimeZoneNames((icu::TimeZoneNames *)a1);
  icu::UMemory::operator delete(v2);
}

BOOL sub_18BD9ADE0(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t *sub_18BD9ADEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  if (result)
    return (uint64_t *)sub_18BD9AC50((uint64_t)result, a1 + 8);
  return result;
}

uint64_t *sub_18BD9AE1C(uint64_t a1, icu::ZoneMeta *a2)
{
  return sub_18BD990A8(a2);
}

uint64_t *sub_18BD9AE24(uint64_t a1, icu::ZoneMeta *a2, const icu::UnicodeString *a3)
{
  return sub_18BD99134(a2, a3);
}

const icu::UnicodeString *sub_18BD9AE30(double a1, uint64_t a2, icu::ZoneMeta *a3, const icu::UnicodeString *a4)
{
  icu::ZoneMeta::getMetazoneID(a3, a4, a1, a4);
  return a4;
}

const icu::UnicodeString *sub_18BD9AE5C(uint64_t a1, icu::ZoneMeta *a2, uint64_t a3, const icu::UnicodeString *a4)
{
  return sub_18BD992EC(a2, a3, a4);
}

icu::UnicodeString *sub_18BD9AE6C(int a1, uint64_t a2, int a3, icu::UnicodeString *this)
{
  uint64_t *v7;
  const UChar **v9;
  const UChar *v10;
  const UChar *v12;
  int v13;

  icu::UnicodeString::setToBogus(this);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x20u)
  {
    v13 = 0;
    v7 = sub_18BD9AF20(a2, &v13);
    if (v13 <= 0 && v7 != 0)
    {
      v9 = (const UChar **)v7[1];
      if (v9)
      {
        if (a3 != 16)
        {
          if (a3 != 32)
            return this;
          ++v9;
        }
        v10 = *v9;
        if (v10)
        {
          v12 = v10;
          icu::UnicodeString::setTo(this, 1, &v12, -1);
        }
      }
    }
  }
  return this;
}

uint64_t *sub_18BD9AF20(uint64_t a1, int *a2)
{
  uint64_t *v2;
  unsigned int v6;
  int32x2_t *v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  const icu::UnicodeString *v15;
  uint64_t MetaZoneID;
  const char *v17;
  UChar *v18;
  _OWORD v19[8];
  char v20;
  _OWORD v21[16];
  __int16 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*a2 <= 0)
  {
    v6 = atomic_load(&dword_1EE00A260);
    if (v6 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A260))
    {
      if (dword_1EE00A264 >= 1)
      {
        v2 = 0;
        *a2 = dword_1EE00A264;
        return v2;
      }
    }
    else
    {
      v7 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a2);
      qword_1EE00A250 = (uint64_t)v7;
      v8 = *a2;
      if (*a2 < 1)
      {
        uhash_setValueDeleter((uint64_t)v7, (uint64_t)sub_18BD9BB98);
        sub_18BDA1768(0xFu, (uint64_t)sub_18BD9BB34);
        v8 = *a2;
      }
      else
      {
        qword_1EE00A250 = 0;
      }
      dword_1EE00A264 = v8;
      icu::umtx_initImplPostInit(&dword_1EE00A260);
    }
    if (*a2 <= 0)
    {
      v22 = 0;
      memset(v21, 0, sizeof(v21));
      v18 = (UChar *)v21;
      icu::UnicodeString::extract(a1, &v18, 129, a2);
      v9 = *(unsigned __int16 *)(a1 + 8);
      v10 = (__int16)v9;
      v11 = v9 >> 5;
      if (v10 < 0)
        v11 = *(_DWORD *)(a1 + 12);
      *((_WORD *)v21 + (int)v11) = 0;
      umtx_lock((icu::UMutex *)&unk_1EE00A200);
      v12 = (char *)uhash_get(qword_1EE00A250, (uint64_t)v21);
      if (v12)
      {
        if (v12 == "<empty>")
          v2 = 0;
        else
          v2 = (uint64_t *)v12;
        goto LABEL_31;
      }
      v13 = ures_openDirect((uint64_t)"icudt74l-zone", (uint64_t)"tzdbNames", (uint64_t)a2);
      v14 = (_QWORD *)ures_getByKey(v13, "zoneStrings", v13, a2);
      if (*a2 <= 0)
      {
        v20 = 0;
        memset(v19, 0, sizeof(v19));
        sub_18BD9B57C((unsigned __int16 *)a1, v19);
        v2 = sub_18BD9A728((uint64_t)v14, (const char *)v19);
        MetaZoneID = icu::ZoneMeta::findMetaZoneID((UChar **)a1, v15);
        if (MetaZoneID)
        {
          if (v2)
            v17 = (const char *)v2;
          else
            v17 = "<empty>";
          uhash_put(qword_1EE00A250, MetaZoneID, (uint64_t)v17, a2);
          if (!v2 || *a2 <= 0)
            goto LABEL_30;
        }
        else if (!v2)
        {
LABEL_30:
          ures_close(v14);
LABEL_31:
          umtx_unlock((std::mutex **)&unk_1EE00A200);
          return v2;
        }
        (*(void (**)(uint64_t *))(*v2 + 8))(v2);
      }
      v2 = 0;
      goto LABEL_30;
    }
  }
  return 0;
}

icu::UnicodeString *sub_18BD9B1CC(int a1, int a2, int a3, icu::UnicodeString *this)
{
  icu::UnicodeString::setToBogus(this);
  return this;
}

uint64_t sub_18BD9B1F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, icu::ZoneMeta *a5)
{
  uint64_t result;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  UChar **v19;
  uint64_t *v20;
  const icu::UnicodeString *v21;
  uint64_t v22;
  UChar *v23;
  UChar *v24;
  const icu::UnicodeString *v25;
  uint64_t MetaZoneID;
  _DWORD *v27;
  _DWORD *v28;
  BOOL v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t (**v33)();
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  if (*(int *)a5 > 0)
    return 0;
  v11 = atomic_load(&dword_1EE00A258);
  if (v11 != 2 && icu::umtx_initImplPreInit(&dword_1EE00A258))
  {
    v13 = (uint64_t *)*(unsigned int *)a5;
    if ((int)v13 > 0)
      goto LABEL_50;
    v14 = icu::UMemory::operator new(v13, (icu::UMemory *)0x38, v12);
    if (!v14)
    {
      qword_1EE00A1F8 = 0;
      *(_DWORD *)a5 = 7;
      goto LABEL_50;
    }
    *v14 = (uint64_t)off_1E2267620;
    *((_BYTE *)v14 + 8) = 1;
    v14[3] = 0;
    v14[4] = 0;
    v14[2] = 0;
    *((_BYTE *)v14 + 40) = 1;
    v14[6] = (uint64_t)sub_18BD9BB28;
    qword_1EE00A1F8 = (uint64_t)v14;
    v15 = sub_18BD990A8(a5);
    v16 = v15;
    if (*(int *)a5 > 0)
    {
      if (!v15)
        goto LABEL_46;
      goto LABEL_45;
    }
    v17 = (*(uint64_t (**)(uint64_t *, icu::ZoneMeta *))(*v15 + 56))(v15, a5);
    if (v17)
      v18 = *(_DWORD *)a5 <= 0;
    else
      v18 = 0;
    if (!v18)
    {
LABEL_45:
      (*(void (**)(uint64_t *))(*v16 + 8))(v16);
      if (*(int *)a5 >= 1)
      {
LABEL_46:
        if (qword_1EE00A1F8)
          (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE00A1F8 + 8))(qword_1EE00A1F8);
        qword_1EE00A1F8 = 0;
        goto LABEL_50;
      }
      sub_18BDA1768(0xFu, (uint64_t)sub_18BD9BB34);
LABEL_50:
      dword_1EE00A25C = *(_DWORD *)a5;
      icu::umtx_initImplPostInit(&dword_1EE00A258);
      goto LABEL_51;
    }
    v19 = (UChar **)v17;
    while (1)
    {
      v20 = sub_18BD9AF20((uint64_t)v19, (int *)a5);
      if (*(int *)a5 > 0)
        goto LABEL_45;
      if (v20)
      {
        v22 = v20[1];
        if (v22)
        {
          v24 = *(UChar **)v22;
          v23 = *(UChar **)(v22 + 8);
        }
        else
        {
          v24 = 0;
          v23 = 0;
        }
        if ((unint64_t)v24 | (unint64_t)v23)
          break;
      }
LABEL_39:
      v19 = (UChar **)(*(uint64_t (**)(uint64_t *, icu::ZoneMeta *))(*v16 + 56))(v16, a5);
      if (v19)
        v29 = *(_DWORD *)a5 <= 0;
      else
        v29 = 0;
      if (!v29)
        goto LABEL_45;
    }
    v32 = v20[2];
    if (v32)
      v31 = *((_DWORD *)v20 + 6);
    else
      v31 = 0;
    if (v24 && v23)
    {
      v30 = u_strcmp(v24, v23) == 0;
      MetaZoneID = icu::ZoneMeta::findMetaZoneID(v19, v25);
    }
    else
    {
      MetaZoneID = icu::ZoneMeta::findMetaZoneID(v19, v21);
      v30 = 0;
      if (!v24)
        goto LABEL_35;
    }
    v27 = uprv_malloc(0x20uLL);
    if (!v27)
      goto LABEL_44;
    *(_QWORD *)v27 = MetaZoneID;
    v27[2] = 16;
    *((_BYTE *)v27 + 12) = v30;
    *((_QWORD *)v27 + 2) = v32;
    v27[6] = v31;
    icu::TextTrieMap::put(v24, (UErrorCode *)a5, qword_1EE00A1F8, v27, qword_1EE00A000);
LABEL_35:
    if (*(int *)a5 <= 0 && v23)
    {
      v28 = uprv_malloc(0x20uLL);
      if (!v28)
      {
LABEL_44:
        *(_DWORD *)a5 = 7;
        goto LABEL_45;
      }
      *(_QWORD *)v28 = MetaZoneID;
      v28[2] = 32;
      *((_BYTE *)v28 + 12) = v30;
      *((_QWORD *)v28 + 2) = v32;
      v28[6] = v31;
      icu::TextTrieMap::put(v23, (UErrorCode *)a5, qword_1EE00A1F8, v28, qword_1EE00A000);
    }
    goto LABEL_39;
  }
  if (dword_1EE00A25C >= 1)
  {
    result = 0;
    *(_DWORD *)a5 = dword_1EE00A25C;
    return result;
  }
LABEL_51:
  if (*(int *)a5 > 0)
    return 0;
  v33 = off_1E22677C0;
  v34 = a4;
  v35 = 0;
  v36 = 0;
  v37 = a1 + 232;
  icu::TextTrieMap::search((icu::TextTrieMap *)qword_1EE00A1F8, a2, a3, (uint64_t (***)(_QWORD, _QWORD, _QWORD *, int *))&v33, (UErrorCode *)a5);
  result = v36;
  if (*(int *)a5 >= 1)
  {
    v33 = off_1E22677C0;
    if (v36)
    {
      (*(void (**)(void))(*(_QWORD *)v36 + 8))();
      return 0;
    }
  }
  return result;
}

unsigned __int16 *sub_18BD9B57C(unsigned __int16 *result, _BYTE *a2)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  _OWORD v8[8];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = result[4];
  if (v3 <= 0x1F)
  {
    *a2 = 0;
  }
  else
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v4 = (__int16)v3;
    v5 = v3 >> 5;
    if (v4 >= 0)
      v6 = v5;
    else
      v6 = *((unsigned int *)result + 3);
    v7 = icu::UnicodeString::extract((uint64_t)result, 0, v6, (char *)v8, 129);
    *(_DWORD *)a2 = 1635018093;
    a2[4] = 58;
    result = (unsigned __int16 *)memcpy(a2 + 5, v8, v7);
    a2[v7 + 5] = 0;
  }
  return result;
}

_QWORD *sub_18BD9B650(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  _QWORD *result;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  char *v16;

  v15 = 0;
  v16 = a2;
  memset(v14, 0, sizeof(v14));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v14, a3, a5);
  if (*a5 <= 0)
  {
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, 0, (const char **)&v16, a3);
    if ((_DWORD)result)
    {
      v9 = 1;
      do
      {
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 96))(a3))
        {
          v10 = sub_18BD9BC3C((unsigned __int8 *)v16);
          if (v10 != -1)
          {
            v11 = a1 + 8 * v10;
            v13 = *(_QWORD *)(v11 + 8);
            v12 = (_QWORD *)(v11 + 8);
            if (!v13)
              *v12 = &unk_18BE2BC38;
          }
        }
        else
        {
          sub_18BD9BBBC(a1, (unsigned __int8 *)v16, (uint64_t)a3, (uint64_t)a5);
        }
        result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v14, v9++, (const char **)&v16, a3);
      }
      while ((_DWORD)result);
    }
  }
  return result;
}

_QWORD *sub_18BD9B748(_QWORD *a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  _QWORD *result;
  unsigned int v10;
  _OWORD v11[2];
  uint64_t v12;
  char *v13;

  v12 = 0;
  v13 = a2;
  memset(v11, 0, sizeof(v11));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v11, a3, a5);
  if (*a5 <= 0)
  {
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, 0, (const char **)&v13, a3);
    if ((_DWORD)result)
    {
      v10 = 1;
      do
      {
        result = (_QWORD *)(*(uint64_t (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3);
        if ((_DWORD)result == 2)
          result = sub_18BD9BCD0(a1, v13, (uint64_t)a3, a4, a5);
        if (*a5 >= 1)
          break;
        result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v11, v10++, (const char **)&v13, a3);
      }
      while ((_DWORD)result);
    }
  }
  return result;
}

uint64_t sub_18BD9B830(uint64_t result)
{
  if ((int)result > 15)
  {
    switch((_DWORD)result)
    {
      case 0x10:
        return 5;
      case 0x20:
        return 6;
      case 0x40:
        return 0;
      default:
        return 0xFFFFFFFFLL;
    }
  }
  else
  {
    switch((int)result)
    {
      case 1:
      case 2:
        return result;
      case 4:
        result = 3;
        break;
      case 8:
        result = 4;
        break;
      default:
        return 0xFFFFFFFFLL;
    }
  }
  return result;
}

_BYTE *sub_18BD9B8A8(_BYTE *result, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  _BYTE *v5;
  uint64_t v10;
  void *v11;
  uint64_t *v12;

  if (*(int *)a5 <= 0)
  {
    v5 = result;
    if (!result[56])
    {
      v10 = 0;
      result[56] = 1;
      while (1)
      {
        v11 = *(void **)&v5[8 * v10];
        if (v11)
        {
          result = uprv_malloc(0x18uLL);
          if (!result)
          {
            *a5 = U_MEMORY_ALLOCATION_ERROR;
            return result;
          }
          *((_QWORD *)result + 1) = a3;
          *((_QWORD *)result + 2) = a2;
          if (v10 > 6)
            v12 = 0;
          else
            v12 = (uint64_t *)*(unsigned int *)&asc_18BE2BC48[4 * v10];
          *(_DWORD *)result = (_DWORD)v12;
          result = icu::TextTrieMap::put(v11, a5, a4, result, v12);
          if (*(int *)a5 > 0 || v10 >= 6)
            return result;
        }
        else if (v10 > 5)
        {
          return result;
        }
        ++v10;
      }
    }
  }
  return result;
}

_QWORD *sub_18BD9B988(_QWORD *a1, uint64_t a2, int *a3)
{
  int32x2_t *v5;

  *a1 = off_1E2267760;
  a1[1] = a2;
  v5 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a3);
  a1[2] = v5;
  if (*a3 <= 0)
  {
    uhash_setKeyDeleter((uint64_t)v5, (uint64_t)uprv_free);
    uhash_setValueDeleter(a1[2], (uint64_t)sub_18BD9BA00);
  }
  return a1;
}

char *sub_18BD9BA00(char *result)
{
  if (result != "<dummy>" && result != 0)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL sub_18BD9BA24(int a1, char *__s)
{
  if (strlen(__s) < 5)
    return 0;
  return *(_DWORD *)__s == 1635018093 && __s[4] == 58;
}

icu::UnicodeString *sub_18BD9BA78@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  icu::UnicodeString *result;
  unint64_t i;
  int v5;
  unint64_t v6;
  uint64_t v7;

  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(a2, a1, 0xFFFFFFFFLL, 0);
  for (i = 0; ; ++i)
  {
    v5 = *(__int16 *)(a2 + 8);
    if (v5 < 0)
      break;
    if (i >= (unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5)
      return result;
    v6 = (unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5;
LABEL_7:
    if (v6 > i)
    {
      if ((v5 & 2) != 0)
        v7 = a2 + 10;
      else
        v7 = *(_QWORD *)(a2 + 24);
      if (*(_WORD *)(v7 + 2 * i) == 58)
        result = icu::UnicodeString::setCharAt((icu::UnicodeString *)a2, i, 47);
    }
  }
  if ((uint64_t)i < *(int *)(a2 + 12))
  {
    v6 = *(unsigned int *)(a2 + 12);
    goto LABEL_7;
  }
  return result;
}

void sub_18BD9BB28(void *a1)
{
  if (a1)
    uprv_free(a1);
}

uint64_t sub_18BD9BB34()
{
  if (qword_1EE00A250)
  {
    uhash_close((void **)qword_1EE00A250);
    qword_1EE00A250 = 0;
  }
  atomic_store(0, &dword_1EE00A260);
  if (qword_1EE00A1F8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE00A1F8 + 8))(qword_1EE00A1F8);
    qword_1EE00A1F8 = 0;
  }
  atomic_store(0, &dword_1EE00A258);
  return 1;
}

char *sub_18BD9BB98(char *result)
{
  if (result != "<empty>" && result != 0)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  return result;
}

void *sub_18BD9BBBC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  void *result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;

  result = (void *)sub_18BD9BC3C(a2);
  if ((_DWORD)result != -1)
  {
    v8 = a1 + 8 * (int)result;
    v10 = *(_QWORD *)(v8 + 8);
    v9 = (_QWORD *)(v8 + 8);
    if (!v10)
    {
      v11 = 0;
      if (a3)
        result = (void *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a3 + 32))(a3, &v11, a4);
      else
        result = &unk_18BE2BC38;
      *v9 = result;
    }
  }
  return result;
}

uint64_t sub_18BD9BC3C(unsigned __int8 *a1)
{
  int v1;
  int v2;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v1 = *a1;
  if (!*a1)
    return 0xFFFFFFFFLL;
  v2 = a1[1];
  if (!a1[1] || a1[2])
    return 0xFFFFFFFFLL;
  if (v1 == 115)
  {
    if (v2 == 100)
      v10 = 6;
    else
      v10 = -1;
    if (v2 == 115)
      v11 = 5;
    else
      v11 = v10;
    if (v2 == 103)
      return 4;
    else
      return v11;
  }
  else
  {
    v5 = v1 != 101 || v2 != 99;
    v6 = v5 << 31 >> 31;
    if (v2 == 100)
      v7 = 3;
    else
      v7 = -1;
    if (v2 == 115)
      v8 = 2;
    else
      v8 = v7;
    if (v2 == 103)
      v9 = 1;
    else
      v9 = v8;
    if (v1 == 108)
      return v9;
    else
      return v6;
  }
}

_QWORD *sub_18BD9BCD0(_QWORD *result, char *a2, uint64_t a3, uint64_t a4, int *a5)
{
  _QWORD *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t TerminatedBuffer;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    v9 = result;
    result = (_QWORD *)uhash_get(result[2], (uint64_t)a2);
    v10 = (char *)result;
    if (result)
    {
LABEL_3:
      if (v10 != "<dummy>")
        return (_QWORD *)(*(uint64_t (**)(char *, char *, uint64_t, uint64_t, int *))(*(_QWORD *)v10 + 24))(v10, a2, a3, a4, a5);
      return result;
    }
    memset(v17, 0, sizeof(v17));
    if (sub_18BD9BA24((int)v9, a2))
    {
      v11 = strlen(a2);
      icu::UnicodeString::UnicodeString(v17, a2 + 5, (v11 - 5), 0);
      v12 = *(_QWORD *)(v9[1] + 248);
    }
    else
    {
      sub_18BD9BA78((uint64_t)a2, (uint64_t)v17);
      v12 = *(_QWORD *)(v9[1] + 240);
    }
    TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v17);
    if (uhash_get(v12, TerminatedBuffer))
    {
      v10 = "<dummy>";
    }
    else
    {
      v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x40, v14);
      if (!v16)
      {
        *a5 = 7;
        return icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)v17);
      }
      v10 = (char *)v16;
      v15 = (uint64_t *)&off_1E22678A8;
      *v16 = (uint64_t)&off_1E22678A8;
      *(_OWORD *)(v16 + 1) = 0u;
      *(_OWORD *)(v16 + 3) = 0u;
      *(_OWORD *)(v16 + 5) = 0u;
      v16[7] = 0;
    }
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v17);
    result = sub_18BD9BEC8((int)v9, a2, a5);
    if (*a5 < 1)
    {
      result = (_QWORD *)uhash_put(v9[2], (uint64_t)result, (uint64_t)v10, a5);
      if (*a5 > 0)
        return result;
      goto LABEL_3;
    }
    if (v10 != "<dummy>")
      return (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

_BYTE *sub_18BD9BEC8(int a1, char *__s, _DWORD *a3)
{
  size_t v5;
  int v6;
  size_t v7;
  _BYTE *v8;
  _BYTE *v9;

  v5 = strlen(__s);
  v6 = v5;
  v7 = (uint64_t)((v5 << 32) + 0x100000000) >> 32;
  v8 = uprv_malloc(v7);
  v9 = v8;
  if (v8)
  {
    memcpy(v8, __s, v7);
    v9[v6] = 0;
  }
  else
  {
    *a3 = 7;
  }
  return v9;
}

icu::TimeZoneRule *icu::TimeZoneRule::TimeZoneRule(icu::TimeZoneRule *this, UChar **a2, int a3, int a4)
{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::TimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  return this;
}

icu::TimeZoneRule *icu::TimeZoneRule::TimeZoneRule(icu::TimeZoneRule *this, UChar **a2)
{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::TimeZoneRule *)((char *)this + 8), a2 + 1);
  *((_QWORD *)this + 9) = a2[9];
  return this;
}

void icu::TimeZoneRule::~TimeZoneRule(icu::TimeZoneRule *this)
{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::~UnicodeString((icu::TimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

uint64_t icu::TimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  return a1;
}

uint64_t icu::TimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
  {
    v5 = *(unsigned __int16 *)(a1 + 16);
    if ((v5 & 1) != 0)
    {
      if ((*(_WORD *)(a2 + 16) & 1) == 0)
        return 0;
LABEL_17:
      if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72))
        return *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76);
      return 0;
    }
    if ((v5 & 0x8000) != 0)
      v6 = *(_DWORD *)(a1 + 20);
    else
      v6 = v5 >> 5;
    result = 0;
    v7 = *(unsigned __int16 *)(a2 + 16);
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *(_DWORD *)(a2 + 20);
    if ((v7 & 1) == 0 && v6 == v8)
    {
      result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v6);
      if ((_DWORD)result)
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t icu::TimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) ^ 1;
}

UChar **icu::TimeZoneRule::getName(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(a2, this + 1);
  return a2;
}

uint64_t icu::TimeZoneRule::getRawOffset(icu::TimeZoneRule *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t icu::TimeZoneRule::getDSTSavings(icu::TimeZoneRule *this)
{
  return *((unsigned int *)this + 19);
}

BOOL icu::TimeZoneRule::isEquivalentTo(icu::TimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  _BOOL8 result;

  if (this == a2)
    return 1;
  if (!this)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)this - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
    return *((_DWORD *)this + 18) == *((_DWORD *)a2 + 18) && *((_DWORD *)this + 19) == *((_DWORD *)a2 + 19);
  return result;
}

void *icu::InitialTimeZoneRule::getStaticClassID(icu::InitialTimeZoneRule *this)
{
  return &unk_1EE00A268;
}

void *icu::InitialTimeZoneRule::getDynamicClassID(icu::InitialTimeZoneRule *this)
{
  return &unk_1EE00A268;
}

icu::InitialTimeZoneRule *icu::InitialTimeZoneRule::InitialTimeZoneRule(icu::InitialTimeZoneRule *this, UChar **a2, int a3, int a4)
{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(_QWORD *)this = off_1E2267A00;
  return this;
}

{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(_QWORD *)this = off_1E2267A00;
  return this;
}

icu::InitialTimeZoneRule *icu::InitialTimeZoneRule::InitialTimeZoneRule(icu::InitialTimeZoneRule *this, UChar **a2)
{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2 + 1);
  *((_QWORD *)this + 9) = a2[9];
  *(_QWORD *)this = off_1E2267A00;
  return this;
}

{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8), a2 + 1);
  *((_QWORD *)this + 9) = a2[9];
  *(_QWORD *)this = off_1E2267A00;
  return this;
}

void icu::InitialTimeZoneRule::~InitialTimeZoneRule(icu::InitialTimeZoneRule *this)
{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::~UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::~UnicodeString((icu::InitialTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::~UnicodeString(off_1E2267998, (icu::InitialTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v2);
}

uint64_t *icu::InitialTimeZoneRule::clone@<X0>(UChar **this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x50, a2);
  v5 = v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E2267998;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 1), this + 1);
    v5[9] = (uint64_t)this[9];
    *v5 = (uint64_t)off_1E2267A00;
  }
  return v5;
}

uint64_t icu::InitialTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  return a1;
}

uint64_t icu::InitialTimeZoneRule::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*a1 - 8), *(_QWORD *)(*a2 - 8));
  if ((_DWORD)result)
    return icu::TimeZoneRule::operator==((uint64_t)a1, (uint64_t)a2);
  return result;
}

uint64_t icu::InitialTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) ^ 1;
}

BOOL icu::InitialTimeZoneRule::isEquivalentTo(icu::InitialTimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  _BOOL8 result;

  if (this == a2)
    return 1;
  if (!this)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)this - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
    return icu::TimeZoneRule::isEquivalentTo(this, a2);
  return result;
}

uint64_t icu::InitialTimeZoneRule::getFirstStart(icu::InitialTimeZoneRule *this, int a2, int a3, double *a4)
{
  return 0;
}

uint64_t icu::InitialTimeZoneRule::getFinalStart(icu::InitialTimeZoneRule *this, int a2, int a3, double *a4)
{
  return 0;
}

uint64_t icu::InitialTimeZoneRule::getNextStart(icu::InitialTimeZoneRule *this, double a2, int a3, int a4, signed __int8 a5, double *a6)
{
  return 0;
}

uint64_t icu::InitialTimeZoneRule::getPreviousStart(icu::InitialTimeZoneRule *this, double a2, int a3, int a4, signed __int8 a5, double *a6)
{
  return 0;
}

void *icu::AnnualTimeZoneRule::getStaticClassID(icu::AnnualTimeZoneRule *this)
{
  return &unk_1EE00A269;
}

void *icu::AnnualTimeZoneRule::getDynamicClassID(icu::AnnualTimeZoneRule *this)
{
  return &unk_1EE00A269;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this, UChar **a2, int a3, int a4, const icu::DateTimeRule *a5, int a6, int a7)
{
  unint64_t v13;
  icu::DateTimeRule *v14;

  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(_QWORD *)this = off_1E2267A68;
  v14 = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)off_1E2267A68, (icu::UMemory *)0x28, v13);
  if (v14)
    icu::DateTimeRule::DateTimeRule(v14, a5);
  *((_QWORD *)this + 10) = v14;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this, UChar **a2, int a3, int a4, icu::DateTimeRule *a5, int a6, int a7)
{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(_QWORD *)this = off_1E2267A68;
  *((_QWORD *)this + 10) = a5;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

{
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), a2);
  *((_DWORD *)this + 18) = a3;
  *((_DWORD *)this + 19) = a4;
  *(_QWORD *)this = off_1E2267A68;
  *((_QWORD *)this + 10) = a5;
  *((_DWORD *)this + 22) = a6;
  *((_DWORD *)this + 23) = a7;
  return this;
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this, const icu::AnnualTimeZoneRule *a2)
{
  unint64_t v4;
  icu::DateTimeRule *v5;

  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8), (UChar **)a2 + 1);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *(_QWORD *)this = off_1E2267A68;
  v5 = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)off_1E2267A68, (icu::UMemory *)0x28, v4);
  if (v5)
    icu::DateTimeRule::DateTimeRule(v5, *((const icu::DateTimeRule **)a2 + 10));
  *((_QWORD *)this + 10) = v5;
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  return this;
}

void icu::AnnualTimeZoneRule::~AnnualTimeZoneRule(icu::AnnualTimeZoneRule *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2267A68;
  v2 = *((_QWORD *)this + 10);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::~UnicodeString((icu::AnnualTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::AnnualTimeZoneRule::~AnnualTimeZoneRule(this);
  icu::UMemory::operator delete(v1);
}

icu::AnnualTimeZoneRule *icu::AnnualTimeZoneRule::clone@<X0>(icu::AnnualTimeZoneRule *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::AnnualTimeZoneRule *result;

  result = (icu::AnnualTimeZoneRule *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
    return icu::AnnualTimeZoneRule::AnnualTimeZoneRule(result, this);
  return result;
}

uint64_t icu::AnnualTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v5 = *(_QWORD *)(a1 + 80);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    icu::DateTimeRule::clone(*(icu::DateTimeRule **)(a2 + 80), v4);
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  return a1;
}

BOOL icu::AnnualTimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
  {
    result = icu::DateTimeRule::operator==(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
    if (result)
      return *(_DWORD *)(a1 + 88) == *(_DWORD *)(a2 + 88) && *(_DWORD *)(a1 + 92) == *(_DWORD *)(a2 + 92);
  }
  return result;
}

uint64_t icu::AnnualTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) ^ 1;
}

uint64_t icu::AnnualTimeZoneRule::getRule(icu::AnnualTimeZoneRule *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t icu::AnnualTimeZoneRule::getStartYear(icu::AnnualTimeZoneRule *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t icu::AnnualTimeZoneRule::getEndYear(icu::AnnualTimeZoneRule *this)
{
  return *((unsigned int *)this + 23);
}

uint64_t icu::AnnualTimeZoneRule::getStartInYear(icu::AnnualTimeZoneRule *this, int a2, int a3, int a4, double *a5)
{
  int DateRuleType;
  int v12;
  int v13;
  int v14;
  double v15;
  int RuleWeekInMonth;
  int RuleMonth;
  int v18;
  double v19;
  int v20;
  int v21;
  int RuleDayOfMonth;
  int v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v31;
  double v32;
  int v33;
  int RuleDayOfWeek;
  _BOOL4 v35;
  int v36;
  int v37;

  if (*((_DWORD *)this + 22) > a2 || *((_DWORD *)this + 23) < a2)
    return 0;
  DateRuleType = icu::DateTimeRule::getDateRuleType(*((icu::DateTimeRule **)this + 10));
  if (DateRuleType == 1)
  {
    RuleWeekInMonth = icu::DateTimeRule::getRuleWeekInMonth(*((icu::DateTimeRule **)this + 10));
    RuleMonth = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
    if (RuleWeekInMonth < 1)
    {
      v27 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
      HIDWORD(v29) = -1030792151 * a2 + 85899344;
      LODWORD(v29) = HIDWORD(v29);
      v28 = v29 >> 2;
      LODWORD(v29) = HIDWORD(v29);
      if ((v29 >> 4) >= 0xA3D70B)
        v30 = 0;
      else
        v30 = 12;
      if (v28 <= 0x28F5C28)
        v31 = v30;
      else
        v31 = 12;
      if ((a2 & 3) != 0)
        v31 = 0;
      v19 = sub_18BCE8360(a2, RuleMonth, byte_18BE26D60[v31 + v27]);
      v18 = 0;
      v20 = 7 * RuleWeekInMonth + 7;
    }
    else
    {
      v18 = 1;
      v19 = sub_18BCE8360(a2, RuleMonth, 1);
      v20 = 7 * RuleWeekInMonth - 7;
    }
    v32 = v19 + (double)v20;
    goto LABEL_34;
  }
  v12 = DateRuleType;
  if (DateRuleType)
  {
    v21 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
    RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(*((icu::DateTimeRule **)this + 10));
    v23 = RuleDayOfMonth;
    if (v12 == 3)
    {
      if (v21 == 1)
      {
        HIDWORD(v25) = -1030792151 * a2 + 85899344;
        LODWORD(v25) = HIDWORD(v25);
        v24 = v25 >> 2;
        LODWORD(v25) = HIDWORD(v25);
        if ((v25 >> 4) >= 0xA3D70B)
          v26 = 28;
        else
          v26 = 29;
        if (v24 > 0x28F5C28)
          v26 = 29;
        if ((a2 & 3) != 0)
          v26 = 28;
        v18 = 0;
        if (RuleDayOfMonth == 29)
          v23 = v26;
        else
          v23 = RuleDayOfMonth;
      }
      else
      {
        v18 = 0;
      }
    }
    else
    {
      v18 = 1;
    }
    v32 = sub_18BCE8360(a2, v21, v23);
LABEL_34:
    v33 = sub_18BCE8718(v32);
    RuleDayOfWeek = icu::DateTimeRule::getRuleDayOfWeek(*((icu::DateTimeRule **)this + 10));
    v35 = RuleDayOfWeek > v33;
    if (v18)
      v36 = 7;
    else
      v36 = -7;
    if (v18)
      v35 = RuleDayOfWeek < v33;
    if (v35)
      v37 = v36;
    else
      v37 = 0;
    v15 = v32 + (double)(RuleDayOfWeek - v33 + v37);
    goto LABEL_43;
  }
  v13 = icu::DateTimeRule::getRuleMonth(*((icu::DateTimeRule **)this + 10));
  v14 = icu::DateTimeRule::getRuleDayOfMonth(*((icu::DateTimeRule **)this + 10));
  v15 = sub_18BCE8360(a2, v13, v14);
LABEL_43:
  *a5 = (double)(int)icu::DateTimeRule::getRuleMillisInDay(*((icu::DateTimeRule **)this + 10)) + v15 * 86400000.0;
  if (icu::DateTimeRule::getTimeRuleType(*((icu::DateTimeRule **)this + 10)) != 2)
    *a5 = *a5 - (double)a3;
  if (!icu::DateTimeRule::getTimeRuleType(*((icu::DateTimeRule **)this + 10)))
    *a5 = *a5 - (double)a4;
  return 1;
}

BOOL icu::AnnualTimeZoneRule::isEquivalentTo(icu::AnnualTimeZoneRule *this, const icu::TimeZoneRule *a2)
{
  _BOOL8 result;

  if (this == a2)
    return 1;
  if (!this)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)this - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
  {
    result = icu::TimeZoneRule::isEquivalentTo(this, a2);
    if (result)
    {
      result = icu::DateTimeRule::operator==(*((_QWORD *)this + 10), *((_QWORD *)a2 + 10));
      if (result)
        return *((_DWORD *)this + 22) == *((_DWORD *)a2 + 22) && *((_DWORD *)this + 23) == *((_DWORD *)a2 + 23);
    }
  }
  return result;
}

uint64_t icu::AnnualTimeZoneRule::getFirstStart(icu::AnnualTimeZoneRule *this, int a2, int a3, double *a4)
{
  return icu::AnnualTimeZoneRule::getStartInYear(this, *((_DWORD *)this + 22), a2, a3, a4);
}

uint64_t icu::AnnualTimeZoneRule::getFinalStart(icu::AnnualTimeZoneRule *this, int a2, int a3, double *a4)
{
  int v7;

  v7 = *((_DWORD *)this + 23);
  if (v7 == 0x7FFFFFFF)
    return 0;
  else
    return icu::AnnualTimeZoneRule::getStartInYear(this, v7, a2, a3, a4);
}

uint64_t icu::AnnualTimeZoneRule::getNextStart(icu::AnnualTimeZoneRule *this, double a2, uint64_t a3, uint64_t a4, int a5, double *a6)
{
  uint64_t result;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16[2];

  v15 = 0;
  *(_QWORD *)v16 = 0;
  v14 = 0;
  sub_18BCE8698(&v16[1], v16, (_DWORD *)&v15 + 1, (int *)&v15, (int *)&v14 + 1, &v14, a2);
  if (v16[1] < *((_DWORD *)this + 22))
    return (*(uint64_t (**)(icu::AnnualTimeZoneRule *, uint64_t, uint64_t, double *))(*(_QWORD *)this + 56))(this, a3, a4, a6);
  v13 = 0.0;
  result = icu::AnnualTimeZoneRule::getStartInYear(this, v16[1], a3, a4, &v13);
  if ((_DWORD)result)
  {
    if (v13 >= a2 && (a5 || v13 != a2))
    {
      *a6 = v13;
      return 1;
    }
    else
    {
      return icu::AnnualTimeZoneRule::getStartInYear(this, v16[1] + 1, a3, a4, a6);
    }
  }
  return result;
}

uint64_t icu::AnnualTimeZoneRule::getPreviousStart(icu::AnnualTimeZoneRule *this, double a2, uint64_t a3, uint64_t a4, int a5, double *a6)
{
  uint64_t result;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16[2];

  v15 = 0;
  *(_QWORD *)v16 = 0;
  v14 = 0;
  sub_18BCE8698(&v16[1], v16, (_DWORD *)&v15 + 1, (int *)&v15, (int *)&v14 + 1, &v14, a2);
  if (v16[1] > *((_DWORD *)this + 23))
    return (*(uint64_t (**)(icu::AnnualTimeZoneRule *, uint64_t, uint64_t, double *))(*(_QWORD *)this + 64))(this, a3, a4, a6);
  v13 = 0.0;
  result = icu::AnnualTimeZoneRule::getStartInYear(this, v16[1], a3, a4, &v13);
  if ((_DWORD)result)
  {
    if (v13 <= a2 && (a5 || v13 != a2))
    {
      *a6 = v13;
      return 1;
    }
    else
    {
      return icu::AnnualTimeZoneRule::getStartInYear(this, v16[1] - 1, a3, a4, a6);
    }
  }
  return result;
}

void *icu::TimeArrayTimeZoneRule::getStaticClassID(icu::TimeArrayTimeZoneRule *this)
{
  return &unk_1EE00A26A;
}

void *icu::TimeArrayTimeZoneRule::getDynamicClassID(icu::TimeArrayTimeZoneRule *this)
{
  return &unk_1EE00A26A;
}

uint64_t icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(uint64_t a1, UChar **a2, int a3, int a4, const double *a5, uint64_t a6, int a7)
{
  UErrorCode v14;

  *(_QWORD *)a1 = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 76) = a4;
  *(_QWORD *)a1 = off_1E2267AD0;
  *(_DWORD *)(a1 + 80) = a7;
  *(_QWORD *)(a1 + 88) = 0;
  v14 = U_ZERO_ERROR;
  icu::TimeArrayTimeZoneRule::initStartTimes((icu::TimeArrayTimeZoneRule *)a1, a5, a6, &v14);
  return a1;
}

{
  UErrorCode v14;

  *(_QWORD *)a1 = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 76) = a4;
  *(_QWORD *)a1 = off_1E2267AD0;
  *(_DWORD *)(a1 + 80) = a7;
  *(_QWORD *)(a1 + 88) = 0;
  v14 = U_ZERO_ERROR;
  icu::TimeArrayTimeZoneRule::initStartTimes((icu::TimeArrayTimeZoneRule *)a1, a5, a6, &v14);
  return a1;
}

uint64_t icu::TimeArrayTimeZoneRule::initStartTimes(icu::TimeArrayTimeZoneRule *this, const double *a2, uint64_t a3, UErrorCode *a4)
{
  char *v8;
  char *v9;
  BOOL v10;
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  char *v14;

  v8 = (char *)*((_QWORD *)this + 11);
  v9 = (char *)this + 96;
  if (v8)
    v10 = v8 == v9;
  else
    v10 = 1;
  if (!v10)
    uprv_free(v8);
  if ((int)a3 < 33)
  {
    *((_QWORD *)this + 11) = v9;
    v11 = (char *)this + 96;
  }
  else
  {
    v11 = (char *)uprv_malloc(8 * a3);
    *((_QWORD *)this + 11) = v11;
    if (!v11)
    {
      *a4 = U_MEMORY_ALLOCATION_ERROR;
      v12 = (_DWORD *)((char *)this + 84);
LABEL_14:
      v13 = 0;
      *v12 = 0;
      return v13;
    }
  }
  memcpy(v11, a2, 8 * (int)a3);
  *((_DWORD *)this + 21) = a3;
  v12 = (_DWORD *)((char *)this + 84);
  v13 = 1;
  uprv_sortArray((uint64_t)v11, a3, 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18BD9D600, 0, 1, (int *)a4);
  if (*(int *)a4 >= 1)
  {
    v14 = (char *)*((_QWORD *)this + 11);
    if (v14 && v14 != v9)
      uprv_free(v14);
    goto LABEL_14;
  }
  return v13;
}

icu::TimeArrayTimeZoneRule *icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(icu::TimeArrayTimeZoneRule *this, const icu::TimeArrayTimeZoneRule *a2)
{
  uint64_t v4;
  UErrorCode v6;

  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::UnicodeString((icu::TimeArrayTimeZoneRule *)((char *)this + 8), (UChar **)a2 + 1);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *(_QWORD *)this = off_1E2267AD0;
  v4 = *((unsigned int *)a2 + 21);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_QWORD *)this + 11) = 0;
  v6 = U_ZERO_ERROR;
  icu::TimeArrayTimeZoneRule::initStartTimes(this, *((const double **)a2 + 11), v4, &v6);
  return this;
}

void icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule(icu::TimeArrayTimeZoneRule *this)
{
  char *v2;
  BOOL v3;

  *(_QWORD *)this = off_1E2267AD0;
  v2 = (char *)*((_QWORD *)this + 11);
  if (v2)
    v3 = v2 == (char *)this + 96;
  else
    v3 = 1;
  if (!v3)
    uprv_free(v2);
  *(_QWORD *)this = off_1E2267998;
  icu::UnicodeString::~UnicodeString(off_1E2267998, (icu::TimeArrayTimeZoneRule *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::TimeArrayTimeZoneRule::~TimeArrayTimeZoneRule(this);
  icu::UMemory::operator delete(v1);
}

icu::TimeArrayTimeZoneRule *icu::TimeArrayTimeZoneRule::clone@<X0>(icu::TimeArrayTimeZoneRule *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::TimeArrayTimeZoneRule *result;

  result = (icu::TimeArrayTimeZoneRule *)icu::UMemory::operator new(a3, (icu::UMemory *)0x160, a2);
  if (result)
    return icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule(result, this);
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::operator=(uint64_t a1, uint64_t a2)
{
  UErrorCode v5;

  if (a1 != a2)
  {
    icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v5 = U_ZERO_ERROR;
    icu::TimeArrayTimeZoneRule::initStartTimes((icu::TimeArrayTimeZoneRule *)a1, *(const double **)(a2 + 88), *(unsigned int *)(a2 + 84), &v5);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  }
  return a1;
}

uint64_t icu::TimeArrayTimeZoneRule::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  double *v6;
  double *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v14;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
  {
    result = icu::TimeZoneRule::operator==(a1, a2);
    if ((_DWORD)result)
    {
      if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80))
        return 0;
      v5 = *(unsigned int *)(a1 + 84);
      if ((_DWORD)v5 != *(_DWORD *)(a2 + 84))
        return 0;
      if ((int)v5 >= 1)
      {
        v6 = *(double **)(a1 + 88);
        v7 = *(double **)(a2 + 88);
        v8 = v5 - 1;
        do
        {
          v9 = *v6++;
          v10 = v9;
          v11 = *v7++;
          v12 = v11;
          v14 = v8-- != 0;
          result = v10 == v12;
        }
        while (v10 == v12 && v14);
        return result;
      }
      return 1;
    }
  }
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) ^ 1;
}

uint64_t icu::TimeArrayTimeZoneRule::getTimeType(icu::TimeArrayTimeZoneRule *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t icu::TimeArrayTimeZoneRule::getStartTimeAt(icu::TimeArrayTimeZoneRule *this, unsigned int a2, double *a3)
{
  uint64_t result;

  result = 0;
  if ((a2 & 0x80000000) == 0 && *((_DWORD *)this + 21) > (signed int)a2)
  {
    *a3 = *(double *)(*((_QWORD *)this + 11) + 8 * a2);
    return 1;
  }
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::countStartTimes(icu::TimeArrayTimeZoneRule *this)
{
  return *((unsigned int *)this + 21);
}

BOOL icu::TimeArrayTimeZoneRule::isEquivalentTo(double **this, double **a2)
{
  _BOOL8 result;
  uint64_t v5;
  double *v6;
  double *v7;

  if (this == a2)
    return 1;
  if (!this)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*((_QWORD *)*this - 1), *((_QWORD *)*a2 - 1));
  if (result)
  {
    result = icu::TimeZoneRule::isEquivalentTo((icu::TimeZoneRule *)this, (const icu::TimeZoneRule *)a2);
    if (result)
    {
      if (*((_DWORD *)this + 20) != *((_DWORD *)a2 + 20))
        return 0;
      v5 = *((unsigned int *)this + 21);
      if ((_DWORD)v5 != *((_DWORD *)a2 + 21))
        return 0;
      if ((int)v5 >= 1)
      {
        v6 = this[11];
        v7 = a2[11];
        result = 1;
        while (*v6 == *v7)
        {
          ++v7;
          ++v6;
          if (!--v5)
            return result;
        }
        return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t icu::TimeArrayTimeZoneRule::getFirstStart(icu::TimeArrayTimeZoneRule *this, int a2, int a3, double *a4)
{
  double *v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;

  if (*((int *)this + 21) < 1)
    return 0;
  v4 = (double *)*((_QWORD *)this + 11);
  if (!v4)
    return 0;
  v5 = *v4;
  v6 = (double)a2;
  v7 = *((_DWORD *)this + 20);
  if (v7 == 2)
    v6 = 0.0;
  v8 = v5 - v6;
  if (v7)
    v9 = 0.0;
  else
    v9 = (double)a3;
  *a4 = v8 - v9;
  return 1;
}

double icu::TimeArrayTimeZoneRule::getUTC(icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4)
{
  int v4;
  double v5;
  double v6;
  double v7;

  v4 = *((_DWORD *)this + 20);
  v5 = (double)a3;
  if (v4 == 2)
    v5 = 0.0;
  v6 = a2 - v5;
  v7 = (double)a4;
  if (v4)
    v7 = 0.0;
  return v6 - v7;
}

uint64_t icu::TimeArrayTimeZoneRule::getFinalStart(icu::TimeArrayTimeZoneRule *this, int a2, int a3, double *a4)
{
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  double v11;
  double v12;

  v4 = *((_DWORD *)this + 21);
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    return 0;
  v7 = *((_QWORD *)this + 11);
  if (!v7)
    return 0;
  v8 = *(double *)(v7 + 8 * v6);
  v9 = (double)a2;
  v10 = *((_DWORD *)this + 20);
  if (v10 == 2)
    v9 = 0.0;
  v11 = v8 - v9;
  if (v10)
    v12 = 0.0;
  else
    v12 = (double)a3;
  *a4 = v11 - v12;
  return 1;
}

BOOL icu::TimeArrayTimeZoneRule::getNextStart(icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4, int a5, double *a6)
{
  int v6;
  uint64_t v7;
  int v8;
  double v9;
  double v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  double v14;

  v6 = *((_DWORD *)this + 21);
  if (v6 < 1)
  {
    LODWORD(v11) = *((_DWORD *)this + 21);
  }
  else
  {
    v7 = *((_QWORD *)this + 11);
    v8 = *((_DWORD *)this + 20);
    v9 = (double)a3;
    v10 = 0.0;
    if (v8 == 2)
      v9 = 0.0;
    if (!v8)
      v10 = (double)a4;
    v11 = *((unsigned int *)this + 21);
    while (1)
    {
      v12 = a5 == 0;
      v13 = v11 - 1;
      v14 = *(double *)(v7 + 8 * (v11 - 1)) - v9 - v10;
      if (v14 != a2)
        v12 = 0;
      if (v14 < a2 || v12)
        break;
      *a6 = v14;
      --v11;
      if ((unint64_t)(v13 + 1) <= 1)
      {
        LODWORD(v11) = 0;
        return (_DWORD)v11 != v6;
      }
    }
  }
  return (_DWORD)v11 != v6;
}

uint64_t icu::TimeArrayTimeZoneRule::getPreviousStart(icu::TimeArrayTimeZoneRule *this, double a2, int a3, int a4, int a5, double *a6)
{
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  double v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v6 = *((unsigned int *)this + 21);
  while ((int)v6 >= 1)
  {
    v7 = a5 != 0;
    v8 = *((_QWORD *)this + 11) + 8 * v6--;
    v9 = *(double *)(v8 - 8);
    v10 = *((_DWORD *)this + 20);
    if (v10 == 2)
      v11 = 0.0;
    else
      v11 = (double)a3;
    v12 = v9 - v11;
    if (v10)
      v13 = 0.0;
    else
      v13 = (double)a4;
    v14 = v12 - v13;
    if (v14 != a2)
      v7 = 0;
    if (v14 < a2 || v7)
    {
      *a6 = v14;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_18BD9D600(uint64_t a1, double *a2, double *a3)
{
  if (*a2 < *a3)
    return 0xFFFFFFFFLL;
  else
    return *a2 != *a3;
}

void *icu::TimeZoneTransition::getStaticClassID(icu::TimeZoneTransition *this)
{
  return &unk_1EE00A26B;
}

void *icu::TimeZoneTransition::getDynamicClassID(icu::TimeZoneTransition *this)
{
  return &unk_1EE00A26B;
}

icu::TimeZoneTransition *icu::TimeZoneTransition::TimeZoneTransition(icu::TimeZoneTransition *this, double a2, const icu::TimeZoneRule *a3, const icu::TimeZoneRule *a4)
{
  *(_QWORD *)this = off_1E2267B98;
  *((double *)this + 1) = a2;
  *((_QWORD *)this + 2) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(_QWORD *)a3 + 24))(a3);
  *((_QWORD *)this + 3) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(_QWORD *)a4 + 24))(a4);
  return this;
}

{
  *(_QWORD *)this = off_1E2267B98;
  *((double *)this + 1) = a2;
  *((_QWORD *)this + 2) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(_QWORD *)a3 + 24))(a3);
  *((_QWORD *)this + 3) = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(_QWORD *)a4 + 24))(a4);
  return this;
}

_QWORD *icu::TimeZoneTransition::TimeZoneTransition(_QWORD *this)
{
  *this = off_1E2267B98;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1E2267B98;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

icu::TimeZoneTransition *icu::TimeZoneTransition::TimeZoneTransition(icu::TimeZoneTransition *this, const icu::TimeZoneTransition *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2267B98;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = 0;
  v4 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  v5 = *((_QWORD *)a2 + 2);
  if (v5)
    *v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *((_QWORD *)a2 + 3);
  if (v6)
    *((_QWORD *)this + 3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  return this;
}

void icu::TimeZoneTransition::~TimeZoneTransition(icu::TimeZoneTransition *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2267B98;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::TimeZoneTransition::~TimeZoneTransition(this);
  icu::UMemory::operator delete(v1);
}

icu::TimeZoneTransition *icu::TimeZoneTransition::clone@<X0>(icu::TimeZoneTransition *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::TimeZoneTransition *result;

  result = (icu::TimeZoneTransition *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, a2);
  if (result)
    return icu::TimeZoneTransition::TimeZoneTransition(result, this);
  return result;
}

_QWORD *icu::TimeZoneTransition::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    a1[1] = a2[1];
    v4 = a2[2];
    v5 = a1[2];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    a1[2] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v6 = a2[3];
    v7 = a1[3];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    a1[3] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  }
  return a1;
}

uint64_t icu::TimeZoneTransition::setFrom(icu::TimeZoneTransition *this, const icu::TimeZoneRule *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(_QWORD *)a2 + 24))(a2);
  *((_QWORD *)this + 2) = result;
  return result;
}

uint64_t icu::TimeZoneTransition::setTo(icu::TimeZoneTransition *this, const icu::TimeZoneRule *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = (*(uint64_t (**)(const icu::TimeZoneRule *))(*(_QWORD *)a2 + 24))(a2);
  *((_QWORD *)this + 3) = result;
  return result;
}

BOOL icu::TimeZoneTransition::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      return 0;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a2 + 16);
    if (v5 | v6)
    {
      if (!v5 || !v6 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5))
        return 0;
    }
    v7 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a2 + 24);
    if (v7 | v8)
    {
      if (!v7 || !v8 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) & 1) == 0)
        return 0;
    }
    return 1;
  }
  return result;
}

BOOL icu::TimeZoneTransition::operator!=(uint64_t a1, uint64_t a2)
{
  return !icu::TimeZoneTransition::operator==(a1, a2);
}

uint64_t icu::TimeZoneTransition::setTime(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

uint64_t icu::TimeZoneTransition::adoptFrom(icu::TimeZoneTransition *this, icu::TimeZoneRule *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = a2;
  return result;
}

uint64_t icu::TimeZoneTransition::adoptTo(icu::TimeZoneTransition *this, icu::TimeZoneRule *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = a2;
  return result;
}

double icu::TimeZoneTransition::getTime(icu::TimeZoneTransition *this)
{
  return *((double *)this + 1);
}

uint64_t icu::TimeZoneTransition::getTo(icu::TimeZoneTransition *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t icu::TimeZoneTransition::getFrom(icu::TimeZoneTransition *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t uameasfmt_open(const char *a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v8;
  _BYTE v10[224];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  if (a2 >= 5)
  {
    v4 = 0;
    *a4 = 1;
    return v4;
  }
  v8 = dword_18BE2BCF0[(int)a2];
  v4 = icu::UMemory::operator new((icu::UMemory *)0x178, a2);
  if (v4)
  {
    icu::Locale::Locale((icu::Locale *)v10, a1, 0, 0, 0);
    icu::MeasureFormat::MeasureFormat(v4, v10, v8, a3, a4);
    icu::Locale::~Locale((icu::Locale *)v10);
    if (*a4 < 1)
      return v4;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  if (*a4 >= 1)
    return 0;
  return v4;
}

uint64_t uameasfmt_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t uameasfmt_format(icu::MeasureFormat *a1, int a2, char *a3, unsigned int a4, icu::MeasureUnit *a5, double a6)
{
  return uameasfmt_formatGetPosition(a1, a2, a3, a4, 0, a5, a6);
}

uint64_t uameasfmt_formatGetPosition(icu::MeasureFormat *this, int a2, char *a3, unsigned int a4, uint64_t a5, icu::MeasureUnit *a6, double a7)
{
  uint64_t v7;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  icu::MeasureUnit *v21;
  icu::Measure *v22;
  int v23;
  UChar *v24;
  UChar *v25;
  void (**v26)(icu::FieldPosition *__hidden);
  __int128 v27;
  void (**v28)(icu::UnicodeString *__hidden);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD v33[7];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
        goto LABEL_6;
    }
    else if (!a4)
    {
LABEL_6:
      if (icu::MeasureFormat::getWidth(this) == 3 && (a2 & 0xFFFFFFFE) == 2560)
        v17 = 2563;
      else
        v17 = a2;
      v18 = icu::MeasureUnit::createFromUAMeasureUnit(v17, a6);
      v20 = (uint64_t *)*(unsigned int *)a6;
      if ((int)v20 > 0)
        return 0;
      v21 = (icu::MeasureUnit *)v18;
      v22 = (icu::Measure *)icu::UMemory::operator new(v20, (icu::UMemory *)0x80, v19);
      if (v22)
      {
        icu::Formattable::Formattable((icu::Formattable *)v33, a7);
        icu::Measure::Measure(v22, (const icu::Formattable *)v33, v21, (UErrorCode *)a6);
        icu::Formattable::~Formattable((icu::Formattable *)v33);
      }
      if (*(int *)a6 > 0)
      {
        v7 = 0;
        if (!v22)
          return v7;
        goto LABEL_28;
      }
      v26 = off_1E225EF78;
      v27 = 0xFFFFFFFFuLL;
      if (a5)
      {
        v23 = *(_DWORD *)a5;
        if (*(_DWORD *)a5 >= 0xEu)
        {
          v7 = 0;
          *(_DWORD *)a6 = 1;
          goto LABEL_27;
        }
      }
      else
      {
        v23 = -1;
      }
      LODWORD(v27) = v23;
      memset(v33, 0, sizeof(v33));
      icu::Formattable::Formattable((icu::Formattable *)v33);
      icu::Formattable::adoptObject((icu::Formattable *)v33, v22);
      v29 = 0u;
      v32 = 0;
      v31 = 0u;
      v30 = 0u;
      v28 = off_1E2256B38;
      LOWORD(v29) = 2;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v28, a3, 0, a4);
      (*(void (**)(icu::MeasureFormat *, _OWORD *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), icu::MeasureUnit *))(*(_QWORD *)this + 40))(this, v33, &v28, &v26, a6);
      if (a5)
        *(_QWORD *)(a5 + 4) = *(_QWORD *)((char *)&v27 + 4);
      v25 = (UChar *)a3;
      v7 = icu::UnicodeString::extract((uint64_t)&v28, &v25, a4, (int *)a6);
      v24 = v25;
      icu::UnicodeString::~UnicodeString(&v24, (icu::UnicodeString *)&v28);
      icu::Formattable::~Formattable((icu::Formattable *)v33);
      v22 = 0;
LABEL_27:
      icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v26);
      if (!v22)
        return v7;
LABEL_28:
      (*(void (**)(icu::Measure *))(*(_QWORD *)v22 + 8))(v22);
      return v7;
    }
    v7 = 0;
    *(_DWORD *)a6 = 1;
    return v7;
  }
  return 0;
}

uint64_t uameasfmt_formatMultiple(icu::MeasureFormat *a1, UErrorCode *a2, unsigned int a3, char *a4, unsigned int a5, icu::MeasureUnit *a6)
{
  return uameasfmt_formatMultipleForFields(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t uameasfmt_formatMultipleForFields(icu::MeasureFormat *this, UErrorCode *a2, unsigned int a3, char *a4, unsigned int a5, icu::FieldPositionIterator *a6, icu::MeasureUnit *a7)
{
  uint64_t v7;
  unint64_t v13;
  double *v14;
  int v15;
  int Width;
  int v18;
  icu::MeasureUnit *GForce;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  icu::Measure *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  uint64_t j;
  UChar *v34;
  UChar *v35;
  void (**v36)(icu::UnicodeString *__hidden);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  icu::MeasureUnit *v41[16];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[128];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (*(int *)a7 > 0)
    return 0;
  if (a4)
  {
    if ((a5 & 0x80000000) != 0)
      goto LABEL_8;
  }
  else if (a5)
  {
LABEL_8:
    v7 = 0;
    *(_DWORD *)a7 = 1;
    return v7;
  }
  if (a3 - 9 <= 0xFFFFFFF7)
    goto LABEL_8;
  v13 = 0;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v14 = (double *)(a2 + 2);
  do
  {
    if (*(int *)a7 > 0)
    {
      if ((int)v13 < 1)
        return 0;
      goto LABEL_29;
    }
    if (v13 >= a3)
    {
      GForce = (icu::MeasureUnit *)icu::MeasureUnit::createGForce(a7, a2);
      v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x80, v24);
      if (v26)
      {
        v23 = (icu::Measure *)v26;
        icu::Formattable::Formattable((icu::Formattable *)v41, 0);
        goto LABEL_23;
      }
    }
    else
    {
      v15 = *(_DWORD *)v14;
      Width = icu::MeasureFormat::getWidth(this);
      if ((v15 & 0xFFFFFFFE) == 0xA00 && Width == 3)
        v18 = 2563;
      else
        v18 = v15;
      GForce = (icu::MeasureUnit *)icu::MeasureUnit::createFromUAMeasureUnit(v18, a7);
      v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0x80, v20);
      if (v22)
      {
        v23 = (icu::Measure *)v22;
        icu::Formattable::Formattable((icu::Formattable *)v41, *(v14 - 1));
LABEL_23:
        icu::Measure::Measure(v23, (const icu::Formattable *)v41, GForce, (UErrorCode *)a7);
        *((_QWORD *)&v49 + v13) = v23;
        icu::Formattable::~Formattable((icu::Formattable *)v41);
        goto LABEL_25;
      }
    }
    *((_QWORD *)&v49 + v13) = 0;
LABEL_25:
    ++v13;
    v14 += 2;
  }
  while (v13 != 8);
  if (*(int *)a7 >= 1)
  {
    LODWORD(v13) = 8;
LABEL_29:
    v27 = v13;
    do
    {
      v28 = *(_QWORD *)&v48[8 * v27 + 120];
      if (v28)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      --v27;
    }
    while ((unint64_t)(v27 + 1) > 1);
    return 0;
  }
  bzero(v41, 0x400uLL);
  icu::Measure::Measure((icu::Measure *)v41, (const icu::Measure *)v49);
  icu::Measure::Measure((icu::Measure *)&v42, *((const icu::Measure **)&v49 + 1));
  icu::Measure::Measure((icu::Measure *)&v43, (const icu::Measure *)v50);
  icu::Measure::Measure((icu::Measure *)&v44, *((const icu::Measure **)&v50 + 1));
  icu::Measure::Measure((icu::Measure *)&v45, (const icu::Measure *)v51);
  icu::Measure::Measure((icu::Measure *)&v46, *((const icu::Measure **)&v51 + 1));
  icu::Measure::Measure((icu::Measure *)&v47, (const icu::Measure *)v52);
  icu::Measure::Measure((icu::Measure *)v48, *((const icu::Measure **)&v52 + 1));
  v37 = 0u;
  v40 = 0;
  v39 = 0u;
  v38 = 0u;
  v36 = off_1E2256B38;
  LOWORD(v37) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v36, a4, 0, a5);
  icu::MeasureFormat::formatMeasures((icu::ListFormatter **)this, v41, a3, (icu::UnicodeString *)&v36, a6, (UErrorCode *)a7);
  for (i = 0; i != 64; i += 8)
  {
    v30 = *(_QWORD *)((char *)&v49 + i);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  v35 = (UChar *)a4;
  v7 = icu::UnicodeString::extract((uint64_t)&v36, &v35, a5, (int *)a7);
  v34 = v35;
  icu::UnicodeString::~UnicodeString(&v34, (icu::UnicodeString *)&v36);
  for (j = 112; j != -16; j -= 16)
    icu::Measure::~Measure((icu::Measure *)&v41[j]);
  return v7;
}

uint64_t uameasfmt_getUnitName(icu::MeasureFormat *a1, int a2, char *a3, unsigned int a4, icu::MeasureUnit *this)
{
  uint64_t v5;
  uint64_t v10;
  const icu::MeasureUnit *v11;
  UChar **v12;
  UChar *v14;
  UChar *v15;
  void (**v16)(icu::UnicodeString *__hidden);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(int *)this > 0)
    return 0;
  if (a3)
  {
    if ((a4 & 0x80000000) == 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    *(_DWORD *)this = 1;
    return v5;
  }
  if (a4)
    goto LABEL_9;
LABEL_5:
  v10 = icu::MeasureUnit::createFromUAMeasureUnit(a2, this);
  v11 = (const icu::MeasureUnit *)v10;
  if (*(int *)this > 0)
  {
    v5 = 0;
    if (!v10)
      return v5;
    goto LABEL_14;
  }
  v17 = 0u;
  v18 = 0u;
  v20 = 0;
  v19 = 0u;
  v16 = off_1E2256B38;
  LOWORD(v17) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a3, 0, a4);
  icu::MeasureFormat::getUnitName(a1, v11, (icu::UnicodeString *)&v16);
  v12 = (UChar **)(unsigned __int16)v17;
  if ((v17 & 1) != 0)
  {
    v5 = 0;
    *(_DWORD *)this = 2;
  }
  else
  {
    v15 = (UChar *)a3;
    v5 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a4, (int *)this);
    v14 = v15;
    v12 = &v14;
  }
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v16);
  if (v11)
LABEL_14:
    (*(void (**)(const icu::MeasureUnit *))(*(_QWORD *)v11 + 8))(v11);
  return v5;
}

uint64_t uameasfmt_getMultipleUnitNames(icu::MeasureFormat *a1, uint64_t a2, unsigned int a3, int a4, char *a5, unsigned int a6, icu::MeasureUnit *this)
{
  uint64_t v7;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  UChar *v22;
  UChar *v23;
  void (**v24)(icu::UnicodeString *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[4];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(int *)this > 0)
    return 0;
  if (a5)
  {
    if ((a6 & 0x80000000) != 0)
      goto LABEL_8;
  }
  else if (a6)
  {
LABEL_8:
    v7 = 0;
    *(_DWORD *)this = 1;
    return v7;
  }
  if (a3 - 9 <= 0xFFFFFFF7)
    goto LABEL_8;
  v16 = 0;
  v17 = a3;
  memset(v29, 0, sizeof(v29));
  do
  {
    if (*(int *)this > 0)
      goto LABEL_15;
    *((_QWORD *)v29 + v16) = icu::MeasureUnit::createFromUAMeasureUnit(*(_DWORD *)(a2 + 4 * v16), this);
    ++v16;
  }
  while (a3 != v16);
  if (*(int *)this >= 1)
  {
    LODWORD(v16) = a3;
LABEL_15:
    if ((int)v16 >= 1)
    {
      v18 = v16 + 1;
      do
      {
        v19 = *((_QWORD *)v29 + (v18 - 2));
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        --v18;
      }
      while (v18 > 1);
    }
    return 0;
  }
  v25 = 0u;
  v28 = 0;
  v27 = 0u;
  v26 = 0u;
  v24 = off_1E2256B38;
  LOWORD(v25) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v24, a5, 0, a6);
  v20 = v29;
  icu::MeasureFormat::getMultipleUnitNames(a1, (const icu::MeasureUnit **)v29, a3, a4, (icu::UnicodeString *)&v24);
  do
  {
    if (*v20)
      (*(void (**)(_QWORD))(*(_QWORD *)*v20 + 8))(*v20);
    ++v20;
    --v17;
  }
  while (v17);
  if ((v25 & 1) != 0)
  {
    v7 = 0;
    v21 = 2;
    *(_DWORD *)this = 2;
  }
  else
  {
    v23 = (UChar *)a5;
    v7 = icu::UnicodeString::extract((uint64_t)&v24, &v23, a6, (int *)this);
    v22 = v23;
    v21 = (uint64_t)&v22;
  }
  icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v24);
  return v7;
}

uint64_t uameasfmt_getUnitsForUsage(char *a1, const char *a2, const char *a3, _DWORD *a4, uint64_t a5, UErrorCode *a6)
{
  int v11;
  char *v12;
  int v13;
  icu::units::UnitPreferences *v14;
  uint64_t UAMeasureUnits;
  const char **v16;
  const char *v17;
  char *v18;
  const char *v19;
  int v20;
  char *v21;
  const char *v22;
  uint64_t *v23;
  int v24;
  uint64_t v26[2];
  char *v27;
  int v28[2];
  uint64_t v29;
  unsigned __int8 *v30[2];
  unsigned __int8 *v31[2];
  void *v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  void *v38;
  uint64_t v39;
  char *v40;
  int v41;
  char *v42;
  int v43;
  void *v44;
  uint64_t v45;
  char *v46;
  int v47;
  char *__s[8];
  __int128 v49;
  uint64_t v50;
  void *__key[8];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char *v65[7];
  uint64_t v66;
  void *v67[7];
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v68 = 0;
  memset(&v67[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v36, a2);
  v67[0] = (char *)&v67[1] + 5;
  LODWORD(v67[1]) = 40;
  WORD2(v67[1]) = 0;
  LODWORD(v68) = 0;
  icu::CharString::append((icu::CharString *)v67, v36, v37, a6);
  v66 = 0;
  memset(&v65[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v34, a3);
  v65[0] = (char *)&v65[1] + 5;
  LODWORD(v65[1]) = 40;
  WORD2(v65[1]) = 0;
  LODWORD(v66) = 0;
  icu::CharString::append((icu::CharString *)v65, v34, v35, a6);
  memset(&__key[1], 0, 56);
  __key[0] = (char *)&__key[1] + 5;
  LODWORD(__key[1]) = 40;
  icu::CharString::append((icu::CharString *)__key, (const char *)v67[0], v68, a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v62, "/");
  icu::CharString::append((icu::CharString *)__key, (const char *)v62, SDWORD2(v62), a6);
  v11 = v66;
  if ((_DWORD)v66)
  {
    v12 = v65[0];
  }
  else
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v27, "default");
    v12 = v27;
    v11 = v28[0];
  }
  icu::CharString::append((icu::CharString *)__key, v12, v11, a6);
  if (*(int *)a6 > 0)
    goto LABEL_5;
  v16 = (const char **)bsearch(__key[0], off_1EE008E78, 0x1DuLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_18BD9EB3C);
  if (!v16)
    goto LABEL_5;
  LODWORD(v66) = 0;
  *v65[0] = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v46, v16[1]);
  icu::CharString::append((icu::CharString *)v65, v46, v47, a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v44, "/");
  if (icu::CharString::contains(v65, v44, v45))
  {
    memset(&__s[1], 0, 56);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    icu::CharString::append((icu::CharString *)__s, v65[0], v66, a6);
    v17 = __s[0];
    v18 = strchr(__s[0], 47);
    *v18 = 0;
    v19 = v18 + 1;
    LODWORD(v68) = 0;
    *(_BYTE *)v67[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v42, v17);
    icu::CharString::append((icu::CharString *)v67, v42, v43, a6);
    LODWORD(v66) = 0;
    *v65[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v40, v19);
    icu::CharString::append((icu::CharString *)v65, v40, v41, a6);
    if (BYTE4(__s[1]))
      uprv_free(__s[0]);
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&v38, "[");
  if (icu::CharString::contains(v65, v38, v39))
  {
    memset(&__s[1], 0, 56);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    icu::CharString::append((icu::CharString *)__s, v65[0], v66, a6);
    v20 = (int)__s[0];
    v21 = strchr(__s[0], 91);
    v22 = v21 + 1;
    icu::CharString::truncate((uint64_t)v65, (_DWORD)v21 - v20);
    v13 = atoi(v22);
    if (BYTE4(__s[1]))
      uprv_free(__s[0]);
  }
  else
  {
LABEL_5:
    v13 = 0;
  }
  if (BYTE4(__key[1]))
    uprv_free(__key[0]);
  v14 = (icu::units::UnitPreferences *)operator new();
  v46 = (char *)icu::units::UnitPreferences::UnitPreferences(v14, a6);
  if (*(int *)a6 <= 0)
  {
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    icu::LocaleBuilder::LocaleBuilder(&v62);
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    memset(__key, 0, sizeof(__key));
    icu::Locale::Locale(v23, (icu::Locale *)__key, a1, 0, 0, 0);
    icu::LocaleBuilder::setLocale((icu::LocaleBuilder *)&v62, (const icu::Locale *)__key);
    if (!BYTE2(__key[3]))
    {
      __s[0] = 0;
      ulocimp_getRegionForSupplementalData(a1, 1, (char *)__s, 8, (int *)a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v32, (const char *)__s);
      icu::LocaleBuilder::setRegion((uint64_t)&v62, v32, v33);
    }
    icu::LocaleBuilder::build((icu::LocaleBuilder *)&v62, a6, (icu::Locale *)__s);
    icu::Locale::operator=((uint64_t)__key, (uint64_t)__s);
    icu::Locale::~Locale((icu::Locale *)__s);
    v50 = 0;
    v49 = 0u;
    memset(__s, 0, sizeof(__s));
    icu::StringPiece::StringPiece((icu::StringPiece *)v31, (const char *)v67[0]);
    icu::StringPiece::StringPiece((icu::StringPiece *)v30, v65[0]);
    icu::units::UnitPreferences::getPreferencesFor((uint64_t)v14, v31[0], (uint64_t)v31[1], v30[0], (uint64_t)v30[1], (uint64_t)__key, a6, (uint64_t)__s);
    if (*(int *)a6 > 0 || SLODWORD(__s[0]) < 1)
    {
      UAMeasureUnits = 0;
    }
    else
    {
      if (v13 >= SLODWORD(__s[0]))
        v24 = LODWORD(__s[0]) - 1;
      else
        v24 = v13;
      v27 = 0;
      *(_QWORD *)v28 = 0;
      v29 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)v26, *(const char **)(*(_QWORD *)&__s[1][8 * v24] + 8));
      icu::MeasureUnit::forIdentifier(v26[0], v26[1], (int *)a6, (uint64_t)&v27);
      if (*(int *)a6 <= 0)
        UAMeasureUnits = icu::MeasureUnit::getUAMeasureUnits((icu::MeasureUnit *)&v27, a4, a5, a6);
      else
        UAMeasureUnits = 0;
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v27);
    }
    sub_18BD9EB44((unsigned int *)__s);
    icu::Locale::~Locale((icu::Locale *)__key);
    icu::LocaleBuilder::~LocaleBuilder((icu::LocaleBuilder *)&v62);
  }
  else
  {
    UAMeasureUnits = 0;
  }
  sub_18BD9EBC8((uint64_t *)&v46);
  if (BYTE4(v65[1]))
    uprv_free(v65[0]);
  if (BYTE4(v67[1]))
    uprv_free(v67[0]);
  return UAMeasureUnits;
}

const char *uameasfmt_getUnitCategory(int a1, icu::MeasureUnit *a2)
{
  const char *Type;
  icu::MeasureUnit *v4;
  icu::MeasureUnit *v5;

  if (*(int *)a2 <= 0)
  {
    v4 = (icu::MeasureUnit *)icu::MeasureUnit::createFromUAMeasureUnit(a1, a2);
    v5 = v4;
    if (*(int *)a2 <= 0)
    {
      Type = icu::MeasureUnit::getType(v4);
      if (!v5)
        return Type;
    }
    else
    {
      Type = 0;
      if (!v4)
        return Type;
    }
    (*(void (**)(icu::MeasureUnit *))(*(_QWORD *)v5 + 8))(v5);
    return Type;
  }
  return 0;
}

uint64_t sub_18BD9EB3C(const char *a1, const char **a2)
{
  return strcmp(a1, *a2);
}

unsigned int *sub_18BD9EB44(unsigned int *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (void *)*a1;
  if ((int)v2 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v3);
      if (v4)
      {
        icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(v4 + 80));
        if (*(_BYTE *)(v4 + 20))
          uprv_free(*(void **)(v4 + 8));
        icu::UMemory::operator delete((void *)v4);
        v2 = (void *)*a1;
      }
      ++v3;
    }
    while (v3 < (int)v2);
  }
  if (*((_BYTE *)a1 + 20))
    uprv_free(*((void **)a1 + 1));
  return a1;
}

uint64_t *sub_18BD9EBC8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*a1)
  {
    sub_18BD9EB44((unsigned int *)(v2 + 88));
    v3 = sub_18BD9EC14(v2);
    MEMORY[0x18D77FE8C](v3, 0x10A0C409C1F706FLL);
  }
  return a1;
}

uint64_t sub_18BD9EC14(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 148))
          uprv_free(*(void **)(v4 + 136));
        if (*(_BYTE *)(v4 + 84))
          uprv_free(*(void **)(v4 + 72));
        if (*(_BYTE *)(v4 + 20))
          uprv_free(*(void **)(v4 + 8));
        icu::UMemory::operator delete((void *)v4);
        v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return a1;
}

uint64_t uatmufmt_open(const char *a1, unint64_t a2, int *a3)
{
  return uatmufmt_openWithNumberFormat(a1, a2, 0, a3);
}

uint64_t uatmufmt_openWithNumberFormat(const char *a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v8;
  _BYTE v10[224];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  if (a2 >= 4)
  {
    v4 = 0;
    *a4 = 1;
    return v4;
  }
  v8 = dword_18BE2BD10[(int)a2];
  v4 = icu::UMemory::operator new((icu::UMemory *)0x178, a2);
  if (v4)
  {
    icu::Locale::Locale((icu::Locale *)v10, a1, 0, 0, 0);
    icu::MeasureFormat::MeasureFormat(v4, v10, v8, a3, a4);
    icu::Locale::~Locale((icu::Locale *)v10);
    if (*a4 < 1)
      return v4;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  if (*a4 >= 1)
    return 0;
  return v4;
}

uint64_t uatmufmt_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

icu::SharedObject *uatmufmt_setNumberFormat(icu::SharedObject *result, uint64_t a2, int *a3)
{
  icu::SharedObject *v4;
  unint64_t v5;

  if (*a3 <= 0)
  {
    v4 = result;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    return icu::MeasureFormat::adoptNumberFormat(v4, v5, a3);
  }
  return result;
}

uint64_t uatmufmt_format(uint64_t a1, UErrorCode *a2, char *a3, unsigned int a4, icu::MeasureUnit *this, double a6)
{
  uint64_t v6;
  uint64_t Year;
  unint64_t v14;
  icu::MeasureUnit *v15;
  uint64_t *v16;
  icu::UObject *v17;
  void *v18;
  UChar *v19;
  UChar *v20;
  _QWORD v21[3];
  void (**v22)(icu::UnicodeString *__hidden);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[7];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(int *)this > 0)
    return 0;
  if (a3)
  {
    if ((a4 & 0x80000000) != 0)
      goto LABEL_8;
  }
  else if (a4)
  {
LABEL_8:
    v6 = 0;
    *(_DWORD *)this = 1;
    return v6;
  }
  switch((int)a2)
  {
    case 0:
      Year = icu::MeasureUnit::createYear(this, a2);
      break;
    case 1:
      Year = icu::MeasureUnit::createMonth(this, a2);
      break;
    case 2:
      Year = icu::MeasureUnit::createDay(this, a2);
      break;
    case 3:
      Year = icu::MeasureUnit::createWeek(this, a2);
      break;
    case 4:
      Year = icu::MeasureUnit::createHour(this, a2);
      break;
    case 5:
      Year = icu::MeasureUnit::createMinute(this, a2);
      break;
    case 6:
      Year = icu::MeasureUnit::createSecond(this, a2);
      break;
    case 7:
      Year = icu::MeasureUnit::createMillisecond(this, a2);
      break;
    case 8:
      Year = icu::MeasureUnit::createMicrosecond(this, a2);
      break;
    case 9:
      Year = icu::MeasureUnit::createNanosecond(this, a2);
      break;
    default:
      goto LABEL_8;
  }
  v15 = (icu::MeasureUnit *)Year;
  v16 = (uint64_t *)*(unsigned int *)this;
  if ((int)v16 > 0)
    return 0;
  v17 = (icu::UObject *)icu::UMemory::operator new(v16, (icu::UMemory *)0x80, v14);
  if (!v17)
  {
    if (*(int *)this >= 1)
      return 0;
LABEL_25:
    memset(v27, 0, sizeof(v27));
    icu::Formattable::Formattable((icu::Formattable *)v27);
    icu::Formattable::adoptObject((icu::Formattable *)v27, v17);
    v23 = 0u;
    v26 = 0;
    v25 = 0u;
    v24 = 0u;
    v22 = off_1E2256B38;
    LOWORD(v23) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a3, 0, a4);
    v21[2] = 0;
    v21[0] = off_1E225EF78;
    v21[1] = 0;
    (*(void (**)(uint64_t, _OWORD *, void (***)(icu::UnicodeString *__hidden), _QWORD *, icu::MeasureUnit *))(*(_QWORD *)a1 + 40))(a1, v27, &v22, v21, this);
    v20 = (UChar *)a3;
    v6 = icu::UnicodeString::extract((uint64_t)&v22, &v20, a4, (int *)this);
    v19 = v20;
    icu::FieldPosition::~FieldPosition(&v19, (icu::FieldPosition *)v21);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v22);
    icu::Formattable::~Formattable((icu::Formattable *)v27);
    return v6;
  }
  icu::Formattable::Formattable((icu::Formattable *)v27, a6);
  icu::Measure::Measure(v17, (const icu::Formattable *)v27, v15, (UErrorCode *)this);
  icu::Formattable::~Formattable((icu::Formattable *)v27);
  if (*(int *)this <= 0)
    goto LABEL_25;
  (*(void (**)(icu::UObject *))(*(_QWORD *)v17 + 8))(v17);
  return 0;
}

double uatmufmt_parse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 <= 0)
    *a6 = 16;
  return 0.0;
}

uint64_t uatmufmt_getTimePattern(char *a1, unsigned int a2, UChar *a3, int32_t a4, int *a5)
{
  uint64_t result;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  const UChar *StringByKeyWithFallback;
  unsigned int v13;

  if (*a5 > 0)
    return 0;
  if (a3)
  {
    if (a4 < 0)
      goto LABEL_11;
  }
  else if (a4)
  {
LABEL_11:
    result = 0;
    *a5 = 1;
    return result;
  }
  if (a2 >= 3)
    goto LABEL_11;
  v9 = off_1E2267BC8[a2];
  v13 = 0;
  v10 = ures_open("icudt74l-unit", a1, a5);
  v11 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v10, "durationUnits", (uint64_t)v10, (UErrorCode *)a5);
  StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v11, v9, (int *)&v13, (UErrorCode *)a5);
  if (*a5 <= 0)
    u_strncpy(a3, StringByKeyWithFallback, a4);
  ures_close(v11);
  return u_terminateUChars((uint64_t)a3, a4, v13, a5);
}

uint64_t uatmufmt_getListPattern(char *a1, unsigned int a2, unsigned int a3, UChar *a4, int32_t a5, int *a6)
{
  uint64_t result;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  const UChar *StringByKeyWithFallback;
  unsigned int v16;

  if (*a6 > 0)
    return 0;
  if (a4)
  {
    if (a5 < 0)
      goto LABEL_12;
  }
  else if (a5)
  {
LABEL_12:
    result = 0;
    *a6 = 1;
    return result;
  }
  if (a2 >= 4 || a3 >= 4)
    goto LABEL_12;
  v10 = off_1E2267BE0[a2];
  v11 = off_1E2267C00[a3];
  v16 = 0;
  v12 = ures_open(0, a1, a6);
  v13 = ures_getByKeyWithFallback((uint64_t)v12, "listPattern", (uint64_t)v12, (UErrorCode *)a6);
  v14 = (_QWORD *)ures_getByKeyWithFallback(v13, v10, v13, (UErrorCode *)a6);
  StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v14, v11, (int *)&v16, (UErrorCode *)a6);
  if (*a6 <= 0)
    u_strncpy(a4, StringByKeyWithFallback, a5);
  ures_close(v14);
  return u_terminateUChars((uint64_t)a4, a5, v16, a6);
}

void *uatimezone_open(UChar *s, unsigned int a2, int *a3)
{
  void *result;
  int32_t v7;
  const icu::UnicodeString *v8;
  uint64_t v9;
  void *v10;
  const UChar *v11;
  UChar *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return 0;
  if (s)
  {
    v7 = a2;
    if ((a2 & 0x80000000) != 0)
      v7 = u_strlen(s);
    v13 = 0u;
    v14 = 0u;
    v16 = 0;
    v15 = 0u;
    v11 = s;
    v12 = (UChar *)off_1E2256B38;
    LOWORD(v13) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2 >> 31, &v11, v7);
    v10 = icu::TimeZone::createTimeZone(&v12, v8);
    if (!v10)
    {
      v9 = 7;
      *a3 = 7;
    }
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
    if (*a3 >= 1)
      return 0;
    else
      return v10;
  }
  else
  {
    result = 0;
    *a3 = 1;
  }
  return result;
}

uint64_t uatimezone_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t uatimezone_getOffset(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (a5)
  {
    if (*a5 <= 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  }
  return result;
}

void *uatimezone_getOffsetFromLocal(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, double a7)
{
  if (*a6 <= 0)
  {
    if (result
    {
      return (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, int *, double))(*(_QWORD *)result + 160))(result, a2, a3, a4, a5, a6, a7);
    }
    else
    {
      *a6 = 1;
    }
  }
  return result;
}

uint64_t uatimezone_getDisplayName(icu::Calendar *a1, unsigned int a2, char *a3, char *a4, unsigned int a5, int *a6)
{
  uint64_t v6;
  icu::Calendar *v13;
  int v14;
  unsigned int v15;
  UChar *v17;
  UChar *v18;
  char *v19[28];
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0xFFFFFFFFLL;
  v21 = 0u;
  v24 = 0;
  v23 = 0u;
  v22 = 0u;
  v20 = off_1E2256B38;
  LOWORD(v21) = 2;
  if (a4 || a5)
    icu::UnicodeString::setTo((icu::UnicodeString *)&v20, a4, 0, a5);
  switch(a2)
  {
    case 0u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v19, a3, 0, 0, 0);
      v13 = a1;
      v14 = 0;
      goto LABEL_10;
    case 1u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v19, a3, 0, 0, 0);
      v13 = a1;
      v14 = 0;
      goto LABEL_12;
    case 2u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v19, a3, 0, 0, 0);
      v13 = a1;
      v14 = 1;
LABEL_10:
      v15 = 1;
      goto LABEL_13;
    case 3u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v19, a3, 0, 0, 0);
      v13 = a1;
      v14 = 1;
LABEL_12:
      v15 = 2;
LABEL_13:
      icu::TimeZone::getDisplayName(v13, v14, v15, v19, (uint64_t)&v20);
      icu::Locale::~Locale((icu::Locale *)v19);
      break;
    default:
      break;
  }
  v18 = (UChar *)a4;
  v6 = icu::UnicodeString::extract((uint64_t)&v20, &v18, a5, a6);
  v17 = v18;
  icu::UnicodeString::~UnicodeString(&v17, (icu::UnicodeString *)&v20);
  return v6;
}

uint64_t uatimezone_getTimeZoneTransitionDate(void *lpsrc, unsigned int a2, double *a3, int *a4, double a5)
{
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  _OWORD v12[2];

  result = 0;
  if (lpsrc)
  {
    if (*a4 <= 0)
    {
      if (result)
      {
        v10 = (_QWORD *)result;
        memset(v12, 0, sizeof(v12));
        icu::TimeZoneTransition::TimeZoneTransition(v12);
        v11 = 120;
        if (a2 < 2)
          v11 = 112;
        if ((*(unsigned int (**)(_QWORD *, BOOL, _OWORD *, double))(*v10 + v11))(v10, (a2 & 0xFFFFFFFD) == 1, v12, a5))
        {
          *a3 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v12);
          icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v12);
          return 1;
        }
        else
        {
          icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v12);
          return 0;
        }
      }
    }
  }
  return result;
}

_OWORD *ucal_openTimeZoneIDEnumeration(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t TimeZoneIDEnumeration;

  TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(a1, a2, a3, a4);
  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a4);
}

_OWORD *ucal_openTimeZones(int *a1)
{
  uint64_t TimeZoneIDEnumeration;

  TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(0, 0, 0, a1);
  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a1);
}

_OWORD *ucal_openCountryTimeZones(uint64_t a1, int *a2)
{
  uint64_t TimeZoneIDEnumeration;

  TimeZoneIDEnumeration = icu::TimeZone::createTimeZoneIDEnumeration(0, a1, 0, a2);
  return uenum_openFromStringEnumeration(TimeZoneIDEnumeration, a2);
}

uint64_t ucal_getDefaultTimeZone(icu::TimeZone *a1, int a2, int *a3)
{
  uint64_t v4;
  uint64_t Default;
  uint64_t v9;
  UChar *v10;
  UChar *v11;
  UChar *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a3 || *a3 > 0)
    return 0;
  Default = icu::TimeZone::createDefault(a1);
  if (Default)
  {
    v9 = Default;
    v13 = 0u;
    v16 = 0;
    v15 = 0u;
    v14 = 0u;
    v12 = (UChar *)off_1E2256B38;
    LOWORD(v13) = 2;
    icu::UnicodeString::operator=(&v12, (UChar **)(Default + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = (UChar *)a1;
    v4 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a2, a3);
    v10 = v11;
    icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  }
  else
  {
    v4 = 0;
    *a3 = 7;
  }
  return v4;
}

void ucal_setDefaultTimeZone(UChar *a1, int *a2)
{
  icu::TimeZone *v2;
  icu::TimeZone *v3;

  v2 = (icu::TimeZone *)sub_18BD9F9E8(a1, 0xFFFFFFFF, a2);
  if (v2)
    icu::TimeZone::adoptDefault(v2, v3);
}

void *sub_18BD9F9E8(UChar *s, unsigned int a2, int *a3)
{
  void *v4;
  int32_t v7;
  const icu::UnicodeString *v8;
  uint64_t v9;
  const UChar *v11;
  UChar *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a3 || *a3 > 0)
    return 0;
  v7 = a2;
  if ((a2 & 0x80000000) != 0)
    v7 = u_strlen(s);
  v13 = 0u;
  v14 = 0u;
  v16 = 0;
  v15 = 0u;
  v11 = s;
  v12 = (UChar *)off_1E2256B38;
  LOWORD(v13) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2 >> 31, &v11, v7);
  v4 = icu::TimeZone::createTimeZone(&v12, v8);
  if (!v4)
  {
    v9 = 7;
    *a3 = 7;
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
  return v4;
}

uint64_t ucal_getHostTimeZone(icu::TimeZone *a1, int a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  UChar *v10;
  UChar *v11;
  UChar *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a3 || *a3 > 0)
    return 0;
  v8 = icu::TimeZone::detectHostTimeZone(a1);
  if (v8)
  {
    v9 = v8;
    v13 = 0u;
    v16 = 0;
    v15 = 0u;
    v14 = 0u;
    v12 = (UChar *)off_1E2256B38;
    LOWORD(v13) = 2;
    icu::UnicodeString::operator=(&v12, (UChar **)(v8 + 8));
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v11 = (UChar *)a1;
    v4 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a2, a3);
    v10 = v11;
    icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  }
  else
  {
    v4 = 0;
    *a3 = 7;
  }
  return v4;
}

uint64_t ucal_getDSTSavings(UChar *a1, int *a2)
{
  icu::Calendar *v3;
  icu::Calendar *v4;
  uint64_t v5;
  int v6;
  double v7;
  double v8;
  int v9;
  unsigned int v10;
  uint64_t v13;

  v3 = (icu::Calendar *)sub_18BD9F9E8(a1, 0xFFFFFFFF, a2);
  v4 = v3;
  if (*a2 <= 0)
  {
    if (v3
    {
      v5 = (*(uint64_t (**)(icu::Calendar *))(*(_QWORD *)v3 + 104))(v3);
    }
    else
    {
      v6 = 53;
      icu::Calendar::getNow(v3);
      v8 = v7;
      LODWORD(v5) = 0;
      do
      {
        v13 = 0;
        (*(void (**)(icu::Calendar *, _QWORD, char *, uint64_t *, int *, double))(*(_QWORD *)v4 + 48))(v4, 0, (char *)&v13 + 4, &v13, a2, v8);
        v9 = *a2;
        if ((_DWORD)v13)
          v10 = v13;
        else
          v10 = v5;
        if (v9 >= 1)
          v5 = v5;
        else
          v5 = v10;
        if (v9 > 0 || (_DWORD)v13 != 0)
          break;
        v8 = v8 + 604800000.0;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    v5 = 0;
    if (!v3)
      return v5;
  }
  (*(void (**)(icu::Calendar *))(*(_QWORD *)v4 + 8))(v4);
  return v5;
}

uint64_t ucal_open(UChar *a1, unsigned int a2, const char *a3, int a4, int *a5)
{
  uint64_t Instance;
  icu::Calendar *Default;
  icu::Calendar *v10;
  uint64_t *v11;
  UErrorCode *v12;
  uint64_t *v14;
  UErrorCode *v15;
  _BYTE v16[224];
  char __dst[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (a1)
    Default = (icu::Calendar *)sub_18BD9F9E8(a1, a2, a5);
  else
    Default = (icu::Calendar *)icu::TimeZone::createDefault(0);
  v10 = Default;
  v11 = (uint64_t *)*a5;
  if (!Default && (int)v11 <= 0)
  {
    Instance = 0;
    *a5 = 7;
    return Instance;
  }
  if ((int)v11 > 0)
    goto LABEL_10;
  if (a4 != 1)
  {
    icu::Locale::Locale(v11, (icu::Locale *)__dst, a3, 0, 0, 0);
    Instance = icu::Calendar::createInstance(v10, (icu::TimeZone *)__dst, (UErrorCode *)a5, v12);
    icu::Locale::~Locale((icu::Locale *)__dst);
    return Instance;
  }
  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)__dst = 0u;
  v18 = 0u;
  if (!a3)
    a3 = (const char *)uloc_getDefault(Default);
  if ((int)strlen(a3) < 258)
  {
    strcpy(__dst, a3);
    uloc_setKeywordValue("calendar", "gregorian", __dst, 258, a5);
    v14 = (uint64_t *)*a5;
    if ((int)v14 > 0)
    {
LABEL_10:
      Instance = 0;
      goto LABEL_11;
    }
    icu::Locale::Locale(v14, (icu::Locale *)v16, __dst, 0, 0, 0);
    Instance = icu::Calendar::createInstance(v10, (icu::TimeZone *)v16, (UErrorCode *)a5, v15);
    icu::Locale::~Locale((icu::Locale *)v16);
    v10 = 0;
  }
  else
  {
    Instance = 0;
    *a5 = 1;
  }
LABEL_11:
  if (v10)
    (*(void (**)(icu::Calendar *))(*(_QWORD *)v10 + 8))(v10);
  return Instance;
}

uint64_t ucal_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ucal_clone(uint64_t a1, int *a2)
{
  uint64_t result;

  if (*a2 > 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (!result)
    *a2 = 7;
  return result;
}

icu::TimeZone *ucal_setTimeZone(icu::TimeZone *result, const UChar *a2, unsigned int a3, int *a4)
{
  icu::Calendar *v5;
  uint64_t *TimeZone;
  const icu::UnicodeString *v7;
  int v8;
  int v9;
  unint64_t v10;
  void *v11;
  char v12;
  void *v13;
  const UChar *v14;
  const UChar *v15;
  UChar *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  UChar *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*a4 <= 0)
  {
    v5 = result;
    if (!a2)
    {
      result = (icu::TimeZone *)icu::TimeZone::createDefault(result);
      v11 = result;
LABEL_18:
      if (v11)
        return (icu::TimeZone *)icu::Calendar::adoptTimeZone(v5, (uint64_t)v11);
      *a4 = 7;
      return result;
    }
    v22 = 0u;
    v23 = 0u;
    v25 = 0;
    v24 = 0u;
    v20 = 0;
    v21 = (UChar *)off_1E2256B38;
    LOWORD(v22) = 2;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v15 = a2;
    v16 = (UChar *)off_1E2256B38;
    LOWORD(v17) = 2;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v21, a3 >> 31, &v15, a3);
    v14 = v15;
    TimeZone = icu::Calendar::getTimeZone((uint64_t *)&v14, v5);
    icu::UnicodeString::operator=(&v16, (UChar **)TimeZone + 1);
    if ((v17 & 1) != 0)
    {
      v10 = (unsigned __int16)v22;
      if ((v22 & 1) != 0)
      {
LABEL_13:
        v11 = 0;
        v12 = 1;
        goto LABEL_17;
      }
    }
    else
    {
      if ((v17 & 0x8000u) == 0)
        v8 = (unsigned __int16)v17 >> 5;
      else
        v8 = DWORD1(v17);
      if ((v22 & 0x8000u) == 0)
        v9 = (unsigned __int16)v22 >> 5;
      else
        v9 = DWORD1(v22);
      if ((v22 & 1) == 0
        && v8 == v9
        && icu::UnicodeString::doEquals((icu::UnicodeString *)&v16, (const icu::UnicodeString *)&v21, v8))
      {
        goto LABEL_13;
      }
    }
    v11 = icu::TimeZone::createTimeZone(&v21, v7);
    v12 = 0;
LABEL_17:
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v16);
    result = (icu::TimeZone *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v21);
    if ((v12 & 1) != 0)
      return result;
    goto LABEL_18;
  }
  return result;
}

uint64_t ucal_getTimeZoneID(icu::Calendar *a1, UChar *a2, int a3, int *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *TimeZone;
  UChar *v11;
  UChar *v12;
  UChar *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*a4;
  if ((int)v4 > 0)
    return 0;
  TimeZone = icu::Calendar::getTimeZone(v4, a1);
  v14 = 0u;
  v17 = 0;
  v16 = 0u;
  v15 = 0u;
  v13 = (UChar *)off_1E2256B38;
  LOWORD(v14) = 2;
  icu::UnicodeString::operator=(&v13, (UChar **)TimeZone + 1);
  v12 = a2;
  v5 = icu::UnicodeString::extract((uint64_t)&v13, &v12, a3, a4);
  v11 = v12;
  icu::UnicodeString::~UnicodeString(&v11, (icu::UnicodeString *)&v13);
  return v5;
}

uint64_t ucal_getTimeZoneDisplayName(icu::Calendar *a1, unsigned int a2, const char *a3, char *a4, unsigned int a5, int *a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *TimeZone;
  icu::Calendar *v14;
  int v15;
  unsigned int v16;
  UChar *v18;
  UChar *v19;
  char *v20[28];
  void (**v21)(icu::UnicodeString *__hidden);
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)*a6;
  if ((int)v6 > 0)
    return 0xFFFFFFFFLL;
  TimeZone = icu::Calendar::getTimeZone(v6, a1);
  v22 = 0u;
  v25 = 0;
  v24 = 0u;
  v23 = 0u;
  v21 = off_1E2256B38;
  LOWORD(v22) = 2;
  if (a4 || a5)
    icu::UnicodeString::setTo((icu::UnicodeString *)&v21, a4, 0, a5);
  switch(a2)
  {
    case 0u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v20, a3, 0, 0, 0);
      v14 = (icu::Calendar *)TimeZone;
      v15 = 0;
      goto LABEL_10;
    case 1u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v20, a3, 0, 0, 0);
      v14 = (icu::Calendar *)TimeZone;
      v15 = 0;
      goto LABEL_12;
    case 2u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v20, a3, 0, 0, 0);
      v14 = (icu::Calendar *)TimeZone;
      v15 = 1;
LABEL_10:
      v16 = 2;
      goto LABEL_13;
    case 3u:
      icu::Locale::Locale((uint64_t *)a2, (icu::Locale *)v20, a3, 0, 0, 0);
      v14 = (icu::Calendar *)TimeZone;
      v15 = 1;
LABEL_12:
      v16 = 1;
LABEL_13:
      icu::TimeZone::getDisplayName(v14, v15, v16, v20, (uint64_t)&v21);
      icu::Locale::~Locale((icu::Locale *)v20);
      break;
    default:
      break;
  }
  v19 = (UChar *)a4;
  v7 = icu::UnicodeString::extract((uint64_t)&v21, &v19, a5, a6);
  v18 = v19;
  icu::UnicodeString::~UnicodeString(&v18, (icu::UnicodeString *)&v21);
  return v7;
}

uint64_t ucal_inDaylightTime(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  else
    return 0xFFFFFFFFLL;
}

icu::GregorianCalendar *ucal_setGregorianChange(icu::GregorianCalendar *lpsrc, UErrorCode *a2, double a3)
{
  icu::GregorianCalendar *v4;
  icu::GregorianCalendar *v6;
  int v7;

  if (*(int *)a2 <= 0)
  {
    v4 = lpsrc;
    if (lpsrc)
    {
        return icu::GregorianCalendar::setGregorianChange(v6, a3, a2);
      lpsrc = (icu::GregorianCalendar *)sub_18BBE6718(*(_QWORD *)(*(_QWORD *)v4 - 8), (uint64_t)&unk_1E2260530);
      if ((lpsrc & 1) != 0)
        return icu::GregorianCalendar::setGregorianChange(v6, a3, a2);
      v7 = 16;
    }
    else
    {
      v7 = 1;
    }
    *a2 = v7;
  }
  return lpsrc;
}

double ucal_getGregorianChange(_QWORD *lpsrc, int *a2)
{
  icu::GregorianCalendar *v4;
  int v6;

  if (*a2 <= 0)
  {
    if (lpsrc)
    {
        || sub_18BBE6718(*(_QWORD *)(*lpsrc - 8), (uint64_t)&unk_1E2260530))
      {
        return icu::GregorianCalendar::getGregorianChange(v4);
      }
      v6 = 16;
    }
    else
    {
      v6 = 1;
    }
    *a2 = v6;
  }
  return 0.0;
}

uint64_t ucal_getAttribute(icu::Calendar *a1, int a2)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      result = icu::Calendar::isLenient(a1);
      break;
    case 1:
      result = icu::Calendar::getFirstDayOfWeek(a1);
      break;
    case 2:
      result = icu::Calendar::getMinimalDaysInFirstWeek(a1);
      break;
    case 3:
      result = icu::Calendar::getRepeatedWallTimeOption(a1);
      break;
    case 4:
      result = icu::Calendar::getSkippedWallTimeOption(a1);
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t ucal_setAttribute(uint64_t result, int a2, unsigned __int8 a3)
{
  switch(a2)
  {
    case 0:
      result = icu::Calendar::setLenient(result, a3);
      break;
    case 1:
      result = icu::Calendar::setFirstDayOfWeek(result, a3);
      break;
    case 2:
      result = icu::Calendar::setMinimalDaysInFirstWeek(result, a3);
      break;
    case 3:
      result = icu::Calendar::setRepeatedWallTimeOption(result, a3);
      break;
    case 4:
      result = icu::Calendar::setSkippedWallTimeOption(result, a3);
      break;
    default:
      return result;
  }
  return result;
}

double ucal_getMillis(icu::Calendar *this, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
    return icu::Calendar::getTimeInMillis(this, a2);
  else
    return 0.0;
}

uint64_t ucal_setMillis(uint64_t this, double a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
    return icu::Calendar::setTimeInMillis(this, a2, a3);
  return this;
}

icu::Calendar *ucal_setDate(icu::Calendar *this, int a2, int a3, int a4, int *a5)
{
  if (*a5 <= 0)
    return (icu::Calendar *)icu::Calendar::set(this, a2, a3, a4);
  return this;
}

icu::Calendar *ucal_setDateTime(icu::Calendar *this, int a2, int a3, int a4, int a5, int a6, int a7, int *a8)
{
  if (*a8 <= 0)
    return (icu::Calendar *)icu::Calendar::set(this, a2, a3, a4, a5, a6, a7);
  return this;
}

uint64_t ucal_equivalentTo(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t ucal_add(uint64_t result, unsigned int a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 < 0x18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
    else
      *a4 = 1;
  }
  return result;
}

uint64_t ucal_roll(uint64_t result, unsigned int a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2 < 0x18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
    else
      *a4 = 1;
  }
  return result;
}

uint64_t ucal_get(_BYTE *a1, unsigned int a2, UErrorCode *a3)
{
  if (*(int *)a3 > 0)
    return 0xFFFFFFFFLL;
  if (a2 >= 0x18)
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  return icu::Calendar::get(a1, a2, a3);
}

_BYTE *ucal_set(_BYTE *this, unsigned int a2, int a3)
{
  if (a2 <= 0x17)
    return icu::Calendar::set(this, a2, a3);
  return this;
}

BOOL ucal_isSet(uint64_t a1, unsigned int a2)
{
  return a2 <= 0x17 && icu::Calendar::isSet(a1, a2);
}

_BYTE *ucal_clearField(_BYTE *result, unsigned int a2)
{
  if (a2 <= 0x17)
    return icu::Calendar::clear(result, a2);
  return result;
}

uint64_t ucal_getLimit(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t (*v5)(void);

  if (!a4 || *a4 > 0)
    return 0xFFFFFFFFLL;
  if (a2 >= 0x18)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }
  switch(a3)
  {
    case 0:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    case 1:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    case 2:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
    case 3:
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    case 4:
      v5 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 168);
      goto LABEL_13;
    case 5:
      v5 = *(uint64_t (**)(void))(*(_QWORD *)a1 + 176);
LABEL_13:
      result = v5();
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t ucal_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1)
    return icu::Calendar::getLocaleID(a1, a2, a3);
  if (*a3 <= 0)
    *a3 = 1;
  return 0;
}

uint64_t ucal_getCanonicalTimeZoneID(uint64_t a1, uint64_t a2, UChar *a3, int a4, _BYTE *a5, icu::UnicodeString *a6)
{
  uint64_t v7;
  UErrorCode *v12;
  void *v13;
  UChar **v14;
  UChar *v15;
  UChar *v16;
  char v17;
  _BYTE v18[64];
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a6 || *(int *)a6 > 0)
    return 0;
  if (a5)
    *a5 = 0;
  if (a1 && (_DWORD)a2 && a3 && a4 > 0)
  {
    v20 = 0u;
    v23 = 0;
    v22 = 0u;
    v21 = 0u;
    v19 = off_1E2256B38;
    LOWORD(v20) = 2;
    v17 = 0;
    icu::UnicodeString::UnicodeString((uint64_t)v18, a1, a2);
    icu::TimeZone::getCanonicalID((icu::TimeZone *)v18, (const icu::UnicodeString *)&v19, (icu::UnicodeString *)&v17, a6, v12);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v18);
    v7 = 0;
    v14 = (UChar **)*(unsigned int *)a6;
    if ((int)v14 <= 0)
    {
      if (a5)
        *a5 = v17;
      v16 = a3;
      v7 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, (int *)a6);
      v15 = v16;
      v14 = &v15;
    }
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  }
  else
  {
    v7 = 0;
    *(_DWORD *)a6 = 1;
  }
  return v7;
}

uint64_t ucal_getIanaTimeZoneID(uint64_t a1, uint64_t a2, UChar *a3, int a4, icu::UnicodeString *a5)
{
  UErrorCode *v8;
  void *v9;
  uint64_t v10;
  UChar *v12;
  UChar *v13;
  _BYTE v14[64];
  void (**v15)(icu::UnicodeString *__hidden);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v19 = 0;
  v18 = 0u;
  v15 = off_1E2256B38;
  LOWORD(v16) = 2;
  icu::UnicodeString::UnicodeString((uint64_t)v14, a1, a2);
  icu::TimeZone::getIanaID((icu::TimeZone *)v14, (const icu::UnicodeString *)&v15, a5, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v14);
  v13 = a3;
  v10 = icu::UnicodeString::extract((uint64_t)&v15, &v13, a4, (int *)a5);
  v12 = v13;
  icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v15);
  return v10;
}

uint64_t ucal_getType(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  else
    return 0;
}

uint64_t ucal_getDayOfWeekType(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  else
    return 0;
}

uint64_t ucal_getWeekendTransition(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  else
    return 0;
}

uint64_t ucal_isWeekend(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  else
    return 0;
}

uint64_t ucal_getFieldDifference(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  else
    return 0;
}

_OWORD *ucal_getKeywordValuesForLocale(uint64_t a1, char *a2, int a3, int *a4)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *EmptyList;
  _OWORD *v10;
  signed int v12;
  const UChar *StringByIndex;
  char *v14;
  char *v15;
  int v16;
  uint64_t i;
  char *v18;
  int v19;
  int32_t length;
  int v22;

  v22 = 0;
  ulocimp_getRegionForSupplementalData(a2, 1, (char *)&v22, 4, a4);
  v6 = (_QWORD *)ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)a4);
  ures_getByKey((uint64_t)v6, "calendarPreferenceData", (uint64_t)v6, a4);
  v7 = (_QWORD *)ures_getByKey((uint64_t)v6, (const char *)&v22, 0, a4);
  v8 = *a4;
  if (v6 && v8 == 2)
  {
    *a4 = 0;
    v7 = (_QWORD *)ures_getByKey((uint64_t)v6, "001", 0, a4);
    v8 = *a4;
  }
  if (v8 > 0)
    goto LABEL_5;
  EmptyList = ulist_createEmptyList(a4);
  if (*a4 <= 0)
  {
    if ((int)ures_getSize((uint64_t)v7) >= 1)
    {
      v12 = 0;
      while (1)
      {
        length = 0;
        StringByIndex = ures_getStringByIndex((uint64_t)v7, v12, &length, a4);
        v14 = (char *)uprv_malloc(length + 1);
        if (!v14)
          break;
        v15 = v14;
        u_UCharsToChars(StringByIndex, v14, length);
        v15[length] = 0;
        ulist_addItemEndList((uint64_t)EmptyList, v15, 1, a4);
        if (*a4 < 1 && ++v12 < (int)ures_getSize((uint64_t)v7))
          continue;
        goto LABEL_20;
      }
      *a4 = 7;
    }
LABEL_20:
    v16 = *a4;
    if (!a3 && v16 <= 0)
    {
      for (i = 0; i != 18; ++i)
      {
        while (1)
        {
          v18 = off_1E2267C20[i];
          v19 = strlen(v18);
          if (ulist_containsString((uint64_t)EmptyList, v18, v19))
            break;
          ulist_addItemEndList((uint64_t)EmptyList, v18, 0, a4);
          v16 = *a4;
          ++i;
          if (*a4 > 0 || i == 18)
            goto LABEL_31;
        }
      }
      v16 = *a4;
    }
LABEL_31:
    if (v16 >= 1)
    {
      ulist_deleteList(EmptyList);
LABEL_5:
      EmptyList = 0;
    }
  }
  ures_close(v7);
  ures_close(v6);
  v10 = 0;
  if (*a4 <= 0 && EmptyList)
  {
    v10 = uprv_malloc(0x38uLL);
    if (v10)
    {
      ulist_resetList(EmptyList);
      *v10 = xmmword_1E2267CB8;
      v10[1] = *(_OWORD *)&off_1E2267CC8;
      v10[2] = xmmword_1E2267CD8;
      *((_QWORD *)v10 + 6) = ulist_reset_keyword_values_iterator;
      *((_QWORD *)v10 + 1) = EmptyList;
    }
    else
    {
      *a4 = 7;
      ulist_deleteList(EmptyList);
    }
  }
  return v10;
}

uint64_t ucal_getTimeZoneTransitionDate(icu::Calendar *a1, unsigned int a2, double *a3, UErrorCode *a4)
{
  uint64_t result;
  double TimeInMillis;
  uint64_t *v10;
  uint64_t *TimeZone;
  _QWORD *v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(int *)a4 > 0)
    return 0;
  TimeInMillis = icu::Calendar::getTimeInMillis(a1, a4);
  TimeZone = icu::Calendar::getTimeZone(v10, a1);
  if (result)
  {
    if (*(int *)a4 <= 0)
    {
      v12 = (_QWORD *)result;
      memset(v14, 0, sizeof(v14));
      icu::TimeZoneTransition::TimeZoneTransition(v14);
      v13 = 120;
      if (a2 < 2)
        v13 = 112;
      if ((*(unsigned int (**)(_QWORD *, BOOL, _OWORD *, double))(*v12 + v13))(v12, (a2 & 0xFFFFFFFD) == 1, v14, TimeInMillis))
      {
        *a3 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v14);
        icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v14);
        return 1;
      }
      icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v14);
    }
    return 0;
  }
  return result;
}

uint64_t ucal_getWindowsTimeZoneID(uint64_t a1, uint64_t a2, UChar *a3, int a4, icu::UnicodeString *a5)
{
  uint64_t v5;
  UErrorCode *v9;
  UErrorCode *v10;
  void *v11;
  unint64_t v12;
  UChar *v14;
  UChar *v15;
  _BYTE v16[64];
  void (**v17)(icu::UnicodeString *__hidden);
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v18 = 0u;
    v19 = 0u;
    v21 = 0;
    v20 = 0u;
    v17 = off_1E2256B38;
    LOWORD(v18) = 2;
    icu::UnicodeString::UnicodeString((uint64_t)v16, a1, a2);
    icu::TimeZone::getWindowsID((icu::TimeZone *)v16, (const icu::UnicodeString *)&v17, a5, v9, v10);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v16);
    v12 = *(unsigned int *)a5;
    if ((int)v12 > 0)
    {
LABEL_4:
      v5 = 0;
LABEL_10:
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v17);
      return v5;
    }
    v12 = (__int16)v18;
    if ((v12 & 0x80000000) != 0)
    {
      v5 = DWORD1(v18);
      if (SDWORD1(v18) <= 0)
        goto LABEL_4;
    }
    else
    {
      v12 = (unsigned __int16)v18;
      if ((unsigned __int16)v18 < 0x20u)
        goto LABEL_4;
      v5 = (unsigned __int16)v18 >> 5;
    }
    v15 = a3;
    icu::UnicodeString::extract((uint64_t)&v17, &v15, a4, (int *)a5);
    v14 = v15;
    v12 = (unint64_t)&v14;
    goto LABEL_10;
  }
  return 0;
}

uint64_t ucal_getTimeZoneIDForWindowsID(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3, UChar *a4, int a5, icu::UnicodeString *a6)
{
  uint64_t v6;
  UErrorCode *v11;
  void *v12;
  unint64_t v13;
  UChar *v15;
  UChar *v16;
  char v17[64];
  char v18[8];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    v19 = 0u;
    v20 = 0u;
    v22 = 0;
    v21 = 0u;
    *(_QWORD *)v18 = off_1E2256B38;
    LOWORD(v19) = 2;
    icu::UnicodeString::UnicodeString((uint64_t)v17, a1, a2);
    icu::TimeZone::getIDForWindowsID((icu::TimeZone *)v17, a3, v18, a6, v11);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v17);
    v13 = *(unsigned int *)a6;
    if ((int)v13 > 0)
    {
LABEL_4:
      v6 = 0;
LABEL_10:
      icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v18);
      return v6;
    }
    v13 = (__int16)v19;
    if ((v13 & 0x80000000) != 0)
    {
      v6 = DWORD1(v19);
      if (SDWORD1(v19) <= 0)
        goto LABEL_4;
    }
    else
    {
      v13 = (unsigned __int16)v19;
      if ((unsigned __int16)v19 < 0x20u)
        goto LABEL_4;
      v6 = (unsigned __int16)v19 >> 5;
    }
    v16 = a4;
    icu::UnicodeString::extract((uint64_t)v18, &v16, a5, (int *)a6);
    v15 = v16;
    v13 = (unint64_t)&v15;
    goto LABEL_10;
  }
  return 0;
}

void ucal_getTimeZoneOffsetFromLocal(icu::Calendar *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  double TimeInMillis;
  uint64_t *v13;
  double v14;
  uint64_t *TimeZone;
  void *v16;

  if (*(int *)a6 <= 0)
  {
    TimeInMillis = icu::Calendar::getTimeInMillis(a1, a6);
    v13 = (uint64_t *)*(unsigned int *)a6;
    if ((int)v13 <= 0)
    {
      v14 = TimeInMillis;
      TimeZone = icu::Calendar::getTimeZone(v13, a1);
      if (v16)
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, UErrorCode *, double))(*(_QWORD *)v16 + 160))(v16, a2, a3, a4, a5, a6, v14);
      else
        *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

uint64_t sub_18BDA11A4(_DWORD *a1, _DWORD *a2)
{
  int v3;
  int v4;
  BOOL v5;
  _BOOL4 v6;

  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  if (*a1 > *a2)
    return 1;
  v3 = a1[1];
  v4 = a2[1];
  v5 = v3 < v4;
  v6 = v3 > v4;
  if (v5)
    return 0xFFFFFFFFLL;
  else
    return v6;
}

uint64_t uacal_getDayPeriod(uint64_t a1, signed int a2, signed int a3, int a4, int *a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *NextResource;
  const char *Key;
  char **v23;
  int v24;
  char *v25;
  const char *v26;
  int v27;
  int v28;
  char *v29;
  int *v30;
  int v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  signed int *v37;
  signed int v38;
  signed int v39;
  int v40;
  int v41;
  int32_t v42;
  char v43[4];
  __int16 v44;
  int32_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  __int128 __base;
  _OWORD v50[8];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 10;
  if (a2 > 0x17 || a3 >= 0x3C)
  {
    *a5 = 1;
    return 10;
  }
  __base = 0u;
  memset(v50, 0, sizeof(v50));
  v10 = ures_openDirect(0, (uint64_t)"dayPeriods", (uint64_t)a5);
  v11 = (_QWORD *)v10;
  if (*a5 <= 0)
  {
    if (a4)
      v14 = "locales";
    else
      v14 = "locales_selection";
    v15 = (char *)ures_getByKey(v10, v14, 0, a5);
    if (*a5 > 0)
    {
      v12 = 10;
LABEL_27:
      if (v15)
        ures_close(v15);
      goto LABEL_29;
    }
    v48 = 0;
    v47 = 0;
    if (!a1
      || (LODWORD(v46) = 0, uloc_getLanguage(a1, (char *)&v47, 12, (int *)&v46), *a5 > 0)
      || *a5 == -124
      || !(_BYTE)v47)
    {
      strcpy((char *)&v47, "en");
    }
    v16 = (_QWORD *)ures_getByKey((uint64_t)v15, (const char *)&v47, 0, a5);
    if (*a5 >= 1)
    {
      *a5 = 0;
      v16 = (_QWORD *)ures_getByKey((uint64_t)v15, "en", (uint64_t)v16, a5);
      if (*a5 > 0)
        goto LABEL_24;
    }
    v46 = 0;
    v45 = 8;
    ures_getUTF8String((uint64_t)v16, (char *)&v46, &v45, 1, a5);
    if (*a5 > 0
      || (v17 = ures_getByKey((uint64_t)v11, "rules", (uint64_t)v15, a5), v15 = (char *)v17, *a5 > 0)
      || (v18 = ures_getByKey(v17, (const char *)&v46, (uint64_t)v11, a5), v11 = (_QWORD *)v18, *a5 > 0))
    {
LABEL_24:
      v12 = 10;
      goto LABEL_25;
    }
    v19 = 0;
    v20 = 0;
    if (ures_hasNext(v18))
    {
      while (1)
      {
        NextResource = ures_getNextResource((uint64_t)v11, v15, a5);
        v15 = NextResource;
        if (*a5 > 0)
          goto LABEL_72;
        Key = (const char *)ures_getKey((uint64_t)NextResource);
        v23 = &off_1E2267CF0;
        while (strcmp(Key, *v23))
        {
          v23 += 2;
          if (v23 >= &off_1E2267D90)
          {
            v24 = 10;
            goto LABEL_38;
          }
        }
        v24 = *((_DWORD *)v23 + 2);
LABEL_38:
        v40 = v24;
        if (ures_hasNext((_BOOL8)v15))
        {
          v41 = 24;
          do
          {
            v25 = ures_getNextResource((uint64_t)v15, v20, a5);
            v20 = v25;
            if (*a5 > 0)
              goto LABEL_72;
            v26 = (const char *)ures_getKey((uint64_t)v25);
            v44 = 0;
            v42 = 6;
            *(_DWORD *)v43 = 0;
            ures_getUTF8String((uint64_t)v20, v43, &v42, 1, a5);
            if (*a5 >= 1)
              goto LABEL_72;
            v27 = atoi(v43);
            if (!strcmp(v26, "before"))
            {
              v41 = v27;
            }
            else
            {
              if (!strcmp(v26, "from"))
              {
                v28 = 1;
                if (v27 > v41 && v19 <= 11)
                {
                  v29 = (char *)&v50[-1] + 12 * v19;
                  *(_QWORD *)v29 = 0x100000000;
                  *((_DWORD *)v29 + 2) = v40;
                  ++v19;
                  v28 = 1;
                }
              }
              else
              {
                v28 = 0;
              }
              if (v19 <= 11)
              {
                v30 = (int *)&v50[-1] + 3 * v19;
                *v30 = v27;
                v30[1] = v28;
                v30[2] = v40;
                ++v19;
              }
            }
          }
          while (ures_hasNext((_BOOL8)v15));
        }
        if (!ures_hasNext((_BOOL8)v11))
        {
          if (v19 < 12)
            break;
          qsort(&__base, v19, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_18BDA11A4);
          goto LABEL_55;
        }
      }
    }
    v31 = v19;
    v32 = (char *)&v50[-1] + 12 * v19;
    *(_QWORD *)v32 = 24;
    *((_DWORD *)v32 + 2) = 10;
    qsort(&__base, ++v19, 0xCuLL, (int (__cdecl *)(const void *, const void *))sub_18BDA11A4);
    if ((v31 & 0x80000000) == 0)
    {
LABEL_55:
      v33 = 0;
      v34 = (_DWORD *)&__base + 1;
      do
      {
        if (!v33 || (*(v34 - 2) & 0xFFFFFFFE) != 8)
          *v34 = 0;
        ++v33;
        v34 += 3;
      }
      while (v19 != v33);
      if (v19 >= 2)
      {
        v35 = 0;
        v36 = (v19 - 1);
        v37 = (signed int *)v50;
        while (1)
        {
          v38 = *(v37 - 1);
          if (v38 > a2 || v38 >= a2 && *v37 > a3)
            break;
          ++v35;
          v37 += 3;
          if (v36 == v35)
            goto LABEL_69;
        }
        LODWORD(v36) = v35;
LABEL_69:
        v39 = *((_DWORD *)&v50[-1] + 3 * v36);
        if (v39 <= a2 && (v39 < a2 || *((_DWORD *)&v50[-1] + 3 * v36 + 1) <= a3))
        {
          v12 = *((unsigned int *)&v50[-1] + 3 * v36 + 2);
          if (!v20)
          {
LABEL_25:
            if (v16)
              ures_close(v16);
            goto LABEL_27;
          }
LABEL_73:
          ures_close(v20);
          goto LABEL_25;
        }
LABEL_72:
        v12 = 10;
        if (!v20)
          goto LABEL_25;
        goto LABEL_73;
      }
    }
    LODWORD(v36) = 0;
    goto LABEL_69;
  }
  v12 = 10;
LABEL_29:
  if (v11)
    ures_close(v11);
  return v12;
}

void sub_18BDA1768(unsigned int a1, uint64_t a2)
{
  umtx_lock(0);
  ucln_registerCleanup(7, (uint64_t)sub_18BDA17B8);
  if (a1 <= 0x23)
    qword_1ECD28328[a1] = a2;
  umtx_unlock(0);
}

uint64_t sub_18BDA17B8()
{
  uint64_t i;
  void (*v1)(void);

  for (i = 0; i != 36; ++i)
  {
    v1 = (void (*)(void))qword_1ECD28328[i];
    if (v1)
    {
      v1();
      qword_1ECD28328[i] = 0;
    }
  }
  return 1;
}

icu::RuleBasedCollator *ucol_openBinary(const unsigned __int8 *a1, unint64_t a2, const icu::RuleBasedCollator *a3, UErrorCode *a4)
{
  uint64_t *v4;
  icu::RuleBasedCollator *result;
  int v8;
  void *v10;

  v4 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v4 > 0)
    return 0;
  v8 = a2;
  result = (icu::RuleBasedCollator *)icu::UMemory::operator new(v4, (icu::UMemory *)0x110, a2);
  if (!result)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  if (!a3 || *(void (***)(icu::RuleBasedCollator *__hidden))a3 != off_1E2265E40)
    a3 = 0;
  result = (icu::RuleBasedCollator *)icu::RuleBasedCollator::RuleBasedCollator(result, a1, v8, a3, a4);
  if (*(int *)a4 >= 1)
  {
    icu::RuleBasedCollator::~RuleBasedCollator(result);
    icu::UMemory::operator delete(v10);
    return 0;
  }
  return result;
}

uint64_t ucol_cloneBinary(icu::RuleBasedCollator *a1, unsigned __int8 *a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 > 0)
    return 0;
  if (a1 && *(void (***)(icu::RuleBasedCollator *__hidden))a1 != off_1E2265E40)
  {
    *a4 = U_UNSUPPORTED_ERROR;
    return 0;
  }
  return icu::RuleBasedCollator::cloneBinary(a1, a2, a3, a4);
}

uint64_t ucol_safeClone(uint64_t result, uint64_t a2, int *a3, int *a4)
{
  int v6;
  int v7;
  BOOL v8;

  if (!a4)
    return 0;
  if (*a4 > 0)
    return 0;
  if (!result)
  {
    v7 = 1;
LABEL_18:
    *a4 = v7;
    return result;
  }
  if (a3)
  {
    v6 = *a3;
    *a3 = 1;
    if (!v6)
      return 0;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  if (result)
    v7 = -126;
  else
    v7 = 7;
  if (result)
    v8 = a3 == 0;
  else
    v8 = 0;
  if (!v8)
    goto LABEL_18;
  return result;
}

uint64_t ucol_clone(uint64_t a1, int *a2)
{
  uint64_t result;
  int v4;

  if (!a2)
    return 0;
  if (*a2 > 0)
    return 0;
  if (a1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (result)
      return result;
    v4 = 7;
  }
  else
  {
    v4 = 1;
  }
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t ucol_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ucol_mergeSortkeys(char *__s, int a2, char *a3, int a4, _BYTE *a5, int a6)
{
  char *v8;
  int v9;
  int v10;
  const char *v11;
  uint64_t result;
  _BYTE *i;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v20;
  int v21;

  if (!a2 || (v8 = __s) == 0 || (v9 = a2, a2 < -1))
  {
LABEL_14:
    result = 0;
    if (a5)
    {
      if (a6 >= 1)
      {
        result = 0;
        *a5 = 0;
      }
    }
    return result;
  }
  v10 = a4;
  v11 = a3;
  if (a2 < 1)
  {
    if (!a3)
      goto LABEL_14;
  }
  else if (!a3 || __s[a2 - 1])
  {
    goto LABEL_14;
  }
  if (a4 < -1 || !a4)
    goto LABEL_14;
  if (a4 < 1)
  {
    if (a6 < 0)
      return 0;
  }
  else if (a6 < 0 || a3[a4 - 1])
  {
    goto LABEL_14;
  }
  if (!a5 && a6)
    return 0;
  if (a2 < 0)
    v9 = strlen(__s) + 1;
  if (v10 < 0)
    v10 = strlen(v11) + 1;
  result = (v10 + v9);
  if ((int)result <= a6)
  {
    for (i = a5; ; i += 2)
    {
      v14 = *v8;
      if (v14 >= 2)
      {
        do
        {
          *i++ = v14;
          v15 = *++v8;
          LOBYTE(v14) = v15;
        }
        while (v15 > 1);
      }
      *i = 2;
      v16 = i + 1;
      v17 = *(unsigned __int8 *)v11;
      if (v17 >= 2)
      {
        do
        {
          *v16++ = v17;
          v18 = *(unsigned __int8 *)++v11;
          v17 = v18;
        }
        while (v18 > 1);
        i = v16 - 1;
      }
      if (!v17 || *v8 != 1)
        break;
      ++v8;
      ++v11;
      *v16 = 1;
    }
    if (*v8)
      v20 = (unsigned __int8 *)v8;
    else
      v20 = (unsigned __int8 *)v11;
    LODWORD(result) = (_DWORD)v16 - (_DWORD)a5;
    do
    {
      v21 = *v20++;
      *v16++ = v21;
      result = (result + 1);
    }
    while (v21);
  }
  return result;
}

uint64_t ucol_getSortKey(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
}

uint64_t ucol_nextSortKeyPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (a6 && *a6 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
  else
    return 0;
}

uint64_t ucol_getBound(char *__src, int a2, int a3, int a4, char *__dst, int a6, int *a7)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v12;
  int64_t v13;
  int v14;
  BOOL v15;
  char v16;

  if (!a7)
    return 0;
  if (*a7 > 0)
    return 0;
  if (!__src)
    goto LABEL_19;
  v10 = 2;
  while (1)
  {
    v12 = v10;
    v13 = v10 - 1;
    v14 = __src[v10 - 1];
    a4 -= v14 == 1;
    if (!a4)
      break;
    ++v10;
    if (v14)
      v15 = 1;
    else
      v15 = v13 < a2;
    if (!v15)
    {
      *a7 = -123;
      break;
    }
  }
  if (!__dst || a3 + (int)v12 - 1 > a6)
    return (a3 + v12);
  memcpy(__dst, __src, v13);
  if (a3 == 2)
  {
    v16 = -1;
    __dst[v12 - 1] = -1;
    v13 = v12;
    LODWORD(v12) = v12 + 1;
LABEL_23:
    __dst[v13] = v16;
    goto LABEL_24;
  }
  if (a3 == 1)
  {
    v16 = 2;
    goto LABEL_23;
  }
  if (a3)
  {
LABEL_19:
    result = 0;
    *a7 = 1;
    return result;
  }
  LODWORD(v12) = v13;
LABEL_24:
  result = (v12 + 1);
  __dst[(int)v12] = 0;
  return result;
}

uint64_t ucol_setMaxVariable(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

uint64_t ucol_getMaxVariable(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t ucol_setVariableTop(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (a1 && *a4 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  else
    return 0;
}

uint64_t ucol_getVariableTop(uint64_t a1, int *a2)
{
  if (a1 && *a2 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  else
    return 0;
}

uint64_t ucol_restoreVariableTop(uint64_t result, uint64_t a2, int *a3)
{
  if (result)
  {
    if (*a3 <= 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 232))(result);
  }
  return result;
}

uint64_t ucol_setAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (result)
  {
    if (*a4 <= 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 184))(result);
  }
  return result;
}

uint64_t ucol_getAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  if (a1 && *a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  else
    return 0xFFFFFFFFLL;
}

uint64_t ucol_setStrength(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)result + 184))(result, 5, a2, &v2);
  return result;
}

uint64_t ucol_getStrength(uint64_t a1)
{
  int v2;

  v2 = 0;
  if (a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 192))(a1, 5, &v2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t ucol_getReorderCodes(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  else
    return 0;
}

uint64_t ucol_setReorderCodes(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 168))(result);
  return result;
}

uint64_t ucol_getVersion(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
}

uint64_t ucol_strcollIter(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (a4 && *a4 <= 0)
  {
    if (a1 && a2 && a3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    *a4 = 1;
  }
  return 0;
}

uint64_t ucol_strcoll(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;

  v6 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, a3, a4, a5, &v6);
}

uint64_t ucol_strcollUTF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a6 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  else
    return 0;
}

BOOL ucol_greater(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;

  v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, a3, a4, a5, &v6) == 1;
}

BOOL ucol_greaterOrEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;

  v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, a3, a4, a5, &v6) != -1;
}

BOOL ucol_equal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;

  v6 = 0;
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, a3, a4, a5, &v6) == 0;
}

uint64_t ucol_getUCAVersion(uint64_t result, _BYTE *a2)
{
  char v3;
  int v4;

  if (result)
  {
    v4 = 0;
    result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)result + 176))(result, &v4);
    v3 = BYTE1(v4);
    *a2 = BYTE1(v4) >> 3;
    a2[1] = v3 & 7;
    a2[2] = BYTE2(v4) >> 6;
    a2[3] = 0;
  }
  return result;
}

void *ucol_getRules(icu::RuleBasedCollator *a1, unsigned int *a2)
{
  uint64_t Rules;
  unsigned int v5;
  int v6;
  unsigned int v7;
  __int16 v8;

  if (!a1 || *(void (***)(icu::RuleBasedCollator *__hidden))a1 == off_1E2265E40)
  {
    Rules = icu::RuleBasedCollator::getRules(a1);
    v5 = *(unsigned __int16 *)(Rules + 8);
    v6 = (__int16)v5;
    v7 = v5 >> 5;
    if (v6 < 0)
      v7 = *(_DWORD *)(Rules + 12);
    *a2 = v7;
    v8 = *(_WORD *)(Rules + 8);
    if ((v8 & 0x11) != 0)
    {
      return 0;
    }
    else if ((v8 & 2) != 0)
    {
      return (void *)(Rules + 10);
    }
    else
    {
      return *(void **)(Rules + 24);
    }
  }
  else
  {
    *a2 = 0;
    return &unk_18BE2BD38;
  }
}

uint64_t ucol_getRulesEx(void (***a1)(icu::RuleBasedCollator *__hidden this), int a2, UChar *a3, int a4)
{
  uint64_t v6;
  unint64_t v7;
  UChar *v9;
  UChar *v10;
  int v11;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v16 = 0;
  v15 = 0u;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  if (!a1 || *a1 == off_1E2265E40)
    icu::RuleBasedCollator::getRules((uint64_t)a1, a2, (uint64_t)&v12);
  if (a3 && a4 >= 1)
  {
    v11 = 0;
    v10 = a3;
    v6 = icu::UnicodeString::extract((uint64_t)&v12, &v10, a4, &v11);
    v9 = v10;
    v7 = (unint64_t)&v9;
  }
  else
  {
    v7 = (__int16)v13;
    if ((v7 & 0x80000000) != 0)
    {
      v6 = DWORD1(v13);
    }
    else
    {
      v7 = (unsigned __int16)v13;
      v6 = (unsigned __int16)v13 >> 5;
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)&v12);
  return v6;
}

const char *ucol_getLocale(void (***a1)(icu::RuleBasedCollator *__hidden this), int a2, int *a3)
{
  if (*a3 > 0)
    return 0;
  if (a1 && *a1 != off_1E2265E40)
  {
    *a3 = 16;
    return 0;
  }
  return icu::RuleBasedCollator::internalGetLocaleID((uint64_t)a1, a2, a3);
}

const char *ucol_getLocaleByType(void (***a1)(icu::RuleBasedCollator *__hidden this), int a2, int *a3)
{
  if (*a3 > 0)
    return 0;
  if (a1 && *a1 != off_1E2265E40)
  {
    *a3 = 16;
    return 0;
  }
  return icu::RuleBasedCollator::internalGetLocaleID((uint64_t)a1, a2, a3);
}

icu::UnicodeSet *ucol_getTailoredSet(uint64_t a1, int *a2)
{
  icu::UnicodeSet *result;
  unint64_t v4;
  void *v5;

  if (*a2 > 0)
    return 0;
  result = (icu::UnicodeSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1);
  v4 = *a2;
  if ((int)v4 >= 1 && result)
  {
    v5 = icu::UnicodeSet::~UnicodeSet((void *)v4, result);
    icu::UMemory::operator delete(v5);
    return 0;
  }
  return result;
}

uint64_t ucol_equals(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

void sub_18BDA2240(int *a1)
{
  _QWORD *v2;

  if (*a1 <= 0)
  {
    v2 = ures_open("icudt74l-coll", "root", a1);
    qword_1EE00A270 = (uint64_t)v2;
    if (*a1 <= 0)
    {
      qword_1EE00A280 = (uint64_t)ures_getStringByKey((uint64_t)v2, "UCARules", &dword_1EE00A278, a1);
      if (*a1 < 1)
      {
        sub_18BDA1768(0x1Cu, (uint64_t)sub_18BDA22E4);
      }
      else
      {
        ures_close((_QWORD *)qword_1EE00A270);
        qword_1EE00A270 = 0;
      }
    }
  }
}

uint64_t sub_18BDA22E4()
{
  qword_1EE00A280 = 0;
  dword_1EE00A278 = 0;
  ures_close((_QWORD *)qword_1EE00A270);
  qword_1EE00A270 = 0;
  atomic_store(0, &dword_1EE00A288);
  return 1;
}

void sub_18BDA232C(uint64_t a1)
{
  unsigned int v2;
  int v4;

  v4 = 0;
  v2 = atomic_load(&dword_1EE00A288);
  if (v2 != 2 && icu::umtx_initImplPreInit(&dword_1EE00A288))
  {
    sub_18BDA2240(&v4);
    dword_1EE00A28C = v4;
    icu::umtx_initImplPostInit(&dword_1EE00A288);
    if (v4 > 0)
      return;
    goto LABEL_10;
  }
  if (dword_1EE00A28C <= 0 && v4 <= 0)
LABEL_10:
    icu::UnicodeString::doAppend(a1, qword_1EE00A280, 0, dword_1EE00A278);
}

void sub_18BDA23E4(char *a1, char *__s, uint64_t a3, int *a4)
{
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const UChar *StringByKey;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD __dst[3];

  __dst[2] = *MEMORY[0x1E0C80C00];
  if (*a4 <= 0)
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v8 = strlen(__s);
    if (v8 < 16)
    {
      memcpy(__dst, __s, v8 + 1);
      T_CString_toLowerCase((unsigned __int8 *)__dst);
      v9 = ures_open("icudt74l-coll", a1, a4);
      v10 = (_QWORD *)ures_getByKey((uint64_t)v9, "collations", 0, a4);
      v11 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v10, (char *)__dst, 0, (UErrorCode *)a4);
      v19 = 0;
      StringByKey = ures_getStringByKey((uint64_t)v11, "Sequence", (int *)&v19, a4);
      if (*a4 <= 0)
      {
        v13 = (uint64_t)StringByKey;
        v14 = v19;
        icu::UnicodeString::unBogus(a3);
        v15 = *(unsigned __int16 *)(a3 + 8);
        v16 = (__int16)v15;
        v17 = v15 >> 5;
        v18 = v16 >= 0 ? v17 : *(unsigned int *)(a3 + 12);
        icu::UnicodeString::doReplace(a3, 0, v18, v13, 0, v14);
        if ((*(_WORD *)(a3 + 8) & 1) != 0)
          *a4 = 7;
      }
      if (v11)
        ures_close(v11);
      if (v10)
        ures_close(v10);
      if (v9)
        ures_close(v9);
    }
    else
    {
      *a4 = 1;
    }
  }
}

uint64_t *icu::LocaleCacheKey<icu::CollationCacheEntry>::createObject(uint64_t a1, uint64_t a2, int *a3)
{
  return sub_18BDA2588(a2, a3);
}

uint64_t *sub_18BDA2588(uint64_t a1, int *a2)
{
  if (!*(_QWORD *)(a1 + 504))
    return (uint64_t *)sub_18BDA2960(a1, a2);
  if (!*(_QWORD *)(a1 + 512))
    return sub_18BDA2AFC(a1, a2);
  if (*(_QWORD *)(a1 + 520))
    return sub_18BDA3020(a1, a2);
  return sub_18BDA2D08(a1, (UErrorCode *)a2);
}

UErrorCode *sub_18BDA25B0(uint64_t a1, icu::CollationRoot *this)
{
  uint64_t RootCacheEntry;
  UErrorCode *v5;
  const char *v6;
  _QWORD *v8[67];

  v8[66] = *(_QWORD **)MEMORY[0x1E0C80C00];
  RootCacheEntry = icu::CollationRoot::getRootCacheEntry(this, (UErrorCode *)this);
  if (*(int *)this > 0)
    return 0;
  v5 = (UErrorCode *)RootCacheEntry;
  v6 = *(const char **)(a1 + 40);
  if (!*v6 || !strcmp(v6, "root"))
  {
    icu::SharedObject::addRef((uint64_t)v5);
  }
  else
  {
    *(_DWORD *)this = 0;
    bzero(v8, 0x210uLL);
    sub_18BDA2784((uint64_t)v8, v5, (char **)a1, (UErrorCode *)this);
    v5 = (UErrorCode *)sub_18BDA2694((icu::SharedObject ***)v8, (UErrorCode *)this);
    sub_18BDA2918(v8);
  }
  return v5;
}

icu::SharedObject *sub_18BDA2694(icu::SharedObject ***a1, UErrorCode *a2)
{
  icu::SharedObject *v4;
  icu::SharedObject *v6;
  _QWORD v7[31];

  v7[30] = *MEMORY[0x1E0C80C00];
  memset(&v7[1], 0, 232);
  v7[0] = off_1E2267E28;
  icu::Locale::Locale((icu::Locale *)&v7[2], (uint64_t)(a1 + 30));
  v6 = 0;
  sub_18BC8C230(*a1, (const icu::CacheKeyBase *)v7, a1, &v6, a2);
  v4 = v6;
  v7[0] = off_1E2267E28;
  icu::Locale::~Locale((icu::Locale *)&v7[2]);
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)v7);
  return v4;
}

uint64_t sub_18BDA2784(uint64_t a1, UErrorCode *a2, char **a3, UErrorCode *this)
{
  const char *BaseName;
  int KeywordValue;
  _BYTE v11[224];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = icu::UnifiedCache::getInstance(this, a2);
  *(_QWORD *)(a1 + 8) = a2;
  icu::Locale::Locale((icu::Locale *)(a1 + 16), (uint64_t)(a2 + 6));
  icu::Locale::Locale((icu::Locale *)(a1 + 240), (uint64_t)a3);
  *(_DWORD *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 500) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  if (*(int *)this <= 0)
  {
    if (*(_BYTE *)(a1 + 456))
      goto LABEL_3;
    BaseName = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
    if (!strcmp(*(const char **)(a1 + 280), BaseName))
      return a1;
    icu::Locale::Locale((icu::Locale *)v11, BaseName, 0, 0, 0);
    icu::Locale::operator=(a1 + 240, (uint64_t)v11);
    icu::Locale::~Locale((icu::Locale *)v11);
    if (*(_BYTE *)(a1 + 456)
      || (KeywordValue = icu::Locale::getKeywordValue(a3, "collation", (char *)(a1 + 464), 15, this), *(int *)this >= 1))
    {
LABEL_3:
      *this = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      *(_BYTE *)(a1 + KeywordValue + 464) = 0;
      if (KeywordValue)
      {
        if (uprv_stricmp((_BYTE *)(a1 + 464), "default"))
        {
          T_CString_toLowerCase((unsigned __int8 *)(a1 + 464));
          icu::Locale::setKeywordValue((char **)(a1 + 240), "collation", (char *)(a1 + 464), this);
        }
        else
        {
          *(_BYTE *)(a1 + 464) = 0;
        }
      }
    }
  }
  return a1;
}

_QWORD **sub_18BDA2918(_QWORD **a1)
{
  ures_close(a1[65]);
  ures_close(a1[64]);
  ures_close(a1[63]);
  icu::Locale::~Locale((icu::Locale *)(a1 + 30));
  icu::Locale::~Locale((icu::Locale *)(a1 + 2));
  return a1;
}

void *sub_18BDA2960(uint64_t a1, int *a2)
{
  void *v2;
  icu::Locale *v5;
  char *BaseName;
  const char *LocaleByType;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  _BYTE v12[224];
  _OWORD v13[14];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*a2 > 0)
    return 0;
  v5 = (icu::Locale *)(a1 + 240);
  BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
  *(_QWORD *)(a1 + 504) = ures_openNoDefault("icudt74l-coll", BaseName, a2);
  if (*a2 == 2)
  {
    *a2 = -127;
    icu::SharedObject::addRef(*(_QWORD *)(a1 + 8));
    return *(void **)(a1 + 8);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    icu::Locale::Locale((icu::Locale *)v13, (uint64_t)v5);
    LocaleByType = (const char *)ures_getLocaleByType(*(_QWORD *)(a1 + 504), 0, a2);
    v8 = (uint64_t *)*a2;
    if ((int)v8 <= 0)
    {
      icu::Locale::Locale(v8, (icu::Locale *)v12, LocaleByType, 0, 0, 0);
      v9 = icu::Locale::operator=(a1 + 16, (uint64_t)v12);
      icu::Locale::operator=(v5, v9);
      icu::Locale::~Locale((icu::Locale *)v12);
      if (*(_BYTE *)(a1 + 464))
        icu::Locale::setKeywordValue((char **)v5, "collation", (char *)(a1 + 464), (UErrorCode *)a2);
      if (icu::Locale::operator==((uint64_t)v5, (uint64_t)v13))
        v10 = sub_18BDA2AFC(a1, a2);
      else
        v10 = sub_18BDA2694((icu::SharedObject ***)a1, (UErrorCode *)a2);
      v2 = v10;
    }
    else
    {
      v2 = 0;
    }
    icu::Locale::~Locale((icu::Locale *)v13);
  }
  return v2;
}

uint64_t *sub_18BDA2AFC(uint64_t a1, int *a2)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  const UChar *String;
  char *v9;
  int v10;
  int v11;
  int v12;
  int v13;

  if (*a2 > 0)
    return 0;
  v5 = ures_getByKey(*(_QWORD *)(a1 + 504), "collations", 0, a2);
  *(_QWORD *)(a1 + 512) = v5;
  if (*a2 == 2)
  {
    *a2 = -127;
    return sub_18BDA33B0(a1, v6, a2);
  }
  if (*a2 > 0)
    return 0;
  v13 = 0;
  v7 = (_QWORD *)ures_getByKeyWithFallback(v5, "default", 0, (UErrorCode *)&v13);
  v12 = 0;
  String = ures_getString((uint64_t)v7, &v12, &v13);
  if (v13 > 0 || v12 < 1 || v12 > 15)
    strcpy((char *)(a1 + 480), "standard");
  else
    u_UCharsToChars(String, (char *)(a1 + 480), v12 + 1);
  if (v7)
    ures_close(v7);
  if (*(_BYTE *)(a1 + 464))
  {
    if (!strcmp((const char *)(a1 + 464), (const char *)(a1 + 480)))
      *(_DWORD *)(a1 + 496) |= 2u;
    if (!strcmp((const char *)(a1 + 464), "search"))
      *(_DWORD *)(a1 + 496) |= 1u;
    if (!strcmp((const char *)(a1 + 464), "standard"))
      *(_DWORD *)(a1 + 496) |= 4u;
    return sub_18BDA2D08(a1, (UErrorCode *)a2);
  }
  else
  {
    v9 = strcpy((char *)(a1 + 464), (const char *)(a1 + 480));
    v10 = *(_DWORD *)(a1 + 496);
    v11 = v10 | 2;
    *(_DWORD *)(a1 + 496) = v10 | 2;
    if (!strcmp(v9, "search"))
    {
      v11 = v10 | 3;
      *(_DWORD *)(a1 + 496) = v10 | 3;
    }
    if (!strcmp((const char *)(a1 + 464), "standard"))
      *(_DWORD *)(a1 + 496) = v11 | 4;
    icu::Locale::setKeywordValue((char **)(a1 + 240), "collation", (char *)(a1 + 464), (UErrorCode *)a2);
    return (uint64_t *)sub_18BDA2694((icu::SharedObject ***)a1, (UErrorCode *)a2);
  }
}

uint64_t *sub_18BDA2D08(uint64_t a1, UErrorCode *a2)
{
  void *v2;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t LocaleByType;
  const char *v12;
  const char *BaseName;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  void *v20;
  icu::SharedObject *v22;
  _BYTE v23[224];
  _BYTE v24[224];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v5 = (_QWORD *)(a1 + 464);
  v6 = ures_getByKeyWithFallback(*(_QWORD *)(a1 + 512), (char *)(a1 + 464), 0, a2);
  v7 = (_QWORD *)v6;
  if (*a2 == U_MISSING_RESOURCE_ERROR)
  {
    v8 = strlen((const char *)(a1 + 464));
    *a2 = U_USING_DEFAULT_WARNING;
    *(_BYTE *)(a1 + 500) = 1;
    v10 = *(_DWORD *)(a1 + 496);
    if ((v10 & 1) == 0 && v8 >= 7 && !strncmp((const char *)(a1 + 464), "search", 6uLL))
    {
      *(_DWORD *)(a1 + 496) = v10 | 1;
      *(_BYTE *)(a1 + 470) = 0;
    }
    else if ((v10 & 2) != 0)
    {
      if ((v10 & 4) != 0)
      {
        v20 = sub_18BDA33B0(a1, v9, (int *)a2);
        goto LABEL_25;
      }
      *(_DWORD *)(a1 + 496) = v10 | 4;
      *(_BYTE *)(a1 + 472) = 0;
      *v5 = *(_QWORD *)"standard";
    }
    else
    {
      *(_DWORD *)(a1 + 496) = v10 | 2;
      strcpy((char *)(a1 + 464), (const char *)(a1 + 480));
    }
    icu::Locale::setKeywordValue((char **)(a1 + 240), "collation", (char *)(a1 + 464), a2);
    v20 = sub_18BDA2694((icu::SharedObject ***)a1, a2);
LABEL_25:
    v2 = v20;
    if (!v7)
      return (uint64_t *)v2;
LABEL_26:
    ures_close(v7);
    return (uint64_t *)v2;
  }
  if (*(int *)a2 > 0)
  {
    v2 = 0;
    if (!v6)
      return (uint64_t *)v2;
    goto LABEL_26;
  }
  *(_QWORD *)(a1 + 520) = v6;
  LocaleByType = ures_getLocaleByType(v6, 0, (int *)a2);
  if (*(int *)a2 > 0)
    return 0;
  v12 = (const char *)LocaleByType;
  BaseName = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 16));
  icu::Locale::Locale(v14, (icu::Locale *)v24, v12, 0, 0, 0);
  icu::Locale::Locale(v15, (icu::Locale *)v23, BaseName, 0, 0, 0);
  v16 = icu::Locale::operator==((uint64_t)v24, (uint64_t)v23);
  icu::Locale::~Locale((icu::Locale *)v23);
  icu::Locale::~Locale((icu::Locale *)v24);
  if (strcmp((const char *)(a1 + 464), (const char *)(a1 + 480)))
  {
    icu::Locale::setKeywordValue((char **)(a1 + 16), "collation", (char *)(a1 + 464), a2);
    if (*(int *)a2 > 0)
      return 0;
  }
  if ((!*v12 || !strcmp(v12, "root")) && !strcmp((const char *)(a1 + 464), "standard"))
  {
    if (*(_BYTE *)(a1 + 500))
      *a2 = U_USING_DEFAULT_WARNING;
    return sub_18BDA33B0(a1, v18, (int *)a2);
  }
  else
  {
    icu::Locale::Locale(v17, (icu::Locale *)v24, v12, 0, 0, 0);
    icu::Locale::operator=(a1 + 240, (uint64_t)v24);
    icu::Locale::~Locale((icu::Locale *)v24);
    if (v16)
    {
      return sub_18BDA3020(a1, (int *)a2);
    }
    else
    {
      icu::Locale::setKeywordValue((char **)(a1 + 240), "collation", (char *)(a1 + 464), a2);
      v22 = sub_18BDA2694((icu::SharedObject ***)a1, a2);
      return sub_18BDA3400(a1 + 16, v22, (int *)a2);
    }
  }
}

uint64_t *sub_18BDA3020(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  icu::CollationTailoring *v6;
  icu::CollationTailoring *v7;
  _QWORD *v8;
  int *Binary;
  UErrorCode *v10;
  const UChar *StringByKey;
  char *BaseName;
  const char *v13;
  uint64_t *v14;
  uint64_t *v15;
  char **v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  const char *v21;
  unint64_t v22;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  const UChar *String;
  const UChar *v29;
  unsigned int v30;
  int v31[56];
  int v32[56];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*a2;
  if ((int)v2 > 0)
    return 0;
  v6 = (icu::CollationTailoring *)icu::UMemory::operator new(v2, (icu::UMemory *)0x190, (unint64_t)a2);
  v7 = v6;
  if (v6)
  {
    icu::CollationTailoring::CollationTailoring(v6, *(const icu::CollationSettings **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248) + 32));
    if (*((_QWORD *)v7 + 4))
    {
      v8 = (_QWORD *)ures_getByKey(*(_QWORD *)(a1 + 520), "%%CollationBin", 0, a2);
      v30 = 0;
      Binary = ures_getBinary((uint64_t)v8, (int *)&v30, a2);
      icu::CollationDataReader::read(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 248), (const icu::CollationTailoring *)Binary, (const unsigned __int8 *)v30, (uint64_t)v7, (UErrorCode *)a2, v10);
      if (*a2 > 0)
        goto LABEL_19;
      v32[0] = 0;
      v31[0] = 0;
      StringByKey = ures_getStringByKey(*(_QWORD *)(a1 + 520), "Sequence", v31, v32);
      if (v32[0] <= 0)
      {
        v29 = StringByKey;
        icu::UnicodeString::setTo((icu::CollationTailoring *)((char *)v7 + 40), 1, &v29, v31[0]);
      }
      BaseName = (char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
      v13 = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 16));
      icu::Locale::Locale(v14, (icu::Locale *)v32, BaseName, 0, 0, 0);
      icu::Locale::Locale(v15, (icu::Locale *)v31, v13, 0, 0, 0);
      LOBYTE(v13) = icu::Locale::operator==((uint64_t)v32, (uint64_t)v31);
      icu::Locale::~Locale((icu::Locale *)v31);
      icu::Locale::~Locale((icu::Locale *)v32);
      if ((v13 & 1) == 0)
      {
        v18 = ures_open("icudt74l-coll", BaseName, a2);
        v19 = v18;
        if (*a2 > 0)
        {
          if (v18)
            ures_close(v18);
          goto LABEL_19;
        }
        v32[0] = 0;
        v27 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v18, "collations/default", 0, (UErrorCode *)v32);
        v31[0] = 0;
        String = ures_getString((uint64_t)v27, v31, v32);
        if (v32[0] > 0 || v31[0] > 15)
          strcpy((char *)(a1 + 480), "standard");
        else
          u_UCharsToChars(String, (char *)(a1 + 480), v31[0] + 1);
        if (v27)
          ures_close(v27);
        if (v19)
          ures_close(v19);
      }
      icu::Locale::operator=((icu::CollationTailoring *)((char *)v7 + 104), a1 + 240);
      if (!strcmp((const char *)(a1 + 464), (const char *)(a1 + 480)))
      {
        v20 = *(const char **)(a1 + 280);
        v21 = (const char *)icu::Locale::getBaseName((icu::Locale *)(a1 + 240));
        if (!strcmp(v20, v21))
          goto LABEL_18;
        v16 = (char **)((char *)v7 + 104);
        v17 = 0;
      }
      else
      {
        v16 = (char **)((char *)v7 + 104);
        v17 = (char *)(a1 + 464);
      }
      icu::Locale::setKeywordValue(v16, "collation", v17, (UErrorCode *)a2);
LABEL_18:
      if (*a2 <= 0)
      {
        if (*(_BYTE *)(a1 + 500))
          *a2 = -127;
        v24 = *(uint64_t **)(a1 + 504);
        *((_QWORD *)v7 + 45) = v24;
        *(_QWORD *)(a1 + 504) = 0;
        v25 = icu::UMemory::operator new(v24, (icu::UMemory *)0x100, v22);
        v3 = v25;
        if (v25)
        {
          v26 = sub_18BCA2564(v25, a1 + 16, (uint64_t)v7);
          icu::SharedObject::addRef((uint64_t)v26);
          v7 = 0;
        }
        else
        {
          *a2 = 7;
        }
        goto LABEL_20;
      }
LABEL_19:
      v3 = 0;
LABEL_20:
      if (v8)
        ures_close(v8);
      goto LABEL_22;
    }
  }
  v3 = 0;
  *a2 = 7;
LABEL_22:
  if (v7)
    (*(void (**)(icu::CollationTailoring *))(*(_QWORD *)v7 + 8))(v7);
  return v3;
}

uint64_t *sub_18BDA33B0(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 > 0)
    return 0;
  icu::SharedObject::addRef(*(_QWORD *)(a1 + 8));
  return sub_18BDA3400(a1 + 16, *(_QWORD **)(a1 + 8), a3);
}

uint64_t *sub_18BDA3400(uint64_t a1, _QWORD *a2, int *a3)
{
  _QWORD *v3;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;

  v3 = a2;
  if (*a3 <= 0 && !icu::Locale::operator==(a1, (uint64_t)(a2 + 3)))
  {
    v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x100, v6);
    v9 = v8;
    if (v8)
    {
      v10 = sub_18BCA2564(v8, a1, v3[31]);
      icu::SharedObject::addRef((uint64_t)v10);
    }
    else
    {
      *a3 = 7;
    }
    icu::SharedObject::removeRef(v3);
    return v9;
  }
  return v3;
}

void sub_18BDA3484(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2267E28;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

icu::RuleBasedCollator *ucol_open(char *a1, const icu::Locale *a2)
{
  UErrorCode *v3;
  icu::RuleBasedCollator *Instance;
  _BYTE v6[224];
  uint64_t *v7;

  v7 = (uint64_t *)*MEMORY[0x1E0C80C00];
  icu::Locale::Locale(v7, (icu::Locale *)v6, a1, 0, 0, 0);
  Instance = icu::Collator::createInstance((icu::Collator *)v6, a2, v3);
  icu::Locale::~Locale((icu::Locale *)v6);
  if (*(int *)a2 <= 0)
    return Instance;
  else
    return 0;
}

uint64_t ucol_getDisplayName(char *a1, const char *a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t *v12;
  icu::UnicodeString *v13;
  UChar *v15;
  UChar *v16;
  _BYTE v17[224];
  _BYTE v18[224];
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0xFFFFFFFFLL;
  v20 = 0u;
  v23 = 0;
  v22 = 0u;
  v21 = 0u;
  v19 = off_1E2256B38;
  v11 = 2;
  LOWORD(v20) = 2;
  if (a3 || a4)
    icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
  icu::Locale::Locale((uint64_t *)v11, (icu::Locale *)v18, a1, 0, 0, 0);
  icu::Locale::Locale(v12, (icu::Locale *)v17, a2, 0, 0, 0);
  icu::Collator::getDisplayName((icu::Collator *)v18, (const icu::Locale *)v17, (const icu::Locale *)&v19, v13);
  icu::Locale::~Locale((icu::Locale *)v17);
  icu::Locale::~Locale((icu::Locale *)v18);
  v16 = (UChar *)a3;
  v5 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, a5);
  v15 = v16;
  icu::UnicodeString::~UnicodeString(&v15, (icu::UnicodeString *)&v19);
  return v5;
}

uint64_t ucol_getAvailable(int a1, int *a2)
{
  uint64_t AvailableLocales;
  uint64_t result;
  int v5;

  v5 = 0;
  AvailableLocales = icu::Collator::getAvailableLocales((icu::Collator *)&v5, a2);
  result = 0;
  if (AvailableLocales)
  {
    if (v5 > a1)
      return *(_QWORD *)(AvailableLocales + 224 * a1 + 40);
  }
  return result;
}

uint64_t ucol_countAvailable(uint64_t a1, int *a2)
{
  unsigned int v3;

  v3 = 0;
  icu::Collator::getAvailableLocales((icu::Collator *)&v3, a2);
  return v3;
}

_OWORD *ucol_getKeywords(int *a1)
{
  if (*a1 <= 0)
    return uenum_openCharStringsEnumeration((uint64_t)&off_1E2267D90, 1, a1);
  else
    return 0;
}

_OWORD *ucol_getKeywordValues(const char *a1, int *a2)
{
  if (*a2 > 0)
    return 0;
  if (!a1 || strcmp(a1, "collation"))
  {
    *a2 = 1;
    return 0;
  }
  return ures_getKeywordValues((uint64_t)"icudt74l-coll");
}

_OWORD *ucol_getKeywordValuesForLocale(uint64_t a1, char *a2, uint64_t a3, int *a4)
{
  _QWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t (**v9)();
  void *EmptyList;
  uint64_t v11;

  v5 = ures_open("icudt74l-coll", a2, a4);
  v11 = 0;
  v9 = off_1E2267DE0;
  EmptyList = ulist_createEmptyList(a4);
  ures_getAllItemsWithFallback((uint64_t)v5, "collations", (uint64_t)&v9, a4);
  v6 = 0;
  if (*a4 <= 0)
  {
    v7 = uprv_malloc(0x38uLL);
    v6 = v7;
    if (v7)
    {
      *v7 = xmmword_1E2267D98;
      v7[1] = *(_OWORD *)&off_1E2267DA8;
      v7[2] = xmmword_1E2267DB8;
      *((_QWORD *)v7 + 6) = ulist_reset_keyword_values_iterator;
      ulist_resetList(EmptyList);
      *((_QWORD *)v6 + 1) = EmptyList;
      EmptyList = 0;
    }
    else
    {
      *a4 = 7;
    }
  }
  v9 = off_1E2267DE0;
  ulist_deleteList(EmptyList);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v9);
  if (v5)
    ures_close(v5);
  return v6;
}

void sub_18BDA38A4(icu::ResourceSink *a1)
{
  *(_QWORD *)a1 = off_1E2267DE0;
  ulist_deleteList(*((_QWORD **)a1 + 1));
  icu::ResourceSink::~ResourceSink(a1);
}

uint64_t ucol_getFunctionalEquivalent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  return ures_getFunctionalEquivalent(a1, a2, (uint64_t)"icudt74l-coll", (uint64_t)"collations", a3, a4, a5, 1, a6);
}

void sub_18BDA391C(icu::ResourceSink *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2267DE0;
  ulist_deleteList(*((_QWORD **)a1 + 1));
  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BDA3954(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  unsigned int v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  char *v13;
  int v14;
  _OWORD v16[2];
  uint64_t v17;
  char *__s1;
  uint64_t v19;
  int v20;
  _BYTE v21[64];
  char *v22[7];
  int v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  __s1 = a2;
  if (*a5 > 0)
    return;
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v16, a3, a5);
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, 0, (const char **)&__s1, a3))
    return;
  v8 = 1;
  while (1)
  {
    v9 = (*(uint64_t (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3);
    if (v9 == 2)
    {
      v13 = __s1;
      if (strncmp(__s1, "private-", 8uLL))
      {
        v14 = strlen(v13);
        if (!ulist_containsString(*(_QWORD *)(a1 + 8), v13, v14))
          ulist_addItemEndList(*(_QWORD *)(a1 + 8), __s1, 0, a5);
      }
      goto LABEL_18;
    }
    if (!v9 && !*(_BYTE *)(a1 + 16) && !strcmp(__s1, "default"))
      break;
LABEL_18:
    if (*a5 < 1)
    {
      if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, v8++, (const char **)&__s1, a3))
        continue;
    }
    return;
  }
  v24 = 0;
  memset(&v22[1], 0, 48);
  v22[0] = (char *)&v22[1] + 5;
  LODWORD(v22[1]) = 40;
  v23 = 0;
  v20 = 0;
  v19 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 32))(a3, &v20, a5);
  icu::UnicodeString::UnicodeString(v21, 1, &v19);
  icu::CharString::appendInvariantChars((icu::CharString *)v22, (const icu::UnicodeString *)v21, (UErrorCode *)a5);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v21);
  if (*a5 > 0 || !v23)
  {
LABEL_13:
    if (BYTE4(v22[1]))
      uprv_free(v22[0]);
    goto LABEL_18;
  }
  v11 = uprv_strdup(v22[0]);
  if (v11)
  {
    v12 = v11;
    ulist_removeString(*(_QWORD *)(a1 + 8), v22[0]);
    ulist_addItemBeginList(*(_QWORD *)(a1 + 8), v12, 1, a5);
    *(_BYTE *)(a1 + 16) = 1;
    goto LABEL_13;
  }
  *a5 = 7;
  if (BYTE4(v22[1]))
    uprv_free(v22[0]);
}

void sub_18BDA3BD8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2267E28;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BDA3C0C(uint64_t a1)
{
  int v2;
  unsigned int v3;

  v2 = strlen((const char *)((unint64_t)"N3icu19CollationCacheEntryE" & 0x7FFFFFFFFFFFFFFFLL));
  v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu19CollationCacheEntryE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18BDA3C68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *v4 = (uint64_t)off_1E2267E28;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18BDA3CBC(uint64_t a1, char *__dst, int a3)
{
  char *result;

  result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18BDA3CF4(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = sub_18BC8C418(a1, a2);
  if (result)
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return result;
}

void ucol_prepareShortStringOpen(const char *a1, uint64_t a2, char *a3, UErrorCode *a4)
{
  char *v6;
  uint64_t i;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  UChar *String;
  _QWORD v20[2];
  char v21;
  void *v22[7];
  uint64_t v23;
  void *v24[8];
  _BYTE v25[384];
  void *v26;
  int v27;
  __int16 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[3];
  int v34;
  char v35;
  _BYTE v36[1075];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return;
  if (a3)
    v6 = a3;
  else
    v6 = &v21;
  *(_QWORD *)v6 = 0;
  *((_WORD *)v6 + 4) = 0;
  *((_WORD *)v6 + 20) = 0;
  bzero(v25, 0x670uLL);
  for (i = 0; i != 384; i += 64)
  {
    v8 = &v25[i];
    *(_QWORD *)v8 = &v25[i + 13];
    *((_DWORD *)v8 + 2) = 40;
    *((_WORD *)v8 + 6) = 0;
    *((_DWORD *)v8 + 14) = 0;
  }
  v9 = 0;
  v26 = (char *)&v28 + 1;
  v27 = 40;
  v28 = 0;
  v29 = 0;
  v35 = 0;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  do
  {
    v10 = &v25[v9];
    *((_QWORD *)v10 + 70) = &v36[v9];
    *((_DWORD *)v10 + 142) = 40;
    *((_WORD *)v10 + 286) = 0;
    *((_DWORD *)v10 + 154) = 0;
    v9 += 64;
  }
  while (v9 != 1088);
  *(_QWORD *)&v11 = -1;
  *((_QWORD *)&v11 + 1) = -1;
  v30 = v11;
  v31 = v11;
  sub_18BDA4068((uint64_t)v25, a1, (uint64_t)v6, a4);
  sub_18BDA41D8((icu::CharString *)v25, a4);
  memset(&v24[1], 0, 56);
  v24[0] = (char *)&v24[1] + 5;
  LODWORD(v24[1]) = 40;
  v22[0] = 0;
  v22[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v22, (uint64_t)v24);
  ulocimp_canonicalize((char *)v26);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v22);
  v12 = ures_open("icudt74l-coll", (char *)v24[0], (int *)a4);
  v13 = (_QWORD *)ures_getByKey((uint64_t)v12, "collations", 0, (int *)a4);
  memset(&v22[1], 0, 48);
  v22[0] = (char *)&v22[1] + 5;
  LODWORD(v22[1]) = 40;
  v23 = 0;
  v20[0] = 0;
  v20[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v20, (uint64_t)v22);
  ulocimp_getKeywordValue((char *)v24[0], "collation", (uint64_t)v20, (int *)a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v20);
  if (!(_DWORD)v23)
  {
    v15 = ures_getByKeyWithFallback((uint64_t)v13, "default", 0, a4);
    if (*(int *)a4 >= 1)
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
      goto LABEL_13;
    }
    v18 = (_QWORD *)v15;
    LODWORD(v20[0]) = 0;
    String = (UChar *)ures_getString(v15, (int *)v20, (int *)a4);
    icu::CharString::appendInvariantChars((int *)v22, String, v20[0], a4);
    ures_close(v18);
  }
  v14 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v13, (char *)v22[0], 0, a4);
  ures_close(v14);
  ures_close(v13);
  ures_close(v12);
LABEL_13:
  if (BYTE4(v22[1]))
    uprv_free(v22[0]);
  if (BYTE4(v24[1]))
    uprv_free(v24[0]);
  v16 = 68;
  do
  {
    if (BYTE12(v33[v16]))
      uprv_free(*(void **)&v33[v16]);
    v16 -= 4;
  }
  while (v16 * 16);
  if ((_BYTE)v28)
    uprv_free(v26);
  v17 = 48;
  do
  {
    if (BYTE4(v24[v17 + 1]))
      uprv_free(v24[v17]);
    v17 -= 8;
  }
  while (v17 * 8);
}

const char *sub_18BDA4068(uint64_t a1, const char *a2, uint64_t a3, UErrorCode *a4)
{
  int v4;
  const char *v5;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  void *v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v4 = (int)a2;
  v19 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (*(int *)a4 > 0)
  {
LABEL_14:
    *(_DWORD *)(a3 + 4) = (_DWORD)v5 - v4;
  }
  else
  {
    v8 = *(unsigned __int8 *)a2;
    v5 = a2;
    while (v8)
    {
      v9 = -560;
      v10 = &dword_1E2267EA8;
      while (v8 != *((unsigned __int8 *)v10 - 16))
      {
        v9 -= 64;
        v10 += 6;
        if (v9 == -1648)
        {
          *a4 = U_ILLEGAL_ARGUMENT_ERROR;
          goto LABEL_11;
        }
      }
      v11 = (*((uint64_t (**)(uint64_t, _QWORD, const char *, UErrorCode *))v10 - 1))(a1, *v10, v5 + 1, a4);
      v15 = (char *)&v17 + 1;
      v16 = 40;
      v17 = 0;
      v18 = 0;
      icu::CharString::append((icu::CharString *)&v15, v5, v11 - (_DWORD)v5, a4);
      icu::CharString::copyFrom((const void **)(a1 - v9), (const void **)&v15, a4);
      if ((_BYTE)v17)
        uprv_free(v15);
      v5 = (const char *)v11;
LABEL_11:
      --v5;
      do
      {
        v12 = *(unsigned __int8 *)++v5;
        v8 = v12;
      }
      while (v12 == 95);
      if (*(int *)a4 > 0)
        goto LABEL_14;
    }
  }
  return v5;
}

icu::CharString *sub_18BDA41D8(icu::CharString *result, UErrorCode *a2)
{
  icu::CharString *v3;
  icu::CharString *v4;
  char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  char *v15;
  int v16;
  const char *v17;
  int v18;

  if (*((_DWORD *)result + 110))
    return result;
  v3 = result;
  v4 = (icu::CharString *)((char *)result + 384);
  result = icu::CharString::append((icu::CharString *)((char *)result + 384), *(const char **)result, *((_DWORD *)result + 14), a2);
  if (*((_DWORD *)v3 + 30))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "_");
    icu::CharString::append(v4, v17, v18, a2);
    result = icu::CharString::append(v4, *((const char **)v3 + 8), *((_DWORD *)v3 + 30), a2);
  }
  if (*((_DWORD *)v3 + 46))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v15, "_");
    icu::CharString::append(v4, v15, v16, a2);
    v5 = (char *)*((_QWORD *)v3 + 16);
    v6 = *((_DWORD *)v3 + 46);
LABEL_8:
    result = icu::CharString::append(v4, v5, v6, a2);
    goto LABEL_9;
  }
  if (*((_DWORD *)v3 + 62))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v13, "_");
    v5 = v13;
    v6 = v14;
    goto LABEL_8;
  }
LABEL_9:
  if (*((_DWORD *)v3 + 62))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v11, "_");
    icu::CharString::append(v4, v11, v12, a2);
    result = icu::CharString::append(v4, *((const char **)v3 + 24), *((_DWORD *)v3 + 62), a2);
  }
  if (*((_DWORD *)v3 + 78))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v9, "@collation=");
    icu::CharString::append(v4, v9, v10, a2);
    result = icu::CharString::append(v4, *((const char **)v3 + 32), *((_DWORD *)v3 + 78), a2);
  }
  if (*((_DWORD *)v3 + 94))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v7, "@sp=");
    icu::CharString::append(v4, v7, v8, a2);
    return icu::CharString::append(v4, *((const char **)v3 + 40), *((_DWORD *)v3 + 94), a2);
  }
  return result;
}

icu::RuleBasedCollator *ucol_openFromShortString(const char *a1, int a2, char *a3, UErrorCode *a4)
{
  icu::RuleBasedCollator *v4;
  char *v8;
  uint64_t i;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13;
  unsigned int v14;
  uint64_t j;
  _BYTE *v16;
  uint64_t v17;
  int Attribute;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  char v23;
  char *v24[8];
  _BYTE v25[384];
  void *v26;
  int v27;
  __int16 v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[48];
  int v34;
  unsigned int v35;
  char v36;
  _BYTE v37[1075];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  if (a3)
    v8 = a3;
  else
    v8 = &v23;
  *(_QWORD *)v8 = 0;
  *((_WORD *)v8 + 4) = 0;
  *((_WORD *)v8 + 20) = 0;
  bzero(v25, 0x670uLL);
  for (i = 0; i != 384; i += 64)
  {
    v10 = &v25[i];
    *(_QWORD *)v10 = &v25[i + 13];
    *((_DWORD *)v10 + 2) = 40;
    *((_WORD *)v10 + 6) = 0;
    *((_DWORD *)v10 + 14) = 0;
  }
  v11 = 0;
  v26 = (char *)&v28 + 1;
  v27 = 40;
  v28 = 0;
  v29 = 0;
  v36 = 0;
  v32 = 0u;
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  do
  {
    v12 = &v25[v11];
    *((_QWORD *)v12 + 70) = &v37[v11];
    *((_DWORD *)v12 + 142) = 40;
    *((_WORD *)v12 + 286) = 0;
    *((_DWORD *)v12 + 154) = 0;
    v11 += 64;
  }
  while (v11 != 1088);
  *(_QWORD *)&v13 = -1;
  *((_QWORD *)&v13 + 1) = -1;
  v30 = v13;
  v31 = v13;
  v14 = sub_18BDA4068((uint64_t)v25, a1, (uint64_t)v8, a4);
  sub_18BDA41D8((icu::CharString *)v25, a4);
  memset(&v24[1], 0, 56);
  v24[0] = (char *)&v24[1] + 5;
  LODWORD(v24[1]) = 40;
  v22[0] = 0;
  v22[1] = 0;
  icu::CharStringByteSink::CharStringByteSink(v22, (uint64_t)v24);
  ulocimp_canonicalize((char *)v26);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v22);
  v4 = ucol_open(v24[0], (const icu::Locale *)a4);
  for (j = 0; j != 8; ++j)
  {
    v16 = &v25[4 * j];
    v17 = *((unsigned int *)v16 + 112);
    if ((_DWORD)v17 != -1)
    {
      if (a2
        || (Attribute = ucol_getAttribute((uint64_t)v4, j, (int *)a4),
            v17 = *((unsigned int *)v16 + 112),
            Attribute != (_DWORD)v17))
      {
        ucol_setAttribute((uint64_t)v4, j, v17, (int *)a4);
      }
      if (*(int *)a4 >= 1)
      {
        *((_DWORD *)v8 + 1) = v14 - (_DWORD)a1;
LABEL_23:
        ucol_close((uint64_t)v4);
        v4 = 0;
        goto LABEL_24;
      }
    }
  }
  if (v36)
  {
    if (WORD2(v32))
      ucol_setVariableTop((uint64_t)v4, (uint64_t)&v32 + 4, v35, (int *)a4);
    else
      ucol_restoreVariableTop((uint64_t)v4, v32, (int *)a4);
  }
  if (*(int *)a4 >= 1)
    goto LABEL_23;
LABEL_24:
  if (BYTE4(v24[1]))
    uprv_free(v24[0]);
  v19 = 1088;
  do
  {
    if (v33[v19 + 12])
      uprv_free(*(void **)&v33[v19]);
    v19 -= 64;
  }
  while (v19);
  if ((_BYTE)v28)
    uprv_free(v26);
  v20 = 48;
  do
  {
    if (BYTE4(v24[v20 + 1]))
      uprv_free(v24[v20]);
    v20 -= 8;
  }
  while (v20 * 8);
  return v4;
}

uint64_t ucol_getShortDefinitionString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (*a5 > 0)
    return 0;
  if (!a1)
  {
    *a5 = 1;
    return 0;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
}

uint64_t ucol_normalizeShortDefinitionString(const char *a1, char *a2, int a3, _BYTE *a4, UErrorCode *a5)
{
  uint64_t v5;
  uint64_t i;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  _QWORD *v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  uint64_t v29;
  int *v30;
  _BYTE v31[72];
  _BYTE v32[384];
  void *v33;
  int v34;
  __int16 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[3];
  int v41;
  char v42;
  _BYTE v43[1075];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 > 0)
    return 0;
  if (a2)
    bzero(a2, a3);
  bzero(v32, 0x670uLL);
  for (i = 0; i != 384; i += 64)
  {
    v12 = &v32[i];
    *(_QWORD *)v12 = &v32[i + 13];
    *((_DWORD *)v12 + 2) = 40;
    *((_WORD *)v12 + 6) = 0;
    *((_DWORD *)v12 + 14) = 0;
  }
  v13 = 0;
  v33 = (char *)&v35 + 1;
  v34 = 40;
  v35 = 0;
  v36 = 0;
  v42 = 0;
  v39 = 0u;
  memset(v40, 0, sizeof(v40));
  v41 = 0;
  do
  {
    v14 = &v32[v13];
    *((_QWORD *)v14 + 70) = &v43[v13];
    *((_DWORD *)v14 + 142) = 40;
    *((_WORD *)v14 + 286) = 0;
    *((_DWORD *)v14 + 154) = 0;
    v13 += 64;
  }
  while (v13 != 1088);
  if (a4)
    v15 = a4;
  else
    v15 = v31;
  *(_QWORD *)&v16 = -1;
  *((_QWORD *)&v16 + 1) = -1;
  v37 = v16;
  v38 = v16;
  sub_18BDA4068((uint64_t)v32, a1, (uint64_t)v15, a5);
  if (*(int *)a5 <= 0)
  {
    v20 = 0;
    v5 = 0;
    do
    {
      v21 = &v32[64 * v20];
      v22 = *((_DWORD *)v21 + 154);
      if (v22)
      {
        if ((_DWORD)v5)
        {
          if ((int)v5 < a3)
            *(_WORD *)&a2[strlen(a2)] = 95;
          v23 = v5 + 1;
        }
        else
        {
          v23 = 0;
        }
        v24 = v21 + 560;
        v25 = **((unsigned __int8 **)v21 + 70) - 75;
        v26 = v25 > 0xB;
        v27 = (1 << v25) & 0x883;
        if (v26 || v27 == 0)
        {
          v5 = icu::CharString::extract((char **)v21 + 70, &a2[v23], a3 - v23, a5) + v23;
        }
        else
        {
          if (v22 >= 1)
          {
            v29 = 0;
            v30 = (int *)(v21 + 616);
            do
            {
              if (v23 + v29 < a3)
              {
                a2[v23 + v29] = uprv_toupper(*(char *)(*v24 + v29));
                v22 = *v30;
              }
              ++v29;
            }
            while (v29 < v22);
          }
          v5 = (v22 + v23);
        }
      }
      ++v20;
    }
    while (v20 != 17);
  }
  else
  {
    v5 = 0;
  }
  v17 = 68;
  do
  {
    if (BYTE12(v40[v17]))
      uprv_free(*(void **)&v40[v17]);
    v17 -= 4;
  }
  while (v17 * 16);
  if ((_BYTE)v35)
    uprv_free(v33);
  v18 = 384;
  do
  {
    if (v31[v18 + 20])
      uprv_free(*(void **)&v31[v18 + 8]);
    v18 -= 64;
  }
  while (v18);
  return v5;
}

uint64_t ucol_getContractions(void *a1, icu::UnicodeSet *a2, UErrorCode *a3)
{
  ucol_getContractionsAndExpansions(a1, a2, 0, 0, a3);
  return uset_getItemCount(a2);
}

void *ucol_getContractionsAndExpansions(void *this, icu::UnicodeSet *a2, icu::UnicodeSet *a3, char a4, UErrorCode *a5)
{
  UErrorCode v5;

  if (*(int *)a5 <= 0)
  {
    if (!this)
    {
      v5 = U_ILLEGAL_ARGUMENT_ERROR;
      goto LABEL_6;
    }
    if (*(void (***)(icu::RuleBasedCollator *__hidden))this != off_1E2265E40)
    {
      v5 = U_UNSUPPORTED_ERROR;
LABEL_6:
      *a5 = v5;
      return this;
    }
    return icu::RuleBasedCollator::internalGetContractionsAndExpansions(this, a2, a3, a4, a5);
  }
  return this;
}

_BYTE *sub_18BDA49F4(uint64_t a1, unsigned int a2, _BYTE *a3, int *a4)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  int v8;
  BOOL v9;

  v4 = 0;
  while (byte_18BE2BDC4[v4] != *a3)
  {
    v4 += 8;
    if (v4 == 96)
    {
      *a4 = 1;
      v5 = -1;
      goto LABEL_6;
    }
  }
  v5 = *(_DWORD *)&byte_18BE2BDC4[v4 + 4];
LABEL_6:
  *(_DWORD *)(a1 + 4 * a2 + 448) = v5;
  v8 = a3[1];
  v6 = a3 + 1;
  v7 = v8;
  v9 = v8 == 95 || v7 == 0;
  if (!v9 || *a4 >= 1)
    *a4 = 1;
  return v6;
}

char *sub_18BDA4A68(uint64_t a1, int a2, char *a3, int *a4)
{
  int v6;
  unint64_t v7;
  __int16 v8;
  int v9;
  char *v12;

  v12 = a3;
  if (a2)
  {
    *(_DWORD *)(a1 + 480) = sub_18BDA4CD8(&v12, a4);
    v6 = *a4;
  }
  else
  {
    if (*a4 > 0)
    {
      *(_DWORD *)(a1 + 548) = 0;
      return v12;
    }
    v7 = 0;
    do
    {
      if (!*v12 || *v12 == 95)
      {
        *(_DWORD *)(a1 + 548) = v7;
        goto LABEL_20;
      }
      v8 = sub_18BDA4CD8(&v12, a4);
      v9 = v7 + 1;
      *(_WORD *)(a1 + 484 + 2 * v7) = v8;
      v6 = *a4;
    }
    while (*a4 <= 0 && v7++ < 0x1F);
    *(_DWORD *)(a1 + 548) = v9;
    if (v9 == 32 && *v12 && *v12 != 95)
    {
      *a4 = 15;
      return v12;
    }
  }
  if (v6 <= 0)
LABEL_20:
    *(_BYTE *)(a1 + 552) = 1;
  return v12;
}

_BYTE *sub_18BDA4B54(uint64_t a1, unsigned int a2, uint64_t a3, UErrorCode *a4)
{
  icu::CharString *v6;
  _BYTE *v7;
  _BYTE *v8;
  char v9;

  v6 = (icu::CharString *)(a1 + ((unint64_t)a2 << 6));
  v7 = (_BYTE *)(a3 + 1);
  do
  {
    v8 = v7;
    if (a2 <= 5 && ((1 << a2) & 0x31) != 0)
      v9 = uprv_asciitolower((char)*(v7 - 1));
    else
      v9 = *(v7 - 1);
    icu::CharString::append(v6, v9, a4);
    if (!*v8)
      break;
    if (*v8 == 95)
      break;
    v7 = v8 + 1;
  }
  while (*(int *)a4 < 1);
  return v8;
}

const char *sub_18BDA4BF4(uint64_t a1, int a2, char *__s, UErrorCode *a4)
{
  const char *v6;
  char *v7;
  char *v8;
  void *v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = __s + 1;
  v7 = strchr(__s + 2, *__s);
  if (v7 && (v8 = v7, v7 - v6 < 256))
  {
    v10 = (char *)&v12 + 1;
    v11 = 40;
    v12 = 0;
    v13 = 0;
    icu::CharString::append((icu::CharString *)&v10, v6, (_DWORD)v7 - (_DWORD)v6, a4);
    icu::CharString::copyFrom((const void **)(a1 + 384), (const void **)&v10, a4);
    if ((_BYTE)v12)
      uprv_free(v10);
    return v8 + 1;
  }
  else
  {
    *a4 = U_BUFFER_OVERFLOW_ERROR;
  }
  return v6;
}

uint64_t sub_18BDA4CD8(char **a1, _DWORD *a2)
{
  char v2;
  uint64_t v3;
  unsigned __int16 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  BOOL v9;

  v2 = **a1;
  if (!v2)
  {
LABEL_16:
    v4 = 0;
LABEL_17:
    *a2 = 1;
    return v4;
  }
  v3 = 0;
  v4 = 0;
  v5 = (uint64_t)(*a1 + 1);
  do
  {
    v6 = v3;
    v7 = v2;
    if ((v2 - 48) >= 0xAu)
    {
      if ((v2 - 97) >= 6)
      {
        if ((v2 - 65) > 5)
          goto LABEL_16;
        v8 = -55;
      }
      else
      {
        v8 = -87;
      }
    }
    else
    {
      v8 = -48;
    }
    v4 = (v8 + v7) | (16 * v4);
    *a1 = (char *)(v5 + v6);
    v2 = *(_BYTE *)(v5 + v6);
    v3 = v6 + 1;
    if (v2)
      v9 = v6 >= 3;
    else
      v9 = 1;
  }
  while (!v9);
  if (v6 <= 2)
    goto LABEL_17;
  return v4;
}

void sub_18BDA4D7C(uint64_t a1, int a2, int a3, int a4, int *a5)
{
  int v9;
  int v10;
  char *v11;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;

  if (*a5 <= 0)
  {
    v9 = *(_DWORD *)(a1 + 200);
    v10 = *(_DWORD *)(a1 + 204);
    if (v9 < v10)
    {
      v11 = *(char **)(a1 + 192);
LABEL_8:
      v16 = &v11[12 * v9];
      *(_DWORD *)v16 = a2;
      *((_DWORD *)v16 + 1) = a3;
      *((_DWORD *)v16 + 2) = a4;
      *(_DWORD *)(a1 + 200) = v9 + 1;
      return;
    }
    v13 = (char *)uprv_malloc(12 * v10 + 96);
    if (v13)
    {
      v11 = v13;
      v14 = *(void **)(a1 + 192);
      v15 = *(int *)(a1 + 204);
      memcpy(v13, v14, 12 * v15);
      if (v14 != (void *)a1)
      {
        uprv_free(v14);
        LODWORD(v15) = *(_DWORD *)(a1 + 204);
      }
      *(_QWORD *)(a1 + 192) = v11;
      *(_DWORD *)(a1 + 204) = v15 + 8;
      v9 = *(_DWORD *)(a1 + 200);
      goto LABEL_8;
    }
    *a5 = 7;
  }
}

void sub_18BDA4E5C(uint64_t a1, uint64_t a2, int a3, int a4, int *a5)
{
  int v9;
  int v10;
  char *v11;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;

  if (*a5 <= 0)
  {
    v9 = *(_DWORD *)(a1 + 264);
    v10 = *(_DWORD *)(a1 + 268);
    if (v9 < v10)
    {
      v11 = *(char **)(a1 + 256);
LABEL_8:
      v16 = &v11[16 * v9];
      *(_QWORD *)v16 = a2;
      *((_DWORD *)v16 + 2) = a3;
      *((_DWORD *)v16 + 3) = a4;
      *(_DWORD *)(a1 + 264) = v9 + 1;
      return;
    }
    v13 = (char *)uprv_malloc(16 * (v10 + 8));
    if (v13)
    {
      v11 = v13;
      v14 = *(void **)(a1 + 256);
      v15 = *(int *)(a1 + 268);
      memcpy(v13, v14, 16 * v15);
      if (v14 != (void *)a1)
      {
        uprv_free(v14);
        LODWORD(v15) = *(_DWORD *)(a1 + 268);
      }
      *(_QWORD *)(a1 + 256) = v11;
      *(_DWORD *)(a1 + 268) = v15 + 8;
      v9 = *(_DWORD *)(a1 + 264);
      goto LABEL_8;
    }
    *a5 = 7;
  }
}

uint64_t sub_18BDA4F30(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 272) = a2;
  return sub_18BDA4F78(a1, *(_QWORD *)(a2 + 16));
}

_QWORD *sub_18BDA4F3C(_QWORD *a1, uint64_t a2)
{
  a1[32] = a1;
  a1[33] = 0x1000000000;
  a1[34] = a2;
  sub_18BDA4F78((uint64_t)a1, *(_QWORD *)(a2 + 16));
  return a1;
}

uint64_t sub_18BDA4F78(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  v5 = 0;
  *(_DWORD *)(a1 + 280) = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 192))(a2, 5, &v5);
  *(_BYTE *)(a1 + 284) = (*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a2 + 192))(a2, 1, &v5) == 20;
  *(_BYTE *)(a1 + 285) = 0;
  result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a2 + 240))(a2, &v5);
  *(_DWORD *)(a1 + 288) = result;
  return result;
}

_QWORD *sub_18BDA5000(_QWORD *a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)a1[32];
  if (v2 != a1)
    uprv_free(v2);
  return a1;
}

uint64_t sub_18BDA5030(uint64_t a1, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v9;

  v2 = *(_DWORD *)(a1 + 280);
  if (v2 == 1)
    v3 = 0;
  else
    v3 = a2;
  v4 = BYTE1(a2);
  if (!v2)
  {
    v4 = *(unsigned int *)(a1 + 280);
    v3 = v4;
  }
  v5 = HIWORD(a2);
  if (*(_BYTE *)(a1 + 284) && a2 >= 0x10000 && *(_DWORD *)(a1 + 288) > a2)
  {
    v6 = 0;
    v4 = 0;
    v3 = 0;
    if (v2 <= 2)
      v7 = 0;
    else
      v7 = HIWORD(a2);
    *(_BYTE *)(a1 + 285) = 1;
  }
  else
  {
    if (!(_DWORD)v5 && *(_BYTE *)(a1 + 285))
      return 0;
    v9 = v2 <= 2;
    v7 = 0xFFFFLL;
    if (v9)
      v7 = 0;
    *(_BYTE *)(a1 + 285) = 0;
    v6 = v5 << 48;
  }
  return v6 | (v4 << 32) | (v3 << 16) | v7;
}

uint64_t ucol_tertiaryOrder(uint64_t result)
{
  return result;
}

uint64_t ucol_secondaryOrder(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t ucol_primaryOrder(unsigned int a1)
{
  return HIWORD(a1);
}

icu::CollationElementIterator *ucol_openElements(icu::RuleBasedCollator *a1, uint64_t a2, unsigned int a3, int *a4)
{
  icu::CollationElementIterator *CollationElementIterator;
  int v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0;
  if (!a1 || !a2 && a3)
  {
    CollationElementIterator = 0;
    v7 = 1;
LABEL_9:
    *a4 = v7;
    return CollationElementIterator;
  }
  if (*(void (***)(icu::RuleBasedCollator *__hidden))a1 != off_1E2265E40)
  {
    CollationElementIterator = 0;
    v7 = 16;
    goto LABEL_9;
  }
  memset(v11, 0, sizeof(v11));
  v10 = a2;
  icu::UnicodeString::UnicodeString(v11, a3 >> 31, &v10);
  CollationElementIterator = icu::RuleBasedCollator::createCollationElementIterator(a1, (UChar **)v11);
  if (!CollationElementIterator)
  {
    v9 = 7;
    *a4 = 7;
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)v11);
  return CollationElementIterator;
}

void ucol_closeElements(icu::CollationElementIterator *a1)
{
  void *v1;

  if (a1)
  {
    icu::CollationElementIterator::~CollationElementIterator(a1);
    icu::UMemory::operator delete(v1);
  }
}

uint64_t ucol_next(icu::CollationElementIterator *a1, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
    return icu::CollationElementIterator::next(a1, a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t ucol_nextProcessed(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[256];
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char v16;
  int v17;
  int v18;

  v11 = v10;
  v12 = 0x1000000000;
  v13 = a1;
  v7 = *(_QWORD *)(a1 + 16);
  v18 = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 192))(v7, 5, &v18);
  v15 = (*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 192))(v7, 1, &v18) == 20;
  v16 = 0;
  v17 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 240))(v7, &v18);
  v8 = sub_18BDA5300((uint64_t)v10, a2, a3, a4);
  if (v11 != v10)
    uprv_free(v11);
  return v8;
}

uint64_t sub_18BDA5300(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  uint64_t result;
  int Offset;
  unsigned int v10;
  int v11;

  if (*(int *)a4 > 0)
    return 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 264) = 0;
  while (1)
  {
    Offset = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
    v10 = icu::CollationElementIterator::next(*(icu::CollationElementIterator **)(a1 + 272), a4);
    v11 = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
    if (v10 == -1)
      break;
    result = sub_18BDA5030(a1, v10);
    if (result)
    {
      if (!a2)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  result = 0x7FFFFFFFFFFFFFFFLL;
  if (a2)
LABEL_7:
    *a2 = Offset;
LABEL_8:
  if (a3)
    *a3 = v11;
  return result;
}

uint64_t ucol_previous(icu::CollationElementIterator *a1, UErrorCode *a2)
{
  if (*(int *)a2 <= 0)
    return icu::CollationElementIterator::previous(a1, a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t ucol_previousProcessed(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[256];
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char v16;
  int v17;
  int v18;

  v11 = v10;
  v12 = 0x1000000000;
  v13 = a1;
  v7 = *(_QWORD *)(a1 + 16);
  v18 = 0;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 192))(v7, 5, &v18);
  v15 = (*(unsigned int (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 192))(v7, 1, &v18) == 20;
  v16 = 0;
  v17 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v7 + 240))(v7, &v18);
  v8 = sub_18BDA54B0((uint64_t)v10, a2, a3, a4);
  if (v11 != v10)
    uprv_free(v11);
  return v8;
}

uint64_t sub_18BDA54B0(uint64_t a1, _DWORD *a2, _DWORD *a3, UErrorCode *a4)
{
  int v9;
  int Offset;
  unsigned int v11;
  int v12;
  UErrorCode v13;
  int v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[12];
  void *v23;
  uint64_t v24;

  if (*(int *)a4 <= 0)
  {
    do
    {
      v9 = *(_DWORD *)(a1 + 264);
      if (v9 > 0)
        goto LABEL_28;
      memset(v22, 0, sizeof(v22));
      v23 = v22;
      v24 = 0x1000000000;
      while (1)
      {
        Offset = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
        v11 = icu::CollationElementIterator::previous(*(icu::CollationElementIterator **)(a1 + 272), a4);
        v12 = icu::CollationElementIterator::getOffset(*(icu::CollationElementIterator **)(a1 + 272));
        if (v11 == -1)
          break;
        sub_18BDA4D7C((uint64_t)v22, v11, v12, Offset, (int *)a4);
        v13 = *a4;
        if (*(int *)a4 > 0)
          goto LABEL_20;
        if (v11 >= 0x10000 && (v11 & 0xC0) != 0xC0)
          goto LABEL_9;
      }
      if ((int)v24 > 0)
      {
        v13 = *a4;
        if (*(int *)a4 <= 0)
        {
LABEL_9:
          v14 = v24;
          if ((int)v24 >= 1)
          {
            do
            {
              v15 = v23;
              v16 = v14 - 1;
              LODWORD(v24) = v14 - 1;
              v17 = sub_18BDA5030(a1, *((_DWORD *)v23 + 3 * (v14 - 1)));
              if (v17)
                sub_18BDA4E5C(a1, v17, v15[3 * v16 + 1], v15[3 * v16 + 2], (int *)a4);
              v13 = *a4;
              v14 = v24;
            }
            while (*(int *)a4 <= 0 && (int)v24 > 0);
          }
        }
LABEL_20:
        v19 = v13 > U_ZERO_ERROR;
        goto LABEL_21;
      }
      v19 = 6;
LABEL_21:
      if (v23 != v22)
        uprv_free(v23);
    }
    while (!v19);
    if (v19 != 6)
      return 0x7FFFFFFFFFFFFFFFLL;
    v9 = *(_DWORD *)(a1 + 264);
    if (v9 > 0)
    {
LABEL_28:
      v20 = *(_QWORD *)(a1 + 256);
      v21 = (v9 - 1);
      *(_DWORD *)(a1 + 264) = v21;
      if (a2)
        *a2 = *(_DWORD *)(v20 + 16 * v21 + 8);
      if (a3)
        *a3 = *(_DWORD *)(v20 + 16 * v21 + 12);
      return *(_QWORD *)(v20 + 16 * v21);
    }
    if (a2)
      *a2 = -1;
    if (a3)
      *a3 = -1;
  }
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t *ucol_setText(uint64_t *result, uint64_t a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  _OWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    v5 = result;
    if (a2 || !a3)
    {
      memset(v8, 0, sizeof(v8));
      v7 = a2;
      icu::UnicodeString::UnicodeString(v8, a3 >> 31, &v7);
      icu::CollationElementIterator::setText(v5, (UChar **)v8, a4);
      return (uint64_t *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

unint64_t ucol_setOffset(unint64_t this, uint64_t a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
    return icu::CollationElementIterator::setOffset(this, a2, a3);
  return this;
}

uint64_t **ucsdet_open(int *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t **result;
  uint64_t *v5;
  void *v6;

  v2 = (uint64_t *)*a1;
  if ((int)v2 > 0)
    return 0;
  result = (uint64_t **)icu::UMemory::operator new(v2, (icu::UMemory *)0x20, a2);
  if (result)
  {
    result = sub_18BCAB57C(result, a1, v5);
    if (*a1 >= 1)
    {
      v6 = (void *)sub_18BCAB614((uint64_t)result);
      icu::UMemory::operator delete(v6);
      return 0;
    }
  }
  return result;
}

void ucsdet_close(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    v1 = (void *)sub_18BCAB614(a1);
    icu::UMemory::operator delete(v1);
  }
}

uint64_t ucsdet_setText(uint64_t a1, char *a2, int a3, int *a4)
{
  if (*a4 <= 0)
    return sub_18BCAB618(a1, a2, a3);
  return a1;
}

uint64_t ucsdet_getName(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return sub_18BCABDF8(a1);
  else
    return 0;
}

uint64_t ucsdet_getConfidence(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return sub_18BCABE08(a1);
  else
    return 0;
}

uint64_t ucsdet_getLanguage(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return sub_18BCABE00(a1);
  else
    return 0;
}

uint64_t ucsdet_detect(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return sub_18BCAB66C(a1, a2);
  else
    return 0;
}

char **ucsdet_setDeclaredEncoding(char **a1, char *a2, int a3, int *a4)
{
  if (*a4 <= 0)
    return (char **)sub_18BCAB664(a1, a2, a3);
  return a1;
}

uint64_t ucsdet_detectAll(_QWORD *a1, _DWORD *a2, int *a3)
{
  if (*a3 <= 0)
    return sub_18BCAB6BC(a1, a2, a3);
  else
    return 0;
}

uint64_t ucsdet_isInputFilterEnabled(uint64_t a1)
{
  if (a1)
    return sub_18BCAB65C(a1);
  return a1;
}

uint64_t ucsdet_enableInputFilter(uint64_t result, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    v4 = sub_18BCAB65C(result);
    sub_18BCAB644(v3, a2);
    return v4;
  }
  return result;
}

uint64_t ucsdet_getUChars(unsigned __int8 **a1, unint64_t a2, int a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
    return sub_18BCABE10(a1, a2, a3, a4);
  else
    return 0;
}

_QWORD *ucsdet_getAllDetectableCharsets(uint64_t a1, int *a2)
{
  return sub_18BCAB924(a2);
}

uint64_t udat_toCalendarDateField(unsigned int a1)
{
  if (a1 > 0x25)
    return 24;
  else
    return dword_18BE2BE7C[a1];
}

uint64_t udat_patternCharToDateFormatField(icu::DateFormatSymbols *a1)
{
  UChar v1;
  const __int16 *PatternUChars;
  UChar *v3;

  v1 = (unsigned __int16)a1;
  PatternUChars = icu::DateFormatSymbols::getPatternUChars(a1);
  v3 = u_strchr((const UChar *)PatternUChars, v1);
  if (v3)
    return ((unint64_t)((char *)v3 - (char *)PatternUChars) >> 1);
  else
    return 38;
}

void udat_registerOpener(void *a1, int *a2)
{
  if (*a2 <= 0)
  {
    umtx_lock(0);
    if (off_1EE00A290)
      *a2 = 1;
    else
      off_1EE00A290 = a1;
    umtx_unlock(0);
  }
}

void *udat_unregisterOpener(void *a1, int *a2)
{
  void *v2;
  BOOL v4;

  if (*a2 > 0)
    return 0;
  v2 = a1;
  umtx_lock(0);
  if (off_1EE00A290)
    v4 = off_1EE00A290 == v2;
  else
    v4 = 0;
  if (v4)
  {
    off_1EE00A290 = 0;
  }
  else
  {
    v2 = 0;
    *a2 = 1;
  }
  umtx_unlock(0);
  return v2;
}

icu::SimpleDateFormat *udat_open(icu::Locale *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, UErrorCode *a8)
{
  icu::SimpleDateFormat *DateTimeInstance;
  int v11;
  int v13;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  icu::SimpleDateFormat *v20;
  uint64_t *v21;
  const icu::UnicodeString *v22;
  void *TimeZone;
  void *v24;
  uint64_t *Default;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[4];
  UChar *v30[29];

  v30[28] = *(UChar **)MEMORY[0x1E0C80C00];
  if (*(int *)a8 > 0)
    return 0;
  v11 = a7;
  v13 = a5;
  v16 = a2;
  v17 = (uint64_t)a1;
  v18 = (uint64_t *)off_1EE00A290;
  if (!off_1EE00A290
    || (a1 = (icu::Locale *)off_1EE00A290(a1, a2, a3, a4, a5, a6, a7, a8), (DateTimeInstance = a1) == 0))
  {
    if ((_DWORD)v17 == -2)
    {
      memset(v29, 0, sizeof(v29));
      v28 = a6;
      icu::UnicodeString::UnicodeString(v29, v11 == -1, &v28);
      v26 = v28;
      v20 = (icu::SimpleDateFormat *)icu::UMemory::operator new(&v26, (icu::UMemory *)0x340, v19);
      DateTimeInstance = v20;
      if (a3)
      {
        if (v20)
        {
          icu::Locale::Locale(v21, (icu::Locale *)v30, a3, 0, 0, 0);
          icu::SimpleDateFormat::SimpleDateFormat(DateTimeInstance, (const icu::UnicodeString *)v29, (const icu::Locale *)v30, a8);
          icu::Locale::~Locale((icu::Locale *)v30);
        }
      }
      else if (v20)
      {
        icu::SimpleDateFormat::SimpleDateFormat(v20, (const icu::UnicodeString *)v29, a8);
      }
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
      if (DateTimeInstance)
        goto LABEL_16;
LABEL_22:
      *a8 = U_MEMORY_ALLOCATION_ERROR;
      return DateTimeInstance;
    }
    if (a3)
    {
      icu::Locale::Locale(v18, (icu::Locale *)v30, a3, 0, 0, 0);
      DateTimeInstance = icu::DateFormat::createDateTimeInstance(v16, v17, (const icu::Locale *)v30);
      icu::Locale::~Locale((icu::Locale *)v30);
      if (!DateTimeInstance)
        goto LABEL_22;
    }
    else
    {
      Default = icu::Locale::getDefault(a1);
      DateTimeInstance = icu::DateFormat::createDateTimeInstance(v16, v17, (const icu::Locale *)Default);
      if (!DateTimeInstance)
        goto LABEL_22;
    }
LABEL_16:
    if (*(int *)a8 < 1)
    {
      if (!a4)
        return DateTimeInstance;
      v27 = a4;
      icu::UnicodeString::UnicodeString(v30, v13 == -1, &v27);
      TimeZone = icu::TimeZone::createTimeZone(v30, v22);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v30);
      if (TimeZone)
      {
        (*(void (**)(icu::SimpleDateFormat *, void *))(*(_QWORD *)DateTimeInstance + 184))(DateTimeInstance, TimeZone);
        return DateTimeInstance;
      }
      *a8 = U_MEMORY_ALLOCATION_ERROR;
    }
    (*(void (**)(icu::SimpleDateFormat *))(*(_QWORD *)DateTimeInstance + 8))(DateTimeInstance);
    return 0;
  }
  return DateTimeInstance;
}

uint64_t udat_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t udat_clone(uint64_t a1, int *a2)
{
  uint64_t result;

  if (*a2 > 0)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (!result)
    *a2 = 7;
  return result;
}

uint64_t udat_format(_QWORD *a1, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v12;
  void *v14;
  UChar *v15;
  UChar *v16;
  void (**v17)(icu::FieldPosition *__hidden);
  __int128 v18;
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0xFFFFFFFFLL;
  if (!a2)
  {
    if (!a3)
    {
      v20 = 0u;
      v21 = 0u;
      v23 = 0;
      v22 = 0u;
      v19 = off_1E2256B38;
      LOWORD(v20) = 2;
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  if ((a3 & 0x80000000) != 0)
  {
LABEL_6:
    *a5 = 1;
    return 0xFFFFFFFFLL;
  }
  v20 = 0u;
  v21 = 0u;
  v23 = 0;
  v22 = 0u;
  v19 = off_1E2256B38;
  LOWORD(v20) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a2, 0, a3);
LABEL_10:
  v17 = off_1E225EF78;
  v18 = 0xFFFFFFFFuLL;
  if (a4)
  {
    LODWORD(v18) = *(_DWORD *)a4;
    icu::DateFormat::format(a1, (uint64_t)&v19, (uint64_t)&v17, a6);
    *(_QWORD *)(a4 + 4) = *(_QWORD *)((char *)&v18 + 4);
  }
  else
  {
    icu::DateFormat::format(a1, (uint64_t)&v19, (uint64_t)&v17, a6);
  }
  v16 = (UChar *)a2;
  v12 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a3, a5);
  v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  return v12;
}

uint64_t udat_formatCalendar(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v12;
  void *v14;
  UChar *v15;
  UChar *v16;
  void (**v17)(icu::FieldPosition *__hidden);
  __int128 v18;
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0xFFFFFFFFLL;
  if (!a3)
  {
    if (!a4)
    {
      v20 = 0u;
      v21 = 0u;
      v23 = 0;
      v22 = 0u;
      v19 = off_1E2256B38;
      LOWORD(v20) = 2;
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  if ((a4 & 0x80000000) != 0)
  {
LABEL_6:
    *a6 = 1;
    return 0xFFFFFFFFLL;
  }
  v20 = 0u;
  v21 = 0u;
  v23 = 0;
  v22 = 0u;
  v19 = off_1E2256B38;
  LOWORD(v20) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
LABEL_10:
  v17 = off_1E225EF78;
  v18 = 0xFFFFFFFFuLL;
  if (a5)
  {
    LODWORD(v18) = *(_DWORD *)a5;
    (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden)))(*(_QWORD *)a1 + 64))(a1, a2, &v19, &v17);
    *(_QWORD *)(a5 + 4) = *(_QWORD *)((char *)&v18 + 4);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden)))(*(_QWORD *)a1 + 64))(a1, a2, &v19, &v17);
  }
  v16 = (UChar *)a3;
  v12 = icu::UnicodeString::extract((uint64_t)&v19, &v16, a4, a6);
  v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  return v12;
}

uint64_t udat_formatForFields(_QWORD *a1, char *a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6)
{
  uint64_t v12;
  UChar *v14;
  UChar *v15;
  void (**v16)(icu::UnicodeString *__hidden);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
        v17 = 0u;
        v18 = 0u;
        v20 = 0;
        v19 = 0u;
        v16 = off_1E2256B38;
        LOWORD(v17) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a2, 0, a3);
LABEL_10:
        icu::DateFormat::format(a1, (uint64_t)&v16, a4, a5, a6);
        v15 = (UChar *)a2;
        v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a3, (int *)a5);
        v14 = v15;
        icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
        return v12;
      }
    }
    else if (!a3)
    {
      v17 = 0u;
      v18 = 0u;
      v20 = 0;
      v19 = 0u;
      v16 = off_1E2256B38;
      LOWORD(v17) = 2;
      goto LABEL_10;
    }
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0xFFFFFFFFLL;
}

uint64_t udat_formatCalendarForFields(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v12;
  UChar *v14;
  UChar *v15;
  void (**v16)(icu::UnicodeString *__hidden);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*a6 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
        v17 = 0u;
        v18 = 0u;
        v20 = 0;
        v19 = 0u;
        v16 = off_1E2256B38;
        LOWORD(v17) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a3, 0, a4);
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t, int *))(*(_QWORD *)a1 + 72))(a1, a2, &v16, a5, a6);
        v15 = (UChar *)a3;
        v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a4, a6);
        v14 = v15;
        icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
        return v12;
      }
    }
    else if (!a4)
    {
      v17 = 0u;
      v18 = 0u;
      v20 = 0;
      v19 = 0u;
      v16 = off_1E2256B38;
      LOWORD(v17) = 2;
      goto LABEL_10;
    }
    *a6 = 1;
  }
  return 0xFFFFFFFFLL;
}

double udat_parse(icu::DateFormat *a1, uint64_t a2, int a3, int *a4, int *a5)
{
  double v5;
  int v9;
  void *v10;
  void (**v12)(icu::ParsePosition *__hidden);
  int v13;
  int v14;
  uint64_t v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = 0.0;
  if (*a5 <= 0)
  {
    memset(v16, 0, sizeof(v16));
    v15 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 == -1, &v15);
    v12 = off_1E224A8B0;
    v14 = -1;
    if (a4)
      v9 = *a4;
    else
      v9 = 0;
    v13 = v9;
    v5 = icu::DateFormat::parse(a1, (const icu::UnicodeString *)v16, (icu::ParsePosition *)&v12);
    if (v14 == -1)
    {
      if (a4)
        *a4 = v13;
    }
    else
    {
      if (a4)
        *a4 = v14;
      *a5 = 9;
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v12);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }
  return v5;
}

void udat_parseCalendar(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5, int *a6)
{
  int v10;
  void (**v11)(icu::ParsePosition *__hidden);
  int v12;
  int v13;
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a6 <= 0)
  {
    memset(v15, 0, sizeof(v15));
    v14 = a3;
    icu::UnicodeString::UnicodeString(v15, a4 == -1, &v14);
    v11 = off_1E224A8B0;
    v13 = -1;
    if (a5)
      v10 = *a5;
    else
      v10 = 0;
    v12 = v10;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)a1 + 88))(a1, v15, a2, &v11);
    if (v13 == -1)
    {
      if (a5)
        *a5 = v12;
    }
    else
    {
      if (a5)
        *a5 = v13;
      *a6 = 9;
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v11);
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v15);
  }
}

uint64_t udat_isLenient(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t udat_setLenient(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

uint64_t udat_getBooleanAttribute(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  else
    return 0;
}

uint64_t udat_setBooleanAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 216))(result);
  return result;
}

uint64_t udat_getCalendar(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
}

uint64_t udat_setCalendar(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t udat_getNumberFormatForField(void *lpsrc, UChar a2)
{
  if (lpsrc
  {
    return icu::SimpleDateFormat::getNumberFormatForField((uint64_t)lpsrc, a2);
  }
  else
  {
    return (*(uint64_t (**)(void *))(*(_QWORD *)lpsrc + 152))(lpsrc);
  }
}

void *sub_18BDA6644(void *result, int *a2)
{
  if (*a2 <= 0
    && (!result
  {
    *a2 = 1;
  }
  return result;
}

uint64_t udat_getNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
}

void *udat_adoptNumberFormatForFields(void *a1, uint64_t a2, icu::NumberFormat *a3, int *a4)
{
  void *result;
  void *v9;
  _OWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = sub_18BDA6644(a1, a4);
  if (a2)
  {
    if (*a4 <= 0)
    {
      memset(v10, 0, sizeof(v10));
      icu::UnicodeString::UnicodeString((uint64_t)v10, a2);
      icu::SimpleDateFormat::adoptNumberFormat((icu::SimpleDateFormat *)a1, (const icu::UnicodeString *)v10, a3, (UErrorCode *)a4);
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v10);
    }
  }
  return result;
}

uint64_t udat_setNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
}

uint64_t udat_adoptNumberFormat(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
}

double udat_get2DigitYearStart(double *a1, int *a2)
{
  double result;

  sub_18BDA6644(a1, a2);
  result = 0.0;
  if (*a2 <= 0)
    return a1[98];
  return result;
}

void *udat_set2DigitYearStart(void *a1, int *a2, double a3)
{
  void *result;

  result = sub_18BDA6644(a1, a2);
  if (*a2 <= 0)
    return (void *)(*(uint64_t (**)(void *, int *, double))(*(_QWORD *)a1 + 232))(a1, a2, a3);
  return result;
}

uint64_t udat_toPattern(const void *a1, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  void (*v14)(void);
  uint64_t v15;
  void *v16;
  UChar *v17;
  UChar *v18;
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
        v20 = 0u;
        v21 = 0u;
        v23 = 0;
        v22 = 0u;
        v19 = off_1E2256B38;
        LOWORD(v20) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v19, a3, 0, a4);
        if (!a1)
          goto LABEL_16;
        goto LABEL_11;
      }
    }
    else if (!a4)
    {
      v20 = 0u;
      v21 = 0u;
      v23 = 0;
      v22 = 0u;
      v19 = off_1E2256B38;
      LOWORD(v20) = 2;
      if (!a1)
      {
LABEL_16:
        v15 = 1;
        *a5 = 1;
        v10 = 0xFFFFFFFFLL;
LABEL_19:
        icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v19);
        return v10;
      }
LABEL_11:
      if (v12)
      {
        v13 = *v12;
        if (!a2)
        {
          (*(void (**)(void))(v13 + 240))();
          goto LABEL_18;
        }
        v14 = *(void (**)(void))(v13 + 248);
      }
      else
      {
        if (a2)
          goto LABEL_16;
        if (!v16)
          goto LABEL_16;
        v14 = *(void (**)(void))(*(_QWORD *)v16 + 232);
      }
      v14();
LABEL_18:
      v18 = (UChar *)a3;
      v10 = icu::UnicodeString::extract((uint64_t)&v19, &v18, a4, a5);
      v17 = v18;
      v15 = (uint64_t)&v17;
      goto LABEL_19;
    }
    *a5 = 1;
  }
  return 0xFFFFFFFFLL;
}

void *udat_applyPattern(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(v12, 0, sizeof(v12));
  v11 = a3;
  icu::UnicodeString::UnicodeString(v12, a4 == -1, &v11);
  v9 = v11;
  v6 = &v9;
  v10 = 0;
  if (a1
  {
    v7 = *a1;
    if (a2)
      (*(void (**)(uint64_t *, _OWORD *, int *))(v7 + 264))(a1, v12, &v10);
    else
      (*(void (**)(uint64_t *, _OWORD *))(v7 + 256))(a1, v12);
  }
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
}

uint64_t udat_getSymbols(const void *a1, unsigned int a2, signed int a3, char *a4, unsigned int a5, int *a6)
{
  char *v12;
  char *v13;
  icu::DateFormatSymbols *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t Eras;
  uint64_t v20;
  icu::DateFormatSymbols *v21;
  int v22;
  icu::DateFormatSymbols *v23;
  int v24;
  int v25;
  int v26;
  icu::DateFormatSymbols *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  UChar **v31;
  icu::UnicodeString *v32;
  int v33;
  uint64_t *v34;
  icu::UnicodeString *v35;
  UChar32 v36;
  int v37;
  _BYTE *v38;
  const char *v39;
  void *v40;
  icu::BreakIterator *v41;
  UChar *v43;
  UChar *v44;
  UChar *v45;
  UChar *v46;
  UChar *v47;
  int v48;
  _OWORD v49[14];
  const UChar *v50[10];

  v50[9] = *(const UChar **)MEMORY[0x1E0C80C00];
  if (!a1)
    return 0xFFFFFFFFLL;
  if (v12)
  {
    v13 = v12;
    v14 = (icu::DateFormatSymbols *)(*(uint64_t (**)(char *))(*(_QWORD *)v12 + 272))(v12);
    v15 = (uint64_t *)(v13 + 824);
    goto LABEL_6;
  }
  if (!v16)
    return 0xFFFFFFFFLL;
  v17 = v16;
  v14 = (icu::DateFormatSymbols *)(*(uint64_t (**)(char *))(*(_QWORD *)v16 + 264))(v16);
  v15 = (uint64_t *)(v17 + 752);
LABEL_6:
  v18 = *v15;
  v48 = 0;
  switch(a2)
  {
    case 0u:
      Eras = icu::DateFormatSymbols::getEras(v14, &v48);
      break;
    case 1u:
      Eras = icu::DateFormatSymbols::getMonths(v14, &v48);
      break;
    case 2u:
      Eras = icu::DateFormatSymbols::getShortMonths(v14, &v48);
      break;
    case 3u:
      Eras = icu::DateFormatSymbols::getWeekdays(v14, &v48);
      break;
    case 4u:
      Eras = icu::DateFormatSymbols::getShortWeekdays(v14, &v48);
      break;
    case 5u:
      Eras = icu::DateFormatSymbols::getAmPmStrings(v14, &v48);
      break;
    case 6u:
      memset((char *)v49 + 8, 0, 56);
      *(_QWORD *)&v49[0] = off_1E2256B38;
      WORD4(v49[0]) = 2;
      if (a4 || a5)
        icu::UnicodeString::setTo((icu::UnicodeString *)v49, a4, 0, a5);
      icu::DateFormatSymbols::getLocalPatternChars((UChar **)v14, (UChar **)v49);
      v47 = (UChar *)a4;
      v20 = icu::UnicodeString::extract((uint64_t)v49, &v47, a5, a6);
      v44 = v47;
      v31 = &v44;
      v32 = (icu::UnicodeString *)v49;
      goto LABEL_73;
    case 7u:
      Eras = icu::DateFormatSymbols::getEraNames(v14, &v48);
      break;
    case 8u:
      v23 = v14;
      v24 = 0;
      goto LABEL_34;
    case 9u:
      v21 = v14;
      v22 = 0;
      goto LABEL_22;
    case 0xAu:
      v23 = v14;
      v24 = 1;
      v25 = 1;
      goto LABEL_36;
    case 0xBu:
      v23 = v14;
      v24 = 1;
      v25 = 0;
      goto LABEL_36;
    case 0xCu:
      v23 = v14;
      v24 = 1;
LABEL_34:
      v25 = 2;
LABEL_36:
      Eras = icu::DateFormatSymbols::getMonths(v23, &v48, v24, v25);
      break;
    case 0xDu:
      v21 = v14;
      v22 = 1;
      v26 = 1;
      goto LABEL_46;
    case 0xEu:
      v21 = v14;
      v22 = 1;
      v26 = 0;
      goto LABEL_46;
    case 0xFu:
      v21 = v14;
      v22 = 1;
LABEL_22:
      v26 = 2;
      goto LABEL_46;
    case 0x10u:
      v27 = v14;
      v28 = 0;
      goto LABEL_40;
    case 0x11u:
      v27 = v14;
      v28 = 0;
      goto LABEL_42;
    case 0x12u:
      v27 = v14;
      v28 = 1;
LABEL_40:
      v33 = 1;
      goto LABEL_55;
    case 0x13u:
      v27 = v14;
      v28 = 1;
LABEL_42:
      v33 = 0;
      goto LABEL_55;
    case 0x14u:
      v21 = v14;
      v22 = 0;
      goto LABEL_45;
    case 0x15u:
      v21 = v14;
      v22 = 1;
LABEL_45:
      v26 = 3;
LABEL_46:
      Eras = icu::DateFormatSymbols::getWeekdays(v21, &v48, v22, v26);
      break;
    case 0x16u:
      v29 = (uint64_t)v14;
      goto LABEL_49;
    case 0x17u:
      v29 = (uint64_t)v14;
      goto LABEL_49;
    case 0x18u:
      v29 = (uint64_t)v14;
LABEL_49:
      Eras = icu::DateFormatSymbols::getYearNames(v29, &v48);
      break;
    case 0x19u:
      v30 = (uint64_t)v14;
      goto LABEL_51;
    case 0x1Au:
      v30 = (uint64_t)v14;
      goto LABEL_51;
    case 0x1Bu:
      v30 = (uint64_t)v14;
LABEL_51:
      Eras = icu::DateFormatSymbols::getZodiacNames(v30, &v48);
      break;
    case 0x1Cu:
      v27 = v14;
      v28 = 0;
      goto LABEL_54;
    case 0x1Du:
      v27 = v14;
      v28 = 1;
LABEL_54:
      v33 = 2;
LABEL_55:
      Eras = icu::DateFormatSymbols::getQuarters(v27, &v48, v28, v33);
      break;
    default:
      if (a2 == 128)
      {
        Eras = icu::DateFormatSymbols::getZodiacNames((uint64_t)v14, &v48);
        if (a3 < 1)
          a3 = 0;
        else
          a3 = (a3 - 1) % 0xCu;
      }
      else
      {
        Eras = 0;
      }
      break;
  }
  if (a3 >= v48)
    return 0;
  v34 = (uint64_t *)a3;
  v35 = (icu::UnicodeString *)(Eras + ((uint64_t)a3 << 6));
  v36 = icu::UnicodeString::char32At(v34, v35, 0);
  if (!u_islower(v36) || !v18)
    goto LABEL_70;
  v37 = (*(uint64_t (**)(const void *, uint64_t, int *))(*(_QWORD *)a1 + 208))(a1, 1, a6);
  switch(v37)
  {
    case 258:
      goto LABEL_66;
    case 260:
      v38 = (char *)v14 + 2 * sub_18BDA70F8(a2) + 833;
      break;
    case 259:
      v38 = (char *)v14 + 2 * sub_18BDA70F8(a2) + 832;
      break;
    default:
LABEL_70:
      v45 = (UChar *)a4;
      return icu::UnicodeString::extract((uint64_t)v35, &v45, a5, a6);
  }
  if (!*v38)
    goto LABEL_70;
LABEL_66:
  memset(v50, 0, 64);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v50, (UChar **)v35);
  v39 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
  if (!v39)
  {
LABEL_69:
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v50);
    goto LABEL_70;
  }
  v41 = (icu::BreakIterator *)v39;
  memset(v49, 0, sizeof(v49));
  icu::BreakIterator::getLocale(v39, 0, a6, (icu::Locale *)v49);
  if (*a6 >= 1)
  {
    (*(void (**)(icu::BreakIterator *))(*(_QWORD *)v41 + 8))(v41);
    ((void (*)(icu::Locale *__hidden))icu::Locale::~Locale)((icu::Locale *)v49);
    goto LABEL_69;
  }
  icu::UnicodeString::toTitle(v50, v41, (const icu::Locale *)v49, 768);
  (*(void (**)(icu::BreakIterator *))(*(_QWORD *)v41 + 8))(v41);
  v46 = (UChar *)a4;
  v20 = icu::UnicodeString::extract((uint64_t)v50, &v46, a5, a6);
  v43 = v46;
  icu::Locale::~Locale(&v43, (icu::Locale *)v49);
  v32 = (icu::UnicodeString *)v50;
LABEL_73:
  icu::UnicodeString::~UnicodeString(v31, v32);
  return v20;
}

uint64_t sub_18BDA70F8(unsigned int a1)
{
  if (a1 > 0x15)
    return 0;
  else
    return dword_18BE2BF14[a1];
}

_QWORD *udat_countSymbols(_QWORD *result, int a2)
{
  const void *v3;
  uint64_t v4;
  icu::DateFormatSymbols *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if (result)
  {
    v3 = result;
    if (result)
    {
      v4 = 34;
    }
    else
    {
      if (!result)
        return result;
      v4 = 33;
    }
    v5 = (icu::DateFormatSymbols *)(*(uint64_t (**)(void))(*result + 8 * v4))();
    v12 = 0;
    switch(a2)
    {
      case 0:
        icu::DateFormatSymbols::getEras(v5, &v12);
        return (_QWORD *)v12;
      case 1:
        icu::DateFormatSymbols::getMonths(v5, &v12);
        return (_QWORD *)v12;
      case 2:
        icu::DateFormatSymbols::getShortMonths(v5, &v12);
        return (_QWORD *)v12;
      case 3:
        icu::DateFormatSymbols::getWeekdays(v5, &v12);
        return (_QWORD *)v12;
      case 4:
        icu::DateFormatSymbols::getShortWeekdays(v5, &v12);
        return (_QWORD *)v12;
      case 5:
        icu::DateFormatSymbols::getAmPmStrings(v5, &v12);
        return (_QWORD *)v12;
      case 6:
        v12 = 1;
        return (_QWORD *)v12;
      case 7:
        icu::DateFormatSymbols::getEraNames(v5, &v12);
        return (_QWORD *)v12;
      case 8:
        v6 = 0;
        goto LABEL_22;
      case 9:
        v7 = 0;
        goto LABEL_27;
      case 10:
        v6 = 1;
        v8 = 1;
        goto LABEL_23;
      case 11:
        v6 = 1;
        v8 = 0;
        goto LABEL_23;
      case 12:
        v6 = 1;
LABEL_22:
        v8 = 2;
LABEL_23:
        icu::DateFormatSymbols::getMonths(v5, &v12, v6, v8);
        return (_QWORD *)v12;
      case 13:
        v7 = 1;
        v9 = 1;
        goto LABEL_37;
      case 14:
        v7 = 1;
        v9 = 0;
        goto LABEL_37;
      case 15:
        v7 = 1;
LABEL_27:
        v9 = 2;
        goto LABEL_37;
      case 16:
        v10 = 0;
        goto LABEL_31;
      case 17:
        v10 = 0;
        goto LABEL_33;
      case 18:
        v10 = 1;
LABEL_31:
        v11 = 1;
        goto LABEL_43;
      case 19:
        v10 = 1;
LABEL_33:
        v11 = 0;
        goto LABEL_43;
      case 20:
        v7 = 0;
        goto LABEL_36;
      case 21:
        v7 = 1;
LABEL_36:
        v9 = 3;
LABEL_37:
        icu::DateFormatSymbols::getWeekdays(v5, &v12, v7, v9);
        return (_QWORD *)v12;
      case 22:
      case 23:
      case 24:
        icu::DateFormatSymbols::getYearNames((uint64_t)v5, &v12);
        return (_QWORD *)v12;
      case 25:
      case 26:
      case 27:
        goto LABEL_39;
      case 28:
        v10 = 0;
        goto LABEL_42;
      case 29:
        v10 = 1;
LABEL_42:
        v11 = 2;
LABEL_43:
        icu::DateFormatSymbols::getQuarters(v5, &v12, v10, v11);
        break;
      default:
        if (a2 == 128)
LABEL_39:
          icu::DateFormatSymbols::getZodiacNames((uint64_t)v5, &v12);
        break;
    }
    return (_QWORD *)v12;
  }
  return result;
}

uint64_t udat_setSymbols(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  result = (uint64_t)sub_18BDA6644(a1, a6);
  if (*a6 <= 0)
  {
    result = (*(uint64_t (**)(void *))(*(_QWORD *)a1 + 272))(a1);
    switch(a2)
    {
      case 0:
        v13 = *(_QWORD *)(result + 8);
        v14 = *(_DWORD *)(result + 16);
        goto LABEL_31;
      case 1:
        v13 = *(_QWORD *)(result + 56);
        v14 = *(_DWORD *)(result + 64);
        goto LABEL_31;
      case 2:
        v13 = *(_QWORD *)(result + 72);
        v14 = *(_DWORD *)(result + 80);
        goto LABEL_31;
      case 3:
        v13 = *(_QWORD *)(result + 152);
        v14 = *(_DWORD *)(result + 160);
        goto LABEL_31;
      case 4:
        v13 = *(_QWORD *)(result + 168);
        v14 = *(_DWORD *)(result + 176);
        goto LABEL_31;
      case 5:
        v13 = *(_QWORD *)(result + 280);
        v14 = *(_DWORD *)(result + 288);
        goto LABEL_31;
      case 6:
        v15 = result + 768;
        v14 = 1;
        v16 = 0;
        goto LABEL_32;
      case 7:
        v13 = *(_QWORD *)(result + 24);
        v14 = *(_DWORD *)(result + 32);
        goto LABEL_31;
      case 8:
        v13 = *(_QWORD *)(result + 88);
        v14 = *(_DWORD *)(result + 96);
        goto LABEL_31;
      case 9:
        v13 = *(_QWORD *)(result + 200);
        v14 = *(_DWORD *)(result + 208);
        goto LABEL_31;
      case 10:
        v13 = *(_QWORD *)(result + 104);
        v14 = *(_DWORD *)(result + 112);
        goto LABEL_31;
      case 11:
        v13 = *(_QWORD *)(result + 120);
        v14 = *(_DWORD *)(result + 128);
        goto LABEL_31;
      case 12:
        v13 = *(_QWORD *)(result + 136);
        v14 = *(_DWORD *)(result + 144);
        goto LABEL_31;
      case 13:
        v13 = *(_QWORD *)(result + 216);
        v14 = *(_DWORD *)(result + 224);
        goto LABEL_31;
      case 14:
        v13 = *(_QWORD *)(result + 232);
        v14 = *(_DWORD *)(result + 240);
        goto LABEL_31;
      case 15:
        v13 = *(_QWORD *)(result + 264);
        v14 = *(_DWORD *)(result + 272);
        goto LABEL_31;
      case 16:
        v13 = *(_QWORD *)(result + 376);
        v14 = *(_DWORD *)(result + 384);
        goto LABEL_31;
      case 17:
        v13 = *(_QWORD *)(result + 392);
        v14 = *(_DWORD *)(result + 400);
        goto LABEL_31;
      case 18:
        v13 = *(_QWORD *)(result + 424);
        v14 = *(_DWORD *)(result + 432);
        goto LABEL_31;
      case 19:
        v13 = *(_QWORD *)(result + 440);
        v14 = *(_DWORD *)(result + 448);
        goto LABEL_31;
      case 20:
        v13 = *(_QWORD *)(result + 184);
        v14 = *(_DWORD *)(result + 192);
        goto LABEL_31;
      case 21:
        v13 = *(_QWORD *)(result + 248);
        v14 = *(_DWORD *)(result + 256);
        goto LABEL_31;
      case 23:
        v13 = *(_QWORD *)(result + 488);
        v14 = *(_DWORD *)(result + 496);
        goto LABEL_31;
      case 26:
        v13 = *(_QWORD *)(result + 504);
        v14 = *(_DWORD *)(result + 512);
        goto LABEL_31;
      case 28:
        v13 = *(_QWORD *)(result + 408);
        v14 = *(_DWORD *)(result + 416);
        goto LABEL_31;
      case 29:
        v13 = *(_QWORD *)(result + 456);
        v14 = *(_DWORD *)(result + 464);
LABEL_31:
        v15 = v13;
        v16 = a3;
LABEL_32:
        result = sub_18BDA79DC(v15, v14, v16, a4, a5, a6);
        break;
      default:
        *a6 = 16;
        break;
    }
  }
  return result;
}

uint64_t udat_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1)
    return icu::Format::getLocaleID(a1, a2, a3);
  if (*a3 <= 0)
    *a3 = 1;
  return 0;
}

uint64_t udat_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

uint64_t udat_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  else
    return 0;
}

uint64_t udat_toPatternRelativeDate(void *a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v8;
  UChar *v10;
  UChar *v11;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  sub_18BDA7720(a1, a4);
  if (*a4 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
        v13 = 0u;
        v14 = 0u;
        v16 = 0;
        v15 = 0u;
        v12 = off_1E2256B38;
        LOWORD(v13) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
LABEL_10:
        (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)a1 + 240))(a1, &v12, a4);
        v11 = (UChar *)a2;
        v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
        v10 = v11;
        icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
        return v8;
      }
    }
    else if (!a3)
    {
      v13 = 0u;
      v14 = 0u;
      v16 = 0;
      v15 = 0u;
      v12 = off_1E2256B38;
      LOWORD(v13) = 2;
      goto LABEL_10;
    }
    *a4 = 1;
  }
  return 0xFFFFFFFFLL;
}

void *sub_18BDA7720(void *result, int *a2)
{
  if (*a2 <= 0
    && (!result
  {
    *a2 = 1;
  }
  return result;
}

uint64_t udat_toPatternRelativeTime(void *a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v8;
  UChar *v10;
  UChar *v11;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  sub_18BDA7720(a1, a4);
  if (*a4 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
        v13 = 0u;
        v14 = 0u;
        v16 = 0;
        v15 = 0u;
        v12 = off_1E2256B38;
        LOWORD(v13) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
LABEL_10:
        (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)a1 + 248))(a1, &v12, a4);
        v11 = (UChar *)a2;
        v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
        v10 = v11;
        icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
        return v8;
      }
    }
    else if (!a3)
    {
      v13 = 0u;
      v14 = 0u;
      v16 = 0;
      v15 = 0u;
      v12 = off_1E2256B38;
      LOWORD(v13) = 2;
      goto LABEL_10;
    }
    *a4 = 1;
  }
  return 0xFFFFFFFFLL;
}

void *udat_applyPatternRelative(void *a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  void *result;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[4];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = sub_18BDA7720(a1, a6);
  if (*a6 <= 0)
  {
    memset(v18, 0, sizeof(v18));
    v16 = a2;
    icu::UnicodeString::UnicodeString(v18, a3 == -1, &v16);
    memset(v17, 0, sizeof(v17));
    v15 = a4;
    icu::UnicodeString::UnicodeString(v17, a5 == -1, &v15);
    (*(void (**)(void *, _OWORD *, _OWORD *, int *))(*(_QWORD *)a1 + 256))(a1, v18, v17, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v17);
    return icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v18);
  }
  return result;
}

uint64_t sub_18BDA79DC(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (!result)
    return result;
  if (a3 >= a2)
  {
    v10 = 8;
LABEL_8:
    *a6 = v10;
    return result;
  }
  if (!a4)
  {
    v10 = 1;
    goto LABEL_8;
  }
  v8 = result + ((uint64_t)a3 << 6);
  icu::UnicodeString::unBogus(v8);
  if (*(__int16 *)(v8 + 8) < 0)
    v9 = *(unsigned int *)(v8 + 12);
  else
    v9 = *(unsigned __int16 *)(v8 + 8) >> 5;
  return icu::UnicodeString::doReplace(v8, 0, v9, a4, 0, a5);
}

uint64_t udtitvfmt_openResult(int *a1, unint64_t a2)
{
  uint64_t result;

  if (*a1 > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)result = 1430672896;
    *(_DWORD *)(result + 16) = 1178880342;
    *(_QWORD *)(result + 24) = off_1E225E320;
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 27;
    *(_QWORD *)(result + 8) = result + 24;
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t udtitvfmt_resultAsValue(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1178880342)
      goto LABEL_8;
    v2 = 3;
  }
  else
  {
    v2 = 1;
  }
  result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1)
    return 0;
  return result;
}

void udtitvfmt_closeResult(_DWORD *a1)
{
  if (a1)
  {
    if (a1[4] == 1178880342)
    {
      icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)(a1 + 6));
      a1[4] = 0;
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

icu::DateIntervalFormat *udtitvfmt_open(const char *a1, uint64_t a2, int a3, uint64_t a4, int a5, UErrorCode *a6)
{
  icu::DateIntervalFormat *Instance;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  const icu::UnicodeString *v14;
  void *TimeZone;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  UChar *v21[28];
  _OWORD v22[4];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    if (a2)
    {
      if (a3 < -1)
        goto LABEL_13;
    }
    else if (a3)
    {
      goto LABEL_13;
    }
    if (a4)
    {
      if (a5 > -2)
        goto LABEL_9;
    }
    else if (!a5)
    {
LABEL_9:
      memset(v22, 0, sizeof(v22));
      v20 = a2;
      icu::UnicodeString::UnicodeString(v22, a3 == -1, &v20);
      v18 = v20;
      icu::Locale::Locale(&v18, (icu::Locale *)v21, a1, 0, 0, 0);
      Instance = icu::DateIntervalFormat::createInstance((UErrorCode *)v22, (const icu::UnicodeString *)v21, a6, v11);
      icu::Locale::~Locale(v12, (icu::Locale *)v21);
      v13 = *(unsigned int *)a6;
      if ((int)v13 <= 0)
      {
        if (!a4)
          goto LABEL_17;
        v19 = a4;
        icu::UnicodeString::UnicodeString(v21, a5 == -1, &v19);
        TimeZone = icu::TimeZone::createTimeZone(v21, v14);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v21);
        if (TimeZone)
        {
          (*(void (**)(icu::DateIntervalFormat *, void *))(*(_QWORD *)Instance + 72))(Instance, TimeZone);
          goto LABEL_17;
        }
        v13 = 7;
        *a6 = U_MEMORY_ALLOCATION_ERROR;
        if (!Instance)
          goto LABEL_17;
      }
      else if (!Instance)
      {
LABEL_17:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v22);
        return Instance;
      }
      (*(void (**)(icu::DateIntervalFormat *))(*(_QWORD *)Instance + 8))(Instance);
      Instance = 0;
      goto LABEL_17;
    }
LABEL_13:
    Instance = 0;
    *a6 = U_ILLEGAL_ARGUMENT_ERROR;
    return Instance;
  }
  return 0;
}

uint64_t udtitvfmt_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t udtitvfmt_format(icu::DateIntervalFormat *a1, char *a2, unsigned int a3, uint64_t a4, UErrorCode *a5, double a6, double a7)
{
  uint64_t v7;
  void *v15;
  void *v16;
  UChar *v18;
  _QWORD v19[3];
  void (**v20)(icu::FieldPosition *__hidden);
  __int128 v21;
  void (**v22)(icu::UnicodeString *__hidden);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 > 0)
    return 0xFFFFFFFFLL;
  if (!a2)
  {
    if (!a3)
    {
      v23 = 0u;
      v24 = 0u;
      v26 = 0;
      v25 = 0u;
      v22 = off_1E2256B38;
      LOWORD(v23) = 2;
      goto LABEL_9;
    }
LABEL_7:
    v7 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v7;
  }
  if ((a3 & 0x80000000) != 0)
    goto LABEL_7;
  v23 = 0u;
  v24 = 0u;
  v26 = 0;
  v25 = 0u;
  v22 = off_1E2256B38;
  LOWORD(v23) = 2;
  icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a2, 0, a3);
LABEL_9:
  v20 = off_1E225EF78;
  v21 = 0xFFFFFFFFuLL;
  if (a4)
    LODWORD(v21) = *(_DWORD *)a4;
  memset(v19, 0, sizeof(v19));
  icu::DateInterval::DateInterval((uint64_t)v19, a6, a7);
  icu::DateIntervalFormat::format(a1, (const icu::DateInterval *)v19, (icu::UnicodeString *)&v22, (icu::FieldPosition *)&v20, a5);
  if (*(int *)a5 <= 0)
  {
    if (a4)
      *(_QWORD *)(a4 + 4) = *(_QWORD *)((char *)&v21 + 4);
    v18 = (UChar *)a2;
    v7 = icu::UnicodeString::extract((uint64_t)&v22, &v18, a3, (int *)a5);
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  icu::DateInterval::~DateInterval((icu::DateInterval *)v19);
  icu::FieldPosition::~FieldPosition(v15, (icu::FieldPosition *)&v20);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v22);
  return v7;
}

uint64_t udtitvfmt_setAttribute(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  if (*a4 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 104))(result);
  return result;
}

void udtitvfmt_formatToResult(uint64_t *a1, uint64_t a2, UErrorCode *a3, double a4, double a5)
{
  uint64_t v6;
  int v8;
  _BYTE v9[24];
  _QWORD v10[3];

  if (*(int *)a3 > 0)
    return;
  v6 = a2;
  if (!a2)
  {
    v8 = 1;
    goto LABEL_6;
  }
  if (*(_DWORD *)(a2 + 16) != 1178880342)
  {
    v8 = 3;
LABEL_6:
    v6 = 0;
    *a3 = v8;
  }
  memset(v10, 0, sizeof(v10));
  icu::DateInterval::DateInterval((uint64_t)v10, a4, a5);
  if (v6)
  {
    icu::DateIntervalFormat::formatToValue(a1, (const icu::DateInterval *)v10, a3, (uint64_t)v9);
    icu::FormattedDateInterval::operator=(v6 + 24, (uint64_t)v9);
    icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)v9);
  }
  icu::DateInterval::~DateInterval((icu::DateInterval *)v10);
}

void udtitvfmt_formatCalendarToResult(uint64_t *a1, icu::Calendar *a2, icu::Calendar *a3, uint64_t a4, UErrorCode *a5)
{
  UErrorCode v6;
  _BYTE v7[24];

  if (*(int *)a5 <= 0)
  {
    if (a4)
    {
      if (*(_DWORD *)(a4 + 16) == 1178880342)
      {
        icu::DateIntervalFormat::formatToValue(a1, a2, a3, a5, (uint64_t)v7);
        icu::FormattedDateInterval::operator=(a4 + 24, (uint64_t)v7);
        icu::FormattedDateInterval::~FormattedDateInterval((icu::FormattedDateInterval *)v7);
        return;
      }
      v6 = U_INVALID_FORMAT_ERROR;
    }
    else
    {
      v6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *a5 = v6;
  }
}

uint64_t udtitvfmt_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t udtitvfmt_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  else
    return 0;
}

void *udtitvfmt_getPatternString(icu::DateIntervalFormat *a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t DateIntervalInfo;
  void *v12;
  UChar *v14;
  UChar *v15;
  _BYTE v16[64];
  UChar *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v21 = 0;
  v20 = 0u;
  v17 = (UChar *)off_1E2256B38;
  LOWORD(v18) = 2;
  DateIntervalInfo = icu::DateIntervalFormat::getDateIntervalInfo(a1);
  icu::UnicodeString::UnicodeString((uint64_t)v16, a2);
  icu::DateIntervalInfo::getIntervalPattern(DateIntervalInfo, (uint64_t)v16, a3, &v17, a6);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v16);
  v15 = a4;
  icu::UnicodeString::extract((uint64_t)&v17, &v15, a5, a6);
  v14 = v15;
  return icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v17);
}

icu::DateIntervalFormat *udatintv_open(const char *a1, uint64_t a2, int a3, UErrorCode *a4)
{
  return udtitvfmt_open(a1, a2, a3, 0, 0, a4);
}

icu::DateTimePatternGenerator *udatpg_open(char *a1, icu::DateTimePatternGenerator *this)
{
  uint64_t *v3;
  icu::DateTimePatternGenerator *Instance;
  void *v5;
  const char *v7[29];

  v3 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v7[28] = *(const char **)MEMORY[0x1E0C80C00];
  if (!a1)
    return icu::DateTimePatternGenerator::createInstance(this, (UErrorCode *)this);
  icu::Locale::Locale(v3, (icu::Locale *)v7, a1, 0, 0, 0);
  Instance = icu::DateTimePatternGenerator::createInstance(v7, (UErrorCode *)this, 0);
  icu::Locale::~Locale(v5, (icu::Locale *)v7);
  return Instance;
}

uint64_t udatpg_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

icu::DateTimePatternGenerator *udatpg_clone(icu::DateTimePatternGenerator *a1, unsigned int *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)*a2;
  if ((int)v2 <= 0)
    return icu::DateTimePatternGenerator::clone(a1, (unint64_t)a2, v2);
  else
    return 0;
}

uint64_t udatpg_getBestPattern(void *a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  return udatpg_getBestPatternWithOptions(a1, a2, a3, 0, a4, a5, a6);
}

uint64_t udatpg_getBestPatternWithOptions(void *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v7;
  void *v13;
  _QWORD v15[2];
  UChar *v16;
  uint64_t v17;
  _OWORD v18[4];
  _OWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0)
    return 0;
  if (a2 || !a3)
  {
    memset(v19, 0, sizeof(v19));
    v17 = a2;
    icu::UnicodeString::UnicodeString(v19, a3 >> 31, &v17);
    v15[1] = v17;
    memset(v18, 0, sizeof(v18));
    icu::DateTimePatternGenerator::getBestPattern(a1, (uint64_t)v19, a4, a7, (icu::UnicodeString *)v18);
    v16 = a5;
    v7 = icu::UnicodeString::extract((uint64_t)v18, &v16, a6, a7);
    v15[0] = v16;
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v19);
  }
  else
  {
    v7 = 0;
    *a7 = 1;
  }
  return v7;
}

uint64_t udatpg_getSkeleton(uint64_t a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v6;
  void *v10;
  _QWORD v12[2];
  UChar *v13;
  uint64_t v14;
  _OWORD v15[4];
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0;
  if (a2 || !a3)
  {
    memset(v16, 0, sizeof(v16));
    v14 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 >> 31, &v14);
    v12[1] = v14;
    memset(v15, 0, sizeof(v15));
    icu::DateTimePatternGenerator::staticGetSkeleton((icu::DateTimePatternGenerator *)v16, (uint64_t)v15);
    v13 = a4;
    v6 = icu::UnicodeString::extract((uint64_t)v15, &v13, a5, a6);
    v12[0] = v13;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }
  else
  {
    v6 = 0;
    *a6 = 1;
  }
  return v6;
}

uint64_t udatpg_getBaseSkeleton(uint64_t a1, uint64_t a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v6;
  void *v10;
  _QWORD v12[2];
  UChar *v13;
  uint64_t v14;
  _OWORD v15[4];
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0;
  if (a2 || !a3)
  {
    memset(v16, 0, sizeof(v16));
    v14 = a2;
    icu::UnicodeString::UnicodeString(v16, a3 >> 31, &v14);
    v12[1] = v14;
    memset(v15, 0, sizeof(v15));
    icu::DateTimePatternGenerator::staticGetBaseSkeleton((icu::DateTimePatternGenerator *)v16, (uint64_t)v15);
    v13 = a4;
    v6 = icu::UnicodeString::extract((uint64_t)v15, &v13, a5, a6);
    v12[0] = v13;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v16);
  }
  else
  {
    v6 = 0;
    *a6 = 1;
  }
  return v6;
}

uint64_t udatpg_addPattern(icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, _DWORD *a7, UErrorCode *a8)
{
  uint64_t v8;
  int v15;
  void *v16;
  _QWORD v18[2];
  UChar *v19;
  uint64_t v20;
  UChar *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(int *)a8 > 0)
    return 0;
  if (a2 || !a3)
  {
    memset(v26, 0, sizeof(v26));
    v20 = a2;
    icu::UnicodeString::UnicodeString(v26, a3 >> 31, &v20);
    v18[1] = v20;
    v22 = 0u;
    v25 = 0;
    v24 = 0u;
    v23 = 0u;
    v21 = (UChar *)off_1E2256B38;
    LOWORD(v22) = 2;
    v8 = icu::DateTimePatternGenerator::addPattern(a1, (UChar **)v26, a4, &v21, a8);
    v19 = a5;
    v15 = icu::UnicodeString::extract((uint64_t)&v21, &v19, a6, (int *)a8);
    v18[0] = v19;
    if (a7)
      *a7 = v15;
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v21);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v26);
  }
  else
  {
    v8 = 0;
    *a8 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v8;
}

void *udatpg_setAppendItemFormat(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  void *v6;
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memset(v9, 0, sizeof(v9));
  v8 = a3;
  icu::UnicodeString::UnicodeString(v9, a4 >> 31, &v8);
  icu::DateTimePatternGenerator::setAppendItemFormat(a1, a2, (UChar **)v9);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
}

unint64_t udatpg_getAppendItemFormat(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unint64_t AppendItemFormat;
  unsigned int v5;
  int v6;
  unsigned int v7;
  __int16 v8;

  AppendItemFormat = icu::DateTimePatternGenerator::getAppendItemFormat(a1, a2);
  if (a3)
  {
    v5 = *(unsigned __int16 *)(AppendItemFormat + 8);
    v6 = (__int16)v5;
    v7 = v5 >> 5;
    if (v6 < 0)
      v7 = *(_DWORD *)(AppendItemFormat + 12);
    *a3 = v7;
  }
  v8 = *(_WORD *)(AppendItemFormat + 8);
  if ((v8 & 0x11) != 0)
    return 0;
  if ((v8 & 2) != 0)
    return AppendItemFormat + 10;
  return *(_QWORD *)(AppendItemFormat + 24);
}

void *udatpg_setAppendItemName(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  void *v6;
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memset(v9, 0, sizeof(v9));
  v8 = a3;
  icu::UnicodeString::UnicodeString(v9, a4 >> 31, &v8);
  icu::DateTimePatternGenerator::setAppendItemName(a1, a2, (UChar **)v9);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
}

uint64_t udatpg_getAppendItemName(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t AppendItemName;
  unsigned int v5;
  int v6;
  unsigned int v7;
  __int16 v8;

  AppendItemName = icu::DateTimePatternGenerator::getAppendItemName(a1, a2);
  if (a3)
  {
    v5 = *(unsigned __int16 *)(AppendItemName + 8);
    v6 = (__int16)v5;
    v7 = v5 >> 5;
    if (v6 < 0)
      v7 = *(_DWORD *)(AppendItemName + 12);
    *a3 = v7;
  }
  v8 = *(_WORD *)(AppendItemName + 8);
  if ((v8 & 0x11) != 0)
    return 0;
  if ((v8 & 2) != 0)
    return AppendItemName + 10;
  return *(_QWORD *)(AppendItemName + 24);
}

uint64_t udatpg_getFieldDisplayName(uint64_t a1, unsigned int a2, unsigned int a3, UChar *a4, int a5, int *a6)
{
  uint64_t v9;
  unint64_t v10;
  UChar *v12;
  UChar *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0xFFFFFFFFLL;
  if (!a4)
  {
    if (!a5)
    {
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      icu::DateTimePatternGenerator::getFieldDisplayName(a1, a2, a3, (icu::UnicodeString *)&v14);
      v10 = SWORD4(v14);
      if ((v10 & 0x80000000) != 0)
      {
        v9 = HIDWORD(v14);
      }
      else
      {
        v10 = WORD4(v14);
        v9 = WORD4(v14) >> 5;
      }
      goto LABEL_5;
    }
    goto LABEL_7;
  }
  if (a5 < 0)
  {
LABEL_7:
    *a6 = 1;
    return 0xFFFFFFFFLL;
  }
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  icu::DateTimePatternGenerator::getFieldDisplayName(a1, a2, a3, (icu::UnicodeString *)&v14);
  v13 = a4;
  v9 = icu::UnicodeString::extract((uint64_t)&v14, &v13, a5, a6);
  v12 = v13;
  v10 = (unint64_t)&v12;
LABEL_5:
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v14);
  return v9;
}

void *udatpg_setDateTimeFormat(icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3)
{
  void *v4;
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 >> 31, &v6);
  icu::DateTimePatternGenerator::setDateTimeFormat(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

char *udatpg_getDateTimeFormat(uint64_t a1, unsigned int *a2)
{
  int v3;

  v3 = 0;
  return udatpg_getDateTimeFormatForStyle(a1, 2u, a2, &v3);
}

char *udatpg_getDateTimeFormatForStyle(uint64_t a1, unsigned int a2, unsigned int *a3, int *a4)
{
  _DWORD *DateTimeFormat;
  unsigned int v7;
  int v8;
  unsigned int v9;
  __int16 v10;

  if (*a4 < 1)
  {
    DateTimeFormat = icu::DateTimePatternGenerator::getDateTimeFormat(a1, a2, a4);
    if (a3)
    {
      v7 = *((unsigned __int16 *)DateTimeFormat + 4);
      v8 = (__int16)v7;
      v9 = v7 >> 5;
      if (v8 < 0)
        v9 = DateTimeFormat[3];
      *a3 = v9;
    }
    v10 = *((_WORD *)DateTimeFormat + 4);
    if ((v10 & 0x11) != 0)
    {
      return 0;
    }
    else if ((v10 & 2) != 0)
    {
      return (char *)DateTimeFormat + 10;
    }
    else
    {
      return (char *)*((_QWORD *)DateTimeFormat + 3);
    }
  }
  else
  {
    if (a3)
      *a3 = 0;
    return (char *)&unk_18BE2BF6C;
  }
}

void *udatpg_setDateTimeFormatForStyle(void *result, unsigned int a2, uint64_t a3, unsigned int a4, int *a5)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _OWORD v10[4];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    if (a3)
    {
      v7 = (uint64_t)result;
      memset(v10, 0, sizeof(v10));
      v9 = a3;
      icu::UnicodeString::UnicodeString(v10, a4 >> 31, &v9);
      icu::DateTimePatternGenerator::setDateTimeFormat(v7, a2, (UChar **)v10, a5);
      return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v10);
    }
    else
    {
      *a5 = 1;
    }
  }
  return result;
}

void *udatpg_setDecimal(UChar **a1, uint64_t a2, unsigned int a3)
{
  void *v4;
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 >> 31, &v6);
  icu::DateTimePatternGenerator::setDecimal(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

uint64_t udatpg_getDecimal(icu::DateTimePatternGenerator *a1, unsigned int *a2)
{
  uint64_t Decimal;
  unsigned int v4;
  int v5;
  unsigned int v6;
  __int16 v7;

  Decimal = icu::DateTimePatternGenerator::getDecimal(a1);
  if (a2)
  {
    v4 = *(unsigned __int16 *)(Decimal + 8);
    v5 = (__int16)v4;
    v6 = v4 >> 5;
    if (v5 < 0)
      v6 = *(_DWORD *)(Decimal + 12);
    *a2 = v6;
  }
  v7 = *(_WORD *)(Decimal + 8);
  if ((v7 & 0x11) != 0)
    return 0;
  if ((v7 & 2) != 0)
    return Decimal + 10;
  return *(_QWORD *)(Decimal + 24);
}

uint64_t udatpg_replaceFieldTypes(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, UChar *a6, int a7, int *a8)
{
  return udatpg_replaceFieldTypesWithOptions(a1, a2, a3, a4, a5, 0, a6, a7, a8);
}

uint64_t udatpg_replaceFieldTypesWithOptions(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, int a6, UChar *a7, int a8, int *a9)
{
  uint64_t v9;
  void *v16;
  void *v17;
  _QWORD v19[3];
  UChar *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[4];
  _OWORD v24[4];
  _OWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*a9 > 0)
    return 0;
  if ((a2 || !a3) && (a4 || !a5))
  {
    memset(v25, 0, sizeof(v25));
    v22 = a2;
    icu::UnicodeString::UnicodeString(v25, a3 >> 31, &v22);
    v19[2] = v22;
    memset(v24, 0, sizeof(v24));
    v21 = a4;
    icu::UnicodeString::UnicodeString(v24, a5 >> 31, &v21);
    v19[1] = v21;
    memset(v23, 0, sizeof(v23));
    icu::DateTimePatternGenerator::replaceFieldTypes(a1, (const icu::UnicodeString *)v25, (const icu::UnicodeString *)v24, a6, a9, (uint64_t)v23);
    v20 = a7;
    v9 = icu::UnicodeString::extract((uint64_t)v23, &v20, a8, a9);
    v19[0] = v20;
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v23);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  }
  else
  {
    v9 = 0;
    *a9 = 1;
  }
  return v9;
}

_OWORD *udatpg_openSkeletons(icu::DateTimePatternGenerator *a1, UErrorCode *a2)
{
  uint64_t Skeletons;

  Skeletons = icu::DateTimePatternGenerator::getSkeletons(a1, a2);
  return uenum_openFromStringEnumeration(Skeletons, (int *)a2);
}

_OWORD *udatpg_openBaseSkeletons(icu::DateTimePatternGenerator *a1, UErrorCode *a2)
{
  uint64_t BaseSkeletons;

  BaseSkeletons = icu::DateTimePatternGenerator::getBaseSkeletons(a1, a2);
  return uenum_openFromStringEnumeration(BaseSkeletons, (int *)a2);
}

char *udatpg_getPatternForSkeleton(icu::DateTimePatternGenerator *a1, uint64_t a2, unsigned int a3, unsigned int *a4)
{
  uint64_t *PatternForSkeleton;
  unsigned int v7;
  int v8;
  unsigned int v9;
  void *v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(v15, 0, sizeof(v15));
  v14 = a2;
  icu::UnicodeString::UnicodeString(v15, a3 >> 31, &v14);
  v13 = v14;
  PatternForSkeleton = icu::DateTimePatternGenerator::getPatternForSkeleton(&v13, a1, (const icu::UnicodeString *)v15);
  if (a4)
  {
    v7 = *((unsigned __int16 *)PatternForSkeleton + 4);
    v8 = (__int16)v7;
    v9 = v7 >> 5;
    if (v8 < 0)
      v9 = *((_DWORD *)PatternForSkeleton + 3);
    *a4 = v9;
  }
  v10 = (void *)*((unsigned __int16 *)PatternForSkeleton + 4);
  if ((v10 & 0x11) != 0)
  {
    v11 = 0;
  }
  else if ((v10 & 2) != 0)
  {
    v11 = (char *)PatternForSkeleton + 10;
  }
  else
  {
    v11 = (char *)PatternForSkeleton[3];
  }
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v15);
  return v11;
}

uint64_t uadatpg_remapPatternWithOptions(void *a1, uint64_t a2, unsigned int a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v7;
  void *v13;
  int v14;
  unsigned int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  int32_t v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  int v25;
  void *v26;
  void *v27;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  _QWORD v35[2];
  UChar *v36;
  uint64_t v37;
  __int16 v38;
  _OWORD v39[4];
  void (**v40)(icu::UnicodeString *__hidden);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void (**v45)(icu::UnicodeString *__hidden);
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*a7 <= 0)
  {
    if (a2)
    {
      if (a5)
      {
        if ((a6 & 0x80000000) == 0)
        {
LABEL_6:
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v37 = a2;
          icu::UnicodeString::UnicodeString(&v50, a3 >> 31, &v37);
          v35[1] = v37;
          if ((a4 & 0x60000000) == 0x40000000 || (a4 & 0x60000000) == 0x20000000)
          {
            v46 = 0u;
            v49 = 0;
            v48 = 0u;
            v47 = 0u;
            v44 = 0;
            v45 = off_1E2256B38;
            LOWORD(v46) = 2;
            v41 = 0u;
            v43 = 0u;
            v42 = 0u;
            v40 = off_1E2256B38;
            LOWORD(v41) = 2;
            memset(v39, 0, sizeof(v39));
            icu::UnicodeString::UnicodeString(v39, "abBhHKkmsSzZOvVXx", 0xFFFFFFFFLL, 0);
            v13 = (void *)(WORD4(v50) >> 5);
            if ((SWORD4(v50) & 0x8000u) == 0)
              v14 = WORD4(v50) >> 5;
            else
              v14 = HIDWORD(v50);
            if (v14 >= 1)
            {
              v31 = a4 & 0x60000000;
              v32 = 0;
              v15 = 0;
              v29 = 0;
              v30 = 0;
              v16 = 0;
              v17 = 0;
              v33 = 0;
              v34 = -1;
              while (1)
              {
                if ((SWORD4(v50) & 0x8000u) == 0)
                  v18 = WORD4(v50) >> 5;
                else
                  v18 = HIDWORD(v50);
                if (v18 <= v15)
                {
                  v20 = 0xFFFF;
                }
                else
                {
                  if ((BYTE8(v50) & 2) != 0)
                    v19 = (unint64_t)&v50 | 0xA;
                  else
                    v19 = *((_QWORD *)&v51 + 1);
                  v20 = *(unsigned __int16 *)(v19 + 2 * (int)v15);
                  if (v20 == 39)
                  {
                    v17 = !v17;
                    goto LABEL_61;
                  }
                }
                if (v17)
                {
                  v17 = 1;
                }
                else
                {
                  if ((SWORD4(v39[0]) & 0x8000u) == 0)
                    v21 = WORD4(v39[0]) >> 5;
                  else
                    v21 = HIDWORD(v39[0]);
                  if ((icu::UnicodeString::doIndexOf((uint64_t)v39, v20, 0, v21) & 0x80000000) == 0)
                  {
                    if (!v16)
                    {
                      v32 = 0;
                      if ((v46 & 1) != 0)
                        v22 = 2;
                      else
                        v22 = v46 & 0x1F;
                      LOWORD(v46) = v22;
                      if ((v41 & 1) != 0)
                        v23 = 2;
                      else
                        v23 = v41 & 0x1F;
                      LOWORD(v41) = v23;
                      v34 = -1;
                      LODWORD(v30) = v15;
                    }
                    if (v20 > 103)
                    {
                      if (v20 != 107)
                      {
                        if (v20 == 104)
                          goto LABEL_49;
LABEL_40:
                        if (v34 < 0 && (v20 == 115 || v20 == 109))
                          v34 = v15;
                        goto LABEL_54;
                      }
                    }
                    else if (v20 != 72)
                    {
                      if (v20 != 75)
                        goto LABEL_40;
LABEL_49:
                      if (v31 == 0x40000000)
                      {
                        v34 = v15 + 1;
                        ++v32;
                        v24 = 72;
                        goto LABEL_53;
                      }
LABEL_54:
                      v24 = v20;
LABEL_55:
                      v38 = v20;
                      icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v38, 0, 1);
                      v38 = v24;
                      icu::UnicodeString::doAppend((uint64_t)&v40, (uint64_t)&v38, 0, 1);
LABEL_56:
                      if (u_isUWhiteSpace(v20)
                        || (HIDWORD(v30) = v15 + 1, v34 < 0)
                        || (v20 - 66) <= 0x20
                        && ((1 << (v20 - 66)) & 0x180000001) != 0)
                      {
                        v17 = 0;
                        v16 = 1;
                      }
                      else
                      {
                        v17 = 0;
                        v16 = 1;
                        v29 = v15 + 1;
                      }
                      goto LABEL_61;
                    }
                    if (v31 != 0x20000000)
                      goto LABEL_54;
                    v34 = v15 + 1;
                    v24 = 104;
LABEL_53:
                    v33 = 1;
                    goto LABEL_55;
                  }
                  if ((v20 - 65) >= 0x1A)
                  {
                    if ((v20 - 97) <= 0x19 && v16)
                    {
LABEL_65:
                      v17 = v33;
                      if (v33)
                      {
                        v25 = sub_18BDA9558(a1, a4, v32 > 1, (uint64_t)&v50, (uint64_t)&v45, (uint64_t)&v40, v30, SHIDWORD(v30), v34, v29, a7);
                        v17 = 0;
                        v16 = 0;
                        v33 = 0;
                        v14 += v25;
                        v15 += v25;
                      }
                      else
                      {
                        v16 = 0;
                        v33 = 0;
                      }
                      goto LABEL_61;
                    }
                    if (v16)
                      goto LABEL_56;
                  }
                  else if (v16)
                  {
                    goto LABEL_65;
                  }
                  v17 = 0;
                }
LABEL_61:
                if ((int)++v15 >= v14)
                {
                  v13 = (void *)v33;
                  if (v33)
                    sub_18BDA9558(a1, a4, v32 > 1, (uint64_t)&v50, (uint64_t)&v45, (uint64_t)&v40, v30, SHIDWORD(v30), v34, v29, a7);
                  break;
                }
              }
            }
            icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v39);
            icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v40);
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v45);
          }
          v36 = a5;
          v7 = icu::UnicodeString::extract((uint64_t)&v50, &v36, a6, a7);
          v35[0] = v36;
          icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v50);
          return v7;
        }
      }
      else if (!a6)
      {
        goto LABEL_6;
      }
    }
    v7 = 0;
    *a7 = 1;
    return v7;
  }
  return 0;
}

uint64_t sub_18BDA9558(void *a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int *a11)
{
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  UChar32 v27;
  int isUWhiteSpace;
  int32_t v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  int32_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (**v44)(icu::UnicodeString *__hidden);
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v55 = 0u;
  v56 = 0u;
  if (a3)
    v16 = a2 | 0x800;
  else
    v16 = a2;
  v53 = 0uLL;
  v54 = 0uLL;
  icu::DateTimePatternGenerator::getBestPattern(a1, a6, v16, a11, (icu::UnicodeString *)&v53);
  v17 = *a11;
  if ((int)v17 > 0)
  {
    v18 = 0;
    goto LABEL_81;
  }
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  icu::DateTimePatternGenerator::getBestPattern(a1, a5, 0xFFFF, a11, (icu::UnicodeString *)&v49);
  if (*a11 <= 0)
  {
    if ((SWORD4(v49) & 0x8000u) == 0)
      v31 = WORD4(v49) >> 5;
    else
      v31 = HIDWORD(v49);
    if ((BYTE8(v49) & 1) == 0 && v31 >= 1)
    {
      v32 = *(unsigned __int16 *)(a4 + 8);
      v33 = (__int16)v32;
      v34 = v32 >> 5;
      v35 = v33 >= 0 ? v34 : *(_DWORD *)(a4 + 12);
      v36 = (BYTE8(v49) & 2) != 0 ? (unint64_t)&v49 | 0xA : *((_QWORD *)&v50 + 1);
      v37 = icu::UnicodeString::indexOf(a4, v36, 0, v31, 0, v35);
      if ((v37 & 0x80000000) == 0)
      {
        if ((SWORD4(v49) & 0x8000u) == 0)
          v38 = WORD4(v49) >> 5;
        else
          v38 = HIDWORD(v49);
        if ((SWORD4(v53) & 0x8000u) == 0)
          v39 = WORD4(v53) >> 5;
        else
          v39 = HIDWORD(v53);
        icu::UnicodeString::doReplace((icu::UnicodeString *)a4, v37, v38, (const icu::UnicodeString *)&v53, 0, v39);
        LODWORD(v40) = WORD4(v53) >> 5;
        if ((SWORD4(v53) & 0x8000u) == 0)
          v40 = v40;
        else
          v40 = HIDWORD(v53);
        v18 = (v40 - v38);
        goto LABEL_80;
      }
    }
  }
  else
  {
    *a11 = 0;
  }
  if (a9 < 0 || a10 <= a9)
    goto LABEL_73;
  v45 = 0u;
  v48 = 0;
  v47 = 0u;
  v46 = 0u;
  v44 = off_1E2256B38;
  LOWORD(v45) = 2;
  (*(void (**)(uint64_t))(*(_QWORD *)a4 + 24))(a4);
  v19 = WORD4(v53) >> 5;
  if ((SWORD4(v53) & 0x8000u) == 0)
    v20 = v19;
  else
    v20 = HIDWORD(v53);
  if ((int)v20 < 1)
    goto LABEL_72;
  v21 = 0;
  v22 = 0;
  LOBYTE(v19) = 0;
  v23 = 0;
  v24 = 0xFFFFFFFFLL;
  do
  {
    if ((SWORD4(v53) & 0x8000u) == 0)
      v25 = WORD4(v53) >> 5;
    else
      v25 = HIDWORD(v53);
    if (v21 >= v25)
    {
      v27 = 0xFFFF;
    }
    else
    {
      if ((BYTE8(v53) & 2) != 0)
        v26 = (unint64_t)&v53 | 0xA;
      else
        v26 = *((_QWORD *)&v54 + 1);
      v27 = *(unsigned __int16 *)(v26 + 2 * v21);
      if (v27 == 39)
      {
        v19 = v19 == 0;
        goto LABEL_38;
      }
    }
    if ((_BYTE)v19)
    {
      v19 = 1;
    }
    else
    {
      if ((v27 - 72) <= 0x23 && ((1 << (v27 - 72)) & 0x900000009) != 0)
      {
        v24 = (v22 + 1);
      }
      else if ((v24 & 0x80000000) != 0 && (v27 == 115 || v27 == 109))
      {
        v24 = v21;
      }
      isUWhiteSpace = u_isUWhiteSpace(v27);
      v19 = 0;
      if ((int)v24 > -1 && isUWhiteSpace == 0 && v27 != 97)
        v23 = v21 + 1;
    }
LABEL_38:
    ++v21;
    ++v22;
  }
  while (v20 != v21);
  if ((v24 & 0x80000000) == 0 && v23 > (int)v24)
  {
    if ((v45 & 0x8000u) == 0)
      v41 = (unsigned __int16)v45 >> 5;
    else
      v41 = DWORD1(v45);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v53, v24, (v23 - v24), (const icu::UnicodeString *)&v44, 0, v41);
  }
LABEL_72:
  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v44);
LABEL_73:
  if ((SWORD4(v53) & 0x8000u) == 0)
    v42 = WORD4(v53) >> 5;
  else
    v42 = HIDWORD(v53);
  icu::UnicodeString::doReplace((icu::UnicodeString *)a4, a7, (a8 - a7), (const icu::UnicodeString *)&v53, 0, v42);
  LODWORD(v40) = WORD4(v53) >> 5;
  if ((SWORD4(v53) & 0x8000u) == 0)
    v40 = v40;
  else
    v40 = HIDWORD(v53);
  v18 = (a7 - a8 + v40);
LABEL_80:
  icu::UnicodeString::~UnicodeString((void *)v40, (icu::UnicodeString *)&v49);
LABEL_81:
  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v53);
  return v18;
}

uint64_t *ufieldpositer_open(_DWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *result;

  v2 = (uint64_t *)*a1;
  if ((int)v2 > 0)
    return 0;
  result = icu::UMemory::operator new(v2, (icu::UMemory *)0x18, a2);
  if (result)
    return (uint64_t *)icu::FieldPositionIterator::FieldPositionIterator((uint64_t)result);
  *a1 = 7;
  return result;
}

uint64_t ufieldpositer_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ufieldpositer_next(icu::FieldPositionIterator *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  void (**v8)(icu::FieldPosition *__hidden);
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  v8 = off_1E225EF78;
  v9 = 0xFFFFFFFFLL;
  if (icu::FieldPositionIterator::next(a1, (icu::FieldPosition *)&v8))
  {
    v6 = v9;
    if (a2)
    {
      v5 = HIDWORD(v9);
      *a2 = HIDWORD(v9);
    }
    if (a3)
    {
      v5 = v10;
      *a3 = v10;
    }
  }
  else
  {
    v6 = 0xFFFFFFFFLL;
  }
  icu::FieldPosition::~FieldPosition((void *)v5, (icu::FieldPosition *)&v8);
  return v6;
}

void icu::UIterCollationIterator::~UIterCollationIterator(icu::UIterCollationIterator *this)
{
  void *v1;

  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::UIterCollationIterator::resetToOffset(icu::UIterCollationIterator *this)
{
  icu::CollationIterator::reset((uint64_t)this);
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 40))();
}

uint64_t icu::UIterCollationIterator::getOffset(icu::UIterCollationIterator *this)
{
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 32))();
}

uint64_t icu::UIterCollationIterator::handleNextCE32(icu::UIterCollationIterator *this, unsigned int *a2, UErrorCode *a3)
{
  unsigned int v5;

  v5 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 72))();
  *a2 = v5;
  if ((v5 & 0x80000000) != 0)
    return 192;
  else
    return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                           + 4 * ((v5 & 0x1F) + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * (v5 >> 5))));
}

uint64_t icu::UIterCollationIterator::handleGetTrailSurrogate(icu::UIterCollationIterator *this)
{
  int v2;
  unsigned __int16 v3;

  v2 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 72))();
  v3 = v2;
  if ((v2 & 0x80000000) == 0 && (v2 & 0xFFFFFC00) != 0xDC00)
    (*(void (**)(void))(*((_QWORD *)this + 49) + 80))();
  return v3;
}

uint64_t icu::UIterCollationIterator::nextCodePoint(UCharIterator **this, UErrorCode *a2)
{
  return uiter_next32(this[49]);
}

uint64_t icu::UIterCollationIterator::previousCodePoint(UCharIterator **this, UErrorCode *a2)
{
  return uiter_previous32(this[49]);
}

uint64_t icu::UIterCollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  int v3;
  uint64_t v4;
  BOOL v5;

  if (a2 >= 1)
  {
    v3 = a2;
    v4 = this;
    do
    {
      this = uiter_next32(*(UCharIterator **)(v4 + 392));
      v5 = __OFSUB__(v3--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v3 < 0) ^ v5 | (v3 == 0)));
  }
  return this;
}

uint64_t icu::UIterCollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  int v3;
  uint64_t v4;
  BOOL v5;

  if (a2 >= 1)
  {
    v3 = a2;
    v4 = this;
    do
    {
      this = uiter_previous32(*(UCharIterator **)(v4 + 392));
      v5 = __OFSUB__(v3--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v3 < 0) ^ v5 | (v3 == 0)));
  }
  return this;
}

void icu::FCDUIterCollationIterator::~FCDUIterCollationIterator(icu::FCDUIterCollationIterator *this)
{
  *(_QWORD *)this = off_1E2268040;
  icu::UnicodeString::~UnicodeString(off_1E2268040, (icu::FCDUIterCollationIterator *)((char *)this + 424));
  icu::CollationIterator::~CollationIterator(this);
}

{
  *(_QWORD *)this = off_1E2268040;
  icu::UnicodeString::~UnicodeString(off_1E2268040, (icu::FCDUIterCollationIterator *)((char *)this + 424));
  icu::CollationIterator::~CollationIterator(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E2268040;
  icu::UnicodeString::~UnicodeString(off_1E2268040, (icu::FCDUIterCollationIterator *)((char *)this + 424));
  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::FCDUIterCollationIterator::resetToOffset(icu::FCDUIterCollationIterator *this, int a2)
{
  uint64_t result;

  icu::CollationIterator::reset((uint64_t)this);
  result = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 40))();
  *((_DWORD *)this + 101) = a2;
  *((_DWORD *)this + 100) = 0;
  return result;
}

uint64_t icu::FCDUIterCollationIterator::getOffset(icu::FCDUIterCollationIterator *this)
{
  int v2;
  uint64_t result;

  v2 = *((_DWORD *)this + 100);
  if (v2 <= 1)
    return (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 32))();
  result = *((unsigned int *)this + 102);
  if (v2 != 2)
  {
    if ((_DWORD)result)
      return *((unsigned int *)this + 103);
    else
      return *((unsigned int *)this + 101);
  }
  return result;
}

uint64_t icu::FCDUIterCollationIterator::handleNextCE32(icu::FCDUIterCollationIterator *this, int *a2, UErrorCode *a3)
{
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v12;
  char *v13;
  int v14;

  while (1)
  {
    while (1)
    {
      v6 = *((_DWORD *)this + 100);
      if (v6 == 2)
      {
        if (*((_DWORD *)this + 102) != *((_DWORD *)this + 103))
        {
          *a2 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 72))();
          ++*((_DWORD *)this + 102);
          return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                                 + 4
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * (*a2 >> 5))));
        }
        goto LABEL_20;
      }
      if (v6)
        break;
      v7 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 72))();
      *a2 = v7;
      if ((v7 & 0x80000000) != 0)
        return 192;
      if (v7 < 0xC0)
        return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                               + 4
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * (*a2 >> 5))));
      if (!icu::CollationFCD::tcccIndex[(unint64_t)v7 >> 5])
        return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                               + 4
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * (*a2 >> 5))));
      if (((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v7 >> 5]] >> v7) & 1) == 0)
        return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                               + 4
                               * ((*a2 & 0x1F)
                                + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * (*a2 >> 5))));
      if ((v7 & 0x1FFF01) != 0xF01)
      {
        v8 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 64))();
        if (v8 < 768
          || !icu::CollationFCD::lcccIndex[(unint64_t)v8 >> 5]
          || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v8 >> 5]] >> v8) & 1) == 0)
        {
          return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                                 + 4
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * (*a2 >> 5))));
        }
      }
      (*(void (**)(void))(*((_QWORD *)this + 49) + 80))();
      if (!icu::FCDUIterCollationIterator::nextSegment(this, a3))
      {
        *a2 = -1;
        return 192;
      }
    }
    if (v6 < 3)
      goto LABEL_20;
    v9 = *((int *)this + 102);
    v10 = *((unsigned __int16 *)this + 216);
    if ((*((__int16 *)this + 216) & 0x80000000) == 0)
      break;
    v12 = *((_DWORD *)this + 109);
    if ((_DWORD)v9 != v12)
      goto LABEL_22;
LABEL_20:
    icu::FCDUIterCollationIterator::switchToForward((uint64_t)this);
  }
  if ((_DWORD)v9 == v10 >> 5)
    goto LABEL_20;
  v12 = v10 >> 5;
LABEL_22:
  *((_DWORD *)this + 102) = v9 + 1;
  if (v12 <= v9)
  {
    v14 = 0xFFFF;
  }
  else
  {
    if ((v10 & 2) != 0)
      v13 = (char *)this + 434;
    else
      v13 = (char *)*((_QWORD *)this + 56);
    v14 = *(unsigned __int16 *)&v13[2 * v9];
  }
  *a2 = v14;
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                         + 4
                         * ((*a2 & 0x1F)
                          + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * (*a2 >> 5))));
}

uint64_t icu::FCDUIterCollationIterator::nextSegment(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  uint64_t v2;
  unsigned __int16 v5;
  UChar32 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  UChar32 v13;
  UChar32 v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  void (**v21)(icu::UnicodeString *__hidden);
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v5 = 0;
  *((_DWORD *)this + 102) = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 32))();
  v22 = 0u;
  v23 = 0u;
  v25 = 0;
  v24 = 0u;
  v21 = off_1E2256B38;
  LOWORD(v22) = 2;
  while (1)
  {
    v6 = uiter_next32(*((UCharIterator **)this + 49));
    if (v6 < 0)
      goto LABEL_23;
    v7 = v6;
    v8 = sub_18BBD6AB4(*((_QWORD *)this + 52), v6);
    v9 = v8;
    if (v8 > 0xFF)
      break;
    if ((unsigned __int16)v22 > 0x1Fu)
    {
      uiter_previous32(*((UCharIterator **)this + 49));
LABEL_23:
      v15 = *((_DWORD *)this + 102);
      if ((__int16)v22 < 0)
        v16 = DWORD1(v22) + v15;
      else
        v16 = v15 + ((unsigned __int16)v22 >> 5);
      *((_DWORD *)this + 103) = v16;
      v2 = 1;
      (*(void (**)(void))(*((_QWORD *)this + 49) + 40))();
      v17 = 2;
      *((_DWORD *)this + 100) = 2;
      goto LABEL_33;
    }
    icu::UnicodeString::append((uint64_t)&v21, v7);
LABEL_15:
    v5 = v9;
    if (!(_BYTE)v9)
      goto LABEL_23;
  }
  v10 = v8 >> 8;
  icu::UnicodeString::append((uint64_t)&v21, v7);
  if (v10 >= v5 && v9 != 33156 && v9 != 33154)
    goto LABEL_15;
  v13 = uiter_next32(*((UCharIterator **)this + 49));
  if ((v13 & 0x80000000) == 0)
  {
    v14 = v13;
    while (sub_18BBD6AB4(*((_QWORD *)this + 52), v14) > 0xFF)
    {
      icu::UnicodeString::append((uint64_t)&v21, v14);
      v14 = uiter_next32(*((UCharIterator **)this + 49));
      if (v14 < 0)
        goto LABEL_28;
    }
    uiter_previous32(*((UCharIterator **)this + 49));
  }
LABEL_28:
  icu::Normalizer2Impl::decompose(*((UChar **)this + 52), (const icu::UnicodeString *)&v21, (icu::FCDUIterCollationIterator *)((char *)this + 424), a2);
  v17 = *(unsigned int *)a2;
  if ((int)v17 <= 0)
  {
    v18 = *((_DWORD *)this + 102);
    *((_DWORD *)this + 101) = v18;
    v19 = (unsigned __int16)v22 >> 5;
    if ((v22 & 0x8000u) != 0)
      v19 = DWORD1(v22);
    *((_DWORD *)this + 103) = v19 + v18;
    v17 = 3;
    *((_DWORD *)this + 100) = 3;
    *((_DWORD *)this + 102) = 0;
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
LABEL_33:
  icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v21);
  return v2;
}

uint64_t icu::FCDUIterCollationIterator::switchToForward(uint64_t this)
{
  _DWORD *v1;
  int v2;
  _BOOL4 v3;
  int v4;

  v1 = (_DWORD *)this;
  v2 = *(_DWORD *)(this + 400);
  if (v2 == 4)
  {
    this = (*(uint64_t (**)(void))(*(_QWORD *)(this + 392) + 40))();
LABEL_6:
    v4 = 0;
    v1[101] = v1[103];
    goto LABEL_8;
  }
  if (v2 == 2)
  {
    v4 = 0;
    goto LABEL_8;
  }
  if (v2 != 1)
    goto LABEL_6;
  this = (*(uint64_t (**)(void))(*(_QWORD *)(this + 392) + 32))();
  v3 = this != v1[103];
  v1[102] = this;
  v1[101] = this;
  v4 = 2 * v3;
LABEL_8:
  v1[100] = v4;
  return this;
}

uint64_t icu::FCDUIterCollationIterator::handleGetTrailSurrogate(icu::FCDUIterCollationIterator *this)
{
  unsigned int v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  char *v8;

  if (*((int *)this + 100) > 2)
  {
    v4 = *((int *)this + 102);
    v5 = *((unsigned __int16 *)this + 216);
    if (*((__int16 *)this + 216) < 0)
      v6 = *((_DWORD *)this + 109);
    else
      v6 = v5 >> 5;
    if (v6 <= v4)
    {
      return 0xFFFFLL;
    }
    else
    {
      if ((v5 & 2) != 0)
        v8 = (char *)this + 434;
      else
        v8 = (char *)*((_QWORD *)this + 56);
      result = *(unsigned __int16 *)&v8[2 * v4];
      if ((result & 0xFC00) == 0xDC00)
        *((_DWORD *)this + 102) = v4 + 1;
    }
  }
  else
  {
    v2 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 72))();
    v3 = v2;
    if (v2 >> 10 == 55)
    {
      if (*((_DWORD *)this + 100) == 2)
        ++*((_DWORD *)this + 102);
    }
    else if ((v2 & 0x80000000) == 0)
    {
      (*(void (**)(void))(*((_QWORD *)this + 49) + 80))();
    }
    return v3;
  }
  return result;
}

uint64_t *icu::FCDUIterCollationIterator::nextCodePoint(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  int v12;

  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)this + 100);
      if (v4 == 2)
      {
        if (*((_DWORD *)this + 102) == *((_DWORD *)this + 103))
          goto LABEL_20;
        v11 = (uint64_t *)uiter_next32(*((UCharIterator **)this + 49));
LABEL_27:
        v6 = v11;
        if (v11 < 0x10000)
          v12 = 1;
        else
          v12 = 2;
        *((_DWORD *)this + 102) += v12;
        return v6;
      }
      if (!v4)
        break;
      if (v4 >= 3)
      {
        v8 = *((__int16 *)this + 216) < 0
           ? (uint64_t *)*((unsigned int *)this + 109)
           : (uint64_t *)(*((unsigned __int16 *)this + 216) >> 5);
        v9 = *((_DWORD *)this + 102);
        if (v9 != (_DWORD)v8)
        {
          v11 = icu::UnicodeString::char32At(v8, (icu::FCDUIterCollationIterator *)((char *)this + 424), v9);
          goto LABEL_27;
        }
      }
LABEL_20:
      icu::FCDUIterCollationIterator::switchToForward((uint64_t)this);
    }
    v5 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 72))();
    v6 = (uint64_t *)v5;
    if ((v5 & 0x80000000) != 0)
      return v6;
    if (v5 < 0xC0)
      break;
    if (!icu::CollationFCD::tcccIndex[(unint64_t)v5 >> 5])
      break;
    if (((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v5 >> 5]] >> v5) & 1) == 0)
      break;
    if ((v5 & 0x1FFF01) != 0xF01)
    {
      v7 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 64))();
      if (v7 < 768
        || !icu::CollationFCD::lcccIndex[(unint64_t)v7 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v7 >> 5]] >> v7) & 1) == 0)
      {
        break;
      }
    }
    (*(void (**)(void))(*((_QWORD *)this + 49) + 80))();
    if (!icu::FCDUIterCollationIterator::nextSegment(this, a2))
      return (uint64_t *)0xFFFFFFFFLL;
  }
  if (v6 >> 10 == 54)
  {
    v10 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 72))();
    if (v10 >> 10 == 55)
    {
      return (uint64_t *)(v10 + ((_DWORD)v6 << 10) - 56613888);
    }
    else if ((v10 & 0x80000000) == 0)
    {
      (*(void (**)(void))(*((_QWORD *)this + 49) + 80))();
    }
  }
  return v6;
}

uint64_t *icu::FCDUIterCollationIterator::previousCodePoint(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  int v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  int v11;

  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)this + 100);
      if (v4 != 2)
        break;
      if (*((_DWORD *)this + 102) != *((_DWORD *)this + 101))
      {
        v10 = (uint64_t *)uiter_previous32(*((UCharIterator **)this + 49));
LABEL_31:
        v6 = v10;
        if (v10 >= 0x10000)
          v11 = -2;
        else
          v11 = -1;
        *((_DWORD *)this + 102) += v11;
        return v6;
      }
LABEL_13:
      icu::FCDUIterCollationIterator::switchToBackward((uint64_t)this);
    }
    if (v4 != 1)
    {
      if (v4 >= 3)
      {
        v8 = (uint64_t *)*((unsigned int *)this + 102);
        if ((_DWORD)v8)
        {
          v10 = icu::UnicodeString::char32At(v8, (icu::FCDUIterCollationIterator *)((char *)this + 424), (int)v8 - 1);
          goto LABEL_31;
        }
      }
      goto LABEL_13;
    }
    v5 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 80))();
    if ((v5 & 0x80000000) != 0)
    {
      *((_DWORD *)this + 102) = 0;
      *((_QWORD *)this + 50) = 2;
      return (uint64_t *)0xFFFFFFFFLL;
    }
    v6 = (uint64_t *)v5;
    if (v5 < 0x300
      || !icu::CollationFCD::lcccIndex[(unint64_t)v5 >> 5]
      || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v5 >> 5]] >> v5) & 1) == 0)
    {
      return v6;
    }
    if ((v5 & 0x1FFF01) != 0xF01)
      break;
    v7 = -1;
LABEL_17:
    (*(void (**)(void))(*((_QWORD *)this + 49) + 72))();
    if ((v7 & 0x80000000) == 0)
      (*(void (**)(void))(*((_QWORD *)this + 49) + 72))();
    if (!icu::FCDUIterCollationIterator::previousSegment(this, a2))
      return (uint64_t *)0xFFFFFFFFLL;
  }
  v9 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 80))();
  v7 = v9;
  if (v9 >= 192
    && icu::CollationFCD::tcccIndex[(unint64_t)v9 >> 5]
    && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v9 >> 5]] >> v9) & 1) != 0)
  {
    goto LABEL_17;
  }
  if (v6 >> 10 != 55)
    goto LABEL_28;
  if (v9 < 0)
    v7 = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 80))();
  if (v7 >> 10 == 54)
    return (uint64_t *)(v6 + (v7 << 10) - 56613888);
LABEL_28:
  if ((v7 & 0x80000000) == 0)
    (*(void (**)(void))(*((_QWORD *)this + 49) + 72))();
  return v6;
}

uint64_t icu::FCDUIterCollationIterator::previousSegment(icu::FCDUIterCollationIterator *this, UErrorCode *a2)
{
  uint64_t v2;
  unsigned int v5;
  UChar32 v6;
  unsigned int v7;
  unsigned int v8;
  UChar32 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  void (**v21)(icu::UnicodeString *__hidden);
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  LOBYTE(v5) = 0;
  *((_DWORD *)this + 102) = (*(uint64_t (**)(void))(*((_QWORD *)this + 49) + 32))();
  v22 = 0u;
  v23 = 0u;
  v25 = 0;
  v24 = 0u;
  v21 = off_1E2256B38;
  LOWORD(v22) = 2;
  while (1)
  {
    v6 = uiter_previous32(*((UCharIterator **)this + 49));
    if (v6 < 0)
      goto LABEL_33;
    v7 = v6;
    v8 = sub_18BBD6AB4(*((_QWORD *)this + 52), v6);
    if (!(_BYTE)v8)
    {
      if ((unsigned __int16)v22 > 0x1Fu)
      {
        uiter_next32(*((UCharIterator **)this + 49));
LABEL_33:
        if ((v22 & 0x8000u) == 0)
          v19 = (unsigned __int16)v22 >> 5;
        else
          v19 = DWORD1(v22);
        *((_DWORD *)this + 101) = *((_DWORD *)this + 102) - v19;
        v2 = 1;
        (*(void (**)(void))(*((_QWORD *)this + 49) + 40))();
        v15 = 2;
        *((_DWORD *)this + 100) = 2;
        goto LABEL_39;
      }
      icu::UnicodeString::append((uint64_t)&v21, v7);
      goto LABEL_16;
    }
    icu::UnicodeString::append((uint64_t)&v21, v7);
    if ((_BYTE)v5 && v8 > v5)
    {
      if (v8 >= 0x100)
        break;
      goto LABEL_24;
    }
    if (v8 == 33154 || v8 == 33156)
      break;
LABEL_16:
    v5 = v8 >> 8;
    if (v8 <= 0xFF)
      goto LABEL_33;
  }
  do
  {
    v10 = uiter_previous32(*((UCharIterator **)this + 49));
    if (v10 < 0)
      break;
    v11 = v10;
    v12 = sub_18BBD6AB4(*((_QWORD *)this + 52), v10);
    if (!v12)
    {
      uiter_next32(*((UCharIterator **)this + 49));
      break;
    }
    v13 = v12;
    icu::UnicodeString::append((uint64_t)&v21, v11);
  }
  while (v13 > 0xFF);
LABEL_24:
  if ((v22 & 0x8000u) == 0)
    v14 = (unsigned __int16)v22 >> 5;
  else
    v14 = DWORD1(v22);
  icu::UnicodeString::doReverse((icu::UnicodeString *)&v21, 0, v14);
  icu::Normalizer2Impl::decompose(*((UChar **)this + 52), (const icu::UnicodeString *)&v21, (icu::FCDUIterCollationIterator *)((char *)this + 424), a2);
  v2 = 0;
  v15 = *(unsigned int *)a2;
  if ((int)v15 <= 0)
  {
    v16 = *((_DWORD *)this + 102);
    *((_DWORD *)this + 103) = v16;
    v17 = (unsigned __int16)v22 >> 5;
    if ((v22 & 0x8000u) != 0)
      v17 = DWORD1(v22);
    *((_DWORD *)this + 101) = v16 - v17;
    *((_DWORD *)this + 100) = 4;
    v18 = *((unsigned __int16 *)this + 216);
    if ((v18 & 0x8000) != 0)
      v15 = *((unsigned int *)this + 109);
    else
      v15 = v18 >> 5;
    *((_DWORD *)this + 102) = v15;
    v2 = 1;
  }
LABEL_39:
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v21);
  return v2;
}

uint64_t icu::FCDUIterCollationIterator::switchToBackward(uint64_t this)
{
  _DWORD *v1;
  int v2;
  int v3;

  v1 = (_DWORD *)this;
  v2 = *(_DWORD *)(this + 400);
  if (v2 == 3)
  {
    this = (*(uint64_t (**)(void))(*(_QWORD *)(this + 392) + 40))();
    goto LABEL_8;
  }
  if (v2 == 2)
  {
LABEL_9:
    v3 = 1;
    goto LABEL_10;
  }
  if (v2)
  {
LABEL_8:
    v1[103] = v1[101];
    goto LABEL_9;
  }
  this = (*(uint64_t (**)(void))(*(_QWORD *)(this + 392) + 32))();
  v1[102] = this;
  v1[103] = this;
  if ((_DWORD)this == v1[101])
    v3 = 1;
  else
    v3 = 2;
LABEL_10:
  v1[100] = v3;
  return this;
}

uint64_t *icu::FCDUIterCollationIterator::forwardNumCodePoints(uint64_t *this, int a2, UErrorCode *a3)
{
  int v4;
  icu::FCDUIterCollationIterator *v5;
  BOOL v6;

  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (icu::FCDUIterCollationIterator *)this;
    do
    {
      this = icu::FCDUIterCollationIterator::nextCodePoint(v5, a3);
      v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

uint64_t *icu::FCDUIterCollationIterator::backwardNumCodePoints(uint64_t *this, int a2, UErrorCode *a3)
{
  int v4;
  icu::FCDUIterCollationIterator *v5;
  BOOL v6;

  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (icu::FCDUIterCollationIterator *)this;
    do
    {
      this = icu::FCDUIterCollationIterator::previousCodePoint(v5, a3);
      v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

BOOL icu::FCDUIterCollationIterator::normalize(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  icu::Normalizer2Impl::decompose(this[52], a2, (icu::UnicodeString *)(this + 53), a3);
  return *a3 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t *ulistfmt_open(char *a1, UErrorCode *a2)
{
  uint64_t *v3;
  uint64_t *Instance;
  UErrorCode *v6;
  UErrorCode *v7;
  void *v8;
  const char *v9[29];

  v9[28] = *(const char **)MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0)
    return 0;
  icu::Locale::Locale(v3, (icu::Locale *)v9, a1, 0, 0, 0);
  Instance = icu::ListFormatter::createInstance(v9, a2, v6, v7);
  icu::Locale::~Locale(v8, (icu::Locale *)v9);
  if (*(int *)a2 >= 1 && Instance)
  {
    (*(void (**)(uint64_t *))(*Instance + 8))(Instance);
    return 0;
  }
  return Instance;
}

uint64_t *ulistfmt_openForType(char *a1, int a2, unsigned int a3, UErrorCode *a4)
{
  uint64_t *v4;
  uint64_t *Instance;
  void *v10;
  const char *v11[29];

  v11[28] = *(const char **)MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v4 > 0)
    return 0;
  icu::Locale::Locale(v4, (icu::Locale *)v11, a1, 0, 0, 0);
  Instance = icu::ListFormatter::createInstance(v11, a2, a3, a4);
  icu::Locale::~Locale(v10, (icu::Locale *)v11);
  if (*(int *)a4 >= 1 && Instance)
  {
    (*(void (**)(uint64_t *))(*Instance + 8))(Instance);
    return 0;
  }
  return Instance;
}

uint64_t ulistfmt_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ulistfmt_openResult(int *a1, unint64_t a2)
{
  uint64_t result;

  if (*a1 > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x30, a2);
  if (result)
  {
    *(_DWORD *)result = 1430672896;
    *(_DWORD *)(result + 16) = 1179407188;
    *(_QWORD *)(result + 24) = off_1E2260758;
    *(_QWORD *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 27;
    *(_QWORD *)(result + 8) = result + 24;
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t ulistfmt_resultAsValue(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1179407188)
      goto LABEL_8;
    v2 = 3;
  }
  else
  {
    v2 = 1;
  }
  result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1)
    return 0;
  return result;
}

void ulistfmt_closeResult(_DWORD *a1)
{
  if (a1)
  {
    if (a1[4] == 1179407188)
    {
      icu::FormattedList::~FormattedList((icu::FormattedList *)(a1 + 6));
      a1[4] = 0;
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

uint64_t ulistfmt_format(icu::ListFormatter *a1, const UChar **a2, unint64_t a3, unsigned int a4, char *a5, unsigned int a6, int *a7)
{
  uint64_t v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  const icu::UnicodeString *v17;
  void *v18;
  uint64_t i;
  UChar *v20;
  UChar *v21;
  void *v22;
  void (**v23)(icu::UnicodeString *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[16];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0)
    return 0xFFFFFFFFLL;
  if (a5)
  {
    if ((a6 & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  if (a6)
  {
LABEL_9:
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_4:
  v12 = 0;
  memset(v28, 0, sizeof(v28));
  do
  {
    v13 = &v28[v12];
    *(_QWORD *)v13 = off_1E2256B38;
    *((_WORD *)v13 + 4) = 2;
    v12 += 4;
  }
  while (v12 != 16);
  v22 = 0;
  v14 = sub_18BDAAEB4(a2, a3, a4, (char *)v28, &v22, a7);
  if (*a7 <= 0)
  {
    v17 = (const icu::UnicodeString *)v14;
    v24 = 0u;
    v27 = 0;
    v26 = 0u;
    v25 = 0u;
    v23 = off_1E2256B38;
    LOWORD(v24) = 2;
    if (a5)
      icu::UnicodeString::setTo((icu::UnicodeString *)&v23, a5, 0, a6);
    icu::ListFormatter::format(a1, v17, a4, (icu::UnicodeString *)&v23, (UErrorCode *)a7);
    v21 = (UChar *)a5;
    v15 = icu::UnicodeString::extract((uint64_t)&v23, &v21, a6, a7);
    v20 = v21;
    icu::UnicodeString::~UnicodeString(&v20, (icu::UnicodeString *)&v23);
  }
  else
  {
    v15 = 0xFFFFFFFFLL;
  }
  sub_18BBBADF4((uint64_t *)&v22);
  for (i = 12; i != -4; i -= 4)
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v28[i]);
  return v15;
}

char *sub_18BDAAEB4(const UChar **a1, unint64_t a2, unsigned int a3, char *a4, void **a5, int *a6)
{
  unsigned int *v10;
  const UChar **v11;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  const UChar *v21;
  uint64_t v22;
  unint64_t v23;
  const UChar *v24;
  const UChar *v25;
  const UChar *v26;

  if ((a3 & 0x80000000) != 0 || (v10 = (unsigned int *)a2, (v11 = a1) == 0) && a3)
  {
    a4 = 0;
    *a6 = 1;
  }
  else
  {
    if (a3 >= 5)
    {
      v13 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)(((unint64_t)a3 << 6) | 0x10), a2);
      if (v13)
      {
        *v13 = 64;
        v13[1] = a3;
        v14 = (char *)(v13 + 2);
        v15 = v13 + 2;
        do
        {
          *v15 = off_1E2256B38;
          *((_WORD *)v15 + 4) = 2;
          v15 += 8;
        }
        while (v15 != &v13[8 * (unint64_t)a3 + 2]);
      }
      else
      {
        v14 = 0;
      }
      sub_18BDAB19C(a5, v14, a6);
      if (*a6 > 0)
        return 0;
      a4 = (char *)*a5;
    }
    if (v10)
    {
      if ((int)a3 >= 1)
      {
        v16 = 0;
        v17 = (unint64_t)a3 << 6;
        do
        {
          v19 = *v10++;
          v18 = v19;
          v20 = v19 >> 31;
          v21 = *v11++;
          v25 = v21;
          icu::UnicodeString::setTo((icu::UnicodeString *)&a4[v16], v20, &v25, v18);
          v16 += 64;
        }
        while (v17 != v16);
      }
    }
    else if ((int)a3 >= 1)
    {
      v22 = 0;
      v23 = (unint64_t)a3 << 6;
      do
      {
        v24 = *v11++;
        v26 = v24;
        icu::UnicodeString::setTo((icu::UnicodeString *)&a4[v22], 1, &v26, -1);
        v22 += 64;
      }
      while (v23 != v22);
    }
  }
  return a4;
}

icu::ListFormatter *ulistfmt_formatStringsToResult(icu::ListFormatter *result, const UChar **a2, unint64_t a3, unsigned int a4, uint64_t a5, int *a6)
{
  icu::ListFormatter *v9;
  uint64_t v10;
  _OWORD *v11;
  char *v12;
  void *v13;
  uint64_t i;
  int v15;
  _BYTE v16[24];
  void *v17;
  _OWORD v18[16];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return result;
  if (!a5)
  {
    v15 = 1;
LABEL_13:
    *a6 = v15;
    return result;
  }
  if (*(_DWORD *)(a5 + 16) != 1179407188)
  {
    v15 = 3;
    goto LABEL_13;
  }
  v9 = result;
  v10 = 0;
  memset(v18, 0, sizeof(v18));
  do
  {
    v11 = &v18[v10];
    *(_QWORD *)v11 = off_1E2256B38;
    *((_WORD *)v11 + 4) = 2;
    v10 += 4;
  }
  while (v10 != 16);
  v17 = 0;
  v12 = sub_18BDAAEB4(a2, a3, a4, (char *)v18, &v17, a6);
  if (*a6 <= 0)
  {
    icu::ListFormatter::formatStringsToValue(v9, (const icu::UnicodeString *)v12, (UErrorCode *)a6, a4, (uint64_t)v16);
    icu::FormattedList::operator=(a5 + 24, (uint64_t)v16);
    icu::FormattedList::~FormattedList((icu::FormattedList *)v16);
  }
  sub_18BBBADF4((uint64_t *)&v17);
  for (i = 12; i != -4; i -= 4)
    result = (icu::ListFormatter *)icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v18[i]);
  return result;
}

void sub_18BDAB19C(void **a1, char *a2, int *a3)
{
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;

  if (*a3 <= 0)
  {
    v10 = *a1;
    if (*a1)
    {
      v11 = (char *)(v10 - 2);
      v12 = *(v10 - 1);
      if (v12)
      {
        v13 = v12 << 6;
        v14 = (char *)(v10 - 8);
        do
        {
          icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v14[v13]);
          v13 -= 64;
        }
        while (v13);
      }
      icu::UMemory::operator delete[](v11);
    }
    *a1 = a2;
    if (!a2)
      *a3 = 7;
  }
  else if (a2)
  {
    v4 = a2 - 16;
    v5 = (void *)*((_QWORD *)a2 - 1);
    if (v5)
    {
      v6 = (_QWORD)v5 << 6;
      v7 = a2 - 64;
      do
      {
        icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v7[v6]);
        v6 -= 64;
      }
      while (v6);
    }
    icu::UMemory::operator delete[](v4);
  }
}

uint64_t u_formatMessage(const char *a1, UChar *a2, int a3, UChar *a4, int a5, UErrorCode *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return u_vformatMessage(a1, a2, a3, a4, a5, (double *)&a9, a6);
}

uint64_t u_vformatMessage(const char *a1, UChar *a2, int a3, UChar *a4, int a5, double *a6, UErrorCode *a7)
{
  unsigned __int8 *v11;
  uint64_t v12;

  v11 = umsg_open(a2, a3, a1, 0, a7);
  v12 = umsg_vformat((uint64_t)v11, a4, a5, a6, a7);
  if (v11)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v11 + 8))(v11);
  return v12;
}

unsigned __int8 *umsg_open(UChar *s, int a2, const char *a3, UParseError *a4, UErrorCode *a5)
{
  unsigned __int8 *v6;
  __int128 v11;
  UParseError *v12;
  unint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  UChar *v17;
  UChar *v18;
  _OWORD v19[4];
  uint64_t v20;
  _BYTE v21[224];
  _OWORD v22[4];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a5 && *(int *)a5 <= 0)
  {
    if (!s || a2 <= -2)
    {
      v6 = 0;
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
      return v6;
    }
    v20 = 0;
    v11 = 0uLL;
    memset(v19, 0, sizeof(v19));
    if (a4)
      v12 = a4;
    else
      v12 = (UParseError *)v19;
    if (a2 == -1)
    {
      u_strlen(s);
      v11 = 0uLL;
    }
    v22[2] = v11;
    v22[3] = v11;
    v22[0] = v11;
    v22[1] = v11;
    v18 = s;
    icu::UnicodeString::UnicodeString(v22, a2 == -1, &v18);
    v17 = v18;
    v6 = (unsigned __int8 *)icu::UMemory::operator new((uint64_t *)&v17, (icu::UMemory *)0x330, v13);
    if (v6)
    {
      icu::Locale::Locale(v14, (icu::Locale *)v21, a3, 0, 0, 0);
      icu::MessageFormat::MessageFormat((icu::MessageFormat *)v6, (const icu::UnicodeString *)v22, (const icu::Locale *)v21, v12, a5);
      icu::Locale::~Locale(v15, (icu::Locale *)v21);
      v16 = *(unsigned int *)a5;
      if ((int)v16 > 0)
        goto LABEL_19;
      v16 = v6[712];
      if (!v6[712])
        goto LABEL_19;
      v16 = 65804;
    }
    else
    {
      v16 = 7;
    }
    *a5 = v16;
LABEL_19:
    icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v22);
    return v6;
  }
  return 0;
}

uint64_t umsg_vformat(uint64_t a1, UChar *a2, int a3, double *a4, UErrorCode *a5)
{
  uint64_t v9;
  uint64_t v11;
  int *v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const icu::Formattable *v21;
  uint64_t v22;
  icu::Formattable *v23;
  uint64_t v24;
  icu::Formattable *v25;
  int v26;
  double *v27;
  double *v28;
  int *v29;
  uint64_t *v30;
  void *v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  UChar **v37;
  void *v38;
  UChar *v39;
  UChar *v40;
  _QWORD v41[3];
  double *v42;
  UChar *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v42 = a4;
  if (!a5 || *(int *)a5 > 0)
    return 0xFFFFFFFFLL;
  if (!a1 || a3 < 0 || !a2 && a3)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  v11 = *(unsigned int *)(a1 + 704);
  v12 = *(int **)(a1 + 696);
  if (v11 <= 1)
    v13 = 1;
  else
    v13 = *(_DWORD *)(a1 + 704);
  v14 = v13;
  v15 = 112 * v13;
  v16 = !is_mul_ok(v14, 0x70uLL);
  v17 = __CFADD__(v15, 16);
  v18 = v15 + 16;
  if (v17)
    v16 = 1;
  if (v16)
    v19 = -1;
  else
    v19 = v18;
  v20 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v19, (unint64_t)a2);
  if (v20)
  {
    *v20 = 112;
    v20[1] = v14;
    v21 = (const icu::Formattable *)(v20 + 2);
    v22 = 112 * v14;
    v23 = (icu::Formattable *)(v20 + 2);
    do
    {
      v23 = (icu::Formattable *)((char *)icu::Formattable::Formattable(v23) + 112);
      v22 -= 112;
    }
    while (v22);
  }
  else
  {
    v21 = 0;
  }
  if ((int)v11 >= 1)
  {
    v24 = v11;
    v25 = v21;
    do
    {
      v26 = *v12++;
      switch(v26)
      {
        case 0:
          v27 = v42++;
          icu::Formattable::setDate(v25, *v27);
          break;
        case 1:
          v28 = v42++;
          icu::Formattable::setDouble(v25, *v28);
          break;
        case 2:
          v29 = (int *)v42++;
          icu::Formattable::setLong(v25, *v29);
          break;
        case 3:
          v30 = (uint64_t *)v42++;
          if (*v30)
          {
            icu::UnicodeString::UnicodeString((uint64_t)&v43, *v30);
            icu::Formattable::setString(v25, &v43);
            icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v43);
          }
          else
          {
            *a5 = U_ILLEGAL_ARGUMENT_ERROR;
          }
          break;
        case 4:
        case 6:
          ++v42;
          break;
        case 5:
          v32 = (uint64_t *)v42++;
          icu::Formattable::setInt64(v25, *v32);
          break;
        default:
          abort();
      }
      v25 = (icu::Formattable *)((char *)v25 + 112);
      --v24;
    }
    while (v24);
  }
  v44 = 0u;
  v47 = 0;
  v46 = 0u;
  v45 = 0u;
  v43 = (UChar *)off_1E2256B38;
  LOWORD(v44) = 2;
  v41[2] = 0;
  v41[0] = off_1E225EF78;
  v41[1] = 0xFFFFFFFFLL;
  icu::MessageFormat::format((icu::MessageFormat *)a1, v21, v11, (icu::UnicodeString *)&v43, (icu::FieldPosition *)v41, a5);
  if (v21)
  {
    v33 = (char *)v21 - 16;
    v34 = *((_QWORD *)v21 - 1);
    if (v34)
    {
      v35 = 112 * v34;
      v36 = (char *)v21 - 112;
      do
      {
        icu::Formattable::~Formattable((icu::Formattable *)&v36[v35]);
        v35 -= 112;
      }
      while (v35);
    }
    icu::UMemory::operator delete[](v33);
  }
  v37 = (UChar **)*(unsigned int *)a5;
  if ((int)v37 <= 0)
  {
    v40 = a2;
    v9 = icu::UnicodeString::extract((uint64_t)&v43, &v40, a3, (int *)a5);
    v39 = v40;
    v37 = &v39;
  }
  else
  {
    v9 = 0xFFFFFFFFLL;
  }
  icu::FieldPosition::~FieldPosition(v37, (icu::FieldPosition *)v41);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v43);
  return v9;
}

uint64_t umsg_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t u_formatMessageWithError(const char *a1, UChar *a2, int a3, UChar *a4, int a5, UParseError *a6, UErrorCode *a7, uint64_t a8, uint64_t a9)
{
  return u_vformatMessageWithError(a1, a2, a3, a4, a5, a6, (double *)&a9, a7);
}

uint64_t u_vformatMessageWithError(const char *a1, UChar *s, int a3, UChar *a4, int a5, UParseError *a6, double *a7, UErrorCode *a8)
{
  unsigned __int8 *v12;
  uint64_t v13;

  v12 = umsg_open(s, a3, a1, a6, a8);
  v13 = umsg_vformat((uint64_t)v12, a4, a5, a7, a8);
  if (v12)
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v12 + 8))(v12);
  return v13;
}

void *u_parseMessage(const char *a1, UChar *a2, int a3, UChar *a4, uint64_t a5, UErrorCode *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return u_vparseMessage(a1, a2, a3, a4, a5, &a9, a6);
}

void *u_vparseMessage(const char *a1, UChar *s, int a3, UChar *a4, uint64_t a5, uint64_t *a6, UErrorCode *a7)
{
  unsigned __int8 *v11;
  void *result;
  int v13;

  v11 = umsg_open(s, a3, a1, 0, a7);
  v13 = 0;
  result = umsg_vparse(v11, a4, a5, &v13, a6, (int *)a7);
  if (v11)
    return (void *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

void *umsg_vparse(void *result, UChar *s, uint64_t a3, int *a4, uint64_t *a5, int *a6)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  UChar ***v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  UChar *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[4];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a6 && *a6 <= 0)
  {
    v7 = (uint64_t)result;
    if (result && s && (int)a3 >= -1 && a4)
    {
      if ((_DWORD)a3 == -1)
        a3 = u_strlen(s);
      memset(v35, 0, sizeof(v35));
      icu::UnicodeString::UnicodeString((uint64_t)v35, (uint64_t)s, a3);
      v10 = (*(uint64_t (**)(uint64_t, _OWORD *, int *, int *))(*(_QWORD *)v7 + 192))(v7, v35, a4, a6);
      v11 = v10;
      v31 = 0u;
      v34 = 0;
      v33 = 0u;
      v32 = 0u;
      v30 = (UChar *)off_1E2256B38;
      LOWORD(v31) = 2;
      v12 = *a4;
      if ((int)v12 >= 1)
      {
        v13 = 0;
        v14 = (UChar ***)v10;
        do
        {
          switch(icu::Formattable::getType((icu::Formattable *)v14))
          {
            case 0u:
            case 1u:
              v15 = a5++;
              v16 = (_QWORD *)*v15;
              if (!v16)
                goto LABEL_23;
              *v16 = v14[1];
              break;
            case 2u:
              v17 = a5++;
              v18 = (_DWORD *)*v17;
              if (!v18)
                goto LABEL_23;
              *v18 = v14[1];
              break;
            case 3u:
              v19 = a5++;
              v20 = *v19;
              if (!*v19)
                goto LABEL_23;
              icu::UnicodeString::operator=(&v30, v14[1]);
              if ((v31 & 0x8000u) == 0)
                v21 = (unsigned __int16)v31 >> 5;
              else
                v21 = DWORD1(v31);
              icu::UnicodeString::doExtract((char *)&v30, 0, v21, v20, 0);
              *(_WORD *)(v20 + 2 * v21) = 0;
              break;
            case 4u:
            case 6u:
              abort();
            case 5u:
              v22 = a5++;
              v23 = (_QWORD *)*v22;
              if (v23)
                *v23 = v14[1];
              else
LABEL_23:
                *a6 = 1;
              break;
            default:
              break;
          }
          ++v13;
          v12 = *a4;
          v14 += 14;
        }
        while (v13 < v12);
      }
      if (v11)
      {
        v24 = (void *)(v11 - 16);
        v25 = *(_QWORD *)(v11 - 8);
        if (v25)
        {
          v26 = 112 * v25;
          v27 = v11 - 112;
          do
          {
            icu::Formattable::~Formattable((icu::Formattable *)(v27 + v26));
            v26 -= 112;
          }
          while (v26);
        }
        icu::UMemory::operator delete[](v24);
      }
      icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v30);
      return icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v35);
    }
    else
    {
      *a6 = 1;
    }
  }
  return result;
}

void *u_parseMessageWithError(const char *a1, UChar *a2, int a3, UChar *a4, uint64_t a5, UParseError *a6, UErrorCode *a7, uint64_t a8, uint64_t a9)
{
  return u_vparseMessageWithError(a1, a2, a3, a4, a5, &a9, a6, a7);
}

void *u_vparseMessageWithError(const char *a1, UChar *s, int a3, UChar *a4, uint64_t a5, uint64_t *a6, UParseError *a7, UErrorCode *a8)
{
  unsigned __int8 *v12;
  void *result;
  int v14;

  v12 = umsg_open(s, a3, a1, a7, a8);
  v14 = 0;
  result = umsg_vparse(v12, a4, a5, &v14, a6, (int *)a8);
  if (v12)
    return (void *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

uint64_t umsg_clone(uint64_t a1, int *a2)
{
  uint64_t result;
  int v4;

  if (!a2)
    return 0;
  if (*a2 > 0)
    return 0;
  if (a1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    if (result)
      return result;
    v4 = 7;
  }
  else
  {
    v4 = 1;
  }
  result = 0;
  *a2 = v4;
  return result;
}

void umsg_setLocale(uint64_t a1, const char *a2)
{
  _BYTE v3[224];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    icu::Locale::Locale((icu::Locale *)v3, a2, 0, 0, 0);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 64))(a1, v3);
    icu::Locale::~Locale((icu::Locale *)v3);
  }
}

const char *umsg_getLocale(uint64_t a1)
{
  if (a1)
    return *(const char **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) + 40);
  else
    return "";
}

void *umsg_applyPattern(void *result, uint64_t a2, uint64_t a3, _OWORD *a4, int *a5)
{
  void *v6;
  BOOL v7;
  int v8;
  _OWORD *v9;
  void *v10;
  _OWORD v11[4];
  uint64_t v12;
  _BYTE v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a5 && *a5 <= 0)
  {
    v6 = result;
    if (!result || (!a2 ? (v7 = (_DWORD)a3 == 0) : (v7 = 1), v7 ? (v8 = 0) : (v8 = 1), (int)a3 < -1 || v8))
    {
      *a5 = 1;
    }
    else
    {
      v12 = 0;
      memset(v11, 0, sizeof(v11));
      if (a4)
        v9 = a4;
      else
        v9 = v11;
      icu::UnicodeString::UnicodeString((uint64_t)v13, a2, a3);
      (*(void (**)(void *, _BYTE *, _OWORD *, int *))(*(_QWORD *)v6 + 88))(v6, v13, v9, a5);
      return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
    }
  }
  return result;
}

uint64_t umsg_toPattern(uint64_t a1, char *a2, unsigned int a3, int *a4)
{
  uint64_t v8;
  UChar *v10;
  UChar *v11;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a4 || *a4 > 0)
    return 0xFFFFFFFFLL;
  if (!a1 || (a3 & 0x80000000) != 0 || !a2 && a3)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }
  v13 = 0u;
  v14 = 0u;
  v16 = 0;
  v15 = 0u;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  if (a2 || a3)
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, a2, 0, a3);
  (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a1 + 104))(a1, &v12);
  v11 = (UChar *)a2;
  v8 = icu::UnicodeString::extract((uint64_t)&v12, &v11, a3, a4);
  v10 = v11;
  icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)&v12);
  return v8;
}

uint64_t umsg_format(uint64_t a1, UChar *a2, int a3, UErrorCode *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return umsg_vformat(a1, a2, a3, (double *)&a9, a4);
}

void *umsg_parse(void *a1, UChar *a2, uint64_t a3, int *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return umsg_vparse(a1, a2, a3, a4, &a9, a5);
}

uint64_t umsg_autoQuoteApostrophe(UChar *s, int32_t a2, uint64_t a3, int a4, int *a5)
{
  UChar *v6;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  if (!a5 || *a5 > 0)
    return 0xFFFFFFFFLL;
  v6 = s;
  if (!s || a2 < -1 || !a3 && a4 >= 1)
  {
    *a5 = 1;
    return 0xFFFFFFFFLL;
  }
  if (a2 == -1)
    a2 = u_strlen(s);
  if (a2 < 1)
  {
    v18 = 0;
    return u_terminateUChars(a3, a4, v18, a5);
  }
  LODWORD(v10) = 0;
  v11 = 0;
  v12 = 0;
  v13 = a2;
  while (2)
  {
    v15 = *v6++;
    v14 = v15;
    switch(v12)
    {
      case 0:
        v12 = v14 == 39;
        if (v14 == 123)
        {
          v12 = 3;
          ++v11;
        }
        goto LABEL_31;
      case 1:
        if (v14 == 39)
        {
          v12 = 0;
          goto LABEL_31;
        }
        if (v14 == 125 || v14 == 123)
        {
          v12 = 2;
LABEL_31:
          v17 = v10;
          goto LABEL_32;
        }
        if ((int)v10 < a4)
          *(_WORD *)(a3 + 2 * (int)v10) = 39;
        v12 = 0;
        v17 = v10 + 1;
LABEL_32:
        if (v17 < a4)
          *(_WORD *)(a3 + 2 * v17) = v14;
        v10 = v17 + 1;
        if (--v13)
          continue;
        if ((v12 - 1) >= 2)
        {
          v18 = v17 + 1;
        }
        else
        {
          v18 = (v17 + 2);
          if ((int)v10 < a4)
            *(_WORD *)(a3 + 2 * v10) = 39;
        }
        return u_terminateUChars(a3, a4, v18, a5);
      case 2:
        v12 = 2 * (v14 != 39);
        goto LABEL_31;
      case 3:
        v16 = v11 - 1;
        if (v11 == 1)
          v12 = 0;
        else
          v12 = 3;
        if (v14 == 123)
          ++v11;
        if (v14 == 125)
          v11 = v16;
        else
          v12 = 3;
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
}

void *icu::UnescapeTransliterator::getStaticClassID(icu::UnescapeTransliterator *this)
{
  return &unk_1EE00A298;
}

void *sub_18BDAC1DC()
{
  return &unk_1EE00A298;
}

void *sub_18BDAC1E8()
{
  unint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  const char *v21;
  const __int16 *v22;
  const __int16 *v23;
  const __int16 *v24;
  const __int16 *v25;
  const char *v26;
  const char *v27;
  _BYTE v28[64];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = "H";
  v0 = icu::UnicodeString::UnicodeString(v28, 1, &v27);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18BDAC3F0, 0);
  v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v28);
  v26 = "H";
  v3 = icu::UnicodeString::UnicodeString(v2, 1, &v26);
  icu::Transliterator::_registerFactory(v3, (uint64_t)sub_18BDAC44C, 0);
  v5 = icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v28);
  v25 = L"Hex-Any/C";
  v6 = icu::UnicodeString::UnicodeString(v5, 1, &v25);
  icu::Transliterator::_registerFactory(v6, (uint64_t)sub_18BDAC4A8, 0);
  v8 = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v28);
  v24 = L"Hex-Any/XML";
  v9 = icu::UnicodeString::UnicodeString(v8, 1, &v24);
  icu::Transliterator::_registerFactory(v9, (uint64_t)sub_18BDAC504, 0);
  v11 = icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v28);
  v23 = L"Hex-Any/XML10";
  v12 = icu::UnicodeString::UnicodeString(v11, 1, &v23);
  icu::Transliterator::_registerFactory(v12, (uint64_t)sub_18BDAC560, 0);
  v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v28);
  v22 = L"Hex-Any/Perl";
  v15 = icu::UnicodeString::UnicodeString(v14, 1, &v22);
  icu::Transliterator::_registerFactory(v15, (uint64_t)sub_18BDAC5BC, 0);
  v17 = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v28);
  v21 = "H";
  v18 = icu::UnicodeString::UnicodeString(v17, 1, &v21);
  icu::Transliterator::_registerFactory(v18, (uint64_t)sub_18BDAC618, 0);
  return icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v28);
}

icu::Transliterator *sub_18BDAC3F0@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(_QWORD *)v5 = off_1E2268190;
    *((_QWORD *)v5 + 11) = sub_18BDAC674(byte_18BE2BFD4);
  }
  return v5;
}

icu::Transliterator *sub_18BDAC44C@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(_QWORD *)v5 = off_1E2268190;
    *((_QWORD *)v5 + 11) = sub_18BDAC674(byte_18BE2BFE4);
  }
  return v5;
}

icu::Transliterator *sub_18BDAC4A8@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(_QWORD *)v5 = off_1E2268190;
    *((_QWORD *)v5 + 11) = sub_18BDAC674(byte_18BE2BFF4);
  }
  return v5;
}

icu::Transliterator *sub_18BDAC504@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(_QWORD *)v5 = off_1E2268190;
    *((_QWORD *)v5 + 11) = sub_18BDAC674(byte_18BE2C012);
  }
  return v5;
}

icu::Transliterator *sub_18BDAC560@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(_QWORD *)v5 = off_1E2268190;
    *((_QWORD *)v5 + 11) = sub_18BDAC674(byte_18BE2C026);
  }
  return v5;
}

icu::Transliterator *sub_18BDAC5BC@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(_QWORD *)v5 = off_1E2268190;
    *((_QWORD *)v5 + 11) = sub_18BDAC674(byte_18BE2C038);
  }
  return v5;
}

icu::Transliterator *sub_18BDAC618@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, a1, 0);
    *(_QWORD *)v5 = off_1E2268190;
    *((_QWORD *)v5 + 11) = sub_18BDAC674(byte_18BE2C04C);
  }
  return v5;
}

void *sub_18BDAC674(char *a1)
{
  uint64_t v2;
  int v3;
  size_t v4;
  void *v5;
  void *v6;

  v2 = 0;
  do
  {
    v3 = *(__int16 *)&a1[v2];
    v2 += 2;
  }
  while (v3 != -1);
  v4 = v2 & 0xFFFFFFFE;
  v5 = uprv_malloc(v4);
  v6 = v5;
  if (v5)
    memcpy(v5, a1, v4);
  return v6;
}

void sub_18BDAC6D4(void **a1)
{
  *a1 = off_1E2268190;
  uprv_free(a1[11]);
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_18BDAC708(void **a1)
{
  void *v2;

  *a1 = off_1E2268190;
  uprv_free(a1[11]);
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
  icu::UMemory::operator delete(v2);
}

icu::Transliterator *sub_18BDAC740@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  v5 = v4;
  if (v4)
  {
    icu::Transliterator::Transliterator(v4, (UChar **)a1);
    *(_QWORD *)v5 = off_1E2268190;
    *((_QWORD *)v5 + 11) = sub_18BDAC674(*(char **)(a1 + 88));
  }
  return v5;
}

uint64_t sub_18BDAC794(uint64_t result, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  int v10;
  unsigned __int16 *v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  _OWORD v43[4];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3[2];
  v5 = a3[3];
  if ((int)v4 >= v5)
    goto LABEL_48;
  v7 = result;
  do
  {
    v8 = *(unsigned __int16 **)(v7 + 88);
    v9 = *v8;
    if (v9 == 0xFFFF)
      goto LABEL_39;
    v10 = 0;
    v42 = v4;
    v37 = v4;
    v38 = v5;
    while (1)
    {
      v11 = &v8[v10];
      v12 = v11[1];
      LOWORD(v13) = v11[2];
      v39 = v11[3];
      v14 = v10 + 5;
      v15 = v11[4];
      v16 = v4;
      v41 = v9;
      v40 = v10 + 5;
      if (!v9)
        break;
      v17 = 0;
      v18 = 2 * v14;
      v19 = 1;
      v20 = v9;
      while (1)
      {
        v21 = v17;
        v22 = v42 + v17;
        if (v17)
        {
          if ((int)v22 >= v5)
            break;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v22);
        if ((_DWORD)result == *(unsigned __int16 *)(*(_QWORD *)(v7 + 88) + v18 + 2 * v21))
        {
          v17 = v21 + 1;
          v19 = v21 + 1 < v20;
          if (v20 != v21 + 1)
            continue;
        }
        if (v19)
          goto LABEL_33;
        v16 = v42 + v21 + 1;
        v5 = v38;
        goto LABEL_13;
      }
LABEL_32:
      if (a4)
      {
        LODWORD(v4) = v37;
        v5 = v38;
        goto LABEL_48;
      }
LABEL_33:
      v10 = v40 + v41 + v12;
      v8 = *(unsigned __int16 **)(v7 + 88);
      v9 = v8[v10];
      v4 = v37;
      v5 = v38;
      if (v9 == 0xFFFF)
        goto LABEL_39;
    }
LABEL_13:
    v23 = 0;
    v24 = 0;
    v13 = (char)v13;
    while ((int)v16 < v5)
    {
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v16);
      result = u_digit(v25, v13);
      if ((result & 0x80000000) != 0)
        goto LABEL_22;
      if (v25 < 0x10000)
        v26 = 1;
      else
        v26 = 2;
      v16 = (v26 + v16);
      v23 = result + v23 * v13;
      if (v15 == ++v24)
      {
        v24 = v15;
        goto LABEL_22;
      }
    }
    if (a4)
    {
      LODWORD(v4) = v37;
      break;
    }
LABEL_22:
    if (v24 < v39)
      goto LABEL_33;
    if ((_DWORD)v12)
    {
      v27 = 0;
      v28 = v38;
      if ((int)v16 > v38)
        v28 = v16;
      v29 = (v28 - v16);
      v30 = 1;
      while (v29 != v27)
      {
        v31 = v27;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v16 + v27);
        if ((_DWORD)result == *(unsigned __int16 *)(*(_QWORD *)(v7 + 88) + 2 * (int)(v40 + v41) + 2 * v31))
        {
          v27 = v31 + 1;
          v30 = v31 + 1 < v12;
          if (v12 != v31 + 1)
            continue;
        }
        if (v30)
          goto LABEL_33;
        v16 = (v16 + v31 + 1);
        goto LABEL_35;
      }
      goto LABEL_32;
    }
LABEL_35:
    memset(v43, 0, sizeof(v43));
    icu::UnicodeString::UnicodeString((uint64_t)v43, v23);
    v4 = v37;
    (*(void (**)(uint64_t, _QWORD, uint64_t, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v37, v16, v43);
    LODWORD(v32) = WORD4(v43[0]) >> 5;
    if ((SWORD4(v43[0]) & 0x8000u) == 0)
      v32 = v32;
    else
      v32 = HIDWORD(v43[0]);
    v5 = v37 + v38 - v16 + v32;
    result = (uint64_t)icu::UnicodeString::~UnicodeString((void *)v32, (icu::UnicodeString *)v43);
LABEL_39:
    if ((int)v4 < v5)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v4);
      if (result < 0x10000)
        v33 = 1;
      else
        v33 = 2;
      v4 = (v33 + v4);
    }
  }
  while ((int)v4 < v5);
LABEL_48:
  v34 = v5 - a3[3] + a3[1];
  a3[2] = v4;
  a3[3] = v5;
  a3[1] = v34;
  return result;
}

void *icu::UnicodeNameTransliterator::getStaticClassID(icu::UnicodeNameTransliterator *this)
{
  return &unk_1EE00A299;
}

void *sub_18BDACAE4()
{
  return &unk_1EE00A299;
}

icu::Transliterator *sub_18BDACAF0(icu::Transliterator *a1, icu::UnicodeFilter *a2)
{
  void *v4;
  const char *v6;
  UChar *v7[9];

  v7[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v6 = "A";
  icu::UnicodeString::UnicodeString(v7, 1, &v6);
  icu::Transliterator::Transliterator(a1, v7, a2);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
  *(_QWORD *)a1 = &off_1E2268240;
  return a1;
}

void sub_18BDACBA0(icu::Transliterator *a1)
{
  void *v1;

  icu::Transliterator::~Transliterator(a1);
  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18BDACBB4@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *result;

  result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x58, a2);
  if (result)
  {
    result = icu::Transliterator::Transliterator(result, a1);
    *(_QWORD *)result = &off_1E2268240;
  }
  return result;
}

char *sub_18BDACBF0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char *result;
  int32_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  void *v21;
  UErrorCode pErrorCode;
  const __int16 *v23;
  __int16 v24;
  _BYTE v25[8];
  unsigned __int16 v26;
  unsigned int v27;
  _OWORD v28[4];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = (char *)uprv_getMaxCharNameLength();
  if ((_DWORD)result && (v6 = (int)result, (result = (char *)uprv_malloc((int)result)) != 0))
  {
    v7 = result;
    v8 = a3[2];
    v9 = a3[3];
    memset(v28, 0, sizeof(v28));
    v23 = L"\\N{";
    icu::UnicodeString::UnicodeString(v28, 0, &v23);
    for (pErrorCode = U_ZERO_ERROR; (int)v8 < v9; v8 = (v12 + v8))
    {
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v8);
      if (v10 >= 0x10000)
        v11 = -2;
      else
        v11 = -1;
      if (v10 < 0x10000)
        v12 = 1;
      else
        v12 = 2;
      pErrorCode = U_ZERO_ERROR;
      v13 = u_charName(v10, U_EXTENDED_CHAR_NAME, v7, v6, &pErrorCode);
      if ((int)v13 >= 1 && pErrorCode <= U_ZERO_ERROR)
      {
        v15 = v13;
        v16 = WORD4(v28[0]) >> 5;
        if (SWORD4(v28[0]) < 0)
          v16 = HIDWORD(v28[0]);
        if (v16 >= 4)
          WORD4(v28[0]) = BYTE8(v28[0]) & 0x1F | 0x60;
        icu::UnicodeString::UnicodeString(v25, v7, v13, 0);
        if ((v26 & 0x8000u) == 0)
          v17 = v26 >> 5;
        else
          v17 = v27;
        v18 = icu::UnicodeString::doAppend((uint64_t)v28, (const icu::UnicodeString *)v25, 0, v17);
        v24 = 125;
        icu::UnicodeString::doAppend(v18, (uint64_t)&v24, 0, 1);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v25);
        (*(void (**)(uint64_t, uint64_t, _QWORD, _OWORD *))(*(_QWORD *)a2 + 32))(a2, v8, (v12 + v8), v28);
        v12 = v15 + 4;
        v9 += v11 + v15 + 4;
      }
    }
    v20 = v9 - a3[3] + a3[1];
    a3[2] = v8;
    a3[3] = v9;
    a3[1] = v20;
    uprv_free(v7);
    return (char *)icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v28);
  }
  else
  {
    a3[2] = a3[3];
  }
  return result;
}

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter(uint64_t a1, icu::MeasureUnitImpl *this, int *a3, UErrorCode *a4)
{
  int *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  UErrorCode v11;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(_BYTE *)(a1 + 28) = 0;
  v7 = (int *)(a1 + 96);
  icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)this, a4, a1 + 96);
  if (*(int *)a4 <= 0)
  {
    v8 = (_DWORD *)(**(_QWORD **)(a1 + 104) + 8);
    if (*(int *)(a1 + 96) >= 2)
    {
      v9 = 1;
      do
      {
        v10 = icu::units::UnitsConverter::compareTwoUnits((_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v9) + 8), v8, a3, (int *)a4);
        v11 = *a4;
        if (v10 >= 1 && v11 <= U_ZERO_ERROR)
        {
          v8 = (_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v9) + 8);
        }
        else if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
        {
          return a1;
        }
        ++v9;
      }
      while (v9 < *v7);
    }
    icu::units::ComplexUnitsConverter::init(a1, (unint64_t)v8, (uint64_t)a3, (int *)a4);
  }
  return a1;
}

void icu::units::ComplexUnitsConverter::init(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  BOOL v13;

  uprv_sortArray(*(_QWORD *)(a1 + 104), *(unsigned int *)(a1 + 96), 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18BDAD86C, a3, 0, a4);
  v8 = *(unsigned int *)(a1 + 96);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = 8 * v8 - 8;
    while (1)
    {
      v11 = *a4;
      if (v9)
      {
        if (v11 > 0)
          return;
        v12 = sub_18BDAD8AC((const void **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 104) + v9 - 8) + 8, *(_QWORD *)(*(_QWORD *)(a1 + 104) + v9) + 8, a3, (uint64_t)a4);
      }
      else
      {
        if (v11 > 0)
          return;
        v12 = sub_18BDAD8AC((const void **)(a1 + 8), a2, **(_QWORD **)(a1 + 104) + 8, a3, (uint64_t)a4);
      }
      v13 = *a4 <= 0 && v12 == 0;
      if (v13)
        break;
      if (*a4 <= 0)
      {
        v13 = v10 == v9;
        v9 += 8;
        if (!v13)
          continue;
      }
      return;
    }
    *a4 = 7;
  }
}

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  int *v7;
  int v12;
  uint64_t *v13;
  int v14;
  char v15;
  uint64_t v16;
  _OWORD v17[6];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[96];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 96) = 0;
  v7 = (int *)(a1 + 96);
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_DWORD *)(a1 + 112) = 8;
  *(_BYTE *)(a1 + 116) = 0;
  if (*a6 <= 0)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    memset(v22, 0, sizeof(v22));
    icu::MeasureUnitImpl::forIdentifier(a2, a3, a6, (uint64_t)v22);
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    memset(v17, 0, sizeof(v17));
    icu::MeasureUnitImpl::forIdentifier(a4, a5, a6, (uint64_t)v17);
    icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)v17, (UErrorCode *)a6, (uint64_t)&v12);
    sub_18BCFC4E4(v7, &v12);
    sub_18BD2D340((uint64_t)&v12);
    v12 = 0;
    v13 = &v16;
    v14 = 8;
    v15 = 0;
    icu::units::getAllConversionRates((uint64_t)&v12, a6);
    icu::units::ComplexUnitsConverter::init(a1, (unint64_t)v22, (uint64_t)&v12, a6);
    sub_18BD2D1E8((uint64_t)&v12);
    if (BYTE12(v18))
      uprv_free((void *)v18);
    sub_18BC3ED98((uint64_t)v17 + 8);
    if (BYTE12(v23))
      uprv_free((void *)v23);
    sub_18BC3ED98((uint64_t)&v22[8]);
  }
  return a1;
}

uint64_t icu::units::ComplexUnitsConverter::ComplexUnitsConverter(uint64_t a1, unint64_t a2, icu::MeasureUnitImpl *this, uint64_t a4, UErrorCode *a5)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 8;
  *(_BYTE *)(a1 + 28) = 0;
  icu::MeasureUnitImpl::extractIndividualUnitsWithIndices((int *)this, a5, a1 + 96);
  if (*(int *)a5 <= 0)
    icu::units::ComplexUnitsConverter::init(a1, a2, a4, (int *)a5);
  return a1;
}

BOOL icu::units::ComplexUnitsConverter::greaterThanOrEqual(icu::units::UnitsConverter ***this, double a2, double a3)
{
  return icu::units::UnitsConverter::convert(*this[2], a2) >= a3;
}

void icu::units::ComplexUnitsConverter::convert(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  _BOOL4 v9;
  int v10;
  int v11;
  _BOOL4 v12;
  double v13;
  int v14;
  uint64_t v15;
  unint64_t i;
  double v17;
  _BOOL4 isNaN;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  icu::MeasureUnit *v28;
  icu::Measure *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v35;
  void *v36[2];
  __int128 v37;
  __int128 v38;
  void *v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  double v43;
  _BYTE v44[8];
  uint64_t v45;
  void *v46;
  char v47;
  _OWORD v48[7];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 80) = 0;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_QWORD *)(a4 + 8) = a4 + 24;
  *(_DWORD *)(a4 + 16) = 8;
  v9 = a5 < 0.0;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = v10 - 1;
  v12 = v10 > 1;
  if (v9 && v12)
    v13 = -a5;
  else
    v13 = a5;
  if (v9 && v12)
    v14 = -1;
  else
    v14 = 1;
  v42 = 0;
  v40 = 0uLL;
  v41 = 0uLL;
  *(_OWORD *)v39 = 0uLL;
  sub_18BDAD5E4((uint64_t)v39, v11, *a3);
  if (*a3 <= 0)
  {
    bzero(v39[0], 8 * *(int *)(a1 + 8) - 8);
    v15 = *(unsigned int *)(a1 + 8);
    if ((int)v15 >= 1)
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = icu::units::UnitsConverter::convert(*(icu::units::UnitsConverter **)(*(_QWORD *)(a1 + 16) + 8 * i), v13);
        v13 = v17;
        if (i < (v15 - 1))
        {
          isNaN = uprv_isNaN(v17);
          v19 = vcvtmd_s64_f64(v13 * 1.0);
          if (isNaN)
            v19 = 0;
          *((_QWORD *)v39[0] + i) = v19;
          if (v13 - (double)v19 >= 0.0)
            v13 = v13 - (double)v19;
          else
            v13 = 0.0;
        }
      }
    }
    v43 = v13;
    icu::units::ComplexUnitsConverter::applyRounder(a1, (uint64_t *)v39, &v43, a2, a3);
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)v36 = 0u;
    sub_18BDAD7EC((uint64_t)v36, *(_DWORD *)(a1 + 8), *a3);
    if (*a3 < 1)
    {
      v20 = *(unsigned int *)(a1 + 8);
      if ((int)v20 >= 1)
      {
        v21 = 0;
        v22 = v43 * (double)v14;
        v23 = v14;
        do
        {
          memset(v48, 0, sizeof(v48));
          if (v21 >= (v20 - 1))
            icu::Formattable::Formattable((icu::Formattable *)v48, v22);
          else
            icu::Formattable::Formattable((icu::Formattable *)v48, *((_QWORD *)v39[0] + v21) * v23);
          v28 = (icu::MeasureUnit *)icu::UMemory::operator new(v25, (icu::UMemory *)0x18, v24);
          if (v28)
          {
            icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v21) + 8), (UErrorCode *)a3, (uint64_t)v44);
            icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v44, (UErrorCode *)a3, (uint64_t)v28);
            if (v47)
              uprv_free(v46);
            sub_18BC3ED98((uint64_t)&v45);
          }
          v29 = (icu::Measure *)icu::UMemory::operator new(v27, (icu::UMemory *)0x80, v26);
          if (v29)
            v29 = (icu::Measure *)icu::Measure::Measure(v29, (const icu::Formattable *)v48, v28, (UErrorCode *)a3);
          *((_QWORD *)v36[0] + **(int **)(*(_QWORD *)(a1 + 104) + 8 * v21)) = v29;
          icu::Formattable::~Formattable((icu::Formattable *)v48);
          ++v21;
        }
        while (v20 != v21);
        v30 = *(unsigned int *)(a1 + 8);
        if ((int)v30 >= 1)
        {
          v31 = 0;
          v32 = 8 * v30;
          do
          {
            if (*a3 <= 0)
            {
              v33 = sub_18BDAD9B0((const void **)a4, *(const icu::Measure **)((char *)v36[0] + v31));
              if (*a3 <= 0 && v33 == 0)
                *a3 = 7;
            }
            v35 = *(_QWORD *)((char *)v36[0] + v31);
            if (v35)
              (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
            v31 += 8;
          }
          while (v32 != v31);
        }
      }
    }
    if (BYTE4(v36[1]))
      uprv_free(v36[0]);
  }
  if (BYTE4(v39[1]))
    uprv_free(v39[0]);
}

uint64_t sub_18BDAD5E4(uint64_t a1, int a2, int a3)
{
  void *v5;
  void *v6;

  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 5;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 >= 6 && a3 <= 0)
  {
    v5 = uprv_malloc(8 * a2);
    if (v5)
    {
      v6 = v5;
      if (*(_BYTE *)(a1 + 12))
        uprv_free(*(void **)a1);
      *(_QWORD *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }
  return a1;
}

void icu::units::ComplexUnitsConverter::applyRounder(uint64_t a1, uint64_t *a2, double *a3, uint64_t a4, int *a5)
{
  _BOOL4 isNaN;
  double v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  BOOL v19;
  _OWORD v20[4];
  uint64_t v21;

  if (!uprv_isInfinite(*a3))
  {
    isNaN = uprv_isNaN(*a3);
    if (a4)
    {
      if (!isNaN)
      {
        v21 = 0;
        memset(v20, 0, sizeof(v20));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v20);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v20, *a3);
        sub_18BD26460(a4, (icu::number::impl::DecimalQuantity *)v20, a5);
        if (*a5 <= 0)
        {
          v11 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v20);
          *a3 = v11;
          v12 = *(_DWORD *)(a1 + 8);
          v13 = v12 - 1;
          if (v12 != 1)
          {
            v14 = vcvtmd_s64_f64(icu::units::UnitsConverter::convertInverse(*(icu::units::UnitsConverter **)(*(_QWORD *)(a1 + 16) + 8 * v13), v11)* 1.0);
            if (v14 >= 1)
            {
              *a3 = *a3
                  - icu::units::UnitsConverter::convert(*(icu::units::UnitsConverter **)(*(_QWORD *)(a1 + 16) + 8 * v13), (double)v14);
              v15 = (v12 - 2);
              v16 = *a2;
              *(_QWORD *)(*a2 + 8 * (int)v15) += v14;
              if (v12 >= 3)
              {
                do
                {
                  v17 = vcvtmd_s64_f64(icu::units::UnitsConverter::convertInverse(*(icu::units::UnitsConverter **)(*(_QWORD *)(a1 + 16) + 8 * v15), (double)*(uint64_t *)(v16 + 8 * v15))* 1.0);
                  if (v17 < 1)
                    break;
                  v18 = icu::units::UnitsConverter::convert(*(icu::units::UnitsConverter **)(*(_QWORD *)(a1 + 16) + 8 * v15), (double)v17);
                  v16 = *a2;
                  *(_QWORD *)(*a2 + 8 * v15) -= llround(v18);
                  v19 = v15-- <= 1;
                  *(_QWORD *)(v16 + 8 * v15) += v17;
                }
                while (!v19);
              }
            }
          }
        }
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v20);
      }
    }
  }
}

uint64_t sub_18BDAD7EC(uint64_t a1, int a2, int a3)
{
  void *v5;
  void *v6;

  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 >= 5 && a3 <= 0)
  {
    v5 = uprv_malloc(8 * a2);
    if (v5)
    {
      v6 = v5;
      if (*(_BYTE *)(a1 + 12))
        uprv_free(*(void **)a1);
      *(_QWORD *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }
  return a1;
}

uint64_t sub_18BDAD86C(int *a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = 0;
  return -icu::units::UnitsConverter::compareTwoUnits((_DWORD *)(*(_QWORD *)a2 + 8), (_DWORD *)(*(_QWORD *)a3 + 8), a1, &v4);
}

uint64_t *sub_18BDAD8AC(const void **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  int v12;
  uint64_t *result;
  uint64_t *v14;
  int v15;
  uint64_t v16;

  v10 = *((_DWORD *)a1 + 4);
  v11 = *(unsigned int *)a1;
  if ((_DWORD)v11 == v10)
  {
    if (v10 == 8)
      v12 = 32;
    else
      v12 = 2 * v10;
    if (v12 < 1)
      return 0;
    result = (uint64_t *)uprv_malloc(8 * v12);
    if (!result)
      return result;
    v14 = result;
    if (v10 >= 1)
    {
      v15 = *((_DWORD *)a1 + 4);
      if (v15 >= v10)
        v15 = v10;
      if (v15 >= v12)
        v15 = v12;
      memcpy(result, a1[1], 8 * v15);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free((void *)a1[1]);
    a1[1] = v14;
    *((_DWORD *)a1 + 4) = v12;
    v11 = 1;
    *((_BYTE *)a1 + 20) = 1;
  }
  result = icu::UMemory::operator new((uint64_t *)v11, (icu::UMemory *)0x178, a2);
  if (result)
    result = (uint64_t *)icu::units::UnitsConverter::UnitsConverter(result, a2, a3, a4, a5);
  v16 = *(int *)a1;
  *(_DWORD *)a1 = v16 + 1;
  *((_QWORD *)a1[1] + v16) = result;
  return result;
}

uint64_t *sub_18BDAD9B0(const void **a1, const icu::Measure *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t *result;
  uint64_t *v8;
  int v9;
  uint64_t v10;

  v4 = *((_DWORD *)a1 + 4);
  v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8)
      v6 = 32;
    else
      v6 = 2 * v4;
    if (v6 < 1)
      return 0;
    result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result)
      return result;
    v8 = result;
    if (v4 >= 1)
    {
      v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4)
        v9 = v4;
      if (v9 >= v6)
        v9 = v6;
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free((void *)a1[1]);
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    v5 = 1;
    *((_BYTE *)a1 + 20) = 1;
  }
  result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (result)
    result = (uint64_t *)icu::Measure::Measure((icu::Measure *)result, a2);
  v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((_QWORD *)a1[1] + v10) = result;
  return result;
}

float64x2_t *icu::units::Factor::multiplyBy(float64x2_t *result, float64x2_t *a2)
{
  uint64_t v2;
  double v3;

  v2 = 0;
  *result = vmulq_f64(*a2, *result);
  do
  {
    *(_DWORD *)((char *)&result[1].f64[1] + v2 + 4) += *(_DWORD *)((char *)&a2[1].f64[1] + v2 + 4);
    v2 += 4;
  }
  while (v2 != 60);
  v3 = a2[1].f64[0];
  if (v3 < result[1].f64[0])
    v3 = result[1].f64[0];
  result[1].f64[0] = v3;
  return result;
}

double *icu::units::Factor::divideBy(double *result, double *a2)
{
  uint64_t v2;
  double v3;
  double v4;

  v2 = 0;
  v3 = result[1];
  *result = a2[1] * *result;
  result[1] = *a2 * v3;
  do
  {
    *(_DWORD *)((char *)result + v2 + 28) -= *(_DWORD *)((char *)a2 + v2 + 28);
    v2 += 4;
  }
  while (v2 != 60);
  v4 = a2[2];
  if (v4 < result[2])
    v4 = result[2];
  result[2] = v4;
  return result;
}

void icu::units::Factor::power(icu::units::Factor *this, int a2)
{
  uint64_t i;
  int v5;
  long double v6;
  long double v7;
  double v8;

  for (i = 28; i != 88; i += 4)
    *(_DWORD *)((char *)this + i) *= a2;
  if (a2 >= 0)
    v5 = a2;
  else
    v5 = -a2;
  v6 = (double)v5;
  v7 = pow(*(long double *)this, (double)v5);
  *(long double *)this = v7;
  v8 = pow(*((long double *)this + 1), v6);
  *((double *)this + 1) = v8;
  if (a2 < 0)
  {
    *(double *)this = v8;
    *((long double *)this + 1) = v7;
  }
}

long double icu::units::Factor::applyPrefix(uint64_t a1, int a2, long double result)
{
  int PrefixPower;
  double PrefixBase;
  int v7;

  if (a2 != 30)
  {
    PrefixPower = umeas_getPrefixPower(a2);
    PrefixBase = (double)(int)umeas_getPrefixBase(a2);
    if (PrefixPower >= 0)
      v7 = PrefixPower;
    else
      v7 = -PrefixPower;
    result = pow(PrefixBase, (double)v7) * *(double *)(a1 + 8 * (PrefixPower >> 31));
    *(long double *)(a1 + 8 * (PrefixPower >> 31)) = result;
  }
  return result;
}

void icu::units::Factor::substituteConstants(icu::units::Factor *this)
{
  uint64_t i;
  char *v3;
  int v4;
  int v5;

  for (i = 0; i != 15; ++i)
  {
    v3 = (char *)this + 4 * i;
    v4 = *((_DWORD *)v3 + 7);
    if (v4)
    {
      if (v4 >= 0)
        v5 = *((_DWORD *)v3 + 7);
      else
        v5 = -v4;
      *((long double *)this + (v4 >> 31)) = pow(dbl_18BE2C0E8[i], (double)v5)
                                                        * *((double *)this + (v4 >> 31));
      *((_DWORD *)v3 + 7) = 0;
    }
  }
}

void icu::units::addSingleFactorConstant(unsigned __int8 *a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  int v10;
  double v11;
  double v12;
  long double v13;
  double v14;
  unsigned __int8 *v15[2];
  unsigned __int8 *v16;
  uint64_t v17;

  v16 = a1;
  v17 = a2;
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft_to_m");
  if (icu::operator==(&v16, v15))
  {
    v10 = *(_DWORD *)(a5 + 28) + a4 * a3;
LABEL_7:
    *(_DWORD *)(a5 + 28) = v10;
    return;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft2_to_m2");
  if (icu::operator==(&v16, v15))
  {
    v10 = *(_DWORD *)(a5 + 28) + 2 * a4 * a3;
    goto LABEL_7;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "ft3_to_m3");
  if (icu::operator==(&v16, v15))
  {
    v10 = *(_DWORD *)(a5 + 28) + 3 * a4 * a3;
    goto LABEL_7;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "in3_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 28) += 3 * a4 * a3;
    v11 = (double)(a4 * a3);
LABEL_12:
    v12 = pow(1728.0, v11) * *(double *)(a5 + 8);
LABEL_13:
    *(double *)(a5 + 8) = v12;
    return;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gal_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 28) += 3 * a4 * a3;
    *(long double *)a5 = pow(231.0, (double)(a4 * a3)) * *(double *)a5;
    v11 = (double)(a4 * a3);
    goto LABEL_12;
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gal_imp_to_m3");
  if (icu::operator==(&v16, v15))
  {
    *(_DWORD *)(a5 + 44) += a4 * a3;
  }
  else
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)v15, "G");
    if (icu::operator==(&v16, v15))
    {
      *(_DWORD *)(a5 + 40) += a4 * a3;
    }
    else
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)v15, "gravity");
      if (icu::operator==(&v16, v15))
      {
        *(_DWORD *)(a5 + 36) += a4 * a3;
      }
      else
      {
        icu::StringPiece::StringPiece((icu::StringPiece *)v15, "lb_to_kg");
        if (icu::operator==(&v16, v15))
        {
          *(_DWORD *)(a5 + 48) += a4 * a3;
        }
        else
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)v15, "glucose_molar_mass");
          if (icu::operator==(&v16, v15))
          {
            *(_DWORD *)(a5 + 52) += a4 * a3;
          }
          else
          {
            icu::StringPiece::StringPiece((icu::StringPiece *)v15, "item_per_mole");
            if (icu::operator==(&v16, v15))
            {
              *(_DWORD *)(a5 + 56) += a4 * a3;
            }
            else
            {
              icu::StringPiece::StringPiece((icu::StringPiece *)v15, "meters_per_AU");
              if (icu::operator==(&v16, v15))
              {
                *(_DWORD *)(a5 + 60) += a4 * a3;
              }
              else
              {
                icu::StringPiece::StringPiece((icu::StringPiece *)v15, "PI");
                if (icu::operator==(&v16, v15))
                {
                  *(_DWORD *)(a5 + 32) += a4 * a3;
                }
                else
                {
                  icu::StringPiece::StringPiece((icu::StringPiece *)v15, "sec_per_julian_year");
                  if (icu::operator==(&v16, v15))
                  {
                    *(_DWORD *)(a5 + 64) += a4 * a3;
                  }
                  else
                  {
                    icu::StringPiece::StringPiece((icu::StringPiece *)v15, "speed_of_light_meters_per_second");
                    if (icu::operator==(&v16, v15))
                    {
                      *(_DWORD *)(a5 + 68) += a4 * a3;
                    }
                    else
                    {
                      icu::StringPiece::StringPiece((icu::StringPiece *)v15, "sho_to_m3");
                      if (icu::operator==(&v16, v15))
                      {
                        *(_DWORD *)(a5 + 72) += a4 * a3;
                      }
                      else
                      {
                        icu::StringPiece::StringPiece((icu::StringPiece *)v15, "tsubo_to_m2");
                        if (icu::operator==(&v16, v15))
                        {
                          *(_DWORD *)(a5 + 76) += a4 * a3;
                        }
                        else
                        {
                          icu::StringPiece::StringPiece((icu::StringPiece *)v15, "shaku_to_m");
                          if (icu::operator==(&v16, v15))
                          {
                            *(_DWORD *)(a5 + 80) += a4 * a3;
                          }
                          else
                          {
                            icu::StringPiece::StringPiece((icu::StringPiece *)v15, "AMU");
                            if (icu::operator==(&v16, v15))
                            {
                              *(_DWORD *)(a5 + 84) += a4 * a3;
                            }
                            else
                            {
                              sub_18BDAE100(v16, v17, a6);
                              v14 = pow(v13, (double)a3);
                              if (a4 == -1)
                              {
                                v12 = *(double *)(a5 + 8) * v14;
                                goto LABEL_13;
                              }
                              *(double *)a5 = *(double *)a5 * v14;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_18BDAE100(unsigned __int8 *a1, int a2, _DWORD *a3)
{
  int v5;
  __int128 v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  uint64_t v10;

  v7 = 0;
  v10 = 0;
  v6 = 0u;
  v8 = "";
  v9 = "";
  v5 = 0;
  sub_18BCC4558((double *)&v6, a1, a2, &v5);
  if (v5 != a2)
    *a3 = 3;
}

uint64_t icu::units::extractCompoundBaseUnit@<X0>(uint64_t result@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  icu::SingleUnitImpl *v10;
  const char *SimpleUnitID;
  uint64_t v12;
  uint64_t v13;
  const icu::SingleUnitImpl *v14;
  _OWORD v15[5];
  uint64_t v16;
  unsigned __int8 *v17[2];
  _BYTE v18[8];
  int v19;
  _BYTE *v20;
  int v21;
  char v22;
  _BYTE v23[64];
  void *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_QWORD *)(a4 + 16) = a4 + 32;
  *(_DWORD *)(a4 + 24) = 8;
  *(_QWORD *)(a4 + 96) = a4 + 109;
  *(_DWORD *)(a4 + 104) = 40;
  *(_DWORD *)(a4 + 152) = 0;
  if (*a3 <= 0)
  {
    v5 = result;
    v6 = *(unsigned int *)(result + 8);
    if ((int)v6 >= 1)
    {
      for (i = 0; i != v6; ++i)
      {
        v10 = *(icu::SingleUnitImpl **)(*(_QWORD *)(v5 + 16) + 8 * i);
        SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v10);
        icu::StringPiece::StringPiece((icu::StringPiece *)v17, SimpleUnitID);
        result = icu::units::ConversionRates::extractConversionInfo(a2, v17[0], v17[1], a3);
        if (*a3 > 0)
          break;
        if (!result)
        {
          *a3 = 5;
          return result;
        }
        v16 = 0;
        memset(v15, 0, sizeof(v15));
        icu::MeasureUnitImpl::forIdentifier(*(_QWORD *)(result + 72), *(unsigned int *)(result + 128), a3, (uint64_t)v18);
        LODWORD(v15[0]) = v19;
        *((_QWORD *)&v15[0] + 1) = v20;
        LODWORD(v15[1]) = v21;
        BYTE4(v15[1]) = v22;
        if (v20 == v23)
        {
          *((_QWORD *)&v15[0] + 1) = (char *)&v15[1] + 8;
          memcpy((char *)&v15[1] + 8, v23, 8 * v21);
        }
        else
        {
          v20 = v23;
          v21 = 8;
          v22 = 0;
        }
        v19 = 0;
        if (v25)
          uprv_free(v24);
        sub_18BC3ED98((uint64_t)&v19);
        if (SLODWORD(v15[0]) >= 1)
        {
          v12 = 0;
          v13 = 8 * LODWORD(v15[0]);
          do
          {
            v14 = *(const icu::SingleUnitImpl **)(*((_QWORD *)&v15[0] + 1) + v12);
            *((_DWORD *)v14 + 2) *= *((_DWORD *)v10 + 2);
            icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)a4, v14, (UErrorCode *)a3);
            if (*a3 >= 1)
              return sub_18BC3ED98((uint64_t)v15);
            v12 += 8;
          }
          while (v13 != v12);
        }
        result = sub_18BC3ED98((uint64_t)v15);
      }
    }
  }
  return result;
}

uint64_t icu::units::extractConvertibility(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  int v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  void *v20;
  void *v22[2];
  _OWORD v23[4];
  uint64_t v24;
  void *v25[2];
  _OWORD v26[4];
  uint64_t v27;
  _OWORD v28[6];
  void *v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[6];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*a1 == 2 || *a2 == 2)
  {
    *a4 = 65804;
    return 2;
  }
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  memset(v33, 0, sizeof(v33));
  icu::units::extractCompoundBaseUnit((uint64_t)a1, a3, a4, (uint64_t)v33);
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  memset(v28, 0, sizeof(v28));
  icu::units::extractCompoundBaseUnit((uint64_t)a2, a3, a4, (uint64_t)v28);
  if (*a4 <= 0)
  {
    v25[0] = 0;
    memset(v26, 0, sizeof(v26));
    v27 = 0;
    v25[1] = (char *)v26 + 8;
    LODWORD(v26[0]) = 8;
    v22[0] = 0;
    memset(v23, 0, sizeof(v23));
    v24 = 0;
    v22[1] = (char *)v23 + 8;
    LODWORD(v23[0]) = 8;
    v6 = 1;
    sub_18BDAE688((uint64_t *)v25, (unint64_t)v33, 1);
    sub_18BDAE688((uint64_t *)v22, (unint64_t)v33, 1);
    sub_18BDAE688((uint64_t *)v25, (unint64_t)v28, -1);
    sub_18BDAE688((uint64_t *)v22, (unint64_t)v28, 1);
    if (SLODWORD(v25[0]) >= 1)
    {
      if (*(_DWORD *)(*(_QWORD *)v25[1] + 4))
        goto LABEL_15;
      v9 = 1;
      do
      {
        v10 = v9;
        if (LODWORD(v25[0]) == v9)
          break;
      }
      while (!*(_DWORD *)(*((_QWORD *)v25[1] + v9++) + 4));
      if (v10 < LODWORD(v25[0]))
      {
LABEL_15:
        if (SLODWORD(v22[0]) < 1)
        {
          v6 = 0;
LABEL_29:
          if (BYTE4(v23[0]))
            uprv_free(v22[1]);
          v18 = (int)v25[0];
          if (SLODWORD(v25[0]) >= 1)
          {
            v19 = 0;
            do
            {
              v20 = (void *)*((_QWORD *)v25[1] + v19);
              if (v20)
              {
                icu::UMemory::operator delete(v20);
                v18 = (int)v25[0];
              }
              ++v19;
            }
            while (v19 < v18);
          }
          if (BYTE4(v26[0]))
            uprv_free(v25[1]);
          goto LABEL_38;
        }
        if (*(_DWORD *)(*(_QWORD *)v22[1] + 4))
        {
          v6 = 2;
        }
        else
        {
          v12 = 1;
          do
          {
            v13 = v12;
            if (LODWORD(v22[0]) == v12)
              break;
          }
          while (!*(_DWORD *)(*((_QWORD *)v22[1] + v12++) + 4));
          v6 = 2 * (v13 < LODWORD(v22[0]));
        }
      }
      else
      {
        v6 = 1;
      }
    }
    v15 = (int)v22[0];
    if (SLODWORD(v22[0]) >= 1)
    {
      v16 = 0;
      do
      {
        v17 = (void *)*((_QWORD *)v22[1] + v16);
        if (v17)
        {
          icu::UMemory::operator delete(v17);
          v15 = (int)v22[0];
        }
        ++v16;
      }
      while (v16 < v15);
    }
    goto LABEL_29;
  }
  v6 = 2;
LABEL_38:
  if (BYTE4(v29[1]))
    uprv_free(v29[0]);
  sub_18BC3ED98((uint64_t)v28 + 8);
  if (BYTE12(v34))
    uprv_free((void *)v34);
  sub_18BC3ED98((uint64_t)v33 + 8);
  return v6;
}

uint64_t *sub_18BDAE688(uint64_t *result, unint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t i;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;

  if (*(int *)(a2 + 8) >= 1)
  {
    v5 = result;
    for (i = 0; i < *(int *)(a2 + 8); ++i)
    {
      v7 = *(int **)(*(_QWORD *)(a2 + 16) + 8 * i);
      v8 = *v7;
      v9 = v7[2];
      v10 = *(_DWORD *)v5;
      if (*(int *)v5 >= 1)
      {
        v11 = v5[1];
        v12 = *(unsigned int *)v5;
        while (**(_DWORD **)v11 != v8)
        {
          v11 += 8;
          if (!--v12)
            goto LABEL_7;
        }
        *(_DWORD *)(*(_QWORD *)v11 + 4) += v9 * a3;
        continue;
      }
LABEL_7:
      v13 = *((unsigned int *)v5 + 4);
      if (v10 == (_DWORD)v13)
      {
        if (v10 == 8)
          v14 = 32;
        else
          v14 = 2 * v10;
        if (v14 < 1)
          continue;
        result = (uint64_t *)uprv_malloc(8 * v14);
        if (!result)
          continue;
        v15 = result;
        if (v10 >= 1)
        {
          v16 = *((_DWORD *)v5 + 4);
          if (v16 >= v10)
            v16 = v10;
          if (v16 >= v14)
            v16 = v14;
          memcpy(result, (const void *)v5[1], 8 * v16);
        }
        if (*((_BYTE *)v5 + 20))
          uprv_free((void *)v5[1]);
        v5[1] = (uint64_t)v15;
        *((_DWORD *)v5 + 4) = v14;
        v13 = 1;
        *((_BYTE *)v5 + 20) = 1;
      }
      result = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)8, a2);
      if (result)
      {
        *(_DWORD *)result = v8;
        *((_DWORD *)result + 1) = v9 * a3;
      }
      v17 = *(int *)v5;
      *(_DWORD *)v5 = v17 + 1;
      *(_QWORD *)(v5[1] + 8 * v17) = result;
    }
  }
  return result;
}

uint64_t icu::units::UnitsConverter::UnitsConverter(uint64_t a1, icu::MeasureUnitImpl *this, icu::MeasureUnitImpl *a3, int *a4, UErrorCode *a5)
{
  uint64_t v9;
  int v11;
  uint64_t v12;
  void *v13;
  char v14;
  int v15;
  uint64_t v16;
  void *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v9 = a1 + 8;
  icu::MeasureUnitImpl::copy(this, a5, (uint64_t)&v15);
  icu::MeasureUnitImpl::copy(a3, a5, (uint64_t)&v11);
  sub_18BDAF0B4(v9, &v15, &v11);
  if (v14)
    uprv_free(v13);
  sub_18BC3ED98((uint64_t)&v12);
  if (v18)
    uprv_free(v17);
  sub_18BC3ED98((uint64_t)&v16);
  icu::units::UnitsConverter::init(a1, a4, (int *)a5);
  return a1;
}

void icu::units::UnitsConverter::init(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4;
  _DWORD *v5;
  int Convertibility;

  if (*a3 <= 0)
  {
    v4 = a1 + 16;
    if (*(_DWORD *)(a1 + 16) == 2 || (v5 = (_DWORD *)(a1 + 176), *(_DWORD *)(a1 + 176) == 2))
    {
LABEL_4:
      *a3 = 65804;
      return;
    }
    Convertibility = icu::units::extractConvertibility((_DWORD *)(a1 + 16), v5, a2, a3);
    if (*a3 <= 0)
    {
      if (Convertibility != 2)
      {
        sub_18BDAEAD0(v4 - 8, v4, (uint64_t)v5, Convertibility, a2, a3);
        return;
      }
      goto LABEL_4;
    }
  }
}

uint64_t icu::units::UnitsConverter::UnitsConverter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v10;
  int v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  _QWORD v17[12];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 8;
  icu::MeasureUnitImpl::forIdentifier(a2, a3, a6, (uint64_t)&v16);
  icu::MeasureUnitImpl::forIdentifier(a4, a5, a6, (uint64_t)&v12);
  sub_18BDAF0B4(v10, &v16, &v12);
  if (v15)
    uprv_free(v14);
  sub_18BC3ED98((uint64_t)&v13);
  if (v18)
    uprv_free((void *)v17[11]);
  sub_18BC3ED98((uint64_t)v17);
  if (*a6 <= 0)
  {
    v16 = 0;
    memset(&v17[1], 0, 72);
    v17[0] = &v17[2];
    LODWORD(v17[1]) = 8;
    icu::units::getAllConversionRates((uint64_t)&v16, a6);
    icu::units::UnitsConverter::init(a1, (int *)&v16, a6);
    sub_18BD2D1E8((uint64_t)&v16);
  }
  return a1;
}

void sub_18BDAEAD0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5, int *a6)
{
  uint64_t v17;
  uint64_t v18;
  double v19;
  float64x2_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  float64x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  float64x2_t v32;
  uint64_t v33;
  _BYTE v34[20];
  __int128 v35;
  _BYTE v36[28];

  __asm { FMOV            V0.2D, #1.0 }
  v32 = _Q0;
  v33 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0u;
  memset(v36, 0, sizeof(v36));
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  sub_18BDAED7C(a2, a5, a6, (uint64_t)&v26);
  v25 = 0;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  sub_18BDAED7C(a3, a5, a6, (uint64_t)&v20);
  icu::units::Factor::multiplyBy(&v32, &v26);
  if (a4 == 1)
    icu::units::Factor::divideBy(v32.f64, v20.f64);
  else
    icu::units::Factor::multiplyBy(&v32, &v20);
  icu::units::Factor::substituteConstants((icu::units::Factor *)&v32);
  *(float64x2_t *)(a1 + 328) = v32;
  if (*a6 <= 0 && !*(_DWORD *)a2)
  {
    if (!*(_DWORD *)(a2 + 8) || (v17 = **(_QWORD **)(a2 + 16), *(_DWORD *)(v17 + 8) == 1) && *(_DWORD *)(v17 + 4) == 30)
    {
      if (!*(_DWORD *)a3)
      {
        if (!*(_DWORD *)(a3 + 8)
          || (v18 = **(_QWORD **)(a3 + 16), *(_DWORD *)(v18 + 8) == 1) && *(_DWORD *)(v18 + 4) == 30)
        {
          v19 = *(double *)&v21 * v20.f64[1] / v20.f64[0];
          *(double *)(a1 + 344) = *(double *)&v27 * v26.f64[1] / v26.f64[0];
          *(double *)(a1 + 352) = v19;
        }
      }
    }
  }
  *(_BYTE *)(a1 + 360) = a4 == 0;
}

uint64_t icu::units::UnitsConverter::compareTwoUnits(_DWORD *a1, _DWORD *a2, int *a3, int *a4)
{
  uint64_t result;
  char Convertibility;
  double v11;
  unsigned int v12;
  _OWORD v13[5];
  uint64_t v14;
  _OWORD v15[5];
  uint64_t v16;

  if (*a4 > 0)
    return 0;
  if (*a1 == 2 || *a2 == 2)
    goto LABEL_8;
  Convertibility = icu::units::extractConvertibility(a1, a2, a3, a4);
  if (*a4 > 0)
    return 0;
  if ((Convertibility & 1) == 0)
  {
LABEL_8:
    result = 0;
    *a4 = 65804;
  }
  else
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    sub_18BDAED7C((uint64_t)a1, a3, a4, (uint64_t)v15);
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    sub_18BDAED7C((uint64_t)a2, a3, a4, (uint64_t)v13);
    icu::units::Factor::substituteConstants((icu::units::Factor *)v15);
    icu::units::Factor::substituteConstants((icu::units::Factor *)v13);
    v11 = *(double *)v15 / *((double *)v15 + 1) - *(double *)v13 / *((double *)v13 + 1);
    if (v11 >= 0.0)
      v12 = 0;
    else
      v12 = -1;
    if (v11 > 0.0)
      return 1;
    else
      return v12;
  }
  return result;
}

void sub_18BDAED7C(uint64_t a1@<X0>, int *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  int v12;
  const char *SimpleUnitID;
  uint64_t ConversionInfo;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  float64x2_t v31;
  unsigned __int8 *v34[2];
  float64x2_t v35;
  double v36;
  _BYTE v37[20];
  __int128 v38;
  _BYTE v39[28];
  uint64_t v40;
  int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;

  __asm { FMOV            V0.2D, #1.0 }
  v31 = _Q0;
  *(float64x2_t *)a4 = _Q0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_OWORD *)(a4 + 44) = 0u;
  *(_OWORD *)(a4 + 60) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 28) = 0u;
  v29 = *(unsigned int *)(a1 + 8);
  if ((int)v29 >= 1)
  {
    v10 = 0;
    while (1)
    {
      v41 = 0;
      v40 = 0;
      v11 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8 * v10);
      v12 = *((_DWORD *)v11 + 2);
      v40 = *v11;
      v41 = v12;
      SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID((icu::SingleUnitImpl *)&v40);
      icu::StringPiece::StringPiece((icu::StringPiece *)v34, SimpleUnitID);
      ConversionInfo = icu::units::ConversionRates::extractConversionInfo(a2, v34[0], v34[1], a3);
      if (*a3 > 0)
        break;
      v15 = ConversionInfo;
      if (!ConversionInfo)
      {
        *a3 = 5;
        return;
      }
      v16 = *(unsigned __int8 **)(ConversionInfo + 136);
      v17 = *(unsigned int *)(ConversionInfo + 192);
      v42 = v16;
      v43 = v17;
      v35 = v31;
      v36 = 0.0;
      memset(v37, 0, sizeof(v37));
      v38 = 0u;
      memset(v39, 0, sizeof(v39));
      if ((int)v17 >= 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = 1;
        do
        {
          v21 = v16[v18];
          if (v21 == 47 || v21 == 42)
          {
            icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v19, v18 - v19);
            sub_18BDAF134((uint64_t)&v35, v44, v45, v20, a3);
            v19 = v18 + 1;
          }
          else if ((_DWORD)v17 - 1 == v18)
          {
            icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v19, v17);
            sub_18BDAF134((uint64_t)&v35, v44, v45, v20, a3);
          }
          if (v16[v18] == 47)
            v20 = -1;
          ++v18;
        }
        while (v17 != v18);
      }
      v22 = *(unsigned __int8 **)(v15 + 200);
      v23 = *(unsigned int *)(v15 + 256);
      v42 = v22;
      v43 = v23;
      if ((int)v23 < 1)
      {
LABEL_20:
        sub_18BDAE100(v22, v23, a3);
      }
      else
      {
        v24 = 0;
        while (v22[v24] != 47)
        {
          if (v23 == ++v24)
            goto LABEL_20;
        }
        icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, 0, v24);
        sub_18BDAE100(v44, v45, a3);
        v27 = v26;
        icu::StringPiece::StringPiece((uint64_t)&v44, (const icu::StringPiece *)&v42, v24 + 1, 0x7FFFFFFF);
        sub_18BDAE100(v44, v45, a3);
        v25 = v27 / v28;
      }
      v36 = v25;
      if (*a3 <= 0)
      {
        icu::units::Factor::applyPrefix((uint64_t)&v35, SHIDWORD(v40), v25);
        icu::units::Factor::power((icu::units::Factor *)&v35, v41);
        icu::units::Factor::multiplyBy((float64x2_t *)a4, &v35);
        if (++v10 != v29)
          continue;
      }
      return;
    }
  }
}

double icu::units::UnitsConverter::convert(icu::units::UnitsConverter *this, double a2)
{
  double result;

  result = (*((double *)this + 44) + a2) * (*((double *)this + 42) / *((double *)this + 43)) - *((double *)this + 45);
  if (*((_BYTE *)this + 368))
  {
    if (result == 0.0)
      return uprv_getInfinity();
    else
      return 1.0 / result;
  }
  return result;
}

double icu::units::UnitsConverter::convertInverse(icu::units::UnitsConverter *this, double a2)
{
  if (*((_BYTE *)this + 368))
  {
    if (a2 == 0.0)
      return uprv_getInfinity();
    a2 = 1.0 / a2;
  }
  return (a2 + *((double *)this + 45)) * (*((double *)this + 43) / *((double *)this + 42)) - *((double *)this + 44);
}

double icu::units::UnitsConverter::getConversionInfo@<D0>(icu::units::UnitsConverter *this@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v3;

  *(_QWORD *)(a2 + 16) = 0;
  result = *((double *)this + 42) / *((double *)this + 43);
  v3 = -(*((double *)this + 45) - *((double *)this + 44) * result);
  *(double *)a2 = result;
  *(double *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)this + 368);
  return result;
}

uint64_t sub_18BDAF0B4(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 8) = *a2;
  sub_18BCF9CDC(a1 + 16, (uint64_t)(a2 + 2));
  icu::CharString::CharString(a1 + 104, a2 + 24);
  *(_DWORD *)(a1 + 168) = *a3;
  sub_18BCF9CDC(a1 + 176, (uint64_t)(a3 + 2));
  icu::CharString::CharString(a1 + 264, a3 + 24);
  *(_QWORD *)(a1 + 328) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 336) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  return a1;
}

void sub_18BDAF134(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4, _DWORD *a5)
{
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v10;
  int v11;
  double v12;
  _QWORD v13[2];
  unsigned __int8 *v14;
  unsigned int v15;

  v7 = a3;
  v8 = a2;
  v13[0] = a2;
  v13[1] = a3;
  if ((int)a3 < 1)
  {
LABEL_5:
    v11 = 1;
  }
  else
  {
    v10 = 0;
    while (a2[v10] != 94)
    {
      if (a3 == ++v10)
        goto LABEL_5;
    }
    icu::StringPiece::StringPiece((uint64_t)&v14, (const icu::StringPiece *)v13, 0, v10);
    v8 = v14;
    v7 = v15;
    icu::StringPiece::StringPiece((uint64_t)&v14, (const icu::StringPiece *)v13, v10 + 1, 0x7FFFFFFF);
    sub_18BDAE100(v14, v15, a5);
    v11 = (int)v12;
  }
  icu::units::addSingleFactorConstant(v8, v7, v11, a4, a1, a5);
}

uint64_t icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata(uint64_t a1, const char *a2, int a3, const char *a4, int a5, const char *a6, int a7, int a8, int a9, UErrorCode *a10)
{
  *(_QWORD *)(a1 + 8) = a1 + 21;
  *(_DWORD *)(a1 + 16) = 40;
  *(_WORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 85;
  *(_DWORD *)(a1 + 80) = 40;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 149;
  *(_DWORD *)(a1 + 144) = 40;
  *(_WORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  icu::CharString::append((icu::CharString *)(a1 + 8), a2, a3, a10);
  icu::CharString::append((icu::CharString *)(a1 + 72), a4, a5, a10);
  icu::CharString::append((icu::CharString *)(a1 + 136), a6, a7, a10);
  *(_DWORD *)(a1 + 200) = a8;
  *(_DWORD *)(a1 + 204) = a9;
  return a1;
}

{
  return icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t icu::units::UnitPreferenceMetadata::compareTo(const char **a1, const char **a2)
{
  uint64_t result;

  result = strcmp(a1[1], a2[1]);
  if (!(_DWORD)result)
  {
    result = strcmp(a1[9], a2[9]);
    if (!(_DWORD)result)
      return strcmp(a1[17], a2[17]);
  }
  return result;
}

uint64_t icu::units::UnitPreferenceMetadata::compareTo(const char **a1, const char **a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  uint64_t result;

  result = strcmp(a1[1], a2[1]);
  if (!(_DWORD)result)
  {
    *a3 = 1;
    result = strcmp(a1[9], a2[9]);
    if (!(_DWORD)result)
    {
      *a4 = 1;
      result = strcmp(a1[17], a2[17]);
      if (!(_DWORD)result)
        *a5 = 1;
    }
  }
  return result;
}

void icu::units::getAllConversionRates(uint64_t a1, int *a2)
{
  _QWORD *v4;
  _QWORD v5[2];

  v4 = (_QWORD *)ures_openDirect(0, (uint64_t)"units", (uint64_t)a2);
  v5[0] = &off_1E22682F0;
  v5[1] = a1;
  ures_getAllItemsWithFallback((uint64_t)v4, "convertUnits", (uint64_t)v5, a2);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v5);
  if (v4)
    ures_close(v4);
}

uint64_t icu::units::ConversionRates::extractConversionInfo(int *a1, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t result;
  unsigned __int8 *v12[2];
  unsigned __int8 *v13[2];

  v13[0] = a2;
  v13[1] = a3;
  v5 = *a1;
  if ((_DWORD)v5)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v7);
      v9 = *(unsigned __int8 **)(v8 + 8);
      v10 = (unsigned __int8 *)*(unsigned int *)(v8 + 64);
      v12[0] = v9;
      v12[1] = v10;
      if (icu::operator==(v12, v13))
        return *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v7);
      if (v5 == ++v7)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    result = 0;
    *a4 = 5;
  }
  return result;
}

icu::units::UnitPreferences *icu::units::UnitPreferences::UnitPreferences(icu::units::UnitPreferences *this, UErrorCode *a2)
{
  char *v4;
  _QWORD *v5;
  _QWORD v7[3];

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_DWORD *)this + 4) = 8;
  *((_BYTE *)this + 20) = 0;
  *((_DWORD *)this + 22) = 0;
  v4 = (char *)this + 88;
  *((_QWORD *)this + 12) = (char *)this + 112;
  *((_DWORD *)this + 26) = 8;
  *((_BYTE *)this + 108) = 0;
  v5 = (_QWORD *)ures_openDirect(0, (uint64_t)"units", (uint64_t)a2);
  v7[0] = &off_1E2268338;
  v7[1] = v4;
  v7[2] = this;
  ures_getAllItemsWithFallback((uint64_t)v5, "unitPreferenceData", (uint64_t)v7, (int *)a2);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v7);
  if (v5)
    ures_close(v5);
  return this;
}

void sub_18BDAF594(uint64_t a1@<X0>, const char *a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD v10[2];

  *(_OWORD *)(a5 + 8) = 0u;
  *(_QWORD *)(a5 + 56) = 0;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_QWORD *)a5 = a5 + 13;
  *(_DWORD *)(a5 + 8) = 40;
  *(_DWORD *)(a5 + 56) = 0;
  if (*(int *)a4 <= 0)
  {
    v10[0] = 0;
    v10[1] = 0;
    icu::CharStringByteSink::CharStringByteSink(v10, a5);
    icu::Locale::getKeywordValue(a1, a2, a3, (uint64_t)v10, a4);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v10);
    if (*(int *)a4 <= 0 && !*(_DWORD *)(a5 + 56))
      *a4 = U_MISSING_RESOURCE_ERROR;
  }
}

void icu::units::UnitPreferences::getPreferencesFor(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, UErrorCode *a7@<X6>, uint64_t a8@<X8>)
{
  const void **v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  const char *SimpleUnitID;
  uint64_t ConversionInfo;
  BOOL v27;
  const char *v29;
  _BYTE *v30;
  icu::StringPiece *v31;
  int v32;
  uint64_t v33;
  UErrorCode v34;
  uint64_t *v35;
  const void **v37;
  _BYTE v38[16];
  _BYTE v39[16];
  void *v40;
  uint64_t v41;
  _BYTE v42[16];
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  unsigned __int8 *v49[2];
  uint64_t v50[2];
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  int v63;
  char *v64;
  int v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  int v71[2];
  char *v72;
  int v73;
  void *__s2;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  void *v85[7];
  int v86;
  int v87;
  void *v88[2];
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  void *v94[2];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  void *__s1[2];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _OWORD v104[3];
  __int128 v105;
  _OWORD v106[3];
  __int128 v107;
  char __s[8];
  uint64_t v109;

  v11 = (const void **)a8;
  v109 = *MEMORY[0x1E0C80C00];
  v83 = (const char *)a2;
  v84 = a3;
  v81 = (const char *)a4;
  v82 = a5;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_QWORD *)(a8 + 80) = 0;
  *(_QWORD *)(a8 + 8) = a8 + 24;
  *(_DWORD *)(a8 + 16) = 8;
  v80 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v78, "temperature");
  if (icu::StringPiece::compare((uint64_t)&v83, v78, v79, v12))
    goto LABEL_28;
  v100 = 0u;
  v101 = 0u;
  *(_OWORD *)__s1 = 0u;
  v99 = 0u;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v76, "mu");
  sub_18BDAF594(a6, v76, v77, (UErrorCode *)&v80, (uint64_t)__s1);
  if (v80 > 0)
    goto LABEL_3;
  icu::StringPiece::StringPiece((icu::StringPiece *)&__s2, "fahrenhe");
  if (DWORD2(v101) == (_DWORD)v75 && (!(_DWORD)v75 || !memcmp(__s1[0], __s2, (int)v75)))
  {
    icu::StringPiece::StringPiece((icu::StringPiece *)&v72, "fahrenheit");
    v88[0] = (char *)&v88[1] + 5;
    LODWORD(v88[1]) = 40;
    WORD2(v88[1]) = 0;
    DWORD2(v91) = 0;
    icu::CharString::append((icu::CharString *)v88, v72, v73, a7);
    icu::CharString::operator=((uint64_t)__s1, (uint64_t)v88);
    if (BYTE4(v88[1]))
      uprv_free(v88[0]);
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&v70, "celsius");
  v15 = v71[0];
  if (DWORD2(v101) == v71[0])
  {
    v16 = (const char *)__s1[0];
    if (!v71[0] || !memcmp(__s1[0], v70, v71[0]))
      goto LABEL_18;
  }
  if ((icu::StringPiece::StringPiece((icu::StringPiece *)&v68, "fahrenheit"), v15 = v69, DWORD2(v101) == (_DWORD)v69)
    && ((v16 = (const char *)__s1[0], !(_DWORD)v69) || !memcmp(__s1[0], v68, (int)v69))
    || (icu::StringPiece::StringPiece((icu::StringPiece *)&v66, "kelvin"), v15 = v67, DWORD2(v101) == (_DWORD)v67)
    && ((v16 = (const char *)__s1[0], !(_DWORD)v67) || !memcmp(__s1[0], v66, (int)v67)))
  {
LABEL_18:
    v88[0] = 0;
    v89 = 0u;
    *((_QWORD *)&v93 + 1) = 2;
    v95 = 0u;
    v96 = 0u;
    *(_OWORD *)v94 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88[1] = (char *)&v89 + 5;
    LODWORD(v89) = 40;
    *(_QWORD *)&v92 = 0;
    *((_QWORD *)&v92 + 1) = 0x3FF0000000000000;
    *(_QWORD *)&v93 = off_1E2256B38;
    icu::CharString::append((icu::CharString *)&v88[1], v16, v15, a7);
    v17 = *(unsigned int *)a7;
    if ((int)v17 <= 0)
    {
      v18 = sub_18BDB1024(v11, (unint64_t)v88);
      v17 = *(unsigned int *)a7;
      if ((int)v17 <= 0 && !v18)
      {
        v17 = 7;
        *a7 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)&v93);
    if (BYTE4(v89))
      uprv_free(v88[1]);
    v14 = 0;
    v13 = 1;
  }
  else
  {
LABEL_3:
    v13 = 0;
    v14 = 1;
  }
  if (BYTE4(__s1[1]))
    uprv_free(__s1[0]);
  if (v14)
  {
LABEL_28:
    *(_QWORD *)__s = 0;
    ulocimp_getRegionForSupplementalData(*(char **)(a6 + 40), 0, __s, 8, (int *)a7);
    v107 = 0u;
    memset(v106, 0, sizeof(v106));
    icu::StringPiece::StringPiece((icu::StringPiece *)&v64, __s);
    *(_QWORD *)&v106[0] = (unint64_t)v106 | 0xD;
    DWORD2(v106[0]) = 40;
    WORD6(v106[0]) = 0;
    DWORD2(v107) = 0;
    icu::CharString::append((icu::CharString *)v106, v64, v65, a7);
    v63 = 0;
    v105 = 0u;
    memset(v104, 0, sizeof(v104));
    icu::StringPiece::StringPiece((icu::StringPiece *)&v61, "measure");
    sub_18BDAF594(a6, v61, v62, (UErrorCode *)&v63, (uint64_t)v104);
    if (v63 >= 1)
    {
      v63 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v59, "ms");
      sub_18BDAF594(a6, v59, v60, (UErrorCode *)&v63, (uint64_t)v88);
      icu::CharString::operator=((uint64_t)v104, (uint64_t)v88);
      if (BYTE4(v88[1]))
        uprv_free(v88[0]);
      if (v63 > 0)
        goto LABEL_41;
    }
    if ((icu::StringPiece::StringPiece((icu::StringPiece *)&v57, "metric"), DWORD2(v105) == (_DWORD)v58)
      && (!(_DWORD)v58 || !memcmp(*(const void **)&v104[0], v57, (int)v58))
      || (icu::StringPiece::StringPiece((icu::StringPiece *)&v55, "ussystem"), DWORD2(v105) == (_DWORD)v56)
      && (!(_DWORD)v56 || !memcmp(*(const void **)&v104[0], v55, (int)v56))
      || (icu::StringPiece::StringPiece((icu::StringPiece *)&v53, "uksystem"), DWORD2(v105) == (_DWORD)v54)
      && (!(_DWORD)v54 || !memcmp(*(const void **)&v104[0], v53, (int)v54)))
    {
      v19 = 1;
    }
    else
    {
LABEL_41:
      v19 = 0;
    }
    v20 = sub_18BDAFF20(a1, v83, v84, v81, v82, *(const char **)&v106[0], SDWORD2(v107), a7);
    if (*(int *)a7 > 0)
      goto LABEL_93;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v20);
    if (v19)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v51, "uksystem");
      if (DWORD2(v105) == (_DWORD)v52
        && (!(_DWORD)v52 || !memcmp(*(const void **)&v104[0], v51, (int)v52))
        && (icu::StringPiece::StringPiece((icu::StringPiece *)v88, "mass"),
            icu::operator==((unsigned __int8 **)&v83, (unsigned __int8 **)v88))
        && (icu::StringPiece::StringPiece((icu::StringPiece *)__s1, "person"),
            icu::operator==((unsigned __int8 **)&v81, (unsigned __int8 **)__s1)))
      {
LABEL_69:
        DWORD2(v107) = 0;
        **(_BYTE **)&v106[0] = 0;
        icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "ussystem");
        if (DWORD2(v105) == (_DWORD)v44 && (!(_DWORD)v44 || !memcmp(*(const void **)&v104[0], v43, (int)v44)))
        {
          v29 = "US";
          v30 = v42;
          v31 = (icu::StringPiece *)v42;
        }
        else
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)&v40, "uksystem");
          if (DWORD2(v105) == (_DWORD)v41 && (!(_DWORD)v41 || !memcmp(*(const void **)&v104[0], v40, (int)v41)))
          {
            v29 = "GB";
            v30 = v39;
            v31 = (icu::StringPiece *)v39;
          }
          else
          {
            v29 = "001";
            v30 = v38;
            v31 = (icu::StringPiece *)v38;
          }
        }
        icu::StringPiece::StringPiece(v31, v29);
        icu::CharString::append((icu::CharString *)v106, *(const char **)v30, *((_DWORD *)v30 + 2), a7);
        v32 = sub_18BDAFF20(a1, v83, v84, v81, v82, *(const char **)&v106[0], SDWORD2(v107), a7);
        if (*(int *)a7 > 0)
        {
LABEL_93:
          if (BYTE12(v104[0]))
            uprv_free(*(void **)&v104[0]);
          if (BYTE12(v106[0]))
            uprv_free(*(void **)&v106[0]);
          return;
        }
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v32);
      }
      else
      {
        v37 = v11;
        __s1[0] = 0;
        v99 = 0u;
        v103 = 0;
        v101 = 0u;
        v102 = 0u;
        v100 = 0u;
        __s1[1] = (char *)&v99 + 8;
        LODWORD(v99) = 8;
        icu::units::getAllConversionRates((uint64_t)__s1, (int *)a7);
        v22 = 0;
        while (v22 < *(_DWORD *)(v21 + 204))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * (*(_DWORD *)(v21 + 200) + v22));
          v96 = 0u;
          v97 = 0u;
          *(_OWORD *)v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          *(_OWORD *)v88 = 0u;
          v89 = 0u;
          icu::StringPiece::StringPiece((icu::StringPiece *)v50, *(const char **)(v23 + 8));
          icu::MeasureUnitImpl::forIdentifier(v50[0], v50[1], (int *)a7, (uint64_t)v88);
          if (SLODWORD(v88[1]) < 1)
          {
            v27 = 1;
          }
          else
          {
            v24 = 0;
            do
            {
              SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(*(icu::SingleUnitImpl **)(v89 + 8 * v24));
              icu::StringPiece::StringPiece((icu::StringPiece *)v49, SimpleUnitID);
              ConversionInfo = icu::units::ConversionRates::extractConversionInfo((int *)__s1, v49[0], v49[1], a7);
              v87 = 0;
              memset(&v85[1], 0, 48);
              v85[0] = (char *)&v85[1] + 5;
              LODWORD(v85[1]) = 40;
              v86 = 0;
              icu::CharString::append((icu::CharString *)v85, *(const char **)(ConversionInfo + 264), *(_DWORD *)(ConversionInfo + 320), a7);
              icu::StringPiece::StringPiece((icu::StringPiece *)&v47, "metric_adjacent");
              if (icu::CharString::contains((char **)v85, v47, v48))
              {
                v27 = 1;
              }
              else
              {
                icu::StringPiece::StringPiece((icu::StringPiece *)&v45, *(const char **)&v104[0]);
                v27 = icu::CharString::contains((char **)v85, v45, v46);
              }
              if (BYTE4(v85[1]))
                uprv_free(v85[0]);
            }
            while (++v24 < SLODWORD(v88[1]) && v27);
          }
          if (BYTE4(v94[1]))
            uprv_free(v94[0]);
          sub_18BC3ED98((uint64_t)&v88[1]);
          ++v22;
          if (!v27)
          {
            sub_18BD2D1E8((uint64_t)__s1);
            v11 = v37;
            goto LABEL_69;
          }
        }
        sub_18BD2D1E8((uint64_t)__s1);
        v11 = v37;
      }
    }
    if (*(int *)(v21 + 204) >= 1)
    {
      v33 = 0;
      v34 = *a7;
      do
      {
        if (v34 <= U_ZERO_ERROR)
        {
          v35 = sub_18BDB1024(v11, *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8 * (v33 + *(int *)(v21 + 200))));
          v34 = *a7;
          if (*(int *)a7 <= 0 && v35 == 0)
          {
            v34 = U_MEMORY_ALLOCATION_ERROR;
            *a7 = U_MEMORY_ALLOCATION_ERROR;
          }
        }
        ++v33;
      }
      while ((int)v33 < *(_DWORD *)(v21 + 204));
    }
    goto LABEL_93;
  }
  if ((v13 & 1) == 0)
    sub_18BD9EB44((unsigned int *)v11);
}

uint64_t sub_18BDAFF20(uint64_t a1, const char *a2, int a3, const char *a4, int a5, const char *a6, int a7, UErrorCode *a8)
{
  uint64_t v8;
  uint64_t v11;
  icu::CharString *v12;
  int v13;
  int IndexOf;
  icu::CharString *v16;
  char *v17;
  int v18;
  char *v19;
  int v20;
  char v21;
  __int16 v22;
  void *v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = 0xFFFFFFFFLL;
  if (*(int *)a8 > 0)
    return v8;
  v22 = 0;
  v21 = 0;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  *(_OWORD *)v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata((uint64_t)v23, a2, a3, a4, a5, a6, a7, -1, -1, a8);
  v11 = sub_18BDB0F68(a1, (const char **)v23, (_BYTE *)&v22 + 1, &v22, &v21, (int *)a8);
  if (*(int *)a8 <= 0)
  {
    if ((v11 & 0x80000000) == 0)
    {
LABEL_4:
      v8 = v11;
      goto LABEL_14;
    }
    if (HIBYTE(v22))
    {
      while (!(_BYTE)v22)
      {
        IndexOf = icu::CharString::lastIndexOf((icu::CharString *)&v27[1], 0x2Du);
        if (IndexOf < 1)
        {
          if (!strcmp(v27[1], "default"))
            goto LABEL_10;
          v16 = (icu::CharString *)icu::CharString::truncate((uint64_t)&v27[1], 0);
          icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "default");
          icu::CharString::append(v16, v19, v20, a8);
        }
        else
        {
          icu::CharString::truncate((uint64_t)&v27[1], IndexOf);
        }
        v11 = sub_18BDB0F68(a1, (const char **)v23, (_BYTE *)&v22 + 1, &v22, &v21, (int *)a8);
        if (*(int *)a8 >= 1)
          goto LABEL_13;
      }
      v8 = v11;
      if (v21)
        goto LABEL_14;
      if (strcmp(*((const char **)&v31 + 1), "001"))
      {
        v12 = (icu::CharString *)icu::CharString::truncate((uint64_t)&v31 + 8, 0);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "001");
        icu::CharString::append(v12, v17, v18, a8);
        v11 = sub_18BDB0F68(a1, (const char **)v23, (_BYTE *)&v22 + 1, &v22, &v21, (int *)a8);
        if (v21)
          goto LABEL_4;
      }
LABEL_10:
      v13 = 2;
    }
    else
    {
      v13 = 1;
    }
    *a8 = v13;
LABEL_13:
    v8 = 0xFFFFFFFFLL;
  }
LABEL_14:
  if (BYTE4(v32))
    uprv_free(*((void **)&v31 + 1));
  if (BYTE4(v28))
    uprv_free(v27[1]);
  if (BYTE4(v24))
    uprv_free(v23[1]);
  return v8;
}

void sub_18BDB0184(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BDB0198(uint64_t result, char *__s1, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  char *v11;
  void (***v12)(icu::UnicodeString *__hidden);
  void *v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  icu::CharString *v19;
  int v20;
  uint64_t i;
  int v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  char *v30;
  int v31;
  char *__s1a;
  _OWORD v33[2];
  uint64_t v34;
  char *__s;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  int v39;
  void (**v40)(icu::UnicodeString *__hidden);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void (**v45)(icu::UnicodeString *__hidden);
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void (**v50)(icu::UnicodeString *__hidden);
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void (**v55)(icu::UnicodeString *__hidden);
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  void *v60[10];

  v60[8] = *(void **)MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v7 = result;
    result = strcmp(__s1, "convertUnits");
    if ((_DWORD)result)
    {
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
      return result;
    }
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v36, a3, a5);
    __s = 0;
    result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, 0, (const char **)&__s, a3);
    if ((_DWORD)result)
    {
      v8 = 0;
      while (1)
      {
        v34 = 0;
        memset(v33, 0, sizeof(v33));
        (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v33, a3, a5);
        __s1a = 0;
        v59 = 0;
        v57 = 0u;
        v58 = 0u;
        v56 = 0u;
        v55 = off_1E2256B38;
        LOWORD(v56) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v55);
        v54 = 0;
        v52 = 0u;
        v53 = 0u;
        v51 = 0u;
        v50 = off_1E2256B38;
        LOWORD(v51) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v50);
        v49 = 0;
        v47 = 0u;
        v48 = 0u;
        v46 = 0u;
        v45 = off_1E2256B38;
        LOWORD(v46) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v45);
        v44 = 0;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        v40 = off_1E2256B38;
        LOWORD(v41) = 2;
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&v40);
        if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, 0, (const char **)&__s1a, a3))
          break;
LABEL_18:
        v15 = *(unsigned int *)a5;
        if ((int)v15 >= 1)
          goto LABEL_36;
        if ((v56 & 1) != 0 || (v51 & 1) != 0)
        {
          v15 = 2;
LABEL_35:
          *a5 = v15;
LABEL_36:
          icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v40);
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v45);
          icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v50);
          return (uint64_t)icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v55);
        }
        v16 = sub_18BDB06E4(*(const void ***)(v7 + 8), v9);
        if (!v16)
        {
          v15 = 7;
          goto LABEL_35;
        }
        v17 = v16;
        v18 = v7;
        v19 = (icu::CharString *)(v16 + 1);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v30, __s);
        icu::CharString::append(v19, v30, v31, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 9), (const icu::UnicodeString *)&v55, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 17), (const icu::UnicodeString *)&v50, a5);
        icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 33), (const icu::UnicodeString *)&v40, a5);
        memset(&v60[1], 0, 56);
        v60[0] = (char *)&v60[1] + 5;
        LODWORD(v60[1]) = 40;
        v20 = *((_DWORD *)v17 + 48);
        if (v20 >= 1)
        {
          for (i = 0; i < v20; ++i)
          {
            v22 = *(unsigned __int8 *)(v17[17] + i);
            if (v22 != 32)
            {
              icu::CharString::append((icu::CharString *)v60, v22, a5);
              v20 = *((_DWORD *)v17 + 48);
            }
          }
        }
        icu::CharString::operator=((uint64_t)(v17 + 17), (uint64_t)v60);
        if (BYTE4(v60[1]))
          uprv_free(v60[0]);
        v23 = (unsigned __int16)v46;
        if ((v46 & 1) == 0)
          icu::CharString::appendInvariantChars((icu::CharString *)(v17 + 25), (const icu::UnicodeString *)&v45, a5);
        icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v40);
        icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v45);
        icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v50);
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v55);
        result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, ++v8, (const char **)&__s, a3);
        v7 = v18;
        if (!(_DWORD)result)
          return result;
      }
      v10 = 1;
      while (1)
      {
        v11 = __s1a;
        if (!strcmp(__s1a, "target"))
          break;
        if (!strcmp(v11, "factor"))
        {
          v39 = 0;
          v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v39, a5);
          icu::UnicodeString::UnicodeString(v60, 1, &v38);
          v12 = &v50;
          goto LABEL_16;
        }
        if (!strcmp(v11, "offset"))
        {
          v39 = 0;
          v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v39, a5);
          icu::UnicodeString::UnicodeString(v60, 1, &v38);
          v12 = &v45;
          goto LABEL_16;
        }
        if (!strcmp(v11, "systems"))
        {
          v39 = 0;
          v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v39, a5);
          icu::UnicodeString::UnicodeString(v60, 1, &v38);
          v12 = &v40;
LABEL_16:
          icu::UnicodeString::operator=((icu::UnicodeString *)v12, (icu::UnicodeString *)v60);
          icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v60);
        }
        if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, v10++, (const char **)&__s1a, a3))goto LABEL_18;
      }
      v39 = 0;
      v38 = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v39, a5);
      icu::UnicodeString::UnicodeString(v60, 1, &v38);
      v12 = &v55;
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *sub_18BDB06E4(const void **a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t *result;
  uint64_t *v7;
  int v8;
  uint64_t v9;

  v3 = *((_DWORD *)a1 + 4);
  v4 = *(unsigned int *)a1;
  if ((_DWORD)v4 == v3)
  {
    if (v3 == 8)
      v5 = 32;
    else
      v5 = 2 * v3;
    if (v5 < 1)
      return 0;
    result = (uint64_t *)uprv_malloc(8 * v5);
    if (!result)
      return result;
    v7 = result;
    if (v3 >= 1)
    {
      v8 = *((_DWORD *)a1 + 4);
      if (v8 >= v3)
        v8 = v3;
      if (v8 >= v5)
        v8 = v5;
      memcpy(result, a1[1], 8 * v8);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free((void *)a1[1]);
    a1[1] = v7;
    *((_DWORD *)a1 + 4) = v5;
    v4 = 1;
    *((_BYTE *)a1 + 20) = 1;
  }
  result = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x148, a2);
  if (result)
    result = (uint64_t *)sub_18BDB07B8((uint64_t)result);
  v9 = *(int *)a1;
  *(_DWORD *)a1 = v9 + 1;
  *((_QWORD *)a1[1] + v9) = result;
  return result;
}

uint64_t sub_18BDB07B8(uint64_t result)
{
  *(_QWORD *)(result + 8) = result + 21;
  *(_DWORD *)(result + 16) = 40;
  *(_WORD *)(result + 20) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = result + 85;
  *(_DWORD *)(result + 80) = 40;
  *(_WORD *)(result + 84) = 0;
  *(_DWORD *)(result + 128) = 0;
  *(_QWORD *)(result + 136) = result + 149;
  *(_DWORD *)(result + 144) = 40;
  *(_WORD *)(result + 148) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 200) = result + 213;
  *(_DWORD *)(result + 208) = 40;
  *(_WORD *)(result + 212) = 0;
  *(_DWORD *)(result + 256) = 0;
  *(_QWORD *)(result + 264) = result + 277;
  *(_DWORD *)(result + 272) = 40;
  *(_BYTE *)(result + 276) = 0;
  *(_DWORD *)(result + 320) = 0;
  *(_BYTE *)(result + 277) = 0;
  return result;
}

void sub_18BDB082C(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BDB0840(uint64_t result, char *__s1, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v7;
  int v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  char *v16;
  void *v17;
  UChar *v18;
  UChar *v19;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  int v29;
  _QWORD v30[2];
  uint64_t v31;
  char *v32;
  _OWORD v33[2];
  uint64_t v34;
  char *v35;
  char *v36[5];
  char *v37;
  char *v38[6];
  char *v39;
  int32_t v40;
  void *v41[9];
  void *v42[11];

  v42[8] = *(void **)MEMORY[0x1E0C80C00];
  v39 = __s1;
  if (*(int *)a5 <= 0)
  {
    v7 = result;
    result = strcmp(__s1, "unitPreferenceData");
    if ((_DWORD)result)
    {
      v8 = 1;
LABEL_4:
      *a5 = v8;
    }
    else
    {
      memset(v38, 0, 40);
      (*(void (**)(char **__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v38, a3, a5);
      v37 = 0;
      result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v38, 0, (const char **)&v37, a3);
      if ((_DWORD)result)
      {
        v21 = 0;
        v24 = v7;
        while (1)
        {
          memset(v36, 0, sizeof(v36));
          (*(void (**)(char **__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v36, a3, a5);
          v35 = 0;
          if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, 0, (const char **)&v35, a3))
            break;
LABEL_34:
          result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v38, ++v21, (const char **)&v37, a3);
          if (!(_DWORD)result)
            return result;
        }
        v22 = 0;
        while (1)
        {
          v34 = 0;
          memset(v33, 0, sizeof(v33));
          (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v33, a3, a5);
          v32 = 0;
          if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, 0, (const char **)&v32, a3))
            break;
LABEL_33:
          if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v36, ++v22, (const char **)&v35, a3))goto LABEL_34;
        }
        v9 = 0;
        while (1)
        {
          v30[0] = 0;
          v30[1] = 0;
          v31 = 0;
          result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 80))(v30, a3, a5);
          if (*(int *)a5 >= 1)
            break;
          v29 = v31;
          v10 = *(unsigned int **)(v7 + 16);
          LODWORD(v41[0]) = **(_DWORD **)(v7 + 8);
          result = (uint64_t)sub_18BDB0D0C(v10, (const char **)&v37, (const char **)&v35, (const char **)&v32, (int *)v41, &v29, a5);
          if (!result)
            goto LABEL_36;
          if (*(int *)a5 > 0)
            return result;
          v11 = *(_QWORD *)(v7 + 16);
          if (*(int *)v11 >= 2)
          {
            result = icu::units::UnitPreferenceMetadata::compareTo(*(const char ***)(*(_QWORD *)(v11 + 8) + 8 * (*(_DWORD *)v11 - 2)), *(const char ***)(*(_QWORD *)(v11 + 8) + 8 * (*(_DWORD *)v11 - 1)));
            if ((result & 0x80000000) == 0)
            {
              v8 = 3;
              goto LABEL_4;
            }
          }
          v23 = v9;
          if (icu::ResourceArray::getValue((icu::ResourceArray *)v30, 0, a3))
          {
            v13 = 0;
            while (1)
            {
              result = (uint64_t)sub_18BDB0E64(*(const void ***)(v7 + 8), v12);
              if (!result)
                break;
              v14 = result;
              v28 = 0;
              memset(v27, 0, sizeof(v27));
              result = (uint64_t)(*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v27, a3, a5);
              if (*(int *)a5 > 0)
                return result;
              if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v27, 0, (const char **)&v39, a3))
              {
                v15 = 1;
                do
                {
                  v16 = v39;
                  if (!strcmp(v39, "unit"))
                  {
                    LODWORD(v41[0]) = 0;
                    v18 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, void **, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, v41, a5);
                    icu::CharString::appendInvariantChars((int *)(v14 + 8), v18, (int32_t)v41[0], a5);
                  }
                  else if (!strcmp(v16, "geq"))
                  {
                    v40 = 0;
                    v19 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, int32_t *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v40, a5);
                    memset(&v42[1], 0, 56);
                    v42[0] = (char *)&v42[1] + 5;
                    LODWORD(v42[1]) = 40;
                    icu::CharString::appendInvariantChars((int *)v42, v19, v40, a5);
                    memset(v41, 0, sizeof(v41));
                    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v41);
                    icu::StringPiece::StringPiece((icu::StringPiece *)&v25, (const char *)v42[0]);
                    icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v41, v25, v26, a5);
                    *(double *)(v14 + 72) = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v41);
                    icu::number::impl::DecimalQuantity::~DecimalQuantity(v41);
                    if (BYTE4(v42[1]))
                      uprv_free(v42[0]);
                  }
                  else if (!strcmp(v16, "skeleton"))
                  {
                    v40 = 0;
                    v42[0] = (void *)(*(uint64_t (**)(icu::ResourceValue *, int32_t *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v40, a5);
                    icu::UnicodeString::UnicodeString(v41, 1, v42);
                    icu::UnicodeString::operator=((icu::UnicodeString *)(v14 + 80), (icu::UnicodeString *)v41);
                    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v41);
                  }
                }
                while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v27, v15++, (const char **)&v39, a3));
              }
              ++v13;
              v7 = v24;
              if (!icu::ResourceArray::getValue((icu::ResourceArray *)v30, v13, a3))
                goto LABEL_32;
            }
LABEL_36:
            v8 = 7;
            goto LABEL_4;
          }
LABEL_32:
          v9 = v23 + 1;
          if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v33, v23 + 1, (const char **)&v32, a3))goto LABEL_33;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_18BDB0D0C(unsigned int *a1, const char **a2, const char **a3, const char **a4, int *a5, int *a6, UErrorCode *a7)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;

  v14 = a1[4];
  v15 = *a1;
  if ((_DWORD)v15 != v14)
  {
LABEL_16:
    v18 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0xD0, (unint64_t)a2);
    if (v18)
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v26, *a2);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v24, *a3);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v22, *a4);
      icu::units::UnitPreferenceMetadata::UnitPreferenceMetadata((uint64_t)v18, v26, v27, v24, v25, v22, v23, *a5, *a6, a7);
    }
    v20 = (int)*a1;
    *a1 = v20 + 1;
    *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v20) = v18;
    return v18;
  }
  if (v14 == 8)
    v16 = 32;
  else
    v16 = 2 * v14;
  if (v16 < 1)
    return 0;
  v17 = (uint64_t *)uprv_malloc(8 * v16);
  v18 = v17;
  if (v17)
  {
    if (v14 >= 1)
    {
      v19 = a1[4];
      if (v19 >= v14)
        v19 = v14;
      if (v19 >= v16)
        v19 = v16;
      memcpy(v17, *((const void **)a1 + 1), 8 * v19);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v18;
    a1[4] = v16;
    v15 = 1;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v18;
}

uint64_t *sub_18BDB0E64(const void **a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t *result;
  uint64_t *v7;
  int v8;
  uint64_t v9;

  v3 = *((_DWORD *)a1 + 4);
  v4 = *(unsigned int *)a1;
  if ((_DWORD)v4 == v3)
  {
    if (v3 == 8)
      v5 = 32;
    else
      v5 = 2 * v3;
    if (v5 < 1)
      return 0;
    result = (uint64_t *)uprv_malloc(8 * v5);
    if (!result)
      return result;
    v7 = result;
    if (v3 >= 1)
    {
      v8 = *((_DWORD *)a1 + 4);
      if (v8 >= v3)
        v8 = v3;
      if (v8 >= v5)
        v8 = v5;
      memcpy(result, a1[1], 8 * v8);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free((void *)a1[1]);
    a1[1] = v7;
    *((_DWORD *)a1 + 4) = v5;
    v4 = 1;
    *((_BYTE *)a1 + 20) = 1;
  }
  result = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x90, a2);
  if (result)
  {
    result[1] = (uint64_t)result + 21;
    *((_DWORD *)result + 4) = 40;
    *((_WORD *)result + 10) = 0;
    *((_DWORD *)result + 16) = 0;
    result[9] = 0x3FF0000000000000;
    result[10] = (uint64_t)off_1E2256B38;
    *((_WORD *)result + 44) = 2;
  }
  v9 = *(int *)a1;
  *(_DWORD *)a1 = v9 + 1;
  *((_QWORD *)a1[1] + v9) = result;
  return result;
}

uint64_t sub_18BDB0F68(uint64_t a1, const char **a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, int *a6)
{
  uint64_t v6;
  int v12;
  int v14;
  int v15;
  int v16;

  if (*a6 <= 0)
  {
    v12 = *(_DWORD *)a1;
    *a3 = 0;
    *a4 = 0;
    *a5 = 0;
    if (v12 >= 1)
    {
      v14 = 0;
      do
      {
        v15 = v12 + v14;
        if (v12 + v14 < 0 != __OFADD__(v12, v14))
          ++v15;
        v6 = (v15 >> 1);
        v16 = icu::units::UnitPreferenceMetadata::compareTo(*(const char ***)(*(_QWORD *)(a1 + 8) + 8 * (int)v6), a2, a3, a4, a5);
        if (v16 < 0)
        {
          v14 = v6 + 1;
        }
        else
        {
          v12 = v6;
          if (!v16)
            return v6;
        }
      }
      while (v14 < v12);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t *sub_18BDB1024(const void **a1, unint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t *result;
  uint64_t *v8;
  int v9;
  uint64_t v10;

  v4 = *((_DWORD *)a1 + 4);
  v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8)
      v6 = 32;
    else
      v6 = 2 * v4;
    if (v6 < 1)
      return 0;
    result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result)
      return result;
    v8 = result;
    if (v4 >= 1)
    {
      v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4)
        v9 = v4;
      if (v9 >= v6)
        v9 = v6;
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free((void *)a1[1]);
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    v5 = 1;
    *((_BYTE *)a1 + 20) = 1;
  }
  result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x90, a2);
  if (result)
    result = (uint64_t *)sub_18BDB1108((uint64_t)result, a2);
  v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((_QWORD *)a1[1] + v10) = result;
  return result;
}

uint64_t sub_18BDB1108(uint64_t a1, uint64_t a2)
{
  UErrorCode v5;

  *(_QWORD *)(a1 + 8) = a1 + 21;
  *(_DWORD *)(a1 + 16) = 40;
  *(_WORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 80) = off_1E2256B38;
  *(_DWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 88) = 2;
  v5 = U_ZERO_ERROR;
  icu::CharString::append((icu::CharString *)(a1 + 8), *(const char **)(a2 + 8), *(_DWORD *)(a2 + 64), &v5);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  icu::UnicodeString::operator=((UChar **)(a1 + 80), (UChar **)(a2 + 80));
  return a1;
}

void icu::units::UnitsRouter::parseSkeletonToPrecision(unsigned __int8 *a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  int32_t v7;
  int v8;
  int32_t v9;
  int32_t v10;
  _BOOL4 v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  _QWORD v15[8];

  v15[7] = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 >= 1)
    goto LABEL_2;
  v13 = "p";
  icu::UnicodeString::UnicodeString(&v14, 1, &v13);
  v6 = (void *)LOWORD(v15[0]);
  if (SLOWORD(v15[0]) >= 0)
    v7 = LOWORD(v15[0]) >> 5;
  else
    v7 = HIDWORD(v15[0]);
  if ((v15[0] & 1) != 0)
  {
    v6 = (void *)a1[8];
    v11 = v6 & 1;
    goto LABEL_19;
  }
  v8 = v7 & (v7 >> 31);
  if (v7 < 0)
  {
    v9 = 0;
    goto LABEL_12;
  }
  v9 = v7 - v8;
  v10 = v7;
  if (v7 - v8 < v7)
LABEL_12:
    v10 = v9;
  if ((*((_WORD *)a1 + 4) & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    if ((v15[0] & 2) != 0)
      v12 = (char *)v15 + 2;
    else
      v12 = (char *)v15[2];
    v11 = icu::UnicodeString::doEqualsSubstring((uint64_t)a1, 0, v7, (uint64_t)v12, v8, v10);
  }
LABEL_19:
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v14);
  if (!v11)
  {
    *a2 = U_INVALID_FORMAT_ERROR;
LABEL_2:
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
    return;
  }
  v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  icu::StringSegment::StringSegment((uint64_t)&v14, (const icu::UnicodeString *)a1, 0);
  icu::StringSegment::adjustOffset((uint64_t)&v14, 20);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  sub_18BD258B0((icu::StringSegment *)&v14, a3, a2);
}

uint64_t icu::units::UnitsRouter::UnitsRouter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, int *a7)
{
  icu::MeasureUnitImpl *v13[3];

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(_BYTE *)(a1 + 108) = 0;
  icu::MeasureUnit::forIdentifier(a2, a3, a7, (uint64_t)v13);
  icu::units::UnitsRouter::init(a1, v13, a4, a5, a6, a7);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v13);
  return a1;
}

uint64_t icu::units::UnitsRouter::init(uint64_t result, icu::MeasureUnitImpl **a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  BOOL v20;
  _BYTE v21[24];
  uint64_t v22[2];
  _OWORD v23[5];
  uint64_t v24;
  _OWORD v25[11];
  _QWORD v26[12];
  _BYTE v27[8];
  uint64_t v28;
  void *v29;
  char v30;
  _OWORD v31[4];
  _OWORD v32[6];
  void *v33[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[6];
  void *v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[6];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*a6 <= 0)
  {
    v11 = result;
    v26[0] = 0;
    memset(&v26[2], 0, 72);
    v26[1] = &v26[3];
    LODWORD(v26[2]) = 8;
    icu::units::getAllConversionRates((uint64_t)v26, a6);
    memset(v25, 0, sizeof(v25));
    icu::units::UnitPreferences::UnitPreferences((icu::units::UnitPreferences *)v25, (UErrorCode *)a6);
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    memset(v46, 0, sizeof(v46));
    icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(a2, (UErrorCode *)a6, (uint64_t)v46);
    v44 = 0u;
    v45 = 0u;
    *(_OWORD *)v42 = 0u;
    v43 = 0u;
    memset(v41, 0, sizeof(v41));
    icu::units::extractCompoundBaseUnit((uint64_t)v46, (int *)v26, a6, (uint64_t)v41);
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)v37 = 0u;
    v38 = 0u;
    icu::getUnitQuantity((icu *)v41, (UErrorCode *)a6, (uint64_t)v37);
    if (*a6 <= 0)
    {
      v24 = 0;
      memset(v23, 0, sizeof(v23));
      icu::units::UnitPreferences::getPreferencesFor((uint64_t)v25, (unsigned __int8 *)v37[0], DWORD2(v40), a4, a5, a3, (UErrorCode *)a6, (uint64_t)v23);
      if (SLODWORD(v23[0]) >= 1)
      {
        v12 = 0;
        v13 = 8 * LODWORD(v23[0]) - 8;
        v14 = 0uLL;
        do
        {
          v15 = *(_QWORD *)(*((_QWORD *)&v23[0] + 1) + v12);
          v35 = v14;
          v36 = v14;
          *(_OWORD *)v33 = v14;
          v34 = v14;
          v32[4] = v14;
          v32[5] = v14;
          v32[2] = v14;
          v32[3] = v14;
          v32[0] = v14;
          v32[1] = v14;
          icu::StringPiece::StringPiece((icu::StringPiece *)v22, *(const char **)(v15 + 8));
          icu::MeasureUnitImpl::forIdentifier(v22[0], v22[1], a6, (uint64_t)v32);
          if (*a6 <= 0)
          {
            memset(v31, 0, sizeof(v31));
            icu::UnicodeString::UnicodeString((icu::UnicodeString *)v31, (UChar **)(v15 + 80));
            if (WORD4(v31[0]) < 0x20u
              || icu::UnicodeString::doEqualsSubstring((uint64_t)v31, 0, 19, (uint64_t)"p", 0, 19))
            {
              icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)v32, (UErrorCode *)a6, (uint64_t)v27);
              icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v27, (UErrorCode *)a6, (uint64_t)v21);
              if (*a6 <= 0)
              {
                v17 = sub_18BDB1A5C((const void **)v11, (unint64_t)v21);
                if (*a6 <= 0 && !v17)
                  *a6 = 7;
              }
              icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v21);
              if (v30)
                uprv_free(v29);
              sub_18BC3ED98((uint64_t)&v28);
              v18 = *a6;
              if ((int)v18 <= 0)
              {
                v19 = sub_18BDB1B40((unsigned int *)(v11 + 88), (unint64_t)v46, (icu::MeasureUnitImpl *)v32, (double *)(v15 + 72), (UChar **)v31, (uint64_t)v26, (UErrorCode *)a6);
                v18 = *a6;
                if ((int)v18 <= 0 && !v19)
                {
                  v18 = 7;
                  *a6 = 7;
                }
              }
              v16 = (int)v18 > 0;
            }
            else
            {
              v18 = 5;
              *a6 = 5;
              v16 = 1;
            }
            icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)v31);
          }
          else
          {
            v16 = 1;
          }
          if (BYTE4(v33[1]))
            uprv_free(v33[0]);
          sub_18BC3ED98((uint64_t)v32 + 8);
          v14 = 0uLL;
          if (v16)
            break;
          v20 = v13 == v12;
          v12 += 8;
        }
        while (!v20);
      }
      sub_18BD9EB44((unsigned int *)v23);
    }
    if (BYTE4(v37[1]))
      uprv_free(v37[0]);
    if (BYTE4(v42[1]))
      uprv_free(v42[0]);
    sub_18BC3ED98((uint64_t)v41 + 8);
    if (BYTE12(v47))
      uprv_free((void *)v47);
    sub_18BC3ED98((uint64_t)v46 + 8);
    sub_18BD9EB44((unsigned int *)&v25[5] + 2);
    sub_18BD9EC14((uint64_t)v25);
    return sub_18BD2D1E8((uint64_t)v26);
  }
  return result;
}

uint64_t icu::units::UnitsRouter::UnitsRouter(uint64_t a1, icu::MeasureUnitImpl **a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, int *a6)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(_BYTE *)(a1 + 108) = 0;
  icu::units::UnitsRouter::init(a1, a2, a3, a4, a5, a6);
  return a1;
}

{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_DWORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_DWORD *)(a1 + 104) = 8;
  *(_BYTE *)(a1 + 108) = 0;
  icu::units::UnitsRouter::init(a1, a2, a3, a4, a5, a6);
  return a1;
}

uint64_t icu::units::UnitsRouter::route@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  unsigned __int8 *v17;
  void *v18;
  _BYTE v20[88];
  _BYTE v21[32];
  _BYTE v22[28];
  int v23;
  uint64_t v24;
  void *v25;
  char v26;
  _BYTE v27[64];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned int *)(a1 + 88);
  if ((int)v9 < 1)
  {
    v14 = 0;
    if (!a2)
      goto LABEL_18;
  }
  else
  {
    v11 = 0;
    v12 = fabs(a5) * 1.0;
    v13 = 8 * v9 - 8;
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + v11);
      v15 = icu::units::ComplexUnitsConverter::greaterThanOrEqual((icu::units::UnitsConverter ***)(v14 + 8), v12, *(double *)(v14 + 192))|| v13 == v11;
      v11 += 8;
    }
    while (!v15);
    if (!a2)
      goto LABEL_18;
  }
  if (!*(_DWORD *)a2)
  {
    if (*(__int16 *)(v14 + 208) < 0)
      v16 = *(_DWORD *)(v14 + 212);
    else
      v16 = *(unsigned __int16 *)(v14 + 208) >> 5;
    if (v16 < 1)
    {
      icu::number::Precision::integer((uint64_t)v21);
      icu::number::FractionPrecision::withMinDigits((uint64_t)v21, 2, (uint64_t)v22);
      *a2 = *(_OWORD *)v22;
      *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v22[12];
    }
    else
    {
      v17 = (unsigned __int8 *)icu::UnicodeString::UnicodeString((icu::UnicodeString *)v27, (UChar **)(v14 + 200));
      icu::units::UnitsRouter::parseSkeletonToPrecision(v17, a3, (uint64_t)v22);
      *a2 = *(_OWORD *)v22;
      *(_OWORD *)((char *)a2 + 12) = *(_OWORD *)&v22[12];
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v27);
    }
  }
LABEL_18:
  icu::units::ComplexUnitsConverter::convert(v14 + 8, (uint64_t)a2, (int *)a3, (uint64_t)v20, a5);
  icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)(v14 + 264), a3, (uint64_t)&v23);
  sub_18BDB1A10(a4, (uint64_t)v20, &v23);
  if (v26)
    uprv_free(v25);
  sub_18BC3ED98((uint64_t)&v24);
  return sub_18BBCBAB0((uint64_t)v20);
}

uint64_t sub_18BDB1A10(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  sub_18BCF9CDC(a1 + 8, a2);
  *(_DWORD *)(a1 + 96) = *a3;
  sub_18BCF9CDC(a1 + 104, (uint64_t)(a3 + 2));
  icu::CharString::CharString(a1 + 192, a3 + 24);
  return a1;
}

uint64_t *sub_18BDB1A5C(const void **a1, unint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t *result;
  uint64_t *v8;
  int v9;
  uint64_t v10;

  v4 = *((_DWORD *)a1 + 4);
  v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8)
      v6 = 32;
    else
      v6 = 2 * v4;
    if (v6 < 1)
      return 0;
    result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result)
      return result;
    v8 = result;
    if (v4 >= 1)
    {
      v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4)
        v9 = v4;
      if (v9 >= v6)
        v9 = v6;
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free((void *)a1[1]);
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    v5 = 1;
    *((_BYTE *)a1 + 20) = 1;
  }
  result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x18, a2);
  if (result)
    result = (uint64_t *)icu::MeasureUnit::MeasureUnit((uint64_t)result, a2);
  v10 = *(int *)a1;
  *(_DWORD *)a1 = v10 + 1;
  *((_QWORD *)a1[1] + v10) = result;
  return result;
}

uint64_t *sub_18BDB1B40(unsigned int *a1, unint64_t a2, icu::MeasureUnitImpl *a3, double *a4, UChar **a5, uint64_t a6, UErrorCode *a7)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  double v20;
  void *v21;
  uint64_t v22;
  _BYTE v24[64];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v14 = a1[4];
  v15 = *a1;
  if ((_DWORD)v15 != v14)
  {
LABEL_16:
    v18 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x1A8, a2);
    if (v18)
    {
      v20 = *a4;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v24, a5);
      sub_18BDB1CD4((uint64_t)v18, a2, a3, (icu::UnicodeString *)v24, a6, a7, v20);
      v21 = (void *)(int)*a1;
      *a1 = (_DWORD)v21 + 1;
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * (_QWORD)v21) = v18;
      icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v24);
    }
    else
    {
      v22 = (int)*a1;
      *a1 = v22 + 1;
      *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v22) = 0;
    }
    return v18;
  }
  if (v14 == 8)
    v16 = 32;
  else
    v16 = 2 * v14;
  if (v16 < 1)
    return 0;
  v17 = (uint64_t *)uprv_malloc(8 * v16);
  v18 = v17;
  if (v17)
  {
    if (v14 >= 1)
    {
      v19 = a1[4];
      if (v19 >= v14)
        v19 = v14;
      if (v19 >= v16)
        v19 = v16;
      memcpy(v17, *((const void **)a1 + 1), 8 * v19);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v18;
    a1[4] = v16;
    v15 = 1;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v18;
}

uint64_t sub_18BDB1CD4(uint64_t a1, uint64_t a2, icu::MeasureUnitImpl *a3, icu::UnicodeString *a4, uint64_t a5, UErrorCode *a6, double a7)
{
  icu::units::ComplexUnitsConverter::ComplexUnitsConverter(a1 + 8, a2, a3, a5, a6);
  *(double *)(a1 + 192) = a7;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 200), a4);
  icu::MeasureUnitImpl::copy(a3, a6, a1 + 264);
  return a1;
}

icu::RuleBasedNumberFormat *unum_open(unsigned int a1, unint64_t a2, uint64_t a3, char *a4, UParseError *a5, UErrorCode *a6)
{
  icu::RuleBasedNumberFormat *v6;
  unsigned int v12;
  icu::DecimalFormat *Instance;
  void *v14;
  int v15;
  unint64_t v16;
  UParseError *v17;
  uint64_t *v18;
  uint64_t *v19;
  icu::DecimalFormatSymbols *v20;
  void *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  icu::RuleBasedNumberFormat *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  void *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  void *v38;
  void *v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  icu::DecimalFormat *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[14];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 > 0)
    return 0;
  switch(a1)
  {
    case 0u:
      v48 = 0;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v49, a2, a3);
      if (a5)
        v17 = a5;
      else
        v17 = (UParseError *)&v44;
      v18 = icu::UMemory::operator new((uint64_t *)&v44, (icu::UMemory *)0xB48, v16);
      if (!v18)
      {
        v24 = 7;
        *a6 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_39;
      }
      v20 = (icu::DecimalFormatSymbols *)v18;
      icu::Locale::Locale(v19, (icu::Locale *)v53, a4, 0, 0, 0);
      icu::DecimalFormatSymbols::DecimalFormatSymbols(v20, (const icu::Locale *)v53, a6);
      icu::Locale::~Locale(v21, (icu::Locale *)v53);
      v23 = (uint64_t *)*(unsigned int *)a6;
      if ((int)v23 >= 1)
      {
        (*(void (**)(icu::DecimalFormatSymbols *))(*(_QWORD *)v20 + 8))(v20);
LABEL_39:
        icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&v49);
        return 0;
      }
      v43 = (icu::DecimalFormat *)icu::UMemory::operator new(v23, (icu::UMemory *)0x170, v22);
      v6 = v43;
      if (v43)
        icu::DecimalFormat::DecimalFormat(v43, (const icu::UnicodeString *)&v49, v20, v17, a6);
      else
        (*(void (**)(icu::DecimalFormatSymbols *))(*(_QWORD *)v20 + 8))(v20);
LABEL_32:
      icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v49);
      if (v6)
      {
LABEL_33:
        if (*(int *)a6 < 1)
          return v6;
        (*(void (**)(icu::RuleBasedNumberFormat *))(*(_QWORD *)v6 + 8))(v6);
        return 0;
      }
LABEL_9:
      if (*(int *)a6 > 0)
        return 0;
      v6 = 0;
      v15 = 7;
LABEL_12:
      *a6 = v15;
      return v6;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x10u:
      icu::Locale::Locale((uint64_t *)a1, (icu::Locale *)v53, a4, 0, 0, 0);
      v12 = a1;
      goto LABEL_6;
    case 5u:
      v25 = icu::UMemory::operator new((uint64_t *)a1, (icu::UMemory *)0x2F0, a2);
      if (!v25)
        goto LABEL_9;
      v6 = (icu::RuleBasedNumberFormat *)v25;
      icu::Locale::Locale(v26, (icu::Locale *)v53, a4, 0, 0, 0);
      v27 = v6;
      v28 = 0;
      goto LABEL_25;
    case 6u:
      v29 = icu::UMemory::operator new((uint64_t *)a1, (icu::UMemory *)0x2F0, a2);
      if (!v29)
        goto LABEL_9;
      v6 = (icu::RuleBasedNumberFormat *)v29;
      icu::Locale::Locale(v30, (icu::Locale *)v53, a4, 0, 0, 0);
      v27 = v6;
      v28 = 1;
      goto LABEL_25;
    case 7u:
      v31 = icu::UMemory::operator new((uint64_t *)a1, (icu::UMemory *)0x2F0, a2);
      if (!v31)
        goto LABEL_9;
      v6 = (icu::RuleBasedNumberFormat *)v31;
      icu::Locale::Locale(v32, (icu::Locale *)v53, a4, 0, 0, 0);
      v27 = v6;
      v28 = 2;
LABEL_25:
      icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v27, v28, v53, a6);
      icu::Locale::~Locale(v33, (icu::Locale *)v53);
      goto LABEL_33;
    case 8u:
      LODWORD(v44) = 0;
      memset(v53, 0, sizeof(v53));
      icu::Locale::Locale((uint64_t *)a1, (icu::Locale *)v53, a4, 0, 0, 0);
      if ((int)icu::Locale::getKeywordValue((char **)v53, "numbers", 0, 0, (UErrorCode *)&v44) < 1)
      {
        v42 = icu::UMemory::operator new(v35, (icu::UMemory *)0x2F0, v34);
        v6 = (icu::RuleBasedNumberFormat *)v42;
        if (v42)
          icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v42, 3, v53, a6);
      }
      else
      {
        v12 = 1;
LABEL_6:
        Instance = icu::NumberFormat::createInstance((char **)v53, v12, a6);
LABEL_7:
        v6 = Instance;
      }
      icu::Locale::~Locale(v14, (icu::Locale *)v53);
      if (!v6)
        goto LABEL_9;
      goto LABEL_33;
    case 9u:
      v48 = 0;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v49, a2, a3);
      v6 = (icu::RuleBasedNumberFormat *)icu::UMemory::operator new(v37, (icu::UMemory *)0x2F0, v36);
      if (v6)
      {
        if (!a5)
          a5 = (UParseError *)&v44;
        icu::Locale::Locale((uint64_t *)&v44, (icu::Locale *)v53, a4, 0, 0, 0);
        icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v6, (const icu::UnicodeString *)&v49, (const icu::Locale *)v53, a5, a6);
        icu::Locale::~Locale(v39, (icu::Locale *)v53);
      }
      goto LABEL_32;
    case 0xEu:
      icu::Locale::Locale((uint64_t *)a1, (icu::Locale *)v53, a4, 0, 0, 0);
      v41 = 0;
      goto LABEL_37;
    case 0xFu:
      icu::Locale::Locale((uint64_t *)a1, (icu::Locale *)v53, a4, 0, 0, 0);
      v41 = 1;
LABEL_37:
      Instance = icu::CompactDecimalFormat::createInstance((const icu::Locale *)v53, v41, a6, v40);
      goto LABEL_7;
    default:
      v6 = 0;
      v15 = 16;
      goto LABEL_12;
  }
}

uint64_t unum_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t unum_clone(void *lpsrc, int *a2)
{
  uint64_t result;
  void *v5;

  if (*a2 > 0)
    return 0;
  if (!lpsrc
  {
  }
  result = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 32))(v5);
  if (!result)
    *a2 = 7;
  return result;
}

uint64_t unum_format(void *a1, int a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  return unum_formatInt64(a1, a2, a3, a4, a5, a6);
}

uint64_t unum_formatInt64(void *lpsrc, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int *a6)
{
  uint64_t v6;
  void *v13;
  void *v14;
  UChar *v16;
  UChar *v17;
  void (**v18)(icu::FieldPosition *__hidden);
  __int128 v19;
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a6 <= 0)
  {
    v21 = 0u;
    v22 = 0u;
    v24 = 0;
    v23 = 0u;
    v20 = off_1E2256B38;
    LOWORD(v21) = 2;
    if (a3 || a4)
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, a3, 0, a4);
    v18 = off_1E225EF78;
    v19 = 0xFFFFFFFFuLL;
    if (a5)
      LODWORD(v19) = *(_DWORD *)a5;
    if (lpsrc
    {
      (*(void (**)(void *, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden)))(*(_QWORD *)v13 + 112))(v13, a2, &v20, &v18);
      if (!a5)
        goto LABEL_14;
    }
    else
    {
      (*(void (**)(void *, uint64_t, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), int *))(*(_QWORD *)lpsrc + 120))(lpsrc, a2, &v20, &v18, a6);
      if (!a5)
      {
LABEL_14:
        v17 = (UChar *)a3;
        v6 = icu::UnicodeString::extract((uint64_t)&v20, &v17, a4, a6);
        v16 = v17;
        icu::FieldPosition::~FieldPosition(&v16, (icu::FieldPosition *)&v18);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v20);
        return v6;
      }
    }
    *(_QWORD *)(a5 + 4) = *(_QWORD *)((char *)&v19 + 4);
    goto LABEL_14;
  }
  return 0xFFFFFFFFLL;
}

uint64_t unum_formatDouble(void *lpsrc, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v6;
  void *v13;
  void *v14;
  UChar *v16;
  UChar *v17;
  void (**v18)(icu::FieldPosition *__hidden);
  __int128 v19;
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    v21 = 0u;
    v22 = 0u;
    v24 = 0;
    v23 = 0u;
    v20 = off_1E2256B38;
    LOWORD(v21) = 2;
    if (a2 || a3)
      icu::UnicodeString::setTo((icu::UnicodeString *)&v20, a2, 0, a3);
    v18 = off_1E225EF78;
    v19 = 0xFFFFFFFFuLL;
    if (a4)
      LODWORD(v19) = *(_DWORD *)a4;
    if (lpsrc
    {
      (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), double))(*(_QWORD *)v13 + 64))(v13, &v20, &v18, a6);
      if (!a4)
        goto LABEL_14;
    }
    else
    {
      (*(void (**)(void *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), int *, double))(*(_QWORD *)lpsrc + 72))(lpsrc, &v20, &v18, a5, a6);
      if (!a4)
      {
LABEL_14:
        v17 = (UChar *)a2;
        v6 = icu::UnicodeString::extract((uint64_t)&v20, &v17, a3, a5);
        v16 = v17;
        icu::FieldPosition::~FieldPosition(&v16, (icu::FieldPosition *)&v18);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v20);
        return v6;
      }
    }
    *(_QWORD *)(a4 + 4) = *(_QWORD *)((char *)&v19 + 4);
    goto LABEL_14;
  }
  return 0xFFFFFFFFLL;
}

uint64_t unum_formatDoubleForFields(uint64_t a1, char *a2, unsigned int a3, uint64_t a4, int *a5, double a6)
{
  uint64_t v12;
  UChar *v14;
  UChar *v15;
  void (**v16)(icu::UnicodeString *__hidden);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
        v17 = 0u;
        v18 = 0u;
        v20 = 0;
        v19 = 0u;
        v16 = off_1E2256B38;
        LOWORD(v17) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v16, a2, 0, a3);
LABEL_10:
        (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t, int *, double))(*(_QWORD *)a1 + 80))(a1, &v16, a4, a5, a6);
        v15 = (UChar *)a2;
        v12 = icu::UnicodeString::extract((uint64_t)&v16, &v15, a3, a5);
        v14 = v15;
        icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)&v16);
        return v12;
      }
    }
    else if (!a3)
    {
      v17 = 0u;
      v18 = 0u;
      v20 = 0;
      v19 = 0u;
      v16 = off_1E2256B38;
      LOWORD(v17) = 2;
      goto LABEL_10;
    }
    *a5 = 1;
  }
  return 0xFFFFFFFFLL;
}

uint64_t unum_formatDecimal(uint64_t a1, char *__s, int a3, char *a4, unsigned int a5, uint64_t a6, UErrorCode *a7)
{
  BOOL v10;
  int v11;
  uint64_t v15;
  void *v16;
  UChar *v18;
  UChar *v19;
  void (**v20)(icu::FieldPosition *__hidden);
  __int128 v21;
  void (**v22)(icu::UnicodeString *__hidden);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[7];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*(int *)a7 > 0)
    return 0xFFFFFFFFLL;
  if (a4)
    v10 = 1;
  else
    v10 = a5 == 0;
  v11 = !v10;
  if ((a5 & 0x80000000) != 0 || v11)
  {
    *a7 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  v20 = off_1E225EF78;
  v21 = 0xFFFFFFFFuLL;
  if (a6)
    LODWORD(v21) = *(_DWORD *)a6;
  if (a3 < 0)
    a3 = strlen(__s);
  memset(v27, 0, sizeof(v27));
  icu::Formattable::Formattable((uint64_t)v27, __s, a3, a7);
  v23 = 0u;
  v26 = 0;
  v25 = 0u;
  v24 = 0u;
  v22 = off_1E2256B38;
  LOWORD(v23) = 2;
  if (a5)
    icu::UnicodeString::setTo((icu::UnicodeString *)&v22, a4, 0, a5);
  (*(void (**)(uint64_t, _OWORD *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), UErrorCode *))(*(_QWORD *)a1 + 40))(a1, v27, &v22, &v20, a7);
  if (a6)
    *(_QWORD *)(a6 + 4) = *(_QWORD *)((char *)&v21 + 4);
  v19 = (UChar *)a4;
  v15 = icu::UnicodeString::extract((uint64_t)&v22, &v19, a5, (int *)a7);
  v18 = v19;
  icu::UnicodeString::~UnicodeString(&v18, (icu::UnicodeString *)&v22);
  icu::Formattable::~Formattable((icu::Formattable *)v27);
  icu::FieldPosition::~FieldPosition(v16, (icu::FieldPosition *)&v20);
  return v15;
}

uint64_t unum_formatDoubleCurrency(uint64_t a1, unint64_t a2, char *a3, unsigned int a4, unsigned int *a5, int *a6, double a7)
{
  uint64_t v7;
  uint64_t *v15;
  uint64_t *v16;
  icu::UObject *v17;
  uint64_t v18;
  void *v19;
  _QWORD v21[2];
  UChar *v22;
  unint64_t v23;
  void (**v24)(icu::FieldPosition *__hidden);
  __int128 v25;
  _OWORD v26[7];
  void (**v27)(icu::UnicodeString *__hidden);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0xFFFFFFFFLL;
  v31 = 0;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  v27 = off_1E2256B38;
  LOWORD(v28) = 2;
  if (a3 || a4)
    icu::UnicodeString::setTo((icu::UnicodeString *)&v27, a3, 0, a4);
  v15 = (uint64_t *)off_1E225EF78;
  v24 = off_1E225EF78;
  v25 = 0xFFFFFFFFuLL;
  if (a5)
  {
    v15 = (uint64_t *)*a5;
    LODWORD(v25) = *a5;
  }
  v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x80, a2);
  if (v16)
  {
    v17 = (icu::UObject *)v16;
    v23 = a2;
    icu::CurrencyAmount::CurrencyAmount(v16, &v23, a6, a7);
    v21[1] = v23;
    memset(v26, 0, sizeof(v26));
    icu::Formattable::Formattable((icu::Formattable *)v26, v17);
    (*(void (**)(uint64_t, _OWORD *, void (***)(icu::UnicodeString *__hidden), void (***)(icu::FieldPosition *__hidden), int *))(*(_QWORD *)a1 + 40))(a1, v26, &v27, &v24, a6);
    if (a5)
      *(_QWORD *)(a5 + 1) = *(_QWORD *)((char *)&v25 + 4);
    v22 = (UChar *)a3;
    v7 = icu::UnicodeString::extract((uint64_t)&v27, &v22, a4, a6);
    v21[0] = v22;
    icu::Formattable::~Formattable(v21, (icu::Formattable *)v26);
  }
  else
  {
    v18 = 7;
    *a6 = 7;
    v7 = 0xFFFFFFFFLL;
  }
  icu::FieldPosition::~FieldPosition((void *)v18, (icu::FieldPosition *)&v24);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v27);
  return v7;
}

uint64_t unum_parse(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t Long;
  void *v11;
  _OWORD v13[7];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_18BDB2B20((uint64_t)v13, a1, a2, a3, a4, a5);
  Long = icu::Formattable::getLong((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Long;
}

void sub_18BDB2B20(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _DWORD *a5, int *a6)
{
  int v10;
  void (**v11)(icu::ParsePosition *__hidden);
  unint64_t v12;
  uint64_t v13;
  _OWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*a6 <= 0)
  {
    memset(v14, 0, sizeof(v14));
    v13 = a3;
    icu::UnicodeString::UnicodeString(v14, a4 == -1, &v13);
    v11 = off_1E224A8B0;
    v12 = 0xFFFFFFFF00000000;
    if (a5)
      LODWORD(v12) = *a5;
    (*(void (**)(uint64_t, _OWORD *, uint64_t, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)a2 + 160))(a2, v14, a1, &v11);
    v10 = HIDWORD(v12);
    if (HIDWORD(v12) == -1)
    {
      if (!a5)
      {
LABEL_10:
        icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v11);
        icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v14);
        return;
      }
      v10 = v12;
    }
    else
    {
      *a6 = 9;
      if (!a5)
        goto LABEL_10;
    }
    *a5 = v10;
    goto LABEL_10;
  }
}

uint64_t unum_parseInt64(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  uint64_t Int64;
  void *v11;
  _OWORD v13[7];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_18BDB2B20((uint64_t)v13, a1, a2, a3, a4, a5);
  Int64 = icu::Formattable::getInt64((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Int64;
}

double unum_parseDouble(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  double Double;
  void *v11;
  _OWORD v13[7];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  sub_18BDB2B20((uint64_t)v13, a1, a2, a3, a4, a5);
  Double = icu::Formattable::getDouble((icu::Formattable *)v13, (UErrorCode *)a5);
  icu::Formattable::~Formattable(v11, (icu::Formattable *)v13);
  return Double;
}

uint64_t unum_parseDecimal(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, char *a5, uint64_t a6, int *a7)
{
  BOOL v10;
  int v11;
  const char *DecimalNumber;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[7];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0)
    return 0xFFFFFFFFLL;
  if (a5)
    v10 = 1;
  else
    v10 = (_DWORD)a6 == 0;
  v11 = !v10;
  if ((a6 & 0x80000000) != 0 || v11)
  {
    *a7 = 1;
    return 0xFFFFFFFFLL;
  }
  memset(v21, 0, sizeof(v21));
  icu::Formattable::Formattable((icu::Formattable *)v21);
  sub_18BDB2B20((uint64_t)v21, a1, a2, a3, a4, a7);
  DecimalNumber = (const char *)icu::Formattable::getDecimalNumber((icu::Formattable *)v21, (UErrorCode *)a7);
  v18 = *a7;
  if ((int)v18 <= 0)
  {
    v19 = v17;
    if ((int)v17 <= (int)a6)
    {
      if ((_DWORD)v17 == (_DWORD)a6)
      {
        strncpy(a5, DecimalNumber, (int)v17);
        v18 = 4294967172;
        *a7 = -124;
        v19 = a6;
      }
      else
      {
        strcpy(a5, DecimalNumber);
      }
    }
    else
    {
      v18 = 15;
      *a7 = 15;
    }
  }
  else
  {
    v19 = 0xFFFFFFFFLL;
  }
  icu::Formattable::~Formattable((void *)v18, (icu::Formattable *)v21);
  return v19;
}

double unum_parseDoubleCurrency(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, UChar *a5, UErrorCode *a6)
{
  double Double;
  icu::CurrencyAmount *v11;
  icu::CurrencyAmount *v12;
  int v13;
  uint64_t Currency;
  void *v15;
  void (**v17)(icu::ParsePosition *__hidden);
  unint64_t v18;
  uint64_t v19;
  _OWORD v20[4];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  Double = 0.0;
  if (*(int *)a6 <= 0)
  {
    memset(v20, 0, sizeof(v20));
    v19 = a2;
    icu::UnicodeString::UnicodeString(v20, a3 == -1, &v19);
    v17 = off_1E224A8B0;
    v18 = 0xFFFFFFFF00000000;
    if (a4)
      LODWORD(v18) = *a4;
    *a6 = U_PARSE_ERROR;
    v11 = (icu::CurrencyAmount *)(*(uint64_t (**)(uint64_t, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)a1 + 176))(a1, v20, &v17);
    v12 = v11;
    if (HIDWORD(v18) == -1)
    {
      v13 = v18;
      if (a4)
        *a4 = v18;
      if (v13 >= 1)
      {
        *a6 = U_ZERO_ERROR;
        Currency = icu::CurrencyAmount::getCurrency(v11);
        u_strcpy(a5, (const UChar *)(Currency + 20));
        Double = icu::Formattable::getDouble((icu::CurrencyAmount *)((char *)v12 + 8), a6);
      }
    }
    else if (a4)
    {
      *a4 = HIDWORD(v18);
    }
    if (v12)
      (*(void (**)(icu::CurrencyAmount *))(*(_QWORD *)v12 + 8))(v12);
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v17);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v20);
  }
  return Double;
}

BOOL unum_hasAttribute(void *a1, int a2)
{
  if (a1)
  return (a2 - 3) < 0x11 && ((0x1013Fu >> (a2 - 3)) & 1) != 0 || a1 != 0;
}

uint64_t unum_getAttribute(icu::NumberFormat *a1, uint64_t a2)
{
  uint64_t result;
  void *v4;
  int v5;

  switch((int)a2)
  {
    case 3:
      result = icu::NumberFormat::getMaximumIntegerDigits(a1);
      break;
    case 4:
    case 5:
      result = icu::NumberFormat::getMinimumIntegerDigits(a1);
      break;
    case 6:
      result = icu::NumberFormat::getMaximumFractionDigits(a1);
      break;
    case 7:
    case 8:
      result = icu::NumberFormat::getMinimumFractionDigits(a1);
      break;
    case 11:
      result = (*(uint64_t (**)(icu::NumberFormat *))(*(_QWORD *)a1 + 272))(a1);
      break;
    case 19:
      result = (*(uint64_t (**)(icu::NumberFormat *))(*(_QWORD *)a1 + 200))(a1);
      break;
    default:
      if (a1
      {
        v5 = 0;
        result = (*(uint64_t (**)(void *, uint64_t, int *))(*(_QWORD *)v4 + 312))(v4, a2, &v5);
      }
      else
      {
        result = 0xFFFFFFFFLL;
      }
      break;
  }
  return result;
}

void *unum_setAttribute(void *lpsrc, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t (*v6)(void *, uint64_t);
  int v7;

  v5 = lpsrc;
  switch((int)a2)
  {
    case 3:
      goto LABEL_4;
    case 4:
      v6 = *(uint64_t (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 224);
      goto LABEL_13;
    case 5:
      (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 224))(lpsrc, a3);
LABEL_4:
      v6 = *(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 216);
      goto LABEL_13;
    case 6:
      goto LABEL_7;
    case 7:
      v6 = *(uint64_t (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 240);
      goto LABEL_13;
    case 8:
      (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 240))(lpsrc, a3);
LABEL_7:
      v6 = *(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v5 + 232);
      goto LABEL_13;
    case 11:
      v6 = *(uint64_t (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 280);
LABEL_13:
      lpsrc = (void *)v6(v5, a3);
      break;
    case 19:
      lpsrc = (void *)(*(uint64_t (**)(void *, BOOL))(*(_QWORD *)lpsrc + 192))(lpsrc, (_DWORD)a3 != 0);
      break;
    default:
      if (lpsrc)
      {
        if (lpsrc)
        {
          v7 = 0;
          lpsrc = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t, int *))(*(_QWORD *)lpsrc + 304))(lpsrc, a2, a3, &v7);
        }
      }
      break;
  }
  return lpsrc;
}

double unum_getDoubleAttribute(const void *a1, int a2)
{
  void *v3;
  double result;

  if (!a1)
    return -1.0;
  if (a2 != 12 || !v3)
    return -1.0;
  (*(void (**)(void *))(*(_QWORD *)v3 + 408))(v3);
  return result;
}

void *unum_setDoubleAttribute(void *result, int a2, double a3)
{
  if (result)
  {
    if (a2 == 12)
    {
      if (result)
        return (void *)(*(uint64_t (**)(void *, double))(*(_QWORD *)result + 416))(result, a3);
    }
  }
  return result;
}

uint64_t unum_getTextAttribute(void *lpsrc, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v5;
  icu::DecimalFormat *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t Currency;
  void *v16;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  UChar *v23;
  UChar *v24;
  uint64_t v25;
  unsigned __int16 v26;
  unsigned int v27;
  void (**v28)(icu::UnicodeString *__hidden);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    v29 = 0u;
    v30 = 0u;
    v32 = 0;
    v31 = 0u;
    v28 = off_1E2256B38;
    LOWORD(v29) = 2;
    if (a3 || a4)
    {
      icu::UnicodeString::setTo((icu::UnicodeString *)&v28, a3, 0, a4);
      if (!lpsrc)
        goto LABEL_15;
    }
    else if (!lpsrc)
    {
      goto LABEL_15;
    }
    if (v11)
    {
      switch(a2)
      {
        case 0:
          icu::DecimalFormat::getPositivePrefix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 1:
          icu::DecimalFormat::getPositiveSuffix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 2:
          icu::DecimalFormat::getNegativePrefix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 3:
          icu::DecimalFormat::getNegativeSuffix(v11, (icu::UnicodeString *)&v28);
          goto LABEL_22;
        case 4:
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 440))(&v25);
          goto LABEL_21;
        case 5:
          Currency = icu::NumberFormat::getCurrency(v11);
          icu::UnicodeString::UnicodeString((uint64_t)&v25, Currency);
          goto LABEL_21;
        default:
          goto LABEL_15;
      }
    }
    if (!v12)
      goto LABEL_15;
    v13 = v12;
    if (a2 == 7)
    {
      v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 312))(v12);
      if (v18 >= 1)
      {
        v19 = v18;
        v20 = 0;
        do
        {
          (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*(_QWORD *)v13 + 320))(&v25, v13, v20);
          if ((v26 & 0x8000u) == 0)
            v21 = v26 >> 5;
          else
            v21 = v27;
          icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v25, 0, v21);
          icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v25);
          LOWORD(v25) = 59;
          icu::UnicodeString::doAppend((uint64_t)&v28, (uint64_t)&v25, 0, 1);
          v20 = (v20 + 1);
        }
        while (v19 != (_DWORD)v20);
      }
      goto LABEL_22;
    }
    if (a2 == 6)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v12 + 392))(&v25);
LABEL_21:
      icu::UnicodeString::operator=((icu::UnicodeString *)&v28, (icu::UnicodeString *)&v25);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v25);
LABEL_22:
      v24 = (UChar *)a3;
      v5 = icu::UnicodeString::extract((uint64_t)&v28, &v24, a4, a5);
      v23 = v24;
      v14 = (uint64_t)&v23;
      goto LABEL_23;
    }
LABEL_15:
    v14 = 16;
    *a5 = 16;
    v5 = 0xFFFFFFFFLL;
LABEL_23:
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v28);
    return v5;
  }
  return 0xFFFFFFFFLL;
}

void *unum_setTextAttribute(void *result, int a2, uint64_t a3, uint64_t a4, int *a5)
{
  const void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t TerminatedBuffer;
  _OWORD v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    v7 = result;
    memset(v13, 0, sizeof(v13));
    icu::UnicodeString::UnicodeString((uint64_t)v13, a3, a4);
    if (v7)
    {
      if (v8)
      {
        v9 = v8;
        switch(a2)
        {
          case 0:
            (*(void (**)(void *, _OWORD *))(*(_QWORD *)v8 + 368))(v8, v13);
            break;
          case 1:
            (*(void (**)(void *, _OWORD *))(*(_QWORD *)v8 + 384))(v8, v13);
            break;
          case 2:
            (*(void (**)(void *, _OWORD *))(*(_QWORD *)v8 + 376))(v8, v13);
            break;
          case 3:
            (*(void (**)(void *, _OWORD *))(*(_QWORD *)v8 + 392))(v8, v13);
            break;
          case 4:
            (*(void (**)(void *, _OWORD *))(*(_QWORD *)v8 + 448))(v8, v13);
            break;
          case 5:
            TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v13);
            (*(void (**)(void *, uint64_t, int *))(*(_QWORD *)v9 + 248))(v9, TerminatedBuffer, a5);
            break;
          default:
            goto LABEL_11;
        }
        return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v13);
      }
    }
    else
    {
      v11 = 0;
    }
    if (a2 == 6)
    {
      (*(void (**)(void *, _OWORD *, int *))(*(_QWORD *)v11 + 384))(v11, v13, a5);
    }
    else
    {
LABEL_11:
      v10 = 16;
      *a5 = 16;
    }
    return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v13);
  }
  return result;
}

uint64_t unum_toPattern(void *lpsrc, int a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v5;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(void);
  void *v14;
  void *v15;
  UChar *v17;
  UChar *v18;
  _QWORD v19[8];
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0xFFFFFFFFLL;
  v21 = 0u;
  v22 = 0u;
  v24 = 0;
  v23 = 0u;
  v20 = off_1E2256B38;
  LOWORD(v21) = 2;
  if (a3 || a4)
    icu::UnicodeString::setTo((icu::UnicodeString *)&v20, a3, 0, a4);
  if (lpsrc)
  {
    if (v11)
    {
      v12 = *v11;
      if (a2)
        v13 = *(void (**)(void))(v12 + 560);
      else
        v13 = *(void (**)(void))(v12 + 552);
      v13();
    }
    else
    {
      if (v14)
      {
        (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v14 + 304))(v19);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v20, (icu::UnicodeString *)v19);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v19);
      }
    }
  }
  v18 = (UChar *)a3;
  v5 = icu::UnicodeString::extract((uint64_t)&v20, &v18, a4, a5);
  v17 = v18;
  icu::UnicodeString::~UnicodeString(&v17, (icu::UnicodeString *)&v20);
  return v5;
}

void *unum_getSymbol(const void *a1, unsigned int a2, UChar *a3, int a4, int *a5)
{
  void *result;
  uint64_t v10;
  int v11;
  UChar *v12;

  if (!a5)
    return 0;
  if (*a5 > 0)
    return 0;
  if (a1 && a2 < 0x1D)
  {
    if (result)
    {
      v10 = (*(uint64_t (**)(void *))(*(_QWORD *)result + 320))(result);
      v12 = a3;
      return (void *)icu::UnicodeString::extract(v10 + ((unint64_t)a2 << 6) + 8, &v12, a4, a5);
    }
    v11 = 16;
  }
  else
  {
    result = 0;
    v11 = 1;
  }
  *a5 = v11;
  return result;
}

void unum_setSymbol(const void *a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  void *v9;
  void *v10;
  const icu::DecimalFormatSymbols *v11;
  void *v12;
  int v13;
  UChar *v14[8];
  _BYTE v15[2888];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a5 && *a5 <= 0)
  {
    if (a1 && a2 <= 0x1C && a3 && (int)a4 > -2)
    {
      if (v9)
      {
        v10 = v9;
        bzero(v15, 0xB48uLL);
        v11 = (const icu::DecimalFormatSymbols *)(*(uint64_t (**)(void *))(*(_QWORD *)v10 + 320))(v10);
        icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)v15, v11);
        icu::UnicodeString::UnicodeString((uint64_t)v14, a3, a4);
        sub_18BCB3FCC((icu::UnicodeString *)v15, a2, v14, 1);
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v14);
        (*(void (**)(void *, _BYTE *))(*(_QWORD *)v10 + 336))(v10, v15);
        icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)v15);
        return;
      }
      v13 = 16;
    }
    else
    {
      v13 = 1;
    }
    *a5 = v13;
  }
}

void *unum_applyPattern(const void *a1, int a2, UChar *s, uint64_t a4, uint64_t a5, int *a6)
{
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  int v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  if (a6)
    v9 = a6;
  else
    v9 = &v15;
  if ((_DWORD)a4 == -1)
    a4 = u_strlen(s);
  memset(v16, 0, sizeof(v16));
  icu::UnicodeString::UnicodeString(v16, s, a4, a4);
  if (a1
  {
    v11 = *v10;
    if (a2)
      v12 = *(void (**)(void))(v11 + 584);
    else
      v12 = *(void (**)(void))(v11 + 568);
    v12();
  }
  else
  {
    v13 = 16;
    *v9 = 16;
  }
  return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v16);
}

uint64_t unum_getLocaleByType(uint64_t a1, int a2, int *a3)
{
  if (a1)
    return icu::Format::getLocaleID(a1, a2, a3);
  if (*a3 <= 0)
    *a3 = 1;
  return 0;
}

uint64_t unum_setContext(uint64_t result, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 256))(result);
  return result;
}

uint64_t unum_getContext(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3 <= 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  else
    return 0;
}

uint64_t *unum_parseToUFormattable(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, _DWORD *a5, int *a6)
{
  uint64_t *v6;
  uint64_t v13;

  v6 = a2;
  if (*a6 <= 0)
  {
    if (a1 && (a3 || !a4))
    {
      if (a2)
      {
        v13 = 0;
      }
      else
      {
        v6 = ufmt_open(a6, 0);
        v13 = (uint64_t)v6;
      }
      sub_18BDB2B20((uint64_t)v6, a1, a3, a4, a5, a6);
      if (*a6 >= 1 && v13)
      {
        ufmt_close(v13);
        return 0;
      }
    }
    else
    {
      *a6 = 1;
    }
  }
  return v6;
}

uint64_t unum_formatUFormattable(uint64_t a1, uint64_t a2, UChar *a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v6;
  int v11;
  void *v13;
  UChar *v15;
  UChar *v16;
  void (**v17)(icu::FieldPosition *__hidden);
  __int128 v18;
  _OWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0;
  if (!a1 || !a2)
    goto LABEL_10;
  v11 = a4;
  if (!a3)
  {
    if (!(_DWORD)a4)
      goto LABEL_7;
LABEL_10:
    v6 = 0;
    *a6 = 1;
    return v6;
  }
  if ((a4 & 0x80000000) != 0)
    goto LABEL_10;
LABEL_7:
  memset(v19, 0, sizeof(v19));
  icu::UnicodeString::UnicodeString(v19, a3, 0, a4);
  v17 = off_1E225EF78;
  v18 = 0xFFFFFFFFuLL;
  if (a5)
  {
    LODWORD(v18) = *(_DWORD *)a5;
    (*(void (**)(uint64_t, uint64_t, _OWORD *, void (***)(icu::FieldPosition *__hidden), int *))(*(_QWORD *)a1 + 40))(a1, a2, v19, &v17, a6);
    *(_QWORD *)(a5 + 4) = *(_QWORD *)((char *)&v18 + 4);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, _OWORD *, void (***)(icu::FieldPosition *__hidden), int *))(*(_QWORD *)a1 + 40))(a1, a2, v19, &v17, a6);
  }
  v16 = a3;
  v6 = icu::UnicodeString::extract((uint64_t)v19, &v16, v11, a6);
  v15 = v16;
  icu::FieldPosition::~FieldPosition(&v15, (icu::FieldPosition *)&v17);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v19);
  return v6;
}

icu::NumberingSystem *unumsys_open(char *a1, UErrorCode *a2)
{
  UErrorCode *v3;
  icu::NumberingSystem *Instance;
  void *v5;
  _BYTE v7[224];
  uint64_t *v8;

  v8 = (uint64_t *)*MEMORY[0x1E0C80C00];
  icu::Locale::Locale(v8, (icu::Locale *)v7, a1, 0, 0, 0);
  Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)v7, a2, v3);
  icu::Locale::~Locale(v5, (icu::Locale *)v7);
  return Instance;
}

icu::NumberingSystem *unumsys_openByName(icu::NumberingSystem *a1, char *a2, UErrorCode *a3)
{
  if (*(int *)a2 <= 0)
    return icu::NumberingSystem::createInstanceByName(a1, a2, a3);
  else
    return 0;
}

uint64_t unumsys_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_OWORD *unumsys_openAvailableNames(icu::NumberingSystem *a1, UErrorCode *a2)
{
  uint64_t *AvailableNames;

  AvailableNames = icu::NumberingSystem::getAvailableNames(a1, a2);
  return uenum_openFromStringEnumeration((uint64_t)AvailableNames, (int *)a1);
}

uint64_t unumsys_getDescription(uint64_t a1, UChar *a2, int a3, int *a4)
{
  uint64_t v4;
  UChar *v9;
  UChar *v10;
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*a4 > 0)
    return 0xFFFFFFFFLL;
  memset(v11, 0, sizeof(v11));
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v11);
  v10 = a2;
  v4 = icu::UnicodeString::extract((uint64_t)v11, &v10, a3, a4);
  v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)v11);
  return v4;
}

uint64_t uplrule_select(icu::PluralRules *a1, int a2, UChar *a3, int a4, int *a5)
{
  return uplrules_select(a1, a3, a4, a5, (double)a2);
}

uint64_t *uplrules_open(char *a1, icu::UnifiedCache *a2)
{
  return uplrules_openForType(a1, 0, a2);
}

uint64_t *uplrules_openForType(char *a1, unint64_t a2, icu::UnifiedCache *a3)
{
  uint64_t *v5;
  void *v6;
  _BYTE v8[224];
  uint64_t *v9;

  v9 = (uint64_t *)*MEMORY[0x1E0C80C00];
  icu::Locale::Locale(v9, (icu::Locale *)v8, a1, 0, 0, 0);
  v5 = icu::PluralRules::forLocale((icu::Locale *)v8, a2, a3);
  icu::Locale::~Locale(v6, (icu::Locale *)v8);
  return v5;
}

uint64_t uplrules_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t uplrules_select(icu::PluralRules *a1, UChar *a2, int a3, int *a4, double a5)
{
  uint64_t v5;
  UChar *v10;
  UChar *v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*a4 <= 0)
  {
    if (a2)
    {
      if ((a3 & 0x80000000) == 0)
      {
LABEL_5:
        memset(v12, 0, sizeof(v12));
        icu::PluralRules::select(a1, a5, (icu::UnicodeString *)v12);
        v11 = a2;
        v5 = icu::UnicodeString::extract((uint64_t)v12, &v11, a3, a4);
        v10 = v11;
        icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)v12);
        return v5;
      }
    }
    else if (!a3)
    {
      goto LABEL_5;
    }
    v5 = 0;
    *a4 = 1;
    return v5;
  }
  return 0;
}

uint64_t uplrules_selectFormatted(icu::PluralRules *a1, uint64_t a2, UChar *a3, int a4, int *a5)
{
  uint64_t v5;
  const icu::IFixedDecimal *v11;
  UChar *v12;
  UChar *v13;
  _OWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  if (a3)
  {
    if ((a4 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    v5 = 0;
    *a5 = 1;
    return v5;
  }
  if (a4)
    goto LABEL_9;
LABEL_6:
  v11 = (const icu::IFixedDecimal *)sub_18BD0A878(a2, a5);
  if (*a5 <= 0)
  {
    memset(v14, 0, sizeof(v14));
    icu::PluralRules::select(a1, v11, (icu::UnicodeString *)v14);
    v13 = a3;
    v5 = icu::UnicodeString::extract((uint64_t)v14, &v13, a4, a5);
    v12 = v13;
    icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)v14);
    return v5;
  }
  return 0;
}

uint64_t uplrules_selectForRange(icu::PluralRules *a1, uint64_t a2, UChar *a3, int a4, int *a5)
{
  uint64_t v5;
  uint64_t v10;
  UChar *v12;
  UChar *v13;
  _OWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (*a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
LABEL_5:
        v10 = sub_18BD373C4(a2, a5);
        memset(v14, 0, sizeof(v14));
        icu::PluralRules::select(a1, v10, (const icu::UnicodeString *)a5, (uint64_t)v14);
        v13 = a3;
        v5 = icu::UnicodeString::extract((uint64_t)v14, &v13, a4, a5);
        v12 = v13;
        icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)v14);
        return v5;
      }
    }
    else if (!a4)
    {
      goto LABEL_5;
    }
    v5 = 0;
    *a5 = 1;
    return v5;
  }
  return 0;
}

uint64_t uplrules_selectWithFormat(icu::PluralRules *a1, const void *a2, UChar *a3, int a4, UErrorCode *a5, double a6)
{
  uint64_t v6;
  void *v12;
  icu::DecimalFormat *v14;
  icu::DecimalFormat *v15;
  double Double;
  UChar *v17;
  UChar *v18;
  _OWORD v19[4];
  uint64_t v20;
  _OWORD v21[4];
  _OWORD v22[7];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    if (a1 && a2)
    {
      if (a3)
      {
        if ((a4 & 0x80000000) == 0)
          goto LABEL_7;
      }
      else if (!a4)
      {
LABEL_7:
        memset(v22, 0, sizeof(v22));
        icu::Formattable::Formattable((icu::Formattable *)v22, a6);
        memset(v21, 0, sizeof(v21));
        if (*(int *)a5 <= 0)
        {
          if (v14)
          {
            v15 = v14;
            v20 = 0;
            memset(v19, 0, sizeof(v19));
            icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v19);
            icu::DecimalFormat::formatToDecimalQuantity(v15, (const icu::Formattable *)v22, (icu::number::impl::DecimalQuantity *)v19, a5);
            if (*(int *)a5 <= 0)
            {
              icu::PluralRules::select(a1, (const icu::IFixedDecimal *)v19, (icu::UnicodeString *)v21);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
              goto LABEL_9;
            }
            icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v19);
          }
          else
          {
            Double = icu::Formattable::getDouble((icu::Formattable *)v22, a5);
            if (*(int *)a5 <= 0)
            {
              icu::PluralRules::select(a1, Double, (icu::UnicodeString *)v21);
              goto LABEL_9;
            }
          }
        }
        *(_QWORD *)&v21[0] = off_1E2256B38;
        WORD4(v21[0]) = 2;
LABEL_9:
        v18 = a3;
        v6 = icu::UnicodeString::extract((uint64_t)v21, &v18, a4, (int *)a5);
        v17 = v18;
        icu::UnicodeString::~UnicodeString(&v17, (icu::UnicodeString *)v21);
        icu::Formattable::~Formattable(v12, (icu::Formattable *)v22);
        return v6;
      }
    }
    v6 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v6;
  }
  return 0;
}

_OWORD *uplrules_getKeywords(icu::PluralRules *a1, UErrorCode *a2)
{
  uint64_t Keywords;
  UErrorCode v5;

  if (*(int *)a2 > 0)
    return 0;
  if (!a1)
  {
    v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_8:
    *a2 = v5;
    return 0;
  }
  Keywords = icu::PluralRules::getKeywords(a1, a2);
  if (*(int *)a2 <= 0)
  {
    if (Keywords)
      return uenum_openFromStringEnumeration(Keywords, (int *)a2);
    v5 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_8;
  }
  return 0;
}

double uplrules_getSampleForKeyword(icu::PluralRules *a1, uint64_t a2, UErrorCode *a3)
{
  double result;
  int Samples;
  void *v7;
  _BYTE v8[64];
  double v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = 0.0;
  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      v9 = 0.0;
      v10 = 0.0;
      icu::UnicodeString::UnicodeString((uint64_t)v8, a2);
      Samples = icu::PluralRules::getSamples(a1, (const icu::UnicodeString *)v8, &v9, 2, a3);
      icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v8);
      if (Samples < 1)
      {
        return 0.0;
      }
      else
      {
        result = v9;
        if (Samples != 1 && v9 == 0.0)
          return v10;
      }
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

uint64_t sub_18BDB47D8(uint64_t a1)
{
  icu::RegexMatcher *v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  icu::RegexPattern *v7;
  void *v8;
  void *v9;

  v2 = *(icu::RegexMatcher **)(a1 + 40);
  if (v2)
  {
    icu::RegexMatcher::~RegexMatcher(v2);
    icu::UMemory::operator delete(v3);
  }
  *(_QWORD *)(a1 + 40) = 0;
  v4 = *(unsigned int **)(a1 + 16);
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      v7 = *(icu::RegexPattern **)(a1 + 8);
      if (v7)
      {
        icu::RegexPattern::~RegexPattern(v7);
        icu::UMemory::operator delete(v8);
      }
      uprv_free(*(void **)(a1 + 24));
      uprv_free(*(void **)(a1 + 16));
    }
  }
  if (*(_BYTE *)(a1 + 60))
  {
    v9 = *(void **)(a1 + 48);
    if (v9)
      uprv_free(v9);
  }
  *(_DWORD *)a1 = 0;
  return a1;
}

URegularExpression *__cdecl uregex_open(const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  uint64_t *v5;
  uint64_t v6;
  UText *v12;
  int32_t v13;
  uint64_t *v14;
  void *v15;
  UChar *v16;
  UChar *v17;
  UErrorCode *v18;
  UErrorCode *v19;
  uint64_t *v20;
  void *v21;
  void *v22;
  UText v23;

  v5 = (uint64_t *)*(unsigned int *)status;
  if ((int)v5 > 0)
    return 0;
  if (!patternLength || !pattern || patternLength <= -2)
  {
    v6 = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
    return (URegularExpression *)v6;
  }
  v12 = *(UText **)&flags;
  v13 = patternLength;
  if (patternLength == -1)
    v13 = u_strlen(pattern);
  v14 = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, *(unint64_t *)&patternLength);
  v6 = (uint64_t)v14;
  if (v14)
  {
    *(_DWORD *)v14 = 1919252592;
    v14[2] = 0;
    v14[3] = 0;
    v14[1] = 0;
    *((_DWORD *)v14 + 8) = 0;
    v14[5] = 0;
    v14[6] = 0;
    *(uint64_t *)((char *)v14 + 53) = 0;
  }
  v15 = uprv_malloc(4uLL);
  v16 = (UChar *)uprv_malloc(2 * (v13 + 1));
  v17 = v16;
  if (!v6 || !v15 || !v16)
  {
    *status = U_MEMORY_ALLOCATION_ERROR;
    if (v6)
    {
      v21 = (void *)sub_18BDB47D8(v6);
      icu::UMemory::operator delete(v21);
    }
    uprv_free(v15);
    uprv_free(v17);
    return 0;
  }
  *(_QWORD *)(v6 + 16) = v15;
  *(_QWORD *)(v6 + 24) = v16;
  atomic_store(1u, (unsigned int *)v15);
  *(_DWORD *)(v6 + 32) = patternLength;
  u_memcpy(v16, pattern, v13);
  v17[v13] = 0;
  memset(&v23, 0, sizeof(v23));
  v23.magic = 878368812;
  v23.sizeOfStruct = 144;
  utext_openUChars(&v23, v17, patternLength, status);
  if (pe)
    v20 = icu::RegexPattern::compile(&v23, v12, pe, status, v19);
  else
    v20 = icu::RegexPattern::compile(&v23, v12, status, v18, v19);
  *(_QWORD *)(v6 + 8) = v20;
  utext_close(&v23);
  if (*(int *)status > 0
    || (*(_QWORD *)(v6 + 40) = icu::RegexPattern::matcher(*(icu::RegexPattern **)(v6 + 8), status), *(int *)status >= 1))
  {
    v22 = (void *)sub_18BDB47D8(v6);
    icu::UMemory::operator delete(v22);
    return 0;
  }
  return (URegularExpression *)v6;
}

URegularExpression *__cdecl uregex_openUText(UText *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  uint64_t v4;
  UText *v8;
  int64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int64_t v12;
  uint64_t *v13;
  int32_t v14;
  void *v15;
  UChar *v16;
  UChar *v17;
  UErrorCode *v18;
  UErrorCode *v19;
  uint64_t *v20;
  void *v22;
  void *v23;
  UText v24;
  UErrorCode statusa[3];

  if (*(int *)status > 0)
    return 0;
  if (!pattern || (v8 = *(UText **)&flags, (v9 = utext_nativeLength(pattern)) == 0))
  {
    v4 = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
    return (URegularExpression *)v4;
  }
  v12 = v9;
  v13 = icu::UMemory::operator new(v11, (icu::UMemory *)0x40, v10);
  v4 = (uint64_t)v13;
  if (v13)
  {
    *(_DWORD *)v13 = 1919252592;
    v13[2] = 0;
    v13[3] = 0;
    v13[1] = 0;
    *((_DWORD *)v13 + 8) = 0;
    v13[5] = 0;
    v13[6] = 0;
    *(uint64_t *)((char *)v13 + 53) = 0;
  }
  statusa[0] = U_ZERO_ERROR;
  v14 = utext_extract(pattern, 0, v12, 0, 0, statusa);
  v15 = uprv_malloc(4uLL);
  v16 = (UChar *)uprv_malloc(2 * (v14 + 1));
  v17 = v16;
  if (!v4 || !v15 || !v16)
  {
    *status = U_MEMORY_ALLOCATION_ERROR;
    if (v4)
    {
      v22 = (void *)sub_18BDB47D8(v4);
      icu::UMemory::operator delete(v22);
    }
    uprv_free(v15);
    uprv_free(v17);
    return 0;
  }
  *(_QWORD *)(v4 + 16) = v15;
  *(_QWORD *)(v4 + 24) = v16;
  atomic_store(1u, (unsigned int *)v15);
  *(_DWORD *)(v4 + 32) = v14;
  utext_extract(pattern, 0, v12, v16, v14 + 1, status);
  memset(&v24, 0, sizeof(v24));
  v24.magic = 878368812;
  v24.sizeOfStruct = 144;
  utext_openUChars(&v24, v17, v14, status);
  if (pe)
    v20 = icu::RegexPattern::compile(&v24, v8, pe, status, v19);
  else
    v20 = icu::RegexPattern::compile(&v24, v8, status, v18, v19);
  *(_QWORD *)(v4 + 8) = v20;
  utext_close(&v24);
  if (*(int *)status > 0
    || (*(_QWORD *)(v4 + 40) = icu::RegexPattern::matcher(*(icu::RegexPattern **)(v4 + 8), status), *(int *)status >= 1))
  {
    v23 = (void *)sub_18BDB47D8(v4);
    icu::UMemory::operator delete(v23);
    return 0;
  }
  return (URegularExpression *)v4;
}

void uregex_close(URegularExpression *regexp)
{
  void *v1;

  if (regexp)
  {
    if (*(_DWORD *)regexp == 1919252592)
    {
      v1 = (void *)sub_18BDB47D8((uint64_t)regexp);
      icu::UMemory::operator delete(v1);
    }
  }
}

URegularExpression *__cdecl uregex_clone(const URegularExpression *regexp, UErrorCode *status)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  UErrorCode v8;
  unsigned int *v10;
  unsigned int v11;

  if (*(int *)status > 0)
    return 0;
  if (!regexp || (v5 = (uint64_t *)*(unsigned int *)regexp, (_DWORD)v5 != 1919252592))
  {
    v2 = 0;
    v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *status = v8;
    return (URegularExpression *)v2;
  }
  v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)status);
  v2 = (uint64_t)v6;
  if (!v6)
  {
    v8 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_9;
  }
  *(_DWORD *)v6 = 1919252592;
  v6[2] = 0;
  v6[3] = 0;
  v6[1] = 0;
  *((_DWORD *)v6 + 8) = 0;
  v6[5] = 0;
  v6[6] = 0;
  *(uint64_t *)((char *)v6 + 53) = 0;
  v6[5] = (uint64_t)icu::RegexPattern::matcher(*((icu::RegexPattern **)regexp + 1), status);
  if (*(int *)status >= 1)
  {
    v7 = (void *)sub_18BDB47D8(v2);
    icu::UMemory::operator delete(v7);
    return 0;
  }
  *(_OWORD *)(v2 + 8) = *(_OWORD *)((char *)regexp + 8);
  v10 = (unsigned int *)*((_QWORD *)regexp + 2);
  *(_QWORD *)(v2 + 24) = *((_QWORD *)regexp + 3);
  *(_DWORD *)(v2 + 32) = *((_DWORD *)regexp + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  return (URegularExpression *)v2;
}

const UChar *__cdecl uregex_pattern(const URegularExpression *regexp, int32_t *patLength, UErrorCode *status)
{
  const UChar *result;

  if (*(int *)status > 0)
    return 0;
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (patLength)
      *patLength = *((_DWORD *)regexp + 8);
    return (const UChar *)*((_QWORD *)regexp + 3);
  }
  else
  {
    result = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

UText *__cdecl uregex_patternUText(const URegularExpression *regexp, UErrorCode *status)
{
  return (UText *)icu::RegexPattern::patternText(*((icu::RegexPattern **)regexp + 1), status);
}

int32_t uregex_flags(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      return icu::RegexPattern::flags(*((icu::RegexPattern **)regexp + 1));
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)
{
  void *v8;
  UText v9;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592 && text && textLength > -2)
    {
      if (*((_BYTE *)regexp + 60))
      {
        v8 = (void *)*((_QWORD *)regexp + 6);
        if (v8)
          uprv_free(v8);
      }
      *((_QWORD *)regexp + 6) = text;
      *((_DWORD *)regexp + 14) = textLength;
      *((_BYTE *)regexp + 60) = 0;
      memset(&v9, 0, sizeof(v9));
      v9.magic = 878368812;
      v9.sizeOfStruct = 144;
      utext_openUChars(&v9, text, textLength, status);
      icu::RegexMatcher::reset(*((icu::RegexMatcher **)regexp + 5), &v9);
      utext_close(&v9);
    }
    else
    {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

void uregex_setUText(URegularExpression *regexp, UText *text, UErrorCode *status)
{
  void *v5;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592 && text)
    {
      if (*((_BYTE *)regexp + 60))
      {
        v5 = (void *)*((_QWORD *)regexp + 6);
        if (v5)
          uprv_free(v5);
      }
      *((_QWORD *)regexp + 6) = 0;
      *((_DWORD *)regexp + 14) = -1;
      *((_BYTE *)regexp + 60) = 1;
      icu::RegexMatcher::reset(*((icu::RegexMatcher **)regexp + 5), text);
    }
    else
    {
      *status = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
}

const UChar *__cdecl uregex_getText(URegularExpression *regexp, int32_t *textLength, UErrorCode *status)
{
  UChar *chunkContents;
  UText *v7;
  int64_t v8;
  int64_t v9;
  int32_t v10;
  UErrorCode statusa;

  if (*(int *)status > 0)
    return 0;
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    chunkContents = (UChar *)*((_QWORD *)regexp + 6);
    if (!chunkContents)
    {
      v7 = (UText *)icu::RegexMatcher::inputText(*((icu::RegexMatcher **)regexp + 5));
      v8 = utext_nativeLength(v7);
      v9 = v8;
      if (!v7->chunkNativeStart && v8 == v7->chunkNativeLimit && v8 == v7->nativeIndexingLimit)
      {
        chunkContents = (UChar *)v7->chunkContents;
        *((_QWORD *)regexp + 6) = chunkContents;
        *((_DWORD *)regexp + 14) = v8;
        *((_BYTE *)regexp + 60) = 0;
      }
      else
      {
        statusa = U_ZERO_ERROR;
        v10 = utext_extract(v7, 0, v8, 0, 0, &statusa);
        *((_DWORD *)regexp + 14) = v10;
        chunkContents = (UChar *)uprv_malloc(2 * (v10 + 1));
        utext_extract(v7, 0, v9, chunkContents, *((_DWORD *)regexp + 14) + 1, status);
        *((_QWORD *)regexp + 6) = chunkContents;
        *((_BYTE *)regexp + 60) = 1;
      }
    }
    if (textLength)
      *textLength = *((_DWORD *)regexp + 14);
  }
  else
  {
    chunkContents = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return chunkContents;
}

UText *__cdecl uregex_getUText(URegularExpression *regexp, UText *dest, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      return icu::RegexMatcher::getInput(*((icu::RegexMatcher **)regexp + 5), dest, status);
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return dest;
}

void uregex_refreshUText(URegularExpression *regexp, UText *text, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::refreshInputText(*((const UText ***)regexp + 5), text, status);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

UBool uregex_matches(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_matches64(regexp, startIndex, status);
}

UBool uregex_matches64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  icu::RegexMatcher *v3;
  UErrorCode v5;

  if (*(int *)status > 0)
    return 0;
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *status = v5;
    return 0;
  }
  if (!*((_QWORD *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    v5 = U_REGEX_INVALID_STATE;
    goto LABEL_9;
  }
  v3 = (icu::RegexMatcher *)*((_QWORD *)regexp + 5);
  if (startIndex == -1)
    return icu::RegexMatcher::matches(v3, status);
  else
    return icu::RegexMatcher::matches(v3, startIndex, status);
}

UBool uregex_lookingAt(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_lookingAt64(regexp, startIndex, status);
}

UBool uregex_lookingAt64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  icu::RegexMatcher *v3;
  UErrorCode v5;

  if (*(int *)status > 0)
    return 0;
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *status = v5;
    return 0;
  }
  if (!*((_QWORD *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    v5 = U_REGEX_INVALID_STATE;
    goto LABEL_9;
  }
  v3 = (icu::RegexMatcher *)*((_QWORD *)regexp + 5);
  if (startIndex == -1)
    return icu::RegexMatcher::lookingAt(v3, status);
  else
    return icu::RegexMatcher::lookingAt(v3, startIndex, status);
}

UBool uregex_find(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)
{
  return uregex_find64(regexp, startIndex, status);
}

UBool uregex_find64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)
{
  icu::RegexMatcher *v5;
  UErrorCode v7;

  if (*(int *)status > 0)
    return 0;
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    v7 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
    *status = v7;
    return 0;
  }
  if (!*((_QWORD *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    v7 = U_REGEX_INVALID_STATE;
    goto LABEL_9;
  }
  v5 = (icu::RegexMatcher *)*((_QWORD *)regexp + 5);
  if (startIndex != -1)
    return icu::RegexMatcher::find(v5, startIndex, status);
  icu::RegexMatcher::resetPreserveRegion(v5);
  return icu::RegexMatcher::find(*((icu::RegexMatcher **)regexp + 5), status);
}

UBool uregex_findNext(URegularExpression *regexp, UErrorCode *status)
{
  UErrorCode v3;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
        return icu::RegexMatcher::find(*((icu::RegexMatcher **)regexp + 5), status);
      v3 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v3;
  }
  return 0;
}

int32_t uregex_groupCount(URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      return icu::RegexMatcher::groupCount(*((icu::RegexMatcher **)regexp + 5));
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

int32_t uregex_groupNumberFromName(URegularExpression *regexp, const UChar *groupName, int32_t nameLength, UErrorCode *status)
{
  int32_t v4;
  icu::RegexPattern *v6;
  void *v7;
  _BYTE v9[64];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(int *)status > 0)
    return 0;
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    v6 = (icu::RegexPattern *)*((_QWORD *)regexp + 1);
    icu::UnicodeString::UnicodeString((uint64_t)v9, (uint64_t)groupName, *(uint64_t *)&nameLength);
    v4 = icu::RegexPattern::groupNumberFromName(v6, (const icu::UnicodeString *)v9, status);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  }
  else
  {
    v4 = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v4;
}

int32_t uregex_groupNumberFromCName(URegularExpression *regexp, const char *groupName, int32_t nameLength, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      return icu::RegexPattern::groupNumberFromName(*((icu::RegexPattern **)regexp + 1), groupName, *(uint64_t *)&nameLength, status);
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

int32_t uregex_group(URegularExpression *regexp, int32_t groupNum, UChar *dest, int32_t destCapacity, UErrorCode *status)
{
  int32_t v5;
  int v8;
  uint64_t v11;
  UErrorCode v12;
  icu::RegexMatcher *v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  UText *v18;
  int v19;
  int v20;
  UErrorCode v21;

  if (*(int *)status > 0)
    return 0;
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    v12 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_12:
    v5 = 0;
    goto LABEL_13;
  }
  v8 = destCapacity;
  v11 = *((_QWORD *)regexp + 6);
  if (!v11 && !*((_BYTE *)regexp + 60))
  {
    v12 = U_REGEX_INVALID_STATE;
    goto LABEL_12;
  }
  if (destCapacity < 0 || !dest && destCapacity)
  {
    v5 = 0;
    v12 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_13:
    *status = v12;
    return v5;
  }
  v14 = (icu::RegexMatcher *)*((_QWORD *)regexp + 5);
  if (!destCapacity || v11)
  {
    v19 = icu::RegexMatcher::start(v14, groupNum, status);
    v20 = icu::RegexMatcher::end(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
    if (*(int *)status <= 0)
    {
      v5 = v20 - v19;
      if (v20 - v19 >= v8)
      {
        if (v5 == v8)
          v21 = U_STRING_NOT_TERMINATED_WARNING;
        else
          v21 = U_BUFFER_OVERFLOW_ERROR;
        *status = v21;
      }
      else
      {
        dest[v5] = 0;
        v8 = v20 - v19;
      }
      if (v8 >= 1)
        u_memcpy(dest, (const UChar *)(*((_QWORD *)regexp + 6) + 2 * v19), v8);
      return v5;
    }
    return 0;
  }
  v15 = icu::RegexMatcher::start64(v14, groupNum, status);
  v16 = icu::RegexMatcher::end64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
  if (*(int *)status > 0)
    return 0;
  v17 = v16;
  v18 = (UText *)icu::RegexMatcher::inputText(*((icu::RegexMatcher **)regexp + 5));
  return utext_extract(v18, v15, v17, dest, v8, status);
}

UText *__cdecl uregex_groupUText(URegularExpression *regexp, int32_t groupNum, UText *dest, int64_t *groupLength, UErrorCode *status)
{
  UErrorCode v6;
  UErrorCode statusa;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
        return icu::RegexMatcher::group(*((icu::RegexMatcher **)regexp + 5), groupNum, dest, groupLength, status);
      v6 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v6 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v6;
  }
  statusa = U_ZERO_ERROR;
  if (!dest)
    return utext_openUChars(0, 0, 0, &statusa);
  return dest;
}

int32_t uregex_start(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return uregex_start64(regexp, groupNum, status);
}

int64_t uregex_start64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  UErrorCode v4;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
        return icu::RegexMatcher::start64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
      v4 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v4;
  }
  return 0;
}

int32_t uregex_end(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  return uregex_end64(regexp, groupNum, status);
}

int64_t uregex_end64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)
{
  UErrorCode v4;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
        return icu::RegexMatcher::end64(*((icu::RegexMatcher **)regexp + 5), groupNum, status);
      v4 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v4;
  }
  return 0;
}

void uregex_reset(URegularExpression *regexp, int32_t index, UErrorCode *status)
{
  uregex_reset64(regexp, index, status);
}

void uregex_reset64(URegularExpression *regexp, int64_t index, UErrorCode *status)
{
  UErrorCode v3;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
      {
        icu::RegexMatcher::reset(*((_QWORD *)regexp + 5), index, status);
        return;
      }
      v3 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v3;
  }
}

void uregex_setRegion(URegularExpression *regexp, int32_t regionStart, int32_t regionLimit, UErrorCode *status)
{
  uregex_setRegion64(regexp, regionStart, regionLimit, status);
}

void uregex_setRegion64(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, UErrorCode *status)
{
  UErrorCode v4;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
      {
        icu::RegexMatcher::region(*((icu::RegexMatcher **)regexp + 5), regionStart, regionLimit, status);
        return;
      }
      v4 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v4;
  }
}

void uregex_setRegionAndStart(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, int64_t startIndex, UErrorCode *status)
{
  UErrorCode v5;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
      {
        icu::RegexMatcher::region(*((_QWORD *)regexp + 5), regionStart, regionLimit, startIndex, status);
        return;
      }
      v5 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v5 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v5;
  }
}

int32_t uregex_regionStart(const URegularExpression *regexp, UErrorCode *status)
{
  return uregex_regionStart64(regexp, status);
}

int64_t uregex_regionStart64(const URegularExpression *regexp, UErrorCode *status)
{
  int64_t result;
  UErrorCode v3;

  if (*(int *)status > 0)
    return 0;
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
      return (int)icu::RegexMatcher::regionStart(*((icu::RegexMatcher **)regexp + 5));
    v3 = U_REGEX_INVALID_STATE;
  }
  else
  {
    v3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  result = 0;
  *status = v3;
  return result;
}

int32_t uregex_regionEnd(const URegularExpression *regexp, UErrorCode *status)
{
  return uregex_regionEnd64(regexp, status);
}

int64_t uregex_regionEnd64(const URegularExpression *regexp, UErrorCode *status)
{
  int64_t result;
  UErrorCode v3;

  if (*(int *)status > 0)
    return 0;
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
      return (int)icu::RegexMatcher::regionEnd(*((icu::RegexMatcher **)regexp + 5));
    v3 = U_REGEX_INVALID_STATE;
  }
  else
  {
    v3 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  result = 0;
  *status = v3;
  return result;
}

UBool uregex_hasTransparentBounds(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      return icu::RegexMatcher::hasTransparentBounds(*((icu::RegexMatcher **)regexp + 5));
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_useTransparentBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::useTransparentBounds(*((_QWORD *)regexp + 5), b);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

UBool uregex_hasAnchoringBounds(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      return icu::RegexMatcher::hasAnchoringBounds(*((icu::RegexMatcher **)regexp + 5));
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_useAnchoringBounds(URegularExpression *regexp, UBool b, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::useAnchoringBounds(*((_QWORD *)regexp + 5), b);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

UBool uregex_hitEnd(const URegularExpression *regexp, UErrorCode *status)
{
  UErrorCode v3;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
        return icu::RegexMatcher::hitEnd(*((icu::RegexMatcher **)regexp + 5));
      v3 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v3;
  }
  return 0;
}

UBool uregex_requireEnd(const URegularExpression *regexp, UErrorCode *status)
{
  UErrorCode v3;

  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
    {
      if (*((_QWORD *)regexp + 6) || *((_BYTE *)regexp + 60))
        return icu::RegexMatcher::requireEnd(*((icu::RegexMatcher **)regexp + 5));
      v3 = U_REGEX_INVALID_STATE;
    }
    else
    {
      v3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    *status = v3;
  }
  return 0;
}

void uregex_setTimeLimit(URegularExpression *regexp, int32_t limit, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::setTimeLimit(*((_QWORD *)regexp + 5), limit, status);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

int32_t uregex_getTimeLimit(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      return icu::RegexMatcher::getTimeLimit(*((icu::RegexMatcher **)regexp + 5));
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_setStackLimit(URegularExpression *regexp, int32_t limit, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::setStackLimit(*((char **)regexp + 5), limit, status);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

int32_t uregex_getStackLimit(const URegularExpression *regexp, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      return icu::RegexMatcher::getStackLimit(*((icu::RegexMatcher **)regexp + 5));
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return 0;
}

void uregex_setMatchCallback(URegularExpression *regexp, URegexMatchCallback *callback, const void *context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::setMatchCallback(*((_QWORD *)regexp + 5), (signed __int8 (*)(const void *, int))callback, context, status);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

void uregex_getMatchCallback(const URegularExpression *regexp, URegexMatchCallback **callback, const void **context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::getMatchCallback(*((_QWORD *)regexp + 5), (signed __int8 (**)(const void *, int))callback, context, status);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

void uregex_setFindProgressCallback(URegularExpression *regexp, URegexFindProgressCallback *callback, const void *context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::setFindProgressCallback(*((_QWORD *)regexp + 5), (signed __int8 (*)(const void *, uint64_t))callback, context, status);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

void uregex_getFindProgressCallback(const URegularExpression *regexp, URegexFindProgressCallback **callback, const void **context, UErrorCode *status)
{
  if (*(int *)status <= 0)
  {
    if (regexp && *(_DWORD *)regexp == 1919252592)
      icu::RegexMatcher::getFindProgressCallback(*((_QWORD *)regexp + 5), (signed __int8 (**)(const void *, uint64_t))callback, context, status);
    else
      *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
}

int32_t uregex_replaceAll(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)
{
  int32_t result;
  BOOL v11;
  int v12;
  int i;
  UErrorCode v14;
  UErrorCode v15;
  int32_t destCapacitya;
  UChar *destBufa;

  destBufa = destBuf;
  destCapacitya = destCapacity;
  if (*(int *)status > 0)
    return 0;
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    v14 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_22:
    result = 0;
LABEL_24:
    *status = v14;
    return result;
  }
  if (!*((_QWORD *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    v14 = U_REGEX_INVALID_STATE;
    goto LABEL_22;
  }
  if (!replacementText
    || replacementLength < -1
    || (!destBuf ? (v11 = destCapacity <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), destCapacity < 0 || v12))
  {
    result = 0;
    v14 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_24;
  }
  uregex_reset64(regexp, 0, status);
  v15 = *status;
  for (i = 0;
        uregex_findNext(regexp, &v15);
  result = uregex_appendTail_0(regexp, &destBufa, &destCapacitya, status) + i;
  v14 = v15;
  if (v15 >= U_ILLEGAL_ARGUMENT_ERROR)
    goto LABEL_24;
  return result;
}

UText *__cdecl uregex_replaceAllUText(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)
{
  UErrorCode v5;

  if (*(int *)status > 0)
    return 0;
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((_QWORD *)regexp + 6) && !*((_BYTE *)regexp + 60))
    {
      v5 = U_REGEX_INVALID_STATE;
      goto LABEL_9;
    }
    if (replacement)
      return icu::RegexMatcher::replaceAll(*((icu::RegexMatcher **)regexp + 5), replacement, dest, status);
  }
  v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
  *status = v5;
  return 0;
}

int32_t uregex_replaceFirst(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)
{
  int32_t result;
  BOOL v11;
  int v12;
  int32_t appended;
  UErrorCode v14;
  int32_t destCapacitya;
  UChar *destBufa;

  destBufa = destBuf;
  destCapacitya = destCapacity;
  if (*(int *)status > 0)
    return 0;
  if (!regexp || *(_DWORD *)regexp != 1919252592)
  {
    v14 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_20:
    result = 0;
LABEL_22:
    *status = v14;
    return result;
  }
  if (!*((_QWORD *)regexp + 6) && !*((_BYTE *)regexp + 60))
  {
    v14 = U_REGEX_INVALID_STATE;
    goto LABEL_20;
  }
  if (!replacementText
    || replacementLength < -1
    || (!destBuf ? (v11 = destCapacity <= 0) : (v11 = 1), v11 ? (v12 = 0) : (v12 = 1), destCapacity < 0 || v12))
  {
    result = 0;
    v14 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_22;
  }
  uregex_reset64(regexp, 0, status);
  if (uregex_find64(regexp, 0, status))
    appended = uregex_appendReplacement_0(regexp, replacementText, replacementLength, &destBufa, &destCapacitya, status);
  else
    appended = 0;
  return uregex_appendTail_0(regexp, &destBufa, &destCapacitya, status) + appended;
}

UText *__cdecl uregex_replaceFirstUText(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)
{
  UErrorCode v5;

  if (*(int *)status > 0)
    return 0;
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((_QWORD *)regexp + 6) && !*((_BYTE *)regexp + 60))
    {
      v5 = U_REGEX_INVALID_STATE;
      goto LABEL_9;
    }
    if (replacement)
      return icu::RegexMatcher::replaceFirst(*((icu::RegexMatcher **)regexp + 5), replacement, dest, status);
  }
  v5 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_9:
  *status = v5;
  return 0;
}

int32_t uregex_appendReplacement_0(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)
{
  int v9;
  UErrorCode v12;
  BOOL v13;
  char v14;
  int v15;
  uint64_t v16;
  UChar *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  UText *v21;
  int32_t v22;
  uint64_t v23;
  int32_t v24;
  int v25;
  UErrorCode v26;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  int32_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  UChar32 v37;
  UChar32 v38;
  uint64_t v39;
  int v41;
  UChar32 v42;
  uint64_t v43;
  int32_t v44;
  BOOL v45;
  unint64_t v46;
  int32_t v47;
  int32_t v48;
  int v49;
  int32_t v50;
  UChar32 v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  int v55;
  int v56;
  int32_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  int32_t v61;
  unsigned int v62;
  int v64;
  uint64_t v67;
  UChar *v68;
  UErrorCode v69;
  int32_t v70;
  UChar *v71;
  int32_t v72;
  UErrorCode v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  UChar *v77;
  int32_t v78;
  int32_t offset;
  UErrorCode statusa[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v9 = replacementLength;
  v85 = *MEMORY[0x1E0C80C00];
  v12 = *status;
  if (destCapacity)
    v13 = v12 == U_BUFFER_OVERFLOW_ERROR;
  else
    v13 = 0;
  v14 = !v13;
  if (!v13)
  {
    if (v12 <= U_ZERO_ERROR)
    {
      if (!regexp)
        goto LABEL_32;
      goto LABEL_14;
    }
    return 0;
  }
  if (*destCapacity)
    return 0;
  *status = U_ZERO_ERROR;
  if (!regexp)
  {
LABEL_32:
    v26 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_33:
    v15 = 0;
LABEL_35:
    *status = v26;
    return v15;
  }
LABEL_14:
  if (*(_DWORD *)regexp != 1919252592)
    goto LABEL_32;
  v16 = *((_QWORD *)regexp + 6);
  if (!v16 && !*((_BYTE *)regexp + 60))
  {
    v26 = U_REGEX_INVALID_STATE;
    goto LABEL_33;
  }
  if (!replacementText
    || replacementLength < -1
    || !destBuf
    || !destCapacity
    || ((v17 = *destBuf, v18 = *destCapacity, (int)v18 > 0) ? (v19 = v17 == 0) : (v19 = 0),
        v19 || (v18 & 0x80000000) != 0))
  {
    v15 = 0;
    v26 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_35;
  }
  v20 = *((_QWORD *)regexp + 5);
  if (!*(_BYTE *)(v20 + 130))
  {
    v15 = 0;
    v26 = U_REGEX_INVALID_STATE;
    goto LABEL_35;
  }
  if (replacementLength == -1)
  {
    v9 = u_strlen(replacementText);
    v16 = *((_QWORD *)regexp + 6);
  }
  v75 = v14;
  v74 = v20;
  if (v16)
  {
    v21 = *(UText **)(v20 + 32);
    if (v21->pFuncs->mapNativeIndexToUTF16)
    {
      statusa[0] = U_ZERO_ERROR;
      v22 = utext_extract(v21, 0, *(_QWORD *)(v20 + 152), 0, 0, statusa);
      v23 = v20;
      v24 = v22;
      statusa[0] = U_ZERO_ERROR;
      v25 = utext_extract(*(UText **)(v23 + 32), *(_QWORD *)(v23 + 152), *(_QWORD *)(v23 + 136), 0, 0, statusa) + v22;
    }
    else
    {
      v28 = v20;
      v24 = *(_DWORD *)(v20 + 152);
      v25 = *(_DWORD *)(v28 + 136);
    }
    v29 = __OFSUB__(v25, v24);
    v30 = (v25 - v24);
    if (((int)v30 < 0) ^ v29 | ((_DWORD)v30 == 0))
    {
      v15 = 0;
    }
    else
    {
      v31 = 0;
      do
      {
        if (v31 < v18)
          v17[v31] = *(_WORD *)(*((_QWORD *)regexp + 6) + 2 * v24 + 2 * v31);
        ++v31;
      }
      while (v30 != v31);
      v15 = v30;
    }
  }
  else
  {
    statusa[0] = U_ZERO_ERROR;
    v15 = utext_extract(*(UText **)(v20 + 32), *(_QWORD *)(v20 + 152), *(_QWORD *)(v20 + 136), v17, v18, statusa);
  }
  if (v9 >= 1)
  {
    v32 = 0;
    v76 = v18;
    v77 = v17;
    while (1)
    {
      if (*(int *)status > 0)
        goto LABEL_149;
      v33 = v32;
      v34 = replacementText[v32];
      v35 = v32 + 1;
      offset = v35;
      if (v34 != 36)
      {
        if (v34 == 92)
        {
          if ((int)v35 >= v9)
            goto LABEL_149;
          v36 = replacementText[v35];
          if ((v36 & 0xFFFFFFDF) != 0x55
            || (v37 = u_unescapeAt((UNESCAPE_CHAR_AT)sub_18BD58428, &offset, v9, (void *)replacementText), v37 == -1))
          {
            if (v15 < (int)v18)
              v17[v15] = v36;
            ++v15;
            ++offset;
            goto LABEL_144;
          }
          if (v37 >= 0x10000)
          {
            if ((int)v18 > v15)
              v17[v15] = (v37 >> 10) - 10304;
            v60 = v15 + 1;
            if ((int)v60 < (int)v18)
              v17[v60] = v37 & 0x3FF | 0xDC00;
            v15 += 2;
            goto LABEL_144;
          }
          if ((int)v18 > v15)
            v17[v15] = v37;
        }
        else if ((int)v18 > v15)
        {
          v17[v15] = v34;
        }
        ++v15;
        goto LABEL_144;
      }
      if ((int)v35 >= v9)
      {
        if (!u_isdigit(-1))
        {
LABEL_147:
          v73 = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
LABEL_148:
          v17 = v77;
          *status = v73;
          goto LABEL_149;
        }
LABEL_84:
        v48 = offset;
        if (offset >= v9)
        {
          v47 = 0;
          goto LABEL_137;
        }
        v49 = 0;
        v50 = 0;
        v78 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v74 + 8) + 136) + 8);
        while (2)
        {
          v51 = replacementText[v48];
          if ((v51 & 0xF800) == 0xD800)
          {
            if ((v51 & 0x400) != 0)
            {
              if (v48 >= 1)
              {
                v56 = replacementText[v48 - 1];
                v54 = (v56 & 0xFC00) == 55296;
                v55 = v51 - 56613888 + (v56 << 10);
                goto LABEL_92;
              }
            }
            else
            {
              v52 = v48 + 1;
              if ((_DWORD)v52 != v9)
              {
                v53 = replacementText[v52];
                v54 = (v53 & 0xFC00) == 56320;
                v55 = (v51 << 10) - 56613888 + v53;
LABEL_92:
                if (v54)
                  v51 = v55;
              }
            }
          }
          if (!u_isdigit(v51))
          {
            v47 = v50;
            goto LABEL_137;
          }
          v57 = u_charDigitValue(v51);
          v47 = v57 + 10 * v50;
          if (v47 > v78)
          {
            v47 = v50;
            if (v49)
              goto LABEL_137;
            v73 = U_INDEX_OUTOFBOUNDS_ERROR;
            v18 = v76;
            goto LABEL_148;
          }
          v58 = offset;
          v48 = ++offset;
          v59 = (replacementText[v58] & 0xFC00) != 0xD800 || v48 == v9;
          if (!v59 && (replacementText[v48] & 0xFC00) == 0xDC00)
          {
            v48 = v58 + 2;
            offset = v58 + 2;
          }
          --v49;
          v50 = v57 + 10 * v50;
          if (v48 >= v9)
            goto LABEL_137;
          continue;
        }
      }
      v38 = replacementText[(int)v35];
      v39 = v33 + 2;
      if ((v38 & 0xFC00) == 0xD800 && (_DWORD)v39 != v9)
      {
        v41 = replacementText[v39];
        v13 = (v41 & 0xFC00) == 56320;
        v42 = (v38 << 10) - 56613888 + v41;
        if (v13)
          v38 = v42;
      }
      if (u_isdigit(v38))
        goto LABEL_84;
      if (v38 != 123)
        goto LABEL_147;
      v84 = 0;
      v82 = 0u;
      v83 = 0u;
      v81 = 0u;
      *(_QWORD *)statusa = off_1E2256B38;
      LOWORD(v81) = 2;
      v43 = offset;
      v44 = ++offset;
      v45 = (replacementText[v43] & 0xFC00) != 0xD800 || v44 == v9;
      if (!v45 && (replacementText[v44] & 0xFC00) == 0xDC00)
        offset = v43 + 2;
      v46 = *(unsigned int *)status;
      if ((int)v46 > 0)
      {
LABEL_76:
        v47 = 0;
        goto LABEL_136;
      }
      while (1)
      {
        v46 = offset;
        if (offset >= v9)
          goto LABEL_135;
        v61 = ++offset;
        v62 = replacementText[v46];
        if ((v62 & 0xFC00) == 0xD800 && v61 != v9)
        {
          v64 = replacementText[v61];
          if ((v64 & 0xFC00) == 0xDC00)
          {
            offset = v46 + 2;
            v62 = (v62 << 10) - 56613888 + v64;
          }
        }
        if ((v62 & 0xFFFFFFDF) - 65 >= 0x1A && v62 - 49 > 8)
          break;
        icu::UnicodeString::append((uint64_t)statusa, v62);
LABEL_128:
        v46 = *(unsigned int *)status;
        if (v62 == 125 || (int)v46 >= 1)
          goto LABEL_76;
      }
      if (v62 != 125)
        break;
      v46 = *((_QWORD *)regexp + 1);
      v67 = *(_QWORD *)(v46 + 192);
      if (!v67 || (v47 = uhash_geti(v67, (uint64_t)statusa)) == 0)
      {
LABEL_135:
        v47 = 0;
        *status = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
      }
LABEL_136:
      icu::UnicodeString::~UnicodeString((void *)v46, (icu::UnicodeString *)statusa);
LABEL_137:
      if (*(int *)status > 0)
      {
        v18 = v76;
        v17 = v77;
        goto LABEL_149;
      }
      v18 = v76;
      if (v77)
        v68 = &v77[v15];
      else
        v68 = 0;
      v15 += uregex_group(regexp, v47, v68, (v76 - v15) & ~(((int)v76 - v15) >> 31), status);
      if (*status == U_BUFFER_OVERFLOW_ERROR)
      {
        *status = U_ZERO_ERROR;
        v17 = v77;
        goto LABEL_144;
      }
      v17 = v77;
      if (*(int *)status > 0)
        goto LABEL_149;
LABEL_144:
      v32 = offset;
      if (offset >= v9)
        goto LABEL_149;
    }
    *status = U_REGEX_INVALID_CAPTURE_GROUP_NAME;
    goto LABEL_128;
  }
LABEL_149:
  if (v15 >= (int)v18)
  {
    if (*(int *)status <= 0)
    {
      if (v15 == *destCapacity)
        v69 = U_STRING_NOT_TERMINATED_WARNING;
      else
        v69 = U_BUFFER_OVERFLOW_ERROR;
      *status = v69;
    }
  }
  else
  {
    v17[v15] = 0;
  }
  if (v15 >= 1)
  {
    v70 = *destCapacity;
    if (*destCapacity >= 1)
    {
      v71 = *destBuf;
      if (v15 >= (int)v18)
      {
        v72 = 0;
        *destBuf = &v71[v18];
      }
      else
      {
        *destBuf = &v71[v15];
        v72 = v70 - v15;
      }
      *destCapacity = v72;
    }
  }
  if ((v75 & 1) == 0 && *(int *)status <= 0)
  {
    v26 = U_BUFFER_OVERFLOW_ERROR;
    goto LABEL_35;
  }
  return v15;
}

void uregex_appendReplacementUText(URegularExpression *regexp, UText *replacementText, UText *dest, UErrorCode *status)
{
  icu::RegexMatcher::appendReplacement(*((icu::RegexMatcher **)regexp + 5), dest, replacementText, status);
}

int32_t uregex_appendTail_0(URegularExpression *regexp, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)
{
  UErrorCode v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  UErrorCode v13;
  UChar *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  UText *v20;
  int64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  int32_t v25;
  UErrorCode v26;
  UErrorCode statusa;

  v8 = *status;
  if (destCapacity)
    v9 = v8 == U_BUFFER_OVERFLOW_ERROR;
  else
    v9 = 0;
  v10 = !v9;
  if (!v9)
  {
    if (v8 <= U_ZERO_ERROR)
    {
      if (!regexp)
        goto LABEL_30;
      goto LABEL_14;
    }
LABEL_12:
    LODWORD(v11) = 0;
    return v11;
  }
  if (*destCapacity)
    goto LABEL_12;
  *status = U_ZERO_ERROR;
  if (!regexp)
  {
LABEL_30:
    LODWORD(v11) = 0;
    v13 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_31:
    *status = v13;
    return v11;
  }
LABEL_14:
  if (*(_DWORD *)regexp != 1919252592)
    goto LABEL_30;
  v12 = *((_QWORD *)regexp + 6);
  if (!v12 && !*((_BYTE *)regexp + 60))
  {
    LODWORD(v11) = 0;
    v13 = U_REGEX_INVALID_STATE;
    goto LABEL_31;
  }
  LODWORD(v11) = 0;
  v13 = U_ILLEGAL_ARGUMENT_ERROR;
  if (!destBuf || !destCapacity)
    goto LABEL_31;
  LODWORD(v11) = 0;
  v14 = *destBuf;
  v15 = *destCapacity;
  v16 = (int)v15 > 0 && v14 == 0;
  if (v16 || (v15 & 0x80000000) != 0)
    goto LABEL_31;
  v17 = *((_QWORD *)regexp + 5);
  if (v12)
  {
    v18 = 144;
    if (!*(_BYTE *)(v17 + 130))
      v18 = 152;
    v19 = *(_QWORD *)(v17 + v18);
    if (v19 == -1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      v20 = *(UText **)(v17 + 32);
      if (v20->pFuncs->mapNativeIndexToUTF16)
      {
        statusa = U_ZERO_ERROR;
        LODWORD(v19) = utext_extract(v20, 0, v19, 0, 0, &statusa);
      }
    }
    v22 = *((_DWORD *)regexp + 14);
    v11 = (v22 - v19);
    if (v22 != (_DWORD)v19)
    {
      v23 = 0;
      v24 = *((_QWORD *)regexp + 6) + 2 * (int)v19;
      do
      {
        if (v22 == -1 && !*(_WORD *)(v24 + 2 * v23))
        {
          *((_DWORD *)regexp + 14) = v19 + v23;
          LODWORD(v11) = v23;
          break;
        }
        if (v23 >= v15)
        {
          if (v22 >= 1)
          {
            LODWORD(v11) = v22 - v19;
            break;
          }
        }
        else
        {
          v14[v23] = *(_WORD *)(v24 + 2 * v23);
        }
        ++v23;
      }
      while (v11 != v23);
    }
  }
  else
  {
    if (*(_BYTE *)(v17 + 130))
    {
      v21 = *(_QWORD *)(v17 + 144);
    }
    else if (*(_QWORD *)(v17 + 152) == -1)
    {
      v21 = 0;
    }
    else
    {
      v21 = *(_QWORD *)(v17 + 152);
    }
    LODWORD(v11) = utext_extract(*(UText **)(v17 + 32), v21, *(_QWORD *)(v17 + 48), *destBuf, *destCapacity, status);
  }
  if ((int)v11 < (int)v15)
  {
    v14[(int)v11] = 0;
    *destBuf += (int)v11;
    v25 = *destCapacity - v11;
LABEL_59:
    *destCapacity = v25;
    goto LABEL_60;
  }
  if ((_DWORD)v11 == (_DWORD)v15)
    v26 = U_STRING_NOT_TERMINATED_WARNING;
  else
    v26 = U_BUFFER_OVERFLOW_ERROR;
  *status = v26;
  if (*destBuf)
  {
    v25 = 0;
    *destBuf += v15;
    goto LABEL_59;
  }
LABEL_60:
  if ((v10 & 1) == 0 && *(int *)status <= 0)
  {
    v13 = U_BUFFER_OVERFLOW_ERROR;
    goto LABEL_31;
  }
  return v11;
}

UText *__cdecl uregex_appendTailUText(URegularExpression *regexp, UText *dest, UErrorCode *status)
{
  return icu::RegexMatcher::appendTail(*((icu::RegexMatcher **)regexp + 5), dest, status);
}

int32_t uregex_split(URegularExpression *regexp, UChar *destBuf, int32_t destCapacity, int32_t *requiredCapacity, UChar *destFields[], int32_t destFieldsCapacity, UErrorCode *status)
{
  BOOL v7;
  char v8;
  UErrorCode v10;

  if (*(int *)status > 0)
    return 0;
  if (regexp && *(_DWORD *)regexp == 1919252592)
  {
    if (!*((_QWORD *)regexp + 6) && !*((_BYTE *)regexp + 60))
    {
      v10 = U_REGEX_INVALID_STATE;
      goto LABEL_18;
    }
    if (destBuf)
      v7 = 1;
    else
      v7 = destCapacity <= 0;
    v8 = !v7;
    if ((destCapacity & 0x80000000) == 0 && (v8 & 1) == 0 && destFields && destFieldsCapacity > 0)
      return sub_18BDB6A6C((icu::RegexMatcher **)regexp, (uint64_t)destBuf, destCapacity, requiredCapacity, destFields, destFieldsCapacity, status);
  }
  v10 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_18:
  *status = v10;
  return 0;
}

uint64_t sub_18BDB6A6C(icu::RegexMatcher **a1, uint64_t a2, int a3, _DWORD *a4, _QWORD *a5, int a6, UErrorCode *a7)
{
  icu::RegexMatcher *v13;
  int64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  int v21;
  UChar *v22;
  int32_t v23;
  icu::RegexMatcher *v24;
  uint64_t v25;
  int v26;
  UChar *v27;
  int32_t v28;
  BOOL v29;
  uint64_t v30;
  UChar *v31;
  _WORD *v32;
  int v34;
  _DWORD *v35;
  _QWORD *v36;
  int v37;
  int v38;
  int64_t v39;
  _QWORD *v40;
  int64_t v41;
  UText *ut;
  UErrorCode status;

  icu::RegexMatcher::reset(a1[5]);
  v13 = a1[5];
  v14 = *((_QWORD *)v13 + 6);
  if (!v14)
    return 0;
  v35 = a4;
  ut = (UText *)*((_QWORD *)v13 + 4);
  v15 = icu::RegexMatcher::groupCount(v13);
  status = U_ZERO_ERROR;
  v16 = a6 - 1;
  v34 = a6;
  if (a6 < 2)
  {
    v20 = 0;
    v19 = 0;
    LODWORD(v18) = 0;
LABEL_25:
    if (v14 > v20)
    {
      if (v19 != v16)
        v18 = (a5[v16] - *a5) >> 1;
      if (a2)
        v31 = (UChar *)(a2 + 2 * (int)v18);
      else
        v31 = 0;
      a5[v16] = v31;
      LODWORD(v18) = v18 + utext_extract(ut, v20, v14, v31, (a3 - v18) & ~((a3 - (int)v18) >> 31), a7) + 1;
      v19 = v16;
    }
  }
  else
  {
    v17 = v15;
    LODWORD(v18) = 0;
    v19 = 0;
    v37 = 2 - a6;
    v38 = a6 - 1;
    v20 = 0;
    v36 = a5 + 1;
    v39 = v14;
    v40 = a5;
    while (1)
    {
      v21 = icu::RegexMatcher::find(a1[5]);
      if (a2)
        v22 = (UChar *)(a2 + 2 * (int)v18);
      else
        v22 = 0;
      a5[v19] = v22;
      if (!v21)
      {
        LODWORD(v18) = v18 + utext_extract(ut, v20, v14, v22, (a3 - v18) & ~((a3 - (int)v18) >> 31), a7) + 1;
        goto LABEL_40;
      }
      v23 = utext_extract(ut, v20, *((_QWORD *)a1[5] + 17), v22, (a3 - v18) & ~((a3 - (int)v18) >> 31), &status);
      if (status == U_BUFFER_OVERFLOW_ERROR)
        status = U_ZERO_ERROR;
      else
        *a7 = status;
      LODWORD(v18) = v18 + v23 + 1;
      v24 = a1[5];
      v20 = *((_QWORD *)v24 + 18);
      if (v19 != v16 && v17 >= 1)
      {
        v41 = *((_QWORD *)v24 + 18);
        v25 = 0;
        do
        {
          v26 = v25 + 1;
          v27 = (UChar *)(a2 + 2 * (int)v18);
          v36[v19 + v25] = v27;
          status = U_ZERO_ERROR;
          v28 = uregex_group((URegularExpression *)a1, v25 + 1, v27, (a3 - v18) & ~((a3 - (int)v18) >> 31), &status);
          if (status == U_BUFFER_OVERFLOW_ERROR)
            status = U_ZERO_ERROR;
          else
            *a7 = status;
          LODWORD(v18) = v18 + v28 + 1;
          v29 = v37 + v19 + (_DWORD)v25++ == 0;
        }
        while (!v29 && v26 < v17);
        v19 += v25;
        v14 = v39;
        a5 = v40;
        v16 = v38;
        v20 = v41;
      }
      if (v20 == v14)
        break;
      if (++v19 >= v16)
        goto LABEL_25;
    }
    if ((int)v18 >= a3)
    {
      if (v19 < v16)
        ++v19;
    }
    else
    {
      v32 = (_WORD *)(a2 + 2 * (int)v18);
      *v32 = 0;
      if (v19 < v16)
        ++v19;
      a5[v19] = v32;
    }
    LODWORD(v18) = v18 + 1;
  }
LABEL_40:
  v30 = (v19 + 1);
  if ((int)v30 < v34)
    bzero(&a5[v19 + 1], 8 * (v34 - v19 - 2) + 8);
  if (v35)
    *v35 = v18;
  if ((int)v18 > a3)
    *a7 = U_BUFFER_OVERFLOW_ERROR;
  return v30;
}

int32_t uregex_splitUText(URegularExpression *regexp, UText *destFields[], int32_t destFieldsCapacity, UErrorCode *status)
{
  icu::RegexMatcher *v7;
  UText *v8;

  v7 = (icu::RegexMatcher *)*((_QWORD *)regexp + 5);
  v8 = (UText *)icu::RegexMatcher::inputText(v7);
  return icu::RegexMatcher::split((int64_t *)v7, v8, destFields, destFieldsCapacity, status);
}

URegularExpression *__cdecl uregex_openC(const char *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)
{
  URegularExpression *v4;
  const UChar *v8;
  int32_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(int *)status > 0)
    return 0;
  if (pattern)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v12, pattern);
    if ((BYTE8(v12) & 0x11) != 0)
    {
      v8 = 0;
    }
    else if ((BYTE8(v12) & 2) != 0)
    {
      v8 = (const UChar *)((unint64_t)&v12 | 0xA);
    }
    else
    {
      v8 = (const UChar *)*((_QWORD *)&v13 + 1);
    }
    if ((SWORD4(v12) & 0x8000u) == 0)
      v9 = WORD4(v12) >> 5;
    else
      v9 = HIDWORD(v12);
    v4 = uregex_open(v8, v9, flags, pe, status);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
  }
  else
  {
    v4 = 0;
    *status = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v4;
}

_OWORD *uregion_getAvailable(int a1, icu::Region *a2)
{
  uint64_t *Available;

  Available = icu::Region::getAvailable(a1, a2);
  return uenum_openFromStringEnumeration((uint64_t)Available, (int *)a2);
}

BOOL uregion_areEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

_OWORD *uregion_getContainedRegions(unsigned int **a1, UErrorCode *a2)
{
  uint64_t *ContainedRegions;

  ContainedRegions = icu::Region::getContainedRegions(a1, a2);
  return uenum_openFromStringEnumeration((uint64_t)ContainedRegions, (int *)a2);
}

_OWORD *uregion_getContainedRegionsOfType(unsigned int **a1, int a2, icu::Region *a3)
{
  uint64_t *ContainedRegions;

  ContainedRegions = icu::Region::getContainedRegions(a1, a2, a3);
  return uenum_openFromStringEnumeration((uint64_t)ContainedRegions, (int *)a3);
}

_OWORD *uregion_getPreferredValues(unsigned int **a1, UErrorCode *a2)
{
  uint64_t *PreferredValues;

  PreferredValues = icu::Region::getPreferredValues(a1, a2);
  return uenum_openFromStringEnumeration((uint64_t)PreferredValues, (int *)a2);
}

_QWORD *usearch_open(const UChar *a1, int32_t a2, const UChar *a3, int32_t a4, char *a5, uint64_t a6, const icu::Locale *a7)
{
  _QWORD *result;
  icu::RuleBasedCollator *v14;

  if (*(int *)a7 > 0)
    return 0;
  if (a5)
  {
    v14 = ucol_open(a5, a7);
    result = usearch_openFromCollator(a1, a2, a3, a4, v14, a6, (int *)a7);
    if (!result || *(int *)a7 >= 1)
    {
      if (v14)
        ucol_close((uint64_t)v14);
      return 0;
    }
    *((_BYTE *)result + 3168) = 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)a7 = 1;
  }
  return result;
}

_QWORD *usearch_openFromCollator(const UChar *a1, int32_t a2, const UChar *a3, int32_t a4, icu::RuleBasedCollator *a5, uint64_t a6, int *a7)
{
  _QWORD *v7;
  UErrorCode *v15;
  int v16;
  _QWORD *v17;
  int Strength;
  int v19;
  UErrorCode *v20;
  _DWORD *v22;
  uint64_t v23;

  if (*a7 > 0)
    return 0;
  if (!a1 || !a3 || !a5)
    goto LABEL_24;
  if (ucol_getAttribute((uint64_t)a5, 7, a7) == 17)
  {
    v7 = 0;
    v16 = 16;
LABEL_25:
    *a7 = v16;
    return v7;
  }
  if (*a7 > 0)
    return 0;
  if (!qword_1ECD28448)
  {
    qword_1ECD28448 = icu::Normalizer2Factory::getNFCImpl((icu::Normalizer2Factory *)a7, v15);
    sub_18BDA1768(0x1Au, (uint64_t)sub_18BDB97E4);
    if (*a7 > 0)
      return 0;
  }
  if (a4 == -1)
    a4 = u_strlen(a3);
  if (a2 == -1)
    a2 = u_strlen(a1);
  if (a4 < 1 || a2 <= 0)
  {
LABEL_24:
    v7 = 0;
    v16 = 1;
    goto LABEL_25;
  }
  v17 = uprv_malloc(0xC78uLL);
  v7 = v17;
  if (!v17)
  {
    v16 = 7;
    goto LABEL_25;
  }
  v17[391] = a5;
  Strength = ucol_getStrength((uint64_t)a5);
  *((_DWORD *)v7 + 793) = Strength;
  if (Strength == 1)
    v19 = -256;
  else
    v19 = -1;
  if (!Strength)
    v19 = -65536;
  *((_DWORD *)v7 + 794) = v19;
  *((_BYTE *)v7 + 3184) = ucol_getAttribute((uint64_t)a5, 1, a7) == 20;
  *((_DWORD *)v7 + 795) = ucol_getVariableTop((uint64_t)a5, a7);
  v7[392] = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a7, v20);
  if (*a7 >= 1)
  {
LABEL_23:
    uprv_free(v7);
    return 0;
  }
  v22 = uprv_malloc(0x30uLL);
  *v7 = v22;
  if (!v22)
  {
    *a7 = 7;
    goto LABEL_23;
  }
  *(_QWORD *)v22 = a3;
  v22[2] = a4;
  v7[1] = a1;
  *((_DWORD *)v7 + 4) = a2;
  v7[3] = 0;
  v7[133] = 0;
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = a6;
  if (a6)
  {
    ubrk_setText(a6, a3, a4, (UErrorCode *)a7);
    v22 = (_DWORD *)*v7;
  }
  *((_BYTE *)v7 + 3168) = 0;
  *((_QWORD *)v22 + 4) = 0xFFFFFFFFLL;
  v7[395] = 0;
  v7[393] = ucol_openElements(a5, (uint64_t)a3, a4, a7);
  v7[394] = 0;
  if (*a7 >= 1
    || (v23 = *v7,
        *(_DWORD *)(v23 + 12) = 0,
        *(_WORD *)(v23 + 40) = 257,
        sub_18BDB7344((uint64_t)v7, (UErrorCode *)a7),
        *a7 >= 1))
  {
    usearch_close((char *)v7);
    return 0;
  }
  return v7;
}

void usearch_close(char *a1)
{
  char *v2;
  char *v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  if (a1)
  {
    v2 = (char *)*((_QWORD *)a1 + 3);
    if (v2 != a1 + 32 && v2 != 0)
      uprv_free(v2);
    v4 = (char *)*((_QWORD *)a1 + 133);
    if (v4)
      v5 = v4 == a1 + 1072;
    else
      v5 = 1;
    if (!v5)
      uprv_free(v4);
    v6 = (_QWORD *)*((_QWORD *)a1 + 394);
    if (v6)
    {
      v7 = sub_18BDA5000(v6);
      icu::UMemory::operator delete(v7);
    }
    ucol_closeElements(*((icu::CollationElementIterator **)a1 + 393));
    ucol_closeElements(*((icu::CollationElementIterator **)a1 + 395));
    if (a1[3168])
    {
      v8 = *((_QWORD *)a1 + 391);
      if (v8)
        ucol_close(v8);
    }
    v9 = *(void **)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 16))
    {
      ubrk_close(*(_QWORD *)(*(_QWORD *)a1 + 16));
      v9 = *(void **)a1;
    }
    uprv_free(v9);
    uprv_free(a1);
  }
}

uint64_t sub_18BDB7344(uint64_t result, UErrorCode *a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  void *v9;
  int v10;
  icu::CollationElementIterator *v11;
  void *v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  unsigned int v16;
  _DWORD *v18;
  uint64_t v19;
  UErrorCode v20;
  int v21;
  unsigned __int16 *v22;

  if (*(int *)a2 <= 0)
  {
    v3 = result;
    if (*(_DWORD *)(result + 3172))
    {
      v4 = *(unsigned __int16 **)(result + 8);
      v5 = *(int *)(result + 16);
      v22 = v4;
      *(_BYTE *)(result + 3120) = (unsigned __int16)sub_18BDB97F4(qword_1ECD28448, &v22, &v4[v5]) >> 8;
      v6 = v5 - 1;
      if ((v4[v5 - 1] & 0xFC00) == 0xDC00 && (int)v5 >= 2)
      {
        if ((v4[(v5 - 2)] & 0xFC00) == 0xD800)
          v6 = (v5 - 2);
        else
          v6 = v6;
      }
      v22 = &v4[v6];
      v8 = sub_18BDB97F4(qword_1ECD28448, &v22, &v4[v5]);
    }
    else
    {
      v8 = 0;
      *(_BYTE *)(v3 + 3120) = 0;
    }
    *(_BYTE *)(v3 + 3121) = v8;
    v9 = *(void **)(v3 + 1064);
    if (v9)
    {
      if (v9 != (void *)(v3 + 1072))
        uprv_free(v9);
      *(_QWORD *)(v3 + 1064) = 0;
    }
    v10 = *(_DWORD *)(v3 + 16);
    v11 = *(icu::CollationElementIterator **)(v3 + 3160);
    if (v11)
    {
      result = (uint64_t)ucol_setText(*(uint64_t **)(v3 + 3160), *(_QWORD *)(v3 + 8), *(_DWORD *)(v3 + 16), a2);
    }
    else
    {
      result = (uint64_t)ucol_openElements(*(icu::RuleBasedCollator **)(v3 + 3128), *(_QWORD *)(v3 + 8), *(_DWORD *)(v3 + 16), (int *)a2);
      v11 = (icu::CollationElementIterator *)result;
      *(_QWORD *)(v3 + 3160) = result;
    }
    if (*(int *)a2 <= 0)
    {
      v12 = *(void **)(v3 + 24);
      if (v12 != (void *)(v3 + 32) && v12)
        uprv_free(v12);
      result = ucol_next(v11, a2);
      if ((_DWORD)result != -1)
      {
        v13 = 0;
        v21 = v10 + 1;
        v14 = 256;
        v15 = (_DWORD *)(v3 + 32);
        while (1)
        {
          if (*(int *)a2 > 0)
          {
            v18 = v15;
            LODWORD(v19) = v13;
            goto LABEL_49;
          }
          v16 = *(_DWORD *)(v3 + 3176) & result;
          if (*(_BYTE *)(v3 + 3184))
          {
            if (*(_DWORD *)(v3 + 3180) > v16)
            {
              if (*(int *)(v3 + 3172) <= 2)
                goto LABEL_35;
              v16 &= 0xFFFF0000;
            }
          }
          else if (*(int *)(v3 + 3172) >= 3 && v16 == 0)
          {
            v16 = 0xFFFF;
            goto LABEL_37;
          }
          if (!v16)
          {
LABEL_35:
            v18 = v15;
            v19 = v13;
            goto LABEL_45;
          }
LABEL_37:
          result = ucol_getOffset(v11);
          v19 = (v13 + 1);
          if ((_DWORD)v19 == v14)
          {
            v14 = v21 + v14 - result;
            result = (uint64_t)uprv_malloc((4 * v14));
            if (!result)
            {
              *a2 = U_MEMORY_ALLOCATION_ERROR;
              return result;
            }
            if (*(int *)a2 > 0)
              return result;
            v18 = (_DWORD *)result;
            memcpy((void *)result, v15, 4 * v13);
            v18[v13] = v16;
          }
          else
          {
            v20 = *a2;
            v15[v13] = v16;
            v18 = v15;
            if (v20 > U_ZERO_ERROR)
              return result;
          }
          if (v15 != v18 && v15 != (_DWORD *)(v3 + 32))
            uprv_free(v15);
LABEL_45:
          result = ucol_next(v11, a2);
          v13 = v19;
          v15 = v18;
          if ((_DWORD)result == -1)
            goto LABEL_49;
        }
      }
      LODWORD(v19) = 0;
      v18 = (_DWORD *)(v3 + 32);
LABEL_49:
      v18[v19] = 0;
      *(_QWORD *)(v3 + 24) = v18;
      *(_DWORD *)(v3 + 20) = v19;
    }
  }
  return result;
}

double usearch_setOffset(uint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v4;
  double result;

  if (a1 && *(int *)a3 <= 0)
  {
    v4 = *a1;
    if ((a2 & 0x80000000) != 0 || *(_DWORD *)(v4 + 8) < (int)a2)
    {
      *a3 = U_INDEX_OUTOFBOUNDS_ERROR;
    }
    else
    {
      ucol_setOffset(a1[393], a2, a3);
      v4 = *a1;
    }
    *(_QWORD *)&result = 0xFFFFFFFFLL;
    *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
    *(_BYTE *)(v4 + 41) = 0;
  }
  return result;
}

uint64_t usearch_getOffset(_QWORD *a1)
{
  uint64_t v1;
  int Offset;

  v1 = 0xFFFFFFFFLL;
  if (a1)
  {
    Offset = ucol_getOffset(a1[393]);
    if (Offset > *(_DWORD *)(*a1 + 8) || Offset <= -1)
      return 0xFFFFFFFFLL;
    else
      return Offset;
  }
  return v1;
}

uint64_t usearch_setAttribute(uint64_t result, int a2, int a3, int *a4)
{
  if (result && *a4 <= 0)
  {
    if (a2 == 2)
    {
      if ((a3 - 3) <= 1)
      {
        *(_WORD *)(*(_QWORD *)result + 14) = a3;
        return result;
      }
      *(_WORD *)(*(_QWORD *)result + 14) = 0;
    }
    else if (a2 == 1)
    {
      *(_BYTE *)(*(_QWORD *)result + 13) = a3 == 1;
    }
    else if (a2)
    {
      *a4 = 1;
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)result + 12) = a3 == 1;
    }
  }
  if (a3 == 5)
    *a4 = 1;
  return result;
}

uint64_t usearch_getAttribute(uint64_t a1, int a2)
{
  int v2;
  __int16 v4;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      v2 = *(unsigned __int8 *)(*(_QWORD *)a1 + 13);
      return v2 != 0;
    }
    if (!a2)
    {
      v2 = *(unsigned __int8 *)(*(_QWORD *)a1 + 12);
      return v2 != 0;
    }
    return 0xFFFFFFFFLL;
  }
  v4 = *(_WORD *)(*(_QWORD *)a1 + 14);
  if (((v4 - 3) & 0xFFFE) != 0)
    return 2;
  return v4;
}

uint64_t usearch_getMatchedStart(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(*(_QWORD *)a1 + 32);
  else
    return 0xFFFFFFFFLL;
}

uint64_t usearch_getMatchedText(uint64_t *a1, void *__dst, int a3, int *a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (*a4 > 0)
    return 0xFFFFFFFFLL;
  if (!a1 || a3 < 0 || !__dst && a3)
  {
    *a4 = 1;
    return 0xFFFFFFFFLL;
  }
  v9 = *a1;
  v10 = *(int *)(*a1 + 32);
  if ((_DWORD)v10 == -1)
  {
    u_terminateUChars((uint64_t)__dst, a3, 0, a4);
    return 0xFFFFFFFFLL;
  }
  v11 = *(unsigned int *)(v9 + 36);
  if ((int)v11 >= a3)
    v12 = a3;
  else
    v12 = *(_DWORD *)(v9 + 36);
  if (v12 >= 1)
  {
    memcpy(__dst, (const void *)(*(_QWORD *)v9 + 2 * v10), 2 * v12);
    v11 = *(unsigned int *)(*a1 + 36);
  }
  return u_terminateUChars((uint64_t)__dst, a3, v11, a4);
}

uint64_t usearch_getMatchedLength(uint64_t a1)
{
  if (a1)
    return *(unsigned int *)(*(_QWORD *)a1 + 36);
  else
    return 0xFFFFFFFFLL;
}

uint64_t usearch_setBreakIterator(uint64_t result, uint64_t a2, UErrorCode *a3)
{
  uint64_t v3;

  if (result && *(int *)a3 <= 0)
  {
    v3 = *(_QWORD *)result;
    *(_QWORD *)(*(_QWORD *)result + 24) = a2;
    if (a2)
      return ubrk_setText(a2, *(const UChar **)v3, *(_DWORD *)(v3 + 8), a3);
  }
  return result;
}

uint64_t usearch_getBreakIterator(uint64_t result)
{
  if (result)
    return *(_QWORD *)(*(_QWORD *)result + 24);
  return result;
}

uint64_t usearch_setText(uint64_t result, UChar *s, int a3, UErrorCode *a4)
{
  int32_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(int *)a4 <= 0)
  {
    v5 = a3;
    if (a3 && (v6 = result) != 0 && s && a3 > -2)
    {
      if (a3 == -1)
        v5 = u_strlen(s);
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v8 = s;
      *(_DWORD *)(v8 + 8) = v5;
      ucol_setText(*(uint64_t **)(v6 + 3144), (uint64_t)s, v5, a4);
      v9 = *(_QWORD *)v6;
      *(_QWORD *)(v9 + 32) = 0xFFFFFFFFLL;
      *(_BYTE *)(v9 + 41) = 1;
      v10 = *(_QWORD *)(v9 + 24);
      if (v10)
      {
        ubrk_setText(v10, s, v5, a4);
        v9 = *(_QWORD *)v6;
      }
      result = *(_QWORD *)(v9 + 16);
      if (result)
        return ubrk_setText(result, s, v5, a4);
    }
    else
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return result;
}

uint64_t *usearch_getText(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *result;
    *a2 = *(_DWORD *)(*result + 8);
    return *(uint64_t **)v2;
  }
  return result;
}

uint64_t usearch_setCollator(uint64_t result, icu::RuleBasedCollator *a2, int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int Strength;
  int v10;
  uint64_t v11;

  if (*a3 <= 0)
  {
    if (a2)
    {
      v5 = result;
      if (result)
      {
        v6 = *(_QWORD **)(result + 3152);
        if (v6)
        {
          v7 = sub_18BDA5000(v6);
          icu::UMemory::operator delete(v7);
        }
        *(_QWORD *)(v5 + 3152) = 0;
        ucol_closeElements(*(icu::CollationElementIterator **)(v5 + 3144));
        ucol_closeElements(*(icu::CollationElementIterator **)(v5 + 3160));
        *(_QWORD *)(v5 + 3160) = 0;
        *(_QWORD *)(v5 + 3144) = 0;
        if (*(_BYTE *)(v5 + 3168))
        {
          v8 = *(_QWORD *)(v5 + 3128);
          if ((icu::RuleBasedCollator *)v8 != a2)
          {
            ucol_close(v8);
            *(_BYTE *)(v5 + 3168) = 0;
          }
        }
        *(_QWORD *)(v5 + 3128) = a2;
        Strength = ucol_getStrength((uint64_t)a2);
        *(_DWORD *)(v5 + 3172) = Strength;
        if (Strength == 1)
          v10 = -256;
        else
          v10 = -1;
        if (!Strength)
          v10 = -65536;
        *(_DWORD *)(v5 + 3176) = v10;
        v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
        if (v11)
        {
          ubrk_close(v11);
          *(_QWORD *)(*(_QWORD *)v5 + 16) = 0;
        }
        *(_BYTE *)(v5 + 3184) = ucol_getAttribute((uint64_t)a2, 1, a3) == 20;
        *(_DWORD *)(v5 + 3180) = ucol_getVariableTop((uint64_t)a2, a3);
        *(_QWORD *)(v5 + 3144) = ucol_openElements(a2, **(_QWORD **)v5, *(_DWORD *)(*(_QWORD *)v5 + 8), a3);
        *(_QWORD *)(v5 + 3160) = ucol_openElements(a2, *(_QWORD *)(v5 + 8), *(_DWORD *)(v5 + 16), a3);
        return sub_18BDB7344(v5, (UErrorCode *)a3);
      }
    }
    else
    {
      *a3 = 1;
    }
  }
  return result;
}

uint64_t usearch_getCollator(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 3128);
  return result;
}

uint64_t usearch_setPattern(uint64_t result, UChar *s, int a3, UErrorCode *a4)
{
  uint64_t v5;

  if (*(int *)a4 <= 0)
  {
    v5 = result;
    if (result && s)
    {
      if (a3 == -1)
      {
        result = u_strlen(s);
        a3 = result;
        if ((_DWORD)result)
          goto LABEL_6;
      }
      else if (a3)
      {
LABEL_6:
        *(_QWORD *)(v5 + 8) = s;
        *(_DWORD *)(v5 + 16) = a3;
        return sub_18BDB7344(v5, a4);
      }
    }
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return result;
}

uint64_t usearch_getPattern(uint64_t result, _DWORD *a2)
{
  if (result)
  {
    *a2 = *(_DWORD *)(result + 16);
    return *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t usearch_first(uint64_t *a1, UErrorCode *a2)
{
  if (a1 && *(int *)a2 <= 0 && (*(_BYTE *)(*a1 + 40) = 1, usearch_setOffset(a1, 0, a2), *(int *)a2 <= 0))
    return usearch_next(a1, a2);
  else
    return 0xFFFFFFFFLL;
}

uint64_t usearch_next(uint64_t *a1, UErrorCode *a2)
{
  uint64_t result;
  int Offset;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;

  result = 0xFFFFFFFFLL;
  if (!a1 || *(int *)a2 > 0)
    return result;
  Offset = ucol_getOffset(a1[393]);
  v6 = (uint64_t *)*a1;
  v7 = *(unsigned int *)(*a1 + 8);
  if (Offset > (int)v7 || Offset <= -1)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = Offset;
  *((_BYTE *)v6 + 41) = 0;
  if (*((_BYTE *)v6 + 40))
  {
    if ((_DWORD)v9 == (_DWORD)v7
      || !*((_BYTE *)v6 + 12) && *((_DWORD *)v6 + 8) != -1 && *((_DWORD *)v6 + 9) + (int)v9 > (int)v7)
    {
      v16 = 0;
      v6[4] = 0xFFFFFFFFLL;
      ucol_setOffset(a1[393], v7, (UErrorCode *)&v16);
      if (*(int *)a2 <= 0 && v16 >= 1)
        *a2 = v16;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *((_BYTE *)v6 + 40) = 1;
    result = *((unsigned int *)v6 + 8);
    if ((_DWORD)result != -1)
      return result;
  }
  if (*(int *)a2 > 0)
    return 0xFFFFFFFFLL;
  if (!*((_DWORD *)a1 + 5))
  {
    v12 = *((int *)v6 + 8);
    if ((_DWORD)v12 != -1)
    {
      v13 = *v6;
      v9 = (v12 + 1);
      *((_DWORD *)v6 + 8) = v9;
      v14 = (*(_WORD *)(v13 + 2 * v12) & 0xFC00) != 0xD800 || (_DWORD)v9 == (_DWORD)v7;
      if (v14 || (*(_WORD *)(v13 + 2 * (int)v9) & 0xFC00) != 0xDC00)
      {
LABEL_33:
        *((_DWORD *)v6 + 9) = 0;
        ucol_setOffset(a1[393], v9, a2);
        if (*((_DWORD *)v6 + 8) == (_DWORD)v7)
          *((_DWORD *)v6 + 8) = -1;
        goto LABEL_39;
      }
      v9 = (v12 + 2);
    }
    *((_DWORD *)v6 + 8) = v9;
    goto LABEL_33;
  }
  v10 = *((_DWORD *)v6 + 9);
  if (v10 < 1)
  {
    *((_DWORD *)v6 + 8) = v9 - 1;
  }
  else
  {
    if (*((_BYTE *)v6 + 12))
      v11 = (v9 + 1);
    else
      v11 = (v10 + v9);
    ucol_setOffset(a1[393], v11, a2);
  }
  sub_18BDB81A4(a1, a2);
LABEL_39:
  if (*(int *)a2 > 0)
    return 0xFFFFFFFFLL;
  v15 = *((unsigned int *)v6 + 8);
  if ((_DWORD)v15 == -1)
    v15 = *((unsigned int *)v6 + 2);
  ucol_setOffset(a1[393], v15, a2);
  return *((unsigned int *)v6 + 8);
}

uint64_t usearch_following(uint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  if (a1 && *(int *)a3 <= 0 && (*(_BYTE *)(*a1 + 40) = 1, usearch_setOffset(a1, a2, a3), *(int *)a3 <= 0))
    return usearch_next(a1, a3);
  else
    return 0xFFFFFFFFLL;
}

uint64_t usearch_last(unint64_t *a1, UErrorCode *a2)
{
  unint64_t v4;

  if (a1
    && *(int *)a2 <= 0
    && (v4 = *a1,
        *(_BYTE *)(v4 + 40) = 0,
        usearch_setOffset((uint64_t *)a1, *(unsigned int *)(v4 + 8), a2),
        *(int *)a2 <= 0))
  {
    return usearch_previous(a1, a2);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t usearch_previous(unint64_t *a1, UErrorCode *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  int Offset;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v18;

  result = 0xFFFFFFFFLL;
  if (a1 && *(int *)a2 <= 0)
  {
    v5 = *a1;
    if (*(_BYTE *)(*a1 + 41))
    {
      v6 = *(unsigned int *)(v5 + 8);
      *(_WORD *)(v5 + 40) = 0;
      ucol_setOffset(a1[393], v6, a2);
    }
    else
    {
      Offset = ucol_getOffset(a1[393]);
      if (Offset > *(_DWORD *)(*a1 + 8) || Offset <= -1)
        LODWORD(v6) = -1;
      else
        LODWORD(v6) = Offset;
    }
    result = *(unsigned int *)(v5 + 32);
    if (*(_BYTE *)(v5 + 40))
    {
      *(_BYTE *)(v5 + 40) = 0;
      if ((_DWORD)result != -1)
        return result;
    }
    else
    {
      if ((_DWORD)v6)
        v9 = (_DWORD)result == 0;
      else
        v9 = 1;
      if (v9)
      {
        v18 = 0;
        v10 = *a1;
        *(_QWORD *)(v10 + 32) = 0xFFFFFFFFLL;
        if (*(_BYTE *)(v10 + 40))
          v11 = *(unsigned int *)(v10 + 8);
        else
          v11 = 0;
        ucol_setOffset(a1[393], v11, (UErrorCode *)&v18);
        if (*(int *)a2 <= 0 && v18 >= 1)
          *a2 = v18;
        return 0xFFFFFFFFLL;
      }
    }
    if (*(int *)a2 <= 0)
    {
      if (*((_DWORD *)a1 + 5))
      {
        sub_18BDB826C((uint64_t)a1, a2);
      }
      else
      {
        v12 = (_DWORD)result == -1 ? v6 : result;
        *(_DWORD *)(v5 + 32) = v12;
        if (v12)
        {
          v13 = *(_QWORD *)v5;
          v14 = (v12 - 1);
          *(_DWORD *)(v5 + 32) = v14;
          v15 = __OFSUB__(v12, 2);
          v16 = (v12 - 2);
          if ((int)v16 < 0 == v15
            && (*(_WORD *)(v13 + 2 * (int)v14) & 0xFC00) == 56320
            && (*(_WORD *)(v13 + 2 * v16) & 0xFC00) == 0xD800)
          {
            *(_DWORD *)(v5 + 32) = v16;
            v14 = v16;
          }
          ucol_setOffset(a1[393], v14, a2);
          *(_DWORD *)(v5 + 36) = 0;
        }
        else
        {
          sub_18BDB8134((uint64_t *)a1, (int *)a2);
        }
      }
      if (*(int *)a2 <= 0)
        return *(unsigned int *)(v5 + 32);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t usearch_preceding(unint64_t *a1, uint64_t a2, UErrorCode *a3)
{
  if (a1 && *(int *)a3 <= 0 && (*(_BYTE *)(*a1 + 40) = 0, usearch_setOffset((uint64_t *)a1, a2, a3), *(int *)a3 <= 0))
    return usearch_previous(a1, a3);
  else
    return 0xFFFFFFFFLL;
}

unint64_t sub_18BDB8134(uint64_t *a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t result;
  int v7;

  v7 = 0;
  v3 = *a1;
  *(_QWORD *)(v3 + 32) = 0xFFFFFFFFLL;
  v4 = a1[393];
  if (*(_BYTE *)(v3 + 40))
    v5 = *(unsigned int *)(v3 + 8);
  else
    v5 = 0;
  result = ucol_setOffset(v4, v5, (UErrorCode *)&v7);
  if (*a2 <= 0 && v7 >= 1)
    *a2 = v7;
  return result;
}

uint64_t sub_18BDB81A4(uint64_t *a1, UErrorCode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Offset;
  uint64_t v7;
  int v8;
  int v10;
  int v11;
  int v12;

  if (*(int *)a2 < 1
    && (Offset = ucol_getOffset(a1[393]),
        v10 = -1,
        v11 = -1,
        usearch_search((uint64_t)a1, Offset, &v11, &v10, a2)))
  {
    v7 = *a1;
    v8 = v10 - v11;
    *(_DWORD *)(v7 + 32) = v11;
    *(_DWORD *)(v7 + 36) = v8;
    return 1;
  }
  else
  {
    v12 = 0;
    v4 = *a1;
    *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
    if (*(_BYTE *)(v4 + 40))
      v5 = *(unsigned int *)(v4 + 8);
    else
      v5 = 0;
    ucol_setOffset(a1[393], v5, (UErrorCode *)&v12);
    if (*(int *)a2 <= 0 && v12 >= 1)
      *a2 = v12;
    return 0;
  }
}

uint64_t sub_18BDB826C(uint64_t a1, UErrorCode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t Offset;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (*(int *)a2 >= 1)
    goto LABEL_2;
  v6 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 12))
  {
    v7 = *(_DWORD *)(v6 + 32);
    if (v7 != -1)
    {
      Offset = (v7 + *(_DWORD *)(v6 + 36) - 1);
      goto LABEL_20;
    }
    sub_18BDB89F8(a1, a2);
    if (!sub_18BDB9770(a1, a2))
      goto LABEL_2;
    if (*(int *)(a1 + 1056) > 1)
    {
      v10 = 0;
      do
      {
        if (sub_18BDA5300(*(_QWORD *)(a1 + 3152), 0, 0, a2) == 0x7FFFFFFFFFFFFFFFLL)
          break;
        ++v10;
      }
      while (v10 < *(_DWORD *)(a1 + 1056) - 1);
    }
    if (*(int *)a2 >= 1)
      goto LABEL_2;
  }
  Offset = ucol_getOffset(*(_QWORD *)(a1 + 3144));
LABEL_20:
  v13 = -1;
  v14 = -1;
  if (usearch_searchBackwards(a1, Offset, &v14, &v13, a2))
  {
    v11 = *(_QWORD *)a1;
    v12 = v13 - v14;
    *(_DWORD *)(v11 + 32) = v14;
    *(_DWORD *)(v11 + 36) = v12;
    return 1;
  }
LABEL_2:
  v15 = 0;
  v4 = *(_QWORD *)a1;
  *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
  if (*(_BYTE *)(v4 + 40))
    v5 = *(unsigned int *)(v4 + 8);
  else
    v5 = 0;
  ucol_setOffset(*(_QWORD *)(a1 + 3144), v5, (UErrorCode *)&v15);
  if (*(int *)a2 <= 0 && v15 >= 1)
    *a2 = v15;
  return 0;
}

double usearch_reset(uint64_t a1)
{
  int Strength;
  int v3;
  BOOL v4;
  _BOOL4 v6;
  int v7;
  int v8;
  int Attribute;
  int VariableTop;
  uint64_t *v11;
  double result;
  int v13;

  if (a1)
  {
    v13 = 0;
    Strength = ucol_getStrength(*(_QWORD *)(a1 + 3128));
    v3 = *(_DWORD *)(a1 + 3172);
    v4 = v3 > 2 || Strength <= 2;
    v6 = 0;
    if (v4 && (v3 < 3 || Strength > 2))
      v6 = 1;
    v7 = ucol_getStrength(*(_QWORD *)(a1 + 3128));
    *(_DWORD *)(a1 + 3172) = v7;
    if (v7 == 1)
      v8 = -256;
    else
      v8 = -1;
    if (!v7)
      v8 = -65536;
    if (*(_DWORD *)(a1 + 3176) != v8)
    {
      v6 = 0;
      *(_DWORD *)(a1 + 3176) = v8;
    }
    Attribute = ucol_getAttribute(*(_QWORD *)(a1 + 3128), 1, &v13);
    if (*(_BYTE *)(a1 + 3184) != (Attribute == 20))
    {
      v6 = 0;
      *(_BYTE *)(a1 + 3184) = Attribute == 20;
    }
    VariableTop = ucol_getVariableTop(*(_QWORD *)(a1 + 3128), &v13);
    if (*(_DWORD *)(a1 + 3180) == VariableTop)
    {
      if (v6)
      {
LABEL_27:
        ucol_setText(*(uint64_t **)(a1 + 3144), **(_QWORD **)a1, *(_DWORD *)(*(_QWORD *)a1 + 8), (UErrorCode *)&v13);
        v11 = *(uint64_t **)a1;
        *(_QWORD *)&result = 0xFFFFFFFFLL;
        v11[4] = 0xFFFFFFFFLL;
        *((_DWORD *)v11 + 3) = 0;
        *((_WORD *)v11 + 20) = 257;
        return result;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 3180) = VariableTop;
    }
    sub_18BDB7344(a1, (UErrorCode *)&v13);
    goto LABEL_27;
  }
  return result;
}

uint64_t usearch_search(uint64_t a1, uint64_t a2, int *a3, int *a4, UErrorCode *a5)
{
  uint64_t v5;
  uint64_t *v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  _BOOL4 v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  void (***v36)(icu::RuleBasedCollator *__hidden);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  uint64_t v41;
  int v42;
  unsigned int v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  uint64_t *v56;
  unsigned int v57;
  int v58;
  int v59;
  _BYTE v60[1536];
  void *v61;

  if (*(int *)a5 > 0)
    return 0;
  if ((a2 & 0x80000000) != 0
    || !*(_DWORD *)(a1 + 20)
    || *(_DWORD *)(*(_QWORD *)a1 + 8) < (int)a2
    || !*(_QWORD *)(a1 + 24))
  {
    v5 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }
  if (!*(_QWORD *)(a1 + 1064))
    sub_18BDB89F8(a1, a5);
  ucol_setOffset(*(_QWORD *)(a1 + 3144), a2, a5);
  bzero(v60, 0x628uLL);
  sub_18BDB8C00((uint64_t)v60, a1, a5);
  if (*(int *)a5 > 0)
  {
    v5 = 0;
    goto LABEL_101;
  }
  v53 = a3;
  v54 = a4;
  v12 = sub_18BDB8CEC((uint64_t)v60, 0);
  if (!v12)
  {
    LODWORD(v16) = -1;
    v55 = -1;
LABEL_83:
    v35 = 0;
    *a5 = U_INTERNAL_PROGRAM_ERROR;
LABEL_84:
    v49 = v54;
    goto LABEL_85;
  }
  v13 = v12;
  v14 = 0;
  v55 = -1;
  v15 = 1;
  LODWORD(v16) = -1;
  while (1)
  {
    v17 = *(_DWORD *)(a1 + 1056);
    if (v17 >= 1)
      break;
    v59 = v15;
    v18 = 0;
    v20 = 0;
LABEL_25:
    v24 = v17 + v18 + v14;
    v25 = sub_18BDB8CEC((uint64_t)v60, v24 - 1);
    v26 = *((unsigned int *)v13 + 2);
    v56 = v25;
    v57 = *((_DWORD *)v25 + 2);
    v27 = *(unsigned __int16 *)(*(_QWORD *)a1 + 14);
    v28 = sub_18BDB8CEC((uint64_t)v60, v24);
    v29 = v28;
    if (v27)
    {
      v30 = *v28;
      if (*v29 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v31 = 1;
        v16 = v26;
        v15 = v59;
LABEL_36:
        v32 = *((unsigned int *)v29 + 2);
      }
      else
      {
        v33 = v17 + v18 + v59;
        v16 = v26;
        v15 = v59;
        while (!HIWORD(v30))
        {
          v34 = sub_18BDB8DA0(v30, v20, *(__int16 *)(*(_QWORD *)a1 + 14)) & 0xFFFFFFFD;
          v31 = v34 != 0;
          if (v34)
          {
            v29 = sub_18BDB8CEC((uint64_t)v60, v33);
            v30 = *v29;
            ++v33;
            if (*v29 != 0x7FFFFFFFFFFFFFFFLL)
              continue;
          }
          goto LABEL_36;
        }
        v32 = *((unsigned int *)v29 + 2);
        v31 = v32 != *((_DWORD *)v29 + 3);
      }
    }
    else
    {
      v32 = *((unsigned int *)v28 + 2);
      v31 = (_DWORD)v32 != *((_DWORD *)v28 + 3) || *v28 == 0x7FFFFFFFFFFFFFFFLL;
      v16 = v26;
      v15 = v59;
    }
    if (sub_18BDB8E6C((void (****)(icu::RuleBasedCollator *__hidden))a1, v16, (int *)a5))
      v35 = v31;
    else
      v35 = 0;
    if (*(int *)a5 > 0)
      goto LABEL_84;
    if ((_DWORD)v16 == *((_DWORD *)v13 + 3))
      v35 = 0;
    v36 = *(void (****)(icu::RuleBasedCollator *__hidden))a1;
    if (**(_QWORD **)a1)
    {
      v37 = v57;
      if (*((_DWORD *)v36 + 2) <= (int)v32
        || v36[3]
        || !*((_WORD *)v29 + 3)
        || (int)v32 < *((_DWORD *)v56 + 3)
        || *((_DWORD *)v29 + 3) <= (int)v32)
      {
        v40 = 0;
      }
      else
      {
        v38 = *(_QWORD *)(a1 + 3136);
        v39 = sub_18BDB8EC0((uint64_t *)v36, v32);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 120))(v38, v39))
        {
          v40 = 1;
        }
        else
        {
          v47 = *(_QWORD *)(a1 + 3136);
          v48 = sub_18BDB8F20(*(uint64_t **)a1, v32);
          v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 128))(v47, v48) != 0;
        }
      }
    }
    else
    {
      v40 = 0;
      v37 = v57;
    }
    v41 = v32;
    if ((int)v37 < (int)v32)
    {
      if ((_DWORD)v37 == *((_DWORD *)v56 + 3)
        && sub_18BDB8E6C((void (****)(icu::RuleBasedCollator *__hidden))a1, v37, (int *)a5))
      {
        v41 = v37;
      }
      else
      {
        v42 = sub_18BDB8F78((void (****)(icu::RuleBasedCollator *__hidden))a1, v37, (int *)a5);
        if (v42 < (int)v32 || !v40)
          v44 = v42;
        else
          v44 = v32;
        if (v42 >= *((_DWORD *)v56 + 3))
          v41 = v44;
        else
          v41 = v32;
      }
    }
    if (*(int *)a5 > 0)
      goto LABEL_87;
    if (!v40)
    {
      v45 = sub_18BDB8E6C((void (****)(icu::RuleBasedCollator *__hidden))a1, v41, (int *)a5);
      if ((int)v41 > (int)v32 || v45 == 0)
        v35 = 0;
      if (*(int *)a5 > 0)
        goto LABEL_87;
    }
    v55 = v41;
    if (sub_18BDB8FCC(a1, v16) && v35)
    {
      v35 = 1;
LABEL_87:
      v50 = v53;
      v49 = v54;
      goto LABEL_88;
    }
LABEL_79:
    v13 = sub_18BDB8CEC((uint64_t)v60, ++v14);
    ++v15;
    if (!v13)
      goto LABEL_83;
  }
  v58 = v16;
  v18 = 0;
  v19 = 0;
  while (1)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 8 * v19);
    v21 = sub_18BDB8CEC((uint64_t)v60, v19 + v14 + v18);
    v22 = *v21;
    v23 = sub_18BDB8DA0(*v21, v20, *(__int16 *)(*(_QWORD *)a1 + 14));
    if (!v23)
      break;
    if (v23 >= 1)
    {
      if (v23 == 1)
      {
        --v19;
        ++v18;
      }
      else
      {
        --v18;
      }
    }
    ++v19;
    v17 = *(_DWORD *)(a1 + 1056);
    if (v19 >= v17)
    {
      v59 = v15;
      goto LABEL_25;
    }
  }
  if (v22 != 0x7FFFFFFFFFFFFFFFLL)
  {
    LODWORD(v16) = v58;
    goto LABEL_79;
  }
  v35 = 0;
  v49 = v54;
  LODWORD(v16) = v58;
LABEL_85:
  v50 = v53;
  LODWORD(v41) = v55;
LABEL_88:
  if (*(int *)a5 >= 1)
    v5 = 0;
  else
    v5 = v35;
  if ((_DWORD)v5)
    v51 = v41;
  else
    v51 = -1;
  if (v50)
  {
    if ((_DWORD)v5)
      v52 = v16;
    else
      v52 = -1;
    *v50 = v52;
  }
  if (v49)
    *v49 = v51;
LABEL_101:
  if (v61 != v60)
    uprv_free(v61);
  return v5;
}

_QWORD *sub_18BDB89F8(uint64_t a1, UErrorCode *a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *result;
  void *v7;
  uint64_t v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  void *v15;
  int Offset;
  void *v17;
  UErrorCode v18;
  unsigned int v19;
  _OWORD v20[18];
  uint64_t v21;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 3160);
  if (v5)
  {
    result = ucol_setText(*(uint64_t **)(a1 + 3160), *(_QWORD *)(a1 + 8), v4, a2);
  }
  else
  {
    result = ucol_openElements(*(icu::RuleBasedCollator **)(a1 + 3128), *(_QWORD *)(a1 + 8), v4, (int *)a2);
    v5 = (uint64_t)result;
    *(_QWORD *)(a1 + 3160) = result;
  }
  if (*(int *)a2 <= 0)
  {
    v7 = *(void **)(a1 + 1064);
    if (v7 != (void *)(a1 + 1072) && v7 != 0)
      uprv_free(v7);
    v21 = 0;
    memset(v20, 0, sizeof(v20));
    sub_18BDA4F3C(v20, v5);
    v9 = sub_18BDA5300((uint64_t)v20, 0, 0, a2);
    if (v9 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v12 = v9;
      v13 = 0;
      v19 = v4 + 1;
      v14 = 256;
      v11 = (void *)(a1 + 1072);
      while (1)
      {
        v15 = v11;
        if (*(int *)a2 > 0)
        {
          v10 = v13;
          goto LABEL_25;
        }
        Offset = ucol_getOffset(v5);
        v10 = v13 + 1;
        if (v13 + 1 == v14)
        {
          v14 = v19 + v14 - Offset;
          v17 = uprv_malloc((8 * v14));
          if (!v17)
          {
            *a2 = U_MEMORY_ALLOCATION_ERROR;
            return sub_18BDA5000(v20);
          }
          if (*(int *)a2 > 0)
            return sub_18BDA5000(v20);
          v11 = v17;
          memcpy(v17, v15, 8 * v13);
          *((_QWORD *)v11 + v13) = v12;
        }
        else
        {
          v18 = *a2;
          *((_QWORD *)v11 + v13) = v12;
          if (v18 > U_ZERO_ERROR)
            return sub_18BDA5000(v20);
        }
        if (v15 != v11 && v15 != (void *)(a1 + 1072))
          uprv_free(v15);
        v12 = sub_18BDA5300((uint64_t)v20, 0, 0, a2);
        ++v13;
        if (v12 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_25;
      }
    }
    v10 = 0;
    v11 = (void *)(a1 + 1072);
LABEL_25:
    *((_QWORD *)v11 + v10) = 0;
    *(_QWORD *)(a1 + 1064) = v11;
    *(_DWORD *)(a1 + 1056) = v10;
    return sub_18BDA5000(v20);
  }
  return result;
}

uint64_t sub_18BDB8C00(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v15;
  uint64_t v16;
  void *v17;

  *(_QWORD *)(a1 + 1536) = a1;
  *(_QWORD *)(a1 + 1568) = a2;
  v5 = *(_DWORD *)(a2 + 1056) + 32;
  *(_DWORD *)(a1 + 1544) = v5;
  if (*(_WORD *)(*(_QWORD *)a2 + 14))
  {
    v6 = *(unsigned __int16 **)(a2 + 8);
    if (v6)
    {
      v7 = *(int *)(a2 + 16);
      if ((int)v7 >= 1)
      {
        v8 = &v6[v7];
        do
        {
          v10 = *v6++;
          v9 = v10;
          v11 = v10 - 4352;
          v12 = (v10 - 12593) >= 0x1E && v11 >= 0x5F;
          v13 = v9 - 12645;
          if (v12 && v13 >= 0x22)
            v15 = 3;
          else
            v15 = 8;
          v5 += v15;
        }
        while (v6 < v8);
        *(_DWORD *)(a1 + 1544) = v5;
      }
    }
  }
  *(_QWORD *)(a1 + 1560) = *(_QWORD *)(a2 + 3144);
  *(_QWORD *)(a1 + 1548) = 0;
  if (sub_18BDB9770(a2, a3))
  {
    v16 = *(unsigned int *)(a1 + 1544);
    if ((int)v16 >= 97)
    {
      v17 = uprv_malloc(16 * v16);
      *(_QWORD *)(a1 + 1536) = v17;
      if (!v17)
        *a3 = 7;
    }
  }
  return a1;
}

uint64_t *sub_18BDB8CEC(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = *(_DWORD *)(a1 + 1544);
  v4 = a2 % v3;
  v5 = *(_DWORD *)(a1 + 1548);
  v6 = *(_DWORD *)(a1 + 1552);
  if (v5 <= a2 && v6 > a2)
    return (uint64_t *)(*(_QWORD *)(a1 + 1536) + 16 * v4);
  if (v6 != a2)
    return 0;
  *(_DWORD *)(a1 + 1552) = a2 + 1;
  if (a2 + 1 - v5 >= v3)
    *(_DWORD *)(a1 + 1548) = v5 + 1;
  v10 = 0;
  v8 = *(_QWORD *)(a1 + 1536) + 16 * v4;
  v9 = sub_18BDA5300(*(_QWORD *)(*(_QWORD *)(a1 + 1568) + 3152), (_DWORD *)(v8 + 8), (_DWORD *)(v8 + 12), (UErrorCode *)&v10);
  result = (uint64_t *)(*(_QWORD *)(a1 + 1536) + 16 * v4);
  *result = v9;
  return result;
}

uint64_t sub_18BDB8DA0(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  int v5;
  int v8;
  unsigned int v9;
  unsigned int v11;
  int v14;

  if (a1 == a2)
    return 0xFFFFFFFFLL;
  if (!a3)
    return 0;
  if ((HIDWORD(a1) & 0xFFFF0000) == (HIDWORD(a2) & 0xFFFF0000))
  {
    if (WORD2(a1) == WORD2(a2))
    {
      v4 = a1 & 0xFFFF0000;
      v5 = a2 & 0xFFFF0000;
      v8 = a3 == 4 && v4 == 327680 || v5 == 327680;
      v9 = v8 << 31 >> 31;
      if (v4 == v5)
        return 0xFFFFFFFFLL;
      else
        return v9;
    }
    else if (WORD2(a1))
    {
      if (a3 != 4 || WORD2(a2))
      {
        v14 = a3 == 4 && WORD2(a1) == 5 || WORD2(a2) == 5;
        return (v14 << 31 >> 31);
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if ((a2 & 0xFFFF000000000000) == 0 && a3 == 4)
      v11 = 2;
    else
      v11 = 0;
    if ((a1 & 0xFFFF000000000000) != 0)
      return v11;
    else
      return 1;
  }
}

uint64_t sub_18BDB8E6C(void (****a1)(icu::RuleBasedCollator *__hidden this), uint64_t a2, int *a3)
{
  char *v4;

  if (*a3 <= 0 && (v4 = sub_18BDB9640(a1, a3), *a3 <= 0))
    return ubrk_isBoundary((uint64_t)v4);
  else
    return 1;
}

uint64_t sub_18BDB8EC0(uint64_t *a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  int v7;

  v2 = *((_DWORD *)a1 + 2);
  if (v2 <= a2)
    return 0xFFFFFFFFLL;
  v3 = *a1;
  v4 = a2 + 1;
  result = *(unsigned __int16 *)(*a1 + 2 * a2);
  if ((result & 0xFC00) == 0xD800 && (_DWORD)v4 != v2)
  {
    v7 = *(unsigned __int16 *)(v3 + 2 * v4);
    if ((v7 & 0xFC00) == 0xDC00)
      return (v7 + ((_DWORD)result << 10) - 56613888);
  }
  return result;
}

uint64_t sub_18BDB8F20(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t result;
  int v4;

  if (a2 < 1)
    return 0xFFFFFFFFLL;
  v2 = *a1;
  result = *(unsigned __int16 *)(*a1 + 2 * (a2 - 1));
  if (a2 != 1 && (result & 0xFC00) == 0xDC00)
  {
    v4 = *(unsigned __int16 *)(v2 + 2 * (a2 - 2));
    if ((v4 & 0xFC00) == 0xD800)
      return (result + (v4 << 10) - 56613888);
  }
  return result;
}

uint64_t sub_18BDB8F78(void (****a1)(icu::RuleBasedCollator *__hidden this), uint64_t a2, int *a3)
{
  char *v5;

  if (*a3 <= 0 && (v5 = sub_18BDB9640(a1, a3), *a3 <= 0))
    return ubrk_following((uint64_t)v5);
  else
    return a2;
}

uint64_t sub_18BDB8FCC(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _BOOL8 v7;
  unint64_t v8;
  int v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE v15[64];
  void (**v16)(icu::UnicodeString *__hidden);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void (**v21)(icu::UnicodeString *__hidden);
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 3172) != 15)
    return 1;
  v14 = 0;
  v22 = 0u;
  v25 = 0;
  v24 = 0u;
  v23 = 0u;
  v21 = off_1E2256B38;
  LOWORD(v22) = 2;
  v17 = 0u;
  v20 = 0;
  v19 = 0u;
  v18 = 0u;
  v16 = off_1E2256B38;
  LOWORD(v17) = 2;
  v3 = *(_QWORD *)(a1 + 3136);
  v13 = **(_QWORD **)a1 + 2 * a2;
  icu::UnicodeString::UnicodeString(v15, 0, &v13);
  (*(void (**)(uint64_t, _BYTE *, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)v3 + 24))(v3, v15, &v21, &v14);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v15);
  v5 = *(_QWORD *)(a1 + 3136);
  v12 = *(_QWORD *)(a1 + 8);
  icu::UnicodeString::UnicodeString(v15, 0, &v12);
  (*(void (**)(uint64_t, _BYTE *, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)v5 + 24))(v5, v15, &v16, &v14);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v15);
  v7 = 0;
  v8 = v14;
  if (v14 <= 0)
  {
    if ((v22 & 1) != 0)
    {
      v8 = (unsigned __int16)v17;
      v7 = v17 & 1;
    }
    else
    {
      v7 = 0;
      if ((v22 & 0x8000u) == 0)
        v9 = (unsigned __int16)v22 >> 5;
      else
        v9 = DWORD1(v22);
      if ((v17 & 0x8000u) == 0)
        v8 = (unsigned __int16)v17 >> 5;
      else
        v8 = DWORD1(v17);
      if ((v17 & 1) == 0 && v9 == (_DWORD)v8)
        v7 = icu::UnicodeString::doEquals((icu::UnicodeString *)&v21, (const icu::UnicodeString *)&v16, v9);
    }
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)&v16);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v21);
  return v7;
}

BOOL usearch_searchBackwards(uint64_t a1, uint64_t a2, int *a3, int *a4, UErrorCode *a5)
{
  _BOOL8 v5;
  char *v11;
  uint64_t v12;
  int v13;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  int v28;
  void (***v29)(icu::RuleBasedCollator *__hidden);
  _BOOL4 v30;
  int v31;
  int v33;
  int v34;
  int v35;
  int v37;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  int v46;
  int *v47;
  int v48;
  uint64_t *v49;
  int v50;
  int v51;
  _BYTE v52[1536];
  void *v53;

  if (*(int *)a5 > 0)
    return 0;
  if ((a2 & 0x80000000) != 0
    || !*(_DWORD *)(a1 + 20)
    || *(_DWORD *)(*(_QWORD *)a1 + 8) < (int)a2
    || !*(_QWORD *)(a1 + 24))
  {
    v5 = 0;
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return v5;
  }
  if (!*(_QWORD *)(a1 + 1064))
    sub_18BDB89F8(a1, a5);
  bzero(v52, 0x628uLL);
  sub_18BDB8C00((uint64_t)v52, a1, a5);
  if (*(_DWORD *)(*(_QWORD *)a1 + 8) <= (int)a2)
  {
    v47 = a4;
    ucol_setOffset(*(_QWORD *)(a1 + 3144), a2, a5);
    v13 = 0;
  }
  else
  {
    v11 = sub_18BDB9640((void (****)(icu::RuleBasedCollator *__hidden))a1, (int *)a5);
    if (*(int *)a5 > 0)
    {
LABEL_18:
      v5 = 0;
      goto LABEL_19;
    }
    v47 = a4;
    v12 = ubrk_following((uint64_t)v11);
    ucol_setOffset(*(_QWORD *)(a1 + 3144), v12, a5);
    v13 = -1;
    do
      ++v13;
    while (*((_DWORD *)sub_18BDB96BC((uint64_t)v52, v13) + 2) >= (int)a2);
  }
  if (*(int *)a5 > 0)
    goto LABEL_18;
  v49 = sub_18BDB96BC((uint64_t)v52, v13);
  if (!v49)
  {
    LODWORD(v16) = -1;
    v15 = -1;
LABEL_86:
    v24 = 0;
    *a5 = U_INTERNAL_PROGRAM_ERROR;
LABEL_88:
    v44 = v47;
    goto LABEL_91;
  }
  v15 = -1;
  LODWORD(v16) = -1;
  while (1)
  {
    v50 = v15;
    v48 = v16;
    v17 = *(_DWORD *)(a1 + 1056);
    if (v17 >= 1)
      break;
    v18 = 0;
LABEL_34:
    v23 = sub_18BDB96BC((uint64_t)v52, v13 - 1 + v18 + v17);
    v16 = *((unsigned int *)v23 + 2);
    v24 = sub_18BDB8E6C((void (****)(icu::RuleBasedCollator *__hidden))a1, v16, (int *)a5) != 0;
    if (*(int *)a5 > 0)
    {
      v44 = v47;
      goto LABEL_90;
    }
    if ((_DWORD)v16 == *((_DWORD *)v23 + 3))
      v24 = 0;
    v25 = *((unsigned int *)v49 + 2);
    if (v13)
    {
      v26 = sub_18BDB96BC((uint64_t)v52, v13 - 1);
      v28 = *((_DWORD *)v26 + 2);
      v27 = *((_DWORD *)v26 + 3);
      if (v28 == v27 && *v26 != 0x7FFFFFFFFFFFFFFFLL)
        v24 = 0;
      v51 = *((_DWORD *)v26 + 2);
      v29 = *(void (****)(icu::RuleBasedCollator *__hidden))a1;
      if (**(_QWORD **)a1 && *((_DWORD *)v29 + 2) > v28 && !v29[3] && *((_WORD *)v26 + 3))
      {
        v30 = 0;
        if (v27 > v28 && v28 >= *((_DWORD *)v49 + 3))
        {
          v40 = *(_QWORD *)(a1 + 3136);
          v41 = sub_18BDB8EC0(*(uint64_t **)a1, v28);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 120))(v40, v41))
          {
            v30 = 1;
          }
          else
          {
            v42 = *(_QWORD *)(a1 + 3136);
            v43 = sub_18BDB8F20(*(uint64_t **)a1, v28);
            v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 128))(v42, v43) != 0;
          }
        }
      }
      else
      {
        v30 = 0;
      }
      if ((int)v25 < v28)
      {
        v31 = sub_18BDB8F78((void (****)(icu::RuleBasedCollator *__hidden))a1, v25, (int *)a5);
        if (v31 < v28 || !v30)
          v33 = v31;
        else
          v33 = v28;
        if (v31 >= *((_DWORD *)v49 + 3))
          v34 = v33;
        else
          v34 = v28;
        v51 = v34;
      }
      if (v30)
      {
        v15 = v51;
      }
      else
      {
        v15 = v51;
        v37 = sub_18BDB8E6C((void (****)(icu::RuleBasedCollator *__hidden))a1, v51, (int *)a5);
        if (v51 > v28 || v37 == 0)
          v24 = 0;
        if (*(int *)a5 >= 1)
          goto LABEL_88;
      }
    }
    else
    {
      v35 = sub_18BDB8F78((void (****)(icu::RuleBasedCollator *__hidden))a1, *((unsigned int *)v49 + 2), (int *)a5);
      if (v35 >= (int)a2 || v35 <= 0)
        v15 = a2;
      else
        v15 = v35;
    }
    if (sub_18BDB8FCC(a1, v16))
      v39 = !v24;
    else
      v39 = 1;
    if (!v39)
    {
      v24 = 1;
      goto LABEL_88;
    }
LABEL_78:
    v49 = sub_18BDB96BC((uint64_t)v52, ++v13);
    if (!v49)
      goto LABEL_86;
  }
  v18 = 0;
  while (1)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 1064) + 8 * (v17 - 1));
    v20 = sub_18BDB96BC((uint64_t)v52, v13 - v17 + v18 + *(_DWORD *)(a1 + 1056));
    v21 = *v20;
    v22 = sub_18BDB8DA0(*v20, v19, *(__int16 *)(*(_QWORD *)a1 + 14));
    if (!v22)
      break;
    if (v22 < 1)
      goto LABEL_30;
    if (v22 != 1)
    {
      --v18;
LABEL_30:
      --v17;
      goto LABEL_31;
    }
    ++v18;
LABEL_31:
    if (v17 <= 0)
    {
      v17 = *(_DWORD *)(a1 + 1056);
      goto LABEL_34;
    }
  }
  if (v21 != 0x7FFFFFFFFFFFFFFFLL)
  {
    LODWORD(v16) = v48;
    v15 = v50;
    goto LABEL_78;
  }
  v24 = 0;
  v44 = v47;
  LODWORD(v16) = v48;
LABEL_90:
  v15 = v50;
LABEL_91:
  v5 = *(int *)a5 < 1 && v24;
  if (v5)
    v45 = v15;
  else
    v45 = -1;
  if (a3)
  {
    if (v5)
      v46 = v16;
    else
      v46 = -1;
    *a3 = v46;
  }
  if (v44)
    *v44 = v45;
LABEL_19:
  if (v53 != v52)
    uprv_free(v53);
  return v5;
}

char *sub_18BDB9640(void (****a1)(icu::RuleBasedCollator *__hidden this), int *a2)
{
  char *result;
  void (***v4)(icu::RuleBasedCollator *__hidden);
  const char *LocaleByType;

  if (*a2 > 0)
    return 0;
  v4 = *a1;
  result = (char *)(*a1)[3];
  if (!result)
  {
    result = (char *)v4[2];
    if (!result)
    {
      LocaleByType = ucol_getLocaleByType(a1[391], 1, a2);
      result = ubrk_open(0, LocaleByType, (const UChar *)**a1, *((_DWORD *)*a1 + 2), (const icu::Locale *)a2);
      (*a1)[2] = (void (**)(icu::RuleBasedCollator *__hidden))result;
    }
  }
  return result;
}

uint64_t *sub_18BDB96BC(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = *(_DWORD *)(a1 + 1544);
  v4 = a2 % v3;
  v5 = *(_DWORD *)(a1 + 1548);
  v6 = *(_DWORD *)(a1 + 1552);
  if (v5 <= a2 && v6 > a2)
    return (uint64_t *)(*(_QWORD *)(a1 + 1536) + 16 * v4);
  if (v6 != a2)
    return 0;
  *(_DWORD *)(a1 + 1552) = a2 + 1;
  if (a2 + 1 - v5 >= v3)
    *(_DWORD *)(a1 + 1548) = v5 + 1;
  v10 = 0;
  v8 = *(_QWORD *)(a1 + 1536) + 16 * v4;
  v9 = sub_18BDA54B0(*(_QWORD *)(*(_QWORD *)(a1 + 1568) + 3152), (_DWORD *)(v8 + 8), (_DWORD *)(v8 + 12), (UErrorCode *)&v10);
  result = (uint64_t *)(*(_QWORD *)(a1 + 1536) + 16 * v4);
  *result = v9;
  return result;
}

uint64_t sub_18BDB9770(uint64_t a1, _DWORD *a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t *)*a2;
  if ((int)v2 > 0)
    return 0;
  v5 = *(_QWORD *)(a1 + 3152);
  if (v5)
  {
    sub_18BDA4F30(v5, *(_QWORD *)(a1 + 3144));
    return 1;
  }
  result = (uint64_t)icu::UMemory::operator new(v2, (icu::UMemory *)0x128, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)(a1 + 3152) = sub_18BDA4F3C((_QWORD *)result, *(_QWORD *)(a1 + 3144));
    return 1;
  }
  *(_QWORD *)(a1 + 3152) = 0;
  *a2 = 7;
  return result;
}

uint64_t sub_18BDB97E4()
{
  qword_1ECD28448 = 0;
  return 1;
}

uint64_t sub_18BDB97F4(uint64_t a1, unsigned __int16 **a2, unsigned __int16 *a3)
{
  unsigned __int16 *v4;
  unint64_t v5;
  unsigned __int16 *v6;
  int v10;

  v4 = *a2;
  v6 = *a2 + 1;
  v5 = **a2;
  *a2 = v6;
  if (v5 < *(unsigned __int16 *)(a1 + 8))
    return 0;
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 56) + (v5 >> 8))
    || ((1 << (v5 >> 5)) & *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + (v5 >> 8))) == 0)
  {
    return 0;
  }
  if ((v5 & 0xFC00) == 0xD800 && v6 != a3)
  {
    v10 = *v6;
    if ((v10 & 0xFC00) == 0xDC00)
    {
      LODWORD(v5) = v10 + ((_DWORD)v5 << 10) - 56613888;
      *a2 = v4 + 2;
    }
  }
  return icu::Normalizer2Impl::getFCD16FromNormData((icu::Normalizer2Impl *)a1, v5);
}

void sub_18BDB9888(UErrorCode *a1)
{
  unsigned int v2;
  unint64_t v3;

  if (*(int *)a1 <= 0)
  {
    v2 = atomic_load(&dword_1EE00A2B8);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A2B8))
    {
      if (dword_1EE00A2BC >= 1)
        *a1 = dword_1EE00A2BC;
    }
    else
    {
      sub_18BDB990C(a1, v3);
      dword_1EE00A2BC = *a1;
      icu::umtx_initImplPostInit(&dword_1EE00A2B8);
    }
  }
}

void sub_18BDB990C(UErrorCode *a1, unint64_t a2)
{
  uint64_t *v3;
  icu::UnicodeSet *v4;
  void *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  icu::UnicodeSet *v9;
  void *v10;
  UErrorCode *v11;
  void *v12;
  _BYTE v13[64];
  uint64_t *v14;

  v14 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v14, (icu::UMemory *)0xC8, a2);
  if (!v3)
  {
    qword_1EE00A2A8 = 0;
    goto LABEL_7;
  }
  v4 = (icu::UnicodeSet *)v3;
  icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)L"['\\-.\\:\\u00B7\\u0375\\u058A\\u05F3\\u05F4\\u06FD\\u06FE\\u0F0B\\u2010\\u2019\\u2027\\u30A0\\u30FB]");
  icu::UnicodeSet::UnicodeSet(v4, (const icu::UnicodeString *)v13, a1);
  qword_1EE00A2A8 = (uint64_t)v4;
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v13);
  if (!qword_1EE00A2A8)
  {
LABEL_7:
    *a1 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_1EE00A2A8);
  v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0xC8, v6);
  if (v8)
  {
    v9 = (icu::UnicodeSet *)v8;
    icu::UnicodeString::UnicodeString((uint64_t)v13, (uint64_t)"[");
    icu::UnicodeSet::UnicodeSet(v9, (const icu::UnicodeString *)v13, a1);
    qword_1EE00A2B0 = (uint64_t)v9;
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v13);
    if (qword_1EE00A2B0)
    {
      icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_1EE00A2B0);
      qword_1EE00A2A0 = icu::Normalizer2::getNFDInstance((icu::Normalizer2 *)a1, v11);
      sub_18BDA1768(3u, (uint64_t)sub_18BDBBB60);
      return;
    }
  }
  else
  {
    qword_1EE00A2B0 = 0;
  }
  *a1 = U_MEMORY_ALLOCATION_ERROR;
  if (qword_1EE00A2A8)
  {
    v12 = icu::UnicodeSet::~UnicodeSet((void *)7, (icu::UnicodeSet *)qword_1EE00A2A8);
    icu::UMemory::operator delete(v12);
  }
}

uint64_t uspoof_open(UErrorCode *a1, unint64_t a2)
{
  unsigned int v3;
  int v4;
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;

  if (*(int *)a1 > 0)
    return 0;
  v3 = atomic_load(&dword_1EE00A2B8);
  if (v3 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A2B8))
  {
    v4 = dword_1EE00A2BC;
    if (dword_1EE00A2BC >= 1)
    {
LABEL_6:
      *a1 = v4;
      return 0;
    }
  }
  else
  {
    sub_18BDB990C(a1, a2);
    dword_1EE00A2BC = *a1;
    icu::umtx_initImplPostInit(&dword_1EE00A2B8);
  }
  v5 = (uint64_t *)*(unsigned int *)a1;
  if ((int)v5 > 0)
    return 0;
  v7 = icu::UMemory::operator new(v5, (icu::UMemory *)0x30, a2);
  if (!v7)
  {
    v4 = 7;
    goto LABEL_6;
  }
  v8 = sub_18BDBCB94((uint64_t)v7, a1);
  if (*(int *)a1 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    return 0;
  }
  return nullsub_17(v8);
}

uint64_t uspoof_openFromSerialized(uint64_t a1, unint64_t a2, _DWORD *a3, UErrorCode *a4)
{
  unsigned int v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t *v17;
  uint64_t *v18;

  if (*(int *)a4 > 0)
    return 0;
  if (!a1)
  {
    v9 = 1;
    goto LABEL_12;
  }
  v8 = atomic_load(&dword_1EE00A2B8);
  if (v8 != 2 && icu::umtx_initImplPreInit(&dword_1EE00A2B8))
  {
    sub_18BDB990C(a4, a2);
    dword_1EE00A2BC = *a4;
    icu::umtx_initImplPostInit(&dword_1EE00A2B8);
    goto LABEL_7;
  }
  v9 = dword_1EE00A2BC;
  if (dword_1EE00A2BC >= 1)
  {
LABEL_12:
    *a4 = v9;
    return 0;
  }
LABEL_7:
  v10 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v10 > 0)
    return 0;
  v11 = icu::UMemory::operator new(v10, (icu::UMemory *)0x38, a2);
  if (!v11)
  {
    v9 = 7;
    goto LABEL_12;
  }
  v12 = (uint64_t)v11;
  sub_18BDBDCD4(v11, a1, a2, a4);
  v14 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v14 >= 1)
  {
LABEL_10:
    v15 = (void *)sub_18BDBDDE0(v12);
    icu::UMemory::operator delete(v15);
    return 0;
  }
  v17 = icu::UMemory::operator new(v14, (icu::UMemory *)0x30, v13);
  if (!v17)
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_10;
  }
  v18 = v17;
  sub_18BDBC9F0((uint64_t)v17, v12, a4);
  if (*(int *)a4 >= 1)
  {
    (*(void (**)(uint64_t *))(*v18 + 8))(v18);
    return 0;
  }
  if (a3)
    *a3 = sub_18BDBDEF8(v12);
  return nullsub_17(v18);
}

uint64_t uspoof_clone(uint64_t a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v3 = sub_18BDBCD48(a1, a2);
  if (!v3)
    return 0;
  v6 = v3;
  v7 = icu::UMemory::operator new(v5, (icu::UMemory *)0x30, v4);
  if (!v7)
  {
    *a2 = 7;
    return 0;
  }
  v8 = sub_18BDBCC9C(v7, v6, a2);
  if (*a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v8 = 0;
  }
  return nullsub_17(v8);
}

uint64_t uspoof_close(uint64_t a1)
{
  uint64_t result;
  int v2;

  v2 = 0;
  result = sub_18BDBCE20(a1, &v2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t uspoof_setChecks(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t result;

  result = sub_18BDBCE20(a1, a3);
  if (result)
  {
    if ((a2 & 0xBFFF0000) != 0)
      *a3 = 1;
    else
      *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t uspoof_getChecks(uint64_t a1, int *a2)
{
  uint64_t result;

  result = sub_18BDBCD48(a1, a2);
  if (result)
    return *(unsigned int *)(result + 12);
  return result;
}

uint64_t uspoof_setRestrictionLevel(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;

  v4 = 0;
  result = sub_18BDBCE20(a1, &v4);
  if (result)
  {
    *(_DWORD *)(result + 40) = a2;
    *(_DWORD *)(result + 12) |= 0x10u;
  }
  return result;
}

uint64_t uspoof_getRestrictionLevel(uint64_t a1)
{
  uint64_t v1;
  int v3;

  v3 = 0;
  v1 = sub_18BDBCD48(a1, &v3);
  if (v1)
    return *(unsigned int *)(v1 + 40);
  else
    return 1610612736;
}

void *uspoof_setAllowedLocales(uint64_t a1, const char *a2, int *a3)
{
  void *result;

  result = (void *)sub_18BDBCE20(a1, a3);
  if (result)
    return sub_18BDBCE24((uint64_t)result, a2, a3);
  return result;
}

uint64_t uspoof_getAllowedLocales(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_18BDBCE20(a1, a2);
  if (result)
    return sub_18BDBD1BC(result);
  return result;
}

uint64_t uspoof_getAllowedChars(uint64_t a1, int *a2)
{
  uint64_t result;

  result = sub_18BDBCD48(a1, a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t uspoof_getAllowedUnicodeSet(uint64_t a1, int *a2)
{
  uint64_t result;

  result = sub_18BDBCD48(a1, a2);
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

void uspoof_setAllowedUnicodeSet(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  icu::UnicodeSet *v9;
  icu::UnicodeSet *v10;
  void *v11;
  icu::UnicodeSet *v12;
  void *v13;
  int v14;

  v5 = sub_18BDBCE20(a1, a3);
  if (!v5)
    return;
  v7 = (uint64_t *)a2[32];
  if ((v7 & 1) != 0)
  {
    v14 = 1;
LABEL_10:
    *a3 = v14;
    return;
  }
  v8 = v5;
  v9 = icu::UnicodeSet::clone((icu::UnicodeSet *)a2, v6, v7);
  if (!v9 || (v10 = v9, (*((_BYTE *)v9 + 32) & 1) != 0))
  {
    v14 = 7;
    goto LABEL_10;
  }
  icu::UnicodeSet::freeze(v9);
  v12 = *(icu::UnicodeSet **)(v8 + 24);
  if (v12)
  {
    v13 = icu::UnicodeSet::~UnicodeSet(v11, v12);
    icu::UMemory::operator delete(v13);
  }
  *(_QWORD *)(v8 + 24) = v10;
  *(_DWORD *)(v8 + 12) |= 0x40u;
}

uint64_t uspoof_check(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, int *a5)
{
  if (a4)
    *a4 = 0;
  return uspoof_check2(a1, a2, a3, 0, a5);
}

uint64_t uspoof_check2(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5)
{
  uint64_t v10;
  void *v11;
  uint64_t v13;
  _OWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!sub_18BDBCD48(a1, a5))
    return 0;
  if (a3 > -2)
  {
    memset(v14, 0, sizeof(v14));
    v13 = a2;
    icu::UnicodeString::UnicodeString(v14, a3 == -1, &v13);
    v10 = uspoof_check2UnicodeString(a1, (uint64_t)v14, a4, a5);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v14);
  }
  else
  {
    v10 = 0;
    *a5 = 1;
  }
  return v10;
}

uint64_t uspoof_check2UnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v11;
  _OWORD v12[14];

  v7 = sub_18BDBCD48(a1, a4);
  if (v7)
  {
    v8 = v7;
    if (!a3)
    {
      memset(v12, 0, sizeof(v12));
      sub_18BDBDA0C((uint64_t)v12);
      v11 = sub_18BDBAEF4(v8, a2, v12, (UErrorCode *)a4);
      sub_18BDBDAC0(v12);
      return v11;
    }
    v9 = (_DWORD *)sub_18BDBDA58(a3, a4);
    if (v9)
      return sub_18BDBAEF4(v8, a2, v9, (UErrorCode *)a4);
  }
  return 0;
}

uint64_t uspoof_checkUTF8(uint64_t a1, char *a2, int32_t a3, _DWORD *a4, int *a5)
{
  if (a4)
    *a4 = 0;
  return uspoof_check2UTF8(a1, a2, a3, 0, a5);
}

uint64_t uspoof_check2UTF8(uint64_t a1, char *__s, int32_t a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  void *v10;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return 0;
  memset(v12, 0, sizeof(v12));
  if (a3 < 0)
    a3 = strlen(__s);
  icu::UnicodeString::fromUTF8(__s, a3, (uint64_t)v12);
  v5 = uspoof_check2UnicodeString(a1, (uint64_t)v12, a4, a5);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v12);
  return v5;
}

uint64_t uspoof_areConfusable(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  _OWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  sub_18BDBCD48(a1, a6);
  if (*a6 > 0)
    return 0;
  if (a3 < -1 || a5 <= -2)
  {
    v12 = 0;
    *a6 = 1;
  }
  else
  {
    memset(v19, 0, sizeof(v19));
    v17 = a2;
    icu::UnicodeString::UnicodeString(v19, a3 == -1, &v17);
    memset(v18, 0, sizeof(v18));
    v16 = a4;
    icu::UnicodeString::UnicodeString(v18, a5 == -1, &v16);
    v12 = uspoof_areConfusableUnicodeString(a1, (uint64_t)v19, (uint64_t)v18, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v18);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v19);
  }
  return v12;
}

uint64_t uspoof_areConfusableUnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  _QWORD v20[3];
  int v21;
  _QWORD v22[3];
  int v23;
  void (**v24)(icu::UnicodeString *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void (**v29)(icu::UnicodeString *__hidden);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = sub_18BDBCD48(a1, a4);
  if (*a4 <= 0)
  {
    v11 = v8;
    if ((*(_BYTE *)(v8 + 12) & 7) == 0)
    {
      v10 = 0;
      *a4 = 27;
      return v10;
    }
    v30 = 0u;
    v33 = 0;
    v32 = 0u;
    v31 = 0u;
    v29 = off_1E2256B38;
    LOWORD(v30) = 2;
    uspoof_getSkeletonUnicodeString(a1, v9, a2, (uint64_t)&v29, a4);
    v25 = 0u;
    v26 = 0u;
    v28 = 0;
    v27 = 0u;
    v24 = off_1E2256B38;
    LOWORD(v25) = 2;
    uspoof_getSkeletonUnicodeString(a1, v12, a3, (uint64_t)&v24, a4);
    v13 = *a4;
    if ((int)v13 > 0)
      goto LABEL_5;
    if ((v30 & 1) != 0)
    {
      v13 = (unsigned __int16)v25;
      if ((v25 & 1) == 0)
        goto LABEL_5;
    }
    else
    {
      v10 = 0;
      if ((v30 & 0x8000u) == 0)
        v16 = (unsigned __int16)v30 >> 5;
      else
        v16 = DWORD1(v30);
      if ((v25 & 0x8000u) == 0)
        v13 = (unsigned __int16)v25 >> 5;
      else
        v13 = DWORD1(v25);
      if ((v25 & 1) != 0 || v16 != (_DWORD)v13)
        goto LABEL_6;
      if (!icu::UnicodeString::doEquals((icu::UnicodeString *)&v29, (const icu::UnicodeString *)&v24, v16))
      {
LABEL_5:
        v10 = 0;
LABEL_6:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v24);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v29);
        return v10;
      }
    }
    memset(v22, 0, sizeof(v22));
    v23 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v22);
    sub_18BDBD324(v11, a2, (icu::ScriptSet *)v22, (UErrorCode *)a4);
    memset(v20, 0, sizeof(v20));
    v21 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v20);
    sub_18BDBD324(v11, a3, (icu::ScriptSet *)v20, (UErrorCode *)a4);
    if (icu::ScriptSet::intersects((icu::ScriptSet *)v22, (const icu::ScriptSet *)v20))
    {
      v17 = 1;
    }
    else
    {
      v17 = 2;
      if (!icu::ScriptSet::isEmpty((icu::ScriptSet *)v22))
      {
        if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v20))
          v17 = 2;
        else
          v17 = 6;
      }
    }
    v18 = *(_DWORD *)(v11 + 12);
    v19 = v17 & 6;
    if ((v18 & 1) != 0)
      v19 = v17;
    if ((v18 & 2) == 0)
      v19 &= ~2u;
    if ((v18 & 4) != 0)
      v10 = v19;
    else
      v10 = v19 & 3;
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v20);
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v22);
    goto LABEL_6;
  }
  return 0;
}

uint64_t uspoof_areConfusableUTF8(uint64_t a1, const char *a2, int32_t a3, const char *a4, int32_t a5, int *a6)
{
  uint64_t v12;
  void *v13;
  void *v14;
  _OWORD v16[4];
  _OWORD v17[4];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  sub_18BDBCD48(a1, a6);
  if (*a6 > 0)
    return 0;
  if (a3 < -1 || a5 <= -2)
  {
    v12 = 0;
    *a6 = 1;
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    if (a3 < 0)
      a3 = strlen(a2);
    icu::UnicodeString::fromUTF8(a2, a3, (uint64_t)v17);
    memset(v16, 0, sizeof(v16));
    if (a5 < 0)
      a5 = strlen(a4);
    icu::UnicodeString::fromUTF8(a4, a5, (uint64_t)v16);
    v12 = uspoof_areConfusableUnicodeString(a1, (uint64_t)v17, (uint64_t)v16, a6);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
  }
  return v12;
}

uint64_t uspoof_getSkeletonUnicodeString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int i;
  unsigned int v13;
  signed int v14;
  int v15;
  void *v16;
  void *v17;
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void (**v24)(icu::UnicodeString *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v8 = sub_18BDBCD48(a1, a5);
  if (*a5 <= 0)
  {
    v9 = v8;
    v25 = 0u;
    v26 = 0u;
    v28 = 0;
    v27 = 0u;
    v24 = off_1E2256B38;
    LOWORD(v25) = 2;
    (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)qword_1EE00A2A0 + 24))(qword_1EE00A2A0, a3, &v24, a5);
    v20 = 0u;
    v21 = 0u;
    v23 = 0;
    v22 = 0u;
    v19 = off_1E2256B38;
    LOWORD(v20) = 2;
    v10 = (uint64_t *)((unsigned __int16)v25 >> 5);
    if ((v25 & 0x8000u) == 0)
      v11 = (unsigned __int16)v25 >> 5;
    else
      v11 = DWORD1(v25);
    if (v11 >= 1)
    {
      for (i = 0; i < v11; i += v15)
      {
        v13 = icu::UnicodeString::char32At(v10, (icu::UnicodeString *)&v24, i);
        v14 = v13;
        if (v13 < 0x10000)
          v15 = 1;
        else
          v15 = 2;
        if (!u_hasBinaryProperty(v13, UCHAR_DEFAULT_IGNORABLE_CODE_POINT))
          sub_18BDBD8E0(*(_QWORD **)(v9 + 16), v14, (icu::UnicodeString *)&v19);
      }
    }
    (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t, int *))(*(_QWORD *)qword_1EE00A2A0 + 24))(qword_1EE00A2A0, &v19, a4, a5);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v19);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v24);
  }
  return a4;
}

uint64_t uspoof_areBidiConfusable(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, int *a7)
{
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  _OWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v19, 0, sizeof(v19));
  v17 = a3;
  icu::UnicodeString::UnicodeString(v19, a4 == -1, &v17);
  memset(v18, 0, sizeof(v18));
  v16 = a5;
  icu::UnicodeString::UnicodeString(v18, a6 == -1, &v16);
  if ((BYTE8(v19[0]) & 1) != 0 || (BYTE8(v18[0]) & 1) != 0)
  {
    v13 = 0;
    v12 = 1;
    *a7 = 1;
  }
  else
  {
    v13 = uspoof_areBidiConfusableUnicodeString(a1, a2, (uint64_t)v19, (uint64_t)v18, a7);
  }
  icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v18);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v19);
  return v13;
}

uint64_t uspoof_areBidiConfusableUnicodeString(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  int v16;
  int v17;
  _QWORD v18[3];
  int v19;
  _QWORD v20[3];
  int v21;
  void (**v22)(icu::UnicodeString *__hidden);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void (**v27)(icu::UnicodeString *__hidden);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v10 = sub_18BDBCD48(a1, a5);
  if (*a5 <= 0)
  {
    v12 = v10;
    if ((*(_BYTE *)(v10 + 12) & 7) == 0)
    {
      v11 = 0;
      *a5 = 27;
      return v11;
    }
    v28 = 0u;
    v31 = 0;
    v30 = 0u;
    v29 = 0u;
    v27 = off_1E2256B38;
    LOWORD(v28) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, a3, (uint64_t)&v27, a5);
    v23 = 0u;
    v24 = 0u;
    v26 = 0;
    v25 = 0u;
    v22 = off_1E2256B38;
    LOWORD(v23) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, a4, (uint64_t)&v22, a5);
    v13 = *a5;
    if ((int)v13 > 0)
      goto LABEL_5;
    if ((v28 & 1) != 0)
    {
      v13 = (unsigned __int16)v23;
      if ((v23 & 1) == 0)
        goto LABEL_5;
    }
    else
    {
      v11 = 0;
      if ((v28 & 0x8000u) == 0)
        v16 = (unsigned __int16)v28 >> 5;
      else
        v16 = DWORD1(v28);
      if ((v23 & 0x8000u) == 0)
        v13 = (unsigned __int16)v23 >> 5;
      else
        v13 = DWORD1(v23);
      if ((v23 & 1) != 0 || v16 != (_DWORD)v13)
        goto LABEL_6;
      if (!icu::UnicodeString::doEquals((icu::UnicodeString *)&v27, (const icu::UnicodeString *)&v22, v16))
      {
LABEL_5:
        v11 = 0;
LABEL_6:
        icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v22);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v27);
        return v11;
      }
    }
    memset(v20, 0, sizeof(v20));
    v21 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v20);
    sub_18BDBD324(v12, a3, (icu::ScriptSet *)v20, (UErrorCode *)a5);
    memset(v18, 0, sizeof(v18));
    v19 = 0;
    icu::ScriptSet::ScriptSet((uint64_t)v18);
    sub_18BDBD324(v12, a4, (icu::ScriptSet *)v18, (UErrorCode *)a5);
    if (icu::ScriptSet::intersects((icu::ScriptSet *)v20, (const icu::ScriptSet *)v18))
    {
      v17 = 1;
    }
    else
    {
      v17 = 2;
      if (!icu::ScriptSet::isEmpty((icu::ScriptSet *)v20))
      {
        if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v18))
          v17 = 2;
        else
          v17 = 6;
      }
    }
    v11 = *(_DWORD *)(v12 + 12) & v17;
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v18);
    icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v20);
    goto LABEL_6;
  }
  return 0;
}

uint64_t uspoof_areBidiConfusableUTF8(uint64_t a1, unsigned int a2, char *__s, int32_t a4, const char *a5, int a6, int *a7)
{
  int32_t v8;
  uint64_t v13;
  void *v14;
  void *v15;
  _OWORD v17[4];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a4 < -1 || (v8 = a6, a6 <= -2))
  {
    v13 = 0;
    *a7 = 1;
  }
  else
  {
    memset(v18, 0, sizeof(v18));
    if (a4 < 0)
      a4 = strlen(__s);
    icu::UnicodeString::fromUTF8(__s, a4, (uint64_t)v18);
    memset(v17, 0, sizeof(v17));
    if (v8 < 0)
      v8 = strlen(a5);
    icu::UnicodeString::fromUTF8(a5, v8, (uint64_t)v17);
    v13 = uspoof_areBidiConfusableUnicodeString(a1, a2, (uint64_t)v18, (uint64_t)v17, a7);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v17);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v18);
  }
  return v13;
}

uint64_t uspoof_getBidiSkeletonUnicodeString(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  __int16 v7;
  unsigned __int8 v9;
  void **v11;
  void **v12;
  unsigned int v13;
  const UChar *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int ProcessedLength;
  unint64_t Buffer;
  uint64_t v20;
  unint64_t v21;
  void (**v23)(icu::UnicodeString *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a4 + 8) & 1) != 0)
    v7 = 2;
  else
    v7 = *(_WORD *)(a4 + 8) & 0x1F;
  *(_WORD *)(a4 + 8) = v7;
  if (a2 < 2)
  {
    v9 = a2;
    v11 = ubidi_open();
    v12 = v11;
    v13 = *(unsigned __int16 *)(a3 + 8);
    if ((v13 & 0x11) != 0)
    {
      v14 = 0;
    }
    else if ((v13 & 2) != 0)
    {
      v14 = (const UChar *)(a3 + 10);
    }
    else
    {
      v14 = *(const UChar **)(a3 + 24);
    }
    v15 = (__int16)v13;
    v16 = v13 >> 5;
    if (v15 >= 0)
      v17 = v16;
    else
      v17 = *(unsigned int *)(a3 + 12);
    ubidi_setPara((uint64_t)v11, v14, v17, v9, 0, a5);
    if (*a5 < 1)
    {
      v24 = 0u;
      v25 = 0u;
      v27 = 0;
      v26 = 0u;
      v23 = off_1E2256B38;
      LOWORD(v24) = 2;
      ProcessedLength = ubidi_getProcessedLength((uint64_t)v12);
      Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)&v23, ProcessedLength);
      if (Buffer)
      {
        ubidi_writeReordered((uint64_t)v12, Buffer, ProcessedLength, 3, a5);
        icu::UnicodeString::releaseBuffer((uint64_t)&v23, ProcessedLength);
        ubidi_close(v12);
        v21 = *a5;
        if ((int)v21 <= 0)
          uspoof_getSkeletonUnicodeString(a1, v20, (uint64_t)&v23, a4, a5);
      }
      else
      {
        *a5 = 7;
        ubidi_close(v12);
      }
      icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v23);
    }
    else
    {
      ubidi_close(v12);
    }
  }
  else
  {
    *a5 = 1;
  }
  return a4;
}

uint64_t uspoof_checkUnicodeString(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (a3)
    *a3 = 0;
  return uspoof_check2UnicodeString(a1, a2, 0, a4);
}

uint64_t sub_18BDBAEF4(uint64_t a1, uint64_t a2, _DWORD *a3, UErrorCode *a4)
{
  int v8;
  int v9;
  int v10;
  void *v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t *v21;
  unsigned int v22;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  void *v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void (**v43)(icu::UnicodeString *__hidden);
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  sub_18BDBD9DC(a3);
  v8 = *(_DWORD *)(a1 + 12);
  if ((v8 & 0x10) != 0)
  {
    v10 = sub_18BDBD504(a1, a2, a4);
    v9 = 16 * (v10 > *(_DWORD *)(a1 + 40));
    a3[54] = v10;
    v8 = *(_DWORD *)(a1 + 12);
    if ((v8 & 0x80) == 0)
      goto LABEL_8;
  }
  else
  {
    v9 = 0;
    if ((v8 & 0x80) == 0)
      goto LABEL_8;
  }
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v30);
  sub_18BDBD444(a1, a2, (icu::UnicodeSet *)&v30);
  if ((int)icu::UnicodeSet::size((icu::UnicodeSet *)&v30) > 1)
    v9 |= 0x80u;
  icu::UnicodeSet::operator=((icu::UnicodeSet *)(a3 + 4), (const icu::UnicodeSet *)&v30);
  icu::UnicodeSet::~UnicodeSet(v11, (icu::UnicodeSet *)&v30);
  v8 = *(_DWORD *)(a1 + 12);
LABEL_8:
  if ((v8 & 0x100) != 0)
  {
    if (sub_18BDBD6CC(a1, (icu::UnicodeString *)a2) != -1)
      v9 |= 0x100u;
    if ((*(_DWORD *)(a1 + 12) & 0x40) == 0)
      goto LABEL_23;
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  v12 = 0;
  v13 = *(unsigned __int16 *)(a2 + 8);
  v14 = (__int16)v13;
  v15 = (uint64_t *)(v13 >> 5);
  if (v14 >= 0)
    v16 = (int)v15;
  else
    v16 = *(_DWORD *)(a2 + 12);
  while (v12 < v16)
  {
    v17 = icu::UnicodeString::char32At(v15, (icu::UnicodeString *)a2, v12);
    if (v17 < 0x10000)
      v18 = 1;
    else
      v18 = 2;
    v12 += v18;
    if (!icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 24), v17))
    {
      v9 |= 0x40u;
      break;
    }
  }
LABEL_23:
  v19 = *(_DWORD *)(a1 + 12);
  if ((v19 & 0x20) != 0)
  {
    v44 = 0u;
    v47 = 0;
    v46 = 0u;
    v45 = 0u;
    v43 = off_1E2256B38;
    LOWORD(v44) = 2;
    (*(void (**)(uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden), UErrorCode *))(*(_QWORD *)qword_1EE00A2A0 + 24))(qword_1EE00A2A0, a2, &v43, a4);
    if ((v44 & 0x8000u) == 0)
      v20 = (unsigned __int16)v44 >> 5;
    else
      v20 = DWORD1(v44);
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)&v30);
    if (v20 >= 1)
    {
      v22 = 0;
      v23 = 0;
      while (2)
      {
        v24 = 1;
        while (1)
        {
          v25 = icu::UnicodeString::char32At(v21, (icu::UnicodeString *)&v43, v23);
          v26 = v25;
          v27 = v25 < 0x10000 ? 1 : 2;
          v23 += v27;
          if (u_charType(v25) != 6)
            break;
          if (!v22)
            goto LABEL_43;
          if ((v24 & 1) != 0)
            icu::UnicodeSet::add((icu::UnicodeSet *)&v30, v22);
          if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v30, v26))
          {
            v9 |= 0x20u;
            goto LABEL_46;
          }
          icu::UnicodeSet::add((icu::UnicodeSet *)&v30, v26);
          v24 = 0;
          if (v23 >= v20)
            goto LABEL_46;
        }
        if ((v24 & 1) == 0)
          icu::UnicodeSet::clear((icu::UnicodeSet *)&v30);
        v26 = 0;
LABEL_43:
        v22 = v26;
        if (v23 < v20)
          continue;
        break;
      }
    }
LABEL_46:
    icu::UnicodeSet::~UnicodeSet(v21, (icu::UnicodeSet *)&v30);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v43);
    v19 = *(_DWORD *)(a1 + 12);
  }
  a3[3] = v9;
  return sub_18BDBDA9C((uint64_t)a3, v19);
}

uint64_t uspoof_getSkeleton(uint64_t a1, uint64_t a2, uint64_t a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  UChar *v18;
  uint64_t v19;
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  sub_18BDBCD48(a1, a7);
  if (*a7 > 0)
    return 0;
  if (a4 < -1 || a6 < 0 || a5 && !a6)
  {
    v13 = 0;
    *a7 = 1;
  }
  else
  {
    memset(v25, 0, sizeof(v25));
    v19 = a3;
    icu::UnicodeString::UnicodeString(v25, a4 == -1, &v19);
    v21 = 0u;
    v24 = 0;
    v23 = 0u;
    v22 = 0u;
    v20 = off_1E2256B38;
    LOWORD(v21) = 2;
    uspoof_getSkeletonUnicodeString(a1, v14, (uint64_t)v25, (uint64_t)&v20, a7);
    v18 = a5;
    icu::UnicodeString::extract((uint64_t)&v20, &v18, a6, a7);
    v15 = (void *)((unsigned __int16)v21 >> 5);
    if ((v21 & 0x8000u) == 0)
      v13 = v15;
    else
      v13 = DWORD1(v21);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v25);
  }
  return v13;
}

uint64_t uspoof_getBidiSkeleton(uint64_t a1, unsigned int a2, uint64_t a3, int a4, UChar *a5, int a6, int *a7)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  UChar *v16;
  uint64_t v17;
  void (**v18)(icu::UnicodeString *__hidden);
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  memset(v23, 0, sizeof(v23));
  v17 = a3;
  icu::UnicodeString::UnicodeString(v23, a4 == -1, &v17);
  v15[1] = v17;
  if ((BYTE8(v23[0]) & 1) != 0)
  {
    v12 = 0;
    v13 = 1;
    *a7 = 1;
  }
  else
  {
    v19 = 0u;
    v22 = 0;
    v21 = 0u;
    v20 = 0u;
    v18 = off_1E2256B38;
    LOWORD(v19) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, (uint64_t)v23, (uint64_t)&v18, a7);
    v16 = a5;
    v12 = icu::UnicodeString::extract((uint64_t)&v18, &v16, a6, a7);
    v15[0] = v16;
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v18);
  }
  icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v23);
  return v12;
}

uint64_t uspoof_getSkeletonUTF8(uint64_t a1, uint64_t a2, const char *a3, int32_t a4, char *a5, int32_t a6, int *a7)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const UChar *v16;
  int32_t v17;
  void *v18;
  int32_t pDestLength;
  void (**v21)(icu::UnicodeString *__hidden);
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  sub_18BDBCD48(a1, a7);
  if (*a7 > 0)
    return 0;
  if (a4 < -1 || a6 < 0 || a5 && !a6)
  {
    v13 = 0;
    *a7 = 1;
  }
  else
  {
    memset(v26, 0, sizeof(v26));
    if (a4 < 0)
      a4 = strlen(a3);
    icu::UnicodeString::fromUTF8(a3, a4, (uint64_t)v26);
    v22 = 0u;
    v25 = 0;
    v24 = 0u;
    v23 = 0u;
    v21 = off_1E2256B38;
    LOWORD(v22) = 2;
    uspoof_getSkeletonUnicodeString(a1, v14, (uint64_t)v26, (uint64_t)&v21, a7);
    v15 = *a7;
    if ((int)v15 <= 0)
    {
      pDestLength = 0;
      if ((v22 & 0x11) != 0)
      {
        v16 = 0;
      }
      else if ((v22 & 2) != 0)
      {
        v16 = (const UChar *)&v22 + 1;
      }
      else
      {
        v16 = (const UChar *)v23;
      }
      if ((v22 & 0x8000u) == 0)
        v17 = (unsigned __int16)v22 >> 5;
      else
        v17 = DWORD1(v22);
      u_strToUTF8(a5, a6, &pDestLength, v16, v17, (UErrorCode *)a7);
      v13 = pDestLength;
    }
    else
    {
      v13 = 0;
    }
    icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v21);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v26);
  }
  return v13;
}

uint64_t uspoof_getBidiSkeletonUTF8(uint64_t a1, unsigned int a2, char *__s, int32_t a4, char *a5, int32_t a6, int *a7)
{
  uint64_t v8;
  unint64_t v14;
  const UChar *v15;
  int32_t v16;
  void *v17;
  int32_t pDestLength;
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a4 > -2)
  {
    memset(v25, 0, sizeof(v25));
    if (a4 < 0)
      a4 = strlen(__s);
    icu::UnicodeString::fromUTF8(__s, a4, (uint64_t)v25);
    v21 = 0u;
    v24 = 0;
    v23 = 0u;
    v22 = 0u;
    v20 = off_1E2256B38;
    LOWORD(v21) = 2;
    uspoof_getBidiSkeletonUnicodeString(a1, a2, (uint64_t)v25, (uint64_t)&v20, a7);
    v14 = *a7;
    if ((int)v14 <= 0)
    {
      pDestLength = 0;
      if ((v21 & 0x11) != 0)
      {
        v15 = 0;
      }
      else if ((v21 & 2) != 0)
      {
        v15 = (const UChar *)&v21 + 1;
      }
      else
      {
        v15 = (const UChar *)v22;
      }
      if ((v21 & 0x8000u) == 0)
        v16 = (unsigned __int16)v21 >> 5;
      else
        v16 = DWORD1(v21);
      u_strToUTF8(a5, a6, &pDestLength, v15, v16, (UErrorCode *)a7);
      v8 = pDestLength;
    }
    else
    {
      v8 = 0;
    }
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v25);
  }
  else
  {
    v8 = 0;
    *a7 = 1;
  }
  return v8;
}

size_t uspoof_serialize(uint64_t a1, void *a2, int a3, _DWORD *a4)
{
  size_t result;

  result = sub_18BDBCE20(a1, a4);
  if (result)
    return sub_18BDBDEB0(*(const void ***)(result + 16), a2, a3, a4);
  return result;
}

uint64_t uspoof_getInclusionSet(UErrorCode *a1)
{
  unsigned int v2;
  unint64_t v3;

  if (*(int *)a1 <= 0)
  {
    v2 = atomic_load(&dword_1EE00A2B8);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A2B8))
    {
      if (dword_1EE00A2BC >= 1)
        *a1 = dword_1EE00A2BC;
    }
    else
    {
      sub_18BDB990C(a1, v3);
      dword_1EE00A2BC = *a1;
      icu::umtx_initImplPostInit(&dword_1EE00A2B8);
    }
  }
  return qword_1EE00A2A8;
}

uint64_t uspoof_getRecommendedSet(UErrorCode *a1)
{
  unsigned int v2;
  unint64_t v3;

  if (*(int *)a1 <= 0)
  {
    v2 = atomic_load(&dword_1EE00A2B8);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A2B8))
    {
      if (dword_1EE00A2BC >= 1)
        *a1 = dword_1EE00A2BC;
    }
    else
    {
      sub_18BDB990C(a1, v3);
      dword_1EE00A2BC = *a1;
      icu::umtx_initImplPostInit(&dword_1EE00A2B8);
    }
  }
  return qword_1EE00A2B0;
}

uint64_t uspoof_getInclusionUnicodeSet(UErrorCode *a1)
{
  unsigned int v2;
  unint64_t v3;

  if (*(int *)a1 <= 0)
  {
    v2 = atomic_load(&dword_1EE00A2B8);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A2B8))
    {
      if (dword_1EE00A2BC >= 1)
        *a1 = dword_1EE00A2BC;
    }
    else
    {
      sub_18BDB990C(a1, v3);
      dword_1EE00A2BC = *a1;
      icu::umtx_initImplPostInit(&dword_1EE00A2B8);
    }
  }
  return qword_1EE00A2A8;
}

uint64_t uspoof_getRecommendedUnicodeSet(UErrorCode *a1)
{
  unsigned int v2;
  unint64_t v3;

  if (*(int *)a1 <= 0)
  {
    v2 = atomic_load(&dword_1EE00A2B8);
    if (v2 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A2B8))
    {
      if (dword_1EE00A2BC >= 1)
        *a1 = dword_1EE00A2BC;
    }
    else
    {
      sub_18BDB990C(a1, v3);
      dword_1EE00A2BC = *a1;
      icu::umtx_initImplPostInit(&dword_1EE00A2B8);
    }
  }
  return qword_1EE00A2B0;
}

uint64_t *uspoof_openCheckResult@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v5;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0xE0, a2);
  if (result)
  {
    v5 = sub_18BDBDA0C((uint64_t)result);
    return (uint64_t *)nullsub_17(v5);
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t uspoof_closeCheckResult(uint64_t a1)
{
  uint64_t result;
  int v2;

  v2 = 0;
  result = sub_18BDBDA58(a1, &v2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t uspoof_getCheckResultChecks(uint64_t a1, int *a2)
{
  uint64_t v3;

  v3 = sub_18BDBDA58(a1, a2);
  if (*a2 <= 0)
    return *(unsigned int *)(v3 + 12);
  else
    return 0;
}

uint64_t uspoof_getCheckResultRestrictionLevel(uint64_t a1, int *a2)
{
  uint64_t v3;

  v3 = sub_18BDBDA58(a1, a2);
  if (*a2 <= 0)
    return *(unsigned int *)(v3 + 216);
  else
    return 1610612736;
}

uint64_t uspoof_getCheckResultNumerics(uint64_t a1, int *a2)
{
  uint64_t v3;

  v3 = sub_18BDBDA58(a1, a2);
  if (*a2 >= 1)
    return 0;
  else
    return v3 + 16;
}

uint64_t sub_18BDBBB60@<X0>(void *a1@<X8>)
{
  void *v1;
  void *v2;

  if (qword_1EE00A2A8)
  {
    v1 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_1EE00A2A8);
    icu::UMemory::operator delete(v1);
  }
  qword_1EE00A2A8 = 0;
  if (qword_1EE00A2B0)
  {
    v2 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_1EE00A2B0);
    icu::UMemory::operator delete(v2);
  }
  qword_1EE00A2B0 = 0;
  qword_1EE00A2A0 = 0;
  atomic_store(0, &dword_1EE00A2B8);
  return 1;
}

uint64_t uspoof_openFromSource(char *a1, int32_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, UErrorCode *a7)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t *v21;
  void *v22;

  sub_18BDB9888(a7);
  v13 = (uint64_t *)*(unsigned int *)a7;
  if ((int)v13 > 0)
    return 0;
  if (a5)
    *a5 = 0;
  if (a6)
  {
    *(_QWORD *)a6 = 0;
    *(_WORD *)(a6 + 8) = 0;
    *(_WORD *)(a6 + 40) = 0;
  }
  v16 = icu::UMemory::operator new(v13, (icu::UMemory *)0x38, v12);
  if (!v16)
  {
    v14 = 0;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    return v14;
  }
  v17 = (uint64_t)v16;
  sub_18BDBDD98(v16, a7);
  v19 = (uint64_t *)*(unsigned int *)a7;
  if ((int)v19 >= 1)
  {
    v20 = (void *)sub_18BDBDDE0(v17);
    icu::UMemory::operator delete(v20);
    return 0;
  }
  v21 = icu::UMemory::operator new(v19, (icu::UMemory *)0x30, v18);
  v14 = (uint64_t)v21;
  if (!v21)
  {
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    v22 = (void *)sub_18BDBDDE0(v17);
    icu::UMemory::operator delete(v22);
    return v14;
  }
  sub_18BDBC9F0((uint64_t)v21, v17, a7);
  if (*(int *)a7 >= 1 || (sub_18BDBC108(v14, a1, a2, a5, (_DWORD *)a6, (int *)a7), *(int *)a7 >= 1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return 0;
  }
  return v14;
}

icu::UVector **sub_18BDBBCFC@<X0>(icu::UVector **a1@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  icu::UVector *v5;
  icu::UVector *v6;

  *a1 = 0;
  a1[1] = 0;
  v5 = (icu::UVector *)icu::UMemory::operator new(a3, (icu::UMemory *)0x28, (unint64_t)a2);
  if (v5)
  {
    v6 = v5;
    icu::UVector::UVector(v5, a2);
    if (*(int *)a2 <= 0)
    {
      icu::UVector::setDeleter(v6, (void (*)(void *))sub_18BDBC900);
      *a1 = v6;
      a1[1] = (icu::UVector *)uhash_open((uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a2);
    }
    else
    {
      (*(void (**)(icu::UVector *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  else if (*(int *)a2 <= 0)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

uint64_t sub_18BDBBDB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  signed int v4;
  uint64_t v5;
  unsigned int v6;
  signed int v7;
  int32_t v9;
  int v10;
  int v11;
  int32_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = *(unsigned __int16 *)(v2 + 8);
  if (*(__int16 *)(v2 + 8) < 0)
    v4 = *(_DWORD *)(v2 + 12);
  else
    v4 = v3 >> 5;
  v5 = *a2;
  v6 = *(unsigned __int16 *)(*a2 + 8);
  if (*(__int16 *)(*a2 + 8) < 0)
    v7 = *(_DWORD *)(v5 + 12);
  else
    v7 = v6 >> 5;
  if (v4 < v7)
    return 0xFFFFFFFFLL;
  if (v4 > v7)
    return 1;
  if ((v3 & 0x8000) != 0)
  {
    v9 = *(_DWORD *)(v2 + 12);
    if ((v6 & 1) == 0)
      goto LABEL_13;
    return (v3 & 1) == 0;
  }
  v9 = v3 >> 5;
  if ((v6 & 1) != 0)
    return (v3 & 1) == 0;
LABEL_13:
  if ((v6 & 0x8000u) == 0)
    v10 = v6 >> 5;
  else
    v10 = *(_DWORD *)(v5 + 12);
  v11 = v10 & (v10 >> 31);
  v12 = v10 & ~(v10 >> 31);
  v13 = v5 + 10;
  v14 = *(_QWORD *)(v5 + 24);
  if ((v6 & 2) != 0)
    v15 = v13;
  else
    v15 = v14;
  return icu::UnicodeString::doCompare(v2, 0, v9, v15, v11, v12);
}

uint64_t sub_18BDBBE68(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v11;
  uint64_t v12;

  v3 = a2;
  if (*(int *)a3 > 0)
  {
    v4 = 0;
    if (!a2)
      return v4;
    goto LABEL_6;
  }
  v7 = uhash_get(*(_QWORD *)(a1 + 8), a2);
  if (v7)
  {
    v4 = v7;
    if (v3)
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v11 = icu::UMemory::operator new(v9, (icu::UMemory *)0x10, v8);
    v4 = (uint64_t)v11;
    if (v11)
    {
      v12 = 0;
      *v11 = v3;
      *((_DWORD *)v11 + 2) = 0;
    }
    else
    {
      v12 = v3;
      if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
        v12 = v3;
      }
    }
    icu::UVector::adoptElement(*(icu::UVector **)a1, v11, a3);
    if (*(int *)a3 <= 0)
      uhash_put(*(_QWORD *)(a1 + 8), v3, v4, (int *)a3);
    else
      v4 = 0;
    v3 = v12;
    if (v12)
      goto LABEL_6;
  }
  return v4;
}

uint64_t sub_18BDBBF60(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v5;
  uint64_t *v6;
  icu::UnicodeSet *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  icu::UVector *v11;
  unint64_t v12;
  uint64_t *v13;
  icu::UVector *v14;
  unint64_t v15;
  uint64_t *v16;
  icu::UVector **v17;
  uint64_t *v18;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  if (*a3 <= 0)
  {
    *(_QWORD *)(a1 + 16) = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, a3);
    v7 = (icu::UnicodeSet *)icu::UMemory::operator new(v6, (icu::UMemory *)0xC8, v5);
    if (v7)
    {
      icu::UnicodeSet::UnicodeSet(v7);
      *(_QWORD *)(a1 + 24) = v8;
      v11 = (icu::UVector *)icu::UMemory::operator new(v10, (icu::UMemory *)0x28, v9);
      if (v11)
      {
        *(_QWORD *)(a1 + 32) = icu::UVector::UVector(v11, (UErrorCode *)a3);
        v14 = (icu::UVector *)icu::UMemory::operator new(v13, (icu::UMemory *)0x28, v12);
        if (v14)
        {
          *(_QWORD *)(a1 + 40) = icu::UVector::UVector(v14, (UErrorCode *)a3);
          v17 = (icu::UVector **)icu::UMemory::operator new(v16, (icu::UMemory *)0x10, v15);
          if (v17)
          {
            *(_QWORD *)(a1 + 56) = sub_18BDBBCFC(v17, (UErrorCode *)a3, v18);
            return a1;
          }
          *(_QWORD *)(a1 + 56) = 0;
        }
        else
        {
          *(_QWORD *)(a1 + 40) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 32) = 0;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 24) = 0;
    }
    *a3 = 7;
  }
  return a1;
}

uint64_t sub_18BDBC050(uint64_t a1)
{
  void *v2;
  icu::UnicodeSet *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void ***v8;

  uprv_free(*(void **)(a1 + 8));
  uregex_close(*(URegularExpression **)(a1 + 64));
  uregex_close(*(URegularExpression **)(a1 + 72));
  uhash_close(*(void ***)(a1 + 16));
  v3 = *(icu::UnicodeSet **)(a1 + 24);
  if (v3)
  {
    v4 = icu::UnicodeSet::~UnicodeSet(v2, v3);
    icu::UMemory::operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(void ****)(a1 + 56);
  if (v8)
  {
    if (*v8)
      (*((void (**)(void **))**v8 + 1))(*v8);
    uhash_close(v8[1]);
    icu::UMemory::operator delete(v8);
  }
  return a1;
}

uint64_t sub_18BDBC108(uint64_t result, char *a2, int32_t a3, _DWORD *a4, _DWORD *a5, int *a6)
{
  _OWORD v11[5];
  uint64_t v12;

  if (*a6 <= 0)
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    sub_18BDBBF60((uint64_t)v11, result, a6);
    sub_18BDBC1B8((UChar *)v11, a2, a3, (UErrorCode *)a6);
    if (a4)
    {
      if (*a6 >= 1)
      {
        *a4 = 1;
        *a5 = v12;
      }
    }
    return sub_18BDBC050((uint64_t)v11);
  }
  return result;
}

UChar *sub_18BDBC1B8(UChar *result, char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  uint64_t v7;
  const UChar *v8;
  int32_t v9;
  void *v10;
  const UChar *v11;
  int32_t v12;
  UChar *v13;
  uint64_t v14;
  int32_t v15;
  int32_t v16;
  unsigned int v17;
  int32_t v18;
  int32_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32_t v26;
  int32_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  int v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned __int16 *v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  signed int RangeStart;
  _DWORD *v50;
  unsigned int v51;
  int v52;
  int v53;
  const __int16 *v55;
  int32_t pDestLength;
  _BYTE v57[64];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  pDestLength = 0;
  if (*(int *)pErrorCode > 0)
    return result;
  v7 = (uint64_t)result;
  result = u_strFromUTF8(0, 0, &pDestLength, src, srcLength, pErrorCode);
  if (*pErrorCode != U_BUFFER_OVERFLOW_ERROR)
    return result;
  *pErrorCode = U_ZERO_ERROR;
  result = (UChar *)uprv_malloc(2 * pDestLength + 2);
  *(_QWORD *)(v7 + 8) = result;
  if (!result)
  {
    *pErrorCode = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  u_strFromUTF8(result, pDestLength + 1, 0, src, srcLength, pErrorCode);
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  icu::UnicodeString::UnicodeString(&v58, "(?m)^[ \\t]*([0-9A-Fa-f]+)[ \\t]+;[ \\t]*([0-9A-Fa-f]+(?:[ \\t]+[0-9A-Fa-f]+)*)[ \\t]*;\\s*(?:(SL)|(SA)|(ML)|(MA))[ "
    "\\t]*(?:#.*?)?$|^([ \\t]*(?:#.*?)?)$|^(.*?)$",
    0xFFFFFFFFLL,
    0);
  v8 = 0;
  if ((BYTE8(v58) & 0x11) == 0)
  {
    if ((BYTE8(v58) & 2) != 0)
      v8 = (const UChar *)((unint64_t)&v58 | 0xA);
    else
      v8 = (const UChar *)*((_QWORD *)&v59 + 1);
  }
  if ((SWORD4(v58) & 0x8000u) == 0)
    v9 = WORD4(v58) >> 5;
  else
    v9 = HIDWORD(v58);
  *(_QWORD *)(v7 + 64) = uregex_open(v8, v9, 0, 0, pErrorCode);
  v55 = L"\\s*([0-9A-F]+)";
  icu::UnicodeString::UnicodeString(v57, 1, &v55);
  icu::UnicodeString::operator=((icu::UnicodeString *)&v58, (icu::UnicodeString *)v57);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v57);
  v11 = 0;
  if ((BYTE8(v58) & 0x11) == 0)
  {
    if ((BYTE8(v58) & 2) != 0)
      v11 = (const UChar *)((unint64_t)&v58 | 0xA);
    else
      v11 = (const UChar *)*((_QWORD *)&v59 + 1);
  }
  if ((SWORD4(v58) & 0x8000u) == 0)
    v12 = WORD4(v58) >> 5;
  else
    v12 = HIDWORD(v58);
  *(_QWORD *)(v7 + 72) = uregex_open(v11, v12, 0, 0, pErrorCode);
  v13 = *(UChar **)(v7 + 8);
  if ((__int16)*v13 == -257)
    *v13 = 32;
  uregex_setText(*(URegularExpression **)(v7 + 64), v13, pDestLength, pErrorCode);
  if (!uregex_findNext(*(URegularExpression **)(v7 + 64), pErrorCode))
  {
LABEL_31:
    icu::UVector::sort(**(_QWORD **)(v7 + 56), (uint64_t)sub_18BDBBDB0, (int *)pErrorCode);
    v33 = icu::UMemory::operator new(v32, (icu::UMemory *)0x40, v31);
    if (v33)
    {
      *v33 = (uint64_t)off_1E2256B38;
      *((_WORD *)v33 + 4) = 2;
    }
    *(_QWORD *)(v7 + 48) = v33;
    v34 = *(_DWORD *)(**(_QWORD **)(v7 + 56) + 8);
    if (v34 < 1)
    {
LABEL_56:
      if ((int)icu::UnicodeSet::getRangeCount(*(icu::UnicodeSet **)(v7 + 24)) >= 1)
      {
        v48 = 0;
        do
        {
          RangeStart = icu::UnicodeSet::getRangeStart(*(icu::UnicodeSet **)(v7 + 24), v48);
          if (RangeStart <= (int)icu::UnicodeSet::getRangeEnd(*(icu::UnicodeSet **)(v7 + 24), v48))
          {
            do
            {
              v50 = (_DWORD *)uhash_iget(*(_QWORD *)(v7 + 16), RangeStart);
              v51 = *(unsigned __int16 *)(*(_QWORD *)v50 + 8);
              if ((v51 & 0x8000) != 0)
              {
                v52 = *(_DWORD *)(*(_QWORD *)v50 + 12);
                if (v52 >= 257)
                {
LABEL_66:
                  v30 = 1;
                  goto LABEL_69;
                }
              }
              else
              {
                v52 = v51 >> 5;
                if (v51 >> 5 > 0x100)
                  goto LABEL_66;
              }
              v53 = v50[2];
              icu::UVector::addElement(*(icu::UVector **)(v7 + 32), ((v52 << 24) - 0x1000000) | RangeStart, pErrorCode);
              icu::UVector::addElement(*(icu::UVector **)(v7 + 40), v53, pErrorCode);
            }
            while (RangeStart++ < (int)icu::UnicodeSet::getRangeEnd(*(icu::UnicodeSet **)(v7 + 24), v48));
          }
          ++v48;
        }
        while (v48 < (int)icu::UnicodeSet::getRangeCount(*(icu::UnicodeSet **)(v7 + 24)));
      }
      sub_18BDBC784(v7, (int *)pErrorCode);
      return (UChar *)icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v58);
    }
    v35 = 0;
    while (1)
    {
      v36 = (_DWORD *)icu::UVector::elementAt(**(icu::UVector ***)(v7 + 56), v35);
      v37 = *(_QWORD *)v36;
      v38 = *(unsigned __int16 *)(*(_QWORD *)v36 + 8);
      if ((v38 & 0x8000) != 0)
        v39 = *(_DWORD *)(v37 + 12);
      else
        v39 = v38 >> 5;
      v40 = *(_QWORD *)(v7 + 48);
      if (*(__int16 *)(v40 + 8) < 0)
        v41 = *(_DWORD *)(v40 + 12);
      else
        v41 = *(unsigned __int16 *)(v40 + 8) >> 5;
      if (v39 != 1)
      {
        v36[2] = v41;
        v43 = *(unsigned __int16 *)(v37 + 8);
        v44 = (__int16)v43;
        v45 = v43 >> 5;
        if (v44 >= 0)
          v46 = v45;
        else
          v46 = *(unsigned int *)(v37 + 12);
        icu::UnicodeString::doAppend(v40, (const icu::UnicodeString *)v37, 0, v46);
        goto LABEL_55;
      }
      if ((v38 & 0x8000) != 0)
      {
        if (*(_DWORD *)(v37 + 12))
        {
LABEL_44:
          if ((v38 & 2) != 0)
            v42 = (unsigned __int16 *)(v37 + 10);
          else
            v42 = *(unsigned __int16 **)(v37 + 24);
          v47 = *v42;
          goto LABEL_54;
        }
      }
      else if (v38 >> 5)
      {
        goto LABEL_44;
      }
      v47 = 0xFFFF;
LABEL_54:
      v36[2] = v47;
LABEL_55:
      if (v34 == ++v35)
        goto LABEL_56;
    }
  }
  while (1)
  {
    ++*(_DWORD *)(v7 + 80);
    if ((uregex_start(*(URegularExpression **)(v7 + 64), 7, pErrorCode) & 0x80000000) == 0)
      goto LABEL_30;
    if ((uregex_start(*(URegularExpression **)(v7 + 64), 8, pErrorCode) & 0x80000000) == 0)
    {
      v30 = 9;
      goto LABEL_69;
    }
    v14 = *(_QWORD *)(v7 + 8);
    v15 = uregex_start(*(URegularExpression **)(v7 + 64), 1, pErrorCode);
    v16 = uregex_end(*(URegularExpression **)(v7 + 64), 1, pErrorCode);
    v17 = sub_18BDBD968(v14, v15, v16, (int *)pErrorCode);
    v18 = uregex_start(*(URegularExpression **)(v7 + 64), 2, pErrorCode);
    v19 = uregex_end(*(URegularExpression **)(v7 + 64), 2, pErrorCode);
    uregex_setText(*(URegularExpression **)(v7 + 72), (const UChar *)(*(_QWORD *)(v7 + 8) + 2 * v18), v19 - v18, pErrorCode);
    v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0x40, v20);
    if (!v22)
      break;
    v23 = (uint64_t)v22;
    *v22 = (uint64_t)off_1E2256B38;
    *((_WORD *)v22 + 4) = 2;
    if (uregex_findNext(*(URegularExpression **)(v7 + 72), pErrorCode))
    {
      v24 = v18;
      do
      {
        v25 = *(_QWORD *)(v7 + 8) + 2 * v24;
        v26 = uregex_start(*(URegularExpression **)(v7 + 72), 1, pErrorCode);
        v27 = uregex_end(*(URegularExpression **)(v7 + 72), 1, pErrorCode);
        v28 = sub_18BDBD968(v25, v26, v27, (int *)pErrorCode);
        icu::UnicodeString::append(v23, v28);
      }
      while (uregex_findNext(*(URegularExpression **)(v7 + 72), pErrorCode));
    }
    v29 = sub_18BDBBE68(*(_QWORD *)(v7 + 56), v23, pErrorCode);
    uhash_iput(*(_QWORD *)(v7 + 16), v17, v29, (int *)pErrorCode);
    v30 = *(unsigned int *)pErrorCode;
    if ((int)v30 > 0)
      return (UChar *)icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v58);
    icu::UnicodeSet::add(*(icu::UnicodeSet **)(v7 + 24), v17);
LABEL_30:
    if (!uregex_findNext(*(URegularExpression **)(v7 + 64), pErrorCode))
      goto LABEL_31;
  }
  v30 = 7;
LABEL_69:
  *pErrorCode = v30;
  return (UChar *)icu::UnicodeString::~UnicodeString((void *)v30, (icu::UnicodeString *)&v58);
}

uint64_t sub_18BDBC784(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  UChar *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  UChar *v22;

  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8);
  result = (uint64_t)sub_18BDBDDE4(*(_QWORD *)(*(_QWORD *)a1 + 16), 4 * (int)v4, a2);
  if (*a2 <= 0)
  {
    v6 = result;
    if ((int)v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
        *(_DWORD *)(v6 + 4 * i) = icu::UVector::elementAti(*(icu::UVector **)(a1 + 32), i);
    }
    v8 = *(uint64_t **)(*(_QWORD *)a1 + 16);
    v9 = *v8;
    *(_DWORD *)(v9 + 12) = v6 - *v8;
    *(_DWORD *)(v9 + 16) = v4;
    v8[4] = v6;
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8);
    result = (uint64_t)sub_18BDBDDE4((uint64_t)v8, 2 * (int)v4, a2);
    if (*a2 <= 0)
    {
      v11 = result;
      if ((int)v10 >= 1)
      {
        for (j = 0; j != v10; ++j)
          *(_WORD *)(v11 + 2 * j) = icu::UVector::elementAti(*(icu::UVector **)(a1 + 40), j);
      }
      v13 = *(uint64_t **)(*(_QWORD *)a1 + 16);
      v14 = *v13;
      *(_DWORD *)(v14 + 20) = v11 - *v13;
      *(_DWORD *)(v14 + 24) = v10;
      v13[5] = v11;
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(unsigned __int16 *)(v15 + 8);
      if ((v16 & 0x8000) != 0)
        v17 = *(_DWORD *)(v15 + 12);
      else
        v17 = v16 >> 5;
      result = (uint64_t)sub_18BDBDDE4((uint64_t)v13, 2 * v17 + 2, a2);
      if (*a2 <= 0)
      {
        v18 = (UChar *)result;
        v19 = *(_QWORD *)(a1 + 48);
        v22 = v18;
        result = icu::UnicodeString::extract(v19, &v22, v17 + 1, a2);
        v20 = *(uint64_t **)(*(_QWORD *)a1 + 16);
        v21 = *v20;
        *(_DWORD *)(v21 + 28) = (_DWORD)v18 - *v20;
        *(_DWORD *)(v21 + 32) = v17;
        v20[6] = (uint64_t)v18;
      }
    }
  }
  return result;
}

void sub_18BDBC900(uint64_t *a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    icu::UMemory::operator delete(a1);
  }
}

void *sub_18BDBC93C()
{
  return &unk_1EE00A2C0;
}

icu::UnicodeSet *sub_18BDBC948(icu::UnicodeSet *result, _DWORD *a2)
{
  uint64_t *v2;
  icu::UnicodeSet *v4;
  icu::UnicodeSet *v5;
  icu::UnicodeSet *v6;

  *((_DWORD *)result + 3) = 0xFFFF;
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_DWORD *)result + 10) = 805306368;
  v2 = (uint64_t *)*a2;
  if ((int)v2 <= 0)
  {
    v4 = result;
    v5 = (icu::UnicodeSet *)icu::UMemory::operator new(v2, (icu::UMemory *)0xC8, (unint64_t)a2);
    v6 = v5;
    if (v5)
      icu::UnicodeSet::UnicodeSet(v5, 0, 0x10FFFFu);
    *((_QWORD *)v4 + 3) = v6;
    result = (icu::UnicodeSet *)uprv_strdup("");
    *((_QWORD *)v4 + 4) = result;
    if (*((_QWORD *)v4 + 3) && result)
      return icu::UnicodeSet::freeze(v6);
    else
      *a2 = 7;
  }
  return result;
}

uint64_t sub_18BDBC9F0(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(a1 + 8) = 944111087;
  *(_QWORD *)a1 = off_1E2268380;
  sub_18BDBC948((icu::UnicodeSet *)a1, a3);
  *(_QWORD *)(a1 + 16) = a2;
  return a1;
}

uint64_t sub_18BDBCA38(UErrorCode *a1)
{
  uint64_t result;
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;

  if (*(int *)a1 > 0)
    return 0;
  v3 = atomic_load(&dword_1EE00A2D0);
  if (v3 != 2 && icu::umtx_initImplPreInit(&dword_1EE00A2D0))
  {
    v4 = udata_openChoice(0, "cfu", "confusables", (unsigned int (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_18BDBE270, 0, a1);
    v6 = (uint64_t *)*(unsigned int *)a1;
    if ((int)v6 <= 0)
    {
      v7 = (uint64_t)v4;
      v8 = icu::UMemory::operator new(v6, (icu::UMemory *)0x38, v5);
      if (v8)
      {
        v9 = sub_18BDBDB2C((uint64_t)v8, v7, (int *)a1);
        qword_1EE00A2C8 = v9;
        if (*(int *)a1 < 1)
        {
          sub_18BDA1768(4u, (uint64_t)sub_18BDBE2E4);
          goto LABEL_15;
        }
        v10 = (void *)sub_18BDBDD9C(v9);
        icu::UMemory::operator delete(v10);
      }
      else
      {
        qword_1EE00A2C8 = 0;
        if (*(int *)a1 < 1)
        {
          *a1 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_15;
        }
      }
      qword_1EE00A2C8 = 0;
    }
LABEL_15:
    dword_1EE00A2D4 = *a1;
    icu::umtx_initImplPostInit(&dword_1EE00A2D0);
    goto LABEL_16;
  }
  if (dword_1EE00A2D4 >= 1)
  {
    result = 0;
    *a1 = dword_1EE00A2D4;
    return result;
  }
LABEL_16:
  if (*(int *)a1 > 0)
    return 0;
  v11 = (unsigned int *)(qword_1EE00A2C8 + 28);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  return qword_1EE00A2C8;
}

uint64_t sub_18BDBCB94(uint64_t a1, UErrorCode *a2)
{
  *(_DWORD *)(a1 + 8) = 944111087;
  *(_QWORD *)a1 = off_1E2268380;
  sub_18BDBC948((icu::UnicodeSet *)a1, a2);
  *(_QWORD *)(a1 + 16) = sub_18BDBCA38(a2);
  return a1;
}

uint64_t sub_18BDBCBE0(uint64_t a1, unint64_t a2, int *a3)
{
  uint64_t *v4;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v10;

  *(_QWORD *)a1 = off_1E2268380;
  *(_QWORD *)(a1 + 8) = 0xFFFF3845FDEFLL;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (*a3 <= 0)
  {
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    v7 = *(_QWORD *)(a2 + 16);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 28);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      *v4 = v7;
    }
    *(_QWORD *)(a1 + 24) = icu::UnicodeSet::clone(*(icu::UnicodeSet **)(a2 + 24), a2, v4);
    v10 = uprv_strdup(*(const char **)(a2 + 32));
    *(_QWORD *)(a1 + 32) = v10;
    if (!*(_QWORD *)(a1 + 24) || !v10)
      *a3 = 7;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }
  return a1;
}

void sub_18BDBCCA0(uint64_t a1)
{
  uint64_t (**v2)();
  uint64_t v3;
  icu::UnicodeSet *v4;
  void *v5;

  v2 = off_1E2268380;
  *(_QWORD *)a1 = off_1E2268380;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    sub_18BDBCCF4(v3);
  v4 = *(icu::UnicodeSet **)(a1 + 24);
  if (v4)
  {
    v5 = icu::UnicodeSet::~UnicodeSet(v2, v4);
    icu::UMemory::operator delete(v5);
  }
  uprv_free(*(void **)(a1 + 32));
  *(_DWORD *)(a1 + 8) = 0;
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BDBCCF4(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  void *v3;

  v1 = (unsigned int *)(a1 + 28);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1)
  {
    if (v2 == 1)
    {
      v3 = (void *)sub_18BDBDD9C(a1);
      icu::UMemory::operator delete(v3);
    }
  }
}

void sub_18BDBCD34(uint64_t a1)
{
  void *v1;

  sub_18BDBCCA0(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BDBCD48(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;

  if (*a2 > 0)
    return 0;
  v2 = a1;
  if (!a1)
  {
    v4 = 1;
LABEL_10:
    v2 = 0;
    *a2 = v4;
    return v2;
  }
  if (*(_DWORD *)(a1 + 8) != 944111087)
  {
    v4 = 3;
    goto LABEL_10;
  }
  v3 = *(uint64_t **)(a1 + 16);
  if (v3 && !sub_18BDBCDBC(v3, a2))
    return 0;
  return v2;
}

uint64_t sub_18BDBCDBC(uint64_t *a1, int *a2)
{
  uint64_t result;
  uint64_t v3;

  if (*a2 <= 0)
  {
    v3 = *a1;
    if (*a1)
    {
      if (*(_DWORD *)v3 == 944111087
        && *(_BYTE *)(v3 + 4) == 2
        && !*(_BYTE *)(v3 + 5)
        && !*(_BYTE *)(v3 + 6)
        && !*(_BYTE *)(v3 + 7))
      {
        return 1;
      }
    }
  }
  result = 0;
  *a2 = 3;
  return result;
}

void *sub_18BDBCE24(uint64_t a1, const char *a2, int *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  char *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  icu::UnicodeSet *v21;
  void *v22;
  void *v23;
  void *v24;
  icu::UnicodeSet *v25;
  void *v26;
  unint64_t v27;
  uint64_t *v28;
  icu::UnicodeSet *v29;
  icu::UnicodeSet *v30;
  void *v31;
  icu::UnicodeSet *v32;
  void *v33;
  uint64_t v34;
  _OWORD v36[12];
  uint64_t v37;
  _OWORD v38[12];
  uint64_t v39;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v38);
  v6 = 0;
  v7 = &a2[strlen(a2)];
  v8 = (char *)a2;
LABEL_2:
  v9 = strchr(v8, 44);
  v10 = 1 - (_DWORD)v8;
  do
  {
    v11 = v8;
    v12 = v10;
    v13 = *v8++;
    --v10;
  }
  while (v13 == 32);
  if (v9)
    v14 = v9;
  else
    v14 = (char *)v7;
  v15 = (_DWORD)v14 + v12;
  v16 = (unsigned __int8 *)(v14 - 1);
  while (v16 > (unsigned __int8 *)v11)
  {
    v17 = *v16--;
    --v15;
    if (v17 != 32)
    {
      v18 = uprv_strndup(v11, v15);
      sub_18BDBD0A4((int)v18, v18, (icu::UVector **)v38, a3);
      uprv_free(v18);
      if (*a3 < 1)
        v8 = v14 + 1;
      else
        v8 = (char *)v11;
      if (*a3 <= 0)
      {
        ++v6;
        if (v8 < v7)
          goto LABEL_2;
      }
      goto LABEL_17;
    }
  }
  if (v6)
  {
LABEL_17:
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v36);
    icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v36, 4106, 0, (UErrorCode *)a3);
    icu::UnicodeSet::addAll((icu::UVector **)v38, (const icu::UnicodeSet *)v36);
    icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v36, 4106, 1u, (UErrorCode *)a3);
    icu::UnicodeSet::addAll((icu::UVector **)v38, (const icu::UnicodeSet *)v36);
    v20 = *a3;
    if ((int)v20 <= 0)
    {
      v21 = icu::UnicodeSet::clone((icu::UnicodeSet *)v38, v19, (uint64_t *)v20);
      v22 = uprv_strdup(a2);
      if (v21 && (v23 = v22) != 0)
      {
        uprv_free(*(void **)(a1 + 32));
        *(_QWORD *)(a1 + 32) = v23;
        icu::UnicodeSet::freeze(v21);
        v25 = *(icu::UnicodeSet **)(a1 + 24);
        if (v25)
        {
          v26 = icu::UnicodeSet::~UnicodeSet(v24, v25);
          icu::UMemory::operator delete(v26);
        }
        *(_QWORD *)(a1 + 24) = v21;
        v20 = *(_DWORD *)(a1 + 12) | 0x40u;
        *(_DWORD *)(a1 + 12) = v20;
      }
      else
      {
        v20 = 7;
        *a3 = 7;
      }
    }
    icu::UnicodeSet::~UnicodeSet((void *)v20, (icu::UnicodeSet *)v36);
    return icu::UnicodeSet::~UnicodeSet((void *)v34, (icu::UnicodeSet *)v38);
  }
  uprv_free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = uprv_strdup("");
  v29 = (icu::UnicodeSet *)icu::UMemory::operator new(v28, (icu::UMemory *)0xC8, v27);
  if (v29 && (v30 = v29, icu::UnicodeSet::UnicodeSet(v29, 0, 0x10FFFFu), *(_QWORD *)(a1 + 32)))
  {
    icu::UnicodeSet::freeze(v30);
    v32 = *(icu::UnicodeSet **)(a1 + 24);
    if (v32)
    {
      v33 = icu::UnicodeSet::~UnicodeSet(v31, v32);
      icu::UMemory::operator delete(v33);
    }
    *(_QWORD *)(a1 + 24) = v30;
    v34 = *(_DWORD *)(a1 + 12) & 0xFFFFFFBF;
    *(_DWORD *)(a1 + 12) = v34;
  }
  else
  {
    v34 = 7;
    *a3 = 7;
  }
  return icu::UnicodeSet::~UnicodeSet((void *)v34, (icu::UnicodeSet *)v38);
}

void *sub_18BDBD0A4(int a1, char *__s1, icu::UVector **a3, int *a4)
{
  void *result;
  uint64_t v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  _OWORD v11[12];
  uint64_t v12;
  _OWORD v13[7];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  result = (void *)uscript_getCode(__s1, (int32_t *)v13, 30, a4);
  if (*a4 <= 0)
  {
    if (*a4 == -127)
    {
      *a4 = 1;
    }
    else
    {
      LODWORD(v7) = (_DWORD)result;
      v12 = 0;
      memset(v11, 0, sizeof(v11));
      icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v11);
      if ((int)v7 >= 1)
      {
        v7 = v7;
        v9 = (unsigned int *)v13;
        do
        {
          v10 = *v9++;
          icu::UnicodeSet::applyIntPropertyValue((icu::UnicodeSet *)v11, 4106, v10, (UErrorCode *)a4);
          icu::UnicodeSet::addAll(a3, (const icu::UnicodeSet *)v11);
          --v7;
        }
        while (v7);
      }
      return icu::UnicodeSet::~UnicodeSet(v8, (icu::UnicodeSet *)v11);
    }
  }
  return result;
}

uint64_t sub_18BDBD1BC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_18BDBD1C4(unsigned int a1, icu::ScriptSet *this, UErrorCode *a3)
{
  icu::ScriptSet::resetAll((uint64_t)this);
  icu::ScriptSet::setScriptExtensions(this, a1, a3);
  if (*(int *)a3 <= 0)
  {
    if (icu::ScriptSet::test((uint64_t)this, 0x11u, (int *)a3))
    {
      icu::ScriptSet::set((uint64_t)this, 0xACu, (int *)a3);
      icu::ScriptSet::set((uint64_t)this, 0x69u, (int *)a3);
      icu::ScriptSet::set((uint64_t)this, 0x77u, (int *)a3);
    }
    if (icu::ScriptSet::test((uint64_t)this, 0x14u, (int *)a3))
      icu::ScriptSet::set((uint64_t)this, 0x69u, (int *)a3);
    if (icu::ScriptSet::test((uint64_t)this, 0x16u, (int *)a3))
      icu::ScriptSet::set((uint64_t)this, 0x69u, (int *)a3);
    if (icu::ScriptSet::test((uint64_t)this, 0x12u, (int *)a3))
      icu::ScriptSet::set((uint64_t)this, 0x77u, (int *)a3);
    if (icu::ScriptSet::test((uint64_t)this, 5u, (int *)a3))
      icu::ScriptSet::set((uint64_t)this, 0xACu, (int *)a3);
    if (icu::ScriptSet::test((uint64_t)this, 0, (int *)a3)
      || icu::ScriptSet::test((uint64_t)this, 1u, (int *)a3))
    {
      icu::ScriptSet::setAll((uint64_t)this);
    }
  }
}

void sub_18BDBD324(int a1, uint64_t a2, icu::ScriptSet *this, UErrorCode *a4)
{
  sub_18BDBD334(a1, a2, 0xC8u, this, a4);
}

void sub_18BDBD334(int a1, uint64_t a2, unsigned int a3, icu::ScriptSet *this, UErrorCode *a5)
{
  int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  _QWORD v16[3];
  int v17;

  icu::ScriptSet::setAll((uint64_t)this);
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  icu::ScriptSet::ScriptSet((uint64_t)v16);
  LODWORD(v10) = *(unsigned __int16 *)(a2 + 8);
  v9 = (__int16)v10;
  LODWORD(v10) = v10 >> 5;
  if (v9 >= 0)
    v10 = v10;
  else
    v10 = *(unsigned int *)(a2 + 12);
  if ((int)v10 >= 1)
  {
    v11 = 0;
    do
    {
      v12 = icu::UnicodeString::char32At((uint64_t *)v10, (icu::UnicodeString *)a2, v11);
      sub_18BDBD1C4(v12, (icu::ScriptSet *)v16, a5);
      if (*(int *)a5 > 0)
        break;
      if (a3 == 200 || !icu::ScriptSet::test((uint64_t)v16, a3, (int *)a5))
        icu::ScriptSet::intersect((uint64_t)this, (const icu::ScriptSet *)v16);
      v13 = v12 < 0x10000 ? 1 : 2;
      v11 += v13;
      v14 = *(unsigned __int16 *)(a2 + 8);
      v15 = (__int16)v14;
      LODWORD(v10) = v14 >> 5;
      v10 = v15 >= 0 ? v10 : *(unsigned int *)(a2 + 12);
    }
    while (v11 < (int)v10);
  }
  icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v16);
}

icu::UnicodeSet *sub_18BDBD444(int a1, uint64_t a2, icu::UnicodeSet *this)
{
  icu::UnicodeSet *result;
  int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  double NumericValue;
  int v11;
  unsigned int v12;
  int v13;

  result = icu::UnicodeSet::clear(this);
  LODWORD(v7) = *(unsigned __int16 *)(a2 + 8);
  v6 = (__int16)v7;
  LODWORD(v7) = v7 >> 5;
  if (v6 >= 0)
    v7 = v7;
  else
    v7 = *(unsigned int *)(a2 + 12);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = icu::UnicodeString::char32At((uint64_t *)v7, (icu::UnicodeString *)a2, v8);
      result = (icu::UnicodeSet *)u_charType(v9);
      if ((_DWORD)result == 9)
      {
        NumericValue = u_getNumericValue(v9);
        result = icu::UnicodeSet::add(this, v9 - (int)NumericValue);
      }
      if (v9 < 0x10000)
        v11 = 1;
      else
        v11 = 2;
      v8 += v11;
      v12 = *(unsigned __int16 *)(a2 + 8);
      v13 = (__int16)v12;
      LODWORD(v7) = v12 >> 5;
      if (v13 >= 0)
        v7 = v7;
      else
        v7 = *(unsigned int *)(a2 + 12);
    }
    while (v8 < (int)v7);
  }
  return result;
}

uint64_t sub_18BDBD504(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  unsigned int v5;
  uint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;

  if (!icu::UnicodeSet::containsAll(*(icu::UnicodeSet **)(a1 + 24), (const icu::UnicodeString *)a2))
    return 1610612736;
  v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x8000u) == 0)
    v6 = v5 >> 5;
  else
    v6 = *(unsigned int *)(a2 + 12);
  if ((int)v6 < 1)
    return 0x10000000;
  if ((v5 & 2) != 0)
    v7 = (unsigned __int16 *)(a2 + 10);
  else
    v7 = *(unsigned __int16 **)(a2 + 24);
  while (*v7 < 0x80u)
  {
    ++v7;
    if (!--v6)
      return 0x10000000;
  }
  memset(v14, 0, sizeof(v14));
  v15 = 0;
  v9 = icu::ScriptSet::ScriptSet((uint64_t)v14);
  sub_18BDBD334(v9, a2, 0xC8u, (icu::ScriptSet *)v14, a3);
  if (*(int *)a3 <= 0)
  {
    if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v14))
    {
      memset(v12, 0, sizeof(v12));
      v13 = 0;
      v10 = icu::ScriptSet::ScriptSet((uint64_t)v12);
      sub_18BDBD334(v10, a2, 0x19u, (icu::ScriptSet *)v12, a3);
      if (*(int *)a3 <= 0)
      {
        if (icu::ScriptSet::test((uint64_t)v12, 0xACu, (int *)a3)
          || icu::ScriptSet::test((uint64_t)v12, 0x69u, (int *)a3)
          || icu::ScriptSet::test((uint64_t)v12, 0x77u, (int *)a3))
        {
          v8 = 805306368;
        }
        else if (icu::ScriptSet::isEmpty((icu::ScriptSet *)v12)
               || icu::ScriptSet::test((uint64_t)v12, 8u, (int *)a3)
               || icu::ScriptSet::test((uint64_t)v12, 0xEu, (int *)a3)
               || icu::ScriptSet::test((uint64_t)v12, 6u, (int *)a3))
        {
          v8 = 1342177280;
        }
        else
        {
          v8 = 0x40000000;
        }
      }
      else
      {
        v8 = 1610612736;
      }
      icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v12);
    }
    else
    {
      v8 = 0x20000000;
    }
  }
  else
  {
    v8 = 1610612736;
  }
  icu::ScriptSet::~ScriptSet((icu::ScriptSet *)v14);
  return v8;
}

uint64_t sub_18BDBD6CC(uint64_t a1, icu::UnicodeString *this)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  uint64_t v7;
  char v8;
  UChar32 v9;
  unsigned int v10;
  int CombiningClass;
  int v12;
  unsigned int v13;
  int v14;

  v2 = *((unsigned __int16 *)this + 4);
  v3 = (__int16)v2;
  LODWORD(v4) = v2 >> 5;
  if (v3 >= 0)
    v4 = v4;
  else
    v4 = *((unsigned int *)this + 3);
  if ((int)v4 < 1)
    return 0xFFFFFFFFLL;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = icu::UnicodeString::char32At((uint64_t *)v4, this, v7);
    v10 = v9;
    if ((v8 & 1) != 0 && v9 == 775)
      break;
    CombiningClass = u_getCombiningClass(v9);
    if (CombiningClass == 230 || !CombiningClass)
      v8 = sub_18BDBD79C(a1, v10);
    if (v10 < 0x10000)
      v12 = 1;
    else
      v12 = 2;
    v7 = (v12 + v7);
    v13 = *((unsigned __int16 *)this + 4);
    v14 = (__int16)v13;
    LODWORD(v4) = v13 >> 5;
    if (v14 >= 0)
      v4 = v4;
    else
      v4 = *((unsigned int *)this + 3);
    if ((int)v7 >= (int)v4)
      return 0xFFFFFFFFLL;
  }
  return v7;
}

uint64_t sub_18BDBD79C(uint64_t a1, UChar32 c)
{
  uint64_t v2;
  BOOL v3;
  int v6;
  int v7;
  uint64_t *v8;
  UChar32 v9;
  unint64_t v10;
  BOOL v11;
  void (**v13)(icu::UnicodeString *__hidden);
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = 1;
  v3 = (c - 105) > 3 || c == 107;
  if (v3 && c != 305 && c != 567 && !u_hasBinaryProperty(c, UCHAR_SOFT_DOTTED))
  {
    v14 = 0u;
    v17 = 0;
    v16 = 0u;
    v15 = 0u;
    v13 = off_1E2256B38;
    LOWORD(v14) = 2;
    sub_18BDBD8E0(*(_QWORD **)(a1 + 16), c, (icu::UnicodeString *)&v13);
    if ((v14 & 0x8000u) == 0)
      v6 = (unsigned __int16)v14 >> 5;
    else
      v6 = DWORD1(v14);
    v7 = icu::UnicodeString::moveIndex32((icu::UnicodeString *)&v13, v6, -1);
    v9 = icu::UnicodeString::char32At(v8, (icu::UnicodeString *)&v13, v7);
    if (v9 == c
      || ((v10 = (v9 - 105), v10 <= 3) ? (v11 = (_DWORD)v10 == 2) : (v11 = 1),
          v11 && v9 != 305 && v9 != 567 && !u_hasBinaryProperty(v9, UCHAR_SOFT_DOTTED)))
    {
      v2 = 0;
    }
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v13);
  }
  return v2;
}

uint64_t sub_18BDBD8E0(_QWORD *a1, signed int a2, icu::UnicodeString *this)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = 0;
  v4 = *(_DWORD *)(*a1 + 16);
  v5 = a1[4];
  do
  {
    v6 = (v4 + v3) / 2;
    v7 = *(_DWORD *)(v5 + 4 * v6);
    if ((v7 & 0xFFFFFF) <= a2)
    {
      if ((v7 & 0xFFFFFF) >= a2)
        goto LABEL_8;
      v3 = (v4 + v3) / 2;
    }
    else
    {
      v4 = (v4 + v3) / 2;
    }
  }
  while (v4 - v3 > 1);
  v7 = *(_DWORD *)(v5 + 4 * v3);
  v6 = v3;
LABEL_8:
  if ((v7 & 0xFFFFFF) == a2)
    return sub_18BDBDF04(a1, v6, (uint64_t)this);
  icu::UnicodeString::append((uint64_t)this, a2);
  return 1;
}

uint64_t sub_18BDBD968(uint64_t result, int a2, int a3, int *a4)
{
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;

  if (*a4 > 0 || a2 >= a3)
    return 0;
  v5 = result;
  LODWORD(result) = 0;
  v6 = (unsigned __int16 *)(v5 + 2 * a2);
  v7 = a3 - (uint64_t)a2;
  do
  {
    v9 = *v6++;
    v8 = v9;
    if (v9 <= 0x39)
      v10 = -48;
    else
      v10 = -55;
    v11 = v10 + v8;
    v12 = v8 - 87;
    if (v11 <= 15)
      v12 = v11;
    result = (v12 + 16 * result);
    --v7;
  }
  while (v7);
  if (result >= 0x110000)
  {
    result = 0;
    *a4 = 9;
  }
  return result;
}

icu::UnicodeSet *sub_18BDBD9DC(_DWORD *a1)
{
  icu::UnicodeSet *result;

  a1[3] = 0;
  result = icu::UnicodeSet::clear((icu::UnicodeSet *)(a1 + 4));
  a1[54] = -1;
  return result;
}

uint64_t sub_18BDBDA0C(uint64_t a1)
{
  icu::UnicodeSet *v2;

  *(_DWORD *)(a1 + 8) = 657779934;
  *(_QWORD *)a1 = off_1E22683A8;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 16));
  *(_DWORD *)(a1 + 12) = 0;
  icu::UnicodeSet::clear(v2);
  *(_DWORD *)(a1 + 216) = -1;
  return a1;
}

uint64_t sub_18BDBDA58(uint64_t result, int *a2)
{
  int v2;

  if (*a2 > 0)
    return 0;
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 657779934)
      return result;
    v2 = 3;
  }
  else
  {
    v2 = 1;
  }
  result = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_18BDBDA9C(uint64_t a1, int a2)
{
  unsigned int v2;

  if ((a2 & 0x40000000) == 0)
    return *(unsigned int *)(a1 + 12);
  v2 = *(_DWORD *)(a1 + 216);
  if (v2 == -1)
    return *(unsigned int *)(a1 + 12);
  else
    return *(_DWORD *)(a1 + 12) | v2;
}

void sub_18BDBDAC0(_DWORD *a1)
{
  *(_QWORD *)a1 = off_1E22683A8;
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 4));
  a1[2] = 0;
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BDBDAF4(_DWORD *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E22683A8;
  icu::UnicodeSet::~UnicodeSet(off_1E22683A8, (icu::UnicodeSet *)(a1 + 4));
  a1[2] = 0;
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BDBDB2C(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  if (*a3 <= 0)
  {
    *(_QWORD *)(a1 + 16) = a2;
    *(_QWORD *)a1 = udata_getMemory(a2);
    sub_18BDBCDBC((uint64_t *)a1, a3);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    if (*a3 <= 0)
    {
      v6 = *(_QWORD *)a1;
      v7 = *(int *)(*(_QWORD *)a1 + 12);
      if ((_DWORD)v7)
        *v4 = v6 + v7;
      v8 = *(int *)(v6 + 20);
      if ((_DWORD)v8)
        *(_QWORD *)(a1 + 40) = v6 + v8;
      v9 = *(int *)(v6 + 28);
      if ((_DWORD)v9)
        *(_QWORD *)(a1 + 48) = v6 + v9;
    }
  }
  return a1;
}

uint64_t sub_18BDBDBF0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  _QWORD *v5;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  if (*a4 <= 0)
  {
    if (a3 <= 0x5F)
      goto LABEL_5;
    if (!a2)
    {
      v7 = 1;
      goto LABEL_7;
    }
    *(_QWORD *)a1 = a2;
    if (*(_DWORD *)(a2 + 8) > (signed int)a3)
    {
LABEL_5:
      v7 = 3;
LABEL_7:
      *a4 = v7;
      return a1;
    }
    sub_18BDBCDBC((uint64_t *)a1, a4);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    if (*a4 <= 0)
    {
      v9 = *(_QWORD *)a1;
      v10 = *(int *)(*(_QWORD *)a1 + 12);
      if ((_DWORD)v10)
        *v5 = v9 + v10;
      v11 = *(int *)(v9 + 20);
      if ((_DWORD)v11)
        *(_QWORD *)(a1 + 40) = v9 + v11;
      v12 = *(int *)(v9 + 28);
      if ((_DWORD)v12)
        *(_QWORD *)(a1 + 48) = v9 + v12;
    }
  }
  return a1;
}

uint64_t sub_18BDBDCD8(uint64_t a1, int *a2)
{
  _QWORD *v3;
  char *v5;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  atomic_store(1u, (unsigned int *)(a1 + 28));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  if (*a2 <= 0)
  {
    *(_BYTE *)(a1 + 8) = 1;
    v5 = (char *)uprv_malloc(0x60uLL);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 24) = 96;
    if (v5)
    {
      *((_QWORD *)v5 + 11) = 0;
      *(_OWORD *)(v5 + 72) = 0u;
      *(_OWORD *)(v5 + 56) = 0u;
      *(_OWORD *)(v5 + 40) = 0u;
      *(_OWORD *)(v5 + 24) = 0u;
      *(_OWORD *)(v5 + 8) = 0u;
      *(_DWORD *)v5 = 944111087;
      *((_DWORD *)v5 + 1) = 2;
      v3[1] = 0;
      v3[2] = 0;
      *v3 = 0;
    }
    else
    {
      *a2 = 7;
    }
  }
  return a1;
}

uint64_t sub_18BDBDD9C(uint64_t a1)
{
  _OWORD *v2;

  if (*(_BYTE *)(a1 + 8))
    uprv_free(*(void **)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(_OWORD **)(a1 + 16);
  if (v2)
    udata_close(v2);
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

char *sub_18BDBDDE4(uint64_t a1, int a2, int *a3)
{
  signed int v6;
  uint64_t v7;
  size_t v8;
  _DWORD *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*a3 > 0)
    return 0;
  if (!*(_BYTE *)(a1 + 8))
    abort();
  v6 = (a2 + 15) & 0xFFFFFFF0;
  v7 = *(unsigned int *)(a1 + 24);
  v8 = (v7 + v6);
  *(_DWORD *)(a1 + 24) = v8;
  v9 = uprv_realloc(*(void **)a1, v8);
  *(_QWORD *)a1 = v9;
  v9[2] = *(_DWORD *)(a1 + 24);
  bzero((char *)v9 + v7, v6);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v10 = *(int **)a1;
  if (*a3 <= 0)
  {
    v11 = v10[3];
    if ((_DWORD)v11)
      *(_QWORD *)(a1 + 32) = (char *)v10 + v11;
    v12 = v10[5];
    if ((_DWORD)v12)
      *(_QWORD *)(a1 + 40) = (char *)v10 + v12;
    v13 = v10[7];
    if ((_DWORD)v13)
      *(_QWORD *)(a1 + 48) = (char *)v10 + v13;
  }
  return (char *)v10 + v7;
}

size_t sub_18BDBDEB0(const void **a1, void *__dst, int a3, _DWORD *a4)
{
  size_t v4;

  v4 = *((int *)*a1 + 2);
  if ((int)v4 <= a3)
    memcpy(__dst, *a1, v4);
  else
    *a4 = 15;
  return v4;
}

uint64_t sub_18BDBDEF8(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 8);
}

uint64_t sub_18BDBDF04(_QWORD *a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  __int16 v6;

  v3 = HIBYTE(*(_DWORD *)(a1[4] + 4 * a2));
  v4 = (v3 + 1);
  if (v3)
  {
    icu::UnicodeString::doAppend(a3, a1[6] + 2 * *(unsigned __int16 *)(a1[5] + 2 * a2), 0, (v3 + 1));
  }
  else
  {
    v6 = *(_WORD *)(a1[5] + 2 * a2);
    icu::UnicodeString::doAppend(a3, (uint64_t)&v6, 0, 1);
  }
  return v4;
}

uint64_t uspoof_swap(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;

  if (!a5)
    return 0;
  if (*a5 > 0)
    return 0;
  if (!a1 || !a2 || (v12 = a3, (int)a3 < -1) || (int)a3 >= 1 && !a4)
  {
    result = 0;
    v13 = 1;
LABEL_20:
    *a5 = v13;
    return result;
  }
  v14 = *(unsigned __int8 *)(a2 + 12);
  if (__PAIR64__(*(unsigned __int8 *)(a2 + 13), v14) != 0x6600000043
    || *(_BYTE *)(a2 + 14) != 117
    || *(_BYTE *)(a2 + 15) != 32
    || *(_BYTE *)(a2 + 16) != 2
    || *(_BYTE *)(a2 + 17)
    || *(_BYTE *)(a2 + 18)
    || *(_BYTE *)(a2 + 19))
  {
    v15 = "uspoof_swap(): data format %02x.%02x.%02x.%02x (format version %02x %02x %02x %02x) is not recognized\n";
    v33 = v14;
LABEL_19:
    udata_printError(a1, (uint64_t)v15, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v33);
    result = 0;
    v13 = 16;
    goto LABEL_20;
  }
  v16 = udata_swapDataHeader(a1, (unsigned __int16 *)a2, a3, a4, a5, a6, a7, a8);
  v17 = (char *)(a2 + v16);
  if ((*(unsigned int (**)(_QWORD))(a1 + 16))(*(unsigned int *)v17) != 944111087
    || (*(unsigned int (**)(_QWORD))(a1 + 16))(*((unsigned int *)v17 + 2)) <= 0x5F)
  {
    v15 = "uspoof_swap(): Spoof Data header is invalid.\n";
    goto LABEL_19;
  }
  v18 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v17 + 2));
  v34 = v18 + v16;
  if ((v12 & 0x80000000) == 0)
  {
    if ((int)v34 > v12)
    {
      udata_printError(a1, (uint64_t)"uspoof_swap(): too few bytes (%d after ICU Data header) for spoof data.\n", v19, v20, v21, v22, v23, v24, v18);
      result = 0;
      v13 = 8;
      goto LABEL_20;
    }
    v25 = (char *)a4 + v16;
    if ((unsigned __int16 *)a2 != a4)
      bzero((char *)a4 + v16, (int)v18);
    v26 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v17 + 3));
    v27 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v17 + 4));
    (*(void (**)(uint64_t, char *, _QWORD, char *, int *))(a1 + 56))(a1, &v17[v26], (4 * v27), &v25[v26], a5);
    v28 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v17 + 5));
    v29 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v17 + 6));
    (*(void (**)(uint64_t, char *, _QWORD, char *, int *))(a1 + 48))(a1, &v17[v28], (2 * v29), &v25[v28], a5);
    v30 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v17 + 7));
    v31 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*((unsigned int *)v17 + 8));
    (*(void (**)(uint64_t, char *, _QWORD, char *, int *))(a1 + 48))(a1, &v17[v30], (2 * v31), &v25[v30], a5);
    v32 = (*(uint64_t (**)(_QWORD))(a1 + 16))(*(unsigned int *)v17);
    (*(void (**)(char *, uint64_t))(a1 + 40))(v25, v32);
    if ((unsigned __int16 *)a2 != a4)
      *((_DWORD *)v25 + 1) = *((_DWORD *)v17 + 1);
    (*(void (**)(uint64_t, unsigned int *, uint64_t, char *, int *))(a1 + 56))(a1, (unsigned int *)v17 + 2, 88, v25 + 8, a5);
  }
  return v34;
}

uint64_t sub_18BDBE270(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  if (*a4 < 0x14u
    || *((_BYTE *)a4 + 4)
    || *((_BYTE *)a4 + 5)
    || *((_BYTE *)a4 + 8) != 67
    || *((_BYTE *)a4 + 9) != 102
    || *((_BYTE *)a4 + 10) != 117
    || *((_BYTE *)a4 + 11) != 32
    || *((_BYTE *)a4 + 12) != 2)
  {
    return 0;
  }
  if (a1)
    *a1 = *((_DWORD *)a4 + 4);
  return 1;
}

uint64_t sub_18BDBE2E4()
{
  if (qword_1EE00A2C8)
  {
    sub_18BDBCCF4(qword_1EE00A2C8);
    qword_1EE00A2C8 = 0;
    atomic_store(0, &dword_1EE00A2D0);
  }
  return 1;
}

_QWORD *icu::UTF16CollationIterator::UTF16CollationIterator(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  result = (_QWORD *)icu::CollationIterator::CollationIterator(a1, (uint64_t)a2);
  *result = off_1E2268460;
  result[49] = a3;
  result[50] = a3 + a2[50] - a2[49];
  v6 = a2[51];
  if (v6)
    v7 = a3 + v6 - a2[49];
  else
    v7 = 0;
  result[51] = v7;
  return result;
}

{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  result = (_QWORD *)icu::CollationIterator::CollationIterator(a1, (uint64_t)a2);
  *result = off_1E2268460;
  result[49] = a3;
  result[50] = a3 + a2[50] - a2[49];
  v6 = a2[51];
  if (v6)
    v7 = a3 + v6 - a2[49];
  else
    v7 = 0;
  result[51] = v7;
  return result;
}

void icu::UTF16CollationIterator::~UTF16CollationIterator(icu::UTF16CollationIterator *this)
{
  void *v1;

  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::UTF16CollationIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = icu::CollationIterator::operator==(a1, a2);
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392) == *(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392);
  return result;
}

uint64_t icu::UTF16CollationIterator::resetToOffset(icu::UTF16CollationIterator *this, int a2)
{
  uint64_t result;

  result = icu::CollationIterator::reset((uint64_t)this);
  *((_QWORD *)this + 50) = *((_QWORD *)this + 49) + 2 * a2;
  return result;
}

uint64_t icu::UTF16CollationIterator::getOffset(icu::UTF16CollationIterator *this)
{
  return (*((_QWORD *)this + 50) - *((_QWORD *)this + 49)) >> 1;
}

uint64_t icu::UTF16CollationIterator::handleNextCE32(icu::UTF16CollationIterator *this, int *a2, UErrorCode *a3)
{
  unsigned __int16 *v3;
  unsigned int v4;

  v3 = (unsigned __int16 *)*((_QWORD *)this + 50);
  if (v3 == *((unsigned __int16 **)this + 51))
  {
    *a2 = -1;
    return 192;
  }
  else
  {
    v4 = *v3;
    *((_QWORD *)this + 50) = v3 + 1;
    *a2 = (unsigned __int16)v4;
    return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                           + 4
                           * ((v4 & 0x1F)
                            + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + (((unint64_t)v4 >> 4) & 0xFFE))));
  }
}

uint64_t icu::UTF16CollationIterator::handleGetTrailSurrogate(icu::UTF16CollationIterator *this)
{
  unsigned __int16 *v1;
  uint64_t result;

  v1 = (unsigned __int16 *)*((_QWORD *)this + 50);
  if (v1 == *((unsigned __int16 **)this + 51))
    return 0;
  result = *v1;
  if ((result & 0xFC00) == 0xDC00)
    *((_QWORD *)this + 50) = v1 + 1;
  return result;
}

uint64_t icu::UTF16CollationIterator::foundNULTerminator(icu::UTF16CollationIterator *this)
{
  uint64_t v2;

  if (*((_QWORD *)this + 51))
    return 0;
  v2 = *((_QWORD *)this + 50) - 2;
  *((_QWORD *)this + 50) = v2;
  *((_QWORD *)this + 51) = v2;
  return 1;
}

uint64_t icu::UTF16CollationIterator::nextCodePoint(icu::UTF16CollationIterator *this, UErrorCode *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  uint64_t result;
  BOOL v6;
  unsigned __int16 *v7;
  int v9;

  v2 = (unsigned __int16 *)*((_QWORD *)this + 50);
  v3 = (unsigned __int16 *)*((_QWORD *)this + 51);
  if (v2 == v3)
    return 0xFFFFFFFFLL;
  result = *v2;
  if (v3)
    v6 = 0;
  else
    v6 = (_DWORD)result == 0;
  if (v6)
  {
    *((_QWORD *)this + 51) = v2;
    return 0xFFFFFFFFLL;
  }
  v7 = v2 + 1;
  *((_QWORD *)this + 50) = v2 + 1;
  if ((result & 0xFC00) == 0xD800 && v7 != v3)
  {
    v9 = *v7;
    if ((v9 & 0xFC00) == 0xDC00)
    {
      *((_QWORD *)this + 50) = v2 + 2;
      return (v9 + ((_DWORD)result << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UTF16CollationIterator::previousCodePoint(icu::UTF16CollationIterator *this, UErrorCode *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  int v8;
  int v9;

  v3 = *((_QWORD *)this + 49);
  v2 = *((_QWORD *)this + 50);
  if (v2 == v3)
    return 0xFFFFFFFFLL;
  result = *(unsigned __int16 *)(v2 - 2);
  *((_QWORD *)this + 50) = v2 - 2;
  if (v2 - 2 != v3 && (result & 0xFC00) == 56320)
  {
    v9 = *(unsigned __int16 *)(v2 - 4);
    v7 = v2 - 4;
    v8 = v9;
    if ((v9 & 0xFC00) == 0xD800)
    {
      *((_QWORD *)this + 50) = v7;
      return (result + (v8 << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::UTF16CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  __int16 *v3;
  __int16 *v4;
  unsigned int v5;
  __int16 v6;
  __int16 *v7;
  BOOL v8;

  if (a2 >= 1)
  {
    v4 = *(__int16 **)(this + 400);
    v3 = *(__int16 **)(this + 408);
    v5 = a2 + 1;
    while (v4 != v3)
    {
      v6 = *v4;
      if (!v3 && !*v4)
      {
        *(_QWORD *)(this + 408) = v4;
        return this;
      }
      v7 = v4 + 1;
      *(_QWORD *)(this + 400) = v4 + 1;
      v8 = (v6 & 0xFC00) != 0xD800 || v7 == v3;
      if (!v8 && (*v7 & 0xFC00) == 0xDC00)
      {
        v7 = v4 + 2;
        *(_QWORD *)(this + 400) = v4 + 2;
      }
      --v5;
      v4 = v7;
      if (v5 <= 1)
        return this;
    }
  }
  return this;
}

uint64_t icu::UTF16CollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;

  if (a2 >= 1)
  {
    v3 = *(_QWORD *)(this + 392);
    v4 = *(_QWORD *)(this + 400);
    v5 = a2 + 1;
    do
    {
      if (v4 == v3)
        break;
      v6 = v4 - 2;
      v7 = *(_WORD *)(v4 - 2);
      *(_QWORD *)(this + 400) = v4 - 2;
      if (v4 - 2 != v3 && (v7 & 0xFC00) == 0xDC00)
      {
        v9 = *(_WORD *)(v4 - 4);
        v8 = v4 - 4;
        if ((v9 & 0xFC00) == 0xD800)
        {
          *(_QWORD *)(this + 400) = v8;
          v6 = v8;
        }
      }
      --v5;
      v4 = v6;
    }
    while (v5 > 1);
  }
  return this;
}

uint64_t icu::FCDUTF16CollationIterator::FCDUTF16CollationIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;

  v6 = (_QWORD *)icu::CollationIterator::CollationIterator(a1, a2);
  v6[49] = 0;
  v6[50] = 0;
  *v6 = off_1E22684F0;
  v6[51] = 0;
  v6[52] = a3;
  v6[53] = a3 + *(_QWORD *)(a2 + 424) - *(_QWORD *)(a2 + 416);
  v7 = *(_QWORD *)(a2 + 432);
  v8 = *(_QWORD *)(a2 + 440);
  v9 = a3 + v7 - *(_QWORD *)(a2 + 416);
  if (!v7)
    v9 = 0;
  v6[54] = v9;
  v10 = a3 + v8 - *(_QWORD *)(a2 + 416);
  if (!v8)
    v10 = 0;
  v11 = *(_QWORD *)(a2 + 448);
  v6[55] = v10;
  v6[56] = v11;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v6 + 57), (UChar **)(a2 + 456));
  v12 = *(unsigned __int8 *)(a2 + 520);
  *(_BYTE *)(a1 + 520) = v12;
  v13 = *(_QWORD *)(a2 + 392);
  if (v12 || v13 == *(_QWORD *)(a2 + 424))
  {
    v17 = *(_QWORD *)(a2 + 408);
    v16 = *(_QWORD *)(a2 + 416);
    v18 = a3 + v13 - v16;
    v19 = a3 + *(_QWORD *)(a2 + 400) - v16;
    *(_QWORD *)(a1 + 392) = v18;
    *(_QWORD *)(a1 + 400) = v19;
    v20 = a3 + v17 - *(_QWORD *)(a2 + 416);
    if (!v17)
      v20 = 0;
  }
  else
  {
    v14 = *(unsigned __int16 *)(a1 + 464);
    if ((v14 & 0x11) != 0)
    {
      v15 = 0;
    }
    else if ((v14 & 2) != 0)
    {
      v15 = a1 + 466;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 480);
    }
    *(_QWORD *)(a1 + 392) = v15;
    *(_QWORD *)(a1 + 400) = v15 + *(_QWORD *)(a2 + 400) - *(_QWORD *)(a2 + 392);
    if ((v14 & 0x8000) != 0)
      v21 = *(_DWORD *)(a1 + 468);
    else
      v21 = v14 >> 5;
    v20 = v15 + 2 * (int)v21;
  }
  *(_QWORD *)(a1 + 408) = v20;
  return a1;
}

void icu::FCDUTF16CollationIterator::~FCDUTF16CollationIterator(icu::FCDUTF16CollationIterator *this)
{
  *(_QWORD *)this = off_1E22684F0;
  icu::UnicodeString::~UnicodeString(off_1E22684F0, (icu::FCDUTF16CollationIterator *)((char *)this + 456));
  icu::CollationIterator::~CollationIterator(this);
}

{
  *(_QWORD *)this = off_1E22684F0;
  icu::UnicodeString::~UnicodeString(off_1E22684F0, (icu::FCDUTF16CollationIterator *)((char *)this + 456));
  icu::CollationIterator::~CollationIterator(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E22684F0;
  icu::UnicodeString::~UnicodeString(off_1E22684F0, (icu::FCDUTF16CollationIterator *)((char *)this + 456));
  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::FCDUTF16CollationIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = icu::CollationIterator::operator==(a1, a2);
  if ((_DWORD)result)
  {
    if (*(unsigned __int8 *)(a1 + 520) == *(unsigned __int8 *)(a2 + 520))
    {
      if (*(_BYTE *)(a1 + 520))
      {
LABEL_4:
        v5 = *(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 416);
        v6 = *(_QWORD *)(a2 + 416);
        return v5 == *(_QWORD *)(a2 + 400) - v6;
      }
      v7 = *(_QWORD *)(a1 + 392);
      v8 = *(_QWORD *)(a1 + 424);
      v6 = *(_QWORD *)(a2 + 392);
      v9 = *(_QWORD *)(a2 + 424);
      if ((v7 != v8) != (v6 == v9))
      {
        if (v7 == v8)
          goto LABEL_4;
        if (v8 - *(_QWORD *)(a1 + 416) == v9 - *(_QWORD *)(a2 + 416))
        {
          v5 = *(_QWORD *)(a1 + 400) - v7;
          return v5 == *(_QWORD *)(a2 + 400) - v6;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::resetToOffset(icu::FCDUTF16CollationIterator *this, int a2)
{
  uint64_t result;
  uint64_t v5;

  result = icu::CollationIterator::reset((uint64_t)this);
  v5 = *((_QWORD *)this + 52) + 2 * a2;
  *((_QWORD *)this + 53) = v5;
  *((_QWORD *)this + 49) = v5;
  *((_QWORD *)this + 50) = v5;
  *((_QWORD *)this + 51) = *((_QWORD *)this + 55);
  *((_BYTE *)this + 520) = 1;
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::getOffset(icu::FCDUTF16CollationIterator *this)
{
  uint64_t v1;
  uint64_t v3;

  if (*((_BYTE *)this + 520) || (v3 = *((_QWORD *)this + 49), v1 = *((_QWORD *)this + 53), v3 == v1))
  {
    v1 = *((_QWORD *)this + 50);
    return (v1 - *((_QWORD *)this + 52)) >> 1;
  }
  if (*((_QWORD *)this + 50) == v3)
    return (v1 - *((_QWORD *)this + 52)) >> 1;
  return (*((_QWORD *)this + 54) - *((_QWORD *)this + 52)) >> 1;
}

uint64_t icu::FCDUTF16CollationIterator::handleNextCE32(icu::FCDUTF16CollationIterator *this, int *a2, UErrorCode *a3)
{
  int v6;
  unsigned __int16 **v7;
  unsigned __int16 *v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned __int16 *v12;
  int v13;
  unint64_t v15;

  if (*((char *)this + 520) <= 0)
  {
    v6 = *((unsigned __int8 *)this + 520);
    v7 = (unsigned __int16 **)((char *)this + 400);
    do
    {
      if (!v6)
      {
        v8 = (unsigned __int16 *)*((_QWORD *)this + 50);
        if (v8 != *((unsigned __int16 **)this + 51))
          goto LABEL_13;
      }
      icu::FCDUTF16CollationIterator::switchToForward((uint64_t)this);
      v6 = *((unsigned __int8 *)this + 520);
    }
    while (*((char *)this + 520) <= 0);
  }
  v9 = (unsigned __int16 *)*((_QWORD *)this + 50);
  v10 = (unsigned __int16 *)*((_QWORD *)this + 51);
  if (v9 != v10)
  {
    v12 = v9 + 1;
    v11 = *v9;
    v7 = (unsigned __int16 **)((char *)this + 400);
    *((_QWORD *)this + 50) = v9 + 1;
    *a2 = v11;
    if (v11 < 0xC0)
      return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                             + 4
                             * ((v11 & 0x1F)
                              + 4
                              * *(unsigned __int16 *)(**((_QWORD **)this + 1)
                                                                  + 2 * (v11 >> 5))));
    if (!icu::CollationFCD::tcccIndex[v11 >> 5])
      return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                             + 4
                             * ((v11 & 0x1F)
                              + 4
                              * *(unsigned __int16 *)(**((_QWORD **)this + 1)
                                                                  + 2 * (v11 >> 5))));
    if (((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v11 >> 5]] >> v11) & 1) == 0)
      return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                             + 4
                             * ((v11 & 0x1F)
                              + 4
                              * *(unsigned __int16 *)(**((_QWORD **)this + 1)
                                                                  + 2 * (v11 >> 5))));
    if ((v11 & 0xFFFFFF01) != 0xF01)
    {
      if (v12 == v10)
        return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                               + 4
                               * ((v11 & 0x1F)
                                + 4
                                * *(unsigned __int16 *)(**((_QWORD **)this + 1)
                                                                    + 2 * (v11 >> 5))));
      v15 = *v12;
      if (v15 < 0x300
        || !icu::CollationFCD::lcccIndex[v15 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v15 >> 5]] >> v15) & 1) == 0)
      {
        return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                               + 4
                               * ((v11 & 0x1F)
                                + 4
                                * *(unsigned __int16 *)(**((_QWORD **)this + 1)
                                                                    + 2 * (v11 >> 5))));
      }
    }
    *((_QWORD *)this + 50) = v9;
    if (icu::FCDUTF16CollationIterator::nextSegment(this, a3))
    {
      v8 = *v7;
LABEL_13:
      v13 = *v8;
      LODWORD(v11) = v13;
      *v7 = v8 + 1;
      *a2 = v13;
      return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                             + 4
                             * ((v11 & 0x1F)
                              + 4
                              * *(unsigned __int16 *)(**((_QWORD **)this + 1)
                                                                  + 2 * (v11 >> 5))));
    }
  }
  *a2 = -1;
  return 192;
}

uint64_t icu::FCDUTF16CollationIterator::nextSegment(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  uint64_t result;
  unsigned __int16 v5;
  UChar *v6;
  unsigned __int16 *v7;
  unsigned int v8;
  BOOL v9;
  BOOL v11;
  UChar *v12;
  unsigned __int16 *v13;
  int v14[2];

  if (*(int *)a2 > 0)
    return 0;
  v5 = 0;
  v6 = (UChar *)*((_QWORD *)this + 50);
  *(_QWORD *)v14 = v6;
  v7 = (unsigned __int16 *)*((_QWORD *)this + 55);
  while (1)
  {
    v8 = sub_18BDB97F4(*((_QWORD *)this + 56), (unsigned __int16 **)v14, v7);
    if (v8 <= 0xFF)
    {
      if (v6 != *((UChar **)this + 50))
        goto LABEL_19;
      goto LABEL_14;
    }
    v9 = v8 >> 8 < v5 || v8 == 33156;
    if (v9 || v8 == 33154)
      break;
LABEL_14:
    v5 = v8;
    v6 = *(UChar **)v14;
    v7 = (unsigned __int16 *)*((_QWORD *)this + 55);
    if ((_BYTE)v8)
      v11 = *(_QWORD *)v14 == (_QWORD)v7;
    else
      v11 = 1;
    if (v11)
    {
LABEL_19:
      *((_QWORD *)this + 54) = v6;
      *((_QWORD *)this + 51) = v6;
LABEL_24:
      *((_BYTE *)this + 520) = 0;
      return 1;
    }
  }
  do
  {
    v12 = *(UChar **)v14;
    v13 = (unsigned __int16 *)*((_QWORD *)this + 55);
  }
  while (*(unsigned __int16 **)v14 != v13
       && sub_18BDB97F4(*((_QWORD *)this + 56), (unsigned __int16 **)v14, v13) > 0xFF);
  result = icu::FCDUTF16CollationIterator::normalize((uint64_t)this, *((UChar **)this + 50), v12, a2);
  if ((_DWORD)result)
  {
    *((_QWORD *)this + 50) = *((_QWORD *)this + 49);
    goto LABEL_24;
  }
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::switchToForward(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if ((*(char *)(this + 520) & 0x80000000) == 0)
  {
    if (*(_QWORD *)(this + 392) != *(_QWORD *)(this + 424))
    {
      v1 = *(_QWORD *)(this + 432);
      *(_QWORD *)(this + 424) = v1;
      *(_QWORD *)(this + 392) = v1;
      *(_QWORD *)(this + 400) = v1;
    }
    goto LABEL_6;
  }
  v2 = *(_QWORD *)(this + 400);
  *(_QWORD *)(this + 424) = v2;
  *(_QWORD *)(this + 392) = v2;
  if (v2 == *(_QWORD *)(this + 432))
  {
LABEL_6:
    *(_QWORD *)(this + 408) = *(_QWORD *)(this + 440);
    v3 = 1;
    goto LABEL_7;
  }
  v3 = 0;
LABEL_7:
  *(_BYTE *)(this + 520) = v3;
  return this;
}

uint64_t icu::FCDUTF16CollationIterator::foundNULTerminator(icu::FCDUTF16CollationIterator *this)
{
  uint64_t v2;

  if (*((_QWORD *)this + 51))
    return 0;
  v2 = *((_QWORD *)this + 50) - 2;
  *((_QWORD *)this + 55) = v2;
  *((_QWORD *)this + 50) = v2;
  *((_QWORD *)this + 51) = v2;
  return 1;
}

unint64_t icu::FCDUTF16CollationIterator::nextCodePoint(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  int v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unint64_t result;
  unsigned __int16 *v9;
  int v10;
  unint64_t v11;

  if (*((char *)this + 520) <= 0)
  {
    v4 = *((unsigned __int8 *)this + 520);
    do
    {
      if (!v4)
      {
        v5 = (unsigned __int16 *)*((_QWORD *)this + 50);
        if (v5 != *((unsigned __int16 **)this + 51))
          goto LABEL_13;
      }
      icu::FCDUTF16CollationIterator::switchToForward((uint64_t)this);
      v4 = *((unsigned __int8 *)this + 520);
    }
    while (*((char *)this + 520) <= 0);
  }
  v6 = (unsigned __int16 *)*((_QWORD *)this + 50);
  v7 = (unsigned __int16 *)*((_QWORD *)this + 51);
  if (v6 == v7)
    return 0xFFFFFFFFLL;
  v9 = v6 + 1;
  result = *v6;
  *((_QWORD *)this + 50) = v6 + 1;
  if (result < 0xC0)
  {
    if (!(_DWORD)result)
    {
      if (v7)
        return 0;
      *((_QWORD *)this + 55) = v6;
      result = 0xFFFFFFFFLL;
      *((_QWORD *)this + 50) = v6;
      *((_QWORD *)this + 51) = v6;
      return result;
    }
    goto LABEL_16;
  }
  if (icu::CollationFCD::tcccIndex[result >> 5]
    && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[result >> 5]] >> result) & 1) != 0)
  {
    if ((result & 0xFFFFFF01) == 0xF01)
      goto LABEL_11;
    if (v9 == v7)
    {
      v9 = v7;
      goto LABEL_16;
    }
    v11 = *v9;
    if (v11 >= 0x300
      && icu::CollationFCD::lcccIndex[v11 >> 5]
      && ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v11 >> 5]] >> v11) & 1) != 0)
    {
LABEL_11:
      *((_QWORD *)this + 50) = v6;
      if (icu::FCDUTF16CollationIterator::nextSegment(this, a2))
      {
        v5 = (unsigned __int16 *)*((_QWORD *)this + 50);
LABEL_13:
        v9 = v5 + 1;
        *((_QWORD *)this + 50) = v5 + 1;
        result = *v5;
        goto LABEL_16;
      }
      return 0xFFFFFFFFLL;
    }
  }
LABEL_16:
  if ((result & 0xFC00) == 0xD800 && v9 != *((unsigned __int16 **)this + 51))
  {
    v10 = *v9;
    if ((v10 & 0xFC00) == 0xDC00)
    {
      *((_QWORD *)this + 50) = v9 + 1;
      return (v10 + ((_DWORD)result << 10) - 56613888);
    }
  }
  return result;
}

unint64_t icu::FCDUTF16CollationIterator::previousCodePoint(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  int v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  unint64_t result;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  unint64_t v13;

  if ((*((char *)this + 520) & 0x80000000) == 0)
  {
    v4 = *((unsigned __int8 *)this + 520);
    do
    {
      if (!v4)
      {
        v5 = *((_QWORD *)this + 50);
        if (v5 != *((_QWORD *)this + 49))
          goto LABEL_13;
      }
      icu::FCDUTF16CollationIterator::switchToBackward((uint64_t)this);
      v4 = *((unsigned __int8 *)this + 520);
    }
    while ((*((char *)this + 520) & 0x80000000) == 0);
  }
  v7 = (unsigned __int16 *)*((_QWORD *)this + 49);
  v6 = (unsigned __int16 *)*((_QWORD *)this + 50);
  if (v6 == v7)
    return 0xFFFFFFFFLL;
  v9 = v6 - 1;
  result = *(v6 - 1);
  *((_QWORD *)this + 50) = v6 - 1;
  if (result >= 0x300
    && icu::CollationFCD::lcccIndex[result >> 5]
    && ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[result >> 5]] >> result) & 1) != 0)
  {
    if ((result & 0xFFFFFF01) == 0xF01)
      goto LABEL_11;
    if (v9 == v7)
    {
      v9 = v7;
      goto LABEL_14;
    }
    v13 = *(v6 - 2);
    if (v13 >= 0xC0
      && icu::CollationFCD::tcccIndex[v13 >> 5]
      && ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v13 >> 5]] >> v13) & 1) != 0)
    {
LABEL_11:
      *((_QWORD *)this + 50) = v6;
      if (icu::FCDUTF16CollationIterator::previousSegment(this, a2))
      {
        v5 = *((_QWORD *)this + 50);
LABEL_13:
        v9 = (unsigned __int16 *)(v5 - 2);
        *((_QWORD *)this + 50) = v9;
        result = *v9;
        goto LABEL_14;
      }
      return 0xFFFFFFFFLL;
    }
  }
LABEL_14:
  if ((result & 0xFC00) == 0xDC00 && v9 != *((unsigned __int16 **)this + 49))
  {
    v12 = *(v9 - 1);
    v10 = v9 - 1;
    v11 = v12;
    if ((v12 & 0xFC00) == 0xD800)
    {
      *((_QWORD *)this + 50) = v10;
      return (result + (v11 << 10) - 56613888);
    }
  }
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::previousSegment(icu::FCDUTF16CollationIterator *this, UErrorCode *a2)
{
  uint64_t result;
  unsigned int v5;
  UChar *v6;
  unint64_t v7;
  unsigned int v8;
  UChar *v11;
  unint64_t v12;
  int v13[2];

  if (*(int *)a2 > 0)
    return 0;
  LOBYTE(v5) = 0;
  v6 = (UChar *)*((_QWORD *)this + 50);
  *(_QWORD *)v13 = v6;
  v7 = *((_QWORD *)this + 52);
  while (1)
  {
    v8 = sub_18BDBF29C(*((_QWORD *)this + 56), v7, (uint64_t *)v13);
    if (!(_BYTE)v8)
    {
      if (v6 != *((UChar **)this + 50))
        goto LABEL_19;
      goto LABEL_14;
    }
    if ((_BYTE)v5 && v8 > v5)
      break;
    if (v8 == 33156 || v8 == 33154)
      break;
LABEL_14:
    v5 = v8 >> 8;
    v6 = *(UChar **)v13;
    v7 = *((_QWORD *)this + 52);
    if (v8 < 0x100 || *(_QWORD *)v13 == v7)
    {
LABEL_19:
      *((_QWORD *)this + 53) = v6;
      *((_QWORD *)this + 49) = v6;
LABEL_25:
      *((_BYTE *)this + 520) = 0;
      return 1;
    }
  }
  do
  {
    v11 = *(UChar **)v13;
    if ((unsigned __int16)v8 < 0x100u)
      break;
    v12 = *((_QWORD *)this + 52);
    if (*(_QWORD *)v13 == v12)
      break;
    v8 = sub_18BDBF29C(*((_QWORD *)this + 56), v12, (uint64_t *)v13);
  }
  while (v8);
  result = icu::FCDUTF16CollationIterator::normalize((uint64_t)this, v11, *((UChar **)this + 50), a2);
  if ((_DWORD)result)
  {
    *((_QWORD *)this + 50) = *((_QWORD *)this + 51);
    goto LABEL_25;
  }
  return result;
}

uint64_t icu::FCDUTF16CollationIterator::switchToBackward(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  if (*(char *)(this + 520) < 1)
  {
    v3 = *(_QWORD *)(this + 424);
    if (*(_QWORD *)(this + 392) != v3)
    {
      *(_QWORD *)(this + 432) = v3;
      *(_QWORD *)(this + 400) = v3;
      *(_QWORD *)(this + 408) = v3;
    }
    goto LABEL_6;
  }
  v1 = *(_QWORD *)(this + 400);
  *(_QWORD *)(this + 432) = v1;
  *(_QWORD *)(this + 408) = v1;
  if (v1 == *(_QWORD *)(this + 424))
  {
LABEL_6:
    *(_QWORD *)(this + 392) = *(_QWORD *)(this + 416);
    v2 = -1;
    goto LABEL_7;
  }
  v2 = 0;
LABEL_7:
  *(_BYTE *)(this + 520) = v2;
  return this;
}

unint64_t icu::FCDUTF16CollationIterator::forwardNumCodePoints(unint64_t this, int a2, UErrorCode *a3)
{
  int v4;
  icu::FCDUTF16CollationIterator *v5;
  BOOL v6;

  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (icu::FCDUTF16CollationIterator *)this;
    do
    {
      this = icu::FCDUTF16CollationIterator::nextCodePoint(v5, a3);
      v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

unint64_t icu::FCDUTF16CollationIterator::backwardNumCodePoints(unint64_t this, int a2, UErrorCode *a3)
{
  int v4;
  icu::FCDUTF16CollationIterator *v5;
  BOOL v6;

  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (icu::FCDUTF16CollationIterator *)this;
    do
    {
      this = icu::FCDUTF16CollationIterator::previousCodePoint(v5, a3);
      v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

uint64_t icu::FCDUTF16CollationIterator::normalize(uint64_t a1, UChar *a2, UChar *a3, UErrorCode *a4)
{
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  icu::Normalizer2Impl::decompose(*(UChar **)(a1 + 448), a2, a3, (icu::UnicodeString *)(a1 + 456), (unint64_t)((char *)a3 - (char *)a2) >> 1, a4);
  if (*(int *)a4 > 0)
    return 0;
  *(_QWORD *)(a1 + 424) = a2;
  *(_QWORD *)(a1 + 432) = a3;
  v9 = *(unsigned __int16 *)(a1 + 464);
  if ((v9 & 0x11) != 0)
  {
    v10 = 0;
  }
  else if ((v9 & 2) != 0)
  {
    v10 = a1 + 466;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 480);
  }
  *(_QWORD *)(a1 + 392) = v10;
  if ((v9 & 0x8000) != 0)
    v11 = *(_DWORD *)(a1 + 468);
  else
    v11 = v9 >> 5;
  *(_QWORD *)(a1 + 408) = v10 + 2 * (int)v11;
  return 1;
}

uint64_t sub_18BDBF29C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;

  v4 = *a3;
  v6 = (unsigned __int16 *)(*a3 - 2);
  v5 = *v6;
  *a3 = (uint64_t)v6;
  if (v5 < *(unsigned __int16 *)(a1 + 8))
    return 0;
  if ((v5 & 0xFC00) == 0xDC00)
  {
    if ((unint64_t)v6 > a2)
    {
      v10 = *(unsigned __int16 *)(v4 - 4);
      v9 = v4 - 4;
      v8 = v10;
      if ((v10 & 0xFC00) == 0xD800)
      {
        LODWORD(v5) = v5 + (v8 << 10) - 56613888;
        *a3 = v9;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + (v5 >> 8)))
      v11 = ((1 << (v5 >> 5)) & *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + (v5 >> 8))) == 0;
    else
      v11 = 1;
    if (v11)
      return 0;
  }
  return icu::Normalizer2Impl::getFCD16FromNormData((icu::Normalizer2Impl *)a1, v5);
}

void icu::UTF8CollationIterator::~UTF8CollationIterator(icu::UTF8CollationIterator *this)
{
  void *v1;

  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::UTF8CollationIterator::resetToOffset(icu::UTF8CollationIterator *this, int a2)
{
  uint64_t result;

  result = icu::CollationIterator::reset((uint64_t)this);
  *((_DWORD *)this + 100) = a2;
  return result;
}

uint64_t icu::UTF8CollationIterator::getOffset(icu::UTF8CollationIterator *this)
{
  return *((unsigned int *)this + 100);
}

uint64_t icu::UTF8CollationIterator::handleNextCE32(icu::UTF8CollationIterator *this, int *a2, UErrorCode *a3)
{
  uint64_t v4;
  uint64_t result;
  const uint8_t *v7;
  int v8;
  uint64_t v9;
  UChar32 v10;
  int32_t *v11;
  int32_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  UChar32 CharSafeBody;

  v4 = *((int *)this + 100);
  if ((_DWORD)v4 == *((_DWORD *)this + 101))
  {
    *a2 = -1;
    return 192;
  }
  v7 = (const uint8_t *)*((_QWORD *)this + 49);
  *((_DWORD *)this + 100) = v4 + 1;
  v8 = (char)v7[v4];
  v9 = v7[v4];
  v10 = v8;
  *a2 = v8;
  if ((v8 & 0x80000000) == 0)
    return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 4 * v9);
  v11 = (int32_t *)((char *)this + 400);
  v12 = *((_DWORD *)this + 101);
  if ((v9 & 0xF0) == 0xE0)
  {
    v13 = *v11;
    v14 = v13 + 1;
    if ((int)v13 + 1 < v12 || v12 < 0)
    {
      v15 = v9 & 0xF;
      v16 = v7[v13];
      if (((a00000000000000[v15] >> (v16 >> 5)) & 1) != 0)
      {
        v17 = v7[v14] ^ 0x80;
        if (v17 <= 0x3F)
        {
          *a2 = ((_DWORD)v15 << 12) | ((v16 & 0x3F) << 6) | v17;
          *((_DWORD *)this + 100) += 2;
          return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                                 + 4
                                 * ((*a2 & 0x1F)
                                  + 4 * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * (*a2 >> 5))));
        }
      }
    }
  }
  else if ((v8 + 62) <= 0x1Du)
  {
    v18 = *v11;
    if ((_DWORD)v18 != v12)
    {
      v19 = v7[v18] ^ 0x80;
      if (v19 <= 0x3F)
      {
        result = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                                 + 4 * (*(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * v9 + 3776) + v19));
        *a2 = ((v10 & 0x1F) << 6) | v19;
        ++*((_DWORD *)this + 100);
        return result;
      }
    }
  }
  CharSafeBody = utf8_nextCharSafeBody(v7, v11, v12, v10, -3);
  *a2 = CharSafeBody;
  return sub_18BC902F4(*((uint64_t **)this + 2), CharSafeBody);
}

uint64_t icu::UTF8CollationIterator::foundNULTerminator(icu::UTF8CollationIterator *this)
{
  int v2;

  if ((*((_DWORD *)this + 101) & 0x80000000) == 0)
    return 0;
  v2 = *((_DWORD *)this + 100) - 1;
  *((_DWORD *)this + 100) = v2;
  *((_DWORD *)this + 101) = v2;
  return 1;
}

uint64_t icu::UTF8CollationIterator::forbidSurrogateCodePoints(icu::UTF8CollationIterator *this)
{
  return 1;
}

uint64_t icu::UTF8CollationIterator::nextCodePoint(icu::UTF8CollationIterator *this, UErrorCode *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v2 = *((_DWORD *)this + 100);
  v3 = *((_DWORD *)this + 101);
  if (v2 == v3)
    return 0xFFFFFFFFLL;
  v4 = v2;
  v5 = *((_QWORD *)this + 49);
  if ((v3 & 0x80000000) == 0 || *(_BYTE *)(v5 + v2))
  {
    v8 = v2 + 1;
    *((_DWORD *)this + 100) = v2 + 1;
    v9 = *(char *)(v5 + v2);
    v6 = *(unsigned __int8 *)(v5 + v2);
    if ((v9 & 0x80000000) == 0)
      return v6;
    if ((_DWORD)v8 != v3)
    {
      if (v6 < 0xE0)
      {
        if (v6 < 0xC2)
          return 65533;
        v12 = v6 & 0x1F;
      }
      else
      {
        if (v6 > 0xEF)
        {
          if (v6 > 0xF4)
            return 65533;
          v14 = v6 - 240;
          v10 = *(unsigned __int8 *)(v5 + v8);
          if (((byte_18BE2C2FF[v10 >> 4] >> v14) & 1) == 0)
            return 65533;
          v8 = v4 + 2;
          *((_DWORD *)this + 100) = v4 + 2;
          if ((_DWORD)v4 + 2 == v3)
            return 65533;
          v11 = *(unsigned __int8 *)(v5 + v8) ^ 0x80;
          if (v11 > 0x3F)
            return 65533;
          LODWORD(v10) = v10 & 0x3F | (v14 << 6);
        }
        else
        {
          v10 = v9 & 0xF;
          if (((a00000000000000[v10] >> (*(_BYTE *)(v5 + v8) >> 5)) & 1) == 0)
            return 65533;
          v11 = *(_BYTE *)(v5 + v8) & 0x3F;
        }
        LODWORD(v8) = v8 + 1;
        *((_DWORD *)this + 100) = v8;
        if ((_DWORD)v8 == v3)
          return 65533;
        v12 = v11 | ((_DWORD)v10 << 6);
      }
      v13 = *(unsigned __int8 *)(v5 + (int)v8) ^ 0x80;
      if (v13 <= 0x3F)
      {
        v6 = v13 | (v12 << 6);
        *((_DWORD *)this + 100) = v8 + 1;
        return v6;
      }
    }
    return 65533;
  }
  *((_DWORD *)this + 101) = v2;
  return 0xFFFFFFFFLL;
}

uint64_t icu::UTF8CollationIterator::previousCodePoint(icu::UTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v2;
  const uint8_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *((int *)this + 100);
  if (!(_DWORD)v2)
    return 0xFFFFFFFFLL;
  v3 = (const uint8_t *)*((_QWORD *)this + 49);
  v4 = v2 - 1;
  *((_DWORD *)this + 100) = v4;
  v5 = (char)v3[v4];
  v6 = v5;
  if (v5 < 0)
    return utf8_prevCharSafeBody(v3, 0, (int32_t *)this + 100, v5, -3);
  return v6;
}

uint64_t icu::UTF8CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  int v3;
  int v4;
  int i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (a2 >= 1)
  {
    v3 = *(_DWORD *)(this + 404);
    v4 = *(_DWORD *)(this + 400);
    for (i = a2 + 1; i > 1; --i)
    {
      if (v4 >= v3)
      {
        if ((v3 & 0x80000000) == 0)
          return this;
        v6 = *(_QWORD *)(this + 392);
        if (!*(_BYTE *)(v6 + v4))
          return this;
      }
      else
      {
        v6 = *(_QWORD *)(this + 392);
      }
      v7 = v4 + 1;
      *(_DWORD *)(this + 400) = v7;
      v8 = *(unsigned __int8 *)(v6 + v4);
      if ((v8 + 11) >= 0xCDu && (_DWORD)v7 != v3)
      {
        v10 = *(unsigned __int8 *)(v6 + v7);
        if ((v8 & 0xF0) == 0xE0)
        {
          if (((a00000000000000[v8 & 0xF] >> (*(_BYTE *)(v6 + v7) >> 5)) & 1) == 0)
            goto LABEL_12;
          v11 = v4 + 2;
          *(_DWORD *)(this + 400) = v11;
          LODWORD(v7) = v3;
          if ((_DWORD)v11 == v3)
            goto LABEL_12;
          LODWORD(v7) = v4 + 2;
          if (*(char *)(v6 + v11) >= -64)
            goto LABEL_12;
          v12 = 3;
          goto LABEL_22;
        }
        if (v8 > 0xDF)
        {
          if (((byte_18BE2C2FF[v10 >> 4] >> (v8 & 7)) & 1) == 0)
            goto LABEL_12;
          *(_DWORD *)(this + 400) = v4 + 2;
          LODWORD(v7) = v3;
          if (v4 + 2 == v3)
            goto LABEL_12;
          LODWORD(v7) = v4 + 2;
          if (*(char *)(v6 + v4 + 2) > -65)
            goto LABEL_12;
          v13 = v4 + 3;
          *(_DWORD *)(this + 400) = v13;
          LODWORD(v7) = v3;
          if ((_DWORD)v13 == v3)
            goto LABEL_12;
          LODWORD(v7) = v4 + 3;
          if (*(char *)(v6 + v13) > -65)
            goto LABEL_12;
          v12 = 4;
          goto LABEL_22;
        }
        if ((char)v10 < -64)
        {
          v12 = 2;
LABEL_22:
          LODWORD(v7) = v4 + v12;
          *(_DWORD *)(this + 400) = v4 + v12;
        }
      }
LABEL_12:
      v4 = v7;
    }
  }
  return this;
}

uint64_t icu::UTF8CollationIterator::backwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  uint64_t v3;
  int32_t v4;
  int v5;
  BOOL v6;

  if (a2 >= 1)
  {
    v3 = this;
    v4 = *(_DWORD *)(this + 400);
    v5 = a2 + 1;
    do
    {
      v6 = __OFSUB__(v4--, 1);
      if (v4 < 0 != v6)
        break;
      this = *(_QWORD *)(v3 + 392);
      *(_DWORD *)(v3 + 400) = v4;
      if (*(char *)(this + v4) <= -65)
      {
        this = utf8_back1SafeBody((const uint8_t *)this, 0, v4);
        v4 = this;
        *(_DWORD *)(v3 + 400) = this;
      }
      --v5;
    }
    while (v5 > 1);
  }
  return this;
}

void icu::FCDUTF8CollationIterator::~FCDUTF8CollationIterator(icu::FCDUTF8CollationIterator *this)
{
  *(_QWORD *)this = off_1E22685B0;
  icu::UnicodeString::~UnicodeString(off_1E22685B0, (icu::FCDUTF8CollationIterator *)((char *)this + 432));
  icu::CollationIterator::~CollationIterator(this);
}

{
  *(_QWORD *)this = off_1E22685B0;
  icu::UnicodeString::~UnicodeString(off_1E22685B0, (icu::FCDUTF8CollationIterator *)((char *)this + 432));
  icu::CollationIterator::~CollationIterator(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E22685B0;
  icu::UnicodeString::~UnicodeString(off_1E22685B0, (icu::FCDUTF8CollationIterator *)((char *)this + 432));
  icu::CollationIterator::~CollationIterator(this);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::FCDUTF8CollationIterator::resetToOffset(icu::FCDUTF8CollationIterator *this, int a2)
{
  uint64_t result;

  result = icu::CollationIterator::reset((uint64_t)this);
  *((_DWORD *)this + 100) = a2;
  *((_DWORD *)this + 103) = a2;
  *((_DWORD *)this + 102) = 0;
  return result;
}

uint64_t icu::FCDUTF8CollationIterator::getOffset(icu::FCDUTF8CollationIterator *this)
{
  char *v1;

  v1 = (char *)this + 400;
  if (*((_DWORD *)this + 102) == 3)
  {
    if (*(_DWORD *)v1)
      v1 = (char *)this + 416;
    else
      v1 = (char *)this + 412;
  }
  return *(unsigned int *)v1;
}

uint64_t icu::FCDUTF8CollationIterator::handleNextCE32(icu::FCDUTF8CollationIterator *this, int *a2, UErrorCode *a3)
{
  int32_t *v6;
  uint64_t v7;
  const uint8_t *v8;
  int v9;
  UChar32 v10;
  int32_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int32_t v17;
  int v18;
  unint64_t v19;
  int v20;
  _BOOL4 v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int CharSafeBody;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v37;
  char *v38;

  v6 = (int32_t *)((char *)this + 400);
  while (2)
  {
    switch(*((_DWORD *)this + 102))
    {
      case 0:
        v7 = *((int *)this + 100);
        if ((_DWORD)v7 == *((_DWORD *)this + 101))
          goto LABEL_45;
        v8 = (const uint8_t *)*((_QWORD *)this + 49);
        *((_DWORD *)this + 100) = v7 + 1;
        v9 = (char)v8[v7];
        v10 = v9;
        *a2 = v9;
        if ((v9 & 0x80000000) == 0)
          return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 4 * v9);
        v11 = *((_DWORD *)this + 101);
        if ((v9 & 0xF0) == 0xE0)
        {
          v12 = *v6;
          v13 = v12 + 1;
          if ((int)v12 + 1 < v11 || v11 < 0)
          {
            v14 = v9 & 0xF;
            v15 = v8[v12];
            if (((a00000000000000[v14] >> (v15 >> 5)) & 1) != 0)
            {
              v16 = v8[v13] ^ 0x80;
              if (v16 <= 0x3F)
              {
                *a2 = ((_DWORD)v14 << 12) | ((v15 & 0x3F) << 6) | v16;
                v17 = *v6;
                v18 = *v6 + 2;
                *v6 = v18;
                v19 = *a2;
                if ((int)v19 < 192
                  || !icu::CollationFCD::tcccIndex[v19 >> 5]
                  || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v19 >> 5]] >> v19) & 1) == 0
                  || (v19 & 0x1FFF01) != 0xF01
                  && (v18 == *((_DWORD *)this + 101) || !icu::FCDUTF8CollationIterator::nextHasLccc(this)))
                {
                  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                                         + 4
                                         * ((v19 & 0x1F)
                                          + 4
                                          * *(unsigned __int16 *)(**((_QWORD **)this + 1)
                                                                              + 2 * ((int)v19 >> 5))));
                }
LABEL_31:
                v29 = v17 - 1;
                goto LABEL_39;
              }
            }
          }
        }
        else if ((v9 + 62) <= 0x1Du)
        {
          v25 = *v6;
          if ((_DWORD)v25 != v11)
          {
            v26 = v8[v25] ^ 0x80;
            if (v26 <= 0x3F)
            {
              v27 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                                    + 4
                                    * (*(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * v9 + 3776)
                                     + v26));
              *a2 = ((v9 & 0x1F) << 6) | v26;
              v17 = *((_DWORD *)this + 100);
              *((_DWORD *)this + 100) = v17 + 1;
              v28 = *a2;
              if ((int)v28 < 192
                || !icu::CollationFCD::tcccIndex[v28 >> 5]
                || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v28 >> 5]] >> v28) & 1) == 0
                || v17 + 1 == *((_DWORD *)this + 101)
                || !icu::FCDUTF8CollationIterator::nextHasLccc(this))
              {
                return v27;
              }
              goto LABEL_31;
            }
          }
        }
        CharSafeBody = utf8_nextCharSafeBody(v8, v6, v11, v10, -3);
        *a2 = CharSafeBody;
        if (CharSafeBody == 65533)
          return 4294771973;
        v31 = CharSafeBody;
        v32 = (unsigned __int16)((CharSafeBody >> 10) - 10304);
        if (v32 < 0xC0)
          return sub_18BCA04B8(*((uint64_t **)this + 2), v31);
        v33 = icu::CollationFCD::tcccIndex[v32 >> 5];
        if (!v33)
          return sub_18BCA04B8(*((uint64_t **)this + 2), v31);
        if (((icu::CollationFCD::tcccBits[v33] >> (CharSafeBody >> 10)) & 1) == 0)
          return sub_18BCA04B8(*((uint64_t **)this + 2), v31);
        v34 = *((_DWORD *)this + 100);
        if (v34 == *((_DWORD *)this + 101) || !icu::FCDUTF8CollationIterator::nextHasLccc(this))
          return sub_18BCA04B8(*((uint64_t **)this + 2), v31);
        v29 = v34 - 4;
LABEL_39:
        *((_DWORD *)this + 100) = v29;
        if (icu::FCDUTF8CollationIterator::nextSegment(this, a3))
          continue;
LABEL_45:
        *a2 = -1;
        return 192;
      case 1:
        v20 = *((_DWORD *)this + 100);
        v21 = v20 != *((_DWORD *)this + 104);
        *((_DWORD *)this + 103) = v20;
        v22 = 2 * v21;
        goto LABEL_43;
      case 2:
        if (*((_DWORD *)this + 100) != *((_DWORD *)this + 104))
          return icu::UTF8CollationIterator::handleNextCE32(this, a2, a3);
        v22 = 0;
        goto LABEL_43;
      case 3:
        v23 = *((int *)this + 100);
        v24 = *((unsigned __int16 *)this + 220);
        if (*((__int16 *)this + 220) < 0)
        {
          v37 = *((_DWORD *)this + 111);
          if ((_DWORD)v23 != v37)
            goto LABEL_49;
          goto LABEL_42;
        }
        if ((_DWORD)v23 == v24 >> 5)
        {
LABEL_42:
          v22 = 0;
          v35 = *((_DWORD *)this + 104);
          *((_DWORD *)this + 100) = v35;
          *((_DWORD *)this + 103) = v35;
LABEL_43:
          *((_DWORD *)this + 102) = v22;
          continue;
        }
        v37 = v24 >> 5;
LABEL_49:
        *v6 = v23 + 1;
        if (v37 <= v23)
        {
          LODWORD(v19) = 0xFFFF;
        }
        else
        {
          if ((v24 & 2) != 0)
            v38 = (char *)this + 442;
          else
            v38 = (char *)*((_QWORD *)this + 57);
          LODWORD(v19) = *(unsigned __int16 *)&v38[2 * v23];
        }
        *a2 = v19;
        return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16)
                               + 4
                               * ((v19 & 0x1F)
                                + 4
                                * *(unsigned __int16 *)(**((_QWORD **)this + 1) + 2 * ((int)v19 >> 5))));
      default:
        goto LABEL_42;
    }
  }
}

uint64_t icu::FCDUTF8CollationIterator::nextHasLccc(icu::FCDUTF8CollationIterator *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = *((_QWORD *)this + 49);
  v2 = *((int *)this + 100);
  v3 = *(unsigned __int8 *)(v1 + v2);
  if (v3 < 0xCC)
    return 0;
  if (v3 != 234 && (v3 + 28) < 0xAu)
    return 0;
  v5 = v2 + 1;
  v6 = *((_DWORD *)this + 101);
  if ((_DWORD)v2 + 1 == v6)
    goto LABEL_25;
  if (v3 < 0xE0)
  {
    v9 = v3 & 0x1F;
  }
  else
  {
    if (v3 > 0xEF)
    {
      if (v3 > 0xF4)
        goto LABEL_25;
      v13 = v3 - 240;
      v5 = *(unsigned __int8 *)(v1 + v5);
      if (((byte_18BE2C2FF[v5 >> 4] >> (v3 + 16)) & 1) == 0)
        goto LABEL_25;
      v14 = v2 + 2;
      if ((_DWORD)v2 + 2 == v6)
        goto LABEL_25;
      v8 = *(unsigned __int8 *)(v1 + v14) ^ 0x80;
      if (v8 > 0x3F)
        goto LABEL_25;
      v7 = v5 & 0x3F | (v13 << 6);
      LODWORD(v5) = v14;
    }
    else
    {
      v7 = v3 & 0xF;
      if (((a00000000000000[v3 & 0xF] >> (*(_BYTE *)(v1 + v5) >> 5)) & 1) == 0)
        goto LABEL_25;
      v8 = *(_BYTE *)(v1 + v5) & 0x3F;
    }
    LODWORD(v5) = v5 + 1;
    if ((_DWORD)v5 == v6)
      goto LABEL_25;
    v9 = v8 | (v7 << 6);
  }
  v10 = *(unsigned __int8 *)(v1 + (int)v5) ^ 0x80;
  if (v10 <= 0x3F)
  {
    v11 = v10 | (v9 << 6);
    v12 = (unsigned __int16)((v9 >> 4) - 10304);
    if (HIWORD(v11))
      v11 = v12;
    if (v11 < 0x300)
      return 0;
    goto LABEL_26;
  }
LABEL_25:
  v11 = 65533;
LABEL_26:
  if (icu::CollationFCD::lcccIndex[(unint64_t)v11 >> 5])
    return (icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[(unint64_t)v11 >> 5]] >> v11) & 1;
  return 0;
}

uint64_t icu::FCDUTF8CollationIterator::nextSegment(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v2;
  unsigned __int16 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v19;
  BOOL v20;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  void (**v35)(icu::UnicodeString *__hidden);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v5 = 0;
  v6 = *((_DWORD *)this + 100);
  v36 = 0u;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = off_1E2256B38;
  LOWORD(v36) = 2;
  v7 = v6;
  while (1)
  {
    v8 = *((_QWORD *)this + 49);
    v9 = v7 + 1;
    *((_DWORD *)this + 100) = v9;
    v10 = *(char *)(v8 + v7);
    v11 = *(unsigned __int8 *)(v8 + v7);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_22;
    v12 = *((_DWORD *)this + 101);
    if ((_DWORD)v9 == v12)
      goto LABEL_21;
    if (v11 < 0xE0)
    {
      if (v11 < 0xC2)
        goto LABEL_21;
      v15 = v11 & 0x1F;
    }
    else
    {
      if (v11 > 0xEF)
      {
        if (v11 > 0xF4)
          goto LABEL_21;
        v13 = *(unsigned __int8 *)(v8 + v9);
        if (((byte_18BE2C2FF[v13 >> 4] >> (v11 + 16)) & 1) == 0)
          goto LABEL_21;
        v9 = v7 + 2;
        *((_DWORD *)this + 100) = v7 + 2;
        if (v7 + 2 == v12)
          goto LABEL_21;
        v14 = *(unsigned __int8 *)(v8 + v9) ^ 0x80;
        if (v14 > 0x3F)
          goto LABEL_21;
        LODWORD(v13) = v13 & 0x3F | ((v11 - 240) << 6);
      }
      else
      {
        v13 = v10 & 0xF;
        if (((a00000000000000[v13] >> (*(_BYTE *)(v8 + v9) >> 5)) & 1) == 0)
          goto LABEL_21;
        v14 = *(_BYTE *)(v8 + v9) & 0x3F;
      }
      LODWORD(v9) = v9 + 1;
      *((_DWORD *)this + 100) = v9;
      if ((_DWORD)v9 == v12)
        goto LABEL_21;
      v15 = v14 | ((_DWORD)v13 << 6);
    }
    v16 = *(unsigned __int8 *)(v8 + (int)v9) ^ 0x80;
    if (v16 <= 0x3F)
    {
      v11 = v16 | (v15 << 6);
      *((_DWORD *)this + 100) = v9 + 1;
      goto LABEL_22;
    }
LABEL_21:
    v11 = 65533;
LABEL_22:
    v17 = sub_18BBD6AB4(*((_QWORD *)this + 53), v11);
    if (v17 <= 0xFF && v7 != v6)
    {
LABEL_40:
      *((_DWORD *)this + 104) = v7;
      *((_DWORD *)this + 100) = v6;
      v23 = 2;
      *((_DWORD *)this + 102) = 2;
      goto LABEL_67;
    }
    v19 = v17;
    icu::UnicodeString::append((uint64_t)&v35, v11);
    if (v19 >= 0x100)
    {
      v20 = v19 >> 8 < v5 || v19 == 33156;
      if (v20 || v19 == 33154)
        break;
    }
    v5 = v19;
    v7 = *((_DWORD *)this + 100);
    if ((_BYTE)v19)
      v22 = v7 == *((_DWORD *)this + 101);
    else
      v22 = 1;
    if (v22)
      goto LABEL_40;
  }
  while (1)
  {
    v32 = *((_DWORD *)this + 100);
    v33 = *((_DWORD *)this + 101);
    if (v32 == v33)
      break;
    v24 = *((_QWORD *)this + 49);
    v25 = v32 + 1;
    *((_DWORD *)this + 100) = v25;
    v26 = *(char *)(v24 + v32);
    v27 = *(unsigned __int8 *)(v24 + v32);
    if ((v26 & 0x80000000) == 0)
      goto LABEL_59;
    if ((_DWORD)v25 == v33)
      goto LABEL_58;
    if (v27 < 0xE0)
    {
      if (v27 < 0xC2)
        goto LABEL_58;
      v30 = v27 & 0x1F;
    }
    else
    {
      if (v27 > 0xEF)
      {
        if (v27 > 0xF4)
          goto LABEL_58;
        v28 = *(unsigned __int8 *)(v24 + v25);
        if (((byte_18BE2C2FF[v28 >> 4] >> (v27 + 16)) & 1) == 0)
          goto LABEL_58;
        v25 = v32 + 2;
        *((_DWORD *)this + 100) = v32 + 2;
        if (v32 + 2 == v33)
          goto LABEL_58;
        v29 = *(unsigned __int8 *)(v24 + v25) ^ 0x80;
        if (v29 > 0x3F)
          goto LABEL_58;
        LODWORD(v28) = v28 & 0x3F | ((v27 - 240) << 6);
      }
      else
      {
        v28 = v26 & 0xF;
        if (((a00000000000000[v28] >> (*(_BYTE *)(v24 + v25) >> 5)) & 1) == 0)
          goto LABEL_58;
        v29 = *(_BYTE *)(v24 + v25) & 0x3F;
      }
      LODWORD(v25) = v25 + 1;
      *((_DWORD *)this + 100) = v25;
      if ((_DWORD)v25 == v33)
        goto LABEL_58;
      v30 = v29 | ((_DWORD)v28 << 6);
    }
    v31 = *(unsigned __int8 *)(v24 + (int)v25) ^ 0x80;
    if (v31 <= 0x3F)
    {
      v27 = v31 | (v30 << 6);
      *((_DWORD *)this + 100) = v25 + 1;
      goto LABEL_59;
    }
LABEL_58:
    v27 = 65533;
LABEL_59:
    if (sub_18BBD6AB4(*((_QWORD *)this + 53), v27) <= 0xFF)
    {
      *((_DWORD *)this + 100) = v32;
      break;
    }
    icu::UnicodeString::append((uint64_t)&v35, v27);
  }
  icu::Normalizer2Impl::decompose(*((UChar **)this + 53), (const icu::UnicodeString *)&v35, (icu::FCDUTF8CollationIterator *)((char *)this + 432), a2);
  v23 = *(unsigned int *)a2;
  if ((int)v23 > 0)
  {
    v2 = 0;
    goto LABEL_68;
  }
  *((_DWORD *)this + 103) = v6;
  *((_DWORD *)this + 104) = *((_DWORD *)this + 100);
  v23 = 3;
  *((_DWORD *)this + 102) = 3;
  *((_DWORD *)this + 100) = 0;
LABEL_67:
  v2 = 1;
LABEL_68:
  icu::UnicodeString::~UnicodeString((void *)v23, (icu::UnicodeString *)&v35);
  return v2;
}

_DWORD *icu::FCDUTF8CollationIterator::switchToForward(_DWORD *this)
{
  int v1;
  int v2;
  _BOOL4 v3;
  int v4;
  int v5;

  v1 = this[102];
  if (v1 == 2)
  {
    v4 = 0;
  }
  else if (v1 == 1)
  {
    v2 = this[100];
    v3 = v2 != this[104];
    this[103] = v2;
    v4 = 2 * v3;
  }
  else
  {
    v4 = 0;
    v5 = this[104];
    this[100] = v5;
    this[103] = v5;
  }
  this[102] = v4;
  return this;
}

uint64_t icu::FCDUTF8CollationIterator::previousHasTccc(icu::FCDUTF8CollationIterator *this)
{
  const uint8_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  unint64_t v6;
  int32_t pi;

  v2 = (const uint8_t *)*((_QWORD *)this + 49);
  v3 = *((int *)this + 100) - 1;
  v4 = (char)v2[v3];
  if ((v4 & 0x80000000) == 0)
    return 0;
  pi = v3;
  LODWORD(v6) = utf8_prevCharSafeBody(v2, 0, &pi, v4, -3);
  result = 0;
  if ((int)v6 < 0x10000)
    v6 = v6;
  else
    v6 = (unsigned __int16)((v6 >> 10) - 10304);
  if ((int)v6 >= 192)
  {
    if (!icu::CollationFCD::tcccIndex[v6 >> 5])
      return 0;
    return (icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[v6 >> 5]] >> v6) & 1;
  }
  return result;
}

uint64_t icu::FCDUTF8CollationIterator::handleGetTrailSurrogate(icu::FCDUTF8CollationIterator *this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;

  if (*((_DWORD *)this + 102) != 3)
    return 0;
  v1 = *((int *)this + 100);
  v2 = *((unsigned __int16 *)this + 220);
  if (*((__int16 *)this + 220) < 0)
    v3 = *((_DWORD *)this + 111);
  else
    v3 = v2 >> 5;
  if (v3 <= v1)
    return 0xFFFFLL;
  if ((v2 & 2) != 0)
    v5 = (char *)this + 442;
  else
    v5 = (char *)*((_QWORD *)this + 57);
  v4 = *(unsigned __int16 *)&v5[2 * v1];
  if ((v4 & 0xFC00) == 0xDC00)
    *((_DWORD *)this + 100) = v1 + 1;
  return v4;
}

uint64_t icu::FCDUTF8CollationIterator::foundNULTerminator(icu::FCDUTF8CollationIterator *this)
{
  int v2;

  if (*((_DWORD *)this + 102) || (*((_DWORD *)this + 101) & 0x80000000) == 0)
    return 0;
  v2 = *((_DWORD *)this + 100) - 1;
  *((_DWORD *)this + 100) = v2;
  *((_DWORD *)this + 101) = v2;
  return 1;
}

uint64_t icu::FCDUTF8CollationIterator::nextCodePoint(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v34;

  while (2)
  {
    switch(*((_DWORD *)this + 102))
    {
      case 0:
        v4 = *((int *)this + 100);
        v5 = *((_DWORD *)this + 101);
        if ((_DWORD)v4 == v5)
          return 0xFFFFFFFFLL;
        v6 = *((_QWORD *)this + 49);
        v7 = *(unsigned __int8 *)(v6 + v4);
        if (v5 < 0 && !*(_BYTE *)(v6 + v4))
          return 0xFFFFFFFFLL;
        if ((v7 & 0x80) == 0)
        {
          v32 = v4 + 1;
          goto LABEL_71;
        }
        v8 = v4 + 1;
        *((_DWORD *)this + 100) = v4 + 1;
        v9 = *(char *)(v6 + v4);
        v7 = *(unsigned __int8 *)(v6 + v4);
        if ((v9 & 0x80000000) == 0)
          goto LABEL_35;
        if ((_DWORD)v8 == v5)
          goto LABEL_8;
        if (v7 < 0xE0)
        {
          if (v7 < 0xC2)
            goto LABEL_34;
          v19 = v7 & 0x1F;
          goto LABEL_26;
        }
        if (v7 > 0xEF)
        {
          if (v7 > 0xF4)
            goto LABEL_34;
          v17 = *(unsigned __int8 *)(v6 + v8);
          if (((byte_18BE2C2FF[v17 >> 4] >> (v7 + 16)) & 1) == 0)
            goto LABEL_34;
          v8 = v4 + 2;
          *((_DWORD *)this + 100) = v4 + 2;
          if ((_DWORD)v4 + 2 == v5)
            goto LABEL_8;
          v18 = *(unsigned __int8 *)(v6 + v8) ^ 0x80;
          if (v18 > 0x3F)
          {
            v7 = 65533;
            goto LABEL_35;
          }
          LODWORD(v17) = v17 & 0x3F | (((_DWORD)v7 - 240) << 6);
        }
        else
        {
          v17 = v9 & 0xF;
          if (((a00000000000000[v17] >> (*(_BYTE *)(v6 + v8) >> 5)) & 1) == 0)
            goto LABEL_34;
          v18 = *(_BYTE *)(v6 + v8) & 0x3F;
        }
        LODWORD(v8) = v8 + 1;
        *((_DWORD *)this + 100) = v8;
        if ((_DWORD)v8 != v5)
        {
          v19 = v18 | ((_DWORD)v17 << 6);
LABEL_26:
          v20 = *(unsigned __int8 *)(v6 + (int)v8) ^ 0x80;
          if (v20 <= 0x3F)
          {
            v7 = v20 | (v19 << 6);
            LODWORD(v8) = v8 + 1;
            *((_DWORD *)this + 100) = v8;
            if (WORD1(v7))
            {
              v21 = (unsigned __int16)((v19 >> 4) - 10304);
              goto LABEL_36;
            }
LABEL_35:
            v21 = v7;
LABEL_36:
            if (v21 < 0xC0
              || !icu::CollationFCD::tcccIndex[(unint64_t)v21 >> 5]
              || ((icu::CollationFCD::tcccBits[icu::CollationFCD::tcccIndex[(unint64_t)v21 >> 5]] >> v21) & 1) == 0)
            {
              return v7;
            }
            if ((v7 & 0x1FFF01) == 0xF01)
              goto LABEL_40;
            if ((_DWORD)v8 == v5 || !icu::FCDUTF8CollationIterator::nextHasLccc(this))
              return v7;
            if (v7 >= 0x80)
            {
              if (v7 >= 0x800)
              {
LABEL_40:
                if (v7 >> 11 >= 0x1B)
                {
                  if (v7 >= 0x10000)
                    v23 = -4;
                  else
                    v23 = -3;
                  if ((v7 - 1114112) >= 0xFFEFE000)
                    v22 = v23;
                  else
                    v22 = 0;
                }
                else
                {
                  v22 = -3;
                }
                goto LABEL_54;
              }
              v22 = -2;
            }
            else
            {
              v22 = -1;
            }
LABEL_54:
            *((_DWORD *)this + 100) = v8 + v22;
            if (icu::FCDUTF8CollationIterator::nextSegment(this, a2))
              continue;
            return 0xFFFFFFFFLL;
          }
LABEL_34:
          v7 = 65533;
          goto LABEL_35;
        }
LABEL_8:
        v7 = 65533;
        LODWORD(v8) = v5;
        goto LABEL_35;
      case 1:
        v10 = *((_DWORD *)this + 100);
        v11 = v10 != *((_DWORD *)this + 104);
        *((_DWORD *)this + 103) = v10;
        v12 = 2 * v11;
        goto LABEL_17;
      case 2:
        v13 = *((int *)this + 100);
        if ((_DWORD)v13 == *((_DWORD *)this + 104))
        {
          v12 = 0;
LABEL_17:
          *((_DWORD *)this + 102) = v12;
          continue;
        }
        v24 = *((_QWORD *)this + 49);
        v25 = v13 + 1;
        *((_DWORD *)this + 100) = v13 + 1;
        v26 = *(char *)(v24 + v13);
        v7 = *(unsigned __int8 *)(v24 + v13);
        if (v26 < 0)
        {
          v27 = *((_DWORD *)this + 101);
          if ((_DWORD)v25 == v27)
            return 65533;
          if (v7 < 0xE0)
          {
            if (v7 < 0xC2)
              return 65533;
            v30 = v7 & 0x1F;
LABEL_75:
            v34 = *(unsigned __int8 *)(v24 + (int)v25) ^ 0x80;
            if (v34 > 0x3F)
              return 65533;
            v7 = v34 | (v30 << 6);
            v32 = v25 + 1;
LABEL_71:
            *((_DWORD *)this + 100) = v32;
          }
          else
          {
            if (v7 <= 0xEF)
            {
              v28 = v26 & 0xF;
              if (((a00000000000000[v28] >> (*(_BYTE *)(v24 + v25) >> 5)) & 1) != 0)
              {
                v29 = *(_BYTE *)(v24 + v25) & 0x3F;
                goto LABEL_64;
              }
              return 65533;
            }
            if (v7 <= 0xF4)
            {
              v28 = *(unsigned __int8 *)(v24 + v25);
              if (((byte_18BE2C2FF[v28 >> 4] >> (v7 + 16)) & 1) != 0)
              {
                v25 = v13 + 2;
                *((_DWORD *)this + 100) = v13 + 2;
                if ((_DWORD)v13 + 2 != v27)
                {
                  v29 = *(unsigned __int8 *)(v24 + v25) ^ 0x80;
                  if (v29 <= 0x3F)
                  {
                    LODWORD(v28) = v28 & 0x3F | (((_DWORD)v7 - 240) << 6);
LABEL_64:
                    LODWORD(v25) = v25 + 1;
                    *((_DWORD *)this + 100) = v25;
                    if ((_DWORD)v25 != v27)
                    {
                      v30 = v29 | ((_DWORD)v28 << 6);
                      goto LABEL_75;
                    }
                  }
                }
              }
            }
            return 65533;
          }
        }
        return v7;
      case 3:
        if (*((__int16 *)this + 220) < 0)
          v14 = (uint64_t *)*((unsigned int *)this + 111);
        else
          v14 = (uint64_t *)(*((unsigned __int16 *)this + 220) >> 5);
        v15 = *((_DWORD *)this + 100);
        if (v15 == (_DWORD)v14)
          goto LABEL_16;
        v7 = (uint64_t)icu::UnicodeString::char32At(v14, (icu::FCDUTF8CollationIterator *)((char *)this + 432), v15);
        if (v7 < 0x10000)
          v31 = 1;
        else
          v31 = 2;
        v32 = v31 + *((_DWORD *)this + 100);
        goto LABEL_71;
      default:
LABEL_16:
        v12 = 0;
        v16 = *((_DWORD *)this + 104);
        *((_DWORD *)this + 100) = v16;
        *((_DWORD *)this + 103) = v16;
        goto LABEL_17;
    }
  }
}

unint64_t icu::FCDUTF8CollationIterator::previousCodePoint(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  int32_t *v4;
  int v5;
  uint64_t v6;
  const uint8_t *v7;
  uint64_t v8;
  int v9;
  unint64_t CharSafeBody;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  const uint8_t *v18;
  uint64_t v19;
  int v20;
  uint64_t *v22;
  int v23;

  v4 = (int32_t *)((char *)this + 400);
  while (1)
  {
    v5 = *((_DWORD *)this + 102);
    if (v5 == 2)
      break;
    if (v5 == 1)
    {
      v6 = *v4;
      if (!(_DWORD)v6)
        return 0xFFFFFFFFLL;
      v7 = (const uint8_t *)*((_QWORD *)this + 49);
      v8 = v6 - 1;
      if (((char)v7[v8] & 0x80000000) == 0)
      {
        CharSafeBody = v7[v8];
        *v4 = v8;
        return CharSafeBody;
      }
      *v4 = v8;
      v9 = (char)v7[v8];
      CharSafeBody = v9;
      if (v9 < 0)
        CharSafeBody = utf8_prevCharSafeBody(v7, 0, v4, v9, -3);
      if ((int)CharSafeBody >= 0x10000)
        v11 = (unsigned __int16)((CharSafeBody >> 10) - 10304);
      else
        v11 = CharSafeBody;
      if ((int)v11 < 768
        || !icu::CollationFCD::lcccIndex[v11 >> 5]
        || ((icu::CollationFCD::lcccBits[icu::CollationFCD::lcccIndex[v11 >> 5]] >> v11) & 1) == 0)
      {
        return CharSafeBody;
      }
      if ((CharSafeBody & 0x1FFF01) == 0xF01)
      {
LABEL_15:
        if (CharSafeBody >> 11 >= 0x1B)
        {
          if ((CharSafeBody - 1114112) >= 0xFFEFE000)
          {
            if (CharSafeBody < 0x10000)
              v12 = 3;
            else
              v12 = 4;
          }
          else
          {
            v12 = 0;
          }
        }
        else
        {
          v12 = 3;
        }
        goto LABEL_40;
      }
      if (!*v4 || !icu::FCDUTF8CollationIterator::previousHasTccc(this))
        return CharSafeBody;
      if (CharSafeBody >= 0x80)
      {
        if (CharSafeBody >= 0x800)
          goto LABEL_15;
        v12 = 2;
      }
      else
      {
        v12 = 1;
      }
LABEL_40:
      *((_DWORD *)this + 100) += v12;
      if (!icu::FCDUTF8CollationIterator::previousSegment(this, a2))
        return 0xFFFFFFFFLL;
    }
    else
    {
      if (v5 >= 3)
      {
        v14 = (uint64_t *)*v4;
        if ((_DWORD)v14)
        {
          v22 = icu::UnicodeString::char32At(v14, (icu::FCDUTF8CollationIterator *)((char *)this + 432), (int)v14 - 1);
          CharSafeBody = (unint64_t)v22;
          if (v22 >= 0x10000)
            v23 = -2;
          else
            v23 = -1;
          *((_DWORD *)this + 100) += v23;
          return CharSafeBody;
        }
LABEL_23:
        v15 = *((_DWORD *)this + 103);
        *((_DWORD *)this + 100) = v15;
        *((_DWORD *)this + 104) = v15;
LABEL_24:
        v16 = 1;
        goto LABEL_25;
      }
      if (v5)
        goto LABEL_23;
      v17 = *((_DWORD *)this + 100);
      *((_DWORD *)this + 104) = v17;
      if (v17 == *((_DWORD *)this + 103))
        v16 = 1;
      else
        v16 = 2;
LABEL_25:
      *((_DWORD *)this + 102) = v16;
    }
  }
  v13 = *((int *)this + 100);
  if ((_DWORD)v13 == *((_DWORD *)this + 103))
    goto LABEL_24;
  v18 = (const uint8_t *)*((_QWORD *)this + 49);
  v19 = v13 - 1;
  *((_DWORD *)this + 100) = v19;
  v20 = (char)v18[v19];
  CharSafeBody = v20;
  if (v20 < 0)
    return utf8_prevCharSafeBody(v18, 0, v4, v20, -3);
  return CharSafeBody;
}

uint64_t icu::FCDUTF8CollationIterator::previousSegment(icu::FCDUTF8CollationIterator *this, UErrorCode *a2)
{
  uint64_t v2;
  unsigned int v5;
  int32_t *v6;
  int32_t v7;
  int32_t v8;
  const uint8_t *v9;
  uint64_t v10;
  int v11;
  UChar32 CharSafeBody;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v19;
  int32_t v20;
  const uint8_t *v21;
  uint64_t v22;
  int v23;
  UChar32 v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  void (**v30)(icu::UnicodeString *__hidden);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  LOBYTE(v5) = 0;
  v6 = (int32_t *)((char *)this + 400);
  v7 = *((_DWORD *)this + 100);
  v31 = 0u;
  v32 = 0u;
  v34 = 0;
  v33 = 0u;
  v30 = off_1E2256B38;
  LOWORD(v31) = 2;
  v8 = v7;
  while (1)
  {
    v9 = (const uint8_t *)*((_QWORD *)this + 49);
    v10 = v8 - 1;
    *((_DWORD *)this + 100) = v10;
    v11 = (char)v9[v10];
    CharSafeBody = v11;
    if (v11 < 0)
      CharSafeBody = utf8_prevCharSafeBody(v9, 0, v6, v11, -3);
    v13 = sub_18BBD6AB4(*((_QWORD *)this + 53), CharSafeBody);
    v14 = v13;
    if ((_BYTE)v13)
      v15 = 1;
    else
      v15 = v8 == v7;
    if (!v15)
    {
LABEL_23:
      *((_DWORD *)this + 103) = v8;
      *((_DWORD *)this + 100) = v7;
      v19 = 2;
      *((_DWORD *)this + 102) = 2;
LABEL_40:
      v2 = 1;
      goto LABEL_41;
    }
    v16 = v13;
    icu::UnicodeString::append((uint64_t)&v30, CharSafeBody);
    if (v14)
    {
      if ((_BYTE)v5 && v14 > v5)
      {
        if (v16 >= 0x100)
          break;
        goto LABEL_32;
      }
      if (v16 == 33154 || v16 == 33156)
        break;
    }
    v5 = v16 >> 8;
    v8 = *v6;
    if (v16 < 0x100 || v8 == 0)
      goto LABEL_23;
  }
  do
  {
    v20 = *v6;
    if (!*v6)
      break;
    v21 = (const uint8_t *)*((_QWORD *)this + 49);
    v22 = v20 - 1;
    *((_DWORD *)this + 100) = v22;
    v23 = (char)v21[v22];
    v24 = v23;
    if (v23 < 0)
      v24 = utf8_prevCharSafeBody(v21, 0, v6, v23, -3);
    v25 = sub_18BBD6AB4(*((_QWORD *)this + 53), v24);
    if (!v25)
    {
      *v6 = v20;
      break;
    }
    v26 = v25;
    icu::UnicodeString::append((uint64_t)&v30, v24);
  }
  while (v26 > 0xFF);
LABEL_32:
  if ((v31 & 0x8000u) == 0)
    v27 = (unsigned __int16)v31 >> 5;
  else
    v27 = DWORD1(v31);
  icu::UnicodeString::doReverse((icu::UnicodeString *)&v30, 0, v27);
  icu::Normalizer2Impl::decompose(*((UChar **)this + 53), (const icu::UnicodeString *)&v30, (icu::FCDUTF8CollationIterator *)((char *)this + 432), a2);
  v2 = 0;
  v19 = *(unsigned int *)a2;
  if ((int)v19 <= 0)
  {
    *((_DWORD *)this + 104) = v7;
    *((_DWORD *)this + 103) = *((_DWORD *)this + 100);
    *((_DWORD *)this + 102) = 3;
    v28 = *((unsigned __int16 *)this + 220);
    if ((v28 & 0x8000) != 0)
      v19 = *((unsigned int *)this + 111);
    else
      v19 = v28 >> 5;
    *v6 = v19;
    goto LABEL_40;
  }
LABEL_41:
  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v30);
  return v2;
}

_DWORD *icu::FCDUTF8CollationIterator::switchToBackward(_DWORD *this)
{
  int v1;
  int v2;
  int v3;
  int v4;

  v1 = this[102];
  if (v1 == 2)
    goto LABEL_7;
  if (v1)
  {
    v4 = this[103];
    this[100] = v4;
    this[104] = v4;
LABEL_7:
    v3 = 1;
    goto LABEL_8;
  }
  v2 = this[100];
  this[104] = v2;
  if (v2 == this[103])
    v3 = 1;
  else
    v3 = 2;
LABEL_8:
  this[102] = v3;
  return this;
}

uint64_t icu::FCDUTF8CollationIterator::forwardNumCodePoints(uint64_t this, int a2, UErrorCode *a3)
{
  int v4;
  icu::FCDUTF8CollationIterator *v5;
  BOOL v6;

  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (icu::FCDUTF8CollationIterator *)this;
    do
    {
      this = icu::FCDUTF8CollationIterator::nextCodePoint(v5, a3);
      v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

unint64_t icu::FCDUTF8CollationIterator::backwardNumCodePoints(unint64_t this, int a2, UErrorCode *a3)
{
  int v4;
  icu::FCDUTF8CollationIterator *v5;
  BOOL v6;

  if (a2 >= 1)
  {
    v4 = a2;
    v5 = (icu::FCDUTF8CollationIterator *)this;
    do
    {
      this = icu::FCDUTF8CollationIterator::previousCodePoint(v5, a3);
      v6 = __OFSUB__(v4--, 1);
    }
    while ((this & 0x80000000) == 0 && !((v4 < 0) ^ v6 | (v4 == 0)));
  }
  return this;
}

BOOL icu::FCDUTF8CollationIterator::normalize(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  icu::Normalizer2Impl::decompose(this[53], a2, (icu::UnicodeString *)(this + 54), a3);
  return *a3 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t utmscale_getTimeScaleValue(unsigned int a1, unsigned int a2, int *a3)
{
  uint64_t result;

  if (!a3 || *a3 > 0)
    return 0;
  if (a1 <= 9 && a2 < 0xB)
    return qword_18BE2C350[11 * a1 + a2];
  result = 0;
  *a3 = 1;
  return result;
}

uint64_t utmscale_fromInt64(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t result;
  _QWORD *v4;

  if (!a3 || *a3 > 0)
    return 0;
  if (a2 < 0xA)
  {
    v4 = &qword_18BE2C350[11 * a2];
    if (v4[2] <= a1 && v4[3] >= a1)
      return (qword_18BE2C350[11 * a2 + 1] + a1) * *v4;
  }
  result = 0;
  *a3 = 1;
  return result;
}

uint64_t utmscale_toInt64(uint64_t a1, unsigned int a2, int *a3)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3 || *a3 > 0)
    return 0;
  if (a2 >= 0xA || (v4 = &qword_18BE2C350[11 * a2], v4[4] > a1) || v4[5] < a1)
  {
    result = 0;
    *a3 = 1;
    return result;
  }
  v5 = v4[8];
  v6 = *v4;
  if (a1 < 0)
  {
    if (v4[9] > a1)
    {
      v7 = (v5 + a1) / v6;
      v8 = v4[6];
      return v7 - v8;
    }
    v9 = a1 - v5;
LABEL_15:
    v7 = v9 / v6;
    v8 = v4[1];
    return v7 - v8;
  }
  if (v4[10] >= a1)
  {
    v9 = v5 + a1;
    goto LABEL_15;
  }
  v7 = (a1 - v5) / v6;
  v8 = v4[7];
  return v7 - v8;
}

void *sub_18BDC0F10()
{
  return &unk_1EE00A2D8;
}

void sub_18BDC0F20(icu::Replaceable *a1)
{
  void *v1;

  icu::Replaceable::~Replaceable(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BDC0F34(uint64_t a1)
{
  return (**(uint64_t (***)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_18BDC0F40(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 16) + 8))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_18BDC0F4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 16) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_18BDC0F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v5 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 24);
  v7 = *(unsigned __int16 *)(a4 + 8);
  if ((v7 & 0x11) != 0)
  {
    v8 = 0;
  }
  else if ((v7 & 2) != 0)
  {
    v8 = a4 + 10;
  }
  else
  {
    v8 = *(_QWORD *)(a4 + 24);
  }
  v9 = (__int16)v7;
  v10 = v7 >> 5;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(unsigned int *)(a4 + 12);
  return v6(v4, a2, a3, v8, v11);
}

uint64_t sub_18BDC0FA4(uint64_t a1, uint64_t a2, uint64_t a3, icu::UnicodeString *this)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v9;
  uint64_t Buffer;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 32);
  v9 = a3 - a2;
  Buffer = icu::UnicodeString::getBuffer(this, (int)a3 - (int)a2);
  v8(v7, a2, a3, Buffer);
  return icu::UnicodeString::releaseBuffer((uint64_t)this, v9);
}

uint64_t sub_18BDC100C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 16) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t utrans_openU(uint64_t a1, unsigned int a2, int a3, uint64_t a4, unsigned int a5, UParseError *a6, UErrorCode *a7)
{
  uint64_t v8;
  UParseError *v13;
  uint64_t v14;
  uint64_t *v15;
  void *v16;
  void *v17;
  uint64_t Instance;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[4];
  uint64_t v22;
  _OWORD v23[4];
  _OWORD v24[4];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!a7 || *(int *)a7 > 0)
    return 0;
  if (a1)
  {
    v22 = 0;
    memset(v21, 0, sizeof(v21));
    if (a6)
      v13 = a6;
    else
      v13 = (UParseError *)v21;
    memset(v24, 0, sizeof(v24));
    v20 = a1;
    v14 = icu::UnicodeString::UnicodeString(v24, a2 >> 31, &v20);
    if (a4)
    {
      memset(v23, 0, sizeof(v23));
      v19 = a4;
      icu::UnicodeString::UnicodeString(v23, a5 >> 31, &v19);
      v15 = icu::Transliterator::createFromRules((UChar **)v24, (uint64_t)v23, a3, v13, a7);
      v16 = (void *)*(unsigned int *)a7;
      if ((int)v16 >= 1)
        v8 = 0;
      else
        v8 = (uint64_t)v15;
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v23);
    }
    else
    {
      Instance = icu::Transliterator::createInstance(v14, a3, v13, a7);
      v17 = (void *)*(unsigned int *)a7;
      if ((int)v17 >= 1)
        v8 = 0;
      else
        v8 = Instance;
    }
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
  }
  else
  {
    v8 = 0;
    *a7 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return v8;
}

uint64_t utrans_open(uint64_t a1, int a2, uint64_t a3, unsigned int a4, UParseError *a5, UErrorCode *a6)
{
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  icu::UnicodeString::UnicodeString(&v16, a1, 0xFFFFFFFFLL, 0);
  if ((BYTE8(v16) & 0x11) != 0)
  {
    v11 = 0;
  }
  else if ((BYTE8(v16) & 2) != 0)
  {
    v11 = (unint64_t)&v16 | 0xA;
  }
  else
  {
    v11 = *((_QWORD *)&v17 + 1);
  }
  if ((SWORD4(v16) & 0x8000u) == 0)
    v12 = WORD4(v16) >> 5;
  else
    v12 = HIDWORD(v16);
  v13 = utrans_openU(v11, v12, a2, a3, a4, a5, a6);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v16);
  return v13;
}

uint64_t utrans_openInverse(icu::Transliterator *a1, UErrorCode *a2)
{
  if (a2 && *(int *)a2 <= 0)
    return icu::Transliterator::createInverse(a1, a2);
  else
    return 0;
}

uint64_t utrans_clone(uint64_t a1, int *a2)
{
  uint64_t result;
  int v4;

  if (!a2)
    return 0;
  if (*a2 > 0)
    return 0;
  if (a1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (result)
      return result;
    v4 = 7;
  }
  else
  {
    v4 = 1;
  }
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t utrans_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t utrans_getUnicodeID(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  __int16 v7;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  if (a2)
  {
    v4 = *(unsigned __int16 *)(v3 + 8);
    v5 = (__int16)v4;
    v6 = v4 >> 5;
    if (v5 < 0)
      v6 = *(_DWORD *)(v3 + 12);
    *a2 = v6;
  }
  v7 = *(_WORD *)(v3 + 8);
  if ((v7 & 0x11) != 0)
    return 0;
  if ((v7 & 2) != 0)
    return v3 + 10;
  return *(_QWORD *)(v3 + 24);
}

uint64_t utrans_getID(uint64_t a1, char *a2, int a3)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return icu::UnicodeString::extract(v5, 0, 0x7FFFFFFFLL, a2, a3);
}

void utrans_register(icu::Transliterator *this, icu::Transliterator *a2)
{
  if (a2)
  {
    if (*(int *)a2 <= 0)
      icu::Transliterator::registerInstance(this, a2);
  }
}

void *utrans_unregisterID(uint64_t a1, unsigned int a2)
{
  const icu::UnicodeString *v2;
  void *v3;
  uint64_t v5;
  _OWORD v6[4];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  v5 = a1;
  icu::UnicodeString::UnicodeString(v6, a2 >> 31, &v5);
  icu::Transliterator::unregister((icu::Transliterator *)v6, v2);
  return icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v6);
}

void *utrans_unregister(uint64_t a1)
{
  const icu::UnicodeString *v1;
  void *v2;
  _OWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  memset(v4, 0, sizeof(v4));
  icu::UnicodeString::UnicodeString(v4, a1, 0xFFFFFFFFLL, 0);
  icu::Transliterator::unregister((icu::Transliterator *)v4, v1);
  return icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v4);
}

icu::Transliterator *utrans_setFilter(icu::Transliterator *result, _WORD *a2, unsigned int a3, UErrorCode *a4)
{
  icu::Transliterator *v5;
  unint64_t v6;
  icu::UnicodeSet *v7;
  icu::UnicodeFilter *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a4 && *(int *)a4 <= 0)
  {
    v5 = result;
    if (a2 && *a2)
    {
      memset(v12, 0, sizeof(v12));
      v11 = (uint64_t)a2;
      icu::UnicodeString::UnicodeString(v12, a3 >> 31, &v11);
      v10 = v11;
      v7 = (icu::UnicodeSet *)icu::UMemory::operator new(&v10, (icu::UMemory *)0xC8, v6);
      if (!v7)
      {
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        return (icu::Transliterator *)icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)v12);
      }
      v8 = v7;
      icu::UnicodeSet::UnicodeSet(v7, (const icu::UnicodeString *)v12, a4);
      v9 = (void *)*(unsigned int *)a4;
      if ((int)v9 >= 1)
      {
        (*(void (**)(icu::UnicodeFilter *))(*(_QWORD *)v8 + 8))(v8);
        v8 = 0;
      }
      icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
    }
    else
    {
      v8 = 0;
    }
    return (icu::Transliterator *)icu::Transliterator::adoptFilter(v5, v8);
  }
  return result;
}

uint64_t utrans_getAvailableID(icu::Transliterator *a1, char *a2, int a3)
{
  uint64_t *AvailableID;

  AvailableID = icu::Transliterator::getAvailableID(a1);
  return icu::UnicodeString::extract((uint64_t)AvailableID, 0, 0x7FFFFFFFLL, a2, a3);
}

_OWORD *utrans_openIDs(int *a1)
{
  _OWORD *v2;
  _OWORD *v4;

  if (!a1 || *a1 > 0)
    return 0;
  v4 = uprv_malloc(0x40uLL);
  v2 = v4;
  if (v4)
  {
    *v4 = xmmword_1E2268758;
    v4[1] = *(_OWORD *)&off_1E2268768;
    v4[2] = xmmword_1E2268778;
    *((_QWORD *)v4 + 6) = sub_18BDC1C70;
    *((_DWORD *)v4 + 14) = 0;
    *((_DWORD *)v4 + 15) = icu::Transliterator::countAvailableIDs((icu::Transliterator *)v4);
  }
  else
  {
    *a1 = 7;
  }
  return v2;
}

void utrans_trans(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, int *a6)
{
  _QWORD v6[3];

  if (a6 && *a6 <= 0)
  {
    if (a1 && a2 && a3 && a5)
    {
      v6[0] = &off_1E2268700;
      v6[1] = a2;
      v6[2] = a3;
      *a5 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v6, a4, *a5);
      icu::Replaceable::~Replaceable((icu::Replaceable *)v6);
    }
    else
    {
      *a6 = 1;
    }
  }
}

void utrans_transIncremental(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  _QWORD v5[3];

  if (a5 && *a5 <= 0)
  {
    if (a1 && a2 && a3 && a4)
    {
      v5[0] = &off_1E2268700;
      v5[1] = a2;
      v5[2] = a3;
      (*(void (**)(uint64_t, _QWORD *, uint64_t, int *))(*(_QWORD *)a1 + 64))(a1, v5, a4, a5);
      icu::Replaceable::~Replaceable((icu::Replaceable *)v5);
    }
    else
    {
      *a5 = 1;
    }
  }
}

void *utrans_transUChars(void *result, UChar *s, _DWORD *a3, uint64_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  uint64_t v8;
  uint64_t v14;
  int v15;
  UChar *v16;
  UChar *v17;
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a7 && *a7 <= 0)
  {
    v8 = (uint64_t)result;
    if (result && s && a6)
    {
      if (!a3 || (v14 = *a3, (v14 & 0x80000000) != 0))
        v14 = u_strlen(s);
      memset(v18, 0, sizeof(v18));
      icu::UnicodeString::UnicodeString(v18, s, v14, a4);
      *a6 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v8 + 32))(v8, v18, a5, *a6);
      v17 = s;
      v15 = icu::UnicodeString::extract((uint64_t)v18, &v17, a4, a7);
      v16 = v17;
      if (a3)
        *a3 = v15;
      return icu::UnicodeString::~UnicodeString(&v16, (icu::UnicodeString *)v18);
    }
    else
    {
      *a7 = 1;
    }
  }
  return result;
}

void *utrans_transIncrementalUChars(void *result, UChar *s, _DWORD *a3, uint64_t a4, uint64_t a5, int *a6)
{
  uint64_t v7;
  uint64_t v12;
  int v13;
  UChar *v14;
  UChar *v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a6 && *a6 <= 0)
  {
    v7 = (uint64_t)result;
    if (result && s && a5)
    {
      if (!a3 || (v12 = *a3, (v12 & 0x80000000) != 0))
        v12 = u_strlen(s);
      memset(v16, 0, sizeof(v16));
      icu::UnicodeString::UnicodeString(v16, s, v12, a4);
      (*(void (**)(uint64_t, _OWORD *, uint64_t, int *))(*(_QWORD *)v7 + 64))(v7, v16, a5, a6);
      v15 = s;
      v13 = icu::UnicodeString::extract((uint64_t)v16, &v15, a4, a6);
      v14 = v15;
      if (a3)
        *a3 = v13;
      return icu::UnicodeString::~UnicodeString(&v14, (icu::UnicodeString *)v16);
    }
    else
    {
      *a6 = 1;
    }
  }
  return result;
}

uint64_t utrans_toRules(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, int *a5)
{
  uint64_t v6;
  UChar *v12;
  UChar *v13;
  void (**v14)(icu::UnicodeString *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a5 && *a5 <= 0)
  {
    if (a3)
    {
      if ((a4 & 0x80000000) == 0)
      {
LABEL_7:
        v15 = 0u;
        v16 = 0u;
        v18 = 0;
        v17 = 0u;
        v14 = off_1E2256B38;
        LOWORD(v15) = 2;
        icu::UnicodeString::setTo((icu::UnicodeString *)&v14, a3, 0, a4);
        (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t))(*(_QWORD *)a1 + 112))(a1, &v14, a2);
        v13 = (UChar *)a3;
        v6 = icu::UnicodeString::extract((uint64_t)&v14, &v13, a4, a5);
        v12 = v13;
        icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v14);
        return v6;
      }
    }
    else if (!a4)
    {
      goto LABEL_7;
    }
    v6 = 0;
    *a5 = 1;
    return v6;
  }
  return 0;
}

icu::UVector **utrans_getSourceSet(const icu::UnicodeSet **this, unint64_t a2, icu::UVector **a3, unsigned int *a4)
{
  icu::UVector **v4;
  uint64_t *v5;
  int v6;
  icu::UVector **v8;

  v4 = a3;
  if (a4)
  {
    v5 = (uint64_t *)*a4;
    if ((int)v5 <= 0)
    {
      v6 = a2;
      if (a3)
      {
        if ((_DWORD)a2)
        {
LABEL_5:
          (*((void (**)(const icu::UnicodeSet **, icu::UVector **))*this + 15))(this, v4);
          return v4;
        }
      }
      else
      {
        uset_openEmpty(a2, v5);
        v4 = v8;
        if (v6)
          goto LABEL_5;
      }
      icu::Transliterator::getSourceSet(this, v4);
    }
  }
  return v4;
}

uint64_t sub_18BDC1B9C(uint64_t a1, int *a2)
{
  if (a2 && *a2 <= 0)
    return *(unsigned int *)(a1 + 60);
  else
    return 0;
}

char *sub_18BDC1BBC(uint64_t a1, unsigned int *a2, int *a3)
{
  char *result;
  int v6;
  uint64_t *AvailableID;
  unsigned int v8;
  int v9;
  unsigned int v10;
  __int16 v11;

  if (!a3)
    return 0;
  if (*a3 > 0)
    return 0;
  v6 = *(_DWORD *)(a1 + 56);
  if (v6 >= *(_DWORD *)(a1 + 60))
  {
    if (!a2)
      return 0;
    result = 0;
    *a2 = 0;
  }
  else
  {
    AvailableID = icu::Transliterator::getAvailableID((icu::Transliterator *)*(unsigned int *)(a1 + 56));
    *(_DWORD *)(a1 + 56) = v6 + 1;
    if (a2)
    {
      v8 = *((unsigned __int16 *)AvailableID + 4);
      v9 = (__int16)v8;
      v10 = v8 >> 5;
      if (v9 < 0)
        v10 = *((_DWORD *)AvailableID + 3);
      *a2 = v10;
    }
    v11 = *((_WORD *)AvailableID + 4);
    if ((v11 & 0x11) != 0)
      return 0;
    if ((v11 & 2) != 0)
      return (char *)AvailableID + 10;
    else
      return (char *)AvailableID[3];
  }
  return result;
}

icu::Transliterator *sub_18BDC1C70(icu::Transliterator *result, int *a2)
{
  icu::Transliterator *v2;

  if (a2)
  {
    if (*a2 <= 0)
    {
      v2 = result;
      *((_DWORD *)result + 14) = 0;
      result = (icu::Transliterator *)icu::Transliterator::countAvailableIDs(result);
      *((_DWORD *)v2 + 15) = (_DWORD)result;
    }
  }
  return result;
}

uint64_t sub_18BDC1CA8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[2];
  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int16 *)(*(_QWORD *)a1 + 8);
  if ((*(__int16 *)(*(_QWORD *)a1 + 8) & 0x80000000) == 0)
  {
    if ((int)v1 < (int)(v3 >> 5))
    {
      v4 = v3 >> 5;
      goto LABEL_5;
    }
LABEL_8:
    v6 = 0xFFFFLL;
    goto LABEL_11;
  }
  v4 = *(_DWORD *)(v2 + 12);
  if ((int)v1 >= v4)
    goto LABEL_8;
LABEL_5:
  if (v4 <= v1)
    goto LABEL_8;
  if ((v3 & 2) != 0)
    v5 = v2 + 10;
  else
    v5 = *(_QWORD *)(v2 + 24);
  v6 = *(unsigned __int16 *)(v5 + 2 * v1);
LABEL_11:
  a1[2] = v1 + 1;
  return v6;
}

void *icu::VTimeZone::getStaticClassID(icu::VTimeZone *this)
{
  return &unk_1EE00A2D9;
}

void *icu::VTimeZone::getDynamicClassID(icu::VTimeZone *this)
{
  return &unk_1EE00A2D9;
}

_QWORD *icu::VTimeZone::VTimeZone(icu::VTimeZone *this)
{
  _QWORD *result;

  result = icu::BasicTimeZone::BasicTimeZone(this);
  *result = off_1E22687B8;
  result[9] = 0;
  result[10] = 0;
  result[11] = off_1E2256B38;
  *((_WORD *)result + 48) = 2;
  result[19] = 0x43846A3EDDF8CD80;
  result[20] = off_1E2256B38;
  *((_WORD *)result + 84) = 2;
  result[28] = off_1E2256B38;
  *((_WORD *)result + 116) = 2;
  return result;
}

{
  _QWORD *result;

  result = icu::BasicTimeZone::BasicTimeZone(this);
  *result = off_1E22687B8;
  result[9] = 0;
  result[10] = 0;
  result[11] = off_1E2256B38;
  *((_WORD *)result + 48) = 2;
  result[19] = 0x43846A3EDDF8CD80;
  result[20] = off_1E2256B38;
  *((_WORD *)result + 84) = 2;
  result[28] = off_1E2256B38;
  *((_WORD *)result + 116) = 2;
  return result;
}

icu::VTimeZone *icu::VTimeZone::VTimeZone(icu::VTimeZone *this, const icu::VTimeZone *a2)
{
  icu::TimeZone *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  icu::UVector *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  UErrorCode v17;

  v4 = icu::BasicTimeZone::BasicTimeZone(this, (UChar **)a2);
  *(_QWORD *)v4 = off_1E22687B8;
  *((_QWORD *)v4 + 9) = 0;
  v5 = (_QWORD *)((char *)v4 + 72);
  *((_QWORD *)this + 10) = 0;
  icu::UnicodeString::UnicodeString((icu::TimeZone *)((char *)v4 + 88), (UChar **)a2 + 11);
  *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
  icu::UnicodeString::UnicodeString((icu::VTimeZone *)((char *)this + 160), (UChar **)a2 + 20);
  icu::UnicodeString::UnicodeString((icu::VTimeZone *)((char *)this + 224), (UChar **)a2 + 28);
  v7 = *((_QWORD *)a2 + 9);
  if (v7)
    *v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v8 = *((_QWORD *)a2 + 10);
  if (v8)
  {
    v17 = U_ZERO_ERROR;
    v9 = *(unsigned int *)(v8 + 8);
    v10 = icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x28, v6);
    if (v10)
    {
      v11 = (icu::UVector *)v10;
      icu::UVector::UVector(v10, uprv_deleteUObject, uhash_compareUnicodeString, v9, &v17);
      if (v17 <= U_ZERO_ERROR)
      {
        if ((int)v9 < 1)
        {
LABEL_15:
          *((_QWORD *)this + 10) = v11;
          return this;
        }
        v12 = 0;
        while (1)
        {
          v13 = icu::UVector::elementAt(*((icu::UVector **)a2 + 10), v12);
          v14 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
          icu::UVector::adoptElement(v11, v14, &v17);
          if (!v14 || v17 >= U_ILLEGAL_ARGUMENT_ERROR)
            break;
          if ((_DWORD)v9 == ++v12)
            goto LABEL_15;
        }
      }
      (*(void (**)(icu::UVector *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  return this;
}

void icu::VTimeZone::~VTimeZone(icu::VTimeZone *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E22687B8;
  v2 = *((_QWORD *)this + 9);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 224));
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 160));
  icu::UnicodeString::~UnicodeString((icu::VTimeZone *)((char *)this + 88));
  icu::BasicTimeZone::~BasicTimeZone(this);
}

{
  void *v1;

  icu::VTimeZone::~VTimeZone(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::VTimeZone::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  icu::UVector *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  UErrorCode v17;

  if (a1 != a2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1))
  {
    icu::TimeZone::operator=(a1, a2);
    v5 = *(_QWORD *)(a1 + 72);
    if (v5)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      *(_QWORD *)(a1 + 72) = 0;
    }
    v6 = *(_QWORD *)(a2 + 72);
    if (v6)
      *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
    v7 = *(_QWORD *)(a1 + 80);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      *(_QWORD *)(a1 + 80) = 0;
    }
    v8 = *(_QWORD *)(a2 + 80);
    if (!v8)
      goto LABEL_24;
    v17 = U_ZERO_ERROR;
    v9 = *(unsigned int *)(v8 + 8);
    v10 = icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x28, v4);
    if (!v10)
      goto LABEL_24;
    v11 = (icu::UVector *)v10;
    icu::UVector::UVector(v10, uprv_deleteUObject, uhash_compareUnicodeString, v9, &v17);
    if (v17 <= U_ZERO_ERROR)
    {
      if ((int)v9 < 1)
      {
LABEL_23:
        *(_QWORD *)(a1 + 80) = v11;
        goto LABEL_24;
      }
      v12 = 0;
      while (1)
      {
        v13 = icu::UVector::elementAt(*(icu::UVector **)(a2 + 80), v12);
        v14 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
        if (!v14 && v17 <= U_ZERO_ERROR)
          v17 = U_MEMORY_ALLOCATION_ERROR;
        icu::UVector::adoptElement(v11, v14, &v17);
        if (v17 >= U_ILLEGAL_ARGUMENT_ERROR)
          break;
        if ((_DWORD)v9 == ++v12)
          goto LABEL_23;
      }
    }
    (*(void (**)(icu::UVector *))(*(_QWORD *)v11 + 8))(v11);
LABEL_24:
    icu::UnicodeString::operator=((UChar **)(a1 + 88), (UChar **)(a2 + 88));
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    icu::UnicodeString::operator=((UChar **)(a1 + 160), (UChar **)(a2 + 160));
    icu::UnicodeString::operator=((UChar **)(a1 + 224), (UChar **)(a2 + 224));
  }
  return a1;
}

BOOL icu::VTimeZone::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
  {
    result = icu::TimeZone::operator==(a1, a2);
    if (result)
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 72) + 24))(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72)))
      {
        v5 = *(unsigned __int16 *)(a1 + 96);
        if ((v5 & 1) != 0)
        {
          if ((*(_WORD *)(a2 + 96) & 1) != 0)
            goto LABEL_18;
        }
        else
        {
          if ((v5 & 0x8000) != 0)
            v6 = *(_DWORD *)(a1 + 100);
          else
            v6 = v5 >> 5;
          v7 = *(unsigned __int16 *)(a2 + 96);
          if ((v7 & 0x8000u) == 0)
            v8 = v7 >> 5;
          else
            v8 = *(_DWORD *)(a2 + 100);
          if ((v7 & 1) == 0
            && v6 == v8
            && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 88), (const icu::UnicodeString *)(a2 + 88), v6))
          {
LABEL_18:
            if (*(double *)(a1 + 152) == *(double *)(a2 + 152))
              return 1;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t icu::VTimeZone::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
}

icu::BasicTimeZone *icu::VTimeZone::createVTimeZoneByID@<X0>(UChar **this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t *a3@<X8>)
{
  icu::BasicTimeZone *v4;
  icu::BasicTimeZone *v5;
  const icu::UnicodeString *v6;
  UChar **TimeZone;
  _QWORD *v8;
  const UChar *StringByKey;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = (icu::BasicTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x120, (unint64_t)a2);
  v5 = v4;
  if (v4)
  {
    icu::BasicTimeZone::BasicTimeZone(v4);
    *(_QWORD *)v5 = off_1E22687B8;
    *((_QWORD *)v5 + 9) = 0;
    *((_QWORD *)v5 + 10) = 0;
    *((_QWORD *)v5 + 11) = off_1E2256B38;
    *((_WORD *)v5 + 48) = 2;
    *((_QWORD *)v5 + 20) = off_1E2256B38;
    *((_QWORD *)v5 + 19) = 0x43846A3EDDF8CD80;
    *((_WORD *)v5 + 84) = 2;
    *((_QWORD *)v5 + 28) = off_1E2256B38;
    *((_WORD *)v5 + 116) = 2;
    TimeZone = (UChar **)icu::TimeZone::createTimeZone(this, v6);
    *((_QWORD *)v5 + 9) = TimeZone;
    icu::UnicodeString::operator=((UChar **)v5 + 20, TimeZone + 1);
    v14 = 0;
    v8 = (_QWORD *)ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)&v14 + 4);
    StringByKey = ures_getStringByKey((uint64_t)v8, "TZVersion", (int *)&v14, (int *)&v14 + 1);
    if (SHIDWORD(v14) <= 0)
    {
      v10 = (uint64_t)StringByKey;
      v11 = v14;
      icu::UnicodeString::unBogus((uint64_t)v5 + 224);
      if (*((__int16 *)v5 + 116) < 0)
        v12 = *((unsigned int *)v5 + 59);
      else
        v12 = *((unsigned __int16 *)v5 + 116) >> 5;
      icu::UnicodeString::doReplace((uint64_t)v5 + 224, 0, v12, v10, 0, v11);
    }
    ures_close(v8);
  }
  return v5;
}

icu::BasicTimeZone *icu::VTimeZone::createVTimeZoneFromBasicTimeZone(icu::VTimeZone *this, const icu::BasicTimeZone *a2, UErrorCode *a3)
{
  uint64_t *v3;
  icu::BasicTimeZone *v4;
  icu::BasicTimeZone *v8;
  uint64_t v9;
  _QWORD *v10;
  const UChar *StringByKey;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;

  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0)
    return 0;
  v8 = (icu::BasicTimeZone *)icu::UMemory::operator new(v3, (icu::UMemory *)0x120, (unint64_t)a2);
  v4 = v8;
  if (!v8)
  {
    *(_DWORD *)a2 = 7;
    return v4;
  }
  icu::BasicTimeZone::BasicTimeZone(v8);
  *(_QWORD *)v4 = off_1E22687B8;
  *((_QWORD *)v4 + 9) = 0;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = off_1E2256B38;
  *((_WORD *)v4 + 48) = 2;
  *((_QWORD *)v4 + 19) = 0x43846A3EDDF8CD80;
  *((_QWORD *)v4 + 20) = off_1E2256B38;
  *((_WORD *)v4 + 84) = 2;
  *((_QWORD *)v4 + 28) = off_1E2256B38;
  *((_WORD *)v4 + 116) = 2;
  v9 = (*(uint64_t (**)(icu::VTimeZone *))(*(_QWORD *)this + 96))(this);
  *((_QWORD *)v4 + 9) = v9;
  if (!v9)
  {
    *(_DWORD *)a2 = 7;
    (*(void (**)(icu::BasicTimeZone *))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  icu::UnicodeString::operator=((UChar **)v4 + 20, (UChar **)(v9 + 8));
  v15 = 0;
  v10 = (_QWORD *)ures_openDirect(0, (uint64_t)"zoneinfo64", (uint64_t)a2);
  StringByKey = ures_getStringByKey((uint64_t)v10, "TZVersion", (int *)&v15, (int *)a2);
  if (*(int *)a2 <= 0)
  {
    v12 = (uint64_t)StringByKey;
    v13 = v15;
    icu::UnicodeString::unBogus((uint64_t)v4 + 224);
    if (*((__int16 *)v4 + 116) < 0)
      v14 = *((unsigned int *)v4 + 59);
    else
      v14 = *((unsigned __int16 *)v4 + 116) >> 5;
    icu::UnicodeString::doReplace((uint64_t)v4 + 224, 0, v14, v12, 0, v13);
  }
  ures_close(v10);
  return v4;
}

icu::BasicTimeZone *icu::VTimeZone::createVTimeZone(icu::VTimeZone *this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t *v3;
  icu::BasicTimeZone *v4;
  icu::BasicTimeZone *v7;
  icu::VTimeZone *v8;
  _QWORD v9[2];

  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0)
    return 0;
  v9[0] = this;
  v9[1] = 0;
  v7 = (icu::BasicTimeZone *)icu::UMemory::operator new(v3, (icu::UMemory *)0x120, (unint64_t)a2);
  v4 = v7;
  if (!v7)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return v4;
  }
  v8 = (icu::VTimeZone *)icu::BasicTimeZone::BasicTimeZone(v7);
  *(_QWORD *)v4 = off_1E22687B8;
  *((_QWORD *)v4 + 9) = 0;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = off_1E2256B38;
  *((_WORD *)v4 + 48) = 2;
  *((_QWORD *)v4 + 19) = 0x43846A3EDDF8CD80;
  *((_QWORD *)v4 + 20) = off_1E2256B38;
  *((_WORD *)v4 + 84) = 2;
  *((_QWORD *)v4 + 28) = off_1E2256B38;
  *((_WORD *)v4 + 116) = 2;
  icu::VTimeZone::load(v8, (int *)v9, a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::BasicTimeZone *))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  return v4;
}

uint64_t *icu::VTimeZone::load(icu::VTimeZone *a1, int *a2, UErrorCode *a3)
{
  uint64_t *result;
  icu::UVector *v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int32_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t *v16;
  char v17;
  int v18;
  icu::UnicodeString *v19;
  icu::UnicodeString *v20;
  int32_t v21;
  _BOOL4 v22;
  unint64_t v23;
  icu::UnicodeString *v24;
  icu::UnicodeString *v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  int32_t v29;
  _BOOL4 v30;
  icu::UnicodeString *v31;
  icu::UnicodeString *v32;
  void *v33;
  icu::VTimeZone *v34;
  uint64_t v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  __int16 v38;
  UChar *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = (uint64_t *)*MEMORY[0x1E0C80C00];
  result = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, (unint64_t)a2);
  if (!result)
  {
    if (*(int *)a3 <= 0)
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  v7 = (icu::UVector *)result;
  icu::UVector::UVector(result, uprv_deleteUObject, uhash_compareUnicodeString, 100, a3);
  if (*(int *)a3 > 0)
    return (uint64_t *)(*(uint64_t (**)(icu::UVector *))(*(_QWORD *)v7 + 8))(v7);
  v34 = a1;
  v8 = 0;
  v9 = 0;
  v40 = 0u;
  v41 = 0u;
  v43 = 0;
  v42 = 0u;
  v39 = (UChar *)off_1E2256B38;
  LOWORD(v40) = 2;
  while (1)
  {
    do
      v10 = sub_18BDC1CA8(a2);
    while (v10 == 13);
    v12 = v10;
    if (v10 == 0xFFFF)
      break;
    if (v8)
    {
      v8 = 0;
      if (v10 != 9 && v10 != 32)
      {
        v17 = v40;
        if (v9)
        {
          v18 = (v40 & 0x8000u) == 0 ? (unsigned __int16)v40 >> 5 : DWORD1(v40);
          if (v18 >= 1)
          {
            v19 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)(unsigned __int16)v40, (icu::UMemory *)0x40, v11);
            v20 = v19;
            if (v19)
            {
              icu::UnicodeString::UnicodeString(v19, &v39);
            }
            else if (*(int *)a3 <= 0)
            {
              *a3 = U_MEMORY_ALLOCATION_ERROR;
            }
            icu::UVector::adoptElement(v7, v20, a3);
            v26 = *(unsigned int *)a3;
            if ((int)v26 > 0)
              goto LABEL_50;
            v17 = v40;
          }
        }
        v8 = 0;
        v28 = (v17 & 1) != 0 ? 2 : v17 & 0x1F;
        LOWORD(v40) = v28;
        if (v12 != 10)
        {
LABEL_38:
          v38 = v12;
          icu::UnicodeString::doAppend((uint64_t)&v39, (uint64_t)&v38, 0, 1);
          v8 = 0;
        }
      }
    }
    else
    {
      if (v10 != 10)
        goto LABEL_38;
      if (v9)
      {
        v36[1] = L"END:VTIMEZONE";
        v13 = u_strlen((const UChar *)L"END:VTIMEZONE");
        v14 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v13, (uint64_t)L"END:VTIMEZONE", 0, v13);
        v36[0] = L"END:VTIMEZONE";
        v16 = v36;
        v8 = 1;
        v9 = 1;
        if (v14)
          goto LABEL_43;
      }
      else
      {
        v35[1] = (uint64_t)L"BEGIN:VTIMEZONE";
        v21 = u_strlen((const UChar *)L"BEGIN:VTIMEZONE");
        v22 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v21, (uint64_t)L"BEGIN:VTIMEZONE", 0, v21);
        v35[0] = (uint64_t)L"BEGIN:VTIMEZONE";
        v8 = 1;
        if (v22)
        {
          v24 = (icu::UnicodeString *)icu::UMemory::operator new(v35, (icu::UMemory *)0x40, v23);
          v25 = v24;
          if (v24)
          {
            icu::UnicodeString::UnicodeString(v24, &v39);
          }
          else if (*(int *)a3 <= 0)
          {
            *a3 = U_MEMORY_ALLOCATION_ERROR;
          }
          icu::UVector::adoptElement(v7, v25, a3);
          v26 = *(unsigned int *)a3;
          if ((int)v26 > 0)
            goto LABEL_50;
          v8 = 0;
          if ((v40 & 1) != 0)
            v27 = 2;
          else
            v27 = v40 & 0x1F;
          LOWORD(v40) = v27;
          v9 = 1;
        }
      }
    }
  }
  if (!v9
    || (v37[1] = L"END:VTIMEZONE",
        v29 = u_strlen((const UChar *)L"END:VTIMEZONE"),
        v30 = icu::UnicodeString::doEqualsSubstring((uint64_t)&v39, 0, v29, (uint64_t)L"END:VTIMEZONE", 0, v29),
        v37[0] = L"END:VTIMEZONE",
        v16 = v37,
        !v30))
  {
    v26 = *(unsigned int *)a3;
    if ((int)v26 <= 0)
    {
      v26 = 27;
      *a3 = U_INVALID_STATE_ERROR;
    }
    goto LABEL_50;
  }
LABEL_43:
  v31 = (icu::UnicodeString *)icu::UMemory::operator new(v16, (icu::UMemory *)0x40, v15);
  v32 = v31;
  if (v31)
  {
    icu::UnicodeString::UnicodeString(v31, &v39);
  }
  else if (*(int *)a3 <= 0)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  icu::UVector::adoptElement(v7, v32, a3);
  v26 = *(unsigned int *)a3;
  if ((int)v26 >= 1)
  {
LABEL_50:
    icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)&v39);
    return (uint64_t *)(*(uint64_t (**)(icu::UVector *))(*(_QWORD *)v7 + 8))(v7);
  }
  *((_QWORD *)v34 + 10) = v7;
  icu::VTimeZone::parse(v34, a3);
  return (uint64_t *)icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v39);
}

uint64_t icu::VTimeZone::getTZURL(icu::VTimeZone *this, UChar **a2)
{
  int v2;

  if (*((__int16 *)this + 48) < 0)
    v2 = *((_DWORD *)this + 25);
  else
    v2 = *((unsigned __int16 *)this + 48) >> 5;
  if (v2 < 1)
    return 0;
  icu::UnicodeString::operator=(a2, (UChar **)this + 11);
  return 1;
}

icu::UnicodeString *icu::VTimeZone::setTZURL(UChar **this, UChar **a2)
{
  return icu::UnicodeString::operator=(this + 11, a2);
}

uint64_t icu::VTimeZone::getLastModified(icu::VTimeZone *this, double *a2)
{
  double v2;

  v2 = *((double *)this + 19);
  if (v2 == 1.83882169e17)
    return 0;
  *a2 = v2;
  return 1;
}

uint64_t icu::VTimeZone::setLastModified(uint64_t this, double a2)
{
  *(double *)(this + 152) = a2;
  return this;
}

icu::UVector *icu::VTimeZone::write(icu::VTimeZone *this, icu::UnicodeString *a2, UErrorCode *a3)
{
  __int16 v3;
  icu::UnicodeString *v5;

  if ((*((_WORD *)a2 + 4) & 1) != 0)
    v3 = 2;
  else
    v3 = *((_WORD *)a2 + 4) & 0x1F;
  *((_WORD *)a2 + 4) = v3;
  v5 = a2;
  return icu::VTimeZone::write((uint64_t)this, (uint64_t *)&v5, (int *)a3);
}

icu::UVector *icu::VTimeZone::write(uint64_t a1, uint64_t *a2, int *a3)
{
  icu::UVector *result;
  signed int i;
  uint64_t v7;
  int32_t v8;
  int32_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int32_t v19;
  int32_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  _QWORD v43[11];
  _OWORD v44[2];
  uint64_t v45;
  __int16 v46;
  void (**v47)(icu::UnicodeString *__hidden);
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  result = *(icu::UVector **)(a1 + 80);
  if (result)
  {
    if (*((int *)result + 2) >= 1)
    {
      for (i = 0; i < *((_DWORD *)result + 2); ++i)
      {
        v7 = icu::UVector::elementAt(result, i);
        v43[10] = "T";
        v8 = u_strlen((const UChar *)"T");
        if (icu::UnicodeString::doEqualsSubstring(v7, 0, v8, (uint64_t)"T", 0, v8))
        {
          v9 = u_strlen((const UChar *)"T");
          v10 = *(unsigned __int16 *)(v7 + 8);
          if ((v10 & 0x8000) != 0)
            v11 = *(_DWORD *)(v7 + 12);
          else
            v11 = v10 >> 5;
          if (v11 <= v9)
          {
            v43[9] = "T";
          }
          else
          {
            if ((v10 & 2) != 0)
              v12 = v7 + 10;
            else
              v12 = *(_QWORD *)(v7 + 24);
            v13 = *(unsigned __int16 *)(v12 + 2 * v9);
            v43[8] = "T";
            if (v13 == 58)
            {
              icu::UnicodeString::doAppend(*a2, (uint64_t)"T", 0, 0xFFFFFFFFLL);
              v43[7] = "T";
              v14 = *a2;
              LOWORD(v47) = 58;
              icu::UnicodeString::doAppend(v14, (uint64_t)&v47, 0, 1);
              v15 = *(unsigned __int16 *)(a1 + 96);
              v16 = (__int16)v15;
              v17 = v15 >> 5;
              if (v16 >= 0)
                v18 = v17;
              else
                v18 = *(unsigned int *)(a1 + 100);
              icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)(a1 + 88), 0, v18);
              icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
              v43[6] = L"\r\n";
              goto LABEL_38;
            }
          }
        }
        else
        {
          v43[5] = "T";
        }
        v43[4] = "L";
        v19 = u_strlen((const UChar *)"L");
        if (!icu::UnicodeString::doEqualsSubstring(v7, 0, v19, (uint64_t)"L", 0, v19))
          goto LABEL_34;
        v20 = u_strlen((const UChar *)"L");
        v21 = *(unsigned __int16 *)(v7 + 8);
        if ((v21 & 0x8000) != 0)
          v22 = *(_DWORD *)(v7 + 12);
        else
          v22 = v21 >> 5;
        if (v22 <= v20)
        {
          v43[3] = "L";
LABEL_34:
          v27 = *(unsigned __int16 *)(v7 + 8);
          v28 = (__int16)v27;
          v29 = v27 >> 5;
          if (v28 >= 0)
            v30 = v29;
          else
            v30 = *(unsigned int *)(v7 + 12);
          icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)v7, 0, v30);
          icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          goto LABEL_38;
        }
        if ((v21 & 2) != 0)
          v23 = v7 + 10;
        else
          v23 = *(_QWORD *)(v7 + 24);
        v24 = *(unsigned __int16 *)(v23 + 2 * v20);
        v43[2] = "L";
        if (v24 != 58)
          goto LABEL_34;
        v51 = 0;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        v47 = off_1E2256B38;
        LOWORD(v48) = 2;
        icu::UnicodeString::doAppend(*a2, (uint64_t)"L", 0, 0xFFFFFFFFLL);
        v43[1] = "L";
        v25 = *a2;
        LOWORD(v44[0]) = 58;
        icu::UnicodeString::doAppend(v25, (uint64_t)v44, 0, 1);
        sub_18BDC746C((uint64_t)&v47, *(double *)(a1 + 152));
        LOWORD(v44[0]) = 90;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)v44, 0, 1);
        if ((v48 & 0x8000u) == 0)
          v26 = (unsigned __int16)v48 >> 5;
        else
          v26 = DWORD1(v48);
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v47, 0, v26);
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v43[0] = L"\r\n";
        icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v47);
LABEL_38:
        result = *(icu::UVector **)(a1 + 80);
      }
    }
  }
  else
  {
    v48 = 0u;
    v51 = 0;
    v50 = 0u;
    v49 = 0u;
    v47 = off_1E2256B38;
    LOWORD(v48) = 2;
    v45 = 0;
    memset(v44, 0, sizeof(v44));
    icu::UVector::UVector((uint64_t)v44, 0, (uint64_t)uhash_compareUnicodeString, a3);
    v32 = *(unsigned __int16 *)(a1 + 168);
    if (*(__int16 *)(a1 + 168) < 0)
      v33 = *(_DWORD *)(a1 + 172);
    else
      v33 = v32 >> 5;
    if (v33 >= 1)
    {
      v34 = *(__int16 *)(a1 + 232) < 0 ? *(_DWORD *)(a1 + 236) : *(unsigned __int16 *)(a1 + 232) >> 5;
      if (v34 >= 1)
      {
        v35 = (__int16)v32;
        v36 = v32 >> 5;
        if (v35 >= 0)
          v37 = v36;
        else
          v37 = *(unsigned int *)(a1 + 172);
        icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)(a1 + 160), 0, v37);
        v46 = 91;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v46, 0, 1);
        v38 = *(unsigned __int16 *)(a1 + 232);
        v39 = (__int16)v38;
        v40 = v38 >> 5;
        if (v39 >= 0)
          v41 = v40;
        else
          v41 = *(unsigned int *)(a1 + 236);
        icu::UnicodeString::doAppend((uint64_t)&v47, (const icu::UnicodeString *)(a1 + 224), 0, v41);
        v46 = 93;
        icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&v46, 0, 1);
        icu::UVector::addElement((icu::UVector *)v44, &v47, (UErrorCode *)a3);
      }
    }
    icu::VTimeZone::writeZone((_QWORD *)a1, a2, *(UChar ***)(a1 + 72), (icu::UVector *)v44, a3);
    icu::UVector::~UVector((icu::UVector *)v44);
    return (icu::UVector *)icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v47);
  }
  return result;
}

void icu::VTimeZone::write(icu::VTimeZone *this, double a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  __int16 v4;
  icu::UnicodeString *v5;

  if ((*((_WORD *)a3 + 4) & 1) != 0)
    v4 = 2;
  else
    v4 = *((_WORD *)a3 + 4) & 0x1F;
  *((_WORD *)a3 + 4) = v4;
  v5 = a3;
  icu::VTimeZone::write((uint64_t)this, (uint64_t *)&v5, (int *)a4, a2);
}

void icu::VTimeZone::write(uint64_t a1, uint64_t *a2, int *a3, double a4)
{
  icu::UVector *v8;
  icu::InitialTimeZoneRule *v9;
  unint64_t v10;
  icu::TimeZoneRule *v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  icu::UVector *v28;
  icu::InitialTimeZoneRule *v29;
  __int16 v30;
  _OWORD v31[7];
  UChar *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  icu::UVector::UVector((uint64_t)v26, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, a3);
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v33 = 0u;
  v32 = (UChar *)off_1E2256B38;
  LOWORD(v33) = 2;
  icu::BasicTimeZone::getTimeZoneRulesAfter((icu::BasicTimeZone *)a1, a4, &v29, &v28, (UErrorCode *)a3);
  v8 = v28;
  v9 = v29;
  v10 = *a3;
  if ((int)v10 <= 0)
  {
    icu::UnicodeString::operator=(&v32, (UChar **)(a1 + 8));
    memset(v31, 0, sizeof(v31));
    icu::RuleBasedTimeZone::RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31, &v32, v9);
    if (v8)
    {
      while (*((_DWORD *)v8 + 2))
      {
        v11 = (icu::TimeZoneRule *)icu::UVector::orphanElementAt(v8, 0);
        icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v11, (UErrorCode *)a3);
        if (*a3 >= 1)
          goto LABEL_25;
      }
    }
    icu::RuleBasedTimeZone::complete((uint64_t)v31, (UErrorCode *)a3);
    if (*a3 > 0)
      goto LABEL_25;
    if (*(__int16 *)(a1 + 168) < 0)
      v13 = *(_DWORD *)(a1 + 172);
    else
      v13 = *(unsigned __int16 *)(a1 + 168) >> 5;
    if (v13 >= 1)
    {
      v14 = *(__int16 *)(a1 + 232) < 0
          ? (uint64_t *)*(unsigned int *)(a1 + 236)
          : (uint64_t *)(*(unsigned __int16 *)(a1 + 232) >> 5);
      if ((int)v14 >= 1)
      {
        v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v12);
        if (!v15)
        {
          *a3 = 7;
          goto LABEL_25;
        }
        v16 = v15;
        v17 = icu::UnicodeString::UnicodeString((uint64_t)v15, (uint64_t)"X");
        v18 = *(unsigned __int16 *)(a1 + 168);
        v19 = (__int16)v18;
        v20 = v18 >> 5;
        if (v19 >= 0)
          v21 = v20;
        else
          v21 = *(unsigned int *)(a1 + 172);
        icu::UnicodeString::doAppend(v17, (const icu::UnicodeString *)(a1 + 160), 0, v21);
        v30 = 91;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1);
        v22 = *(unsigned __int16 *)(a1 + 232);
        v23 = (__int16)v22;
        v24 = v22 >> 5;
        if (v23 >= 0)
          v25 = v24;
        else
          v25 = *(unsigned int *)(a1 + 236);
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 224), 0, v25);
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)"/", 0, 0xFFFFFFFFLL);
        sub_18BDC60A4((uint64_t)v16, a4);
        v30 = 93;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1);
        icu::UVector::adoptElement((icu::UVector *)v26, v16, (UErrorCode *)a3);
        if (*a3 > 0)
          goto LABEL_25;
      }
    }
    icu::VTimeZone::writeZone((_QWORD *)a1, a2, (UChar **)v31, (icu::UVector *)v26, a3);
LABEL_25:
    icu::RuleBasedTimeZone::~RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31);
    v9 = 0;
  }
  if (v8)
    (*(void (**)(icu::UVector *))(*(_QWORD *)v8 + 8))(v8);
  if (v9)
    (*(void (**)(icu::InitialTimeZoneRule *))(*(_QWORD *)v9 + 8))(v9);
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v32);
  icu::UVector::~UVector((icu::UVector *)v26);
}

void icu::VTimeZone::writeSimple(UChar **this, double a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  __int16 v4;
  icu::UnicodeString *v5;

  if ((*((_WORD *)a3 + 4) & 1) != 0)
    v4 = 2;
  else
    v4 = *((_WORD *)a3 + 4) & 0x1F;
  *((_WORD *)a3 + 4) = v4;
  v5 = a3;
  icu::VTimeZone::writeSimple(this, (uint64_t *)&v5, (int *)a4, a2);
}

void icu::VTimeZone::writeSimple(UChar **a1, uint64_t *a2, int *a3, double a4)
{
  icu::TimeZoneRule *v8;
  icu::InitialTimeZoneRule *v9;
  icu::TimeZoneRule *v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  icu::TimeZoneRule *v25;
  icu::TimeZoneRule *v26;
  icu::InitialTimeZoneRule *v27;
  _OWORD v28[2];
  uint64_t v29;
  __int16 v30;
  _OWORD v31[7];
  UChar *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return;
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  icu::UVector::UVector((uint64_t)v28, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, a3);
  v33 = 0u;
  v36 = 0;
  v35 = 0u;
  v34 = 0u;
  v32 = (UChar *)off_1E2256B38;
  LOWORD(v33) = 2;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  (*((void (**)(UChar **, icu::InitialTimeZoneRule **, icu::TimeZoneRule **, icu::TimeZoneRule **, int *, double))*a1
   + 19))(a1, &v27, &v26, &v25, a3, a4);
  v8 = v26;
  v9 = v27;
  v10 = v25;
  v11 = *a3;
  if ((int)v11 <= 0)
  {
    icu::UnicodeString::operator=(&v32, a1 + 1);
    memset(v31, 0, sizeof(v31));
    icu::RuleBasedTimeZone::RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31, &v32, v9);
    if (v8 && v10)
    {
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v8, (UErrorCode *)a3);
      icu::RuleBasedTimeZone::addTransitionRule((uint64_t *)v31, v10, (UErrorCode *)a3);
      v8 = 0;
      v10 = 0;
    }
    if (*a3 > 0)
      goto LABEL_28;
    if ((__int16)a1[21] < 0)
      v13 = *((_DWORD *)a1 + 43);
    else
      v13 = *((unsigned __int16 *)a1 + 84) >> 5;
    if (v13 >= 1)
    {
      v14 = (__int16)a1[29] < 0
          ? (uint64_t *)*((unsigned int *)a1 + 59)
          : (uint64_t *)(*((unsigned __int16 *)a1 + 116) >> 5);
      if ((int)v14 >= 1)
      {
        v15 = icu::UMemory::operator new(v14, (icu::UMemory *)0x40, v12);
        if (!v15)
        {
          if (*a3 <= 0)
            *a3 = 7;
          goto LABEL_28;
        }
        v16 = v15;
        icu::UnicodeString::UnicodeString((uint64_t)v15, (uint64_t)"X");
        if (*a3 > 0)
        {
          (*(void (**)(uint64_t *))(*v16 + 8))(v16);
LABEL_28:
          icu::RuleBasedTimeZone::~RuleBasedTimeZone((icu::RuleBasedTimeZone *)v31);
          v9 = 0;
          goto LABEL_29;
        }
        v17 = *((unsigned __int16 *)a1 + 84);
        v18 = (__int16)v17;
        v19 = v17 >> 5;
        if (v18 >= 0)
          v20 = v19;
        else
          v20 = *((unsigned int *)a1 + 43);
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 20), 0, v20);
        v30 = 91;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1);
        v21 = *((unsigned __int16 *)a1 + 116);
        v22 = (__int16)v21;
        v23 = v21 >> 5;
        if (v22 >= 0)
          v24 = v23;
        else
          v24 = *((unsigned int *)a1 + 59);
        icu::UnicodeString::doAppend((uint64_t)v16, (const icu::UnicodeString *)(a1 + 28), 0, v24);
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)"/", 0, 0xFFFFFFFFLL);
        sub_18BDC60A4((uint64_t)v16, a4);
        v30 = 93;
        icu::UnicodeString::doAppend((uint64_t)v16, (uint64_t)&v30, 0, 1);
        icu::UVector::adoptElement((icu::UVector *)v28, v16, (UErrorCode *)a3);
      }
    }
    icu::VTimeZone::writeZone(a1, a2, (UChar **)v31, (icu::UVector *)v28, a3);
    goto LABEL_28;
  }
LABEL_29:
  if (v10)
    (*(void (**)(icu::TimeZoneRule *))(*(_QWORD *)v10 + 8))(v10);
  if (v8)
    (*(void (**)(icu::TimeZoneRule *))(*(_QWORD *)v8 + 8))(v8);
  if (v9)
    (*(void (**)(icu::InitialTimeZoneRule *))(*(_QWORD *)v9 + 8))(v9);
  icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v32);
  icu::UVector::~UVector((icu::UVector *)v28);
}

icu::VTimeZone *icu::VTimeZone::clone@<X0>(icu::VTimeZone *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::VTimeZone *result;

  result = (icu::VTimeZone *)icu::UMemory::operator new(a3, (icu::UMemory *)0x120, a2);
  if (result)
    return icu::VTimeZone::VTimeZone(result, this);
  return result;
}

uint64_t icu::VTimeZone::getOffset(icu::VTimeZone *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, UErrorCode *a8)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, UErrorCode *))(**((_QWORD **)this + 9) + 32))(*((_QWORD *)this + 9), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t icu::VTimeZone::getOffset(icu::VTimeZone *this, unsigned __int8 a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9));
}

uint64_t icu::VTimeZone::getOffset(icu::VTimeZone *this, double a2, uint64_t a3, int *a4, int *a5, UErrorCode *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, int *, int *, UErrorCode *, double))(**((_QWORD **)this + 9) + 48))(*((_QWORD *)this + 9), a3, a4, a5, a6, a2);
}

uint64_t icu::VTimeZone::getOffsetFromLocal(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 160))(*(_QWORD *)(a1 + 72));
}

uint64_t icu::VTimeZone::setRawOffset(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 56))(*((_QWORD *)this + 9));
}

uint64_t icu::VTimeZone::getRawOffset(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 64))(*((_QWORD *)this + 9));
}

uint64_t icu::VTimeZone::useDaylightTime(icu::VTimeZone *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 9) + 72))(*((_QWORD *)this + 9));
}

uint64_t icu::VTimeZone::inDaylightTime(icu::VTimeZone *this, double a2, UErrorCode *a3)
{
  return (*(uint64_t (**)(_QWORD, UErrorCode *, double))(**((_QWORD **)this + 9) + 80))(*((_QWORD *)this + 9), a3, a2);
}

uint64_t icu::VTimeZone::hasSameRules(icu::VTimeZone *this, const icu::TimeZone *a2)
{
  return (*(uint64_t (**)(_QWORD, const icu::TimeZone *))(**((_QWORD **)this + 9) + 88))(*((_QWORD *)this + 9), a2);
}

uint64_t icu::VTimeZone::getNextTransition(icu::VTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, icu::TimeZoneTransition *, double))(**((_QWORD **)this + 9) + 112))(*((_QWORD *)this + 9), a3, a4, a2);
}

uint64_t icu::VTimeZone::getPreviousTransition(icu::VTimeZone *this, double a2, uint64_t a3, icu::TimeZoneTransition *a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, icu::TimeZoneTransition *, double))(**((_QWORD **)this + 9) + 120))(*((_QWORD *)this + 9), a3, a4, a2);
}

uint64_t icu::VTimeZone::countTransitionRules(icu::VTimeZone *this, UErrorCode *a2)
{
  return (*(uint64_t (**)(_QWORD, UErrorCode *))(**((_QWORD **)this + 9) + 136))(*((_QWORD *)this + 9), a2);
}

uint64_t icu::VTimeZone::getTimeZoneRules(icu::VTimeZone *this, const icu::InitialTimeZoneRule **a2, const icu::TimeZoneRule **a3, int *a4, UErrorCode *a5)
{
  return (*(uint64_t (**)(_QWORD, const icu::InitialTimeZoneRule **, const icu::TimeZoneRule **, int *, UErrorCode *))(**((_QWORD **)this + 9) + 144))(*((_QWORD *)this + 9), a2, a3, a4, a5);
}

_QWORD *icu::VTimeZone::parse(_QWORD *this, UErrorCode *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int *v12;
  int v13;
  signed int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int32_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int32_t v29;
  int32_t v30;
  int32_t v31;
  int32_t v32;
  int32_t v33;
  int32_t v34;
  unint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  int v44;
  int32_t v45;
  int32_t v46;
  int32_t v47;
  int32_t v48;
  int32_t v49;
  int32_t v50;
  void (***v51)(icu::UnicodeString *__hidden);
  UChar **v52;
  int v53;
  int v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t *v64;
  icu::UnicodeString *v65;
  icu::UnicodeString *v66;
  unint64_t v67;
  icu::UnicodeString *v68;
  icu::UnicodeString *v69;
  __n128 v70;
  void *v71;
  _BOOL4 v72;
  _BOOL4 v73;
  _BOOL4 v74;
  BOOL v75;
  unsigned int v76;
  int v77;
  void *v78;
  unint64_t v79;
  uint64_t *v80;
  icu::InitialTimeZoneRule *v81;
  icu::InitialTimeZoneRule *v82;
  unint64_t v83;
  uint64_t *v84;
  icu::RuleBasedTimeZone *v85;
  uint64_t *v86;
  signed int v87;
  int v88;
  unsigned int v89;
  const void *v90;
  icu::AnnualTimeZoneRule *v91;
  icu::TimeZoneRule *v92;
  icu::TimeZoneRule *v93;
  uint64_t RawOffset;
  uint64_t DSTSavings;
  unint64_t v96;
  double v97;
  signed int v98;
  double v99;
  signed int v100;
  icu::TimeZoneRule *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  UChar **Name;
  int v107;
  int v108;
  unint64_t v109;
  uint64_t *v110;
  UChar **v111;
  int v112;
  int v113;
  const icu::DateTimeRule *Rule;
  int StartYear;
  void *v116;
  void *v117;
  int v118;
  void *v119;
  BOOL v120;
  unsigned int v121;
  UChar **v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126[2];
  void *v127;
  double v128;
  double v129;
  const char *v130;
  const __int16 *v131;
  const __int16 *v132;
  const char *v133;
  int v134[8];
  uint64_t v135;
  uint64_t (*v136[5])(void);
  void *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  UChar *v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  void (**v147)(icu::UnicodeString *__hidden);
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  void (**v152)(icu::UnicodeString *__hidden);
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  UChar *v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  void (**v162)(icu::UnicodeString *__hidden);
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  void (**v167)(icu::UnicodeString *__hidden);
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  UChar *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return this;
  v3 = (uint64_t)this;
  v4 = this[10];
  if (!v4 || !*(_DWORD *)(v4 + 8))
  {
    *a2 = U_INVALID_STATE_ERROR;
    return this;
  }
  v173 = 0u;
  v176 = 0;
  v175 = 0u;
  v174 = 0u;
  v171 = 0;
  v172 = (UChar *)off_1E2256B38;
  LOWORD(v173) = 2;
  v168 = 0u;
  v170 = 0u;
  v169 = 0u;
  v167 = off_1E2256B38;
  LOWORD(v168) = 2;
  v163 = 0u;
  v166 = 0;
  v165 = 0u;
  v164 = 0u;
  v162 = off_1E2256B38;
  LOWORD(v163) = 2;
  v158 = 0u;
  v161 = 0;
  v160 = 0u;
  v159 = 0u;
  v157 = (UChar *)off_1E2256B38;
  LOWORD(v158) = 2;
  v153 = 0u;
  v156 = 0;
  v155 = 0u;
  v154 = 0u;
  v152 = off_1E2256B38;
  LOWORD(v153) = 2;
  v148 = 0u;
  v151 = 0;
  v150 = 0u;
  v149 = 0u;
  v146 = 0;
  v147 = off_1E2256B38;
  LOWORD(v148) = 2;
  v144 = 0u;
  v145 = 0u;
  v143 = 0u;
  v142 = (UChar *)off_1E2256B38;
  LOWORD(v143) = 2;
  memset(v136, 0, sizeof(v136));
  icu::UVector::UVector((uint64_t)v136, (uint64_t)uprv_deleteUObject, 0, (int *)a2);
  v135 = 0;
  memset(v134, 0, sizeof(v134));
  icu::UVector::UVector((uint64_t)v134, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, (int *)a2);
  if (*(int *)a2 > 0)
    goto LABEL_5;
  v12 = *(int **)(v3 + 80);
  if (v12[2] < 1)
  {
    v123 = 0;
    goto LABEL_194;
  }
  v13 = 0;
  v14 = 0;
  v120 = 0;
  v123 = 0;
  v121 = 0;
  v15 = 1.83882169e17;
  do
  {
    v16 = icu::UVector::elementAt((icu::UVector *)v12, v14);
    v17 = v16;
    v18 = *(unsigned __int16 *)(v16 + 8);
    if ((v18 & 0x8000) != 0)
      v19 = *(_DWORD *)(v16 + 12);
    else
      v19 = v18 >> 5;
    v20 = icu::UnicodeString::doIndexOf(v16, 0x3Au, 0, v19);
    if ((v20 & 0x80000000) != 0)
      goto LABEL_113;
    v21 = v20;
    icu::UnicodeString::unBogus((uint64_t)&v147);
    if ((v148 & 0x8000u) == 0)
      v22 = (unsigned __int16)v148 >> 5;
    else
      v22 = DWORD1(v148);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v147, 0, v22, (const icu::UnicodeString *)v17, 0, v21);
    v23 = v21 + 1;
    icu::UnicodeString::unBogus((uint64_t)&v142);
    v24 = *(unsigned __int16 *)(v17 + 8);
    if (*(__int16 *)(v17 + 8) < 0)
    {
      v25 = *(_DWORD *)(v17 + 12);
      if (v25 <= (int)v21)
        goto LABEL_21;
    }
    else if (v21 >= v24 >> 5)
    {
      v25 = v24 >> 5;
LABEL_21:
      v23 = v25;
    }
    v26 = (__int16)v24;
    if ((v143 & 0x8000u) == 0)
      v27 = (unsigned __int16)v143 >> 5;
    else
      v27 = DWORD1(v143);
    v28 = v24 >> 5;
    if (v26 < 0)
      v28 = *(_DWORD *)(v17 + 12);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v142, 0, v27, (const icu::UnicodeString *)v17, v23, v28 - v23);
    if (v13 != 2)
    {
      if (v13 != 1)
      {
        if ((v148 & 0x8000u) == 0)
          v29 = (unsigned __int16)v148 >> 5;
        else
          v29 = DWORD1(v148);
        if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v29, (uint64_t)L"BEGIN", 0, -1))
        {
          v13 = 0;
        }
        else
        {
          if ((v143 & 0x8000u) == 0)
            v50 = (unsigned __int16)v143 >> 5;
          else
            v50 = DWORD1(v143);
          v13 = icu::UnicodeString::doCompare((uint64_t)&v142, 0, v50, (uint64_t)L"VTIMEZONE", 0, -1) == 0;
        }
        goto LABEL_113;
      }
      if ((v148 & 0x8000u) == 0)
        v45 = (unsigned __int16)v148 >> 5;
      else
        v45 = DWORD1(v148);
      if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v45, (uint64_t)L"TZID", 0, -1))
      {
        if ((v148 & 0x8000u) == 0)
          v46 = (unsigned __int16)v148 >> 5;
        else
          v46 = DWORD1(v148);
        if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v46, (uint64_t)"T", 0, -1))
        {
          if ((v148 & 0x8000u) == 0)
            v47 = (unsigned __int16)v148 >> 5;
          else
            v47 = DWORD1(v148);
          if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v47, (uint64_t)"L", 0, -1))
          {
            if ((v148 & 0x8000u) == 0)
              v48 = (unsigned __int16)v148 >> 5;
            else
              v48 = DWORD1(v148);
            if (!icu::UnicodeString::doCompare((uint64_t)&v147, 0, v48, (uint64_t)L"BEGIN", 0, -1))
            {
              v133 = "D";
              v53 = sub_18BBB1AB4((uint64_t)&v142, (uint64_t *)&v133, -1);
              v120 = v53 == 0;
              v132 = L"STANDARD";
              if (!sub_18BBB1AB4((uint64_t)&v142, (uint64_t *)&v132, -1) || !v53)
              {
                v54 = (unsigned __int16)v173 >> 5;
                if ((v173 & 0x8000u) != 0)
                  v54 = DWORD1(v173);
                if (v54)
                {
                  if (v134[2])
                    icu::UVector::removeAllElements((uint64_t)v134);
                  v121 = 0;
                  v13 = 2;
                  if ((v168 & 1) != 0)
                    v55 = 2;
                  else
                    v55 = v168 & 0x1F;
                  LOWORD(v168) = v55;
                  v56 = v163 & 0x1F;
                  if ((v163 & 1) != 0)
                    v56 = 2;
                  LOWORD(v163) = v56;
                  v57 = v158 & 0x1F;
                  if ((v158 & 1) != 0)
                    v57 = 2;
                  LOWORD(v158) = v57;
                  goto LABEL_113;
                }
              }
              goto LABEL_5;
            }
            if ((v148 & 0x8000u) == 0)
              v49 = (unsigned __int16)v148 >> 5;
            else
              v49 = DWORD1(v148);
            icu::UnicodeString::doCompare((uint64_t)&v147, 0, v49, (uint64_t)"E", 0, -1);
          }
          else
          {
            *(double *)(v3 + 152) = sub_18BDC4814((uint64_t)&v142, 0, (int *)a2);
            if (*(int *)a2 >= 1)
              goto LABEL_5;
          }
LABEL_106:
          v13 = 1;
          goto LABEL_113;
        }
        v52 = (UChar **)(v3 + 88);
      }
      else
      {
        v52 = &v172;
      }
      icu::UnicodeString::operator=(v52, &v142);
      goto LABEL_106;
    }
    if ((v148 & 0x8000u) == 0)
      v30 = (unsigned __int16)v148 >> 5;
    else
      v30 = DWORD1(v148);
    if (!icu::UnicodeString::doCompare((uint64_t)&v147, 0, v30, (uint64_t)"D", 0, -1))
    {
      v51 = &v152;
LABEL_111:
      icu::UnicodeString::operator=((UChar **)v51, &v142);
      goto LABEL_112;
    }
    if ((v148 & 0x8000u) == 0)
      v31 = (unsigned __int16)v148 >> 5;
    else
      v31 = DWORD1(v148);
    if (!icu::UnicodeString::doCompare((uint64_t)&v147, 0, v31, (uint64_t)"T", 0, -1))
    {
      v51 = (void (***)(icu::UnicodeString *__hidden))&v157;
      goto LABEL_111;
    }
    if ((v148 & 0x8000u) == 0)
      v32 = (unsigned __int16)v148 >> 5;
    else
      v32 = DWORD1(v148);
    if (!icu::UnicodeString::doCompare((uint64_t)&v147, 0, v32, (uint64_t)L"TZOFFSETFROM", 0, -1))
    {
      v51 = &v167;
      goto LABEL_111;
    }
    if ((v148 & 0x8000u) == 0)
      v33 = (unsigned __int16)v148 >> 5;
    else
      v33 = DWORD1(v148);
    if (!icu::UnicodeString::doCompare((uint64_t)&v147, 0, v33, (uint64_t)"T", 0, -1))
    {
      v51 = &v162;
      goto LABEL_111;
    }
    if ((v148 & 0x8000u) == 0)
      v34 = (unsigned __int16)v148 >> 5;
    else
      v34 = DWORD1(v148);
    if (icu::UnicodeString::doCompare((uint64_t)&v147, 0, v34, (uint64_t)L"RDATE", 0, -1))
    {
      v131 = L"RRULE";
      if (sub_18BBB1AB4((uint64_t)&v147, (uint64_t *)&v131, -1))
      {
        v130 = "E";
        if (sub_18BBB1AB4((uint64_t)&v147, (uint64_t *)&v130, -1))
          goto LABEL_112;
        v36 = (unsigned __int16)v153 >> 5;
        if ((v153 & 0x8000u) != 0)
          v36 = DWORD1(v153);
        if (v36)
        {
          v37 = (unsigned __int16)v168 >> 5;
          if ((v168 & 0x8000u) != 0)
            v37 = DWORD1(v168);
          if (v37)
          {
            v38 = (unsigned __int16)v163 >> 5;
            if ((v163 & 0x8000u) != 0)
              v38 = DWORD1(v163);
            if (v38)
            {
              v39 = (unsigned __int16)v158 >> 5;
              if ((v158 & 0x8000u) != 0)
                v39 = DWORD1(v158);
              if (!v39)
                sub_18BDC4A8C(&v172, v120, &v157);
              *(double *)&v137 = 0.0;
              v40 = sub_18BDC4BAC((uint64_t)&v167, (int *)a2);
              v41 = sub_18BDC4BAC((uint64_t)&v162, (int *)a2);
              if (*(int *)a2 < 1)
              {
                v42 = v41;
                if (v120)
                {
                  v43 = (int)v41 <= (int)v40 ? (v41 - 3600000) : v40;
                  v44 = (int)v41 <= (int)v40 ? 3600000 : v41 - v40;
                }
                else
                {
                  v44 = 0;
                  v43 = v41;
                }
                v70.n128_f64[0] = sub_18BDC4814((uint64_t)&v152, v40, (int *)a2);
                if (*(int *)a2 <= 0
                  && ((v129 = 1.83882169e17, !v121)
                    ? (v71 = sub_18BDC5290(&v157, v43, v44, v134, v40, (int *)a2, v70.n128_f64[0]))
                    : (v71 = sub_18BDC4CC4(&v157, v43, v44, (icu::UVector *)v134, v40, (int *)a2, v70.n128_f64[0])),
                      sub_18BBB709C((uint64_t)&v137, (uint64_t)v71, (int *)a2),
                      *(int *)a2 <= 0))
                {
                  if ((*(unsigned int (**)(void *, uint64_t, _QWORD, double *))(*(_QWORD *)v137 + 56))(v137, v40, 0, &v129)&& v129 < v15)
                  {
                    v73 = v44 < 1;
                    v74 = (_DWORD)v40 - v42 == 3600000;
                    v75 = !v73 || !v74;
                    if (v73 && v74)
                      v76 = v40 - 3600000;
                    else
                      v76 = v40;
                    if (v75)
                      v77 = 0;
                    else
                      v77 = 3600000;
                    v123 = __PAIR64__(v76, v77);
                    v15 = v129;
                  }
                  v78 = v137;
                  *(double *)&v137 = 0.0;
                  icu::UVector::adoptElement((icu::UVector *)v136, v78, a2);
                  v72 = *a2 > U_ZERO_ERROR;
                  v13 = *(int *)a2 <= 0 ? 1 : 2;
                }
                else
                {
                  v13 = 2;
                  v72 = 1;
                }
                if (*(double *)&v137 != 0.0)
                  (*(void (**)(void *, __n128))(*(_QWORD *)v137 + 8))(v137, v70);
                if (!v72)
                  goto LABEL_113;
              }
            }
          }
        }
      }
      else
      {
        v67 = v121;
        if (v121 || (v67 = v134[2], !v134[2]))
        {
          v68 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v67, (icu::UMemory *)0x40, v35);
          v69 = v68;
          if (v68)
          {
            icu::UnicodeString::UnicodeString(v68, &v142);
          }
          else if (*(int *)a2 <= 0)
          {
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          }
          icu::UVector::adoptElement((icu::UVector *)v134, v69, a2);
          if (*(int *)a2 < 1)
          {
            v13 = 2;
            v121 = 1;
            goto LABEL_113;
          }
        }
      }
      goto LABEL_5;
    }
    if (v121)
      goto LABEL_5;
    v58 = 0;
    v59 = 1;
    while (v59)
    {
      if (v58 < 0)
      {
        v61 = 0;
        if ((v143 & 0x8000) != 0)
          v60 = DWORD1(v143);
        else
          v60 = (unsigned __int16)v143 >> 5;
      }
      else if ((v143 & 0x8000) != 0)
      {
        v60 = DWORD1(v143);
        if (SDWORD1(v143) >= v58)
          v61 = v58;
        else
          v61 = DWORD1(v143);
      }
      else
      {
        v60 = (unsigned __int16)v143 >> 5;
        if (v60 >= v58)
          v61 = v58;
        else
          v61 = (unsigned __int16)v143 >> 5;
      }
      v62 = icu::UnicodeString::doIndexOf((uint64_t)&v142, 0x2Cu, v61, v60 - v61);
      v65 = (icu::UnicodeString *)icu::UMemory::operator new(v64, (icu::UMemory *)0x40, v63);
      v66 = v65;
      if (v62 == -1)
      {
        if (v65)
        {
          icu::UnicodeString::UnicodeString(v65, (const icu::UnicodeString *)&v142, v58);
          if (*(int *)a2 > 0)
          {
            (*(void (**)(icu::UnicodeString *))(*(_QWORD *)v66 + 8))(v66);
            goto LABEL_155;
          }
        }
        else
        {
          if (*(int *)a2 <= 0)
          {
            v66 = 0;
            v59 = 0;
            *a2 = U_MEMORY_ALLOCATION_ERROR;
            goto LABEL_157;
          }
LABEL_155:
          v66 = 0;
        }
        v59 = 0;
        goto LABEL_157;
      }
      if (!v65)
      {
        if (*(int *)a2 <= 0)
        {
          v66 = 0;
          *a2 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_153;
        }
        goto LABEL_152;
      }
      icu::UnicodeString::UnicodeString(v65, (const icu::UnicodeString *)&v142, v58, (v62 - v58));
      if (*(int *)a2 > 0)
      {
        (*(void (**)(icu::UnicodeString *))(*(_QWORD *)v66 + 8))(v66);
LABEL_152:
        v66 = 0;
      }
LABEL_153:
      v59 = 1;
LABEL_157:
      icu::UVector::adoptElement((icu::UVector *)v134, v66, a2);
      v58 = v62 + 1;
      if (*(int *)a2 >= 1)
        goto LABEL_5;
    }
    v121 = 0;
LABEL_112:
    v13 = 2;
LABEL_113:
    ++v14;
    v12 = *(int **)(v3 + 80);
  }
  while (v14 < v12[2]);
LABEL_194:
  if (!LODWORD(v136[1]))
    goto LABEL_5;
  sub_18BDC4A8C(&v172, 0, &v157);
  v81 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(v80, (icu::UMemory *)0x50, v79);
  if (!v81)
  {
    if (*(int *)a2 <= 0)
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  v82 = v81;
  icu::InitialTimeZoneRule::InitialTimeZoneRule(v81, &v157, SHIDWORD(v123), v123);
  v84 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v84 > 0)
    goto LABEL_197;
  v85 = (icu::RuleBasedTimeZone *)icu::UMemory::operator new(v84, (icu::UMemory *)0x70, v83);
  if (!v85)
  {
    if (*(int *)a2 <= 0)
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_197;
  }
  v86 = (uint64_t *)v85;
  icu::RuleBasedTimeZone::RuleBasedTimeZone(v85, &v172, v82);
  if (*(int *)a2 > 0)
    goto LABEL_221;
  if (SLODWORD(v136[1]) < 1)
    goto LABEL_216;
  v87 = 0;
  v88 = 0;
  v89 = -1;
  do
  {
    v90 = (const void *)icu::UVector::elementAt((icu::UVector *)v136, v87);
    if (v90)
    {
      if (v91)
      {
        if (icu::AnnualTimeZoneRule::getEndYear(v91) == 0x7FFFFFFF)
        {
          v89 = v87;
          ++v88;
        }
      }
    }
    ++v87;
  }
  while (v87 < SLODWORD(v136[1]));
  if (v88 >= 3)
  {
    v82 = 0;
    *a2 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_221;
  }
  if (v88 != 1)
    goto LABEL_216;
  if (LODWORD(v136[1]) == 1)
  {
    icu::UVector::removeAllElements((uint64_t)v136);
    goto LABEL_216;
  }
  v93 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)v136, v89);
  RawOffset = icu::TimeZoneRule::getRawOffset(v93);
  DSTSavings = icu::TimeZoneRule::getDSTSavings(v93);
  v129 = 0.0;
  v122 = (UChar **)v93;
  (*(void (**)(icu::TimeZoneRule *, _QWORD, _QWORD, double *))(*(_QWORD *)v93 + 56))(v93, HIDWORD(v123), v123, &v129);
  v97 = v129;
  v128 = v129;
  v98 = (signed int)v136[1];
  v99 = v129;
  if (SLODWORD(v136[1]) >= 1)
  {
    v100 = 0;
    do
    {
      if (v89 != v100)
      {
        v101 = (icu::TimeZoneRule *)icu::UVector::elementAt((icu::UVector *)v136, v100);
        *(double *)&v137 = 0.0;
        (*(void (**)(icu::TimeZoneRule *, uint64_t, uint64_t, void **))(*(_QWORD *)v101 + 64))(v101, RawOffset, DSTSavings, &v137);
        v102 = v137;
        if (*(double *)&v137 > v128)
        {
          v103 = icu::TimeZoneRule::getRawOffset(v101);
          v104 = icu::TimeZoneRule::getDSTSavings(v101);
          (*((void (**)(UChar **, uint64_t, uint64_t, _QWORD, double *, double))*v122 + 9))(v122, v103, v104, 0, &v128, *(double *)&v102);
        }
        v98 = (signed int)v136[1];
      }
      ++v100;
    }
    while (v100 < v98);
    v99 = v128;
    v97 = v129;
  }
  v127 = 0;
  v141 = 0;
  v139 = 0u;
  v140 = 0u;
  v138 = 0u;
  *(double *)&v137 = COERCE_DOUBLE(off_1E2256B38);
  LOWORD(v138) = 2;
  if (v99 == v97)
  {
    v105 = icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x160, v96);
    if (v105)
    {
      Name = icu::TimeZoneRule::getName(v122, (UChar **)&v137);
      v107 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v122);
      v108 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v122);
      icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v105, Name, v107, v108, &v129, 1, 2);
    }
  }
  else
  {
    v125 = 0;
    *(_QWORD *)v126 = 0;
    v124 = 0;
    sub_18BCE8698(&v126[1], v126, (_DWORD *)&v125 + 1, (int *)&v125, (int *)&v124 + 1, &v124, v99);
    v105 = icu::UMemory::operator new(v110, (icu::UMemory *)0x60, v109);
    if (v105)
    {
      v111 = icu::TimeZoneRule::getName(v122, (UChar **)&v137);
      v112 = icu::TimeZoneRule::getRawOffset((icu::TimeZoneRule *)v122);
      v113 = icu::TimeZoneRule::getDSTSavings((icu::TimeZoneRule *)v122);
      Rule = (const icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule((icu::AnnualTimeZoneRule *)v122);
      StartYear = icu::AnnualTimeZoneRule::getStartYear((icu::AnnualTimeZoneRule *)v122);
      icu::AnnualTimeZoneRule::AnnualTimeZoneRule((icu::AnnualTimeZoneRule *)v105, (const icu::UnicodeString *)v111, v112, v113, Rule, StartYear, v126[1]);
    }
  }
  sub_18BBB709C((uint64_t)&v127, (uint64_t)v105, (int *)a2);
  v116 = (void *)*(unsigned int *)a2;
  if ((int)v116 > 0)
  {
    icu::UnicodeString::~UnicodeString(v116, (icu::UnicodeString *)&v137);
    if (v127)
      (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
LABEL_220:
    v82 = 0;
LABEL_221:
    (*(void (**)(uint64_t *))(*v86 + 8))(v86);
    if (!v82)
      goto LABEL_5;
LABEL_197:
    (*(void (**)(icu::InitialTimeZoneRule *))(*(_QWORD *)v82 + 8))(v82);
    goto LABEL_5;
  }
  icu::UVector::removeElementAt(v136, v89);
  v117 = v127;
  v127 = 0;
  icu::UVector::adoptElement((icu::UVector *)v136, v117, a2);
  v118 = *a2;
  icu::UnicodeString::~UnicodeString(v119, (icu::UnicodeString *)&v137);
  if (v127)
    (*(void (**)(void *))(*(_QWORD *)v127 + 8))(v127);
  if (v118 > 0)
    goto LABEL_220;
LABEL_216:
  while (LODWORD(v136[1]))
  {
    v92 = (icu::TimeZoneRule *)icu::UVector::orphanElementAt((icu::UVector *)v136, 0);
    icu::RuleBasedTimeZone::addTransitionRule(v86, v92, a2);
    if (*(int *)a2 >= 1)
      goto LABEL_220;
  }
  icu::RuleBasedTimeZone::complete((uint64_t)v86, a2);
  if (*(int *)a2 > 0)
    goto LABEL_220;
  *(_QWORD *)(v3 + 72) = v86;
  icu::UnicodeString::operator=((UChar **)(v3 + 8), &v172);
LABEL_5:
  icu::UVector::~UVector((icu::UVector *)v134);
  icu::UVector::~UVector((icu::UVector *)v136);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v142);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v147);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v152);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v157);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v162);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v167);
  return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v172);
}

double sub_18BDC4814(uint64_t a1, int a2, int *a3)
{
  double v3;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  double v23;
  double v24;

  v3 = 0.0;
  if (*a3 <= 0)
  {
    v7 = *(unsigned __int16 *)(a1 + 8);
    if (*(__int16 *)(a1 + 8) < 0)
      v8 = *(_DWORD *)(a1 + 12);
    else
      v8 = v7 >> 5;
    if (v8 - 17 < 0xFFFFFFFE)
      goto LABEL_15;
    v9 = a1 + 10;
    if ((v7 & 2) == 0)
      v9 = *(_QWORD *)(a1 + 24);
    if (*(_WORD *)(v9 + 16) != 84)
      goto LABEL_15;
    if (v8 == 16)
    {
      v10 = (__int16)v7;
      v11 = v7 >> 5;
      if (v10 < 0)
        v11 = *(_DWORD *)(a1 + 12);
      if (v11 < 0x10 || *(_WORD *)(v9 + 30) != 90)
        goto LABEL_15;
    }
    v12 = sub_18BDC83E0(a1, 0, 4, a3);
    v13 = sub_18BDC83E0(a1, 4u, 2, a3);
    v14 = sub_18BDC83E0(a1, 6u, 2, a3);
    v15 = sub_18BDC83E0(a1, 9u, 2, a3);
    v16 = sub_18BDC83E0(a1, 0xBu, 2, a3);
    v17 = sub_18BDC83E0(a1, 0xDu, 2, a3);
    if (*a3 > 0
      || ((v12 & 3) == 0
        ? ((HIDWORD(v21) = -1030792151 * v12 + 85899344,
            LODWORD(v21) = HIDWORD(v21),
            v20 = v21 >> 2,
            LODWORD(v21) = HIDWORD(v21),
            (v21 >> 4) >= 0xA3D70B)
         ? (v22 = 0)
         : (v22 = 12),
           v20 <= 0x28F5C28 ? (v19 = v22) : (v19 = 12))
        : (v19 = 0),
          v12 < 0
       || v13 < 1
       || v13 > 12
       || v14 < 1
       || v14 > byte_18BE26D60[v19 + (unint64_t)(v13 - 1)]
       || v15 < 0
       || v15 > 23
       || v16 < 0
       || v16 > 59
       || v17 < 0
       || v17 >= 60))
    {
LABEL_15:
      *a3 = 3;
    }
    else
    {
      v23 = sub_18BCE8360(v12, v13 - 1, v14) * 86400000.0 + (double)(3600000 * v15 + 60000 * v16 + 1000 * v17);
      v24 = (double)a2;
      if (v8 == 16)
        v24 = 0.0;
      return v23 - v24;
    }
  }
  return v3;
}

void *sub_18BDC4A8C(UChar **a1, int a2, UChar **a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v8;
  void *v9;
  const __int16 *v10;
  const __int16 *v11;
  _BYTE v12[8];
  unsigned __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::operator=(a3, a1);
  if (a2)
  {
    v11 = L"(DST)";
    icu::UnicodeString::UnicodeString(v12, 1, &v11);
    if ((v13 & 0x8000u) == 0)
      v5 = v13 >> 5;
    else
      v5 = v14;
    icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v12, 0, v5);
    return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  }
  else
  {
    v10 = L"(STD)";
    icu::UnicodeString::UnicodeString(v12, 1, &v10);
    if ((v13 & 0x8000u) == 0)
      v8 = v13 >> 5;
    else
      v8 = v14;
    icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v12, 0, v8);
    return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  }
}

uint64_t sub_18BDC4BAC(uint64_t a1, int *a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if (*a2 > 0)
    return 0;
  v5 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
    v6 = *(_DWORD *)(a1 + 12);
  else
    v6 = v5 >> 5;
  if ((v6 & 0xFFFFFFFD) != 5)
    goto LABEL_18;
  if ((v5 & 2) != 0)
    v7 = (unsigned __int16 *)(a1 + 10);
  else
    v7 = *(unsigned __int16 **)(a1 + 24);
  v8 = *v7;
  if (v8 == 43)
  {
    v9 = 1000;
  }
  else
  {
    if (v8 != 45)
    {
LABEL_18:
      result = 0;
      *a2 = 3;
      return result;
    }
    v9 = -1000;
  }
  v10 = sub_18BDC83E0(a1, 1u, 2, a2);
  v11 = sub_18BDC83E0(a1, 3u, 2, a2);
  if (v6 == 7)
    v12 = sub_18BDC83E0(a1, 5u, 2, a2);
  else
    v12 = 0;
  if (*a2 >= 1)
    goto LABEL_18;
  return (v9 * (v12 + 60 * (v11 + 60 * v10)));
}

icu::AnnualTimeZoneRule *sub_18BDC4CC4(UChar **a1, int a2, int a3, icu::UVector *this, int a5, int *a6, double a7)
{
  icu::AnnualTimeZoneRule *v7;
  UChar **v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int i;
  uint64_t v23;
  int v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  double v29;
  unsigned int v30;
  UChar **v31;
  int v32;
  uint64_t v33;
  int v35;
  int *v36;
  int v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  uint64_t *v44;
  uint64_t *v45;
  icu::DateTimeRule *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  icu::AnnualTimeZoneRule *v51;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60[2];
  unsigned int v61;
  int v62;
  uint64_t v63;
  double v64;
  double v65;
  int v66;
  int v67;
  uint64_t v68;
  _QWORD v69[3];
  int v70;
  _QWORD v71[3];
  int v72;
  UChar *v73[12];

  v73[9] = *(UChar **)MEMORY[0x1E0C80C00];
  if (*a6 > 0)
    return 0;
  if (!this || !*((_DWORD *)this + 2))
  {
    v7 = 0;
    *a6 = 1;
    return v7;
  }
  memset(v73, 0, 64);
  v15 = (UChar **)icu::UVector::elementAt(this, 0);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v73, v15);
  v68 = 0;
  memset(v71, 0, sizeof(v71));
  v72 = 0;
  v66 = 7;
  v67 = 0;
  v65 = 0.0;
  sub_18BDC855C(v73, (_DWORD *)&v68 + 1, &v68, &v67, (uint64_t)v71, &v66, &v65, a6);
  v7 = 0;
  v16 = *a6;
  if ((int)v16 > 0)
    goto LABEL_105;
  v17 = *((_DWORD *)this + 2);
  if (v17 != 1)
  {
    if (v17 > 7)
      goto LABEL_104;
    v56 = HIDWORD(v68);
    if (HIDWORD(v68) == -1)
      goto LABEL_104;
    v54 = v68;
    if (!(_DWORD)v68)
      goto LABEL_104;
    v24 = v66;
    if (!v66)
      goto LABEL_104;
    if (v66 < 1)
    {
      v20 = 31;
    }
    else
    {
      v20 = 31;
      v25 = (int *)v71;
      v26 = v66;
      do
      {
        v28 = *v25++;
        v27 = v28;
        if (v28 <= 0)
          v27 += dword_18BE2C888[SHIDWORD(v68)] + 1;
        if (v27 < v20)
          v20 = v27;
        --v26;
      }
      while (v26);
    }
    v29 = v65;
    if (v17 <= 1)
    {
      v55 = HIDWORD(v68);
LABEL_76:
      v65 = v29;
      v18 = v55;
      if (v24 != 7)
        goto LABEL_104;
      goto LABEL_77;
    }
    v30 = 1;
    v53 = -1;
    v55 = HIDWORD(v68);
    while (1)
    {
      v31 = (UChar **)icu::UVector::elementAt(this, v30);
      icu::UnicodeString::operator=(v73, v31);
      v63 = 0;
      v64 = 0.0;
      memset(v69, 0, sizeof(v69));
      v70 = 0;
      v61 = 7;
      sub_18BDC855C(v73, (_DWORD *)&v63 + 1, &v63, &v62, (uint64_t)v69, (int *)&v61, &v64, a6);
      v16 = *a6;
      if ((int)v16 > 0)
      {
        v7 = 0;
        goto LABEL_105;
      }
      if (v64 > v29)
        v29 = v64;
      v32 = HIDWORD(v63);
      if (HIDWORD(v63) == -1)
        goto LABEL_104;
      if (!(_DWORD)v63)
        goto LABEL_104;
      v33 = v61;
      if (!v61)
        goto LABEL_104;
      v24 += v61;
      if (v24 > 7 || (_DWORD)v63 != v54)
        goto LABEL_104;
      v35 = HIDWORD(v63) - v56;
      if (HIDWORD(v63) != v56)
      {
        if (v53 == -1)
        {
          if (v35 > 0)
          {
            if (v35 != 11)
            {
              v53 = HIDWORD(v63);
              if (v35 != 1)
                goto LABEL_104;
              goto LABEL_65;
            }
          }
          else
          {
            v20 = 31;
            if (v35 != -11)
            {
              v55 = HIDWORD(v63);
              v53 = HIDWORD(v63);
              if (v35 != -1)
                goto LABEL_104;
              goto LABEL_65;
            }
            v55 = HIDWORD(v63);
          }
          v53 = HIDWORD(v63);
        }
        else if (HIDWORD(v63) != v53)
        {
          goto LABEL_104;
        }
      }
LABEL_65:
      if (HIDWORD(v63) == v55 && (int)v61 >= 1)
      {
        v36 = (int *)v69;
        do
        {
          v37 = *v36;
          if (*v36 <= 0)
            v37 += dword_18BE2C888[v32] + 1;
          *v36++ = v37;
          if (v37 < v20)
            v20 = v37;
          --v33;
        }
        while (v33);
      }
      if ((signed int)++v30 >= *((_DWORD *)this + 2))
        goto LABEL_76;
    }
  }
  v18 = HIDWORD(v68);
  if (v66 < 2)
  {
    v20 = 0;
  }
  else
  {
    if (v66 != 7 || HIDWORD(v68) == -1 || !(_DWORD)v68)
      goto LABEL_104;
    v19 = 0;
    v20 = 31;
    do
    {
      v21 = *(_DWORD *)((char *)v71 + v19);
      if (v21 < 0)
      {
        v21 += dword_18BE2C888[v18] + 1;
        *(_DWORD *)((char *)v71 + v19) = v21;
      }
      if (v21 < v20)
        v20 = v21;
      v19 += 4;
    }
    while (v19 != 28);
    for (i = 1; i != 7; ++i)
    {
      v23 = 0;
      while (*(_DWORD *)((char *)v71 + v23) != i + v20)
      {
        v23 += 4;
        if (v23 == 28)
          goto LABEL_104;
      }
    }
  }
LABEL_77:
  v59 = 0;
  *(_QWORD *)v60 = 0;
  v58 = 0;
  sub_18BCE8698(&v60[1], v60, (_DWORD *)&v59 + 1, (int *)&v59, (int *)&v58 + 1, &v58, (double)a5 + a7);
  if (v18 == -1)
    v39 = v60[0];
  else
    v39 = v18;
  v41 = v67;
  v40 = v68;
  v42 = __PAIR64__(v68, v67) == 0;
  if (v68 | v67 | v20)
    v43 = v20;
  else
    v43 = HIDWORD(v59);
  v57 = 0;
  if (v65 == -1.84303903e17)
  {
    v57 = 0x7FFFFFFF;
  }
  else
  {
    LODWORD(v69[0]) = 0;
    LODWORD(v64) = 0;
    v63 = 0;
    v62 = 0;
    sub_18BCE8698(&v57, v69, &v64, (int *)&v63 + 1, (int *)&v63, &v62, v65);
  }
  if (v43)
    v44 = (uint64_t *)v42;
  else
    v44 = 0;
  if ((_DWORD)v44 != 1)
  {
    if (v40 && v41 && !v43)
    {
      v49 = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, v38);
      if (v49)
      {
        v46 = (icu::DateTimeRule *)v49;
        icu::DateTimeRule::DateTimeRule((uint64_t)v49, v39, v41, v40, v58, 0);
        goto LABEL_102;
      }
    }
    else if (v40)
    {
      if (!v41)
      {
        if (v43)
        {
          v50 = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, v38);
          if (v50)
          {
            v46 = (icu::DateTimeRule *)v50;
            icu::DateTimeRule::DateTimeRule((uint64_t)v50, v39, v43, v40, 1, v58, 0);
            goto LABEL_102;
          }
        }
      }
    }
LABEL_104:
    v7 = 0;
    v16 = 27;
    *a6 = 27;
    goto LABEL_105;
  }
  v45 = icu::UMemory::operator new(v44, (icu::UMemory *)0x28, v38);
  if (!v45)
    goto LABEL_104;
  v46 = (icu::DateTimeRule *)v45;
  icu::DateTimeRule::DateTimeRule((uint64_t)v45, v39, v43, v58, 0);
LABEL_102:
  v51 = (icu::AnnualTimeZoneRule *)icu::UMemory::operator new(v48, (icu::UMemory *)0x60, v47);
  v7 = v51;
  if (v51)
    icu::AnnualTimeZoneRule::AnnualTimeZoneRule(v51, a1, a2, a3, v46, v60[1], v57);
LABEL_105:
  icu::UnicodeString::~UnicodeString((void *)v16, (icu::UnicodeString *)v73);
  return v7;
}

uint64_t *sub_18BDC5290(UChar **a1, unint64_t a2, int a3, int *a4, int a5, int *a6, double a7)
{
  uint64_t *v7;
  uint64_t *v8;
  int v12;
  uint64_t v14;
  double *v16;
  unint64_t v17;
  uint64_t *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  double v25;

  v25 = a7;
  v7 = (uint64_t *)*a6;
  if ((int)v7 <= 0)
  {
    v12 = a2;
    if (a4 && (v14 = a4[2], (_DWORD)v14))
    {
      v16 = (double *)uprv_malloc(8 * v14);
      if (v16)
      {
        v19 = v16;
        if ((int)v14 >= 1)
        {
          v20 = 0;
          while (1)
          {
            v21 = icu::UVector::elementAt((icu::UVector *)a4, v20);
            v19[v20] = sub_18BDC4814(v21, a5, a6);
            v18 = (uint64_t *)*a6;
            if ((int)v18 >= 1)
              break;
            if (v14 == ++v20)
              goto LABEL_10;
          }
          uprv_free(v19);
          return 0;
        }
LABEL_10:
        v22 = icu::UMemory::operator new(v18, (icu::UMemory *)0x160, v17);
        if (v22)
        {
          v8 = v22;
          icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v22, a1, v12, a3, v19, v14, 2);
          uprv_free(v19);
          return v8;
        }
        uprv_free(v19);
      }
    }
    else
    {
      v23 = icu::UMemory::operator new(v7, (icu::UMemory *)0x160, a2);
      if (v23)
      {
        v8 = v23;
        icu::TimeArrayTimeZoneRule::TimeArrayTimeZoneRule((uint64_t)v23, a1, v12, a3, &v25, 1, 2);
        return v8;
      }
    }
    v8 = 0;
    *a6 = 7;
    return v8;
  }
  return 0;
}

_QWORD *icu::VTimeZone::writeZone(_QWORD *result, uint64_t *a2, UChar **a3, icu::UVector *a4, int *a5)
{
  int *v5;
  uint64_t *v8;
  uint64_t v9;
  signed int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double Time;
  UChar **v26;
  icu::TimeZoneRule *v27;
  int DSTSavings;
  icu::TimeZoneRule *v29;
  int RawOffset;
  icu::TimeZoneRule *v31;
  uint64_t v32;
  icu::TimeZoneRule *v33;
  uint64_t v34;
  icu::TimeZoneRule *v35;
  int v36;
  icu::TimeZoneRule *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  const void *v41;
  icu::AnnualTimeZoneRule *v42;
  icu::AnnualTimeZoneRule *v43;
  const void *v44;
  icu::AnnualTimeZoneRule *v45;
  icu::AnnualTimeZoneRule *v46;
  int v47;
  int v48;
  int v49;
  int32_t v50;
  int v51;
  __int128 *v52;
  int v53;
  int v54;
  int32_t v55;
  int v56;
  __int128 *v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  _BOOL4 v64;
  int v65;
  void *v66;
  icu::AnnualTimeZoneRule *v67;
  icu::AnnualTimeZoneRule *v68;
  icu::DateTimeRule *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  icu::DateTimeRule *Rule;
  icu::AnnualTimeZoneRule *v75;
  icu::AnnualTimeZoneRule *v76;
  icu::DateTimeRule *v77;
  icu::AnnualTimeZoneRule *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int *v87;
  unint64_t v88;
  __int128 v89;
  uint64_t v90;
  UChar **v91;
  int v92;
  unint64_t v93;
  icu::AnnualTimeZoneRule *v94;
  uint64_t v95;
  _OWORD v96[2];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  UChar *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  UChar *v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  UChar *v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  UChar *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (*a5 > 0)
    return result;
  v5 = a5;
  v8 = a2;
  v9 = (uint64_t)result;
  result = icu::VTimeZone::writeHeaders(result, a2, a5);
  if (*v5 > 0)
    return result;
  if (a4 && *((int *)a4 + 2) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = icu::UVector::elementAt(a4, v10);
      v12 = *(unsigned __int16 *)(v11 + 8);
      v13 = (__int16)v12;
      v14 = v12 >> 5;
      if (v13 >= 0)
        v15 = v14;
      else
        v15 = *(unsigned int *)(v11 + 12);
      icu::UnicodeString::doAppend(*v8, (const icu::UnicodeString *)v11, 0, v15);
      icu::UnicodeString::doAppend(*v8, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
      ++v10;
    }
    while (v10 < *((_DWORD *)a4 + 2));
  }
  v116 = 0u;
  v119 = 0;
  v118 = 0u;
  v117 = 0u;
  v115 = (UChar *)off_1E2256B38;
  LOWORD(v116) = 2;
  v111 = 0u;
  v114 = 0;
  v113 = 0u;
  v112 = 0u;
  v110 = (UChar *)off_1E2256B38;
  LOWORD(v111) = 2;
  v98 = 0;
  v99 = 0;
  v97 = 0;
  memset(v96, 0, sizeof(v96));
  icu::TimeZoneTransition::TimeZoneTransition(v96);
  v106 = 0u;
  v109 = 0;
  v108 = 0u;
  v107 = 0u;
  v105 = (UChar *)off_1E2256B38;
  LOWORD(v106) = 2;
  if (!(*((unsigned int (**)(UChar **, _QWORD, _OWORD *, double))*a3 + 14))(a3, 0, v96, -1.84303903e17))
  {
    v95 = 0;
    (*((void (**)(UChar **, _QWORD, char *, uint64_t *, int *, double))*a3 + 6))(a3, 0, (char *)&v95 + 4, &v95, v5, 0.0);
    v60 = *v5;
    if ((int)v60 <= 0)
    {
      v63 = v95 + HIDWORD(v95);
      v64 = v95 != 0;
      v101 = 0u;
      v102 = 0u;
      v104 = 0;
      v103 = 0u;
      v100 = (UChar *)off_1E2256B38;
      LOWORD(v101) = 2;
      icu::UnicodeString::operator=(&v100, a3 + 1);
      sub_18BDC4A8C(&v100, v64, &v105);
      icu::VTimeZone::writeZonePropsByTime(v9, v8, v64, (uint64_t)&v105, v63, v63, 0, v5, 0.0 - (double)v63);
      v65 = *v5;
      v58 = (uint64_t)icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v100);
      if (v65 < 1)
      {
        v68 = 0;
        v67 = 0;
        goto LABEL_123;
      }
    }
    v67 = 0;
    v68 = 0;
LABEL_124:
    if (v68)
LABEL_125:
      (*(void (**)(icu::AnnualTimeZoneRule *))(*(_QWORD *)v68 + 8))(v68);
    goto LABEL_126;
  }
  v90 = 0;
  v91 = a3;
  v85 = v8;
  v86 = v9;
  v87 = v5;
  v88 = 0;
  v16 = 0;
  v84 = 0;
  v89 = 0uLL;
  v83 = 0;
  v93 = 0;
  v94 = 0;
  v17 = 0;
  v92 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0.0;
  v22 = 0.0;
  v23 = 0.0;
  v24 = 0.0;
  while (1)
  {
    Time = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v96);
    v26 = (UChar **)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
    icu::TimeZoneRule::getName(v26, &v105);
    v27 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
    DSTSavings = icu::TimeZoneRule::getDSTSavings(v27);
    v29 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v96);
    RawOffset = icu::TimeZoneRule::getRawOffset(v29);
    v31 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v96);
    v32 = icu::TimeZoneRule::getDSTSavings(v31) + RawOffset;
    v33 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getFrom((icu::TimeZoneTransition *)v96);
    v34 = icu::TimeZoneRule::getDSTSavings(v33);
    v35 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
    v36 = icu::TimeZoneRule::getRawOffset(v35);
    v37 = (icu::TimeZoneRule *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
    v38 = icu::TimeZoneRule::getDSTSavings(v37) + v36;
    v39 = icu::TimeZoneTransition::getTime((icu::TimeZoneTransition *)v96);
    sub_18BCE8698((int *)&v99 + 1, &v99, (_DWORD *)&v98 + 1, (int *)&v98, (int *)&v97 + 1, &v97, v39 + (double)(int)v32);
    v40 = sub_18BCE876C(SHIDWORD(v99), v99, SHIDWORD(v98));
    if (DSTSavings)
    {
      if (!v94)
      {
        v41 = (const void *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
        if (v41
        {
          v94 = (icu::AnnualTimeZoneRule *)(*(uint64_t (**)(icu::AnnualTimeZoneRule *))(*(_QWORD *)v43 + 24))(v43);
        }
        else
        {
          v94 = 0;
        }
      }
      v47 = HIDWORD(v93);
      if (SHIDWORD(v93) >= 1)
      {
        v49 = v92;
        v48 = v93;
        if (HIDWORD(v99) == HIDWORD(v93) + HIDWORD(v90))
        {
          if ((v116 & 1) != 0)
          {
            v53 = (v106 & 1) == 0;
          }
          else
          {
            v50 = (v106 & 0x8000u) == 0 ? (unsigned __int16)v106 >> 5 : DWORD1(v106);
            v51 = (v116 & 0x8000u) == 0 ? (unsigned __int16)v116 >> 5 : DWORD1(v116);
            v52 = (v116 & 2) != 0 ? (__int128 *)((char *)&v116 + 2) : (__int128 *)v117;
            v53 = icu::UnicodeString::doCompare((uint64_t)&v105, 0, v50, (uint64_t)v52, v51 & (v51 >> 31), v51 & ~(v51 >> 31));
            v48 = v93;
            v47 = HIDWORD(v93);
            v49 = v92;
          }
          if (!v53
            && (_DWORD)v20 == (_DWORD)v32
            && (_DWORD)v18 == (_DWORD)v38
            && v48 == (_DWORD)v99
            && v49 == (_DWORD)v98
            && (_DWORD)v17 == (_DWORD)v40
            && HIDWORD(v89) == (_DWORD)v97)
          {
            v59 = v47 + 1;
            v32 = v20;
            v34 = v19;
            v38 = v18;
            v40 = v17;
LABEL_65:
            v93 = __PAIR64__(v59, v48);
            v92 = v49;
            v61 = v16;
            v23 = Time;
            if (v16 && v94)
            {
              v23 = Time;
              v69 = (icu::DateTimeRule *)v86;
              v5 = v87;
              v8 = v85;
              v70 = v89;
              v71 = v59;
LABEL_92:
              v16 = v61;
              if (v71 == 1)
              {
                v67 = v94;
                v58 = (uint64_t)icu::VTimeZone::writeFinalRule(v69, v8, 1, v94, (int)v32 - (int)v34, v34, v5, v24);
                v68 = (icu::AnnualTimeZoneRule *)v16;
                v72 = v88;
                v73 = HIDWORD(v88);
              }
              else
              {
                Rule = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(v94);
                if (sub_18BDC6E14(v93, v40, v92, Rule))
                {
                  icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 1, (uint64_t)&v115, v32, v38, v93, v40, v24, 1.83882169e17, v92, v5);
                  v67 = v94;
                }
                else
                {
                  icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 1, (uint64_t)&v115, v32, v38, v93, v40, v24, v23, v92, v5);
                  v60 = *v5;
                  if ((int)v60 > 0)
                  {
LABEL_111:
                    v67 = v94;
                    v68 = (icu::AnnualTimeZoneRule *)v16;
                    goto LABEL_124;
                  }
                  v100 = 0;
                  v67 = v94;
                  v58 = (*(uint64_t (**)(icu::AnnualTimeZoneRule *, _QWORD, uint64_t, _QWORD, UChar **, double))(*(_QWORD *)v94 + 72))(v94, (v32 - v34), v34, 0, &v100, v23);
                  if ((_DWORD)v58)
                    v58 = (uint64_t)icu::VTimeZone::writeFinalRule(v69, v8, 1, v94, (int)v32 - (int)v34, v34, v5, *(double *)&v100);
                }
                v68 = (icu::AnnualTimeZoneRule *)v16;
                v72 = v88;
                v73 = HIDWORD(v88);
              }
              v60 = v90;
              if (*v5 > 0)
                goto LABEL_124;
              goto LABEL_100;
            }
            goto LABEL_84;
          }
        }
        if (v47 == 1)
          icu::VTimeZone::writeZonePropsByTime(v86, v85, 1, (uint64_t)&v115, v20, v18, 1, v87, v24);
        else
          icu::VTimeZone::writeZonePropsByDOW(v86, v85, 1, (uint64_t)&v115, v20, v18, v48, v17, v24, v23, v49, v87);
        v60 = *v87;
        if ((int)v60 >= 1)
          goto LABEL_111;
      }
      icu::UnicodeString::operator=(&v115, &v105);
      v48 = v99;
      HIDWORD(v90) = HIDWORD(v99);
      v49 = v98;
      v59 = 1;
      v24 = Time;
      HIDWORD(v89) = v97;
      goto LABEL_65;
    }
    if (!v16)
    {
      v44 = (const void *)icu::TimeZoneTransition::getTo((icu::TimeZoneTransition *)v96);
      if (v44
      {
        v16 = (*(uint64_t (**)(icu::AnnualTimeZoneRule *))(*(_QWORD *)v46 + 24))(v46);
      }
      else
      {
        v16 = 0;
      }
    }
    v54 = v90;
    if ((int)v90 >= 1)
    {
      if (HIDWORD(v99) == (_DWORD)v90 + HIDWORD(v84))
      {
        if ((v111 & 1) != 0)
        {
          v58 = (v106 & 1) == 0;
        }
        else
        {
          v55 = (v106 & 0x8000u) == 0 ? (unsigned __int16)v106 >> 5 : DWORD1(v106);
          v56 = (v111 & 0x8000u) == 0 ? (unsigned __int16)v111 >> 5 : DWORD1(v111);
          v57 = (v111 & 2) != 0 ? (__int128 *)((char *)&v111 + 2) : (__int128 *)v112;
          v58 = icu::UnicodeString::doCompare((uint64_t)&v105, 0, v55, (uint64_t)v57, v56 & (v56 >> 31), v56 & ~(v56 >> 31));
          v54 = v90;
        }
        if (!(_DWORD)v58
          && *(_QWORD *)((char *)&v89 + 4) == __PAIR64__(v32, v38)
          && v88 == __PAIR64__(v99, v98)
          && (_DWORD)v89 == (_DWORD)v40
          && (_DWORD)v84 == (_DWORD)v97)
        {
          v62 = v54 + 1;
          goto LABEL_80;
        }
      }
      if (v54 == 1)
        icu::VTimeZone::writeZonePropsByTime(v86, v85, 0, (uint64_t)&v110, SDWORD2(v89), DWORD1(v89), 1, v87, v22);
      else
        icu::VTimeZone::writeZonePropsByDOW(v86, v85, 0, (uint64_t)&v110, SDWORD2(v89), DWORD1(v89), SHIDWORD(v88), v89, v22, v21, v88, v87);
      v60 = *v87;
      if ((int)v60 >= 1)
        goto LABEL_111;
    }
    v58 = (uint64_t)icu::UnicodeString::operator=(&v110, &v105);
    v62 = 1;
    DWORD2(v89) = v32;
    v83 = v34;
    v88 = __PAIR64__(v99, v98);
    *(_QWORD *)&v89 = __PAIR64__(v38, v40);
    v22 = Time;
    v84 = __PAIR64__(HIDWORD(v99), v97);
LABEL_80:
    v61 = v16;
    LODWORD(v90) = v62;
    if (!v16)
    {
      v32 = v20;
      v34 = v19;
      v38 = v18;
      v40 = v17;
      v21 = Time;
      goto LABEL_84;
    }
    v32 = v20;
    v34 = v19;
    v38 = v18;
    v40 = v17;
    v21 = Time;
    if (v94)
      break;
LABEL_84:
    v16 = v61;
    v58 = (*((uint64_t (**)(UChar **, _QWORD, _OWORD *, double))*v91 + 14))(v91, 0, v96, Time);
    v17 = v40;
    v18 = v38;
    v19 = v34;
    v20 = v32;
    if (!(_DWORD)v58)
      goto LABEL_89;
  }
  v21 = Time;
  LODWORD(v40) = v17;
  LODWORD(v38) = v18;
  v34 = v19;
  LODWORD(v32) = v20;
LABEL_89:
  v71 = HIDWORD(v93);
  if (SHIDWORD(v93) < 1)
  {
    v69 = (icu::DateTimeRule *)v86;
    v5 = v87;
    v67 = v94;
    v68 = (icu::AnnualTimeZoneRule *)v16;
    v8 = v85;
    v73 = HIDWORD(v88);
    v70 = v89;
    v72 = v88;
    LODWORD(v60) = v90;
    goto LABEL_100;
  }
  v69 = (icu::DateTimeRule *)v86;
  v5 = v87;
  v8 = v85;
  v70 = v89;
  if (v94)
  {
    v61 = v16;
    goto LABEL_92;
  }
  if (HIDWORD(v93) == 1)
    icu::VTimeZone::writeZonePropsByTime(v86, v85, 1, (uint64_t)&v115, v32, v38, 1, v87, v24);
  else
    icu::VTimeZone::writeZonePropsByDOW(v86, v85, 1, (uint64_t)&v115, v32, v38, v93, v40, v24, v23, v92, v87);
  v67 = 0;
  v68 = (icu::AnnualTimeZoneRule *)v16;
  v72 = v88;
  v73 = HIDWORD(v88);
  v60 = v90;
  if (*v87 >= 1)
    goto LABEL_124;
LABEL_100:
  if ((int)v60 < 1)
    goto LABEL_123;
  if (v68)
  {
    if ((_DWORD)v60 == 1)
    {
      v75 = v68;
      v58 = (uint64_t)icu::VTimeZone::writeFinalRule(v69, v8, 0, v68, DWORD2(v89) - v83, v83, v5, v22);
      v68 = v75;
    }
    else
    {
      v76 = v68;
      v77 = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(v68);
      if (sub_18BDC6E14(v73, v70, v72, v77))
      {
        icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 0, (uint64_t)&v110, SDWORD2(v89), DWORD1(v89), v73, v70, v22, 1.83882169e17, v72, v5);
      }
      else
      {
        icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 0, (uint64_t)&v110, SDWORD2(v89), DWORD1(v89), v73, v70, v22, v21, v72, v5);
        if (*v5 > 0)
        {
          v68 = v76;
          goto LABEL_125;
        }
        v100 = 0;
        v82 = DWORD2(v89) - v83;
        v58 = (*(uint64_t (**)(icu::AnnualTimeZoneRule *, uint64_t, _QWORD, _QWORD, UChar **, double))(*(_QWORD *)v76 + 72))(v76, v82, v83, 0, &v100, v21);
        if ((_DWORD)v58)
          v58 = (uint64_t)icu::VTimeZone::writeFinalRule(v69, v8, 0, v76, v82, v83, v5, *(double *)&v100);
      }
      v68 = v76;
    }
    if (*v5 > 0)
      goto LABEL_125;
LABEL_123:
    v79 = v68;
    icu::VTimeZone::writeFooter(v58, v8, v5);
    v68 = v79;
    goto LABEL_124;
  }
  if ((_DWORD)v60 == 1)
    icu::VTimeZone::writeZonePropsByTime((uint64_t)v69, v8, 0, (uint64_t)&v110, SDWORD2(v89), DWORD1(v89), 1, v5, v22);
  else
    icu::VTimeZone::writeZonePropsByDOW((uint64_t)v69, v8, 0, (uint64_t)&v110, SDWORD2(v89), DWORD1(v89), v73, v70, v22, v21, v72, v5);
  v60 = *v5;
  if ((int)v60 < 1)
  {
    v68 = 0;
    goto LABEL_123;
  }
LABEL_126:
  if (v67)
    (*(void (**)(icu::AnnualTimeZoneRule *))(*(_QWORD *)v67 + 8))(v67);
  icu::UnicodeString::~UnicodeString((void *)v60, (icu::UnicodeString *)&v105);
  icu::TimeZoneTransition::~TimeZoneTransition((icu::TimeZoneTransition *)v96);
  icu::UnicodeString::~UnicodeString(v80, (icu::UnicodeString *)&v110);
  return icu::UnicodeString::~UnicodeString(v81, (icu::UnicodeString *)&v115);
}

uint64_t sub_18BDC60A4(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  __int16 v8;
  _OWORD v9[5];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2 >= -1.84303903e17)
  {
    if (a2 <= 1.83882169e17)
      v3 = (uint64_t)a2;
    else
      v3 = 183882168921600000;
  }
  else
  {
    v3 = -184303902528000000;
  }
  v4 = 0;
  memset(v9, 0, sizeof(v9));
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = -v3;
  do
  {
    *((_DWORD *)v9 + v4++) = v5 % 0xA;
    v6 = v5 > 9;
    v5 /= 0xAuLL;
  }
  while (v6);
  if (v3 < 0)
  {
    v8 = 45;
    icu::UnicodeString::doAppend(a1, (uint64_t)&v8, 0, 1);
  }
  do
  {
    v8 = *((_WORD *)v9 + 2 * v4 - 2) + 48;
    icu::UnicodeString::doAppend(a1, (uint64_t)&v8, 0, 1);
    --v4;
  }
  while (v4 > 0);
  return a1;
}

_QWORD *icu::VTimeZone::writeHeaders(_QWORD *result, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[9];
  __int16 v17;
  void (**v18)(icu::UnicodeString *__hidden);
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  UChar *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return result;
  v4 = result;
  v24 = 0u;
  v27 = 0;
  v26 = 0u;
  v25 = 0u;
  v23 = (UChar *)off_1E2256B38;
  LOWORD(v24) = 2;
  icu::UnicodeString::operator=(&v23, (UChar **)(result[9] + 8));
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"BEGIN", 0, 0xFFFFFFFFLL);
  v16[8] = L"BEGIN";
  v5 = *a2;
  LOWORD(v18) = 58;
  icu::UnicodeString::doAppend(v5, (uint64_t)&v18, 0, 1);
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"VTIMEZONE", 0, 0xFFFFFFFFLL);
  v16[7] = L"VTIMEZONE";
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  v16[6] = L"\r\n";
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"TZID", 0, 0xFFFFFFFFLL);
  v16[5] = L"TZID";
  v6 = *a2;
  LOWORD(v18) = 58;
  icu::UnicodeString::doAppend(v6, (uint64_t)&v18, 0, 1);
  if ((v24 & 0x8000u) == 0)
    v7 = (unsigned __int16)v24 >> 5;
  else
    v7 = DWORD1(v24);
  icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v23, 0, v7);
  icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  v16[4] = L"\r\n";
  if ((__int16)v4[12] < 0)
  {
    if (*((_DWORD *)v4 + 25))
      goto LABEL_7;
  }
  else if (*((unsigned __int16 *)v4 + 48) >> 5)
  {
LABEL_7:
    icu::UnicodeString::doAppend(*a2, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    v16[3] = "T";
    v8 = *a2;
    LOWORD(v18) = 58;
    icu::UnicodeString::doAppend(v8, (uint64_t)&v18, 0, 1);
    v9 = *((unsigned __int16 *)v4 + 48);
    v10 = (__int16)v9;
    v11 = v9 >> 5;
    if (v10 >= 0)
      v12 = v11;
    else
      v12 = *((unsigned int *)v4 + 25);
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)(v4 + 11), 0, v12);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v16[2] = L"\r\n";
  }
  v13 = &icu::Calendar::kYearPrecedence[0][9][5];
  if (*((double *)v4 + 19) != 1.83882169e17)
  {
    v19 = 0u;
    v20 = 0u;
    v22 = 0;
    v21 = 0u;
    v18 = off_1E2256B38;
    LOWORD(v19) = 2;
    icu::UnicodeString::doAppend(*a2, (uint64_t)"L", 0, 0xFFFFFFFFLL);
    v16[1] = "L";
    v14 = *a2;
    v17 = 58;
    icu::UnicodeString::doAppend(v14, (uint64_t)&v17, 0, 1);
    sub_18BDC746C((uint64_t)&v18, *((double *)v4 + 19));
    v17 = 90;
    icu::UnicodeString::doAppend((uint64_t)&v18, (uint64_t)&v17, 0, 1);
    if ((v19 & 0x8000u) == 0)
      v15 = (unsigned __int16)v19 >> 5;
    else
      v15 = DWORD1(v19);
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v18, 0, v15);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v16[0] = L"\r\n";
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v18);
  }
  return icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v23);
}

void icu::VTimeZone::writeZonePropsByTime(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int *a8, double a9)
{
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*a8 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a8);
    if (*a8 <= 0)
    {
      if (a7)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"RDATE", 0, 0xFFFFFFFFLL);
        v18[1] = L"RDATE";
        v16 = *a2;
        LOWORD(v19) = 58;
        icu::UnicodeString::doAppend(v16, (uint64_t)&v19, 0, 1);
        v20 = 0u;
        v21 = 0u;
        v23 = 0;
        v22 = 0u;
        v19 = off_1E2256B38;
        LOWORD(v20) = 2;
        sub_18BDC746C((uint64_t)&v19, (double)a5 + a9);
        if ((v20 & 0x8000u) == 0)
          v17 = (unsigned __int16)v20 >> 5;
        else
          v17 = DWORD1(v20);
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v19, 0, v17);
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v18[0] = L"\r\n";
        v15 = icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v19);
      }
      icu::VTimeZone::endZoneProps((uint64_t)v15, a2, a3, a8);
    }
  }
}

void icu::VTimeZone::writeZonePropsByDOW(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (**v24)(icu::UnicodeString *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (*a12 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a12);
    if (*a12 <= 0)
    {
      icu::VTimeZone::beginRRULE(v18, a2, a7, a12);
      if (*a12 <= 0)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)"B", 0, 0xFFFFFFFFLL);
        v19 = *a2;
        LOWORD(v24) = 61;
        icu::UnicodeString::doAppend(v19, (uint64_t)&v24, 0, 1);
        v25 = 0u;
        v26 = 0u;
        v28 = 0;
        v27 = 0u;
        v24 = off_1E2256B38;
        LOWORD(v25) = 2;
        sub_18BDC7A68(a8, 0, (uint64_t)&v24);
        if ((v25 & 0x8000u) == 0)
          v20 = (unsigned __int16)v25 >> 5;
        else
          v20 = DWORD1(v25);
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v24, 0, v20);
        icu::UnicodeString::doAppend(*a2, (uint64_t)&aS_4[6 * a11 - 6], 0, 0xFFFFFFFFLL);
        if (a10 == 1.83882169e17
          || (v21 = sub_18BDC746C((uint64_t)&v24, (double)a5 + a10),
              icu::VTimeZone::appendUNTIL(v21, a2, (uint64_t)&v24, a12),
              v22 = *a12,
              (int)v22 <= 0))
        {
          v23 = icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          icu::VTimeZone::endZoneProps(v23, a2, a3, a12);
        }
        icu::UnicodeString::~UnicodeString((void *)v22, (icu::UnicodeString *)&v24);
      }
    }
  }
}

icu::DateTimeRule *icu::VTimeZone::writeFinalRule(icu::DateTimeRule *result, uint64_t *a2, int a3, icu::AnnualTimeZoneRule *this, int a5, int a6, int *a7, double a8)
{
  icu::DateTimeRule *v15;
  icu::DateTimeRule *v16;
  int RuleMillisInDay;
  int v18;
  icu::DateTimeRule *Rule;
  unsigned int v20;
  char v21;
  int v22;
  int RuleMonth;
  int DateRuleType;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int RuleWeekInMonth;
  int v30;
  int v31;
  double v32;
  double v33;
  int RawOffset;
  int DSTSavings;
  unsigned int v36;
  signed int v37;
  int v38;
  int v39;
  signed int v40;
  int v41;
  int v42;
  int v43;
  signed int v44;
  int v45;
  int v46;
  int v47;
  signed int v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  int RuleDayOfWeek;
  unsigned int v57;
  int RuleDayOfMonth;
  UChar *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (*a7 > 0)
    return result;
  v15 = result;
  result = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(this);
  if (*a7 > 0)
    return result;
  v16 = result;
  result = (icu::DateTimeRule *)icu::DateTimeRule::getTimeRuleType(result);
  v57 = result;
  if ((_DWORD)result)
  {
    RuleMillisInDay = icu::DateTimeRule::getRuleMillisInDay(v16);
    if (icu::DateTimeRule::getTimeRuleType(v16) == 2)
    {
      v18 = a6 + a5;
    }
    else if (icu::DateTimeRule::getTimeRuleType(v16) == 1)
    {
      v18 = a6;
    }
    else
    {
      v18 = 0;
    }
    v20 = v18 + RuleMillisInDay;
    v55 = a3;
    if (v18 + RuleMillisInDay < 0)
    {
      v21 = 0;
      v54 = v20 + 86400000;
      v22 = -1;
    }
    else
    {
      if (v20 <= 0x5265BFF)
      {
        v53 = 0;
        v54 = v18 + RuleMillisInDay;
        v21 = 1;
LABEL_18:
        RuleMonth = icu::DateTimeRule::getRuleMonth(v16);
        RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(v16);
        RuleDayOfWeek = icu::DateTimeRule::getRuleDayOfWeek(v16);
        DateRuleType = icu::DateTimeRule::getDateRuleType(v16);
        v27 = DateRuleType;
        if ((v21 & 1) != 0)
        {
          a3 = v55;
          if (!DateRuleType)
            goto LABEL_40;
        }
        else
        {
          v28 = RuleDayOfMonth;
          if (DateRuleType == 1)
          {
            RuleWeekInMonth = icu::DateTimeRule::getRuleWeekInMonth(v16);
            if (RuleWeekInMonth < 1)
            {
              v28 = dword_18BE2C888[RuleMonth] - RuleWeekInMonth + 8 * RuleWeekInMonth + 7;
              v27 = 3;
            }
            else
            {
              v28 = 7 * RuleWeekInMonth - 6;
              v27 = 2;
            }
          }
          v30 = v28 + v53;
          if (v30)
          {
            v26 = dword_18BE2C888[RuleMonth];
            a3 = v55;
            if (v30 > (int)v26)
            {
              if (RuleMonth <= 10)
                ++RuleMonth;
              else
                RuleMonth = 0;
              v30 = 1;
            }
          }
          else
          {
            if (RuleMonth >= 1)
              --RuleMonth;
            else
              RuleMonth = 11;
            v26 = (uint64_t)dword_18BE2C888;
            v30 = dword_18BE2C888[RuleMonth];
            a3 = v55;
          }
          RuleDayOfMonth = v30;
          if (!v27)
          {
LABEL_40:
            result = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x28, v25);
            if (result)
            {
              Rule = result;
              result = (icu::DateTimeRule *)icu::DateTimeRule::DateTimeRule((uint64_t)result, RuleMonth, RuleDayOfMonth, v54, 0);
              goto LABEL_46;
            }
            goto LABEL_54;
          }
          LODWORD(v26) = RuleDayOfWeek + v53;
          if (RuleDayOfWeek + v53 < 1)
          {
            v26 = 7;
          }
          else if (v26 > 7)
          {
            v26 = 1;
          }
          else
          {
            v26 = v26;
          }
          RuleDayOfWeek = v26;
        }
        result = (icu::DateTimeRule *)icu::UMemory::operator new((uint64_t *)v26, (icu::UMemory *)0x28, v25);
        if (result)
        {
          Rule = result;
          result = (icu::DateTimeRule *)icu::DateTimeRule::DateTimeRule((uint64_t)result, RuleMonth, RuleDayOfMonth, RuleDayOfWeek, v27 == 2, v54, 0);
LABEL_46:
          if (*a7 >= 1)
            return result;
          goto LABEL_47;
        }
LABEL_54:
        *a7 = 7;
        return result;
      }
      v21 = 0;
      v54 = v20 - 86400000;
      v22 = 1;
    }
    v53 = v22;
    goto LABEL_18;
  }
  if (*a7 > 0)
    return result;
  Rule = (icu::DateTimeRule *)icu::AnnualTimeZoneRule::getRule(this);
LABEL_47:
  v31 = icu::DateTimeRule::getRuleMillisInDay(Rule);
  v32 = a8 - (double)(v31 - 86399999);
  if (v31 <= 0x5265BFF)
    v32 = a8;
  if (v31 < 0)
    v33 = (double)-v31 + a8;
  else
    v33 = v32;
  RawOffset = icu::TimeZoneRule::getRawOffset(this);
  DSTSavings = icu::TimeZoneRule::getDSTSavings(this);
  v60 = 0u;
  v61 = 0u;
  v63 = 0;
  v62 = 0u;
  v59 = (UChar *)off_1E2256B38;
  LOWORD(v60) = 2;
  icu::TimeZoneRule::getName((UChar **)this, &v59);
  v36 = DSTSavings + RawOffset;
  switch(icu::DateTimeRule::getDateRuleType(Rule))
  {
    case 0u:
      v37 = a6 + a5;
      v38 = icu::DateTimeRule::getRuleMonth(Rule);
      v39 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      icu::VTimeZone::writeZonePropsByDOM((uint64_t)v15, a2, a3, (uint64_t)&v59, v37, v36, v38, v39, v33, 1.83882169e17, a7);
      break;
    case 1u:
      v40 = a6 + a5;
      v41 = icu::DateTimeRule::getRuleMonth(Rule);
      v42 = icu::DateTimeRule::getRuleWeekInMonth(Rule);
      v43 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW((uint64_t)v15, a2, a3, (uint64_t)&v59, v40, v36, v41, v42, v33, 1.83882169e17, v43, a7);
      break;
    case 2u:
      v44 = a6 + a5;
      v45 = icu::DateTimeRule::getRuleMonth(Rule);
      v46 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      v47 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM((uint64_t)v15, a2, a3, (uint64_t)&v59, v44, v36, v45, v46, v33, 1.83882169e17, v47, a7);
      break;
    case 3u:
      v48 = a6 + a5;
      v49 = icu::DateTimeRule::getRuleMonth(Rule);
      v50 = icu::DateTimeRule::getRuleDayOfMonth(Rule);
      v51 = icu::DateTimeRule::getRuleDayOfWeek(Rule);
      icu::VTimeZone::writeZonePropsByDOW_LEQ_DOM((uint64_t)v15, a2, a3, (uint64_t)&v59, v48, v36, v49, v50, v33, 1.83882169e17, v51, a7);
      break;
    default:
      break;
  }
  v52 = v57;
  if (v57)
  {
    if (Rule)
      (*(void (**)(icu::DateTimeRule *))(*(_QWORD *)Rule + 8))(Rule);
  }
  return (icu::DateTimeRule *)icu::UnicodeString::~UnicodeString((void *)v52, (icu::UnicodeString *)&v59);
}

uint64_t sub_18BDC6E14(int a1, int a2, int a3, icu::DateTimeRule *this)
{
  int RuleDayOfMonth;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  int v16;

  if (icu::DateTimeRule::getRuleMonth(this) != a1
    || icu::DateTimeRule::getRuleDayOfWeek(this) != a3
    || icu::DateTimeRule::getTimeRuleType(this))
  {
    return 0;
  }
  if (icu::DateTimeRule::getDateRuleType(this) == 1
    && icu::DateTimeRule::getRuleWeekInMonth(this) == a2)
  {
    return 1;
  }
  RuleDayOfMonth = icu::DateTimeRule::getRuleDayOfMonth(this);
  if (icu::DateTimeRule::getDateRuleType(this) == 2)
  {
    v10 = RuleDayOfMonth % 7 == 1 && (RuleDayOfMonth + 6) / 7 == a2;
    if (v10)
      return 1;
    if (a1 != 1)
    {
      v11 = dword_18BE2C888[a1] - RuleDayOfMonth;
      v10 = v11 % 7 == 6;
      v12 = ((unint64_t)(1840700269 * (v11 + 1)) >> 32) + ~v11;
      v13 = (v12 >> 2) + (v12 >> 31);
      if (v10 && v13 == a2)
        return 1;
    }
  }
  if (icu::DateTimeRule::getDateRuleType(this) == 3
    && (!(RuleDayOfMonth % 7) ? (v15 = RuleDayOfMonth / 7 == a2) : (v15 = 0),
        v15
     || a1 != 1
     && (v16 = dword_18BE2C888[a1] - RuleDayOfMonth, (-1227133513 * v16 + 306783378) <= 0x24924924)
     && ((int)(((unint64_t)(1840700269 * v16) >> 32) - v16) >> 2)
      + ((((unint64_t)(1840700269 * v16) >> 32) - v16) >> 31)
      - 1 == a2))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t icu::VTimeZone::writeFooter(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  uint64_t result;
  __int16 v6;

  if (*a3 <= 0)
  {
    icu::UnicodeString::doAppend(*a2, (uint64_t)"E", 0, 0xFFFFFFFFLL);
    v4 = *a2;
    v6 = 58;
    icu::UnicodeString::doAppend(v4, (uint64_t)&v6, 0, 1);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"VTIMEZONE", 0, 0xFFFFFFFFLL);
    return icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  }
  return result;
}

void icu::VTimeZone::beginZoneProps(double a1, uint64_t a2, uint64_t *a3, int a4, uint64_t a5, signed int a6, unsigned int a7, int *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[12];
  __int16 v28;
  void (**v29)(icu::UnicodeString *__hidden);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*a8 <= 0)
  {
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"BEGIN", 0, 0xFFFFFFFFLL);
    v27[11] = L"BEGIN";
    v14 = *a3;
    LOWORD(v29) = 58;
    icu::UnicodeString::doAppend(v14, (uint64_t)&v29, 0, 1);
    v15 = *a3;
    if (a4)
    {
      icu::UnicodeString::doAppend(v15, (uint64_t)"D", 0, 0xFFFFFFFFLL);
      v27[10] = "D";
    }
    else
    {
      icu::UnicodeString::doAppend(v15, (uint64_t)L"STANDARD", 0, 0xFFFFFFFFLL);
      v27[9] = L"STANDARD";
    }
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[8] = L"\r\n";
    v30 = 0u;
    v33 = 0;
    v32 = 0u;
    v31 = 0u;
    v29 = off_1E2256B38;
    LOWORD(v30) = 2;
    icu::UnicodeString::doAppend(*a3, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    v27[7] = "T";
    v16 = *a3;
    v28 = 58;
    icu::UnicodeString::doAppend(v16, (uint64_t)&v28, 0, 1);
    sub_18BDC82C8(a7, (uint64_t)&v29);
    if ((v30 & 0x8000u) == 0)
      v17 = (unsigned __int16)v30 >> 5;
    else
      v17 = DWORD1(v30);
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v17);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[6] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"TZOFFSETFROM", 0, 0xFFFFFFFFLL);
    v27[5] = L"TZOFFSETFROM";
    v18 = *a3;
    v28 = 58;
    icu::UnicodeString::doAppend(v18, (uint64_t)&v28, 0, 1);
    sub_18BDC82C8(a6, (uint64_t)&v29);
    if ((v30 & 0x8000u) == 0)
      v19 = (unsigned __int16)v30 >> 5;
    else
      v19 = DWORD1(v30);
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v19);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[4] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)"T", 0, 0xFFFFFFFFLL);
    v27[3] = "T";
    v20 = *a3;
    v28 = 58;
    icu::UnicodeString::doAppend(v20, (uint64_t)&v28, 0, 1);
    v21 = *(unsigned __int16 *)(a5 + 8);
    v22 = (__int16)v21;
    v23 = v21 >> 5;
    if (v22 >= 0)
      v24 = v23;
    else
      v24 = *(unsigned int *)(a5 + 12);
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)a5, 0, v24);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[2] = L"\r\n";
    icu::UnicodeString::doAppend(*a3, (uint64_t)"D", 0, 0xFFFFFFFFLL);
    v27[1] = "D";
    v25 = *a3;
    v28 = 58;
    icu::UnicodeString::doAppend(v25, (uint64_t)&v28, 0, 1);
    sub_18BDC746C((uint64_t)&v29, (double)a6 + a1);
    if ((v30 & 0x8000u) == 0)
      v26 = (unsigned __int16)v30 >> 5;
    else
      v26 = DWORD1(v30);
    icu::UnicodeString::doAppend(*a3, (const icu::UnicodeString *)&v29, 0, v26);
    icu::UnicodeString::doAppend(*a3, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
    v27[0] = L"\r\n";
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v29);
  }
}

uint64_t sub_18BDC746C(uint64_t a1, double a2)
{
  __int16 v3;
  int v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;

  v10 = 0;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  sub_18BCE8698(&v10, (_DWORD *)&v9 + 1, &v9, (int *)&v8 + 1, (int *)&v8, &v7, a2);
  if ((*(_WORD *)(a1 + 8) & 1) != 0)
    v3 = 2;
  else
    v3 = *(_WORD *)(a1 + 8) & 0x1F;
  *(_WORD *)(a1 + 8) = v3;
  sub_18BDC7A68(v10, 4u, a1);
  sub_18BDC7A68(HIDWORD(v9) + 1, 2u, a1);
  sub_18BDC7A68(v9, 2u, a1);
  v11 = 84;
  icu::UnicodeString::doAppend(a1, (uint64_t)&v11, 0, 1);
  v4 = v7 % 3600000 / 60000;
  v5 = v7 % 3600000 % 60000 / 1000;
  sub_18BDC7A68(v7 / 3600000, 2u, a1);
  sub_18BDC7A68(v4, 2u, a1);
  sub_18BDC7A68(v5, 2u, a1);
  return a1;
}

void icu::VTimeZone::endZoneProps(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;

  if (*a4 <= 0)
  {
    icu::UnicodeString::doAppend(*a2, (uint64_t)"E", 0, 0xFFFFFFFFLL);
    v6 = *a2;
    v8 = 58;
    icu::UnicodeString::doAppend(v6, (uint64_t)&v8, 0, 1);
    v7 = *a2;
    if (a3)
      icu::UnicodeString::doAppend(v7, (uint64_t)"D", 0, 0xFFFFFFFFLL);
    else
      icu::UnicodeString::doAppend(v7, (uint64_t)L"STANDARD", 0, 0xFFFFFFFFLL);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
  }
}

void icu::VTimeZone::writeZonePropsByDOM(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int *a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (**v23)(icu::UnicodeString *__hidden);
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*a11 <= 0)
  {
    icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a11);
    if (*a11 <= 0)
    {
      icu::VTimeZone::beginRRULE(v17, a2, a7, a11);
      if (*a11 <= 0)
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTHDAY", 0, 0xFFFFFFFFLL);
        v18 = *a2;
        LOWORD(v23) = 61;
        icu::UnicodeString::doAppend(v18, (uint64_t)&v23, 0, 1);
        v24 = 0u;
        v25 = 0u;
        v27 = 0;
        v26 = 0u;
        v23 = off_1E2256B38;
        LOWORD(v24) = 2;
        sub_18BDC7A68(a8, 0, (uint64_t)&v23);
        if ((v24 & 0x8000u) == 0)
          v19 = (unsigned __int16)v24 >> 5;
        else
          v19 = DWORD1(v24);
        icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v23, 0, v19);
        if (a10 == 1.83882169e17
          || (v20 = sub_18BDC746C((uint64_t)&v23, (double)a5 + a10),
              icu::VTimeZone::appendUNTIL(v20, a2, (uint64_t)&v23, a11),
              v21 = *a11,
              (int)v21 <= 0))
        {
          v22 = icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
          icu::VTimeZone::endZoneProps(v22, a2, a3, a11);
        }
        icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v23);
      }
    }
  }
}

void icu::VTimeZone::beginRRULE(uint64_t a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int16 v13;
  void (**v14)(icu::UnicodeString *__hidden);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*a4 <= 0)
  {
    v15 = 0u;
    v18 = 0;
    v17 = 0u;
    v16 = 0u;
    v14 = off_1E2256B38;
    LOWORD(v15) = 2;
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"RRULE", 0, 0xFFFFFFFFLL);
    v6 = *a2;
    v13 = 58;
    icu::UnicodeString::doAppend(v6, (uint64_t)&v13, 0, 1);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"FREQ", 0, 0xFFFFFFFFLL);
    v7 = *a2;
    v13 = 61;
    icu::UnicodeString::doAppend(v7, (uint64_t)&v13, 0, 1);
    icu::UnicodeString::doAppend(*a2, (uint64_t)"Y", 0, 0xFFFFFFFFLL);
    v8 = *a2;
    v13 = 59;
    icu::UnicodeString::doAppend(v8, (uint64_t)&v13, 0, 1);
    icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTH", 0, 0xFFFFFFFFLL);
    v9 = *a2;
    v13 = 61;
    icu::UnicodeString::doAppend(v9, (uint64_t)&v13, 0, 1);
    sub_18BDC7A68(a3 + 1, 0, (uint64_t)&v14);
    if ((v15 & 0x8000u) == 0)
      v10 = (unsigned __int16)v15 >> 5;
    else
      v10 = DWORD1(v15);
    icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v14, 0, v10);
    v11 = *a2;
    v13 = 59;
    icu::UnicodeString::doAppend(v11, (uint64_t)&v13, 0, 1);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }
}

uint64_t sub_18BDC7A68(int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BYTE v11[2];
  __int16 v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  if (a1 >= 0)
    v4 = a1;
  else
    v4 = -a1;
  if (a2)
  {
    LODWORD(v5) = a2;
    v6 = (unsigned int *)v13;
    v7 = a2;
    do
    {
      *v6++ = v4 % 0xA;
      v4 /= 0xAu;
      --v7;
    }
    while (v7);
    if ((a1 & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    v12 = 45;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v12, 0, 1);
    if (!(_DWORD)v5)
      return a3;
    goto LABEL_14;
  }
  v8 = 0;
  do
  {
    *((_DWORD *)v13 + v8++) = v4 % 0xA;
    v9 = v4 > 9;
    v4 /= 0xAu;
  }
  while (v9);
  LODWORD(v5) = v8;
  if (a1 < 0)
    goto LABEL_13;
LABEL_8:
  if (!(_DWORD)v5)
    return a3;
LABEL_14:
  v5 = v5;
  do
  {
    v12 = *(_WORD *)&v11[4 * v5] + 48;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v12, 0, 1);
    v9 = v5-- > 1;
  }
  while (v9);
  return a3;
}

void icu::VTimeZone::appendUNTIL(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  __int16 v16;

  if (*a4 <= 0)
  {
    v5 = *(unsigned __int16 *)(a3 + 8);
    v6 = (__int16)v5;
    v7 = v5 >> 5;
    if (v6 < 0)
      v7 = *(_DWORD *)(a3 + 12);
    if (v7 >= 1)
    {
      v9 = *a2;
      v15 = 59;
      icu::UnicodeString::doAppend(v9, (uint64_t)&v15, 0, 1);
      icu::UnicodeString::doAppend(*a2, (uint64_t)L"UNTIL", 0, 0xFFFFFFFFLL);
      v10 = *a2;
      v16 = 61;
      icu::UnicodeString::doAppend(v10, (uint64_t)&v16, 0, 1);
      v11 = *(unsigned __int16 *)(a3 + 8);
      v12 = (__int16)v11;
      v13 = v11 >> 5;
      if (v12 >= 0)
        v14 = v13;
      else
        v14 = *(unsigned int *)(a3 + 12);
      icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)a3, 0, v14);
    }
  }
}

void icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  int v13;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;

  if (*a12 > 0)
    return;
  v13 = a8;
  if (a8 % 7 == 1)
  {
    v18 = (unint64_t)(2454267027 * (a8 + 6)) >> 32;
LABEL_5:
    icu::VTimeZone::writeZonePropsByDOW(a1, a2, a3, a4, a5, a6, a7, (v18 >> 2) + (v18 >> 31), a9, a10, a11, a12);
    return;
  }
  if (a7 != 1)
  {
    v19 = dword_18BE2C888[a7] - a8;
    if (v19 % 7 == 6)
    {
      v18 = ((unint64_t)(1840700269 * (v19 + 1)) >> 32) + ~v19;
      goto LABEL_5;
    }
  }
  icu::VTimeZone::beginZoneProps(a9, a1, a2, a3, a4, a5, a6, a12);
  if (*a12 > 0)
    return;
  if (v13 <= 0)
  {
    if (a7 >= 1)
      v25 = a7 - 1;
    else
      v25 = 11;
    icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, v25, v13 - 1, a11, 1 - v13, a5, a12, 1.83882169e17);
    if (*a12 < 1)
    {
      v22 = v13 + 6;
      v13 = 1;
LABEL_22:
      icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, a7, v13, a11, v22, a5, a12, a10);
      if (*a12 <= 0)
        icu::VTimeZone::endZoneProps(v26, a2, a3, a12);
    }
  }
  else
  {
    v21 = dword_18BE2C888[a7];
    v22 = 7;
    v23 = v13 + 6 - v21;
    if (v13 + 6 <= v21)
      goto LABEL_22;
    if (a7 <= 10)
      v24 = a7 + 1;
    else
      v24 = 0;
    icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(v20, a2, v24, 1, a11, v23, a5, a12, 1.83882169e17);
    if (*a12 <= 0)
    {
      v22 = 7 - v23;
      goto LABEL_22;
    }
  }
}

void icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM_sub(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int a6, int a7, int *a8, double a9)
{
  int v14;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[4];
  __int16 v29;
  void (**v30)(icu::UnicodeString *__hidden);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*a8 <= 0)
  {
    v14 = a4;
    if (a3 != 1 && a4 < 0)
      v14 = a4 + dword_18BE2C888[a3] + 1;
    icu::VTimeZone::beginRRULE(a1, a2, a3, a8);
    if (*a8 <= 0)
    {
      icu::UnicodeString::doAppend(*a2, (uint64_t)"B", 0, 0xFFFFFFFFLL);
      v28[3] = "B";
      v16 = *a2;
      LOWORD(v30) = 61;
      icu::UnicodeString::doAppend(v16, (uint64_t)&v30, 0, 1);
      v17 = &aS_4[6 * a5 - 6];
      icu::UnicodeString::doAppend(*a2, (uint64_t)v17, 0, 0xFFFFFFFFLL);
      v28[2] = v17;
      v18 = *a2;
      LOWORD(v30) = 59;
      icu::UnicodeString::doAppend(v18, (uint64_t)&v30, 0, 1);
      icu::UnicodeString::doAppend(*a2, (uint64_t)L"BYMONTHDAY", 0, 0xFFFFFFFFLL);
      v28[1] = L"BYMONTHDAY";
      v19 = *a2;
      LOWORD(v30) = 61;
      icu::UnicodeString::doAppend(v19, (uint64_t)&v30, 0, 1);
      v31 = 0u;
      v32 = 0u;
      v34 = 0;
      v33 = 0u;
      v30 = off_1E2256B38;
      LOWORD(v31) = 2;
      sub_18BDC7A68(v14, 0, (uint64_t)&v30);
      if ((v31 & 0x8000u) == 0)
        v20 = (unsigned __int16)v31 >> 5;
      else
        v20 = DWORD1(v31);
      icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v30, 0, v20);
      if (a6 >= 2)
      {
        v21 = a6 - 1;
        v22 = v14 + 1;
        do
        {
          v23 = *a2;
          v29 = 44;
          icu::UnicodeString::doAppend(v23, (uint64_t)&v29, 0, 1);
          if ((v31 & 1) != 0)
            v24 = 2;
          else
            v24 = v31 & 0x1F;
          LOWORD(v31) = v24;
          sub_18BDC7A68(v22, 0, (uint64_t)&v30);
          if ((v31 & 0x8000u) == 0)
            v25 = (unsigned __int16)v31 >> 5;
          else
            v25 = DWORD1(v31);
          icu::UnicodeString::doAppend(*a2, (const icu::UnicodeString *)&v30, 0, v25);
          ++v22;
          --v21;
        }
        while (v21);
      }
      if (a9 == 1.83882169e17
        || (v26 = sub_18BDC746C((uint64_t)&v30, (double)a7 + a9),
            icu::VTimeZone::appendUNTIL(v26, a2, (uint64_t)&v30, a8),
            v27 = *a8,
            (int)v27 <= 0))
      {
        icu::UnicodeString::doAppend(*a2, (uint64_t)L"\r\n", 0, 0xFFFFFFFFLL);
        v28[0] = L"\r\n";
        v27 = (unint64_t)v28;
      }
      icu::UnicodeString::~UnicodeString((void *)v27, (icu::UnicodeString *)&v30);
    }
  }
}

void icu::VTimeZone::writeZonePropsByDOW_LEQ_DOM(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, signed int a5, unsigned int a6, int a7, int a8, double a9, double a10, int a11, int *a12)
{
  unsigned int v12;
  int v13;

  if (*a12 <= 0)
  {
    if (a8 == 7 * (a8 / 7))
    {
      v12 = a8 / 7;
      goto LABEL_6;
    }
    if (a7 == 1)
    {
      if (a8 == 29)
      {
        a7 = 1;
        v12 = -1;
LABEL_6:
        icu::VTimeZone::writeZonePropsByDOW(a1, a2, a3, a4, a5, a6, a7, v12, a9, a10, a11, a12);
        return;
      }
    }
    else
    {
      v13 = dword_18BE2C888[a7] - a8;
      if ((-1227133513 * v13 + 306783378) <= 0x24924924)
      {
        v12 = ((int)(((unint64_t)(1840700269 * v13) >> 32) - v13) >> 2)
            + ((((unint64_t)(1840700269 * v13) >> 32) - v13) >> 31)
            - 1;
        goto LABEL_6;
      }
    }
    icu::VTimeZone::writeZonePropsByDOW_GEQ_DOM(a1, a2, a3, a4, a5, a6, a7, a8 - 6, a9, a10, a11, a12);
  }
}

uint64_t sub_18BDC82C8(unsigned int a1, uint64_t a2)
{
  unsigned int v3;
  __int16 v4;
  __int16 v6;
  __int16 v7;

  v3 = a1;
  if ((*(_WORD *)(a2 + 8) & 1) != 0)
    v4 = 2;
  else
    v4 = *(_WORD *)(a2 + 8) & 0x1F;
  *(_WORD *)(a2 + 8) = v4;
  if ((a1 & 0x80000000) != 0)
  {
    v7 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v7, 0, 1);
    v3 = -v3;
  }
  else
  {
    v6 = 43;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v6, 0, 1);
  }
  sub_18BDC7A68(v3 / 0x36EE80, 2u, a2);
  sub_18BDC7A68((unsigned __int16)(v3 / 0xEA60) % 0x3Cu, 2u, a2);
  return sub_18BDC7A68(v3 / 0x3E8 - 60 * ((71582789 * (unint64_t)(v3 / 0x3E8)) >> 32), 2u, a2);
}

uint64_t sub_18BDC83E0(uint64_t a1, unsigned int a2, int a3, int *a4)
{
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  signed int v9;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  if (*a4 > 0)
    return 0;
  if (a3 < 1)
    goto LABEL_9;
  v5 = *(unsigned __int16 *)(a1 + 8);
  v6 = a3 + a2;
  v7 = v5 >> 5;
  if (*(__int16 *)(a1 + 8) < 0)
  {
    v9 = *(_DWORD *)(a1 + 12);
    if (v9 < (int)a2 || v6 > v9)
      goto LABEL_9;
  }
  else
  {
    v8 = (int)v7 >= (int)a2 && v6 <= (int)v7;
    v9 = v5 >> 5;
    if (!v8)
    {
LABEL_9:
      result = 0;
      *a4 = 3;
      return result;
    }
  }
  if (v9 > a2)
  {
    v11 = a1 + 10;
    if ((v5 & 2) == 0)
      v11 = *(_QWORD *)(a1 + 24);
    if (*(_WORD *)(v11 + 2 * (int)a2) == 43)
    {
      v12 = 1;
LABEL_27:
      if (!--a3)
        return 0;
      ++a2;
      goto LABEL_30;
    }
  }
  v13 = *(_DWORD *)(a1 + 12);
  if ((v5 & 0x8000u) == 0)
    v13 = v5 >> 5;
  if (v13 > a2)
  {
    v14 = a1 + 10;
    if ((v5 & 2) == 0)
      v14 = *(_QWORD *)(a1 + 24);
    if (*(_WORD *)(v14 + 2 * (int)a2) == 45)
    {
      v12 = -1;
      goto LABEL_27;
    }
  }
  v12 = 1;
LABEL_30:
  if ((v5 & 0x8000u) != 0)
    v7 = *(_DWORD *)(a1 + 12);
  if ((v5 & 2) != 0)
    v15 = a1 + 10;
  else
    v15 = *(_QWORD *)(a1 + 24);
  v16 = v7 > a2;
  if (v7 >= a2)
    v17 = v7 - a2;
  else
    v17 = 0;
  v18 = 0;
  if (v16)
  {
    v19 = 0;
    v20 = v15 + 2 * (int)a2;
    v22 = 1;
    do
    {
      v21 = *(unsigned __int16 *)(v20 + 2 * v19);
      if ((v21 - 48) >= 0xA)
        break;
      v18 = v21 + 10 * v18 - 48;
      if (a3 - 1 == v19)
        return (v18 * v12);
      v22 = ++v19 < a3;
    }
    while (v17 != v19);
  }
  else
  {
    v22 = 1;
  }
  *a4 = 3;
  v23 = v18 * v12;
  if (v22)
    return 0;
  else
    return v23;
}

void *sub_18BDC855C(void *result, _DWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t a5, int *a6, double *a7, int *a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  int32_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  int32_t v32;
  int v33;
  int32_t v34;
  int v35;
  int32_t v36;
  int v37;
  int32_t v38;
  int v39;
  int32_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  int v51;
  int v52;
  int v53;
  int32_t v54;
  int v55;
  int v56;
  uint64_t v57;
  const char *v58;
  int32_t v59;
  int v60;
  void *v62;
  void *v63;
  unsigned int v64;
  _QWORD v69[7];
  void (**v70)(icu::UnicodeString *__hidden);
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  void (**v75)(icu::UnicodeString *__hidden);
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  void (**v80)(icu::UnicodeString *__hidden);
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (*a8 > 0)
    return result;
  v11 = (uint64_t)result;
  v12 = 0;
  LODWORD(v13) = 0;
  *a2 = -1;
  *a3 = 0;
  *a4 = 0;
  *a7 = -1.84303903e17;
  v81 = 0u;
  v84 = 0;
  v83 = 0u;
  v82 = 0u;
  v80 = off_1E2256B38;
  LOWORD(v81) = 2;
  v76 = 0u;
  v79 = 0;
  v78 = 0u;
  v64 = 1;
  v77 = 0u;
  v74 = 0;
  v75 = off_1E2256B38;
  LOWORD(v76) = 2;
  v71 = 0u;
  v73 = 0u;
  v70 = off_1E2256B38;
  LOWORD(v71) = 2;
  v72 = 0u;
  do
  {
    while (1)
    {
      v14 = *(unsigned __int16 *)(v11 + 8);
      if (v12 < 0)
      {
        v16 = 0;
        if ((v14 & 0x8000) != 0)
          v15 = *(_DWORD *)(v11 + 12);
        else
          v15 = v14 >> 5;
      }
      else if ((v14 & 0x8000) != 0)
      {
        v15 = *(_DWORD *)(v11 + 12);
        if ((int)v15 >= v12)
          v16 = v12;
        else
          v16 = *(_DWORD *)(v11 + 12);
      }
      else
      {
        v15 = v14 >> 5;
        if (v15 >= v12)
          v16 = v12;
        else
          v16 = v15;
      }
      v17 = icu::UnicodeString::doIndexOf(v11, 0x3Bu, v16, v15 - v16);
      if (v17 != -1)
      {
        icu::UnicodeString::unBogus((uint64_t)&v80);
        if ((v81 & 0x8000u) == 0)
          v18 = (unsigned __int16)v81 >> 5;
        else
          v18 = DWORD1(v81);
        icu::UnicodeString::doReplace((icu::UnicodeString *)&v80, 0, v18, (const icu::UnicodeString *)v11, v12, (v17 - v12));
        v12 = v17 + 1;
        goto LABEL_32;
      }
      icu::UnicodeString::unBogus((uint64_t)&v80);
      v19 = *(unsigned __int16 *)(v11 + 8);
      v20 = v19 >> 5;
      if (v12 < 0)
      {
        v21 = 0;
LABEL_25:
        v22 = v21;
        goto LABEL_26;
      }
      if ((v19 & 0x8000) == 0)
      {
        v21 = v19 >> 5;
        v22 = v12;
        if (v12 <= v19 >> 5)
          goto LABEL_26;
        goto LABEL_25;
      }
      v21 = *(_DWORD *)(v11 + 12);
      v22 = v12;
      if (v21 < v12)
        goto LABEL_25;
LABEL_26:
      if ((v81 & 0x8000u) == 0)
        v23 = (unsigned __int16)v81 >> 5;
      else
        v23 = DWORD1(v81);
      if ((v19 & 0x8000u) != 0)
        v20 = *(_DWORD *)(v11 + 12);
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v80, 0, v23, (const icu::UnicodeString *)v11, v22, v20 - v22);
LABEL_32:
      if ((v81 & 0x8000u) == 0)
        v24 = (unsigned __int16)v81 >> 5;
      else
        v24 = DWORD1(v81);
      v25 = icu::UnicodeString::doIndexOf((uint64_t)&v80, 0x3Du, 0, v24);
      if ((_DWORD)v25 == -1)
        goto LABEL_132;
      v26 = v25;
      icu::UnicodeString::unBogus((uint64_t)&v75);
      if ((v76 & 0x8000u) == 0)
        v27 = (unsigned __int16)v76 >> 5;
      else
        v27 = DWORD1(v76);
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v75, 0, v27, (const icu::UnicodeString *)&v80, 0, v26);
      icu::UnicodeString::unBogus((uint64_t)&v70);
      v28 = 0;
      v29 = (unsigned __int16)v81 >> 5;
      if ((int)v26 < -1)
        goto LABEL_42;
      v30 = v26 + 1;
      if ((v81 & 0x8000) == 0)
      {
        v28 = (unsigned __int16)v81 >> 5;
        if (v26 < v28)
          goto LABEL_43;
LABEL_42:
        v30 = v28;
        goto LABEL_43;
      }
      v28 = DWORD1(v81);
      if (SDWORD1(v81) <= (int)v26)
        goto LABEL_42;
LABEL_43:
      if ((v71 & 0x8000u) == 0)
        v31 = (unsigned __int16)v71 >> 5;
      else
        v31 = DWORD1(v71);
      if ((v81 & 0x8000u) != 0)
        v29 = DWORD1(v81);
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v70, 0, v31, (const icu::UnicodeString *)&v80, v30, (v29 - v30));
      v32 = (v76 & 0x8000u) == 0 ? (unsigned __int16)v76 >> 5 : DWORD1(v76);
      v33 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v32, (uint64_t)L"FREQ", 0, -1);
      v69[6] = L"FREQ";
      if (v33)
        break;
      if ((v71 & 0x8000u) == 0)
        v54 = (unsigned __int16)v71 >> 5;
      else
        v54 = DWORD1(v71);
      v55 = icu::UnicodeString::doCompare((uint64_t)&v70, 0, v54, (uint64_t)"Y", 0, -1);
      v69[0] = "Y";
      v47 = (uint64_t)v69;
      if (v55)
        goto LABEL_132;
      v64 = 0;
      if (v17 == -1)
        goto LABEL_139;
    }
    if ((v76 & 0x8000u) == 0)
      v34 = (unsigned __int16)v76 >> 5;
    else
      v34 = DWORD1(v76);
    v35 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v34, (uint64_t)L"UNTIL", 0, -1);
    v69[5] = L"UNTIL";
    if (v35)
    {
      if ((v76 & 0x8000u) == 0)
        v36 = (unsigned __int16)v76 >> 5;
      else
        v36 = DWORD1(v76);
      v37 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v36, (uint64_t)L"BYMONTH", 0, -1);
      v69[4] = L"BYMONTH";
      if (v37)
      {
        if ((v76 & 0x8000u) == 0)
          v38 = (unsigned __int16)v76 >> 5;
        else
          v38 = DWORD1(v76);
        v39 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v38, (uint64_t)"B", 0, -1);
        v69[3] = "B";
        if (!v39)
        {
          if ((v71 & 0x8000u) == 0)
            v49 = (unsigned __int16)v71 >> 5;
          else
            v49 = DWORD1(v71);
          if (v49 - 5 < 0xFFFFFFFD)
            goto LABEL_132;
          if (v49 < 3)
            goto LABEL_121;
          v50 = (unsigned __int16 *)&v71 + 1;
          if ((v71 & 2) == 0)
            v50 = (unsigned __int16 *)v72;
          v51 = *v50;
          if (v51 != 43)
          {
            if (v51 == 45)
            {
              v52 = -1;
LABEL_117:
              v56 = sub_18BDC83E0((uint64_t)&v70, v49 - 3, 1, a8);
              if (*a8 > 0 || !v56 || v56 > 4)
                goto LABEL_132;
              *a4 = v56 * v52;
              icu::UnicodeString::doReplace((uint64_t)&v70, 0, v49 - 2, 0, 0, 0);
LABEL_121:
              v57 = -7;
              v58 = "S";
              while (1)
              {
                v59 = (v71 & 0x8000u) == 0 ? (unsigned __int16)v71 >> 5 : DWORD1(v71);
                v60 = icu::UnicodeString::doCompare((uint64_t)&v70, 0, v59, (uint64_t)v58, 0, 2);
                v69[1] = v58;
                if (!v60)
                  break;
                v58 += 6;
                if (__CFADD__(v57++, 1))
                  goto LABEL_132;
              }
              *a3 = v57 + 8;
              continue;
            }
            if (v49 == 4)
              goto LABEL_132;
          }
          v52 = 1;
          goto LABEL_117;
        }
        if ((v76 & 0x8000u) == 0)
          v40 = (unsigned __int16)v76 >> 5;
        else
          v40 = DWORD1(v76);
        v41 = icu::UnicodeString::doCompare((uint64_t)&v75, 0, v40, (uint64_t)L"BYMONTHDAY", 0, -1);
        v69[2] = L"BYMONTHDAY";
        if (!v41)
        {
          v13 = 0;
          v42 = 0;
          while (1)
          {
            if ((v42 & 0x80000000) != 0)
            {
              v44 = 0;
              v43 = (v71 & 0x8000) != 0 ? DWORD1(v71) : (unsigned __int16)v71 >> 5;
            }
            else if ((v71 & 0x8000) != 0)
            {
              v43 = DWORD1(v71);
              v44 = SDWORD1(v71) >= (int)v42 ? v42 : DWORD1(v71);
            }
            else
            {
              v43 = (unsigned __int16)v71 >> 5;
              v44 = v43 >= v42 ? v42 : (unsigned __int16)v71 >> 5;
            }
            v45 = icu::UnicodeString::doIndexOf((uint64_t)&v70, 0x2Cu, v44, v43 - v44);
            v46 = v45;
            if (v45 == -1)
            {
              if ((__int16)v71 < 0)
                v46 = DWORD1(v71);
              else
                v46 = (unsigned __int16)v71 >> 5;
            }
            if (v13 >= *a6)
              break;
            *(_DWORD *)(a5 + 4 * v13) = sub_18BDC83E0((uint64_t)&v70, v42, v46 - v42, a8);
            v47 = *a8;
            if ((int)v47 > 0)
              goto LABEL_137;
            ++v13;
            v42 = v46 + 1;
            if (v45 == -1)
              goto LABEL_130;
          }
          v47 = 15;
          goto LABEL_136;
        }
      }
      else
      {
        if ((__int16)v71 < 0)
        {
          v48 = DWORD1(v71);
          if (SDWORD1(v71) > 2)
            goto LABEL_132;
        }
        else
        {
          if ((unsigned __int16)v71 > 0x5Fu)
            goto LABEL_132;
          v48 = (unsigned __int16)v71 >> 5;
        }
        v53 = sub_18BDC83E0((uint64_t)&v70, 0, v48, a8);
        *a2 = v53 - 1;
        v47 = *a8;
        if ((int)v47 > 0 || (v53 - 13) < 0xFFFFFFF4)
          goto LABEL_133;
      }
    }
    else
    {
      *a7 = sub_18BDC4814((uint64_t)&v70, 0, a8);
      v47 = *a8;
      if ((int)v47 >= 1)
        goto LABEL_137;
    }
LABEL_130:
    ;
  }
  while (v17 != -1);
  v47 = v64;
  if ((v64 & 1) != 0)
  {
LABEL_132:
    v47 = *a8;
LABEL_133:
    if ((int)v47 > 0)
      goto LABEL_137;
    v47 = 3;
LABEL_136:
    *a8 = v47;
    goto LABEL_137;
  }
LABEL_139:
  *a6 = v13;
LABEL_137:
  icu::UnicodeString::~UnicodeString((void *)v47, (icu::UnicodeString *)&v70);
  icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v75);
  return icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&v80);
}

icu::BasicTimeZone *vzone_openID(uint64_t a1, int a2)
{
  const icu::UnicodeString *v2;
  icu::BasicTimeZone *v3;
  void *v4;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, sizeof(v8));
  v7 = a1;
  icu::UnicodeString::UnicodeString(v8, a2 == -1, &v7);
  v6 = v7;
  v3 = icu::VTimeZone::createVTimeZoneByID((UChar **)v8, v2, &v6);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
  return v3;
}

icu::BasicTimeZone *vzone_openData(uint64_t a1, int a2, UErrorCode *a3)
{
  UErrorCode *v4;
  icu::BasicTimeZone *VTimeZone;
  void *v6;
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  memset(v9, 0, sizeof(v9));
  v8 = a1;
  icu::UnicodeString::UnicodeString(v9, a2 == -1, &v8);
  VTimeZone = icu::VTimeZone::createVTimeZone((icu::VTimeZone *)v9, a3, v4);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
  return VTimeZone;
}

uint64_t vzone_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t vzone_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t vzone_getTZURL(icu::VTimeZone *a1, void **a2, int *a3)
{
  uint64_t TZURL;
  char *v6;
  char v7;
  int v8;
  void *v9;
  UChar *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v15 = 0;
  v14 = 0u;
  v11 = (UChar *)off_1E2256B38;
  LOWORD(v12) = 2;
  TZURL = icu::VTimeZone::getTZURL(a1, &v11);
  v6 = 0;
  v7 = v12;
  if ((v12 & 0x8000u) == 0)
    v8 = (unsigned __int16)v12 >> 5;
  else
    v8 = DWORD1(v12);
  *a3 = v8;
  if ((v7 & 0x11) == 0)
  {
    if ((v7 & 2) != 0)
      v6 = (char *)&v12 + 2;
    else
      v6 = (char *)v13;
  }
  memcpy(*a2, v6, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
  return TZURL;
}

void *vzone_setTZURL(UChar **a1, uint64_t a2, int a3)
{
  void *v4;
  uint64_t v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  v6 = a2;
  icu::UnicodeString::UnicodeString(v7, a3 == -1, &v6);
  icu::VTimeZone::setTZURL(a1, (UChar **)v7);
  return icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
}

void *vzone_write(icu::VTimeZone *a1, _QWORD *a2, int *a3, UErrorCode *a4)
{
  int v6;
  void *v7;
  char *v8;
  void *v9;
  void (**v11)(icu::UnicodeString *__hidden);
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v15 = 0;
  v14 = 0u;
  v11 = off_1E2256B38;
  LOWORD(v12) = 2;
  icu::VTimeZone::write(a1, (icu::UnicodeString *)&v11, a4);
  v6 = (unsigned __int16)v12 >> 5;
  if ((v12 & 0x8000u) != 0)
    v6 = DWORD1(v12);
  *a3 = v6;
  v7 = uprv_malloc(v6);
  v8 = 0;
  *a2 = v7;
  if ((v12 & 0x11) == 0)
  {
    if ((v12 & 2) != 0)
      v8 = (char *)&v12 + 2;
    else
      v8 = (char *)v13;
  }
  memcpy(v7, v8, *a3);
  return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v11);
}

void *vzone_writeFromStart(icu::VTimeZone *a1, _QWORD *a2, int *a3, UErrorCode *a4, double a5)
{
  int v7;
  void *v8;
  char *v9;
  void *v10;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v16 = 0;
  v15 = 0u;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  icu::VTimeZone::write(a1, a5, (icu::UnicodeString *)&v12, a4);
  v7 = (unsigned __int16)v13 >> 5;
  if ((v13 & 0x8000u) != 0)
    v7 = DWORD1(v13);
  *a3 = v7;
  v8 = uprv_malloc(v7);
  v9 = 0;
  *a2 = v8;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0)
      v9 = (char *)&v13 + 2;
    else
      v9 = (char *)v14;
  }
  memcpy(v8, v9, *a3);
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
}

void *vzone_writeSimple(UChar **a1, _QWORD *a2, int *a3, UErrorCode *a4, double a5)
{
  int v7;
  void *v8;
  char *v9;
  void *v10;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v16 = 0;
  v15 = 0u;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  icu::VTimeZone::writeSimple(a1, a5, (icu::UnicodeString *)&v12, a4);
  v7 = (unsigned __int16)v13 >> 5;
  if ((v13 & 0x8000u) != 0)
    v7 = DWORD1(v13);
  *a3 = v7;
  v8 = uprv_malloc(v7);
  v9 = 0;
  *a2 = v8;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0)
      v9 = (char *)&v13 + 2;
    else
      v9 = (char *)v14;
  }
  memcpy(v8, v9, *a3);
  return icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v12);
}

uint64_t vzone_getOffset2(icu::VTimeZone *a1, unsigned __int8 a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, int a8, UErrorCode *a9)
{
  return icu::VTimeZone::getOffset(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

const UChar *icu::ZoneMeta::getCanonicalCLDRID(icu::ZoneMeta *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  const UChar *ID;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v11;
  char *v12;
  char *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  const icu::UnicodeString *v17;
  int v18;
  const UChar *StringByKey;
  const icu::UnicodeString *v20;
  const UChar *v21;
  int32_t v22;
  int v23;
  const UChar *v24;
  const icu::UnicodeString *v25;
  const UChar *v26;
  UChar *v27;
  int v28;
  char v29[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  _WORD v38[132];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v6 = *((unsigned __int16 *)this + 4);
  if ((v6 & 1) != 0)
    goto LABEL_7;
  v7 = (__int16)v6;
  v8 = v6 >> 5;
  if (v7 < 0)
    v8 = *((_DWORD *)this + 3);
  if (v8 >= 129)
    goto LABEL_7;
  v11 = atomic_load(&dword_1ECD28470);
  if (v11 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD28470))
  {
    v9 = dword_1ECD28474;
    if (dword_1ECD28474 >= 1)
    {
      ID = 0;
      goto LABEL_8;
    }
  }
  else
  {
    sub_18BDC9708((int *)a2);
    dword_1ECD28474 = *(_DWORD *)a2;
    icu::umtx_initImplPostInit(&dword_1ECD28470);
  }
  if (*(int *)a2 > 0)
    return 0;
  v28 = 0;
  memset(v38, 0, 258);
  v27 = v38;
  icu::UnicodeString::extract((uint64_t)this, &v27, 129, &v28);
  if (!uprv_isInvariantUString(v38, -1))
  {
LABEL_7:
    ID = 0;
    v9 = 1;
LABEL_8:
    *(_DWORD *)a2 = v9;
    return ID;
  }
  umtx_lock((icu::UMutex *)&unk_1ECD28478);
  ID = (const UChar *)uhash_get(qword_1ECD28450, (uint64_t)v38);
  umtx_unlock((std::mutex **)&unk_1ECD28478);
  if (ID)
    return ID;
  v37 = 0;
  v36 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  *(_OWORD *)v29 = 0u;
  icu::UnicodeString::extract((uint64_t)this, 0, 0x7FFFFFFFLL, v29, 129);
  v12 = &v29[1];
  if (v29[0])
  {
    v13 = &v29[1];
    do
    {
      v14 = *v13;
      if (v14 == 47)
      {
        v14 = 58;
        *v13 = 58;
      }
      ++v13;
    }
    while (v14);
  }
  v15 = (_QWORD *)ures_openDirect(0, (uint64_t)"keyTypeData", (uint64_t)&v28);
  v16 = (_QWORD *)ures_getByKey((uint64_t)v15, "typeMap", 0, &v28);
  ures_getByKey((uint64_t)v16, "timezone", (uint64_t)v16, &v28);
  ures_getByKey((uint64_t)v16, v29, (uint64_t)v16, &v28);
  if (v28 > 0)
  {
    v18 = 0;
LABEL_25:
    v28 = 0;
    ures_getByKey((uint64_t)v15, "typeAlias", (uint64_t)v16, &v28);
    ures_getByKey((uint64_t)v16, "timezone", (uint64_t)v16, &v28);
    StringByKey = ures_getStringByKey((uint64_t)v16, v29, 0, &v28);
    if (v28 > 0 || (ID = StringByKey) == 0)
    {
      v21 = icu::TimeZone::dereferOlsonLink(this, v20);
      ID = v21;
      if (v21)
      {
        v22 = u_strlen(v21);
        u_UCharsToChars(ID, v29, v22);
        v29[v22] = 0;
        if (v29[0])
        {
          do
          {
            v23 = *v12;
            if (v23 == 47)
            {
              v23 = 58;
              *v12 = 58;
            }
            ++v12;
          }
          while (v23);
        }
        v28 = 0;
        v24 = ures_getStringByKey((uint64_t)v16, v29, 0, &v28);
        if (v28 > 0)
          v18 = 1;
        else
          ID = v24;
      }
      else
      {
        *(_DWORD *)a2 = 1;
      }
    }
    goto LABEL_38;
  }
  ID = icu::TimeZone::findID(this, v17);
  v18 = 1;
  if (!ID)
    goto LABEL_25;
LABEL_38:
  ures_close(v16);
  ures_close(v15);
  if (*(int *)a2 <= 0)
  {
    umtx_lock((icu::UMutex *)&unk_1ECD28478);
    if (!uhash_get(qword_1ECD28450, (uint64_t)v38))
    {
      v26 = icu::TimeZone::findID(this, v25);
      if (v26)
        uhash_put(qword_1ECD28450, (uint64_t)v26, (uint64_t)ID, (int *)a2);
    }
    if (v18 && *(int *)a2 <= 0 && !uhash_get(qword_1ECD28450, (uint64_t)ID))
      uhash_put(qword_1ECD28450, (uint64_t)ID, (uint64_t)ID, (int *)a2);
    umtx_unlock((std::mutex **)&unk_1ECD28478);
  }
  return ID;
}

void sub_18BDC9708(int *a1)
{
  qword_1ECD28450 = (uint64_t)uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, a1);
  if (qword_1ECD28450)
  {
    if (*a1 < 1)
      goto LABEL_6;
  }
  else
  {
    *a1 = 7;
  }
  qword_1ECD28450 = 0;
LABEL_6:
  sub_18BDA1768(0x12u, (uint64_t)sub_18BDCB354);
}

const icu::UnicodeString *icu::ZoneMeta::getCanonicalCLDRID(icu::ZoneMeta *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  const UChar *CanonicalCLDRID;
  const UChar *v9;

  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, a3, (UErrorCode *)a3);
  if (*(int *)a3 > 0 || CanonicalCLDRID == 0)
  {
    icu::UnicodeString::setToBogus(a2);
  }
  else
  {
    v9 = CanonicalCLDRID;
    icu::UnicodeString::setTo(a2, 1, &v9, -1);
  }
  return a2;
}

const UChar *icu::ZoneMeta::getCanonicalCLDRID(icu::ZoneMeta *this, const icu::TimeZone *a2)
{
  const UChar *CanonicalCLDRID;
  UErrorCode *v4;
  void *v5;
  int v7;
  UChar *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  {
    return (const UChar *)*((_QWORD *)this + 19);
  }
  v7 = 0;
  v9 = 0u;
  v12 = 0;
  v11 = 0u;
  v10 = 0u;
  v8 = (UChar *)off_1E2256B38;
  LOWORD(v9) = 2;
  icu::UnicodeString::operator=(&v8, (UChar **)this + 1);
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID((icu::ZoneMeta *)&v8, (const icu::UnicodeString *)&v7, v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v8);
  return CanonicalCLDRID;
}

const icu::UnicodeString *icu::ZoneMeta::getIanaID(icu::ZoneMeta *this, const icu::UnicodeString *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  const UChar *CanonicalCLDRID;
  const UChar *v8;
  int32_t v9;
  uint64_t v10;
  int v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const UChar *StringByKey;
  const UChar **v16;
  void *v17;
  const UChar *v19;
  const UChar *v20;
  const UChar *v21;
  const UChar *v22;
  int v23;
  int v24;
  _OWORD v25[8];
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  _DWORD v36[18];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, a3, (UErrorCode *)a3);
  if (*(int *)a3 > 0 || CanonicalCLDRID == 0)
  {
    icu::UnicodeString::setToBogus(a2);
  }
  else
  {
    v8 = CanonicalCLDRID;
    v24 = 0;
    memset(v36, 0, 64);
    icu::UnicodeString::UnicodeString((uint64_t)v36, (uint64_t)CanonicalCLDRID);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v25, "/");
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v27, ":");
    if (SLOWORD(v36[2]) >= 0)
      v9 = LOWORD(v36[2]) >> 5;
    else
      v9 = v36[3];
    if ((SWORD4(v25[0]) & 0x8000u) == 0)
      v10 = WORD4(v25[0]) >> 5;
    else
      v10 = HIDWORD(v25[0]);
    v11 = WORD4(v27) >> 5;
    if (SWORD4(v27) < 0)
      v11 = HIDWORD(v27);
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)v36, 0, v9, (const icu::UnicodeString *)v25, 0, v10, (const icu::UnicodeString *)&v27, 0, v11);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v27);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v25);
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    if (SLOWORD(v36[2]) >= 0)
      v14 = LOWORD(v36[2]) >> 5;
    else
      v14 = v36[3];
    icu::UnicodeString::extract((uint64_t)v36, 0, v14, (char *)&v27, 129);
    v26 = 0;
    memset(v25, 0, sizeof(v25));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v25);
    ures_openDirectFillIn(v25, 0, "keyTypeData", &v24);
    ures_getByKey((uint64_t)v25, "ianaMap", (uint64_t)v25, &v24);
    ures_getByKey((uint64_t)v25, "timezone", (uint64_t)v25, &v24);
    v23 = 0;
    StringByKey = ures_getStringByKey((uint64_t)v25, (const char *)&v27, &v23, &v24);
    if (v24 <= 0)
    {
      v22 = StringByKey;
      icu::UnicodeString::setTo(a2, 1, &v22, -1);
      v20 = v22;
      v16 = &v20;
    }
    else
    {
      v21 = v8;
      icu::UnicodeString::setTo(a2, 1, &v21, -1);
      v19 = v21;
      v16 = &v19;
    }
    icu::StackUResourceBundle::~StackUResourceBundle(v16, (icu::StackUResourceBundle *)v25);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v36);
  }
  return a2;
}

const icu::UnicodeString *icu::ZoneMeta::getCanonicalCountry(int32_t *this, const icu::UnicodeString *a2, UErrorCode *a3, signed __int8 *a4)
{
  const UChar *Region;
  UChar *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  const UChar *StringByKey;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int32_t v30;
  int32_t v31;
  UErrorCode *v32;
  UErrorCode *v33;
  uint64_t v34;
  int v35;
  _QWORD v36[2];
  uint64_t v37;
  int32_t v38;
  int v39;
  char v40[2];
  char v41;
  UErrorCode v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a3)
    *(_BYTE *)a3 = 0;
  Region = icu::TimeZone::getRegion((icu::TimeZone *)this, a2, a3);
  if (!Region || (v8 = (UChar *)Region, !u_strcmp((const UChar *)"0", Region)))
  {
    icu::UnicodeString::setToBogus(a2);
    return a2;
  }
  icu::UnicodeString::unBogus((uint64_t)a2);
  v9 = *((unsigned __int16 *)a2 + 4);
  v10 = (__int16)v9;
  v11 = v9 >> 5;
  if (v10 >= 0)
    v12 = v11;
  else
    v12 = *((unsigned int *)a2 + 3);
  icu::UnicodeString::doReplace((uint64_t)a2, 0, v12, (uint64_t)v8, 0, 0xFFFFFFFFLL);
  if (a3)
  {
    v41 = 0;
    *(_WORD *)v40 = 0;
    v39 = 0;
    v13 = atomic_load(&dword_1EE00A2F0);
    if (v13 == 2 || !icu::umtx_initImplPreInit(&dword_1EE00A2F0))
    {
      if (dword_1EE00A2F4 > 0)
        return a2;
      goto LABEL_28;
    }
    v16 = icu::UMemory::operator new(v15, (icu::UMemory *)0x28, v14);
    if (v16)
    {
      v16 = (uint64_t *)icu::UVector::UVector((uint64_t)v16, 0, (uint64_t)uhash_compareUChars, &v39);
    }
    else
    {
      v18 = 7;
      v39 = 7;
    }
    qword_1EE00A2E0 = (uint64_t)v16;
    v20 = icu::UMemory::operator new((uint64_t *)v18, (icu::UMemory *)0x28, v17);
    if (v20)
    {
      v20 = (uint64_t *)icu::UVector::UVector((uint64_t)v20, 0, (uint64_t)uhash_compareUChars, &v39);
      qword_1EE00A2E8 = (uint64_t)v20;
      if (v39 < 1)
        goto LABEL_27;
    }
    else
    {
      v39 = 7;
      qword_1EE00A2E8 = 0;
    }
    if (qword_1EE00A2E0)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE00A2E0 + 8))(qword_1EE00A2E0);
      v20 = (uint64_t *)qword_1EE00A2E8;
    }
    if (v20)
      (*(void (**)(uint64_t *))(*v20 + 8))(v20);
    qword_1EE00A2E0 = 0;
    qword_1EE00A2E8 = 0;
LABEL_27:
    sub_18BDA1768(0x12u, (uint64_t)sub_18BDCB354);
    dword_1EE00A2F4 = v39;
    icu::umtx_initImplPostInit(&dword_1EE00A2F0);
    if (v39 >= 1)
      return a2;
LABEL_28:
    umtx_lock((icu::UMutex *)&unk_1ECD28478);
    if ((icu::UVector::indexOf((icu::UVector *)qword_1EE00A2E0, (uint64_t)v8, 0) & 0x80000000) == 0)
    {
LABEL_29:
      umtx_unlock((std::mutex **)&unk_1ECD28478);
      *(_BYTE *)a3 = 1;
      return a2;
    }
    v21 = icu::UVector::indexOf((icu::UVector *)qword_1EE00A2E8, (uint64_t)v8, 0);
    umtx_unlock((std::mutex **)&unk_1ECD28478);
    if (v21 < 0)
    {
      u_UCharsToChars(v8, v40, 2);
      v22 = icu::TimeZone::createTimeZoneIDEnumeration(2, v40, 0, &v39);
      v23 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v22 + 32))(v22, &v39);
      v24 = v39;
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      umtx_lock((icu::UMutex *)&unk_1ECD28478);
      v42[0] = U_ZERO_ERROR;
      if (v24 <= 0 && v23 == 1)
      {
        if ((icu::UVector::indexOf((icu::UVector *)qword_1EE00A2E0, (uint64_t)v8, 0) & 0x80000000) != 0)
          icu::UVector::addElement((icu::UVector *)qword_1EE00A2E0, v8, v42);
        goto LABEL_29;
      }
      if ((icu::UVector::indexOf((icu::UVector *)qword_1EE00A2E8, (uint64_t)v8, 0) & 0x80000000) != 0)
        icu::UVector::addElement((icu::UVector *)qword_1EE00A2E8, v8, v42);
      umtx_unlock((std::mutex **)&unk_1ECD28478);
    }
    v38 = 0;
    if (!v40[0])
      u_UCharsToChars(v8, v40, 2);
    v25 = (_QWORD *)ures_openDirect(0, (uint64_t)"metaZones", (uint64_t)&v39);
    ures_getByKey((uint64_t)v25, "primaryZones", (uint64_t)v25, &v39);
    StringByKey = ures_getStringByKey((uint64_t)v25, v40, &v38, &v39);
    if (v39 <= 0)
    {
      v27 = (uint64_t)StringByKey;
      v28 = *((unsigned __int16 *)this + 4);
      v29 = (__int16)v28;
      v30 = v28 >> 5;
      if (v29 >= 0)
        v31 = v30;
      else
        v31 = this[3];
      v36[1] = StringByKey;
      if (icu::UnicodeString::doCompare((uint64_t)this, 0, v31, (uint64_t)StringByKey, 0, v38))
      {
        v43 = 0u;
        v44 = 0u;
        v46 = 0;
        v45 = 0u;
        *(_QWORD *)v42 = off_1E2256B38;
        LOWORD(v43) = 2;
        icu::TimeZone::getCanonicalID((icu::TimeZone *)this, (const icu::UnicodeString *)v42, (icu::UnicodeString *)&v39, v32, v33);
        v34 = v39;
        if (v39 <= 0)
        {
          v37 = v27;
          v35 = sub_18BBB1AB4((uint64_t)v42, &v37, v38);
          v36[0] = v37;
          v34 = (uint64_t)v36;
          if (!v35)
          {
            v34 = 1;
            *(_BYTE *)a3 = 1;
          }
        }
        icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)v42);
      }
      else
      {
        *(_BYTE *)a3 = 1;
      }
    }
    ures_close(v25);
  }
  return a2;
}

const icu::UnicodeString *icu::ZoneMeta::getMetazoneID(icu::ZoneMeta *this, const icu::UnicodeString *a2, double a3, icu::UnicodeString *a4)
{
  uint64_t MetazoneMappings;
  icu::UVector *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;

  MetazoneMappings = icu::ZoneMeta::getMetazoneMappings(this, a2);
  if (MetazoneMappings && (v7 = (icu::UVector *)MetazoneMappings, *(int *)(MetazoneMappings + 8) >= 1))
  {
    v8 = 0;
    while (1)
    {
      v9 = icu::UVector::elementAt(v7, v8);
      if (*(double *)(v9 + 8) <= a3 && *(double *)(v9 + 16) > a3)
        break;
      if ((signed int)++v8 >= *((_DWORD *)v7 + 2))
        goto LABEL_7;
    }
    v11 = *(_QWORD *)v9;
    icu::UnicodeString::unBogus((uint64_t)a2);
    v12 = *((unsigned __int16 *)a2 + 4);
    v13 = (__int16)v12;
    v14 = v12 >> 5;
    if (v13 >= 0)
      v15 = v14;
    else
      v15 = *((unsigned int *)a2 + 3);
    icu::UnicodeString::doReplace((uint64_t)a2, 0, v15, v11, 0, 0xFFFFFFFFLL);
  }
  else
  {
LABEL_7:
    icu::UnicodeString::setToBogus(a2);
  }
  return a2;
}

uint64_t icu::ZoneMeta::getMetazoneMappings(icu::ZoneMeta *this, const icu::UnicodeString *a2)
{
  uint64_t MetazoneMappings;
  unsigned int v4;
  int32x2_t *v5;
  int v6;
  const icu::UnicodeString *v7;
  uint64_t v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  UChar *v14;
  UChar *v15;
  UChar *v16;
  int v17;
  _OWORD v18[16];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v16 = (UChar *)v18;
  icu::UnicodeString::extract((uint64_t)this, &v16, 129, &v17);
  MetazoneMappings = 0;
  if (v17 <= 0 && v17 != -124)
  {
    v4 = atomic_load(&dword_1ECD284C8);
    if (v4 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD284C8))
    {
      MetazoneMappings = 0;
      if (dword_1ECD284CC > 0 || v17 > 0)
        return MetazoneMappings;
    }
    else
    {
      sub_18BDA1768(0x12u, (uint64_t)sub_18BDCB354);
      v5 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, &v17);
      qword_1ECD28458 = (uint64_t)v5;
      v6 = v17;
      if (v17 < 1)
      {
        uhash_setKeyDeleter((uint64_t)v5, (uint64_t)j__uprv_free_6);
        uhash_setValueDeleter(qword_1ECD28458, (uint64_t)uprv_deleteUObject);
        v6 = v17;
      }
      else
      {
        qword_1ECD28458 = 0;
      }
      dword_1ECD284CC = v6;
      icu::umtx_initImplPostInit(&dword_1ECD284C8);
      if (v17 >= 1)
        return 0;
    }
    umtx_lock((icu::UMutex *)&unk_1ECD28478);
    MetazoneMappings = uhash_get(qword_1ECD28458, (uint64_t)v18);
    umtx_unlock((std::mutex **)&unk_1ECD28478);
    if (!MetazoneMappings)
    {
      MetazoneMappings = (uint64_t)icu::ZoneMeta::createMetazoneMappings(this, v7);
      if (MetazoneMappings)
      {
        umtx_lock((icu::UMutex *)&unk_1ECD28478);
        v8 = uhash_get(qword_1ECD28458, (uint64_t)v18);
        if (!v8)
        {
          v10 = *((unsigned __int16 *)this + 4);
          v11 = (__int16)v10;
          v12 = v10 >> 5;
          if (v11 < 0)
            v12 = *((_DWORD *)this + 3);
          v13 = v12 + 1;
          v14 = (UChar *)uprv_malloc(2 * (int)(v12 + 1));
          v8 = (uint64_t)v14;
          if (v14)
          {
            v15 = v14;
            icu::UnicodeString::extract((uint64_t)this, &v15, v13, &v17);
            uhash_put(qword_1ECD28458, v8, MetazoneMappings, &v17);
            if (v17 < 1)
              goto LABEL_17;
            v8 = 0;
          }
        }
        (*(void (**)(uint64_t))(*(_QWORD *)MetazoneMappings + 8))(MetazoneMappings);
        MetazoneMappings = v8;
LABEL_17:
        umtx_unlock((std::mutex **)&unk_1ECD28478);
      }
    }
  }
  return MetazoneMappings;
}

icu::UVector *icu::ZoneMeta::createMetazoneMappings(icu::ZoneMeta *this, const icu::UnicodeString *a2)
{
  _QWORD *v3;
  UErrorCode *v4;
  icu::UVector *v5;
  uint64_t v6;
  char *v7;
  char *NextResource;
  const UChar *StringByIndex;
  const UChar *v10;
  const UChar *v11;
  double v12;
  unint64_t v13;
  double v14;
  double v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  icu::UVector *v21;
  UErrorCode v22;
  void *v23;
  UErrorCode v25;
  char v26[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  void (**v35)(icu::UnicodeString *__hidden);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v25 = U_ZERO_ERROR;
  v36 = 0u;
  v39 = 0;
  v38 = 0u;
  v37 = 0u;
  v35 = off_1E2256B38;
  LOWORD(v36) = 2;
  v3 = (_QWORD *)ures_openDirect(0, (uint64_t)"metaZones", (uint64_t)&v25);
  ures_getByKey((uint64_t)v3, "metazoneInfo", (uint64_t)v3, (int *)&v25);
  icu::ZoneMeta::getCanonicalCLDRID(this, (const icu::UnicodeString *)&v35, (icu::UnicodeString *)&v25, v4);
  v5 = 0;
  if (v25 > U_ZERO_ERROR)
    goto LABEL_37;
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  if ((v36 & 0x8000u) == 0)
    v6 = (unsigned __int16)v36 >> 5;
  else
    v6 = DWORD1(v36);
  v7 = v26;
  v26[(int)icu::UnicodeString::extract((uint64_t)&v35, 0, v6, v26, 129)] = 0;
  while (*v7 == 47)
  {
    *v7 = 58;
LABEL_10:
    ++v7;
  }
  if (*v7)
    goto LABEL_10;
  ures_getByKey((uint64_t)v3, v26, (uint64_t)v3, (int *)&v25);
  if (v25 <= U_ZERO_ERROR)
  {
    v5 = 0;
    NextResource = 0;
    while (ures_hasNext((_BOOL8)v3))
    {
      NextResource = ures_getNextResource((uint64_t)v3, NextResource, (int *)&v25);
      StringByIndex = ures_getStringByIndex((uint64_t)NextResource, 0, 0, (int *)&v25);
      if (ures_getSize((uint64_t)NextResource) == 3)
      {
        v10 = ures_getStringByIndex((uint64_t)NextResource, 1, 0, (int *)&v25);
        v11 = ures_getStringByIndex((uint64_t)NextResource, 2, 0, (int *)&v25);
      }
      else
      {
        v10 = (const UChar *)"1";
        v11 = (const UChar *)L"9999-12-31 23:59";
      }
      if (v25 < U_ILLEGAL_ARGUMENT_ERROR
        && (v12 = sub_18BDCA6A0(v10, (int *)&v25), v14 = sub_18BDCA6A0(v11, (int *)&v25), v25 <= U_ZERO_ERROR))
      {
        v15 = v14;
        v16 = icu::UMemory::operator new((uint64_t *)v25, (icu::UMemory *)0x18, v13);
        v18 = v16;
        v19 = (uint64_t *)v25;
        if (!v16 && v25 <= U_ZERO_ERROR)
        {
          v25 = U_MEMORY_ALLOCATION_ERROR;
          break;
        }
        if (v25 > U_ZERO_ERROR)
        {
          v21 = v5;
          if (!v16)
            break;
          goto LABEL_35;
        }
        *v16 = (uint64_t)StringByIndex;
        *((double *)v16 + 1) = v12;
        *((double *)v16 + 2) = v15;
        if (!v5)
        {
          v20 = icu::UMemory::operator new(v19, (icu::UMemory *)0x28, v17);
          if (!v20)
          {
            v21 = 0;
            if (v25 <= U_ZERO_ERROR)
              v25 = U_MEMORY_ALLOCATION_ERROR;
LABEL_35:
            icu::UMemory::operator delete(v18);
            v5 = v21;
            break;
          }
          v5 = (icu::UVector *)v20;
          icu::UVector::UVector((uint64_t)v20, (uint64_t)sub_18BDCA88C, 0, (int *)&v25);
          if (v25 > U_ZERO_ERROR)
          {
            (*(void (**)(icu::UVector *))(*(_QWORD *)v5 + 8))(v5);
            v21 = 0;
            v5 = 0;
            if (v25 >= U_ILLEGAL_ARGUMENT_ERROR)
              goto LABEL_35;
          }
        }
        icu::UVector::adoptElement(v5, v18, &v25);
        if (v25 >= U_ILLEGAL_ARGUMENT_ERROR)
          break;
      }
      else
      {
        v25 = U_ZERO_ERROR;
      }
    }
    ures_close(NextResource);
  }
  else
  {
    v5 = 0;
  }
LABEL_37:
  ures_close(v3);
  v22 = v25;
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v35);
  if (v22 >= U_ILLEGAL_ARGUMENT_ERROR && v5)
  {
    (*(void (**)(icu::UVector *))(*(_QWORD *)v5 + 8))(v5);
    return 0;
  }
  return v5;
}

double sub_18BDCA6A0(const UChar *a1, int *a2)
{
  double v2;
  int32_t v5;
  int32_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  double v25;

  v2 = 0.0;
  if (*a2 <= 0)
  {
    v5 = u_strlen(a1);
    v6 = v5;
    if (v5 != 10 && v5 != 16)
    {
LABEL_42:
      *a2 = 3;
      return v2;
    }
    v7 = *a2;
    if (*a2 <= 0)
    {
      v11 = 0;
      v9 = 0;
      do
      {
        v12 = a1[v11] - 48;
        if (v12 >= 0xA)
          v12 = -1;
        if ((v12 & 0x80000000) != 0)
        {
          v8 = 0;
          goto LABEL_26;
        }
        v9 = v12 + 10 * v9;
        v13 = v11++ >= 3;
      }
      while (!v13);
      v8 = 0;
      v14 = 5;
      while (1)
      {
        v15 = a1[v14] - 48;
        if (v15 >= 0xA)
          v15 = -1;
        if ((v15 & 0x80000000) != 0)
          break;
        v8 = v15 + 10 * v8;
        v13 = v14++ >= 6;
        if (v13)
        {
          v10 = 0;
          v16 = 8;
          while (1)
          {
            v17 = a1[v16] - 48;
            if (v17 >= 0xA)
              v17 = -1;
            if ((v17 & 0x80000000) != 0)
              goto LABEL_42;
            v10 = v17 + 10 * v10;
            v18 = v16++ > 8;
            if (v18)
              goto LABEL_27;
          }
        }
      }
LABEL_26:
      v10 = 0;
      v7 = 3;
      *a2 = 3;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
    }
LABEL_27:
    if (v6 == 16)
    {
      if (v7 <= 0)
      {
        v19 = 0;
        v20 = 11;
        while (1)
        {
          v21 = a1[v20] - 48;
          if (v21 >= 0xA)
            v21 = -1;
          if ((v21 & 0x80000000) != 0)
            goto LABEL_42;
          v19 = v21 + 10 * v19;
          v13 = v20++ >= 0xC;
          if (v13)
          {
            v22 = 0;
            v23 = 14;
            while (1)
            {
              v24 = a1[v23] - 48;
              if (v24 >= 0xA)
                v24 = -1;
              if ((v24 & 0x80000000) != 0)
                break;
              v22 = v24 + 10 * v22;
              v18 = v23++ > 0xE;
              if (v18)
              {
                v25 = (double)(int)(3600000 * v19);
                v2 = (double)(int)(60000 * v22);
                return v25 + sub_18BCE8360(v9, v8 - 1, v10) * 86400000.0 + v2;
              }
            }
            goto LABEL_42;
          }
        }
      }
    }
    else
    {
      v2 = 0.0;
      v25 = 0.0;
      if (v7 <= 0)
        return v25 + sub_18BCE8360(v9, v8 - 1, v10) * 86400000.0 + v2;
    }
  }
  return v2;
}

void sub_18BDCA88C(void *a1)
{
  if (a1)
    icu::UMemory::operator delete(a1);
}

const icu::UnicodeString *icu::ZoneMeta::getZoneIdByMetazone(icu::ZoneMeta *this, const icu::UnicodeString *a2, const icu::UnicodeString *a3, icu::UnicodeString *a4)
{
  unsigned int v5;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  unsigned int v11;
  uint64_t v12;
  const UChar *StringByKey;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v5 = *((unsigned __int16 *)this + 4);
  if ((v5 & 1) != 0)
    goto LABEL_8;
  if ((v5 & 0x8000) != 0)
  {
    v7 = *((unsigned int *)this + 3);
    if ((int)v7 > 128)
    {
LABEL_8:
      icu::UnicodeString::setToBogus(a3);
      return a3;
    }
  }
  else
  {
    v7 = v5 >> 5;
    if (v7 >= 0x81)
      goto LABEL_8;
  }
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  v20[(int)icu::UnicodeString::extract((uint64_t)this, 0, v7, v20, 129)] = 0;
  v8 = (_QWORD *)ures_openDirect(0, (uint64_t)"metaZones", (uint64_t)&v19 + 4);
  ures_getByKey((uint64_t)v8, "mapTimezones", (uint64_t)v8, (int *)&v19 + 1);
  ures_getByKey((uint64_t)v8, v20, (uint64_t)v8, (int *)&v19 + 1);
  v9 = HIDWORD(v19);
  if (SHIDWORD(v19) >= 1)
  {
    ures_close(v8);
    goto LABEL_8;
  }
  if ((*((__int16 *)a2 + 4) & 0x80000000) == 0)
  {
    v11 = *((unsigned __int16 *)a2 + 4);
    if ((v11 & 0xFFC0 | 0x20) == 0x60)
    {
      v12 = v11 >> 5;
      goto LABEL_14;
    }
LABEL_16:
    StringByKey = 0;
    goto LABEL_17;
  }
  v12 = *((unsigned int *)a2 + 3);
  if ((v12 & 0xFFFFFFFE) != 2)
    goto LABEL_16;
LABEL_14:
  v20[(int)icu::UnicodeString::extract((uint64_t)a2, 0, v12, v20, 129)] = 0;
  StringByKey = ures_getStringByKey((uint64_t)v8, v20, (int *)&v19, (int *)&v19 + 1);
  v9 = HIDWORD(v19);
  if (HIDWORD(v19) == 2)
  {
    v9 = 0;
    HIDWORD(v19) = 0;
  }
LABEL_17:
  if (v9 <= 0 && !StringByKey)
    StringByKey = ures_getStringByKey((uint64_t)v8, "001", (int *)&v19, (int *)&v19 + 1);
  ures_close(v8);
  if (!StringByKey)
    goto LABEL_8;
  v14 = v19;
  icu::UnicodeString::unBogus((uint64_t)a3);
  v15 = *((unsigned __int16 *)a3 + 4);
  v16 = (__int16)v15;
  v17 = v15 >> 5;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *((unsigned int *)a3 + 3);
  icu::UnicodeString::doReplace((uint64_t)a3, 0, v18, (uint64_t)StringByKey, 0, v14);
  return a3;
}

uint64_t icu::ZoneMeta::getAvailableMetazoneIDs(icu::ZoneMeta *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)&unk_1ECD284D0);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD284D0))
  {
    sub_18BDCAAFC();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD284D0);
  }
  return qword_1ECD28460;
}

void sub_18BDCAAFC()
{
  int32x2_t *v0;
  unint64_t v1;
  uint64_t *v3;
  icu::UVector *v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *Key;
  size_t v8;
  int32_t v9;
  UChar *v10;
  UChar *v11;
  UErrorCode v12;
  _OWORD v13[8];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  sub_18BDA1768(0x12u, (uint64_t)sub_18BDCB354);
  v12 = U_ZERO_ERROR;
  v0 = uhash_open((uint64_t)uhash_hashUChars, (uint64_t)uhash_compareUChars, 0, (int *)&v12);
  qword_1ECD28468 = (uint64_t)v0;
  if (v12 > U_ZERO_ERROR || v0 == 0)
    goto LABEL_9;
  v3 = icu::UMemory::operator new((uint64_t *)v12, (icu::UMemory *)0x28, v1);
  if (!v3)
  {
LABEL_8:
    qword_1ECD28460 = 0;
    uhash_close((void **)qword_1ECD28468);
LABEL_9:
    qword_1ECD28468 = 0;
    return;
  }
  v4 = (icu::UVector *)icu::UVector::UVector((uint64_t)v3, 0, (uint64_t)uhash_compareUChars, (int *)&v12);
  qword_1ECD28460 = (uint64_t)v4;
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    (*(void (**)(icu::UVector *))(*(_QWORD *)v4 + 8))(v4);
    goto LABEL_8;
  }
  icu::UVector::setDeleter(v4, uprv_free);
  v5 = (_QWORD *)ures_openDirect(0, (uint64_t)"metaZones", (uint64_t)&v12);
  v6 = (_QWORD *)ures_getByKey((uint64_t)v5, "mapTimezones", 0, (int *)&v12);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v13);
  if (v12 <= U_ZERO_ERROR)
  {
    do
    {
      if (!ures_hasNext((_BOOL8)v6))
        break;
      ures_getNextResource((uint64_t)v6, (char *)v13, (int *)&v12);
      if (v12 > U_ZERO_ERROR)
        break;
      Key = (const char *)ures_getKey((uint64_t)v13);
      v8 = strlen(Key);
      v9 = v8;
      v10 = (UChar *)uprv_malloc((uint64_t)((v8 << 32) + 0x100000000) >> 31);
      if (!v10)
      {
        v12 = U_MEMORY_ALLOCATION_ERROR;
        uprv_free(0);
        break;
      }
      v11 = v10;
      u_charsToUChars(Key, v10, v9);
      v11[v9] = 0;
      if (!uhash_get(qword_1ECD28468, (uint64_t)v11))
      {
        uhash_put(qword_1ECD28468, (uint64_t)v11, (uint64_t)v11, (int *)&v12);
        icu::UVector::adoptElement((icu::UVector *)qword_1ECD28460, v11, &v12);
        v11 = 0;
      }
      uprv_free(v11);
    }
    while (v12 < U_ILLEGAL_ARGUMENT_ERROR);
  }
  ures_close(v6);
  ures_close(v5);
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uhash_close((void **)qword_1ECD28468);
    if (qword_1ECD28460)
      (*(void (**)(uint64_t))(*(_QWORD *)qword_1ECD28460 + 8))(qword_1ECD28460);
    qword_1ECD28468 = 0;
    qword_1ECD28460 = 0;
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v13);
}

uint64_t icu::ZoneMeta::findMetaZoneID(UChar **this, const icu::UnicodeString *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t TerminatedBuffer;
  uint64_t v6;
  void *v7;
  _OWORD v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = atomic_load((unsigned int *)&unk_1ECD284D0);
  if (v3 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD284D0))
  {
    sub_18BDCAAFC();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD284D0);
  }
  if (!qword_1ECD28468)
    return 0;
  memset(v9, 0, sizeof(v9));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v9, this);
  v4 = qword_1ECD28468;
  TerminatedBuffer = icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v9);
  v6 = uhash_get(v4, TerminatedBuffer);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  return v6;
}

icu::SimpleTimeZone *icu::ZoneMeta::createCustomTimeZone(icu::ZoneMeta *this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, icu::UnicodeString *a6)
{
  int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t *v9;
  icu::SimpleTimeZone *v10;
  void *v11;
  icu::SimpleTimeZone *v12;
  UChar *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v6 = (int)this;
  v19 = *MEMORY[0x1E0C80C00];
  if ((int)this >= 0)
    v7 = this;
  else
    v7 = -(int)this;
  v15 = 0u;
  v16 = 0u;
  v18 = 0;
  v17 = 0u;
  v14 = (UChar *)off_1E2256B38;
  LOWORD(v15) = 2;
  icu::ZoneMeta::formatCustomID((icu::ZoneMeta *)(v7 / 0x36EE80), (unsigned __int16)(v7 / 0xEA60) % 0x3Cu, v7 / 0x3E8 - 60 * ((71582789 * (unint64_t)(v7 / 0x3E8)) >> 32), this >> 31, (icu::UnicodeString *)&v14, a6);
  v10 = (icu::SimpleTimeZone *)icu::UMemory::operator new(v9, (icu::UMemory *)0xA0, v8);
  v12 = v10;
  if (v10)
    icu::SimpleTimeZone::SimpleTimeZone(v10, v6, &v14);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v14);
  return v12;
}

icu::UnicodeString *icu::ZoneMeta::formatCustomID(icu::ZoneMeta *this, unsigned int a2, int a3, int a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  __int16 v17;

  v10 = this;
  icu::UnicodeString::unBogus((uint64_t)a5);
  v11 = *((unsigned __int16 *)a5 + 4);
  v12 = (__int16)v11;
  v13 = v11 >> 5;
  if (v12 >= 0)
    v14 = v13;
  else
    v14 = *((unsigned int *)a5 + 3);
  icu::UnicodeString::doReplace((uint64_t)a5, 0, v14, (uint64_t)L"GMT", 0, 0xFFFFFFFFLL);
  if (a2 | v10)
  {
    if (a4)
      v15 = 45;
    else
      v15 = 43;
    v17 = v15;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    v17 = ((429496730 * (unint64_t)(v10 - 100 * ((42949673 * (unint64_t)v10) >> 32))) >> 32) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    v17 = (v10 - 10 * ((429496730 * (unint64_t)v10) >> 32)) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    v17 = 58;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    v17 = ((429496730 * (unint64_t)(a2 - 100 * ((42949673 * (unint64_t)a2) >> 32))) >> 32) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    v17 = (a2 - 10 * ((429496730 * (unint64_t)a2) >> 32)) | 0x30;
    icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    if (a3)
    {
      v17 = 58;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
      v17 = ((103 * (a3 - 100 * ((41 * a3) >> 12))) >> 10) | 0x30;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
      v17 = (a3 - 10 * ((205 * a3) >> 11)) | 0x30;
      icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v17, 0, 1);
    }
  }
  return a5;
}

const UChar *icu::ZoneMeta::getShortID(const UChar **this, const icu::TimeZone *a2)
{
  const UChar *v3;

  {
    return icu::ZoneMeta::getShortIDFromCanonical(v3);
  }
  else
  {
    return 0;
  }
}

const UChar *icu::ZoneMeta::getShortIDFromCanonical(const UChar *a1)
{
  int32_t v2;
  char *v3;
  int v4;
  _QWORD *v5;
  const UChar *StringByKey;
  int v8;
  char v9[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = u_strlen(a1);
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  u_UCharsToChars(a1, v9, v2);
  v9[v2] = 0;
  if (v9[0])
  {
    v3 = &v9[1];
    do
    {
      v4 = *v3;
      if (v4 == 47)
      {
        v4 = 58;
        *v3 = 58;
      }
      ++v3;
    }
    while (v4);
  }
  v8 = 0;
  v5 = (_QWORD *)ures_openDirect(0, (uint64_t)"keyTypeData", (uint64_t)&v8);
  ures_getByKey((uint64_t)v5, "typeMap", (uint64_t)v5, &v8);
  ures_getByKey((uint64_t)v5, "timezone", (uint64_t)v5, &v8);
  StringByKey = ures_getStringByKey((uint64_t)v5, v9, 0, &v8);
  ures_close(v5);
  return StringByKey;
}

const UChar *icu::ZoneMeta::getShortID(icu::ZoneMeta *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  const UChar *CanonicalCLDRID;
  int v6;

  v6 = 0;
  CanonicalCLDRID = icu::ZoneMeta::getCanonicalCLDRID(this, (const icu::UnicodeString *)&v6, a3);
  if (v6 > 0 || CanonicalCLDRID == 0)
    return 0;
  else
    return icu::ZoneMeta::getShortIDFromCanonical(CanonicalCLDRID);
}

uint64_t sub_18BDCB354()
{
  if (qword_1ECD28450)
  {
    uhash_close((void **)qword_1ECD28450);
    qword_1ECD28450 = 0;
  }
  atomic_store(0, &dword_1ECD28470);
  if (qword_1ECD28458)
  {
    uhash_close((void **)qword_1ECD28458);
    qword_1ECD28458 = 0;
  }
  atomic_store(0, &dword_1ECD284C8);
  if (qword_1ECD28468)
  {
    uhash_close((void **)qword_1ECD28468);
    qword_1ECD28468 = 0;
  }
  if (qword_1ECD28460)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ECD28460 + 8))(qword_1ECD28460);
  qword_1ECD28460 = 0;
  atomic_store(0, (unsigned int *)&unk_1ECD284D0);
  if (qword_1EE00A2E0)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE00A2E0 + 8))(qword_1EE00A2E0);
  qword_1EE00A2E0 = 0;
  if (qword_1EE00A2E8)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE00A2E8 + 8))(qword_1EE00A2E8);
  qword_1EE00A2E8 = 0;
  atomic_store(0, &dword_1EE00A2F0);
  return 1;
}

uint64_t zrule_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t zrule_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void *zrule_getName(UChar **a1, void *a2, int a3)
{
  UChar **Name;
  int v6;
  const void *v7;
  void *v8;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = a2;
  icu::UnicodeString::UnicodeString(&v11, a3 == -1, &v10);
  Name = icu::TimeZoneRule::getName(a1, (UChar **)&v11);
  icu::UnicodeString::operator=((UChar **)&v11, Name);
  v6 = HIDWORD(v11);
  if ((BYTE8(v11) & 0x11) != 0)
  {
    v7 = 0;
  }
  else if ((BYTE8(v11) & 2) != 0)
  {
    v7 = (const void *)((unint64_t)&v11 | 0xA);
  }
  else
  {
    v7 = (const void *)*((_QWORD *)&v12 + 1);
  }
  if ((SWORD4(v11) & 0x8000u) == 0)
    v6 = WORD4(v11) >> 5;
  memcpy(a2, v7, v6);
  return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11);
}

icu::InitialTimeZoneRule *izrule_open(uint64_t a1, int a2, int a3, int a4)
{
  unint64_t v6;
  icu::InitialTimeZoneRule *v7;
  void *v8;
  icu::InitialTimeZoneRule *v9;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[4];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  v12 = a1;
  icu::UnicodeString::UnicodeString(v13, a2 == -1, &v12);
  v11 = v12;
  v7 = (icu::InitialTimeZoneRule *)icu::UMemory::operator new(&v11, (icu::UMemory *)0x50, v6);
  v9 = v7;
  if (v7)
    icu::InitialTimeZoneRule::InitialTimeZoneRule(v7, (UChar **)v13, a3, a4);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v13);
  return v9;
}

uint64_t izrule_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t izrule_equals(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void *izrule_getName(UChar **a1, _QWORD *a2, int *a3)
{
  int v5;
  void *v6;
  char *v7;
  void *v8;
  UChar *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v14 = 0;
  v13 = 0u;
  v10 = (UChar *)off_1E2256B38;
  LOWORD(v11) = 2;
  icu::TimeZoneRule::getName(a1, &v10);
  v5 = (unsigned __int16)v11 >> 5;
  if ((v11 & 0x8000u) != 0)
    v5 = DWORD1(v11);
  *a3 = v5;
  v6 = uprv_malloc(v5);
  v7 = 0;
  *a2 = v6;
  if ((v11 & 0x11) == 0)
  {
    if ((v11 & 2) != 0)
      v7 = (char *)&v11 + 2;
    else
      v7 = (char *)v12;
  }
  memcpy(v6, v7, *a3);
  return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v10);
}

icu::TimeZoneTransition *ztrans_open@<X0>(const icu::TimeZoneRule *a1@<X0>, const icu::TimeZoneRule *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  icu::TimeZoneTransition *result;

  result = (icu::TimeZoneTransition *)icu::UMemory::operator new(a3, (icu::UMemory *)0x20, (unint64_t)a2);
  if (result)
    return icu::TimeZoneTransition::TimeZoneTransition(result, a4, a1, a2);
  return result;
}

uint64_t *ztrans_openEmpty@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a2, (icu::UMemory *)0x20, a1);
  if (result)
    return icu::TimeZoneTransition::TimeZoneTransition(result);
  return result;
}

uint64_t ztrans_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL ztrans_equals(uint64_t a1, uint64_t a2)
{
  return icu::TimeZoneTransition::operator==(a1, a2);
}

uint64_t ztrans_getFrom(icu::TimeZoneTransition **a1)
{
  return icu::TimeZoneTransition::getFrom(*a1);
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton(UErrorCode *a2@<X1>, uint64_t a1@<X0>, uint64_t a3@<X8>)
{
  __ZNK3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE10toSkeletonER10UErrorCode(a1, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::integerWidth@<X0>(_OWORD *a3@<X8>, uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  return __ZNKR3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE12integerWidthERKNS0_12IntegerWidthE(a1, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit@<X0>(_OWORD *a3@<X8>, uint64_t a1@<X0>, unint64_t a2@<X1>)
{
  return __ZNKR3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE4unitERKNS_11MeasureUnitE(a1, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::perUnit@<X0>(_OWORD *a3@<X8>, uint64_t a1@<X0>, unint64_t a2@<X1>)
{
  return __ZNO3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE7perUnitERKNS_11MeasureUnitE(a1, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitWidth@<X0>(_OWORD *a3@<X8>, uint64_t a1@<X0>, int a2@<W1>)
{
  return __ZNO3icu6number23NumberFormatterSettingsINS0_24LocalizedNumberFormatterEE9unitWidthE16UNumberUnitWidth(a1, a2, a3);
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::identityFallback@<X0>(_DWORD *a3@<X8>, uint64_t a1@<X0>, int a2@<W1>)
{
  return __ZNO3icu6number28NumberRangeFormatterSettingsINS0_29LocalizedNumberRangeFormatterEE16identityFallbackE28UNumberRangeIdentityFallback(a1, a2, a3);
}

icu::Locale *icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth@<X0>(_BYTE *a3@<X8>, uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  return __ZNO3icu6number28NumberRangeFormatterSettingsINS0_29LocalizedNumberRangeFormatterEE19numberFormatterBothEONS0_26UnlocalizedNumberFormatterE(a1, a2, a3);
}

uint64_t icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::collapse@<X0>(_DWORD *a3@<X8>, uint64_t a1@<X0>, int a2@<W1>)
{
  return __ZNO3icu6number28NumberRangeFormatterSettingsINS0_29LocalizedNumberRangeFormatterEE8collapseE20UNumberRangeCollapse(a1, a2, a3);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x1E0DE4890](this);
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
  MEMORY[0x1E0DE48A8](this, __lk);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x1E0DE48B0](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

uint64_t operator delete[]()
{
  return off_1E2245F70();
}

void operator delete(void *__p)
{
  off_1E2245F78(__p);
}

uint64_t operator delete()
{
  return off_1E2245F80();
}

uint64_t operator new[]()
{
  return off_1E2245F88();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E2245F90(__sz);
}

uint64_t operator new()
{
  return off_1E2245F98();
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_typeid(void)
{
  MEMORY[0x1E0DE5078]();
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1E0C81678](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

lldiv_t div(uint64_t __x, uint64_t __y)
{
  uint64_t v2;
  uint64_t v3;
  lldiv_t result;

  v2 = MEMORY[0x1E0C83020](__x, __y);
  result.rem = v3;
  result.quot = v2;
  return result;
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

uint64_t os_eligibility_get_domain_answer()
{
  return MEMORY[0x1E0C84678]();
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

int posix_madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C84B30](a1, a2, *(_QWORD *)&a3);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

ssize_t readlink(const char *a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C85018](a1, a2, a3);
}

char *__cdecl realpath(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85038](a1, a2);
}

void rewind(FILE *a1)
{
  MEMORY[0x1E0C85120](a1);
}

char *__cdecl setlocale(int a1, const char *a2)
{
  return (char *)MEMORY[0x1E0C85358](*(_QWORD *)&a1, a2);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85510](__s1, __s2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1E0C855A0](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

float tanhf(float a1)
{
  float result;

  MEMORY[0x1E0C85800](a1);
  return result;
}

