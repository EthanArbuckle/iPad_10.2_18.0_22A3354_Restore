void sub_18BCCDB08(uint64_t *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void **v6;
  void **v7;
  void **v8;

  *a1 = (uint64_t)off_1E225E208;
  uhash_setValueDeleter(a1[1], (uint64_t)sub_18BCCF088);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 67));
  v4 = a1[66];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 58));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 50));
  icu::UVector::~UVector((icu::UVector *)(a1 + 45));
  sub_18BCCF0D8((uint64_t)(a1 + 34));
  v6 = (void **)a1[23];
  if (v6)
    uhash_close(v6);
  v7 = (void **)a1[12];
  if (v7)
    uhash_close(v7);
  v8 = (void **)a1[1];
  if (v8)
    uhash_close(v8);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

uint64_t sub_18BCCDBA4(uint64_t a1, icu::UnicodeString **a2, const char *a3, UErrorCode *a4)
{
  icu::DateFormatSymbols *v8;

  *(_QWORD *)(a1 + 24) = off_1E225E0D0;
  v8 = (icu::DateFormatSymbols *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E225E0A8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 336) = off_1E2256B38;
  *(_WORD *)(a1 + 344) = 2;
  icu::Locale::Locale((icu::Locale *)(a1 + 568));
  *(_QWORD *)(a1 + 792) = off_1E2256B38;
  *(_WORD *)(a1 + 800) = 2;
  icu::DateFormatSymbols::initializeData(v8, a2, a3, a4, 0);
  return a1;
}

void sub_18BCCDC48(uint64_t *a1)
{
  void *v1;

  sub_18BCCDB08(a1);
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BCCDC5C(_QWORD *result, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  int *v5;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  UChar **v10;
  icu::UVector *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  icu::UnicodeString *v16;
  icu::UVector *v17;
  unint64_t v18;
  icu::UnicodeString *v19;
  unint64_t v20;
  icu::UVector *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  icu::UMemory *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  icu::UnicodeString *v33;
  icu::UnicodeString *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  icu::UnicodeString *v38;
  uint64_t v39;
  int v40;
  icu::UVector *v41;
  int v42;
  signed int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  UChar **v47;
  int v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  UChar **v56;
  UChar **v57;
  uint64_t *v58;
  unsigned int v59;
  uint64_t v60;
  UChar **v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  icu::UnicodeString *v65;
  icu::UnicodeString *v66;
  uint64_t v67;
  uint64_t v68;
  icu::UnicodeString *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  icu::UnicodeString *v73;
  icu::UnicodeString *v74;
  uint64_t v75;
  uint64_t *v76;
  int *v77;
  icu::UnicodeString *v78;
  UChar **v79;
  uint64_t *v80;
  _QWORD *v81;
  _QWORD v82[2];
  uint64_t v83;
  _OWORD v84[2];
  uint64_t v85;
  char *__s1;
  _OWORD v87[4];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  __s1 = a2;
  if (*a5 > 0)
    return result;
  v5 = a5;
  v7 = (uint64_t)result;
  v85 = 0;
  memset(v84, 0, sizeof(v84));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v84, a3, a5);
  if (*v5 > 0)
    return result;
  result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v84, 0, (const char **)&__s1, a3);
  v77 = v5;
  v80 = (uint64_t *)v7;
  if (!(_DWORD)result)
  {
    v9 = 0;
LABEL_65:
    v76 = v9;
    v41 = (icu::UVector *)(v7 + 360);
    v42 = *(_DWORD *)(v7 + 368);
LABEL_66:
    if (v42 < 1)
    {
LABEL_101:
      if (v76)
      {
        result = *(_QWORD **)(v7 + 528);
        if (result)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
        *(_QWORD *)(v7 + 528) = v76;
      }
      return result;
    }
    v43 = 0;
    v44 = 0;
    while (1)
    {
      v45 = icu::UVector::elementAt(v41, v43);
      v46 = uhash_get(*(_QWORD *)(v7 + 8), v45);
      if (v46)
        break;
      result = (_QWORD *)uhash_get(*(_QWORD *)(v7 + 184), v45);
      if (result)
      {
        v60 = (uint64_t)result;
        v48 = v43 + 1;
        v61 = (UChar **)icu::UVector::elementAt(v41, v43 + 1);
        result = (_QWORD *)uhash_get(*(_QWORD *)(v7 + 184), (uint64_t)v61);
        if (!result)
        {
          v64 = *(_QWORD *)(v7 + 184);
          v65 = (icu::UnicodeString *)icu::UMemory::operator new(v63, (icu::UMemory *)0x40, v62);
          v66 = v65;
          if (v65)
            icu::UnicodeString::UnicodeString(v65, v61);
          v67 = (uint64_t)v66;
          v5 = v77;
          result = (_QWORD *)uhash_put(v64, v67, v60, v77);
          v7 = (uint64_t)v80;
        }
        if (*v5 > 0)
          goto LABEL_108;
LABEL_97:
        icu::UVector::removeElementAt((uint64_t (**)(void))v41, v48);
        result = (_QWORD *)icu::UVector::removeElementAt((uint64_t (**)(void))v41, v43);
        v44 = 1;
        goto LABEL_98;
      }
      v43 += 2;
LABEL_98:
      v42 = *(_DWORD *)(v7 + 368);
      if (v43 >= v42)
      {
        if (v44 && v42)
          goto LABEL_66;
        goto LABEL_101;
      }
    }
    v47 = (UChar **)v46;
    v48 = v43 + 1;
    v49 = icu::UVector::elementAt(v41, v43 + 1);
    result = (_QWORD *)uhash_get(*(_QWORD *)(v7 + 8), v49);
    if (!result)
    {
      v50 = uhash_geti(*(_QWORD *)(v7 + 96), v45);
      *(_QWORD *)&v87[0] = 0;
      v52 = v50;
      if (v50 < 0)
        v53 = -1;
      else
        v53 = ((uint64_t)v50 << 6) | 0x10;
      v54 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v53, v51);
      if (!v54)
      {
        *(_QWORD *)&v87[0] = 0;
        if (*v5 <= 0)
          *v5 = 7;
LABEL_107:
        result = sub_18BBBADF4((uint64_t *)v87);
LABEL_108:
        v9 = v76;
        if (!v76)
          return result;
        return (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
      }
      v79 = (UChar **)v49;
      *v54 = 64;
      v54[1] = v52;
      v56 = (UChar **)(v54 + 2);
      if ((_DWORD)v52)
      {
        v57 = (UChar **)(v54 + 2);
        do
        {
          *v57 = (UChar *)off_1E2256B38;
          *((_WORD *)v57 + 4) = 2;
          v57 += 8;
        }
        while (v57 != &v56[8 * v52]);
        *(_QWORD *)&v87[0] = v54 + 2;
        v58 = (uint64_t *)*v5;
        if ((int)v58 >= 1)
          goto LABEL_107;
        if ((int)v52 >= 1)
        {
          v59 = v52 + 1;
          do
          {
            icu::UnicodeString::operator=(v56, v47);
            --v59;
            v56 += 8;
            v47 += 8;
          }
          while (v59 > 1);
          v56 = *(UChar ***)&v87[0];
          v5 = v77;
          v7 = (uint64_t)v80;
        }
      }
      else
      {
        *(_QWORD *)&v87[0] = v54 + 2;
        v58 = (uint64_t *)*v5;
        if ((int)v58 >= 1)
          goto LABEL_107;
      }
      *(_QWORD *)&v87[0] = 0;
      v68 = *(_QWORD *)(v7 + 8);
      v69 = (icu::UnicodeString *)icu::UMemory::operator new(v58, (icu::UMemory *)0x40, v55);
      v70 = (uint64_t)v69;
      if (v69)
        icu::UnicodeString::UnicodeString(v69, v79);
      uhash_put(v68, v70, (uint64_t)v56, v5);
      v71 = v80[12];
      v73 = (icu::UnicodeString *)icu::UMemory::operator new(v80, (icu::UMemory *)0x40, v72);
      v74 = v73;
      if (v73)
        icu::UnicodeString::UnicodeString(v73, v79);
      v75 = (uint64_t)v74;
      v5 = v77;
      uhash_puti(v71, v75, v52, v77);
      result = sub_18BBBADF4((uint64_t *)v87);
      v7 = (uint64_t)v80;
    }
    if (*v5 >= 1)
      goto LABEL_108;
    goto LABEL_97;
  }
  v8 = 0;
  v9 = 0;
  v10 = (UChar **)(v7 + 536);
  v11 = (icu::UVector *)(v7 + 360);
  while (1)
  {
    memset(v87, 0, sizeof(v87));
    icu::UnicodeString::UnicodeString(v87, __s1, 0xFFFFFFFFLL, 0);
    v12 = sub_18BCCE474(v7, (uint64_t)v87, (uint64_t)a3, v5);
    v14 = *v5;
    if ((int)v14 > 0)
      break;
    if (v12)
    {
      if (v12 != 2)
      {
        if (v12 == 1)
        {
          if (!v9)
          {
            v15 = icu::UMemory::operator new((uint64_t *)v14, (icu::UMemory *)0x28, v13);
            if (!v15)
            {
              v14 = *v5;
              v9 = 0;
              if ((int)v14 <= 0)
              {
                v14 = 7;
                *v5 = 7;
              }
              break;
            }
            v9 = v15;
            icu::UVector::UVector((uint64_t)v15, (uint64_t)uprv_deleteUObject, (uint64_t)uhash_compareUnicodeString, v5);
            v14 = *v5;
            if ((int)v14 > 0)
            {
              (*(void (**)(uint64_t *))(*v9 + 8))(v9);
              v9 = 0;
              v14 = *v5;
              if ((int)v14 > 0)
                break;
            }
          }
          v16 = icu::UnicodeString::clone(v10, v13, (uint64_t *)v14);
          if (!v16 && *v5 <= 0)
            *v5 = 7;
          v17 = (icu::UVector *)v9;
          goto LABEL_17;
        }
        v21 = *(icu::UVector **)(v7 + 528);
        if (!v21
          || !*((_DWORD *)v21 + 2)
          || (icu::UVector::indexOf(v21, (uint64_t)v87, 0) & 0x80000000) == 0
          || !strcmp(__s1, "AmPmMarkersAbbr"))
        {
          v22 = __s1;
          if (!strcmp(__s1, "AmPmMarkers") || !strcmp(v22, "AmPmMarkersAbbr") || !strcmp(v22, "AmPmMarkersNarrow"))
          {
            v7 = (uint64_t)v80;
            if (!uhash_get(v80[1], (uint64_t)v87))
            {
              v82[0] = 0;
              v82[1] = 0;
              v83 = 0;
              (*(void (**)(_QWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 80))(v82, a3, v5);
              v24 = (int)v83;
              v81 = 0;
              v25 = (icu::UMemory *)((int)v83 < 0 ? -1 : ((uint64_t)(int)v83 << 6) | 0x10);
              v26 = (_QWORD *)icu::UMemory::operator new[](v25, v23);
              v78 = v11;
              if (v26)
              {
                *v26 = 64;
                v26[1] = v24;
                v27 = v26 + 2;
                if ((_DWORD)v24)
                {
                  v28 = v26 + 2;
                  do
                  {
                    *v28 = off_1E2256B38;
                    *((_WORD *)v28 + 4) = 2;
                    v28 += 8;
                  }
                  while (v28 != &v27[8 * v24]);
                }
                v81 = v26 + 2;
              }
              else
              {
                v27 = 0;
                v81 = 0;
                if (*v5 <= 0)
                {
                  v27 = 0;
                  *v5 = 7;
                }
              }
              (*(void (**)(icu::ResourceValue *, _QWORD *, uint64_t, int *))(*(_QWORD *)a3 + 104))(a3, v27, v24, v5);
              v30 = (uint64_t)v81;
              v81 = 0;
              v31 = v80[1];
              v33 = (icu::UnicodeString *)icu::UMemory::operator new(v80, (icu::UMemory *)0x40, v32);
              v34 = v33;
              if (v33)
                icu::UnicodeString::UnicodeString(v33, (UChar **)v87);
              v35 = (uint64_t)v34;
              v5 = v77;
              uhash_put(v31, v35, v30, v77);
              v36 = v80[12];
              v38 = (icu::UnicodeString *)icu::UMemory::operator new(v80, (icu::UMemory *)0x40, v37);
              v39 = (uint64_t)v38;
              if (v38)
                icu::UnicodeString::UnicodeString(v38, (UChar **)v87);
              uhash_puti(v36, v39, v24, v77);
              v40 = *v77;
              sub_18BBBADF4((uint64_t *)&v81);
              v11 = v78;
              v7 = (uint64_t)v80;
              if (v40 >= 1)
                break;
            }
          }
          else if (!strcmp(v22, "eras")
                 || !strcmp(v22, "dayNames")
                 || !strcmp(v22, "monthNames")
                 || !strcmp(v22, "quarters")
                 || !strcmp(v22, "dayPeriod")
                 || !strcmp(v22, "monthPatterns")
                 || !strcmp(v22, "cyclicNameSets"))
          {
            v29 = v22;
            v7 = (uint64_t)v80;
            sub_18BCCE77C(v80, (uint64_t)v87, v29, a3, v5);
          }
          else
          {
            v7 = (uint64_t)v80;
          }
        }
      }
    }
    else if (!uhash_get(*(_QWORD *)(v7 + 8), (uint64_t)v10) && !uhash_get(*(_QWORD *)(v7 + 184), (uint64_t)v10))
    {
      v19 = icu::UnicodeString::clone(v10, v18, (uint64_t *)v14);
      if (!v19 && *v5 <= 0)
        *v5 = 7;
      icu::UVector::adoptElement(v11, v19, (UErrorCode *)v5);
      v14 = *v5;
      if ((int)v14 > 0)
        break;
      v16 = icu::UnicodeString::clone((UChar **)v87, v20, (uint64_t *)v14);
      if (!v16 && *v5 <= 0)
        *v5 = 7;
      v17 = v11;
LABEL_17:
      icu::UVector::adoptElement(v17, v16, (UErrorCode *)v5);
      v14 = *v5;
      if ((int)v14 >= 1)
        break;
    }
    icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)v87);
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v84, ++v8, (const char **)&__s1, a3);
    if (!(_DWORD)result)
      goto LABEL_65;
  }
  result = icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)v87);
  if (v9)
    return (_QWORD *)(*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
  return result;
}

uint64_t sub_18BCCE474(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  UChar **v19;
  uint64_t v20;
  _QWORD v21[2];
  const __int16 *v22;
  unsigned int v23;
  _OWORD v24[4];
  _OWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*a4 <= 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3) == 3)
  {
    v23 = 0;
    v8 = (*(uint64_t (**)(uint64_t, unsigned int *, int *))(*(_QWORD *)a3 + 40))(a3, &v23, a4);
    if (*a4 <= 0)
    {
      memset(v25, 0, sizeof(v25));
      icu::UnicodeString::UnicodeString((uint64_t)v25, v8, v23);
      if (!icu::UnicodeString::doEqualsSubstring((uint64_t)v25, 0, 17, (uint64_t)aLocaleCalendar, 0, 17))
        goto LABEL_31;
      v11 = WORD4(v25[0]) >> 5;
      if (SWORD4(v25[0]) < 0)
        v11 = HIDWORD(v25[0]);
      v21[1] = aLocaleCalendar;
      if (v11 < 18)
        goto LABEL_31;
      if (SWORD4(v25[0]) < 0)
      {
        v12 = HIDWORD(v25[0]);
        v13 = SHIDWORD(v25[0]) >= 17 ? 17 : HIDWORD(v25[0]);
      }
      else
      {
        v12 = WORD4(v25[0]) >> 5;
        v13 = v12 >= 0x11 ? 17 : WORD4(v25[0]) >> 5;
      }
      v14 = icu::UnicodeString::doIndexOf((uint64_t)v25, 0x2Fu, v13, v12 - v13);
      if (v14 < 18)
        goto LABEL_31;
      v15 = v14;
      memset(v24, 0, sizeof(v24));
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v25, 17, v14 - 17, (icu::UnicodeString *)v24);
      if ((SWORD4(v25[0]) & 0x8000u) == 0)
        v16 = WORD4(v25[0]) >> 5;
      else
        v16 = HIDWORD(v25[0]);
      sub_18BCCEECC(a1 + 536, (const icu::UnicodeString *)v25, v15 + 1, v16);
      if (sub_18BBED900(a1 + 400, (uint64_t)v24) && (sub_18BC59708(a2, a1 + 536) & 1) != 0)
      {
        v9 = 0;
LABEL_36:
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
        goto LABEL_32;
      }
      if (sub_18BC59708(a1 + 400, (uint64_t)v24) && sub_18BBED900(a2, a1 + 536))
      {
        v22 = aGregorian_2;
        v18 = sub_18BBB1AB4((uint64_t)v24, (uint64_t *)&v22, 9);
        v21[0] = v22;
        v17 = v21;
        if (!v18)
        {
          v9 = 2;
          goto LABEL_36;
        }
        v19 = (UChar **)(a1 + 464);
        if ((*(_WORD *)(a1 + 472) & 1) != 0)
        {
          icu::UnicodeString::operator=(v19, (UChar **)v24);
        }
        else if (!sub_18BBED900((uint64_t)v19, (uint64_t)v24))
        {
          goto LABEL_30;
        }
        v9 = 1;
        goto LABEL_36;
      }
LABEL_30:
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
LABEL_31:
      v20 = 5;
      *a4 = 5;
      v9 = 3;
LABEL_32:
      icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)v25);
      return v9;
    }
  }
  return 3;
}

uint64_t sub_18BCCE718@<X0>(uint64_t *a1@<X0>, UChar **a2@<X1>, unsigned int a3@<W2>, int *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  icu::UnicodeString *v9;
  uint64_t v10;

  v8 = *a1;
  v9 = (icu::UnicodeString *)icu::UMemory::operator new(a5, (icu::UMemory *)0x40, (unint64_t)a2);
  v10 = (uint64_t)v9;
  if (v9)
    icu::UnicodeString::UnicodeString(v9, a2);
  return uhash_puti(v8, v10, a3, a4);
}

_QWORD *sub_18BCCE77C(_QWORD *result, uint64_t a2, char *a3, icu::ResourceValue *a4, int *a5)
{
  uint64_t v8;
  int v9;
  uint64_t *v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  icu::UnicodeString *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  icu::UnicodeString *v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  icu::UnicodeString *v60;
  void *v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  icu::UVector *v65;
  uint64_t *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[2];
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  char *v74;
  _OWORD v75[4];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v74 = a3;
  if (*a5 > 0)
    return result;
  v8 = (uint64_t)result;
  v73 = 0;
  memset(v72, 0, sizeof(v72));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a4 + 88))(v72, a4, a5);
  if (*a5 > 0)
    return result;
  result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v72, 0, (const char **)&v74, a4);
  if (!(_DWORD)result)
    return result;
  v9 = 0;
  v10 = 0;
  v65 = (icu::UVector *)(v8 + 360);
  v66 = (uint64_t *)(v8 + 8);
  while (1)
  {
    memset(v75, 0, sizeof(v75));
    icu::UnicodeString::UnicodeString(v75, v74, 0xFFFFFFFFLL, 0);
    v11 = WORD4(v75[0]) >> 5;
    if (SWORD4(v75[0]) < 0)
      v11 = HIDWORD(v75[0]);
    v12 = icu::UnicodeString::doEqualsSubstring((uint64_t)v75, v11 - 8, 8, (uint64_t)&aLocaleCalendar[17], 0, 8);
    v67[2] = &aLocaleCalendar[17];
    if (v12)
      goto LABEL_67;
    if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a4 + 24))(a4))
    {
      v14 = *(unsigned __int16 *)(a2 + 8);
      v15 = (__int16)v14;
      v16 = v14 >> 5;
      if (v15 >= 0)
        v17 = v16;
      else
        v17 = *(_DWORD *)(a2 + 12);
      LOWORD(v69[0]) = 47;
      v18 = icu::UnicodeString::doAppend(a2, (uint64_t)v69, 0, 1);
      if ((SWORD4(v75[0]) & 0x8000u) == 0)
        v19 = WORD4(v75[0]) >> 5;
      else
        v19 = HIDWORD(v75[0]);
      icu::UnicodeString::doAppend(v18, (const icu::UnicodeString *)v75, 0, v19);
      v20 = icu::UnicodeString::doEqualsSubstring(a2, 0, 14, (uint64_t)&aLocaleCalendar[25], 0, 14);
      v67[1] = &aLocaleCalendar[25];
      if (v20)
      {
        v21 = *(unsigned __int16 *)(a2 + 8);
        v22 = (__int16)v21;
        v23 = v21 >> 5;
        if (v22 < 0)
          v23 = *(_DWORD *)(a2 + 12);
        if (v23 == 14)
        {
          v24 = 14;
        }
        else if (icu::UnicodeString::doCompare(a2, 14, 8, (uint64_t)&aLocaleCalendar[39], 0, 8))
        {
          if (icu::UnicodeString::doCompare(a2, 14, 6, (uint64_t)&aLocaleCalendar[47], 0, 6))
          {
            if (icu::UnicodeString::doCompare(a2, 14, 9, (uint64_t)&aLocaleCalendar[53], 0, 9))
              goto LABEL_56;
            v24 = 23;
          }
          else
          {
            v24 = 20;
          }
        }
        else
        {
          v24 = 22;
        }
        v42 = *(unsigned __int16 *)(a2 + 8);
        v43 = (__int16)v42;
        v44 = v42 >> 5;
        v45 = *(_DWORD *)(a2 + 12);
        v46 = v43 >= 0 ? v44 : *(_DWORD *)(a2 + 12);
        if (v24 == v46)
        {
          v47 = 0;
        }
        else
        {
          if (icu::UnicodeString::doCompare(a2, v24, 7, (uint64_t)&aLocaleCalendar[62], 0, 7))
            goto LABEL_56;
          v43 = *(unsigned __int16 *)(a2 + 8);
          v45 = *(_DWORD *)(a2 + 12);
          v44 = v43 >> 5;
          v47 = 7;
        }
        v48 = v47 + v24;
        v49 = (v43 & 0x8000u) == 0 ? v44 : v45;
        if (v48 != v49
          && icu::UnicodeString::doCompare(a2, v48, 12, (uint64_t)&aLocaleCalendar[69], 0, 12))
        {
          goto LABEL_56;
        }
      }
      if (uhash_get(*v66, a2) || uhash_get(*(_QWORD *)(v8 + 184), a2))
      {
LABEL_56:
        v50 = *(unsigned __int16 *)(a2 + 8);
        if (v17 || (v50 & 1) == 0)
        {
          if ((v50 & 0x8000u) == 0)
            v51 = v50 >> 5;
          else
            v51 = *(_DWORD *)(a2 + 12);
          if (v51 > v17)
          {
            if (v17 > 1023)
            {
              *(_WORD *)(a2 + 8) = v50 | 0xFFE0;
              *(_DWORD *)(a2 + 12) = v17;
            }
            else
            {
              *(_WORD *)(a2 + 8) = *(_WORD *)(a2 + 8) & 0x1F | (32 * v17);
            }
          }
        }
        else
        {
          icu::UnicodeString::unBogus(a2);
        }
        icu::UnicodeString::doReplace(a2, 0, 0, 0, 0, 0);
        goto LABEL_67;
      }
      v52 = sub_18BCCE474(v8, a2, (uint64_t)a4, a5);
      v13 = *a5;
      if ((int)v13 > 0)
        return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
      if (v52)
      {
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a4 + 24))(a4) == 8)
        {
          v69[0] = 0;
          v69[1] = 0;
          v70 = 0;
          (*(void (**)(_QWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a4 + 80))(v69, a4, a5);
          v55 = (int)v70;
          v68 = 0;
          if ((int)v70 < 0)
            v56 = -1;
          else
            v56 = ((uint64_t)(int)v70 << 6) | 0x10;
          v57 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v56, v54);
          if (v57)
          {
            *v57 = 64;
            v57[1] = v55;
            v58 = v57 + 2;
            if ((_DWORD)v55)
            {
              v59 = v57 + 2;
              do
              {
                *v59 = off_1E2256B38;
                *((_WORD *)v59 + 4) = 2;
                v59 += 8;
              }
              while (v59 != &v58[8 * v55]);
            }
            v68 = v57 + 2;
          }
          else
          {
            v58 = 0;
            v68 = 0;
            if (*a5 <= 0)
            {
              v58 = 0;
              *a5 = 7;
            }
          }
          (*(void (**)(icu::ResourceValue *, _QWORD *, uint64_t, int *))(*(_QWORD *)a4 + 104))(a4, v58, v55, a5);
          v62 = (uint64_t)v68;
          v68 = 0;
          sub_18BBB11FC(v66, (UChar **)a2, v62, a5);
          sub_18BCCE718((uint64_t *)(v8 + 96), (UChar **)a2, v55, a5, v63);
          v64 = *a5;
          sub_18BBBADF4((uint64_t *)&v68);
          if (v64 >= 1)
            return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
          goto LABEL_95;
        }
        if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a4 + 24))(a4) != 2)
        {
LABEL_95:
          sub_18BBC5C08((icu::UnicodeString *)a2, 0, v17);
          goto LABEL_67;
        }
        sub_18BCCE77C(v8, a2, v74, a4, a5);
      }
      else
      {
        v60 = icu::UnicodeString::clone((UChar **)(v8 + 536), v53, (uint64_t *)v13);
        if (!v60 && *a5 <= 0)
          *a5 = 7;
        icu::UVector::adoptElement(v65, v60, (UErrorCode *)a5);
        v13 = *a5;
        if ((int)v13 > 0)
          return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
        v61 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
        if (!v61 && *a5 <= 0)
          *a5 = 7;
        icu::UVector::adoptElement(v65, v61, (UErrorCode *)a5);
      }
      v13 = *a5;
      if ((int)v13 > 0)
        return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
      goto LABEL_95;
    }
    if (!v9)
      break;
LABEL_27:
    LODWORD(v69[0]) = 0;
    v31 = (*(uint64_t (**)(icu::ResourceValue *, _QWORD *, int *))(*(_QWORD *)a4 + 32))(a4, v69, a5);
    v13 = *a5;
    if ((int)v13 > 0)
      return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
    v33 = v31;
    v34 = icu::UMemory::operator new((uint64_t *)v13, (icu::UMemory *)0x40, v32);
    v36 = (uint64_t)v34;
    if (v34)
    {
      v71 = v33;
      icu::UnicodeString::UnicodeString(v34, 1, &v71);
      v67[0] = v71;
      v37 = (uint64_t)v67;
    }
    else
    {
      v37 = *a5;
      if ((int)v37 <= 0)
      {
        v37 = 7;
        *a5 = 7;
      }
    }
    v38 = v10;
    v39 = *v10;
    v40 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)v37, (icu::UMemory *)0x40, v35);
    v41 = (uint64_t)v40;
    if (v40)
      icu::UnicodeString::UnicodeString(v40, (UChar **)v75);
    uhash_put(v39, v41, v36, a5);
    v13 = *a5;
    v10 = v38;
    if ((int)v13 >= 1)
      return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
LABEL_67:
    icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v72, ++v9, (const char **)&v74, a4);
    if (!(_DWORD)result)
      return result;
  }
  LOBYTE(v69[0]) = 0;
  v25 = sub_18BCCEF2C((unsigned int *)(v8 + 272), (unsigned __int8 *)v69, a5);
  if (v25)
  {
    v10 = (uint64_t *)v25;
    v28 = *(_QWORD *)(v8 + 184);
    v29 = (icu::UnicodeString *)icu::UMemory::operator new(v27, (icu::UMemory *)0x40, v26);
    v30 = (uint64_t)v29;
    if (v29)
      icu::UnicodeString::UnicodeString(v29, (UChar **)a2);
    uhash_put(v28, v30, (uint64_t)v10, a5);
    v13 = *a5;
    if ((int)v13 > 0)
      return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
    uhash_setValueDeleter(*v10, (uint64_t)uprv_deleteUObject);
    goto LABEL_27;
  }
  v13 = 7;
  *a5 = 7;
  return icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)v75);
}

uint64_t sub_18BCCEECC(uint64_t a1, const icu::UnicodeString *a2, int a3, uint64_t a4)
{
  uint64_t v8;

  icu::UnicodeString::unBogus(a1);
  if (*(__int16 *)(a1 + 8) < 0)
    v8 = *(unsigned int *)(a1 + 12);
  else
    v8 = *(unsigned __int16 *)(a1 + 8) >> 5;
  return icu::UnicodeString::doReplace((icu::UnicodeString *)a1, 0, v8, a2, a3, a4);
}

int32x2_t *sub_18BCCEF2C(unsigned int *a1, unsigned __int8 *a2, int *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  int32x2_t *v9;
  int32x2_t *v10;
  int v11;
  int32x2_t *v12;
  int v13;
  BOOL (*v14)(uint64_t, uint64_t);
  void *v15;
  int32x2_t *v16;
  uint64_t v17;

  v6 = a1[4];
  v7 = *a1;
  if ((_DWORD)v7 != v6)
  {
LABEL_16:
    v12 = (int32x2_t *)icu::UMemory::operator new((uint64_t *)v7, (icu::UMemory *)0x58, (unint64_t)a2);
    v10 = v12;
    if (v12)
    {
      v13 = *a2;
      *v12 = 0;
      if (*a3 <= 0)
      {
        if (v13)
          v14 = uhash_compareCaselessUnicodeString;
        else
          v14 = uhash_compareUnicodeString;
        if (v13)
          v15 = uhash_hashCaselessUnicodeString;
        else
          v15 = uhash_hashUnicodeString;
        v16 = v12 + 1;
        uhash_init(v12 + 1, (uint64_t)v15, (uint64_t)v14, 0, a3);
        if (*a3 <= 0)
        {
          *v10 = (int32x2_t)v16;
          uhash_setKeyDeleter((uint64_t)&v10[1], (uint64_t)uprv_deleteUObject);
        }
      }
    }
    v17 = (int)*a1;
    *a1 = v17 + 1;
    *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v17) = v10;
    return v10;
  }
  if (v6 == 8)
    v8 = 32;
  else
    v8 = 2 * v6;
  if (v8 < 1)
    return 0;
  v9 = (int32x2_t *)uprv_malloc(8 * v8);
  v10 = v9;
  if (v9)
  {
    if (v6 >= 1)
    {
      v11 = a1[4];
      if (v11 >= v6)
        v11 = v6;
      if (v11 >= v8)
        v11 = v8;
      memcpy(v9, *((const void **)a1 + 1), 8 * v11);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v10;
    a1[4] = v8;
    v7 = 1;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v10;
}

void sub_18BCCF088(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v1 = (void *)(a1 - 16);
    v2 = *(void **)(a1 - 8);
    if (v2)
    {
      v3 = (_QWORD)v2 << 6;
      v4 = a1 - 64;
      do
      {
        icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(v4 + v3));
        v3 -= 64;
      }
      while (v3);
    }
    icu::UMemory::operator delete[](v1);
  }
}

uint64_t sub_18BCCF0D8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void ***v4;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(void ****)(*(_QWORD *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*v4)
          uhash_close(*v4);
        icu::UMemory::operator delete(v4);
        v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return a1;
}

void sub_18BCCF150(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E225E2A0;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18BCCF180(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E225E2A0;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BCCF1B4(uint64_t a1)
{
  int v2;
  unsigned int v3;

  v2 = strlen((const char *)((unint64_t)"N3icu23SharedDateFormatSymbolsE" & 0x7FFFFFFFFFFFFFFFLL));
  v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu23SharedDateFormatSymbolsE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18BCCF20C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *v4 = (uint64_t)off_1E225E2A0;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18BCCF260(uint64_t a1, char *__dst, int a3)
{
  char *result;

  result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18BCCF298(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = sub_18BC8C418(a1, a2);
  if (result)
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return result;
}

void sub_18BCCF2D8(void **a1)
{
  void *v1;

  sub_18BCE34F4(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedDateInterval::FormattedDateInterval(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E225E320;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E225E320;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::FormattedDateInterval::~FormattedDateInterval(icu::FormattedDateInterval *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E225E320;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E225E320;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E225E320;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::FormattedDateInterval::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::FormattedDateInterval::toString(icu::FormattedDateInterval *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(*((_QWORD *)this + 1));
}

void icu::FormattedDateInterval::toTempString(icu::FormattedDateInterval *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 24))(*((_QWORD *)this + 1));
}

icu::Appendable *icu::FormattedDateInterval::appendTo(icu::FormattedDateInterval *this, icu::Appendable *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return a2;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(_QWORD, icu::Appendable *))(*(_QWORD *)v4 + 32))(*((_QWORD *)this + 1), a2);
}

uint64_t icu::FormattedDateInterval::nextPosition(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;

  if (*a3 > 0)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
  {
    *a3 = *(_DWORD *)(a1 + 16);
    return 0;
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a1 + 8));
}

void *icu::DateIntervalFormat::getStaticClassID(icu::DateIntervalFormat *this)
{
  return &unk_1EE0098C0;
}

void *icu::DateIntervalFormat::getDynamicClassID(icu::DateIntervalFormat *this)
{
  return &unk_1EE0098C0;
}

icu::DateIntervalFormat *icu::DateIntervalFormat::createInstance(icu::DateIntervalFormat *this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t *Default;
  uint64_t *v6;

  Default = icu::Locale::getDefault(this);
  return icu::DateIntervalFormat::createInstance((UErrorCode *)this, (const icu::UnicodeString *)Default, a2, v6);
}

icu::DateIntervalFormat *icu::DateIntervalFormat::createInstance@<X0>(UErrorCode *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  icu::DateIntervalFormat *result;
  const icu::Locale *v9;
  uint64_t *v10;

  result = (icu::DateIntervalFormat *)icu::UMemory::operator new(a4, (icu::UMemory *)0x58, (unint64_t)a2);
  if (result)
  {
    v9 = result;
    icu::DateIntervalInfo::DateIntervalInfo(result, a2, a3);
    return icu::DateIntervalFormat::create(a2, v9, this, a3, v10);
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

icu::DateIntervalFormat *icu::DateIntervalFormat::create@<X0>(icu::DateIntervalFormat *this@<X0>, const icu::Locale *a2@<X1>, UErrorCode *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  icu::DateIntervalFormat *v10;
  icu::DateIntervalFormat *result;
  void *v12;

  v10 = (icu::DateIntervalFormat *)icu::UMemory::operator new(a5, (icu::UMemory *)0x770, (unint64_t)a2);
  if (v10)
  {
    result = icu::DateIntervalFormat::DateIntervalFormat(v10, this, a2, a3, a4);
    if (*(int *)a4 < 1)
      return result;
    (*(void (**)(icu::DateIntervalFormat *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    if (a2)
    {
      icu::DateIntervalInfo::~DateIntervalInfo(a2);
      icu::UMemory::operator delete(v12);
    }
  }
  return 0;
}

icu::DateIntervalFormat *icu::DateIntervalFormat::createInstance(icu::DateIntervalFormat *this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t *Default;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  Default = icu::Locale::getDefault(this);
  v10 = icu::DateIntervalInfo::clone(a2, v8, v9);
  return icu::DateIntervalFormat::create((icu::DateIntervalFormat *)Default, (const icu::Locale *)v10, (UErrorCode *)this, a3, v11);
}

icu::DateIntervalFormat *icu::DateIntervalFormat::createInstance@<X0>(UErrorCode *this@<X0>, const icu::UnicodeString *a2@<X1>, const icu::Locale *a3@<X2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v9;
  uint64_t *v10;

  v9 = icu::DateIntervalInfo::clone(a3, (unint64_t)a2, a5);
  return icu::DateIntervalFormat::create(a2, (const icu::Locale *)v9, this, a4, v10);
}

icu::DateIntervalFormat *icu::DateIntervalFormat::DateIntervalFormat(icu::DateIntervalFormat *this)
{
  uint64_t v2;
  icu::Locale *v3;
  uint64_t Root;
  char *v5;
  uint64_t v6;
  char *v7;

  v2 = icu::Format::Format((uint64_t)this);
  *(_QWORD *)v2 = off_1E225E360;
  v3 = (icu::Locale *)(v2 + 360);
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  Root = icu::Locale::getRoot((icu::Locale *)v2);
  icu::Locale::Locale(v3, Root);
  *((_QWORD *)this + 73) = off_1E2256B38;
  *((_WORD *)this + 296) = 2;
  v5 = (char *)this + 1872;
  v6 = 648;
  do
  {
    v7 = (char *)this + v6;
    *(_QWORD *)v7 = off_1E2256B38;
    *((_WORD *)v7 + 4) = 2;
    *((_QWORD *)v7 + 8) = off_1E2256B38;
    *((_WORD *)v7 + 36) = 2;
    v6 += 136;
  }
  while (v7 + 136 != v5);
  *(_QWORD *)v5 = 0;
  *((_QWORD *)this + 235) = 0;
  *((_DWORD *)this + 474) = 0;
  *((_QWORD *)this + 236) = 0;
  *((_DWORD *)this + 475) = 256;
  return this;
}

uint64_t icu::DateIntervalFormat::DateIntervalFormat(icu::DateIntervalFormat *this, const icu::DateIntervalFormat *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;

  v4 = icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *(_QWORD *)v4 = off_1E225E360;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  icu::Locale::Locale((icu::Locale *)(v4 + 360), (uint64_t)a2 + 360);
  *((_QWORD *)this + 73) = off_1E2256B38;
  *((_WORD *)this + 296) = 2;
  v5 = (char *)this + 1872;
  v6 = 648;
  do
  {
    v7 = (char *)this + v6;
    *(_QWORD *)v7 = off_1E2256B38;
    *((_WORD *)v7 + 4) = 2;
    *((_QWORD *)v7 + 8) = off_1E2256B38;
    *((_WORD *)v7 + 36) = 2;
    v6 += 136;
  }
  while (v7 + 136 != v5);
  *(_QWORD *)v5 = 0;
  *((_QWORD *)this + 235) = 0;
  *((_DWORD *)this + 474) = 0;
  *((_QWORD *)this + 236) = 0;
  *((_DWORD *)this + 475) = 256;
  return icu::DateIntervalFormat::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::DateIntervalFormat::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  icu::DateIntervalInfo *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 336);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(icu::DateIntervalInfo **)(a1 + 328);
    if (v5)
    {
      icu::DateIntervalInfo::~DateIntervalInfo(v5);
      icu::UMemory::operator delete(v6);
    }
    v7 = *(_QWORD *)(a1 + 344);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *(_QWORD *)(a1 + 352);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(_QWORD *)(a1 + 1872);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *(_QWORD *)(a1 + 1880);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *(_QWORD *)(a1 + 1888);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    umtx_lock((icu::UMutex *)&unk_1EE0098C8);
    v12 = *(_QWORD *)(a2 + 336);
    if (v12)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    *(_QWORD *)(a1 + 336) = v12;
    v13 = *(_QWORD *)(a2 + 344);
    if (v13)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    *(_QWORD *)(a1 + 344) = v13;
    v14 = *(_QWORD *)(a2 + 352);
    if (v14)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    *(_QWORD *)(a1 + 352) = v14;
    umtx_unlock((std::mutex **)&unk_1EE0098C8);
    v17 = *(uint64_t **)(a2 + 328);
    if (v17)
      v17 = icu::DateIntervalInfo::clone((icu::DateIntervalInfo *)v17, v15, v16);
    *(_QWORD *)(a1 + 328) = v17;
    icu::UnicodeString::operator=((UChar **)(a1 + 584), (UChar **)(a2 + 584));
    for (i = 0; i != 1224; i += 136)
    {
      icu::UnicodeString::operator=((UChar **)(a1 + i + 648), (UChar **)(a2 + i + 648));
      icu::UnicodeString::operator=((UChar **)(a1 + i + 712), (UChar **)(a2 + i + 712));
      *(_BYTE *)(a1 + i + 776) = *(_BYTE *)(a2 + i + 776);
    }
    icu::Locale::operator=((icu::Locale *)(a1 + 360), a2 + 360);
    v19 = *(_QWORD *)(a2 + 1872);
    if (v19)
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
    *(_QWORD *)(a1 + 1872) = v19;
    v20 = *(_QWORD *)(a2 + 1880);
    if (v20)
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20);
    *(_QWORD *)(a1 + 1880) = v20;
    v21 = *(_QWORD *)(a2 + 1888);
    if (v21)
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 56))(v21);
    *(_QWORD *)(a1 + 1888) = v21;
    *(_QWORD *)(a1 + 1896) = *(_QWORD *)(a2 + 1896);
  }
  return a1;
}

void icu::DateIntervalFormat::~DateIntervalFormat(icu::DateIntervalFormat *this)
{
  icu::DateIntervalInfo *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  *(_QWORD *)this = off_1E225E360;
  v2 = (icu::DateIntervalInfo *)*((_QWORD *)this + 41);
  if (v2)
  {
    icu::DateIntervalInfo::~DateIntervalInfo(v2);
    icu::UMemory::operator delete(v3);
  }
  v4 = *((_QWORD *)this + 42);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 43);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 44);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 234);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 235);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 236);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = 1224;
  do
  {
    icu::UnicodeString::~UnicodeString((char *)this + v10, (icu::DateIntervalFormat *)((char *)this + v10 + 576));
    icu::UnicodeString::~UnicodeString(v11, (icu::DateIntervalFormat *)((char *)this + v10 + 512));
    v10 -= 136;
  }
  while (v10);
  icu::UnicodeString::~UnicodeString(v12, (icu::DateIntervalFormat *)((char *)this + 584));
  icu::Locale::~Locale((icu::DateIntervalFormat *)((char *)this + 360));
  icu::Format::~Format(this);
}

{
  void *v1;

  icu::DateIntervalFormat::~DateIntervalFormat(this);
  icu::UMemory::operator delete(v1);
}

icu::DateIntervalFormat *icu::DateIntervalFormat::clone@<X0>(icu::DateIntervalFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::DateIntervalFormat *result;

  result = (icu::DateIntervalFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x770, a2);
  if (result)
    return (icu::DateIntervalFormat *)icu::DateIntervalFormat::DateIntervalFormat(result, this);
  return result;
}

uint64_t icu::DateIntervalFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (!(_DWORD)result)
    return result;
  if (a1 == a2)
    return 1;
  result = icu::Format::operator==((_QWORD *)a1, (_QWORD *)a2);
  if (!(_DWORD)result)
    return result;
  v5 = *(_QWORD *)(a1 + 328);
  v6 = *(_QWORD *)(a2 + 328);
  if (v5 == v6)
  {
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    result = 0;
    if (!v5 || !v6)
      return result;
  }
  result = icu::DateIntervalInfo::operator==(*(_QWORD *)(a1 + 328), v6);
  if (!(_DWORD)result)
    return result;
LABEL_12:
  umtx_lock((icu::UMutex *)&unk_1EE0098C8);
  v7 = *(_QWORD *)(a1 + 336);
  v8 = *(_QWORD *)(a2 + 336);
  if (v7 != v8)
  {
    if (!v7 || !v8)
      goto LABEL_21;
LABEL_17:
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
    {
LABEL_21:
      umtx_unlock((std::mutex **)&unk_1EE0098C8);
      return 0;
    }
    goto LABEL_18;
  }
  if (v7)
    goto LABEL_17;
LABEL_18:
  umtx_unlock((std::mutex **)&unk_1EE0098C8);
  v9 = *(unsigned __int16 *)(a1 + 592);
  if ((v9 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 592) & 1) == 0)
      return 0;
LABEL_33:
    v13 = *(_QWORD *)(a1 + 1872);
    v14 = *(_QWORD *)(a2 + 1872);
    if (v13 == v14)
    {
      if (!v13)
        goto LABEL_39;
    }
    else
    {
      result = 0;
      if (!v13 || !v14)
        return result;
    }
    if ((sub_18BC59708(*(_QWORD *)(a1 + 1872), v14) & 1) != 0)
      return 0;
LABEL_39:
    v15 = *(_QWORD *)(a1 + 1880);
    v16 = *(_QWORD *)(a2 + 1880);
    if (v15 == v16)
    {
      if (!v15)
        goto LABEL_45;
    }
    else
    {
      result = 0;
      if (!v15 || !v16)
        return result;
    }
    if ((sub_18BC59708(*(_QWORD *)(a1 + 1880), v16) & 1) != 0)
      return 0;
LABEL_45:
    v17 = *(_QWORD *)(a1 + 1888);
    v18 = *(_QWORD *)(a2 + 1888);
    if (v17 == v18)
    {
      if (!v17)
      {
LABEL_51:
        result = icu::Locale::operator==(a1 + 360, a2 + 360);
        if (!(_DWORD)result)
          return result;
        v19 = 0;
        while ((sub_18BC59708(a1 + v19 + 648, a2 + v19 + 648) & 1) == 0
             && (sub_18BC59708(a1 + v19 + 712, a2 + v19 + 712) & 1) == 0
             && *(unsigned __int8 *)(a1 + v19 + 776) == *(unsigned __int8 *)(a2 + v19 + 776))
        {
          v19 += 136;
          if (v19 == 1224)
          {
            if (*(_DWORD *)(a1 + 1896) != *(_DWORD *)(a2 + 1896))
              return 0;
            return *(_DWORD *)(a1 + 1900) == *(_DWORD *)(a2 + 1900);
          }
        }
        return 0;
      }
    }
    else
    {
      result = 0;
      if (!v17 || !v18)
        return result;
    }
    if ((sub_18BC59708(*(_QWORD *)(a1 + 1888), v18) & 1) != 0)
      return 0;
    goto LABEL_51;
  }
  if ((v9 & 0x8000) != 0)
    v10 = *(_DWORD *)(a1 + 596);
  else
    v10 = v9 >> 5;
  result = 0;
  v11 = *(unsigned __int16 *)(a2 + 592);
  if ((v11 & 0x8000u) == 0)
    v12 = v11 >> 5;
  else
    v12 = *(_DWORD *)(a2 + 596);
  if ((v11 & 1) == 0 && v10 == v12)
  {
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 584), (const icu::UnicodeString *)(a2 + 584), v10);
    if ((_DWORD)result)
      goto LABEL_33;
  }
  return result;
}

icu::UnicodeString *icu::DateIntervalFormat::format(icu::DateIntervalFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  const void *Object;
  const icu::DateInterval *v11;

  if (*(int *)a5 <= 0)
  {
    if (icu::Formattable::getType(a2) == 6)
    {
      Object = (const void *)icu::Formattable::getObject(a2);
      if (Object)
      {
        if (v11)
          return icu::DateIntervalFormat::format(this, v11, a3, a4, a5);
      }
    }
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return a3;
}

icu::UnicodeString *icu::DateIntervalFormat::format(icu::DateIntervalFormat *this, const icu::DateInterval *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  signed __int8 v10;
  _OWORD v11[2];

  if (*(int *)a5 <= 0)
  {
    if (*((_QWORD *)this + 42) && *((_QWORD *)this + 41))
    {
      memset(v11, 0, sizeof(v11));
      sub_18BCE50E0((uint64_t)v11, (uint64_t)a4);
      sub_18BCE518C((uint64_t)v11, 1);
      umtx_lock((icu::UMutex *)&unk_1EE0098C8);
      a3 = icu::DateIntervalFormat::formatIntervalImpl(this, a2, a3, (BOOL *)&v10, (icu::FieldPositionHandler *)v11, a5);
      umtx_unlock((std::mutex **)&unk_1EE0098C8);
      nullsub_32(v11);
    }
    else
    {
      *a5 = U_INVALID_STATE_ERROR;
    }
  }
  return a3;
}

icu::UnicodeString *icu::DateIntervalFormat::formatIntervalImpl(icu::DateIntervalFormat *this, const icu::DateInterval *a2, icu::UnicodeString *a3, BOOL *a4, icu::FieldPositionHandler *a5, UErrorCode *a6)
{
  uint64_t v9;

  if (*(int *)a6 <= 0)
  {
    v9 = *((_QWORD *)this + 43);
    if (v9 && *((_QWORD *)this + 44))
    {
      icu::Calendar::setTimeInMillis(v9, *((double *)a2 + 1), a6);
      icu::Calendar::setTimeInMillis(*((_QWORD *)this + 44), *((double *)a2 + 2), a6);
      return icu::DateIntervalFormat::formatImpl(this, *((icu::Calendar **)this + 43), *((icu::Calendar **)this + 44), a3, a4, a5, a6);
    }
    *a6 = U_INVALID_STATE_ERROR;
  }
  return a3;
}

uint64_t *icu::DateIntervalFormat::formatToValue@<X0>(uint64_t *this@<X0>, const icu::DateInterval *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  icu::DateIntervalFormat *v8;
  uint64_t *v9;
  UErrorCode v10;
  void *v11;
  UErrorCode v12;
  uint64_t *v13;
  void *v14;
  _OWORD v15[2];
  uint64_t v16;
  signed __int8 v17;
  _BYTE v18[64];
  UChar *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v5 >= 1)
  {
    *(_QWORD *)a4 = off_1E225E320;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = (_DWORD)v5;
    return this;
  }
  v8 = (icu::DateIntervalFormat *)this;
  this = icu::UMemory::operator new(v5, (icu::UMemory *)0x68, (unint64_t)a2);
  v9 = this;
  if (!this)
  {
    v10 = *a3;
    if (*(int *)a3 <= 0)
    {
      v10 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
LABEL_12:
    *(_QWORD *)a4 = off_1E225E320;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = v10;
    if (!v9)
      return this;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
  }
  this = (uint64_t *)sub_18BCE34A8((uint64_t)this, 5, a3);
  *v9 = (uint64_t)&off_1E225E418;
  v10 = *a3;
  if (*(int *)a3 >= 1)
    goto LABEL_12;
  v20 = 0u;
  v23 = 0;
  v22 = 0u;
  v21 = 0u;
  v19 = (UChar *)off_1E2256B38;
  LOWORD(v20) = 2;
  v17 = 0;
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  sub_18BCE379C(a3, (uint64_t)v9, (uint64_t)v15);
  HIDWORD(v16) = 1;
  umtx_lock((icu::UMutex *)&unk_1EE0098C8);
  icu::DateIntervalFormat::formatIntervalImpl(v8, a2, (icu::UnicodeString *)&v19, (BOOL *)&v17, (icu::FieldPositionHandler *)v15, a3);
  umtx_unlock((std::mutex **)&unk_1EE0098C8);
  if (*(int *)a3 <= 0 && (int)v16 >= 1)
    *a3 = v16;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v18, &v19);
  sub_18BCE37AC((uint64_t)v9, (uint64_t)v18, (int *)a3);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v18);
  v12 = *a3;
  if (*(int *)a3 > 0)
    goto LABEL_9;
  if (v17 != 255)
  {
    sub_18BCE3810((uint64_t)v9, 4101, v17, a3);
    v12 = *a3;
    if (*(int *)a3 > 0)
    {
LABEL_9:
      v13 = 0;
      goto LABEL_19;
    }
    sub_18BCE3C08((uint64_t)v9);
  }
  v12 = U_ZERO_ERROR;
  v13 = v9;
  v9 = 0;
LABEL_19:
  *(_QWORD *)a4 = off_1E225E320;
  *(_QWORD *)(a4 + 8) = v13;
  *(_DWORD *)(a4 + 16) = v12;
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v15);
  this = (uint64_t *)icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v19);
  if (!v9)
    return this;
  return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v9 + 8))(v9);
}

icu::UnicodeString *icu::DateIntervalFormat::format(icu::DateIntervalFormat *this, icu::Calendar *a2, icu::Calendar *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  icu::UnicodeString *v11;
  signed __int8 v13;
  _OWORD v14[2];

  memset(v14, 0, sizeof(v14));
  sub_18BCE50E0((uint64_t)v14, (uint64_t)a5);
  sub_18BCE518C((uint64_t)v14, 1);
  umtx_lock((icu::UMutex *)&unk_1EE0098C8);
  v11 = icu::DateIntervalFormat::formatImpl(this, a2, a3, a4, (BOOL *)&v13, (icu::FieldPositionHandler *)v14, a6);
  umtx_unlock((std::mutex **)&unk_1EE0098C8);
  nullsub_32(v14);
  return v11;
}

icu::UnicodeString *icu::DateIntervalFormat::formatImpl(icu::DateIntervalFormat *this, icu::Calendar *a2, icu::Calendar *a3, icu::UnicodeString *a4, BOOL *a5, icu::FieldPositionHandler *a6, UErrorCode *a7)
{
  icu::Calendar *v13;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int32_t v25;
  int v26;
  int32_t v27;
  int32_t v28;
  int32_t v29;
  double TimeInMillis;
  double v31;
  int v32;
  int v33;
  double v34;
  double v36;
  int v37;
  int v38;
  double v39;
  BOOL v40;
  int v41;
  int32_t v42;
  int32_t v43;
  int32_t v44;
  int32_t v45;
  int32_t v46;
  double v47;
  int v48;
  int v49;
  double v50;
  int v51;
  int v52;
  char *v53;
  char *v54;
  icu::FieldPositionHandler *v55;
  char *v56;
  icu::Calendar *v57;
  icu::FieldPositionHandler *v58;
  void *v59;
  int v60;
  int v61;
  void (**v62)(icu::UnicodeString *__hidden);
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (*(int *)a7 <= 0)
  {
    v13 = a2;
    *a5 = -1;
    if (!(*(unsigned int (**)(icu::Calendar *, icu::Calendar *))(*(_QWORD *)a2 + 40))(a2, a3))
    {
      *a7 = U_ILLEGAL_ARGUMENT_ERROR;
      return a4;
    }
    v15 = icu::Calendar::get(v13, 0, a7);
    v16 = 0;
    if (v15 != icu::Calendar::get(a3, 0, a7))
    {
LABEL_81:
      if (*(int *)a7 > 0)
        return a4;
      v61 = 0;
      (*(void (**)(_QWORD, _QWORD, int *))(**((_QWORD **)this + 42) + 200))(*((_QWORD *)this + 42), *((unsigned int *)this + 475), &v61);
      v51 = 1;
      if (((1 << v16) & 0x7600) == 0)
      {
        if (v16 == 24)
          return icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), v13, a4, a6, a7);
        v51 = 0;
      }
      v52 = icu::DateIntervalInfo::calendarFieldToIntervalIndex(v16, (int *)a7);
      v53 = (char *)this + 136 * v52;
      if (*((unsigned __int16 *)v53 + 328) > 0x1Fu)
      {
        v54 = v53 + 648;
        v55 = a6;
        v56 = (char *)this + 136 * v52;
        v60 = v56[776];
        if (v56[776])
          v57 = a3;
        else
          v57 = v13;
        *a5 = v60 != 0;
        v58 = v55;
        v63 = 0u;
        v64 = 0u;
        v66 = 0;
        v65 = 0u;
        v62 = off_1E2256B38;
        LOWORD(v63) = 2;
        (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden)))(**((_QWORD **)this + 42)
                                                                                            + 240))(*((_QWORD *)this + 42), &v62);
        (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 42) + 256))(*((_QWORD *)this + 42), v54);
        icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), v57, a4, v58, a7);
        if (*((unsigned __int16 *)v56 + 360) >= 0x20u)
        {
          if (!v60)
            v13 = a3;
          (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 42) + 256))(*((_QWORD *)this + 42), (char *)this + 136 * v52 + 712);
          v61 = 0;
          (*(void (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 42) + 200))(*((_QWORD *)this + 42), 256, &v61);
          icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), v13, a4, v58, a7);
        }
        goto LABEL_93;
      }
      if (*((unsigned __int16 *)this + 68 * v52 + 360) > 0x1Fu)
      {
        v63 = 0u;
        v64 = 0u;
        v66 = 0;
        v65 = 0u;
        v62 = off_1E2256B38;
        LOWORD(v63) = 2;
        (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden)))(**((_QWORD **)this + 42)
                                                                                            + 240))(*((_QWORD *)this + 42), &v62);
        (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 42) + 256))(*((_QWORD *)this + 42), (char *)this + 136 * v52 + 712);
        icu::DateIntervalFormat::fallbackFormat(this, v13, a3, v51, a4, (signed __int8 *)a5, a6, a7);
        icu::UnicodeString::operator=((UChar **)a4, (UChar **)a4);
LABEL_93:
        (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden)))(**((_QWORD **)this + 42)
                                                                                            + 256))(*((_QWORD *)this + 42), &v62);
        icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)&v62);
        return a4;
      }
      if (!icu::SimpleDateFormat::isFieldUnitIgnored(*((_QWORD *)this + 42), v16))
      {
        icu::DateIntervalFormat::fallbackFormat(this, v13, a3, v51, a4, (signed __int8 *)a5, a6, a7);
        return a4;
      }
      return icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), v13, a4, a6, a7);
    }
    v17 = icu::Calendar::get(v13, 1u, a7);
    if (v17 != icu::Calendar::get(a3, 1u, a7))
    {
      if (*((_DWORD *)this + 474) != 1
        || (*((__int16 *)this + 296) < 0
          ? (v25 = *((_DWORD *)this + 149))
          : (v25 = *((unsigned __int16 *)this + 296) >> 5),
            (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x64u, 0, v25) & 0x80000000) != 0
         || (*((__int16 *)this + 296) < 0
           ? (v29 = *((_DWORD *)this + 149))
           : (v29 = *((unsigned __int16 *)this + 296) >> 5),
             (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x79u, 0, v29) & 0x80000000) == 0)))
      {
        v16 = 1;
        goto LABEL_81;
      }
      TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
      v31 = icu::Calendar::getTimeInMillis(a3, a7);
      v32 = icu::Calendar::get(v13, 5u, a7);
      v33 = icu::Calendar::get(a3, 5u, a7);
      v16 = 1;
      (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)v13 + 56))(v13, 2, 1, a7);
      if (TimeInMillis < v31)
      {
        v34 = icu::Calendar::getTimeInMillis(v13, a7);
        if (v32 <= v33 || v34 <= v31)
          v16 = 1;
        else
          v16 = 5;
      }
      goto LABEL_80;
    }
    v18 = icu::Calendar::get(v13, 2u, a7);
    if (v18 == icu::Calendar::get(a3, 2u, a7))
    {
      v19 = icu::Calendar::get(v13, 5u, a7);
      if (v19 == icu::Calendar::get(a3, 5u, a7))
      {
        v16 = 9;
        v20 = icu::Calendar::get(v13, 9u, a7);
        if (v20 == icu::Calendar::get(a3, 9u, a7))
        {
          v16 = 10;
          v21 = icu::Calendar::get(v13, 0xAu, a7);
          if (v21 == icu::Calendar::get(a3, 0xAu, a7))
          {
            v16 = 12;
            v22 = icu::Calendar::get(v13, 0xCu, a7);
            if (v22 == icu::Calendar::get(a3, 0xCu, a7))
            {
              v16 = 13;
              v23 = icu::Calendar::get(v13, 0xDu, a7);
              if (v23 == icu::Calendar::get(a3, 0xDu, a7))
              {
                v24 = icu::Calendar::get(v13, 0xEu, a7);
                if (v24 == icu::Calendar::get(a3, 0xEu, a7))
                  v16 = 24;
                else
                  v16 = 14;
              }
            }
          }
        }
        goto LABEL_81;
      }
      if (*((_DWORD *)this + 474) != 2
        || (*((__int16 *)this + 296) < 0
          ? (v28 = *((_DWORD *)this + 149))
          : (v28 = *((unsigned __int16 *)this + 296) >> 5),
            (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x48u, 0, v28) & 0x80000000) != 0
         && (*((__int16 *)this + 296) < 0
           ? (v44 = *((_DWORD *)this + 149))
           : (v44 = *((unsigned __int16 *)this + 296) >> 5),
             (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x68u, 0, v44) & 0x80000000) != 0
          && (*((__int16 *)this + 296) < 0
            ? (v46 = *((_DWORD *)this + 149))
            : (v46 = *((unsigned __int16 *)this + 296) >> 5),
              (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x6Au, 0, v46) & 0x80000000) != 0))))
      {
        v16 = 5;
        goto LABEL_81;
      }
      TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
      v47 = icu::Calendar::getTimeInMillis(a3, a7);
      v48 = icu::Calendar::get(v13, 0xAu, a7);
      v49 = icu::Calendar::get(a3, 0xAu, a7);
      (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)v13 + 56))(v13, 11, 12, a7);
      v16 = 5;
    }
    else
    {
      v26 = *((_DWORD *)this + 474);
      if (v26 == 1)
      {
        if (*((__int16 *)this + 296) < 0)
          v27 = *((_DWORD *)this + 149);
        else
          v27 = *((unsigned __int16 *)this + 296) >> 5;
        if ((icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x64u, 0, v27) & 0x80000000) == 0)
        {
          TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
          v36 = icu::Calendar::getTimeInMillis(a3, a7);
          v37 = icu::Calendar::get(v13, 5u, a7);
          v38 = icu::Calendar::get(a3, 5u, a7);
          v16 = 2;
          (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)v13 + 56))(v13, 2, 1, a7);
          if (TimeInMillis < v36)
          {
            v39 = icu::Calendar::getTimeInMillis(v13, a7);
            v40 = v37 <= v38 || v39 <= v36;
            v41 = 5;
LABEL_78:
            if (!v40)
              v16 = v41;
          }
LABEL_80:
          icu::Calendar::setTimeInMillis((uint64_t)v13, TimeInMillis, a7);
          goto LABEL_81;
        }
        v26 = *((_DWORD *)this + 474);
      }
      if (v26 != 2
        || (*((__int16 *)this + 296) < 0
          ? (v42 = *((_DWORD *)this + 149))
          : (v42 = *((unsigned __int16 *)this + 296) >> 5),
            (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x48u, 0, v42) & 0x80000000) != 0
         && (*((__int16 *)this + 296) < 0
           ? (v43 = *((_DWORD *)this + 149))
           : (v43 = *((unsigned __int16 *)this + 296) >> 5),
             (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x68u, 0, v43) & 0x80000000) != 0
          && (*((__int16 *)this + 296) < 0
            ? (v45 = *((_DWORD *)this + 149))
            : (v45 = *((unsigned __int16 *)this + 296) >> 5),
              (icu::UnicodeString::doIndexOf((uint64_t)this + 584, 0x6Au, 0, v45) & 0x80000000) != 0))))
      {
        v16 = 2;
        goto LABEL_81;
      }
      TimeInMillis = icu::Calendar::getTimeInMillis(v13, a7);
      v47 = icu::Calendar::getTimeInMillis(a3, a7);
      v48 = icu::Calendar::get(v13, 0xAu, a7);
      v49 = icu::Calendar::get(a3, 0xAu, a7);
      (*(void (**)(icu::Calendar *, uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)v13 + 56))(v13, 11, 12, a7);
      v16 = 2;
    }
    if (TimeInMillis < v47)
    {
      v50 = icu::Calendar::getTimeInMillis(v13, a7);
      v40 = v48 <= v49 || v50 <= v47;
      v41 = 9;
      goto LABEL_78;
    }
    goto LABEL_80;
  }
  return a4;
}

uint64_t *icu::DateIntervalFormat::formatToValue@<X0>(uint64_t *this@<X0>, icu::Calendar *a2@<X1>, icu::Calendar *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v6;
  icu::DateIntervalFormat *v10;
  uint64_t *v11;
  UErrorCode v12;
  void *v13;
  UErrorCode v14;
  uint64_t *v15;
  void *v16;
  _OWORD v17[2];
  uint64_t v18;
  signed __int8 v19;
  _BYTE v20[64];
  UChar *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 >= 1)
  {
    *(_QWORD *)a5 = off_1E225E320;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = (_DWORD)v6;
    return this;
  }
  v10 = (icu::DateIntervalFormat *)this;
  this = icu::UMemory::operator new(v6, (icu::UMemory *)0x68, (unint64_t)a2);
  v11 = this;
  if (!this)
  {
    v12 = *a4;
    if (*(int *)a4 <= 0)
    {
      v12 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
LABEL_12:
    *(_QWORD *)a5 = off_1E225E320;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = v12;
    if (!v11)
      return this;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v11 + 8))(v11);
  }
  this = (uint64_t *)sub_18BCE34A8((uint64_t)this, 5, a4);
  *v11 = (uint64_t)&off_1E225E418;
  v12 = *a4;
  if (*(int *)a4 >= 1)
    goto LABEL_12;
  v22 = 0u;
  v25 = 0;
  v24 = 0u;
  v23 = 0u;
  v21 = (UChar *)off_1E2256B38;
  LOWORD(v22) = 2;
  v19 = 0;
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  sub_18BCE379C(a4, (uint64_t)v11, (uint64_t)v17);
  HIDWORD(v18) = 1;
  umtx_lock((icu::UMutex *)&unk_1EE0098C8);
  icu::DateIntervalFormat::formatImpl(v10, a2, a3, (icu::UnicodeString *)&v21, (BOOL *)&v19, (icu::FieldPositionHandler *)v17, a4);
  umtx_unlock((std::mutex **)&unk_1EE0098C8);
  if (*(int *)a4 <= 0 && (int)v18 >= 1)
    *a4 = v18;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v20, &v21);
  sub_18BCE37AC((uint64_t)v11, (uint64_t)v20, (int *)a4);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v20);
  v14 = *a4;
  if (*(int *)a4 <= 0)
  {
    if (v19 != 255)
    {
      sub_18BCE3810((uint64_t)v11, 4101, v19, a4);
      sub_18BCE3C08((uint64_t)v11);
    }
    v14 = U_ZERO_ERROR;
    v15 = v11;
    v11 = 0;
  }
  else
  {
    v15 = 0;
  }
  *(_QWORD *)a5 = off_1E225E320;
  *(_QWORD *)(a5 + 8) = v15;
  *(_DWORD *)(a5 + 16) = v14;
  icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v17);
  this = (uint64_t *)icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v21);
  if (v11)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v11 + 8))(v11);
  return this;
}

icu::UnicodeString *icu::DateIntervalFormat::fallbackFormat(icu::DateIntervalFormat *this, icu::Calendar *a2, icu::Calendar *a3, int a4, icu::UnicodeString *a5, signed __int8 *a6, icu::FieldPositionHandler *a7, UErrorCode *a8)
{
  const icu::UnicodeString *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  int v30;
  _BYTE v31[8];
  unsigned __int16 v32;
  unsigned int v33;
  void (**v34)(icu::UnicodeString *__hidden);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _BYTE v39[72];
  uint64_t __b;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(int *)a8 <= 0)
  {
    if (a4 && *((_QWORD *)this + 234) && *((_QWORD *)this + 235))
    {
      v41 = 0u;
      v42 = 0u;
      v45 = 0;
      v43 = 0u;
      v44 = 0u;
      v15 = (const icu::UnicodeString *)*((_QWORD *)this + 236);
      *((_QWORD *)&v41 + 1) = off_1E2256B38;
      LOWORD(v42) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v41, v15, 2, 2, 1, a8);
      if (*(int *)a8 <= 0)
      {
        __b = 0;
        memset(v39, 0, 64);
        sub_18BCD3EA8(&__b, (uint64_t)&v41, 2, (uint64_t)v39);
        v35 = 0u;
        v38 = 0;
        v37 = 0u;
        v36 = 0u;
        v34 = off_1E2256B38;
        LOWORD(v35) = 2;
        (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden)))(**((_QWORD **)this + 42)
                                                                                            + 240))(*((_QWORD *)this + 42), &v34);
        v30 = 0;
        if ((int)__b >= SHIDWORD(__b))
        {
          icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, 0, SHIDWORD(__b), (icu::UnicodeString *)v31);
          if ((v32 & 0x8000u) == 0)
            v21 = v32 >> 5;
          else
            v21 = v33;
          icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v21);
          icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v31);
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 256))(*((_QWORD *)this + 42), *((_QWORD *)this + 234));
          icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a2, a5, a7, a8);
          icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, SHIDWORD(__b), __b - HIDWORD(__b), (icu::UnicodeString *)v31);
          if ((v32 & 0x8000u) == 0)
            v23 = v32 >> 5;
          else
            v23 = v33;
          icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v23);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v31);
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 256))(*((_QWORD *)this + 42), *((_QWORD *)this + 235));
          (*(void (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 42) + 200))(*((_QWORD *)this + 42), 256, &v30);
          icu::DateIntervalFormat::fallbackFormatRange(this, a2, a3, a5, a6, a7, a8);
          v20 = __b;
        }
        else
        {
          icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, 0, __b, (icu::UnicodeString *)v31);
          if ((v32 & 0x8000u) == 0)
            v16 = v32 >> 5;
          else
            v16 = v33;
          icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v16);
          icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v31);
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 256))(*((_QWORD *)this + 42), *((_QWORD *)this + 235));
          icu::DateIntervalFormat::fallbackFormatRange(this, a2, a3, a5, a6, a7, a8);
          icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, __b, HIDWORD(__b) - __b, (icu::UnicodeString *)v31);
          if ((v32 & 0x8000u) == 0)
            v18 = v32 >> 5;
          else
            v18 = v33;
          icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v18);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v31);
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 42) + 256))(*((_QWORD *)this + 42), *((_QWORD *)this + 234));
          (*(void (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 42) + 200))(*((_QWORD *)this + 42), 256, &v30);
          icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a2, a5, a7, a8);
          v20 = HIDWORD(__b);
        }
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v39, v20, v20 ^ 0x7FFFFFFF, (icu::UnicodeString *)v31);
        if ((v32 & 0x8000u) == 0)
          v25 = v32 >> 5;
        else
          v25 = v33;
        icu::UnicodeString::doAppend((uint64_t)a5, (const icu::UnicodeString *)v31, 0, v25);
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v31);
        (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden)))(**((_QWORD **)this + 42)
                                                                                            + 256))(*((_QWORD *)this + 42), &v34);
        icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v34);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v39);
      }
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v41);
    }
    else
    {
      icu::DateIntervalFormat::fallbackFormatRange(this, a2, a3, a5, a6, a7, a8);
    }
  }
  return a5;
}

uint64_t icu::DateIntervalFormat::getDateIntervalInfo(icu::DateIntervalFormat *this)
{
  return *((_QWORD *)this + 41);
}

icu::SimpleDateFormat **icu::DateIntervalFormat::setDateIntervalInfo@<X0>(icu::DateIntervalFormat *this@<X0>, const icu::DateIntervalInfo *a2@<X1>, UErrorCode *a3@<X2>, uint64_t *a4@<X8>)
{
  icu::DateIntervalInfo *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  icu::SimpleDateFormat **result;

  v7 = (icu::DateIntervalInfo *)*((_QWORD *)this + 41);
  if (v7)
  {
    icu::DateIntervalInfo::~DateIntervalInfo(v7);
    icu::UMemory::operator delete(v8);
  }
  v9 = icu::UMemory::operator new(a4, (icu::UMemory *)0x58, (unint64_t)a2);
  if (v9)
    v9 = (uint64_t *)icu::DateIntervalInfo::DateIntervalInfo((uint64_t)v9, (uint64_t)a2);
  else
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  *((_QWORD *)this + 41) = v9;
  v10 = *((_QWORD *)this + 234);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 234) = 0;
  v11 = *((_QWORD *)this + 235);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 235) = 0;
  result = (icu::SimpleDateFormat **)*((_QWORD *)this + 236);
  if (result)
    result = (icu::SimpleDateFormat **)(*((uint64_t (**)(icu::SimpleDateFormat **))*result + 1))(result);
  *((_QWORD *)this + 236) = 0;
  if (*((_QWORD *)this + 42))
    return icu::DateIntervalFormat::initializePattern((icu::SimpleDateFormat **)this, a3);
  return result;
}

icu::SimpleDateFormat **icu::DateIntervalFormat::initializePattern(icu::SimpleDateFormat **this, UErrorCode *a2)
{
  uint64_t v3;
  icu::Locale *SmpFmtLocale;
  void *v5;
  int v6;
  void *v7;
  uint64_t i;
  icu::UnicodeString *v9;
  int v10;
  int v11;
  char *BaseName;
  _QWORD *v13;
  const UChar *StringByIndex;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  int32_t v21;
  int32_t v22;
  int32_t v23;
  int32_t v24;
  void *v25;
  void *v26;
  char DefaultOrder;
  char v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  _OWORD v36[4];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[4];
  void (**v42)(icu::UnicodeString *__hidden);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  void (**v47)(icu::UnicodeString *__hidden);
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void (**v52)(icu::UnicodeString *__hidden);
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  void (**v57)(icu::UnicodeString *__hidden);
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    v3 = (uint64_t)this;
    SmpFmtLocale = (icu::Locale *)icu::SimpleDateFormat::getSmpFmtLocale(this[42]);
    if (*(unsigned __int16 *)(v3 + 592) > 0x1Fu)
      goto LABEL_4;
    v58 = 0u;
    v61 = 0;
    v60 = 0u;
    v59 = 0u;
    v57 = off_1E2256B38;
    LOWORD(v58) = 2;
    (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden)))(**(_QWORD **)(v3 + 336) + 240))(*(_QWORD *)(v3 + 336), &v57);
    icu::DateTimePatternGenerator::staticGetSkeleton((icu::DateTimePatternGenerator *)&v57, (uint64_t)&v52);
    icu::UnicodeString::operator=((icu::UnicodeString *)(v3 + 584), (icu::UnicodeString *)&v52);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v52);
    v6 = *a2;
    this = (icu::SimpleDateFormat **)icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v57);
    if (v6 <= 0)
    {
LABEL_4:
      for (i = 776; i != 2000; i += 136)
        *(_BYTE *)(v3 + i) = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
      v58 = 0u;
      v61 = 0;
      v60 = 0u;
      v59 = 0u;
      v56 = 0;
      v57 = off_1E2256B38;
      LOWORD(v58) = 2;
      v53 = 0u;
      v55 = 0u;
      v54 = 0u;
      v52 = off_1E2256B38;
      LOWORD(v53) = 2;
      v48 = 0u;
      v51 = 0;
      v50 = 0u;
      v49 = 0u;
      v46 = 0;
      v47 = off_1E2256B38;
      LOWORD(v48) = 2;
      v43 = 0u;
      v45 = 0u;
      v44 = 0u;
      v42 = off_1E2256B38;
      LOWORD(v43) = 2;
      memset(v41, 0, sizeof(v41));
      icu::DateIntervalFormat::normalizeHourMetacharacters((icu::DateIntervalFormat *)v3, (UChar **)(v3 + 584), (uint64_t)v41);
      icu::DateIntervalFormat::getDateTimeSkeleton((uint64_t)v41, (const icu::UnicodeString *)&v57, (icu::UnicodeString *)&v42, (icu::UnicodeString *)&v52, (icu::UnicodeString *)&v47, v9);
      v10 = (unsigned __int16)v53 >> 5;
      if ((v53 & 0x8000u) != 0)
        v10 = DWORD1(v53);
      if (v10 >= 1)
      {
        v11 = (unsigned __int16)v58 >> 5;
        if ((v58 & 0x8000u) != 0)
          v11 = DWORD1(v58);
        if (v11 >= 1)
        {
          BaseName = (char *)icu::Locale::getBaseName(SmpFmtLocale);
          v13 = ures_open(0, BaseName, (int *)a2);
          ures_getByKey((uint64_t)v13, "calendar", (uint64_t)v13, (int *)a2);
          ures_getByKeyWithFallback((uint64_t)v13, "gregorian", (uint64_t)v13, a2);
          ures_getByKeyWithFallback((uint64_t)v13, "DateTimePatterns", (uint64_t)v13, a2);
          LODWORD(v37) = 0;
          StringByIndex = ures_getStringByIndex((uint64_t)v13, 8, (int *)&v37, (int *)a2);
          if (*(int *)a2 <= 0 && (int)v37 >= 3)
          {
            v16 = (uint64_t)StringByIndex;
            v17 = icu::UMemory::operator new((uint64_t *)v37, (icu::UMemory *)0x40, v15);
            if (!v17)
            {
              *(_QWORD *)(v3 + 1888) = 0;
              v19 = 7;
              *a2 = U_MEMORY_ALLOCATION_ERROR;
              if (v13)
                ures_close(v13);
              goto LABEL_57;
            }
            *(_QWORD *)(v3 + 1888) = icu::UnicodeString::UnicodeString((uint64_t)v17, v16, v37);
          }
          if (v13)
            ures_close(v13);
        }
      }
      v18 = icu::DateIntervalFormat::setSeparateDateTimePtn((uint64_t ****)v3, (UErrorCode *)&v42, (const icu::UnicodeString *)&v47);
      LODWORD(v19) = (unsigned __int16)v53 >> 5;
      if ((v53 & 0x8000u) == 0)
        v19 = v19;
      else
        v19 = DWORD1(v53);
      if (v18)
      {
        if (!(_DWORD)v19)
        {
LABEL_57:
          icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)v41);
          icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v42);
          icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v47);
          icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v52);
          return (icu::SimpleDateFormat **)icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v57);
        }
        v20 = (unsigned __int16)v58 >> 5;
        if ((v58 & 0x8000u) != 0)
          v20 = DWORD1(v58);
        if (v20)
        {
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v37, (UChar **)(v3 + 584));
          if ((v58 & 0x8000u) == 0)
            v21 = (unsigned __int16)v58 >> 5;
          else
            v21 = DWORD1(v58);
          if (icu::UnicodeString::doIndexOf((uint64_t)&v57, 0x64u, 0, v21) == -1)
          {
            LOWORD(v36[0]) = 100;
            icu::UnicodeString::doReplace((uint64_t)&v37, 0, 0, (uint64_t)v36, 0, 1);
            icu::DateIntervalFormat::setFallbackPattern((char *)v3, 5u, (UErrorCode *)&v37, a2);
          }
          if ((v58 & 0x8000u) == 0)
            v22 = (unsigned __int16)v58 >> 5;
          else
            v22 = DWORD1(v58);
          if (icu::UnicodeString::doIndexOf((uint64_t)&v57, 0x4Du, 0, v22) == -1)
          {
            LOWORD(v36[0]) = 77;
            icu::UnicodeString::doReplace((uint64_t)&v37, 0, 0, (uint64_t)v36, 0, 1);
            icu::DateIntervalFormat::setFallbackPattern((char *)v3, 2u, (UErrorCode *)&v37, a2);
          }
          if ((v58 & 0x8000u) == 0)
            v23 = (unsigned __int16)v58 >> 5;
          else
            v23 = DWORD1(v58);
          if (icu::UnicodeString::doIndexOf((uint64_t)&v57, 0x79u, 0, v23) == -1)
          {
            LOWORD(v36[0]) = 121;
            icu::UnicodeString::doReplace((uint64_t)&v37, 0, 0, (uint64_t)v36, 0, 1);
            icu::DateIntervalFormat::setFallbackPattern((char *)v3, 1u, (UErrorCode *)&v37, a2);
          }
          if ((v58 & 0x8000u) == 0)
            v24 = (unsigned __int16)v58 >> 5;
          else
            v24 = DWORD1(v58);
          if (icu::UnicodeString::doIndexOf((uint64_t)&v57, 0x47u, 0, v24) == -1)
          {
            LOWORD(v36[0]) = 71;
            icu::UnicodeString::doReplace((uint64_t)&v37, 0, 0, (uint64_t)v36, 0, 1);
            icu::DateIntervalFormat::setFallbackPattern((char *)v3, 0, (UErrorCode *)&v37, a2);
          }
          v25 = *(void **)(v3 + 1888);
          if (v25)
          {
            memset(v36, 0, sizeof(v36));
            icu::DateFormat::getBestPattern(SmpFmtLocale, (UErrorCode *)&v57, a2, (uint64_t)v36);
            icu::DateIntervalFormat::concatSingleDate2TimeInterval(v3, *(const icu::UnicodeString **)(v3 + 1888), (const icu::UnicodeString *)v36, 9u, (int *)a2);
            icu::DateIntervalFormat::concatSingleDate2TimeInterval(v3, *(const icu::UnicodeString **)(v3 + 1888), (const icu::UnicodeString *)v36, 0xAu, (int *)a2);
            icu::DateIntervalFormat::concatSingleDate2TimeInterval(v3, *(const icu::UnicodeString **)(v3 + 1888), (const icu::UnicodeString *)v36, 0xCu, (int *)a2);
            icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v36);
          }
LABEL_56:
          icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v37);
          goto LABEL_57;
        }
      }
      else
      {
        if (!(_DWORD)v19)
          goto LABEL_57;
        LODWORD(v19) = (unsigned __int16)v58 >> 5;
        v19 = (v58 & 0x8000u) == 0 ? v19 : DWORD1(v58);
        if ((_DWORD)v19)
          goto LABEL_57;
      }
      icu::UnicodeString::doReplace((uint64_t)&v52, 0, 0, (uint64_t)L"yMd", 0, 0xFFFFFFFFLL);
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      icu::DateFormat::getBestPattern(SmpFmtLocale, (UErrorCode *)&v52, a2, (uint64_t)&v37);
      v25 = (void *)*(unsigned int *)a2;
      if ((int)v25 <= 0)
      {
        DefaultOrder = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 5u, 0, (UChar **)&v37, DefaultOrder);
        v28 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 2u, 0, (UChar **)&v37, v28);
        v29 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
        icu::DateIntervalFormat::setPatternInfo(v3, 1u, 0, (UChar **)&v37, v29);
        LOWORD(v36[0]) = 71;
        icu::UnicodeString::doReplace((uint64_t)&v52, 0, 0, (uint64_t)v36, 0, 1);
        icu::DateFormat::getBestPattern(SmpFmtLocale, (UErrorCode *)&v52, a2, (uint64_t)v36);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v37, (icu::UnicodeString *)v36);
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v36);
        v25 = (void *)*(unsigned int *)a2;
        if ((int)v25 <= 0)
        {
          v31 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v3 + 328));
          icu::DateIntervalFormat::setPatternInfo(v3, 0, 0, (UChar **)&v37, v31);
        }
      }
      goto LABEL_56;
    }
  }
  return this;
}

uint64_t icu::DateIntervalFormat::getDateFormat(icu::DateIntervalFormat *this)
{
  return *((_QWORD *)this + 42);
}

uint64_t icu::DateIntervalFormat::adoptTimeZone(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1[42];
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 184))(v4, a2);
  v5 = a1[43];
  if (v5)
    icu::Calendar::setTimeZone(v5, a2);
  result = a1[44];
  if (result)
    return icu::Calendar::setTimeZone(result, a2);
  return result;
}

uint64_t icu::DateIntervalFormat::setTimeZone(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1[42];
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 192))(v4, a2);
  v5 = a1[43];
  if (v5)
    icu::Calendar::setTimeZone(v5, a2);
  result = a1[44];
  if (result)
    return icu::Calendar::setTimeZone(result, a2);
  return result;
}

uint64_t icu::DateIntervalFormat::getTimeZone(icu::DateIntervalFormat *this)
{
  uint64_t v2;

  if (!*((_QWORD *)this + 42))
    return icu::TimeZone::createDefault(this);
  umtx_lock((icu::UMutex *)&unk_1EE0098C8);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 42) + 176))(*((_QWORD *)this + 42));
  umtx_unlock((std::mutex **)&unk_1EE0098C8);
  return v2;
}

uint64_t icu::DateIntervalFormat::setAttribute(uint64_t result, int a2, int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (a2)
      *a4 = 1;
    else
      *(_DWORD *)(result + 1896) = a3;
  }
  return result;
}

uint64_t icu::DateIntervalFormat::setContext(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if ((a2 & 0xFFFFFF00) == 0x100)
      *(_DWORD *)(result + 1900) = a2;
    else
      *a3 = 1;
  }
  return result;
}

uint64_t icu::DateIntervalFormat::getContext(uint64_t a1, int a2, int *a3)
{
  uint64_t result;

  if (*a3 > 0)
    return 0;
  if (a2 == 1)
    return *(unsigned int *)(a1 + 1900);
  result = 0;
  *a3 = 1;
  return result;
}

icu::DateIntervalFormat *icu::DateIntervalFormat::DateIntervalFormat(icu::DateIntervalFormat *this, const icu::Locale *a2, icu::DateIntervalInfo *a3, UErrorCode *a4, UErrorCode *a5)
{
  uint64_t v10;
  UErrorCode *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  icu::SimpleDateFormat *InstanceForSkeleton;
  icu::SimpleDateFormat *v16;
  UErrorCode v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  v10 = icu::Format::Format((uint64_t)this);
  *(_QWORD *)v10 = off_1E225E360;
  *(_OWORD *)(v10 + 328) = 0u;
  *(_OWORD *)(v10 + 344) = 0u;
  icu::Locale::Locale((icu::Locale *)(v10 + 360), (uint64_t)a2);
  *((_QWORD *)this + 73) = off_1E2256B38;
  *((_WORD *)this + 296) = 2;
  v12 = (char *)this + 1872;
  v13 = 648;
  do
  {
    v14 = (char *)this + v13;
    *(_QWORD *)v14 = off_1E2256B38;
    *((_WORD *)v14 + 4) = 2;
    *((_QWORD *)v14 + 8) = off_1E2256B38;
    *((_WORD *)v14 + 36) = 2;
    v13 += 136;
  }
  while (v14 + 136 != v12);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)this + 235) = 0;
  *((_DWORD *)this + 474) = 0;
  *((_QWORD *)this + 236) = 0;
  *((_DWORD *)this + 475) = 256;
  if (!a3 && *(int *)a5 <= 0)
    *a5 = U_MEMORY_ALLOCATION_ERROR;
  InstanceForSkeleton = icu::DateFormat::createInstanceForSkeleton(a4, a2, a5, v11);
  v16 = InstanceForSkeleton;
  v17 = *a5;
  if (!InstanceForSkeleton && v17 <= U_ZERO_ERROR)
  {
    *a5 = U_MEMORY_ALLOCATION_ERROR;
LABEL_12:
    if (a3)
    {
      icu::DateIntervalInfo::~DateIntervalInfo(a3);
      icu::UMemory::operator delete(v18);
    }
    return this;
  }
  if (v17 > U_ZERO_ERROR)
  {
    if (InstanceForSkeleton)
      (*(void (**)(icu::SimpleDateFormat *))(*(_QWORD *)InstanceForSkeleton + 8))(InstanceForSkeleton);
    goto LABEL_12;
  }
  icu::UnicodeString::operator=((UChar **)this + 73, (UChar **)a4);
  *((_QWORD *)this + 41) = a3;
  *((_QWORD *)this + 42) = v16;
  if ((*(uint64_t (**)(icu::SimpleDateFormat *))(*(_QWORD *)v16 + 128))(v16))
  {
    v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 42) + 128))(*((_QWORD *)this + 42));
    *((_QWORD *)this + 43) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 42) + 128))(*((_QWORD *)this + 42));
    *((_QWORD *)this + 44) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20);
  }
  icu::DateIntervalFormat::initializePattern((icu::SimpleDateFormat **)this, a5);
  return this;
}

void *icu::DateIntervalFormat::normalizeHourMetacharacters@<X0>(icu::DateIntervalFormat *this@<X0>, UChar **a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *result;
  int v15;
  char v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  int32_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  void *v30;
  int32_t v31;
  int32_t v32;
  int v33;
  int32_t v34;
  int32_t v35;
  int32_t v36;
  __int16 v37;
  int32_t v38;
  int v40;
  int v42;
  UErrorCode v43;
  __int16 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[4];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)a3, a2);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(unsigned __int16 *)(a3 + 8);
  v13 = a3 + 10;
  if ((v12 & 2) == 0)
    v13 = *(_QWORD *)(a3 + 24);
  if ((v12 & 0x8000) != 0)
    goto LABEL_6;
LABEL_4:
  result = (void *)(v12 >> 5);
  if (v5 < v12 >> 5)
  {
    do
    {
      if ((unint64_t)result <= v5)
        goto LABEL_20;
      v15 = *(unsigned __int16 *)(v13 + 2 * v5);
      v16 = v15 - 66;
      if ((v15 - 66) > 0x29)
        goto LABEL_20;
      if (((1 << v16) & 0x34000000342) != 0)
      {
        if (v6)
        {
          v8 = v8;
        }
        else
        {
          v6 = *(_WORD *)(v13 + 2 * v5);
          v8 = v5;
        }
        v9 = (v9 + 1);
        goto LABEL_21;
      }
      if (((1 << v16) & 0x180000001) != 0)
      {
        if (v7)
        {
          v10 = v10;
        }
        else
        {
          v7 = *(_WORD *)(v13 + 2 * v5);
          v10 = v5;
        }
        v11 = (v11 + 1);
      }
      else
      {
LABEL_20:
        if (v6 && v7)
          goto LABEL_24;
      }
LABEL_21:
      ++v5;
      if ((v12 & 0x8000) == 0)
        goto LABEL_4;
LABEL_6:
      result = (void *)*(unsigned int *)(a3 + 12);
    }
    while ((uint64_t)v5 < *(int *)(a3 + 12));
  }
  if (v6)
  {
LABEL_24:
    v43 = U_ZERO_ERROR;
    memset(v49, 0, sizeof(v49));
    icu::UnicodeString::UnicodeString((uint64_t)&v45, v6);
    icu::DateFormat::getBestPattern((icu::DateIntervalFormat *)((char *)this + 360), (UErrorCode *)&v45, &v43, (uint64_t)v49);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v45);
    if (v43 <= U_ZERO_ERROR)
    {
      if ((SWORD4(v49[0]) & 0x8000u) == 0)
        v22 = WORD4(v49[0]) >> 5;
      else
        v22 = HIDWORD(v49[0]);
      v23 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, 0, v22);
      if ((_DWORD)v23 != -1)
      {
        v24 = v23;
        do
        {
          if ((int)v24 >= -1)
          {
            v27 = v24 + 1;
            if ((WORD4(v49[0]) & 0x8000) != 0)
            {
              v26 = HIDWORD(v49[0]);
              if (SHIDWORD(v49[0]) >= v27)
                v25 = v24 + 1;
              else
                v25 = HIDWORD(v49[0]);
            }
            else
            {
              v26 = WORD4(v49[0]) >> 5;
              if (v26 >= v27)
                v25 = v24 + 1;
              else
                v25 = WORD4(v49[0]) >> 5;
            }
          }
          else
          {
            v25 = 0;
            if ((WORD4(v49[0]) & 0x8000) != 0)
              v26 = HIDWORD(v49[0]);
            else
              v26 = WORD4(v49[0]) >> 5;
          }
          v28 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, v25, v26 - v25);
          if (v28 == -1)
            v29 = 1;
          else
            v29 = (v28 - v24 + 1);
          *(_QWORD *)&v45 = off_1E2256B38;
          WORD4(v45) = 2;
          icu::UnicodeString::doReplace((icu::UnicodeString *)v49, v24, v29, (const icu::UnicodeString *)&v45, 0, 0);
          icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v45);
          if ((SWORD4(v49[0]) & 0x8000u) == 0)
            v31 = WORD4(v49[0]) >> 5;
          else
            v31 = HIDWORD(v49[0]);
          v24 = icu::UnicodeString::doIndexOf((uint64_t)v49, 0x27u, 0, v31);
        }
        while ((_DWORD)v24 != -1);
      }
      if ((SWORD4(v49[0]) & 0x8000u) == 0)
        v32 = WORD4(v49[0]) >> 5;
      else
        v32 = HIDWORD(v49[0]);
      v33 = 104;
      if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x68u, 0, v32) == -1)
      {
        v34 = (SWORD4(v49[0]) & 0x8000u) == 0 ? WORD4(v49[0]) >> 5 : HIDWORD(v49[0]);
        v33 = 75;
        if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x4Bu, 0, v34) == -1)
        {
          if ((SWORD4(v49[0]) & 0x8000u) == 0)
            v35 = WORD4(v49[0]) >> 5;
          else
            v35 = HIDWORD(v49[0]);
          if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x6Bu, 0, v35) == -1)
            v33 = 72;
          else
            v33 = 107;
        }
      }
      if ((SWORD4(v49[0]) & 0x8000u) == 0)
        v36 = WORD4(v49[0]) >> 5;
      else
        v36 = HIDWORD(v49[0]);
      v37 = 98;
      if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x62u, 0, v36) == -1)
      {
        v38 = (SWORD4(v49[0]) & 0x8000u) == 0 ? WORD4(v49[0]) >> 5 : HIDWORD(v49[0]);
        v37 = 66;
        if (icu::UnicodeString::doIndexOf((uint64_t)v49, 0x42u, 0, v38) == -1)
        {
          if (v7)
            v37 = v7;
          else
            v37 = 97;
        }
      }
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v45, v33);
      if (v33 != 72 && v33 != 107)
      {
        if ((int)v9 <= 2 && (int)v11 <= 2)
          v40 = 1;
        else
          v40 = 3;
        if ((int)v9 <= 4 && (int)v11 <= 4)
          v42 = v40;
        else
          v42 = 5;
        do
        {
          v44 = v37;
          icu::UnicodeString::doAppend((uint64_t)&v45, (uint64_t)&v44, 0, 1);
          --v42;
        }
        while (v42);
      }
    }
    else
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      icu::UnicodeString::UnicodeString((uint64_t)&v45, 72);
    }
    if ((SWORD4(v45) & 0x8000u) == 0)
      v18 = WORD4(v45) >> 5;
    else
      v18 = HIDWORD(v45);
    icu::UnicodeString::doReplace((icu::UnicodeString *)a3, v8, v9, (const icu::UnicodeString *)&v45, 0, v18);
    if ((int)v10 > (int)v8)
    {
      v19 = WORD4(v45) >> 5;
      if (SWORD4(v45) < 0)
        v19 = HIDWORD(v45);
      v10 = (v10 - v9 + v19);
    }
    if ((_DWORD)v11 == 0x7FFFFFFF && (int)v10 <= 0)
    {
      if ((*(_WORD *)(a3 + 8) & 1) != 0)
        v20 = 2;
      else
        v20 = *(_WORD *)(a3 + 8) & 0x1F;
      *(_WORD *)(a3 + 8) = v20;
    }
    else
    {
      icu::UnicodeString::doReplace(a3, v10, v11, 0, 0, 0);
    }
    icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)&v45);
    return icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v49);
  }
  return result;
}

uint64_t icu::DateIntervalFormat::getDateTimeSkeleton(uint64_t this, const icu::UnicodeString *a2, icu::UnicodeString *a3, icu::UnicodeString *a4, icu::UnicodeString *a5, icu::UnicodeString *a6)
{
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  icu::UnicodeString *v18;
  __int16 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v28;

  v26 = 0;
  v9 = this;
  v10 = 0;
  v24 = 0;
  v25 = 0;
  v11 = 0;
  v12 = 0;
  v13 = this + 10;
  while (1)
  {
    v14 = *(__int16 *)(v9 + 8);
    if (v14 < 0)
      break;
    if (v10 >= (unint64_t)*(unsigned __int16 *)(v9 + 8) >> 5)
      goto LABEL_27;
    v15 = (unint64_t)*(unsigned __int16 *)(v9 + 8) >> 5;
LABEL_7:
    if (v15 > v10)
    {
      if ((v14 & 2) != 0)
        v16 = v13;
      else
        v16 = *(_QWORD *)(v9 + 24);
      v17 = *(unsigned __int16 *)(v16 + 2 * v10);
      switch(*(_WORD *)(v16 + 2 * v10))
      {
        case 'A':
        case 'B':
        case 'S':
        case 'V':
        case 'Z':
        case 'a':
        case 'b':
        case 'j':
        case 's':
          v28 = *(_WORD *)(v16 + 2 * v10);
          icu::UnicodeString::doAppend((uint64_t)a4, (uint64_t)&v28, 0, 1);
          v28 = v17;
          v18 = a5;
          goto LABEL_14;
        case 'D':
        case 'F':
        case 'G':
        case 'L':
        case 'Q':
        case 'U':
        case 'W':
        case 'Y':
        case 'c':
        case 'e':
        case 'g':
        case 'l':
        case 'q':
        case 'r':
        case 'u':
        case 'w':
          v28 = *(_WORD *)(v16 + 2 * v10);
          icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1);
          v28 = v17;
          v18 = a2;
          goto LABEL_14;
        case 'E':
          v28 = 69;
          this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v28, 0, 1);
          ++HIDWORD(v24);
          break;
        case 'H':
        case 'K':
        case 'h':
        case 'k':
          v28 = *(_WORD *)(v16 + 2 * v10);
          this = icu::UnicodeString::doAppend((uint64_t)a4, (uint64_t)&v28, 0, 1);
          if (!v12)
            v12 = v17;
          break;
        case 'M':
          v28 = 77;
          this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v28, 0, 1);
          LODWORD(v24) = v24 + 1;
          break;
        case 'd':
          v28 = 100;
          this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v28, 0, 1);
          LODWORD(v25) = v25 + 1;
          break;
        case 'm':
          v28 = 109;
          this = icu::UnicodeString::doAppend((uint64_t)a4, (uint64_t)&v28, 0, 1);
          ++HIDWORD(v25);
          break;
        case 'v':
          ++HIDWORD(v26);
          v19 = 118;
          goto LABEL_26;
        case 'y':
          v28 = 121;
          this = icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v28, 0, 1);
          ++v11;
          break;
        case 'z':
          LODWORD(v26) = v26 + 1;
          v19 = 122;
LABEL_26:
          v28 = v19;
          v18 = a4;
LABEL_14:
          this = icu::UnicodeString::doAppend((uint64_t)v18, (uint64_t)&v28, 0, 1);
          break;
        default:
          break;
      }
    }
    ++v10;
  }
  if ((uint64_t)v10 < *(int *)(v9 + 12))
  {
    v15 = *(unsigned int *)(v9 + 12);
    goto LABEL_7;
  }
LABEL_27:
  if (v11 >= 1)
  {
    do
    {
      v28 = 121;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1);
      --v11;
    }
    while (v11);
  }
  if ((_DWORD)v24)
  {
    if ((int)v24 >= 3)
    {
      v20 = v24 - 1;
      if ((v24 - 1) >= 4)
        v20 = 4;
      v21 = v20 + 1;
      do
      {
        v28 = 77;
        this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1);
        --v21;
      }
      while (v21);
    }
    else
    {
      v28 = 77;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1);
    }
  }
  if (HIDWORD(v24))
  {
    if (SHIDWORD(v24) >= 4)
    {
      v22 = HIDWORD(v24) - 1;
      if ((HIDWORD(v24) - 1) >= 4)
        v22 = 4;
      v23 = v22 + 1;
      do
      {
        v28 = 69;
        this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1);
        --v23;
      }
      while (v23);
    }
    else
    {
      v28 = 69;
      this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1);
    }
  }
  if ((_DWORD)v25)
  {
    v28 = 100;
    this = icu::UnicodeString::doAppend((uint64_t)a3, (uint64_t)&v28, 0, 1);
  }
  if (v12)
  {
    v28 = v12;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v28, 0, 1);
  }
  if (HIDWORD(v25))
  {
    v28 = 109;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v28, 0, 1);
  }
  if ((_DWORD)v26)
  {
    v28 = 122;
    this = icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v28, 0, 1);
  }
  if (HIDWORD(v26))
  {
    v28 = 118;
    return icu::UnicodeString::doAppend((uint64_t)a5, (uint64_t)&v28, 0, 1);
  }
  return this;
}

uint64_t icu::DateIntervalFormat::setSeparateDateTimePtn(uint64_t ****this, UErrorCode *a2, const icu::UnicodeString *a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  const icu::UnicodeString *v9;
  uint64_t BestSkeleton;
  unint64_t v11;
  UChar **v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  icu::DateIntervalFormat *v26;
  void *v27;
  void *v28;
  UErrorCode v29;
  signed __int8 v30;
  UChar *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void (**v36)(icu::UnicodeString *__hidden);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int16 *)a3 + 4);
  v7 = (__int16)v6;
  v8 = v6 >> 5;
  if (v7 < 0)
    v8 = *((_DWORD *)a3 + 3);
  if (v8)
    v9 = a3;
  else
    v9 = (const icu::UnicodeString *)a2;
  v30 = 0;
  BestSkeleton = icu::DateIntervalInfo::getBestSkeleton(this[41], v9, (unsigned __int8 *)&v30);
  if (!BestSkeleton)
    return 0;
  v12 = (UChar **)BestSkeleton;
  v29 = U_ZERO_ERROR;
  v13 = *((unsigned __int16 *)a2 + 4);
  v14 = (__int16)v13;
  LODWORD(v15) = v13 >> 5;
  if (v14 >= 0)
    v15 = v15;
  else
    v15 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v15)
  {
    v16 = icu::UMemory::operator new((uint64_t *)v15, (icu::UMemory *)0x40, v11);
    if (v16)
      icu::DateFormat::getBestPattern((icu::DateFormat *)(this + 45), a2, &v29, (uint64_t)v16);
    this[234] = (uint64_t ***)v16;
  }
  v17 = *((unsigned __int16 *)a3 + 4);
  v18 = (__int16)v17;
  LODWORD(v19) = v17 >> 5;
  if (v18 >= 0)
    v19 = v19;
  else
    v19 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v19)
  {
    v29 = U_ZERO_ERROR;
    v20 = icu::UMemory::operator new((uint64_t *)v19, (icu::UMemory *)0x40, v11);
    if (v20)
      icu::DateFormat::getBestPattern((icu::DateFormat *)(this + 45), (UErrorCode *)a3, &v29, (uint64_t)v20);
    this[235] = (uint64_t ***)v20;
  }
  if (v30 == 255)
    return 0;
  v21 = *((unsigned __int16 *)a3 + 4);
  v22 = (__int16)v21;
  v23 = v21 >> 5;
  if (v22 < 0)
    v23 = *((_DWORD *)a3 + 3);
  if (v23)
  {
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 0xCu, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, 0, 0);
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 0xAu, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, 0, 0);
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 9u, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, 0, 0);
    return 1;
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
    v40 = 0;
    v39 = 0u;
    v35 = 0;
    v36 = off_1E2256B38;
    LOWORD(v37) = 2;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = (UChar *)off_1E2256B38;
    LOWORD(v32) = 2;
    v26 = (icu::DateIntervalFormat *)&v36;
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 5u, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, (uint64_t)&v36, &v31);
    if (icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 2u, v9, (uint64_t)v12, (const icu::UnicodeString *)v30, (uint64_t)&v36, &v31))v12 = &v31;
    else
      v26 = v9;
    v24 = 1;
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 1u, v26, (uint64_t)v12, (const icu::UnicodeString *)v30, (uint64_t)&v36, &v31);
    icu::DateIntervalFormat::setIntervalPattern((uint64_t)this, 0, v26, (uint64_t)v12, (const icu::UnicodeString *)v30, (uint64_t)&v36, &v31);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v31);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v36);
  }
  return v24;
}

uint64_t icu::DateIntervalFormat::setPatternInfo(uint64_t a1, unsigned int a2, UChar **a3, UChar **a4, char a5)
{
  uint64_t result;
  int v10;
  int v11;

  v11 = 0;
  result = icu::DateIntervalInfo::calendarFieldToIntervalIndex(a2, &v11);
  if (v11 <= 0)
  {
    v10 = result;
    if (a3)
      result = (uint64_t)icu::UnicodeString::operator=((UChar **)(a1 + 136 * (int)result + 648), a3);
    if (a4)
      result = (uint64_t)icu::UnicodeString::operator=((UChar **)(a1 + 136 * v10 + 712), a4);
    *(_BYTE *)(a1 + 136 * v10 + 776) = a5;
  }
  return result;
}

BOOL icu::DateIntervalFormat::fieldExistsInSkeleton(int a1, uint64_t a2)
{
  unsigned int v2;
  int v3;
  int32_t v4;
  int32_t v5;

  v2 = *(unsigned __int16 *)(a2 + 8);
  v3 = (__int16)v2;
  v4 = v2 >> 5;
  if (v3 >= 0)
    v5 = v4;
  else
    v5 = *(_DWORD *)(a2 + 12);
  return icu::UnicodeString::doIndexOf(a2, icu::DateIntervalFormat::fgCalendarFieldToPatternLetter[a1], 0, v5) != -1;
}

char *icu::DateIntervalFormat::setFallbackPattern(char *result, unsigned int a2, UErrorCode *a3, UErrorCode *a4)
{
  uint64_t v6;
  void *v7;
  char DefaultOrder;
  _OWORD v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    v6 = (uint64_t)result;
    memset(v9, 0, sizeof(v9));
    icu::DateFormat::getBestPattern((icu::DateFormat *)(result + 360), a3, a4, (uint64_t)v9);
    v7 = (void *)*(unsigned int *)a4;
    if ((int)v7 <= 0)
    {
      DefaultOrder = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(v6 + 328));
      icu::DateIntervalFormat::setPatternInfo(v6, a2, 0, (UChar **)v9, DefaultOrder);
    }
    return (char *)icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
  }
  return result;
}

void *icu::DateIntervalFormat::concatSingleDate2TimeInterval(uint64_t a1, const icu::UnicodeString *a2, const icu::UnicodeString *a3, unsigned int a4, int *a5)
{
  void *result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  const icu::UnicodeString *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  _BYTE v22[8];
  void (**v23)(icu::UnicodeString *__hidden);
  __int16 v24;
  void (**v25)(icu::UnicodeString *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[72];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  result = (void *)icu::DateIntervalInfo::calendarFieldToIntervalIndex(a4, a5);
  if (*a5 <= 0)
  {
    v11 = a1 + 136 * (int)result;
    if (*(unsigned __int16 *)(v11 + 656) >= 0x20u)
    {
      v12 = (int)result;
      memset(v30, 0, 64);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v30, (UChar **)(v11 + 648));
      v13 = a1 + 136 * v12;
      v14 = (const icu::UnicodeString *)(v13 + 712);
      v15 = *(unsigned __int16 *)(v13 + 720);
      v16 = (__int16)v15;
      v17 = v15 >> 5;
      v18 = *(_DWORD *)(v13 + 724);
      if (v16 >= 0)
        v19 = v17;
      else
        v19 = v18;
      icu::UnicodeString::doAppend((uint64_t)v30, v14, 0, v19);
      v26 = 0u;
      v29 = 0;
      v28 = 0u;
      v27 = 0u;
      v25 = off_1E2256B38;
      LOWORD(v26) = 2;
      v23 = off_1E2256B38;
      v24 = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v22, a2, 2, 2, 0, (UErrorCode *)a5);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v22, (const icu::UnicodeString *)v30, a3, (icu::UnicodeString *)&v25, (UErrorCode *)a5);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v22);
      v20 = *a5;
      if ((int)v20 <= 0)
        icu::DateIntervalFormat::setIntervalPattern(a1, a4, (uint64_t)&v25, *(_BYTE *)(a1 + 136 * v12 + 776));
      icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)&v25);
      return icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v30);
    }
  }
  return result;
}

uint64_t icu::DateIntervalFormat::setIntervalPattern(uint64_t a1, unsigned int a2, icu::DateIntervalFormat *a3, uint64_t a4, const icu::UnicodeString *a5, uint64_t a6, UChar **a7)
{
  const icu::UnicodeString *v10;
  int32_t v14;
  unint64_t v15;
  int32_t v16;
  int v17;
  icu::UnicodeString *v18;
  char v19;
  char v20;
  void *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t BestSkeleton;
  const icu::UnicodeString *v25;
  int v26;
  icu::UnicodeString *v27;
  char DefaultOrder;
  void *v29;
  int v31;
  signed __int8 v32;
  void (**v33)(icu::UnicodeString *__hidden);
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  UChar *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v10 = (const icu::UnicodeString *)a4;
  v43 = *MEMORY[0x1E0C80C00];
  v32 = (char)a5;
  v31 = 0;
  v39 = 0u;
  v42 = 0;
  v41 = 0u;
  v40 = 0u;
  v38 = (UChar *)off_1E2256B38;
  LOWORD(v39) = 2;
  icu::DateIntervalInfo::getIntervalPattern(*(_QWORD *)(a1 + 328), a4, a2, &v38, &v31);
  if ((unsigned __int16)v39 > 0x1Fu)
    goto LABEL_2;
  if (icu::SimpleDateFormat::isFieldUnitIgnored((uint64_t)v10, a2))
    goto LABEL_28;
  if (a2 == 9)
  {
    icu::DateIntervalInfo::getIntervalPattern(*(_QWORD *)(a1 + 328), (uint64_t)v10, 0xAu, &v38, &v31);
    v15 = (unsigned __int16)v39;
    if ((unsigned __int16)v39 >= 0x20u)
    {
      if (*(__int16 *)(a1 + 592) < 0)
        v16 = *(_DWORD *)(a1 + 596);
      else
        v16 = *(unsigned __int16 *)(a1 + 592) >> 5;
      v26 = icu::UnicodeString::doIndexOf(a1 + 584, 0x4Au, 0, v16);
      v34 = 0u;
      v35 = 0u;
      v37 = 0;
      v36 = 0u;
      v33 = off_1E2256B38;
      LOWORD(v34) = 2;
      icu::DateIntervalFormat::adjustFieldWidth(a3, v10, &v38, a5, v26 != -1, (uint64_t)&v33, v27);
      DefaultOrder = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
      icu::DateIntervalFormat::setIntervalPattern(a1, 9u, (uint64_t)&v33, DefaultOrder);
      icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v33);
    }
    goto LABEL_28;
  }
  if (!a6)
    goto LABEL_23;
  v23 = icu::DateIntervalFormat::fgCalendarFieldToPatternLetter[a2];
  icu::UnicodeString::operator=((UChar **)a6, (UChar **)a3);
  icu::UnicodeString::operator=(a7, (UChar **)v10);
  LOWORD(v33) = v23;
  icu::UnicodeString::doReplace(a6, 0, 0, (uint64_t)&v33, 0, 1);
  LOWORD(v33) = v23;
  icu::UnicodeString::doReplace((uint64_t)a7, 0, 0, (uint64_t)&v33, 0, 1);
  icu::DateIntervalInfo::getIntervalPattern(*(_QWORD *)(a1 + 328), (uint64_t)a7, a2, &v38, &v31);
  v15 = (unsigned __int16)v39;
  if ((unsigned __int16)v39 <= 0x1Fu && !(_DWORD)a5)
  {
    BestSkeleton = icu::DateIntervalInfo::getBestSkeleton(*(uint64_t ****)(a1 + 328), (const icu::UnicodeString *)a7, (unsigned __int8 *)&v32);
    if (BestSkeleton && v32 != 255)
    {
      v25 = (const icu::UnicodeString *)BestSkeleton;
      icu::DateIntervalInfo::getIntervalPattern(*(_QWORD *)(a1 + 328), BestSkeleton, a2, &v38, &v31);
      v10 = v25;
    }
LABEL_23:
    v15 = (unsigned __int16)v39;
  }
  if (v15 < 0x20)
    goto LABEL_28;
LABEL_2:
  if (*(__int16 *)(a1 + 592) < 0)
    v14 = *(_DWORD *)(a1 + 596);
  else
    v14 = *(unsigned __int16 *)(a1 + 592) >> 5;
  v17 = icu::UnicodeString::doIndexOf(a1 + 584, 0x4Au, 0, v14);
  if (v32 || v17 != -1)
  {
    v34 = 0u;
    v35 = 0u;
    v37 = 0;
    v36 = 0u;
    v33 = off_1E2256B38;
    LOWORD(v34) = 2;
    icu::DateIntervalFormat::adjustFieldWidth(a3, v10, &v38, (const icu::UnicodeString *)v32, v17 != -1, (uint64_t)&v33, v18);
    v20 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
    icu::DateIntervalFormat::setIntervalPattern(a1, a2, (uint64_t)&v33, v20);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v33);
    if (a6)
      goto LABEL_15;
LABEL_28:
    v22 = 0;
    goto LABEL_29;
  }
  v19 = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
  icu::DateIntervalFormat::setIntervalPattern(a1, a2, (uint64_t)&v38, v19);
  if (!a6)
    goto LABEL_28;
LABEL_15:
  v15 = *(unsigned __int16 *)(a6 + 8);
  if (v15 <= 0x1F)
    goto LABEL_28;
  v22 = 1;
LABEL_29:
  icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v38);
  return v22;
}

void *icu::DateIntervalFormat::setIntervalPattern(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char DefaultOrder;

  DefaultOrder = icu::DateIntervalInfo::getDefaultOrder(*(icu::DateIntervalInfo **)(a1 + 328));
  return icu::DateIntervalFormat::setIntervalPattern(a1, a2, a3, DefaultOrder);
}

void *icu::DateIntervalFormat::setIntervalPattern(uint64_t a1, unsigned int a2, uint64_t a3, char a4)
{
  void (***v5)(icu::UnicodeString *__hidden);
  int v8;
  int v9;
  const icu::UnicodeString *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  UChar *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  UChar *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  void (**v32)(icu::UnicodeString *__hidden);
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v5 = (void (***)(icu::UnicodeString *__hidden))a3;
  v37 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v36 = 0;
  v35 = 0u;
  v34 = 0u;
  v32 = off_1E2256B38;
  LOWORD(v33) = 2;
  v8 = 12;
  if (icu::UnicodeString::doEqualsSubstring(a3, 0, 12, (uint64_t)"l", 0, 12))
  {
    a4 = 1;
    v9 = -12;
  }
  else
  {
    v8 = 14;
    if (!icu::UnicodeString::doEqualsSubstring((uint64_t)v5, 0, 14, (uint64_t)&unk_18BE25ECE, 0, 14))
      goto LABEL_8;
    a4 = 0;
    v9 = -14;
  }
  v11 = *((unsigned __int16 *)v5 + 4);
  v12 = (__int16)v11;
  v13 = v11 >> 5;
  if (v12 < 0)
    v13 = *((_DWORD *)v5 + 3);
  icu::UnicodeString::doReplace((icu::UnicodeString *)&v32, 0, 0, (const icu::UnicodeString *)v5, v8, v13 + v9);
  v5 = &v32;
LABEL_8:
  v14 = icu::DateIntervalFormat::splitPatternInto2Part((icu::DateIntervalFormat *)v5, v10);
  v15 = v14;
  v28 = 0u;
  v29 = 0u;
  v31 = 0;
  v30 = 0u;
  v26 = 0;
  v27 = (UChar *)off_1E2256B38;
  LOWORD(v28) = 2;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = (UChar *)off_1E2256B38;
  LOWORD(v23) = 2;
  icu::UnicodeString::doReplace((icu::UnicodeString *)&v27, 0, 0, (const icu::UnicodeString *)v5, 0, v14);
  v16 = *((unsigned __int16 *)v5 + 4);
  if ((v16 & 0x8000) != 0)
  {
    v17 = *((_DWORD *)v5 + 3);
    if (v15 < v17)
      goto LABEL_12;
  }
  else if (v15 < (int)(v16 >> 5))
  {
    v17 = v16 >> 5;
LABEL_12:
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v22, 0, 0, (const icu::UnicodeString *)v5, v15, (v17 - v15));
  }
  icu::DateIntervalFormat::setPatternInfo(a1, a2, &v27, &v22, a4);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v22);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v27);
  return icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v32);
}

uint64_t icu::DateIntervalFormat::splitPatternInto2Part(icu::DateIntervalFormat *this, const icu::UnicodeString *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  int v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  _OWORD v17[4];
  uint64_t v18;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  memset(v17, 0, 58);
  v6 = *((unsigned __int16 *)this + 4);
  v7 = v6 >> 5;
  v8 = *((_DWORD *)this + 3);
  v9 = (char *)this + 10;
  if ((v6 & 2) == 0)
    v9 = (char *)*((_QWORD *)this + 3);
  if ((v6 & 0x8000) != 0)
    goto LABEL_6;
LABEL_4:
  v10 = v6 >> 5;
  if ((int)v4 < v7)
  {
    while (1)
    {
      if (v10 <= v4)
        v11 = 0xFFFF;
      else
        v11 = *(unsigned __int16 *)&v9[2 * v4];
      if (v11 != v2 && v3 >= 1)
      {
        v12 = v2 - 65;
        if (*((_BYTE *)v17 + v12))
          return v4 - v3;
        v3 = 0;
        *((_BYTE *)v17 + v12) = 1;
      }
      if (v11 == 39)
        break;
      if ((v11 & 0xFFFFFFDF) - 65 < 0x1A)
      {
        v15 = v3 + 1;
      }
      else
      {
        v11 = v2;
        v15 = v3;
      }
      if (!v5)
      {
        v2 = v11;
        v3 = v15;
      }
      v5 = v5;
LABEL_29:
      ++v4;
      if ((v6 & 0x8000) == 0)
        goto LABEL_4;
LABEL_6:
      v10 = v8;
      if ((int)v4 >= v8)
        goto LABEL_31;
    }
    v13 = (int)v4 + 1;
    if ((v6 & 0x8000) != 0)
    {
      v14 = v8;
      if ((int)v13 >= v8)
      {
LABEL_28:
        v5 = !v5;
        goto LABEL_29;
      }
    }
    else
    {
      v14 = v6 >> 5;
      if ((int)v13 >= v7)
        goto LABEL_28;
    }
    if (v14 > v13 && *(_WORD *)&v9[2 * v13] == 39)
    {
      ++v4;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_31:
  if (v3 >= 1 && !*((_BYTE *)&v17[-4] + v2 - 1))
    v3 = 0;
  return v4 - v3;
}

uint64_t icu::DateIntervalFormat::adjustFieldWidth(icu::DateIntervalFormat *this, const icu::UnicodeString *a2, UChar **a3, const icu::UnicodeString *a4, int a5, uint64_t a6, icu::UnicodeString *a7)
{
  int v9;
  int *v12;
  int *v13;
  const icu::UnicodeString *v14;
  void *v15;
  void *v16;
  const icu::UnicodeString *v17;
  void *v18;
  void *v19;
  const icu::UnicodeString *v20;
  void *v21;
  void *v22;
  const icu::UnicodeString *v23;
  void *v24;
  void *v25;
  const icu::UnicodeString *v26;
  void *v27;
  void *v28;
  const icu::UnicodeString *v29;
  void *v30;
  void *v31;
  const icu::UnicodeString *v32;
  void *v33;
  void *v34;
  unsigned int v35;
  int v36;
  int32_t v37;
  int32_t v38;
  const icu::UnicodeString *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  int v43;
  int32_t v44;
  int32_t v45;
  const icu::UnicodeString *v46;
  void *v47;
  void *v48;
  unsigned int v49;
  int v50;
  int32_t v51;
  int32_t v52;
  const icu::UnicodeString *v53;
  void *v54;
  void *v55;
  unsigned int v56;
  int v57;
  int32_t v58;
  int32_t v59;
  const icu::UnicodeString *v60;
  void *v61;
  void *v62;
  unsigned int v63;
  int v64;
  int32_t v65;
  int32_t v66;
  unsigned int v67;
  int v68;
  int32_t v69;
  int32_t v70;
  uint64_t result;
  unsigned int v72;
  int v73;
  int v74;
  int v75;
  BOOL v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  int v87;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  BOOL v95;
  int v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  int v102;
  int v104;
  void (**v105)(icu::UnicodeString *__hidden);
  __int16 v106;
  _WORD v107[32];
  _OWORD v108[8];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  _OWORD v116[14];
  uint64_t v117;
  uint64_t v118;

  v9 = (int)a4;
  v118 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::operator=((UChar **)a6, a3);
  v117 = 0;
  memset(v116, 0, sizeof(v116));
  v115 = 0;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  memset(v108, 0, sizeof(v108));
  icu::DateIntervalInfo::parseSkeleton((uint64_t)this, (const icu::UnicodeString *)v116, v12);
  icu::DateIntervalInfo::parseSkeleton((uint64_t)a2, (const icu::UnicodeString *)v108, v13);
  if (a5)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)&unk_18BE35F14, 0xFFFFFFFFLL);
    v105 = off_1E2256B38;
    v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v14);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)&unk_18BE35F1A, 0xFFFFFFFFLL);
    v105 = off_1E2256B38;
    v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v17);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)&unk_18BE35F20, 0xFFFFFFFFLL);
    v105 = off_1E2256B38;
    v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v20);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)&unk_18BE35F26, 0xFFFFFFFFLL);
    v105 = off_1E2256B38;
    v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v23);
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, 97);
    v105 = off_1E2256B38;
    v106 = 2;
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v26);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)L"  ");
    icu::UnicodeString::UnicodeString((uint64_t)&v105, (uint64_t)" ");
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v29);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v107);
    icu::UnicodeString::UnicodeString((uint64_t)v107, (uint64_t)" ");
    icu::UnicodeString::UnicodeString((uint64_t)&v105, (uint64_t)"\t ");
    icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v32);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v105);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v107);
    icu::UnicodeString::trim((icu::UnicodeString *)a6);
  }
  if (v9 == 2)
  {
    v35 = *((unsigned __int16 *)this + 4);
    v36 = (__int16)v35;
    v37 = v35 >> 5;
    if (v36 >= 0)
      v38 = v37;
    else
      v38 = *((_DWORD *)this + 3);
    if (icu::UnicodeString::doIndexOf((uint64_t)this, 0x7Au, 0, v38) != -1)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v107, 118);
      icu::UnicodeString::UnicodeString((uint64_t)&v105, 122);
      icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v39);
      icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v105);
      icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v107);
    }
    v42 = *((unsigned __int16 *)this + 4);
    v43 = (__int16)v42;
    v44 = v42 >> 5;
    if (v43 >= 0)
      v45 = v44;
    else
      v45 = *((_DWORD *)this + 3);
    if (icu::UnicodeString::doIndexOf((uint64_t)this, 0x4Bu, 0, v45) != -1)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v107, 104);
      icu::UnicodeString::UnicodeString((uint64_t)&v105, 75);
      icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v46);
      icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v105);
      icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)v107);
    }
    v49 = *((unsigned __int16 *)this + 4);
    v50 = (__int16)v49;
    v51 = v49 >> 5;
    if (v50 >= 0)
      v52 = v51;
    else
      v52 = *((_DWORD *)this + 3);
    if (icu::UnicodeString::doIndexOf((uint64_t)this, 0x6Bu, 0, v52) != -1)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v107, 72);
      icu::UnicodeString::UnicodeString((uint64_t)&v105, 107);
      icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v53);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)&v105);
      icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)v107);
    }
    v56 = *((unsigned __int16 *)this + 4);
    v57 = (__int16)v56;
    v58 = v56 >> 5;
    if (v57 >= 0)
      v59 = v58;
    else
      v59 = *((_DWORD *)this + 3);
    if (icu::UnicodeString::doIndexOf((uint64_t)this, 0x62u, 0, v59) != -1)
    {
      icu::UnicodeString::UnicodeString((uint64_t)v107, 97);
      icu::UnicodeString::UnicodeString((uint64_t)&v105, 98);
      icu::DateIntervalFormat::findReplaceInPattern((icu::DateIntervalFormat *)a6, (icu::UnicodeString *)v107, (const icu::UnicodeString *)&v105, v60);
      icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&v105);
      icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)v107);
    }
  }
  v63 = *(unsigned __int16 *)(a6 + 8);
  v64 = (__int16)v63;
  v65 = v63 >> 5;
  if (v64 >= 0)
    v66 = v65;
  else
    v66 = *(_DWORD *)(a6 + 12);
  if (icu::UnicodeString::doIndexOf(a6, 0x61u, 0, v66) != -1 && !(_DWORD)v109)
    LODWORD(v109) = 1;
  v67 = *(unsigned __int16 *)(a6 + 8);
  v68 = (__int16)v67;
  v69 = v67 >> 5;
  if (v68 >= 0)
    v70 = v69;
  else
    v70 = *(_DWORD *)(a6 + 12);
  result = icu::UnicodeString::doIndexOf(a6, 0x62u, 0, v70);
  if ((_DWORD)result != -1 && !DWORD1(v109))
    DWORD1(v109) = 1;
  v72 = *(unsigned __int16 *)(a6 + 8);
  v73 = (__int16)v72;
  v74 = v72 >> 5;
  if (v73 >= 0)
    v75 = v74;
  else
    v75 = *(_DWORD *)(a6 + 12);
  if (v75 >= 1)
  {
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    while (1)
    {
      v80 = *(unsigned __int16 *)(a6 + 8);
      if ((v80 & 0x8000u) == 0)
        v81 = v80 >> 5;
      else
        v81 = *(_DWORD *)(a6 + 12);
      if (v81 <= v78)
      {
        v83 = 0xFFFF;
      }
      else
      {
        if ((v80 & 2) != 0)
          v82 = a6 + 10;
        else
          v82 = *(_QWORD *)(a6 + 24);
        v83 = *(unsigned __int16 *)(v82 + 2 * (int)v78);
      }
      if (v83 != v77 && v79 >= 1)
      {
        if (v77 == 76)
          v84 = 77;
        else
          v84 = v77;
        v85 = 4 * v84 - 260;
        v86 = *(_DWORD *)((char *)v108 + v85);
        v87 = *(_DWORD *)((char *)v116 + v85);
        if (v86 != v79 || v87 <= v86)
        {
          v79 = 0;
        }
        else
        {
          v89 = v87 - v79;
          if (v87 - v79 >= 1)
          {
            v90 = v87 - v79;
            do
            {
              v107[0] = v77;
              result = icu::UnicodeString::doReplace(a6, v78, 0, (uint64_t)v107, 0, 1);
              --v90;
            }
            while (v90);
          }
          v79 = 0;
          LODWORD(v78) = v89 + v78;
          v75 += v89;
        }
      }
      if (v83 != 39)
      {
        v94 = (v83 & 0xFFFFFFDF) - 65;
        v95 = v94 >= 0x1A;
        if (v94 >= 0x1A)
          v96 = v79;
        else
          v96 = v79 + 1;
        if (v95)
          v97 = v77;
        else
          v97 = v83;
        if (!v76)
        {
          v79 = v96;
          v77 = v97;
        }
        v76 = v76;
        goto LABEL_86;
      }
      v91 = v78 + 1;
      v92 = *(unsigned __int16 *)(a6 + 8);
      if (*(__int16 *)(a6 + 8) < 0)
      {
        v93 = *(_DWORD *)(a6 + 12);
        if (v91 >= (int)v93)
          goto LABEL_85;
      }
      else
      {
        if (v91 >= (int)(v92 >> 5))
          goto LABEL_85;
        v93 = v92 >> 5;
      }
      if (v93 <= v91
        || ((v92 & 2) != 0 ? (v98 = a6 + 10) : (v98 = *(_QWORD *)(a6 + 24)), *(_WORD *)(v98 + 2 * v91) != 39))
      {
LABEL_85:
        v76 = !v76;
        goto LABEL_86;
      }
      LODWORD(v78) = v78 + 1;
LABEL_86:
      v78 = (v78 + 1);
      if ((int)v78 >= v75)
      {
        if (v79 >= 1)
        {
          if (v77 == 76)
            v99 = 77;
          else
            v99 = v77;
          v100 = 4 * v99 - 260;
          v101 = *(_DWORD *)((char *)v108 + v100);
          v102 = *(_DWORD *)((char *)v116 + v100);
          if (v101 == v79 && v102 > v101)
          {
            v104 = v102 - v79;
            if (v102 - v79 >= 1)
            {
              do
              {
                v107[0] = v77;
                result = icu::UnicodeString::doAppend(a6, (uint64_t)v107, 0, 1);
                --v104;
              }
              while (v104);
            }
          }
        }
        return result;
      }
    }
  }
  return result;
}

void *icu::DateIntervalFormat::fallbackFormatRange(icu::DateIntervalFormat *this, icu::Calendar *a2, icu::Calendar *a3, icu::UnicodeString *a4, signed __int8 *a5, icu::FieldPositionHandler *a6, UErrorCode *a7)
{
  int32_t v14;
  int32_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  int v30;
  _BYTE v31[8];
  unsigned __int16 v32;
  unsigned int v33;
  _OWORD v34[4];
  uint64_t __b;
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  UChar *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v42 = 0u;
  v45 = 0;
  v44 = 0u;
  v43 = 0u;
  v41 = (UChar *)off_1E2256B38;
  LOWORD(v42) = 2;
  icu::DateIntervalInfo::getFallbackIntervalPattern(*((UChar ***)this + 41), &v41);
  v36[0] = 0;
  v37 = 0u;
  v40 = 0;
  v39 = 0u;
  v38 = 0u;
  v36[1] = off_1E2256B38;
  LOWORD(v37) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v36, (const icu::UnicodeString *)&v41, 2, 2, 0, a7);
  if (*(int *)a7 <= 0)
  {
    __b = 0;
    memset(v34, 0, sizeof(v34));
    sub_18BCD3EA8(&__b, (uint64_t)v36, 2, (uint64_t)v34);
    v30 = 0;
    v14 = __b;
    v15 = HIDWORD(__b);
    if ((int)__b >= SHIDWORD(__b))
    {
      *a5 = 1;
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, 0, v15, (icu::UnicodeString *)v31);
      if ((v32 & 0x8000u) == 0)
        v21 = v32 >> 5;
      else
        v21 = v33;
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v21);
      icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v31);
      icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a3, a4, a6, a7);
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, SHIDWORD(__b), __b - HIDWORD(__b), (icu::UnicodeString *)v31);
      if ((v32 & 0x8000u) == 0)
        v23 = v32 >> 5;
      else
        v23 = v33;
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v23);
      icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v31);
      (*(void (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 42) + 200))(*((_QWORD *)this + 42), 256, &v30);
      icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a2, a4, a6, a7);
      v20 = __b;
    }
    else
    {
      *a5 = 0;
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, 0, v14, (icu::UnicodeString *)v31);
      if ((v32 & 0x8000u) == 0)
        v16 = v32 >> 5;
      else
        v16 = v33;
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v16);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v31);
      icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a2, a4, a6, a7);
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, __b, HIDWORD(__b) - __b, (icu::UnicodeString *)v31);
      if ((v32 & 0x8000u) == 0)
        v18 = v32 >> 5;
      else
        v18 = v33;
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v18);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v31);
      (*(void (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 42) + 200))(*((_QWORD *)this + 42), 256, &v30);
      icu::SimpleDateFormat::_format(*((icu::SimpleDateFormat **)this + 42), a3, a4, a6, a7);
      v20 = HIDWORD(__b);
    }
    icu::UnicodeString::tempSubString((icu::UnicodeString *)v34, v20, v20 ^ 0x7FFFFFFF, (icu::UnicodeString *)v31);
    if ((v32 & 0x8000u) == 0)
      v25 = v32 >> 5;
    else
      v25 = v33;
    icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v31, 0, v25);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v31);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v34);
  }
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v36);
  return icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v41);
}

uint64_t sub_18BCD3EA8@<X0>(void *__b@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int v6;
  unsigned __int16 *v7;
  int v8;

  v6 = *(unsigned __int16 *)(a2 + 16);
  if ((v6 & 0x11) == 0)
  {
    if ((v6 & 2) != 0)
    {
      v7 = (unsigned __int16 *)(a2 + 18);
      if ((v6 & 0x8000) == 0)
        goto LABEL_6;
    }
    else
    {
      v7 = *(unsigned __int16 **)(a2 + 32);
      if ((v6 & 0x8000) == 0)
        goto LABEL_6;
    }
LABEL_8:
    v8 = *(_DWORD *)(a2 + 20);
    return icu::SimpleFormatter::getTextWithNoArguments(__b, v7, v8, a3, a4);
  }
  v7 = 0;
  if ((v6 & 0x8000) != 0)
    goto LABEL_8;
LABEL_6:
  v8 = v6 >> 5;
  return icu::SimpleFormatter::getTextWithNoArguments(__b, v7, v8, a3, a4);
}

icu::UnicodeString *icu::DateIntervalFormat::findReplaceInPattern(icu::DateIntervalFormat *this, icu::UnicodeString *a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4)
{
  unsigned int v7;
  int v8;
  int32_t v9;
  int32_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int32_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int32_t v29;
  void *v30;
  void *v31;
  int32_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  int v39;
  uint64_t v40;
  void *v41;
  void *v42;
  unsigned int v44;
  int v45;
  int32_t v46;
  int32_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  _OWORD v55[4];
  _OWORD v56[4];
  _OWORD v57[4];
  UChar *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v7 = *((unsigned __int16 *)this + 4);
  v8 = (__int16)v7;
  v9 = v7 >> 5;
  if (v8 >= 0)
    v10 = v9;
  else
    v10 = *((_DWORD *)this + 3);
  v11 = icu::UnicodeString::doIndexOf((uint64_t)this, 0x27u, 0, v10);
  if ((_DWORD)v11 == -1)
  {
    v44 = *((unsigned __int16 *)this + 4);
    v45 = (__int16)v44;
    v46 = v44 >> 5;
    if (v45 >= 0)
      v47 = v46;
    else
      v47 = *((_DWORD *)this + 3);
    v48 = *((unsigned __int16 *)a2 + 4);
    v49 = (__int16)v48;
    v50 = v48 >> 5;
    if (v49 >= 0)
      v51 = v50;
    else
      v51 = *((unsigned int *)a2 + 3);
    v52 = *((unsigned __int16 *)a3 + 4);
    v53 = (__int16)v52;
    v54 = v52 >> 5;
    if (v53 < 0)
      v54 = *((_DWORD *)a3 + 3);
    return icu::UnicodeString::findAndReplace(this, 0, v47, a2, 0, v51, a3, 0, v54);
  }
  else
  {
    v12 = v11;
    v59 = 0u;
    v62 = 0;
    v61 = 0u;
    v60 = 0u;
    v58 = (UChar *)off_1E2256B38;
    LOWORD(v59) = 2;
    memset(v57, 0, sizeof(v57));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v57, (UChar **)this);
    while ((v12 & 0x80000000) == 0)
    {
      v13 = v12 + 1;
      if (SWORD4(v57[0]) < 0)
      {
        v14 = HIDWORD(v57[0]);
        if (SHIDWORD(v57[0]) >= v13)
          v15 = v12 + 1;
        else
          v15 = HIDWORD(v57[0]);
      }
      else
      {
        v14 = WORD4(v57[0]) >> 5;
        if (v14 >= v13)
          v15 = v12 + 1;
        else
          v15 = WORD4(v57[0]) >> 5;
      }
      v16 = icu::UnicodeString::doIndexOf((uint64_t)v57, 0x27u, v15, v14 - v15);
      if (v16 == -1)
      {
        v17 = WORD4(v57[0]) >> 5;
        if (SWORD4(v57[0]) < 0)
          v17 = HIDWORD(v57[0]);
        v16 = v17 - 1;
      }
      memset(v56, 0, sizeof(v56));
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v56, (const icu::UnicodeString *)v57, 0, v12);
      memset(v55, 0, sizeof(v55));
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v55, (const icu::UnicodeString *)v57, v12, (v16 - v12 + 1));
      if ((SWORD4(v56[0]) & 0x8000u) == 0)
        v18 = WORD4(v56[0]) >> 5;
      else
        v18 = HIDWORD(v56[0]);
      v19 = *((unsigned __int16 *)a2 + 4);
      v20 = (__int16)v19;
      v21 = v19 >> 5;
      if (v20 >= 0)
        v22 = v21;
      else
        v22 = *((unsigned int *)a2 + 3);
      v23 = *((unsigned __int16 *)a3 + 4);
      v24 = (__int16)v23;
      v25 = v23 >> 5;
      if (v24 < 0)
        v25 = *((_DWORD *)a3 + 3);
      icu::UnicodeString::findAndReplace((icu::UnicodeString *)v56, 0, v18, a2, 0, v22, a3, 0, v25);
      if ((SWORD4(v56[0]) & 0x8000u) == 0)
        v26 = WORD4(v56[0]) >> 5;
      else
        v26 = HIDWORD(v56[0]);
      icu::UnicodeString::doAppend((uint64_t)&v58, (const icu::UnicodeString *)v56, 0, v26);
      if ((SWORD4(v55[0]) & 0x8000u) == 0)
        v27 = WORD4(v55[0]) >> 5;
      else
        v27 = HIDWORD(v55[0]);
      icu::UnicodeString::doAppend((uint64_t)&v58, (const icu::UnicodeString *)v55, 0, v27);
      if (v16 == 2147483646)
      {
        if ((BYTE8(v57[0]) & 1) != 0)
          v28 = 2;
        else
          v28 = BYTE8(v57[0]) & 0x1F;
        WORD4(v57[0]) = v28;
      }
      else
      {
        icu::UnicodeString::doReplace((uint64_t)v57, 0, (v16 + 1), 0, 0, 0);
        v28 = WORD4(v57[0]);
        if ((WORD4(v57[0]) & 0x8000) != 0)
        {
          v29 = HIDWORD(v57[0]);
          goto LABEL_38;
        }
      }
      v29 = v28 >> 5;
LABEL_38:
      v12 = icu::UnicodeString::doIndexOf((uint64_t)v57, 0x27u, 0, v29);
      icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v55);
      icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v56);
    }
    if ((SWORD4(v57[0]) & 0x8000u) == 0)
      v32 = WORD4(v57[0]) >> 5;
    else
      v32 = HIDWORD(v57[0]);
    v33 = *((unsigned __int16 *)a2 + 4);
    v34 = (__int16)v33;
    v35 = v33 >> 5;
    if (v34 >= 0)
      v36 = v35;
    else
      v36 = *((unsigned int *)a2 + 3);
    v37 = *((unsigned __int16 *)a3 + 4);
    v38 = (__int16)v37;
    v39 = v37 >> 5;
    if (v38 < 0)
      v39 = *((_DWORD *)a3 + 3);
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)v57, 0, v32, a2, 0, v36, a3, 0, v39);
    if ((SWORD4(v57[0]) & 0x8000u) == 0)
      v40 = WORD4(v57[0]) >> 5;
    else
      v40 = HIDWORD(v57[0]);
    icu::UnicodeString::doAppend((uint64_t)&v58, (const icu::UnicodeString *)v57, 0, v40);
    icu::UnicodeString::operator=((UChar **)this, &v58);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v57);
    return (icu::UnicodeString *)icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v58);
  }
}

void *icu::DateIntervalInfo::getStaticClassID(icu::DateIntervalInfo *this)
{
  return &unk_1EE009918;
}

void *icu::DateIntervalInfo::getDynamicClassID(icu::DateIntervalInfo *this)
{
  return &unk_1EE009918;
}

icu::DateIntervalInfo *icu::DateIntervalInfo::DateIntervalInfo(icu::DateIntervalInfo *this, UErrorCode *a2)
{
  icu::DateIntervalInfo *v4;

  *(_QWORD *)this = off_1E225E488;
  v4 = (icu::DateIntervalInfo *)icu::UnicodeString::UnicodeString((uint64_t)this + 8, (uint64_t)L"{0} – {1}");
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 10) = icu::DateIntervalInfo::initHash(v4, a2);
  return this;
}

{
  icu::DateIntervalInfo *v4;

  *(_QWORD *)this = off_1E225E488;
  v4 = (icu::DateIntervalInfo *)icu::UnicodeString::UnicodeString((uint64_t)this + 8, (uint64_t)L"{0} – {1}");
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 10) = icu::DateIntervalInfo::initHash(v4, a2);
  return this;
}

uint64_t *icu::DateIntervalInfo::initHash(icu::DateIntervalInfo *this, UErrorCode *a2)
{
  uint64_t *v2;
  int32x2_t *v4;
  uint64_t *v5;
  int32x2_t *v6;

  v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    v4 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, (unint64_t)a2);
    v5 = (uint64_t *)v4;
    if (!v4)
    {
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return v5;
    }
    *v4 = 0;
    if (*(int *)a2 <= 0)
    {
      v6 = v4 + 1;
      uhash_init(v4 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a2);
      if (*(int *)a2 <= 0)
      {
        *v5 = (uint64_t)v6;
        uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
        if (*(int *)a2 < 1)
        {
          uhash_setValueComparator(*v5, (uint64_t)sub_18BCD589C);
          return v5;
        }
      }
      if (*v5)
        uhash_close((void **)*v5);
    }
    icu::UMemory::operator delete(v5);
  }
  return 0;
}

icu::DateIntervalInfo *icu::DateIntervalInfo::DateIntervalInfo(icu::DateIntervalInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  *(_QWORD *)this = off_1E225E488;
  icu::UnicodeString::UnicodeString((uint64_t)this + 8, (uint64_t)L"{0} – {1}");
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 10) = 0;
  icu::DateIntervalInfo::initializeData(this, a2, a3);
  return this;
}

{
  *(_QWORD *)this = off_1E225E488;
  icu::UnicodeString::UnicodeString((uint64_t)this + 8, (uint64_t)L"{0} – {1}");
  *((_BYTE *)this + 72) = 0;
  *((_QWORD *)this + 10) = 0;
  icu::DateIntervalInfo::initializeData(this, a2, a3);
  return this;
}

void icu::DateIntervalInfo::initializeData(icu::DateIntervalInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  const UChar *StringByKeyWithFallback;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  icu::UnicodeString *v23;
  uint64_t v24;
  UErrorCode v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  const UChar *v35;
  int v36;
  BOOL v37;
  void *v38[7];
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  void *v47[8];
  char v48[256];
  __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 10) = icu::DateIntervalInfo::initHash(this, a3);
  if (*(int *)a3 <= 0)
  {
    v6 = (char *)*((_QWORD *)a2 + 5);
    v49 = 0;
    memset(v48, 0, sizeof(v48));
    ures_getFunctionalEquivalent((uint64_t)v48, 258, 0, (uint64_t)"calendar", (uint64_t)"calendar", (uint64_t)v6, 0, 0, (int *)a3);
    HIBYTE(v49) = 0;
    memset(&v47[1], 0, 56);
    v47[0] = (char *)&v47[1] + 5;
    LODWORD(v47[1]) = 40;
    v41 = 0uLL;
    icu::CharStringByteSink::CharStringByteSink(&v41, (uint64_t)v47);
    ulocimp_getKeywordValue(v48, "calendar", (uint64_t)&v41, (int *)a3);
    icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)&v41);
    if (*(int *)a3 <= 0)
      v7 = (char *)v47[0];
    else
      v7 = "gregorian";
    *a3 = U_ZERO_ERROR;
    v37 = 0;
    v8 = ures_open(0, v6, (int *)a3);
    v9 = ures_openWithCountryFallback(0, v6, &v37, (int *)a3);
    if (*(int *)a3 <= 0)
    {
      v10 = v9;
      v11 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v8, "calendar", 0, a3);
      v12 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v10, "calendar", 0, a3);
      if (*(int *)a3 <= 0)
      {
        v27 = v10;
        v28 = v8;
        v36 = 0;
        v13 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v11, v7, 0, a3);
        v14 = ures_getByKeyWithFallback((uint64_t)v13, "intervalFormats", 0, a3);
        v15 = (_QWORD *)v14;
        if (*(int *)a3 <= 0)
        {
          StringByKeyWithFallback = ures_getStringByKeyWithFallback(v14, "fallback", &v36, a3);
          if (*(int *)a3 <= 0)
          {
            if (StringByKeyWithFallback)
            {
              v43 = 0u;
              v44 = 0u;
              v41 = 0u;
              v42 = 0u;
              v35 = StringByKeyWithFallback;
              icu::UnicodeString::UnicodeString(&v41, 1, &v35);
              icu::DateIntervalInfo::setFallbackIntervalPattern(this, (const icu::UnicodeString *)&v41, a3);
              icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v41);
            }
          }
        }
        ures_close(v15);
        ures_close(v13);
        if (v37)
          v18 = (uint64_t)v12;
        else
          v18 = (uint64_t)v11;
        while (v18)
        {
          v46 = 0;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v41 = 0u;
          v19 = icu::Locale::isRightToLeft(a2) == 0;
          *(_QWORD *)&v41 = off_1E225E4C0;
          *((_QWORD *)&v41 + 1) = this;
          icu::UnicodeString::UnicodeString(&v42, v7, 0xFFFFFFFFLL, 0);
          LOBYTE(v46) = v18 != (_QWORD)v11;
          BYTE1(v46) = v19;
          v34 = 0;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          *(_OWORD *)v29 = 0u;
          v20 = *(unsigned int *)a3;
          if ((int)v20 < 1)
          {
            uhash_init((int32x2_t *)&v29[1], (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a3);
            v20 = *(unsigned int *)a3;
            if ((int)v20 <= 0)
            {
              v29[0] = &v29[1];
              uhash_setKeyDeleter((uint64_t)&v29[1], (uint64_t)uprv_deleteUObject);
              v20 = *(unsigned int *)a3;
              if ((int)v20 <= 0)
              {
                while (1)
                {
                  v20 = WORD4(v42);
                  if ((BYTE8(v42) & 1) != 0)
                    break;
                  if (uhash_geti((uint64_t)&v29[1], (uint64_t)&v42) == 1)
                  {
                    v20 = 3;
                    *a3 = U_INVALID_FORMAT_ERROR;
                    break;
                  }
                  v23 = (icu::UnicodeString *)icu::UMemory::operator new(v22, (icu::UMemory *)0x40, v21);
                  v24 = (uint64_t)v23;
                  if (v23)
                    icu::UnicodeString::UnicodeString(v23, (UChar **)&v42);
                  uhash_puti((uint64_t)&v29[1], v24, 1u, (int *)a3);
                  v20 = *(unsigned int *)a3;
                  if ((int)v20 <= 0)
                  {
                    v40 = 0;
                    memset(&v38[1], 0, 48);
                    v38[0] = (char *)&v38[1] + 5;
                    LODWORD(v38[1]) = 40;
                    v39 = 0;
                    icu::CharString::appendInvariantChars((icu::CharString *)v38, (const icu::UnicodeString *)&v42, a3);
                    v25 = *a3;
                    if (*(int *)a3 <= 0)
                    {
                      v26 = (char *)v38[0];
                      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v42);
                      ures_getAllItemsWithFallback(v18, v26, (uint64_t)&v41, (int *)a3);
                    }
                    v20 = BYTE4(v38[1]);
                    if (BYTE4(v38[1]))
                      uprv_free(v38[0]);
                    if (v25 < U_ILLEGAL_ARGUMENT_ERROR)
                      continue;
                  }
                  break;
                }
              }
            }
            if ((_QWORD *)v18 == v11)
              v18 = 0;
            else
              v18 = (uint64_t)v11;
            if (v29[0])
              uhash_close((void **)v29[0]);
          }
          else if ((_QWORD *)v18 == v11)
          {
            v18 = 0;
          }
          else
          {
            v18 = (uint64_t)v11;
          }
          *(_QWORD *)&v41 = off_1E225E4C0;
          icu::UnicodeString::~UnicodeString((void *)v20, (icu::UnicodeString *)&v42);
          icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v41);
        }
        v10 = v27;
        v8 = v28;
      }
      ures_close(v11);
      ures_close(v8);
      ures_close(v12);
      ures_close(v10);
    }
    if (BYTE4(v47[1]))
      uprv_free(v47[0]);
  }
}

icu::UnicodeString *icu::DateIntervalInfo::setIntervalPattern(uint64_t a1, UChar **a2, unsigned int a3, UChar **a4, int *a5)
{
  if (a3 == 11)
  {
    icu::DateIntervalInfo::setIntervalPatternInternally(a1, a2, 9u, a4, a5);
    a3 = 10;
  }
  else if ((a3 & 0xFFFFFFFD) == 5)
  {
    a3 = 5;
  }
  return icu::DateIntervalInfo::setIntervalPatternInternally(a1, a2, a3, a4, a5);
}

icu::UnicodeString *icu::DateIntervalInfo::setIntervalPatternInternally(uint64_t a1, UChar **a2, unsigned int a3, UChar **a4, int *a5)
{
  icu::UnicodeString *result;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  icu::UnicodeString *v18;
  uint64_t v19;

  result = (icu::UnicodeString *)icu::DateIntervalInfo::calendarFieldToIntervalIndex(a3, a5);
  if (*a5 <= 0)
  {
    v10 = result;
    v11 = uhash_get(**(_QWORD **)(a1 + 80), (uint64_t)a2);
    if (v11)
    {
      return icu::UnicodeString::operator=((UChar **)(v11 + ((unint64_t)v10 << 6)), a4);
    }
    else
    {
      result = (icu::UnicodeString *)icu::UMemory::operator new[]((icu::UMemory *)0x250, v12);
      if (result)
      {
        *(_OWORD *)result = xmmword_18BE25FD0;
        v13 = (uint64_t)result + 16;
        v14 = (_WORD *)((char *)result + 16);
        do
        {
          *(_QWORD *)v14 = off_1E2256B38;
          v14[4] = 2;
          v14 += 32;
        }
        while (v14 != (_WORD *)((char *)result + 592));
        icu::UnicodeString::operator=((UChar **)(v13 + ((unint64_t)v10 << 6)), a4);
        v15 = *(uint64_t **)(a1 + 80);
        v16 = *v15;
        v18 = (icu::UnicodeString *)icu::UMemory::operator new(v15, (icu::UMemory *)0x40, v17);
        v19 = (uint64_t)v18;
        if (v18)
          icu::UnicodeString::UnicodeString(v18, a2);
        return (icu::UnicodeString *)uhash_put(v16, v19, v13, a5);
      }
      else
      {
        *a5 = 7;
      }
    }
  }
  return result;
}

icu::UnicodeString *icu::DateIntervalInfo::setFallbackIntervalPattern(icu::UnicodeString *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;

  if (*(int *)a3 <= 0)
  {
    v5 = (uint64_t)this;
    if (*((__int16 *)a2 + 4) < 0)
    {
      v7 = *((_DWORD *)a2 + 3);
      v6 = v7 & (v7 >> 31);
    }
    else
    {
      v6 = 0;
      v7 = *((unsigned __int16 *)a2 + 4) >> 5;
    }
    v8 = icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)a01_5, 0, 3, v6, v7 - v6);
    v9 = *((unsigned __int16 *)a2 + 4);
    if ((v9 & 0x8000) != 0)
    {
      v11 = *((_DWORD *)a2 + 3);
      v10 = v11 & (v11 >> 31);
    }
    else
    {
      v10 = 0;
      v11 = v9 >> 5;
    }
    this = (icu::UnicodeString *)icu::UnicodeString::indexOf((uint64_t)a2, (uint64_t)&a01_5[3], 0, 3, v10, v11 - v10);
    if (v8 == -1 || (_DWORD)this == -1)
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      if (v8 > (int)this)
        *(_BYTE *)(v5 + 72) = 1;
      return icu::UnicodeString::operator=((UChar **)(v5 + 8), (UChar **)a2);
    }
  }
  return this;
}

uint64_t icu::DateIntervalInfo::DateIntervalInfo(uint64_t this, uint64_t a2)
{
  *(_QWORD *)this = off_1E225E488;
  *(_QWORD *)(this + 8) = off_1E2256B38;
  *(_WORD *)(this + 16) = 2;
  *(_QWORD *)(this + 80) = 0;
  return icu::DateIntervalInfo::operator=(this, a2);
}

{
  *(_QWORD *)this = off_1E225E488;
  *(_QWORD *)(this + 8) = off_1E2256B38;
  *(_WORD *)(this + 16) = 2;
  *(_QWORD *)(this + 80) = 0;
  return icu::DateIntervalInfo::operator=(this, a2);
}

uint64_t icu::DateIntervalInfo::operator=(uint64_t a1, uint64_t a2)
{
  icu::DateIntervalInfo *v4;
  uint64_t *inited;
  UErrorCode v7;

  if (a1 != a2)
  {
    v7 = U_ZERO_ERROR;
    icu::DateIntervalInfo::deleteHash(a1, *(uint64_t ***)(a1 + 80));
    inited = icu::DateIntervalInfo::initHash(v4, &v7);
    *(_QWORD *)(a1 + 80) = inited;
    icu::DateIntervalInfo::copyHash((uint64_t)inited, *(uint64_t ***)(a2 + 80), inited, (int *)&v7);
    if (v7 <= U_ZERO_ERROR)
    {
      icu::UnicodeString::operator=((UChar **)(a1 + 8), (UChar **)(a2 + 8));
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    }
  }
  return a1;
}

void icu::DateIntervalInfo::deleteHash(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void ***v8;
  int v9;

  if (a2)
  {
    v9 = -1;
    while (1)
    {
      v4 = uhash_nextElement(*a2, &v9);
      if (!v4)
        break;
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(void **)(v5 - 8);
        if (v6)
        {
          v7 = (_QWORD)v6 << 6;
          do
          {
            icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(v5 - 64 + v7));
            v7 -= 64;
          }
          while (v7);
        }
        icu::UMemory::operator delete[]((void *)(v5 - 16));
      }
    }
    v8 = *(void ****)(a1 + 80);
    if (v8)
    {
      if (*v8)
        uhash_close(*v8);
      icu::UMemory::operator delete(v8);
    }
  }
}

void icu::DateIntervalInfo::copyHash(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4)
{
  uint64_t v7;
  unint64_t v8;
  UChar **v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  icu::UnicodeString *v18;
  uint64_t v19;
  void *v20;
  int v21;
  UChar *v22[9];

  v22[8] = *(UChar **)MEMORY[0x1E0C80C00];
  if (*a4 <= 0)
  {
    v21 = -1;
    if (a2)
    {
      do
      {
        v7 = uhash_nextElement(*a2, &v21);
        if (!v7)
          break;
        v10 = *(_QWORD *)(v7 + 8);
        v9 = *(UChar ***)(v7 + 16);
        v11 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x250, v8);
        if (!v11)
        {
          *a4 = 7;
          return;
        }
        *v11 = xmmword_18BE25FD0;
        v12 = (uint64_t)(v11 + 1);
        v13 = v11 + 1;
        do
        {
          *(_QWORD *)v13 = off_1E2256B38;
          *((_WORD *)v13 + 4) = 2;
          v13 += 4;
        }
        while (v13 != v11 + 37);
        for (i = 0; i != 576; i += 64)
          icu::UnicodeString::operator=((UChar **)(v12 + i), (UChar **)(v10 + i));
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v22, v9);
        v15 = *a3;
        v18 = (icu::UnicodeString *)icu::UMemory::operator new(v17, (icu::UMemory *)0x40, v16);
        v19 = (uint64_t)v18;
        if (v18)
          icu::UnicodeString::UnicodeString(v18, v22);
        uhash_put(v15, v19, v12, a4);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v22);
      }
      while (*a4 < 1);
    }
  }
}

uint64_t *icu::DateIntervalInfo::clone@<X0>(icu::DateIntervalInfo *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x58, a2);
  if (result)
  {
    *result = (uint64_t)off_1E225E488;
    result[1] = (uint64_t)off_1E2256B38;
    *((_WORD *)result + 8) = 2;
    result[10] = 0;
    return (uint64_t *)icu::DateIntervalInfo::operator=((uint64_t)result, (uint64_t)this);
  }
  return result;
}

void icu::DateIntervalInfo::~DateIntervalInfo(uint64_t ***this)
{
  void *v2;

  icu::DateIntervalInfo::deleteHash((uint64_t)this, this[10]);
  this[10] = 0;
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(this + 1));
  icu::UObject::~UObject((icu::UObject *)this);
}

{
  void *v1;

  icu::DateIntervalInfo::~DateIntervalInfo(this);
  icu::UMemory::operator delete(v1);
}

BOOL icu::DateIntervalInfo::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  _BOOL8 result;
  unsigned int v7;
  unsigned int v8;

  v4 = *(unsigned __int16 *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 16) & 1) == 0)
      return 0;
LABEL_13:
    if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
      return uhash_equals(**(_QWORD **)(a1 + 80), **(_QWORD **)(a2 + 80)) != 0;
    return 0;
  }
  if ((v4 & 0x8000) != 0)
    v5 = *(_DWORD *)(a1 + 20);
  else
    v5 = v4 >> 5;
  result = 0;
  v7 = *(unsigned __int16 *)(a2 + 16);
  if ((v7 & 0x8000u) == 0)
    v8 = v7 >> 5;
  else
    v8 = *(_DWORD *)(a2 + 20);
  if ((v7 & 1) == 0 && v5 == v8)
  {
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v5);
    if (result)
      goto LABEL_13;
  }
  return result;
}

UChar **icu::DateIntervalInfo::getIntervalPattern(uint64_t a1, uint64_t a2, unsigned int a3, UChar **a4, int *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;

  if (*a5 <= 0)
  {
    v9 = uhash_get(**(_QWORD **)(a1 + 80), a2);
    if (v9)
    {
      v10 = v9;
      v11 = icu::DateIntervalInfo::calendarFieldToIntervalIndex(a3, a5);
      if (*a5 <= 0)
      {
        v12 = v10 + ((unint64_t)v11 << 6);
        if (*(unsigned __int16 *)(v12 + 8) >= 0x20u)
          icu::UnicodeString::operator=(a4, (UChar **)v12);
      }
    }
  }
  return a4;
}

uint64_t icu::DateIntervalInfo::calendarFieldToIntervalIndex(unsigned int a1, int *a2)
{
  if (*a2 > 0)
    return 9;
  if (a1 >= 0xF || ((0x7EA7u >> a1) & 1) == 0)
  {
    *a2 = 1;
    return 9;
  }
  return dword_18BE260B4[a1];
}

uint64_t icu::DateIntervalInfo::getDefaultOrder(icu::DateIntervalInfo *this)
{
  return *((char *)this + 72);
}

UChar **icu::DateIntervalInfo::getFallbackIntervalPattern(UChar **this, UChar **a2)
{
  icu::UnicodeString::operator=(a2, this + 1);
  return a2;
}

void sub_18BCD51EC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E225E4C0;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 16));
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

void sub_18BCD521C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E225E4C0;
  icu::UnicodeString::~UnicodeString(off_1E225E4C0, (icu::UnicodeString *)(a1 + 16));
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t icu::DateIntervalInfo::parseSkeleton(uint64_t this, const icu::UnicodeString *a2, int *a3)
{
  unint64_t i;
  int v4;
  unint64_t v5;
  uint64_t v6;
  __int16 v7;

  for (i = 0; ; ++i)
  {
    v4 = *(__int16 *)(this + 8);
    if (v4 < 0)
      break;
    if (i >= (unint64_t)*(unsigned __int16 *)(this + 8) >> 5)
      return this;
    v5 = (unint64_t)*(unsigned __int16 *)(this + 8) >> 5;
LABEL_7:
    if (v5 <= i)
    {
      LOBYTE(v7) = -1;
    }
    else
    {
      if ((v4 & 2) != 0)
        v6 = this + 10;
      else
        v6 = *(_QWORD *)(this + 24);
      v7 = *(_WORD *)(v6 + 2 * i);
    }
    ++*((_DWORD *)a2 + (char)v7 - 65);
  }
  if ((uint64_t)i < *(int *)(this + 12))
  {
    v5 = *(unsigned int *)(this + 12);
    goto LABEL_7;
  }
  return this;
}

BOOL icu::DateIntervalInfo::stringNumeric(icu::DateIntervalInfo *this, int a2, int a3)
{
  return a3 == 77 && ((int)this <= 2 && a2 > 2 || (int)this >= 3 && a2 < 3);
}

uint64_t icu::DateIntervalInfo::getBestSkeleton(uint64_t ***this, const icu::UnicodeString *a2, unsigned __int8 *a3)
{
  UChar **v4;
  unsigned int v6;
  int v7;
  int32_t v8;
  int32_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int32_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int32_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int32_t v21;
  unsigned int v22;
  int v23;
  int32_t v24;
  int32_t v25;
  int *v26;
  int32_t v27;
  uint64_t v28;
  int v29;
  void *v30;
  void *v31;
  int32_t v32;
  uint64_t v33;
  int v34;
  void *v35;
  void *v36;
  int32_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  void *v41;
  int32_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  int32_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  uint64_t Element;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  signed __int8 v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  void (**v65)(icu::UnicodeString *__hidden);
  unsigned __int16 v66;
  int v67;
  UChar *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _OWORD v73[14];
  uint64_t v74;
  _OWORD v75[14];
  uint64_t v76;
  uint64_t v77;

  v4 = (UChar **)a2;
  v77 = *MEMORY[0x1E0C80C00];
  v76 = 0;
  memset(v75, 0, sizeof(v75));
  v69 = 0u;
  v72 = 0;
  v71 = 0u;
  v70 = 0u;
  v68 = (UChar *)off_1E2256B38;
  v6 = *((unsigned __int16 *)a2 + 4);
  v7 = (__int16)v6;
  v8 = v6 >> 5;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = *((_DWORD *)a2 + 3);
  LOWORD(v69) = 2;
  if (icu::UnicodeString::doIndexOf((uint64_t)a2, 0x7Au, 0, v9) != -1)
    goto LABEL_21;
  v10 = *((unsigned __int16 *)v4 + 4);
  v11 = (__int16)v10;
  v12 = v10 >> 5;
  v13 = v11 >= 0 ? v12 : *((_DWORD *)v4 + 3);
  if (icu::UnicodeString::doIndexOf((uint64_t)v4, 0x6Bu, 0, v13) != -1)
    goto LABEL_21;
  v14 = *((unsigned __int16 *)v4 + 4);
  v15 = (__int16)v14;
  v16 = v14 >> 5;
  v17 = v15 >= 0 ? v16 : *((_DWORD *)v4 + 3);
  if (icu::UnicodeString::doIndexOf((uint64_t)v4, 0x4Bu, 0, v17) != -1)
    goto LABEL_21;
  v18 = *((unsigned __int16 *)v4 + 4);
  v19 = (__int16)v18;
  v20 = v18 >> 5;
  v21 = v19 >= 0 ? v20 : *((_DWORD *)v4 + 3);
  if (icu::UnicodeString::doIndexOf((uint64_t)v4, 0x61u, 0, v21) == -1
    && ((v22 = *((unsigned __int16 *)v4 + 4), v23 = (__int16)v22, v24 = v22 >> 5, v23 >= 0)
      ? (v25 = v24)
      : (v25 = *((_DWORD *)v4 + 3)),
        icu::UnicodeString::doIndexOf((uint64_t)v4, 0x62u, 0, v25) == -1))
  {
    v50 = 1;
  }
  else
  {
LABEL_21:
    icu::UnicodeString::operator=(&v68, v4);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 122);
    icu::UnicodeString::UnicodeString((uint64_t)&v65, 118);
    if ((v69 & 0x8000u) == 0)
      v27 = (unsigned __int16)v69 >> 5;
    else
      v27 = DWORD1(v69);
    if ((SWORD4(v73[0]) & 0x8000u) == 0)
      v28 = WORD4(v73[0]) >> 5;
    else
      v28 = HIDWORD(v73[0]);
    v29 = v66 >> 5;
    if ((v66 & 0x8000u) != 0)
      v29 = v67;
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v27, (const icu::UnicodeString *)v73, 0, v28, (const icu::UnicodeString *)&v65, 0, v29);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v73);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 107);
    icu::UnicodeString::UnicodeString((uint64_t)&v65, 72);
    if ((v69 & 0x8000u) == 0)
      v32 = (unsigned __int16)v69 >> 5;
    else
      v32 = DWORD1(v69);
    if ((SWORD4(v73[0]) & 0x8000u) == 0)
      v33 = WORD4(v73[0]) >> 5;
    else
      v33 = HIDWORD(v73[0]);
    v34 = v66 >> 5;
    if ((v66 & 0x8000u) != 0)
      v34 = v67;
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v32, (const icu::UnicodeString *)v73, 0, v33, (const icu::UnicodeString *)&v65, 0, v34);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v73);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 75);
    icu::UnicodeString::UnicodeString((uint64_t)&v65, 104);
    if ((v69 & 0x8000u) == 0)
      v37 = (unsigned __int16)v69 >> 5;
    else
      v37 = DWORD1(v69);
    if ((SWORD4(v73[0]) & 0x8000u) == 0)
      v38 = WORD4(v73[0]) >> 5;
    else
      v38 = HIDWORD(v73[0]);
    v39 = v66 >> 5;
    if ((v66 & 0x8000u) != 0)
      v39 = v67;
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v37, (const icu::UnicodeString *)v73, 0, v38, (const icu::UnicodeString *)&v65, 0, v39);
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v73);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 97);
    v65 = off_1E2256B38;
    v66 = 2;
    if ((v69 & 0x8000u) == 0)
      v42 = (unsigned __int16)v69 >> 5;
    else
      v42 = DWORD1(v69);
    if ((SWORD4(v73[0]) & 0x8000u) == 0)
      v43 = WORD4(v73[0]) >> 5;
    else
      v43 = HIDWORD(v73[0]);
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v42, (const icu::UnicodeString *)v73, 0, v43, (const icu::UnicodeString *)&v65, 0, 0);
    icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v73);
    icu::UnicodeString::UnicodeString((uint64_t)v73, 98);
    v65 = off_1E2256B38;
    v66 = 2;
    if ((v69 & 0x8000u) == 0)
      v46 = (unsigned __int16)v69 >> 5;
    else
      v46 = DWORD1(v69);
    if ((SWORD4(v73[0]) & 0x8000u) == 0)
      v47 = WORD4(v73[0]) >> 5;
    else
      v47 = HIDWORD(v73[0]);
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v68, 0, v46, (const icu::UnicodeString *)v73, 0, v47, (const icu::UnicodeString *)&v65, 0, 0);
    icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v65);
    icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)v73);
    v50 = 0;
    v4 = &v68;
  }
  icu::DateIntervalInfo::parseSkeleton((uint64_t)v4, (const icu::UnicodeString *)v75, v26);
  v51 = 0;
  *a3 = 0;
  LODWORD(v65) = -1;
  v52 = 56632;
  while (1)
  {
    Element = uhash_nextElement(*this[10], (int *)&v65);
    if (!Element)
      break;
    v55 = *(_QWORD *)(Element + 16);
    memset(v73, 0, sizeof(v73));
    v74 = 0;
    icu::DateIntervalInfo::parseSkeleton(v55, (const icu::UnicodeString *)v73, v54);
    v56 = 0;
    v57 = 0;
    v58 = 1;
    do
    {
      v59 = *(_DWORD *)((char *)v75 + v56);
      v60 = *(_DWORD *)((char *)v73 + v56);
      v61 = v59 - v60;
      if (v59 != v60)
      {
        if (v59 && v60)
        {
          if (v56 != 48 || (v59 <= 2 ? (v62 = v60 <= 2) : (v62 = 1), v62 && (v59 < 3 || v60 > 2)))
          {
            if (v61 < 0)
              v61 = v60 - v59;
            v57 += v61;
          }
          else
          {
            v57 += 256;
          }
        }
        else
        {
          v57 += 4096;
          v58 = -1;
        }
      }
      v56 += 4;
    }
    while (v56 != 232);
    if (v57 >= v52)
    {
      if (!v57)
        goto LABEL_81;
    }
    else
    {
      v52 = v57;
      v51 = v55;
LABEL_81:
      if (!v57)
        v58 = 0;
      *a3 = v58;
      if (!v57)
        break;
    }
  }
  if (*a3 == 255)
    v63 = 1;
  else
    v63 = v50;
  if ((v63 & 1) == 0)
  {
    v63 = 2;
    *a3 = 2;
  }
  icu::UnicodeString::~UnicodeString((void *)v63, (icu::UnicodeString *)&v68);
  return v51;
}

uint64_t sub_18BCD589C(icu::UnicodeString *this, icu::UnicodeString *a2)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;

  v4 = 0;
  while (1)
  {
    v5 = *((unsigned __int16 *)this + 4);
    if ((v5 & 1) != 0)
    {
      result = *((_WORD *)a2 + 4) & 1;
      goto LABEL_13;
    }
    v6 = (v5 & 0x8000) != 0 ? *((_DWORD *)this + 3) : v5 >> 5;
    result = 0;
    v8 = *((unsigned __int16 *)a2 + 4);
    v9 = (v8 & 0x8000u) == 0 ? v8 >> 5 : *((_DWORD *)a2 + 3);
    if ((v8 & 1) != 0 || v6 != v9)
      return result;
    result = icu::UnicodeString::doEquals(this, a2, v6);
LABEL_13:
    if (v4 <= 7)
    {
      ++v4;
      a2 = (icu::UnicodeString *)((char *)a2 + 64);
      this = (icu::UnicodeString *)((char *)this + 64);
      if ((result & 1) != 0)
        continue;
    }
    return result;
  }
}

_QWORD *sub_18BCD5940(_QWORD *result, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  __int16 v10;
  unsigned int v11;
  _OWORD v12[2];
  uint64_t v13;
  char *__s1;
  uint64_t v15;
  int v16;
  _OWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  __s1 = a2;
  if (*a5 > 0)
    return result;
  v7 = (uint64_t)result;
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v12, a3, a5);
  if (*a5 > 0)
    return result;
  result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v12, 0, (const char **)&__s1, a3);
  if (!(_DWORD)result)
    return result;
  v8 = 1;
  while (1)
  {
    if (strcmp(__s1, "intervalFormats"))
      goto LABEL_9;
    if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3) == 3)
      break;
    if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3) == 2)
    {
      v18 = 0;
      memset(v17, 0, sizeof(v17));
      result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v17, a3, a5);
      if (*a5 <= 0)
      {
        result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v17, 0, (const char **)&__s1, a3);
        if ((_DWORD)result)
        {
          v11 = 1;
          do
          {
            if (sub_18BCD5CCC(v7, __s1))
            {
              if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3) == 2)
              {
                result = sub_18BCD5D5C((_QWORD *)v7, __s1, a3, a5);
                if (*a5 > 0)
                  break;
              }
            }
            result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v17, v11++, (const char **)&__s1, a3);
          }
          while ((_DWORD)result);
        }
      }
      return result;
    }
LABEL_9:
    result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v12, v8++, (const char **)&__s1, a3);
    if (!(_DWORD)result)
      return result;
  }
  v16 = 0;
  v15 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 40))(a3, &v16, a5);
  icu::UnicodeString::UnicodeString(v17, 1, &v15);
  v9 = *a5;
  if ((int)v9 <= 0)
  {
    v10 = (*(_WORD *)(v7 + 24) & 1) != 0 ? 2 : *(_WORD *)(v7 + 24) & 0x1F;
    *(_WORD *)(v7 + 24) = v10;
    sub_18BCD5BB8((uint64_t)v17, v7 + 16, a5);
    v9 = *a5;
    if ((int)v9 >= 1)
      icu::UnicodeString::setToBogus((icu::UnicodeString *)(v7 + 16));
  }
  return icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)v17);
}

uint64_t sub_18BCD5BB8(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;

  if (*a3 <= 0)
  {
    v5 = result;
    result = icu::UnicodeString::doEqualsSubstring(result, 0, 17, (uint64_t)L"/LOCALE/calendar//intervalFormats", 0, 17);
    if (!(_DWORD)result)
      goto LABEL_9;
    v6 = *(unsigned __int16 *)(v5 + 8);
    v7 = (__int16)v6;
    v8 = v6 >> 5;
    if (v7 < 0)
      v8 = *(_DWORD *)(v5 + 12);
    result = icu::UnicodeString::doEqualsSubstring(v5, v8 - 16, 16, (uint64_t)L"/intervalFormats", 0, 16);
    if ((_DWORD)result)
    {
      v9 = *(unsigned __int16 *)(v5 + 8);
      v10 = (__int16)v9;
      v11 = v9 >> 5;
      if (v10 < 0)
        v11 = *(_DWORD *)(v5 + 12);
      return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v5 + 24))(v5, 17, v11 - 16, a2);
    }
    else
    {
LABEL_9:
      *a3 = 3;
    }
  }
  return result;
}

uint64_t sub_18BCD5CCC(uint64_t a1, _BYTE *a2)
{
  char v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;

  if (!*(_BYTE *)(a1 + 80))
    return 1;
  v2 = *a2;
  if (!*a2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = a2 + 1;
  do
  {
    if (v2 == 121)
      v7 = v5 + 1;
    else
      v7 = v5;
    if (v2 == 100)
      v8 = v5;
    else
      v8 = v7;
    if (v2 == 100)
      v9 = v3 + 1;
    else
      v9 = v3;
    if (v2 == 77)
      ++v4;
    else
      v5 = v8;
    if (v2 != 77)
      v3 = v9;
    v10 = *v6++;
    v2 = v10;
  }
  while (v10);
  if (v4 > 2)
    return 0;
  if ((v5 < 1 || v4 <= 0) && (v4 < 1 ? (v11 = v5 < 1) : (v11 = 0), v11 || v3 <= 0))
    return 0;
  else
    return 1;
}

_QWORD *sub_18BCD5D5C(_QWORD *result, char *a2, icu::ResourceValue *a3, int *a4)
{
  uint64_t v7;
  unsigned int v8;
  signed int v9;
  _OWORD v10[2];
  uint64_t v11;
  char *v12;

  v12 = a2;
  if (*a4 <= 0)
  {
    v7 = (uint64_t)result;
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v10, a3, a4);
    if (*a4 <= 0)
    {
      result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v10, 0, (const char **)&v12, a3);
      if ((_DWORD)result)
      {
        v8 = 1;
        do
        {
          if (!(*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3))
          {
            v9 = sub_18BCD5E60(v7, (unsigned __int8 *)v12);
            if (v9 <= 23)
            {
              result = sub_18BCD5EFC(v7, (uint64_t)a2, v9, (uint64_t)a3, a4);
              if (*a4 > 0)
                break;
            }
          }
          result = (_QWORD *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v10, v8++, (const char **)&v12, a3);
        }
        while ((_DWORD)result);
      }
    }
  }
  return result;
}

uint64_t sub_18BCD5E60(uint64_t a1, unsigned __int8 *a2)
{
  int v2;

  v2 = *a2;
  if (!*a2 || a2[1])
    return 24;
  if (*a2 <= 0x60u)
  {
    if (v2 != 66)
    {
      if (v2 == 71)
        return 0;
      if (v2 == 77)
        return 2;
      goto LABEL_16;
    }
    return 9;
  }
  switch(v2)
  {
    case 'a':
      return 9;
    case 'd':
      return 5;
    case 'y':
      return 1;
  }
LABEL_16:
  if ((v2 & 0xFFFFFFDF) == 0x48)
    return 10;
  if (v2 != 109)
    return 24;
  return 12;
}

void *sub_18BCD5EFC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int *a5)
{
  void *result;
  unsigned int v11;
  uint64_t v12;
  void *v13;
  int32_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void (**v19)(icu::UnicodeString *__hidden);
  __int16 v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned int v23;
  UChar *v24[8];
  UChar *v25[10];

  v25[9] = *(UChar **)MEMORY[0x1E0C80C00];
  result = (void *)icu::DateIntervalInfo::calendarFieldToIntervalIndex(a3, a5);
  if (*a5 <= 0)
  {
    v11 = result;
    memset(v25, 0, 64);
    icu::UnicodeString::UnicodeString(v25, a2, 0xFFFFFFFFLL, 0);
    v12 = uhash_get(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 80), (uint64_t)v25);
    if (!v12
      || (v13 = (void *)*(unsigned __int16 *)(v12 + ((unint64_t)v11 << 6) + 8), v13 <= 0x1F))
    {
      memset(v24, 0, sizeof(v24));
      LODWORD(v19) = 0;
      v21 = (*(uint64_t (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)a4 + 32))(a4, &v19, a5);
      icu::UnicodeString::UnicodeString(v24, 1, &v21);
      if (*(_BYTE *)(a1 + 81))
      {
        icu::UnicodeString::UnicodeString((uint64_t)&v21, 8207);
        v19 = off_1E2256B38;
        v20 = 2;
        if (SLOWORD(v24[1]) >= 0)
          v14 = LOWORD(v24[1]) >> 5;
        else
          v14 = HIDWORD(v24[1]);
        if ((v22 & 0x8000u) == 0)
          v15 = v22 >> 5;
        else
          v15 = v23;
        icu::UnicodeString::findAndReplace((icu::UnicodeString *)v24, 0, v14, (const icu::UnicodeString *)&v21, 0, v15, (const icu::UnicodeString *)&v19, 0, 0);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v19);
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v21);
      }
      icu::DateIntervalInfo::setIntervalPatternInternally(*(_QWORD *)(a1 + 8), v25, a3, v24, a5);
      icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v24);
    }
    return icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v25);
  }
  return result;
}

void *icu::DateTimePatternGenerator::getStaticClassID(icu::DateTimePatternGenerator *this)
{
  return &unk_1EE009920;
}

void *icu::DateTimePatternGenerator::getDynamicClassID(icu::DateTimePatternGenerator *this)
{
  return &unk_1EE009920;
}

void *sub_18BCD60F8()
{
  return &unk_1EE009921;
}

void *sub_18BCD6104()
{
  return &unk_1EE009922;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::createInstance(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::DateTimePatternGenerator::createInstance((const char **)Default, (UErrorCode *)this, 0);
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::createInstance(const char **this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t *v3;
  icu::DateTimePatternGenerator *result;
  int v5;
  icu::DateTimePatternGenerator *v8;

  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0)
    return 0;
  v5 = (int)a3;
  v8 = (icu::DateTimePatternGenerator *)icu::UMemory::operator new(v3, (icu::UMemory *)0x12C0, (unint64_t)a2);
  if (!v8)
  {
    if (*(int *)a2 <= 0)
    {
      result = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    return 0;
  }
  result = icu::DateTimePatternGenerator::DateTimePatternGenerator(v8, this, a2, v5);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::DateTimePatternGenerator *))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::createInstanceNoStdPat(const char **this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t *v3;
  icu::DateTimePatternGenerator *result;
  icu::DateTimePatternGenerator *v7;

  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0)
    return 0;
  v7 = (icu::DateTimePatternGenerator *)icu::UMemory::operator new(v3, (icu::UMemory *)0x12C0, (unint64_t)a2);
  if (!v7)
  {
    if (*(int *)a2 <= 0)
    {
      result = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    return 0;
  }
  result = icu::DateTimePatternGenerator::DateTimePatternGenerator(v7, this, a2, 1);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(icu::DateTimePatternGenerator *))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::createEmptyInstance(UErrorCode *this, UErrorCode *a2)
{
  uint64_t *v2;
  icu::DateTimePatternGenerator *result;
  icu::DateTimePatternGenerator *v5;

  v2 = (uint64_t *)*(unsigned int *)this;
  if ((int)v2 > 0)
    return 0;
  v5 = (icu::DateTimePatternGenerator *)icu::UMemory::operator new(v2, (icu::UMemory *)0x12C0, (unint64_t)a2);
  if (!v5)
  {
    if (*(int *)this <= 0)
    {
      result = 0;
      *this = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
    return 0;
  }
  result = icu::DateTimePatternGenerator::DateTimePatternGenerator(v5, this);
  if (*(int *)this >= 1)
  {
    (*(void (**)(icu::DateTimePatternGenerator *))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  *(_QWORD *)this = off_1E225E520;
  icu::Locale::Locale((icu::DateTimePatternGenerator *)((char *)this + 8));
  v5 = 264;
  do
  {
    v6 = (char *)this + v5;
    *(_QWORD *)v6 = off_1E2256B38;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64;
  }
  while (v6 + 64 != (char *)this + 1288);
  v7 = 1288;
  do
  {
    v8 = (char *)this + v7;
    *(_QWORD *)v8 = off_1E2256B38;
    *((_WORD *)v8 + 4) = 2;
    v7 += 64;
  }
  while (v8 + 64 != (char *)this + 4360);
  v9 = 4360;
  do
  {
    v10 = (char *)this + v9;
    *(_QWORD *)v10 = off_1E2256B38;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 4616);
  *((_QWORD *)this + 577) = off_1E2256B38;
  *((_WORD *)this + 2312) = 2;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((_QWORD *)this + 587) = off_1E2256B38;
  *((_WORD *)this + 2352) = 2;
  *((_WORD *)this + 2380) = 0;
  *((_DWORD *)this + 1198) = 0;
  v11 = icu::UMemory::operator new((uint64_t *)0x1248, (icu::UMemory *)0xC90, v4);
  if (v11)
  {
    *v11 = (uint64_t)off_1E225E6D0;
    v14 = v11 + 1;
    v13 = v11 + 401;
    do
    {
      *v14 = (uint64_t)off_1E2256B38;
      *((_WORD *)v14 + 4) = 2;
      v14 += 8;
    }
    while (v14 != v13);
    *v13 = 0;
  }
  *((_QWORD *)this + 29) = v11;
  v15 = icu::UMemory::operator new(v13, (icu::UMemory *)0x98, v12);
  if (v15)
  {
    v17 = (uint64_t *)&off_1E225E6B0;
    *v15 = (uint64_t)&off_1E225E6B0;
    v15[1] = (uint64_t)&off_1E225E718;
    *((_OWORD *)v15 + 5) = 0u;
    *((_OWORD *)v15 + 6) = 0u;
    *((_OWORD *)v15 + 7) = 0u;
    *((_OWORD *)v15 + 8) = 0u;
    *((_BYTE *)v15 + 144) = 0;
  }
  *((_QWORD *)this + 30) = v15;
  v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x10, v16);
  if (v18)
  {
    v20 = (uint64_t *)&off_1E225E828;
    *v18 = (uint64_t)&off_1E225E828;
  }
  *((_QWORD *)this + 31) = v18;
  v21 = icu::UMemory::operator new(v20, (icu::UMemory *)0x1B0, v19);
  if (v21)
  {
    *v21 = (uint64_t)&off_1E225E690;
    *(_OWORD *)(v21 + 3) = 0u;
    *(_OWORD *)(v21 + 5) = 0u;
    *(_OWORD *)(v21 + 7) = 0u;
    *(_OWORD *)(v21 + 9) = 0u;
    *(_OWORD *)(v21 + 11) = 0u;
    *(_OWORD *)(v21 + 13) = 0u;
    *(_OWORD *)(v21 + 15) = 0u;
    *(_OWORD *)(v21 + 17) = 0u;
    *(_OWORD *)(v21 + 19) = 0u;
    *(_OWORD *)(v21 + 21) = 0u;
    *(_OWORD *)(v21 + 23) = 0u;
    *(_OWORD *)(v21 + 25) = 0u;
    *(_OWORD *)(v21 + 27) = 0u;
    *(_OWORD *)(v21 + 29) = 0u;
    *(_OWORD *)(v21 + 31) = 0u;
    *(_OWORD *)(v21 + 1) = 0u;
    *(_OWORD *)(v21 + 33) = 0u;
    *(_OWORD *)(v21 + 35) = 0u;
    *(_OWORD *)(v21 + 37) = 0u;
    *(_OWORD *)(v21 + 39) = 0u;
    *(_OWORD *)(v21 + 41) = 0u;
    *(_OWORD *)(v21 + 43) = 0u;
    *(_OWORD *)(v21 + 45) = 0u;
    *(_OWORD *)(v21 + 47) = 0u;
    *(_OWORD *)(v21 + 49) = 0u;
    *(_OWORD *)(v21 + 51) = 0u;
    *((_BYTE *)v21 + 424) = 1;
  }
  *((_QWORD *)this + 32) = v21;
  if (!*((_QWORD *)this + 29) || !*((_QWORD *)this + 30) || !v21 || !*((_QWORD *)this + 31))
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    *((_DWORD *)this + 1198) = 7;
  }
  return this;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::DateTimePatternGenerator *this, const char **a2, UErrorCode *a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;

  *(_QWORD *)this = off_1E225E520;
  icu::Locale::Locale((icu::DateTimePatternGenerator *)((char *)this + 8), (uint64_t)a2);
  v9 = 264;
  do
  {
    v10 = (char *)this + v9;
    *(_QWORD *)v10 = off_1E2256B38;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 1288);
  v11 = 1288;
  do
  {
    v12 = (char *)this + v11;
    *(_QWORD *)v12 = off_1E2256B38;
    *((_WORD *)v12 + 4) = 2;
    v11 += 64;
  }
  while (v12 + 64 != (char *)this + 4360);
  v13 = 4360;
  do
  {
    v14 = (char *)this + v13;
    *(_QWORD *)v14 = off_1E2256B38;
    *((_WORD *)v14 + 4) = 2;
    v13 += 64;
  }
  while (v14 + 64 != (char *)this + 4616);
  *((_QWORD *)this + 577) = off_1E2256B38;
  *((_WORD *)this + 2312) = 2;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((_QWORD *)this + 587) = off_1E2256B38;
  *((_WORD *)this + 2352) = 2;
  *((_WORD *)this + 2380) = 0;
  *((_DWORD *)this + 1198) = 0;
  v15 = icu::UMemory::operator new((uint64_t *)0x1248, (icu::UMemory *)0xC90, v8);
  if (v15)
  {
    *v15 = (uint64_t)off_1E225E6D0;
    v18 = v15 + 1;
    v17 = v15 + 401;
    do
    {
      *v18 = (uint64_t)off_1E2256B38;
      *((_WORD *)v18 + 4) = 2;
      v18 += 8;
    }
    while (v18 != v17);
    *v17 = 0;
  }
  *((_QWORD *)this + 29) = v15;
  v19 = icu::UMemory::operator new(v17, (icu::UMemory *)0x98, v16);
  if (v19)
  {
    v21 = (uint64_t *)&off_1E225E6B0;
    *v19 = (uint64_t)&off_1E225E6B0;
    v19[1] = (uint64_t)&off_1E225E718;
    *((_OWORD *)v19 + 5) = 0u;
    *((_OWORD *)v19 + 6) = 0u;
    *((_OWORD *)v19 + 7) = 0u;
    *((_OWORD *)v19 + 8) = 0u;
    *((_BYTE *)v19 + 144) = 0;
  }
  *((_QWORD *)this + 30) = v19;
  v22 = icu::UMemory::operator new(v21, (icu::UMemory *)0x10, v20);
  if (v22)
  {
    v24 = (uint64_t *)&off_1E225E828;
    *v22 = (uint64_t)&off_1E225E828;
  }
  *((_QWORD *)this + 31) = v22;
  v25 = icu::UMemory::operator new(v24, (icu::UMemory *)0x1B0, v23);
  if (v25)
  {
    *v25 = (uint64_t)&off_1E225E690;
    *(_OWORD *)(v25 + 3) = 0u;
    *(_OWORD *)(v25 + 5) = 0u;
    *(_OWORD *)(v25 + 7) = 0u;
    *(_OWORD *)(v25 + 9) = 0u;
    *(_OWORD *)(v25 + 11) = 0u;
    *(_OWORD *)(v25 + 13) = 0u;
    *(_OWORD *)(v25 + 15) = 0u;
    *(_OWORD *)(v25 + 17) = 0u;
    *(_OWORD *)(v25 + 19) = 0u;
    *(_OWORD *)(v25 + 21) = 0u;
    *(_OWORD *)(v25 + 23) = 0u;
    *(_OWORD *)(v25 + 25) = 0u;
    *(_OWORD *)(v25 + 27) = 0u;
    *(_OWORD *)(v25 + 29) = 0u;
    *(_OWORD *)(v25 + 31) = 0u;
    *(_OWORD *)(v25 + 1) = 0u;
    *(_OWORD *)(v25 + 33) = 0u;
    *(_OWORD *)(v25 + 35) = 0u;
    *(_OWORD *)(v25 + 37) = 0u;
    *(_OWORD *)(v25 + 39) = 0u;
    *(_OWORD *)(v25 + 41) = 0u;
    *(_OWORD *)(v25 + 43) = 0u;
    *(_OWORD *)(v25 + 45) = 0u;
    *(_OWORD *)(v25 + 47) = 0u;
    *(_OWORD *)(v25 + 49) = 0u;
    *(_OWORD *)(v25 + 51) = 0u;
    *((_BYTE *)v25 + 424) = 1;
  }
  *((_QWORD *)this + 32) = v25;
  if (*((_QWORD *)this + 29) && *((_QWORD *)this + 30) && v25 && *((_QWORD *)this + 31))
  {
    icu::DateTimePatternGenerator::initData(this, a2, a3, a4);
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    *((_DWORD *)this + 1198) = 7;
  }
  return this;
}

void icu::DateTimePatternGenerator::initData(icu::DateTimePatternGenerator *this, const char **a2, UErrorCode *a3, int a4)
{
  unsigned int v8;
  UErrorCode *v9;

  *(_OWORD *)((char *)this + 4680) = 0u;
  icu::DateTimePatternGenerator::addCanonicalItems((unsigned int *)this, a3);
  if (!a4)
    icu::DateTimePatternGenerator::addICUPatterns(this, a2, a3);
  icu::DateTimePatternGenerator::addCLDRData((void ****)this, (char **)a2, a3);
  icu::DateTimePatternGenerator::setDateTimeFromCalendar(this, (const icu::Locale *)a2, a3);
  icu::DateTimePatternGenerator::setDecimalSymbols(this, (const icu::Locale *)a2, a3);
  if (*(int *)a3 <= 0)
  {
    v8 = atomic_load(&dword_1ECD27D10);
    if (v8 == 2 || !icu::umtx_initImplPreInit(&dword_1ECD27D10))
    {
      if (dword_1ECD27D14 >= 1)
        *a3 = dword_1ECD27D14;
    }
    else
    {
      icu::DateTimePatternGenerator::loadAllowedHourFormatsData((icu::DateTimePatternGenerator *)a3, v9);
      dword_1ECD27D14 = *a3;
      icu::umtx_initImplPostInit(&dword_1ECD27D10);
    }
  }
  icu::DateTimePatternGenerator::getAllowedHourFormats(this, (char **)a2, a3);
  *((UErrorCode *)this + 1198) = *a3;
}

uint64_t icu::DateTimePatternGenerator::DateTimePatternGenerator(icu::DateTimePatternGenerator *this, const icu::DateTimePatternGenerator *a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  *(_QWORD *)this = off_1E225E520;
  icu::Locale::Locale((icu::DateTimePatternGenerator *)((char *)this + 8));
  v5 = 264;
  do
  {
    v6 = (char *)this + v5;
    *(_QWORD *)v6 = off_1E2256B38;
    *((_WORD *)v6 + 4) = 2;
    v5 += 64;
  }
  while (v6 + 64 != (char *)this + 1288);
  v7 = 1288;
  do
  {
    v8 = (char *)this + v7;
    *(_QWORD *)v8 = off_1E2256B38;
    *((_WORD *)v8 + 4) = 2;
    v7 += 64;
  }
  while (v8 + 64 != (char *)this + 4360);
  v9 = 4360;
  do
  {
    v10 = (char *)this + v9;
    *(_QWORD *)v10 = off_1E2256B38;
    *((_WORD *)v10 + 4) = 2;
    v9 += 64;
  }
  while (v10 + 64 != (char *)this + 4616);
  *((_QWORD *)this + 577) = off_1E2256B38;
  *((_WORD *)this + 2312) = 2;
  *(_OWORD *)((char *)this + 4680) = 0u;
  *((_QWORD *)this + 587) = off_1E2256B38;
  *((_WORD *)this + 2352) = 2;
  *((_WORD *)this + 2380) = 0;
  *((_DWORD *)this + 1198) = 0;
  v11 = icu::UMemory::operator new((uint64_t *)0x1248, (icu::UMemory *)0xC90, v4);
  if (v11)
  {
    *v11 = (uint64_t)off_1E225E6D0;
    v14 = v11 + 1;
    v13 = v11 + 401;
    do
    {
      *v14 = (uint64_t)off_1E2256B38;
      *((_WORD *)v14 + 4) = 2;
      v14 += 8;
    }
    while (v14 != v13);
    *v13 = 0;
  }
  *((_QWORD *)this + 29) = v11;
  v15 = icu::UMemory::operator new(v13, (icu::UMemory *)0x98, v12);
  if (v15)
  {
    v17 = (uint64_t *)&off_1E225E6B0;
    *v15 = (uint64_t)&off_1E225E6B0;
    v15[1] = (uint64_t)&off_1E225E718;
    *((_OWORD *)v15 + 5) = 0u;
    *((_OWORD *)v15 + 6) = 0u;
    *((_OWORD *)v15 + 7) = 0u;
    *((_OWORD *)v15 + 8) = 0u;
    *((_BYTE *)v15 + 144) = 0;
  }
  *((_QWORD *)this + 30) = v15;
  v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x10, v16);
  if (v18)
  {
    v20 = (uint64_t *)&off_1E225E828;
    *v18 = (uint64_t)&off_1E225E828;
  }
  *((_QWORD *)this + 31) = v18;
  v21 = icu::UMemory::operator new(v20, (icu::UMemory *)0x1B0, v19);
  if (v21)
  {
    *v21 = (uint64_t)&off_1E225E690;
    *(_OWORD *)(v21 + 3) = 0u;
    *(_OWORD *)(v21 + 5) = 0u;
    *(_OWORD *)(v21 + 7) = 0u;
    *(_OWORD *)(v21 + 9) = 0u;
    *(_OWORD *)(v21 + 11) = 0u;
    *(_OWORD *)(v21 + 13) = 0u;
    *(_OWORD *)(v21 + 15) = 0u;
    *(_OWORD *)(v21 + 17) = 0u;
    *(_OWORD *)(v21 + 19) = 0u;
    *(_OWORD *)(v21 + 21) = 0u;
    *(_OWORD *)(v21 + 23) = 0u;
    *(_OWORD *)(v21 + 25) = 0u;
    *(_OWORD *)(v21 + 27) = 0u;
    *(_OWORD *)(v21 + 29) = 0u;
    *(_OWORD *)(v21 + 31) = 0u;
    *(_OWORD *)(v21 + 1) = 0u;
    *(_OWORD *)(v21 + 33) = 0u;
    *(_OWORD *)(v21 + 35) = 0u;
    *(_OWORD *)(v21 + 37) = 0u;
    *(_OWORD *)(v21 + 39) = 0u;
    *(_OWORD *)(v21 + 41) = 0u;
    *(_OWORD *)(v21 + 43) = 0u;
    *(_OWORD *)(v21 + 45) = 0u;
    *(_OWORD *)(v21 + 47) = 0u;
    *(_OWORD *)(v21 + 49) = 0u;
    *(_OWORD *)(v21 + 51) = 0u;
    *((_BYTE *)v21 + 424) = 1;
  }
  *((_QWORD *)this + 32) = v21;
  if (!*((_QWORD *)this + 29) || !*((_QWORD *)this + 30) || !v21 || !*((_QWORD *)this + 31))
    *((_DWORD *)this + 1198) = 7;
  return icu::DateTimePatternGenerator::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::DateTimePatternGenerator::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t k;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t m;

  if (a2 != a1)
  {
    *(_DWORD *)(a1 + 4792) = *(_DWORD *)(a2 + 4792);
    icu::Locale::operator=((icu::Locale *)(a1 + 8), a2 + 8);
    *(_WORD *)(a1 + 4760) = *(_WORD *)(a2 + 4760);
    for (i = 1191; i != 1198; ++i)
      *(_DWORD *)(a1 + 4 * i) = *(_DWORD *)(a2 + 4 * i);
    v5 = *(_QWORD *)(a2 + 232);
    v6 = *(_QWORD *)(a1 + 232);
    for (j = 8; j != 3208; j += 64)
      icu::UnicodeString::operator=((UChar **)(v6 + j), (UChar **)(v5 + j));
    v8 = 0;
    *(_QWORD *)(v6 + 3208) = *(_QWORD *)(v5 + 3208);
    v9 = *(_QWORD *)(a1 + 240);
    v10 = *(_QWORD *)(a2 + 240);
    v11 = *(_OWORD *)(v10 + 16);
    v12 = *(_OWORD *)(v10 + 32);
    v13 = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v9 + 48) = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v9 + 64) = v13;
    *(_OWORD *)(v9 + 16) = v11;
    *(_OWORD *)(v9 + 32) = v12;
    *(_OWORD *)(v9 + 80) = *(_OWORD *)(v10 + 80);
    *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
    *(_OWORD *)(v9 + 112) = *(_OWORD *)(v10 + 112);
    *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
    *(_BYTE *)(v9 + 144) = *(_BYTE *)(v10 + 144);
    *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8) = *(_QWORD *)(*(_QWORD *)(a2 + 248) + 8);
    do
    {
      icu::UnicodeString::operator=((UChar **)(a1 + 4360 + v8), (UChar **)(a2 + 4360 + v8));
      v8 += 64;
    }
    while (v8 != 256);
    icu::UnicodeString::operator=((UChar **)(a1 + 4616), (UChar **)(a2 + 4616));
    for (k = 0; k != 256; k += 64)
      icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + 4360 + k));
    icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + 4616));
    v16 = *(_QWORD *)(a1 + 4680);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = *(uint64_t **)(a2 + 4680);
    if (v17)
    {
      v18 = icu::UMemory::operator new(v17, (icu::UMemory *)0x98, v15);
      if (!v18)
      {
        *(_QWORD *)(a1 + 4680) = 0;
        *(_DWORD *)(a1 + 4792) = 7;
        return a1;
      }
      v19 = *(_QWORD *)(a2 + 4680);
      *v18 = (uint64_t)&off_1E225E6B0;
      v18[1] = (uint64_t)&off_1E225E718;
      *((_OWORD *)v18 + 5) = 0u;
      *((_OWORD *)v18 + 6) = 0u;
      *((_OWORD *)v18 + 7) = 0u;
      *((_OWORD *)v18 + 8) = 0u;
      *((_BYTE *)v18 + 144) = 0;
      v20 = *(_OWORD *)(v19 + 16);
      v21 = *(_OWORD *)(v19 + 32);
      v22 = *(_OWORD *)(v19 + 64);
      *((_OWORD *)v18 + 3) = *(_OWORD *)(v19 + 48);
      *((_OWORD *)v18 + 4) = v22;
      *((_OWORD *)v18 + 1) = v20;
      *((_OWORD *)v18 + 2) = v21;
      *((_OWORD *)v18 + 5) = *(_OWORD *)(v19 + 80);
      *((_OWORD *)v18 + 6) = *(_OWORD *)(v19 + 96);
      *((_OWORD *)v18 + 7) = *(_OWORD *)(v19 + 112);
      *((_OWORD *)v18 + 8) = *(_OWORD *)(v19 + 128);
      *((_BYTE *)v18 + 144) = *(_BYTE *)(v19 + 144);
    }
    else
    {
      v18 = 0;
    }
    v23 = 0;
    *(_QWORD *)(a1 + 4680) = v18;
    v24 = a2 + 1288;
    v25 = a1 + 1288;
    do
    {
      icu::UnicodeString::operator=((UChar **)(a1 + (v23 << 6) + 264), (UChar **)(a2 + (v23 << 6) + 264));
      icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(a1 + (v23 << 6) + 264));
      for (m = 0; m != 192; m += 64)
      {
        icu::UnicodeString::operator=((UChar **)(v25 + m), (UChar **)(v24 + m));
        icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)(v25 + m));
      }
      ++v23;
      v24 += 192;
      v25 += 192;
    }
    while (v23 != 16);
    sub_18BCD6D18(*(uint64_t **)(a1 + 256), *(_QWORD *)(a2 + 256), (int *)(a1 + 4792));
    icu::DateTimePatternGenerator::copyHashtable(a1, *(uint64_t ***)(a2 + 4688), (UErrorCode *)(a1 + 4792));
  }
  return a1;
}

uint64_t *sub_18BCD6D18(uint64_t *result, unint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t **v18;
  uint64_t *v19;

  v19 = result;
  if (*a3 <= 0)
  {
    v5 = 0;
    *((_BYTE *)result + 424) = *(_BYTE *)(a2 + 424);
    while (1)
    {
      v6 = *(_QWORD *)(a2 + 8 * v5 + 8);
      if (v6)
        break;
LABEL_16:
      if (++v5 == 52)
        return result;
    }
    v7 = 0;
    v8 = &v19[v5];
    v9 = (uint64_t **)(v8 + 1);
    while (1)
    {
      v10 = v7;
      result = icu::UMemory::operator new(v8, (icu::UMemory *)0xA0, a2);
      if (!result)
        break;
      v7 = result;
      *result = (uint64_t)off_1E225E738;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), (UChar **)(v6 + 8));
      v7[9] = 0;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v7 + 10), (UChar **)(v6 + 80));
      v7[19] = 0;
      v12 = (uint64_t *)*a3;
      if ((int)v12 > 0)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v7 + 8))(v7);
      v13 = icu::UMemory::operator new(v12, (icu::UMemory *)0x90, v11);
      if (v13)
      {
        v14 = *(_QWORD *)(v6 + 72);
        *v13 = (uint64_t)&off_1E225E718;
        *(_OWORD *)(v13 + 9) = 0u;
        *(_OWORD *)(v13 + 11) = 0u;
        *(_OWORD *)(v13 + 13) = 0u;
        *(_OWORD *)(v13 + 15) = 0u;
        v15 = *(_OWORD *)(v14 + 8);
        v16 = *(_OWORD *)(v14 + 24);
        v17 = *(_OWORD *)(v14 + 40);
        *(_OWORD *)(v13 + 7) = *(_OWORD *)(v14 + 56);
        *(_OWORD *)(v13 + 5) = v17;
        *(_OWORD *)(v13 + 3) = v16;
        *(_OWORD *)(v13 + 1) = v15;
        *(_OWORD *)(v13 + 9) = *(_OWORD *)(v14 + 72);
        *(_OWORD *)(v13 + 11) = *(_OWORD *)(v14 + 88);
        *(_OWORD *)(v13 + 13) = *(_OWORD *)(v14 + 104);
        *(_OWORD *)(v13 + 15) = *(_OWORD *)(v14 + 120);
        *((_BYTE *)v13 + 136) = *(_BYTE *)(v14 + 136);
      }
      result = (uint64_t *)sub_18BBB709C((uint64_t)(v7 + 9), (uint64_t)v13, a3);
      if (*a3 > 0)
        return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v7 + 8))(v7);
      *((_BYTE *)v7 + 144) = *(_BYTE *)(v6 + 144);
      v8 = *v9;
      v18 = v9;
      if (*v9)
      {
        if (!v10)
          abort();
        result = (uint64_t *)v10[19];
        v18 = (uint64_t **)(v10 + 19);
        if (result)
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      *v18 = v7;
      v6 = *(_QWORD *)(v6 + 152);
      if (!v6)
        goto LABEL_16;
    }
    if (*a3 <= 0)
      *a3 = 7;
  }
  return result;
}

uint64_t icu::DateTimePatternGenerator::copyHashtable(uint64_t this, uint64_t **a2, UErrorCode *a3)
{
  uint64_t v5;
  void ***v6;
  unint64_t v7;
  UChar **v8;
  uint64_t *v9;
  uint64_t v10;
  icu::UnicodeString *v11;
  uint64_t v12;
  int v13;

  if (a2 && *(int *)a3 <= 0)
  {
    v5 = this;
    v6 = *(void ****)(this + 4688);
    if (v6)
    {
      if (*v6)
        uhash_close(*v6);
      icu::UMemory::operator delete(v6);
      *(_QWORD *)(v5 + 4688) = 0;
    }
    this = (uint64_t)icu::DateTimePatternGenerator::initHashtable((void ****)v5, a3);
    if (*(int *)a3 <= 0)
    {
      v13 = -1;
      do
      {
        this = uhash_nextElement(*a2, &v13);
        if (!this)
          break;
        v8 = *(UChar ***)(this + 16);
        v9 = *(uint64_t **)(v5 + 4688);
        v10 = *v9;
        v11 = (icu::UnicodeString *)icu::UMemory::operator new(v9, (icu::UMemory *)0x40, v7);
        v12 = (uint64_t)v11;
        if (v11)
          icu::UnicodeString::UnicodeString(v11, v8);
        this = uhash_puti(v10, v12, 1u, (int *)a3);
      }
      while (*(int *)a3 < 1);
    }
  }
  return this;
}

BOOL icu::DateTimePatternGenerator::operator==(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t i;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t j;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;

  if (a1 == a2)
    return 1;
  if (!icu::Locale::operator==(a1 + 8, a2 + 8)
    || !sub_18BCD7264(*(_QWORD *)(a1 + 256), *(_QWORD *)(a2 + 256)))
  {
    return 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 4624);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 4624) & 1) != 0)
      goto LABEL_17;
    return 0;
  }
  if ((v4 & 0x8000) != 0)
    v5 = *(_DWORD *)(a1 + 4628);
  else
    v5 = v4 >> 5;
  v6 = 0;
  v7 = *(unsigned __int16 *)(a2 + 4624);
  if ((v7 & 0x8000u) == 0)
    v8 = v7 >> 5;
  else
    v8 = *(_DWORD *)(a2 + 4628);
  if ((v7 & 1) != 0 || v5 != v8)
    return v6;
  if (!icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 4616), (const icu::UnicodeString *)(a2 + 4616), v5))
    return 0;
LABEL_17:
  for (i = 0; i != 256; i += 64)
  {
    v10 = *(unsigned __int16 *)(a1 + i + 4368);
    if ((v10 & 1) != 0)
    {
      if ((*(_WORD *)(a2 + i + 4368) & 1) == 0)
        return 0;
    }
    else
    {
      if ((v10 & 0x8000) != 0)
        v11 = *(_DWORD *)(a1 + i + 4372);
      else
        v11 = v10 >> 5;
      v6 = 0;
      v12 = *(unsigned __int16 *)(a2 + i + 4368);
      v13 = *(_DWORD *)(a2 + i + 4372);
      if ((v12 & 0x8000u) == 0)
        v13 = v12 >> 5;
      if ((v12 & 1) != 0 || v11 != v13)
        return v6;
      if (!icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 4360 + i), (const icu::UnicodeString *)(a2 + 4360 + i), v11))return 0;
    }
  }
  v14 = 0;
  v6 = 0;
  v15 = a2;
  v16 = a1;
  do
  {
    v17 = a1 + (v14 << 6);
    v18 = a2 + (v14 << 6);
    v19 = *(unsigned __int16 *)(v17 + 272);
    if ((v19 & 1) != 0)
    {
      if ((*(_WORD *)(v18 + 272) & 1) == 0)
        return v6;
    }
    else
    {
      if ((v19 & 0x8000) != 0)
        v20 = *(_DWORD *)(a1 + (v14 << 6) + 276);
      else
        v20 = v19 >> 5;
      v21 = a2 + (v14 << 6);
      v22 = *(unsigned __int16 *)(v21 + 272);
      v23 = *(_DWORD *)(v21 + 276);
      if ((v22 & 0x8000u) == 0)
        v23 = v22 >> 5;
      if ((v22 & 1) != 0
        || v20 != v23
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)(v17 + 264), (const icu::UnicodeString *)(v18 + 264), v20))
      {
        return v6;
      }
    }
    for (j = 0; j != 192; j += 64)
    {
      v25 = v15 + j;
      v26 = *(unsigned __int16 *)(v16 + j + 1296);
      if ((v26 & 1) != 0)
      {
        if ((*(_WORD *)(v25 + 1296) & 1) == 0)
          return v6;
      }
      else
      {
        if ((v26 & 0x8000) != 0)
          v27 = *(_DWORD *)(v16 + j + 1300);
        else
          v27 = v26 >> 5;
        v28 = *(unsigned __int16 *)(v15 + j + 1296);
        v29 = *(_DWORD *)(v15 + j + 1300);
        if ((v28 & 0x8000u) == 0)
          v29 = v28 >> 5;
        if ((v28 & 1) != 0
          || v27 != v29
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)(v16 + j + 1288), (const icu::UnicodeString *)(v25 + 1288), v27))
        {
          return v6;
        }
      }
    }
    v6 = v14 > 0xE;
    v16 += 192;
    v15 += 192;
    ++v14;
  }
  while (v14 != 16);
  return v6;
}

uint64_t sub_18BCD7264(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a1 == a2)
    return 1;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = *(_QWORD *)(a1 + 8 * v4 + 8);
    v7 = *(_QWORD *)(a2 + 8 * v4 + 8);
    if (v6 != v7)
      break;
LABEL_38:
    v5 = v4++ > 0x32;
    if (v4 == 52)
      return v5;
  }
  if (v6)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    while (v7 && v6)
    {
      v9 = *(unsigned __int16 *)(v6 + 16);
      if ((v9 & 1) != 0)
      {
        if ((*(_WORD *)(v7 + 16) & 1) == 0)
          return v5;
      }
      else
      {
        if ((v9 & 0x8000) != 0)
          v10 = *(_DWORD *)(v6 + 20);
        else
          v10 = v9 >> 5;
        v11 = *(unsigned __int16 *)(v7 + 16);
        if ((v11 & 0x8000u) == 0)
          v12 = v11 >> 5;
        else
          v12 = *(_DWORD *)(v7 + 20);
        if ((v11 & 1) != 0
          || v10 != v12
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)(v6 + 8), (const icu::UnicodeString *)(v7 + 8), v10))
        {
          return v5;
        }
      }
      v13 = *(unsigned __int16 *)(v6 + 88);
      if ((v13 & 1) != 0)
      {
        if ((*(_WORD *)(v7 + 88) & 1) == 0)
          return v5;
      }
      else
      {
        if ((v13 & 0x8000) != 0)
          v14 = *(_DWORD *)(v6 + 92);
        else
          v14 = v13 >> 5;
        v15 = *(unsigned __int16 *)(v7 + 88);
        if ((v15 & 0x8000u) == 0)
          v16 = v15 >> 5;
        else
          v16 = *(_DWORD *)(v7 + 92);
        if ((v15 & 1) != 0
          || v14 != v16
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)(v6 + 80), (const icu::UnicodeString *)(v7 + 80), v14))
        {
          return v5;
        }
      }
      v17 = *(_QWORD **)(v6 + 72);
      v18 = *(_QWORD **)(v7 + 72);
      if (v17 != v18 && !sub_18BCDCF60(v17, v18))
        return v5;
      v6 = *(_QWORD *)(v6 + 152);
      v7 = *(_QWORD *)(v7 + 152);
      if (!(v7 | v6) || v6 == v7)
        goto LABEL_38;
    }
  }
  return v5;
}

BOOL icu::DateTimePatternGenerator::operator!=(uint64_t a1, uint64_t a2)
{
  return !icu::DateTimePatternGenerator::operator==(a1, a2);
}

void icu::DateTimePatternGenerator::~DateTimePatternGenerator(icu::DateTimePatternGenerator *this)
{
  void ***v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;

  *(_QWORD *)this = off_1E225E520;
  v2 = (void ***)*((_QWORD *)this + 586);
  if (v2)
  {
    if (*v2)
      uhash_close(*v2);
    icu::UMemory::operator delete(v2);
  }
  v3 = *((_QWORD *)this + 29);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 30);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 31);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 32);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 585);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  icu::UnicodeString::~UnicodeString((void *)0x1258, (icu::DateTimePatternGenerator *)((char *)this + 4696));
  icu::UnicodeString::~UnicodeString((void *)0x1208, (icu::DateTimePatternGenerator *)((char *)this + 4616));
  v8 = 0;
  v9 = 4552;
  do
  {
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::DateTimePatternGenerator *)((char *)this + v8 + 4552));
    v8 -= 64;
  }
  while (v8 != -256);
  for (i = 4296; i != 1224; i -= 64)
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::DateTimePatternGenerator *)((char *)this + i));
  do
  {
    icu::UnicodeString::~UnicodeString((void *)v9, (icu::DateTimePatternGenerator *)((char *)this + i));
    i -= 64;
  }
  while (i != 200);
  icu::Locale::~Locale((icu::DateTimePatternGenerator *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::DateTimePatternGenerator::~DateTimePatternGenerator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BCD7528()
{
  uhash_close((void **)qword_1ECD27D08);
  return 1;
}

unsigned int *icu::DateTimePatternGenerator::addCanonicalItems(unsigned int *this, UErrorCode *a2)
{
  unsigned int *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  UChar *v8[8];
  UChar *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    v3 = this;
    v4 = 0;
    v10 = 0u;
    v11 = 0u;
    v13 = 0;
    v12 = 0u;
    v9 = (UChar *)off_1E2256B38;
    LOWORD(v10) = 2;
    do
    {
      icu::UnicodeString::UnicodeString((uint64_t)v8, aGyqmwwedfdahms[v4]);
      v5 = (void *)v3[1198];
      if ((int)v5 < 1)
        icu::DateTimePatternGenerator::addPatternWithSkeleton((icu::DateTimePatternGenerator *)v3, v8, 0, 0, &v9, a2);
      else
        *a2 = (int)v5;
      icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v8);
      v6 = (void *)*(unsigned int *)a2;
    }
    while ((int)v6 <= 0 && v4++ != 15);
    return (unsigned int *)icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v9);
  }
  return this;
}

void icu::DateTimePatternGenerator::addICUPatterns(icu::DateTimePatternGenerator *this, const char **a2, UErrorCode *a3)
{
  _QWORD *v6;
  icu::DateTimePatternGenerator *v7;
  icu::CharString *v10;
  icu::CharString *v11;
  icu::CharString *v12;
  icu::CharString *v13;
  _QWORD *v14;
  signed int v15;
  char *v16;
  const UChar *String;
  void *v18;
  void *v19;
  void *v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  int v27;
  const UChar *v28;
  int v29;
  UChar *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  UChar *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void *v40[28];
  char *v41[7];
  int v42[2];
  __int128 __dst;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[29];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  __dst = 0u;
  if (!ulocimp_setRegionToSupplementalRegion((char *)a2[5], (char *)&__dst, 157))
    strcpy((char *)&__dst, a2[5]);
  if (*(int *)a3 > 0)
    return;
  v6 = ures_open(0, (char *)&__dst, (int *)a3);
  memset(&v41[1], 0, 48);
  v42[1] = 0;
  v41[0] = (char *)&v41[1] + 5;
  LODWORD(v41[1]) = 40;
  v42[0] = 0;
  v7 = (icu::DateTimePatternGenerator *)icu::Locale::Locale((icu::Locale *)v40, (const char *)&__dst, 0, 0, 0);
  icu::DateTimePatternGenerator::getCalendarTypeToUse(v7, (const char **)v40, (icu::CharString *)v41, a3);
  icu::Locale::~Locale((icu::Locale *)v40);
  if ((_QWORD)__dst == 0x52545F504A5F616ALL
    && *((_QWORD *)&__dst + 1) == 0x414E4F4954494441
    && (unsigned __int16)v44 == 76)
  {
    v42[0] = 0;
    *v41[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v25, "gregorian");
    icu::CharString::append((icu::CharString *)v41, v25, v26, a3);
  }
  if (*(int *)a3 > 0)
    goto LABEL_35;
  memset(&v40[1], 0, 56);
  v40[0] = (char *)&v40[1] + 5;
  LODWORD(v40[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "calendar");
  v10 = icu::CharString::append((icu::CharString *)v40, v23, v24, a3);
  v11 = icu::CharString::append(v10, 47, a3);
  v12 = icu::CharString::append(v11, v41[0], v42[0], a3);
  v13 = icu::CharString::append(v12, 47, a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v21, "DateTimePatterns");
  icu::CharString::append(v13, v21, v22, a3);
  v14 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v6, (char *)v40[0], 0, a3);
  if ((int)ures_getSize((uint64_t)v14) < 8 || ures_getType((uint64_t)v14) != 8)
  {
    *a3 = U_INVALID_FORMAT_ERROR;
    goto LABEL_31;
  }
  v15 = 0;
  while (1)
  {
    v16 = ures_getByIndex((uint64_t)v14, v15, 0, (int *)a3);
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v36 = 0u;
    v35 = (UChar *)off_1E2256B38;
    LOWORD(v36) = 2;
    if (ures_getType((uint64_t)v16))
      break;
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    v30 = (UChar *)off_1E2256B38;
    LOWORD(v31) = 2;
    v29 = 0;
    String = ures_getString((uint64_t)v16, &v29, (int *)a3);
    if (*(int *)a3 > 0)
    {
LABEL_22:
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v30);
      goto LABEL_23;
    }
LABEL_20:
    v28 = String;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v30, 1, &v28, v29);
LABEL_23:
    icu::UnicodeString::operator=((icu::UnicodeString *)&v35, (icu::UnicodeString *)&v30);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v30);
    v19 = (void *)*(unsigned int *)a3;
    if ((int)v19 <= 0)
    {
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      v30 = (UChar *)off_1E2256B38;
      LOWORD(v31) = 2;
      icu::DateTimePatternGenerator::addPatternWithSkeleton(this, &v35, 0, 0, &v30, a3);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v30);
    }
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v35);
    if (v16)
      ures_close(v16);
    if (++v15 == 8)
      goto LABEL_31;
  }
  if (ures_getType((uint64_t)v16) == 8)
  {
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    v30 = (UChar *)off_1E2256B38;
    LOWORD(v31) = 2;
    v29 = 0;
    String = ures_getStringByIndex((uint64_t)v16, 0, &v29, (int *)a3);
    if (*(int *)a3 > 0)
      goto LABEL_22;
    goto LABEL_20;
  }
  *a3 = U_INVALID_FORMAT_ERROR;
  icu::UnicodeString::~UnicodeString((void *)3, (icu::UnicodeString *)&v35);
  if (v16)
    ures_close(v16);
LABEL_31:
  if (v14)
    ures_close(v14);
  if (BYTE4(v40[1]))
    uprv_free(v40[0]);
LABEL_35:
  if (BYTE4(v41[1]))
    uprv_free(v41[0]);
  if (v6)
    ures_close(v6);
}

void ****icu::DateTimePatternGenerator::addCLDRData(void ****this, char **a2, UErrorCode *a3)
{
  void ****v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t KeywordValue;
  const UChar *StringByKeyWithFallback;
  icu::CharString *v10;
  icu::CharString *v11;
  icu::CharString *v12;
  icu::CharString *v13;
  icu::CharString *v14;
  icu::CharString *v15;
  icu::CharString *v16;
  icu::CharString *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  char *v23;
  int v24;
  char *v25;
  int v26;
  _QWORD v27[2];
  char *v28;
  int v29;
  char *v30;
  int v31;
  _QWORD v32[2];
  int v33;
  UErrorCode v34;
  BOOL v35;
  uint64_t (**v36)();
  void ****v37;
  uint64_t v38;
  void (**v39)(icu::UnicodeString *__hidden);
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char *v44[7];
  int v45[2];
  char v46[8];
  char v47;
  void *v48[7];
  uint64_t v49;
  void (**v50)(icu::UnicodeString *__hidden);
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void (**v55)(icu::UnicodeString *__hidden);
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  void (**v60)(icu::UnicodeString *__hidden);
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v5 = this;
    v61 = 0u;
    v64 = 0;
    v63 = 0u;
    v62 = 0u;
    v59 = 0;
    v60 = off_1E2256B38;
    LOWORD(v61) = 2;
    v56 = 0u;
    v58 = 0u;
    v57 = 0u;
    v55 = off_1E2256B38;
    LOWORD(v56) = 2;
    v51 = 0u;
    v54 = 0;
    v53 = 0u;
    v52 = 0u;
    v50 = off_1E2256B38;
    LOWORD(v51) = 2;
    memset(&v48[1], 0, 48);
    v48[0] = (char *)&v48[1] + 5;
    LODWORD(v48[1]) = 40;
    v49 = 0;
    v35 = 0;
    v6 = ures_open(0, a2[5], (int *)a3);
    v7 = ures_openWithCountryFallback(0, a2[5], &v35, (int *)a3);
    if (*(int *)a3 <= 0)
    {
      v47 = 0;
      *(_QWORD *)v46 = 0;
      v34 = U_ZERO_ERROR;
      KeywordValue = icu::Locale::getKeywordValue(a2, "numbers", v46, 9, &v34);
      if (v35 && v34 <= U_ZERO_ERROR && !(_DWORD)KeywordValue)
      {
        LODWORD(v36) = 0;
        LODWORD(v44[0]) = -1;
        StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v6, "NumberElements/default", (int *)v44, (UErrorCode *)&v36);
        KeywordValue = (uint64_t)ures_getStringByKeyWithFallback((uint64_t)v7, "NumberElements/default", (int *)v44, (UErrorCode *)&v36);
        if ((int)v36 > 0
          || (KeywordValue = u_strcmp(StringByKeyWithFallback, (const UChar *)KeywordValue), (_DWORD)KeywordValue))
        {
          v35 = 0;
        }
      }
      memset(&v44[1], 0, 48);
      v45[1] = 0;
      v44[0] = (char *)&v44[1] + 5;
      LODWORD(v44[1]) = 40;
      v45[0] = 0;
      icu::DateTimePatternGenerator::getCalendarTypeToUse((icu::DateTimePatternGenerator *)KeywordValue, (const char **)a2, (icu::CharString *)v44, a3);
      if (*(int *)a3 <= 0)
      {
        v33 = 0;
        v32[0] = &off_1E225E878;
        v32[1] = v5;
        LODWORD(v49) = 0;
        *(_BYTE *)v48[0] = 0;
        icu::StringPiece::StringPiece((icu::StringPiece *)&v30, "calendar");
        v10 = icu::CharString::append((icu::CharString *)v48, v30, v31, a3);
        v11 = icu::CharString::append(v10, 47, a3);
        v12 = icu::CharString::append(v11, v44[0], v45[0], a3);
        v13 = icu::CharString::append(v12, 47, a3);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v28, "appendItems");
        icu::CharString::append(v13, v28, v29, a3);
        if (*(int *)a3 <= 0)
        {
          ures_getAllChildrenWithFallback((uint64_t)v6, (char *)v48[0], (uint64_t)v32, &v33);
          sub_18BCD9EE0((uint64_t)v32);
          v33 = 0;
          v27[0] = &off_1E225E8C0;
          v27[1] = v5;
          ures_getAllChildrenWithFallback((uint64_t)v6, "fields", (uint64_t)v27, &v33);
          sub_18BCD9FB4(v27);
          v33 = 0;
          icu::DateTimePatternGenerator::initHashtable(v5, a3);
          if (*(int *)a3 <= 0)
          {
            LODWORD(v49) = 0;
            *(_BYTE *)v48[0] = 0;
            icu::StringPiece::StringPiece((icu::StringPiece *)&v25, "calendar");
            v14 = icu::CharString::append((icu::CharString *)v48, v25, v26, a3);
            v15 = icu::CharString::append(v14, 47, a3);
            v16 = icu::CharString::append(v15, v44[0], v45[0], a3);
            v17 = icu::CharString::append(v16, 47, a3);
            icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "availableFormats");
            icu::CharString::append(v17, v23, v24, a3);
            if (*(int *)a3 <= 0)
            {
              if (v35)
              {
                v38 = 1;
                v40 = 0u;
                v43 = 0;
                v41 = 0u;
                v42 = 0u;
                v36 = off_1E225E548;
                v37 = v5;
                v39 = off_1E2256B38;
                LOWORD(v40) = 2;
                ures_getAllChildrenWithFallback((uint64_t)v7, (char *)v48[0], (uint64_t)&v36, &v33);
                v36 = off_1E225E548;
                icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v39);
                icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v36);
              }
              v38 = 0;
              v40 = 0u;
              v43 = 0;
              v41 = 0u;
              v42 = 0u;
              v36 = off_1E225E548;
              v37 = v5;
              v39 = off_1E2256B38;
              LOWORD(v40) = 2;
              ures_getAllChildrenWithFallback((uint64_t)v6, (char *)v48[0], (uint64_t)&v36, &v33);
              v36 = off_1E225E548;
              icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v39);
              icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v36);
            }
          }
          icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v27);
        }
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v32);
      }
      if (BYTE4(v44[1]))
        uprv_free(v44[0]);
    }
    if (v7)
      ures_close(v7);
    if (v6)
      ures_close(v6);
    v20 = (void *)BYTE4(v48[1]);
    if (BYTE4(v48[1]))
      uprv_free(v48[0]);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v50);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v55);
    return (void ****)icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v60);
  }
  return this;
}

void icu::DateTimePatternGenerator::setDateTimeFromCalendar(icu::DateTimePatternGenerator *this, const icu::Locale *a2, UErrorCode *a3)
{
  char *BaseName;
  _QWORD *v7;
  _QWORD *v8;
  UErrorCode *v9;
  BOOL v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int i;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  const UChar *StringByIndex;
  int v26;
  UChar *v27[8];
  _OWORD v28[2];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v26 = 0;
    BaseName = (char *)icu::Locale::getBaseName(a2);
    v7 = ures_open(0, BaseName, (int *)a3);
    v8 = v7;
    if (*(int *)a3 > 0 || (ures_getByKey((uint64_t)v7, "calendar", (uint64_t)v7, (int *)a3), *(int *)a3 > 0))
    {
LABEL_51:
      if (v8)
        ures_close(v8);
      return;
    }
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    icu::Calendar::getCalendarTypeFromLocale(a2, (const icu::Locale *)v28, (char *)0x20, a3, v9);
    v29 = 0;
    if (*(int *)a3 > 0 || !LOBYTE(v28[0]))
    {
      *a3 = U_ZERO_ERROR;
      strcpy((char *)v28, "gregorian");
    }
    v10 = *(_QWORD *)&v28[0] == 0x6169726F67657267 && WORD4(v28[0]) == 110;
    v11 = !v10;
    if (v10)
    {
      *a3 = U_ZERO_ERROR;
      v15 = ures_getByKeyWithFallback((uint64_t)v8, "gregorian", 0, a3);
      v16 = ures_getByKeyWithFallback(v15, "DateTimePatterns%atTime", 0, a3);
    }
    else
    {
      v12 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v8, (char *)v28, 0, a3);
      v13 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v12, "DateTimePatterns%atTime", 0, a3);
      if (v13)
      {
        v14 = *a3;
        if (*a3 != U_MISSING_RESOURCE_ERROR)
        {
LABEL_22:
          if (v14 <= 0)
          {
            if ((int)ures_getSize((uint64_t)v13) < 4)
            {
              v17 = v12;
              goto LABEL_46;
            }
            v14 = *a3;
          }
          if (v14 != 2)
          {
            v20 = 0;
            goto LABEL_34;
          }
          *a3 = U_ZERO_ERROR;
          if (v11)
          {
            v17 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v8, (char *)v28, 0, a3);
            if (v12)
              ures_close(v12);
            v13 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v17, "DateTimePatterns", 0, a3);
            v18 = v13 == 0;
            if (v13)
            {
              v19 = *a3;
              if (*a3 != U_MISSING_RESOURCE_ERROR)
                goto LABEL_44;
            }
          }
          else
          {
            v13 = 0;
            v18 = 1;
            v17 = v12;
          }
          *a3 = U_ZERO_ERROR;
          v23 = ures_getByKeyWithFallback((uint64_t)v8, "gregorian", 0, a3);
          if (v17)
            ures_close(v17);
          v24 = ures_getByKeyWithFallback(v23, "DateTimePatterns", 0, a3);
          if (!v18)
            ures_close(v13);
          v19 = *a3;
          v17 = (_QWORD *)v23;
          v13 = (_QWORD *)v24;
LABEL_44:
          if (v19 > 0)
          {
LABEL_47:
            if (v13)
              ures_close(v13);
            if (v17)
              ures_close(v17);
            goto LABEL_51;
          }
          if ((int)ures_getSize((uint64_t)v13) < 13)
          {
LABEL_46:
            *a3 = U_INVALID_FORMAT_ERROR;
            goto LABEL_47;
          }
          v14 = *a3;
          v20 = 9;
          v12 = v17;
LABEL_34:
          if (v14 <= 0)
          {
            for (i = 0; i != 4; ++i)
            {
              StringByIndex = ures_getStringByIndex((uint64_t)v13, v20 + i, &v26, (int *)a3);
              icu::UnicodeString::UnicodeString(v27, 1, &StringByIndex);
              icu::DateTimePatternGenerator::setDateTimeFormat((uint64_t)this, i, v27, (int *)a3);
              icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v27);
            }
          }
          v17 = v12;
          goto LABEL_47;
        }
      }
      *a3 = U_ZERO_ERROR;
      v15 = ures_getByKeyWithFallback((uint64_t)v8, "gregorian", 0, a3);
      if (v12)
        ures_close(v12);
      v16 = ures_getByKeyWithFallback(v15, "DateTimePatterns%atTime", 0, a3);
      if (v13)
        ures_close(v13);
    }
    v14 = *a3;
    v12 = (_QWORD *)v15;
    v13 = (_QWORD *)v16;
    goto LABEL_22;
  }
}

void icu::DateTimePatternGenerator::setDecimalSymbols(icu::DateTimePatternGenerator *this, const icu::Locale *a2, UErrorCode *a3)
{
  icu::UnicodeString *v6;
  void *v7;
  _BYTE v8[64];
  _BYTE v9[8];
  UChar *v10[361];

  v10[360] = *(UChar **)MEMORY[0x1E0C80C00];
  bzero(v9, 0xB48uLL);
  icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)v9, a2, a3);
  if (*(int *)a3 <= 0)
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v8, v10);
    v6 = (icu::DateTimePatternGenerator *)((char *)this + 4616);
    icu::UnicodeString::operator=(v6, (icu::UnicodeString *)v8);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v8);
    icu::UnicodeString::getTerminatedBuffer(v6);
  }
  icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)v9);
}

void icu::DateTimePatternGenerator::loadAllowedHourFormatsData(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  int32x2_t *v3;
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(icu::ResourceSink *__hidden);

  if (*(int *)this <= 0)
  {
    v3 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, (int *)this);
    qword_1ECD27D08 = (uint64_t)v3;
    if (*(int *)this <= 0)
    {
      uhash_setValueDeleter((uint64_t)v3, (uint64_t)j__uprv_free_1);
      sub_18BDA1768(0x17u, (uint64_t)sub_18BCD7528);
      v4 = ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)this);
      v5 = (_QWORD *)v4;
      if (*(int *)this <= 0)
      {
        v6 = &off_1E225E9E0;
        ures_getAllItemsWithFallback(v4, "timeData", (uint64_t)&v6, (int *)this);
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v6);
      }
      if (v5)
        ures_close(v5);
    }
  }
}

void icu::DateTimePatternGenerator::getAllowedHourFormats(icu::DateTimePatternGenerator *this, char **a2, UErrorCode *a3)
{
  const char *v6;
  char *v7;
  const char *v8;
  int v9;
  char *v10;
  char *v11;
  unsigned int *v12;
  int KeywordValue;
  UErrorCode *v14;
  int v15;
  unint64_t v16;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  icu::Region *Instance;
  const char *RegionCode;
  uint64_t v22;
  char v23[4];
  UErrorCode v24[2];
  _OWORD v25[14];
  _QWORD v26[2];

  v26[1] = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v26[0] = 0;
    ulocimp_getRegionForSupplementalData(a2[5], 0, (char *)v26, 8, (int *)a3);
    v6 = a2[5];
    if (!*v6 || !strcmp(a2[5], "root") || !strcmp(v6, "und"))
    {
      v7 = "und";
      v8 = "001";
    }
    else
    {
      v7 = (char *)(a2 + 1);
      v8 = (const char *)v26;
    }
    memset(v25, 0, sizeof(v25));
    icu::Locale::Locale((icu::Locale *)v25);
    if (!*v7 || (v9 = *(unsigned __int8 *)v8, !*v8))
    {
      icu::Locale::operator=((icu::Locale *)v25, (uint64_t)a2);
      v24[0] = U_ZERO_ERROR;
      icu::Locale::addLikelySubtags((icu::Locale *)v25, v24);
      v10 = (char *)v25 + 8;
      if (v24[0] > U_ZERO_ERROR)
        v10 = v7;
      else
        v8 = (char *)&v25[1] + 10;
      v9 = *(unsigned __int8 *)v8;
      if (*v10)
        v7 = v10;
      else
        v7 = "und";
    }
    if (v9)
      v11 = (char *)v8;
    else
      v11 = "001";
    v12 = (unsigned int *)sub_18BCD88B4(v7, v11, a3);
    *(_QWORD *)v24 = 0;
    KeywordValue = icu::Locale::getKeywordValue(a2, "hours", (char *)v24, 8, a3);
    v15 = 0;
    *((_WORD *)this + 2380) = 0;
    if (*(int *)a3 <= 0 && KeywordValue >= 1)
    {
      v15 = 0;
      if (v24[0] > 3355239)
      {
        if (v24[0] == 3420776)
        {
          v15 = 107;
        }
        else
        {
          if (v24[0] != 3355240)
            goto LABEL_30;
          v15 = 72;
        }
      }
      else if (v24[0] == 3223912)
      {
        v15 = 75;
      }
      else
      {
        if (v24[0] != 3289448)
          goto LABEL_30;
        v15 = 104;
      }
      *((_WORD *)this + 2380) = v15;
    }
LABEL_30:
    if (v12)
    {
      if (!v15)
      {
LABEL_32:
        v16 = *v12;
        if (v16 >= 4)
          v17 = 72;
        else
          v17 = 0x6B004B00480068uLL >> (16 * v16);
        *((_WORD *)this + 2380) = v17;
      }
    }
    else
    {
      *(_DWORD *)v23 = 0;
      Instance = icu::Region::getInstance((icu::Region *)v11, (icu::Region *)v23, v14);
      if (*(int *)v23 >= 1
        || (RegionCode = (const char *)icu::Region::getRegionCode(Instance),
            (v22 = sub_18BCD88B4(v7, RegionCode, a3)) == 0))
      {
        if (!*((_WORD *)this + 2380))
          *((_WORD *)this + 2380) = 72;
        *(_QWORD *)((char *)this + 4764) = 0xFFFFFFFF00000001;
        goto LABEL_44;
      }
      v12 = (unsigned int *)v22;
      if (!*((_WORD *)this + 2380))
        goto LABEL_32;
    }
    v18 = 0;
    do
    {
      if (v18 == 7)
        break;
      v19 = v12[v18 + 1];
      *(_DWORD *)((char *)this + v18 * 4 + 4764) = v19;
      ++v18;
    }
    while (v19 != -1);
LABEL_44:
    icu::Locale::~Locale((icu::Locale *)v25);
  }
}

uint64_t sub_18BCD88B4(char *__s, const char *a2, UErrorCode *a3)
{
  uint64_t v5;
  char *v7;
  int v8;
  char *v9;
  int v10;
  void *v11[9];

  v11[8] = *(void **)MEMORY[0x1E0C80C00];
  memset(&v11[1], 0, 56);
  v11[0] = (char *)&v11[1] + 5;
  LODWORD(v11[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v9, __s);
  icu::CharString::append((icu::CharString *)v11, v9, v10, a3);
  icu::CharString::append((icu::CharString *)v11, 95, a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v7, a2);
  icu::CharString::append((icu::CharString *)v11, v7, v8, a3);
  v5 = uhash_get(qword_1ECD27D08, (uint64_t)v11[0]);
  if (!v5)
    v5 = uhash_get(qword_1ECD27D08, (uint64_t)a2);
  if (BYTE4(v11[1]))
    uprv_free(v11[0]);
  return v5;
}

uint64_t icu::DateTimePatternGenerator::getDefaultHourCycle(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  unsigned int v3;

  if (*(int *)a2 > 0)
    return 2;
  v3 = *((unsigned __int16 *)this + 2380);
  if (v3 > 0x4A)
  {
    switch(v3)
    {
      case 'K':
        return 0;
      case 'h':
        return 1;
      case 'k':
        return 3;
    }
LABEL_11:
    abort();
  }
  if (*((_WORD *)this + 2380))
  {
    if (v3 != 72)
      goto LABEL_11;
  }
  else
  {
    *a2 = U_UNSUPPORTED_ERROR;
  }
  return 2;
}

void *icu::DateTimePatternGenerator::getSkeleton@<X0>(const icu::UnicodeString *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t i;
  void *result;
  _QWORD v11[401];
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[152];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  bzero(&v12, 0xC80uLL);
  v11[0] = off_1E225E6D0;
  v6 = 1;
  do
  {
    v7 = &v11[v6];
    *v7 = off_1E2256B38;
    *((_WORD *)v7 + 4) = 2;
    v6 += 8;
  }
  while (v7 + 8 != &v13);
  v13 = 0;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v23 = 0;
  v14 = &off_1E225E718;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_18BCD8B70((uint64_t)v24, a1, v11, (uint64_t)&v14);
  sub_18BCD8E7C((uint64_t)&v14, a2);
  v11[0] = off_1E225E6D0;
  for (i = 393; i != -7; i -= 8)
    result = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11[i]);
  return result;
}

__n128 sub_18BCD8B70(uint64_t a1, const icu::UnicodeString *a2, _DWORD *a3, uint64_t a4)
{
  int v6;
  _DWORD *v7;
  unsigned int v8;
  int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _WORD *v13;
  void *v14;
  int v15;
  char *v16;
  char v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 result;
  __int128 *v29;
  _OWORD *v31;
  _OWORD *v32;
  int v33;
  void (**v34)(icu::UnicodeString *__hidden);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  v31 = (_OWORD *)(a4 + 72);
  *(_OWORD *)(a4 + 104) = 0u;
  v32 = (_OWORD *)(a4 + 104);
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  v29 = (__int128 *)(a4 + 8);
  *(_BYTE *)(a4 + 136) = 0;
  sub_18BCD9A34(a3, a2);
  v33 = 0;
  if ((int)a3[802] >= 1)
  {
    v6 = 0;
    do
    {
      v7 = &a3[16 * (uint64_t)v6];
      v10 = v7[5];
      v9 = v7 + 5;
      v8 = v10;
      v11 = *((unsigned __int16 *)v9 - 2);
      if ((v11 & 0x8000u) == 0)
        v12 = v11 >> 5;
      else
        v12 = v8;
      if (!v12)
        goto LABEL_11;
      v13 = *(_WORD **)&a3[16 * (uint64_t)v6 + 8];
      if ((v11 & 2) != 0)
        v13 = (_WORD *)v9 - 1;
      if (*v13 == 39)
      {
        v38 = 0;
        v36 = 0u;
        v37 = 0u;
        v35 = 0u;
        v34 = off_1E2256B38;
        LOWORD(v35) = 2;
        sub_18BCD9B0C((uint64_t)a3, (icu::UnicodeString *)&v34, &v33);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v34);
        v6 = v33;
      }
      else
      {
LABEL_11:
        v15 = sub_18BCDD0F8((uint64_t)(v9 - 3), 1);
        if ((v15 & 0x80000000) == 0)
        {
          if (v12)
          {
            v16 = (char *)v9 - 2;
            if ((v11 & 2) == 0)
              v16 = *(char **)&a3[16 * (uint64_t)v6 + 8];
            v17 = *v16;
          }
          else
          {
            v17 = -1;
          }
          v18 = &aG_1[8 * v15];
          v19 = *((int *)v18 + 1);
          *((_BYTE *)v31 + v19) = v17;
          v20 = a4 + v19;
          *(_BYTE *)(v20 + 88) = v12;
          v21 = *((_BYTE *)v18 + 10);
          *((_BYTE *)v32 + v19) = *(_BYTE *)v18;
          *(_BYTE *)(v20 + 120) = v21;
          v22 = (__int16)v18[4];
          if (v22 >= 1)
          {
            if (*(__int16 *)(v9 - 1) < 0)
              v23 = *v9;
            else
              v23 = *((unsigned __int16 *)v9 - 2) >> 5;
            LOWORD(v22) = v22 + v23;
          }
          *(_DWORD *)(a4 + 4 * v19 + 8) = (__int16)v22;
        }
      }
      v33 = ++v6;
    }
    while (v6 < a3[802]);
  }
  if (*(_BYTE *)(a4 + 100) && *(_BYTE *)(a4 + 102) && !*(_BYTE *)(a4 + 101))
  {
    *(_BYTE *)(a4 + 85) = 115;
    *(_BYTE *)(a4 + 101) = 1;
    *(_BYTE *)(a4 + 117) = 115;
    *(_BYTE *)(a4 + 133) = 1;
    *(_DWORD *)(a4 + 60) = 257;
  }
  if (*(_BYTE *)(a4 + 99))
  {
    v24 = *(char *)(a4 + 83);
    if (v24 == 104 || (unsigned __int16)v24 == 75)
    {
      if (!*(_BYTE *)(a4 + 98))
      {
        *(_BYTE *)(a4 + 82) = 97;
        *(_BYTE *)(a4 + 98) = 1;
        *(_BYTE *)(a4 + 114) = 97;
        *(_BYTE *)(a4 + 130) = 1;
        *(_DWORD *)(a4 + 48) = -259;
        *(_BYTE *)(a4 + 136) = 1;
      }
    }
    else
    {
      *(_BYTE *)(a4 + 82) = 0;
      *(_BYTE *)(a4 + 98) = 0;
      *(_BYTE *)(a4 + 114) = 0;
      *(_BYTE *)(a4 + 130) = 0;
      *(_DWORD *)(a4 + 48) = 0;
    }
  }
  v25 = *v29;
  v26 = v29[1];
  v27 = v29[3];
  *(_OWORD *)(a1 + 48) = v29[2];
  *(_OWORD *)(a1 + 64) = v27;
  *(_OWORD *)(a1 + 16) = v25;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 80) = *v31;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a4 + 88);
  *(_OWORD *)(a1 + 112) = *v32;
  result = *(__n128 *)(a4 + 120);
  *(__n128 *)(a1 + 128) = result;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a4 + 136);
  return result;
}

uint64_t sub_18BCD8E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  int v8;
  int32_t v9;
  int32_t v10;

  v4 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  v5 = a1 + 72;
  do
    sub_18BCDC370(v5, v4++, a2);
  while (v4 != 16);
  result = (uint64_t)icu::UnicodeString::operator=((UChar **)a2, (UChar **)a2);
  if (*(_BYTE *)(a1 + 136))
  {
    v7 = *(unsigned __int16 *)(a2 + 8);
    v8 = (__int16)v7;
    v9 = v7 >> 5;
    if (v8 >= 0)
      v10 = v9;
    else
      v10 = *(_DWORD *)(a2 + 12);
    result = icu::UnicodeString::doIndexOf(a2, 0x61u, 0, v10);
    if ((result & 0x80000000) == 0)
      return icu::UnicodeString::doReplace(a2, result, 1, 0, 0, 0);
  }
  return result;
}

_QWORD *sub_18BCD8F64(_QWORD *a1)
{
  uint64_t i;

  *a1 = off_1E225E6D0;
  for (i = 393; i != -7; i -= 8)
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[i]);
  return a1;
}

void *icu::DateTimePatternGenerator::staticGetSkeleton@<X0>(icu::DateTimePatternGenerator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t i;
  void *result;
  _QWORD v11[401];
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[152];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  bzero(&v12, 0xC80uLL);
  v11[0] = off_1E225E6D0;
  v6 = 1;
  do
  {
    v7 = &v11[v6];
    *v7 = off_1E2256B38;
    *((_WORD *)v7 + 4) = 2;
    v6 += 8;
  }
  while (v7 + 8 != &v13);
  v13 = 0;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v23 = 0;
  v14 = &off_1E225E718;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_18BCD8B70((uint64_t)v24, this, v11, (uint64_t)&v14);
  sub_18BCD8E7C((uint64_t)&v14, a2);
  v11[0] = off_1E225E6D0;
  for (i = 393; i != -7; i -= 8)
    result = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11[i]);
  return result;
}

void *icu::DateTimePatternGenerator::getBaseSkeleton@<X0>(const icu::UnicodeString *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t i;
  void *result;
  _QWORD v11[401];
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[152];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  bzero(&v12, 0xC80uLL);
  v11[0] = off_1E225E6D0;
  v6 = 1;
  do
  {
    v7 = &v11[v6];
    *v7 = off_1E2256B38;
    *((_WORD *)v7 + 4) = 2;
    v6 += 8;
  }
  while (v7 + 8 != &v13);
  v13 = 0;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v23 = 0;
  v14 = &off_1E225E718;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_18BCD8B70((uint64_t)v24, a1, v11, (uint64_t)&v14);
  sub_18BCD9210((uint64_t)&v14, a2);
  v11[0] = off_1E225E6D0;
  for (i = 393; i != -7; i -= 8)
    result = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11[i]);
  return result;
}

uint64_t sub_18BCD9210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  int v8;
  int32_t v9;
  int32_t v10;

  v4 = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  v5 = a1 + 104;
  do
    sub_18BCDC370(v5, v4++, a2);
  while (v4 != 16);
  result = (uint64_t)icu::UnicodeString::operator=((UChar **)a2, (UChar **)a2);
  if (*(_BYTE *)(a1 + 136))
  {
    v7 = *(unsigned __int16 *)(a2 + 8);
    v8 = (__int16)v7;
    v9 = v7 >> 5;
    if (v8 >= 0)
      v10 = v9;
    else
      v10 = *(_DWORD *)(a2 + 12);
    result = icu::UnicodeString::doIndexOf(a2, 0x61u, 0, v10);
    if ((result & 0x80000000) == 0)
      return icu::UnicodeString::doReplace(a2, result, 1, 0, 0, 0);
  }
  return result;
}

void *icu::DateTimePatternGenerator::staticGetBaseSkeleton@<X0>(icu::DateTimePatternGenerator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t i;
  void *result;
  _QWORD v11[401];
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _BYTE v24[152];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  bzero(&v12, 0xC80uLL);
  v11[0] = off_1E225E6D0;
  v6 = 1;
  do
  {
    v7 = &v11[v6];
    *v7 = off_1E2256B38;
    *((_WORD *)v7 + 4) = 2;
    v6 += 8;
  }
  while (v7 + 8 != &v13);
  v13 = 0;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v23 = 0;
  v14 = &off_1E225E718;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_18BCD8B70((uint64_t)v24, this, v11, (uint64_t)&v14);
  sub_18BCD9210((uint64_t)&v14, a2);
  v11[0] = off_1E225E6D0;
  for (i = 393; i != -7; i -= 8)
    result = icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11[i]);
  return result;
}

void icu::DateTimePatternGenerator::getCalendarTypeToUse(icu::DateTimePatternGenerator *this, const char **a2, icu::CharString *a3, UErrorCode *a4)
{
  UErrorCode *v7;
  _OWORD v8[3];
  __int16 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)a3 + 14) = 0;
  **(_BYTE **)a3 = 0;
  icu::CharString::append(a3, "gregorian", -1, a4);
  if (*(int *)a4 <= 0)
  {
    if (!strcmp(a2[5], "ja_JP_TRADITIONAL"))
    {
      *((_DWORD *)a3 + 14) = 0;
      **(_BYTE **)a3 = 0;
      icu::CharString::append(a3, "japanese", -1, a4);
    }
    else
    {
      v9 = 0;
      memset(v8, 0, sizeof(v8));
      icu::Calendar::getCalendarTypeFromLocale((icu::Calendar *)a2, (const icu::Locale *)v8, (char *)0x32, a4, v7);
      if (*(int *)a4 <= 0)
      {
        *((_DWORD *)a3 + 14) = 0;
        **(_BYTE **)a3 = 0;
        icu::CharString::append(a3, (const char *)v8, -1, a4);
      }
    }
  }
}

uint64_t icu::DateTimePatternGenerator::addPatternWithSkeleton(icu::DateTimePatternGenerator *this, UChar **a2, UChar **a3, int a4, UChar **a5, UErrorCode *a6)
{
  UErrorCode v7;
  uint64_t v8;
  UChar **v12;
  UChar **v14;
  BOOL v15;
  void *v16;
  UChar **v17;
  UChar **v18;
  void *v20;
  char v21;
  _QWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void (**v42)(icu::UnicodeString *__hidden);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v7 = *((_DWORD *)this + 1198);
  if (v7 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    v12 = a2;
    v43 = 0u;
    v46 = 0;
    v45 = 0u;
    v44 = 0u;
    v42 = off_1E2256B38;
    LOWORD(v43) = 2;
    v36 = 0u;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v41 = 0;
    v31 = 0;
    v32 = &off_1E225E718;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v22[0] = &off_1E225E6B0;
    v22[1] = &off_1E225E718;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    if (a3)
      a2 = a3;
    sub_18BCD8B70((uint64_t)v22, (const icu::UnicodeString *)a2, *((_DWORD **)this + 29), (uint64_t)&v32);
    sub_18BCDBA60((uint64_t)v22, (uint64_t)&v42);
    v21 = 0;
    v14 = (UChar **)sub_18BCDBAC0(*((_QWORD *)this + 32), (uint64_t)&v42, &v21);
    if (!v14 || (!a4 ? (v15 = a3 == 0) : (v15 = 1), v15 && v21))
    {
      LODWORD(v8) = 0;
    }
    else
    {
      icu::UnicodeString::operator=(a5, v14);
      v8 = 1;
      if (!a4)
      {
LABEL_23:
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v42);
        return v8;
      }
    }
    v20 = 0;
    v17 = (UChar **)*((_QWORD *)this + 32);
    v18 = (UChar **)sub_18BCDBBD4((uint64_t)v17, &v32, &v20);
    if (v18)
    {
      icu::UnicodeString::operator=(a5, v18);
      if (!a4 || a3 && (v16 = v20) != 0)
      {
        v8 = 2;
        goto LABEL_23;
      }
      v17 = (UChar **)*((_QWORD *)this + 32);
      LODWORD(v8) = 2;
    }
    sub_18BCDBCBC(v17, (unint64_t)&v42, (uint64_t)&v32, v12, a3 != 0, (int *)a6);
    v16 = (void *)*(unsigned int *)a6;
    if ((int)v16 <= 0)
      v8 = 0;
    else
      v8 = v8;
    goto LABEL_23;
  }
  v8 = 0;
  *a6 = v7;
  return v8;
}

void *icu::DateTimePatternGenerator::hackTimes(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  int *v4;
  int v5;
  int v6;
  char v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  int v13;
  unsigned __int16 *v14;
  void *v15;
  int v18;
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  UChar *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  UChar *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v34 = 0u;
  v37 = 0;
  v36 = 0u;
  v35 = 0u;
  v33 = (UChar *)off_1E2256B38;
  LOWORD(v34) = 2;
  sub_18BCD9A34(*((_DWORD **)this + 29), a2);
  v29 = 0u;
  v32 = 0;
  v31 = 0u;
  v30 = 0u;
  v28 = (UChar *)off_1E2256B38;
  LOWORD(v29) = 2;
  v18 = 0;
  v4 = (int *)*((_QWORD *)this + 29);
  if (v4[802] < 1)
    goto LABEL_32;
  v5 = 0;
  v6 = 0;
  while (1)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v24, (UChar **)&v4[16 * (uint64_t)v6 + 2]);
    v7 = BYTE8(v24);
    v8 = (SWORD4(v24) & 0x8000u) == 0 ? WORD4(v24) >> 5 : HIDWORD(v24);
    if (!(_DWORD)v8)
      break;
    v9 = (unsigned __int16 *)*((_QWORD *)&v25 + 1);
    if ((BYTE8(v24) & 2) != 0)
      v9 = (unsigned __int16 *)&v24 + 5;
    v10 = *v9;
    if ((_DWORD)v10 != 39)
      break;
    if (v5)
    {
      v23 = 0;
      v21 = 0u;
      v22 = 0u;
      v20 = 0u;
      v19 = off_1E2256B38;
      LOWORD(v20) = 2;
      sub_18BCD9B0C(*((_QWORD *)this + 29), (icu::UnicodeString *)&v19, &v18);
      if ((v20 & 0x8000u) == 0)
        v11 = (unsigned __int16)v20 >> 5;
      else
        v11 = DWORD1(v20);
      icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v19, 0, v11);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
      goto LABEL_25;
    }
LABEL_26:
    icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
    v6 = v18 + 1;
    v18 = v6;
    v4 = (int *)*((_QWORD *)this + 29);
    if (v6 >= v4[802])
      goto LABEL_32;
  }
  v13 = sub_18BCD9D34(*((_QWORD *)this + 29), (uint64_t)&v24);
  if (v5 && v13)
    goto LABEL_24;
  if (!(_DWORD)v8)
  {
    v10 = 0xFFFFLL;
    if (v5)
      goto LABEL_31;
LABEL_29:
    v10 = (unsigned __int16)(((unsigned __int16)(v10 - 86) >> 2) | (((_WORD)v10 - 86) << 14));
    if (v10 <= 9)
    {
      v10 = (1 << v10);
      if ((v10 & 0x303) != 0)
        goto LABEL_31;
    }
    goto LABEL_26;
  }
  v14 = (unsigned __int16 *)*((_QWORD *)&v25 + 1);
  if ((v7 & 2) != 0)
    v14 = (unsigned __int16 *)&v24 + 5;
  v10 = *v14;
  if ((_DWORD)v10 == 109)
  {
LABEL_24:
    icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v24, 0, v8);
LABEL_25:
    v5 = 1;
    goto LABEL_26;
  }
  if ((_DWORD)v10 != 115)
  {
    if (v5)
      goto LABEL_31;
    goto LABEL_29;
  }
  if (v5)
  {
    icu::UnicodeString::doAppend((uint64_t)&v28, (const icu::UnicodeString *)&v24, 0, v8);
    v10 = *((unsigned int *)this + 1198);
    if ((int)v10 < 1)
      icu::DateTimePatternGenerator::addPatternWithSkeleton(this, &v28, 0, 0, &v33, a3);
    else
      *a3 = v10;
  }
LABEL_31:
  icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v24);
LABEL_32:
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v28);
  return icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v33);
}

void *sub_18BCD9A34(_DWORD *a1, const icu::UnicodeString *a2)
{
  uint64_t v4;
  void *result;
  uint64_t v6;
  void *v7;
  int v8;
  _BYTE v9[64];
  uint64_t v10;

  v4 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  a1[802] = 0;
  do
  {
    result = (void *)(*(uint64_t (**)(_DWORD *, const icu::UnicodeString *, uint64_t, int *))(*(_QWORD *)a1 + 16))(a1, a2, v4, &v8);
    if ((_DWORD)result != 1)
      break;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v9, a2, v4, v8);
    v6 = (int)a1[802];
    a1[802] = v6 + 1;
    icu::UnicodeString::operator=((icu::UnicodeString *)&a1[16 * v6 + 2], (icu::UnicodeString *)v9);
    result = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v9);
    v4 = (v8 + v4);
  }
  while ((int)a1[802] < 50);
  return result;
}

uint64_t sub_18BCD9B0C(uint64_t result, icu::UnicodeString *this, int *a3)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  unsigned int v9;
  const icu::UnicodeString *v10;
  _WORD *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  const icu::UnicodeString *v20;
  int v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  v5 = result;
  v6 = *a3;
  if ((*((_WORD *)this + 4) & 1) != 0)
    v7 = 2;
  else
    v7 = *((_WORD *)this + 4) & 0x1F;
  *((_WORD *)this + 4) = v7;
  v8 = result + ((uint64_t)v6 << 6);
  v9 = *(unsigned __int16 *)(v8 + 16);
  if (*(__int16 *)(v8 + 16) < 0)
  {
    if (!*(_DWORD *)(v8 + 20))
      goto LABEL_16;
  }
  else if (!(v9 >> 5))
  {
    goto LABEL_16;
  }
  v10 = (const icu::UnicodeString *)(v8 + 8);
  if ((v9 & 2) != 0)
    v11 = (_WORD *)(v8 + 18);
  else
    v11 = *(_WORD **)(result + ((uint64_t)v6 << 6) + 32);
  if (*v11 == 39)
  {
    v12 = (__int16)v9;
    v13 = v9 >> 5;
    if (v12 >= 0)
      v14 = v13;
    else
      v14 = *(unsigned int *)(result + ((uint64_t)v6 << 6) + 20);
    result = icu::UnicodeString::doAppend((uint64_t)this, v10, 0, v14);
    ++v6;
  }
LABEL_16:
  v15 = *(_DWORD *)(v5 + 3208);
  if (v6 >= v15)
    goto LABEL_52;
  while (1)
  {
    v16 = v5 + ((uint64_t)v6 << 6);
    v17 = *(unsigned __int16 *)(v16 + 16);
    v18 = v17 >> 5;
    if (*(__int16 *)(v16 + 16) < 0)
      v19 = *(_DWORD *)(v16 + 20);
    else
      v19 = v17 >> 5;
    v20 = (const icu::UnicodeString *)(v16 + 8);
    v21 = (__int16)v17;
    if (!v19
      || ((v17 & 2) != 0 ? (v22 = (_WORD *)((char *)v20 + 10)) : (v22 = *(_WORD **)(v5 + ((uint64_t)v6 << 6) + 32)),
          *v22 != 39))
    {
      if (v21 >= 0)
        v28 = v18;
      else
        v28 = *(unsigned int *)(v5 + ((uint64_t)v6 << 6) + 20);
      result = icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v28);
      ++v6;
      goto LABEL_45;
    }
    v23 = v6 + 1;
    if (v6 + 1 >= v15)
      break;
    v24 = v5 + (v23 << 6);
    v26 = *(__int16 *)(v24 + 16);
    v25 = (unsigned __int16 *)(v24 + 16);
    v27 = (unsigned __int16)v26;
    if (v26 < 0)
    {
      if (!*(_DWORD *)(v5 + (v23 << 6) + 20))
        break;
    }
    else if (!(v27 >> 5))
    {
      break;
    }
    v29 = (v27 & 2) != 0 ? v25 + 1 : *(unsigned __int16 **)(v5 + (v23 << 6) + 32);
    if (*v29 != 39)
      break;
    if (v21 >= 0)
      v30 = v18;
    else
      v30 = *(unsigned int *)(v5 + 8 + ((uint64_t)v6 << 6) + 12);
    icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v30);
    v6 += 2;
    v31 = *v25;
    v32 = (__int16)v31;
    v33 = v31 >> 5;
    if (v32 >= 0)
      v34 = v33;
    else
      v34 = *(unsigned int *)(v5 + 8 + (v23 << 6) + 12);
    result = icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)(v25 - 4), 0, v34);
LABEL_45:
    v15 = *(_DWORD *)(v5 + 3208);
    if (v6 >= v15)
      goto LABEL_52;
  }
  if (v21 >= 0)
    v35 = v18;
  else
    v35 = *(unsigned int *)(v5 + ((uint64_t)v6 << 6) + 20);
  result = icu::UnicodeString::doAppend((uint64_t)this, v20, 0, v35);
LABEL_52:
  *a3 = v6;
  return result;
}

uint64_t sub_18BCD9D34(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;
  unsigned __int16 *v13;

  v2 = 0;
  v3 = *(unsigned __int16 *)(a2 + 8);
  v4 = a2 + 10;
  if ((v3 & 2) == 0)
    v4 = *(_QWORD *)(a2 + 24);
  v5 = (unsigned __int16 *)(a1 + 16);
  if ((v3 & 0x8000) != 0)
    goto LABEL_6;
LABEL_4:
  v6 = v3 >> 5;
  if (v2 >= v3 >> 5)
    return 1;
  while (1)
  {
    if (v6 <= v2
      || ((v7 = *(unsigned __int16 *)(v4 + 2 * v2) - 32, v8 = v7 > 0x3C, v9 = (1 << v7) & 0x1000000004003085, !v8)
        ? (v10 = v9 == 0)
        : (v10 = 1),
          v10))
    {
      v11 = *v5;
      if ((__int16)*v5 < 0)
      {
        result = *((unsigned int *)v5 + 1);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        result = v11 >> 5;
        if (!(_DWORD)result)
          return result;
      }
      v13 = (v11 & 2) != 0 ? v5 + 1 : (unsigned __int16 *)*((_QWORD *)v5 + 2);
      if (*v13 != 46)
        return 0;
    }
    ++v2;
    v5 += 32;
    if ((v3 & 0x8000) == 0)
      goto LABEL_4;
LABEL_6:
    v6 = *(unsigned int *)(a2 + 12);
    if ((uint64_t)v2 >= *(int *)(a2 + 12))
      return 1;
  }
}

uint64_t icu::DateTimePatternGenerator::addPattern(icu::DateTimePatternGenerator *this, UChar **a2, int a3, UChar **a4, UErrorCode *a5)
{
  UErrorCode v5;

  v5 = *((_DWORD *)this + 1198);
  if (v5 < U_ILLEGAL_ARGUMENT_ERROR)
    return icu::DateTimePatternGenerator::addPatternWithSkeleton(this, a2, 0, a3, a4, a5);
  *a5 = v5;
  return 0;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::consumeShortTimePattern(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
    return (icu::DateTimePatternGenerator *)icu::DateTimePatternGenerator::hackTimes(this, a2, a3);
  return this;
}

void sub_18BCD9E50(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BCD9E68(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BCD9E7C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E225E548;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 24));
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

void sub_18BCD9EAC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E225E548;
  icu::UnicodeString::~UnicodeString(off_1E225E548, (icu::UnicodeString *)(a1 + 24));
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
  icu::UMemory::operator delete(v2);
}

void *sub_18BCD9EE0(uint64_t a1)
{
  uint64_t i;
  char *v3;
  UChar **v4;
  const char *v6;
  _OWORD v7[4];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  v6 = "{";
  icu::UnicodeString::UnicodeString(v7, 1, &v6);
  for (i = 272; i != 1296; i += 64)
  {
    v3 = *(char **)(a1 + 8);
    if (*(unsigned __int16 *)&v3[i] <= 0x1Fu)
    {
      v4 = (UChar **)&v3[i - 8];
      icu::UnicodeString::operator=(v4, (UChar **)v7);
      icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v4);
    }
  }
  return icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)v7);
}

_QWORD *sub_18BCD9FB4(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  icu::UnicodeString *v7;
  __int16 v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  icu::UnicodeString *v12;
  void *v13;
  _WORD v14[32];
  uint64_t v15;

  v1 = result;
  v2 = 0;
  v3 = 0;
  v15 = *MEMORY[0x1E0C80C00];
  do
  {
    v4 = v1[1];
    v5 = v4 + 192 * v3;
    if (*(unsigned __int16 *)(v5 + 1296) < 0x20u)
    {
      v14[0] = 70;
      if (*(__int16 *)(v5 + 1296) < 0)
        v6 = *(unsigned int *)(v4 + 192 * v3 + 1300);
      else
        v6 = *(unsigned __int16 *)(v5 + 1296) >> 5;
      v7 = (icu::UnicodeString *)(v5 + 1288);
      icu::UnicodeString::doReplace(v5 + 1288, 0, v6, (uint64_t)v14, 0, 1);
      if (v3 > 9)
      {
        v14[0] = 49;
        icu::UnicodeString::doAppend((uint64_t)v7, (uint64_t)v14, 0, 1);
        v8 = v3 + 38;
      }
      else
      {
        v8 = v3 + 48;
      }
      v14[0] = v8;
      icu::UnicodeString::doAppend((uint64_t)v7, (uint64_t)v14, 0, 1);
      result = (_QWORD *)icu::UnicodeString::getTerminatedBuffer(v7);
    }
    for (i = 0; i != 128; i += 64)
    {
      v10 = v1[1];
      if (*(unsigned __int16 *)(v10 + v2 + i + 1360) <= 0x1Fu)
      {
        v11 = v10 + v2 + i;
        v12 = (icu::UnicodeString *)(v11 + 1352);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v14, (UChar **)(v11 + 1288));
        icu::UnicodeString::operator=(v12, (icu::UnicodeString *)v14);
        result = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v14);
      }
    }
    ++v3;
    v2 += 192;
  }
  while (v3 != 16);
  return result;
}

void ****icu::DateTimePatternGenerator::initHashtable(void ****this, UErrorCode *a2)
{
  void ****v2;
  int32x2_t *v4;
  void ***v5;
  int32x2_t *v6;
  int v7;
  void ***v8;

  if (*(int *)a2 <= 0)
  {
    v2 = this;
    if (!this[586])
    {
      v4 = (int32x2_t *)icu::UMemory::operator new(0, (icu::UMemory *)0x58, (unint64_t)a2);
      if (v4)
      {
        v5 = (void ***)v4;
        *v4 = 0;
        if (*(int *)a2 <= 0
          && (v6 = v4 + 1,
              uhash_init(v4 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, (int *)a2),
              *(int *)a2 <= 0))
        {
          *v5 = (void **)v6;
          uhash_setKeyDeleter((uint64_t)(v5 + 1), (uint64_t)uprv_deleteUObject);
          v7 = *a2;
          v8 = v5;
          if (v7 <= 0)
          {
            v8 = 0;
            v2[586] = v5;
          }
        }
        else
        {
          v8 = v5;
        }
      }
      else
      {
        v8 = 0;
        if (*(int *)a2 <= 0)
          *a2 = U_MEMORY_ALLOCATION_ERROR;
      }
      return sub_18BCAF47C(&v8);
    }
  }
  return this;
}

uint64_t icu::DateTimePatternGenerator::setAppendItemFormat(uint64_t a1, unsigned int a2, UChar **a3)
{
  UChar **v3;

  v3 = (UChar **)(a1 + ((unint64_t)a2 << 6) + 264);
  icu::UnicodeString::operator=(v3, a3);
  return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v3);
}

unint64_t icu::DateTimePatternGenerator::getAppendItemFormat(uint64_t a1, unsigned int a2)
{
  return a1 + ((unint64_t)a2 << 6) + 264;
}

uint64_t icu::DateTimePatternGenerator::setAppendItemName(uint64_t a1, unsigned int a2, UChar **a3)
{
  UChar **v3;

  v3 = (UChar **)(a1 + 192 * a2 + 1288);
  icu::UnicodeString::operator=(v3, a3);
  return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v3);
}

uint64_t icu::DateTimePatternGenerator::setFieldDisplayName(uint64_t a1, unsigned int a2, unsigned int a3, UChar **a4)
{
  UChar **v4;

  v4 = (UChar **)(a1 + 192 * a2 + ((unint64_t)a3 << 6) + 1288);
  icu::UnicodeString::operator=(v4, a4);
  return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v4);
}

uint64_t icu::DateTimePatternGenerator::getAppendItemName(uint64_t a1, unsigned int a2)
{
  return a1 + 192 * a2 + 1288;
}

icu::UnicodeString *icu::DateTimePatternGenerator::getFieldDisplayName@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, icu::UnicodeString *a4@<X8>)
{
  return icu::UnicodeString::UnicodeString(a4, (UChar **)(a1 + 192 * a2 + ((unint64_t)a3 << 6) + 1288));
}

unint64_t icu::DateTimePatternGenerator::getMutableFieldDisplayName(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return a1 + 192 * a2 + ((unint64_t)a3 << 6) + 1288;
}

uint64_t icu::DateTimePatternGenerator::getAppendName(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  const icu::UnicodeString *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int16 v18;
  __int16 v19;

  v18 = 39;
  v6 = *(unsigned __int16 *)(a3 + 8);
  v7 = (__int16)v6;
  v8 = v6 >> 5;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = *(unsigned int *)(a3 + 12);
  icu::UnicodeString::doReplace(a3, 0, v9, (uint64_t)&v18, 0, 1);
  v10 = a1 + 192 * a2;
  v11 = (const icu::UnicodeString *)(v10 + 1288);
  v12 = *(unsigned __int16 *)(v10 + 1296);
  v13 = (__int16)v12;
  v14 = v12 >> 5;
  v15 = *(_DWORD *)(v10 + 1300);
  if (v13 >= 0)
    v16 = v14;
  else
    v16 = v15;
  icu::UnicodeString::doAppend(a3, v11, 0, v16);
  v19 = 39;
  return icu::UnicodeString::doAppend(a3, (uint64_t)&v19, 0, 1);
}

void *icu::DateTimePatternGenerator::getBestPattern@<X0>(icu::DateTimePatternGenerator *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, icu::UnicodeString *a4@<X8>)
{
  return icu::DateTimePatternGenerator::getBestPattern(this, (uint64_t)a2, 0, (int *)a3, a4);
}

void *icu::DateTimePatternGenerator::getBestPattern@<X0>(void *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int *a4@<X3>, icu::UnicodeString *a5@<X8>)
{
  _QWORD *v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t BestRaw;
  const icu::UnicodeString *v14;
  unsigned int v15;
  int32_t v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int8x16_t v20;
  uint32x4_t v21;
  int32x4_t v22;
  int8x8_t v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  void *v35;
  int v36;
  icu::UnicodeString *v37;
  UChar **DateTimeFormat;
  void *v39;
  void *v40;
  void *v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  _OWORD v45[4];
  _OWORD v46[4];
  _OWORD v47[4];
  void (**v48)(icu::UnicodeString *__hidden);
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  UChar *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t (**v58)();
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (*a4 >= 1)
    goto LABEL_4;
  v7 = result;
  v8 = *((_DWORD *)result + 1198);
  if (v8 < 1)
  {
    v54 = 0u;
    v57 = 0;
    v56 = 0u;
    v55 = 0u;
    v52 = 0;
    v53 = (UChar *)off_1E2256B38;
    LOWORD(v54) = 2;
    v49 = 0u;
    v51 = 0u;
    v50 = 0u;
    v48 = off_1E2256B38;
    LOWORD(v49) = 2;
    v44 = 0;
    memset(v47, 0, sizeof(v47));
    icu::DateTimePatternGenerator::mapSkeletonMetacharacters((uint64_t)result, a2, &v44, a3, a4, (icu::UnicodeString *)v47);
    v10 = *a4;
    if ((int)v10 >= 1)
    {
      *(_QWORD *)a5 = off_1E2256B38;
      *((_WORD *)a5 + 4) = 2;
LABEL_48:
      icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v47);
      icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v48);
      return icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v53);
    }
    LOWORD(v49) = 2;
    v12 = (_DWORD *)v7[29];
    v11 = v7[30];
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v59 = 0u;
    v67 = 0;
    v58 = &off_1E225E718;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    sub_18BCD8B70(v11, (const icu::UnicodeString *)v47, v12, (uint64_t)&v58);
    v43 = 0;
    BestRaw = icu::DateTimePatternGenerator::getBestRaw((uint64_t)v7, v7[30], -1, v7[31], a4, &v43);
    v14 = (const icu::UnicodeString *)BestRaw;
    v15 = *(unsigned __int16 *)(BestRaw + 8);
    if ((v15 & 0x8000) != 0)
      v16 = *(_DWORD *)(BestRaw + 12);
    else
      v16 = v15 >> 5;
    if (icu::UnicodeString::doIndexOf(BestRaw, 0x47u, 0, v16) != -1)
      *(_DWORD *)(v7[31] + 8) &= ~1u;
    if (*a4 >= 1)
    {
      *(_QWORD *)a5 = off_1E2256B38;
      v10 = 2;
      *((_WORD *)a5 + 4) = 2;
      goto LABEL_48;
    }
    v17 = v7[31];
    if (!*(_DWORD *)(v17 + 8) && !*(_DWORD *)(v17 + 12))
    {
      icu::DateTimePatternGenerator::adjustFieldTypes((uint64_t)v7, v14, v43, v44, a3, (uint64_t)&v58);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v48, (icu::UnicodeString *)&v58);
      icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v58);
      icu::UnicodeString::UnicodeString(a5, (icu::UnicodeString *)&v48);
      goto LABEL_48;
    }
    v18 = 0;
    v19 = (int32x4_t)xmmword_18BE14860;
    v20 = 0uLL;
    v21.i64[0] = 0x100000001;
    v21.i64[1] = 0x100000001;
    v22.i64[0] = 0x400000004;
    v22.i64[1] = 0x400000004;
    do
    {
      v20 = vorrq_s8(vbicq_s8((int8x16_t)vshlq_u32(v21, (uint32x4_t)v19), (int8x16_t)vceqzq_s32(*(int32x4_t *)(v7[30] + 16 + v18))), v20);
      v19 = vaddq_s32(v19, v22);
      v18 += 16;
    }
    while (v18 != 64);
    v23 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
    v24 = v23.i16[0] | v23.i16[2];
    memset(v46, 0, sizeof(v46));
    v25 = v44;
    icu::DateTimePatternGenerator::getBestAppending(v7, (v23.i16[0] | v23.i16[2]) & 0x3FF, v44, a4, a3, (icu::UnicodeString *)v46);
    memset(v45, 0, sizeof(v45));
    icu::DateTimePatternGenerator::getBestAppending(v7, v24 & 0xFC00, v25, a4, a3, (icu::UnicodeString *)v45);
    if (*a4 >= 1)
    {
      *(_QWORD *)a5 = off_1E2256B38;
      v26 = 2;
      *((_WORD *)a5 + 4) = 2;
LABEL_47:
      icu::UnicodeString::~UnicodeString((void *)v26, (icu::UnicodeString *)v45);
      icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)v46);
      goto LABEL_48;
    }
    if ((SWORD4(v46[0]) & 0x8000u) == 0)
      v27 = WORD4(v46[0]) >> 5;
    else
      v27 = HIDWORD(v46[0]);
    if (v27)
    {
      v28 = HIDWORD(v45[0]);
      v29 = WORD4(v45[0]) >> 5;
    }
    else
    {
      v29 = WORD4(v45[0]) >> 5;
      v28 = HIDWORD(v45[0]);
      if ((SWORD4(v45[0]) & 0x8000u) == 0)
        v36 = WORD4(v45[0]) >> 5;
      else
        v36 = HIDWORD(v45[0]);
      if (v36)
      {
        v37 = (icu::UnicodeString *)v45;
LABEL_46:
        icu::UnicodeString::UnicodeString(a5, v37);
        goto LABEL_47;
      }
      if ((v49 & 1) != 0)
        v42 = 2;
      else
        v42 = v49 & 0x1F;
      LOWORD(v49) = v42;
    }
    if ((SWORD4(v45[0]) & 0x8000u) == 0)
      v30 = v29;
    else
      v30 = v28;
    if (v30)
    {
      if ((v49 & 1) != 0)
        v31 = 2;
      else
        v31 = v49 & 0x1F;
      LOWORD(v49) = v31;
      *a4 = 0;
      v32 = v7[30];
      v33 = *(char *)(v32 + 131);
      if (v33 == 3)
      {
        v34 = 2;
      }
      else if (v33 == 4)
      {
        v34 = *(char *)(v32 + 134) < 1;
      }
      else
      {
        v34 = 3;
      }
      DateTimeFormat = (UChar **)icu::DateTimePatternGenerator::getDateTimeFormat((uint64_t)v7, v34, a4);
      icu::UnicodeString::operator=(&v53, DateTimeFormat);
      *(_QWORD *)&v59 = off_1E2256B38;
      WORD4(v59) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v58, (const icu::UnicodeString *)&v53, 2, 2, 0, (UErrorCode *)a4);
      icu::SimpleFormatter::format((icu::SimpleFormatter *)&v58, (const icu::UnicodeString *)v45, (const icu::UnicodeString *)v46, (icu::UnicodeString *)&v48, (UErrorCode *)a4);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v58);
      v37 = (icu::UnicodeString *)&v48;
    }
    else
    {
      v37 = (icu::UnicodeString *)v46;
    }
    goto LABEL_46;
  }
  *a4 = v8;
LABEL_4:
  *(_QWORD *)a5 = off_1E2256B38;
  *((_WORD *)a5 + 4) = 2;
  return result;
}

void *icu::DateTimePatternGenerator::mapSkeletonMetacharacters@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, int a4@<W3>, _DWORD *a5@<X4>, icu::UnicodeString *a6@<X8>)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  __int16 v45;
  void (**v46)(icu::UnicodeString *__hidden);
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v47 = 0u;
  v48 = 0u;
  v50 = 0;
  v49 = 0u;
  v46 = off_1E2256B38;
  LOWORD(v47) = 2;
  v6 = *(unsigned __int16 *)(a1 + 4760);
  if ((a4 & 0x60000000) == 0x20000000)
    v6 = 104;
  if ((a4 & 0x60000000) == 0x40000000)
    v7 = 72;
  else
    v7 = v6;
  v8 = *(unsigned __int16 *)(a2 + 8);
  v9 = (__int16)v8;
  v10 = v8 >> 5;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(unsigned int *)(a2 + 12);
  if ((int)v11 < 1)
    goto LABEL_82;
  v13 = 0;
  v14 = 0;
  v15 = a2 + 10;
  v16 = a1 + 4764;
  do
  {
    v17 = *(unsigned __int16 *)(a2 + 8);
    v18 = v17 >> 5;
    if ((v17 & 0x8000u) != 0)
      v18 = *(_DWORD *)(a2 + 12);
    if (v18 <= v13)
    {
      v20 = 0xFFFF;
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 24);
      if ((v17 & 2) != 0)
        v19 = v15;
      v20 = *(unsigned __int16 *)(v19 + 2 * v13);
      if (v20 == 39)
      {
        v14 = !v14;
        goto LABEL_81;
      }
    }
    if (v14)
    {
      v14 = 1;
      goto LABEL_81;
    }
    if (v20 != 106)
    {
      if (v20 == 74)
      {
        v45 = 72;
        icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1);
        v14 = 0;
        *a3 |= 2u;
        goto LABEL_81;
      }
      if (v20 != 67)
      {
        v45 = v20;
        icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1);
        v14 = 0;
        goto LABEL_81;
      }
    }
    v21 = v13 + 1;
    if (v13 + 1 >= (int)v11)
    {
      v28 = 1;
      v29 = 1;
    }
    else
    {
      v22 = 0;
      if ((v17 & 2) != 0)
        v23 = v15;
      else
        v23 = *(_QWORD *)(a2 + 24);
      v24 = v11 - 1 - v13;
      v25 = v23 + 2 * v21;
      v26 = v11 - v21;
      while (1)
      {
        v27 = v18 <= v13 + (int)v22 + 1 ? 0xFFFF : *(unsigned __int16 *)(v25 + 2 * v22);
        if (v27 != v20)
          break;
        if (v26 == ++v22)
        {
          v13 = v11 - 1;
          goto LABEL_39;
        }
      }
      v13 += v22;
      v24 = v22;
LABEL_39:
      v28 = (v24 & 1) + 1;
      if (v24 <= 1)
        v29 = 1;
      else
        v29 = (v24 >> 1) + 3;
    }
    if (v20 == 106)
    {
      v30 = 97;
      v31 = v7;
      goto LABEL_74;
    }
    if (*(_DWORD *)(a1 + 4764) == -1)
    {
      *a5 = 3;
      *(_QWORD *)a6 = off_1E2256B38;
      v39 = 2;
      *((_WORD *)a6 + 4) = 2;
      return icu::UnicodeString::~UnicodeString((void *)v39, (icu::UnicodeString *)&v46);
    }
    v32 = 0;
    while (1)
    {
      v33 = *(_DWORD *)(v16 + 4 * v32);
      if (v33 + 1 > 0xA)
      {
LABEL_56:
        if (v7 == 75 || v7 == 104)
          goto LABEL_60;
        goto LABEL_50;
      }
      if (((1 << (v33 + 1)) & 0x614) != 0)
      {
        if (v7 == 72 || v7 == 107)
          goto LABEL_60;
LABEL_50:
        v34 = -1;
        goto LABEL_51;
      }
      v34 = *(_DWORD *)(a1 + 4764);
      if (v33 != -1)
        goto LABEL_56;
LABEL_51:
      if (v34 != -1)
        break;
      v33 = -1;
      if (v32++ >= 6)
        goto LABEL_60;
    }
    v33 = v34;
LABEL_60:
    if (v33 > 9)
      goto LABEL_67;
    if (((1 << v33) & 0xC4) != 0)
    {
      v31 = 75;
    }
    else
    {
      if (((1 << v33) & 0x302) != 0)
      {
        v31 = 72;
        goto LABEL_68;
      }
      if (v33 == 3)
      {
        v31 = 107;
        goto LABEL_73;
      }
LABEL_67:
      v31 = 104;
    }
LABEL_68:
    if (v33 > 9)
      goto LABEL_73;
    v36 = 1 << v33;
    if ((v36 & 0x150) != 0)
    {
      v30 = 98;
      goto LABEL_74;
    }
    if ((v36 & 0x2A0) == 0)
    {
LABEL_73:
      v30 = 97;
      goto LABEL_74;
    }
    v30 = 66;
LABEL_74:
    if (v31 != 72 && v31 != 107)
    {
      v37 = v29 + 1;
      do
      {
        v45 = v30;
        icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1);
        --v37;
      }
      while (v37 > 1);
    }
    v38 = v28 + 1;
    do
    {
      v45 = v31;
      icu::UnicodeString::doAppend((uint64_t)&v46, (uint64_t)&v45, 0, 1);
      --v38;
    }
    while (v38 > 1);
    v14 = 0;
LABEL_81:
    ++v13;
  }
  while (v13 < (int)v11);
LABEL_82:
  icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v46);
  return icu::UnicodeString::~UnicodeString((void *)v39, (icu::UnicodeString *)&v46);
}

uint64_t icu::DateTimePatternGenerator::getBestRaw(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, _QWORD *a6)
{
  uint64_t v12;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (**v33)();
  uint64_t (**v34)();
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  sub_18BCDD204((uint64_t)&v27, a5);
  v12 = 0;
  if (*a5 <= 0)
  {
    v29 = *(_QWORD *)(a1 + 256);
    if (sub_18BCDC128((uint64_t)&v27))
    {
      v24 = a4;
      v25 = a2;
      v12 = 0;
      v31 = 0;
      v32 = 0;
      v14 = 0x7FFFFFFF;
      v26 = -1;
      do
      {
        v43 = 0;
        v15 = sub_18BCDC18C((uint64_t)&v27);
        v16 = *(_OWORD *)(v15 + 32);
        v35 = *(_OWORD *)(v15 + 16);
        v36 = v16;
        v17 = *(_OWORD *)(v15 + 64);
        v37 = *(_OWORD *)(v15 + 48);
        v38 = v17;
        v18 = *(_OWORD *)(v15 + 96);
        v39 = *(_OWORD *)(v15 + 80);
        v40 = v18;
        v19 = *(_OWORD *)(v15 + 128);
        v41 = *(_OWORD *)(v15 + 112);
        v33 = &off_1E225E6B0;
        v34 = &off_1E225E718;
        v42 = v19;
        LOBYTE(v43) = *(_BYTE *)(v15 + 144);
        if (!sub_18BCDC264(&v33, *(_QWORD **)(a1 + 4680)))
        {
          v20 = sub_18BCDC29C(v25, (uint64_t)&v33, a3, (uint64_t)&v31);
          v21 = v20;
          v22 = v32;
          if (v20 < v14 || v20 == v14 && v26 < (int)v32)
          {
            v12 = sub_18BCDBBD4(*(_QWORD *)(a1 + 256), &v34, &v30);
            v23 = HIDWORD(v32);
            *(_DWORD *)(v24 + 8) = v22;
            *(_DWORD *)(v24 + 12) = v23;
            if (!v21)
              break;
            v14 = v21;
            v26 = v22;
          }
        }
      }
      while (sub_18BCDC128((uint64_t)&v27));
      if (a6 && v12)
        *a6 = v30;
    }
    else
    {
      v12 = 0;
    }
  }
  *(_QWORD *)&v27 = &off_1E225E6F8;
  if (*((_QWORD *)&v28 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v28 + 1) + 8))(*((_QWORD *)&v28 + 1));
  return v12;
}

void *icu::DateTimePatternGenerator::adjustFieldTypes@<X0>(uint64_t a1@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  void *result;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  BOOL v32;
  int v33;
  unint64_t v34;
  BOOL v36;
  BOOL v38;
  BOOL v39;
  int v40;
  int v41;
  _BOOL4 v42;
  int v43;
  BOOL v44;
  _BOOL4 v45;
  int v46;
  _BOOL4 v47;
  int v48;
  BOOL v49;
  __int16 v50;
  __int16 *v51;
  __int16 v53;
  int v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  unsigned __int16 v58;
  __int16 v59;
  __int16 v61;
  unsigned int v62;
  char v63;
  int v65;
  void (**v66)(icu::UnicodeString *__hidden);
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a6 + 8) = 0u;
  *(_QWORD *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_QWORD *)a6 = off_1E2256B38;
  *(_WORD *)(a6 + 8) = 2;
  result = sub_18BCD9A34(*(_DWORD **)(a1 + 232), a2);
  v65 = 0;
  v11 = *(_QWORD *)(a1 + 232);
  if (*(int *)(v11 + 3208) >= 1)
  {
    v12 = 0;
    v63 = a4;
    while (1)
    {
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v71, (UChar **)(v11 + ((uint64_t)v12 << 6) + 8));
      v13 = BYTE8(v71);
      if ((SWORD4(v71) & 0x8000u) == 0)
        v14 = WORD4(v71) >> 5;
      else
        v14 = HIDWORD(v71);
      if ((_DWORD)v14)
      {
        v15 = (_WORD *)*((_QWORD *)&v72 + 1);
        if ((BYTE8(v71) & 2) != 0)
          v15 = (_WORD *)&v71 + 5;
        if (*v15 == 39)
        {
          v70 = 0;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          v66 = off_1E2256B38;
          LOWORD(v67) = 2;
          sub_18BCD9B0C(*(_QWORD *)(a1 + 232), (icu::UnicodeString *)&v66, &v65);
          if ((v67 & 0x8000u) == 0)
            v16 = (unsigned __int16)v67 >> 5;
          else
            v16 = DWORD1(v67);
          icu::UnicodeString::doAppend(a6, (const icu::UnicodeString *)&v66, 0, v16);
          icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v66);
          goto LABEL_129;
        }
      }
      if (!sub_18BCD9D34(*(_QWORD *)(a1 + 232), (uint64_t)&v71))
      {
        v21 = sub_18BCDD0F8((uint64_t)&v71, 1);
        if ((v21 & 0x80000000) == 0)
          break;
      }
      v19 = a6;
      v20 = v14;
LABEL_128:
      icu::UnicodeString::doAppend(v19, (const icu::UnicodeString *)&v71, 0, v20);
LABEL_129:
      result = icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v71);
      v12 = v65 + 1;
      v65 = v12;
      v11 = *(_QWORD *)(a1 + 232);
      if (v12 >= *(_DWORD *)(v11 + 3208))
        return result;
    }
    v22 = v21 & 0xFFFFFFFE;
    if ((a4 & 1) != 0 && v22 == 64)
    {
      v23 = *(unsigned __int16 *)(a1 + 4624);
      v24 = (__int16)v23;
      v25 = v23 >> 5;
      if (v24 >= 0)
        v26 = v25;
      else
        v26 = *(unsigned int *)(a1 + 4628);
      icu::UnicodeString::doAppend((uint64_t)&v71, (const icu::UnicodeString *)(a1 + 4616), 0, v26);
      sub_18BCDC370(*(_QWORD *)(a1 + 240) + 80, 14, (uint64_t)&v71);
      goto LABEL_124;
    }
    v27 = *(int *)&aG_1[8 * v21 + 2];
    v28 = *(_QWORD *)(a1 + 240);
    if (!*(_DWORD *)(v28 + 4 * v27 + 16))
    {
LABEL_124:
      if ((SWORD4(v71) & 0x8000u) == 0)
        v20 = WORD4(v71) >> 5;
      else
        v20 = HIDWORD(v71);
      v19 = a6;
      goto LABEL_128;
    }
    v29 = v28 + v27;
    v30 = *(char *)(v29 + 80);
    v31 = *(char *)(v29 + 96);
    v32 = v31 < 3 && v30 == 69;
    if (v32)
      v33 = 3;
    else
      v33 = v31;
    v34 = v21 - 56;
    v36 = (a5 & 0x1000) == 0 && v21 == 63;
    v38 = (a5 & 0x2000) == 0 && v22 == 64;
    v39 = v34 < 7 && (a5 & 0x800) == 0;
    v40 = v14;
    if (!v39)
    {
      v40 = v14;
      if (!v36)
      {
        v40 = v14;
        if (!v38)
        {
          if (!a3 || v30 == 99)
          {
            v40 = v33;
          }
          else
          {
            v40 = v33;
            if (v30 != 101)
            {
              v41 = (__int16)aG_1[8 * v21 + 4];
              v42 = v41 < 1;
              v43 = *(_DWORD *)(a3 + 4 * v27 + 8);
              v44 = v43 <= 0;
              v45 = v43 > 0;
              if (!v44)
                v42 = 1;
              v46 = *(char *)(a3 + v27 + 88);
              v47 = v41 < 1 && v45;
              v32 = v33 == v46;
              v48 = !v42;
              if (v32)
                v48 = 1;
              if (v48 | v47)
                v40 = v14;
              else
                v40 = v33;
            }
          }
        }
      }
    }
    if ((unint64_t)v21 - 63 > 0xFFFFFFFFFFFFFFF8
      || (unint64_t)v21 - 27 > 0xFFFFFFFFFFFFFFF6
      || (unint64_t)v21 - 43 > 0xFFFFFFFFFFFFFFF1)
    {
      if (!(_DWORD)v14)
      {
        v50 = -1;
LABEL_80:
        if (v40 < 3 && v50 == 69)
          v53 = 101;
        else
          v53 = v50;
        if (v34 <= 6 && *(_WORD *)(a1 + 4760))
        {
          v54 = icu::DateTimePatternGenerator::defaultHourPeriodCharForHourCycle(a1, a5);
          v55 = (a5 & 0x20000000) != 0 ? 104 : v54;
          v56 = (a5 & 0x20000000) != 0 ? 104 : v53;
          if ((a5 & 0x40000000) != 0)
          {
            v55 = 72;
            v57 = 72;
          }
          else
          {
            v57 = v56;
          }
          v58 = (v63 & 2) != 0 ? v55 : v30;
          v59 = (v63 & 2) != 0 ? v57 : v53;
          v53 = v54;
          if (v54 != v58)
          {
            if (v58 == 104 && v54 == 75)
            {
              v53 = 75;
            }
            else if (v58 == 72 && v54 == 107)
            {
              v53 = 107;
            }
            else if (v58 == 107 && v54 == 72)
            {
              v53 = 72;
            }
            else if (v54 == 104 && v58 == 75)
            {
              v53 = 104;
            }
            else
            {
              v53 = v59;
            }
          }
        }
        v61 = v13 & 0x1F;
        if ((v13 & 1) != 0)
          v61 = 2;
        WORD4(v71) = v61;
        a4 = v63;
        if (v40 >= 1)
        {
          v62 = v40 + 1;
          do
          {
            LOWORD(v66) = v53;
            icu::UnicodeString::doAppend((uint64_t)&v71, (uint64_t)&v66, 0, 1);
            --v62;
          }
          while (v62 > 1);
        }
        goto LABEL_124;
      }
    }
    else
    {
      v49 = (unint64_t)v21 - 10 < 0xFFFFFFFFFFFFFFF9 || v30 == 89;
      if (v49)
        v50 = v30;
      else
        v50 = -1;
      if (v49 || !(_DWORD)v14)
        goto LABEL_80;
    }
    v51 = (__int16 *)*((_QWORD *)&v72 + 1);
    if ((v13 & 2) != 0)
      v51 = (__int16 *)&v71 + 5;
    v50 = *v51;
    goto LABEL_80;
  }
  return result;
}

void *icu::DateTimePatternGenerator::getBestAppending@<X0>(void *result@<X0>, int a2@<W1>, char a3@<W2>, int *a4@<X3>, int a5@<W4>, icu::UnicodeString *a6@<X8>)
{
  uint64_t v11;
  void *v12;
  UChar **BestRaw;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  void *v18;
  UChar **v19;
  void *v20;
  int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  const icu::UnicodeString *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  void (**v31)(icu::UnicodeString *__hidden);
  void (**v32)(icu::UnicodeString *__hidden);
  __int16 v33;
  icu::UnicodeString *v34[3];
  void (**v35)(icu::UnicodeString *__hidden);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  UChar *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  UChar *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (*a4 >= 1)
  {
    *(_QWORD *)a6 = off_1E2256B38;
    *((_WORD *)a6 + 4) = 2;
    return result;
  }
  v46 = 0u;
  v49 = 0;
  v48 = 0u;
  v47 = 0u;
  v45 = (UChar *)off_1E2256B38;
  LOWORD(v46) = 2;
  v41 = 0u;
  v44 = 0;
  v43 = 0u;
  v42 = 0u;
  v40 = (UChar *)off_1E2256B38;
  LOWORD(v41) = 2;
  if (!a2)
    goto LABEL_22;
  v11 = (uint64_t)result;
  v31 = off_1E2256B38;
  LOWORD(v32) = 2;
  icu::UnicodeString::operator=((icu::UnicodeString *)&v45, (icu::UnicodeString *)&v31);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v31);
  v30 = 0;
  BestRaw = (UChar **)icu::DateTimePatternGenerator::getBestRaw(v11, *(_QWORD *)(v11 + 240), a2, *(_QWORD *)(v11 + 248), a4, &v30);
  if (*a4 < 1)
  {
    icu::UnicodeString::operator=(&v40, BestRaw);
    icu::DateTimePatternGenerator::adjustFieldTypes(v11, (const icu::UnicodeString *)&v40, v30, a3, a5, (uint64_t)&v31);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v45, (icu::UnicodeString *)&v31);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v31);
    v16 = *(_QWORD *)(v11 + 248);
    v17 = *(_DWORD *)(v16 + 8);
    if (v17)
    {
      if ((~a2 & 0x6000) != 0
        || (*(_DWORD *)(v16 + 8) & 0x6000) != 0x4000
        || (icu::DateTimePatternGenerator::adjustFieldTypes(v11, (const icu::UnicodeString *)&v45, v30, a3 | 1, a5, (uint64_t)&v31), icu::UnicodeString::operator=((icu::UnicodeString *)&v45, (icu::UnicodeString *)&v31), icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v31), v16 = *(_QWORD *)(v11 + 248), v17 = *(_DWORD *)(v16 + 8) & 0xFFFFBFFF, (*(_DWORD *)(v16 + 8) = v17) != 0))
      {
        v19 = (UChar **)icu::DateTimePatternGenerator::getBestRaw(v11, *(_QWORD *)(v11 + 240), v17, v16, a4, &v30);
        if (*a4 >= 1)
          goto LABEL_5;
        icu::UnicodeString::operator=(&v40, v19);
        icu::DateTimePatternGenerator::adjustFieldTypes(v11, (const icu::UnicodeString *)&v40, v30, a3, a5, (uint64_t)&v31);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v40, (icu::UnicodeString *)&v31);
        icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v31);
        v21 = v17 & ~*(_DWORD *)(*(_QWORD *)(v11 + 248) + 8);
        if (v21)
        {
          v22 = -1;
          do
          {
            ++v22;
            v23 = v21 > 1;
            v21 >>= 1;
          }
          while (v23);
          if (v22 >= 0xF)
            v22 = 15;
        }
        else
        {
          v22 = 0;
        }
        v24 = v22;
        v25 = v11 + ((unint64_t)v22 << 6);
        if (*(__int16 *)(v25 + 272) < 0)
          v26 = *(_DWORD *)(v25 + 276);
        else
          v26 = *(unsigned __int16 *)(v25 + 272) >> 5;
        if (v26)
        {
          v36 = 0u;
          v27 = (const icu::UnicodeString *)(v25 + 264);
          v39 = 0;
          v38 = 0u;
          v37 = 0u;
          v35 = off_1E2256B38;
          LOWORD(v36) = 2;
          icu::DateTimePatternGenerator::getAppendName(v11, v24, (uint64_t)&v35);
          v34[0] = (icu::UnicodeString *)&v45;
          v34[1] = (icu::UnicodeString *)&v40;
          v34[2] = (icu::UnicodeString *)&v35;
          v32 = off_1E2256B38;
          v33 = 2;
          icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v31, v27, 2, 3, 0, (UErrorCode *)a4);
          icu::SimpleFormatter::formatAndReplace((icu::SimpleFormatter *)&v31, v34, 3u, &v45, 0, 0, (UErrorCode *)a4);
          icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v31);
          icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v35);
        }
      }
    }
LABEL_22:
    icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v45);
    goto LABEL_23;
  }
LABEL_5:
  *(_QWORD *)a6 = off_1E2256B38;
  v14 = 2;
  *((_WORD *)a6 + 4) = 2;
LABEL_23:
  icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v40);
  return icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v45);
}

void *icu::DateTimePatternGenerator::getDateTimeFormat(uint64_t a1, unsigned int a2, int *a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  int *v6;
  unsigned int v7;
  int v8;
  int v9;
  void *v10;

  v3 = atomic_load((unsigned __int8 *)&qword_1EE009968);
  if ((v3 & 1) == 0)
  {
    v5 = a1;
    v6 = a3;
    v7 = a2;
    v8 = __cxa_guard_acquire(&qword_1EE009968);
    a2 = v7;
    a3 = v6;
    v9 = v8;
    a1 = v5;
    if (v9)
    {
      v10 = &unk_18BE35972;
      icu::UnicodeString::UnicodeString(&unk_1EE009928, 1, &v10);
      __cxa_atexit((void (*)(void *))icu::UnicodeString::~UnicodeString, &unk_1EE009928, &dword_18BBAA000);
      __cxa_guard_release(&qword_1EE009968);
      a2 = v7;
      a1 = v5;
      a3 = v6;
    }
  }
  if (*a3 <= 0)
  {
    if (a2 < 4)
      return (void *)(a1 + ((unint64_t)a2 << 6) + 4360);
    *a3 = 1;
  }
  return &unk_1EE009928;
}

void *icu::DateTimePatternGenerator::replaceFieldTypes@<X0>(icu::DateTimePatternGenerator *this@<X0>, const icu::UnicodeString *a2@<X1>, const icu::UnicodeString *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  return icu::DateTimePatternGenerator::replaceFieldTypes(this, a2, a3, 0, (int *)a4, a5);
}

void *icu::DateTimePatternGenerator::replaceFieldTypes@<X0>(void *result@<X0>, const icu::UnicodeString *a2@<X1>, const icu::UnicodeString *a3@<X2>, int a4@<W3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  int v8;
  uint64_t v11;
  _DWORD *v12;
  uint64_t (**v13)();
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*a5 >= 1)
    goto LABEL_4;
  v7 = (uint64_t)result;
  v8 = *((_DWORD *)result + 1198);
  if (v8 >= 1)
  {
    *a5 = v8;
LABEL_4:
    *(_QWORD *)a6 = off_1E2256B38;
    *(_WORD *)(a6 + 8) = 2;
    return result;
  }
  v12 = (_DWORD *)*((_QWORD *)result + 29);
  v11 = *((_QWORD *)result + 30);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = &off_1E225E718;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0;
  sub_18BCD8B70(v11, a3, v12, (uint64_t)&v13);
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  return icu::DateTimePatternGenerator::adjustFieldTypes(v7, a2, 0, 0, a4, a6);
}

uint64_t icu::DateTimePatternGenerator::setDecimal(UChar **this, UChar **a2)
{
  icu::UnicodeString *v2;

  v2 = (icu::UnicodeString *)(this + 577);
  icu::UnicodeString::operator=(this + 577, a2);
  return icu::UnicodeString::getTerminatedBuffer(v2);
}

uint64_t icu::DateTimePatternGenerator::getDecimal(icu::DateTimePatternGenerator *this)
{
  return (uint64_t)this + 4616;
}

uint64_t icu::DateTimePatternGenerator::setDateTimeFormat(icu::DateTimePatternGenerator *this, UChar **a2)
{
  unsigned int v4;
  uint64_t result;
  int v6;

  v4 = 0;
  v6 = 0;
  do
    result = icu::DateTimePatternGenerator::setDateTimeFormat((uint64_t)this, v4++, a2, &v6);
  while (v4 != 4);
  return result;
}

uint64_t icu::DateTimePatternGenerator::setDateTimeFormat(uint64_t result, unsigned int a2, UChar **a3, int *a4)
{
  UChar **v4;

  if (*a4 <= 0)
  {
    if (a2 < 4)
    {
      v4 = (UChar **)(result + ((unint64_t)a2 << 6) + 4360);
      icu::UnicodeString::operator=(v4, a3);
      return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v4);
    }
    else
    {
      *a4 = 1;
    }
  }
  return result;
}

void *icu::DateTimePatternGenerator::getDateTimeFormat(icu::DateTimePatternGenerator *this)
{
  int v2;

  v2 = 0;
  return icu::DateTimePatternGenerator::getDateTimeFormat((uint64_t)this, 2u, &v2);
}

uint64_t sub_18BCDBA60(uint64_t a1, uint64_t a2)
{
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t result;

  v3 = 0;
  if ((*(_WORD *)(a2 + 8) & 1) != 0)
    v4 = 2;
  else
    v4 = *(_WORD *)(a2 + 8) & 0x1F;
  *(_WORD *)(a2 + 8) = v4;
  v5 = a1 + 112;
  do
    result = sub_18BCDC370(v5, v3++, a2);
  while (v3 != 16);
  return result;
}

uint64_t sub_18BCDBAC0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  unsigned int v3;
  unsigned int v4;
  int v7;
  unsigned __int16 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int32_t v14;
  int32_t v15;
  int v16;
  uint64_t v17;

  v3 = *(unsigned __int16 *)(a2 + 8);
  if ((v3 & 0x8000u) == 0)
    v4 = v3 >> 5;
  else
    v4 = *(_DWORD *)(a2 + 12);
  if (!v4)
    return 0;
  v7 = -71;
  if ((v3 & 2) != 0)
    v8 = (unsigned __int16 *)(a2 + 10);
  else
    v8 = *(unsigned __int16 **)(a2 + 24);
  v9 = *v8;
  if ((v9 - 65) >= 0x1A)
  {
    if ((v9 - 97) > 0x19)
      return 0;
  }
  else
  {
    v7 = -65;
  }
  v10 = *(_QWORD *)(a1 + 8 * (v7 + v9) + 8);
  if (!v10)
    return 0;
  while (1)
  {
    v11 = *(unsigned __int16 *)(a2 + 8);
    v12 = *(unsigned __int16 *)(v10 + 16);
    if ((v12 & 1) == 0)
      break;
    if ((v11 & 1) != 0)
      goto LABEL_27;
LABEL_25:
    v10 = *(_QWORD *)(v10 + 152);
    if (!v10)
      return 0;
  }
  v13 = (__int16)v11;
  v14 = v11 >> 5;
  if (v13 >= 0)
    v15 = v14;
  else
    v15 = *(_DWORD *)(a2 + 12);
  if ((v12 & 0x8000u) == 0)
    v16 = v12 >> 5;
  else
    v16 = *(_DWORD *)(v10 + 20);
  if ((v12 & 2) != 0)
    v17 = v10 + 18;
  else
    v17 = *(_QWORD *)(v10 + 32);
  if (icu::UnicodeString::doCompare(a2, 0, v15, v17, v16 & (v16 >> 31), v16 & ~(v16 >> 31)))goto LABEL_25;
LABEL_27:
  *a3 = *(_BYTE *)(v10 + 144);
  return v10 + 80;
}

uint64_t sub_18BCDBBD4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v13;
  uint64_t v14;

  if (a3)
    *a3 = 0;
  v3 = 0;
  while (1)
  {
    v4 = (char *)a2 + v3;
    if (*((_BYTE *)a2 + v3 + 120))
      break;
    if (++v3 == 16)
      return 0;
  }
  v5 = -71;
  v6 = v4[104];
  v7 = (unsigned __int16)v4[104];
  if ((v6 - 65) >= 0x1A)
  {
    if ((unsigned __int16)(v7 - 97) > 0x19u)
      return 0;
  }
  else
  {
    v5 = -65;
  }
  v8 = *(_QWORD *)(a1 + 8 * (v5 + v7) + 8);
  if (!v8)
    return 0;
  while (1)
  {
    v9 = *(_QWORD **)(v8 + 72);
    if (a3)
      break;
    if (v9[13] == a2[13] && v9[14] == a2[14])
    {
      v14 = v9[15];
      v13 = v9[16];
      if (v14 == a2[15] && v13 == a2[16])
        return v8 + 80;
    }
LABEL_32:
    v8 = *(_QWORD *)(v8 + 152);
    if (!v8)
      return 0;
  }
  if (v9[9] != a2[9] || v9[10] != a2[10])
    goto LABEL_32;
  if (v9[11] != a2[11] || v9[12] != a2[12])
    goto LABEL_32;
  if (*(_BYTE *)(v8 + 144))
    *a3 = v9;
  return v8 + 80;
}

UChar **sub_18BCDBCBC(UChar **result, unint64_t a2, uint64_t a3, UChar **a4, char a5, int *a6)
{
  unsigned int v7;
  unsigned int v8;
  UChar **v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  UChar **v21;
  uint64_t v22;
  UChar **v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t (*v30)(UChar **);
  UChar **v31;
  int v32;
  UChar **v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v7 = *(unsigned __int16 *)(a2 + 8);
  if ((v7 & 0x8000u) == 0)
    v8 = v7 >> 5;
  else
    v8 = *(_DWORD *)(a2 + 12);
  if (!v8)
    goto LABEL_23;
  v13 = result;
  if ((v7 & 2) != 0)
    v14 = (unsigned __int16 *)(a2 + 10);
  else
    v14 = *(unsigned __int16 **)(a2 + 24);
  v15 = *v14;
  *a6 = 0;
  if ((v15 - 65) < 0x1A)
  {
    v16 = -65;
    goto LABEL_12;
  }
  if ((v15 - 97) >= 0x1A)
  {
LABEL_23:
    v32 = 65567;
    goto LABEL_24;
  }
  v16 = -71;
LABEL_12:
  v17 = (uint64_t *)&result[(v16 + v15)];
  v18 = v17[1];
  if (v18)
  {
    result = (UChar **)sub_18BCDCE8C((uint64_t)result, a2, a3, v17[1]);
    if (result)
    {
      if (*((_BYTE *)v13 + 424))
      {
        v21 = result;
        result = (UChar **)icu::UnicodeString::operator=(result + 10, a4);
        *((_BYTE *)v21 + 144) = a5;
      }
      return result;
    }
    do
    {
      v22 = v18;
      v18 = *(_QWORD *)(v18 + 152);
    }
    while (v18);
    result = (UChar **)icu::UMemory::operator new(v20, (icu::UMemory *)0xA0, v19);
    if (result)
    {
      v23 = result;
      *result = (UChar *)off_1E225E738;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), (UChar **)a2);
      v23[9] = 0;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v23 + 10), a4);
      v23[19] = 0;
      v25 = (uint64_t *)*a6;
      if ((int)v25 > 0)
        goto LABEL_22;
      v26 = icu::UMemory::operator new(v25, (icu::UMemory *)0x90, v24);
      if (v26)
      {
        *v26 = (uint64_t)&off_1E225E718;
        *(_OWORD *)(v26 + 9) = 0u;
        *(_OWORD *)(v26 + 11) = 0u;
        *(_OWORD *)(v26 + 13) = 0u;
        *(_OWORD *)(v26 + 15) = 0u;
        v27 = *(_OWORD *)(a3 + 8);
        v28 = *(_OWORD *)(a3 + 24);
        v29 = *(_OWORD *)(a3 + 40);
        *(_OWORD *)(v26 + 7) = *(_OWORD *)(a3 + 56);
        *(_OWORD *)(v26 + 5) = v29;
        *(_OWORD *)(v26 + 3) = v28;
        *(_OWORD *)(v26 + 1) = v27;
        *(_OWORD *)(v26 + 9) = *(_OWORD *)(a3 + 72);
        *(_OWORD *)(v26 + 11) = *(_OWORD *)(a3 + 88);
        *(_OWORD *)(v26 + 13) = *(_OWORD *)(a3 + 104);
        *(_OWORD *)(v26 + 15) = *(_OWORD *)(a3 + 120);
        *((_BYTE *)v26 + 136) = *(_BYTE *)(a3 + 136);
      }
      sub_18BBB709C((uint64_t)(v23 + 9), (uint64_t)v26, a6);
      if (*a6 > 0)
      {
LABEL_22:
        v30 = (uint64_t (*)(UChar **))*((_QWORD *)*v23 + 1);
        v31 = v23;
        return (UChar **)v30(v31);
      }
      *((_BYTE *)v23 + 144) = a5;
      result = *(UChar ***)(v22 + 152);
      if (result)
        result = (UChar **)(*((uint64_t (**)(UChar **))*result + 1))(result);
      *(_QWORD *)(v22 + 152) = v23;
      return result;
    }
    goto LABEL_33;
  }
  result = (UChar **)icu::UMemory::operator new(v17, (icu::UMemory *)0xA0, a2);
  if (!result)
  {
LABEL_33:
    if (*a6 > 0)
      return result;
    v32 = 7;
LABEL_24:
    *a6 = v32;
    return result;
  }
  v33 = result;
  *result = (UChar *)off_1E225E738;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(result + 1), (UChar **)a2);
  v33[9] = 0;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v33 + 10), a4);
  v33[19] = 0;
  v35 = (uint64_t *)*a6;
  if ((int)v35 > 0)
    goto LABEL_31;
  v36 = icu::UMemory::operator new(v35, (icu::UMemory *)0x90, v34);
  if (v36)
  {
    *v36 = (uint64_t)&off_1E225E718;
    *(_OWORD *)(v36 + 9) = 0u;
    *(_OWORD *)(v36 + 11) = 0u;
    *(_OWORD *)(v36 + 13) = 0u;
    *(_OWORD *)(v36 + 15) = 0u;
    v37 = *(_OWORD *)(a3 + 8);
    v38 = *(_OWORD *)(a3 + 24);
    v39 = *(_OWORD *)(a3 + 40);
    *(_OWORD *)(v36 + 7) = *(_OWORD *)(a3 + 56);
    *(_OWORD *)(v36 + 5) = v39;
    *(_OWORD *)(v36 + 3) = v38;
    *(_OWORD *)(v36 + 1) = v37;
    *(_OWORD *)(v36 + 9) = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(v36 + 11) = *(_OWORD *)(a3 + 88);
    *(_OWORD *)(v36 + 13) = *(_OWORD *)(a3 + 104);
    *(_OWORD *)(v36 + 15) = *(_OWORD *)(a3 + 120);
    *((_BYTE *)v36 + 136) = *(_BYTE *)(a3 + 136);
  }
  result = (UChar **)sub_18BBB709C((uint64_t)(v33 + 9), (uint64_t)v36, a6);
  if (*a6 > 0)
  {
LABEL_31:
    v30 = (uint64_t (*)(UChar **))*((_QWORD *)*v33 + 1);
    v31 = v33;
    return (UChar **)v30(v31);
  }
  *((_BYTE *)v33 + 144) = a5;
  if (v15 < 0x61)
    v13[v15 - 64] = (UChar *)v33;
  else
    v13[(v15 - 71) + 1] = (UChar *)v33;
  return result;
}

uint64_t icu::DateTimePatternGenerator::getAppendFormatNumber(icu::DateTimePatternGenerator *this, const char *__s2)
{
  uint64_t i;

  for (i = 0; i != 16; ++i)
  {
    if (!strcmp(off_1E225E568[i], __s2))
      break;
  }
  return i;
}

uint64_t icu::DateTimePatternGenerator::getFieldAndWidthIndices(uint64_t a1, const char *a2, _DWORD *a3)
{
  char *v4;
  const char *v5;
  unint64_t v6;
  uint64_t i;
  char __dst[25];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  strncpy(__dst, a2, 0x18uLL);
  __dst[24] = 0;
  *a3 = 0;
  v4 = strchr(__dst, 45);
  if (v4)
  {
    v5 = v4;
    v6 = 2;
    while (strcmp(*((const char **)&off_1E225E5E8 + v6), v5))
    {
      if (v6-- <= 1)
        goto LABEL_7;
    }
    *a3 = v6;
LABEL_7:
    *v5 = 0;
  }
  for (i = 0; i != 16; ++i)
  {
    if (!strcmp(off_1E225E600[i], __dst))
      break;
  }
  return i;
}

uint64_t sub_18BCDC128(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = 0;
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(a1 + 8);
    if (v4 <= 51)
    {
      v5 = v4;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = v5 + 1;
      while (1)
      {
        if (v6)
        {
          if (*(_QWORD *)(v6 + 152))
            return 1;
        }
        else if (*(_QWORD *)(v3 + 8 * v7))
        {
          return 1;
        }
        v6 = 0;
        if ((_DWORD)v7++ == 52)
          return 0;
      }
    }
  }
  return result;
}

uint64_t sub_18BCDC18C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 52)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
LABEL_15:
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD *)(v2 + 72);
      v7 = *(_OWORD *)(v6 + 8);
      v8 = *(_OWORD *)(v6 + 24);
      v9 = *(_OWORD *)(v6 + 56);
      *(_OWORD *)(v5 + 48) = *(_OWORD *)(v6 + 40);
      *(_OWORD *)(v5 + 64) = v9;
      *(_OWORD *)(v5 + 16) = v7;
      *(_OWORD *)(v5 + 32) = v8;
      *(_OWORD *)(v5 + 80) = *(_OWORD *)(v6 + 72);
      *(_OWORD *)(v5 + 96) = *(_OWORD *)(v6 + 88);
      *(_OWORD *)(v5 + 112) = *(_OWORD *)(v6 + 104);
      *(_OWORD *)(v5 + 128) = *(_OWORD *)(v6 + 120);
      *(_BYTE *)(v5 + 144) = *(_BYTE *)(v6 + 136);
      return *(_QWORD *)(a1 + 24);
    }
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = v2;
    do
    {
      if (v3)
      {
        v2 = *(_QWORD *)(v3 + 152);
        if (v2)
          goto LABEL_14;
        *(_DWORD *)(a1 + 8) = ++v1;
        *(_QWORD *)(a1 + 16) = 0;
      }
      else
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v1 + 8))
        {
          v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v1 + 8);
LABEL_14:
          *(_QWORD *)(a1 + 16) = v2;
          goto LABEL_15;
        }
        *(_DWORD *)(a1 + 8) = ++v1;
      }
      v3 = 0;
    }
    while (v1 < 52);
    if (v2)
      goto LABEL_15;
  }
  v4 = *(_OWORD **)(a1 + 24);
  v4[7] = 0u;
  v4[8] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[1] = 0u;
  v4[2] = 0u;
  return *(_QWORD *)(a1 + 24);
}

BOOL sub_18BCDC264(_QWORD *a1, _QWORD *a2)
{
  if (!a2)
    return 0;
  if (a1[10] != a2[10] || a1[11] != a2[11])
    return 0;
  return a1[12] == a2[12] && a1[13] == a2[13];
}

uint64_t sub_18BCDC29C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v5 = 0;
  result = 0;
  v7 = 0;
  v8 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = a1 + 16;
  v10 = a2 + 16;
  do
  {
    v11 = 1 << v5;
    if (((1 << v5) & a3) == 0)
    {
      if (!*(_DWORD *)(v10 + 4 * v5))
        goto LABEL_12;
LABEL_11:
      result = (result + 0x10000);
      v8 |= v11;
      *(_DWORD *)(a4 + 12) = v8;
      goto LABEL_12;
    }
    v12 = *(_DWORD *)(v9 + 4 * v5);
    v13 = *(_DWORD *)(v10 + 4 * v5);
    if (v12 == v13)
      goto LABEL_12;
    if (!v12)
      goto LABEL_11;
    if (v13)
    {
      if (v12 - v13 >= 0)
        v14 = v12 - v13;
      else
        v14 = v13 - v12;
      result = (v14 + result);
    }
    else
    {
      result = (result + 4096);
      v7 |= v11;
      *(_DWORD *)(a4 + 8) = v7;
    }
LABEL_12:
    ++v5;
  }
  while (v5 != 16);
  return result;
}

_QWORD *sub_18BCDC32C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E225E6F8;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_18BCDC370(uint64_t a1, int a2, uint64_t a3)
{
  char *v4;
  int v5;
  __int16 v6;
  __int16 v8;

  v4 = (char *)(a1 + a2);
  v5 = v4[16];
  if (v5 >= 1)
  {
    v6 = *v4;
    do
    {
      v8 = v6;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v8, 0, 1);
      --v5;
    }
    while (v5);
  }
  return a3;
}

uint64_t icu::DateTimePatternGenerator::defaultHourPeriodCharForHourCycle(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = *(unsigned __int16 *)(a1 + 4760);
  if ((a2 & 0x40000000) == 0)
  {
    if ((a2 & 0x20000000) == 0)
      return result;
LABEL_7:
    if ((_DWORD)result == 75 || (_DWORD)result == 104)
      return result;
    goto LABEL_9;
  }
  if ((_DWORD)result == 72 || (_DWORD)result == 107)
    return result;
  if ((a2 & 0x20000000) != 0)
    goto LABEL_7;
LABEL_9:
  v4 = 0;
  v5 = a1 + 4764;
  while (2)
  {
    switch(*(_DWORD *)(v5 + v4))
    {
      case 0xFFFFFFFF:
        return result;
      case 0:
      case 4:
      case 5:
        if ((a2 & 0x20000000) == 0)
          goto LABEL_18;
        result = 104;
        break;
      case 1:
      case 8:
      case 9:
        if ((a2 & 0x40000000) == 0)
          goto LABEL_18;
        result = 72;
        break;
      case 2:
      case 6:
      case 7:
        if ((a2 & 0x20000000) == 0)
          goto LABEL_18;
        result = 75;
        break;
      case 3:
        if ((a2 & 0x40000000) == 0)
          goto LABEL_18;
        result = 107;
        break;
      default:
LABEL_18:
        v4 += 4;
        if (v4 != 28)
          continue;
        break;
    }
    return result;
  }
}

uint64_t icu::DateTimePatternGenerator::getTopBitNumber(icu::DateTimePatternGenerator *this, int a2)
{
  unsigned int v2;
  BOOL v3;

  if (!a2)
    return 0;
  v2 = -1;
  do
  {
    ++v2;
    v3 = a2 > 1;
    a2 >>= 1;
  }
  while (v3);
  if (v2 >= 0xF)
    return 15;
  else
    return v2;
}

uint64_t icu::DateTimePatternGenerator::setAvailableFormat(icu::DateTimePatternGenerator *this, UChar **a2, UErrorCode *a3)
{
  uint64_t *v5;
  uint64_t v6;
  icu::UnicodeString *v7;
  uint64_t v8;

  v5 = (uint64_t *)*((_QWORD *)this + 586);
  v6 = *v5;
  v7 = (icu::UnicodeString *)icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)a2);
  v8 = (uint64_t)v7;
  if (v7)
    icu::UnicodeString::UnicodeString(v7, a2);
  return uhash_puti(v6, v8, 1u, (int *)a3);
}

BOOL icu::DateTimePatternGenerator::isAvailableFormatSet(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2)
{
  return uhash_geti(**((_QWORD **)this + 586), (uint64_t)a2) == 1;
}

uint64_t icu::DateTimePatternGenerator::getSkeletons(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;

  if (*(int *)a2 > 0)
    return 0;
  v5 = (uint64_t *)*((unsigned int *)this + 1198);
  if ((int)v5 >= 1)
  {
    result = 0;
LABEL_5:
    *a2 = (int)v5;
    return result;
  }
  v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      result = 0;
      LODWORD(v5) = 7;
      goto LABEL_5;
    }
    return 0;
  }
  result = sub_18BCDD35C((uint64_t)v6, *((_QWORD *)this + 32), 1, a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t icu::DateTimePatternGenerator::getPatternForSkeleton(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2)
{
  unsigned int v4;
  int v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t i;
  int v9;
  unsigned int v10;
  void *v11;
  _BOOL4 v12;
  void *v13;
  __int16 v14;
  _BYTE v16[8];
  unsigned __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned __int16 *)a2 + 4);
  if (*((__int16 *)a2 + 4) < 0)
  {
    if (!*((_DWORD *)a2 + 3))
      return (uint64_t)this + 4696;
  }
  else if (v4 <= 0x1F)
  {
    return (uint64_t)this + 4696;
  }
  v5 = -71;
  if ((v4 & 2) != 0)
    v6 = (unsigned __int16 *)((char *)a2 + 10);
  else
    v6 = (unsigned __int16 *)*((_QWORD *)a2 + 3);
  v7 = *v6;
  if ((v7 - 65) >= 0x1A)
  {
    if ((v7 - 97) > 0x19)
      return (uint64_t)this + 4696;
  }
  else
  {
    v5 = -65;
  }
  for (i = *(_QWORD *)(*((_QWORD *)this + 32) + 8 * (v5 + v7) + 8); i; i = *(_QWORD *)(i + 152))
  {
    sub_18BCD8E7C(*(_QWORD *)(i + 72), (uint64_t)v16);
    if ((v17 & 1) != 0)
    {
      v14 = *((_WORD *)a2 + 4);
      icu::UnicodeString::~UnicodeString((void *)v17, (icu::UnicodeString *)v16);
      if ((v14 & 1) != 0)
        return i + 80;
    }
    else
    {
      if ((v17 & 0x8000u) == 0)
        v9 = v17 >> 5;
      else
        v9 = v18;
      v10 = *((unsigned __int16 *)a2 + 4);
      if ((v10 & 0x8000u) == 0)
        v11 = (void *)(v10 >> 5);
      else
        v11 = (void *)*((unsigned int *)a2 + 3);
      if ((v10 & 1) != 0 || v9 != (_DWORD)v11)
      {
        icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v16);
      }
      else
      {
        v12 = icu::UnicodeString::doEquals((icu::UnicodeString *)v16, a2, v9);
        icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v16);
        if (v12)
          return i + 80;
      }
    }
  }
  return (uint64_t)this + 4696;
}

uint64_t icu::DateTimePatternGenerator::getBaseSkeletons(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  uint64_t result;
  uint64_t *v5;
  uint64_t *v6;

  if (*(int *)a2 > 0)
    return 0;
  v5 = (uint64_t *)*((unsigned int *)this + 1198);
  if ((int)v5 >= 1)
  {
    result = 0;
LABEL_5:
    *a2 = (int)v5;
    return result;
  }
  v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 <= 0)
    {
      result = 0;
      LODWORD(v5) = 7;
      goto LABEL_5;
    }
    return 0;
  }
  result = sub_18BCDD35C((uint64_t)v6, *((_QWORD *)this + 32), 0, a2);
  if (*(int *)a2 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    return 0;
  }
  return result;
}

uint64_t *icu::DateTimePatternGenerator::getRedundants(icu::DateTimePatternGenerator *this, UErrorCode *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  void *v30;
  int v31;
  unsigned int v32;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _BYTE v37[64];
  _OWORD v38[4];
  _QWORD v39[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 > 0)
    return 0;
  v5 = (uint64_t *)*((unsigned int *)this + 1198);
  if ((int)v5 >= 1)
  {
    v2 = 0;
    goto LABEL_5;
  }
  v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, (unint64_t)a2);
  if (!v6)
  {
    if (*(int *)a2 > 0)
      return 0;
    v2 = 0;
    LODWORD(v5) = 7;
LABEL_5:
    *a2 = (int)v5;
    return v2;
  }
  v7 = v6;
  v8 = icu::StringEnumeration::StringEnumeration((uint64_t)v6);
  *(_QWORD *)v8 = &off_1E225E7C0;
  *(_DWORD *)(v8 + 116) = 0;
  *(_QWORD *)(v8 + 120) = 0;
  if (*(int *)a2 > 0)
  {
    v2 = 0;
    v9 = v7;
    goto LABEL_40;
  }
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  sub_18BCDD204((uint64_t)&v34, (int *)a2);
  if (*(int *)a2 > 0)
  {
LABEL_12:
    v2 = 0;
    goto LABEL_13;
  }
  v36 = *((_QWORD *)this + 32);
  if (!sub_18BCDC128((uint64_t)&v34))
  {
LABEL_36:
    v9 = 0;
    v2 = v7;
    goto LABEL_37;
  }
  while (1)
  {
    v48 = 0;
    v10 = sub_18BCDC18C((uint64_t)&v34);
    v11 = *(_OWORD *)(v10 + 32);
    v40 = *(_OWORD *)(v10 + 16);
    v41 = v11;
    v12 = *(_OWORD *)(v10 + 64);
    v42 = *(_OWORD *)(v10 + 48);
    v43 = v12;
    v13 = *(_OWORD *)(v10 + 96);
    v44 = *(_OWORD *)(v10 + 80);
    v45 = v13;
    v14 = *(_OWORD *)(v10 + 128);
    v46 = *(_OWORD *)(v10 + 112);
    v39[0] = &off_1E225E6B0;
    v39[1] = &off_1E225E718;
    v47 = v14;
    v15 = *(_BYTE *)(v10 + 144);
    LOBYTE(v48) = v15;
    v16 = sub_18BCDBBD4(*((_QWORD *)this + 32), *(_QWORD **)(v35 + 72), 0);
    if (!icu::DateTimePatternGenerator::isCanonicalItem((icu::DateTimePatternGenerator *)v16, (const icu::UnicodeString *)v16))break;
LABEL_35:
    if (!sub_18BCDC128((uint64_t)&v34))
      goto LABEL_36;
  }
  v18 = *((_QWORD *)this + 585);
  if (v18)
  {
    v19 = *(_OWORD *)(v10 + 16);
    v20 = *(_OWORD *)(v10 + 32);
    v21 = *(_OWORD *)(v10 + 64);
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v18 + 64) = v21;
    *(_OWORD *)(v18 + 16) = v19;
    *(_OWORD *)(v18 + 32) = v20;
    v22 = v45;
    *(_OWORD *)(v18 + 80) = v44;
    *(_OWORD *)(v18 + 96) = v22;
    v23 = v47;
    *(_OWORD *)(v18 + 112) = v46;
    *(_OWORD *)(v18 + 128) = v23;
    *(_BYTE *)(v18 + 144) = v15;
    goto LABEL_20;
  }
  v24 = icu::UMemory::operator new(0, (icu::UMemory *)0x98, v17);
  if (v24)
  {
    *v24 = (uint64_t)&off_1E225E6B0;
    v24[1] = (uint64_t)&off_1E225E718;
    v25 = v41;
    *((_OWORD *)v24 + 1) = v40;
    *((_OWORD *)v24 + 2) = v25;
    v26 = v43;
    *((_OWORD *)v24 + 3) = v42;
    *((_OWORD *)v24 + 4) = v26;
    v27 = v45;
    *((_OWORD *)v24 + 5) = v44;
    *((_OWORD *)v24 + 6) = v27;
    v28 = v47;
    *((_OWORD *)v24 + 7) = v46;
    *((_OWORD *)v24 + 8) = v28;
    *((_BYTE *)v24 + 144) = v15;
    *((_QWORD *)this + 585) = v24;
LABEL_20:
    memset(v38, 0, sizeof(v38));
    sub_18BCDCBF4((uint64_t)v39, (icu::UnicodeString *)v37);
    icu::DateTimePatternGenerator::getBestPattern(this, (uint64_t)v37, 0, (int *)a2, (icu::UnicodeString *)v38);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v37);
    v30 = (void *)*(unsigned int *)a2;
    if ((int)v30 > 0)
      goto LABEL_42;
    if ((BYTE8(v38[0]) & 1) != 0)
    {
      v30 = (void *)*(unsigned __int16 *)(v16 + 8);
      if ((v30 & 1) == 0)
      {
LABEL_34:
        icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v38);
        goto LABEL_35;
      }
    }
    else
    {
      if ((SWORD4(v38[0]) & 0x8000u) == 0)
        v31 = WORD4(v38[0]) >> 5;
      else
        v31 = HIDWORD(v38[0]);
      v32 = *(unsigned __int16 *)(v16 + 8);
      if ((v32 & 0x8000u) == 0)
        v30 = (void *)(v32 >> 5);
      else
        v30 = (void *)*(unsigned int *)(v16 + 12);
      if ((v32 & 1) != 0
        || v31 != (_DWORD)v30
        || !icu::UnicodeString::doEquals((icu::UnicodeString *)v38, (const icu::UnicodeString *)v16, v31))
      {
        goto LABEL_34;
      }
    }
    sub_18BCDCCAC(v7, (UChar **)v16, a2);
    v30 = (void *)*(unsigned int *)a2;
    if ((int)v30 >= 1)
    {
LABEL_42:
      icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v38);
      goto LABEL_12;
    }
    goto LABEL_34;
  }
  v2 = 0;
  *((_QWORD *)this + 585) = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
LABEL_13:
  v9 = v7;
LABEL_37:
  *(_QWORD *)&v34 = &off_1E225E6F8;
  if (*((_QWORD *)&v35 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 8))(*((_QWORD *)&v35 + 1));
  if (v9)
LABEL_40:
    (*(void (**)(uint64_t *))(*v9 + 8))(v9);
  return v2;
}

BOOL icu::DateTimePatternGenerator::isCanonicalItem(icu::DateTimePatternGenerator *this, const icu::UnicodeString *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned __int16 *v4;
  int v5;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v2 = *((unsigned __int16 *)a2 + 4);
  if ((v2 & 0x8000u) == 0)
    v3 = v2 >> 5;
  else
    v3 = *((_DWORD *)a2 + 3);
  if (v3 != 1)
    return 0;
  if ((v2 & 2) != 0)
    v4 = (unsigned __int16 *)((char *)a2 + 10);
  else
    v4 = (unsigned __int16 *)*((_QWORD *)a2 + 3);
  v5 = *v4;
  if (v5 == 71)
    return 1;
  v7 = 0;
  do
  {
    v8 = v7;
    if (v7 == 15)
      break;
    v9 = (unsigned __int16)aGyqmwwedfdahms[++v7];
  }
  while (v5 != v9);
  return v8 < 0xF;
}

void *sub_18BCDCBF4@<X0>(uint64_t a1@<X0>, icu::UnicodeString *a2@<X8>)
{
  int v3;
  uint64_t v4;
  void *v5;
  UChar *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v3 = 0;
  v12 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v7 = (UChar *)off_1E2256B38;
  LOWORD(v8) = 2;
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v4 = a1 + 80;
  do
    sub_18BCDC370(v4, v3++, (uint64_t)&v7);
  while (v3 != 16);
  icu::UnicodeString::UnicodeString(a2, &v7);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v7);
}

uint64_t *sub_18BCDCCAC(uint64_t *result, UChar **a2, UErrorCode *a3)
{
  uint64_t *v5;
  icu::UVector **v6;
  uint64_t *v7;
  icu::UVector *v8;
  uint64_t v9;

  if (*(int *)a3 <= 0)
  {
    v6 = (icu::UVector **)(result + 15);
    v5 = (uint64_t *)result[15];
    if (v5)
      goto LABEL_4;
    v8 = (icu::UVector *)icu::UMemory::operator new(0, (icu::UMemory *)0x28, (unint64_t)a2);
    v9 = (uint64_t)v8;
    if (v8)
      icu::UVector::UVector(v8, a3);
    result = (uint64_t *)sub_18BBB709C((uint64_t)v6, v9, (int *)a3);
    v5 = (uint64_t *)*(unsigned int *)a3;
    if ((int)v5 <= 0)
    {
LABEL_4:
      result = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)a2);
      if (result)
      {
        v7 = result;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)result, a2);
        if (*(int *)a3 > 0)
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v7 + 8))(v7);
        result = (uint64_t *)icu::UVector::addElement(*v6, v7, a3);
        if (*(int *)a3 >= 1)
        {
          if (*v6)
            (*(void (**)(icu::UVector *))(*(_QWORD *)*v6 + 8))(*v6);
          *v6 = 0;
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v7 + 8))(v7);
        }
      }
      else if (*(int *)a3 <= 0)
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return result;
}

icu::DateTimePatternGenerator *icu::DateTimePatternGenerator::clone@<X0>(icu::DateTimePatternGenerator *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::DateTimePatternGenerator *result;

  result = (icu::DateTimePatternGenerator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x12C0, a2);
  if (result)
    return (icu::DateTimePatternGenerator *)icu::DateTimePatternGenerator::DateTimePatternGenerator(result, this);
  return result;
}

_QWORD *sub_18BCDCDE4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  *a1 = &off_1E225E690;
  for (i = 1; i != 53; ++i)
  {
    v3 = a1[i];
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      a1[i] = 0;
    }
  }
  return a1;
}

void sub_18BCDCE38(char *a1)
{
  uint64_t i;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E225E690;
  for (i = 8; i != 424; i += 8)
  {
    v3 = *(_QWORD *)&a1[i];
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      *(_QWORD *)&a1[i] = 0;
    }
  }
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BCDCE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int32_t v10;
  int32_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  if (a4)
  {
    v6 = a3 + 8;
    do
    {
      v7 = *(unsigned __int16 *)(a2 + 8);
      v8 = *(unsigned __int16 *)(v4 + 16);
      if ((v8 & 1) != 0)
      {
        if ((v7 & 1) != 0)
          goto LABEL_18;
      }
      else
      {
        v9 = (__int16)v7;
        v10 = v7 >> 5;
        if (v9 >= 0)
          v11 = v10;
        else
          v11 = *(_DWORD *)(a2 + 12);
        if ((v8 & 0x8000u) == 0)
          v12 = v8 >> 5;
        else
          v12 = *(_DWORD *)(v4 + 20);
        if ((v8 & 2) != 0)
          v13 = v4 + 18;
        else
          v13 = *(_QWORD *)(v4 + 32);
        if (!icu::UnicodeString::doCompare(a2, 0, v11, v13, v12 & (v12 >> 31), v12 & ~(v12 >> 31)))
        {
LABEL_18:
          v14 = 0;
          while (*(_DWORD *)(*(_QWORD *)(v4 + 72) + 8 + v14) == *(_DWORD *)(v6 + v14))
          {
            v14 += 4;
            if (v14 == 64)
              return v4;
          }
        }
      }
      v4 = *(_QWORD *)(v4 + 152);
    }
    while (v4);
  }
  return v4;
}

BOOL sub_18BCDCF60(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;

  v2 = a1[9] == a2[9] && a1[10] == a2[10];
  if (v2
    && (a1[11] == a2[11] ? (v3 = a1[12] == a2[12]) : (v3 = 0),
        v3
     && (a1[13] == a2[13] ? (v4 = a1[14] == a2[14]) : (v4 = 0),
         v4 && (a1[15] == a2[15] ? (v5 = a1[16] == a2[16]) : (v5 = 0), v5))))
  {
    return memcmp(a1 + 1, a2 + 1, 0x40uLL) == 0;
  }
  else
  {
    return 0;
  }
}

void sub_18BCDCFE4(_QWORD *a1)
{
  uint64_t (**v2)();
  uint64_t i;

  v2 = off_1E225E6D0;
  *a1 = off_1E225E6D0;
  for (i = 393; i != -7; i -= 8)
    icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)&a1[i]);
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BCDD028(uint64_t a1, uint64_t a2, signed int a3, int *a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 0x8000u) == 0)
    v5 = v4 >> 5;
  else
    v5 = *(_DWORD *)(a2 + 12);
  if ((int)v5 <= a3)
    return 3;
  v6 = 0;
  v7 = a2 + 10;
  if ((v4 & 2) == 0)
    v7 = *(_QWORD *)(a2 + 24);
  v8 = v7 + 2 * a3;
  while (v5 > a3 + (int)v6 && (*(_WORD *)(v8 + 2 * v6) & 0xFFDFu) - 65 <= 0x19)
  {
    if (v5 <= a3 + (int)v6 + 1)
      v9 = 0xFFFF;
    else
      v9 = *(unsigned __int16 *)(v8 + 2 * v6 + 2);
    if (v5 <= a3)
      v10 = 0xFFFF;
    else
      v10 = *(unsigned __int16 *)(v7 + 2 * a3);
    v11 = v6 + 1;
    if (v9 == v10)
    {
      v12 = a3 + v6++;
      if (v12 < (int)v5)
        continue;
    }
    goto LABEL_21;
  }
  v11 = 1;
LABEL_21:
  *a4 = v11;
  return 1;
}

uint64_t sub_18BCDD0F8(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;
  unsigned __int16 *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char *v13;
  uint64_t result;
  int v15;

  v2 = *(unsigned __int16 *)(a1 + 8);
  if ((*(__int16 *)(a1 + 8) & 0x80000000) == 0)
  {
    if (v2 >= 0x20)
    {
      v3 = v2 >> 5;
      goto LABEL_5;
    }
    return 0xFFFFFFFFLL;
  }
  v3 = *(_DWORD *)(a1 + 12);
  if (!v3)
    return 0xFFFFFFFFLL;
LABEL_5:
  v4 = *(unsigned __int16 **)(a1 + 24);
  if ((v2 & 2) != 0)
    v4 = (unsigned __int16 *)(a1 + 10);
  v5 = *v4;
  if (v3 > 1)
  {
    v6 = (__int16)v2;
    LODWORD(v7) = v2 >> 5;
    if (v6 >= 0)
      v7 = v7;
    else
      v7 = *(unsigned int *)(a1 + 12);
    v8 = 1;
    do
    {
      v9 = v8 >= v7 ? 0xFFFF : v4[v8];
      if (v5 != v9)
        return 0xFFFFFFFFLL;
    }
    while (v3 != ++v8);
  }
  v10 = 0;
  v11 = -1;
  v12 = 71;
  while (v12)
  {
    v13 = (char *)&aG_1[8 * (int)v10 + 8];
    result = v10;
    while (v12 != v5)
    {
      v15 = *(unsigned __int16 *)v13;
      v13 += 16;
      v12 = v15;
      result = (result + 1);
      if (!v15)
        goto LABEL_27;
    }
    v10 = (result + 1);
    if (v5 == aG_1[8 * (int)v10])
    {
      v12 = *v4;
      v11 = result;
      if (v3 >= (__int16)aG_1[8 * (int)v10 + 5])
        continue;
    }
    return result;
  }
LABEL_27:
  if (a2)
    return 0xFFFFFFFFLL;
  else
    return v11;
}

uint64_t sub_18BCDD204(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;

  *(_QWORD *)a1 = &off_1E225E6F8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v4 = (uint64_t *)*a2;
  if ((int)v4 <= 0)
  {
    v6 = icu::UMemory::operator new(v4, (icu::UMemory *)0x98, (unint64_t)a2);
    if (v6)
    {
      *v6 = (uint64_t)&off_1E225E6B0;
      v6[1] = (uint64_t)&off_1E225E718;
      *((_OWORD *)v6 + 5) = 0u;
      *((_OWORD *)v6 + 6) = 0u;
      *((_OWORD *)v6 + 7) = 0u;
      *((_OWORD *)v6 + 8) = 0u;
      *((_BYTE *)v6 + 144) = 0;
    }
    sub_18BBB709C(v3, (uint64_t)v6, a2);
  }
  return a1;
}

void sub_18BCDD29C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E225E6F8;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UMemory::operator delete(a1);
}

_QWORD *sub_18BCDD2E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E225E738;
  v2 = a1[19];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 10));
  v3 = a1[9];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

void sub_18BCDD348(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_18BCDD2E0(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BCDD35C(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v8;
  icu::UVector **v9;
  unint64_t v10;
  icu::UVector *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  UChar **v18;
  void *v19;
  unint64_t v20;
  icu::UnicodeString *v21;
  _BYTE v22[64];
  UChar *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = icu::StringEnumeration::StringEnumeration(a1);
  *(_QWORD *)v8 = &off_1E225E758;
  *(_QWORD *)(v8 + 120) = 0;
  v9 = (icu::UVector **)(v8 + 120);
  v24 = 0u;
  v27 = 0;
  v26 = 0u;
  v25 = 0u;
  v23 = (UChar *)off_1E2256B38;
  LOWORD(v24) = 2;
  *(_DWORD *)(v8 + 116) = 0;
  v11 = (icu::UVector *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0x28, v10);
  v12 = (uint64_t)v11;
  if (v11)
    icu::UVector::UVector(v11, a4);
  v13 = (void *)sub_18BBB709C((uint64_t)v9, v12, (int *)a4);
  v14 = *(unsigned int *)a4;
  if ((int)v14 > 0)
    goto LABEL_4;
  v16 = 0;
  while (1)
  {
    v14 = a2 + 8 * v16;
    v17 = *(_QWORD *)(v14 + 8);
    if (v17)
      break;
LABEL_20:
    if (++v16 == 52)
      goto LABEL_4;
  }
  while (1)
  {
    switch(a3)
    {
      case 2:
        v18 = (UChar **)(v17 + 80);
        goto LABEL_12;
      case 1:
        sub_18BCD8E7C(*(_QWORD *)(v17 + 72), (uint64_t)v22);
        icu::UnicodeString::operator=((icu::UnicodeString *)&v23, (icu::UnicodeString *)v22);
        v13 = icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
        break;
      case 0:
        v18 = (UChar **)(v17 + 8);
LABEL_12:
        v13 = icu::UnicodeString::operator=(&v23, v18);
        break;
    }
    LODWORD(v13) = sub_18BCDD558((uint64_t)v13, (uint64_t)&v23);
    if (!(_DWORD)v13)
    {
      v21 = icu::UnicodeString::clone(&v23, v20, (uint64_t *)v14);
      v14 = *(unsigned int *)a4;
      if (!v21 && (int)v14 <= 0)
      {
        v14 = 7;
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_4;
      }
      if ((int)v14 > 0)
        goto LABEL_26;
      v13 = (void *)icu::UVector::addElement(*v9, v21, a4);
      v14 = *(unsigned int *)a4;
      if ((int)v14 >= 1)
        break;
    }
    v17 = *(_QWORD *)(v17 + 152);
    if (!v17)
      goto LABEL_20;
  }
  if (*v9)
    (*(void (**)(icu::UVector *))(*(_QWORD *)*v9 + 8))(*v9);
  *v9 = 0;
LABEL_26:
  if (v21)
    (*(void (**)(icu::UnicodeString *))(*(_QWORD *)v21 + 8))(v21);
LABEL_4:
  icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v23);
  return a1;
}

BOOL sub_18BCDD558(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned __int16 *v4;
  int v5;
  unint64_t v7;
  unint64_t v8;
  int v9;

  v2 = *(unsigned __int16 *)(a2 + 8);
  if ((v2 & 0x8000u) == 0)
    v3 = v2 >> 5;
  else
    v3 = *(_DWORD *)(a2 + 12);
  if (v3 != 1)
    return 0;
  if ((v2 & 2) != 0)
    v4 = (unsigned __int16 *)(a2 + 10);
  else
    v4 = *(unsigned __int16 **)(a2 + 24);
  v5 = *v4;
  if (v5 == 71)
    return 1;
  v7 = 0;
  do
  {
    v8 = v7;
    if (v7 == 15)
      break;
    v9 = (unsigned __int16)aGyqmwwedfdahms[++v7];
  }
  while (v5 != v9);
  return v8 < 0xF;
}

uint64_t sub_18BCDD5DC(uint64_t a1, int *a2)
{
  icu::UVector *v3;
  signed int v4;

  if (*a2 > 0)
    return 0;
  v3 = *(icu::UVector **)(a1 + 120);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(a1 + 116);
  if (v4 >= *((_DWORD *)v3 + 2))
    return 0;
  *(_DWORD *)(a1 + 116) = v4 + 1;
  return icu::UVector::elementAt(v3, v4);
}

uint64_t sub_18BCDD618(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18BCDD620(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  else
    return 0;
}

void sub_18BCDD638(icu::StringEnumeration *this)
{
  icu::UVector *v2;
  signed int v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E225E758;
  v2 = (icu::UVector *)*((_QWORD *)this + 15);
  if (v2)
  {
    if (*((int *)v2 + 2) >= 1)
    {
      v3 = 0;
      do
      {
        v4 = icu::UVector::elementAt(v2, v3);
        if (v4)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        ++v3;
        v2 = (icu::UVector *)*((_QWORD *)this + 15);
      }
      while (v3 < *((_DWORD *)v2 + 2));
    }
    (*(void (**)(icu::UVector *))(*(_QWORD *)v2 + 8))(v2);
  }
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18BCDD6B8(icu::StringEnumeration *a1)
{
  void *v1;

  sub_18BCDD638(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BCDD6CC(uint64_t a1, int *a2)
{
  icu::UVector *v3;
  signed int v4;

  if (*a2 > 0)
    return 0;
  v3 = *(icu::UVector **)(a1 + 120);
  if (!v3)
    return 0;
  v4 = *(_DWORD *)(a1 + 116);
  if (v4 >= *((_DWORD *)v3 + 2))
    return 0;
  *(_DWORD *)(a1 + 116) = v4 + 1;
  return icu::UVector::elementAt(v3, v4);
}

uint64_t sub_18BCDD708(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18BCDD710(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  else
    return 0;
}

void sub_18BCDD728(icu::StringEnumeration *this)
{
  icu::UVector *v2;
  signed int v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E225E7C0;
  v2 = (icu::UVector *)*((_QWORD *)this + 15);
  if (v2)
  {
    if (*((int *)v2 + 2) >= 1)
    {
      v3 = 0;
      do
      {
        v4 = icu::UVector::elementAt(v2, v3);
        if (v4)
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        ++v3;
        v2 = (icu::UVector *)*((_QWORD *)this + 15);
      }
      while (v3 < *((_DWORD *)v2 + 2));
    }
    (*(void (**)(icu::UVector *))(*(_QWORD *)v2 + 8))(v2);
  }
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18BCDD7A8(icu::StringEnumeration *a1)
{
  void *v1;

  sub_18BCDD728(a1);
  icu::UMemory::operator delete(v1);
}

BOOL sub_18BCDD7BC(icu::UnicodeString *a1)
{
  UChar32 v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  _BOOL8 v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int32_t v15;
  unsigned int v17;
  icu::UnicodeString *v18;
  _OWORD v19[6];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v19, 0, sizeof(v19));
  icu::StringCharacterIterator::StringCharacterIterator((icu::StringCharacterIterator *)v19, a1);
  v2 = icu::UCharCharacterIterator::first((icu::UCharCharacterIterator *)v19);
  if (!icu::UCharCharacterIterator::hasNext((icu::UCharCharacterIterator *)v19))
    goto LABEL_34;
  v18 = a1;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = -1;
  v7 = -1;
  v8 = -1;
  do
  {
    v9 = (v2 - 76);
    if (v9 <= 0x2D && ((1 << (v2 - 76)) & 0x224001002003) != 0)
    {
      v7 = HIDWORD(v19[0]);
      if (v8 == -1)
        v8 = HIDWORD(v19[0]);
      if (((1 << (v2 - 76)) & 0x224000002000) != 0)
      {
        v3 = 1;
      }
      else if (((1 << (v2 - 76)) & 3) != 0)
      {
        if (v5 > 1)
          goto LABEL_34;
        ++v5;
      }
      else if (v9 == 24)
      {
        v4 = 1;
      }
    }
    else if (u_isalpha(v2))
    {
      if (v6 == -1 && v8 != -1)
        v6 = HIDWORD(v19[0]);
    }
    else if (!u_isspace(v2) && !u_ispunct(v2) && v2 != 8207)
    {
      goto LABEL_34;
    }
    v2 = icu::UCharCharacterIterator::next((icu::UCharCharacterIterator *)v19);
  }
  while (icu::UCharCharacterIterator::hasNext((icu::UCharCharacterIterator *)v19));
  v11 = 0;
  if ((v8 & 0x80000000) == 0 && (v7 & 0x80000000) == 0)
  {
    v12 = *((unsigned __int16 *)v18 + 4);
    v13 = (__int16)v12;
    v14 = v12 >> 5;
    v15 = v13 >= 0 ? v14 : *((_DWORD *)v18 + 3);
    v11 = 0;
    if (icu::UnicodeString::doIndexOf((uint64_t)v18, 0x27u, 0, v15) == -1)
    {
      if (v6 != -1 && v6 < v7)
      {
LABEL_34:
        v11 = 0;
        goto LABEL_35;
      }
      v17 = v5 > 0;
      if (v4)
        ++v17;
      if (v3)
        ++v17;
      v11 = v17 > 1;
    }
  }
LABEL_35:
  icu::StringCharacterIterator::~StringCharacterIterator((icu::StringCharacterIterator *)v19);
  return v11;
}

uint64_t sub_18BCDD9E0(uint64_t a1, char *__s2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char **v9;
  uint64_t v10;
  uint64_t result;
  char *v12;
  UChar **v13;
  uint64_t v14;
  int v15;
  UChar *v16;
  unsigned __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v9 = (const char **)off_1E225E568;
  v10 = 272;
  while (1)
  {
    result = strcmp(*v9, __s2);
    if (!(_DWORD)result)
      break;
    v10 += 64;
    ++v9;
    if (v10 == 1296)
      return result;
  }
  v15 = 0;
  v14 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a3 + 32))(a3, &v15, a5);
  icu::UnicodeString::UnicodeString(&v16, 1, &v14);
  v12 = *(char **)(a1 + 8);
  if (*(unsigned __int16 *)&v12[v10] <= 0x1Fu && v17 >= 0x20u)
  {
    v13 = (UChar **)&v12[v10 - 8];
    icu::UnicodeString::operator=(v13, &v16);
    icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v13);
  }
  return (uint64_t)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v16);
}

_QWORD *sub_18BCDDB04(uint64_t a1, const char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  _QWORD *result;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  UChar **v13;
  _OWORD v14[2];
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned __int16 v19;
  UChar *v20;
  unsigned __int16 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  result = (_QWORD *)icu::DateTimePatternGenerator::getFieldAndWidthIndices(a1, a2, &v16);
  if ((_DWORD)result != 16)
  {
    v9 = result;
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v14, a3, a5);
    if (*a5 <= 0)
    {
      result = (_QWORD *)icu::ResourceTable::findValue((icu::ResourceTable *)v14, "dn", a3);
      if ((_DWORD)result)
      {
        v17 = 0;
        v18 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 32))(a3, &v17, a5);
        icu::UnicodeString::UnicodeString(&v20, 1, &v18);
        v10 = *a5;
        if ((int)v10 <= 0)
        {
          v11 = v16;
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v18, (UChar **)(*(_QWORD *)(a1 + 8) + 192 * v9 + ((unint64_t)v16 << 6) + 1288));
          if (v19 < 0x20u)
          {
            v12 = v21;
            icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v18);
            if (v12 >= 0x20)
            {
              v13 = (UChar **)(*(_QWORD *)(a1 + 8) + 192 * v9 + (v11 << 6) + 1288);
              icu::UnicodeString::operator=(v13, &v20);
              icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v13);
            }
          }
          else
          {
            icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v18);
          }
        }
        return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)&v20);
      }
    }
  }
  return result;
}

void *sub_18BCDDC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  unint64_t v8;
  int32_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int16 v13;
  void *v14;
  int v16;
  void (**v17)(icu::UnicodeString *__hidden);
  __int16 v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned int v21;
  _OWORD v22[4];
  _OWORD v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  memset(v23, 0, sizeof(v23));
  icu::UnicodeString::UnicodeString(v23, a2, 0xFFFFFFFFLL, 0);
  memset(v22, 0, sizeof(v22));
  LODWORD(v17) = 0;
  v19 = (*(uint64_t (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)a3 + 32))(a3, &v17, &v16);
  icu::UnicodeString::UnicodeString(v22, 1, &v19);
  v8 = v16;
  if (v16 <= 0
    && uhash_geti(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 4688), (uint64_t)v23) != 1
    && (!*(_BYTE *)(a1 + 16) || sub_18BCDD7BC((icu::UnicodeString *)v22)))
  {
    if (!icu::Locale::isRightToLeft((icu::Locale *)(*(_QWORD *)(a1 + 8) + 8)))
    {
      icu::UnicodeString::UnicodeString((uint64_t)&v19, 8207);
      v17 = off_1E2256B38;
      v18 = 2;
      if ((SWORD4(v22[0]) & 0x8000u) == 0)
        v9 = WORD4(v22[0]) >> 5;
      else
        v9 = HIDWORD(v22[0]);
      if ((v20 & 0x8000u) == 0)
        v10 = v20 >> 5;
      else
        v10 = v21;
      icu::UnicodeString::findAndReplace((icu::UnicodeString *)v22, 0, v9, (const icu::UnicodeString *)&v19, 0, v10, (const icu::UnicodeString *)&v17, 0, 0);
      icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v17);
      icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v19);
    }
    icu::DateTimePatternGenerator::setAvailableFormat(*(icu::DateTimePatternGenerator **)(a1 + 8), (UChar **)v23, a5);
    if ((*(_WORD *)(a1 + 32) & 1) != 0)
      v13 = 2;
    else
      v13 = *(_WORD *)(a1 + 32) & 0x1F;
    *(_WORD *)(a1 + 32) = v13;
    icu::DateTimePatternGenerator::addPatternWithSkeleton(*(icu::DateTimePatternGenerator **)(a1 + 8), (UChar **)v22, (UChar **)v23, 1, (UChar **)(a1 + 24), a5);
  }
  icu::UnicodeString::~UnicodeString((void *)v8, (icu::UnicodeString *)v22);
  return icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v23);
}

void sub_18BCDDE88(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BCDDE9C(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  int v7;
  const char *v8;
  const char *v9;
  char *v10;
  unsigned int v11;
  int *v12;
  char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  const char *v17;
  int v18;
  int *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  int *v24;
  int *v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  char *v35;
  int v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  _OWORD v40[2];
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  char *__s1;
  uint64_t v45;
  int v46;
  _BYTE v47[64];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v43 = 0;
  __s1 = a2;
  memset(v42, 0, sizeof(v42));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v42, a3, a5);
  if (*a5 <= 0
    && icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v42, 0, (const char **)&__s1, a3))
  {
    v7 = 0;
    v8 = "allowed";
    v9 = "preferred";
    do
    {
      v10 = __s1;
      v41 = 0;
      memset(v40, 0, sizeof(v40));
      (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v40, a3, a5);
      if (*a5 > 0)
        return;
      v35 = v10;
      v34 = v7;
      if (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v40, 0, (const char **)&__s1, a3))
      {
        v11 = 0;
        LODWORD(v37) = 0;
        v12 = 0;
        v36 = -1;
        do
        {
          v13 = __s1;
          if (!strcmp(__s1, v8))
          {
            if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3))
            {
              v16 = v9;
              v17 = v8;
              v38[0] = 0;
              v38[1] = 0;
              v39 = 0;
              (*(void (**)(_QWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 80))(v38, a3, a5);
              v18 = v39;
              if ((int)v39 < -1)
                goto LABEL_32;
              v19 = (int *)uprv_malloc(4 * (v39 + 2));
              if (!v19)
                goto LABEL_32;
              v20 = v19;
              v37 = (v18 + 1);
              bzero(v19, 4 * (v18 + 2));
              uprv_free(v12);
              if (v18 >= 1)
              {
                v21 = 0;
                do
                {
                  icu::ResourceArray::getValue((icu::ResourceArray *)v38, v21, a3);
                  v46 = 0;
                  v45 = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 32))(a3, &v46, a5);
                  v22 = icu::UnicodeString::UnicodeString(v47, 1, &v45);
                  v20[v21 + 1] = sub_18BCDE2CC(v22);
                  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v47);
                  ++v21;
                }
                while (v37 - 1 != v21);
              }
              v12 = v20;
              v8 = v17;
              v9 = v16;
            }
            else
            {
              v24 = (int *)uprv_malloc(0xCuLL);
              if (!v24)
                goto LABEL_32;
              v25 = v24;
              v24[2] = 0;
              *(_QWORD *)v24 = 0;
              uprv_free(v12);
              LODWORD(v45) = 0;
              v38[0] = (*(uint64_t (**)(icu::ResourceValue *, uint64_t *, int *))(*(_QWORD *)a3 + 32))(a3, &v45, a5);
              v26 = icu::UnicodeString::UnicodeString(v47, 1, v38);
              v25[1] = sub_18BCDE2CC(v26);
              icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v47);
              LODWORD(v37) = 2;
              v12 = v25;
            }
          }
          else if (!strcmp(v13, v9))
          {
            LODWORD(v45) = 0;
            v38[0] = (*(uint64_t (**)(icu::ResourceValue *, uint64_t *, int *))(*(_QWORD *)a3 + 32))(a3, &v45, a5);
            v14 = icu::UnicodeString::UnicodeString(v47, 1, v38);
            v36 = sub_18BCDE2CC(v14);
            icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v47);
          }
          ++v11;
        }
        while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v40, v11, (const char **)&__s1, a3));
        v28 = v37;
        if ((int)v37 >= 2)
        {
          v29 = v36;
          v30 = (uint64_t)v35;
          if (v36 == -1)
            v29 = v12[1];
          *v12 = v29;
          goto LABEL_29;
        }
      }
      else
      {
        v12 = 0;
        v36 = -1;
      }
      v31 = (int *)uprv_malloc(0xCuLL);
      if (!v31)
      {
LABEL_32:
        *a5 = 7;
LABEL_33:
        uprv_free(v12);
        return;
      }
      v32 = v31;
      v31[2] = 0;
      *(_QWORD *)v31 = 0;
      uprv_free(v12);
      v33 = v36;
      if (v36 == -1)
        v33 = 1;
      *v32 = v33;
      v32[1] = v33;
      v28 = 2;
      v12 = v32;
      v30 = (uint64_t)v35;
LABEL_29:
      v12[v28] = -1;
      uhash_put(qword_1ECD27D08, v30, (uint64_t)v12, a5);
      if (*a5 >= 1)
      {
        v12 = 0;
        goto LABEL_33;
      }
      uprv_free(0);
      v7 = v34 + 1;
    }
    while (icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v42, v34 + 1, (const char **)&__s1, a3));
  }
}

uint64_t sub_18BCDE2CC(uint64_t a1)
{
  unsigned int v1;
  int v2;
  _WORD *v3;
  unsigned int v4;
  unsigned __int16 *v6;
  int v7;
  unsigned int v8;
  _WORD *v9;
  BOOL v10;
  int v11;
  unsigned int v12;
  _WORD *v13;
  BOOL v14;
  _WORD *v15;
  BOOL v16;
  _WORD *v17;
  BOOL v18;
  _WORD *v19;

  v1 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    v2 = *(_DWORD *)(a1 + 12);
    if (v2 == 1)
      goto LABEL_16;
    if (v2 != 2)
      return 0xFFFFFFFFLL;
LABEL_7:
    if ((v1 & 2) != 0)
      v3 = (_WORD *)(a1 + 10);
    else
      v3 = *(_WORD **)(a1 + 24);
    if (*v3 == 104)
    {
      v4 = *(_DWORD *)(a1 + 12);
      if ((v1 & 0x8000u) == 0)
        v4 = v1 >> 5;
      if (v4 >= 2 && v3[1] == 98)
        return 4;
    }
    if ((v1 & 0x8000u) == 0)
      v8 = v1 >> 5;
    else
      v8 = *(_DWORD *)(a1 + 12);
    if (v8)
    {
      v9 = *(_WORD **)(a1 + 24);
      if ((v1 & 2) != 0)
        v9 = (_WORD *)(a1 + 10);
      v10 = *v9 != 104 || v8 == 1;
      if (!v10 && v9[1] == 66)
        return 5;
      v13 = *(_WORD **)(a1 + 24);
      if ((v1 & 2) != 0)
        v13 = (_WORD *)(a1 + 10);
      v14 = *v13 == 75 && v8 >= 2;
      if (v14 && v13[1] == 98)
        return 6;
      v15 = *(_WORD **)(a1 + 24);
      if ((v1 & 2) != 0)
        v15 = (_WORD *)(a1 + 10);
      v16 = *v15 == 75 && v8 >= 2;
      if (v16 && v15[1] == 66)
        return 7;
      v17 = *(_WORD **)(a1 + 24);
      if ((v1 & 2) != 0)
        v17 = (_WORD *)(a1 + 10);
      v18 = *v17 == 72 && v8 >= 2;
      if (v18 && v17[1] == 98)
        return 8;
      v19 = (v1 & 2) != 0 ? (_WORD *)(a1 + 10) : *(_WORD **)(a1 + 24);
      if (*v19 == 72 && v8 >= 2 && v19[1] == 66)
        return 9;
    }
    return 0xFFFFFFFFLL;
  }
  if ((v1 & 0xFFE0) == 0x40)
    goto LABEL_7;
  if ((v1 & 0xFFE0) != 0x20)
    return 0xFFFFFFFFLL;
LABEL_16:
  v6 = (unsigned __int16 *)(a1 + 10);
  if ((v1 & 2) == 0)
    v6 = *(unsigned __int16 **)(a1 + 24);
  v7 = *v6;
  if (v7 == 104)
    return 0;
  v11 = (__int16)v1;
  v12 = v1 >> 5;
  if (v11 < 0)
    v12 = *(_DWORD *)(a1 + 12);
  if (!v12)
    return 0xFFFFFFFFLL;
  if (v7 == 72)
    return 1;
  if (v7 != 75)
  {
    if (v7 == 107)
      return 3;
    return 0xFFFFFFFFLL;
  }
  return 2;
}

void *icu::DateTimeRule::getStaticClassID(icu::DateTimeRule *this)
{
  return &unk_1EE009970;
}

void *icu::DateTimeRule::getDynamicClassID(icu::DateTimeRule *this)
{
  return &unk_1EE009970;
}

uint64_t icu::DateTimeRule::DateTimeRule(uint64_t result, int a2, int a3, int a4, int a5)
{
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)result = off_1E225EA28;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

{
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)result = off_1E225EA28;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a4;
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = a5;
  return result;
}

uint64_t icu::DateTimeRule::DateTimeRule(uint64_t result, int a2, int a3, int a4, int a5, int a6)
{
  *(_QWORD *)result = off_1E225EA28;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = a6;
  return result;
}

{
  *(_QWORD *)result = off_1E225EA28;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = a5;
  *(_DWORD *)(result + 28) = 1;
  *(_DWORD *)(result + 32) = a6;
  return result;
}

uint64_t icu::DateTimeRule::DateTimeRule(uint64_t result, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int v7;

  *(_QWORD *)result = off_1E225EA28;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = 0;
  if (a5)
    v7 = 2;
  else
    v7 = 3;
  *(_DWORD *)(result + 24) = a6;
  *(_DWORD *)(result + 28) = v7;
  *(_DWORD *)(result + 32) = a7;
  return result;
}

{
  int v7;

  *(_QWORD *)result = off_1E225EA28;
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 20) = 0;
  if (a5)
    v7 = 2;
  else
    v7 = 3;
  *(_DWORD *)(result + 24) = a6;
  *(_DWORD *)(result + 28) = v7;
  *(_DWORD *)(result + 32) = a7;
  return result;
}

double icu::DateTimeRule::DateTimeRule(icu::DateTimeRule *this, const icu::DateTimeRule *a2)
{
  double result;

  *(_QWORD *)this = off_1E225EA28;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  result = *((double *)a2 + 3);
  *((double *)this + 3) = result;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1E225EA28;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  result = *((double *)a2 + 3);
  *((double *)this + 3) = result;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  return result;
}

void icu::DateTimeRule::~DateTimeRule(icu::DateTimeRule *this)
{
  void *v1;

  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v1);
}

double icu::DateTimeRule::clone(icu::DateTimeRule *this, unint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = icu::UMemory::operator new((icu::UMemory *)0x28, a2);
  if (v3)
  {
    *(_QWORD *)v3 = off_1E225EA28;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)((char *)this + 8);
    result = *((double *)this + 3);
    *(double *)(v3 + 24) = result;
    *(_DWORD *)(v3 + 32) = *((_DWORD *)this + 8);
  }
  return result;
}

double icu::DateTimeRule::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    result = *(double *)(a2 + 24);
    *(double *)(a1 + 24) = result;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  }
  return result;
}

BOOL icu::DateTimeRule::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (result)
    return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
        && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
        && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
        && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  return result;
}

BOOL icu::DateTimeRule::operator!=(uint64_t a1, uint64_t a2)
{
  return !icu::DateTimeRule::operator==(a1, a2);
}

uint64_t icu::DateTimeRule::getDateRuleType(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t icu::DateTimeRule::getTimeRuleType(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t icu::DateTimeRule::getRuleMonth(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::DateTimeRule::getRuleDayOfMonth(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t icu::DateTimeRule::getRuleDayOfWeek(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t icu::DateTimeRule::getRuleWeekInMonth(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t icu::DateTimeRule::getRuleMillisInDay(icu::DateTimeRule *this)
{
  return *((unsigned int *)this + 6);
}

icu::EraRules *icu::EraRules::EraRules(icu::EraRules *a1, _QWORD *a2, int a3)
{
  *(_QWORD *)a1 = 0;
  *((_DWORD *)a1 + 2) = a3;
  uprv_free(0);
  *(_QWORD *)a1 = *a2;
  *a2 = 0;
  icu::EraRules::initCurrentEra(a1);
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *((_DWORD *)a1 + 2) = a3;
  uprv_free(0);
  *(_QWORD *)a1 = *a2;
  *a2 = 0;
  icu::EraRules::initCurrentEra(a1);
  return a1;
}

void icu::EraRules::initCurrentEra(icu::EraRules *this)
{
  icu::TimeZone *Now;
  double v3;
  double v4;
  uint64_t Default;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  signed int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;

  v18 = 0;
  Now = (icu::TimeZone *)ucal_getNow();
  v4 = v3;
  v16 = 0;
  v17 = 0;
  Default = icu::TimeZone::createDefault(Now);
  if (Default)
  {
    v6 = Default;
    (*(void (**)(uint64_t, _QWORD, int *, int *, int *, double))(*(_QWORD *)Default + 48))(Default, 0, &v17, &v16, &v18, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v4 = v4 + (double)(v16 + v17);
  }
  v15 = 0;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  sub_18BCE8698(&v15, (_DWORD *)&v14 + 1, &v14, (int *)&v13 + 1, (int *)&v13, &v12, v4);
  v7 = *((unsigned int *)this + 2);
  if ((int)v7 >= 1)
    v8 = 1;
  else
    v8 = *((_DWORD *)this + 2);
  v9 = v8 - 1;
  v10 = v7 - 1;
  while ((int)v7 >= 2)
  {
    v11 = *(_DWORD *)(*(_QWORD *)this + 4 * v10);
    LODWORD(v7) = v7 - 1;
    --v10;
    if ((int)(v14 | (v15 << 16) | ((HIDWORD(v14) << 8) + 256)) >= v11)
      goto LABEL_11;
  }
  LODWORD(v7) = v9;
LABEL_11:
  *((_DWORD *)this + 3) = v7;
}

void icu::EraRules::~EraRules(void **this)
{
  uprv_free(*this);
}

{
  uprv_free(*this);
}

icu::EraRules *icu::EraRules::createInstance(icu::EraRules *this, const char *a2, int *a3, UErrorCode *a4)
{
  icu::EraRules *v4;
  int v6;
  _QWORD *v8;
  signed int Size;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t *v13;
  char *NextResource;
  char *v15;
  uint64_t Key;
  unsigned int v17;
  int v18;
  char v19;
  char *v20;
  char *v21;
  char v22;
  const char *v23;
  const UChar *String;
  int *IntVector;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t *v30;
  int v32;
  int v33;
  char *__endptr;

  if (*a3 > 0)
    return 0;
  v6 = (int)a2;
  v8 = (_QWORD *)ures_openDirect(0, (uint64_t)"supplementalData", (uint64_t)a3);
  ures_getByKey((uint64_t)v8, "calendarData", (uint64_t)v8, a3);
  ures_getByKey((uint64_t)v8, (const char *)this, (uint64_t)v8, a3);
  ures_getByKey((uint64_t)v8, "eras", (uint64_t)v8, a3);
  v4 = 0;
  if (*a3 <= 0)
  {
    Size = ures_getSize((uint64_t)v8);
    v10 = uprv_malloc(4 * Size);
    v11 = v10;
    if (!v10)
      goto LABEL_55;
    bzero(v10, 4 * Size);
    v32 = 0x7FFFFFFF;
LABEL_6:
    if (ures_hasNext((_BOOL8)v8))
    {
      NextResource = ures_getNextResource((uint64_t)v8, 0, a3);
      v15 = NextResource;
      if (*a3 > 0)
        goto LABEL_13;
      Key = ures_getKey((uint64_t)NextResource);
      __endptr = 0;
      v17 = strtol((const char *)Key, &__endptr, 10);
      if (&__endptr[-Key] != (char *)strlen((const char *)Key)
        || (v17 & 0x80000000) != 0
        || Size <= (int)v17
        || v11[v17])
      {
        goto LABEL_12;
      }
      v33 = 0;
      v19 = 1;
      while (1)
      {
        if (!ures_hasNext((_BOOL8)v15))
        {
          if (v11[v17])
            goto LABEL_40;
          if (v17)
            goto LABEL_12;
          v11[v17] = -2147483391;
LABEL_40:
          if (v19)
          {
            if (v32 > (int)v17)
            {
              v18 = 0;
              goto LABEL_14;
            }
LABEL_12:
            *a3 = 3;
LABEL_13:
            v18 = 1;
            goto LABEL_14;
          }
          v18 = 0;
          v29 = v32;
          if (v32 >= (int)v17)
            v29 = v17;
          v32 = v29;
LABEL_14:
          if (v15)
            ures_close(v15);
          if (v18)
          {
            v4 = 0;
            goto LABEL_56;
          }
          goto LABEL_6;
        }
        v20 = ures_getNextResource((uint64_t)v15, 0, a3);
        v21 = v20;
        if (*a3 > 0)
          break;
        v23 = (const char *)ures_getKey((uint64_t)v20);
        if (!strcmp(v23, "start"))
        {
          IntVector = ures_getIntVector((uint64_t)v21, &v33, a3);
          if (*a3 > 0)
            break;
          if (v33 != 3
            || (v26 = *IntVector, v26 != (__int16)v26)
            || (v27 = IntVector[1], (v27 - 1) > 0xB)
            || (v28 = IntVector[2], (v28 - 1) >= 0x1F))
          {
            v22 = 0;
            *a3 = 3;
            if (!v21)
              goto LABEL_29;
LABEL_28:
            ures_close(v21);
            goto LABEL_29;
          }
          v11[v17] = (v27 << 8) | (v26 << 16) | v28;
        }
        else if (!strcmp(v23, "named"))
        {
          String = ures_getString((uint64_t)v21, &v33, a3);
          if (!u_strncmp(String, (const UChar *)"f", 5))
            v19 = 0;
        }
        v22 = 1;
        if (v21)
          goto LABEL_28;
LABEL_29:
        if ((v22 & 1) == 0)
          goto LABEL_13;
      }
      v22 = 0;
      if (!v21)
        goto LABEL_29;
      goto LABEL_28;
    }
    v30 = icu::UMemory::operator new(v13, (icu::UMemory *)0x10, v12);
    v4 = (icu::EraRules *)v30;
    if (v6 || v32 == 0x7FFFFFFF)
    {
      if (v30)
      {
        *v30 = 0;
        *((_DWORD *)v30 + 2) = Size;
LABEL_54:
        uprv_free(0);
        *(_QWORD *)v4 = v11;
        icu::EraRules::initCurrentEra(v4);
        v11 = 0;
        goto LABEL_56;
      }
    }
    else if (v30)
    {
      *v30 = 0;
      *((_DWORD *)v30 + 2) = v32;
      goto LABEL_54;
    }
LABEL_55:
    v4 = 0;
    *a3 = 7;
LABEL_56:
    uprv_free(v11);
  }
  if (v8)
    ures_close(v8);
  return v4;
}

uint64_t icu::EraRules::getStartDate(uint64_t this, unsigned int a2, int (*a3)[3], UErrorCode *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(int *)a4 <= 0)
  {
    if ((a2 & 0x80000000) != 0 || *(_DWORD *)(this + 8) <= (signed int)a2)
    {
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      v4 = *(_DWORD *)(*(_QWORD *)this + 4 * a2);
      v5 = BYTE1(v4);
      v6 = v4;
      if (v4 == -2147483391)
        v7 = -1;
      else
        v7 = v4 >> 16;
      (*a3)[0] = v7;
      (*a3)[1] = v5;
      (*a3)[2] = v6;
    }
  }
  return this;
}

uint64_t icu::EraRules::getStartYear(icu::EraRules *this, unsigned int a2, UErrorCode *a3)
{
  int v3;

  if (*(int *)a3 > 0)
    return 0x3FFFFFFFLL;
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 2) <= (signed int)a2)
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0x3FFFFFFFLL;
  }
  v3 = *(_DWORD *)(*(_QWORD *)this + 4 * a2);
  if (v3 == -2147483391)
    return 0xFFFFFFFFLL;
  else
    return (v3 >> 16);
}

uint64_t icu::EraRules::getEraIndex(icu::EraRules *this, int a2, int a3, unsigned int a4, UErrorCode *a5)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;

  if (*(int *)a5 > 0)
    return 0xFFFFFFFFLL;
  if ((a3 - 13) < 0xFFFFFFF4 || a4 - 32 <= 0xFFFFFFE0)
  {
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
    return 0xFFFFFFFFLL;
  }
  v6 = *((_DWORD *)this + 2);
  result = *((int *)this + 3);
  v8 = *(_QWORD *)this;
  v9 = *(_DWORD *)(v8 + 4 * result);
  if (a2 <= -32769)
  {
    if (v9 == -2147483391)
      goto LABEL_13;
LABEL_12:
    result = 0;
    goto LABEL_13;
  }
  if (a2 < 0x8000 && (int)((a3 << 8) | (a2 << 16) | a4) < v9)
    goto LABEL_12;
LABEL_13:
  if ((int)result < v6 - 1)
  {
    v10 = (a3 << 8) | (a2 << 16) | a4;
    if ((a3 | a4) <= 1)
      v11 = 0;
    else
      v11 = -1;
    do
    {
      v12 = result + v6;
      if ((int)result + v6 < 0 != __OFADD__((_DWORD)result, v6))
        ++v12;
      v13 = v12 >> 1;
      v14 = *(_DWORD *)(v8 + 4 * v13);
      if (a2 > -32769)
      {
        if (a2 < 0x8000)
        {
          v16 = v10 <= v14;
          v15 = v10 != v14;
          if (!v16)
            v15 = -1;
        }
        else
        {
          v15 = -1;
        }
      }
      else if (v14 == -2147483391)
      {
        v15 = v11;
      }
      else
      {
        v15 = 1;
      }
      if (v15 < 1)
      {
        result = v13;
      }
      else
      {
        v6 = v13;
        result = result;
      }
    }
    while ((int)result < v6 - 1);
  }
  return result;
}

void *icu::EscapeTransliterator::getStaticClassID(icu::EscapeTransliterator *this)
{
  return &unk_1EE009971;
}

void *sub_18BCDEF04()
{
  return &unk_1EE009971;
}

void *sub_18BCDEF10()
{
  unint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  const char *v21;
  const __int16 *v22;
  const __int16 *v23;
  const __int16 *v24;
  const __int16 *v25;
  const char *v26;
  const char *v27;
  _BYTE v28[64];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = "A";
  v0 = icu::UnicodeString::UnicodeString(v28, 1, &v27);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18BCDF120, 0);
  v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v28);
  v26 = "A";
  v3 = icu::UnicodeString::UnicodeString(v2, 1, &v26);
  icu::Transliterator::_registerFactory(v3, (uint64_t)sub_18BCDF204, 0);
  v5 = icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v28);
  v25 = L"Any-Hex/C";
  v6 = icu::UnicodeString::UnicodeString(v5, 1, &v25);
  icu::Transliterator::_registerFactory(v6, (uint64_t)sub_18BCDF2E8, 0);
  v8 = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v28);
  v24 = L"Any-Hex/XML";
  v9 = icu::UnicodeString::UnicodeString(v8, 1, &v24);
  icu::Transliterator::_registerFactory(v9, (uint64_t)sub_18BCDF484, 0);
  v11 = icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v28);
  v23 = L"Any-Hex/XML10";
  v12 = icu::UnicodeString::UnicodeString(v11, 1, &v23);
  icu::Transliterator::_registerFactory(v12, (uint64_t)sub_18BCDF554, 0);
  v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v28);
  v22 = L"Any-Hex/Perl";
  v15 = icu::UnicodeString::UnicodeString(v14, 1, &v22);
  icu::Transliterator::_registerFactory(v15, (uint64_t)sub_18BCDF624, 0);
  v17 = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v28);
  v21 = "A";
  v18 = icu::UnicodeString::UnicodeString(v17, 1, &v21);
  icu::Transliterator::_registerFactory(v18, (uint64_t)sub_18BCDF204, 0);
  return icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v28);
}

uint64_t *sub_18BCDF120(UChar **a1, unint64_t a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  const char *v7;
  UChar *v8;
  __int16 v9;
  UChar *v10[8];
  uint64_t *v11;

  v11 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v11, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    v7 = "U";
    icu::UnicodeString::UnicodeString(v10, 1, &v7);
    v8 = (UChar *)off_1E2256B38;
    v9 = 2;
    sub_18BCDF6F4((uint64_t)v3, a1, v10, &v8, 16, 4, 1, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v10);
  }
  return v3;
}

uint64_t *sub_18BCDF204(UChar **a1, unint64_t a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  const __int16 *v7;
  UChar *v8;
  __int16 v9;
  UChar *v10[8];
  uint64_t *v11;

  v11 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v11, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    v7 = L"\\u";
    icu::UnicodeString::UnicodeString(v10, 1, &v7);
    v8 = (UChar *)off_1E2256B38;
    v9 = 2;
    sub_18BCDF6F4((uint64_t)v3, a1, v10, &v8, 16, 4, 0, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v10);
  }
  return v3;
}

uint64_t *sub_18BCDF2E8(UChar **a1, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const char *v12;
  const char *v13;
  const __int16 *v14;
  UChar *v15;
  __int16 v16;
  UChar *v17[8];
  UChar *v18;
  __int16 v19;
  UChar *v20;
  __int16 v21;
  UChar *v22[8];
  uint64_t *v23;

  v23 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v23, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    v14 = L"\\u";
    icu::UnicodeString::UnicodeString(v22, 1, &v14);
    v20 = (UChar *)off_1E2256B38;
    v21 = 2;
    if (v5)
    {
      v6 = (uint64_t)v5;
      v18 = (UChar *)off_1E2256B38;
      v19 = 2;
      v13 = "\\";
      icu::UnicodeString::UnicodeString(v17, 1, &v13);
      v15 = (UChar *)off_1E2256B38;
      v16 = 2;
      sub_18BCDF6F4(v6, &v18, v17, &v15, 16, 8, 1, 0);
      sub_18BCDF6F4((uint64_t)v3, a1, v22, &v20, 16, 4, 1, v6);
      icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v15);
      icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v17);
      v12 = v13;
      icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v18);
    }
    else
    {
      sub_18BCDF6F4((uint64_t)v3, a1, v22, &v20, 16, 4, 1, 0);
    }
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v20);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v22);
  }
  return v3;
}

uint64_t *sub_18BCDF484(UChar **a1, unint64_t a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  const __int16 *v7;
  UChar *v8[8];
  UChar *v9[8];
  uint64_t *v10;

  v10 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v10, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    v7 = L"&#x";
    icu::UnicodeString::UnicodeString(v9, 1, &v7);
    icu::UnicodeString::UnicodeString((uint64_t)v8, 59);
    sub_18BCDF6F4((uint64_t)v3, a1, v9, v8, 16, 1, 1, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v9);
  }
  return v3;
}

uint64_t *sub_18BCDF554(UChar **a1, unint64_t a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  const __int16 *v7;
  UChar *v8[8];
  UChar *v9[8];
  uint64_t *v10;

  v10 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v10, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    v7 = L"&#";
    icu::UnicodeString::UnicodeString(v9, 1, &v7);
    icu::UnicodeString::UnicodeString((uint64_t)v8, 59);
    sub_18BCDF6F4((uint64_t)v3, a1, v9, v8, 10, 1, 1, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v9);
  }
  return v3;
}

uint64_t *sub_18BCDF624(UChar **a1, unint64_t a2)
{
  uint64_t *v3;
  void *v4;
  void *v5;
  const char *v7;
  UChar *v8[8];
  UChar *v9[8];
  uint64_t *v10;

  v10 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v10, (icu::UMemory *)0xF0, a2);
  if (v3)
  {
    v7 = "\\";
    icu::UnicodeString::UnicodeString(v9, 1, &v7);
    icu::UnicodeString::UnicodeString((uint64_t)v8, 125);
    sub_18BCDF6F4((uint64_t)v3, a1, v9, v8, 16, 1, 1, 0);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v9);
  }
  return v3;
}

uint64_t sub_18BCDF6F4(uint64_t a1, UChar **a2, UChar **a3, UChar **a4, int a5, int a6, char a7, uint64_t a8)
{
  icu::Transliterator *v15;

  v15 = icu::Transliterator::Transliterator((icu::Transliterator *)a1, a2, 0);
  *(_QWORD *)v15 = off_1E225EA68;
  *((_QWORD *)v15 + 11) = off_1E2256B38;
  *(_WORD *)(a1 + 96) = 2;
  *(_QWORD *)(a1 + 152) = off_1E2256B38;
  *(_WORD *)(a1 + 160) = 2;
  icu::UnicodeString::operator=((UChar **)v15 + 11, a3);
  icu::UnicodeString::operator=((UChar **)(a1 + 152), a4);
  *(_DWORD *)(a1 + 216) = a5;
  *(_DWORD *)(a1 + 220) = a6;
  *(_BYTE *)(a1 + 224) = a7;
  *(_QWORD *)(a1 + 232) = a8;
  return a1;
}

uint64_t sub_18BCDF79C(uint64_t a1, uint64_t a2)
{
  icu::Transliterator *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  v4 = icu::Transliterator::Transliterator((icu::Transliterator *)a1, (UChar **)a2);
  *(_QWORD *)v4 = off_1E225EA68;
  icu::UnicodeString::UnicodeString((icu::Transliterator *)((char *)v4 + 88), (UChar **)(a2 + 88));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 152), (UChar **)(a2 + 152));
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  v6 = *(uint64_t **)(a2 + 232);
  if (v6)
  {
    v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0xF0, v5);
    if (v7)
      v7 = (uint64_t *)sub_18BCDF79C(v7, *(_QWORD *)(a2 + 232));
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(a1 + 232) = v7;
  return a1;
}

void sub_18BCDF81C(_QWORD *a1)
{
  uint64_t (**v2)();
  uint64_t v3;
  void *v4;

  v2 = off_1E225EA68;
  *a1 = off_1E225EA68;
  v3 = a1[29];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 19));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 11));
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_18BCDF870(_QWORD *a1)
{
  void *v1;

  sub_18BCDF81C(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BCDF884@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  if (result)
    return (uint64_t *)sub_18BCDF79C((uint64_t)result, a1);
  return result;
}

void *sub_18BCDF8B4(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  int v6;
  const icu::UnicodeString *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  icu::UnicodeString *v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  const icu::UnicodeString *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  const icu::UnicodeString *v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD v44[4];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a3[2];
  v6 = a3[3];
  memset(v44, 0, sizeof(v44));
  v7 = (const icu::UnicodeString *)(a1 + 88);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v44, (UChar **)(a1 + 88));
  if (*(__int16 *)(a1 + 96) < 0)
    v8 = *(_DWORD *)(a1 + 100);
  else
    v8 = *(unsigned __int16 *)(a1 + 96) >> 5;
  if ((int)v5 < v6)
  {
    v9 = 0;
    while (1)
    {
      v10 = *a2;
      if (!*(_BYTE *)(a1 + 224))
        break;
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 80))(a2, v5);
      v12 = (icu::UnicodeString *)v11;
      if (*(_BYTE *)(a1 + 224))
        v13 = v11 >= 0x10000;
      else
        v13 = 0;
      if (v13)
        v14 = 2;
      else
        v14 = 1;
      if (v11 < 0x10000)
        goto LABEL_22;
      v15 = *(_QWORD *)(a1 + 232);
      if (!v15)
        goto LABEL_23;
      if ((BYTE8(v44[0]) & 1) != 0)
      {
        icu::UnicodeString::unBogus((uint64_t)v44);
        v15 = *(_QWORD *)(a1 + 232);
      }
      else
      {
        if ((SWORD4(v44[0]) & 0x8000u) == 0)
          v16 = WORD4(v44[0]) >> 5;
        else
          v16 = HIDWORD(v44[0]);
        if (v16)
        {
          BYTE8(v44[0]) &= 0x1Fu;
          WORD4(v44[0]) = BYTE8(v44[0]);
        }
      }
      v28 = (const icu::UnicodeString *)(v15 + 88);
      v29 = *(unsigned __int16 *)(v15 + 96);
      v30 = (__int16)v29;
      v31 = v29 >> 5;
      v32 = *(_DWORD *)(v15 + 100);
      if (v30 >= 0)
        v33 = v31;
      else
        v33 = v32;
      icu::UnicodeString::doAppend((uint64_t)v44, v28, 0, v33);
      icu::ICU_Utility::appendNumber((icu::ICU_Utility *)v44, v12, *(_DWORD *)(*(_QWORD *)(a1 + 232) + 216), *(_DWORD *)(*(_QWORD *)(a1 + 232) + 220));
      v34 = *(_QWORD *)(a1 + 232);
      v35 = (const icu::UnicodeString *)(v34 + 152);
      v36 = *(unsigned __int16 *)(v34 + 160);
      v37 = (__int16)v36;
      v38 = v36 >> 5;
      v39 = *(_DWORD *)(v34 + 164);
      if (v37 >= 0)
        v40 = v38;
      else
        v40 = v39;
      icu::UnicodeString::doAppend((uint64_t)v44, v35, 0, v40);
      v9 = 1;
LABEL_42:
      (*(void (**)(uint64_t *, uint64_t, _QWORD, _OWORD *))(*a2 + 32))(a2, v5, (v14 + v5), v44);
      v26 = WORD4(v44[0]) >> 5;
      if (SWORD4(v44[0]) < 0)
        v26 = HIDWORD(v44[0]);
      v5 = (v26 + v5);
      v6 = v6 - v14 + v26;
      if ((int)v5 >= v6)
        goto LABEL_61;
    }
    v12 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 72))(a2, v5);
LABEL_22:
    v14 = 1;
LABEL_23:
    if (v9)
    {
      if ((BYTE8(v44[0]) & 1) != 0)
      {
        icu::UnicodeString::unBogus((uint64_t)v44);
      }
      else
      {
        if ((SWORD4(v44[0]) & 0x8000u) == 0)
          v17 = WORD4(v44[0]) >> 5;
        else
          v17 = HIDWORD(v44[0]);
        if (v17)
        {
          BYTE8(v44[0]) &= 0x1Fu;
          WORD4(v44[0]) = BYTE8(v44[0]);
        }
      }
      v18 = *(unsigned __int16 *)(a1 + 96);
      v19 = (__int16)v18;
      v20 = v18 >> 5;
      if (v19 >= 0)
        v21 = v20;
      else
        v21 = *(unsigned int *)(a1 + 100);
      icu::UnicodeString::doAppend((uint64_t)v44, v7, 0, v21);
    }
    else if (v8 || (BYTE8(v44[0]) & 1) == 0)
    {
      if ((SWORD4(v44[0]) & 0x8000u) == 0)
        v27 = WORD4(v44[0]) >> 5;
      else
        v27 = HIDWORD(v44[0]);
      if (v27 > v8)
      {
        if (v8 > 1023)
        {
          WORD4(v44[0]) = BYTE8(v44[0]) | 0xFFE0;
          HIDWORD(v44[0]) = v8;
        }
        else
        {
          WORD4(v44[0]) = BYTE8(v44[0]) & 0x1F | (32 * v8);
        }
      }
    }
    else
    {
      icu::UnicodeString::unBogus((uint64_t)v44);
    }
    icu::ICU_Utility::appendNumber((icu::ICU_Utility *)v44, v12, *(_DWORD *)(a1 + 216), *(_DWORD *)(a1 + 220));
    v22 = *(unsigned __int16 *)(a1 + 160);
    v23 = (__int16)v22;
    v24 = v22 >> 5;
    if (v23 >= 0)
      v25 = v24;
    else
      v25 = *(unsigned int *)(a1 + 164);
    icu::UnicodeString::doAppend((uint64_t)v44, (const icu::UnicodeString *)(a1 + 152), 0, v25);
    v9 = 0;
    goto LABEL_42;
  }
LABEL_61:
  v41 = (v6 - a3[3] + a3[1]);
  a3[2] = v5;
  a3[3] = v6;
  a3[1] = v41;
  return icu::UnicodeString::~UnicodeString((void *)v41, (icu::UnicodeString *)v44);
}

void *icu::EthiopicCalendar::getStaticClassID(icu::EthiopicCalendar *this)
{
  return &unk_1EE009974;
}

void *sub_18BCDFBF8()
{
  return &unk_1EE009974;
}

void *icu::EthiopicAmeteAlemCalendar::getStaticClassID(icu::EthiopicAmeteAlemCalendar *this)
{
  return &unk_1EE009975;
}

void *sub_18BCDFC10()
{
  return &unk_1EE009975;
}

icu::CECalendar *sub_18BCDFC1C(icu::CECalendar *a1, char **a2, UErrorCode *a3)
{
  icu::CECalendar *result;

  result = icu::CECalendar::CECalendar(a1, a2, a3);
  *(_QWORD *)result = &off_1E225EB18;
  return result;
}

void sub_18BCDFC40(icu::CECalendar *a1)
{
  void *v1;

  icu::CECalendar::~CECalendar(a1);
  icu::UMemory::operator delete(v1);
}

icu::CECalendar *sub_18BCDFC54@<X0>(const icu::CECalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::CECalendar *result;

  result = (icu::CECalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (icu::CECalendar *)icu::CECalendar::CECalendar(result, a1);
    *(_QWORD *)result = &off_1E225EB18;
  }
  return result;
}

const char *sub_18BCDFC90()
{
  return "ethiopic";
}

uint64_t sub_18BCDFC9C(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19)
  {
    if ((int)a1[52] >= 1)
      return a1[22];
    return 1;
  }
  if ((int)a1[33] < 1 || a1[3] == 1)
  {
    if ((int)a1[34] >= 1)
      return a1[4];
    return 1;
  }
  if ((int)a1[34] < 1)
    return 4294961797;
  else
    return (a1[4] - 5500);
}

double sub_18BCDFD34(uint64_t a1, icu::CECalendar *a2)
{
  int v4;
  int *v5;
  int v6;
  _BOOL4 v7;
  double result;
  int v9;
  int v10;
  int v11;
  int v12[2];

  *(_QWORD *)v12 = 0;
  v11 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  icu::CECalendar::jdToCE(a2, v4, &v12[1], v12, &v11, v5);
  v6 = v12[1];
  *(_DWORD *)(a1 + 88) = v12[1];
  *(_DWORD *)(a1 + 208) = 1;
  *(_BYTE *)(a1 + 127) = 1;
  v7 = v6 > 0;
  *(_BYTE *)(a1 + 108) = 1;
  if (v6 <= 0)
    v6 += 5500;
  *(_DWORD *)(a1 + 12) = v7;
  *(_DWORD *)(a1 + 16) = v6;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  *(_WORD *)(a1 + 109) = 257;
  v10 = v11;
  v9 = v12[0];
  *(_DWORD *)(a1 + 20) = v12[0];
  *(_DWORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 104) = v9;
  *(_DWORD *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 131) = 1;
  *(_BYTE *)(a1 + 113) = 1;
  *(_DWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 36) = v10 + 30 * v9;
  *(_QWORD *)(a1 + 152) = 0x100000001;
  *(_BYTE *)(a1 + 114) = 1;
  return result;
}

uint64_t sub_18BCDFDF8(_BYTE *a1, UErrorCode *a2)
{
  unsigned int v3;

  v3 = icu::Calendar::get(a1, 0x13u, a2) + 8;
  if (*(int *)a2 <= 0)
    return v3;
  else
    return 0;
}

_BYTE *sub_18BCDFE30(_BYTE *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 - 8);
}

double sub_18BCDFE3C()
{
  unsigned int v0;

  v0 = atomic_load((unsigned int *)&unk_1ECD27D18);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27D18))
  {
    sub_18BCDFE88();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27D18);
  }
  return *(double *)&qword_1ECD26D08;
}

void sub_18BCDFE88()
{
  icu::Calendar *v0;
  double v1;
  UErrorCode v2;
  char *v3[28];
  _QWORD v4[79];

  v4[78] = *MEMORY[0x1E0C80C00];
  v2 = U_ZERO_ERROR;
  bzero(v4, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v3, "@calendar=ethiopic", 0, 0, 0);
  icu::CECalendar::CECalendar((icu::CECalendar *)v4, v3, &v2);
  v4[0] = &off_1E225EB18;
  icu::Locale::~Locale((icu::Locale *)v3);
  if (v2 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v4, v1, &v2);
    icu::Calendar::add(v4, 1u, -80, &v2);
    qword_1ECD26D08 = icu::Calendar::getTimeInMillis((icu::Calendar *)v4, &v2);
    dword_1ECD26D10 = icu::Calendar::get(v4, 1u, &v2);
  }
  icu::CECalendar::~CECalendar((icu::CECalendar *)v4);
}

uint64_t sub_18BCDFF8C()
{
  unsigned int v0;

  v0 = atomic_load((unsigned int *)&unk_1ECD27D18);
  if (v0 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27D18))
  {
    sub_18BCDFE88();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27D18);
  }
  return dword_1ECD26D10;
}

uint64_t sub_18BCDFFD8()
{
  return 1723856;
}

icu::CECalendar *sub_18BCDFFE4(icu::CECalendar *a1, char **a2, UErrorCode *a3)
{
  icu::CECalendar *result;

  result = icu::CECalendar::CECalendar(a1, a2, a3);
  *(_QWORD *)result = &off_1E225ECE8;
  return result;
}

void sub_18BCE0008(icu::CECalendar *a1)
{
  void *v1;

  icu::CECalendar::~CECalendar(a1);
  icu::UMemory::operator delete(v1);
}

icu::CECalendar *sub_18BCE001C@<X0>(const icu::CECalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::CECalendar *result;

  result = (icu::CECalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (icu::CECalendar *)icu::CECalendar::CECalendar(result, a1);
    *(_QWORD *)result = &off_1E225ECE8;
  }
  return result;
}

const char *sub_18BCE0058()
{
  return "ethiopic-amete-alem";
}

uint64_t sub_18BCE0064(_DWORD *a1)
{
  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19)
  {
    if ((int)a1[52] >= 1)
      return a1[22];
  }
  else if ((int)a1[34] >= 1)
  {
    return (a1[4] - 5500);
  }
  return 1;
}

double sub_18BCE00C8(uint64_t a1, icu::CECalendar *a2)
{
  int v4;
  int *v5;
  int v6;
  double result;
  int v8;
  int v9;
  int v10;
  int v11[2];

  *(_QWORD *)v11 = 0;
  v10 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  icu::CECalendar::jdToCE(a2, v4, &v11[1], v11, &v10, v5);
  v6 = v11[1];
  *(_DWORD *)(a1 + 88) = v11[1];
  *(_DWORD *)(a1 + 208) = 1;
  *(_BYTE *)(a1 + 127) = 1;
  *(_BYTE *)(a1 + 108) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = v6 + 5500;
  *(_QWORD *)&result = 0x100000001;
  *(_QWORD *)(a1 + 132) = 0x100000001;
  *(_WORD *)(a1 + 109) = 257;
  v9 = v10;
  v8 = v11[0];
  *(_DWORD *)(a1 + 20) = v11[0];
  *(_DWORD *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 104) = v8;
  *(_DWORD *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 131) = 1;
  *(_BYTE *)(a1 + 113) = 1;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 36) = v9 + 30 * v8;
  *(_QWORD *)(a1 + 152) = 0x100000001;
  *(_BYTE *)(a1 + 114) = 1;
  return result;
}

uint64_t sub_18BCE0180(uint64_t a1, int a2, int a3)
{
  if (a2)
    return icu::CECalendar::handleGetLimit(a1, a2, a3);
  else
    return 0;
}

uint64_t sub_18BCE0190(_BYTE *a1, UErrorCode *a2)
{
  unsigned int v3;

  v3 = icu::Calendar::get(a1, 0x13u, a2) - 5492;
  if (*(int *)a2 <= 0)
    return v3;
  else
    return 0;
}

_BYTE *sub_18BCE01CC(_BYTE *a1, int a2)
{
  return icu::Calendar::set(a1, 0x13u, a2 + 5492);
}

uint64_t sub_18BCE01DC()
{
  return sub_18BCDFF8C() + 5500;
}

void *icu::Formattable::getStaticClassID(icu::Formattable *this)
{
  return &unk_1EE009978;
}

void *icu::Formattable::getDynamicClassID(icu::Formattable *this)
{
  return &unk_1EE009978;
}

void icu::Formattable::init(icu::Formattable *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this)
{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  return this;
}

{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  return this;
}

uint64_t icu::Formattable::Formattable(uint64_t a1, double a2)
{
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_QWORD *)a1 = off_1E225EEE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 48));
  *(_DWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 8) = a2;
  return a1;
}

{
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_QWORD *)a1 = off_1E225EEE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 48));
  *(_DWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 8) = a2;
  return a1;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, double a2)
{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 1;
  *((double *)this + 1) = a2;
  return this;
}

{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 1;
  *((double *)this + 1) = a2;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, int a2)
{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_QWORD *)this + 1) = a2;
  return this;
}

{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_QWORD *)this + 1) = a2;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, uint64_t a2)
{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 5;
  *((_QWORD *)this + 1) = a2;
  return this;
}

{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 5;
  *((_QWORD *)this + 1) = a2;
  return this;
}

uint64_t icu::Formattable::Formattable(uint64_t a1, const char *a2, int a3, UErrorCode *a4)
{
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_QWORD *)a1 = off_1E225EEE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 48));
  icu::Formattable::setDecimalNumber((icu::Formattable *)a1, a2, a3, a4);
  return a1;
}

{
  *(_QWORD *)(a1 + 48) = off_1E2256B38;
  *(_WORD *)(a1 + 56) = 2;
  *(_QWORD *)a1 = off_1E225EEE8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = 2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 48));
  icu::Formattable::setDecimalNumber((icu::Formattable *)a1, a2, a3, a4);
  return a1;
}

void icu::Formattable::setDecimalNumber(icu::Formattable *a1, const char *a2, int a3, UErrorCode *a4)
{
  unint64_t v8;
  uint64_t *v9;
  icu::number::impl::DecimalQuantity *v10;
  icu::number::impl::DecimalQuantity *v11;

  if (*(int *)a4 <= 0)
  {
    icu::Formattable::dispose(a1);
    v10 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v9, (icu::UMemory *)0x48, v8);
    v11 = v10;
    if (v10)
      icu::number::impl::DecimalQuantity::DecimalQuantity(v10);
    icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v11, a2, a3, a4);
    icu::Formattable::adoptDecimalQuantity(a1, v11);
  }
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, UChar **a2)
{
  unint64_t v4;
  icu::UnicodeString *v5;

  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 3;
  v5 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)3, (icu::UMemory *)0x40, v4);
  if (v5)
    v5 = icu::UnicodeString::UnicodeString(v5, a2);
  *((_QWORD *)this + 1) = v5;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, icu::UnicodeString *a2)
{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 3;
  *((_QWORD *)this + 1) = a2;
  return this;
}

{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 3;
  *((_QWORD *)this + 1) = a2;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, icu::UObject *a2)
{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 6;
  *((_QWORD *)this + 1) = a2;
  return this;
}

{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 6;
  *((_QWORD *)this + 1) = a2;
  return this;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, const icu::Formattable *a2, unint64_t a3)
{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  *((_DWORD *)this + 10) = 4;
  *((_QWORD *)this + 1) = sub_18BCE09D0((uint64_t)a2, a3);
  *((_DWORD *)this + 4) = a3;
  return this;
}

_QWORD *sub_18BCE09D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  LODWORD(v2) = a2;
  v4 = (int)a2;
  v5 = !is_mul_ok((int)a2, 0x70uLL);
  v6 = 112 * (int)a2;
  v7 = __CFADD__(v6, 16);
  v8 = v6 + 16;
  if (v7)
    v5 = 1;
  if (v5)
    v9 = -1;
  else
    v9 = v8;
  v10 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v9, a2);
  if (!v10)
    return 0;
  *v10 = 112;
  v10[1] = v4;
  v11 = v10 + 2;
  if ((_DWORD)v2)
  {
    v12 = &v11[14 * (int)v4];
    v13 = v10 + 2;
    do
    {
      v13[6] = off_1E2256B38;
      *((_WORD *)v13 + 28) = 2;
      *v13 = off_1E225EEE8;
      v13[1] = 0;
      *((_DWORD *)v13 + 10) = 2;
      v13[3] = 0;
      v13[4] = 0;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)(v13 + 6));
      v13 += 14;
    }
    while (v13 != v12);
    if ((int)v2 >= 1)
    {
      v2 = v2;
      v14 = (uint64_t)v11;
      do
      {
        v14 = icu::Formattable::operator=(v14, a1) + 112;
        a1 += 112;
        --v2;
      }
      while (v2);
    }
  }
  return v11;
}

uint64_t icu::Formattable::Formattable(icu::Formattable *this, const icu::Formattable *a2)
{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  return icu::Formattable::operator=((uint64_t)this, (uint64_t)a2);
}

{
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  icu::UnicodeString::setToBogus((icu::Formattable *)((char *)this + 48));
  return icu::Formattable::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::Formattable::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v5;
  icu::UnicodeString *v6;
  uint64_t *v7;
  icu::number::impl::DecimalQuantity *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  UErrorCode v15;

  if (a1 != a2)
  {
    icu::Formattable::dispose((icu::Formattable *)a1);
    v5 = (uint64_t *)*(unsigned int *)(a2 + 40);
    *(_DWORD *)(a1 + 40) = (_DWORD)v5;
    switch((int)v5)
    {
      case 0:
      case 1:
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        break;
      case 2:
      case 5:
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        break;
      case 3:
        v6 = (icu::UnicodeString *)icu::UMemory::operator new(v5, (icu::UMemory *)0x40, v4);
        if (v6)
          v6 = icu::UnicodeString::UnicodeString(v6, *(UChar ***)(a2 + 8));
        goto LABEL_9;
      case 4:
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        v6 = (icu::UnicodeString *)sub_18BCE09D0(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16));
        goto LABEL_9;
      case 6:
        v6 = (icu::UnicodeString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8));
LABEL_9:
        *(_QWORD *)(a1 + 8) = v6;
        break;
      default:
        break;
    }
    v15 = U_ZERO_ERROR;
    v7 = *(uint64_t **)(a2 + 32);
    if (v7)
    {
      v8 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v7, (icu::UMemory *)0x48, v4);
      if (v8)
        v8 = icu::number::impl::DecimalQuantity::DecimalQuantity(v8, *(_QWORD *)(a2 + 32));
      *(_QWORD *)(a1 + 32) = v8;
    }
    v9 = *(uint64_t **)(a2 + 24);
    if (v9)
    {
      v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x40, v4);
      if (!v10)
      {
        v13 = (_QWORD *)(a1 + 24);
LABEL_21:
        *v13 = 0;
        return a1;
      }
      v11 = v10;
      v12 = *(_QWORD *)(a2 + 24);
      *v10 = (uint64_t)v10 + 13;
      *((_DWORD *)v10 + 2) = 40;
      *((_WORD *)v10 + 6) = 0;
      *((_DWORD *)v10 + 14) = 0;
      icu::CharString::append((icu::CharString *)v10, *(const char **)v12, *(_DWORD *)(v12 + 56), &v15);
      *(_QWORD *)(a1 + 24) = v11;
      v13 = (_QWORD *)(a1 + 24);
      if (v15 >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        if (*((_BYTE *)v11 + 12))
          uprv_free((void *)*v11);
        icu::UMemory::operator delete(v11);
        goto LABEL_21;
      }
    }
  }
  return a1;
}

uint64_t icu::Formattable::dispose(icu::Formattable *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = *((_DWORD *)this + 10);
  if (v2 == 6)
  {
LABEL_4:
    v3 = *((_QWORD *)this + 1);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    goto LABEL_11;
  }
  if (v2 != 4)
  {
    if (v2 != 3)
      goto LABEL_11;
    goto LABEL_4;
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = (void *)(v4 - 16);
    v6 = *(_QWORD *)(v4 - 8);
    if (v6)
    {
      v7 = v4 - 112;
      v8 = 112 * v6;
      do
      {
        icu::Formattable::~Formattable((icu::Formattable *)(v7 + v8));
        v8 -= 112;
      }
      while (v8);
    }
    icu::UMemory::operator delete[](v5);
  }
LABEL_11:
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 1) = 0;
  v9 = *((_QWORD *)this + 3);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 12))
      uprv_free(*(void **)v9);
    icu::UMemory::operator delete((void *)v9);
  }
  *((_QWORD *)this + 3) = 0;
  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t icu::Formattable::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;

  if (a1 == a2)
    return 1;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 != *(_DWORD *)(a2 + 40))
    return 0;
  switch(v4)
  {
    case 0:
    case 1:
      return *(double *)(a1 + 8) == *(double *)(a2 + 8);
    case 2:
    case 5:
      return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
    case 3:
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned __int16 *)(v7 + 8);
      if ((v9 & 1) != 0)
        return *(_WORD *)(v8 + 8) & 1;
      if ((v9 & 0x8000) != 0)
        v10 = *(_DWORD *)(v7 + 12);
      else
        v10 = v9 >> 5;
      result = 0;
      v15 = *(unsigned __int16 *)(v8 + 8);
      if ((v15 & 0x8000u) == 0)
        v16 = v15 >> 5;
      else
        v16 = *(_DWORD *)(v8 + 12);
      if ((v15 & 1) == 0 && v10 == v16)
        return icu::UnicodeString::doEquals(*(icu::UnicodeString **)(a1 + 8), (const icu::UnicodeString *)v8, v10);
      return result;
    case 4:
      v11 = *(_DWORD *)(a1 + 16);
      if (v11 != *(_DWORD *)(a2 + 16))
        return 0;
      if (v11 < 1)
        return 1;
      v12 = 0;
      v13 = 0;
      do
      {
        result = icu::Formattable::operator==(*(_QWORD *)(a1 + 8) + v12, *(_QWORD *)(a2 + 8) + v12);
        if ((result & 1) == 0)
          break;
        ++v13;
        v12 += 112;
      }
      while (v13 < *(int *)(a1 + 16));
      return result;
    case 6:
      result = *(_QWORD *)(a1 + 8);
      if (!result)
        return result;
      v14 = *(_QWORD **)(a2 + 8);
      if (!v14)
        return 0;
      result = icu::Measure::operator==((_QWORD *)result, v14);
      break;
    default:
      return 1;
  }
  return result;
}

void icu::Formattable::~Formattable(icu::Formattable *this)
{
  icu::UnicodeString *v2;
  void *v3;

  *(_QWORD *)this = off_1E225EEE8;
  v2 = (icu::Formattable *)((char *)this + 48);
  icu::Formattable::dispose(this);
  icu::UnicodeString::~UnicodeString(v3, v2);
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::Formattable::~Formattable(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::Formattable::clone@<X0>(icu::Formattable *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x70, a2);
  v5 = (uint64_t)v4;
  if (v4)
  {
    v4[6] = (uint64_t)off_1E2256B38;
    *((_WORD *)v4 + 28) = 2;
    *v4 = (uint64_t)off_1E225EEE8;
    v4[1] = 0;
    *((_DWORD *)v4 + 10) = 2;
    v4[3] = 0;
    v4[4] = 0;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(v4 + 6));
    icu::Formattable::operator=(v5, (uint64_t)this);
  }
  return v5;
}

uint64_t icu::Formattable::getType(icu::Formattable *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t icu::Formattable::isNumeric(icu::Formattable *this)
{
  unint64_t v1;
  char v2;

  v1 = *((unsigned int *)this + 10);
  if (v1 >= 6)
    v2 = 0;
  else
    v2 = 0x10000010100uLL >> (8 * v1);
  return v2 & 1;
}

uint64_t icu::Formattable::getLong(icu::Formattable *this, UErrorCode *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  void *v6;
  UErrorCode v7;
  double v8;

  if (*(int *)a2 > 0)
    return 0;
  while (1)
  {
    v4 = *((_DWORD *)this + 10);
    if (v4 != 6)
      break;
    v5 = *((_QWORD *)this + 1);
    if (!v5)
    {
      result = 0;
      v7 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_18;
    }
    this = (icu::Formattable *)(v5 + 8);
    if (!v6)
      goto LABEL_11;
  }
  switch(v4)
  {
    case 1:
      v8 = *((double *)this + 1);
      if (v8 > 2147483650.0)
      {
LABEL_16:
        *a2 = U_INVALID_FORMAT_ERROR;
        return 0x7FFFFFFFLL;
      }
      if (v8 >= -2147483650.0)
        return (int)v8;
LABEL_21:
      *a2 = U_INVALID_FORMAT_ERROR;
      return 0x80000000;
    case 5:
      result = *((_QWORD *)this + 1);
      if (result >= 0x80000000)
        goto LABEL_16;
      if (result > (uint64_t)0xFFFFFFFF7FFFFFFFLL)
        return result;
      goto LABEL_21;
    case 2:
      return *((unsigned int *)this + 2);
  }
LABEL_11:
  result = 0;
  v7 = U_INVALID_FORMAT_ERROR;
LABEL_18:
  *a2 = v7;
  return result;
}

uint64_t icu::Formattable::getInt64(icu::Formattable *this, UErrorCode *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  void *v7;
  UErrorCode v9;
  double v10;
  icu::number::impl::DecimalQuantity *v11;

  if (*(int *)a2 > 0)
    return 0;
  while (1)
  {
    v5 = *((_DWORD *)this + 10);
    if (v5 != 6)
      break;
    v6 = *((_QWORD *)this + 1);
    if (!v6)
    {
      result = 0;
      v9 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_18;
    }
    this = (icu::Formattable *)(v6 + 8);
    if (!v7)
      goto LABEL_14;
  }
  if (v5 != 1)
  {
    if (v5 == 5 || v5 == 2)
      return *((_QWORD *)this + 1);
LABEL_14:
    result = 0;
    v9 = U_INVALID_FORMAT_ERROR;
LABEL_18:
    *a2 = v9;
    return result;
  }
  v10 = *((double *)this + 1);
  if (v10 <= 9.22337204e18)
  {
    if (v10 >= -9.22337204e18)
    {
      if (fabs(v10) > 9.00719925e15 && (v11 = (icu::number::impl::DecimalQuantity *)*((_QWORD *)this + 4)) != 0)
      {
        if (icu::number::impl::DecimalQuantity::fitsInLong(v11, 1))
        {
          return icu::number::impl::DecimalQuantity::toLong(*((icu::number::impl::DecimalQuantity **)this + 4), 0);
        }
        else
        {
          *a2 = U_INVALID_FORMAT_ERROR;
          if (icu::number::impl::DecimalQuantity::isNegative(*((icu::number::impl::DecimalQuantity **)this
                                                                            + 4)))
            return 0x8000000000000000;
          else
            return 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      else
      {
        return (uint64_t)v10;
      }
    }
    else
    {
      *a2 = U_INVALID_FORMAT_ERROR;
      return 0x8000000000000000;
    }
  }
  else
  {
    *a2 = U_INVALID_FORMAT_ERROR;
    return 0x7FFFFFFFFFFFFFFFLL;
  }
}

double icu::Formattable::getDouble(icu::Formattable *this, UErrorCode *a2)
{
  double v2;
  int v4;
  uint64_t v5;
  void *v6;
  UErrorCode v8;

  v2 = 0.0;
  if (*(int *)a2 <= 0)
  {
    while (1)
    {
      v4 = *((_DWORD *)this + 10);
      if (v4 != 6)
        break;
      v5 = *((_QWORD *)this + 1);
      if (!v5)
      {
        v8 = U_MEMORY_ALLOCATION_ERROR;
        goto LABEL_15;
      }
      this = (icu::Formattable *)(v5 + 8);
      if (!v6)
        goto LABEL_13;
    }
    if (v4 != 1)
    {
      if (v4 == 5 || v4 == 2)
        return (double)*((uint64_t *)this + 1);
LABEL_13:
      v8 = U_INVALID_FORMAT_ERROR;
LABEL_15:
      *a2 = v8;
      return v2;
    }
    return *((double *)this + 1);
  }
  return v2;
}

uint64_t icu::Formattable::getObject(icu::Formattable *this)
{
  if (*((_DWORD *)this + 10) == 6)
    return *((_QWORD *)this + 1);
  else
    return 0;
}

uint64_t icu::Formattable::setDouble(icu::Formattable *this, double a2)
{
  uint64_t result;

  result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 1;
  *((double *)this + 1) = a2;
  return result;
}

uint64_t icu::Formattable::setLong(icu::Formattable *this, int a2)
{
  uint64_t result;

  result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 2;
  *((_QWORD *)this + 1) = a2;
  return result;
}

uint64_t icu::Formattable::setInt64(icu::Formattable *this, uint64_t a2)
{
  uint64_t result;

  result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 5;
  *((_QWORD *)this + 1) = a2;
  return result;
}

uint64_t icu::Formattable::setDate(icu::Formattable *this, double a2)
{
  uint64_t result;

  result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 0;
  *((double *)this + 1) = a2;
  return result;
}

icu::UnicodeString *icu::Formattable::setString(icu::Formattable *this, UChar **a2)
{
  unint64_t v4;
  icu::UnicodeString *result;

  icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 3;
  result = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)3, (icu::UMemory *)0x40, v4);
  if (result)
    result = icu::UnicodeString::UnicodeString(result, a2);
  *((_QWORD *)this + 1) = result;
  return result;
}

_QWORD *icu::Formattable::setArray(icu::Formattable *this, const icu::Formattable *a2, unint64_t a3)
{
  _QWORD *result;

  icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 4;
  result = sub_18BCE09D0((uint64_t)a2, a3);
  *((_QWORD *)this + 1) = result;
  *((_DWORD *)this + 4) = a3;
  return result;
}

uint64_t icu::Formattable::adoptString(icu::Formattable *this, icu::UnicodeString *a2)
{
  uint64_t result;

  result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 3;
  *((_QWORD *)this + 1) = a2;
  return result;
}

uint64_t icu::Formattable::adoptArray(icu::Formattable *this, icu::Formattable *a2, int a3)
{
  uint64_t result;

  result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 4;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = a3;
  return result;
}

uint64_t icu::Formattable::adoptObject(icu::Formattable *this, icu::UObject *a2)
{
  uint64_t result;

  result = icu::Formattable::dispose(this);
  *((_DWORD *)this + 10) = 6;
  *((_QWORD *)this + 1) = a2;
  return result;
}

UChar **icu::Formattable::getString(icu::Formattable *this, UChar **a2, UErrorCode *a3)
{
  UChar **v4;

  if (*((_DWORD *)this + 10) == 3)
  {
    v4 = (UChar **)*((_QWORD *)this + 1);
    if (v4)
    {
      icu::UnicodeString::operator=(a2, v4);
    }
    else if (*(int *)a3 <= 0)
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    if (*(int *)a3 <= 0)
      *a3 = U_INVALID_FORMAT_ERROR;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a2);
  }
  return a2;
}

uint64_t icu::Formattable::getString(icu::Formattable *this, UErrorCode *a2)
{
  uint64_t v2;
  UErrorCode v3;

  if (*((_DWORD *)this + 10) != 3)
  {
    if (*(int *)a2 <= 0)
    {
      v3 = U_INVALID_FORMAT_ERROR;
      goto LABEL_7;
    }
    return (uint64_t)this + 48;
  }
  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    if (*(int *)a2 <= 0)
    {
      v3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_7:
      *a2 = v3;
      return (uint64_t)this + 48;
    }
    return (uint64_t)this + 48;
  }
  return v2;
}

{
  uint64_t v2;
  UErrorCode v3;

  if (*((_DWORD *)this + 10) != 3)
  {
    if (*(int *)a2 <= 0)
    {
      v3 = U_INVALID_FORMAT_ERROR;
      goto LABEL_7;
    }
    return (uint64_t)this + 48;
  }
  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    if (*(int *)a2 <= 0)
    {
      v3 = U_MEMORY_ALLOCATION_ERROR;
LABEL_7:
      *a2 = v3;
      return (uint64_t)this + 48;
    }
    return (uint64_t)this + 48;
  }
  return v2;
}

uint64_t icu::Formattable::getBogus(icu::Formattable *this)
{
  return (uint64_t)this + 48;
}

uint64_t icu::Formattable::getArray(icu::Formattable *this, int *a2, UErrorCode *a3)
{
  uint64_t result;

  if (*((_DWORD *)this + 10) == 4)
  {
    *a2 = *((_DWORD *)this + 4);
    return *((_QWORD *)this + 1);
  }
  else
  {
    if (*(int *)a3 <= 0)
      *a3 = U_INVALID_FORMAT_ERROR;
    result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t icu::Formattable::getDecimalNumber(icu::Formattable *this, UErrorCode *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *CharString;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  if (*(int *)a2 < 1)
  {
    v2 = *((_QWORD *)this + 3);
    if (v2)
    {
      v3 = *(_QWORD *)v2;
      v4 = *(unsigned int *)(v2 + 56);
      v8 = v3;
      v9 = v4;
      return v8;
    }
    CharString = icu::Formattable::internalGetCharString(this, a2);
    if (CharString)
    {
      v6 = *((unsigned int *)CharString + 14);
      v8 = *CharString;
      v9 = v6;
      return v8;
    }
  }
  icu::StringPiece::StringPiece((icu::StringPiece *)&v8, "");
  return v8;
}

uint64_t *icu::Formattable::internalGetCharString(icu::Formattable *this, UErrorCode *a2)
{
  uint64_t *result;
  uint64_t *v5;
  icu::CharString *v6;
  const char *v7;
  int v8;
  icu::number::impl::DecimalQuantity *v9;
  icu::number::impl::DecimalQuantity *v10;
  icu::CharString *v11;
  int v12;
  int Magnitude;
  unsigned int v14;
  icu::CharString *v15;
  void *v16;
  char *v17;
  int v18;
  unint64_t v19;
  int v20;
  _BYTE v21[64];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 3))
    return (uint64_t *)*((_QWORD *)this + 3);
  v5 = (uint64_t *)*((_QWORD *)this + 4);
  if (!v5)
  {
    v9 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(0, (icu::UMemory *)0x48, (unint64_t)a2);
    if (v9)
    {
      v10 = v9;
      icu::number::impl::DecimalQuantity::DecimalQuantity(v9);
      if (*(int *)a2 <= 0)
      {
        icu::Formattable::populateDecimalQuantity(this, v10, a2);
        v5 = (uint64_t *)*(unsigned int *)a2;
        if ((int)v5 < 1)
        {
          *((_QWORD *)this + 4) = v10;
          goto LABEL_5;
        }
      }
      (*(void (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)v10 + 8))(v10);
    }
    else if (*(int *)a2 <= 0)
    {
      result = 0;
      goto LABEL_13;
    }
    return 0;
  }
LABEL_5:
  result = icu::UMemory::operator new(v5, (icu::UMemory *)0x40, (unint64_t)a2);
  if (!result)
  {
    *((_QWORD *)this + 3) = 0;
LABEL_13:
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  *result = (uint64_t)result + 13;
  *((_DWORD *)result + 2) = 40;
  *((_WORD *)result + 6) = 0;
  *((_DWORD *)result + 14) = 0;
  *((_QWORD *)this + 3) = result;
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 32))(*((_QWORD *)this + 4)))
  {
    v6 = (icu::CharString *)*((_QWORD *)this + 3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "Infinity");
    v7 = (const char *)v19;
    v8 = v20;
  }
  else
  {
    if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4)))
    {
      if (!icu::number::impl::DecimalQuantity::isZeroish(*((icu::number::impl::DecimalQuantity **)this + 4)))
      {
        v12 = *((_DWORD *)this + 10);
        if (v12 == 2
          || v12 == 5
          || icu::number::impl::DecimalQuantity::getMagnitude(*((icu::number::impl::DecimalQuantity **)this
                                                                            + 4)) != 0x80000000
          && ((Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(*((icu::number::impl::DecimalQuantity **)this
                                                                            + 4)),
               Magnitude >= 0)
            ? (v14 = Magnitude)
            : (v14 = -Magnitude),
              v14 <= 4))
        {
          v15 = (icu::CharString *)*((_QWORD *)this + 3);
          icu::number::impl::DecimalQuantity::toPlainString(*((icu::number::impl::DecimalQuantity **)this + 4), (uint64_t)v21);
        }
        else
        {
          v15 = (icu::CharString *)*((_QWORD *)this + 3);
          icu::number::impl::DecimalQuantity::toScientificString(*((icu::number::impl::DecimalQuantity **)this + 4), (uint64_t)v21);
        }
        icu::CharString::appendInvariantChars(v15, (const icu::UnicodeString *)v21, a2);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v21);
        return (uint64_t *)*((_QWORD *)this + 3);
      }
      v11 = (icu::CharString *)*((_QWORD *)this + 3);
      v7 = "0";
      v8 = -1;
      goto LABEL_17;
    }
    v6 = (icu::CharString *)*((_QWORD *)this + 3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "NaN");
    v7 = v17;
    v8 = v18;
  }
  v11 = v6;
LABEL_17:
  icu::CharString::append(v11, v7, v8, a2);
  return (uint64_t *)*((_QWORD *)this + 3);
}

void icu::Formattable::populateDecimalQuantity(icu::Formattable *this, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  uint64_t v4;
  int v5;

  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    icu::number::impl::DecimalQuantity::operator=(a2, v4);
  }
  else
  {
    v5 = *((_DWORD *)this + 10);
    switch(v5)
    {
      case 5:
        icu::number::impl::DecimalQuantity::setToLong((void **)a2, *((_QWORD *)this + 1));
        break;
      case 2:
        icu::number::impl::DecimalQuantity::setToInt((void **)a2, *((_DWORD *)this + 2));
        break;
      case 1:
        icu::number::impl::DecimalQuantity::setToDouble((void **)a2, *((double *)this + 1));
        icu::number::impl::DecimalQuantity::roundToInfinity(a2);
        break;
      default:
        *a3 = U_INVALID_STATE_ERROR;
        break;
    }
  }
}

void icu::Formattable::adoptDecimalQuantity(icu::Formattable *this, icu::number::impl::DecimalQuantity *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = a2;
  if (a2)
  {
    if (icu::number::impl::DecimalQuantity::fitsInLong(a2, 0))
    {
      v5 = icu::number::impl::DecimalQuantity::toLong(*((icu::number::impl::DecimalQuantity **)this + 4), 0);
      *((_QWORD *)this + 1) = v5;
      if (v5 == (int)v5)
        v6 = 2;
      else
        v6 = 5;
      *((_DWORD *)this + 10) = v6;
    }
    else
    {
      *((_DWORD *)this + 10) = 1;
      *((double *)this + 1) = icu::number::impl::DecimalQuantity::toDouble(*((icu::number::impl::DecimalQuantity **)this
                                                                           + 4));
    }
  }
}

uint64_t *ufmt_open(_DWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;

  v2 = (uint64_t *)*a1;
  if ((int)v2 > 0)
    return 0;
  v5 = icu::UMemory::operator new(v2, (icu::UMemory *)0x70, a2);
  v3 = v5;
  if (v5)
  {
    v5[6] = (uint64_t)off_1E2256B38;
    *((_WORD *)v5 + 28) = 2;
    *v5 = (uint64_t)off_1E225EEE8;
    v5[1] = 0;
    *((_DWORD *)v5 + 10) = 2;
    v5[3] = 0;
    v5[4] = 0;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(v5 + 6));
  }
  else
  {
    *a1 = 7;
  }
  return v3;
}

uint64_t ufmt_close(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t ufmt_getType(uint64_t a1, int *a2)
{
  if (*a2 <= 0)
    return *(unsigned int *)(a1 + 40);
  else
    return 7;
}

uint64_t ufmt_isNumeric(uint64_t a1)
{
  unint64_t v1;
  char v2;

  v1 = *(unsigned int *)(a1 + 40);
  if (v1 >= 6)
    v2 = 0;
  else
    v2 = 0x10000010100uLL >> (8 * v1);
  return v2 & 1;
}

uint64_t ufmt_getDate(uint64_t result, int *a2)
{
  if (*(_DWORD *)(result + 40))
  {
    if (*a2 <= 0)
      *a2 = 3;
  }
  return result;
}

uint64_t ufmt_getObject(uint64_t a1, int *a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 40) == 6)
    return *(_QWORD *)(a1 + 8);
  result = 0;
  if (*a2 <= 0)
    *a2 = 3;
  return result;
}

uint64_t ufmt_getUChars(uint64_t a1, int *a2, int *a3)
{
  uint64_t v4;
  int v5;
  int v6;

  if (*(_DWORD *)(a1 + 40) == 3)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *a3;
    if (v4)
    {
      if (a2 && v5 <= 0)
      {
        if (*(__int16 *)(v4 + 8) < 0)
          v6 = *(_DWORD *)(v4 + 12);
        else
          v6 = *(unsigned __int16 *)(v4 + 8) >> 5;
        *a2 = v6;
      }
    }
    else
    {
      if (v5 <= 0)
        *a3 = 7;
      v4 = a1 + 48;
    }
    return icu::UnicodeString::getTerminatedBuffer((icu::UnicodeString *)v4);
  }
  else
  {
    if (*a3 <= 0)
      *a3 = 3;
    return 0;
  }
}

uint64_t ufmt_getArrayLength(uint64_t a1, int *a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 40) == 4)
    return *(unsigned int *)(a1 + 16);
  result = 0;
  if (*a2 <= 0)
    *a2 = 3;
  return result;
}

uint64_t ufmt_getArrayItemByIndex(uint64_t a1, unsigned int a2, int *a3)
{
  int v3;
  uint64_t result;
  int v5;

  v3 = *a3;
  if (*(_DWORD *)(a1 + 40) == 4)
  {
    if (v3 <= 0)
    {
      if ((a2 & 0x80000000) == 0 && *(_DWORD *)(a1 + 16) > (signed int)a2)
        return *(_QWORD *)(a1 + 8) + 112 * a2;
      result = 0;
      v5 = 8;
      goto LABEL_10;
    }
    return 0;
  }
  if (v3 > 0)
    return 0;
  result = 0;
  v5 = 3;
LABEL_10:
  *a3 = v5;
  return result;
}

const char *ufmt_getDecNumChars(icu::Formattable *a1, _DWORD *a2, UErrorCode *a3)
{
  uint64_t *CharString;

  if (*(int *)a3 > 0)
    return "";
  CharString = icu::Formattable::internalGetCharString(a1, a3);
  if (*(int *)a3 > 0)
    return "";
  if (!CharString)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return "";
  }
  if (a2)
    *a2 = *((_DWORD *)CharString + 14);
  return (const char *)*CharString;
}

icu::Formattable *icu::Formattable::Formattable(icu::Formattable *this, const char *a2)
{
  unint64_t v4;
  icu::UnicodeString *v5;

  *(_QWORD *)this = off_1E225EEE8;
  *((_QWORD *)this + 6) = off_1E2256B38;
  *((_WORD *)this + 28) = 2;
  icu::Formattable::init(this);
  *((_DWORD *)this + 10) = 3;
  v5 = (icu::UnicodeString *)icu::UMemory::operator new((uint64_t *)3, (icu::UMemory *)0x40, v4);
  if (v5)
    v5 = (icu::UnicodeString *)icu::UnicodeString::UnicodeString(v5, a2);
  *((_QWORD *)this + 1) = v5;
  return this;
}

void *icu::FieldPosition::getStaticClassID(icu::FieldPosition *this)
{
  return &unk_1EE009979;
}

void *icu::FieldPosition::getDynamicClassID(icu::FieldPosition *this)
{
  return &unk_1EE009979;
}

void icu::FieldPosition::~FieldPosition(icu::FieldPosition *this)
{
  void *v1;

  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v1);
}

double icu::FieldPosition::clone(icu::FieldPosition *this, unint64_t a2)
{
  uint64_t v3;
  double result;

  v3 = icu::UMemory::operator new((icu::UMemory *)0x18, a2);
  if (v3)
  {
    *(_QWORD *)v3 = off_1E225EF78;
    result = *((double *)this + 1);
    *(double *)(v3 + 8) = result;
    *(_DWORD *)(v3 + 16) = *((_DWORD *)this + 4);
  }
  return result;
}

uint64_t icu::Format::Format(uint64_t this)
{
  *(_QWORD *)this = off_1E225EF28;
  *(_BYTE *)(this + 8) = 0;
  *(_BYTE *)(this + 165) = 0;
  return this;
}

uint64_t icu::Format::Format(uint64_t this, uint64_t a2)
{
  *(_QWORD *)this = off_1E225EF28;
  return icu::Format::operator=(this, a2);
}

uint64_t icu::Format::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    strcpy((char *)(a1 + 165), (const char *)(a2 + 165));
    strcpy((char *)(a1 + 8), (const char *)(a2 + 8));
  }
  return a1;
}

icu::UnicodeString *icu::Format::format(icu::Format *this, const icu::Formattable *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  icu::UnicodeString *v4;
  _QWORD v6[3];

  v4 = a3;
  if (*(int *)a4 <= 0)
  {
    v6[2] = 0;
    v6[0] = off_1E225EF78;
    v6[1] = 0xFFFFFFFFLL;
    v4 = (icu::UnicodeString *)(*(uint64_t (**)(icu::Format *, const icu::Formattable *, icu::UnicodeString *, _QWORD *, UErrorCode *))(*(_QWORD *)this + 40))(this, a2, a3, v6, a4);
    icu::UObject::~UObject((icu::UObject *)v6);
  }
  return v4;
}

uint64_t icu::Format::format(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t result;

  result = a3;
  if (*a5 <= 0)
    *a5 = 16;
  return result;
}

void icu::Format::parseObject(icu::Format *this, const icu::UnicodeString *a2, icu::Formattable *a3, UErrorCode *a4)
{
  void (**v5)(icu::ParsePosition *__hidden);
  unint64_t v6;

  if (*(int *)a4 <= 0)
  {
    v5 = off_1E224A8B0;
    v6 = 0xFFFFFFFF00000000;
    (*(void (**)(icu::Format *, const icu::UnicodeString *, icu::Formattable *, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)this + 56))(this, a2, a3, &v5);
    if (!(_DWORD)v6)
      *a4 = U_INVALID_FORMAT_ERROR;
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v5);
  }
}

BOOL icu::Format::operator==(_QWORD *a1, _QWORD *a2)
{
  if (!a1)
    __cxa_bad_typeid();
  return sub_18BBE6718(*(_QWORD *)(*a1 - 8), *(_QWORD *)(*a2 - 8));
}

char *icu::Format::syntaxError(icu::Format *this, const icu::UnicodeString *a2, _DWORD *a3, UParseError *a4)
{
  int v5;
  int v7;
  int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  signed int v12;
  int v13;
  int v14;
  uint64_t v15;
  char *result;

  v5 = (int)a2;
  *a3 = 0;
  a3[1] = (_DWORD)a2;
  if ((int)a2 >= 16)
    v7 = (_DWORD)a2 - 15;
  else
    v7 = 0;
  v8 = v5 - v7;
  v9 = a3 + 2;
  icu::UnicodeString::doExtract((char *)this, v7, v5 - v7, (uint64_t)(a3 + 2), 0);
  *((_WORD *)v9 + v8) = 0;
  v10 = v5 + 16;
  if (*((__int16 *)this + 4) < 0)
  {
    v12 = *((_DWORD *)this + 3);
    if (v10 > v12)
      goto LABEL_9;
LABEL_8:
    v12 = v5 + 15;
    goto LABEL_9;
  }
  v11 = *((unsigned __int16 *)this + 4);
  if (v10 <= (int)(v11 >> 5))
    goto LABEL_8;
  v12 = v11 >> 5;
LABEL_9:
  v13 = v5 + 1;
  v14 = v12 - (v5 + 1);
  v15 = (uint64_t)(a3 + 10);
  result = icu::UnicodeString::doExtract((char *)this, v13, v12 - v13, v15, 0);
  *(_WORD *)(v15 + 2 * v14) = 0;
  return result;
}

uint64_t icu::Format::getLocale@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::Locale *a4@<X8>)
{
  const char *v5[2];

  v5[0] = (const char *)(a1 + 165);
  v5[1] = (const char *)(a1 + 8);
  return icu::LocaleBased::getLocale(v5, a2, a3, a4);
}

uint64_t icu::Format::getLocaleID(uint64_t a1, int a2, int *a3)
{
  _QWORD v4[2];

  v4[0] = a1 + 165;
  v4[1] = a1 + 8;
  return icu::LocaleBased::getLocaleID(v4, a2, a3);
}

char *icu::Format::setLocaleIDs(icu::Format *this, const char *a2, const char *a3)
{
  _QWORD v4[2];

  v4[0] = (char *)this + 165;
  v4[1] = (char *)this + 8;
  return icu::LocaleBased::setLocaleIDs((char *)v4, a2, a3);
}

double icu::FormattedStringBuilder::FormattedStringBuilder(icu::FormattedStringBuilder *this)
{
  double result;

  *(_BYTE *)this = 0;
  *(_QWORD *)&result = 20;
  *((_QWORD *)this + 16) = 20;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  *(_QWORD *)&result = 20;
  *((_QWORD *)this + 16) = 20;
  return result;
}

void icu::FormattedStringBuilder::~FormattedStringBuilder(void **this)
{
  if (*(_BYTE *)this)
  {
    uprv_free(this[1]);
    uprv_free(this[11]);
  }
}

uint64_t icu::FormattedStringBuilder::FormattedStringBuilder(uint64_t this, uint64_t a2)
{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 128) = 20;
  return icu::FormattedStringBuilder::operator=(this, a2);
}

{
  *(_BYTE *)this = 0;
  *(_QWORD *)(this + 128) = 20;
  return icu::FormattedStringBuilder::operator=(this, a2);
}

uint64_t icu::FormattedStringBuilder::operator=(uint64_t a1, uint64_t a2)
{
  size_t v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;
  const void *v9;
  _QWORD *v10;
  const void *v11;
  _BYTE v13[8];
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1 != a2)
  {
    if (*(_BYTE *)a1)
    {
      uprv_free(*(void **)(a1 + 8));
      uprv_free(*(void **)(a1 + 88));
      *(_BYTE *)a1 = 0;
    }
    if (!*(_BYTE *)a2)
    {
      v5 = (void *)(a1 + 8);
      v4 = 40;
      goto LABEL_16;
    }
    v4 = *(unsigned int *)(a2 + 16);
    if ((int)v4 < 41)
    {
      if (!(_DWORD)v4)
      {
LABEL_25:
        *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
        return a1;
      }
      v4 = (int)v4;
      v5 = (void *)(a1 + 8);
LABEL_16:
      if (*(_BYTE *)a2)
        v9 = *(const void **)(a2 + 8);
      else
        v9 = (const void *)(a2 + 8);
      memcpy(v5, v9, 2 * v4);
      v10 = (_QWORD *)(a1 + 88);
      if (*(_BYTE *)a1)
        v10 = (_QWORD *)*v10;
      if (*(_BYTE *)a2)
        v11 = *(const void **)(a2 + 88);
      else
        v11 = (const void *)(a2 + 88);
      memcpy(v10, v11, v4);
      goto LABEL_25;
    }
    v5 = uprv_malloc(2 * v4);
    v6 = uprv_malloc(v4);
    v7 = v6;
    if (v5)
      v8 = v6 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      *(_BYTE *)a1 = 1;
      *(_DWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a1 + 96) = v4;
      *(_QWORD *)(a1 + 88) = v6;
      goto LABEL_16;
    }
    uprv_free(v5);
    uprv_free(v7);
    v13[0] = 0;
    v16 = 20;
    icu::FormattedStringBuilder::operator=(a1, v13);
    if (v13[0])
    {
      uprv_free(v14);
      uprv_free(v15);
    }
  }
  return a1;
}

uint64_t icu::FormattedStringBuilder::length(icu::FormattedStringBuilder *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t icu::FormattedStringBuilder::codePointCount(icu::FormattedStringBuilder *this)
{
  const UChar *v1;

  v1 = (const UChar *)((char *)this + 8);
  if (*(_BYTE *)this)
    v1 = *(const UChar **)v1;
  return u_countChar32(&v1[*((int *)this + 32)], *((_DWORD *)this + 33));
}

uint64_t icu::FormattedStringBuilder::getFirstCodePoint(icu::FormattedStringBuilder *this)
{
  int v1;
  char *v2;
  uint64_t v3;
  uint64_t result;
  int v6;

  v1 = *((_DWORD *)this + 33);
  if (!v1)
    return 0xFFFFFFFFLL;
  v2 = (char *)this + 8;
  if (*(_BYTE *)this)
    v2 = (char *)*((_QWORD *)this + 1);
  v3 = *((int *)this + 32);
  result = *(unsigned __int16 *)&v2[2 * v3];
  if (v1 != 1 && (result & 0xFC00) == 55296)
  {
    v6 = *(unsigned __int16 *)&v2[2 * v3 + 2];
    if ((v6 & 0xFC00) == 0xDC00)
      return (v6 + ((_DWORD)result << 10) - 56613888);
  }
  return result;
}

uint64_t icu::FormattedStringBuilder::getLastCodePoint(icu::FormattedStringBuilder *this)
{
  int v1;
  char *v2;
  int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  int v7;
  char *v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  v1 = *((_DWORD *)this + 33);
  if (!v1)
    return 0xFFFFFFFFLL;
  v2 = (char *)this + 8;
  v3 = *(unsigned __int8 *)this;
  v4 = (char *)this + 8;
  if (*(_BYTE *)this)
    v4 = *(char **)v2;
  v5 = *((int *)this + 32);
  v6 = &v4[2 * v5];
  v7 = v1 - 1;
  if (v1 >= 2 && (*(_WORD *)&v6[2 * v1 - 2] & 0xFC00) == 56320)
  {
    v9 = (char *)this + 8;
    if (*(_BYTE *)this)
      v9 = *(char **)v2;
    if ((*(_WORD *)&v9[2 * v5 + 2 * (v1 - 2)] & 0xFC00) == 0xD800)
      v7 = v1 - 2;
  }
  v10 = (char *)this + 8;
  if (*(_BYTE *)this)
    v10 = *(char **)v2;
  result = *(unsigned __int16 *)&v10[2 * v5 + 2 * v7];
  if ((result & 0xF800) == 0xD800)
  {
    if ((result & 0x400) != 0)
    {
      if (v7 >= 1)
      {
        if (v3)
          v2 = *(char **)v2;
        v15 = *(unsigned __int16 *)&v2[2 * v5 + 2 * (v7 - 1)];
        if ((v15 & 0xFC00) == 0xD800)
        {
          v14 = result + (v15 << 10);
          return (v14 - 56613888);
        }
      }
    }
    else
    {
      v12 = v7 + 1;
      if ((_DWORD)v12 != v1)
      {
        if (v3)
          v2 = *(char **)v2;
        v13 = *(unsigned __int16 *)&v2[2 * v5 + 2 * v12];
        if ((v13 & 0xFC00) == 0xDC00)
        {
          v14 = v13 + ((_DWORD)result << 10);
          return (v14 - 56613888);
        }
      }
    }
  }
  return result;
}

uint64_t icu::FormattedStringBuilder::codePointAt(icu::FormattedStringBuilder *this, int a2)
{
  char *v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  unsigned int v13;

  v3 = (char *)this + 8;
  v4 = *(unsigned __int8 *)this;
  v5 = (char *)this + 8;
  if (*(_BYTE *)this)
    v5 = *(char **)v3;
  v6 = *((int *)this + 32);
  result = *(unsigned __int16 *)&v5[2 * v6 + 2 * a2];
  if ((result & 0xF800) == 0xD800)
  {
    if ((result & 0x400) != 0)
    {
      if (a2 < 1)
        return result;
      if (v4)
        v3 = *(char **)v3;
      v12 = *(unsigned __int16 *)&v3[2 * v6 + 2 * (a2 - 1)];
      v10 = (v12 & 0xFC00) == 55296;
      v11 = result + (v12 << 10);
    }
    else
    {
      v8 = a2 + 1;
      if ((_DWORD)v8 == *((_DWORD *)this + 33))
        return result;
      if (v4)
        v3 = *(char **)v3;
      v9 = *(unsigned __int16 *)&v3[2 * v6 + 2 * v8];
      v10 = (v9 & 0xFC00) == 56320;
      v11 = v9 + ((_DWORD)result << 10);
    }
    v13 = v11 - 56613888;
    if (v10)
      return v13;
    else
      return result;
  }
  return result;
}

uint64_t icu::FormattedStringBuilder::codePointBefore(icu::FormattedStringBuilder *this, int a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v16;

  v2 = (char *)this + 8;
  v3 = (char *)this + 8;
  if (*(_BYTE *)this)
    v3 = *(char **)v2;
  v4 = *((int *)this + 32);
  v5 = a2 - 1;
  if (a2 >= 2 && (*(_WORD *)&v3[2 * v4 + 2 * v5] & 0xFC00) == 0xDC00)
  {
    v6 = (char *)this + 8;
    if (*(_BYTE *)this)
      v6 = *(char **)v2;
    if ((*(_WORD *)&v6[2 * v4 + 2 * (a2 - 2)] & 0xFC00) == 0xD800)
      v5 = a2 - 2;
  }
  v7 = (char *)this + 8;
  if (*(_BYTE *)this)
    v7 = *(char **)v2;
  v8 = *(unsigned __int16 *)&v7[2 * v4 + 2 * v5];
  if ((v8 & 0xF800) == 0xD800)
  {
    if ((v8 & 0x400) != 0)
    {
      v13 = __OFSUB__(v5, 1);
      v14 = v5 - 1;
      if (v14 < 0 != v13)
        return v8;
      if (*(_BYTE *)this)
        v2 = *(char **)v2;
      v15 = *(unsigned __int16 *)&v2[2 * v4 + 2 * v14];
      v11 = (v15 & 0xFC00) == 55296;
      v12 = v8 + (v15 << 10);
    }
    else
    {
      v9 = v5 + 1;
      if ((_DWORD)v9 == *((_DWORD *)this + 33))
        return v8;
      if (*(_BYTE *)this)
        v2 = *(char **)v2;
      v10 = *(unsigned __int16 *)&v2[2 * v4 + 2 * v9];
      v11 = (v10 & 0xFC00) == 56320;
      v12 = v10 + ((_DWORD)v8 << 10);
    }
    v16 = v12 - 56613888;
    if (v11)
      return v16;
    else
      return v8;
  }
  return v8;
}

uint64_t icu::FormattedStringBuilder::clear(uint64_t this)
{
  int v1;

  if (*(_BYTE *)this)
    v1 = *(_DWORD *)(this + 16) / 2;
  else
    v1 = 20;
  *(_DWORD *)(this + 128) = v1;
  *(_DWORD *)(this + 132) = 0;
  return this;
}

uint64_t icu::FormattedStringBuilder::insertCodePoint(_QWORD *a1, int a2, unsigned int a3, char a4, UErrorCode *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  if (a3 < 0x10000)
    v9 = 1;
  else
    v9 = 2;
  v10 = icu::FormattedStringBuilder::prepareForInsert((icu::FormattedStringBuilder *)a1, a2, v9, a5);
  if (*(int *)a5 <= 0)
  {
    if (HIWORD(a3))
    {
      v13 = (a3 >> 10) - 10304;
      v14 = a1 + 1;
      v11 = v10;
      if (*(_BYTE *)a1)
      {
        *(_WORD *)(a1[1] + 2 * v10) = v13;
        v15 = v10 + 1;
        *(_WORD *)(a1[1] + 2 * v15) = a3 & 0x3FF | 0xDC00;
        v12 = a1 + 11;
        v16 = (_QWORD *)a1[11];
      }
      else
      {
        *((_WORD *)v14 + v10) = v13;
        v15 = v10 + 1;
        *((_WORD *)v14 + v15) = a3 & 0x3FF | 0xDC00;
        v12 = a1 + 11;
        v16 = a1 + 11;
      }
      *((_BYTE *)v16 + v15) = a4;
      if (*(_BYTE *)a1)
        v12 = (_QWORD *)*v12;
    }
    else
    {
      v11 = v10;
      if (*(_BYTE *)a1)
      {
        *(_WORD *)(a1[1] + 2 * v10) = a3;
        v12 = (_QWORD *)a1[11];
      }
      else
      {
        *((_WORD *)a1 + v10 + 4) = a3;
        v12 = a1 + 11;
      }
    }
    *((_BYTE *)v12 + v11) = a4;
  }
  return v9;
}

uint64_t icu::FormattedStringBuilder::prepareForInsert(icu::FormattedStringBuilder *this, int a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v4;
  int v5;
  int v6;

  if (*(int *)a4 > 0)
    return a3;
  if (a2 || (v4 = (*((_DWORD *)this + 32) - a3), (int)v4 < 0))
  {
    if (*((_DWORD *)this + 33) != a2)
      return icu::FormattedStringBuilder::prepareForInsertHelper(this, a2, a3, a4);
    v5 = *(_BYTE *)this ? *((_DWORD *)this + 4) : 40;
    v4 = (*((_DWORD *)this + 32) + a2);
    if (v5 - (int)v4 < (int)a3)
      return icu::FormattedStringBuilder::prepareForInsertHelper(this, a2, a3, a4);
    v6 = a2 + a3;
  }
  else
  {
    v6 = *((_DWORD *)this + 33) + a3;
    *((_DWORD *)this + 32) = v4;
  }
  *((_DWORD *)this + 33) = v6;
  return v4;
}

uint64_t icu::FormattedStringBuilder::insert(icu::FormattedStringBuilder *a1, int a2, uint64_t a3, char a4, int a5, UErrorCode *a6)
{
  unsigned int v7;
  int v8;
  unsigned __int16 *v9;

  v7 = *(unsigned __int16 *)(a3 + 8);
  if (*(__int16 *)(a3 + 8) < 0)
  {
    v8 = *(_DWORD *)(a3 + 12);
    if (v8)
    {
      if (v8 != 1 || (a5 & 1) != 0)
        return icu::FormattedStringBuilder::insert(a1, a2, a3, 0, v8, a4, a5, a6);
      goto LABEL_9;
    }
    return 0;
  }
  if (v7 < 0x20)
    return 0;
  if ((v7 & 0xFFE0) != 0x20 || (a5 & 1) != 0)
  {
    v8 = v7 >> 5;
    return icu::FormattedStringBuilder::insert(a1, a2, a3, 0, v8, a4, a5, a6);
  }
LABEL_9:
  if ((v7 & 2) != 0)
    v9 = (unsigned __int16 *)(a3 + 10);
  else
    v9 = *(unsigned __int16 **)(a3 + 24);
  return icu::FormattedStringBuilder::insertCodePoint(a1, a2, *v9, a4, a6);
}

uint64_t icu::FormattedStringBuilder::insert(icu::FormattedStringBuilder *a1, int a2, uint64_t a3, unsigned int a4, int a5, char a6, int a7, UErrorCode *a8)
{
  unsigned int v11;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  __int16 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v11 = a4;
  v14 = a5 - a4;
  if (a7)
    v15 = 2;
  else
    v15 = 0;
  v16 = (v15 + v14);
  v17 = icu::FormattedStringBuilder::prepareForInsert(a1, a2, v16, a8);
  if (*(int *)a8 <= 0)
  {
    if (a7)
    {
      if (*(_BYTE *)a1)
      {
        *(_WORD *)(*((_QWORD *)a1 + 1) + 2 * v17) = 8296;
        v18 = (_QWORD *)*((_QWORD *)a1 + 11);
      }
      else
      {
        *((_WORD *)a1 + v17 + 4) = 8296;
        v18 = (_QWORD *)((char *)a1 + 88);
      }
      *((_BYTE *)v18 + v17++) = a6;
    }
    if ((int)v14 >= 1)
    {
      v19 = 0;
      v20 = 2 * (int)v11;
      v21 = v14;
      v22 = v17;
      do
      {
        v23 = *(unsigned __int16 *)(a3 + 8);
        if ((v23 & 0x8000u) == 0)
          v24 = v23 >> 5;
        else
          v24 = *(_DWORD *)(a3 + 12);
        if (v24 <= v11)
        {
          v26 = -1;
        }
        else
        {
          if ((v23 & 2) != 0)
            v25 = a3 + 10;
          else
            v25 = *(_QWORD *)(a3 + 24);
          v26 = *(_WORD *)(v25 + v20);
        }
        if (*(_BYTE *)a1)
        {
          *(_WORD *)(*((_QWORD *)a1 + 1) + 2 * v22) = v26;
          v27 = (_QWORD *)*((_QWORD *)a1 + 11);
          v28 = v22;
        }
        else
        {
          v28 = v19 + v17;
          *((_WORD *)a1 + v22 + 4) = v26;
          v27 = (_QWORD *)((char *)a1 + 88);
        }
        *((_BYTE *)v27 + v28) = a6;
        ++v19;
        ++v22;
        v20 += 2;
        ++v11;
        --v21;
      }
      while (v21);
    }
    if ((a7 & 1) != 0)
    {
      v29 = v17 + (uint64_t)(int)v14;
      if (*(_BYTE *)a1)
      {
        *(_WORD *)(*((_QWORD *)a1 + 1) + 2 * v29) = 8297;
        v30 = (_QWORD *)*((_QWORD *)a1 + 11);
      }
      else
      {
        *((_WORD *)a1 + v29 + 4) = 8297;
        v30 = (_QWORD *)((char *)a1 + 88);
      }
      *((_BYTE *)v30 + v29) = a6;
    }
  }
  return v16;
}

uint64_t icu::FormattedStringBuilder::splice(icu::FormattedStringBuilder *this, int a2, int a3, uint64_t a4, unsigned int a5, int a6, char a7, UErrorCode *a8)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v12;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v8 = a6 - a5;
  v9 = (v8 + a2 - a3);
  if (*(int *)a8 <= 0)
  {
    v12 = a5;
    v15 = (int)v9 < 1
        ? icu::FormattedStringBuilder::remove(this, a2, -(int)v9)
        : icu::FormattedStringBuilder::prepareForInsert(this, a2, (v8 + a2 - a3), a8);
    if (*(int *)a8 <= 0 && (int)v8 >= 1)
    {
      v17 = 0;
      v18 = 2 * (int)v12;
      v19 = v15;
      do
      {
        v20 = *(unsigned __int16 *)(a4 + 8);
        if ((v20 & 0x8000u) == 0)
          v21 = v20 >> 5;
        else
          v21 = *(_DWORD *)(a4 + 12);
        if (v21 <= v12)
        {
          v23 = -1;
        }
        else
        {
          if ((v20 & 2) != 0)
            v22 = a4 + 10;
          else
            v22 = *(_QWORD *)(a4 + 24);
          v23 = *(_WORD *)(v22 + v18);
        }
        if (*(_BYTE *)this)
        {
          *(_WORD *)(*((_QWORD *)this + 1) + 2 * v19) = v23;
          v24 = (char *)*((_QWORD *)this + 11);
          v25 = v19;
        }
        else
        {
          v25 = v17 + v15;
          *((_WORD *)this + v19 + 4) = v23;
          v24 = (char *)this + 88;
        }
        v24[v25] = a7;
        ++v17;
        ++v19;
        v18 += 2;
        ++v12;
        --v8;
      }
      while (v8);
    }
  }
  return v9;
}

uint64_t icu::FormattedStringBuilder::remove(icu::FormattedStringBuilder *this, int a2, int a3)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  int v10;
  int v11;
  _QWORD *v12;
  int v13;

  v5 = *((int *)this + 32) + (uint64_t)a2;
  v6 = *(unsigned __int8 *)this;
  v7 = (_QWORD *)((char *)this + 8);
  if (*(_BYTE *)this)
  {
    v7 = (_QWORD *)*v7;
    v8 = (int)v5;
    v9 = (char *)v7 + 2 * (int)v5;
  }
  else
  {
    v9 = (char *)v7 + 2 * v5;
    v8 = v5;
  }
  v10 = a3 + a2;
  v11 = *((_DWORD *)this + 33) - (a3 + a2);
  if (v11)
  {
    memmove(v9, (char *)v7 + 2 * v8 + 2 * a3, 2 * v11);
    v6 = *(unsigned __int8 *)this;
  }
  v12 = (_QWORD *)((char *)this + 88);
  if (v6)
    v12 = (_QWORD *)*v12;
  v13 = *((_DWORD *)this + 33) - v10;
  if (v13)
  {
    memmove((char *)v12 + v8, (char *)v12 + v8 + a3, v13);
    v10 = *((_DWORD *)this + 33);
  }
  *((_DWORD *)this + 33) = v10 - a3;
  return v5;
}

uint64_t icu::FormattedStringBuilder::append(icu::FormattedStringBuilder *this, const icu::FormattedStringBuilder *a2, UErrorCode *a3)
{
  return icu::FormattedStringBuilder::insert(this, *((_DWORD *)this + 33), a2, a3);
}

uint64_t icu::FormattedStringBuilder::insert(icu::FormattedStringBuilder *this, int a2, const icu::FormattedStringBuilder *a3, UErrorCode *a4)
{
  uint64_t v4;
  int v9;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  char *v18;
  char *v19;

  if (*(int *)a4 > 0)
    return 0;
  if (this == a3)
  {
    v4 = 0;
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  else
  {
    v4 = *((unsigned int *)a3 + 33);
    if ((_DWORD)v4)
    {
      v9 = icu::FormattedStringBuilder::prepareForInsert(this, a2, *((unsigned int *)a3 + 33), a4);
      if (*(int *)a4 <= 0 && (int)v4 >= 1)
      {
        v10 = 0;
        v11 = (char **)((char *)a3 + 88);
        v12 = v9;
        do
        {
          v13 = *(unsigned __int8 *)a3;
          if (*(_BYTE *)a3)
            v14 = (char *)*((_QWORD *)a3 + 1);
          else
            v14 = (char *)a3 + 8;
          v15 = *((int *)a3 + 32);
          v16 = *(_WORD *)&v14[2 * v10 + 2 * v15];
          if (*(_BYTE *)this)
          {
            v17 = v10 + v9;
            *(_WORD *)(*((_QWORD *)this + 1) + 2 * v12) = v16;
            if (v13)
              v18 = *v11;
            else
              v18 = (char *)a3 + 88;
            v19 = (char *)*((_QWORD *)this + 11);
          }
          else
          {
            *((_WORD *)this + v12 + 4) = v16;
            if (v13)
              v18 = *v11;
            else
              v18 = (char *)a3 + 88;
            v17 = v12;
            v19 = (char *)this + 88;
          }
          v19[v17] = v18[v15 + v10++];
          ++v12;
        }
        while (v4 != v10);
      }
    }
  }
  return v4;
}

uint64_t icu::FormattedStringBuilder::writeTerminator(icu::FormattedStringBuilder *this, UErrorCode *a2)
{
  uint64_t result;
  char *v5;

  result = icu::FormattedStringBuilder::prepareForInsert(this, *((_DWORD *)this + 33), 1, a2);
  if (*(int *)a2 <= 0)
  {
    if (*(_BYTE *)this)
    {
      *(_WORD *)(*((_QWORD *)this + 1) + 2 * (int)result) = 0;
      v5 = (char *)*((_QWORD *)this + 11);
    }
    else
    {
      *((_WORD *)this + (int)result + 4) = 0;
      v5 = (char *)this + 88;
    }
    v5[(int)result] = 0;
    --*((_DWORD *)this + 33);
  }
  return result;
}

uint64_t icu::FormattedStringBuilder::prepareForInsertHelper(icu::FormattedStringBuilder *this, int a2, int a3, UErrorCode *a4)
{
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  UErrorCode v12;
  int v14;
  int v15;
  size_t v16;
  int v17;
  char *v18;
  char *v19;
  void *v20;
  int v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  size_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  char *v36;
  uint64_t v37;
  int v38;
  int v39;

  if (*(_BYTE *)this)
  {
    v8 = *((_DWORD *)this + 4);
    v9 = (char *)*((_QWORD *)this + 1);
    v10 = (char *)*((_QWORD *)this + 11);
  }
  else
  {
    v9 = (char *)this + 8;
    v10 = (char *)this + 88;
    v8 = 40;
  }
  v39 = 0;
  v11 = *((int *)this + 32);
  if (uprv_add32_overflow(*((_DWORD *)this + 33), a3, &v39))
    goto LABEL_5;
  v14 = v39;
  v15 = v8 - v39;
  if (v8 >= v39)
  {
    if (v15 >= 0)
      v29 = v8 - v39;
    else
      v29 = v15 + 1;
    v21 = v29 >> 1;
    v30 = *((int *)this + 33);
    if ((_DWORD)v30)
    {
      memmove(&v9[2 * v21], &v9[2 * v11], 2 * v30);
      LODWORD(v30) = *((_DWORD *)this + 33);
    }
    v31 = a2;
    v32 = v30 - a2;
    if (v32)
    {
      memmove(&v9[2 * (v29 >> 1) + 2 * a2 + 2 * a3], &v9[2 * (v29 >> 1) + 2 * a2], 2 * v32);
      v31 = *((_DWORD *)this + 33);
    }
    v33 = &v10[(uint64_t)v29 >> 1];
    if (v31)
    {
      memmove(v33, &v10[v11], v31);
      v34 = *((_DWORD *)this + 33);
    }
    else
    {
      v34 = 0;
    }
    v35 = v34 - a2;
    if (v35)
      memmove(&v33[a2 + a3], &v33[a2], v35);
  }
  else
  {
    if (v39 >= 0x40000000)
    {
LABEL_5:
      v12 = U_INPUT_TOO_LONG_ERROR;
LABEL_6:
      *a4 = v12;
      return 0xFFFFFFFFLL;
    }
    v16 = 2 * v39;
    if (v39 >= 0)
      v17 = v39;
    else
      v17 = v39 + 1;
    v18 = (char *)uprv_malloc(4 * v39);
    v38 = v16;
    v19 = (char *)uprv_malloc(v16);
    v20 = v19;
    if (!v18 || !v19)
    {
      uprv_free(v18);
      uprv_free(v20);
      v12 = U_MEMORY_ALLOCATION_ERROR;
      goto LABEL_6;
    }
    v36 = v19;
    v21 = v17 >> 1;
    v22 = a2;
    if (a2)
    {
      memcpy(&v18[2 * v21], &v9[2 * v11], 2 * a2);
      v22 = a2;
    }
    v23 = v21;
    v24 = a3;
    v25 = *((_DWORD *)this + 33);
    v26 = v25 - a2;
    v37 = v24;
    if (v25 != a2)
    {
      memcpy(&v18[2 * v21 + 2 * v22 + 2 * v24], &v9[2 * v11 + 2 * v22], 2 * (v25 - a2));
      v23 = v21;
      v26 = v25 - a2;
      v22 = a2;
      v24 = v37;
    }
    v27 = &v36[v23];
    v28 = &v10[v11];
    if (a2)
    {
      memcpy(&v36[v23], v28, v22);
      v26 = v25 - a2;
      v22 = a2;
      v24 = v37;
    }
    if (v25 != a2)
      memcpy(&v27[v22 + v24], &v28[v22], v26);
    if (*(_BYTE *)this)
    {
      uprv_free(v9);
      uprv_free(v10);
    }
    *(_BYTE *)this = 1;
    *((_QWORD *)this + 1) = v18;
    *((_DWORD *)this + 4) = v38;
    *((_QWORD *)this + 11) = v36;
    *((_DWORD *)this + 24) = v38;
    v14 = v39;
  }
  *((_DWORD *)this + 32) = v21;
  *((_DWORD *)this + 33) = v14;
  return (v21 + a2);
}

uint64_t icu::FormattedStringBuilder::toUnicodeString@<X0>(icu::FormattedStringBuilder *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)((char *)this + 8);
  if (*(_BYTE *)this)
    v4 = (_QWORD *)*v4;
  return icu::UnicodeString::UnicodeString(a2, (uint64_t)v4 + 2 * *((int *)this + 32), *((unsigned int *)this + 33));
}

uint64_t icu::FormattedStringBuilder::toTempUnicodeString@<X0>(icu::FormattedStringBuilder *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  char *v6;

  v4 = (_QWORD *)((char *)this + 8);
  if (*(_BYTE *)this)
    v4 = (_QWORD *)*v4;
  v6 = (char *)v4 + 2 * *((int *)this + 32);
  return icu::UnicodeString::UnicodeString(a2, 0, &v6);
}

uint64_t icu::FormattedStringBuilder::toDebugString@<X0>(icu::FormattedStringBuilder *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t i;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int16 v13;
  char *v14;
  __int16 v16;
  unsigned __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  icu::UnicodeString::doAppend(a2, (uint64_t)"<", 0, 0xFFFFFFFFLL);
  v4 = (_QWORD *)((char *)this + 8);
  if (*(_BYTE *)this)
    v4 = (_QWORD *)*v4;
  icu::UnicodeString::UnicodeString((uint64_t)&v16, (uint64_t)v4 + 2 * *((int *)this + 32), *((unsigned int *)this + 33));
  if ((v17 & 0x8000u) == 0)
    v5 = v17 >> 5;
  else
    v5 = v18;
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v16, 0, v5);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v16);
  icu::UnicodeString::doAppend(a2, (uint64_t)"]", 0, 0xFFFFFFFFLL);
  if (*((int *)this + 33) >= 1)
  {
    for (i = 0; (int)i < *((_DWORD *)this + 33); ++i)
    {
      if (*(_BYTE *)this)
      {
        v8 = *((int *)this + 32);
        v9 = *(unsigned __int8 *)(*((_QWORD *)this + 11) + v8 + i);
        if (!*(_BYTE *)(*((_QWORD *)this + 11) + v8 + i))
          goto LABEL_17;
        if ((v9 & 0xF0) == 0x20)
        {
          v10 = v8 + (int)i;
          goto LABEL_15;
        }
      }
      else
      {
        v11 = *((int *)this + 32);
        v9 = *((unsigned __int8 *)this + i + v11 + 88);
        if (!*((_BYTE *)this + i + v11 + 88))
        {
LABEL_17:
          v16 = 110;
          goto LABEL_23;
        }
        if ((v9 & 0xF0) == 0x20)
        {
          v10 = i + v11;
LABEL_15:
          v12 = v9 & 0xF;
          if (v12 >= 0xB)
          {
            v14 = (char *)this + 88;
            if (*(_BYTE *)this)
              v14 = (char *)*((_QWORD *)this + 11);
            v13 = v14[v10] & 0xF | 0x30;
          }
          else
          {
            v13 = aIfEE[v12];
          }
          v16 = v13;
LABEL_23:
          icu::UnicodeString::doAppend(a2, (uint64_t)&v16, 0, 1);
          continue;
        }
      }
      icu::UnicodeString::append(a2, (v9 >> 4) | 0x30);
    }
  }
  return icu::UnicodeString::doAppend(a2, (uint64_t)"]", 0, 0xFFFFFFFFLL);
}

uint64_t icu::FormattedStringBuilder::chars(icu::FormattedStringBuilder *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 8);
  if (*(_BYTE *)this)
    v1 = (_QWORD *)*v1;
  return (uint64_t)v1 + 2 * *((int *)this + 32);
}

BOOL icu::FormattedStringBuilder::contentEquals(icu::FormattedStringBuilder *this, const icu::FormattedStringBuilder *a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *((unsigned int *)this + 33);
  if ((_DWORD)v2 == *((_DWORD *)a2 + 33))
  {
    if ((int)v2 < 1)
    {
      return 1;
    }
    else
    {
      v3 = 0;
      v4 = 0;
      v5 = *(unsigned __int8 *)this;
      v6 = (_QWORD *)((char *)this + 8);
      v7 = *((int *)this + 32);
      v8 = *(_BYTE *)a2 == 0;
      if (*(_BYTE *)a2)
        v9 = (char *)*((_QWORD *)a2 + 1);
      else
        v9 = (char *)a2 + 8;
      v10 = *((int *)a2 + 32);
      v11 = (_QWORD *)((char *)this + 88);
      v14 = (char *)*((_QWORD *)a2 + 11);
      v12 = (char *)a2 + 88;
      v13 = v14;
      if (v8)
        v13 = v12;
      v15 = *((int *)this + 32);
      v16 = v10;
      do
      {
        if (v5)
        {
          if (*(unsigned __int16 *)(*v6 + 2 * v15) != *(unsigned __int16 *)&v9[2 * v16])
            return v4;
          v17 = (_QWORD *)*v11;
          v18 = v15;
          v19 = v16;
        }
        else
        {
          if (*((unsigned __int16 *)v6 + v15) != *(unsigned __int16 *)&v9[2 * v16])
            return v4;
          v18 = v3 + v7;
          v19 = v3 + v10;
          v17 = v11;
        }
        if (*((unsigned __int8 *)v17 + v18) != v13[v19])
          break;
        v4 = ++v3 >= v2;
        ++v16;
        ++v15;
      }
      while (v2 != v3);
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

BOOL icu::FormattedStringBuilder::containsField(uint64_t a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a1 + 132);
  if ((int)v2 < 1)
  {
    return 0;
  }
  else
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = a1 + 88;
      if (*(_BYTE *)a1)
        v5 = *(_QWORD *)(a1 + 88);
      if (*(unsigned __int8 *)(v5 + *(int *)(a1 + 128) + v3) == a2)
        break;
      v4 = ++v3 < v2;
    }
    while (v2 != v3);
  }
  return v4;
}

uint64_t sub_18BCE34A8(uint64_t a1, int a2, UErrorCode *a3)
{
  *(_QWORD *)a1 = off_1E225EFD0;
  *(_QWORD *)(a1 + 8) = off_1E2256B38;
  *(_WORD *)(a1 + 16) = 2;
  icu::UVector32::UVector32((icu::UVector32 *)(a1 + 72), 4 * a2, a3);
  return a1;
}

void sub_18BCE34F4(void **a1)
{
  icu::UnicodeString *v2;
  void *v3;

  *a1 = off_1E225EFD0;
  v2 = (icu::UnicodeString *)(a1 + 1);
  icu::UVector32::~UVector32(a1 + 9);
  icu::UnicodeString::~UnicodeString(v3, v2);
  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)a1);
}

void sub_18BCE3538(void **a1)
{
  void *v1;

  sub_18BCE34F4(a1);
  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *sub_18BCE354C@<X0>(uint64_t a1@<X0>, icu::UnicodeString *a2@<X8>)
{
  return icu::UnicodeString::UnicodeString(a2, (UChar **)(a1 + 8));
}

uint64_t sub_18BCE3558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_WORD *)(a1 + 16);
  if ((v4 & 0x11) != 0)
  {
    v5 = 0;
  }
  else if ((v4 & 2) != 0)
  {
    v5 = a1 + 18;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
  }
  v7 = v5;
  return icu::UnicodeString::UnicodeString(a2, 1, &v7);
}

uint64_t sub_18BCE35CC(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int16 *)(a1 + 16);
  if ((v3 & 0x11) == 0)
  {
    if ((v3 & 2) != 0)
    {
      v4 = a1 + 18;
      if ((v3 & 0x8000) == 0)
        goto LABEL_6;
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 32);
      if ((v3 & 0x8000) == 0)
        goto LABEL_6;
    }
LABEL_8:
    v5 = *(unsigned int *)(a1 + 20);
    goto LABEL_9;
  }
  v4 = 0;
  if ((v3 & 0x8000) != 0)
    goto LABEL_8;
LABEL_6:
  v5 = v3 >> 5;
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v4, v5);
  return a2;
}

BOOL sub_18BCE3638(uint64_t a1, icu::ConstrainedFieldPosition *this)
{
  int v3;
  int v4;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v3 = *(_DWORD *)(a1 + 80) / 4;
  v4 = *(_DWORD *)this;
  if (v3 <= *(_DWORD *)this)
  {
    v7 = 0;
  }
  else
  {
    v6 = (4 * v4) | 3;
    v7 = 1;
    while (1)
    {
      if (v4 < 0 || ((v8 = v6 - 3, v9 = *(_DWORD *)(a1 + 80), v9 >= 1) ? (v10 = v9 <= v8) : (v10 = 1), v10))
        v11 = 0;
      else
        v11 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v8);
      v12 = v6 - 2;
      if (v6 - 2 < 0 || ((v13 = *(_DWORD *)(a1 + 80), v13 >= 1) ? (v14 = v13 <= v12) : (v14 = 1), v14))
        v15 = 0;
      else
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v12);
      if (icu::ConstrainedFieldPosition::matchesField(this, v11, v15))
        break;
      v7 = ++v4 < v3;
      v6 += 4;
      if (v3 == v4)
      {
        v4 = v3;
        goto LABEL_30;
      }
    }
    v16 = 0;
    v17 = v6 - 1;
    if (v6 - 1 >= 0)
    {
      v18 = *(_DWORD *)(a1 + 80);
      if (v18 >= 1 && v18 > v17)
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v17);
    }
    v19 = 0;
    if ((v6 & 0x80000000) == 0)
    {
      v20 = *(_DWORD *)(a1 + 80);
      if (v20 >= 1 && v20 > v6)
        v19 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 4 * v6);
    }
    icu::ConstrainedFieldPosition::setState(this, v11, v15, v16, v19);
  }
LABEL_30:
  if (v4 == v3)
    v21 = v4;
  else
    v21 = v4 + 1;
  icu::ConstrainedFieldPosition::setInt64IterationContext(this, v21);
  return v7;
}

uint64_t sub_18BCE379C@<X0>(UErrorCode *a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  return icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler(a3, (icu::UVector32 *)(a2 + 72), a1);
}

uint64_t sub_18BCE37AC(uint64_t result, uint64_t a2, int *a3)
{
  icu::UnicodeString *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  if (*a3 <= 0)
  {
    v4 = (icu::UnicodeString *)(result + 8);
    v5 = *(unsigned __int16 *)(a2 + 8);
    v6 = (__int16)v5;
    v7 = v5 >> 5;
    if (v6 >= 0)
      v8 = v7;
    else
      v8 = *(unsigned int *)(a2 + 12);
    icu::UnicodeString::doAppend(result + 8, (const icu::UnicodeString *)a2, 0, v8);
    result = icu::UnicodeString::getTerminatedBuffer(v4);
    if (!result)
      *a3 = 7;
  }
  return result;
}

uint64_t sub_18BCE3810(uint64_t result, int a2, int a3, UErrorCode *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  icu::UVector32 *v31;
  unsigned int v35;

  v4 = *(unsigned int *)(result + 80);
  if ((int)v4 >= 4)
  {
    v5 = result;
    v6 = 0;
    result = 0;
    v7 = 0;
    v31 = (icu::UVector32 *)(v5 + 72);
    v8 = v4 >> 2;
    v9 = 0x7FFFFFFFLL;
    v10 = 1;
    v11 = 5;
    v35 = 0x7FFFFFFF;
    do
    {
      v12 = (4 * v6) | 1;
      v13 = *(int *)(v5 + 80);
      if ((int)v13 >= 1 && v12 < v13)
        v15 = *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v12);
      else
        v15 = 0;
      v16 = v6 + 1;
      if (v6 + 1 < v8)
      {
        v17 = 4 * v6;
        v18 = v8;
        v19 = v11;
        while (1)
        {
          v20 = 0;
          if ((int)v13 >= 1 && v19 < v13)
            v20 = *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v19);
          if (v15 == v20)
            break;
          v19 += 4;
          if (v10 == --v18)
            goto LABEL_30;
        }
        v21 = 0;
        v22 = result;
        if ((int)v13 >= 1 && (v17 | 2) < v13)
          v21 = *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * (v17 | 2));
        v9 = uprv_min(v9, v21);
        v23 = 0;
        v24 = *(int *)(v5 + 80);
        if ((int)v24 >= 1 && (v17 | 3) < v24)
          v23 = *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * (v17 | 3));
        v7 = uprv_max(v7, v23);
        v25 = 0;
        v26 = *(_DWORD *)(v5 + 80);
        if (v26 >= 1 && v26 > (int)v19 + 1)
          v25 = *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * (v19 + 1));
        v35 = uprv_min(v35, v25);
        v27 = 0;
        v28 = *(_DWORD *)(v5 + 80);
        if (v28 >= 1 && v28 > (int)v19 + 2)
          v27 = *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * (v19 + 2));
        result = uprv_max(v22, v27);
      }
LABEL_30:
      ++v10;
      v11 += 4;
      v6 = v16;
    }
    while (v16 != v8);
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v29 = result;
      v30 = *(_DWORD *)(v5 + 80);
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v30) = a2;
        v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v30) = a3;
        v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v30) = v9;
        v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v30) = v7;
        v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v30) = a2;
        v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v30) = 1 - a3;
        v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 >= -1 && *(_DWORD *)(v5 + 84) > v30
        || (result = icu::UVector32::expandCapacity(v31, v30 + 1, a4), v30 = *(_DWORD *)(v5 + 80), (_DWORD)result))
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v30) = v35;
        v30 = *(_DWORD *)(v5 + 80) + 1;
        *(_DWORD *)(v5 + 80) = v30;
      }
      if (v30 < -1 || *(_DWORD *)(v5 + 84) <= v30)
      {
        result = icu::UVector32::expandCapacity(v31, v30 + 1, a4);
        if (!(_DWORD)result)
          return result;
        v30 = *(_DWORD *)(v5 + 80);
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 96) + 4 * v30) = v29;
      ++*(_DWORD *)(v5 + 80);
    }
  }
  return result;
}

uint64_t sub_18BCE3C08(uint64_t result)
{
  int v1;
  int v2;
  int v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;

  v1 = *(_DWORD *)(result + 80);
  v2 = v1 + 3;
  if (v1 >= 0)
    v2 = *(_DWORD *)(result + 80);
  if (v1 >= 8)
  {
    v3 = 0;
    v4 = (v2 >> 2) - 1;
    v5 = 1;
    v26 = v4;
    v25 = result;
    v6 = result + 72;
    while (1)
    {
      v7 = 0;
      v8 = 4 * v3;
      if (v1 >= 1 && v1 > (int)v8)
        v7 = *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v8);
      v9 = 0;
      v10 = v8 | 1;
      if (v1 >= 1 && v1 > (int)v10)
        v9 = *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v10);
      v11 = 0;
      v12 = v8 | 2;
      if (v1 >= 1 && v1 > (int)v12)
        v11 = *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v12);
      v13 = 0;
      v14 = v8 | 3;
      if (v1 >= 1 && v1 > (int)v14)
        v13 = *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v14);
      v15 = 0;
      v16 = v8 + 4;
      if (v1 >= 1 && v1 > v16)
        v15 = *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v16);
      v17 = 0;
      v18 = v8 + 5;
      if (v1 >= 1 && v1 > v18)
        v17 = *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v18);
      v19 = 0;
      v20 = v8 + 6;
      if (v1 >= 1 && v1 > (int)v20)
        v19 = *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v20);
      v21 = 0;
      v22 = v8 + 7;
      if (v1 >= 1 && v1 > (int)v22)
        v21 = *(_DWORD *)(*(_QWORD *)(result + 96) + 4 * v22);
      v23 = v19 - v11;
      if (v19 == v11 && (v23 = v13 - v21, v13 == v21) && (v23 = v7 - v15, v7 == v15) && (v23 = v17 - v9, v17 == v9)
        || (v23 & 0x80000000) == 0)
      {
        v24 = v3 + 1 >= v4;
        if (v3 + 1 < v4)
          ++v3;
        else
          v3 = 0;
        if ((v24 & v5 & 1) != 0)
          return result;
        v5 |= v24;
      }
      else
      {
        v27 = v8 + 4;
        v28 = v7;
        v30 = v9;
        v31 = v11;
        v32 = v13;
        v29 = v8 + 5;
        icu::UVector32::setElementAt(v6, v15, v8);
        icu::UVector32::setElementAt(v6, v17, v10);
        icu::UVector32::setElementAt(v6, v19, v12);
        icu::UVector32::setElementAt(v6, v21, v14);
        icu::UVector32::setElementAt(v6, v28, v27);
        icu::UVector32::setElementAt(v6, v30, v29);
        icu::UVector32::setElementAt(v6, v31, v20);
        icu::UVector32::setElementAt(v6, v32, v22);
        result = v25;
        v4 = v26;
        v5 = v3 + 1 >= v26;
        if (v3 + 1 < v26)
          ++v3;
        else
          v3 = 0;
      }
      v1 = *(_DWORD *)(result + 80);
    }
  }
  return result;
}

uint64_t icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl(uint64_t a1, char a2)
{
  *(_QWORD *)a1 = off_1E225F048;
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 8));
  *(_BYTE *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_DWORD *)(a1 + 160) = 8;
  *(_BYTE *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = off_1E225F048;
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 8));
  *(_BYTE *)(a1 + 144) = a2;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_DWORD *)(a1 + 160) = 8;
  *(_BYTE *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  return a1;
}

void icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(void **this)
{
  *this = off_1E225F048;
  if (*((_BYTE *)this + 164))
    uprv_free(this[19]);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(this + 1));
  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)this);
}

{
  void *v1;

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedValueStringBuilderImpl::toString@<X0>(icu::FormattedValueStringBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  return icu::FormattedStringBuilder::toUnicodeString((icu::FormattedValueStringBuilderImpl *)((char *)this + 8), a2);
}

uint64_t icu::FormattedValueStringBuilderImpl::toTempString@<X0>(icu::FormattedValueStringBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  return icu::FormattedStringBuilder::toTempUnicodeString((icu::FormattedValueStringBuilderImpl *)((char *)this + 8), a2);
}

icu::Appendable *icu::FormattedValueStringBuilderImpl::appendTo(icu::FormattedValueStringBuilderImpl *this, icu::Appendable *a2, UErrorCode *a3)
{
  icu::FormattedStringBuilder *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (icu::FormattedValueStringBuilderImpl *)((char *)this + 8);
  v5 = icu::FormattedStringBuilder::chars((icu::FormattedValueStringBuilderImpl *)((char *)this + 8));
  v6 = icu::FormattedStringBuilder::length(v4);
  (*(void (**)(icu::Appendable *, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v5, v6);
  return a2;
}

uint64_t icu::FormattedValueStringBuilderImpl::nextPosition(icu::FormattedValueStringBuilderImpl *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  return icu::FormattedValueStringBuilderImpl::nextPositionImpl((uint64_t)this, a2, *((_BYTE *)this + 144));
}

uint64_t icu::FormattedValueStringBuilderImpl::nextPositionImpl(uint64_t a1, icu::ConstrainedFieldPosition *this, unsigned __int8 a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int *v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  icu::ConstrainedFieldPosition *v47;
  int v48;
  uint64_t v49;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _BOOL4 v65;
  int v66;

  v5 = a3;
  v6 = *(unsigned int *)(a1 + 296);
  if ((int)v6 < 1)
  {
    v9 = 0;
    v61 = -1;
  }
  else
  {
    v7 = *(_QWORD *)this;
    if (*(_QWORD *)this >= v6)
      v8 = -1;
    else
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 16 * v7 + 8);
    v61 = v8;
    v10 = v7 < 1;
    v11 = v7 - 1;
    v9 = !v10
      && (v12 = *(_QWORD *)(a1 + 152), *((_DWORD *)this + 5) == *(_DWORD *)(v12 + 16 * v11))
      && *((_DWORD *)this + 2) == *(_DWORD *)(v12 + 16 * v11 + 4);
  }
  v13 = *((_DWORD *)this + 5);
  v14 = a3 && v13 == a3 >> 4 && *((_DWORD *)this + 2) == (a3 & 0xF);
  v15 = *((_DWORD *)this + 4);
  v16 = *(_DWORD *)(a1 + 140);
  if (v15 > v16)
  {
LABEL_86:
    icu::ConstrainedFieldPosition::setState(this, v13, *((_DWORD *)this + 2), v16, v16);
    return 0;
  }
  v17 = 0;
  v18 = *(_DWORD *)(a1 + 136);
  v19 = v16 + v18;
  v20 = v15 + v18;
  v22 = v13 == 2 && *((_DWORD *)this + 2) == 0;
  v23 = (uint64_t *)(a1 + 96);
  v63 = a3 >> 4;
  v64 = a3;
  v62 = a3 & 0xF;
  v65 = v22;
  v66 = -1;
  while (1)
  {
    v24 = &byte_18BE269E6;
    if (v20 < v19)
    {
      v25 = a1 + 96;
      if (*(_BYTE *)(a1 + 8))
        v25 = *v23;
      v24 = (char *)(v25 + v20);
    }
    v26 = *v24;
    if ((_BYTE)v17)
      break;
    if (v20 > v18 && v9)
    {
      v27 = a1 + 96;
      if (*(_BYTE *)(a1 + 8))
        v27 = *v23;
      v28 = *(_QWORD *)this - 1;
      v29 = *(unsigned __int8 *)(v27 + v20 - (uint64_t)*(int *)(*(_QWORD *)(a1 + 152) + 16 * v28 + 12));
      if ((_DWORD)v29 == 49)
      {
        if (icu::ConstrainedFieldPosition::matchesField(this, 3, 1))
        {
          v51 = v20 - *(_DWORD *)(a1 + 136) - *(_DWORD *)(*(_QWORD *)(a1 + 152) + 16 * v28 + 12);
          v52 = v20 - *(_DWORD *)(a1 + 136);
LABEL_91:
          v49 = 1;
          icu::ConstrainedFieldPosition::setState(this, 3, 1, v51, v52);
          return v49;
        }
        v9 = 0;
      }
      else
      {
        v9 = 1;
        v26 = v29;
        v20 -= *(_DWORD *)(*(_QWORD *)(a1 + 152) + 16 * v28 + 12);
      }
      v5 = v64;
    }
    if (icu::ConstrainedFieldPosition::matchesField(this, 2, 0))
    {
      v32 = *(int *)(a1 + 136);
      if (v20 > (int)v32 && !v65 && !v14)
      {
        v33 = a1 + 96;
        if (*(_BYTE *)(a1 + 8))
          v33 = *v23;
        v34 = *(unsigned __int8 *)(v33 + v20 - 1);
        if ((v34 == 38 || v34 == 32) && (_DWORD)v26 != 32 && (_DWORD)v26 != 38)
        {
          v53 = v20;
          v54 = v20 - 1;
          while (1)
          {
            v55 = a1 + 96;
            if (*(_BYTE *)(a1 + 8))
              v55 = *v23;
            v56 = *(unsigned __int8 *)(v55 + v53 - 1);
            if (v56 != 38 && v56 != 32)
              break;
            --v53;
            --v54;
            if (v53 <= v32)
            {
              v54 = v32 - 1;
              break;
            }
          }
          v44 = v54 - v32 + 1;
          v48 = v20 - v32;
          v47 = this;
          v45 = 2;
          v46 = 0;
          goto LABEL_108;
        }
      }
    }
    if (v5)
    {
      if (icu::ConstrainedFieldPosition::matchesField(this, v63, v62))
      {
        v35 = *(int *)(a1 + 136);
        if (v20 > (int)v35 && !v14)
        {
          v36 = a1 + 96;
          if (*(_BYTE *)(a1 + 8))
            v36 = *v23;
          v37 = *(unsigned __int8 *)(v36 + v20 - 1);
          if ((v37 == 1 || (v37 & 0xF0) == 0x20) && (_DWORD)v26 != 1 && (v26 & 0xF0) != 0x20)
          {
            v57 = v20;
            v58 = v20 - 1;
            while (1)
            {
              v59 = a1 + 96;
              if (*(_BYTE *)(a1 + 8))
                v59 = *v23;
              v60 = *(unsigned __int8 *)(v59 + v57 - 1);
              if (v60 != 1 && (v60 & 0xF0) != 0x20)
                break;
              --v57;
              --v58;
              if (v57 <= v35)
              {
                v58 = v35 - 1;
                break;
              }
            }
            v44 = v58 - v35 + 1;
            v48 = v20 - v35;
            v47 = this;
            v46 = v62;
            v45 = v63;
            goto LABEL_108;
          }
        }
      }
    }
    if (!v9 && ((_DWORD)v26 == 49 || v20 - *(_DWORD *)(a1 + 136) == v61))
    {
      v38 = *(_QWORD *)this;
      if (*(_QWORD *)this >= *(int *)(a1 + 296))
      {
        v16 = *(_DWORD *)(a1 + 140);
LABEL_85:
        v13 = *((_DWORD *)this + 5);
        goto LABEL_86;
      }
      v39 = (int *)(*(_QWORD *)(a1 + 152) + 16 * v38);
      v40 = *v39;
      v41 = v39[1];
      v42 = v39[3];
      v43 = v38 + 1;
      icu::ConstrainedFieldPosition::setInt64IterationContext(this, v38 + 1);
      if (v43 < *(int *)(a1 + 296))
        v61 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 16 * v43 + 8);
      if (v42)
      {
        if (icu::ConstrainedFieldPosition::matchesField(this, v40, v41))
        {
          v44 = v20 - *(_DWORD *)(a1 + 136);
          v48 = v44 + v42;
          v47 = this;
          v45 = v40;
          v46 = v41;
          goto LABEL_108;
        }
        if ((_DWORD)v26 == 49)
        {
          if (icu::ConstrainedFieldPosition::matchesField(this, 3, 1))
          {
            v51 = v20 - *(_DWORD *)(a1 + 136);
            v52 = v51 + v42;
            goto LABEL_91;
          }
          v9 = 0;
          v14 = 0;
          v65 = 0;
          v26 = 0;
          v20 = v20 + v42 - 1;
        }
        else
        {
          v9 = 0;
          v14 = 0;
          v65 = 0;
          v26 = 0;
        }
      }
      else
      {
        v9 = 0;
        v26 = 0;
        --v20;
      }
      v5 = v64;
    }
    else
    {
      if (v26 >= 0x10)
      {
        v9 = 0;
        if ((_DWORD)v26 == 32 || (_DWORD)v26 == 255)
        {
          v14 = 0;
          v65 = 0;
          v26 = 0;
          goto LABEL_79;
        }
        if (icu::ConstrainedFieldPosition::matchesField(this, v26 >> 4, v26 & 0xF))
        {
          v9 = 0;
          v14 = 0;
          v65 = 0;
          v66 = v20 - *(_DWORD *)(a1 + 136);
          goto LABEL_79;
        }
      }
      v9 = 0;
      v14 = 0;
      v65 = 0;
      v26 = 0;
    }
LABEL_79:
    v18 = *(_DWORD *)(a1 + 136);
    v16 = *(_DWORD *)(a1 + 140);
    v19 = v16 + v18;
    v17 = v26;
    v10 = v20++ < v16 + v18;
    if (!v10)
      goto LABEL_85;
  }
  if ((_DWORD)v26 == v17)
  {
    v26 = v17;
    goto LABEL_79;
  }
  v30 = (v20 - v18);
  if (v17 == 38 || (v17 & 0xF0) == 0x30)
  {
    v44 = v66;
    if ((int)v30 > v66)
      goto LABEL_83;
    goto LABEL_40;
  }
  v31 = icu::FormattedValueStringBuilderImpl::trimBack((icu::FormattedValueStringBuilderImpl *)a1, v30);
  if (v31 <= v66)
  {
LABEL_40:
    v26 = 0;
    --v20;
    v66 = -1;
    goto LABEL_79;
  }
  LODWORD(v30) = v31;
  v44 = icu::FormattedValueStringBuilderImpl::trimFront((icu::FormattedValueStringBuilderImpl *)a1, v66);
LABEL_83:
  v45 = v17 >> 4;
  v46 = v17 & 0xF;
  v47 = this;
  v48 = v30;
LABEL_108:
  icu::ConstrainedFieldPosition::setState(v47, v45, v46, v44, v48);
  return 1;
}

uint64_t icu::FormattedValueStringBuilderImpl::nextFieldPosition(icu::FormattedValueStringBuilderImpl *this, icu::FieldPosition *a2, UErrorCode *a3)
{
  unsigned int v3;
  uint64_t v4;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __int128 v18;
  __int128 v19;

  v3 = *((_DWORD *)a2 + 2);
  if (v3 == -1)
    return 0;
  if (v3 < 0xE)
  {
    v18 = 0u;
    v19 = 0u;
    icu::ConstrainedFieldPosition::ConstrainedFieldPosition((uint64_t)&v18);
    icu::ConstrainedFieldPosition::constrainField((uint64_t)&v18, 2, v3);
    icu::ConstrainedFieldPosition::setState(&v18, 2, v3, *((_DWORD *)a2 + 3), *((_DWORD *)a2 + 4));
    if (icu::FormattedValueStringBuilderImpl::nextPositionImpl((uint64_t)this, (icu::ConstrainedFieldPosition *)&v18, 0))
    {
      v7 = v19;
      *((_DWORD *)a2 + 3) = HIDWORD(v18);
      v4 = 1;
    }
    else
    {
      v4 = 0;
      if (v3 != 1 || *((_DWORD *)a2 + 4))
        goto LABEL_26;
      v8 = *((_DWORD *)this + 34);
      v9 = *((_DWORD *)this + 35);
      if (v9 < 1)
      {
        v14 = *((_DWORD *)this + 34);
      }
      else
      {
        v10 = 0;
        v11 = v8;
        v12 = (_QWORD *)((char *)this + 96);
        if (v9 + v8 <= v8 + 1)
          v13 = v8 + 1;
        else
          v13 = v9 + v8;
        v14 = *((_DWORD *)this + 34);
        while (1)
        {
          v15 = *((_BYTE *)this + 8) ? *(unsigned __int8 *)(*v12 + v11) : *((unsigned __int8 *)v12 + v11);
          v16 = 1;
          if (v15 != 32 && v15 != 38)
          {
            v16 = (v15 == 34) | v10;
            if (v15 != 34 && ((v10 ^ 1) & 1) == 0)
              break;
          }
          ++v11;
          ++v14;
          v10 = v16;
          if (v11 >= v9 + v8)
          {
            v14 = v13;
            break;
          }
        }
      }
      v4 = 0;
      v7 = v14 - v8;
      *((_DWORD *)a2 + 3) = v7;
    }
    *((_DWORD *)a2 + 4) = v7;
LABEL_26:
    icu::ConstrainedFieldPosition::~ConstrainedFieldPosition((icu::ConstrainedFieldPosition *)&v18);
    return v4;
  }
  v4 = 0;
  *a3 = U_ILLEGAL_ARGUMENT_ERROR;
  return v4;
}

BOOL icu::FormattedValueStringBuilderImpl::isIntOrGroup(char a1)
{
  return a1 == 32 || a1 == 38;
}

void icu::FormattedValueStringBuilderImpl::getAllFieldPositions(icu::FormattedValueStringBuilderImpl *this, icu::FieldPositionIteratorHandler *a2, UErrorCode *a3)
{
  __int128 v5;
  __int128 v6;

  v5 = 0u;
  v6 = 0u;
  icu::ConstrainedFieldPosition::ConstrainedFieldPosition((uint64_t)&v5);
  if (icu::FormattedValueStringBuilderImpl::nextPositionImpl((uint64_t)this, (icu::ConstrainedFieldPosition *)&v5, 0))
  {
    do
      (*(void (**)(icu::FieldPositionIteratorHandler *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a2 + 16))(a2, DWORD2(v5), HIDWORD(v5), v6);
    while ((icu::FormattedValueStringBuilderImpl::nextPositionImpl((uint64_t)this, (icu::ConstrainedFieldPosition *)&v5, 0) & 1) != 0);
  }
  icu::ConstrainedFieldPosition::~ConstrainedFieldPosition((icu::ConstrainedFieldPosition *)&v5);
}

uint64_t icu::FormattedValueStringBuilderImpl::resetString(icu::FormattedValueStringBuilderImpl *this)
{
  uint64_t result;

  result = icu::FormattedStringBuilder::clear((uint64_t)this + 8);
  *((_DWORD *)this + 74) = 0;
  return result;
}

BOOL icu::FormattedValueStringBuilderImpl::isTrimmable(char a1)
{
  return a1 != 38 && (a1 & 0xF0) != 48;
}

unint64_t icu::FormattedValueStringBuilderImpl::trimBack(icu::FormattedValueStringBuilderImpl *this, uint64_t a2)
{
  icu::UnicodeSet *v4;
  UChar *v5;

  v4 = (icu::UnicodeSet *)icu::unisets::get(1);
  v5 = (UChar *)((char *)this + 16);
  if (*((_BYTE *)this + 8))
    v5 = *(UChar **)v5;
  return icu::UnicodeSet::spanBack(v4, &v5[*((int *)this + 34)], a2, 1);
}

uint64_t icu::FormattedValueStringBuilderImpl::trimFront(icu::FormattedValueStringBuilderImpl *this, int a2)
{
  icu::UnicodeSet *v4;
  UChar *v5;

  v4 = (icu::UnicodeSet *)icu::unisets::get(1);
  v5 = (UChar *)((char *)this + 16);
  if (*((_BYTE *)this + 8))
    v5 = *(UChar **)v5;
  return icu::UnicodeSet::span(v4, &v5[*((int *)this + 34) + a2], (*((_DWORD *)this + 35) - a2), 1)+ a2;
}

void icu::FormattedValueStringBuilderImpl::appendSpanInfo(uint64_t a1, int a2, int a3, int a4, int a5, int *a6)
{
  int v11;
  int v12;
  int v14;
  char *v15;
  char *v16;
  int v17;
  void *v18;
  char *v19;

  if (*a6 <= 0)
  {
    v11 = *(_DWORD *)(a1 + 160);
    v12 = *(_DWORD *)(a1 + 296);
    if (v11 != v12)
    {
      v16 = *(char **)(a1 + 152);
LABEL_13:
      v19 = &v16[16 * v12];
      *(_DWORD *)v19 = a2;
      *((_DWORD *)v19 + 1) = a3;
      *((_DWORD *)v19 + 2) = a4;
      *((_DWORD *)v19 + 3) = a5;
      ++*(_DWORD *)(a1 + 296);
      return;
    }
    if (v11 >= 1)
    {
      v14 = 2 * v11;
      v15 = (char *)uprv_malloc(16 * (2 * v11));
      if (v15)
      {
        v16 = v15;
        v17 = *(_DWORD *)(a1 + 160);
        if (v17 >= v11)
          v17 = v11;
        if (v17 >= v14)
          v17 = 2 * v11;
        v18 = *(void **)(a1 + 152);
        memcpy(v15, v18, 16 * v17);
        if (*(_BYTE *)(a1 + 164))
          uprv_free(v18);
        *(_QWORD *)(a1 + 152) = v16;
        *(_DWORD *)(a1 + 160) = v14;
        *(_BYTE *)(a1 + 164) = 1;
        v12 = *(_DWORD *)(a1 + 296);
        goto LABEL_13;
      }
    }
    *a6 = 7;
  }
}

void icu::FormattedValueStringBuilderImpl::prependSpanInfo(uint64_t a1, int a2, int a3, int a4, int a5, int *a6)
{
  int v11;
  int v12;
  int v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;

  if (*a6 <= 0)
  {
    v11 = *(_DWORD *)(a1 + 160);
    v12 = *(_DWORD *)(a1 + 296);
    if (v11 == v12)
    {
      if (v11 < 1 || (v14 = 2 * v11, (v15 = uprv_malloc(16 * (2 * v11))) == 0))
      {
        *a6 = 7;
        return;
      }
      v16 = v15;
      v17 = *(_DWORD *)(a1 + 160);
      if (v17 >= v11)
        v17 = v11;
      if (v17 >= v14)
        v17 = 2 * v11;
      v18 = *(void **)(a1 + 152);
      memcpy(v15, v18, 16 * v17);
      if (*(_BYTE *)(a1 + 164))
        uprv_free(v18);
      *(_QWORD *)(a1 + 152) = v16;
      *(_DWORD *)(a1 + 160) = v14;
      *(_BYTE *)(a1 + 164) = 1;
      v12 = *(_DWORD *)(a1 + 296);
    }
    if (v12 >= 1)
    {
      v19 = v12 + 1;
      v20 = 16 * v12;
      do
      {
        *(_OWORD *)(*(_QWORD *)(a1 + 152) + v20) = *(_OWORD *)(*(_QWORD *)(a1 + 152) + 16 * (v19-- - 2));
        v20 -= 16;
      }
      while (v19 > 1);
    }
    v21 = *(_DWORD **)(a1 + 152);
    *v21 = a2;
    v21[1] = a3;
    v21[2] = a4;
    v21[3] = a5;
    ++*(_DWORD *)(a1 + 296);
  }
}

uint64_t icu::ConstrainedFieldPosition::ConstrainedFieldPosition(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t icu::ConstrainedFieldPosition::reset(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t icu::ConstrainedFieldPosition::constrainCategory(uint64_t this, int a2)
{
  *(_BYTE *)(this + 24) = 1;
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t icu::ConstrainedFieldPosition::constrainField(uint64_t this, int a2, int a3)
{
  *(_BYTE *)(this + 24) = 2;
  *(_DWORD *)(this + 20) = a2;
  *(_DWORD *)(this + 8) = a3;
  return this;
}

_QWORD *icu::ConstrainedFieldPosition::setInt64IterationContext(_QWORD *this, uint64_t a2)
{
  *this = a2;
  return this;
}

BOOL icu::ConstrainedFieldPosition::matchesField(icu::ConstrainedFieldPosition *this, int a2, int a3)
{
  int v3;

  v3 = *((char *)this + 24);
  if (!*((_BYTE *)this + 24))
    return 1;
  if (v3 == 2)
  {
    if (*((_DWORD *)this + 5) != a2)
      return 0;
    return *((_DWORD *)this + 2) == a3;
  }
  else
  {
    if (v3 != 1)
      abort();
    return *((_DWORD *)this + 5) == a2;
  }
}

_DWORD *icu::ConstrainedFieldPosition::setState(_DWORD *this, int a2, int a3, int a4, int a5)
{
  this[2] = a3;
  this[3] = a4;
  this[4] = a5;
  this[5] = a2;
  return this;
}

uint64_t ucfpos_open(_DWORD *a1, unint64_t a2)
{
  uint64_t result;

  result = icu::UMemory::operator new((icu::UMemory *)0x28, a2);
  if (result)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = 1430472192;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 32) = 0;
  }
  else
  {
    *a1 = 7;
  }
  return result;
}

uint64_t ucfpos_reset(uint64_t result, int *a2)
{
  int v2;

  if (*a2 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1430472192)
      {
        *(_QWORD *)(result + 8) = 0;
        *(_QWORD *)(result + 16) = 0;
        *(_BYTE *)(result + 32) = 0;
        *(_QWORD *)(result + 24) = 0;
        return result;
      }
      v2 = 3;
    }
    else
    {
      v2 = 1;
    }
    *a2 = v2;
  }
  return result;
}

uint64_t ucfpos_constrainCategory(uint64_t result, int a2, int *a3)
{
  int v3;

  if (*a3 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1430472192)
      {
        *(_BYTE *)(result + 32) = 1;
        *(_DWORD *)(result + 28) = a2;
        return result;
      }
      v3 = 3;
    }
    else
    {
      v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

uint64_t ucfpos_constrainField(uint64_t result, int a2, int a3, int *a4)
{
  int v4;

  if (*a4 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1430472192)
      {
        *(_BYTE *)(result + 32) = 2;
        *(_DWORD *)(result + 28) = a2;
        *(_DWORD *)(result + 16) = a3;
        return result;
      }
      v4 = 3;
    }
    else
    {
      v4 = 1;
    }
    *a4 = v4;
  }
  return result;
}

uint64_t ucfpos_getCategory(_DWORD *a1, int *a2)
{
  uint64_t result;
  int v3;

  if (*a2 > 0)
    return 0;
  if (a1)
  {
    if (*a1 == 1430472192)
      return a1[7];
    v3 = 3;
  }
  else
  {
    v3 = 1;
  }
  result = 0;
  *a2 = v3;
  return result;
}

uint64_t ucfpos_getField(_DWORD *a1, int *a2)
{
  uint64_t result;
  int v3;

  if (*a2 > 0)
    return 0;
  if (a1)
  {
    if (*a1 == 1430472192)
      return a1[4];
    v3 = 3;
  }
  else
  {
    v3 = 1;
  }
  result = 0;
  *a2 = v3;
  return result;
}

_DWORD *ucfpos_getIndexes(_DWORD *result, _DWORD *a2, _DWORD *a3, int *a4)
{
  int v4;

  if (*a4 <= 0)
  {
    if (result)
    {
      if (*result == 1430472192)
      {
        *a2 = result[5];
        *a3 = result[6];
        return result;
      }
      v4 = 3;
    }
    else
    {
      v4 = 1;
    }
    *a4 = v4;
  }
  return result;
}

uint64_t ucfpos_getInt64IterationContext(uint64_t a1, int *a2)
{
  uint64_t result;
  int v3;

  if (*a2 > 0)
    return 0;
  if (a1)
  {
    if (*(_DWORD *)a1 == 1430472192)
      return *(_QWORD *)(a1 + 8);
    v3 = 3;
  }
  else
  {
    v3 = 1;
  }
  result = 0;
  *a2 = v3;
  return result;
}

uint64_t ucfpos_setInt64IterationContext(uint64_t result, uint64_t a2, int *a3)
{
  int v3;

  if (*a3 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1430472192)
      {
        *(_QWORD *)(result + 8) = a2;
        return result;
      }
      v3 = 3;
    }
    else
    {
      v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

BOOL ucfpos_matchesField(_DWORD *a1, int a2, int a3, int *a4)
{
  int v5;

  if (*a4 <= 0)
  {
    if (a1)
    {
      if (*a1 == 1430472192)
        return icu::ConstrainedFieldPosition::matchesField((icu::ConstrainedFieldPosition *)(a1 + 2), a2, a3);
      v5 = 3;
    }
    else
    {
      v5 = 1;
    }
    *a4 = v5;
  }
  return 0;
}

_DWORD *ucfpos_setState(_DWORD *result, int a2, int a3, int a4, int a5, int *a6)
{
  int v6;

  if (*a6 <= 0)
  {
    if (result)
    {
      if (*result == 1430472192)
      {
        result[4] = a3;
        result[5] = a4;
        result[6] = a5;
        result[7] = a2;
        return result;
      }
      v6 = 3;
    }
    else
    {
      v6 = 1;
    }
    *a6 = v6;
  }
  return result;
}

void ucfpos_close(_DWORD *a1)
{
  if (a1)
  {
    if (*a1 == 1430472192)
    {
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

unint64_t ufmtval_getString(uint64_t a1, int *a2, int *a3)
{
  unint64_t v3;
  char v6;
  int v7;
  int v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*a3 > 0)
    return 0;
  if (!a1)
  {
    v8 = 1;
LABEL_16:
    v3 = 0;
    *a3 = v8;
    return v3;
  }
  if (*(_DWORD *)a1 != 1430672896)
  {
    v8 = 3;
    goto LABEL_16;
  }
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  (*(void (**)(__int128 *__return_ptr, _QWORD, int *))(**(_QWORD **)(a1 + 8) + 24))(&v10, *(_QWORD *)(a1 + 8), a3);
  if (*a3 > 0)
    goto LABEL_12;
  v6 = BYTE8(v10);
  if (a2)
  {
    if ((SWORD4(v10) & 0x8000u) == 0)
      v7 = WORD4(v10) >> 5;
    else
      v7 = HIDWORD(v10);
    *a2 = v7;
  }
  if ((v6 & 0x11) != 0)
  {
LABEL_12:
    v3 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    v3 = (unint64_t)&v10 | 0xA;
  }
  else
  {
    v3 = *((_QWORD *)&v11 + 1);
  }
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&v10);
  return v3;
}

uint64_t ufmtval_nextPosition(uint64_t a1, _DWORD *a2, int *a3)
{
  int v4;

  if (*a3 > 0)
    return 0;
  if (a1)
  {
    if (*(_DWORD *)a1 != 1430672896)
    {
LABEL_8:
      v4 = 3;
      goto LABEL_9;
    }
    if (a2)
    {
      if (*a2 == 1430472192)
        return (*(uint64_t (**)(_QWORD, _DWORD *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2 + 2);
      goto LABEL_8;
    }
  }
  v4 = 1;
LABEL_9:
  *a3 = v4;
  return 0;
}

uint64_t icu::FieldPositionHandler::setShift(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t sub_18BCE50E0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)result = &off_1E225F110;
  *(_QWORD *)(result + 16) = a2;
  *(_WORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_18BCE5104(uint64_t result, int a2, int a3, int a4)
{
  _DWORD *v4;
  int v5;

  v4 = *(_DWORD **)(result + 16);
  if (v4[2] == a2 && (!*(_BYTE *)(result + 24) || !*(_BYTE *)(result + 25)))
  {
    *(_BYTE *)(result + 25) = 1;
    v5 = *(_DWORD *)(result + 8);
    v4[3] = v5 + a3;
    v4[4] = v5 + a4;
  }
  return result;
}

uint64_t sub_18BCE5144(uint64_t result, int a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  if (a2)
  {
    v2 = *(_DWORD **)(result + 16);
    if (v2[2] != -1)
    {
      v3 = v2[3];
      if (v3 != -1)
      {
        v4 = v2[4] + a2;
        v2[3] = v3 + a2;
        v2[4] = v4;
      }
    }
  }
  return result;
}

BOOL sub_18BCE5178(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8) != -1;
}

uint64_t sub_18BCE518C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  uint64_t *v4;
  UErrorCode *v5;
  icu::UVector32 *v6;

  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_1E225F148;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (uint64_t *)*a3;
  *(_DWORD *)(a1 + 32) = (_DWORD)v4;
  v5 = (UErrorCode *)(a1 + 32);
  *(_DWORD *)(a1 + 36) = 0;
  if (a2 && (int)v4 <= 0)
  {
    v6 = (icu::UVector32 *)icu::UMemory::operator new(v4, (icu::UMemory *)0x20, a2);
    if (v6)
      v6 = icu::UVector32::UVector32(v6, v5);
    *(_QWORD *)(a1 + 24) = v6;
  }
  return a1;
}

uint64_t icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler(uint64_t this, icu::UVector32 *a2, UErrorCode *a3)
{
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)this = off_1E225F148;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a2;
  *(_QWORD *)(this + 32) = *(unsigned int *)a3;
  return this;
}

{
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)this = off_1E225F148;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = a2;
  *(_QWORD *)(this + 32) = *(unsigned int *)a3;
  return this;
}

void icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler(icu::FieldPositionIteratorHandler *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E225F148;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    icu::FieldPositionIterator::setData(v2, *((icu::UVector32 **)this + 3), (UErrorCode *)this + 8);
  *((_QWORD *)this + 3) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E225F148;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    icu::FieldPositionIterator::setData(v2, *((icu::UVector32 **)this + 3), (UErrorCode *)this + 8);
  *((_QWORD *)this + 3) = 0;
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E225F148;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    icu::FieldPositionIterator::setData(v2, *((icu::UVector32 **)this + 3), (UErrorCode *)this + 8);
  *((_QWORD *)this + 3) = 0;
  icu::UMemory::operator delete(this);
}

void icu::FieldPositionIteratorHandler::addAttribute(UErrorCode *this, int a2, int a3, int a4)
{
  uint64_t v4;
  UErrorCode *v8;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if (a3 < a4)
    {
      v8 = this + 8;
      if (*((int *)this + 8) <= 0)
      {
        v10 = *(_DWORD *)(v4 + 8);
        v11 = *((_DWORD *)this + 9);
        if (v10 < -1 || (v12 = *(_DWORD *)(v4 + 8), *(_DWORD *)(v4 + 12) <= v10))
        {
          if (!icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 3), v10 + 1, v8))
          {
LABEL_9:
            v13 = *((_QWORD *)this + 3);
            v14 = *(_DWORD *)(v13 + 8);
            if (v14 < -1 || *(_DWORD *)(v13 + 12) <= v14)
            {
              if (!icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 3), v14 + 1, v8))
              {
LABEL_14:
                v15 = *((_QWORD *)this + 3);
                v16 = *((_DWORD *)this + 2);
                v17 = *(_DWORD *)(v15 + 8);
                if (v17 < -1 || *(_DWORD *)(v15 + 12) <= v17)
                {
                  if (!icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 3), v17 + 1, v8))
                  {
LABEL_19:
                    v18 = *((_QWORD *)this + 3);
                    v19 = *((_DWORD *)this + 2);
                    v20 = *(_DWORD *)(v18 + 8);
                    if (v20 < -1 || *(_DWORD *)(v18 + 12) <= v20)
                    {
                      if (!icu::UVector32::expandCapacity(*((icu::UVector32 **)this + 3), v20 + 1, v8))
                        goto LABEL_24;
                      v20 = *(_DWORD *)(v18 + 8);
                    }
                    *(_DWORD *)(*(_QWORD *)(v18 + 24) + 4 * v20) = v19 + a4;
                    ++*(_DWORD *)(v18 + 8);
LABEL_24:
                    if (*(int *)v8 >= 1)
                      icu::UVector32::setSize(*((icu::UVector32 **)this + 3), v10);
                    return;
                  }
                  v17 = *(_DWORD *)(v15 + 8);
                }
                *(_DWORD *)(*(_QWORD *)(v15 + 24) + 4 * v17) = v16 + a3;
                ++*(_DWORD *)(v15 + 8);
                goto LABEL_19;
              }
              v14 = *(_DWORD *)(v13 + 8);
            }
            *(_DWORD *)(*(_QWORD *)(v13 + 24) + 4 * v14) = a2;
            ++*(_DWORD *)(v13 + 8);
            goto LABEL_14;
          }
          v12 = *(_DWORD *)(v4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)(v4 + 24) + 4 * v12) = v11;
        ++*(_DWORD *)(v4 + 8);
        goto LABEL_9;
      }
    }
  }
}

uint64_t icu::FieldPositionIteratorHandler::shiftLast(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;

  if (a2)
  {
    v2 = this;
    if (*(int *)(this + 32) <= 0)
    {
      this = *(_QWORD *)(this + 24);
      v3 = *(_DWORD *)(this + 8);
      if (v3 >= 1)
      {
        icu::UVector32::setElementAt(this, *(_DWORD *)(*(_QWORD *)(this + 24) + 4 * (v3 - 1)) + a2, v3 - 1);
        v5 = v3 - 2;
        v6 = *(_QWORD *)(v2 + 24);
        if (v3 == 1 || ((v7 = *(_DWORD *)(v6 + 8), v7 >= 1) ? (v8 = v7 <= (int)v5) : (v8 = 1), v8))
          v9 = 0;
        else
          v9 = *(_DWORD *)(*(_QWORD *)(v6 + 24) + 4 * v5);
        return icu::UVector32::setElementAt(v6, v9 + a2, v5);
      }
    }
  }
  return this;
}

BOOL icu::FieldPositionIteratorHandler::isRecording(icu::FieldPositionIteratorHandler *this)
{
  return *((_DWORD *)this + 8) < 1;
}

void icu::FieldPositionIterator::~FieldPositionIterator(icu::FieldPositionIterator *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E225F200;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = -1;
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::FieldPositionIterator::~FieldPositionIterator(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::FieldPositionIterator::FieldPositionIterator(uint64_t this)
{
  *(_QWORD *)this = off_1E225F200;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = -1;
  return this;
}

{
  *(_QWORD *)this = off_1E225F200;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = -1;
  return this;
}

icu::FieldPositionIterator *icu::FieldPositionIterator::FieldPositionIterator(icu::FieldPositionIterator *this, const icu::FieldPositionIterator *a2)
{
  uint64_t *v3;
  icu::UVector32 *v5;
  uint64_t v6;
  UErrorCode v8;

  *(_QWORD *)this = off_1E225F200;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v3 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (v3)
  {
    v8 = U_ZERO_ERROR;
    v5 = (icu::UVector32 *)icu::UMemory::operator new(v3, (icu::UMemory *)0x20, (unint64_t)a2);
    if (v5)
      v5 = icu::UVector32::UVector32(v5, &v8);
    *((_QWORD *)this + 1) = v5;
    icu::UVector32::assign(v5, *((const icu::UVector32 **)a2 + 1), &v8);
    if (v8)
    {
      v6 = *((_QWORD *)this + 1);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = -1;
    }
  }
  return this;
}

uint64_t icu::FieldPositionIterator::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  BOOL v5;

  if (a2 == a1)
    return 1;
  if (*(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  result = (v2 | v3) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
    return icu::UVector32::operator==(v2, v3);
  return result;
}

uint64_t icu::FieldPositionIterator::setData(uint64_t this, icu::UVector32 *a2, UErrorCode *a3)
{
  icu::UVector32 *v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = a2;
  v4 = this;
  v5 = *a3;
  if (a2 && v5 <= 0)
  {
    v7 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v7)
    {
      if ((v7 & 3) != 0)
      {
LABEL_5:
        *a3 = U_ILLEGAL_ARGUMENT_ERROR;
        return (*(uint64_t (**)(icu::UVector32 *))(*(_QWORD *)a2 + 8))(a2);
      }
      if ((int)v7 >= 3)
      {
        v8 = 0;
        while (1)
        {
          v9 = v8 + 3 >= v7 ? 0 : *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v8 + 12);
          if (*(_DWORD *)(*((_QWORD *)a2 + 3) + 8 + 4 * v8) >= v9)
            goto LABEL_5;
          v8 += 4;
          if ((int)v7 <= (int)v8 + 2)
            goto LABEL_15;
        }
      }
    }
    else
    {
      this = (*(uint64_t (**)(icu::UVector32 *))(*(_QWORD *)a2 + 8))(a2);
      if (*(int *)a3 > 0)
        return this;
      v3 = 0;
    }
  }
  else
  {
LABEL_15:
    if (v5 > 0)
    {
      if (!a2)
        return this;
      return (*(uint64_t (**)(icu::UVector32 *))(*(_QWORD *)a2 + 8))(a2);
    }
  }
  this = *(_QWORD *)(v4 + 8);
  if (this)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  *(_QWORD *)(v4 + 8) = v3;
  if (v3)
    v10 = 0;
  else
    v10 = -1;
  *(_DWORD *)(v4 + 16) = v10;
  return this;
}

uint64_t icu::FieldPositionIterator::next(icu::FieldPositionIterator *this, icu::FieldPosition *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int v9;
  int v10;
  int v11;
  int v13;
  int v14;

  v2 = *((unsigned int *)this + 4);
  if ((_DWORD)v2 == -1)
    return 0;
  v3 = *((_QWORD *)this + 1);
  v4 = v2 + 2;
  *((_DWORD *)this + 4) = v2 + 2;
  if ((int)v2 >= -1)
  {
    v5 = v2 + 1;
    v6 = *(_DWORD *)(v3 + 8);
    if (v6 < 1 || v6 <= (int)v5)
      v10 = 0;
    else
      v10 = *(_DWORD *)(*(_QWORD *)(v3 + 24) + 4 * v5);
    *((_DWORD *)a2 + 2) = v10;
    v9 = v2 + 3;
    *((_DWORD *)this + 4) = v2 + 3;
    goto LABEL_13;
  }
  *((_DWORD *)a2 + 2) = 0;
  *((_DWORD *)this + 4) = v2 + 3;
  if ((_DWORD)v2 == -2)
  {
    v9 = 1;
LABEL_13:
    v11 = *(_DWORD *)(v3 + 8);
    if (v11 < 1 || v11 <= v4)
      v13 = 0;
    else
      v13 = *(_DWORD *)(*(_QWORD *)(v3 + 24) + 4 * v4);
    *((_DWORD *)a2 + 3) = v13;
    v14 = v2 + 4;
    *((_DWORD *)this + 4) = v2 + 4;
    goto LABEL_20;
  }
  v9 = 0;
  *((_DWORD *)a2 + 3) = 0;
  v14 = v2 + 4;
  *((_DWORD *)this + 4) = v2 + 4;
  v11 = *(_DWORD *)(v3 + 8);
  if ((_DWORD)v2 == -3)
  {
    v14 = 1;
LABEL_20:
    if (v11 < 1 || v11 <= v9)
      v9 = 0;
    else
      v9 = *(_DWORD *)(*(_QWORD *)(v3 + 24) + 4 * v9);
  }
  *((_DWORD *)a2 + 4) = v9;
  if (v14 == v11)
    *((_DWORD *)this + 4) = -1;
  return 1;
}

void *sub_18BCE5914()
{
  return &unk_1EE00997A;
}

_QWORD *sub_18BCE5920(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = off_1E225F240;
  result[1] = &unk_1E225F2A0;
  result[2] = a2;
  result[3] = a3;
  return result;
}

void sub_18BCE5938(_QWORD *a1)
{
  icu::UnicodeReplacer *v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E225F240;
  a1[1] = &unk_1E225F2A0;
  v2 = (icu::UnicodeReplacer *)(a1 + 1);
  v3 = a1[2];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[3];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  icu::UnicodeReplacer::~UnicodeReplacer(v2);
  icu::UnicodeFunctor::~UnicodeFunctor((icu::UnicodeFunctor *)a1);
}

void sub_18BCE59A4(uint64_t a1)
{
  sub_18BCE5938((_QWORD *)(a1 - 8));
}

void sub_18BCE59AC(_QWORD *a1)
{
  void *v1;

  sub_18BCE5938(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BCE59C0(uint64_t a1)
{
  void *v1;

  sub_18BCE5938((_QWORD *)(a1 - 8));
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BCE59D8(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)icu::UMemory::operator new((icu::UMemory *)0x20, a2);
  v4 = v3;
  if (v3)
  {
    *v3 = off_1E225F240;
    v3[1] = &unk_1E225F2A0;
    v3[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
    v4[3] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 24))(*(_QWORD *)(a1 + 24));
  }
  return v4;
}

uint64_t sub_18BCE5A40(uint64_t a1)
{
  if (a1)
    return a1 + 8;
  else
    return 0;
}

uint64_t sub_18BCE5A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2, a3, a4, a5);
  return (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, (v11 + a3))- a3;
}

uint64_t sub_18BCE5AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  int v11;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, a2, a3, a4, a5);
  return (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2, a3, (v11 + a3))- a3;
}

icu::UnicodeString *sub_18BCE5B60(uint64_t a1, icu::UnicodeString *this, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD v20[2];
  __int16 v21;
  void (**v22)(icu::UnicodeString *__hidden);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v26 = 0;
  v25 = 0u;
  v24 = 0u;
  v22 = off_1E2256B38;
  LOWORD(v23) = 2;
  v6 = *((unsigned __int16 *)this + 4);
  if ((v6 & 1) != 0)
  {
    icu::UnicodeString::unBogus((uint64_t)this);
  }
  else
  {
    if ((v6 & 0x8000u) == 0)
      v7 = v6 >> 5;
    else
      v7 = *((_DWORD *)this + 3);
    if (v7)
      *((_WORD *)this + 4) &= 0x1Fu;
  }
  v21 = 38;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v21, 0, 1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  v9 = *(unsigned __int16 *)(v8 + 8);
  v10 = (__int16)v9;
  v11 = v9 >> 5;
  if (v10 >= 0)
    v12 = v11;
  else
    v12 = *(unsigned int *)(v8 + 12);
  icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v8, 0, v12);
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"( ", 0, 2);
  v20[1] = L"( ";
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  v14 = (*(uint64_t (**)(uint64_t, void (***)(icu::UnicodeString *__hidden), uint64_t))(*(_QWORD *)v13 + 24))(v13, &v22, a3);
  v15 = *(unsigned __int16 *)(v14 + 8);
  v16 = (__int16)v15;
  v17 = v15 >> 5;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(unsigned int *)(v14 + 12);
  icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)v14, 0, v18);
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)" ", 0, 2);
  v20[0] = " ";
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v22);
  return this;
}

icu::UnicodeString *sub_18BCE5D14(uint64_t a1, icu::UnicodeString *a2, uint64_t a3)
{
  return sub_18BCE5B60(a1 - 8, a2, a3);
}

void *sub_18BCE5D1C(uint64_t a1, icu::UVector **a2)
{
  double v4;
  const icu::UnicodeSet *v5;
  void *v6;
  _OWORD v8[12];
  uint64_t v9;

  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v4 = icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)v8);
  v5 = (const icu::UnicodeSet *)(*(uint64_t (**)(_QWORD, _OWORD *, double))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16), v8, v4);
  icu::UnicodeSet::addAll(a2, v5);
  return icu::UnicodeSet::~UnicodeSet(v6, (icu::UnicodeSet *)v8);
}

void *sub_18BCE5D94(uint64_t a1, icu::UVector **a2)
{
  return sub_18BCE5D1C(a1 - 8, a2);
}

uint64_t sub_18BCE5D9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

void sub_18BCE5DAC(int *a1)
{
  unint64_t v2;
  _OWORD *v3;
  uint64_t i;
  uint64_t v5;
  _DWORD *v6;
  int32x2_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  sub_18BDA1768(0x1Fu, (uint64_t)sub_18BCE5ECC);
  if (*a1 <= 0)
  {
    v3 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x40, v2);
    if (v3)
    {
      *v3 = xmmword_18BE26AD0;
      for (i = 1; i != 4; ++i)
        *(_QWORD *)&v3[i] = off_1E225F310;
      v5 = 0;
      qword_1EE009980 = (uint64_t)(v3 + 1);
      v6 = (_DWORD *)v3 + 6;
      do
      {
        *v6 = v5;
        v6 += 4;
        ++v5;
      }
      while (v5 != 3);
      v7 = uhash_open((uint64_t)uhash_hashChars, (uint64_t)uhash_compareChars, 0, a1);
      qword_1EE009988 = (uint64_t)v7;
      if (*a1 < 1)
      {
        uhash_setKeyDeleter((uint64_t)v7, (uint64_t)uprv_free);
      }
      else if (qword_1EE009980)
      {
        v8 = (char *)(qword_1EE009980 - 16);
        v9 = *(_QWORD *)(qword_1EE009980 - 8);
        if (v9)
        {
          v10 = 16 * v9;
          do
          {
            icu::UObject::~UObject((icu::UObject *)&v8[v10]);
            v10 -= 16;
          }
          while (v10);
        }
        icu::UMemory::operator delete[](v8);
      }
    }
    else
    {
      qword_1EE009980 = 0;
      *a1 = 7;
    }
  }
}

uint64_t sub_18BCE5ECC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_1EE009988)
  {
    uhash_close((void **)qword_1EE009988);
    qword_1EE009988 = 0;
    if (qword_1EE009980)
    {
      v0 = (char *)(qword_1EE009980 - 16);
      v1 = *(_QWORD *)(qword_1EE009980 - 8);
      if (v1)
      {
        v2 = 16 * v1;
        do
        {
          icu::UObject::~UObject((icu::UObject *)&v0[v2]);
          v2 -= 16;
        }
        while (v2);
      }
      icu::UMemory::operator delete[](v0);
    }
  }
  atomic_store(0, &dword_1EE0099E0);
  return 1;
}

_QWORD *icu::GenderInfo::GenderInfo(_QWORD *this)
{
  *this = off_1E225F310;
  return this;
}

{
  *this = off_1E225F310;
  return this;
}

void icu::GenderInfo::~GenderInfo(icu::GenderInfo *this)
{
  void *v1;

  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::GenderInfo::getInstance(icu::GenderInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v3;
  unsigned int v7;
  const char *v8;
  UErrorCode *v9;
  uint64_t Instance;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  if (*(int *)a2 <= 0)
  {
    v7 = atomic_load(&dword_1EE0099E0);
    if (v7 == 2 || !icu::umtx_initImplPreInit(&dword_1EE0099E0))
    {
      if (dword_1EE0099E4 >= 1)
      {
        v3 = 0;
        *(_DWORD *)a2 = dword_1EE0099E4;
        return v3;
      }
    }
    else
    {
      sub_18BCE5DAC((int *)a2);
      dword_1EE0099E4 = *(_DWORD *)a2;
      icu::umtx_initImplPostInit(&dword_1EE0099E0);
    }
    if (*(int *)a2 <= 0)
    {
      v8 = (const char *)*((_QWORD *)this + 5);
      umtx_lock((icu::UMutex *)&unk_1EE009990);
      v3 = uhash_get(qword_1EE009988, (uint64_t)v8);
      umtx_unlock((std::mutex **)&unk_1EE009990);
      if (v3)
        return v3;
      Instance = icu::GenderInfo::loadInstance(this, a2, v9);
      if (*(int *)a2 <= 0)
      {
        v11 = Instance;
        umtx_lock((icu::UMutex *)&unk_1EE009990);
        v3 = uhash_get(qword_1EE009988, (uint64_t)v8);
        if (v3
          || (v12 = qword_1EE009988,
              v13 = uprv_strdup(v8),
              uhash_put(v12, (uint64_t)v13, v11, (int *)a2),
              v3 = v11,
              *(int *)a2 < 1))
        {
          umtx_unlock((std::mutex **)&unk_1EE009990);
          return v3;
        }
        umtx_unlock((std::mutex **)&unk_1EE009990);
      }
    }
  }
  return 0;
}

uint64_t icu::GenderInfo::loadInstance(icu::GenderInfo *this, const icu::Locale *a2, UErrorCode *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const char *v10;
  const UChar *StringByKey;
  int v12;
  const UChar *v13;
  _BOOL8 v16;
  _QWORD v18[2];
  char *v19;
  int v20;
  UErrorCode v21[2];
  char *__s[8];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35[7];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = ures_openDirect(0, (uint64_t)"genderList", (uint64_t)a2);
  v6 = (_QWORD *)v5;
  v7 = 0;
  if (*(int *)a2 > 0)
    goto LABEL_32;
  v8 = ures_getByKey(v5, "genderList", 0, (int *)a2);
  v9 = (_QWORD *)v8;
  v7 = 0;
  if (*(int *)a2 > 0)
  {
LABEL_30:
    if (!v9)
      goto LABEL_32;
    goto LABEL_31;
  }
  *(_QWORD *)v21 = 0;
  v10 = (const char *)*((_QWORD *)this + 5);
  StringByKey = ures_getStringByKey(v8, v10, (int *)&v21[1], (int *)v21);
  if (!StringByKey)
  {
    v21[0] = U_ZERO_ERROR;
    memset(&__s[1], 0, 56);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v19, v10);
    __s[0] = (char *)&__s[1] + 5;
    LODWORD(__s[1]) = 40;
    WORD2(__s[1]) = 0;
    LODWORD(__s[7]) = 0;
    icu::CharString::append((icu::CharString *)__s, v19, v20, v21);
    while (1)
    {
      v36 = 0;
      memset(&v35[1], 0, 48);
      v35[0] = (char *)&v35[1] + 5;
      LODWORD(v35[1]) = 40;
      v18[0] = 0;
      v18[1] = 0;
      icu::CharStringByteSink::CharStringByteSink(v18, (uint64_t)v35);
      ulocimp_getParent(__s[0], (uint64_t)v18, (int *)a2);
      v12 = v36;
      if ((_DWORD)v36)
        icu::CharString::operator=((uint64_t)__s, (uint64_t)v35);
      icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v18);
      if (BYTE4(v35[1]))
        uprv_free(v35[0]);
      if (!v12)
        break;
      *(_QWORD *)v21 = 0;
      v13 = ures_getStringByKey((uint64_t)v9, __s[0], (int *)&v21[1], (int *)v21);
      v21[0] = U_ZERO_ERROR;
      if (v13)
      {
        StringByKey = v13;
        goto LABEL_13;
      }
    }
    StringByKey = 0;
LABEL_13:
    if (BYTE4(__s[1]))
      uprv_free(__s[0]);
    if (!StringByKey)
      goto LABEL_29;
  }
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  memset(__s, 0, sizeof(__s));
  u_UCharsToChars(StringByKey, (char *)__s, v21[1] + 1);
  if (__s[0] == (char *)0x6C61727475656ELL)
  {
LABEL_29:
    v7 = qword_1EE009980;
    goto LABEL_30;
  }
  if (__s[0] != (char *)0x75654E646578696DLL || *(char **)((char *)__s + 5) != (char *)0x6C61727475654ELL)
  {
    v16 = __s[0] == (char *)0x6E696154656C616DLL && *(char **)((char *)__s + 3) == (char *)0x73746E69615465;
    v7 = qword_1EE009980 + 32 * v16;
    if (!v9)
      goto LABEL_32;
    goto LABEL_31;
  }
  v7 = qword_1EE009980 + 16;
  if (v9)
LABEL_31:
    ures_close(v9);
LABEL_32:
  if (v6)
    ures_close(v6);
  return v7;
}

uint64_t icu::GenderInfo::getListGender(uint64_t a1, unsigned int *a2, int a3, int *a4)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;

  if (*a4 > 0 || !a3)
    return 2;
  if (a3 == 1)
    return *a2;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 == 2)
  {
    if (a3 < 1)
      return 1;
    if (*a2 != 1)
      return 0;
    v10 = 1;
    do
    {
      v11 = v10;
      if (a3 == v10)
        break;
      v12 = a2[v10++];
    }
    while (v12 == 1);
    return v11 >= a3;
  }
  if (v5 != 1)
    return 2;
  if (a3 < 1)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = a3;
    do
    {
      v9 = *a2++;
      result = v9;
      if (v9)
      {
        if ((_DWORD)result == 1)
        {
          if (v6)
            return 2;
          v7 = 1;
        }
        else if ((_DWORD)result == 2)
        {
          return result;
        }
      }
      else
      {
        if (v7)
          return 2;
        v6 = 1;
      }
      --v8;
    }
    while (v8);
  }
  return v6 == 0;
}

uint64_t icu::GenderInfo::getNeutralInstance(icu::GenderInfo *this)
{
  return qword_1EE009980;
}

uint64_t icu::GenderInfo::getMixedNeutralInstance(icu::GenderInfo *this)
{
  return qword_1EE009980 + 16;
}

uint64_t icu::GenderInfo::getMaleTaintsInstance(icu::GenderInfo *this)
{
  return qword_1EE009980 + 32;
}

uint64_t ugender_getInstance(char *a1, const icu::Locale *a2)
{
  UErrorCode *v3;
  uint64_t Instance;
  _BYTE v6[224];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  icu::Locale::Locale((icu::Locale *)v6, a1, 0, 0, 0);
  Instance = icu::GenderInfo::getInstance((icu::GenderInfo *)v6, a2, v3);
  icu::Locale::~Locale((icu::Locale *)v6);
  return Instance;
}

void *icu::GregorianCalendar::getStaticClassID(icu::GregorianCalendar *this)
{
  return &unk_1EE0099E8;
}

void *icu::GregorianCalendar::getDynamicClassID(icu::GregorianCalendar *this)
{
  return &unk_1EE0099E8;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, UErrorCode *a2)
{
  icu::Calendar *v4;
  double v5;

  v4 = icu::Calendar::Calendar(this, a2);
  *(_QWORD *)v4 = off_1E225F350;
  *((_QWORD *)v4 + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)v4 + 158) = 2299161;
  *((_QWORD *)v4 + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)v4 + 162) = 1582;
  *((_WORD *)v4 + 326) = 1;
  icu::Calendar::getNow(v4);
  icu::Calendar::setTimeInMillis((uint64_t)this, v5, a2);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, icu::TimeZone *a2, UErrorCode *a3)
{
  uint64_t *Default;
  icu::Calendar *v7;
  double v8;

  Default = icu::Locale::getDefault(this);
  v7 = icu::Calendar::Calendar(this, a2, (const icu::Locale *)Default, a3);
  *(_QWORD *)this = off_1E225F350;
  *((_QWORD *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((_QWORD *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, const icu::TimeZone *a2, UErrorCode *a3)
{
  uint64_t *Default;
  icu::Calendar *v7;
  double v8;

  Default = icu::Locale::getDefault(this);
  v7 = icu::Calendar::Calendar(this, a2, (const icu::Locale *)Default, a3);
  *(_QWORD *)this = off_1E225F350;
  *((_QWORD *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((_QWORD *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, char **a2, UErrorCode *a3)
{
  icu::TimeZone *v6;
  icu::Calendar *v7;
  double v8;

  v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  v7 = icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(_QWORD *)this = off_1E225F350;
  *((_QWORD *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((_QWORD *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, icu::TimeZone *a2, const icu::Locale *a3, UErrorCode *a4)
{
  icu::Calendar *v6;
  double v7;

  v6 = icu::Calendar::Calendar(this, a2, a3, a4);
  *(_QWORD *)v6 = off_1E225F350;
  *((_QWORD *)v6 + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)v6 + 158) = 2299161;
  *((_QWORD *)v6 + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)v6 + 162) = 1582;
  *((_WORD *)v6 + 326) = 1;
  icu::Calendar::getNow(v6);
  icu::Calendar::setTimeInMillis((uint64_t)this, v7, a4);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, const icu::TimeZone *a2, const icu::Locale *a3, UErrorCode *a4)
{
  icu::Calendar *v6;
  double v7;

  v6 = icu::Calendar::Calendar(this, a2, a3, a4);
  *(_QWORD *)v6 = off_1E225F350;
  *((_QWORD *)v6 + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)v6 + 158) = 2299161;
  *((_QWORD *)v6 + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)v6 + 162) = 1582;
  *((_WORD *)v6 + 326) = 1;
  icu::Calendar::getNow(v6);
  icu::Calendar::setTimeInMillis((uint64_t)this, v7, a4);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, int a2, int a3, int a4, UErrorCode *a5)
{
  icu::Locale *Default;
  uint64_t *v11;
  icu::Calendar *v12;

  Default = (icu::Locale *)icu::TimeZone::createDefault(this);
  v11 = icu::Locale::getDefault(Default);
  v12 = icu::Calendar::Calendar(this, Default, (const icu::Locale *)v11, a5);
  *(_QWORD *)this = off_1E225F350;
  *((_QWORD *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((_QWORD *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::set(v12, 0, 1);
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);
  icu::Calendar::set(this, 5u, a4);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, int a2, int a3, int a4, int a5, int a6, UErrorCode *a7)
{
  icu::Locale *Default;
  uint64_t *v15;
  icu::Calendar *v16;

  Default = (icu::Locale *)icu::TimeZone::createDefault(this);
  v15 = icu::Locale::getDefault(Default);
  v16 = icu::Calendar::Calendar(this, Default, (const icu::Locale *)v15, a7);
  *(_QWORD *)this = off_1E225F350;
  *((_QWORD *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((_QWORD *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::set(v16, 0, 1);
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);
  icu::Calendar::set(this, 5u, a4);
  icu::Calendar::set(this, 0xBu, a5);
  icu::Calendar::set(this, 0xCu, a6);
  return this;
}

icu::GregorianCalendar *icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, int a2, int a3, int a4, int a5, int a6, int a7, UErrorCode *a8)
{
  icu::Locale *Default;
  uint64_t *v17;
  icu::Calendar *v18;

  Default = (icu::Locale *)icu::TimeZone::createDefault(this);
  v17 = icu::Locale::getDefault(Default);
  v18 = icu::Calendar::Calendar(this, Default, (const icu::Locale *)v17, a8);
  *(_QWORD *)this = off_1E225F350;
  *((_QWORD *)this + 78) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 158) = 2299161;
  *((_QWORD *)this + 80) = 0xC2A63A0D36A80000;
  *((_DWORD *)this + 162) = 1582;
  *((_WORD *)this + 326) = 1;
  icu::Calendar::set(v18, 0, 1);
  icu::Calendar::set(this, 1u, a2);
  icu::Calendar::set(this, 2u, a3);
  icu::Calendar::set(this, 5u, a4);
  icu::Calendar::set(this, 0xBu, a5);
  icu::Calendar::set(this, 0xCu, a6);
  icu::Calendar::set(this, 0xDu, a7);
  return this;
}

void icu::GregorianCalendar::~GregorianCalendar(icu::GregorianCalendar *this)
{
  void *v1;

  icu::Calendar::~Calendar(this);
  icu::UMemory::operator delete(v1);
}

double icu::GregorianCalendar::GregorianCalendar(icu::GregorianCalendar *this, const icu::GregorianCalendar *a2)
{
  uint64_t v3;
  double result;

  v3 = icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *(_QWORD *)v3 = off_1E225F350;
  *(_QWORD *)(v3 + 624) = *((_QWORD *)a2 + 78);
  *(_DWORD *)(v3 + 632) = *((_DWORD *)a2 + 158);
  result = *((double *)a2 + 80);
  *(double *)(v3 + 640) = result;
  *(_DWORD *)(v3 + 648) = *((_DWORD *)a2 + 162);
  *(_WORD *)(v3 + 652) = *((_WORD *)a2 + 326);
  return result;
}

{
  uint64_t v3;
  double result;

  v3 = icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *(_QWORD *)v3 = off_1E225F350;
  *(_QWORD *)(v3 + 624) = *((_QWORD *)a2 + 78);
  *(_DWORD *)(v3 + 632) = *((_DWORD *)a2 + 158);
  result = *((double *)a2 + 80);
  *(double *)(v3 + 640) = result;
  *(_DWORD *)(v3 + 648) = *((_DWORD *)a2 + 162);
  *(_WORD *)(v3 + 652) = *((_WORD *)a2 + 326);
  return result;
}

double icu::GregorianCalendar::clone@<D0>(icu::GregorianCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  double result;
  uint64_t v6;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  if (v4)
  {
    v6 = icu::Calendar::Calendar((uint64_t)v4, (uint64_t)this);
    *(_QWORD *)v6 = off_1E225F350;
    *(_QWORD *)(v6 + 624) = *((_QWORD *)this + 78);
    *(_DWORD *)(v6 + 632) = *((_DWORD *)this + 158);
    result = *((double *)this + 80);
    *(double *)(v6 + 640) = result;
    *(_DWORD *)(v6 + 648) = *((_DWORD *)this + 162);
    *(_WORD *)(v6 + 652) = *((_WORD *)this + 326);
  }
  return result;
}

uint64_t icu::GregorianCalendar::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::Calendar::operator=(a1, a2);
    *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
    *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
    *(_DWORD *)(a1 + 648) = *(_DWORD *)(a2 + 648);
    *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  }
  return a1;
}

uint64_t icu::GregorianCalendar::isEquivalentTo(icu::GregorianCalendar *this, const icu::Calendar *a2)
{
  uint64_t result;

  result = icu::Calendar::isEquivalentTo(this, a2);
  if ((_DWORD)result)
    return *((double *)this + 78) == *((double *)a2 + 78);
  return result;
}

icu::GregorianCalendar *icu::GregorianCalendar::setGregorianChange(icu::GregorianCalendar *this, double a2, UErrorCode *a3)
{
  uint64_t v4;
  unint64_t v6;
  double v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  icu::GregorianCalendar *v11;
  const icu::TimeZone *TimeZone;

  if (*(int *)a3 <= 0)
  {
    v4 = (uint64_t)this;
    if (*((double *)this + 78) != a2)
    {
      v7 = uprv_floor(a2 / 86400000.0);
      if (v7 <= -2147483650.0)
      {
        v8 = 0xC384997000000000;
        *(_QWORD *)(v4 + 640) = 0xC384997000000000;
        *(_QWORD *)(v4 + 624) = 0xC384997000000000;
        v9 = 0x80000000;
      }
      else
      {
        v8 = (unint64_t)&icu::Calendar::kYearPrecedence[0][9][5];
        if (v7 >= 2147483650.0)
        {
          v8 = 0x4384996FFFD6CD20;
          *(_QWORD *)(v4 + 640) = 0x4384996FFFD6CD20;
          *(_QWORD *)(v4 + 624) = 0x4384996FFFD6CD20;
          v9 = 0x7FFFFFFF;
        }
        else
        {
          *(double *)(v4 + 640) = v7 * 86400000.0;
          *(double *)(v4 + 624) = a2;
          v9 = (int)v7;
        }
      }
      this = (icu::GregorianCalendar *)icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x290, v6);
      if (this)
      {
        v11 = this;
        TimeZone = (const icu::TimeZone *)icu::Calendar::getTimeZone(v10, (icu::Calendar *)v4);
        this = icu::GregorianCalendar::GregorianCalendar(v11, TimeZone, a3);
        if (*(int *)a3 <= 0)
        {
          icu::Calendar::setTimeInMillis((uint64_t)v11, a2, a3);
          *(_DWORD *)(v4 + 648) = icu::Calendar::get(v11, 1u, a3);
          if (!icu::Calendar::get(v11, 0, a3))
            *(_DWORD *)(v4 + 648) = 1 - *(_DWORD *)(v4 + 648);
          *(_DWORD *)(v4 + 632) = v9;
          return (icu::GregorianCalendar *)(*(uint64_t (**)(icu::GregorianCalendar *))(*(_QWORD *)v11 + 8))(v11);
        }
      }
      else
      {
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
  }
  return this;
}

_DWORD *icu::GregorianCalendar::handleComputeFields(_DWORD *this, int a2, UErrorCode *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  __int16 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  if (*(int *)a3 <= 0)
  {
    v4 = (uint64_t)this;
    v18 = 0;
    if (this[158] <= a2)
    {
      v13 = this[73];
      v14 = this[75];
      v15 = this[74];
      v6 = this[72];
    }
    else
    {
      v5 = a2 - 1721424;
      v6 = sub_18BCE8294(1461, &v18, (double)(a2 - 1721424) * 4.0 + 1464.0);
      this = (_DWORD *)sub_18BCE825C(v6 - 1, 4);
      v7 = v5 - (_DWORD)this - 365 * (v6 - 1);
      if ((v6 & 3) != 0)
        v8 = 59;
      else
        v8 = 60;
      v9 = (__int16 *)&unk_18BE26B40;
      if ((v6 & 3) != 0)
        v10 = 2;
      else
        v10 = 1;
      if ((v6 & 3) == 0)
        v9 = (__int16 *)&unk_18BE26B28;
      if (v7 >= v8)
        v11 = v10;
      else
        v11 = 0;
      v12 = 1497972245 * (12 * (v11 + v7) + 6);
      v13 = (v12 >> 39) + ((unint64_t)v12 >> 63);
      v14 = v7 - v9[v13] + 1;
      v15 = v7 + 1;
    }
    if (v6 == *(_DWORD *)(v4 + 648) && *(_DWORD *)(v4 + 632) <= a2)
    {
      v16 = sub_18BCE8278(v6 - 1, 400);
      this = (_DWORD *)sub_18BCE8278(v6 - 1, 100);
      v15 += v16 - (_DWORD)this + 2;
    }
    *(_DWORD *)(v4 + 20) = v13;
    *(_DWORD *)(v4 + 140) = 1;
    *(_BYTE *)(v4 + 110) = 1;
    *(_DWORD *)(v4 + 104) = v13;
    *(_DWORD *)(v4 + 224) = 1;
    *(_BYTE *)(v4 + 131) = 1;
    *(_WORD *)(v4 + 113) = 257;
    *(_DWORD *)(v4 + 32) = v14;
    *(_DWORD *)(v4 + 36) = v15;
    *(_QWORD *)(v4 + 152) = 0x100000001;
    *(_DWORD *)(v4 + 88) = v6;
    *(_DWORD *)(v4 + 208) = 1;
    *(_BYTE *)(v4 + 127) = 1;
    v17 = 1 - v6;
    if (v6 > 0)
      v17 = v6;
    *(_WORD *)(v4 + 108) = 257;
    *(_DWORD *)(v4 + 12) = v6 > 0;
    *(_DWORD *)(v4 + 16) = v17;
    *(_QWORD *)(v4 + 132) = 0x100000001;
  }
  return this;
}

double icu::GregorianCalendar::getGregorianChange(icu::GregorianCalendar *this)
{
  return *((double *)this + 78);
}

uint64_t icu::GregorianCalendar::isLeapYear(icu::GregorianCalendar *this, int a2)
{
  int v2;
  _BOOL4 v3;
  unsigned int v4;
  unint64_t v5;
  _BOOL4 v6;
  unsigned int v7;

  v2 = *((_DWORD *)this + 162);
  v3 = v2 > a2;
  if ((a2 & 3) != 0)
    v3 = 0;
  HIDWORD(v5) = -1030792151 * a2 + 85899344;
  LODWORD(v5) = HIDWORD(v5);
  v4 = v5 >> 2;
  LODWORD(v5) = HIDWORD(v5);
  v6 = (v5 >> 4) < 0xA3D70B;
  v7 = v4 > 0x28F5C28 || v6;
  if (v2 <= a2 && (a2 & 3) == 0)
    return v7;
  else
    return v3;
}

uint64_t icu::GregorianCalendar::handleComputeJulianDay(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  *(_BYTE *)(a1 + 653) = 0;
  v4 = icu::Calendar::handleComputeJulianDay(a1, a2);
  v5 = v4;
  if (a2 == 3 && *(_DWORD *)(a1 + 88) == *(_DWORD *)(a1 + 648) && (int)v4 >= *(_DWORD *)(a1 + 632))
  {
    *(_BYTE *)(a1 + 653) = 1;
    return icu::Calendar::handleComputeJulianDay(a1, 3u);
  }
  if (*(_BYTE *)(a1 + 652) == (int)v4 >= *(_DWORD *)(a1 + 632))
  {
    if (!*(_BYTE *)(a1 + 652))
      return v5;
LABEL_8:
    v6 = *(int *)(a1 + 88);
    if ((_DWORD)v6 == *(_DWORD *)(a1 + 648))
    {
      v7 = v6 - 1;
      v8 = sub_18BCE8278(v6 - 1, 400);
      v9 = sub_18BCE8278(v7, 100);
      if (a2 == 4)
      {
        return (v5 + 14);
      }
      else if (a2 == 6)
      {
        return (v5 + v9 - v8 - 2);
      }
    }
    return v5;
  }
  *(_BYTE *)(a1 + 653) = 1;
  v5 = icu::Calendar::handleComputeJulianDay(a1, a2);
  if (*(_BYTE *)(a1 + 652))
    goto LABEL_8;
  return v5;
}

uint64_t icu::GregorianCalendar::handleComputeMonthStart(icu::GregorianCalendar *this, int a2, int a3)
{
  int v3;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  _BOOL4 v13;
  int v14;
  int v15;
  __int16 *v16;
  int v18;

  v3 = a2;
  v18 = a3;
  if (a3 >= 0xC)
    v3 = sub_18BCE8294(12, &v18, (double)a3) + a2;
  v5 = (v3 & 3) == 0;
  v6 = v3 - 1;
  v7 = sub_18BCE8278(v6, 4);
  v8 = *((_DWORD *)this + 162);
  v9 = v3 >= v8;
  *((_BYTE *)this + 652) = v9;
  if (*((_BYTE *)this + 653))
  {
    v9 = v3 < v8;
    *((_BYTE *)this + 652) = v9;
  }
  v10 = v7 + 365 * v6 + 1721423;
  if (v9)
  {
    HIDWORD(v12) = -1030792151 * v3 + 85899344;
    LODWORD(v12) = HIDWORD(v12);
    v11 = v12 >> 2;
    LODWORD(v12) = HIDWORD(v12);
    v13 = (v12 >> 4) < 0xA3D70B;
    v14 = v11 > 0x28F5C28 || v13;
    if ((v3 & 3) != 0)
      v5 = 0;
    else
      v5 = v14;
    v15 = sub_18BCE8278(v3 - 1, 400);
    v10 += (int)(v15 - sub_18BCE8278(v6, 100) + 2);
  }
  if (v18)
  {
    v16 = (__int16 *)&unk_18BE26B40;
    if (v5)
      v16 = (__int16 *)&unk_18BE26B28;
    v10 += v16[v18];
  }
  return v10;
}

uint64_t icu::GregorianCalendar::handleGetMonthLength(icu::GregorianCalendar *this, int a2, int a3)
{
  int v3;
  int v5;
  int v6;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int v14;

  v3 = a2;
  v14 = a3;
  if (a3 >= 0xC)
    v3 = sub_18BCE8294(12, &v14, (double)a3) + a2;
  v5 = *((_DWORD *)this + 162);
  v6 = v3 & 3;
  if (v5 > v3 || v6 != 0)
  {
    v8 = v14;
    if (v5 <= v3 || v6 != 0)
      goto LABEL_16;
LABEL_17:
    v12 = (char *)&unk_18BE26B58;
    return v12[v8];
  }
  HIDWORD(v10) = -1030792151 * v3 + 85899344;
  LODWORD(v10) = HIDWORD(v10);
  if ((v10 >> 2) >= 0x28F5C29)
  {
    v8 = v14;
    goto LABEL_17;
  }
  v8 = v14;
  HIDWORD(v11) = -1030792151 * v3 + 85899344;
  LODWORD(v11) = HIDWORD(v11);
  if ((v11 >> 4) < 0xA3D70B)
    goto LABEL_17;
LABEL_16:
  v12 = (char *)&unk_18BE26B64;
  return v12[v8];
}

uint64_t icu::GregorianCalendar::handleGetYearLength(icu::GregorianCalendar *this, int a2)
{
  int v2;
  uint64_t result;
  unint64_t v5;

  v2 = *((_DWORD *)this + 162);
  if (v2 <= a2 && (a2 & 3) == 0)
  {
    HIDWORD(v5) = -1030792151 * a2 + 85899344;
    LODWORD(v5) = HIDWORD(v5);
    if ((v5 >> 2) <= 0x28F5C28 && a2 % 400 != 0)
      return 365;
    return 366;
  }
  result = 365;
  if ((a2 & 3) == 0 && v2 > a2)
    return 366;
  return result;
}

uint64_t icu::GregorianCalendar::monthLength(icu::GregorianCalendar *this, uint64_t a2)
{
  return (*(uint64_t (**)(icu::GregorianCalendar *, _QWORD, uint64_t))(*(_QWORD *)this + 312))(this, *((unsigned int *)this + 22), a2);
}

uint64_t icu::GregorianCalendar::monthLength(icu::GregorianCalendar *this, int a2, int a3)
{
  int v3;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v9;

  v3 = *((_DWORD *)this + 162);
  if (v3 <= a3 && (a3 & 3) == 0)
  {
    HIDWORD(v6) = -1030792151 * a3 + 85899344;
    LODWORD(v6) = HIDWORD(v6);
    if ((v6 >> 2) < 0x28F5C29)
    {
      HIDWORD(v9) = -1030792151 * a3 + 85899344;
      LODWORD(v9) = HIDWORD(v9);
      if ((v9 >> 4) >= 0xA3D70B)
      {
        v7 = (char *)&unk_18BE26B64;
        goto LABEL_10;
      }
    }
LABEL_9:
    v7 = (char *)&unk_18BE26B58;
LABEL_10:
    v5 = &v7[a2];
    return *v5;
  }
  v5 = (char *)&unk_18BE26B64 + a2;
  if ((a3 & 3) == 0 && v3 > a3)
    goto LABEL_9;
  return *v5;
}

uint64_t icu::GregorianCalendar::yearLength(icu::GregorianCalendar *this)
{
  int v1;
  int v2;
  int v3;
  unint64_t v7;

  v1 = *((_DWORD *)this + 4);
  v2 = *((_DWORD *)this + 162);
  v3 = v1 & 3;
  if (v2 <= v1 && v3 == 0)
  {
    HIDWORD(v7) = -1030792151 * v1 + 85899344;
    LODWORD(v7) = HIDWORD(v7);
    if ((v7 >> 2) <= 0x28F5C28 && v1 % 400 != 0)
      return 365;
    return 366;
  }
  if (v2 > v1 && v3 == 0)
    return 366;
  return 365;
}

BOOL icu::GregorianCalendar::validateFields(icu::GregorianCalendar *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  unsigned int v11;

  v2 = 0;
  while (1)
  {
    if ((v2 - 7) <= 0xFFFFFFFD && icu::Calendar::isSet((uint64_t)this, v2))
    {
      v3 = *((_DWORD *)this + v2 + 3);
      if ((*(int (**)(icu::GregorianCalendar *, uint64_t))(*(_QWORD *)this + 112))(this, v2) > v3
        || (*(int (**)(icu::GregorianCalendar *, uint64_t))(*(_QWORD *)this + 128))(this, v2) < v3)
      {
        return 0;
      }
    }
    if (++v2 == 24)
    {
      if (icu::Calendar::isSet((uint64_t)this, 5u))
      {
        v4 = *((_DWORD *)this + 8);
        if (v4 < (*(int (**)(icu::GregorianCalendar *, uint64_t))(*(_QWORD *)this + 112))(this, 5))
          return 0;
        v5 = (*(uint64_t (**)(icu::GregorianCalendar *))(*(_QWORD *)this + 264))(this);
        if (v4 > (*(int (**)(icu::GregorianCalendar *, uint64_t))(*(_QWORD *)this + 448))(this, v5))
          return 0;
      }
      if (!icu::Calendar::isSet((uint64_t)this, 6u))
        return !icu::Calendar::isSet((uint64_t)this, 8u) || *((_DWORD *)this + 11);
      v6 = *((_DWORD *)this + 9);
      if (v6 < 1)
        return 0;
      v7 = *((_DWORD *)this + 4);
      v8 = *((_DWORD *)this + 162);
      if (v8 > v7 || (v7 & 3) != 0)
      {
        v11 = 365;
        if (v8 <= v7 || (v7 & 3) != 0)
          goto LABEL_22;
      }
      else
      {
        HIDWORD(v9) = -1030792151 * v7 + 85899344;
        LODWORD(v9) = HIDWORD(v9);
        if ((v9 >> 2) <= 0x28F5C28 && v7 % 400 != 0)
        {
          v11 = 365;
LABEL_22:
          if (v6 > v11)
            return 0;
          return !icu::Calendar::isSet((uint64_t)this, 8u) || *((_DWORD *)this + 11);
        }
      }
      v11 = 366;
      goto LABEL_22;
    }
  }
}

BOOL icu::GregorianCalendar::boundsCheck(uint64_t a1, int a2, uint64_t a3)
{
  return (*(int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a3) <= a2
      && (*(int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, a3) >= a2;
}

double icu::GregorianCalendar::getEpochDay(icu::GregorianCalendar *this, UErrorCode *a2)
{
  uint64_t v3;

  icu::Calendar::complete(this, a2);
  v3 = 274877907 * (*((_DWORD *)this + 19) + *((_DWORD *)this + 18));
  return uprv_floor((*((double *)this + 29) / 1000.0 + (double)(int)((v3 >> 38) + ((unint64_t)v3 >> 63))) / 86400.0);
}

double icu::GregorianCalendar::computeJulianDayOfYear(icu::GregorianCalendar *this, int a2, BOOL *a3, signed __int8 *a4)
{
  int v6;
  double v7;
  unsigned int v8;
  unint64_t v9;
  BOOL v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;

  v6 = (int)this;
  *a3 = (a2 & 3) == 0;
  v7 = (double)(int)sub_18BCE825C(a2 - 1, 4) + (double)(a2 - 1) * 365.0 + 1721423.0;
  if (v6)
  {
    HIDWORD(v9) = -1030792151 * a2 + 85899344;
    LODWORD(v9) = HIDWORD(v9);
    v8 = v9 >> 2;
    LODWORD(v9) = HIDWORD(v9);
    v10 = (v9 >> 4) < 0xA3D70B;
    v11 = v8 > 0x28F5C28 || v10;
    if (*a3)
      v12 = v11;
    else
      v12 = 0;
    *a3 = v12;
    v13 = a2 - 1;
    v14 = sub_18BCE8278(v13, 400);
    return v7 + (double)(int)(v14 - sub_18BCE8278(v13, 100) + 2);
  }
  return v7;
}

double icu::GregorianCalendar::millisToJulianDay(icu::GregorianCalendar *this, double a2)
{
  return uprv_floor(a2 / 86400000.0) + 2440588.0;
}

double icu::GregorianCalendar::julianDayToMillis(icu::GregorianCalendar *this, double a2)
{
  return (a2 + -2440588.0) * 86400000.0;
}

uint64_t icu::GregorianCalendar::aggregateStamp(icu::GregorianCalendar *this, uint64_t a2, int a3)
{
  if ((_DWORD)a2 && a3)
    return uprv_max(a2, a3);
  else
    return 0;
}

uint64_t icu::GregorianCalendar::roll(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

double *icu::GregorianCalendar::roll(double *result, uint64_t a2, int a3, UErrorCode *a4)
{
  double *v7;
  int v8;
  int v9;
  int v10;
  double v11;
  int v12;
  uint64_t v13;
  int v14;
  double v15;
  int v16;
  double v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  double *v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int FirstDayOfWeek;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;

  if (!a3 || *(int *)a4 > 0)
    return result;
  v7 = result;
  v8 = icu::Calendar::get(result, 0x13u, a4);
  v9 = 0;
  v10 = 1;
  v11 = 0.0;
  if ((a2 & 0xFFFFFFFE) == 4)
  {
    v12 = 0;
    if (v8 != *((_DWORD *)v7 + 162))
      goto LABEL_15;
    v13 = (*(uint64_t (**)(double *))(*(_QWORD *)v7 + 264))(v7);
    v14 = (*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)v7 + 448))(v7, v13);
    v15 = v7[29];
    v16 = *((_DWORD *)v7 + 8);
    v17 = v7[78];
    if (v15 < v17)
      v18 = 0;
    else
      v18 = -10;
    v9 = v18 + v16;
    v11 = v15 + (double)(v18 + v16 - 1) * -86400000.0;
    if (v11 >= v17)
    {
      v12 = 0;
    }
    else
    {
      v12 = v14 - 10;
      if (v11 + (double)(v14 - 10) * 86400000.0 >= v17)
      {
        v10 = 0;
        goto LABEL_15;
      }
    }
    v10 = 1;
  }
  else
  {
    v12 = 0;
  }
LABEL_15:
  if ((_DWORD)a2 == 5)
  {
    if (v10)
    {
      v22 = v7;
      v23 = 5;
      return (double *)icu::Calendar::roll(v22, v23, a3, a4);
    }
    v24 = uprv_fmod(v7[29] - v11 + (double)a3 * 86400000.0, (double)v12 * 86400000.0);
    v25 = -0.0;
    if (v24 < 0.0)
      v25 = (double)v12 * 86400000.0;
    v26 = v11 + v24 + v25;
    return (double *)icu::Calendar::setTimeInMillis((uint64_t)v7, v26, a4);
  }
  if ((_DWORD)a2 == 4)
  {
    if (v10)
    {
      v22 = v7;
      v23 = 4;
      return (double *)icu::Calendar::roll(v22, v23, a3, a4);
    }
    v27 = *((_DWORD *)v7 + 10);
    FirstDayOfWeek = icu::Calendar::getFirstDayOfWeek((icu::Calendar *)v7);
    if (v27 >= FirstDayOfWeek)
      v29 = v27 - FirstDayOfWeek;
    else
      v29 = v27 - FirstDayOfWeek + 7;
    v30 = (v29 - v9 + 1) % 7;
    if (v30 >= 0)
      v31 = (v29 - v9 + 1) % 7;
    else
      v31 = v30 + 7;
    if (7 - v31 >= icu::Calendar::getMinimalDaysInFirstWeek((icu::Calendar *)v7))
      v32 = 1;
    else
      v32 = 8;
    v33 = v32 - v31;
    v34 = 7 * ((v12 - v9 + v29) / 7) - (v29 - v9) - v33 + 7;
    v35 = v9 - a3 + 8 * a3 - (v9 - a3 + 8 * a3 - v33) / v34 * v34 + (v34 & (((v9 - a3 + 8 * a3 - v33) % v34) >> 31));
    if (v35 <= 1)
      v35 = 1;
    if (v35 >= v12)
      v35 = v12;
    v26 = v11 + (double)(v35 - 1) * 86400000.0;
    return (double *)icu::Calendar::setTimeInMillis((uint64_t)v7, v26, a4);
  }
  if ((_DWORD)a2 != 3)
  {
    v22 = v7;
    v23 = a2;
    return (double *)icu::Calendar::roll(v22, v23, a3, a4);
  }
  v19 = icu::Calendar::get(v7, 3u, a4);
  v20 = icu::Calendar::get(v7, 0x11u, a4);
  v21 = *((_DWORD *)v7 + 9);
  if ((*(unsigned int (**)(double *))(*(_QWORD *)v7 + 264))(v7))
  {
    if (v19 == 1)
      v21 -= (*(uint64_t (**)(double *, _QWORD))(*(_QWORD *)v7 + 320))(v7, (v20 - 1));
  }
  else if (v19 >= 52)
  {
    v21 += (*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)v7 + 320))(v7, v20);
  }
  v36 = v19 + a3;
  if ((v36 - 53) <= 0xFFFFFFCB)
  {
    v37 = (*(uint64_t (**)(double *, uint64_t))(*(_QWORD *)v7 + 320))(v7, v20);
    v38 = *((_DWORD *)v7 + 10);
    v39 = (int)(v37 + v38 - (v21 + icu::Calendar::getFirstDayOfWeek((icu::Calendar *)v7))) % 7;
    if (v39 >= 0)
      v40 = v39;
    else
      v40 = v39 + 7;
    if (6 - v40 >= icu::Calendar::getMinimalDaysInFirstWeek((icu::Calendar *)v7))
      v41 = v37 - 7;
    else
      v41 = v37;
    v42 = icu::Calendar::weekNumber((icu::Calendar *)v7, v41, v41, v40 + 1);
    v36 = (v36 + v42 - 1) % v42 + 1;
  }
  icu::Calendar::set(v7, 3u, v36);
  return (double *)icu::Calendar::set(v7, 0x11u, v20);
}

uint64_t icu::GregorianCalendar::getActualMinimum(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

uint64_t icu::GregorianCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18BE26B70[4 * a2 + a3];
}

uint64_t icu::GregorianCalendar::getActualMaximum(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t v4;
  uint64_t v6;
  icu::Calendar *v7;
  int v8;
  double TimeInMillis;
  int v10;
  int v11;
  int v12;

  if ((_DWORD)a2 != 1)
    return icu::Calendar::getActualMaximum(a1, a2, a3);
  if (*(int *)a3 > 0)
    return 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v6)
  {
    v7 = (icu::Calendar *)v6;
    v4 = 1;
    icu::Calendar::setLenient(v6, 1);
    v8 = icu::Calendar::get(v7, 0, a3);
    TimeInMillis = icu::Calendar::getTimeInMillis(v7, a3);
    v10 = 140743;
    do
    {
      if (v10 + (int)v4 < 0 != __OFADD__(v10, (_DWORD)v4))
        v11 = v10 + v4 + 1;
      else
        v11 = v10 + v4;
      v12 = v11 >> 1;
      icu::Calendar::set(v7, 1u, v11 >> 1);
      if (icu::Calendar::get(v7, 1u, a3) == v11 >> 1 && icu::Calendar::get(v7, 0, a3) == v8)
      {
        v4 = (v11 >> 1);
        v12 = v10;
      }
      else
      {
        icu::Calendar::setTimeInMillis((uint64_t)v7, TimeInMillis, a3);
        v10 = v11 >> 1;
      }
    }
    while ((int)v4 + 1 < v12);
    (*(void (**)(icu::Calendar *))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    v4 = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v4;
}

uint64_t icu::GregorianCalendar::handleGetExtendedYear(icu::GregorianCalendar *this)
{
  int v1;
  int v2;
  unsigned int v3;

  v1 = *((_DWORD *)this + 52);
  v2 = *((_DWORD *)this + 34);
  if (v1 < v2)
    v3 = 1;
  else
    v3 = 19;
  if (*((_DWORD *)this + v3 + 33) < *((_DWORD *)this + 50))
    v3 = 17;
  if (v3 == 1)
  {
    if (*((int *)this + 33) < 1 || *((_DWORD *)this + 3))
    {
      if (v2 >= 1)
        return *((unsigned int *)this + 4);
      return 1970;
    }
    if (v2 < 1)
      return 0;
    else
      return (1 - *((_DWORD *)this + 4));
  }
  else
  {
    if (v3 != 17)
    {
      if (v1 >= 1)
        return *((unsigned int *)this + 22);
      return 1970;
    }
    return (*(uint64_t (**)(icu::GregorianCalendar *, _QWORD, _QWORD))(*(_QWORD *)this + 344))(this, *((unsigned int *)this + 20), *((unsigned int *)this + 6));
  }
}

uint64_t icu::GregorianCalendar::handleGetExtendedYearFromWeekFields(icu::GregorianCalendar *this, uint64_t a2, int a3)
{
  if (*((int *)this + 33) >= 1)
  {
    if (*((_DWORD *)this + 3))
      a2 = a2;
    else
      a2 = (1 - a2);
  }
  return icu::Calendar::handleGetExtendedYearFromWeekFields(this, a2, a3);
}

uint64_t icu::GregorianCalendar::internalGetEra(icu::GregorianCalendar *this)
{
  if (icu::Calendar::isSet((uint64_t)this, 0))
    return *((unsigned int *)this + 3);
  else
    return 1;
}

const char *icu::GregorianCalendar::getType(icu::GregorianCalendar *this)
{
  return "gregorian";
}

uint64_t icu::GregorianCalendar::haveDefaultCentury(icu::GregorianCalendar *this)
{
  return 1;
}

double icu::GregorianCalendar::defaultCenturyStart(icu::GregorianCalendar *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)&unk_1ECD27D20);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27D20))
  {
    sub_18BCE8144();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27D20);
  }
  return *(double *)&qword_1ECD26D18;
}

void sub_18BCE8144()
{
  icu::Calendar *v0;
  double v1;
  UErrorCode v2;
  _BYTE v3[656];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = U_ZERO_ERROR;
  bzero(v3, 0x290uLL);
  v0 = icu::GregorianCalendar::GregorianCalendar((icu::GregorianCalendar *)v3, &v2);
  if (v2 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v3, v1, &v2);
    icu::Calendar::add(v3, 1u, -80, &v2);
    qword_1ECD26D18 = icu::Calendar::getTimeInMillis((icu::Calendar *)v3, &v2);
    dword_1ECD26D20 = icu::Calendar::get(v3, 1u, &v2);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v3);
}

uint64_t icu::GregorianCalendar::defaultCenturyStartYear(icu::GregorianCalendar *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)&unk_1ECD27D20);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27D20))
  {
    sub_18BCE8144();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27D20);
  }
  return dword_1ECD26D20;
}

uint64_t sub_18BCE825C(int a1, int a2)
{
  if (a1 < 0)
    return ((a1 + 1) / a2 - 1);
  else
    return (a1 / a2);
}

uint64_t sub_18BCE8278(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
    return (a1 + 1) / a2 - 1;
  else
    return a1 / a2;
}

uint64_t sub_18BCE8294(int a1, _DWORD *a2, double a3)
{
  double v5;
  double v6;

  v5 = (double)a1;
  v6 = uprv_floor(a3 / (double)a1);
  if (a2)
    *a2 = (int)(uprv_floor(a3) - v6 * v5);
  return (int)v6;
}

void sub_18BCE82F0(double *a1, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;

  v6 = uprv_floor(a2 / a3);
  v7 = a2 - v6 * a3;
  v8 = -1.0;
  if (v7 < 0.0 || (v8 = 1.0, v7 >= a3))
  {
    v9 = v6 + v8;
    v7 = a2 - v9 * a3;
    if (v6 == v9)
      v7 = 0.0;
  }
  if (a1)
    *a1 = v7;
}

double sub_18BCE8360(int a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  int v10;

  v3 = a1 - 1;
  v4 = 365 * (a1 - 1);
  if (a1 < 1)
  {
    v5 = ~(-a1 / 0x190u) - (-a1 >> 2) + v4 + 1721422;
    v6 = ~(-a1 / 0x64u);
  }
  else
  {
    v5 = (v3 >> 2) + 1721422 + v4 + v3 / 0x190 + 1;
    v6 = v3 / 0x64;
  }
  HIDWORD(v8) = -1030792151 * a1 + 85899344;
  LODWORD(v8) = HIDWORD(v8);
  v7 = v8 >> 2;
  LODWORD(v8) = HIDWORD(v8);
  if ((v8 >> 4) >= 0xA3D70B)
    v9 = 0;
  else
    v9 = 12;
  if (v7 <= 0x28F5C28)
    v10 = v9;
  else
    v10 = 12;
  if ((a1 & 3) != 0)
    v10 = 0;
  return (double)(int)(a3 + v5 - v6 + word_18BE26D30[v10 + a2] + 2) + -2440588.0;
}

void sub_18BCE8448(int *a1, _DWORD *a2, _DWORD *a3, int *a4, int *a5, double a6)
{
  double v11;
  double v12;
  int v13;
  int v14;
  double v15;
  double v16;
  int v17;
  int v18;
  double v19;
  double v20;
  int v21;
  int v22;
  double v23;
  double v24;
  int v25;
  int v26;
  _BOOL4 v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;

  v11 = a6 + 719162.0;
  v12 = uprv_floor((a6 + 719162.0) / 146097.0);
  v13 = (int)(uprv_floor(v11) - v12 * 146097.0);
  v14 = (int)v12;
  *a5 = v13;
  v15 = (double)v13;
  v16 = uprv_floor((double)v13 / 36524.0);
  v17 = (int)(uprv_floor(v15) - v16 * 36524.0);
  v18 = (int)v16;
  *a5 = v17;
  v19 = (double)v17;
  v20 = uprv_floor((double)v17 / 1461.0);
  v21 = (int)(uprv_floor(v19) - v20 * 1461.0);
  v22 = (int)v20;
  *a5 = v21;
  v23 = (double)v21;
  v24 = uprv_floor((double)v21 / 365.0);
  *a5 = (int)(uprv_floor(v23) - v24 * 365.0);
  v25 = 400 * v14 + 100 * v18 + 4 * v22 + (int)v24;
  *a1 = v25;
  if (v18 == 4 || (int)v24 == 4)
  {
    *a5 = 365;
    v26 = *a1;
  }
  else
  {
    v26 = v25 + 1;
    *a1 = v25 + 1;
  }
  v27 = 1;
  if ((v26 & 3) == 0)
  {
    v28 = -1030792151 * v26 + 85899344;
    HIDWORD(v29) = v28;
    LODWORD(v29) = v28;
    if ((v29 >> 2) <= 0x28F5C28)
    {
      HIDWORD(v30) = v28;
      LODWORD(v30) = v28;
      v27 = (v30 >> 4) > 0xA3D70A;
    }
    else
    {
      v27 = 0;
    }
  }
  v31 = (int)uprv_fmod(v11 + 1.0, 7.0);
  if (v31 >= 0)
    v32 = v31 + 1;
  else
    v32 = v31 + 8;
  *a4 = v32;
  if (v27)
    v33 = 59;
  else
    v33 = 60;
  v34 = *a5;
  if (v27)
    v35 = 2;
  else
    v35 = 1;
  if (v27)
    v36 = 0;
  else
    v36 = 12;
  if (v34 >= v33)
    v37 = v35;
  else
    v37 = 0;
  v38 = 1497972245 * (12 * (v37 + v34) + 6);
  LODWORD(v38) = (v38 >> 39) + ((unint64_t)v38 >> 63);
  *a2 = v38;
  *a3 = *a5 - word_18BE26D30[(int)v38 + v36] + 1;
  ++*a5;
}

void sub_18BCE8698(int *a1, _DWORD *a2, _DWORD *a3, int *a4, int *a5, _DWORD *a6, double a7)
{
  double v13;
  double v14;

  v14 = 0.0;
  sub_18BCE82F0(&v14, a7, 86400000.0);
  *a6 = (int)v14;
  sub_18BCE8448(a1, a2, a3, a4, a5, v13);
}

uint64_t sub_18BCE8718(double a1)
{
  double v1;
  double v2;
  unsigned int v3;

  v1 = a1 + 5.0;
  v2 = uprv_floor((a1 + 5.0) / 7.0);
  v3 = (int)(uprv_floor(v1) - v2 * 7.0);
  if (v3)
    return v3;
  else
    return 7;
}

uint64_t sub_18BCE876C(int a1, int a2, int a3)
{
  int v3;
  unint64_t v5;
  unint64_t v6;

  if ((a3 - 22) > 6)
  {
    if ((a3 - 29) < 7)
      return 0xFFFFFFFFLL;
    else
      return ((a3 + 6) / 7);
  }
  else
  {
    if ((a1 & 3) != 0)
    {
      v3 = 0;
    }
    else
    {
      v3 = 12;
      HIDWORD(v5) = -1030792151 * a1 + 85899344;
      LODWORD(v5) = HIDWORD(v5);
      if ((v5 >> 2) <= 0x28F5C28)
      {
        HIDWORD(v6) = -1030792151 * a1 + 85899344;
        LODWORD(v6) = HIDWORD(v6);
        if ((v6 >> 4) >= 0xA3D70B)
          v3 = 0;
        else
          v3 = 12;
      }
    }
    if (a3 + 7 > byte_18BE26D60[v3 + a2])
      return 0xFFFFFFFFLL;
    else
      return 4;
  }
}

icu::HebrewCalendar *icu::HebrewCalendar::HebrewCalendar(icu::HebrewCalendar *this, char **a2, UErrorCode *a3)
{
  icu::TimeZone *v6;
  icu::Calendar *v7;
  double v8;

  v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  v7 = icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(_QWORD *)this = off_1E225F550;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

void icu::HebrewCalendar::~HebrewCalendar(icu::HebrewCalendar *this)
{
  void *v1;

  icu::Calendar::~Calendar(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::HebrewCalendar::getType(icu::HebrewCalendar *this)
{
  return "hebrew";
}

uint64_t *icu::HebrewCalendar::clone@<X0>(icu::HebrewCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *result = (uint64_t)off_1E225F550;
  }
  return result;
}

_QWORD *icu::HebrewCalendar::HebrewCalendar(icu::HebrewCalendar *this, const icu::HebrewCalendar *a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *result = off_1E225F550;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *result = off_1E225F550;
  return result;
}

_BYTE *icu::HebrewCalendar::add(_BYTE *result, unsigned int a2, int a3, UErrorCode *a4)
{
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  if (*(int *)a4 <= 0)
  {
    v6 = result;
    if (a2 == 23 || a2 == 2)
    {
      v7 = icu::Calendar::get(result, 2u, a4);
      v8 = icu::Calendar::get(v6, 1u, a4);
      v9 = v8;
      v10 = v7 + a3;
      if (a3 < 1)
      {
        v13 = 12 * v8 + 17;
        if (v7 <= 5)
          goto LABEL_21;
        while (1)
        {
          if (v10 <= 5)
          {
            if (v13 % 19 >= 0)
              v14 = 12;
            else
              v14 = -7;
            v10 -= v13 % 19 < v14;
          }
LABEL_21:
          if ((v10 & 0x80000000) == 0)
            break;
          v10 += 13;
          --v9;
          v13 -= 12;
        }
      }
      else
      {
        v11 = 12 * v8 + 17;
        if (v7 >= 5)
          goto LABEL_12;
        while (1)
        {
          if (v10 >= 5)
          {
            if (v11 % 19 >= 0)
              v12 = 12;
            else
              v12 = -7;
            if (v11 % 19 < v12)
              ++v10;
          }
LABEL_12:
          if (v10 < 13)
            break;
          ++v9;
          v11 += 12;
          v10 -= 13;
        }
      }
      icu::Calendar::set(v6, 2u, v10);
      icu::Calendar::set(v6, 1u, v9);
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, UErrorCode *))(*(_QWORD *)v6 + 392))(v6, 5, a4);
    }
    else
    {
      return icu::Calendar::add(result, a2, a3, a4);
    }
  }
  return result;
}

BOOL icu::HebrewCalendar::isLeapYear(icu::HebrewCalendar *this)
{
  int v1;
  int v2;

  v1 = (12 * (int)this + 17) % 19;
  if (v1 >= 0)
    v2 = 12;
  else
    v2 = -7;
  return v1 >= v2;
}

uint64_t icu::HebrewCalendar::add(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

_BYTE *icu::HebrewCalendar::roll(_BYTE *result, uint64_t a2, int a3, UErrorCode *a4)
{
  _BYTE *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v14;

  if (*(int *)a4 <= 0)
  {
    v6 = result;
    if ((_DWORD)a2 == 23 || (_DWORD)a2 == 2)
    {
      v7 = icu::Calendar::get(result, 2u, a4);
      v8 = (int)(12 * icu::Calendar::get(v6, 1u, a4) + 17) % 19;
      if (v8 >= 0)
        v9 = 12;
      else
        v9 = -7;
      if (v8 < v9)
        v10 = 12;
      else
        v10 = 13;
      v11 = a3 % v10 + v7;
      if (v8 < v9)
      {
        if (a3 < 1 || v7 > 4 || v11 < 5)
        {
          v14 = a3 < 0 && v7 > 5 && v11 < 6;
          v11 -= v14;
        }
        else
        {
          ++v11;
        }
      }
      icu::Calendar::set(v6, 2u, (v11 + 13) % 13);
      return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, UErrorCode *))(*(_QWORD *)v6 + 392))(v6, 5, a4);
    }
    else
    {
      return icu::Calendar::roll(result, a2, a3, a4);
    }
  }
  return result;
}

uint64_t icu::HebrewCalendar::monthsInYear(icu::HebrewCalendar *this)
{
  int v1;
  int v2;

  v1 = (12 * (int)this + 17) % 19;
  if (v1 >= 0)
    v2 = 12;
  else
    v2 = -7;
  if (v1 < v2)
    return 12;
  else
    return 13;
}

uint64_t icu::HebrewCalendar::roll(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t icu::HebrewCalendar::startOfYear(icu::HebrewCalendar *this, int *a2, UErrorCode *a3)
{
  signed int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  signed int v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  int v14;
  int v15;
  int v16;
  int v17;

  v4 = (int)this;
  sub_18BDA1768(0xAu, (uint64_t)sub_18BCE8EC4);
  v5 = sub_18BC84960((uint64_t **)&qword_1ECD27D28, v4, a2);
  if (!(_DWORD)v5)
  {
    v6 = sub_18BCE8278(235 * v4 - 234, 19);
    v7 = 13753 * v6 + 12084;
    v8 = v7 / 25920 + 29 * v6;
    v9 = v7 % 25920;
    v10 = (v8 % 7) > 6 || ((1 << (v8 % 7)) & 0x54) == 0;
    if (v10)
      v5 = v8;
    else
      v5 = (v8 + 1);
    if (v10)
      v11 = v8 % 7;
    else
      v11 = (v8 + 1) % 7;
    if (v9 >= 16405 && v11 == 1)
    {
      v16 = (12 * v4 + 17) % 19;
      if (v16 >= 0)
        v17 = 12;
      else
        v17 = -7;
      if (v16 >= v17)
        v5 = v5;
      else
        v5 = (v5 + 2);
    }
    else if (v9 >= 23270 && v11 == 0)
    {
      v14 = (12 * v4 + 5) % 19;
      if (v14 >= 0)
        v15 = 12;
      else
        v15 = -7;
      if (v14 < v15)
        v5 = v5;
      else
        v5 = (v5 + 1);
    }
    sub_18BC849FC((uint64_t **)&qword_1ECD27D28, v4, v5, a2);
  }
  return v5;
}

uint64_t sub_18BCE8EC4()
{
  if (qword_1ECD27D28)
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1ECD27D28 + 8))(qword_1ECD27D28);
  qword_1ECD27D28 = 0;
  return 1;
}

uint64_t icu::HebrewCalendar::absoluteDayToDayOfWeek(icu::HebrewCalendar *this)
{
  return ((int)this % 7 + 1);
}

uint64_t icu::HebrewCalendar::yearType(icu::HebrewCalendar *this)
{
  int v1;
  int v2;
  unsigned int v3;

  v1 = (*(uint64_t (**)(icu::HebrewCalendar *))(*(_QWORD *)this + 320))(this);
  v2 = v1 - 30;
  if (v1 <= 380)
    v2 = v1;
  v3 = v2 - 353;
  if (v3 >= 3)
    return 1;
  else
    return v3;
}

uint64_t icu::HebrewCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18BE26D98[4 * a2 + a3];
}

uint64_t icu::HebrewCalendar::handleGetMonthLength(icu::HebrewCalendar *this, uint64_t a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;

  if ((a3 & 0x80000000) != 0)
  {
    v6 = 12 * a2 + 5;
    do
    {
      a2 = (a2 - 1);
      if (v6 % 19 >= 0)
        v7 = 12;
      else
        v7 = -7;
      if (v6 % 19 < v7)
        v8 = 12;
      else
        v8 = 13;
      a3 += v8;
      v6 -= 12;
    }
    while ((a3 & 0x80000000) != 0);
  }
  else if (a3 >= 0xD)
  {
    v3 = 12 * a2 + 17;
    do
    {
      a2 = (a2 + 1);
      if (v3 % 19 >= 0)
        v4 = 12;
      else
        v4 = -7;
      if (v3 % 19 >= v4)
        v5 = -13;
      else
        v5 = -12;
      a3 += v5;
      v3 += 12;
    }
    while (a3 > 0xC);
  }
  v9 = a3;
  if (a3 - 1 > 1)
  {
    v13 = (char *)&unk_18BE26F18 + 3 * a3;
  }
  else
  {
    v10 = (*(uint64_t (**)(icu::HebrewCalendar *, uint64_t))(*(_QWORD *)this + 320))(this, a2);
    v11 = v10 - 30;
    if (v10 <= 380)
      v11 = v10;
    LODWORD(v12) = v11 - 353;
    if (v12 >= 3)
      v12 = 1;
    else
      v12 = v12;
    v13 = (char *)&unk_18BE26F18 + 3 * v9 + v12;
  }
  return *v13;
}

uint64_t icu::HebrewCalendar::handleGetYearLength(icu::HebrewCalendar *this, icu::HebrewCalendar *a2, UErrorCode *a3)
{
  int v4;
  UErrorCode *v5;
  int v7;

  v7 = 0;
  v4 = icu::HebrewCalendar::startOfYear((icu::HebrewCalendar *)((_DWORD)a2 + 1), &v7, a3);
  return v4 - icu::HebrewCalendar::startOfYear(a2, &v7, v5);
}

_DWORD *icu::HebrewCalendar::validateField(_DWORD *a1, uint64_t a2, int *a3)
{
  int v6;
  int v7;
  _DWORD *result;

  if ((_DWORD)a2 != 23 && (_DWORD)a2 != 2)
    return icu::Calendar::validateField(a1, a2, a3);
  v6 = (int)(12 * (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 328))(a1) + 17) % 19;
  v7 = v6 >= 0 ? 12 : -7;
  if (v6 >= v7)
    return icu::Calendar::validateField(a1, a2, a3);
  result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 264))(a1);
  if ((_DWORD)result != 5)
    return icu::Calendar::validateField(a1, a2, a3);
  *a3 = 1;
  return result;
}

uint64_t icu::HebrewCalendar::handleComputeFields(icu::HebrewCalendar *this, int a2, UErrorCode *a3)
{
  int v5;
  double v6;
  icu::HebrewCalendar *v7;
  UErrorCode *v8;
  int v9;
  UErrorCode *v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  char *v23;
  __int16 *v24;
  int v25;
  int v26;
  int v28;

  v5 = a2 - 347997;
  v6 = uprv_floor((double)(a2 - 347997) * 25920.0 / 765433.0);
  v7 = (icu::HebrewCalendar *)(int)(uprv_floor((v6 * 19.0 + 234.0) / 235.0) + 1.0);
  v9 = icu::HebrewCalendar::startOfYear(v7, (int *)a3, v8);
  v11 = v5 - v9;
  if (v5 <= v9)
  {
    do
    {
      v7 = (icu::HebrewCalendar *)((_DWORD)v7 - 1);
      v11 = v5 - icu::HebrewCalendar::startOfYear(v7, (int *)a3, v10);
    }
    while (v11 < 1);
  }
  result = (*(uint64_t (**)(icu::HebrewCalendar *, icu::HebrewCalendar *))(*(_QWORD *)this + 320))(this, v7);
  v13 = 0;
  v14 = result - 30;
  if ((int)result <= 380)
    v14 = result;
  v15 = v14 - 353;
  if (v15 >= 3)
    v16 = 1;
  else
    v16 = v15;
  v17 = (12 * (int)v7 + 17) % 19;
  if (v17 >= 0)
    v18 = 12;
  else
    v18 = -7;
  v19 = (char *)&unk_18BE26F40 + 2 * v16;
  v20 = (char *)&unk_18BE26F94 + 2 * v16;
  while (1)
  {
    v21 = v17 >= v18 ? v19 : v20;
    if (v11 <= *(__int16 *)v21)
      break;
    --v13;
    v19 += 6;
    v20 += 6;
    if (v13 == -14)
      goto LABEL_28;
  }
  if (!(_DWORD)v13)
  {
LABEL_28:
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    return result;
  }
  v22 = ~(_DWORD)v13;
  v23 = (char *)&unk_18BE26F40 + 6 * ~(_DWORD)v13 + 2 * v16;
  v24 = (__int16 *)((char *)&unk_18BE26F94 + 6 * ~(_DWORD)v13 + 2 * v16);
  if (v17 >= v18)
    v24 = (__int16 *)v23;
  v25 = *v24;
  *((_BYTE *)this + 108) = 1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = (_DWORD)v7;
  *(_QWORD *)((char *)this + 132) = 0x100000001;
  *(_WORD *)((char *)this + 109) = 257;
  *((_DWORD *)this + 22) = (_DWORD)v7;
  v26 = v11 - v25;
  *((_DWORD *)this + 52) = 1;
  *((_BYTE *)this + 127) = 1;
  if (-(int)v13 > 6 && v17 < v18)
    v28 = -2 - v13;
  else
    v28 = ~(_DWORD)v13;
  *((_DWORD *)this + 26) = v28;
  *((_DWORD *)this + 56) = 1;
  *((_BYTE *)this + 131) = 1;
  *((_DWORD *)this + 5) = v22;
  *((_DWORD *)this + 35) = 1;
  *(_WORD *)((char *)this + 113) = 257;
  *((_DWORD *)this + 8) = v26;
  *((_DWORD *)this + 9) = v11;
  *((_QWORD *)this + 19) = 0x100000001;
  return result;
}

uint64_t icu::HebrewCalendar::handleGetExtendedYear(icu::HebrewCalendar *this)
{
  char *v2;

  if (icu::Calendar::newerField((uint64_t)this, 0x13u, 1u) == 19)
  {
    if (*((int *)this + 52) >= 1)
    {
      v2 = (char *)this + 88;
      return *(unsigned int *)v2;
    }
  }
  else if (*((int *)this + 34) >= 1)
  {
    v2 = (char *)this + 16;
    return *(unsigned int *)v2;
  }
  return 1;
}

uint64_t icu::HebrewCalendar::handleComputeMonthStart(icu::HebrewCalendar *this, icu::HebrewCalendar *a2, UErrorCode *a3)
{
  unsigned int v3;
  icu::HebrewCalendar *v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  __int16 *v20;
  int v21;

  v3 = a3;
  v4 = a2;
  v21 = 0;
  if ((a3 & 0x80000000) != 0)
  {
    v9 = 12 * (_DWORD)a2 + 5;
    do
    {
      v4 = (icu::HebrewCalendar *)((_DWORD)v4 - 1);
      if (v9 % 19 >= 0)
        v10 = 12;
      else
        v10 = -7;
      if (v9 % 19 < v10)
        v11 = 12;
      else
        v11 = 13;
      v3 += v11;
      v9 -= 12;
    }
    while ((v3 & 0x80000000) != 0);
  }
  else if (a3 >= 0xD)
  {
    v6 = 12 * (_DWORD)a2 + 17;
    do
    {
      v4 = (icu::HebrewCalendar *)((_DWORD)v4 + 1);
      if (v6 % 19 >= 0)
        v7 = 12;
      else
        v7 = -7;
      if (v6 % 19 >= v7)
        v8 = -13;
      else
        v8 = -12;
      v3 += v8;
      v6 += 12;
    }
    while (v3 > 0xC);
  }
  v12 = icu::HebrewCalendar::startOfYear(v4, &v21, a3);
  if (v21 > 0)
    return 0;
  v14 = v12;
  if (v3)
  {
    v15 = (12 * (int)v4 + 17) % 19;
    if (v15 >= 0)
      v16 = 12;
    else
      v16 = -7;
    v17 = (*(uint64_t (**)(icu::HebrewCalendar *, icu::HebrewCalendar *))(*(_QWORD *)this + 320))(this, v4);
    v18 = v17 - 30;
    if (v17 <= 380)
      v18 = v17;
    v19 = v18 - 353;
    if (v19 >= 3)
      v19 = 1;
    v20 = (__int16 *)&unk_18BE26F40;
    if (v15 < v16)
      v20 = (__int16 *)&unk_18BE26F94;
    v14 += v20[3 * v3 + v19];
  }
  return (v14 + 347997);
}

uint64_t icu::HebrewCalendar::getRelatedYear(icu::HebrewCalendar *this, UErrorCode *a2)
{
  unsigned int v3;

  v3 = icu::Calendar::get(this, 0x13u, a2) - 3760;
  if (*(int *)a2 <= 0)
    return v3;
  else
    return 0;
}

_BYTE *icu::HebrewCalendar::setRelatedYear(icu::HebrewCalendar *this, int a2)
{
  return icu::Calendar::set(this, 0x13u, a2 + 3760);
}

uint64_t icu::HebrewCalendar::haveDefaultCentury(icu::HebrewCalendar *this)
{
  return 1;
}

double icu::HebrewCalendar::defaultCenturyStart(icu::HebrewCalendar *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)&unk_1ECD27D34);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27D34))
  {
    sub_18BCE9654();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27D34);
  }
  return *(double *)&qword_1ECD26D28;
}

void sub_18BCE9654()
{
  icu::Calendar *v0;
  double v1;
  UErrorCode v2;
  char *v3[28];
  _BYTE v4[624];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = U_ZERO_ERROR;
  bzero(v4, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v3, "@calendar=hebrew", 0, 0, 0);
  icu::HebrewCalendar::HebrewCalendar((icu::HebrewCalendar *)v4, v3, &v2);
  icu::Locale::~Locale((icu::Locale *)v3);
  if (v2 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v4, v1, &v2);
    if (v2 <= U_ZERO_ERROR)
      icu::Calendar::add(v4, 1u, -80, &v2);
    qword_1ECD26D28 = icu::Calendar::getTimeInMillis((icu::Calendar *)v4, &v2);
    dword_1ECD26D30 = icu::Calendar::get(v4, 1u, &v2);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v4);
}

uint64_t icu::HebrewCalendar::defaultCenturyStartYear(icu::HebrewCalendar *this)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)&unk_1ECD27D34);
  if (v1 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27D34))
  {
    sub_18BCE9654();
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27D34);
  }
  return dword_1ECD26D30;
}

BOOL icu::HebrewCalendar::inTemporalLeapYear(icu::HebrewCalendar *this, UErrorCode *a2)
{
  int v3;
  int v5;
  int v6;

  if (*(int *)a2 > 0)
    return 0;
  v3 = icu::Calendar::get(this, 0x13u, a2);
  if (*(int *)a2 > 0)
    return 0;
  v5 = (12 * v3 + 17) % 19;
  if (v5 >= 0)
    v6 = 12;
  else
    v6 = -7;
  return v5 >= v6;
}

char *icu::HebrewCalendar::getTemporalMonthCode(icu::HebrewCalendar *this, UErrorCode *a2)
{
  int v3;

  v3 = icu::Calendar::get(this, 2u, a2);
  if (*(int *)a2 <= 0)
    return off_1E225F708[v3];
  else
    return 0;
}

uint64_t icu::HebrewCalendar::setTemporalMonthCode(uint64_t this, const char *__s, UErrorCode *a3)
{
  _BYTE *v5;
  uint64_t v6;

  if (*(int *)a3 <= 0)
  {
    v5 = (_BYTE *)this;
    this = strlen(__s);
    if ((this - 3) > 1)
    {
LABEL_6:
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      v6 = 0;
      while (1)
      {
        this = strcmp(__s, off_1E225F708[v6]);
        if (!(_DWORD)this)
          return (uint64_t)icu::Calendar::set(v5, 2u, v6);
        if (++v6 == 13)
          goto LABEL_6;
      }
    }
  }
  return this;
}

uint64_t icu::HebrewCalendar::internalGetMonth(icu::HebrewCalendar *this)
{
  int v2;
  int v3;
  int v4;

  if (icu::Calendar::resolveFields(this, icu::Calendar::kMonthPrecedence) != 23)
    return icu::Calendar::internalGetMonth(this);
  v2 = *((_DWORD *)this + 26);
  v3 = (int)(12 * (*(uint64_t (**)(icu::HebrewCalendar *))(*(_QWORD *)this + 328))(this) + 17) % 19;
  if (v3 >= 0)
    v4 = 12;
  else
    v4 = -7;
  if (v3 >= v4 || v2 <= 5)
    return v2;
  else
    return (v2 + 1);
}

void *icu::HebrewCalendar::getStaticClassID(icu::HebrewCalendar *this)
{
  return &unk_1EE0099F0;
}

void *icu::HebrewCalendar::getDynamicClassID(icu::HebrewCalendar *this)
{
  return &unk_1EE0099F0;
}

uint64_t *icu::IndianCalendar::clone@<X0>(icu::IndianCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *result = (uint64_t)off_1E225F7A0;
  }
  return result;
}

_QWORD *icu::IndianCalendar::IndianCalendar(icu::IndianCalendar *this, const icu::IndianCalendar *a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *result = off_1E225F7A0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)icu::Calendar::Calendar((uint64_t)this, (uint64_t)a2);
  *result = off_1E225F7A0;
  return result;
}

icu::IndianCalendar *icu::IndianCalendar::IndianCalendar(icu::IndianCalendar *this, char **a2, UErrorCode *a3)
{
  icu::TimeZone *v6;
  icu::Calendar *v7;
  double v8;

  v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  v7 = icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(_QWORD *)this = off_1E225F7A0;
  icu::Calendar::getNow(v7);
  icu::Calendar::setTimeInMillis((uint64_t)this, v8, a3);
  return this;
}

void icu::IndianCalendar::~IndianCalendar(icu::IndianCalendar *this)
{
  void *v1;

  icu::Calendar::~Calendar(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::IndianCalendar::getType(icu::IndianCalendar *this)
{
  return "indian";
}

uint64_t icu::IndianCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18BE27000[4 * a2 + a3];
}

uint64_t icu::IndianCalendar::handleGetMonthLength(icu::IndianCalendar *this, int a2, int a3)
{
  int v3;
  unsigned int v4;
  unint64_t v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v10;

  v3 = a2;
  v10 = a3;
  if (a3 >= 0xC)
    v3 = sub_18BCE8294(12, &v10, (double)a3) + a2;
  HIDWORD(v5) = -1030792151 * (v3 + 78) + 85899344;
  LODWORD(v5) = HIDWORD(v5);
  v4 = v5 >> 2;
  LODWORD(v5) = HIDWORD(v5);
  v6 = (v5 >> 4) < 0xA3D70B;
  v7 = v4 > 0x28F5C28 || v6;
  if ((((_BYTE)v3 + 78) & 3) != 0)
    v8 = 0;
  else
    v8 = v7;
  if (v10)
    v8 = 0;
  if ((v10 - 1) < 5)
    v8 = 1;
  if (v8)
    return 31;
  else
    return 30;
}

uint64_t icu::IndianCalendar::handleGetYearLength(icu::IndianCalendar *this, int a2)
{
  unint64_t v3;
  unint64_t v4;

  if (((a2 + 78) & 3) != 0)
    return 365;
  HIDWORD(v3) = -1030792151 * (a2 + 78) + 85899344;
  LODWORD(v3) = HIDWORD(v3);
  if ((v3 >> 2) > 0x28F5C28)
    return 366;
  HIDWORD(v4) = -1030792151 * (a2 + 78) + 85899344;
  LODWORD(v4) = HIDWORD(v4);
  if ((v4 >> 4) >= 0xA3D70B)
    return 365;
  else
    return 366;
}

uint64_t icu::IndianCalendar::handleComputeMonthStart(icu::IndianCalendar *this, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  BOOL v7;
  double v8;
  int v9;
  double v10;
  double v11;
  int v12;
  double v13;
  int v15;

  v3 = a2;
  v15 = a3;
  if (a3 >= 0xC)
  {
    v3 = sub_18BCE8294(12, &v15, (double)a3) + a2;
    a3 = v15;
  }
  if (a3 == 12)
    v4 = 1;
  else
    v4 = a3 + 1;
  v5 = v3 + 78;
  if (((v3 + 78) & 3) == 0
    && ((HIDWORD(v6) = -1030792151 * v5 + 85899344, LODWORD(v6) = HIDWORD(v6), (v6 >> 2) <= 0x28F5C28)
      ? (v7 = v5 % 400 == 0)
      : (v7 = 1),
        v7))
  {
    v8 = 31.0;
    v9 = 21;
  }
  else
  {
    v8 = 30.0;
    v9 = 22;
  }
  v10 = sub_18BCE8360(v5, 2, v9) + 2440588.0 + -0.5;
  if (v4 != 1)
  {
    v11 = v8 + v10;
    if (v4 >= 7)
      v12 = 7;
    else
      v12 = v4;
    v13 = (double)(30 * v4 - 210);
    if (v4 <= 7)
      v13 = -0.0;
    v10 = v13 + v11 + (double)(31 * v12 - 62);
  }
  return (int)v10;
}

uint64_t icu::IndianCalendar::handleGetExtendedYear(icu::IndianCalendar *this)
{
  char *v2;

  if (icu::Calendar::newerField((uint64_t)this, 0x13u, 1u) == 19)
  {
    if (*((int *)this + 52) >= 1)
    {
      v2 = (char *)this + 88;
      return *(unsigned int *)v2;
    }
  }
  else if (*((int *)this + 34) >= 1)
  {
    v2 = (char *)this + 16;
    return *(unsigned int *)v2;
  }
  return 1;
}

void icu::IndianCalendar::handleComputeFields(icu::IndianCalendar *this, int a2, UErrorCode *a3)
{
  double v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v4 = (double)a2;
  sub_18BCE8448((int *)&v22, (_DWORD *)&v22 + 1, &v23, (int *)&v21, (int *)&v21 + 1, (double)a2 + -2440588.0);
  v5 = v22;
  v6 = (int)(v4 - (sub_18BCE8360(v22, 0, 1) + 2440588.0 + -0.5));
  if (v6 > 79)
  {
    v7 = v5 - 78;
    HIDWORD(v13) = -1030792151 * v5 + 85899344;
    LODWORD(v13) = HIDWORD(v13);
    v12 = v13 >> 2;
    LODWORD(v13) = HIDWORD(v13);
    if ((v13 >> 4) >= 0xA3D70B)
      v14 = 30;
    else
      v14 = 31;
    if (v12 <= 0x28F5C28)
      v15 = v14;
    else
      v15 = 31;
    if ((v5 & 3) != 0)
      v8 = 30;
    else
      v8 = v15;
    v11 = -80;
  }
  else
  {
    v7 = v5 - 79;
    v8 = 30;
    if (((v5 - 1) & 3) == 0)
    {
      HIDWORD(v10) = -1030792151 * (v5 - 1) + 85899344;
      LODWORD(v10) = HIDWORD(v10);
      v9 = v10 >> 2;
      LODWORD(v10) = HIDWORD(v10);
      v8 = (v10 >> 4) >= 0xA3D70B ? 30 : 31;
      if (v9 > 0x28F5C28)
        v8 = 31;
    }
    v11 = v8 + 255;
  }
  v16 = v11 + v6;
  v17 = v11 + v6 - v8;
  if (v11 + v6 >= v8)
  {
    if (v17 > 154)
    {
      v20 = v17 - 155;
      v18 = (int)uprv_floor((double)(v20 / 0x1E)) + 6;
      v19 = v20 % 0x1E;
    }
    else
    {
      v18 = (int)uprv_floor((double)(v17 / 31)) + 1;
      v19 = v17 % 31;
    }
  }
  else
  {
    v18 = 0;
    v19 = v16;
  }
  *((_BYTE *)this + 108) = 1;
  *((_DWORD *)this + 22) = v7;
  *((_DWORD *)this + 52) = 1;
  *((_BYTE *)this + 127) = 1;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = v7;
  *(_QWORD *)((char *)this + 132) = 0x100000001;
  *(_WORD *)((char *)this + 109) = 257;
  *((_DWORD *)this + 5) = v18;
  *((_DWORD *)this + 35) = 1;
  *((_DWORD *)this + 26) = v18;
  *((_DWORD *)this + 56) = 1;
  *((_BYTE *)this + 131) = 1;
  *(_WORD *)((char *)this + 113) = 257;
  *((_DWORD *)this + 8) = v19 + 1;
  *((_DWORD *)this + 9) = v16 + 1;
  *((_QWORD *)this + 19) = 0x100000001;
}

uint64_t icu::IndianCalendar::getRelatedYear(icu::IndianCalendar *this, UErrorCode *a2)
{
  unsigned int v3;

  v3 = icu::Calendar::get(this, 0x13u, a2) + 79;
  if (*(int *)a2 <= 0)
    return v3;
  else
    return 0;
}

_BYTE *icu::IndianCalendar::setRelatedYear(icu::IndianCalendar *this, int a2)
{
  return icu::Calendar::set(this, 0x13u, a2 - 79);
}

uint64_t icu::IndianCalendar::haveDefaultCentury(icu::IndianCalendar *this)
{
  return 1;
}

double icu::IndianCalendar::defaultCenturyStart(icu::IndianCalendar *this)
{
  unsigned int v1;

  v1 = atomic_load(dword_1ECD27D3C);
  if (v1 != 2 && icu::umtx_initImplPreInit(dword_1ECD27D3C))
  {
    sub_18BCEA094();
    icu::umtx_initImplPostInit(dword_1ECD27D3C);
  }
  return *(double *)&qword_1ECD26D38;
}

void sub_18BCEA094()
{
  icu::Calendar *v0;
  double v1;
  double TimeInMillis;
  int v3;
  UErrorCode v4;
  char *v5[28];
  _BYTE v6[624];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = U_ZERO_ERROR;
  bzero(v6, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v5, "@calendar=Indian", 0, 0, 0);
  icu::IndianCalendar::IndianCalendar((icu::IndianCalendar *)v6, v5, &v4);
  icu::Locale::~Locale((icu::Locale *)v5);
  if (v4 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v0);
    icu::Calendar::setTimeInMillis((uint64_t)v6, v1, &v4);
    icu::Calendar::add(v6, 1u, -80, &v4);
    TimeInMillis = icu::Calendar::getTimeInMillis((icu::Calendar *)v6, &v4);
    v3 = icu::Calendar::get(v6, 1u, &v4);
    qword_1ECD26D38 = *(_QWORD *)&TimeInMillis;
    dword_1ECD26D40 = v3;
  }
  icu::Calendar::~Calendar((icu::Calendar *)v6);
}

uint64_t icu::IndianCalendar::defaultCenturyStartYear(icu::IndianCalendar *this)
{
  unsigned int v1;

  v1 = atomic_load(dword_1ECD27D3C);
  if (v1 != 2 && icu::umtx_initImplPreInit(dword_1ECD27D3C))
  {
    sub_18BCEA094();
    icu::umtx_initImplPostInit(dword_1ECD27D3C);
  }
  return dword_1ECD26D40;
}

void *icu::IndianCalendar::getStaticClassID(icu::IndianCalendar *this)
{
  return &unk_1EE0099F4;
}

void *icu::IndianCalendar::getDynamicClassID(icu::IndianCalendar *this)
{
  return &unk_1EE0099F4;
}

uint64_t sub_18BCEA1F8(uint64_t a1, _DWORD *a2)
{
  void *v4;
  BOOL v5;

  *(_QWORD *)a1 = uprv_malloc(0x2000uLL);
  v4 = uprv_malloc(0x200uLL);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  if (*(_QWORD *)a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    *a2 = 7;
  return a1;
}

void **sub_18BCEA258(void **a1)
{
  uprv_free(a1[4]);
  uprv_free(a1[2]);
  uprv_free(*a1);
  return a1;
}

size_t sub_18BCEA294(size_t result, char *__s, int a3)
{
  size_t v3;

  v3 = result;
  *(_DWORD *)(result + 8) = 0;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 40) = __s;
  if (a3 == -1)
  {
    result = strlen(__s);
    a3 = result;
  }
  *(_DWORD *)(v3 + 48) = a3;
  return result;
}

char *sub_18BCEA2D4(char *result, char *__s, int a3)
{
  uint64_t v4;
  int v5;
  char *v6;

  if (__s)
  {
    v4 = (uint64_t)result;
    if (a3 == -1)
      a3 = strlen(__s);
    v5 = a3 + 1;
    uprv_free(*(void **)(v4 + 32));
    v6 = (char *)uprv_malloc(v5);
    *(_QWORD *)(v4 + 32) = v6;
    return strncpy(v6, __s, v5);
  }
  return result;
}

BOOL sub_18BCEA33C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) != 0;
}

unsigned __int8 **sub_18BCEA34C(unsigned __int8 **result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  signed int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unint64_t i;
  BOOL v19;
  BOOL v20;
  _BOOL4 v21;

  LODWORD(v2) = *((_DWORD *)result + 12);
  if (!a2)
    goto LABEL_18;
  if ((int)v2 < 1)
    goto LABEL_24;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = result[5][v3];
    if (v9 != 60 || (v6 & 1) != 0)
    {
      if ((v9 != 123) | v7 & 1)
      {
        if (((v7 | v6) & 1) == 0)
        {
          v6 = 0;
          v7 = 0;
          (*result)[v8++] = v9;
          LODWORD(v2) = *((_DWORD *)result + 12);
        }
      }
      else
      {
        v7 = 0;
        v4 += v6 & 1;
        ++v5;
        v6 = 1;
      }
    }
    else
    {
      v6 = 0;
      v4 += v7 & 1;
      ++v5;
      v7 = 1;
    }
    v10 = v9 != 62;
    v11 = v9 != 125;
    if (++v3 >= (int)v2)
      break;
    v7 &= v10;
    v6 &= v11;
  }
  while (v8 < 0x2000);
  *((_DWORD *)result + 2) = v8;
  if (v5 < 5 || (int)(v5 / 5u) < v4)
  {
LABEL_18:
    if ((int)v2 >= 1)
      goto LABEL_19;
LABEL_24:
    LODWORD(v2) = 0;
LABEL_25:
    *((_DWORD *)result + 2) = v2;
    goto LABEL_26;
  }
  if (v8 <= 99 && (int)v2 > 600)
  {
LABEL_19:
    v12 = 0;
    if ((int)v2 >= 0x2000)
      v2 = 0x2000;
    else
      v2 = v2;
    do
    {
      (*result)[v12] = result[5][v12];
      ++v12;
    }
    while (v2 != v12);
    goto LABEL_25;
  }
LABEL_26:
  v13 = result[2];
  *((_OWORD *)v13 + 30) = 0u;
  *((_OWORD *)v13 + 31) = 0u;
  *((_OWORD *)v13 + 28) = 0u;
  *((_OWORD *)v13 + 29) = 0u;
  *((_OWORD *)v13 + 26) = 0u;
  *((_OWORD *)v13 + 27) = 0u;
  *((_OWORD *)v13 + 24) = 0u;
  *((_OWORD *)v13 + 25) = 0u;
  *((_OWORD *)v13 + 22) = 0u;
  *((_OWORD *)v13 + 23) = 0u;
  *((_OWORD *)v13 + 20) = 0u;
  *((_OWORD *)v13 + 21) = 0u;
  *((_OWORD *)v13 + 18) = 0u;
  *((_OWORD *)v13 + 19) = 0u;
  *((_OWORD *)v13 + 16) = 0u;
  *((_OWORD *)v13 + 17) = 0u;
  *((_OWORD *)v13 + 14) = 0u;
  *((_OWORD *)v13 + 15) = 0u;
  *((_OWORD *)v13 + 12) = 0u;
  *((_OWORD *)v13 + 13) = 0u;
  *((_OWORD *)v13 + 10) = 0u;
  *((_OWORD *)v13 + 11) = 0u;
  *((_OWORD *)v13 + 8) = 0u;
  *((_OWORD *)v13 + 9) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *((_OWORD *)v13 + 7) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 2) = 0u;
  *((_OWORD *)v13 + 3) = 0u;
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  v14 = *((unsigned int *)result + 2);
  v15 = result[2];
  if ((int)v14 >= 1)
  {
    v16 = *result;
    do
    {
      v17 = *v16++;
      ++*(_WORD *)&v15[2 * v17];
      --v14;
    }
    while (v14);
  }
  *((_BYTE *)result + 25) = 1;
  for (i = 1; i != 256; ++i)
  {
    if (*(_WORD *)&v15[2 * i])
    {
      v19 = i >= 0x20 || (i - 11) >= 0xFFFFFFFE;
      v20 = v19 || i == 13;
      v21 = !v20;
      if (i > 0x7E || v21)
      {
        *((_BYTE *)result + 25) = 0;
        if ((i & 0x7FFFFFE0) == 0x80)
          *((_BYTE *)result + 24) = 1;
      }
    }
  }
  if (*(__int16 *)v15 > 1)
    *((_BYTE *)result + 25) = 0;
  return result;
}

const char *icu::IslamicCalendar::getType(icu::IslamicCalendar *this)
{
  return "islamic";
}

uint64_t *icu::IslamicCalendar::clone@<X0>(icu::IslamicCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *result = (uint64_t)off_1E225F980;
  }
  return result;
}

icu::IslamicCalendar *icu::IslamicCalendar::IslamicCalendar(icu::IslamicCalendar *this, char **a2, UErrorCode *a3)
{
  icu::TimeZone *v6;
  UErrorCode *v7;
  icu::Calendar *v8;
  double v9;

  v6 = (icu::TimeZone *)icu::TimeZone::forLocaleOrDefault(a2, (const icu::Locale *)a2);
  icu::Calendar::Calendar(this, v6, (const icu::Locale *)a2, a3);
  *(_QWORD *)this = off_1E225F980;
  icu::IslamicCalendar::setLocation((icu::IslamicCalendar *)((char *)a2 + 26), (char *)a3, v7);
  icu::Calendar::getNow(v8);
  icu::Calendar::setTimeInMillis((uint64_t)this, v9, a3);
  return this;
}

void icu::IslamicCalendar::setLocation(icu::IslamicCalendar *this, char *a2, UErrorCode *a3)
{
  unint64_t v5;
  uint64_t *v6;
  icu::CalendarAstronomer *v7;
  icu::CalendarAstronomer *v8;

  umtx_lock((icu::UMutex *)&unk_1EE009AA8);
  v7 = (icu::CalendarAstronomer *)qword_1EE009A50;
  if (!qword_1EE009A50)
  {
    v8 = (icu::CalendarAstronomer *)icu::UMemory::operator new(v6, (icu::UMemory *)0x88, v5);
    if (v8)
      v8 = (icu::CalendarAstronomer *)icu::CalendarAstronomer::CalendarAstronomer(v8);
    else
      *(_DWORD *)a2 = 7;
    qword_1EE009A50 = (uint64_t)v8;
    sub_18BDA1768(8u, (uint64_t)sub_18BCEA940);
    v7 = (icu::CalendarAstronomer *)qword_1EE009A50;
  }
  icu::CalendarAstronomer::setLocation(v7, (char *)this);
  umtx_unlock((std::mutex **)&unk_1EE009AA8);
}

void icu::IslamicCalendar::~IslamicCalendar(icu::IslamicCalendar *this)
{
  void *v1;

  icu::Calendar::~Calendar(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::IslamicCalendar::handleGetLimit(uint64_t a1, int a2, int a3)
{
  return dword_18BE27684[4 * a2 + a3];
}

BOOL icu::IslamicCalendar::civilLeapYear(icu::IslamicCalendar *this)
{
  return (11 * (int)this + 14) % 30 < 11;
}

uint64_t icu::IslamicCalendar::yearStart(icu::IslamicCalendar *this, int a2)
{
  return icu::IslamicCalendar::trueMonthStart(this, 12 * a2 - 12);
}

uint64_t icu::IslamicCalendar::trueMonthStart(icu::IslamicCalendar *this, signed int a2)
{
  unsigned int v3;
  double v4;
  UErrorCode *v5;
  UErrorCode *v6;
  double v7;
  double v9;
  double v10;
  int v11;

  v11 = 0;
  v3 = sub_18BC84960((uint64_t **)&qword_1EE0099F8, a2, &v11);
  if (!v3)
  {
    v4 = uprv_floor(29.5305889 * (double)a2) * 86400000.0 + -4.25215872e13;
    icu::IslamicCalendar::moonAge((icu::IslamicCalendar *)&v11, v4, v5);
    if (v11 <= 0)
    {
      if (v7 >= 0.0)
      {
        while (1)
        {
          v4 = v4 + -86400000.0;
          icu::IslamicCalendar::moonAge((icu::IslamicCalendar *)&v11, v4, v6);
          if (v11 > 0)
            break;
          if (v10 < 0.0)
          {
LABEL_13:
            v3 = sub_18BCE8278((uint64_t)((double)(uint64_t)v4 + 4.25215872e13), 86400000) + 1;
            sub_18BC849FC((uint64_t **)&qword_1EE0099F8, a2, v3, &v11);
            goto LABEL_4;
          }
        }
      }
      else
      {
        while (1)
        {
          v4 = v4 + 86400000.0;
          icu::IslamicCalendar::moonAge((icu::IslamicCalendar *)&v11, v4, v6);
          if (v11 > 0)
            break;
          if (v9 >= 0.0)
            goto LABEL_13;
        }
      }
    }
    v3 = 0;
  }
LABEL_4:
  if (v11 <= 0)
    return v3;
  else
    return 0;
}

uint64_t icu::IslamicCalendar::monthStart(icu::IslamicCalendar *this, int a2, int a3)
{
  return icu::IslamicCalendar::trueMonthStart(this, a3 + 12 * a2 - 12);
}

void icu::IslamicCalendar::moonAge(icu::IslamicCalendar *this, double a2, UErrorCode *a3)
{
  unint64_t v5;
  uint64_t *v6;
  icu::CalendarAstronomer *v7;
  icu::CalendarAstronomer *v8;

  umtx_lock((icu::UMutex *)&unk_1EE009A00);
  v7 = (icu::CalendarAstronomer *)qword_1EE009A50;
  if (qword_1EE009A50)
    goto LABEL_4;
  v8 = (icu::CalendarAstronomer *)icu::UMemory::operator new(v6, (icu::UMemory *)0x88, v5);
  if (v8)
  {
    qword_1EE009A50 = icu::CalendarAstronomer::CalendarAstronomer(v8);
    sub_18BDA1768(8u, (uint64_t)sub_18BCEA940);
    v7 = (icu::CalendarAstronomer *)qword_1EE009A50;
LABEL_4:
    icu::CalendarAstronomer::setTime(v7, a2);
    icu::CalendarAstronomer::getMoonAge((icu::CalendarAstronomer *)qword_1EE009A50);
    umtx_unlock((std::mutex **)&unk_1EE009A00);
    return;
  }
  qword_1EE009A50 = 0;
  *(_DWORD *)this = 7;
}

uint64_t sub_18BCEA940()
{
  void *v0;

  if (qword_1EE0099F8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)qword_1EE0099F8 + 8))(qword_1EE0099F8);
    qword_1EE0099F8 = 0;
  }
  if (qword_1EE009A50)
  {
    icu::CalendarAstronomer::~CalendarAstronomer((icu::CalendarAstronomer *)qword_1EE009A50);
    icu::UMemory::operator delete(v0);
    qword_1EE009A50 = 0;
  }
  return 1;
}

void icu::IslamicCalendar::setLocation(icu::IslamicCalendar *this, double a2, double a3, UErrorCode *a4)
{
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  icu::CalendarAstronomer *v10;

  umtx_lock((icu::UMutex *)&unk_1EE009A58);
  v9 = qword_1EE009A50;
  if (!qword_1EE009A50)
  {
    v10 = (icu::CalendarAstronomer *)icu::UMemory::operator new(v8, (icu::UMemory *)0x88, v7);
    if (v10)
      v10 = (icu::CalendarAstronomer *)icu::CalendarAstronomer::CalendarAstronomer(v10);
    else
      *(_DWORD *)this = 7;
    qword_1EE009A50 = (uint64_t)v10;
    sub_18BDA1768(8u, (uint64_t)sub_18BCEA940);
    v9 = qword_1EE009A50;
  }
  icu::CalendarAstronomer::setLocation(v9, a2, a3);
  umtx_unlock((std::mutex **)&unk_1EE009A58);
}

double icu::IslamicCalendar::getLocationLatitude(icu::IslamicCalendar *this, UErrorCode *a2)
{
  UErrorCode *v3;

  umtx_lock((icu::UMutex *)&unk_1EE009AF8);
  if (!qword_1EE009A50)
    icu::IslamicCalendar::setLocation(this, 0.0, 0.0, v3);
  umtx_unlock((std::mutex **)&unk_1EE009AF8);
  return icu::CalendarAstronomer::getLocationLatitude((icu::CalendarAstronomer *)qword_1EE009A50);
}

double icu::IslamicCalendar::getLocationLongitude(icu::IslamicCalendar *this, UErrorCode *a2)
{
  UErrorCode *v3;

  umtx_lock((icu::UMutex *)&unk_1EE009B48);
  if (!qword_1EE009A50)
    icu::IslamicCalendar::setLocation(this, 0.0, 0.0, v3);
  umtx_unlock((std::mutex **)&unk_1EE009B48);
  return icu::CalendarAstronomer::getLocationLongitude((icu::CalendarAstronomer *)qword_1EE009A50);
}

uint64_t icu::IslamicCalendar::handleGetMonthLength(icu::IslamicCalendar *this, int a2, int a3)
{
  int v3;
  signed int v4;
  icu::IslamicCalendar *v5;

  v3 = a3 + 12 * a2;
  v4 = v3 - 12;
  v5 = (icu::IslamicCalendar *)icu::IslamicCalendar::trueMonthStart(this, v3 - 11);
  return v5 - icu::IslamicCalendar::trueMonthStart(v5, v4);
}

uint64_t icu::IslamicCalendar::handleGetYearLength(icu::IslamicCalendar *this, int a2)
{
  signed int v2;
  signed int v3;
  icu::IslamicCalendar *v4;

  v2 = 12 * a2;
  v3 = v2 - 12;
  v4 = (icu::IslamicCalendar *)icu::IslamicCalendar::trueMonthStart(this, v2);
  return v4 - icu::IslamicCalendar::trueMonthStart(v4, v3);
}

uint64_t icu::IslamicCalendar::handleComputeMonthStart(icu::IslamicCalendar *this, int a2, int a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = ~a3 / 0xCu;
  v5 = a3 + 1 + 12 * v4 + 11;
  if (a3 < 0)
  {
    v6 = ~v4 + a2;
  }
  else
  {
    v5 = a3;
    v6 = a2;
  }
  v7 = a3 / 0xCu + a2;
  v8 = a3 < 12;
  if (a3 >= 12)
    v9 = a3 % 0xCu;
  else
    v9 = v5;
  if (v8)
    v10 = v6;
  else
    v10 = v7;
  v11 = (*(uint64_t (**)(icu::IslamicCalendar *, uint64_t, uint64_t))(*(_QWORD *)this + 448))(this, v10, v9);
  return v11 + (*(unsigned int (**)(icu::IslamicCalendar *))(*(_QWORD *)this + 456))(this) - 1;
}

uint64_t icu::IslamicCalendar::handleGetExtendedYear(icu::IslamicCalendar *this)
{
  char *v2;

  if (icu::Calendar::newerField((uint64_t)this, 0x13u, 1u) == 19)
  {
    if (*((int *)this + 52) >= 1)
    {
      v2 = (char *)this + 88;
      return *(unsigned int *)v2;
    }
  }
  else if (*((int *)this + 34) >= 1)
  {
    v2 = (char *)this + 16;
    return *(unsigned int *)v2;
  }
  return 1;
}

void icu::IslamicCalendar::handleComputeFields(icu::IslamicCalendar *this, int a2, UErrorCode *a3)
{
  int v5;
  int v6;
  double v7;
  UErrorCode *v8;
  icu::IslamicCalendar *v9;
  double v10;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;

  if (*(int *)a3 <= 0)
  {
    v5 = a2 - (*(uint64_t (**)(icu::IslamicCalendar *))(*(_QWORD *)this + 456))(this);
    v6 = (int)uprv_floor((double)v5 / 29.5305889);
    v7 = uprv_floor(29.5305889 * (double)v6);
    icu::IslamicCalendar::moonAge((icu::IslamicCalendar *)a3, *((double *)this + 29), v8);
    if (*(int *)a3 < 1)
    {
      if (v10 <= 0.0 || v5 - (int)v7 <= 24)
        v12 = v6;
      else
        v12 = v6 + 1;
      v13 = v12 + 2;
      do
      {
        v9 = (icu::IslamicCalendar *)icu::IslamicCalendar::trueMonthStart(v9, v13 - 2);
        --v13;
      }
      while ((int)v9 > v5);
      v14 = v13 - 1;
      if (v13 - 1 < 0)
        v15 = -(-v13 / 0xCu);
      else
        v15 = v14 / 0xCu + 1;
      v16 = v14 % 12;
      if (v16 <= 0xFFFFFFF3)
        v17 = v16;
      else
        v17 = v16 + 12;
      v18 = v5 + 1;
      v19 = v18
          - (*(uint64_t (**)(icu::IslamicCalendar *, uint64_t, uint64_t))(*(_QWORD *)this + 448))(this, v15, v17);
      v20 = (*(uint64_t (**)(icu::IslamicCalendar *, uint64_t, _QWORD))(*(_QWORD *)this + 448))(this, v15, 0);
      *((_BYTE *)this + 108) = 1;
      *((_DWORD *)this + 3) = 0;
      *((_DWORD *)this + 4) = v15;
      *(_QWORD *)((char *)this + 132) = 0x100000001;
      *(_WORD *)((char *)this + 109) = 257;
      *((_DWORD *)this + 22) = v15;
      *((_DWORD *)this + 52) = 1;
      *((_BYTE *)this + 127) = 1;
      *((_DWORD *)this + 5) = v17;
      *((_DWORD *)this + 35) = 1;
      *((_DWORD *)this + 26) = v17;
      *((_DWORD *)this + 56) = 1;
      *((_BYTE *)this + 131) = 1;
      *(_WORD *)((char *)this + 113) = 257;
      *((_DWORD *)this + 8) = v19;
      *((_DWORD *)this + 9) = v18 - v20;
      *((_QWORD *)this + 19) = 0x100000001;
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
}

uint64_t icu::IslamicCalendar::getEpoc(icu::IslamicCalendar *this)
{
  return 1948440;
}

uint64_t icu::IslamicCalendar::getRelatedYear(icu::IslamicCalendar *this, UErrorCode *a2)
{
  int v3;
  unsigned int v5;
  int v6;

  v3 = icu::Calendar::get(this, 0x13u, a2);
  if (*(int *)a2 > 0)
    return 0;
  v5 = ((__PAIR64__(2 * ((1396 - v3) / 0x43u), (1396 - v3) % 0x43u) - 34) >> 32) + 2;
  if ((v3 - 1397) % 0x43u <= 0x20)
    v6 = 0;
  else
    v6 = -1;
  if (v3 >= 1397)
    v5 = v6 - 2 * ((v3 - 1397) / 0x43u);
  return v3 + v5 + 579;
}

_BYTE *icu::IslamicCalendar::setRelatedYear(icu::IslamicCalendar *this, int a2)
{
  unsigned int v2;

  v2 = ((1976 - a2) % 0x41u < 0x21) - 2 * ((1976 - a2) / 0x41u) - 2;
  if (a2 >= 1977)
    v2 = ((a2 - 1977) % 0x41u > 0x1F) | (2 * ((a2 - 1977) / 0x41u));
  return icu::Calendar::set(this, 0x13u, a2 + v2 - 579);
}

uint64_t icu::IslamicCalendar::haveDefaultCentury(icu::IslamicCalendar *this)
{
  return 1;
}

double icu::IslamicCalendar::defaultCenturyStart(icu::IslamicCalendar *this)
{
  unsigned int v1;
  icu::IslamicCalendar *inited;

  v1 = atomic_load((unsigned int *)&unk_1ECD27D48);
  if (v1 != 2)
  {
    inited = (icu::IslamicCalendar *)icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27D48);
    if ((_DWORD)inited)
    {
      icu::IslamicCalendar::initializeSystemDefaultCentury(inited);
      icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27D48);
    }
  }
  return *(double *)&qword_1ECD26D48;
}

void icu::IslamicCalendar::initializeSystemDefaultCentury(icu::IslamicCalendar *this)
{
  icu::Calendar *v1;
  double v2;
  UErrorCode v3;
  char *v4[28];
  _BYTE v5[624];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = U_ZERO_ERROR;
  bzero(v5, 0x270uLL);
  icu::Locale::Locale((icu::Locale *)v4, "@calendar=islamic-civil", 0, 0, 0);
  icu::IslamicCalendar::IslamicCalendar((icu::IslamicCalendar *)v5, v4, &v3);
  icu::Locale::~Locale((icu::Locale *)v4);
  if (v3 <= U_ZERO_ERROR)
  {
    icu::Calendar::getNow(v1);
    icu::Calendar::setTimeInMillis((uint64_t)v5, v2, &v3);
    icu::Calendar::add(v5, 1u, -80, &v3);
    qword_1ECD26D48 = icu::Calendar::getTimeInMillis((icu::Calendar *)v5, &v3);
    dword_1ECD26D50 = icu::Calendar::get(v5, 1u, &v3);
  }
  icu::Calendar::~Calendar((icu::Calendar *)v5);
}

uint64_t icu::IslamicCalendar::defaultCenturyStartYear(icu::IslamicCalendar *this)
{
  unsigned int v1;
  icu::IslamicCalendar *inited;

  v1 = atomic_load((unsigned int *)&unk_1ECD27D48);
  if (v1 != 2)
  {
    inited = (icu::IslamicCalendar *)icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD27D48);
    if ((_DWORD)inited)
    {
      icu::IslamicCalendar::initializeSystemDefaultCentury(inited);
      icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD27D48);
    }
  }
  return dword_1ECD26D50;
}

BOOL icu::IslamicCalendar::inTemporalLeapYear(icu::IslamicCalendar *this, UErrorCode *a2)
{
  int v3;

  v3 = (*(uint64_t (**)(icu::IslamicCalendar *, uint64_t, UErrorCode *))(*(_QWORD *)this + 176))(this, 6, a2);
  return *(int *)a2 < 1 && v3 == 355;
}

icu::IslamicCalendar *icu::IslamicCivilCalendar::IslamicCivilCalendar(icu::IslamicCivilCalendar *this, char **a2, UErrorCode *a3)
{
  icu::IslamicCalendar *result;

  result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(_QWORD *)result = off_1E225FB60;
  return result;
}

{
  icu::IslamicCalendar *result;

  result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(_QWORD *)result = off_1E225FB60;
  return result;
}

void icu::IslamicCivilCalendar::~IslamicCivilCalendar(icu::IslamicCivilCalendar *this)
{
  void *v1;

  icu::Calendar::~Calendar(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::IslamicCivilCalendar::getType(icu::IslamicCivilCalendar *this)
{
  return "islamic-civil";
}

uint64_t *icu::IslamicCivilCalendar::clone@<X0>(icu::IslamicCivilCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *result = (uint64_t)off_1E225FB60;
  }
  return result;
}

uint64_t icu::IslamicCivilCalendar::yearStart(icu::IslamicCivilCalendar *this, int a2)
{
  return sub_18BCE8278(11 * a2 + 3, 30) + 354 * a2 - 354;
}

uint64_t icu::IslamicCivilCalendar::monthStart(icu::IslamicCivilCalendar *this, int a2, int a3)
{
  double v4;

  v4 = uprv_ceil((double)a3 * 29.5) + (double)(354 * a2 - 354);
  return (int)(v4 + (double)(int)sub_18BCE8278(11 * a2 + 3, 30));
}

uint64_t icu::IslamicCivilCalendar::handleGetMonthLength(icu::IslamicCivilCalendar *this, int a2, int a3)
{
  int v3;
  uint64_t result;
  unsigned int v5;

  v3 = (a3 + 1) & 1;
  if (a3 < -1)
    v3 = -v3;
  result = (v3 + 29);
  if (a3 == 11)
  {
    v5 = v3 + 30;
    if ((11 * a2 + 14) % 30 <= 10)
      return v5;
    else
      return result;
  }
  return result;
}

uint64_t icu::IslamicCivilCalendar::handleGetYearLength(icu::IslamicCivilCalendar *this, int a2)
{
  return ((11 * a2 + 14) % 30 < 11) | 0x162u;
}

double icu::IslamicCivilCalendar::handleComputeFields(icu::IslamicCivilCalendar *this, int a2, UErrorCode *a3)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  double result;

  if (*(int *)a3 <= 0)
  {
    v4 = a2 - (*(uint64_t (**)(icu::IslamicCivilCalendar *))(*(_QWORD *)this + 456))(this);
    v5 = sub_18BCE8278(30 * v4 + 10646, 10631);
    v6 = (*(uint64_t (**)(icu::IslamicCivilCalendar *, uint64_t))(*(_QWORD *)this + 440))(this, v5);
    v7 = (int)uprv_ceil((double)(v4 - v6 - 29) / 29.5);
    if (v7 >= 11)
      v8 = 11;
    else
      v8 = v7;
    v9 = v4 + 1;
    v10 = v9
        - (*(uint64_t (**)(icu::IslamicCivilCalendar *, uint64_t, uint64_t))(*(_QWORD *)this + 448))(this, v5, v8);
    v11 = (*(uint64_t (**)(icu::IslamicCivilCalendar *, uint64_t, _QWORD))(*(_QWORD *)this + 448))(this, v5, 0);
    *((_BYTE *)this + 108) = 1;
    *((_DWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = v5;
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)((char *)this + 132) = 0x100000001;
    *(_WORD *)((char *)this + 109) = 257;
    *((_DWORD *)this + 22) = v5;
    *((_DWORD *)this + 52) = 1;
    *((_BYTE *)this + 127) = 1;
    *((_DWORD *)this + 5) = v8;
    *((_DWORD *)this + 35) = 1;
    *((_DWORD *)this + 26) = v8;
    *((_DWORD *)this + 56) = 1;
    *((_BYTE *)this + 131) = 1;
    *(_WORD *)((char *)this + 113) = 257;
    *((_DWORD *)this + 8) = v10;
    *((_DWORD *)this + 9) = v9 - v11;
    *((_QWORD *)this + 19) = 0x100000001;
  }
  return result;
}

icu::IslamicCalendar *icu::IslamicTBLACalendar::IslamicTBLACalendar(icu::IslamicTBLACalendar *this, char **a2, UErrorCode *a3)
{
  icu::IslamicCalendar *result;

  result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(_QWORD *)result = off_1E225FD40;
  return result;
}

{
  icu::IslamicCalendar *result;

  result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(_QWORD *)result = off_1E225FD40;
  return result;
}

void icu::IslamicTBLACalendar::~IslamicTBLACalendar(icu::IslamicTBLACalendar *this)
{
  void *v1;

  icu::Calendar::~Calendar(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::IslamicTBLACalendar::getType(icu::IslamicTBLACalendar *this)
{
  return "islamic-tbla";
}

uint64_t *icu::IslamicTBLACalendar::clone@<X0>(icu::IslamicTBLACalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *result = (uint64_t)off_1E225FD40;
  }
  return result;
}

uint64_t icu::IslamicTBLACalendar::getEpoc(icu::IslamicTBLACalendar *this)
{
  return 1948439;
}

icu::IslamicCalendar *icu::IslamicUmalquraCalendar::IslamicUmalquraCalendar(icu::IslamicUmalquraCalendar *this, char **a2, UErrorCode *a3)
{
  icu::IslamicCalendar *result;

  result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(_QWORD *)result = off_1E225FF20;
  return result;
}

{
  icu::IslamicCalendar *result;

  result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(_QWORD *)result = off_1E225FF20;
  return result;
}

void icu::IslamicUmalquraCalendar::~IslamicUmalquraCalendar(icu::IslamicUmalquraCalendar *this)
{
  void *v1;

  icu::Calendar::~Calendar(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::IslamicUmalquraCalendar::getType(icu::IslamicUmalquraCalendar *this)
{
  return "islamic-umalqura";
}

uint64_t *icu::IslamicUmalquraCalendar::clone@<X0>(icu::IslamicUmalquraCalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *result = (uint64_t)off_1E225FF20;
  }
  return result;
}

uint64_t icu::IslamicUmalquraCalendar::yearStart(icu::IslamicUmalquraCalendar *this, int a2)
{
  if ((a2 - 1601) > 0xFFFFFED2)
    return (byte_18BE27804[a2 - 1300] + (int)((double)(a2 - 1300) * 354.3672 + 460322.05 + 0.5));
  else
    return sub_18BCE8278(11 * a2 + 3, 30) + 354 * a2 - 354;
}

uint64_t icu::IslamicUmalquraCalendar::monthStart(icu::IslamicUmalquraCalendar *this, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *))(*(_QWORD *)this + 440))(this);
  if (a3 >= 1)
  {
    v7 = 0;
    do
    {
      v6 = (*(unsigned int (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(_QWORD *)this + 312))(this, a2, v7)+ v6;
      v7 = (v7 + 1);
    }
    while (a3 != (_DWORD)v7);
  }
  return v6;
}

uint64_t icu::IslamicUmalquraCalendar::handleGetMonthLength(icu::IslamicUmalquraCalendar *this, int a2, int a3)
{
  int v3;
  uint64_t result;
  unsigned int v5;

  if ((a2 - 1601) > 0xFFFFFED2)
  {
    if (((dword_18BE271D0[a2 - 1300] >> (11 - a3)) & 1) != 0)
      return 30;
    else
      return 29;
  }
  else
  {
    v3 = (a3 + 1) & 1;
    if (a3 < -1)
      v3 = -v3;
    result = (v3 + 29);
    if (a3 == 11)
    {
      v5 = v3 + 30;
      if ((11 * a2 + 14) % 30 <= 10)
        return v5;
      else
        return result;
    }
  }
  return result;
}

uint64_t icu::IslamicUmalquraCalendar::handleGetYearLength(icu::IslamicUmalquraCalendar *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  if ((a2 - 1601) < 0xFFFFFED3)
    return ((11 * (int)a2 + 14) % 30 < 11) | 0x162u;
  v5 = 0;
  LODWORD(v3) = 0;
  do
  {
    v3 = (*(unsigned int (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(_QWORD *)this + 312))(this, a2, v5)+ v3;
    v5 = (v5 + 1);
  }
  while ((_DWORD)v5 != 12);
  return v3;
}

double icu::IslamicUmalquraCalendar::handleComputeFields(icu::IslamicUmalquraCalendar *this, int a2, UErrorCode *a3)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  double result;

  if (*(int *)a3 <= 0)
  {
    v4 = a2 - (*(uint64_t (**)(icu::IslamicUmalquraCalendar *))(*(_QWORD *)this + 456))(this);
    if (v4 >= (*(int (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(_QWORD *)this + 440))(this, 1300))
    {
      v5 = 1299;
      v9 = 1;
      do
      {
        if (v9 < 1)
          goto LABEL_11;
        v5 = (v5 + 1);
        v10 = v4
            - (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(_QWORD *)this + 440))(this, v5);
        v11 = v10 + 1;
        if (v10 + 1 == (*(unsigned int (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(_QWORD *)this + 320))(this, v5))
        {
          v8 = 11;
          goto LABEL_15;
        }
        v9 = v11;
      }
      while (v11 >= (*(int (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(_QWORD *)this + 320))(this, v5));
      v12 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t, _QWORD))(*(_QWORD *)this + 312))(this, v5, 0);
      if (v10 < v12)
      {
LABEL_11:
        v8 = 0;
        goto LABEL_15;
      }
      LODWORD(v8) = 0;
      v13 = v12;
      do
      {
        v9 -= v13;
        v8 = (v8 + 1);
        v13 = (*(int (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(_QWORD *)this + 312))(this, v5, v8);
      }
      while (v9 > v13);
    }
    else
    {
      v5 = sub_18BCE8278(30 * v4 + 10646, 10631);
      v6 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t))(*(_QWORD *)this + 440))(this, v5);
      v7 = (int)uprv_ceil((double)(v4 - v6 - 29) / 29.5);
      if (v7 >= 11)
        v8 = 11;
      else
        v8 = v7;
    }
LABEL_15:
    v14 = v4 + 1;
    v15 = v14
        - (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t, uint64_t))(*(_QWORD *)this + 448))(this, v5, v8);
    v16 = (*(uint64_t (**)(icu::IslamicUmalquraCalendar *, uint64_t, _QWORD))(*(_QWORD *)this + 448))(this, v5, 0);
    *((_BYTE *)this + 108) = 1;
    *((_DWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = v5;
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)((char *)this + 132) = 0x100000001;
    *(_WORD *)((char *)this + 109) = 257;
    *((_DWORD *)this + 22) = v5;
    *((_DWORD *)this + 52) = 1;
    *((_BYTE *)this + 127) = 1;
    *((_DWORD *)this + 5) = v8;
    *((_DWORD *)this + 35) = 1;
    *((_DWORD *)this + 26) = v8;
    *((_DWORD *)this + 56) = 1;
    *((_BYTE *)this + 131) = 1;
    *(_WORD *)((char *)this + 113) = 257;
    *((_DWORD *)this + 8) = v15;
    *((_DWORD *)this + 9) = v14 - v16;
    *((_QWORD *)this + 19) = 0x100000001;
  }
  return result;
}

icu::IslamicCalendar *icu::IslamicRGSACalendar::IslamicRGSACalendar(icu::IslamicRGSACalendar *this, char **a2, UErrorCode *a3)
{
  icu::IslamicCalendar *result;

  result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(_QWORD *)result = off_1E2260100;
  return result;
}

{
  icu::IslamicCalendar *result;

  result = icu::IslamicCalendar::IslamicCalendar(this, a2, a3);
  *(_QWORD *)result = off_1E2260100;
  return result;
}

void icu::IslamicRGSACalendar::~IslamicRGSACalendar(icu::IslamicRGSACalendar *this)
{
  void *v1;

  icu::Calendar::~Calendar(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::IslamicRGSACalendar::getType(icu::IslamicRGSACalendar *this)
{
  return "islamic-rgsa";
}

uint64_t *icu::IslamicRGSACalendar::clone@<X0>(icu::IslamicRGSACalendar *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x270, a2);
  if (result)
  {
    result = (uint64_t *)icu::Calendar::Calendar((uint64_t)result, (uint64_t)this);
    *result = (uint64_t)off_1E2260100;
  }
  return result;
}

void *icu::IslamicCalendar::getStaticClassID(icu::IslamicCalendar *this)
{
  return &unk_1EE009B98;
}

void *icu::IslamicCalendar::getDynamicClassID(icu::IslamicCalendar *this)
{
  return &unk_1EE009B98;
}

void *icu::IslamicCivilCalendar::getStaticClassID(icu::IslamicCivilCalendar *this)
{
  return &unk_1EE009B99;
}

void *icu::IslamicCivilCalendar::getDynamicClassID(icu::IslamicCivilCalendar *this)
{
  return &unk_1EE009B99;
}

void *icu::IslamicUmalquraCalendar::getStaticClassID(icu::IslamicUmalquraCalendar *this)
{
  return &unk_1EE009B9A;
}

void *icu::IslamicUmalquraCalendar::getDynamicClassID(icu::IslamicUmalquraCalendar *this)
{
  return &unk_1EE009B9A;
}

void *icu::IslamicTBLACalendar::getStaticClassID(icu::IslamicTBLACalendar *this)
{
  return &unk_1EE009B9B;
}

void *icu::IslamicTBLACalendar::getDynamicClassID(icu::IslamicTBLACalendar *this)
{
  return &unk_1EE009B9B;
}

void *icu::IslamicRGSACalendar::getStaticClassID(icu::IslamicRGSACalendar *this)
{
  return &unk_1EE009B9C;
}

void *icu::IslamicRGSACalendar::getDynamicClassID(icu::IslamicRGSACalendar *this)
{
  return &unk_1EE009B9C;
}

void *icu::ISO8601Calendar::getStaticClassID(icu::ISO8601Calendar *this)
{
  return &unk_1EE009BA0;
}

void *sub_18BCEBAB4()
{
  return &unk_1EE009BA0;
}

icu::GregorianCalendar *sub_18BCEBAC0(icu::GregorianCalendar *a1, char **a2, UErrorCode *a3)
{
  int KeywordValue;
  UErrorCode v8;

  *(_QWORD *)icu::GregorianCalendar::GregorianCalendar(a1, a2, a3) = &off_1E2260358;
  v8 = U_ZERO_ERROR;
  KeywordValue = icu::Locale::getKeywordValue(a2, "fw", 0, 0, &v8);
  if (v8 <= U_ZERO_ERROR && KeywordValue == 0)
    icu::Calendar::setFirstDayOfWeek((uint64_t)a1, 2);
  icu::Calendar::setMinimalDaysInFirstWeek((uint64_t)a1, 4u);
  return a1;
}

void sub_18BCEBB4C(icu::GregorianCalendar *a1)
{
  void *v1;

  icu::GregorianCalendar::~GregorianCalendar(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BCEBB60(const icu::GregorianCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::GregorianCalendar *v4;
  _QWORD *v5;

  v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  if (v4)
  {
    icu::GregorianCalendar::GregorianCalendar(v4, a1);
    *v5 = &off_1E2260358;
  }
}

const char *sub_18BCEBB9C()
{
  return "iso8601";
}

void *icu::JapaneseCalendar::getStaticClassID(icu::JapaneseCalendar *this)
{
  return &unk_1EE009BA8;
}

void *sub_18BCEBBB4()
{
  return &unk_1EE009BA8;
}

char *icu::JapaneseCalendar::enableTentativeEra(icu::JapaneseCalendar *this)
{
  char *result;

  result = getenv("ICU_ENABLE_TENTATIVE_ERA");
  if (result)
    return (char *)(uprv_stricmp(result, "true") == 0);
  return result;
}

uint64_t icu::JapaneseCalendar::getCurrentEra(icu::JapaneseCalendar *this)
{
  return dword_1EE009BAC;
}

icu::GregorianCalendar *sub_18BCEBC00(icu::GregorianCalendar *a1, char **a2, UErrorCode *a3)
{
  icu::Calendar *v5;
  double v6;

  *(_QWORD *)icu::GregorianCalendar::GregorianCalendar(a1, a2, a3) = &off_1E2260558;
  sub_18BCEBC4C((int *)a3);
  icu::Calendar::getNow(v5);
  icu::Calendar::setTimeInMillis((uint64_t)a1, v6, a3);
  return a1;
}

void sub_18BCEBC4C(int *a1)
{
  unsigned int v2;
  icu::JapaneseCalendar *inited;
  char *v4;
  UErrorCode *v5;
  icu::EraRules *Instance;
  int v7;

  if (*a1 <= 0)
  {
    v2 = atomic_load(&dword_1EE009BB8);
    if (v2 == 2 || (inited = (icu::JapaneseCalendar *)icu::umtx_initImplPreInit(&dword_1EE009BB8), !(_DWORD)inited))
    {
      if (dword_1EE009BBC >= 1)
        *a1 = dword_1EE009BBC;
    }
    else
    {
      v4 = icu::JapaneseCalendar::enableTentativeEra(inited);
      Instance = icu::EraRules::createInstance((icu::EraRules *)"japanese", v4, a1, v5);
      qword_1EE009BB0 = (uint64_t)Instance;
      v7 = *a1;
      if (*a1 <= 0)
        dword_1EE009BAC = *((_DWORD *)Instance + 3);
      dword_1EE009BBC = v7;
      icu::umtx_initImplPostInit(&dword_1EE009BB8);
    }
  }
  sub_18BDA1768(7u, (uint64_t)sub_18BCEC268);
}

void sub_18BCEBD0C(icu::GregorianCalendar *a1)
{
  void *v1;

  icu::GregorianCalendar::~GregorianCalendar(a1);
  icu::UMemory::operator delete(v1);
}

icu::GregorianCalendar *sub_18BCEBD20@<X0>(const icu::GregorianCalendar *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::GregorianCalendar *v4;
  icu::GregorianCalendar *v5;
  int v7;

  v4 = (icu::GregorianCalendar *)icu::UMemory::operator new(a3, (icu::UMemory *)0x290, a2);
  v5 = v4;
  if (v4)
  {
    icu::GregorianCalendar::GregorianCalendar(v4, a1);
    *(_QWORD *)v5 = &off_1E2260558;
    v7 = 0;
    sub_18BCEBC4C(&v7);
  }
  return v5;
}

const char *sub_18BCEBD7C()
{
  return "japanese";
}

uint64_t sub_18BCEBD88(uint64_t a1, int a2)
{
  unsigned int v3;
  UErrorCode v5[5];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  v5[3] = U_ZERO_ERROR;
  *(_QWORD *)&v5[1] = 0;
  v5[0] = U_ZERO_ERROR;
  icu::EraRules::getStartDate(qword_1EE009BB0, v3, (int (*)[3])&v5[1], v5);
  if (v5[1] == a2)
    return (v5[2] - 1);
  else
    return 0;
}

uint64_t sub_18BCEBE18(uint64_t a1, int a2, int a3)
{
  unsigned int v5;
  UErrorCode v7[5];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 440))(a1);
  v7[3] = U_ZERO_ERROR;
  *(_QWORD *)&v7[1] = 0;
  v7[0] = U_ZERO_ERROR;
  icu::EraRules::getStartDate(qword_1EE009BB0, v5, (int (*)[3])&v7[1], v7);
  if (v7[1] == a2 && v7[2] - 1 == a3)
    return v7[3];
  else
    return 1;
}

uint64_t sub_18BCEBEC4(uint64_t a1)
{
  int *v1;

  if (*(int *)(a1 + 132) <= 0)
    v1 = &dword_1EE009BAC;
  else
    v1 = (int *)(a1 + 12);
  return *v1;
}

uint64_t sub_18BCEBEE4(_DWORD *a1)
{
  unsigned int *v3;
  int StartYear;
  int v5;
  UErrorCode v6;

  if (icu::Calendar::newerField((uint64_t)a1, 0x13u, 1u) == 19
    && icu::Calendar::newerField((uint64_t)a1, 0x13u, 0) == 19)
  {
    if ((int)a1[52] < 1)
      return 1970;
    else
      return a1[22];
  }
  else
  {
    v6 = U_ZERO_ERROR;
    if ((int)a1[33] <= 0)
      v3 = (unsigned int *)&dword_1EE009BAC;
    else
      v3 = a1 + 3;
    StartYear = icu::EraRules::getStartYear((icu::EraRules *)qword_1EE009BB0, *v3, &v6);
    if ((int)a1[34] < 1)
      v5 = 1;
    else
      v5 = a1[4];
    return (StartYear + v5 - 1);
  }
}

uint64_t sub_18BCEBFA0(uint64_t a1, int a2, UErrorCode *a3)
{
  int v5;
  icu::EraRules *v6;
  int v7;
  unsigned int EraIndex;
  uint64_t result;

  icu::GregorianCalendar::handleComputeFields((_DWORD *)a1, a2, a3);
  v5 = *(_DWORD *)(a1 + 88);
  v6 = (icu::EraRules *)qword_1EE009BB0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  EraIndex = icu::EraRules::getEraIndex(v6, v5, v7 + 1, *(_DWORD *)(a1 + 32), a3);
  *(_DWORD *)(a1 + 12) = EraIndex;
  *(_DWORD *)(a1 + 132) = 1;
  *(_BYTE *)(a1 + 108) = 1;
  result = icu::EraRules::getStartYear((icu::EraRules *)qword_1EE009BB0, EraIndex, a3);
  *(_DWORD *)(a1 + 16) = v5 - result + 1;
  *(_DWORD *)(a1 + 136) = 1;
  *(_BYTE *)(a1 + 109) = 1;
  return result;
}

uint64_t sub_18BCEC03C()
{
  return 0;
}

double sub_18BCEC044()
{
  return 0.0;
}

uint64_t sub_18BCEC04C()
{
  return 0;
}

uint64_t sub_18BCEC054(uint64_t a1, int a2, unsigned int a3)
{
  int StartYear;
  UErrorCode v6;

  if (a2 == 1)
  {
    if (a3 - 3 > 1)
    {
      return 1;
    }
    else
    {
      v6 = U_ZERO_ERROR;
      StartYear = icu::EraRules::getStartYear((icu::EraRules *)qword_1EE009BB0, dword_1EE009BAC, &v6);
      return icu::GregorianCalendar::handleGetLimit(a1, 1, 3) - StartYear;
    }
  }
  else if (a2)
  {
    return icu::GregorianCalendar::handleGetLimit(a1, a2, a3);
  }
  else if (a3 >= 2)
  {
    return (*(_DWORD *)(qword_1EE009BB0 + 8) - 1);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18BCEC104(_BYTE *a1, uint64_t a2, UErrorCode *a3)
{
  unsigned int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v12[3];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 != 1)
    return icu::GregorianCalendar::getActualMaximum((uint64_t)a1, a2, a3);
  v5 = icu::Calendar::get(a1, 0, a3);
  result = 0;
  if (*(int *)a3 <= 0)
  {
    if (v5 == *(_DWORD *)(qword_1EE009BB0 + 8) - 1)
    {
      return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)a1 + 288))(a1, 1, 3);
    }
    else
    {
      memset(v12, 0, sizeof(v12));
      icu::EraRules::getStartDate(qword_1EE009BB0, v5 + 1, (int (*)[3])v12, a3);
      v7 = v12[0];
      v8 = v12[1];
      v9 = v12[2];
      v10 = v7 - icu::EraRules::getStartYear((icu::EraRules *)qword_1EE009BB0, v5, a3);
      if (v8 == 1 && v9 == 1)
        return v10;
      else
        return v10 + 1;
    }
  }
  return result;
}

uint64_t sub_18BCEC268()
{
  void *v0;

  if (qword_1EE009BB0)
  {
    icu::EraRules::~EraRules((void **)qword_1EE009BB0);
    icu::UMemory::operator delete(v0);
    qword_1EE009BB0 = 0;
  }
  dword_1EE009BAC = 0;
  atomic_store(0, &dword_1EE009BB8);
  return 1;
}

void sub_18BCEC2B4(void **a1)
{
  void *v1;

  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::FormattedList::FormattedList(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2260758;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2260758;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::FormattedList::~FormattedList(icu::FormattedList *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2260758;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2260758;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2260758;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::FormattedList::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::FormattedList::toString(icu::FormattedList *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(*((_QWORD *)this + 1));
}

void icu::FormattedList::toTempString(icu::FormattedList *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 24))(*((_QWORD *)this + 1));
}

icu::Appendable *icu::FormattedList::appendTo(icu::FormattedList *this, icu::Appendable *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return a2;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(_QWORD, icu::Appendable *))(*(_QWORD *)v4 + 32))(*((_QWORD *)this + 1), a2);
}

uint64_t icu::FormattedList::nextPosition(icu::FormattedList *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return 0;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0;
  }
  return (*(uint64_t (**)(_QWORD, icu::ConstrainedFieldPosition *))(*(_QWORD *)v4 + 40))(*((_QWORD *)this + 1), a2);
}

icu::ListFormatter *icu::ListFormatter::ListFormatter(icu::ListFormatter *this, const icu::ListFormatter *a2)
{
  uint64_t *v3;
  uint64_t *v5;

  *(_QWORD *)this = off_1E2260798;
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)((char *)a2 + 8);
  v3 = (uint64_t *)*((_QWORD *)a2 + 1);
  if (v3)
  {
    v5 = icu::UMemory::operator new(v3, (icu::UMemory *)0xA8, (unint64_t)a2);
    if (v5)
      v5 = (uint64_t *)sub_18BCEDAFC((uint64_t)v5, *((_QWORD *)a2 + 1));
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = v5;
  }
  return this;
}

uint64_t icu::ListFormatter::operator=(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;

  if (a1 != a2)
  {
    v4 = *(_QWORD **)(a1 + 8);
    if (v4)
    {
      v5 = v4[19];
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v4 + 10));
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v4 + 1));
      icu::UMemory::operator delete(v4);
    }
    v6 = *(uint64_t **)(a2 + 8);
    if (v6)
    {
      v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0xA8, a2);
      if (v7)
        v7 = (uint64_t *)sub_18BCEDAFC((uint64_t)v7, *(_QWORD *)(a2 + 8));
      *(_QWORD *)(a1 + 8) = v7;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v7 = *(uint64_t **)(a2 + 16);
    }
    *(_QWORD *)(a1 + 16) = v7;
  }
  return a1;
}

_QWORD *sub_18BCEC6A0(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[19];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 10));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 1));
  return a1;
}

void icu::ListFormatter::initializeHash(icu::ListFormatter *this, UErrorCode *a2)
{
  uint64_t *v2;
  int32x2_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v2 = (uint64_t *)*(unsigned int *)this;
  if ((int)v2 <= 0)
  {
    v4 = (int32x2_t *)icu::UMemory::operator new(v2, (icu::UMemory *)0x58, (unint64_t)a2);
    if (v4)
    {
      v5 = (uint64_t *)v4;
      *v4 = 0;
      v6 = (uint64_t)&v4[1];
      v7 = 0;
      uhash_init(v4 + 1, (uint64_t)uhash_hashUnicodeString, (uint64_t)uhash_compareUnicodeString, 0, &v7);
      if (v7 <= 0)
      {
        *v5 = v6;
        uhash_setKeyDeleter(v6, (uint64_t)uprv_deleteUObject);
      }
      qword_1ECD27D50 = (uint64_t)v5;
      uhash_setValueDeleter(*v5, (uint64_t)sub_18BCEC7AC);
      sub_18BDA1768(0x22u, (uint64_t)sub_18BCEC7F8);
    }
    else
    {
      qword_1ECD27D50 = 0;
      *(_DWORD *)this = 7;
    }
  }
}

void sub_18BCEC7AC(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    v2 = a1[19];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 10));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 1));
    icu::UMemory::operator delete(a1);
  }
}

uint64_t sub_18BCEC7F8()
{
  void *v0;

  v0 = (void *)qword_1ECD27D50;
  if (qword_1ECD27D50)
  {
    if (*(_QWORD *)qword_1ECD27D50)
      uhash_close(*(void ***)qword_1ECD27D50);
    icu::UMemory::operator delete(v0);
  }
  qword_1ECD27D50 = 0;
  return 1;
}

_QWORD *icu::ListFormatter::getListFormatInternal(const char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  _QWORD *v4;
  icu::CharString *v8;
  UErrorCode *v9;
  uint64_t *v10;
  UErrorCode *v11;
  void *v12;
  uint64_t *ListFormatInternal;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v18;
  int v19;
  char *v20;
  int v21;
  _OWORD v22[4];
  void *v23[7];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 0;
  v24 = 0;
  memset(&v23[1], 0, 48);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v20, this[5]);
  v23[0] = (char *)&v23[1] + 5;
  LODWORD(v23[1]) = 40;
  WORD2(v23[1]) = 0;
  LODWORD(v24) = 0;
  icu::CharString::append((icu::CharString *)v23, v20, v21, a3);
  v8 = icu::CharString::append((icu::CharString *)v23, 58, a3);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v18, (const char *)a2);
  icu::CharString::append(v8, v18, v19, a3);
  memset(v22, 0, sizeof(v22));
  icu::UnicodeString::UnicodeString(v22, v23[0], 0xFFFFFFFFLL, 0);
  umtx_lock((icu::UMutex *)&unk_1ECD27D58);
  v10 = (uint64_t *)qword_1ECD27D50;
  if (!qword_1ECD27D50)
  {
    icu::ListFormatter::initializeHash((icu::ListFormatter *)a3, v9);
    if (*(int *)a3 > 0)
    {
LABEL_8:
      v4 = 0;
      goto LABEL_14;
    }
    v10 = (uint64_t *)qword_1ECD27D50;
  }
  v4 = (_QWORD *)uhash_get(*v10, (uint64_t)v22);
  umtx_unlock((std::mutex **)&unk_1ECD27D58);
  if (v4)
    goto LABEL_15;
  ListFormatInternal = icu::ListFormatter::loadListFormatInternal((char **)this, a2, (char *)a3, v11);
  v12 = (void *)*(unsigned int *)a3;
  if ((int)v12 > 0)
  {
    v4 = 0;
    goto LABEL_15;
  }
  v4 = ListFormatInternal;
  umtx_lock((icu::UMutex *)&unk_1ECD27D58);
  v14 = uhash_get(*(_QWORD *)qword_1ECD27D50, (uint64_t)v22);
  if (v14)
  {
    v15 = (_QWORD *)v14;
    if (v4)
    {
      v16 = sub_18BCEC6A0(v4);
      icu::UMemory::operator delete(v16);
    }
    v4 = v15;
    goto LABEL_14;
  }
  sub_18BBB11FC((uint64_t *)qword_1ECD27D50, (UChar **)v22, (uint64_t)v4, (int *)a3);
  if (*(int *)a3 > 0)
    goto LABEL_8;
LABEL_14:
  umtx_unlock((std::mutex **)&unk_1ECD27D58);
LABEL_15:
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v22);
  if (BYTE4(v23[1]))
    uprv_free(v23[0]);
  return v4;
}

uint64_t *icu::ListFormatter::loadListFormatInternal(char **this, const icu::Locale *a2, char *a3, UErrorCode *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  int v15;
  char __dst[25];
  uint64_t (**v18)();
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void (**v24)(icu::UnicodeString *__hidden);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  void (**v29)(icu::UnicodeString *__hidden);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  void (**v34)(icu::UnicodeString *__hidden);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39[32];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v7 = ures_open(0, this[5], (int *)a3);
  v8 = (_QWORD *)ures_getByKeyWithFallback((uint64_t)v7, "listPattern", (uint64_t)v7, (UErrorCode *)a3);
  v9 = v8;
  if (*(int *)a3 < 1)
  {
    v38 = 0;
    v36 = 0u;
    v37 = 0u;
    v33 = 0;
    v35 = 0u;
    v31 = 0u;
    v32 = 0u;
    v28 = 0;
    v30 = 0u;
    v27 = 0u;
    v25 = 0u;
    v26 = 0u;
    v22 = 0u;
    v23 = 0;
    v20 = 0u;
    v21 = 0u;
    v18 = off_1E22607C0;
    v19 = off_1E2256B38;
    LOWORD(v20) = 2;
    v24 = off_1E2256B38;
    LOWORD(v25) = 2;
    v29 = off_1E2256B38;
    LOWORD(v30) = 2;
    v34 = off_1E2256B38;
    LOWORD(v35) = 2;
    memset(v39, 0, sizeof(v39));
    strncpy(__dst, (const char *)a2, 0x18uLL);
    __dst[24] = 0;
    ures_getAllItemsWithFallback((uint64_t)v9, __dst, (uint64_t)&v18, (int *)a3);
    if (*(int *)a3 <= 0 && v39[0])
    {
      do
      {
        if (!strcmp(__dst, v39))
          break;
        strcpy(__dst, v39);
        ures_getAllItemsWithFallback((uint64_t)v9, __dst, (uint64_t)&v18, (int *)a3);
      }
      while (*(int *)a3 <= 0 && v39[0] != 0);
    }
    ures_close(v9);
    if (*(int *)a3 > 0)
      goto LABEL_12;
    if ((unsigned __int16)v20 < 0x20u
      || (unsigned __int16)v25 < 0x20u
      || (unsigned __int16)v30 < 0x20u
      || (unsigned __int16)v35 <= 0x1Fu)
    {
      v10 = 0;
      v15 = 2;
    }
    else
    {
      v13 = icu::UMemory::operator new((uint64_t *)(unsigned __int16)v35, (icu::UMemory *)0xA8, v12);
      v10 = v13;
      if (v13)
      {
        sub_18BCEDB54((uint64_t)v13, (uint64_t)&v19, (icu::UnicodeString *)&v24, (const icu::UnicodeString *)&v29, (uint64_t)&v34, (uint64_t)this, (UErrorCode *)a3);
        if (*(int *)a3 < 1)
          goto LABEL_23;
        v14 = sub_18BCEC6A0(v10);
        icu::UMemory::operator delete(v14);
LABEL_12:
        v10 = 0;
LABEL_23:
        sub_18BCECCB8((uint64_t)&v18);
        return v10;
      }
      v15 = 7;
    }
    *(_DWORD *)a3 = v15;
    goto LABEL_23;
  }
  ures_close(v8);
  return 0;
}

void sub_18BCECCB8(uint64_t a1)
{
  icu::UnicodeString *v2;

  *(_QWORD *)a1 = off_1E22607C0;
  v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 200));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v2);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)a1);
}

void sub_18BCECD0C(uint64_t a1)
{
  void *v1;

  sub_18BCECCB8(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *icu::ListFormatter::createInstance(UErrorCode *this, UErrorCode *a2)
{
  UErrorCode *v3;
  uint64_t *Instance;
  _OWORD v6[14];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  icu::Locale::Locale((icu::Locale *)v6);
  Instance = icu::ListFormatter::createInstance((const char **)v6, (const icu::Locale *)"standard", this, v3);
  icu::Locale::~Locale((icu::Locale *)v6);
  return Instance;
}

uint64_t *icu::ListFormatter::createInstance(const char **this, UErrorCode *a2, UErrorCode *a3, UErrorCode *a4)
{
  return icu::ListFormatter::createInstance(this, (const icu::Locale *)"standard", a2, a4);
}

uint64_t *icu::ListFormatter::createInstance(const char **a1, int a2, unsigned int a3, UErrorCode *a4)
{
  char **v4;

  if (a2 == 2)
  {
    if (a3 < 3)
    {
      v4 = off_1E22609D8;
      return icu::ListFormatter::createInstance(a1, (const icu::Locale *)v4[a3], a4, a4);
    }
  }
  else if (a2 == 1)
  {
    if (a3 < 3)
    {
      v4 = off_1E22609C0;
      return icu::ListFormatter::createInstance(a1, (const icu::Locale *)v4[a3], a4, a4);
    }
  }
  else if (!a2 && a3 < 3)
  {
    v4 = off_1E22609A8;
    return icu::ListFormatter::createInstance(a1, (const icu::Locale *)v4[a3], a4, a4);
  }
  *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  return 0;
}

uint64_t *icu::ListFormatter::createInstance(const char **this, const icu::Locale *a2, UErrorCode *a3, UErrorCode *a4)
{
  _QWORD *ListFormatInternal;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *result;
  _QWORD *v9;

  ListFormatInternal = icu::ListFormatter::getListFormatInternal(this, a2, a3, a4);
  v7 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v7 > 0)
    return 0;
  v9 = ListFormatInternal;
  result = icu::UMemory::operator new(v7, (icu::UMemory *)0x18, v6);
  if (result)
  {
    *result = (uint64_t)off_1E2260798;
    result[1] = 0;
    result[2] = (uint64_t)v9;
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

_QWORD *icu::ListFormatter::ListFormatter(_QWORD *result, uint64_t a2)
{
  *result = off_1E2260798;
  result[1] = 0;
  result[2] = a2;
  return result;
}

{
  *result = off_1E2260798;
  result[1] = 0;
  result[2] = a2;
  return result;
}

_QWORD *icu::ListFormatter::ListFormatter(_QWORD *a1, unint64_t a2, UErrorCode *a3)
{
  uint64_t *v6;

  *a1 = off_1E2260798;
  v6 = icu::UMemory::operator new((uint64_t *)off_1E2260798, (icu::UMemory *)0xA8, a2);
  if (v6)
    v6 = (uint64_t *)sub_18BCEF0D0((uint64_t)v6, a2, a3);
  a1[1] = v6;
  a1[2] = v6;
  return a1;
}

void icu::ListFormatter::~ListFormatter(icu::ListFormatter *this)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E2260798;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = v2[19];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v2 + 10));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(v2 + 1));
    icu::UMemory::operator delete(v2);
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::ListFormatter::~ListFormatter(this);
  icu::UMemory::operator delete(v1);
}

icu::UnicodeString *icu::ListFormatter::format(icu::ListFormatter *this, const icu::UnicodeString *a2, int a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  int v7;

  icu::ListFormatter::format(this, a2, a3, a4, -1, &v7, a5);
  return a4;
}

icu::UnicodeString *icu::ListFormatter::format(icu::ListFormatter *this, const icu::UnicodeString *a2, int a3, icu::UnicodeString *a4, int a5, int *a6, UErrorCode *a7)
{
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  _OWORD v16[2];
  _QWORD v17[2];
  void (**v18)(icu::FormattedList *__hidden);
  uint64_t v19;
  uint64_t v20;

  v11 = *((unsigned __int16 *)a4 + 4);
  v12 = (__int16)v11;
  v13 = v11 >> 5;
  if (v12 >= 0)
    v14 = v13;
  else
    v14 = *((_DWORD *)a4 + 3);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  icu::ListFormatter::formatStringsToValue(this, a2, a7, a3, (uint64_t)&v18);
  v17[0] = &unk_1E2256BA0;
  v17[1] = a4;
  if (*(int *)a7 <= 0)
  {
    if (!v19)
    {
      *a7 = v20;
      if (a5 < 0)
        goto LABEL_15;
      goto LABEL_8;
    }
    (*(void (**)(uint64_t, _QWORD *, UErrorCode *))(*(_QWORD *)v19 + 32))(v19, v17, a7);
  }
  if (a5 < 0)
    goto LABEL_15;
LABEL_8:
  memset(v16, 0, sizeof(v16));
  icu::ConstrainedFieldPosition::ConstrainedFieldPosition((uint64_t)v16);
  icu::ConstrainedFieldPosition::constrainField((uint64_t)v16, 4099, a5);
  if (*(int *)a7 <= 0)
  {
    if (v19)
      (*(void (**)(uint64_t, _OWORD *, UErrorCode *))(*(_QWORD *)v19 + 40))(v19, v16, a7);
    else
      *a7 = v20;
  }
  *a6 = HIDWORD(v16[0]) + v14;
  icu::ConstrainedFieldPosition::~ConstrainedFieldPosition((icu::ConstrainedFieldPosition *)v16);
LABEL_15:
  icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v17);
  v18 = off_1E2260758;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v19 = 0;
  icu::FormattedValue::~FormattedValue((icu::FormattedValue *)&v18);
  return a4;
}

uint64_t *icu::ListFormatter::formatStringsToValue@<X0>(icu::ListFormatter *this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X3>, int a4@<W2>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t *result;
  UErrorCode v12;
  int v13;
  uint64_t *v14;
  UErrorCode v15;
  const icu::UnicodeString *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  UErrorCode v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  const icu::UnicodeString *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const icu::UnicodeString *v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  UErrorCode v34;
  uint64_t *v35;

  if (a4 == 2)
  {
    v35 = 0;
    v13 = icu::ListFormatter::needsBidiIsolates(this, a2);
    sub_18BCED534((uint64_t *)&v35, (unint64_t)a2, v13, a3, v14);
    v15 = *a3;
    if (*(int *)a3 > 0
      || (v16 = (const icu::UnicodeString *)((char *)a2 + 64),
          v17 = (*(uint64_t (**)(_QWORD, const icu::UnicodeString *, char *))(**(_QWORD **)(*((_QWORD *)this + 2) + 152)
                                                                                      + 32))(*(_QWORD *)(*((_QWORD *)this + 2) + 152), a2, (char *)a2 + 64), v18 = icu::ListFormatter::needsBidiIsolates(this, v16), sub_18BCED614((uint64_t *)&v35, v17, (uint64_t)v16, 1, v18, a3), icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v35 + 1), a3), v15 = *a3, *(int *)a3 > 0))
    {
LABEL_18:
      v33 = 0;
      goto LABEL_19;
    }
LABEL_26:
    v15 = U_ZERO_ERROR;
    v33 = v35;
    v35 = 0;
LABEL_19:
    *(_QWORD *)a5 = off_1E2260758;
    *(_QWORD *)(a5 + 8) = v33;
    *(_DWORD *)(a5 + 16) = v15;
    result = v35;
    if (!v35)
      return result;
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  v10 = (a4 - 1);
  if (a4 != 1)
  {
    if (!a4)
    {
      result = icu::UMemory::operator new((uint64_t *)a5, (icu::UMemory *)0x130, (unint64_t)a2);
      if (result)
      {
        result = (uint64_t *)icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)result, 0);
        *result = (uint64_t)&off_1E2260828;
        v12 = *a3;
        *(_QWORD *)a5 = off_1E2260758;
        if (v12 > U_ZERO_ERROR)
        {
          *(_QWORD *)(a5 + 8) = 0;
          *(_DWORD *)(a5 + 16) = v12;
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        }
        goto LABEL_21;
      }
      v34 = *a3;
      if (*(int *)a3 <= 0)
      {
        v34 = U_MEMORY_ALLOCATION_ERROR;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
      *(_QWORD *)a5 = off_1E2260758;
      *(_QWORD *)(a5 + 8) = 0;
      *(_DWORD *)(a5 + 16) = v34;
      return result;
    }
    v35 = 0;
    v22 = icu::ListFormatter::needsBidiIsolates(this, a2);
    sub_18BCED534((uint64_t *)&v35, (unint64_t)a2, v22, a3, v23);
    v15 = *a3;
    if (*(int *)a3 > 0)
      goto LABEL_18;
    v24 = *((_QWORD *)this + 2) + 8;
    v25 = icu::ListFormatter::needsBidiIsolates(this, (const icu::UnicodeString *)((char *)a2 + 64));
    sub_18BCED614((uint64_t *)&v35, v24, (uint64_t)a2 + 64, 1, v25, a3);
    if (a4 >= 4)
    {
      v26 = (const icu::UnicodeString *)((char *)a2 + 128);
      v27 = 2;
      do
      {
        v28 = *((_QWORD *)this + 2) + 80;
        v29 = icu::ListFormatter::needsBidiIsolates(this, v26);
        sub_18BCED614((uint64_t *)&v35, v28, (uint64_t)v26, v27++, v29, a3);
        v26 = (const icu::UnicodeString *)((char *)v26 + 64);
      }
      while (v10 != v27);
    }
    v30 = (const icu::UnicodeString *)((char *)a2 + 64 * (uint64_t)(int)v10);
    v31 = (*(uint64_t (**)(_QWORD, const icu::UnicodeString *))(**(_QWORD **)(*((_QWORD *)this + 2) + 152)
                                                                        + 40))(*(_QWORD *)(*((_QWORD *)this + 2) + 152), v30);
    v32 = icu::ListFormatter::needsBidiIsolates(this, v30);
    sub_18BCED614((uint64_t *)&v35, v31, (uint64_t)v30, v10, v32, a3);
    icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v35 + 1), a3);
    v15 = *a3;
    if (*(int *)a3 >= 1)
      goto LABEL_18;
    goto LABEL_26;
  }
  v35 = 0;
  v19 = icu::ListFormatter::needsBidiIsolates(this, a2);
  sub_18BCED534((uint64_t *)&v35, (unint64_t)a2, v19, a3, v20);
  icu::FormattedStringBuilder::writeTerminator((icu::FormattedStringBuilder *)(v35 + 1), a3);
  v21 = *a3;
  result = v35;
  *(_QWORD *)a5 = off_1E2260758;
  if (v21 <= U_ZERO_ERROR)
  {
LABEL_21:
    *(_QWORD *)(a5 + 8) = result;
    *(_DWORD *)(a5 + 16) = 0;
    return result;
  }
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = v21;
  if (result)
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  return result;
}

uint64_t icu::ListFormatter::needsBidiIsolates(icu::ListFormatter *this, const icu::UnicodeString *a2)
{
  unsigned int v2;
  int v3;
  int v4;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int Class;
  unsigned int v11;
  int v12;

  v2 = *((unsigned __int16 *)a2 + 4);
  v3 = (__int16)v2;
  v4 = v2 >> 5;
  if (v3 < 0)
    v4 = *((_DWORD *)a2 + 3);
  if (v4 < 1)
    return 0;
  v6 = 0;
  v7 = *((_QWORD *)this + 2);
  v8 = *(unsigned __int8 *)(v7 + 160);
  while (1)
  {
    v9 = icu::UnicodeString::char32At((uint64_t *)v7, a2, v6);
    Class = ubidi_getClass(v9);
    if (Class > 0xF)
      goto LABEL_11;
    if (((1 << Class) & 0xE022) == 0)
      break;
    if (!v8)
      return 1;
LABEL_11:
    ++v6;
    v11 = *((unsigned __int16 *)a2 + 4);
    v12 = (__int16)v11;
    LODWORD(v7) = v11 >> 5;
    if (v12 >= 0)
      v7 = v7;
    else
      v7 = *((unsigned int *)a2 + 3);
    if (v6 >= (int)v7)
      return 0;
  }
  if (((1 << Class) & 0x1801) == 0 || !v8)
    goto LABEL_11;
  return 1;
}

uint64_t *sub_18BCED534@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;

  v9 = icu::UMemory::operator new(a5, (icu::UMemory *)0x130, a2);
  if (v9)
  {
    v10 = icu::FormattedValueStringBuilderImpl::FormattedValueStringBuilderImpl((uint64_t)v9, 0);
    *(_QWORD *)v10 = &off_1E2260828;
    *a1 = v10;
    if (*(int *)a4 <= 0)
    {
      icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(v10 + 8), *(_DWORD *)(v10 + 140), a2, 49, a3, a4);
      v11 = *(unsigned __int16 *)(a2 + 8);
      v12 = (__int16)v11;
      v13 = v11 >> 5;
      if (v12 < 0)
        v13 = *(_DWORD *)(a2 + 12);
      if (a3)
        v14 = 2;
      else
        v14 = 0;
      icu::FormattedValueStringBuilderImpl::appendSpanInfo(*a1, 4099, 0, -1, v13 + v14, (int *)a4);
    }
  }
  else
  {
    *a1 = 0;
    if (*(int *)a4 <= 0)
      *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return a1;
}

uint64_t *sub_18BCED614(uint64_t *result, uint64_t a2, uint64_t a3, int a4, int a5, UErrorCode *a6)
{
  uint64_t *v10;
  unsigned int v11;
  _WORD *v12;
  int v13;
  unsigned int v14;
  icu::FormattedStringBuilder *v15;
  void *v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  icu::FormattedStringBuilder *v21;
  void *v22;
  uint64_t v23;
  icu::FormattedStringBuilder *v24;
  int v25;
  void *v26;
  uint64_t v27;
  icu::FormattedStringBuilder *v28;
  void *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  void *v34;
  void *v35;
  _BYTE v36[64];
  _OWORD v37[4];
  _QWORD __b[2];

  __b[1] = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    v10 = result;
    v11 = *(unsigned __int16 *)(a2 + 16);
    if ((v11 & 0x11) != 0)
    {
      v12 = 0;
    }
    else if ((v11 & 2) != 0)
    {
      v12 = (_WORD *)(a2 + 18);
    }
    else
    {
      v12 = *(_WORD **)(a2 + 32);
    }
    v13 = (__int16)v11;
    v14 = v11 >> 5;
    if (v13 < 0)
      v14 = *(_DWORD *)(a2 + 20);
    if (v14 && *v12 == 2)
    {
      __b[0] = 0;
      memset(v37, 0, sizeof(v37));
      sub_18BCD3EA8(__b, a2, 2, (uint64_t)v37);
      v15 = (icu::FormattedStringBuilder *)(*v10 + 8);
      if (SLODWORD(__b[0]) <= SHIDWORD(__b[0]))
      {
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, 0, __b[0], (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert(v15, 0, (uint64_t)v36, 48, 0, a6);
        icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v36);
        v27 = *v10;
        v28 = (icu::FormattedStringBuilder *)(*v10 + 8);
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, __b[0], HIDWORD(__b[0]) - LODWORD(__b[0]), (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert(v28, *(_DWORD *)(v27 + 140), (uint64_t)v36, 48, 0, a6);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(*v10 + 8), *(_DWORD *)(*v10 + 140), a3, 49, a5, a6);
        v30 = *(unsigned __int16 *)(a3 + 8);
        v31 = (__int16)v30;
        v32 = v30 >> 5;
        if (v31 < 0)
          v32 = *(_DWORD *)(a3 + 12);
        if (a5)
          v33 = 2;
        else
          v33 = 0;
        icu::FormattedValueStringBuilderImpl::appendSpanInfo(*v10, 4099, a4, -1, v32 + v33, (int *)a6);
        v23 = *v10;
        v24 = (icu::FormattedStringBuilder *)(*v10 + 8);
        v25 = HIDWORD(__b[0]);
      }
      else
      {
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, SHIDWORD(__b[0]), LODWORD(__b[0]) - HIDWORD(__b[0]), (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert(v15, 0, (uint64_t)v36, 48, 0, a6);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)(*v10 + 8), 0, a3, 49, a5, a6);
        v17 = *(unsigned __int16 *)(a3 + 8);
        v18 = (__int16)v17;
        v19 = v17 >> 5;
        if (v18 < 0)
          v19 = *(_DWORD *)(a3 + 12);
        if (a5)
          v20 = 2;
        else
          v20 = 0;
        icu::FormattedValueStringBuilderImpl::prependSpanInfo(*v10, 4099, a4, -1, v19 + v20, (int *)a6);
        v21 = (icu::FormattedStringBuilder *)(*v10 + 8);
        icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, 0, SHIDWORD(__b[0]), (icu::UnicodeString *)v36);
        icu::FormattedStringBuilder::insert(v21, 0, (uint64_t)v36, 48, 0, a6);
        icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v36);
        v23 = *v10;
        v24 = (icu::FormattedStringBuilder *)(*v10 + 8);
        v25 = __b[0];
      }
      icu::UnicodeString::tempSubString((icu::UnicodeString *)v37, v25, 0x7FFFFFFF, (icu::UnicodeString *)v36);
      icu::FormattedStringBuilder::insert(v24, *(_DWORD *)(v23 + 140), (uint64_t)v36, 48, 0, a6);
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v36);
      return (uint64_t *)icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v37);
    }
    else
    {
      *a6 = U_INTERNAL_PROGRAM_ERROR;
    }
  }
  return result;
}

uint64_t sub_18BCED920(unsigned __int16 *a1, char *a2, icu::ResourceValue *a3, uint64_t a4, int *a5)
{
  void *v8;
  uint64_t result;
  unsigned int v10;
  char *v11;
  int v12;
  unsigned __int16 *v13;
  int v14;
  int v15;
  _OWORD v16[2];
  uint64_t v17;
  char *__s1;
  int v19;
  _BYTE v20[64];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  __s1 = a2;
  *((_BYTE *)a1 + 264) = 0;
  if ((*(unsigned int (**)(icu::ResourceValue *))(*(_QWORD *)a3 + 24))(a3) == 3)
  {
    v19 = 0;
    *(_QWORD *)&v16[0] = (*(uint64_t (**)(icu::ResourceValue *, int *, int *))(*(_QWORD *)a3 + 40))(a3, &v19, a5);
    icu::UnicodeString::UnicodeString(v20, 1, v16);
    sub_18BCEF1A8((uint64_t)a1, (uint64_t)v20);
    return (uint64_t)icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v20);
  }
  else
  {
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    result = (uint64_t)(*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, int *))(*(_QWORD *)a3 + 88))(v16, a3, a5);
    if (*a5 <= 0)
    {
      v10 = 0;
      do
      {
        result = icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, v10, (const char **)&__s1, a3);
        if (!(_DWORD)result)
          break;
        v11 = __s1;
        v12 = strcmp(__s1, "2");
        v13 = a1 + 4;
        if (v12)
        {
          v14 = strcmp(v11, "end");
          v13 = a1 + 100;
          if (v14)
          {
            v15 = strcmp(v11, "middle");
            v13 = a1 + 68;
            if (v15)
            {
              result = strcmp(v11, "start");
              v13 = a1 + 36;
              if ((_DWORD)result)
                continue;
            }
          }
        }
        result = (uint64_t)sub_18BCEF288(a1, (uint64_t)a3, v13, (uint64_t)a5);
        ++v10;
      }
      while (*a5 <= 0);
    }
  }
  return result;
}

uint64_t sub_18BCEDAFC(uint64_t a1, uint64_t a2)
{
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 16), (UChar **)(a2 + 16));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 88), (UChar **)(a2 + 88));
  *(_QWORD *)(a1 + 152) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 152) + 24))(*(_QWORD *)(a2 + 152));
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  return a1;
}

uint64_t sub_18BCEDB54(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, const icu::UnicodeString *a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  uint64_t *v13;

  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 24) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 8), a3, 2, 2, 0, a7);
  *(_QWORD *)(a1 + 88) = off_1E2256B38;
  *(_WORD *)(a1 + 96) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 80), a4, 2, 2, 0, a7);
  v13 = sub_18BCEDC40((const char *)(a6 + 8), a2, a5, a7);
  *(_QWORD *)(a1 + 152) = v13;
  if (!v13 && *(int *)a7 <= 0)
    *a7 = U_MEMORY_ALLOCATION_ERROR;
  *(_BYTE *)(a1 + 160) = uloc_getCharacterOrientation(*(char **)(a6 + 40), (int32_t *)a7) == 1;
  return a1;
}

uint64_t *sub_18BCEDC40(const char *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t v29;
  void *v30;
  const icu::UnicodeString *v31;
  const icu::UnicodeString *v32;
  void *v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  void *v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  void *v53;
  unint64_t v54;
  uint64_t *v55;
  void *v56;
  const icu::UnicodeString *v57;
  const icu::UnicodeString *v58;
  void *v59;
  uint64_t *v60;
  const __int16 *v62;
  uint64_t v63[3];
  uint64_t v64[2];
  void *v65;
  const __int16 *v66;
  const __int16 *v67;
  const __int16 *v68;
  const __int16 *v69;
  const __int16 *v70;
  _OWORD v71[4];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v7 = (uint64_t *)a1;
  v80 = *MEMORY[0x1E0C80C00];
  if (strcmp(a1, "es"))
  {
    if (strcmp((const char *)v7, "he") && strcmp((const char *)v7, "iw"))
    {
      if (!strcmp((const char *)v7, "th"))
      {
        v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x238, v8);
        v7 = v10;
        if (v10)
          sub_18BCEE540((uint64_t)v10, (const icu::UnicodeString *)a2, (const icu::UnicodeString *)a3, a4);
        return v7;
      }
      goto LABEL_105;
    }
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v66 = a0_2;
    icu::UnicodeString::UnicodeString(&v76, 1, &v66);
    v64[1] = (uint64_t)v66;
    v11 = *(unsigned __int16 *)(a2 + 8);
    if ((v11 & 1) != 0)
    {
      v12 = BYTE8(v76) & 1;
    }
    else
    {
      v12 = 0;
      v13 = (__int16)v11;
      v14 = v11 >> 5;
      if (v13 >= 0)
        v15 = v14;
      else
        v15 = *(_DWORD *)(a2 + 12);
      if ((SWORD4(v76) & 0x8000u) == 0)
        v16 = WORD4(v76) >> 5;
      else
        v16 = HIDWORD(v76);
      if ((BYTE8(v76) & 1) == 0 && v15 == v16)
        v12 = icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v76, v15);
    }
    v23 = *(unsigned __int16 *)(a3 + 8);
    if ((v23 & 1) != 0)
    {
      v24 = BYTE8(v76) & 1;
    }
    else
    {
      v24 = 0;
      v25 = (__int16)v23;
      v26 = v23 >> 5;
      if (v25 >= 0)
        v27 = v26;
      else
        v27 = *(_DWORD *)(a3 + 12);
      if ((SWORD4(v76) & 0x8000u) == 0)
        v28 = WORD4(v76) >> 5;
      else
        v28 = HIDWORD(v76);
      if ((BYTE8(v76) & 1) == 0 && v27 == v28)
        v24 = icu::UnicodeString::doEquals((icu::UnicodeString *)a3, (const icu::UnicodeString *)&v76, v27);
    }
    if (((v12 | v24) & 1) != 0)
    {
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v65 = &unk_18BE360B2;
      icu::UnicodeString::UnicodeString(&v72, 1, &v65);
      v64[0] = (uint64_t)v65;
      v7 = icu::UMemory::operator new(v64, (icu::UMemory *)0x130, v29);
      if (v7)
      {
        if (v12)
          v31 = (const icu::UnicodeString *)&v72;
        else
          v31 = (const icu::UnicodeString *)a2;
        if (v24)
          v32 = (const icu::UnicodeString *)&v72;
        else
          v32 = (const icu::UnicodeString *)a3;
        v33 = sub_18BCEE4F8;
LABEL_70:
        sub_18BCEE32C((uint64_t)v7, (uint64_t)v33, v31, (const icu::UnicodeString *)a2, v32, (const icu::UnicodeString *)a3, a4);
        goto LABEL_71;
      }
      goto LABEL_71;
    }
    icu::UnicodeString::~UnicodeString((void *)(v12 | v24), (icu::UnicodeString *)&v76);
    goto LABEL_105;
  }
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v70 = L"{0} y {1}";
  icu::UnicodeString::UnicodeString(&v76, 1, &v70);
  v63[2] = (uint64_t)v70;
  v17 = *(unsigned __int16 *)(a2 + 8);
  if ((v17 & 1) != 0)
  {
    v18 = BYTE8(v76) & 1;
  }
  else
  {
    v18 = 0;
    v19 = (__int16)v17;
    v20 = v17 >> 5;
    if (v19 >= 0)
      v21 = v20;
    else
      v21 = *(_DWORD *)(a2 + 12);
    if ((SWORD4(v76) & 0x8000u) == 0)
      v22 = WORD4(v76) >> 5;
    else
      v22 = HIDWORD(v76);
    if ((BYTE8(v76) & 1) == 0 && v21 == v22)
      v18 = icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v76, v21);
  }
  v34 = *(unsigned __int16 *)(a3 + 8);
  if ((v34 & 1) != 0)
  {
    v35 = BYTE8(v76) & 1;
  }
  else
  {
    v35 = 0;
    v36 = (__int16)v34;
    v37 = v34 >> 5;
    if (v36 >= 0)
      v38 = v37;
    else
      v38 = *(_DWORD *)(a3 + 12);
    if ((SWORD4(v76) & 0x8000u) == 0)
      v39 = WORD4(v76) >> 5;
    else
      v39 = HIDWORD(v76);
    if ((BYTE8(v76) & 1) == 0 && v38 == v39)
      v35 = icu::UnicodeString::doEquals((icu::UnicodeString *)a3, (const icu::UnicodeString *)&v76, v38);
  }
  if ((v18 | v35) == 1)
  {
    v74 = 0uLL;
    v75 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    v69 = L"{0} e {1}";
    icu::UnicodeString::UnicodeString(&v72, 1, &v69);
    v62 = v69;
    v7 = icu::UMemory::operator new((uint64_t *)&v62, (icu::UMemory *)0x130, v40);
    if (v7)
    {
      if (v18)
        v31 = (const icu::UnicodeString *)&v72;
      else
        v31 = (const icu::UnicodeString *)a2;
      if (v35)
        v32 = (const icu::UnicodeString *)&v72;
      else
        v32 = (const icu::UnicodeString *)a3;
      v33 = sub_18BCEE208;
      goto LABEL_70;
    }
LABEL_71:
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v72);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v76);
    return v7;
  }
  v74 = 0uLL;
  v75 = 0uLL;
  v72 = 0uLL;
  v73 = 0uLL;
  v68 = L"{0} o {1}";
  icu::UnicodeString::UnicodeString(&v72, 1, &v68);
  v63[1] = (uint64_t)v68;
  v42 = *(unsigned __int16 *)(a2 + 8);
  if ((v42 & 1) != 0)
  {
    v43 = BYTE8(v72) & 1;
  }
  else
  {
    v43 = 0;
    v44 = (__int16)v42;
    v45 = v42 >> 5;
    if (v44 >= 0)
      v46 = v45;
    else
      v46 = *(_DWORD *)(a2 + 12);
    if ((SWORD4(v72) & 0x8000u) == 0)
      v47 = WORD4(v72) >> 5;
    else
      v47 = HIDWORD(v72);
    if ((BYTE8(v72) & 1) == 0 && v46 == v47)
      v43 = icu::UnicodeString::doEquals((icu::UnicodeString *)a2, (const icu::UnicodeString *)&v72, v46);
  }
  v48 = *(unsigned __int16 *)(a3 + 8);
  if ((v48 & 1) != 0)
  {
    v53 = (void *)WORD4(v72);
    v49 = BYTE8(v72) & 1;
  }
  else
  {
    v49 = 0;
    v50 = (__int16)v48;
    v51 = v48 >> 5;
    if (v50 >= 0)
      v52 = v51;
    else
      v52 = *(_DWORD *)(a3 + 12);
    if ((SWORD4(v72) & 0x8000u) == 0)
      v53 = (void *)(WORD4(v72) >> 5);
    else
      v53 = (void *)HIDWORD(v72);
    if ((BYTE8(v72) & 1) == 0 && v52 == (_DWORD)v53)
      v49 = icu::UnicodeString::doEquals((icu::UnicodeString *)a3, (const icu::UnicodeString *)&v72, v52);
  }
  if ((v43 | v49) == 1)
  {
    memset(v71, 0, sizeof(v71));
    v67 = L"{0} u {1}";
    icu::UnicodeString::UnicodeString(v71, 1, &v67);
    v63[0] = (uint64_t)v67;
    v55 = icu::UMemory::operator new(v63, (icu::UMemory *)0x130, v54);
    v7 = v55;
    if (v55)
    {
      if (v43)
        v57 = (const icu::UnicodeString *)v71;
      else
        v57 = (const icu::UnicodeString *)a2;
      if (v49)
        v58 = (const icu::UnicodeString *)v71;
      else
        v58 = (const icu::UnicodeString *)a3;
      sub_18BCEE32C((uint64_t)v55, (uint64_t)sub_18BCEE3E4, v57, (const icu::UnicodeString *)a2, v58, (const icu::UnicodeString *)a3, a4);
    }
    icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v71);
  }
  icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v72);
  icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)&v76);
  if (((v43 | v49) & 1) == 0)
  {
LABEL_105:
    v60 = icu::UMemory::operator new(v9, (icu::UMemory *)0x98, v8);
    v7 = v60;
    if (v60)
      sub_18BCEEB6C((uint64_t)v60, (const icu::UnicodeString *)a2, (const icu::UnicodeString *)a3, a4);
  }
  return v7;
}

BOOL sub_18BCEE208(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned __int16 *v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v9;

  v1 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    v2 = *(_DWORD *)(a1 + 12);
    if (!v2)
      return 0;
  }
  else
  {
    if (v1 < 0x20)
      return 0;
    v2 = v1 >> 5;
  }
  if ((v1 & 2) != 0)
    v3 = (unsigned __int16 *)(a1 + 10);
  else
    v3 = *(unsigned __int16 **)(a1 + 24);
  v4 = *v3;
  if (v4 != 104)
  {
    if ((v1 & 0x8000u) == 0)
      v5 = v1 >> 5;
    else
      v5 = *(_DWORD *)(a1 + 12);
    if (!v5)
      return 0;
    if (v2 < 2 || v4 != 72)
      goto LABEL_33;
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 12);
  if (v2 > 1)
  {
    if ((v1 & 0x8000u) == 0)
      v5 = v1 >> 5;
LABEL_18:
    if (v5 >= 2)
    {
      if ((v1 & 2) != 0)
        v6 = a1 + 10;
      else
        v6 = *(_QWORD *)(a1 + 24);
      if ((*(unsigned __int16 *)(v6 + 2) | 0x20) == 0x69)
      {
        v7 = 1;
        if (v2 == 2 || v5 < 3)
          return v7;
        v7 = 1;
        if ((unsigned __int16)(((unsigned __int16)(*(_WORD *)(v6 + 4) - 65) >> 2) | ((*(_WORD *)(v6 + 4) - 65) << 14)) > 9u
          || ((1 << ((unsigned __int16)(*(_WORD *)(v6 + 4) - 65) >> 2)) & 0x303) == 0)
        {
          return v7;
        }
      }
      goto LABEL_33;
    }
LABEL_32:
    if (v5)
      goto LABEL_33;
    return 0;
  }
  if ((v1 & 0x8000) != 0)
    goto LABEL_32;
LABEL_33:
  v9 = *(_WORD **)(a1 + 24);
  if ((v1 & 2) != 0)
    v9 = (_WORD *)(a1 + 10);
  return (*v9 & 0xFFDF) == 73;
}

uint64_t sub_18BCEE32C(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3, const icu::UnicodeString *a4, const icu::UnicodeString *a5, const icu::UnicodeString *a6, UErrorCode *a7)
{
  _QWORD *v12;

  v12 = (_QWORD *)sub_18BCEEB6C(a1, a4, a6, a7);
  *v12 = off_1E22608B0;
  v12[19] = a2;
  *(_QWORD *)(a1 + 168) = off_1E2256B38;
  *(_WORD *)(a1 + 176) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(v12 + 20), a3, 2, 2, 0, a7);
  *(_QWORD *)(a1 + 240) = off_1E2256B38;
  *(_WORD *)(a1 + 248) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 232), a5, 2, 2, 0, a7);
  return a1;
}

BOOL sub_18BCEE3E4(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned __int16 *v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _WORD *v8;
  BOOL v9;

  v1 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    v2 = *(_DWORD *)(a1 + 12);
    if (!v2)
      return 0;
  }
  else
  {
    if (v1 < 0x20)
      return 0;
    v2 = v1 >> 5;
  }
  if ((v1 & 2) != 0)
    v3 = (unsigned __int16 *)(a1 + 10);
  else
    v3 = *(unsigned __int16 **)(a1 + 24);
  v4 = *v3;
  if (v4 == 111)
    return 1;
  v6 = v1 >> 5;
  if ((v1 & 0x8000u) != 0)
    v6 = *(_DWORD *)(a1 + 12);
  if (!v6)
    return 0;
  v5 = 1;
  if (v4 != 56 && v4 != 79)
  {
    if (v4 == 104)
    {
      if (v2 < 2)
        return 0;
    }
    else if (v2 < 2 || v4 != 72)
    {
      if (v2 < 2)
        return 0;
      goto LABEL_27;
    }
    if (v6 >= 2)
    {
      v7 = (v1 & 2) != 0 ? a1 + 10 : *(_QWORD *)(a1 + 24);
      if ((*(unsigned __int16 *)(v7 + 2) | 0x20) == 0x6F)
        return 1;
    }
LABEL_27:
    v8 = *(_WORD **)(a1 + 24);
    if ((v1 & 2) != 0)
      v8 = (_WORD *)(a1 + 10);
    v9 = *v8 == 49 && v6 >= 2;
    return v9 && v8[1] == 49 && (v2 == 2 || v6 >= 3 && v8[2] == 32);
  }
  return v5;
}

BOOL sub_18BCEE4F8(unsigned __int16 *a1)
{
  uint64_t *v1;
  unsigned int v2;
  int v4;

  v1 = (uint64_t *)a1[4];
  if (v1 < 0x20)
    return 0;
  v4 = 0;
  v2 = icu::UnicodeString::char32At(v1, (icu::UnicodeString *)a1, 0);
  return uscript_getScript(v2, &v4) != 19;
}

uint64_t sub_18BCEE540(uint64_t a1, const icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  _QWORD *v8;
  icu::UnicodeString *v9;
  int32_t v10;
  int32_t v11;
  char *v12;
  int v13;
  void *v14;
  int v15;
  int32_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  void *v20;
  int32_t v21;
  int32_t v22;
  char *v23;
  int v24;
  void *v25;
  int32_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  int32_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  void *v35;
  int32_t v36;
  int32_t v37;
  char *v38;
  int v39;
  void *v40;
  int32_t v41;
  uint64_t v42;
  int v43;
  void *v44;
  void *v45;
  void *v46;
  _BYTE v48[8];
  void (**v49)(icu::UnicodeString *__hidden);
  __int16 v50;
  char *v51;
  _BYTE v52[8];
  unsigned __int16 v53;
  int v54;
  UChar *v55[10];

  v55[9] = *(UChar **)MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)sub_18BCEEB6C(a1, a2, a3, a4);
  *v8 = off_1E2260960;
  v9 = (icu::UnicodeString *)(v8 + 27);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v8 + 19), (UChar **)a2);
  icu::UnicodeString::UnicodeString(v9, (UChar **)a3);
  icu::UnicodeString::UnicodeString(a1 + 288, 0);
  icu::UnicodeString::UnicodeString(a1 + 360, 0);
  icu::UnicodeString::UnicodeString(a1 + 432, 0);
  icu::UnicodeString::UnicodeString(a1 + 504, 0);
  memset(v55, 0, 64);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v55, (UChar **)a2);
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)&unk_18BE360C6);
  if ((__int16)v49 >= 0)
    v10 = (unsigned __int16)v49 >> 5;
  else
    v10 = HIDWORD(v49);
  if ((v49 & 1) != 0 || v10 <= 0)
  {
    icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v49, (icu::UnicodeString *)v48);
  }
  else
  {
    if (SLOWORD(v55[1]) >= 0)
      v11 = LOWORD(v55[1]) >> 5;
    else
      v11 = HIDWORD(v55[1]);
    if ((v49 & 2) != 0)
      v12 = (char *)&v49 + 2;
    else
      v12 = v51;
    v13 = icu::UnicodeString::indexOf((uint64_t)v55, (uint64_t)v12, 0, v10, 0, v11);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v48);
    v15 = 0;
    if ((v13 & 0x80000000) == 0)
      goto LABEL_24;
  }
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)L"{0}");
  icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)&unk_18BE360C6);
  if (SLOWORD(v55[1]) >= 0)
    v16 = LOWORD(v55[1]) >> 5;
  else
    v16 = HIDWORD(v55[1]);
  if ((__int16)v49 >= 0)
    v17 = (unsigned __int16)v49 >> 5;
  else
    v17 = HIDWORD(v49);
  v18 = v53 >> 5;
  if ((v53 & 0x8000u) != 0)
    v18 = v54;
  icu::UnicodeString::findAndReplace((icu::UnicodeString *)v55, 0, v16, (const icu::UnicodeString *)v48, 0, v17, (const icu::UnicodeString *)v52, 0, v18);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v52);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v48);
  v15 = 1;
LABEL_24:
  v49 = off_1E2256B38;
  v50 = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v48, (const icu::UnicodeString *)v55, 2, 2, 0, a4);
  icu::SimpleFormatter::operator=(a1 + 280, (uint64_t)v48);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v48);
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)L" {1}");
  if ((__int16)v49 >= 0)
    v21 = (unsigned __int16)v49 >> 5;
  else
    v21 = HIDWORD(v49);
  if ((v49 & 1) != 0 || v21 <= 0)
  {
    icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v49, (icu::UnicodeString *)v48);
  }
  else
  {
    if (SLOWORD(v55[1]) >= 0)
      v22 = LOWORD(v55[1]) >> 5;
    else
      v22 = HIDWORD(v55[1]);
    if ((v49 & 2) != 0)
      v23 = (char *)&v49 + 2;
    else
      v23 = v51;
    v24 = icu::UnicodeString::indexOf((uint64_t)v55, (uint64_t)v23, 0, v21, 0, v22);
    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v48);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_47;
  }
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)"{");
  icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)L" {1}");
  if (SLOWORD(v55[1]) >= 0)
    v26 = LOWORD(v55[1]) >> 5;
  else
    v26 = HIDWORD(v55[1]);
  if ((__int16)v49 >= 0)
    v27 = (unsigned __int16)v49 >> 5;
  else
    v27 = HIDWORD(v49);
  v28 = v53 >> 5;
  if ((v53 & 0x8000u) != 0)
    v28 = v54;
  icu::UnicodeString::findAndReplace((icu::UnicodeString *)v55, 0, v26, (const icu::UnicodeString *)v48, 0, v27, (const icu::UnicodeString *)v52, 0, v28);
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v52);
  icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v48);
LABEL_47:
  v49 = off_1E2256B38;
  v50 = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v48, (const icu::UnicodeString *)v55, 2, 2, 0, a4);
  icu::SimpleFormatter::operator=(a1 + 424, (uint64_t)v48);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v48);
  if (v15)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)&unk_18BE360C6);
    icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)L"{0}");
    if (SLOWORD(v55[1]) >= 0)
      v31 = LOWORD(v55[1]) >> 5;
    else
      v31 = HIDWORD(v55[1]);
    if ((__int16)v49 >= 0)
      v32 = (unsigned __int16)v49 >> 5;
    else
      v32 = HIDWORD(v49);
    v33 = v53 >> 5;
    if ((v53 & 0x8000u) != 0)
      v33 = v54;
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)v55, 0, v31, (const icu::UnicodeString *)v48, 0, v32, (const icu::UnicodeString *)v52, 0, v33);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v52);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v48);
  }
  v49 = off_1E2256B38;
  v50 = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v48, (const icu::UnicodeString *)v55, 2, 2, 0, a4);
  icu::SimpleFormatter::operator=(a1 + 352, (uint64_t)v48);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v48);
  icu::UnicodeString::operator=(v55, (UChar **)a3);
  icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)L" {1}");
  if ((__int16)v49 >= 0)
    v36 = (unsigned __int16)v49 >> 5;
  else
    v36 = HIDWORD(v49);
  if ((v49 & 1) != 0 || v36 <= 0)
  {
    icu::UnicodeString::~UnicodeString((void *)(unsigned __int16)v49, (icu::UnicodeString *)v48);
LABEL_71:
    icu::UnicodeString::UnicodeString((uint64_t)v48, (uint64_t)"{");
    icu::UnicodeString::UnicodeString((uint64_t)v52, (uint64_t)L" {1}");
    if (SLOWORD(v55[1]) >= 0)
      v41 = LOWORD(v55[1]) >> 5;
    else
      v41 = HIDWORD(v55[1]);
    if ((__int16)v49 >= 0)
      v42 = (unsigned __int16)v49 >> 5;
    else
      v42 = HIDWORD(v49);
    v43 = v53 >> 5;
    if ((v53 & 0x8000u) != 0)
      v43 = v54;
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)v55, 0, v41, (const icu::UnicodeString *)v48, 0, v42, (const icu::UnicodeString *)v52, 0, v43);
    icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)v52);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v48);
    goto LABEL_80;
  }
  if (SLOWORD(v55[1]) >= 0)
    v37 = LOWORD(v55[1]) >> 5;
  else
    v37 = HIDWORD(v55[1]);
  if ((v49 & 2) != 0)
    v38 = (char *)&v49 + 2;
  else
    v38 = v51;
  v39 = icu::UnicodeString::indexOf((uint64_t)v55, (uint64_t)v38, 0, v36, 0, v37);
  icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v48);
  if (v39 < 0)
    goto LABEL_71;
LABEL_80:
  v49 = off_1E2256B38;
  v50 = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v48, (const icu::UnicodeString *)v55, 2, 2, 0, a4);
  icu::SimpleFormatter::operator=(a1 + 496, (uint64_t)v48);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v48);
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)v55);
  return a1;
}

uint64_t sub_18BCEEB6C(uint64_t a1, const icu::UnicodeString *a2, const icu::UnicodeString *a3, UErrorCode *a4)
{
  *(_QWORD *)a1 = off_1E2260920;
  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 24) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 8), a2, 2, 2, 0, a4);
  *(_QWORD *)(a1 + 88) = off_1E2256B38;
  *(_WORD *)(a1 + 96) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 80), a3, 2, 2, 0, a4);
  return a1;
}

void sub_18BCEEC00(_QWORD *a1)
{
  icu::SimpleFormatter *v2;

  *a1 = off_1E22608B0;
  v2 = (icu::SimpleFormatter *)(a1 + 20);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 29));
  icu::SimpleFormatter::~SimpleFormatter(v2);
  sub_18BCEEE44((uint64_t)a1);
}

void sub_18BCEEC40(_QWORD *a1)
{
  void *v1;

  sub_18BCEEC00(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BCEEC54(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[8];
  UChar *v7[8];
  _BYTE v8[8];
  UChar *v9[8];
  uint64_t *v10;

  v10 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v3 = icu::UMemory::operator new(v10, (icu::UMemory *)0x130, a2);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 152);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v9, (UChar **)(a1 + 16));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v7, (UChar **)(a1 + 88));
    *v3 = (uint64_t)off_1E2260920;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v3 + 2), v9);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v3 + 11), v7);
    *v3 = (uint64_t)off_1E22608B0;
    v3[19] = v4;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v3 + 21), (UChar **)(a1 + 168));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v3 + 30), (UChar **)(a1 + 240));
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v6);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v8);
  }
  return v3;
}

uint64_t sub_18BCEED50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(uint64_t))(a1 + 152))(a3);
  v5 = 8;
  if (v4)
    v5 = 160;
  return a1 + v5;
}

uint64_t sub_18BCEED8C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = (*(uint64_t (**)(uint64_t))(a1 + 152))(a2);
  v4 = 80;
  if (v3)
    v4 = 232;
  return a1 + v4;
}

void sub_18BCEEDCC(uint64_t a1)
{
  void *v1;

  sub_18BCEEE44(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BCEEDE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x98, a2);
  v5 = v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E2260920;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v4 + 2), (UChar **)(a1 + 16));
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v5 + 11), (UChar **)(a1 + 88));
  }
  return v5;
}

uint64_t sub_18BCEEE34(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_18BCEEE3C(uint64_t a1)
{
  return a1 + 80;
}

void sub_18BCEEE44(uint64_t a1)
{
  icu::SimpleFormatter *v2;

  *(_QWORD *)a1 = off_1E2260920;
  v2 = (icu::SimpleFormatter *)(a1 + 8);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 80));
  icu::SimpleFormatter::~SimpleFormatter(v2);
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BCEEE84(_QWORD *a1)
{
  icu::UnicodeString *v2;
  void *v3;
  void *v4;

  *a1 = off_1E2260960;
  v2 = (icu::UnicodeString *)(a1 + 19);
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 62));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 53));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 44));
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)(a1 + 35));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 27));
  icu::UnicodeString::~UnicodeString(v4, v2);
  sub_18BCEEE44((uint64_t)a1);
}

void sub_18BCEEEE4(_QWORD *a1)
{
  void *v1;

  sub_18BCEEE84(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BCEEEF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  int v5;

  v5 = 0;
  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x238, a2);
  if (result)
    return (uint64_t *)sub_18BCEE540((uint64_t)result, (const icu::UnicodeString *)(a1 + 152), (const icu::UnicodeString *)(a1 + 216), (UErrorCode *)&v5);
  return result;
}

uint64_t sub_18BCEEF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v5;
  unsigned int v6;
  unsigned int v7;
  signed int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned __int16 *v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v22;

  v5 = 0;
  v22 = 0;
  v6 = *(unsigned __int16 *)(a2 + 8);
  if (v6 >= 0x20)
  {
    if ((v6 & 0x8000) != 0)
    {
      v7 = *(_DWORD *)(a2 + 12);
      if (!v7)
      {
        v10 = 0xFFFF;
LABEL_9:
        v5 = uscript_getScript(v10, &v22) != 38;
        goto LABEL_10;
      }
    }
    else
    {
      v7 = v6 >> 5;
    }
    v8 = v7 - 1;
    if ((v6 & 2) != 0)
      v9 = a2 + 10;
    else
      v9 = *(_QWORD *)(a2 + 24);
    v10 = *(unsigned __int16 *)(v9 + 2 * v8);
    goto LABEL_9;
  }
LABEL_10:
  v11 = *(unsigned __int16 *)(a3 + 8);
  if (v11 < 0x20)
  {
    v15 = 0;
  }
  else
  {
    if ((v11 & 0x8000u) == 0)
      v12 = v11 >> 5;
    else
      v12 = *(_DWORD *)(a3 + 12);
    if (v12)
    {
      if ((v11 & 2) != 0)
        v13 = (unsigned __int16 *)(a3 + 10);
      else
        v13 = *(unsigned __int16 **)(a3 + 24);
      v14 = *v13;
    }
    else
    {
      v14 = 0xFFFF;
    }
    v15 = uscript_getScript(v14, &v22) != 38;
  }
  v16 = 8;
  if (v15)
    v16 = 352;
  v17 = a1 + v16;
  v18 = !v15;
  v19 = 280;
  if (!v18)
    v19 = 424;
  v20 = a1 + v19;
  if (v5)
    return v20;
  else
    return v17;
}

uint64_t sub_18BCEF04C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned __int16 *v5;
  unsigned int v6;
  int v8;

  v8 = 0;
  v3 = *(unsigned __int16 *)(a2 + 8);
  if (v3 < 0x20)
    return a1 + 80;
  if ((v3 & 0x8000u) == 0 ? v3 >> 5 : *(_DWORD *)(a2 + 12))
  {
    v5 = (v3 & 2) != 0 ? (unsigned __int16 *)(a2 + 10) : *(unsigned __int16 **)(a2 + 24);
    v6 = *v5;
  }
  else
  {
    v6 = 0xFFFF;
  }
  if (uscript_getScript(v6, &v8) == 38)
    return a1 + 80;
  else
    return a1 + 496;
}

uint64_t sub_18BCEF0D0(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  uint64_t *v6;

  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 24) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 8), (const icu::UnicodeString *)(a2 + 72), 0, 0x7FFFFFFF, 0, a3);
  *(_QWORD *)(a1 + 88) = off_1E2256B38;
  *(_WORD *)(a1 + 96) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)(a1 + 80), (const icu::UnicodeString *)(a2 + 136), 0, 0x7FFFFFFF, 0, a3);
  v6 = sub_18BCEDC40((const char *)(a2 + 272), a2 + 8, a2 + 200, a3);
  *(_QWORD *)(a1 + 152) = v6;
  if (!v6 && *(int *)a3 <= 0)
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  *(_BYTE *)(a1 + 160) = uloc_getCharacterOrientation(*(char **)(a2 + 304), (int32_t *)a3) == 1;
  return a1;
}

uint64_t sub_18BCEF1A8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;

  if (*(__int16 *)(a2 + 8) < 0)
  {
    v5 = *(_DWORD *)(a2 + 12);
    v4 = v5 & (v5 >> 31);
  }
  else
  {
    v4 = 0;
    v5 = *(unsigned __int16 *)(a2 + 8) >> 5;
  }
  result = icu::UnicodeString::indexOf(a2, (uint64_t)"l", 0, 12, v4, v5 - v4);
  if ((result & 0x80000000) == 0)
  {
    v7 = result + 12;
    if (*(__int16 *)(a2 + 8) < 0)
    {
      v8 = *(_DWORD *)(a2 + 12);
      if (v8 >= v7)
        v9 = result + 12;
      else
        v9 = *(_DWORD *)(a2 + 12);
    }
    else
    {
      v8 = *(unsigned __int16 *)(a2 + 8) >> 5;
      if (v8 >= v7)
        v9 = result + 12;
      else
        v9 = *(unsigned __int16 *)(a2 + 8) >> 5;
    }
    v10 = icu::UnicodeString::doIndexOf(a2, 0x2Fu, v9, v8 - v9);
    if (v10 < 0)
    {
      if (*(__int16 *)(a2 + 8) < 0)
        v10 = *(_DWORD *)(a2 + 12);
      else
        v10 = *(unsigned __int16 *)(a2 + 8) >> 5;
    }
    result = icu::UnicodeString::extract(a2, v7, (v10 - v7), (char *)(a1 + 264), 25);
    *(_BYTE *)(a1 + 288) = 0;
  }
  return result;
}

void *sub_18BCEF288(void *result, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  icu::UnicodeString *v9;
  uint64_t v10;
  int v11;
  _QWORD v12[8];
  _BYTE v13[64];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a3[4] <= 0x1Fu)
  {
    v7 = (uint64_t)result;
    result = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    if ((_DWORD)result == 3)
    {
      if (*(_BYTE *)(v7 + 264))
        return result;
      LODWORD(v10) = 0;
      v12[0] = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 40))(a2, &v10, a4);
      icu::UnicodeString::UnicodeString(v13, 1, v12);
      sub_18BCEF1A8(v7, (uint64_t)v13);
      v9 = (icu::UnicodeString *)v13;
    }
    else
    {
      v11 = 0;
      v10 = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)a2 + 32))(a2, &v11, a4);
      icu::UnicodeString::UnicodeString(v12, 1, &v10);
      icu::UnicodeString::operator=((icu::UnicodeString *)a3, (icu::UnicodeString *)v12);
      v9 = (icu::UnicodeString *)v12;
    }
    return icu::UnicodeString::~UnicodeString(v8, v9);
  }
  return result;
}

void *icu::MeasureFormat::getStaticClassID(icu::MeasureFormat *this)
{
  return &unk_1EE009BC0;
}

void *icu::MeasureFormat::getDynamicClassID(icu::MeasureFormat *this)
{
  return &unk_1EE009BC0;
}

void sub_18BCEF3D8(icu::SharedObject *this)
{
  uint64_t (**v2)(icu::SharedObject *);
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = &off_1E2260A00;
  *(_QWORD *)this = &off_1E2260A00;
  for (i = 40; i != 64; i += 8)
  {
    v4 = *(_QWORD *)((char *)this + i);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = *((_QWORD *)this + 8);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 9);
  if (v6)
  {
    icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(v6 + 136));
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(v6 + 72));
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(v6 + 8));
    icu::UMemory::operator delete((void *)v6);
  }
  icu::SharedObject::~SharedObject(this);
}

void sub_18BCEF468(icu::SharedObject *a1)
{
  void *v1;

  sub_18BCEF3D8(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BCEF47C(uint64_t a1, uint64_t a2, int *a3)
{
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v21;
  icu::DecimalFormat *Instance;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  icu::DecimalFormat *v26;
  void *v27;
  char *v28[28];
  UChar *v29[8];
  UChar *v30[9];

  v30[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v4 = *(char **)(a1 + 56);
  v5 = ures_open("icudt74l-unit", v4, a3);
  v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x50, v6);
  if (v8)
  {
    v9 = v8;
    v8[1] = 0;
    v8[2] = 0;
    *v8 = (uint64_t)&off_1E2260A00;
    v8[8] = 0;
    v10 = v8 + 8;
    v8[9] = 0;
    memset_pattern16(v8 + 3, &unk_18BE27BA0, 0xCuLL);
    v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
    v12 = (uint64_t *)*a3;
    if ((int)v12 < 1)
    {
      v14 = icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
      if (v14)
      {
        sub_18BCF1FD4((uint64_t)v5, "hm", (UErrorCode *)a3, (uint64_t)v28);
        sub_18BCF1FD4((uint64_t)v5, "ms", (UErrorCode *)a3, (uint64_t)v30);
        sub_18BCF1FD4((uint64_t)v5, "hms", (UErrorCode *)a3, (uint64_t)v29);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v14 + 1), (UChar **)v28);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v14 + 9), v30);
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)(v14 + 17), v29);
        icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v29);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v30);
        icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v28);
        v13 = *a3;
        if ((int)v13 >= 1)
        {
          icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)(v14 + 17));
          icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)(v14 + 9));
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)(v14 + 1));
          icu::UMemory::operator delete(v14);
          v14 = 0;
        }
      }
      sub_18BCEF7B4((uint64_t)v9, (uint64_t)v14, (void *)v13);
      if (*a3 <= 0)
      {
        v21 = 0;
        while (1)
        {
          LODWORD(v30[0]) = 0;
          icu::Locale::Locale((icu::Locale *)v28, v4, 0, 0, 0);
          Instance = icu::NumberFormat::createInstance(v28, dword_18BE27AF0[v21], (UErrorCode *)v30);
          v23 = &v9[v21];
          v24 = v23[5];
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23[5] = (uint64_t)Instance;
          icu::Locale::~Locale((icu::Locale *)v28);
          v25 = (int)v30[0];
          if (LODWORD(v30[0]))
            *a3 = (int)v30[0];
          else
            v25 = *a3;
          if (v25 >= 1)
            break;
          if (++v21 == 3)
          {
            icu::Locale::Locale((icu::Locale *)v28, v4, 0, 0, 0);
            v26 = icu::NumberFormat::createInstance(v28, 1u, (UErrorCode *)a3);
            icu::Locale::~Locale((icu::Locale *)v28);
            if (*a3 > 0)
              break;
            (*(void (**)(icu::DecimalFormat *, _QWORD))(*(_QWORD *)v26 + 232))(v26, 0);
            if (v27)
              (*(void (**)(void *, uint64_t))(*(_QWORD *)v27 + 280))(v27, 2);
            if (*v10)
              (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 8))(*v10);
            v9[8] = (uint64_t)v26;
            icu::SharedObject::addRef((uint64_t)v9);
            goto LABEL_10;
          }
        }
      }
    }
    (*(void (**)(uint64_t *))(*v9 + 8))(v9);
    goto LABEL_9;
  }
  if (*a3 > 0)
  {
LABEL_9:
    v9 = 0;
    goto LABEL_10;
  }
  v9 = 0;
  *a3 = 7;
LABEL_10:
  if (v5)
    ures_close(v5);
  return v9;
}

void sub_18BCEF7B4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  void *v7;

  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
  {
    icu::UnicodeString::~UnicodeString(a3, (icu::UnicodeString *)(v5 + 136));
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(v5 + 72));
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(v5 + 8));
    icu::UMemory::operator delete((void *)v5);
  }
  *(_QWORD *)(a1 + 72) = a2;
}

uint64_t icu::MeasureFormat::MeasureFormat(uint64_t a1, const char **a2, int a3, UErrorCode *a4)
{
  uint64_t v8;
  int v9;

  v8 = icu::Format::Format(a1);
  *(_QWORD *)v8 = off_1E2260A28;
  *(_QWORD *)(v8 + 336) = 0;
  *(_QWORD *)(v8 + 344) = 0;
  if (a3 == 8)
    v9 = 1;
  else
    v9 = a3;
  *(_QWORD *)(v8 + 328) = 0;
  *(_DWORD *)(v8 + 352) = v9;
  *(_BYTE *)(v8 + 356) = a3 == 8;
  *(_QWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 368) = 0;
  icu::MeasureFormat::initMeasureFormat(v8, a2, v9, 0, a4);
  return a1;
}

void icu::MeasureFormat::initMeasureFormat(uint64_t a1, const char **a2, int a3, unint64_t a4, UErrorCode *a5)
{
  uint64_t v7;
  icu::SharedObject *v10;
  icu::SharedObject *v11;
  icu::SharedObject *SharedInstance;
  icu::SharedObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(int *)a5 <= 0
    && (LODWORD(v7) = a3,
        icu::Format::setLocaleIDs((icu::Format *)a1, a2[5], a2[5]),
        sub_18BCF1AD0((uint64_t)a2, (UErrorCode *)(a1 + 328), a5),
        *(int *)a5 <= 0)
    && (v10 = (icu::SharedObject *)icu::PluralRules::createSharedInstance((uint64_t)a2, 0, a5), *(int *)a5 <= 0))
  {
    v11 = v10;
    sub_18BC4A244(v10, (icu::SharedObject **)(a1 + 344));
    icu::SharedObject::removeRef(v11);
    if (a4)
    {
      icu::MeasureFormat::adoptNumberFormat((icu::SharedObject *)a1, a4, a5);
      if (*(int *)a5 > 0)
        return;
    }
    else
    {
      SharedInstance = (icu::SharedObject *)icu::NumberFormat::createSharedInstance((uint64_t)a2, 1, a5);
      if (*(int *)a5 > 0)
        return;
      v13 = SharedInstance;
      sub_18BC4A244(SharedInstance, (icu::SharedObject **)(a1 + 336));
      icu::SharedObject::removeRef(v13);
    }
    *(_DWORD *)(a1 + 352) = v7;
    v14 = *(unsigned __int8 *)(a1 + 356);
    if ((int)v7 >= 2)
      v7 = 2;
    else
      v7 = v7;
    v15 = *(_QWORD *)(a1 + 360);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = 2;
    if (!v14)
      v16 = v7;
    *(_QWORD *)(a1 + 360) = icu::ListFormatter::createInstance(a2, 2, dword_18BE27AFC[v16], a5);
    v17 = *(_QWORD *)(a1 + 368);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    *(_QWORD *)(a1 + 368) = icu::ListFormatter::createInstance(a2, 0, 0, a5);
  }
  else if (a4)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)a4 + 8))(a4);
  }
}

uint64_t icu::MeasureFormat::MeasureFormat(uint64_t a1, const char **a2, int a3, unint64_t a4, UErrorCode *a5)
{
  uint64_t v10;
  int v11;

  v10 = icu::Format::Format(a1);
  *(_QWORD *)v10 = off_1E2260A28;
  *(_QWORD *)(v10 + 336) = 0;
  *(_QWORD *)(v10 + 344) = 0;
  if (a3 == 8)
    v11 = 1;
  else
    v11 = a3;
  *(_QWORD *)(v10 + 328) = 0;
  *(_DWORD *)(v10 + 352) = v11;
  *(_BYTE *)(v10 + 356) = a3 == 8;
  *(_QWORD *)(v10 + 360) = 0;
  *(_QWORD *)(v10 + 368) = 0;
  icu::MeasureFormat::initMeasureFormat(v10, a2, v11, a4, a5);
  return a1;
}

icu::MeasureFormat *icu::MeasureFormat::MeasureFormat(icu::MeasureFormat *this, const icu::MeasureFormat *a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t *v7;
  icu::ListFormatter *v8;
  uint64_t *v9;
  icu::ListFormatter *v10;

  v4 = icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *(_QWORD *)v4 = off_1E2260A28;
  v5 = *(_OWORD *)((char *)a2 + 328);
  *(_OWORD *)(v4 + 328) = v5;
  *(_QWORD *)(v4 + 344) = *((_QWORD *)a2 + 43);
  *(_DWORD *)(v4 + 352) = *((_DWORD *)a2 + 88);
  *(_BYTE *)(v4 + 356) = *((_BYTE *)a2 + 356);
  *(_QWORD *)(v4 + 360) = 0;
  *(_QWORD *)(v4 + 368) = 0;
  icu::SharedObject::addRef(v5);
  icu::SharedObject::addRef(*((_QWORD *)this + 42));
  icu::SharedObject::addRef(*((_QWORD *)this + 43));
  v7 = (uint64_t *)*((_QWORD *)a2 + 45);
  if (v7)
  {
    v8 = (icu::ListFormatter *)icu::UMemory::operator new(v7, (icu::UMemory *)0x18, v6);
    if (v8)
      v8 = (icu::ListFormatter *)icu::ListFormatter::ListFormatter(v8, *((const icu::ListFormatter **)a2 + 45));
    *((_QWORD *)this + 45) = v8;
  }
  v9 = (uint64_t *)*((_QWORD *)a2 + 46);
  if (v9)
  {
    v10 = (icu::ListFormatter *)icu::UMemory::operator new(v9, (icu::UMemory *)0x18, v6);
    if (v10)
      v10 = (icu::ListFormatter *)icu::ListFormatter::ListFormatter(v10, *((const icu::ListFormatter **)a2 + 46));
    *((_QWORD *)this + 46) = v10;
  }
  return this;
}

uint64_t icu::MeasureFormat::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  icu::ListFormatter *v7;
  uint64_t v8;
  uint64_t *v9;
  icu::ListFormatter *v10;

  if (a1 != a2)
  {
    icu::Format::operator=(a1, a2);
    sub_18BC4A244(*(icu::SharedObject **)(a2 + 328), (icu::SharedObject **)(a1 + 328));
    sub_18BC4A244(*(icu::SharedObject **)(a2 + 336), (icu::SharedObject **)(a1 + 336));
    sub_18BC4A244(*(icu::SharedObject **)(a2 + 344), (icu::SharedObject **)(a1 + 344));
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
    *(_BYTE *)(a1 + 356) = *(_BYTE *)(a2 + 356);
    v5 = *(_QWORD *)(a1 + 360);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *(uint64_t **)(a2 + 360);
    if (v6)
    {
      v7 = (icu::ListFormatter *)icu::UMemory::operator new(v6, (icu::UMemory *)0x18, v4);
      if (v7)
        v7 = (icu::ListFormatter *)icu::ListFormatter::ListFormatter(v7, *(const icu::ListFormatter **)(a2 + 360));
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(a1 + 360) = v7;
    v8 = *(_QWORD *)(a1 + 368);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *(uint64_t **)(a2 + 368);
    if (v9)
    {
      v10 = (icu::ListFormatter *)icu::UMemory::operator new(v9, (icu::UMemory *)0x18, v4);
      if (v10)
        v10 = (icu::ListFormatter *)icu::ListFormatter::ListFormatter(v10, *(const icu::ListFormatter **)(a2 + 368));
    }
    else
    {
      v10 = 0;
    }
    *(_QWORD *)(a1 + 368) = v10;
  }
  return a1;
}

uint64_t icu::MeasureFormat::MeasureFormat(icu::MeasureFormat *this)
{
  uint64_t result;

  result = icu::Format::Format((uint64_t)this);
  *(_QWORD *)result = off_1E2260A28;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = 0;
  *(_QWORD *)(result + 328) = 0;
  *(_DWORD *)(result + 352) = 1;
  *(_BYTE *)(result + 356) = 0;
  *(_QWORD *)(result + 360) = 0;
  *(_QWORD *)(result + 368) = 0;
  return result;
}

{
  uint64_t result;

  result = icu::Format::Format((uint64_t)this);
  *(_QWORD *)result = off_1E2260A28;
  *(_QWORD *)(result + 336) = 0;
  *(_QWORD *)(result + 344) = 0;
  *(_QWORD *)(result + 328) = 0;
  *(_DWORD *)(result + 352) = 1;
  *(_BYTE *)(result + 356) = 0;
  *(_QWORD *)(result + 360) = 0;
  *(_QWORD *)(result + 368) = 0;
  return result;
}

void icu::MeasureFormat::~MeasureFormat(icu::MeasureFormat *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E2260A28;
  v2 = (_QWORD *)*((_QWORD *)this + 41);
  if (v2)
    icu::SharedObject::removeRef(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 42);
  if (v3)
    icu::SharedObject::removeRef(v3);
  v4 = (_QWORD *)*((_QWORD *)this + 43);
  if (v4)
    icu::SharedObject::removeRef(v4);
  v5 = *((_QWORD *)this + 45);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 46);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  icu::Format::~Format(this);
}

{
  void *v1;

  icu::MeasureFormat::~MeasureFormat(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::MeasureFormat::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  const char *LocaleID;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  if (a1 == a2)
    return 1;
  v12 = v2;
  v13 = v3;
  result = icu::Format::operator==((_QWORD *)a1, (_QWORD *)a2);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 352) == *(_DWORD *)(a2 + 352)
      && *(unsigned __int8 *)(a1 + 356) == *(unsigned __int8 *)(a2 + 356)
      && (*(_QWORD *)(a1 + 328) == *(_QWORD *)(a2 + 328)
       || (v11 = 0,
           LocaleID = (const char *)icu::Format::getLocaleID(a1, 1, &v11),
           v8 = (const char *)icu::Format::getLocaleID(a2, 1, &v11),
           v11 <= 0)
       && !strcmp(LocaleID, v8)))
    {
      v9 = *(_QWORD *)(a1 + 336);
      v10 = *(_QWORD *)(a2 + 336);
      if (v9 == v10)
        return 1;
      else
        return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v9 + 24) + 24))(*(_QWORD *)(v9 + 24), *(_QWORD *)(v10 + 24));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t icu::MeasureFormat::getLocaleID(icu::MeasureFormat *this, UErrorCode *a2)
{
  return icu::Format::getLocaleID((uint64_t)this, 1, (int *)a2);
}

icu::MeasureFormat *icu::MeasureFormat::clone@<X0>(icu::MeasureFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::MeasureFormat *result;

  result = (icu::MeasureFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x178, a2);
  if (result)
    return icu::MeasureFormat::MeasureFormat(result, this);
  return result;
}

icu::UnicodeString *icu::MeasureFormat::format(icu::MeasureFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  const void *Object;
  const icu::Measure *v11;

  if (*(int *)a5 <= 0)
  {
    if (icu::Formattable::getType(a2) == 6)
    {
      Object = (const void *)icu::Formattable::getObject(a2);
      if (Object)
      {
        if (v11)
          return icu::MeasureFormat::formatMeasure(this, v11, *(const icu::NumberFormat **)(*((_QWORD *)this + 42) + 24), a3, a4, a5);
      }
    }
    *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return a3;
}

icu::UnicodeString *icu::MeasureFormat::formatMeasure(icu::MeasureFormat *this, const icu::Measure *a2, const icu::NumberFormat *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  icu::QuantityFormatter *v11;
  icu::MeasureUnit *v12;
  const char *Type;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  icu::DecimalFormat *v18;
  UErrorCode *v19;
  icu::DecimalFormat *v20;
  uint64_t v21;
  UErrorCode *v22;
  uint64_t v23;
  double Double;
  uint64_t v25;
  int v26;
  const char *Subtype;
  unint64_t v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  icu::UObject *v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  UErrorCode *v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unint64_t v48;
  UErrorCode *v49;
  int v50;
  int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  void *v59;
  int32_t v60;
  int32_t v61;
  int32_t v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  char *v69;
  int v70;
  UErrorCode *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  UChar *v76;
  UChar us[248];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[6];
  uint64_t v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 > 0)
    return a4;
  v11 = (const icu::Measure *)((char *)a2 + 8);
  v12 = (icu::MeasureUnit *)*((_QWORD *)a2 + 15);
  Type = icu::MeasureUnit::getType(v12);
  if (!strcmp(Type, "currency"))
  {
    *(_QWORD *)us = 0;
    Subtype = icu::MeasureUnit::getSubtype(v12);
    u_charsToUChars(Subtype, us, 4);
    v29 = *((_DWORD *)this + 88);
    if (v29 >= 2)
      v29 = 2;
    v30 = (uint64_t *)(*((_QWORD *)this + 41) + 8 * v29);
    v31 = v30[5];
    v32 = icu::UMemory::operator new(v30, (icu::UMemory *)0x80, v28);
    v33 = (icu::UObject *)v32;
    if (v32)
    {
      v76 = us;
      icu::CurrencyAmount::CurrencyAmount(v32, v11, &v76, a6);
    }
    icu::Formattable::Formattable((icu::Formattable *)&v78, v33);
    a4 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, __int128 *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(_QWORD *)v31 + 40))(v31, &v78, a4, a5, a6);
    icu::Formattable::~Formattable((icu::Formattable *)&v78);
    return a4;
  }
  v14 = *((unsigned __int16 *)a4 + 4);
  v15 = (__int16)v14;
  LODWORD(v16) = v14 >> 5;
  if (v15 >= 0)
    v16 = v16;
  else
    v16 = *((unsigned int *)a4 + 3);
  v75 = v16;
  v17 = *((_DWORD *)a5 + 2);
  if (v17 == 0x40000000)
    *((_DWORD *)a5 + 2) = -1;
  if (!v18)
  {
    memset(&us[4], 0, 56);
    *(_QWORD *)us = off_1E2256B38;
    us[4] = 2;
    v34 = icu::QuantityFormatter::selectPlural(v11, a3, *(const icu::NumberFormat **)(*((_QWORD *)this + 43) + 24), (const icu::PluralRules *)us, a5, a6, v19);
    if (v17 == 0x40000000)
    {
      *((_QWORD *)a5 + 1) = 0x40000000;
      v35 = us[4] >> 5;
      if ((us[4] & 0x8000u) != 0)
        v35 = *(_DWORD *)&us[6];
      *((_DWORD *)a5 + 4) = v35;
    }
    v86 = 0u;
    v85 = 0u;
    v84 = 0u;
    v83 = 0u;
    v36 = 1;
    icu::Format::getLocale((uint64_t)this, 1, (int *)a6, (icu::Locale *)&v78);
    v37 = *((int *)this + 88);
    if (v37 <= 3)
      v36 = dword_18BE27BB0[v37];
    sub_18BD1B840((uint64_t)&v78, v12, v36, v34, (int *)a6, (uint64_t)&v83);
    icu::Locale::~Locale((icu::Locale *)&v78);
    v38 = (void *)*(unsigned int *)a6;
    if ((int)v38 > 0)
    {
      icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v83);
LABEL_81:
      icu::UnicodeString::~UnicodeString((void *)v39, (icu::UnicodeString *)us);
      return a4;
    }
    *(_QWORD *)&v78 = 0;
    v79 = 0u;
    v82 = 0;
    v80 = 0u;
    v81 = 0u;
    *((_QWORD *)&v78 + 1) = off_1E2256B38;
    LOWORD(v79) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v78, (const icu::UnicodeString *)&v83, 0, 1, 0, a6);
    icu::QuantityFormatter::format((icu::QuantityFormatter *)&v78, (const icu::SimpleFormatter *)us, a4, a5, a6, v72);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v78);
    icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)&v83);
    icu::UnicodeString::~UnicodeString(v74, (icu::UnicodeString *)us);
    goto LABEL_51;
  }
  v20 = v18;
  v103 = 0;
  memset(v102, 0, sizeof(v102));
  v101 = 0u;
  v100 = 0u;
  v99 = 0u;
  v98 = 0u;
  v97 = 0u;
  v96 = 0u;
  v95 = 0u;
  v94 = 0u;
  v93 = 0u;
  v92 = 0u;
  v91 = 0u;
  v90 = 0u;
  v89 = 0u;
  v88 = 0u;
  v87 = 0u;
  v86 = 0u;
  v85 = 0u;
  v84 = 0u;
  v83 = 0u;
  sub_18BCC2258((uint64_t)&v83);
  v21 = icu::DecimalFormat::toNumberFormatter(v20, a6);
  if (v21)
  {
    v23 = v21;
    Double = icu::Formattable::getDouble(v11, a6);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v102, Double);
    icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit(us, v23, (unint64_t)v12);
    v25 = *((int *)this + 88);
    if (v25 > 3)
      v26 = 1;
    else
      v26 = dword_18BE27BB0[v25];
    icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitWidth(&v78, (uint64_t)us, v26);
    icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)&v78, (icu::number::impl::UFormattedNumberData *)&v83, a6);
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)&v78);
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)us);
  }
  v40 = *((unsigned __int16 *)a4 + 4);
  v41 = (__int16)v40;
  v42 = v40 >> 5;
  if (v41 >= 0)
    v43 = v42;
  else
    v43 = *((unsigned int *)a4 + 3);
  icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)&v83, a5, (icu::FieldPosition *)v43, a6, v22);
  if (v17 == 0x40000000)
  {
    *((_DWORD *)a5 + 2) = 0;
    v45 = *((unsigned __int16 *)a4 + 4);
    v46 = (__int16)v45;
    v47 = v45 >> 5;
    if (v46 >= 0)
      v48 = v47;
    else
      v48 = *((unsigned int *)a4 + 3);
    icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)&v83, a5, (icu::FieldPosition *)v48, a6, v44);
    v51 = *((_DWORD *)a5 + 3);
    v50 = *((_DWORD *)a5 + 4);
    *((_DWORD *)a5 + 2) = 1;
    v52 = *((unsigned __int16 *)a4 + 4);
    v53 = (__int16)v52;
    v54 = v52 >> 5;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = *((unsigned int *)a4 + 3);
    icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)&v83, a5, (icu::FieldPosition *)v55, a6, v49);
    v56 = *((_DWORD *)a5 + 3);
    v57 = *((_DWORD *)a5 + 4);
    if (v51 < 0 || v50 <= v51)
    {
      if ((v56 & 0x80000000) == 0 && v57 > v56)
        goto LABEL_46;
      v50 = 0;
      *((_DWORD *)a5 + 3) = 0;
    }
    else
    {
      *((_DWORD *)a5 + 3) = v51;
      if (v56 >= v50 && v57 > v56)
        goto LABEL_46;
    }
    *((_DWORD *)a5 + 4) = v50;
LABEL_46:
    *((_DWORD *)a5 + 2) = 0x40000000;
  }
  icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)&v83, (uint64_t)&v78);
  if ((SWORD4(v78) & 0x8000u) == 0)
    v58 = WORD4(v78) >> 5;
  else
    v58 = HIDWORD(v78);
  icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)&v78, 0, v58);
  icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)&v78);
  icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)&v83);
LABEL_51:
  if (*((_BYTE *)this + 356))
  {
    memset(us, 0, 64);
    icu::Format::getLocale((uint64_t)this, 1, (int *)a6, (icu::Locale *)&v78);
    sub_18BD1B840((uint64_t)&v78, v12, 0, 5u, (int *)a6, (uint64_t)us);
    icu::Locale::~Locale((icu::Locale *)&v78);
    v39 = *(unsigned int *)a6;
    if ((int)v39 <= 0)
    {
      v60 = (us[4] & 0x8000u) == 0 ? us[4] >> 5 : *(_DWORD *)&us[6];
      if (icu::UnicodeString::doIndexOf((uint64_t)us, 0x20u, 0, v60) == -1)
      {
        v61 = (us[4] & 0x8000u) == 0 ? us[4] >> 5 : *(_DWORD *)&us[6];
        if (icu::UnicodeString::doIndexOf((uint64_t)us, 0xA0u, 0, v61) == -1)
        {
          v62 = (us[4] & 0x8000u) == 0 ? us[4] >> 5 : *(_DWORD *)&us[6];
          if (icu::UnicodeString::doIndexOf((uint64_t)us, 0x202Fu, 0, v62) == -1)
          {
            v63 = *((unsigned __int16 *)a4 + 4);
            v64 = (__int16)v63;
            v65 = v63 >> 5;
            v66 = v64 >= 0 ? v65 : *((_DWORD *)a4 + 3);
            v39 = v75;
            if ((int)v75 < v66)
            {
              v67 = (int)v75;
              do
              {
                v39 = *((unsigned __int16 *)a4 + 4);
                if ((v39 & 0x8000u) == 0)
                  v68 = v39 >> 5;
                else
                  v68 = *((_DWORD *)a4 + 3);
                if (v68 > v67)
                {
                  if ((v39 & 2) != 0)
                    v69 = (char *)a4 + 10;
                  else
                    v69 = (char *)*((_QWORD *)a4 + 3);
                  v39 = *(unsigned __int16 *)&v69[2 * v67];
                  if ((_DWORD)v39 == 32)
                  {
                    icu::UnicodeString::doReplace((uint64_t)a4, v67, 1, 0, 0, 0);
                    v39 = *((int *)a5 + 3);
                    if (v67 < v39)
                    {
                      v39 = (v39 - 1);
                      v70 = *((_DWORD *)a5 + 4) - 1;
                      *((_DWORD *)a5 + 3) = v39;
                      *((_DWORD *)a5 + 4) = v70;
                    }
                  }
                }
                ++v67;
              }
              while (v66 != (_DWORD)v67);
            }
          }
        }
      }
    }
    goto LABEL_81;
  }
  return a4;
}

icu::UnicodeString *icu::MeasureFormat::formatMeasurePerUnit(icu::MeasureFormat *this, const icu::Measure *a2, const icu::MeasureUnit *a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  icu::DecimalFormat *v12;
  icu::DecimalFormat *v13;
  uint64_t v14;
  UErrorCode *v15;
  uint64_t v16;
  double Double;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  _OWORD v27[31];
  _OWORD v28[31];
  _OWORD v29[31];
  _OWORD v30[19];
  _OWORD v31[6];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    if (v12)
    {
      v13 = v12;
      v32 = 0;
      memset(v31, 0, sizeof(v31));
      memset(v30, 0, sizeof(v30));
      sub_18BCC2258((uint64_t)v30);
      v14 = icu::DecimalFormat::toNumberFormatter(v13, a6);
      if (v14)
      {
        v16 = v14;
        Double = icu::Formattable::getDouble((const icu::Measure *)((char *)a2 + 8), a6);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v31, Double);
        icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit(v27, v16, *((_QWORD *)a2 + 15));
        icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::perUnit(v28, (uint64_t)v27, (unint64_t)a3);
        v18 = *((int *)this + 88);
        if (v18 > 3)
          v19 = 1;
        else
          v19 = dword_18BE27BB0[v18];
        icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitWidth(v29, (uint64_t)v28, v19);
        icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)v29, (icu::number::impl::UFormattedNumberData *)v30, a6);
        icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v29);
        icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v28);
        icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v27);
      }
      v20 = *((unsigned __int16 *)a4 + 4);
      v21 = (__int16)v20;
      v22 = v20 >> 5;
      if (v21 >= 0)
        v23 = v22;
      else
        v23 = *((unsigned int *)a4 + 3);
      icu::DecimalFormat::fieldPositionHelper((icu::FormattedValueStringBuilderImpl *)v30, a5, (icu::FieldPosition *)v23, a6, v15);
      icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)v30, (uint64_t)v29);
      if ((SWORD4(v29[0]) & 0x8000u) == 0)
        v24 = WORD4(v29[0]) >> 5;
      else
        v24 = HIDWORD(v29[0]);
      icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v29, 0, v24);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v29);
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v30);
    }
    else
    {
      *a6 = U_UNSUPPORTED_ERROR;
    }
  }
  return a4;
}

uint64_t icu::MeasureFormat::getNumberFormatInternal(icu::MeasureFormat *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 42) + 24);
}

icu::UnicodeString *icu::MeasureFormat::formatMeasures(icu::MeasureFormat *this, const icu::Measure *a2, int a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  const icu::Measure *v12;
  uint64_t v14;
  int v15;
  uint64_t i;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  icu::UnicodeString *v24;
  const icu::NumberFormat **v25;
  void *v26;
  uint64_t v27;
  icu::UnicodeString *v28;
  _OWORD v29[21];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 > 0 || a3 == 0)
    return a4;
  v12 = a2;
  if (a3 != 1)
  {
    if (*((_DWORD *)this + 88) != 3)
      goto LABEL_17;
    v14 = 0;
    memset(v29, 0, sizeof(v29));
    do
    {
      icu::Formattable::Formattable((icu::Formattable *)&v29[v14]);
      v14 += 7;
    }
    while (v14 != 21);
    v15 = sub_18BCF0B54((uint64_t)v12, a3, (double *)v29, (int *)a6);
    if (v15 >= 1)
      icu::MeasureFormat::formatNumeric(this, (const icu::Formattable *)v29, v15, a4, a6);
    for (i = 14; i != -7; i -= 7)
      icu::Formattable::~Formattable((icu::Formattable *)&v29[i]);
    if (v15 <= 0)
    {
LABEL_17:
      if (*((_DWORD *)a5 + 2) == -1)
      {
        if (a3 < 0)
          v17 = -1;
        else
          v17 = ((uint64_t)a3 << 6) | 0x10;
        v18 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v17, (unint64_t)a2);
        if (v18)
        {
          v19 = v18;
          *v18 = 64;
          v18[1] = a3;
          v28 = (icu::UnicodeString *)(v18 + 2);
          v20 = 2;
          do
          {
            v21 = &v18[v20];
            *v21 = off_1E2256B38;
            *((_WORD *)v21 + 4) = 2;
            v20 += 8;
          }
          while (v21 + 8 != &v18[8 * (uint64_t)a3 + 2]);
          v22 = (a3 - 1);
          if (a3 >= 1)
          {
            v23 = a3;
            v24 = (icu::UnicodeString *)(v18 + 2);
            do
            {
              if (v22)
                v25 = (const icu::NumberFormat **)(*((_QWORD *)this + 41) + 64);
              else
                v25 = (const icu::NumberFormat **)(*((_QWORD *)this + 42) + 24);
              icu::MeasureFormat::formatMeasure(this, v12, *v25, v24, a5, a6);
              --v22;
              v24 = (icu::UnicodeString *)((char *)v24 + 64);
              v12 = (const icu::Measure *)((char *)v12 + 128);
              --v23;
            }
            while (v23);
          }
          icu::ListFormatter::format(*((icu::ListFormatter **)this + 45), v28, a3, a4, a6);
          v26 = (void *)v19[1];
          if (v26)
          {
            v27 = (_QWORD)v26 << 6;
            do
            {
              icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)((char *)v19 + v27 - 48));
              v27 -= 64;
            }
            while (v27);
          }
          icu::UMemory::operator delete[](v19);
        }
        else
        {
          *a6 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
      else
      {
        icu::MeasureFormat::formatMeasuresSlowTrack(this, v12, a3, a4, a5, a6);
      }
    }
    return a4;
  }
  return icu::MeasureFormat::formatMeasure(this, a2, *(const icu::NumberFormat **)(*((_QWORD *)this + 42) + 24), a4, a5, a6);
}

uint64_t sub_18BCF0B54(uint64_t a1, int a2, double *a3, int *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  icu::MeasureUnit **i;
  _BOOL4 v12;

  if (*a4 <= 0 && a2 >= 1)
  {
    LODWORD(v7) = 0;
    v8 = (uint64_t)(a3 + 14);
    v9 = (uint64_t)(a3 + 28);
    v10 = a2;
    for (i = (icu::MeasureUnit **)(a1 + 120); ; i += 16)
    {
      if (sub_18BCF2200(*i, "hour"))
      {
        if ((int)v7 > 0)
          return 0;
        icu::Formattable::operator=((uint64_t)a3, (uint64_t)(i - 14));
        if (a3[1] < 0.0)
          return 0;
        v7 = 1;
      }
      else if (sub_18BCF2200(*i, "minute"))
      {
        if ((int)v7 > 1)
          return 0;
        icu::Formattable::operator=(v8, (uint64_t)(i - 14));
        if (a3[15] < 0.0)
          return 0;
        v7 = v7 | 2;
      }
      else
      {
        v12 = sub_18BCF2200(*i, "second");
        result = 0;
        if (!v12 || (int)v7 > 3)
          return result;
        icu::Formattable::operator=(v9, (uint64_t)(i - 14));
        if (a3[29] < 0.0)
          return 0;
        v7 = v7 | 4;
      }
      result = v7;
      if (!--v10)
        return result;
    }
  }
  return 0;
}

icu::UnicodeString *icu::MeasureFormat::formatNumeric(icu::MeasureFormat *this, const icu::Formattable *a2, int a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  double Double;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  const void *v15;
  icu::DecimalFormat *v16;
  icu::DecimalFormat *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void *v21;
  void *v22;
  int v23;
  signed int v24;
  BOOL v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  double v29;
  uint64_t v30;
  BOOL v32;
  int v33;
  void *v34;
  icu::Format *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  icu::Format *v40;
  _BYTE v41[24];
  uint64_t v42;
  int v43;
  unsigned int v44;
  void (**v45)(icu::UnicodeString *__hidden);
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  _OWORD v50[8];
  int v51[2];
  uint64_t v52[58];
  __int128 v53;
  __int128 v54;
  UChar *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v56 = 0u;
    v59 = 0;
    v58 = 0u;
    v57 = 0u;
    v55 = (UChar *)off_1E2256B38;
    LOWORD(v56) = 2;
    Double = icu::Formattable::getDouble(a2, a5);
    v11 = icu::Formattable::getDouble((const icu::Formattable *)((char *)a2 + 112), a5);
    v12 = icu::Formattable::getDouble((const icu::Formattable *)((char *)a2 + 224), a5);
    v13 = *(unsigned int *)a5;
    if ((int)v13 > 0)
    {
LABEL_76:
      icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v55);
      return a4;
    }
    v14 = v12;
    if ((a3 & 0xFFFFFFFD) == 5)
    {
      icu::UnicodeString::operator=(&v55, (UChar **)(*(_QWORD *)(*((_QWORD *)this + 41) + 72) + 136));
      Double = uprv_trunc(Double);
    }
    else
    {
      if (a3 != 6)
      {
        if (a3 != 3)
        {
LABEL_69:
          v13 = 5;
          *a5 = U_INTERNAL_PROGRAM_ERROR;
          goto LABEL_76;
        }
        icu::UnicodeString::operator=(&v55, (UChar **)(*(_QWORD *)(*((_QWORD *)this + 41) + 72) + 8));
        Double = uprv_trunc(Double);
LABEL_10:
        v15 = *(const void **)(*((_QWORD *)this + 42) + 24);
        if (v15)
        {
          if (v16)
          {
            v17 = v16;
            v53 = 0u;
            v54 = 0u;
            memset(v52, 0, sizeof(v52));
            sub_18BCC1E68((uint64_t)v52);
            v54 = 0uLL;
            *((_QWORD *)&v53 + 1) = 0;
            v18 = icu::DecimalFormat::toNumberFormatter(v17, a5);
            if (v18)
            {
              v19 = v18;
              v42 = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)2);
              v43 = v20;
              icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::integerWidth(v50, v19, (uint64_t)&v42);
              icu::number::LocalizedNumberFormatter::operator=((uint64_t)v52, (uint64_t)v50);
              icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v50);
              v21 = *(const void **)(*((_QWORD *)this + 41) + 64);
              if (v21
              {
                *(_QWORD *)v51 = 0;
                memset(v50, 0, sizeof(v50));
                icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v50);
                if ((v56 & 0x8000u) == 0)
                  v23 = (unsigned __int16)v56 >> 5;
                else
                  v23 = DWORD1(v56);
                if (v23 >= 1)
                {
                  v24 = 0;
                  v25 = 0;
                  while (1)
                  {
                    v26 = (v56 & 0x8000u) == 0 ? (unsigned __int16)v56 >> 5 : DWORD1(v56);
                    if (v26 <= v24)
                      break;
                    if ((v56 & 2) != 0)
                      v27 = (char *)&v56 + 2;
                    else
                      v27 = (char *)v57;
                    v28 = *(unsigned __int16 *)&v27[2 * v24];
                    if (v28 > 0x6C)
                    {
                      if (v28 == 115)
                      {
                        if (!v25)
                        {
                          v49 = 0;
                          v47 = 0u;
                          v48 = 0u;
                          v46 = 0u;
                          v45 = off_1E2256B38;
                          v32 = 1;
                          v29 = v14;
                          LOWORD(v46) = 2;
                          goto LABEL_53;
                        }
                        goto LABEL_44;
                      }
                      if (v28 == 109)
                      {
                        v29 = v11;
LABEL_37:
                        if (!v25)
                        {
                          v49 = 0;
                          v47 = 0u;
                          v48 = 0u;
                          v46 = 0u;
                          v45 = off_1E2256B38;
                          LOWORD(v46) = 2;
                          v32 = a3 == 3 && v28 == 109;
LABEL_53:
                          v30 = v24 + 1;
                          if (v24 + 1 < v23
                            && (v26 <= v30 ? (v33 = 0xFFFF) : (v33 = *(unsigned __int16 *)&v27[2 * v30]),
                                v33 == v28))
                          {
                            if (v32)
                            {
                              icu::number::LocalizedNumberFormatter::formatDouble(v52, v29, a5, (uint64_t)v41);
                              icu::number::FormattedNumber::toString((icu::number::FormattedNumber *)v41, a5, (uint64_t)&v42);
                              icu::UnicodeString::operator=((icu::UnicodeString *)&v45, (icu::UnicodeString *)&v42);
                              icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v42);
                              icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v41);
                            }
                            else
                            {
                              (*(void (**)(icu::Format *, uint64_t))(*(_QWORD *)v40 + 224))(v40, 2);
                              icu::Formattable::Formattable((icu::Formattable *)&v42, v29);
                              icu::Format::format(v40, (const icu::Formattable *)&v42, (icu::UnicodeString *)&v45, a5);
                              icu::Formattable::~Formattable((icu::Formattable *)&v42);
                            }
                          }
                          else
                          {
                            if (v32)
                            {
                              icu::Formattable::Formattable((icu::Formattable *)&v42, v29);
                              v35 = v17;
                            }
                            else
                            {
                              (*(void (**)(icu::Format *, uint64_t))(*(_QWORD *)v40 + 224))(v40, 1);
                              icu::Formattable::Formattable((icu::Formattable *)&v42, v29);
                              v35 = v40;
                            }
                            icu::Format::format(v35, (const icu::Formattable *)&v42, (icu::UnicodeString *)&v45, a5);
                            icu::Formattable::~Formattable((icu::Formattable *)&v42);
                            LODWORD(v30) = v24;
                          }
                          icu::FormattedStringBuilder::insert((icu::FormattedStringBuilder *)v50, v51[1], (uint64_t)&v45, 0, 0, a5);
                          icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v45);
                          v25 = 0;
                          goto LABEL_65;
                        }
LABEL_44:
                        icu::FormattedStringBuilder::insertCodePoint(v50, v51[1], v28, 0, a5);
                        v25 = 1;
                        goto LABEL_66;
                      }
                      goto LABEL_33;
                    }
                    if (v28 != 39)
                    {
                      v29 = Double;
                      if (v28 == 72)
                        goto LABEL_37;
                      goto LABEL_33;
                    }
                    v30 = v24 + 1;
                    if (v24 + 1 < v23 && v26 > v30 && *(_WORD *)&v27[2 * v30] == 39)
                    {
                      icu::FormattedStringBuilder::insertCodePoint(v50, v51[1], 0x27u, 0, a5);
LABEL_65:
                      v24 = v30;
                      goto LABEL_66;
                    }
                    v25 = !v25;
LABEL_66:
                    if (++v24 >= v23)
                      goto LABEL_71;
                  }
                  v28 = 0xFFFF;
LABEL_33:
                  icu::FormattedStringBuilder::insertCodePoint(v50, v51[1], v28, 0, a5);
                  goto LABEL_66;
                }
LABEL_71:
                icu::FormattedStringBuilder::toTempUnicodeString((icu::FormattedStringBuilder *)v50, (uint64_t)&v42);
                if ((v43 & 0x8000u) == 0)
                  v37 = (unsigned __int16)v43 >> 5;
                else
                  v37 = v44;
                icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)&v42, 0, v37);
                icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v42);
                icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v50);
                (*(void (**)(icu::Format *))(*(_QWORD *)v40 + 8))(v40);
              }
              else
              {
                *a5 = U_INTERNAL_PROGRAM_ERROR;
              }
            }
            icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v52);
            goto LABEL_76;
          }
        }
        goto LABEL_69;
      }
      icu::UnicodeString::operator=(&v55, (UChar **)(*(_QWORD *)(*((_QWORD *)this + 41) + 72) + 72));
    }
    v11 = uprv_trunc(v11);
    goto LABEL_10;
  }
  return a4;
}

icu::UnicodeString *icu::MeasureFormat::formatMeasuresSlowTrack(icu::MeasureFormat *this, const icu::Measure *a2, int a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  const icu::Measure *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const icu::UnicodeString *v14;
  _WORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  const icu::NumberFormat **v19;
  const icu::NumberFormat *v20;
  icu::UnicodeString *v21;
  icu::UnicodeString *v24;
  int v25;
  _QWORD *v26;
  void (**v27)(icu::FieldPosition *__hidden);
  int v28;
  _BYTE v29[12];
  _QWORD v30[3];

  if (*(int *)a6 <= 0)
  {
    v8 = a2;
    v24 = a4;
    v30[2] = 0;
    v30[0] = off_1E225EF78;
    v30[1] = 0xFFFFFFFFLL;
    v10 = *((_DWORD *)a5 + 2);
    v27 = off_1E225EF78;
    v28 = v10;
    memset(v29, 0, sizeof(v29));
    v11 = a3;
    if (a3 < 0)
      v12 = -1;
    else
      v12 = ((uint64_t)a3 << 6) | 0x10;
    v13 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v12, (unint64_t)a2);
    if (v13)
    {
      *v13 = 64;
      v13[1] = v11;
      v14 = (const icu::UnicodeString *)(v13 + 2);
      if (a3)
      {
        v15 = v13 + 2;
        do
        {
          *(_QWORD *)v15 = off_1E2256B38;
          v15[4] = 2;
          v15 += 32;
        }
        while (v15 != (_WORD *)((char *)v14 + 64 * v11));
      }
      v26 = v13 + 2;
    }
    else
    {
      v14 = 0;
      v26 = 0;
      if (*(int *)a6 <= 0)
      {
        v14 = 0;
        *a6 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    if (a3 < 1)
    {
      v18 = -1;
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v18 = -1;
      do
      {
        if ((unint64_t)(a3 - 1) << 6 == v17)
          v19 = (const icu::NumberFormat **)(*((_QWORD *)this + 42) + 24);
        else
          v19 = (const icu::NumberFormat **)(*((_QWORD *)this + 41) + 64);
        v20 = *v19;
        v21 = (const icu::UnicodeString *)((char *)v14 + v17);
        if (v18 == -1)
        {
          icu::MeasureFormat::formatMeasure(this, v8, v20, v21, (icu::FieldPosition *)&v27, a6);
          if (*(int *)a6 > 0)
            goto LABEL_30;
          if (*(_QWORD *)v29)
            v18 = v16;
          else
            v18 = -1;
        }
        else
        {
          icu::MeasureFormat::formatMeasure(this, v8, v20, v21, (icu::FieldPosition *)v30, a6);
        }
        v17 += 64;
        v8 = (const icu::Measure *)((char *)v8 + 128);
        ++v16;
      }
      while ((unint64_t)a3 << 6 != v17);
    }
    v25 = 0;
    icu::ListFormatter::format(*((icu::ListFormatter **)this + 45), v14, a3, v24, v18, &v25, a6);
    if (*(int *)a6 <= 0 && v18 != -1 && v25 != -1)
      *(int32x2_t *)((char *)a5 + 12) = vadd_s32(*(int32x2_t *)v29, vdup_n_s32(v25));
LABEL_30:
    sub_18BBBADF4((uint64_t *)&v26);
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v27);
    icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v30);
    return v24;
  }
  return a4;
}

icu::UnicodeString *icu::MeasureFormat::formatMeasures(icu::ListFormatter **this, icu::MeasureUnit **a2, int a3, icu::UnicodeString *a4, icu::FieldPositionIterator *a5, UErrorCode *a6)
{
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int UAMeasureUnit;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t i;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  unsigned __int16 *v28;
  const icu::UnicodeString *v29;
  uint64_t v30;
  unsigned __int16 *v31;
  _BOOL4 v32;
  uint64_t v33;
  _QWORD *v34;
  icu::FieldPosition *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  icu::UnicodeString *v39;
  uint64_t v40;
  uint64_t v41;
  const icu::Measure *v42;
  icu::UnicodeString *v43;
  const icu::NumberFormat **v44;
  const icu::NumberFormat *v45;
  unsigned __int16 *v46;
  icu::MeasureUnit **v47;
  _DWORD *v48;
  unsigned int v49;
  int32_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int32_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  icu::UnicodeString *v69;
  _QWORD *v70;
  icu::MeasureUnit **v71;
  icu::UnicodeString *v72;
  UErrorCode v73[4];
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    v75 = 0;
    *(_OWORD *)v73 = 0u;
    v74 = 0u;
    icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v73, a5, a6);
    if (a3)
    {
      v12 = (a3 - 1);
      if (a3 == 1)
      {
        v13 = *((unsigned __int16 *)a4 + 4);
        v14 = (__int16)v13;
        v15 = v13 >> 5;
        if (v14 >= 0)
          v16 = v15;
        else
          v16 = *((_DWORD *)a4 + 3);
        UAMeasureUnit = icu::MeasureUnit::getUAMeasureUnit(a2[15]);
        *(_QWORD *)&v77 = 0;
        *(_QWORD *)&v76 = off_1E225EF78;
        *((_QWORD *)&v76 + 1) = 0x40000000;
        icu::MeasureFormat::formatMeasure((icu::MeasureFormat *)this, (const icu::Measure *)a2, *((const icu::NumberFormat **)this[42] + 3), a4, (icu::FieldPosition *)&v76, a6);
        v18 = *((unsigned __int16 *)a4 + 4);
        v19 = (__int16)v18;
        v20 = v18 >> 5;
        if (v19 >= 0)
          v21 = v20;
        else
          v21 = *((_DWORD *)a4 + 3);
        icu::FieldPositionIteratorHandler::addAttribute(v73, UAMeasureUnit, v16, v21);
        icu::FieldPositionIteratorHandler::addAttribute(v73, UAMeasureUnit | 0x40000000, SHIDWORD(v76), v77);
        icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v76);
      }
      else
      {
        if (*((_DWORD *)this + 88) == 3)
        {
          v22 = 0;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v76 = 0u;
          do
          {
            icu::Formattable::Formattable((icu::Formattable *)((char *)&v76 + v22));
            v22 += 112;
          }
          while (v22 != 336);
          v23 = sub_18BCF0B54((uint64_t)a2, a3, (double *)&v76, (int *)a6);
          if (v23 >= 1)
            icu::MeasureFormat::formatNumeric((icu::MeasureFormat *)this, (const icu::Formattable *)&v76, v23, a4, a6);
          for (i = 224; i != -112; i -= 112)
            icu::Formattable::~Formattable((icu::Formattable *)((char *)&v76 + i));
          if (v23 > 0)
            goto LABEL_73;
        }
        if (a3 < 0)
          v25 = -1;
        else
          v25 = ((uint64_t)a3 << 6) | 0x10;
        v26 = (unsigned __int16 *)icu::UMemory::operator new[]((icu::UMemory *)v25, v11);
        if (v26)
        {
          v28 = v26;
          *(_QWORD *)v26 = 64;
          *((_QWORD *)v26 + 1) = a3;
          v29 = (const icu::UnicodeString *)(v26 + 8);
          v30 = 8;
          do
          {
            v31 = &v26[v30];
            *(_QWORD *)v31 = off_1E2256B38;
            v31[4] = 2;
            v30 += 32;
          }
          while (v31 + 32 != &v26[32 * (uint64_t)a3 + 8]);
          v32 = !is_mul_ok(a3, 0x18uLL);
          if ((unint64_t)(24 * a3) >= 0xFFFFFFFFFFFFFFF0)
            v32 = 1;
          if (v32)
            v33 = -1;
          else
            v33 = 24 * a3 + 16;
          v34 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v33, v27);
          if (v34)
          {
            *v34 = 24;
            v34[1] = a3;
            v35 = (icu::FieldPosition *)(v34 + 2);
            v36 = 2;
            v37 = v34;
            do
            {
              v38 = &v34[v36];
              *v38 = off_1E225EF78;
              v38[1] = 0xFFFFFFFFLL;
              *((_DWORD *)v38 + 4) = 0;
              v36 += 3;
            }
            while (v38 + 3 != &v34[3 * a3 + 2]);
            if (a3 <= 0)
            {
              icu::ListFormatter::format(this[45], v29, a3, a4, a6);
            }
            else
            {
              v70 = v34;
              v71 = a2;
              v72 = a4;
              v39 = v29;
              v40 = a3;
              v41 = a3;
              v42 = (const icu::Measure *)a2;
              v69 = v39;
              v43 = v39;
              do
              {
                if (v12)
                  v44 = (const icu::NumberFormat **)((char *)this[41] + 64);
                else
                  v44 = (const icu::NumberFormat **)((char *)this[42] + 24);
                v45 = *v44;
                *((_DWORD *)v35 + 2) = 0x40000000;
                icu::MeasureFormat::formatMeasure((icu::MeasureFormat *)this, v42, v45, v43, v35, a6);
                --v12;
                v43 = (icu::UnicodeString *)((char *)v43 + 64);
                v42 = (const icu::Measure *)((char *)v42 + 128);
                v35 = (icu::FieldPosition *)((char *)v35 + 24);
                --v41;
              }
              while (v41);
              a4 = v72;
              icu::ListFormatter::format(this[45], v69, a3, v72, a6);
              v46 = v28 + 12;
              v37 = v70;
              v47 = v71 + 15;
              v48 = v70 + 4;
              do
              {
                v49 = *v46;
                if ((v49 & 0x8000u) == 0)
                  v50 = v49 >> 5;
                else
                  v50 = *((_DWORD *)v46 + 1);
                if ((v49 & 1) == 0 && v50 >= 1)
                {
                  v51 = *((unsigned __int16 *)v72 + 4);
                  v52 = (__int16)v51;
                  v53 = v51 >> 5;
                  v54 = v52 >= 0 ? v53 : *((_DWORD *)v72 + 3);
                  v55 = (v49 & 2) != 0 ? (uint64_t)(v46 + 1) : *((_QWORD *)v46 + 2);
                  v56 = icu::UnicodeString::indexOf((uint64_t)v72, v55, 0, v50, 0, v54);
                  if ((v56 & 0x80000000) == 0)
                  {
                    v57 = v56;
                    v58 = icu::MeasureUnit::getUAMeasureUnit(*v47);
                    v59 = *v46;
                    v60 = (v59 & 0x8000) != 0 ? *((_DWORD *)v46 + 1) : v59 >> 5;
                    icu::FieldPositionIteratorHandler::addAttribute(v73, v58, v57, v60 + v57);
                    v61 = *(v48 - 1);
                    if ((v61 & 0x80000000) == 0 && *v48 > v61)
                      icu::FieldPositionIteratorHandler::addAttribute(v73, v58 | 0x40000000, v61 + v57, *v48 + v57);
                  }
                }
                v46 += 32;
                v47 += 16;
                v48 += 6;
                --v40;
              }
              while (v40);
            }
            v64 = (void *)*((_QWORD *)v28 + 1);
            if (v64)
            {
              v65 = (_QWORD)v64 << 6;
              do
              {
                icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)((char *)v28 + v65 - 48));
                v65 -= 64;
              }
              while (v65);
            }
            icu::UMemory::operator delete[](v28);
            v66 = v37[1];
            if (v66)
            {
              v67 = 3 * v66;
              do
              {
                icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v37[v67 - 1]);
                v67 -= 3;
              }
              while (v67 * 8);
            }
            icu::UMemory::operator delete[](v37);
            goto LABEL_73;
          }
          v62 = (void *)*((_QWORD *)v28 + 1);
          if (v62)
          {
            v63 = (_QWORD)v62 << 6;
            do
            {
              icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)((char *)v28 + v63 - 48));
              v63 -= 64;
            }
            while (v63);
          }
          icu::UMemory::operator delete[](v28);
        }
        *a6 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
LABEL_73:
    icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v73);
  }
  return a4;
}

void icu::MeasureFormat::getUnitDisplayName(icu::MeasureFormat *this@<X0>, const icu::MeasureUnit *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  _BYTE v10[224];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = 1;
  icu::Format::getLocale((uint64_t)this, 1, (int *)a3, (icu::Locale *)v10);
  v9 = *((int *)this + 88);
  if (v9 <= 3)
    v8 = dword_18BE27BB0[v9];
  sub_18BD1B6E0((uint64_t)v10, a2, v8, (int *)a3, a4);
  icu::Locale::~Locale((icu::Locale *)v10);
}

uint64_t icu::MeasureFormat::getLocale@<X0>(icu::MeasureFormat *this@<X0>, UErrorCode *a2@<X1>, icu::Locale *a3@<X8>)
{
  return icu::Format::getLocale((uint64_t)this, 1, (int *)a2, a3);
}

void sub_18BCF1AD0(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  uint64_t Instance;
  icu::SharedObject **v7;
  uint64_t (**v8)();
  int v9;
  char v10;
  _QWORD v11[29];

  v11[28] = *MEMORY[0x1E0C80C00];
  Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    v7 = (icu::SharedObject **)Instance;
    v9 = 0;
    v10 = 0;
    v8 = off_1E2260AA8;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18BC8C230(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    v8 = off_1E2260AA8;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

icu::SharedObject *icu::MeasureFormat::adoptNumberFormat(icu::SharedObject *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v4;
  icu::SharedObject *v6;

  v4 = (uint64_t *)*a3;
  if ((int)v4 > 0)
  {
    if (!a2)
      return result;
    return (icu::SharedObject *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  v6 = result;
  result = (icu::SharedObject *)icu::UMemory::operator new(v4, (icu::UMemory *)0x20, a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2263B08;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = a2;
    return sub_18BC4A244(result, (icu::SharedObject **)v6 + 42);
  }
  else
  {
    *a3 = 7;
    if (a2)
      return (icu::SharedObject *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

BOOL icu::MeasureFormat::setMeasureFormatLocale(icu::MeasureFormat *this, const char **a2, UErrorCode *a3)
{
  BOOL v6;
  _BYTE v8[224];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 > 0)
    return 0;
  icu::Format::getLocale((uint64_t)this, 1, (int *)a3, (icu::Locale *)v8);
  v6 = icu::Locale::operator==((uint64_t)a2, (uint64_t)v8);
  icu::Locale::~Locale((icu::Locale *)v8);
  if (v6)
    return 0;
  icu::MeasureFormat::initMeasureFormat((uint64_t)this, a2, *((_DWORD *)this + 88), 0, a3);
  return *a3 < U_ILLEGAL_ARGUMENT_ERROR;
}

uint64_t icu::MeasureFormat::getWidth(icu::MeasureFormat *this)
{
  return *((unsigned int *)this + 88);
}

uint64_t icu::MeasureFormat::getCurrencyFormatInternal(icu::MeasureFormat *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 41) + 56);
}

uint64_t icu::MeasureFormat::getPluralRules(icu::MeasureFormat *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 43) + 24);
}

icu::UnicodeString *icu::MeasureFormat::getUnitName(icu::MeasureFormat *this, const icu::MeasureUnit *a2, icu::UnicodeString *a3)
{
  void *v4;
  UErrorCode v6;
  _BYTE v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = U_ZERO_ERROR;
  icu::MeasureFormat::getUnitDisplayName(this, a2, &v6, (uint64_t)v7);
  icu::UnicodeString::operator=(a3, (icu::UnicodeString *)v7);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v7);
  return a3;
}

icu::UnicodeString *icu::MeasureFormat::getMultipleUnitNames(icu::MeasureFormat *this, const icu::MeasureUnit **a2, int a3, int a4, icu::UnicodeString *a5)
{
  const icu::MeasureUnit **v6;
  __int16 v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  const icu::UnicodeString *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  icu::UnicodeString *v18;
  const icu::MeasureUnit *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  UErrorCode v24;

  v6 = a2;
  if (a3 == 1)
  {
    icu::MeasureFormat::getUnitName(this, *a2, a5);
  }
  else if (a3)
  {
    if (a3 < 0)
      v11 = -1;
    else
      v11 = ((uint64_t)a3 << 6) | 0x10;
    v12 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v11, (unint64_t)a2);
    if (!v12)
      goto LABEL_23;
    v13 = v12;
    *v12 = 64;
    v12[1] = a3;
    v14 = (const icu::UnicodeString *)(v12 + 2);
    v15 = 2;
    do
    {
      v16 = &v12[v15];
      *v16 = off_1E2256B38;
      *((_WORD *)v16 + 4) = 2;
      v15 += 8;
    }
    while (v16 + 8 != &v12[8 * (uint64_t)a3 + 2]);
    if (a3 >= 1)
    {
      v17 = a3;
      v18 = (icu::UnicodeString *)(v12 + 2);
      do
      {
        v19 = *v6++;
        icu::MeasureFormat::getUnitName(this, v19, v18);
        v18 = (icu::UnicodeString *)((char *)v18 + 64);
        --v17;
      }
      while (v17);
    }
    v24 = U_ZERO_ERROR;
    v20 = 360;
    if (!a4)
      v20 = 368;
    icu::ListFormatter::format(*(icu::ListFormatter **)((char *)this + v20), v14, a3, a5, &v24);
    v21 = (void *)v13[1];
    if (v21)
    {
      v22 = (_QWORD)v21 << 6;
      do
      {
        icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)((char *)v13 + v22 - 48));
        v22 -= 64;
      }
      while (v22);
    }
    icu::UMemory::operator delete[](v13);
    if (v24 >= U_ILLEGAL_ARGUMENT_ERROR)
LABEL_23:
      icu::UnicodeString::setToBogus(a5);
  }
  else
  {
    if ((*((_WORD *)a5 + 4) & 1) != 0)
      v9 = 2;
    else
      v9 = *((_WORD *)a5 + 4) & 0x1F;
    *((_WORD *)a5 + 4) = v9;
  }
  return a5;
}

_QWORD *icu::MeasureFormat::createCurrencyFormat(const char **this, UErrorCode *a2, UErrorCode *a3)
{
  uint64_t *v3;
  _QWORD *result;
  uint64_t *v7;

  v3 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v3 > 0)
    return 0;
  v7 = icu::UMemory::operator new(v3, (icu::UMemory *)0x178, (unint64_t)a2);
  if (v7)
    return sub_18BCAE1C8((uint64_t)v7, this, a2);
  if (*(int *)a2 > 0)
    return 0;
  result = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

_QWORD *icu::MeasureFormat::createCurrencyFormat(icu::MeasureFormat *this, UErrorCode *a2)
{
  uint64_t *Default;
  UErrorCode *v5;

  if (*(int *)this > 0)
    return 0;
  Default = icu::Locale::getDefault(this);
  return icu::MeasureFormat::createCurrencyFormat((const char **)Default, (UErrorCode *)this, v5);
}

void sub_18BCF1FD4(uint64_t a1@<X0>, const char *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  icu::CharString *v8;
  icu::CharString *v9;
  uint64_t v10;
  _QWORD *v11;
  const UChar *String;
  uint64_t v13;
  unsigned __int16 v14;
  int v15;
  unsigned int v16;
  _WORD *Buffer;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  const UChar *v25;
  int v26;
  void *v27[9];

  v27[8] = *(void **)MEMORY[0x1E0C80C00];
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)(a4 + 56) = 0;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_QWORD *)a4 = off_1E2256B38;
  *(_WORD *)(a4 + 8) = 2;
  if (*(int *)a3 <= 0)
  {
    memset(&v27[1], 0, 56);
    v27[0] = (char *)&v27[1] + 5;
    LODWORD(v27[1]) = 40;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v23, "durationUnits");
    v8 = icu::CharString::append((icu::CharString *)v27, v23, v24, a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v21, "/");
    v9 = icu::CharString::append(v8, v21, v22, a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v19, a2);
    icu::CharString::append(v9, v19, v20, a3);
    v10 = ures_getByKeyWithFallback(a1, (char *)v27[0], 0, a3);
    v11 = (_QWORD *)v10;
    if (*(int *)a3 <= 0)
    {
      v26 = 0;
      String = ures_getString(v10, &v26, (int *)a3);
      if (*(int *)a3 < 1)
      {
        v25 = String;
        icu::UnicodeString::setTo((icu::UnicodeString *)a4, 1, &v25, v26);
        v14 = *(_WORD *)(a4 + 8);
        v15 = (__int16)v14;
        v16 = v14 >> 5;
        if (v15 >= 0)
          v13 = v16;
        else
          v13 = *(unsigned int *)(a4 + 12);
        Buffer = (_WORD *)icu::UnicodeString::getBuffer((icu::UnicodeString *)a4, v13);
        if ((int)v13 >= 1)
        {
          v18 = v13;
          do
          {
            if (*Buffer == 104)
              *Buffer = 72;
            ++Buffer;
            --v18;
          }
          while (v18);
        }
      }
      else
      {
        icu::UnicodeString::getBuffer((icu::UnicodeString *)a4, 0);
        LODWORD(v13) = 0;
      }
      icu::UnicodeString::releaseBuffer(a4, v13);
    }
    if (v11)
      ures_close(v11);
    if (BYTE4(v27[1]))
      uprv_free(v27[0]);
  }
}

BOOL sub_18BCF2200(icu::MeasureUnit *a1, const char *a2)
{
  const char *Type;
  const char *Subtype;

  Type = icu::MeasureUnit::getType(a1);
  if (strcmp(Type, "duration"))
    return 0;
  Subtype = icu::MeasureUnit::getSubtype(a1);
  return strcmp(Subtype, a2) == 0;
}

void sub_18BCF2254(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2260AA8;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18BCF2284(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2260AA8;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BCF22B8(uint64_t a1)
{
  int v2;
  unsigned int v3;

  v2 = strlen((const char *)((unint64_t)"N3icu22MeasureFormatCacheDataE" & 0x7FFFFFFFFFFFFFFFLL));
  v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu22MeasureFormatCacheDataE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18BCF2310@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *v4 = (uint64_t)off_1E2260AA8;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18BCF2364(uint64_t a1, char *__dst, int a3)
{
  char *result;

  result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18BCF239C(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = sub_18BC8C418(a1, a2);
  if (result)
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return result;
}

void *icu::MeasureUnit::getStaticClassID(icu::MeasureUnit *this)
{
  return &unk_1EE009BC1;
}

void *icu::MeasureUnit::getDynamicClassID(icu::MeasureUnit *this)
{
  return &unk_1EE009BC1;
}

uint64_t icu::MeasureUnit::createGForce(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 0;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

uint64_t icu::MeasureUnit::create(icu::MeasureUnit *this, unint64_t a2, int *a3, UErrorCode *a4)
{
  uint64_t result;
  __int16 v6;
  char v7;

  if (*a3 > 0)
    return 0;
  v6 = a2;
  v7 = (char)this;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = v6;
    *(_BYTE *)(result + 18) = v7;
  }
  else
  {
    *a3 = 7;
  }
  return result;
}

void icu::MeasureUnit::getGForce(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 0;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t this, char a2, __int16 a3)
{
  *(_QWORD *)this = off_1E2260B28;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 16) = a3;
  *(_BYTE *)(this + 18) = a2;
  return this;
}

{
  *(_QWORD *)this = off_1E2260B28;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 16) = a3;
  *(_BYTE *)(this + 18) = a2;
  return this;
}

uint64_t icu::MeasureUnit::createMeterPerSecondSquared(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 0;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMeterPerSecondSquared(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 0;
}

uint64_t icu::MeasureUnit::createArcMinute(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getArcMinute(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createArcSecond(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getArcSecond(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createDegree(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDegree(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createRadian(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getRadian(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createRevolutionAngle(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getRevolutionAngle(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 1;
}

uint64_t icu::MeasureUnit::createAcre(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getAcre(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createDunam(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDunam(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createHectare(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getHectare(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareCentimeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSquareCentimeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareFoot(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSquareFoot(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareInch(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSquareInch(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareKilometer(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSquareKilometer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareMeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSquareMeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareMile(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSquareMile(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createSquareYard(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 9;
    *(_BYTE *)(result + 18) = 2;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSquareYard(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(_BYTE *)(a1 + 18) = 2;
}

uint64_t icu::MeasureUnit::createItem(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getItem(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createKarat(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKarat(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createMilligramOfglucosePerDeciliter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilligramOfglucosePerDeciliter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createMilligramPerDeciliter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilligramPerDeciliter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createMillimolePerLiter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMillimolePerLiter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createMole(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMole(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createPercent(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPercent(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createPermille(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPermille(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createPartPerMillion(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPartPerMillion(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createPermyriad(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 9;
    *(_BYTE *)(result + 18) = 3;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPermyriad(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(_BYTE *)(a1 + 18) = 3;
}

uint64_t icu::MeasureUnit::createLiterPer100Kilometers(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 4;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getLiterPer100Kilometers(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 4;
}

uint64_t icu::MeasureUnit::createLiterPerKilometer(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 4;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getLiterPerKilometer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 4;
}

uint64_t icu::MeasureUnit::createMilePerGallon(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 4;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilePerGallon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 4;
}

uint64_t icu::MeasureUnit::createMilePerGallonImperial(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 4;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilePerGallonImperial(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 4;
}

uint64_t icu::MeasureUnit::createBit(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getBit(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createByte(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getByte(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createGigabit(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGigabit(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createGigabyte(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGigabyte(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createKilobit(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilobit(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createKilobyte(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilobyte(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createMegabit(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMegabit(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createMegabyte(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMegabyte(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createPetabyte(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPetabyte(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createTerabit(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 9;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getTerabit(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createTerabyte(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 10;
    *(_BYTE *)(result + 18) = 6;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getTerabyte(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(_BYTE *)(a1 + 18) = 6;
}

uint64_t icu::MeasureUnit::createCentury(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCentury(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createDay(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDay(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createDayPerson(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDayPerson(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createDecade(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDecade(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createHour(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getHour(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMicrosecond(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMicrosecond(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMillisecond(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMillisecond(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMinute(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMinute(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMonth(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMonth(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createMonthPerson(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 9;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMonthPerson(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createNanosecond(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 10;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getNanosecond(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createQuarter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 11;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getQuarter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 11;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createSecond(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 12;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSecond(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 12;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createWeek(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 13;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getWeek(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 13;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createWeekPerson(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 14;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getWeekPerson(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createYear(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 15;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getYear(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 15;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createYearPerson(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 16;
    *(_BYTE *)(result + 18) = 7;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getYearPerson(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 16;
  *(_BYTE *)(a1 + 18) = 7;
}

uint64_t icu::MeasureUnit::createAmpere(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 8;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getAmpere(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 8;
}

uint64_t icu::MeasureUnit::createMilliampere(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 8;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilliampere(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 8;
}

uint64_t icu::MeasureUnit::createOhm(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 8;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getOhm(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 8;
}

uint64_t icu::MeasureUnit::createVolt(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 8;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getVolt(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 8;
}

uint64_t icu::MeasureUnit::createBritishThermalUnit(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getBritishThermalUnit(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createCalorie(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCalorie(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createElectronvolt(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getElectronvolt(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createFoodcalorie(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getFoodcalorie(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createJoule(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getJoule(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createKilocalorie(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilocalorie(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createKilojoule(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilojoule(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createKilowattHour(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilowattHour(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createThermUs(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 9;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getThermUs(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 9;
}

uint64_t icu::MeasureUnit::createKilowattHourPer100Kilometer(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 10;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilowattHourPer100Kilometer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 10;
}

uint64_t icu::MeasureUnit::createNewton(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 10;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getNewton(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 10;
}

uint64_t icu::MeasureUnit::createPoundForce(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 10;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPoundForce(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 10;
}

uint64_t icu::MeasureUnit::createGigahertz(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 11;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGigahertz(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 11;
}

uint64_t icu::MeasureUnit::createHertz(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 11;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getHertz(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 11;
}

uint64_t icu::MeasureUnit::createKilohertz(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 11;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilohertz(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 11;
}

uint64_t icu::MeasureUnit::createMegahertz(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 11;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMegahertz(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 11;
}

uint64_t icu::MeasureUnit::createDot(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 12;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDot(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createDotPerCentimeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 12;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDotPerCentimeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createDotPerInch(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 12;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDotPerInch(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createEm(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 12;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getEm(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createMegapixel(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 12;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMegapixel(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createPixel(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 12;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPixel(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createPixelPerCentimeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 12;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPixelPerCentimeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createPixelPerInch(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 12;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPixelPerInch(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 12;
}

uint64_t icu::MeasureUnit::createAstronomicalUnit(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getAstronomicalUnit(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createCentimeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCentimeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createDecimeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDecimeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createEarthRadius(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getEarthRadius(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createFathom(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getFathom(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createFoot(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getFoot(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createFurlong(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getFurlong(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createInch(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getInch(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createKilometer(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilometer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createLightYear(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 9;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getLightYear(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 10;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMicrometer(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 11;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMicrometer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 11;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMile(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 12;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMile(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 12;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMileScandinavian(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 13;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMileScandinavian(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 13;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createMillimeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 14;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMillimeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createNanometer(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 15;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getNanometer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 15;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createNauticalMile(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 16;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getNauticalMile(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 16;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createParsec(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 17;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getParsec(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 17;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createPicometer(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 18;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPicometer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 18;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createPoint(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 19;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPoint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 19;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createSolarRadius(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 20;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSolarRadius(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 20;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createYard(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 21;
    *(_BYTE *)(result + 18) = 13;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getYard(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 21;
  *(_BYTE *)(a1 + 18) = 13;
}

uint64_t icu::MeasureUnit::createCandela(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 14;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCandela(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 14;
}

uint64_t icu::MeasureUnit::createLumen(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 14;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getLumen(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 14;
}

uint64_t icu::MeasureUnit::createLux(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 14;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getLux(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 14;
}

uint64_t icu::MeasureUnit::createSolarLuminosity(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 14;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSolarLuminosity(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 14;
}

uint64_t icu::MeasureUnit::createCarat(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCarat(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createDalton(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDalton(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createEarthMass(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getEarthMass(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createGrain(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGrain(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createGram(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGram(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createKilogram(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilogram(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createMetricTon(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 14;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMetricTon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createMicrogram(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMicrogram(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createMilligram(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilligram(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createOunce(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getOunce(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createOunceTroy(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 9;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getOunceTroy(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createPound(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 10;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPound(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createSolarMass(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 11;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getSolarMass(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 11;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createStone(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 12;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getStone(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 12;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createTon(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 13;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getTon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 13;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createTonne(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 14;
    *(_BYTE *)(result + 18) = 15;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getTonne(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(_BYTE *)(a1 + 18) = 15;
}

uint64_t icu::MeasureUnit::createGigawatt(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 17;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGigawatt(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createHorsepower(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 17;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getHorsepower(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createKilowatt(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 17;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilowatt(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createMegawatt(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 17;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMegawatt(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createMilliwatt(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 17;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilliwatt(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createWatt(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 17;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getWatt(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 17;
}

uint64_t icu::MeasureUnit::createAtmosphere(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getAtmosphere(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createBar(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getBar(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createGasolineEnergyDensity(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGasolineEnergyDensity(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createHectopascal(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getHectopascal(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createInchHg(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getInchHg(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createKilopascal(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilopascal(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createMegapascal(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMegapascal(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createMillibar(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMillibar(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createMillimeterOfMercury(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMillimeterOfMercury(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createPascal(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 9;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPascal(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createPoundPerSquareInch(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 10;
    *(_BYTE *)(result + 18) = 18;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPoundPerSquareInch(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(_BYTE *)(a1 + 18) = 18;
}

uint64_t icu::MeasureUnit::createBeaufort(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 19;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getBeaufort(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createKilometerPerHour(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 19;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKilometerPerHour(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createKnot(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 19;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKnot(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createMeterPerSecond(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 19;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMeterPerSecond(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createMilePerHour(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 19;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilePerHour(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 19;
}

uint64_t icu::MeasureUnit::createCelsius(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 20;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCelsius(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 20;
}

uint64_t icu::MeasureUnit::createFahrenheit(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 20;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getFahrenheit(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 20;
}

uint64_t icu::MeasureUnit::createGenericTemperature(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 20;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGenericTemperature(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 20;
}

uint64_t icu::MeasureUnit::createKelvin(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 20;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getKelvin(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 20;
}

uint64_t icu::MeasureUnit::createNewtonMeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 21;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getNewtonMeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 21;
}

uint64_t icu::MeasureUnit::createPoundFoot(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 21;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPoundFoot(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 21;
}

uint64_t icu::MeasureUnit::createAcreFoot(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getAcreFoot(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createBarrel(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 1;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getBarrel(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createBushel(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 2;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getBushel(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCentiliter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 3;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCentiliter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 3;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicCentimeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 4;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCubicCentimeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 4;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicFoot(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 5;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCubicFoot(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 5;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicInch(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 6;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCubicInch(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 6;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicKilometer(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 7;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCubicKilometer(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 7;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicMeter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 8;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCubicMeter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 8;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicMile(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 9;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCubicMile(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 9;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCubicYard(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 10;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCubicYard(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 10;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCup(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 11;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCup(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 11;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createCupMetric(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 12;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getCupMetric(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 12;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDeciliter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 13;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDeciliter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 13;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDessertSpoon(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 14;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDessertSpoon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 14;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDessertSpoonImperial(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 15;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDessertSpoonImperial(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 15;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDram(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 16;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDram(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 16;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createDrop(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 17;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getDrop(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 17;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createFluidOunce(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 18;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getFluidOunce(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 18;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createFluidOunceImperial(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 19;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getFluidOunceImperial(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 19;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createGallon(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 20;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGallon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 20;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createGallonImperial(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 21;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getGallonImperial(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 21;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createHectoliter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 22;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getHectoliter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 22;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createJigger(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 23;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getJigger(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 23;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createLiter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 24;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getLiter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 24;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createMegaliter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 25;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMegaliter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 25;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createMilliliter(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 26;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getMilliliter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 26;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createPinch(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 27;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPinch(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 27;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createPint(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 28;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 28;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createPintMetric(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 29;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getPintMetric(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 29;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createQuart(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 30;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getQuart(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 30;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createQuartImperial(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 31;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getQuartImperial(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 31;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createTablespoon(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 32;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getTablespoon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 32;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::createTeaspoon(icu::MeasureUnit *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)this > 0)
    return 0;
  result = icu::UMemory::operator new((icu::UMemory *)0x18, (unint64_t)a2);
  if (result)
  {
    *(_QWORD *)result = off_1E2260B28;
    *(_QWORD *)(result + 8) = 0;
    *(_WORD *)(result + 16) = 33;
    *(_BYTE *)(result + 18) = 22;
  }
  else
  {
    *(_DWORD *)this = 7;
  }
  return result;
}

void icu::MeasureUnit::getTeaspoon(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 33;
  *(_BYTE *)(a1 + 18) = 22;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t this)
{
  *(_QWORD *)this = off_1E2260B28;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 16) = 0;
  *(_BYTE *)(this + 18) = 16;
  return this;
}

{
  *(_QWORD *)this = off_1E2260B28;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 16) = 0;
  *(_BYTE *)(this + 18) = 16;
  return this;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t this, unint64_t a2)
{
  *(_QWORD *)this = off_1E2260B28;
  *(_QWORD *)(this + 8) = 0;
  return icu::MeasureUnit::operator=(this, a2);
}

{
  *(_QWORD *)this = off_1E2260B28;
  *(_QWORD *)(this + 8) = 0;
  return icu::MeasureUnit::operator=(this, a2);
}

uint64_t icu::MeasureUnit::operator=(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD v8[2];
  __int16 v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 108))
        uprv_free(*(void **)(v4 + 96));
      sub_18BC3ED98(v4 + 8);
      icu::UMemory::operator delete((void *)v4);
    }
    if (*(_QWORD *)(a2 + 8))
    {
      v11 = qword_1E2246C90;
      v12 = 0;
      v5 = icu::UMemory::operator new(qword_1E2246C90, (icu::UMemory *)0xA0, a2);
      if (v5)
      {
        v6 = v5;
        icu::MeasureUnitImpl::copy(*(icu::MeasureUnitImpl **)(a2 + 8), (UErrorCode *)&v12, (uint64_t)v5);
        *(_QWORD *)(a1 + 8) = v6;
        if ((int)v12 <= 0)
        {
          icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v11);
LABEL_11:
          *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
          *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
          return a1;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 8) = 0;
      }
      v8[0] = off_1E2260B28;
      v8[1] = 0;
      v9 = 0;
      v10 = 16;
      icu::MeasureUnit::operator=(a1, (uint64_t)v8);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v8);
      icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v11);
      return a1;
    }
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_11;
  }
  return a1;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2260B28;
  *(_QWORD *)(result + 8) = v2;
  *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(result + 18) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2260B28;
  *(_QWORD *)(result + 8) = v2;
  *(_WORD *)(result + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(result + 18) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t icu::MeasureUnit::MeasureUnit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)a1 = off_1E2260B28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  *(_BYTE *)(a1 + 18) = -1;
  v4 = a2 + 96;
  if (!icu::MeasureUnit::findBySubType(*(const char **)(a2 + 96), *(_DWORD *)(a2 + 152), (icu::MeasureUnit *)a1))
  {
    v7 = icu::UMemory::operator new(v6, (icu::UMemory *)0xA0, v5);
    v8 = v7;
    if (v7)
    {
      *(_DWORD *)v7 = *(_DWORD *)a2;
      sub_18BCF9CDC((uint64_t)(v7 + 1), a2 + 8);
      icu::CharString::CharString(v8 + 12, v4);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  return a1;
}

BOOL icu::MeasureUnit::findBySubType(const char *a1, int a2, icu::MeasureUnit *a3)
{
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v13;
  uint64_t v14;

  v5 = 0;
  v6 = 1;
  while (v5 == 5)
  {
    v7 = 6;
LABEL_7:
    v6 = v5 < 0x16;
    v5 = v7;
    if (v7 == 23)
      return v6;
  }
  v8 = dword_18BE27D2C[v5];
  v7 = v5 + 1;
  v9 = dword_18BE27D2C[v5 + 1];
  v10 = sub_18BCF8F70((uint64_t)off_1E2260C08, v8, v9, (uint64_t)a1, a2);
  if (v10 < 0)
  {
    if (strcmp(a1, "hour-kilowatt"))
      goto LABEL_7;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v13, "kilowatt-hour");
    v10 = sub_18BCF8F70((uint64_t)off_1E2260C08, v8, v9, v13, v14);
    if (v10 < 0)
      goto LABEL_7;
  }
  icu::MeasureUnit::setTo(a3, v5, v10 - v8);
  return v6;
}

void *icu::MeasureUnitImpl::copy@<X0>(icu::MeasureUnitImpl *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  void *result;
  uint64_t v7;
  const void **v8;

  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 16) = a3 + 32;
  *(_DWORD *)(a3 + 24) = 8;
  *(_QWORD *)(a3 + 96) = a3 + 109;
  *(_DWORD *)(a3 + 104) = 40;
  *(_DWORD *)(a3 + 152) = 0;
  *(_DWORD *)a3 = *(_DWORD *)this;
  result = icu::CharString::append((icu::CharString *)(a3 + 96), *((const char **)this + 12), *((_DWORD *)this + 38), a2);
  if (*((int *)this + 2) >= 1)
  {
    v7 = 0;
    v8 = (const void **)(a3 + 8);
    while (1)
    {
      result = sub_18BCF9DBC(v8, *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v7));
      if (!result)
        break;
      if (++v7 >= *((int *)this + 2))
        return result;
    }
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

uint64_t icu::MeasureUnit::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      if (*(_BYTE *)(v4 + 108))
        uprv_free(*(void **)(v4 + 96));
      sub_18BC3ED98(v4 + 8);
      icu::UMemory::operator delete((void *)v4);
    }
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  }
  return a1;
}

uint64_t *icu::MeasureUnit::clone@<X0>(icu::MeasureUnit *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, a2);
  if (result)
  {
    *result = (uint64_t)off_1E2260B28;
    result[1] = 0;
    return (uint64_t *)icu::MeasureUnit::operator=((uint64_t)result, (unint64_t)this);
  }
  return result;
}

void icu::MeasureUnit::~MeasureUnit(icu::MeasureUnit *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2260B28;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 108))
      uprv_free(*(void **)(v2 + 96));
    sub_18BC3ED98(v2 + 8);
    icu::UMemory::operator delete((void *)v2);
    *((_QWORD *)this + 1) = 0;
  }
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::MeasureUnit::~MeasureUnit(this);
  icu::UMemory::operator delete(v1);
}

const char *icu::MeasureUnit::getType(icu::MeasureUnit *this)
{
  uint64_t v1;

  v1 = *((char *)this + 18);
  if (v1 == -1)
    return "";
  else
    return off_1E2260B50[v1];
}

const char *icu::MeasureUnit::getSubtype(icu::MeasureUnit *this)
{
  uint64_t v1;
  uint64_t v2;
  char **v3;
  unint64_t v5;

  v1 = *((unsigned __int8 *)this + 18);
  if (v1 == 255)
    return "";
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (char **)(v2 + 96);
  }
  else
  {
    if ((v1 & 0x80) != 0 || *((__int16 *)this + 8) < 0)
      v5 = -1;
    else
      v5 = dword_18BE27D2C[v1] + (unint64_t)*((unsigned __int16 *)this + 8);
    v3 = &off_1E2260C08[v5];
  }
  return *v3;
}

char *icu::MeasureUnit::getIdentifier(icu::MeasureUnit *this)
{
  uint64_t v1;
  char **v2;
  unint64_t v3;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = (char **)(v1 + 96);
  }
  else
  {
    if (*((char *)this + 18) < 0 || *((__int16 *)this + 8) < 0)
      v3 = -1;
    else
      v3 = dword_18BE27D2C[*((unsigned __int8 *)this + 18)] + (unint64_t)*((unsigned __int16 *)this + 8);
    v2 = &off_1E2260C08[v3];
  }
  return *v2;
}

uint64_t icu::MeasureUnit::getOffset(icu::MeasureUnit *this)
{
  if (*((char *)this + 18) < 0 || *((__int16 *)this + 8) < 0)
    return 0xFFFFFFFFLL;
  else
    return dword_18BE27D2C[*((unsigned __int8 *)this + 18)] + *((unsigned __int16 *)this + 8);
}

uint64_t icu::MeasureUnit::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  const char **v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  const char **v10;
  unint64_t v11;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      v6 = (const char **)(v5 + 96);
    }
    else
    {
      if (*(char *)(a1 + 18) < 0 || *(__int16 *)(a1 + 16) < 0)
        v7 = -1;
      else
        v7 = dword_18BE27D2C[*(unsigned __int8 *)(a1 + 18)] + (unint64_t)*(unsigned __int16 *)(a1 + 16);
      v6 = (const char **)&off_1E2260C08[v7];
    }
    v8 = *v6;
    v9 = *(_QWORD *)(a2 + 8);
    if (v9)
    {
      v10 = (const char **)(v9 + 96);
    }
    else
    {
      if (*(char *)(a2 + 18) < 0 || *(__int16 *)(a2 + 16) < 0)
        v11 = -1;
      else
        v11 = dword_18BE27D2C[*(unsigned __int8 *)(a2 + 18)] + (unint64_t)*(unsigned __int16 *)(a2 + 16);
      v10 = (const char **)&off_1E2260C08[v11];
    }
    return strcmp(v8, *v10) == 0;
  }
  return result;
}

uint64_t icu::MeasureUnit::getAvailable(icu::MeasureUnit *this, icu::MeasureUnit *a2, int *a3, UErrorCode *a4)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  icu::MeasureUnit *v13;

  if (*a3 > 0)
    return 0;
  if ((int)a2 >= 492)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = v6;
      v10 = v7 + 1;
      v6 = dword_18BE27D2C[v7 + 1];
      v11 = v6 - v9;
      if (v6 - v9 >= 1)
      {
        v12 = 0;
        v13 = (icu::MeasureUnit *)((char *)this + 24 * v8);
        do
        {
          icu::MeasureUnit::setTo(v13, v7, v12++);
          v13 = (icu::MeasureUnit *)((char *)v13 + 24);
        }
        while (v11 != v12);
        v8 += v12;
      }
      ++v7;
    }
    while (v10 != 23);
  }
  else
  {
    *a3 = 15;
  }
  return 492;
}

void icu::MeasureUnit::setTo(icu::MeasureUnit *this, char a2, __int16 a3)
{
  uint64_t v3;

  *((_BYTE *)this + 18) = a2;
  *((_WORD *)this + 8) = a3;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 108))
      uprv_free(*(void **)(v3 + 96));
    sub_18BC3ED98(v3 + 8);
    icu::UMemory::operator delete((void *)v3);
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t icu::MeasureUnit::getAvailable(icu::MeasureUnit *this, icu::MeasureUnit *a2, icu::MeasureUnit *a3, int *a4, UErrorCode *a5)
{
  uint64_t v5;
  int v8;
  int v10;
  char v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;

  if (*a4 > 0)
    return 0;
  v8 = (int)a3;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v13, (const char *)this);
  v10 = sub_18BCF8F70((uint64_t)off_1E2260B50, 0, 23, v13, v14);
  if (v10 == -1)
    return 0;
  v11 = v10;
  v5 = (dword_18BE27D2C[v10 + 1] - dword_18BE27D2C[v10]);
  if ((int)v5 <= v8)
  {
    if ((int)v5 >= 1)
    {
      for (i = 0; i != v5; ++i)
      {
        icu::MeasureUnit::setTo(a2, v11, i);
        a2 = (icu::MeasureUnit *)((char *)a2 + 24);
      }
    }
  }
  else
  {
    *a4 = 15;
  }
  return v5;
}

uint64_t sub_18BCF8F70(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BYTE v15[16];

  while (a2 < a3)
  {
    v10 = a2 + a3;
    if (a2 + a3 < 0 != __OFADD__(a2, a3))
      ++v10;
    v11 = (v10 >> 1);
    icu::StringPiece::StringPiece((icu::StringPiece *)v15, *(const char **)(a1 + 8 * (int)v11));
    v13 = icu::StringPiece::compare((uint64_t)v15, a4, a5, v12);
    if (v13 < 0)
    {
      a2 = v11 + 1;
    }
    else
    {
      a3 = v11;
      if (!v13)
        return v11;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t icu::MeasureUnit::getAvailableTypes(icu::MeasureUnit *this, UErrorCode *a2)
{
  unint64_t v3;
  void **v4;
  uint64_t *v5;
  uint64_t *v7;

  v4 = (void **)uenum_openCharStringsEnumeration((uint64_t)off_1E2260B50, 23, (int *)this);
  v5 = (uint64_t *)*(unsigned int *)this;
  if ((int)v5 >= 1)
    goto LABEL_2;
  v7 = icu::UMemory::operator new(v5, (icu::UMemory *)0x80, v3);
  if (!v7)
  {
    *(_DWORD *)this = 7;
LABEL_2:
    uenum_close(v4);
    return 0;
  }
  return icu::UStringEnumeration::UStringEnumeration((uint64_t)v7, (uint64_t)v4);
}

uint64_t icu::MeasureUnit::initTime(icu::MeasureUnit *this, const char *a2)
{
  char v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  icu::StringPiece::StringPiece((icu::StringPiece *)&v10, "duration");
  v4 = sub_18BCF8F70((uint64_t)off_1E2260B50, 0, 23, v10, v11);
  *((_BYTE *)this + 18) = v4;
  v5 = dword_18BE27D2C[v4];
  v6 = dword_18BE27D2C[v4 + 1];
  icu::StringPiece::StringPiece((icu::StringPiece *)&v8, a2);
  result = sub_18BCF8F70((uint64_t)off_1E2260C08, v5, v6, v8, v9);
  *((_WORD *)this + 8) = result - LOWORD(dword_18BE27D2C[*((char *)this + 18)]);
  return result;
}

uint64_t icu::MeasureUnit::initCurrency(uint64_t a1, const char *a2, int a3)
{
  char v6;
  uint64_t result;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  icu::CharString *v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  UErrorCode v21;

  icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "currency");
  v6 = sub_18BCF8F70((uint64_t)off_1E2260B50, 0, 23, v19, v20);
  *(_BYTE *)(a1 + 18) = v6;
  result = sub_18BCF8F70((uint64_t)off_1E2260C08, dword_18BE27D2C[v6], dword_18BE27D2C[v6 + 1], (uint64_t)a2, a3);
  if ((_DWORD)result == -1)
  {
    v11 = icu::UMemory::operator new(v9, (icu::UMemory *)0xA0, v8);
    if (v11)
    {
      v12 = v11;
      *((_OWORD *)v11 + 8) = 0u;
      *((_OWORD *)v11 + 9) = 0u;
      *((_OWORD *)v11 + 7) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 6) = 0u;
      v13 = (icu::CharString *)(v11 + 12);
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *((_OWORD *)v12 + 2) = 0u;
      v12[2] = (uint64_t)(v12 + 4);
      *((_DWORD *)v12 + 6) = 8;
      *(_QWORD *)v13 = (char *)v12 + 109;
      *((_DWORD *)v12 + 26) = 40;
      v21 = U_ZERO_ERROR;
      result = (uint64_t)icu::CharString::append(v13, a2, a3, &v21);
      *(_QWORD *)(a1 + 8) = v12;
      LOWORD(v10) = -1;
      goto LABEL_5;
    }
    *(_QWORD *)(a1 + 8) = 0;
    v14 = &dword_18BE27D2C[*(char *)(a1 + 18)];
    v15 = *v14;
    v16 = v14[1];
    icu::StringPiece::StringPiece((icu::StringPiece *)&v17, "XXX");
    result = sub_18BCF8F70((uint64_t)off_1E2260C08, v15, v16, v17, v18);
  }
  v10 = result - dword_18BE27D2C[*(char *)(a1 + 18)];
LABEL_5:
  *(_WORD *)(a1 + 16) = v10;
  return result;
}

uint64_t icu::MeasureUnit::createFromUAMeasureUnit(int a1, icu::MeasureUnit *this)
{
  uint64_t result;

  if (a1 > 2815)
  {
    if (a1 > 3583)
    {
      if (a1 > 4607)
      {
        if (a1 <= 4864)
        {
          switch(a1)
          {
            case 4608:
              result = icu::MeasureUnit::createKarat(this, (UErrorCode *)this);
              break;
            case 4609:
            case 4617:
              result = icu::MeasureUnit::createMilligramOfglucosePerDeciliter(this, (UErrorCode *)this);
              break;
            case 4610:
              result = icu::MeasureUnit::createMillimolePerLiter(this, (UErrorCode *)this);
              break;
            case 4611:
              result = icu::MeasureUnit::createPartPerMillion(this, (UErrorCode *)this);
              break;
            case 4612:
              result = icu::MeasureUnit::createPercent(this, (UErrorCode *)this);
              break;
            case 4613:
              result = icu::MeasureUnit::createPermille(this, (UErrorCode *)this);
              break;
            case 4614:
              result = icu::MeasureUnit::createPermyriad(this, (UErrorCode *)this);
              break;
            case 4615:
              result = icu::MeasureUnit::createMole(this, (UErrorCode *)this);
              break;
            case 4616:
              result = icu::MeasureUnit::createItem(this, (UErrorCode *)this);
              break;
            default:
              if (a1 != 4864)
                goto LABEL_121;
              result = icu::MeasureUnit::createNewton(this, (UErrorCode *)this);
              break;
          }
        }
        else if (a1 <= 5120)
        {
          switch(a1)
          {
            case 4865:
              return icu::MeasureUnit::createPoundForce(this, (UErrorCode *)this);
            case 4866:
              return icu::MeasureUnit::createKilowattHourPer100Kilometer(this, (UErrorCode *)this);
            case 5120:
              return icu::MeasureUnit::createNewtonMeter(this, (UErrorCode *)this);
            default:
LABEL_121:
              *(_DWORD *)this = 1;
              return 0;
          }
        }
        else
        {
          switch(a1)
          {
            case 5376:
              result = icu::MeasureUnit::createEm(this, (UErrorCode *)this);
              break;
            case 5377:
              result = icu::MeasureUnit::createPixel(this, (UErrorCode *)this);
              break;
            case 5378:
              result = icu::MeasureUnit::createMegapixel(this, (UErrorCode *)this);
              break;
            case 5379:
              result = icu::MeasureUnit::createPixelPerCentimeter(this, (UErrorCode *)this);
              break;
            case 5380:
              result = icu::MeasureUnit::createPixelPerInch(this, (UErrorCode *)this);
              break;
            case 5381:
              result = icu::MeasureUnit::createDotPerCentimeter(this, (UErrorCode *)this);
              break;
            case 5382:
              result = icu::MeasureUnit::createDotPerInch(this, (UErrorCode *)this);
              break;
            case 5383:
              result = icu::MeasureUnit::createDot(this, (UErrorCode *)this);
              break;
            default:
              if (a1 != 5121)
                goto LABEL_121;
              result = icu::MeasureUnit::createPoundFoot(this, (UErrorCode *)this);
              break;
          }
        }
      }
      else if (a1 <= 3839)
      {
        switch(a1)
        {
          case 3584:
            result = icu::MeasureUnit::createBit(this, (UErrorCode *)this);
            break;
          case 3585:
            result = icu::MeasureUnit::createByte(this, (UErrorCode *)this);
            break;
          case 3586:
            result = icu::MeasureUnit::createGigabit(this, (UErrorCode *)this);
            break;
          case 3587:
            result = icu::MeasureUnit::createGigabyte(this, (UErrorCode *)this);
            break;
          case 3588:
            result = icu::MeasureUnit::createKilobit(this, (UErrorCode *)this);
            break;
          case 3589:
            result = icu::MeasureUnit::createKilobyte(this, (UErrorCode *)this);
            break;
          case 3590:
            result = icu::MeasureUnit::createMegabit(this, (UErrorCode *)this);
            break;
          case 3591:
            result = icu::MeasureUnit::createMegabyte(this, (UErrorCode *)this);
            break;
          case 3592:
            result = icu::MeasureUnit::createTerabit(this, (UErrorCode *)this);
            break;
          case 3593:
            result = icu::MeasureUnit::createTerabyte(this, (UErrorCode *)this);
            break;
          case 3594:
            result = icu::MeasureUnit::createPetabyte(this, (UErrorCode *)this);
            break;
          default:
            goto LABEL_121;
        }
      }
      else
      {
        switch(a1)
        {
          case 3840:
            result = icu::MeasureUnit::createAmpere(this, (UErrorCode *)this);
            break;
          case 3841:
            result = icu::MeasureUnit::createMilliampere(this, (UErrorCode *)this);
            break;
          case 3842:
            result = icu::MeasureUnit::createOhm(this, (UErrorCode *)this);
            break;
          case 3843:
            result = icu::MeasureUnit::createVolt(this, (UErrorCode *)this);
            break;
          default:
            switch(a1)
            {
              case 4096:
                result = icu::MeasureUnit::createHertz(this, (UErrorCode *)this);
                break;
              case 4097:
                result = icu::MeasureUnit::createKilohertz(this, (UErrorCode *)this);
                break;
              case 4098:
                result = icu::MeasureUnit::createMegahertz(this, (UErrorCode *)this);
                break;
              case 4099:
                result = icu::MeasureUnit::createGigahertz(this, (UErrorCode *)this);
                break;
              default:
                switch(a1)
                {
                  case 4352:
                    result = icu::MeasureUnit::createLux(this, (UErrorCode *)this);
                    break;
                  case 4353:
                    result = icu::MeasureUnit::createSolarLuminosity(this, (UErrorCode *)this);
                    break;
                  case 4354:
                    result = icu::MeasureUnit::createCandela(this, (UErrorCode *)this);
                    break;
                  case 4355:
                    result = icu::MeasureUnit::createLumen(this, (UErrorCode *)this);
                    break;
                  default:
                    goto LABEL_121;
                }
                break;
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 2816:
          result = icu::MeasureUnit::createLiter(this, (UErrorCode *)this);
          break;
        case 2817:
          result = icu::MeasureUnit::createCubicKilometer(this, (UErrorCode *)this);
          break;
        case 2818:
          result = icu::MeasureUnit::createCubicMile(this, (UErrorCode *)this);
          break;
        case 2819:
          result = icu::MeasureUnit::createMilliliter(this, (UErrorCode *)this);
          break;
        case 2820:
          result = icu::MeasureUnit::createCentiliter(this, (UErrorCode *)this);
          break;
        case 2821:
          result = icu::MeasureUnit::createDeciliter(this, (UErrorCode *)this);
          break;
        case 2822:
          result = icu::MeasureUnit::createHectoliter(this, (UErrorCode *)this);
          break;
        case 2823:
          result = icu::MeasureUnit::createMegaliter(this, (UErrorCode *)this);
          break;
        case 2824:
          result = icu::MeasureUnit::createCubicCentimeter(this, (UErrorCode *)this);
          break;
        case 2825:
          result = icu::MeasureUnit::createCubicMeter(this, (UErrorCode *)this);
          break;
        case 2826:
          result = icu::MeasureUnit::createCubicInch(this, (UErrorCode *)this);
          break;
        case 2827:
          result = icu::MeasureUnit::createCubicFoot(this, (UErrorCode *)this);
          break;
        case 2828:
          result = icu::MeasureUnit::createCubicYard(this, (UErrorCode *)this);
          break;
        case 2829:
          result = icu::MeasureUnit::createAcreFoot(this, (UErrorCode *)this);
          break;
        case 2830:
          result = icu::MeasureUnit::createBushel(this, (UErrorCode *)this);
          break;
        case 2831:
          result = icu::MeasureUnit::createTeaspoon(this, (UErrorCode *)this);
          break;
        case 2832:
          result = icu::MeasureUnit::createTablespoon(this, (UErrorCode *)this);
          break;
        case 2833:
          result = icu::MeasureUnit::createFluidOunce(this, (UErrorCode *)this);
          break;
        case 2834:
          result = icu::MeasureUnit::createCup(this, (UErrorCode *)this);
          break;
        case 2835:
          result = icu::MeasureUnit::createPint(this, (UErrorCode *)this);
          break;
        case 2836:
          result = icu::MeasureUnit::createQuart(this, (UErrorCode *)this);
          break;
        case 2837:
          result = icu::MeasureUnit::createGallon(this, (UErrorCode *)this);
          break;
        case 2838:
          result = icu::MeasureUnit::createCupMetric(this, (UErrorCode *)this);
          break;
        case 2839:
          result = icu::MeasureUnit::createPintMetric(this, (UErrorCode *)this);
          break;
        case 2840:
          result = icu::MeasureUnit::createGallonImperial(this, (UErrorCode *)this);
          break;
        case 2841:
          result = icu::MeasureUnit::createFluidOunceImperial(this, (UErrorCode *)this);
          break;
        case 2842:
          result = icu::MeasureUnit::createBarrel(this, (UErrorCode *)this);
          break;
        case 2843:
          result = icu::MeasureUnit::createDessertSpoon(this, (UErrorCode *)this);
          break;
        case 2844:
          result = icu::MeasureUnit::createDessertSpoonImperial(this, (UErrorCode *)this);
          break;
        case 2845:
          result = icu::MeasureUnit::createDram(this, (UErrorCode *)this);
          break;
        case 2846:
          result = icu::MeasureUnit::createDrop(this, (UErrorCode *)this);
          break;
        case 2847:
          result = icu::MeasureUnit::createJigger(this, (UErrorCode *)this);
          break;
        case 2848:
          result = icu::MeasureUnit::createPinch(this, (UErrorCode *)this);
          break;
        case 2849:
          result = icu::MeasureUnit::createQuartImperial(this, (UErrorCode *)this);
          break;
        default:
          switch(a1)
          {
            case 3072:
              result = icu::MeasureUnit::createCalorie(this, (UErrorCode *)this);
              break;
            case 3073:
              result = icu::MeasureUnit::createFoodcalorie(this, (UErrorCode *)this);
              break;
            case 3074:
              result = icu::MeasureUnit::createJoule(this, (UErrorCode *)this);
              break;
            case 3075:
              result = icu::MeasureUnit::createKilocalorie(this, (UErrorCode *)this);
              break;
            case 3076:
              result = icu::MeasureUnit::createKilojoule(this, (UErrorCode *)this);
              break;
            case 3077:
              result = icu::MeasureUnit::createKilowattHour(this, (UErrorCode *)this);
              break;
            case 3078:
              result = icu::MeasureUnit::createElectronvolt(this, (UErrorCode *)this);
              break;
            case 3079:
              result = icu::MeasureUnit::createBritishThermalUnit(this, (UErrorCode *)this);
              break;
            case 3080:
              result = icu::MeasureUnit::createThermUs(this, (UErrorCode *)this);
              break;
            default:
              switch(a1)
              {
                case 3328:
                  result = icu::MeasureUnit::createLiterPerKilometer(this, (UErrorCode *)this);
                  break;
                case 3329:
                  result = icu::MeasureUnit::createMilePerGallon(this, (UErrorCode *)this);
                  break;
                case 3330:
                  result = icu::MeasureUnit::createLiterPer100Kilometers(this, (UErrorCode *)this);
                  break;
                case 3331:
                  result = icu::MeasureUnit::createMilePerGallonImperial(this, (UErrorCode *)this);
                  break;
                default:
                  goto LABEL_121;
              }
              break;
          }
          break;
      }
    }
  }
  else if (a1 > 1535)
  {
    if (a1 > 2047)
    {
      switch(a1)
      {
        case 2048:
          result = icu::MeasureUnit::createHectopascal(this, (UErrorCode *)this);
          break;
        case 2049:
          result = icu::MeasureUnit::createInchHg(this, (UErrorCode *)this);
          break;
        case 2050:
          result = icu::MeasureUnit::createMillibar(this, (UErrorCode *)this);
          break;
        case 2051:
          result = icu::MeasureUnit::createMillimeterOfMercury(this, (UErrorCode *)this);
          break;
        case 2052:
          result = icu::MeasureUnit::createPoundPerSquareInch(this, (UErrorCode *)this);
          break;
        case 2053:
          result = icu::MeasureUnit::createAtmosphere(this, (UErrorCode *)this);
          break;
        case 2054:
          result = icu::MeasureUnit::createKilopascal(this, (UErrorCode *)this);
          break;
        case 2055:
          result = icu::MeasureUnit::createMegapascal(this, (UErrorCode *)this);
          break;
        case 2056:
          result = icu::MeasureUnit::createPascal(this, (UErrorCode *)this);
          break;
        case 2057:
          result = icu::MeasureUnit::createBar(this, (UErrorCode *)this);
          break;
        default:
          switch(a1)
          {
            case 2304:
              result = icu::MeasureUnit::createMeterPerSecond(this, (UErrorCode *)this);
              break;
            case 2305:
              result = icu::MeasureUnit::createKilometerPerHour(this, (UErrorCode *)this);
              break;
            case 2306:
              result = icu::MeasureUnit::createMilePerHour(this, (UErrorCode *)this);
              break;
            case 2307:
              result = icu::MeasureUnit::createKnot(this, (UErrorCode *)this);
              break;
            case 2308:
              result = icu::MeasureUnit::createBeaufort(this, (UErrorCode *)this);
              break;
            default:
              switch(a1)
              {
                case 2560:
                  result = icu::MeasureUnit::createCelsius(this, (UErrorCode *)this);
                  break;
                case 2561:
                  result = icu::MeasureUnit::createFahrenheit(this, (UErrorCode *)this);
                  break;
                case 2562:
                  result = icu::MeasureUnit::createKelvin(this, (UErrorCode *)this);
                  break;
                case 2563:
                  result = icu::MeasureUnit::createGenericTemperature(this, (UErrorCode *)this);
                  break;
                default:
                  goto LABEL_121;
              }
              break;
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 1536:
          result = icu::MeasureUnit::createGram(this, (UErrorCode *)this);
          break;
        case 1537:
          result = icu::MeasureUnit::createKilogram(this, (UErrorCode *)this);
          break;
        case 1538:
          result = icu::MeasureUnit::createOunce(this, (UErrorCode *)this);
          break;
        case 1539:
          result = icu::MeasureUnit::createPound(this, (UErrorCode *)this);
          break;
        case 1540:
          result = icu::MeasureUnit::createStone(this, (UErrorCode *)this);
          break;
        case 1541:
          result = icu::MeasureUnit::createMicrogram(this, (UErrorCode *)this);
          break;
        case 1542:
          result = icu::MeasureUnit::createMilligram(this, (UErrorCode *)this);
          break;
        case 1543:
          result = icu::MeasureUnit::createTonne(this, (UErrorCode *)this);
          break;
        case 1544:
          result = icu::MeasureUnit::createTon(this, (UErrorCode *)this);
          break;
        case 1545:
          result = icu::MeasureUnit::createCarat(this, (UErrorCode *)this);
          break;
        case 1546:
          result = icu::MeasureUnit::createOunceTroy(this, (UErrorCode *)this);
          break;
        case 1547:
          result = icu::MeasureUnit::createDalton(this, (UErrorCode *)this);
          break;
        case 1548:
          result = icu::MeasureUnit::createEarthMass(this, (UErrorCode *)this);
          break;
        case 1549:
          result = icu::MeasureUnit::createSolarMass(this, (UErrorCode *)this);
          break;
        case 1550:
          result = icu::MeasureUnit::createGrain(this, (UErrorCode *)this);
          break;
        default:
          switch(a1)
          {
            case 1792:
              result = icu::MeasureUnit::createWatt(this, (UErrorCode *)this);
              break;
            case 1793:
              result = icu::MeasureUnit::createKilowatt(this, (UErrorCode *)this);
              break;
            case 1794:
              result = icu::MeasureUnit::createHorsepower(this, (UErrorCode *)this);
              break;
            case 1795:
              result = icu::MeasureUnit::createMilliwatt(this, (UErrorCode *)this);
              break;
            case 1796:
              result = icu::MeasureUnit::createMegawatt(this, (UErrorCode *)this);
              break;
            case 1797:
              result = icu::MeasureUnit::createGigawatt(this, (UErrorCode *)this);
              break;
            default:
              goto LABEL_121;
          }
          break;
      }
    }
  }
  else if (a1 > 1279)
  {
    switch(a1)
    {
      case 1280:
        result = icu::MeasureUnit::createMeter(this, (UErrorCode *)this);
        break;
      case 1281:
        result = icu::MeasureUnit::createCentimeter(this, (UErrorCode *)this);
        break;
      case 1282:
        result = icu::MeasureUnit::createKilometer(this, (UErrorCode *)this);
        break;
      case 1283:
        result = icu::MeasureUnit::createMillimeter(this, (UErrorCode *)this);
        break;
      case 1284:
        result = icu::MeasureUnit::createPicometer(this, (UErrorCode *)this);
        break;
      case 1285:
        result = icu::MeasureUnit::createFoot(this, (UErrorCode *)this);
        break;
      case 1286:
        result = icu::MeasureUnit::createInch(this, (UErrorCode *)this);
        break;
      case 1287:
        result = icu::MeasureUnit::createMile(this, (UErrorCode *)this);
        break;
      case 1288:
        result = icu::MeasureUnit::createYard(this, (UErrorCode *)this);
        break;
      case 1289:
        result = icu::MeasureUnit::createLightYear(this, (UErrorCode *)this);
        break;
      case 1290:
        result = icu::MeasureUnit::createDecimeter(this, (UErrorCode *)this);
        break;
      case 1291:
        result = icu::MeasureUnit::createMicrometer(this, (UErrorCode *)this);
        break;
      case 1292:
        result = icu::MeasureUnit::createNanometer(this, (UErrorCode *)this);
        break;
      case 1293:
        result = icu::MeasureUnit::createNauticalMile(this, (UErrorCode *)this);
        break;
      case 1294:
        result = icu::MeasureUnit::createFathom(this, (UErrorCode *)this);
        break;
      case 1295:
        result = icu::MeasureUnit::createFurlong(this, (UErrorCode *)this);
        break;
      case 1296:
        result = icu::MeasureUnit::createAstronomicalUnit(this, (UErrorCode *)this);
        break;
      case 1297:
        result = icu::MeasureUnit::createParsec(this, (UErrorCode *)this);
        break;
      case 1298:
        result = icu::MeasureUnit::createMileScandinavian(this, (UErrorCode *)this);
        break;
      case 1299:
        result = icu::MeasureUnit::createPoint(this, (UErrorCode *)this);
        break;
      case 1300:
        result = icu::MeasureUnit::createSolarRadius(this, (UErrorCode *)this);
        break;
      case 1301:
        result = icu::MeasureUnit::createEarthRadius(this, (UErrorCode *)this);
        break;
      default:
        goto LABEL_121;
    }
  }
  else if (a1 > 1023)
  {
    switch(a1)
    {
      case 1024:
        result = icu::MeasureUnit::createYear(this, (UErrorCode *)this);
        break;
      case 1025:
        result = icu::MeasureUnit::createMonth(this, (UErrorCode *)this);
        break;
      case 1026:
        result = icu::MeasureUnit::createWeek(this, (UErrorCode *)this);
        break;
      case 1027:
        result = icu::MeasureUnit::createDay(this, (UErrorCode *)this);
        break;
      case 1028:
        result = icu::MeasureUnit::createHour(this, (UErrorCode *)this);
        break;
      case 1029:
        result = icu::MeasureUnit::createMinute(this, (UErrorCode *)this);
        break;
      case 1030:
        result = icu::MeasureUnit::createSecond(this, (UErrorCode *)this);
        break;
      case 1031:
        result = icu::MeasureUnit::createMillisecond(this, (UErrorCode *)this);
        break;
      case 1032:
        result = icu::MeasureUnit::createMicrosecond(this, (UErrorCode *)this);
        break;
      case 1033:
        result = icu::MeasureUnit::createNanosecond(this, (UErrorCode *)this);
        break;
      case 1034:
        result = icu::MeasureUnit::createCentury(this, (UErrorCode *)this);
        break;
      case 1035:
        result = icu::MeasureUnit::createYearPerson(this, (UErrorCode *)this);
        break;
      case 1036:
        result = icu::MeasureUnit::createMonthPerson(this, (UErrorCode *)this);
        break;
      case 1037:
        result = icu::MeasureUnit::createWeekPerson(this, (UErrorCode *)this);
        break;
      case 1038:
        result = icu::MeasureUnit::createDayPerson(this, (UErrorCode *)this);
        break;
      case 1039:
        result = icu::MeasureUnit::createDecade(this, (UErrorCode *)this);
        break;
      case 1040:
        result = icu::MeasureUnit::createQuarter(this, (UErrorCode *)this);
        break;
      default:
        goto LABEL_121;
    }
  }
  else if (a1 <= 511)
  {
    switch(a1)
    {
      case 256:
        result = icu::MeasureUnit::createDegree(this, (UErrorCode *)this);
        break;
      case 257:
        result = icu::MeasureUnit::createArcMinute(this, (UErrorCode *)this);
        break;
      case 258:
        result = icu::MeasureUnit::createArcSecond(this, (UErrorCode *)this);
        break;
      case 259:
        result = icu::MeasureUnit::createRadian(this, (UErrorCode *)this);
        break;
      case 260:
        result = icu::MeasureUnit::createRevolutionAngle(this, (UErrorCode *)this);
        break;
      default:
        if (a1)
        {
          if (a1 != 1)
            goto LABEL_121;
          result = icu::MeasureUnit::createMeterPerSecondSquared(this, (UErrorCode *)this);
        }
        else
        {
          result = icu::MeasureUnit::createGForce(this, (UErrorCode *)this);
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 512:
        result = icu::MeasureUnit::createSquareMeter(this, (UErrorCode *)this);
        break;
      case 513:
        result = icu::MeasureUnit::createSquareKilometer(this, (UErrorCode *)this);
        break;
      case 514:
        result = icu::MeasureUnit::createSquareFoot(this, (UErrorCode *)this);
        break;
      case 515:
        result = icu::MeasureUnit::createSquareMile(this, (UErrorCode *)this);
        break;
      case 516:
        result = icu::MeasureUnit::createAcre(this, (UErrorCode *)this);
        break;
      case 517:
        result = icu::MeasureUnit::createHectare(this, (UErrorCode *)this);
        break;
      case 518:
        result = icu::MeasureUnit::createSquareCentimeter(this, (UErrorCode *)this);
        break;
      case 519:
        result = icu::MeasureUnit::createSquareInch(this, (UErrorCode *)this);
        break;
      case 520:
        result = icu::MeasureUnit::createSquareYard(this, (UErrorCode *)this);
        break;
      case 521:
        result = icu::MeasureUnit::createDunam(this, (UErrorCode *)this);
        break;
      default:
        goto LABEL_121;
    }
  }
  return result;
}

uint64_t icu::MeasureUnit::getUAMeasureUnit(icu::MeasureUnit *this)
{
  uint64_t v1;
  int v2;
  int v3;

  if (*((char *)this + 18) < 0)
    return 0xFFFFFFFFLL;
  if (*((__int16 *)this + 8) < 0)
    return 0xFFFFFFFFLL;
  v1 = *((unsigned __int8 *)this + 18);
  v2 = dword_18BE27D2C[v1] + *((unsigned __int16 *)this + 8);
  if (v2 < 0)
    return 0xFFFFFFFFLL;
  v3 = v1 <= 5 ? dword_18BE27D2C[v1] + *((unsigned __int16 *)this + 8) : v2 - 301;
  if (v3 > 190)
    return 0xFFFFFFFFLL;
  else
    return dword_18BE27D8C[v3];
}

uint64_t icu::MeasureUnit::getUAMeasureUnits(icu::MeasureUnit *a1, _DWORD *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v5;
  UErrorCode *v8;
  icu::MeasureUnit *v9;
  uint64_t v10;
  uint64_t v12[2];
  icu::MeasureUnit *v13;
  int v14;

  LODWORD(v5) = a3;
  if (icu::MeasureUnit::getComplexity(a1, a4, a3, a4) == 2)
  {
    v13 = 0;
    v14 = 0;
    icu::MeasureUnit::splitToSingleUnitsImpl(a1, &v14, a4, v8, &v13);
    v9 = v13;
    v12[0] = (uint64_t)v13;
    v13 = 0;
    v10 = v14;
    v12[1] = v14;
    sub_18BCF9D5C((uint64_t *)&v13);
    if ((int)v5 >= (int)v10)
      v5 = v10;
    else
      v5 = v5;
    if ((int)v5 >= 1)
    {
      do
      {
        *a2++ = icu::MeasureUnit::getUAMeasureUnit(v9);
        v9 = (icu::MeasureUnit *)((char *)v9 + 24);
        --v5;
      }
      while (v5);
    }
    sub_18BCF9D5C(v12);
  }
  else
  {
    if ((int)v5 >= 1)
      *a2 = icu::MeasureUnit::getUAMeasureUnit(a1);
    return 1;
  }
  return v10;
}

uint64_t sub_18BCF9CDC(uint64_t a1, uint64_t a2)
{
  const void *v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = *(const void **)(a2 + 8);
  if (v4 == (const void *)(a2 + 24))
  {
    *(_QWORD *)(a1 + 8) = a1 + 24;
    memcpy((void *)(a1 + 24), v4, 8 * *(int *)(a2 + 16));
  }
  else
  {
    *(_QWORD *)(a2 + 8) = a2 + 24;
    *(_DWORD *)(a2 + 16) = 8;
    *(_BYTE *)(a2 + 20) = 0;
  }
  *(_DWORD *)a2 = 0;
  return a1;
}

uint64_t *sub_18BCF9D5C(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = (void *)(v2 - 16);
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = v2 - 24;
      v6 = 24 * v4;
      do
      {
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(v5 + v6));
        v6 -= 24;
      }
      while (v6);
    }
    icu::UMemory::operator delete[](v3);
  }
  return a1;
}

uint64_t *sub_18BCF9DBC(const void **a1, unint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t *result;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *((_DWORD *)a1 + 4);
  v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8)
      v6 = 32;
    else
      v6 = 2 * v4;
    if (v6 < 1)
      return 0;
    result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result)
      return result;
    v8 = result;
    if (v4 >= 1)
    {
      v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4)
        v9 = v4;
      if (v9 >= v6)
        v9 = v6;
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free((void *)a1[1]);
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    v5 = 1;
    *((_BYTE *)a1 + 20) = 1;
  }
  result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0xC, a2);
  if (result)
  {
    v10 = *(_QWORD *)a2;
    *((_DWORD *)result + 2) = *(_DWORD *)(a2 + 8);
    *result = v10;
  }
  v11 = *(int *)a1;
  *(_DWORD *)a1 = v11 + 1;
  *((_QWORD *)a1[1] + v11) = result;
  return result;
}

uint64_t umeas_getPrefixPower(int a1)
{
  int v1;

  if ((a1 + 59) >= 8)
    v1 = -30;
  else
    v1 = 60;
  return (v1 + a1);
}

uint64_t umeas_getPrefixBase(int a1)
{
  if ((a1 + 59) >= 8)
    return 10;
  else
    return 1024;
}

uint64_t icu::getUnitQuantity@<X0>(icu *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  UChar *v18;
  int32_t v19;
  const char *v20;
  uint64_t v21;
  void *v22[4];
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 __s;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = a3 + 13;
  *(_DWORD *)(a3 + 8) = 40;
  *(_DWORD *)(a3 + 56) = 0;
  v42 = 0u;
  v43 = 0u;
  __s = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  icu::MeasureUnitImpl::copy(this, a2, (uint64_t)&v34);
  v23 = 0;
  if (*(int *)a2 <= 0)
  {
    v7 = atomic_load(&dword_1EE009BF0);
    if (v7 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009BF0))
    {
      if (dword_1EE009BF4 >= 1)
      {
        *a2 = dword_1EE009BF4;
        goto LABEL_19;
      }
    }
    else
    {
      sub_18BCFA260((int *)a2);
      dword_1EE009BF4 = *a2;
      icu::umtx_initImplPostInit(&dword_1EE009BF0);
    }
    if (*(int *)a2 <= 0)
    {
      v22[0] = 0;
      v22[1] = (void *)qword_1EE009BC8;
      v22[2] = (void *)qword_1EE009BC8;
      v22[3] = (void *)0xFFFFFFFFLL;
      icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v34, a2);
      v20 = 0;
      v21 = 0;
      icu::StringPiece::StringPiece((icu::StringPiece *)&v20, (const char *)__s);
      v8 = sub_18BCFAAFC((uint64_t)v22, v20, v21, &v23);
      if (*(int *)a2 > 0)
        goto LABEL_18;
      if (v23 >= 1)
      {
        v23 = 0;
        DWORD2(v43) = 0;
        *(_BYTE *)__s = 0;
        v9 = DWORD2(v34);
        if (SDWORD2(v34) >= 1)
        {
          v10 = (uint64_t *)v35;
          do
          {
            v11 = *v10++;
            *(_DWORD *)(v11 + 8) = -*(_DWORD *)(v11 + 8);
            --v9;
          }
          while (v9);
        }
        icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v34, a2);
        icu::StringPiece::set((icu::StringPiece *)&v20, (const char *)__s);
        v8 = sub_18BCFAAFC((uint64_t)v22, v20, v21, &v23);
        if (*(int *)a2 > 0)
          goto LABEL_18;
      }
      v12 = v8;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v29 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      icu::MeasureUnitImpl::copyAndSimplify((uint64_t)this, a2, (uint64_t)&v24);
      if (*(int *)a2 > 0)
      {
LABEL_15:
        if (BYTE12(v30))
          uprv_free((void *)v30);
        sub_18BC3ED98((uint64_t)&v24 + 8);
LABEL_18:
        icu::BytesTrie::~BytesTrie(v22);
        goto LABEL_19;
      }
      if (v23 >= 1)
      {
        v23 = 0;
        icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v24, a2);
        icu::StringPiece::set((icu::StringPiece *)&v20, (const char *)v30);
        v14 = sub_18BCFAAFC((uint64_t)v22, v20, v21, &v23);
        if (*(int *)a2 > 0)
          goto LABEL_15;
        if (v23 >= 1)
        {
          v23 = 0;
          DWORD2(v33) = 0;
          *(_BYTE *)v30 = 0;
          v15 = DWORD2(v24);
          if (SDWORD2(v24) >= 1)
          {
            v16 = (uint64_t *)v25;
            do
            {
              v17 = *v16++;
              *(_DWORD *)(v17 + 8) = -*(_DWORD *)(v17 + 8);
              --v15;
            }
            while (v15);
          }
          icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v24, a2);
          icu::StringPiece::set((icu::StringPiece *)&v20, (const char *)v30);
          v14 = sub_18BCFAAFC((uint64_t)v22, v20, v21, &v23);
          if (*(int *)a2 > 0)
            goto LABEL_15;
          if (v23 >= 1)
          {
LABEL_34:
            *a2 = U_INVALID_FORMAT_ERROR;
            goto LABEL_15;
          }
        }
        v12 = v14;
      }
      if ((v12 & 0x80000000) == 0 && v12 < dword_1EE009BD0)
      {
        v18 = *(UChar **)(qword_1EE009BD8 + 8 * v12);
        v19 = u_strlen(v18);
        icu::CharString::appendInvariantChars((int *)a3, v18, v19, a2);
        goto LABEL_15;
      }
      goto LABEL_34;
    }
  }
LABEL_19:
  if (BYTE12(__s))
    uprv_free((void *)__s);
  return sub_18BC3ED98((uint64_t)&v34 + 8);
}

void sub_18BCFA260(int *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char **v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  int v21;
  const void *v22;
  size_t v23;
  void *v24;
  _QWORD v25[7];
  __int128 v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  _BYTE v69[48];
  uint64_t v70;
  _QWORD v71[5];
  _BYTE v72[48];
  uint64_t v73;

  sub_18BDA1768(0, (uint64_t)sub_18BCFBF58);
  v2 = (_QWORD *)ures_openDirect(0, (uint64_t)"units", (uint64_t)a1);
  v3 = ures_getByKey((uint64_t)v2, "unitQuantities", 0, a1);
  v4 = (_QWORD *)v3;
  if (*a1 > 0)
  {
    if (!v3)
      goto LABEL_3;
    goto LABEL_30;
  }
  dword_1EE009BD0 = *(_DWORD *)(v3 + 128);
  v5 = 8 * dword_1EE009BD0;
  v6 = uprv_malloc(v5);
  qword_1EE009BD8 = (uint64_t)v6;
  if (!v6)
  {
    *a1 = 7;
    goto LABEL_30;
  }
  bzero(v6, v5);
  v73 = 0;
  memset(v72, 0, sizeof(v72));
  icu::BytesTrieBuilder::BytesTrieBuilder((icu::BytesTrieBuilder *)v72, (UErrorCode *)a1);
  v71[3] = v72;
  v71[4] = 0;
  v71[0] = &off_1E2261D50;
  v71[1] = qword_1EE009BD8;
  v71[2] = &dword_1EE009BD0;
  ures_getAllItemsWithFallback((uint64_t)v2, "unitQuantities", (uint64_t)v71, a1);
  v7 = icu::BytesTrieBuilder::buildStringPiece((uint64_t)v72, 0, a1);
  if (*a1 <= 0)
  {
    v9 = (const void *)v7;
    v10 = v8;
    v11 = (int)v8;
    v12 = uprv_malloc((int)v8);
    qword_1EE009BC8 = (uint64_t)v12;
    if (!v12)
    {
      *a1 = 7;
      goto LABEL_29;
    }
    memcpy(v12, v9, v11);
    v70 = 0;
    memset(v69, 0, sizeof(v69));
    icu::BytesTrieBuilder::BytesTrieBuilder((icu::BytesTrieBuilder *)v69, (UErrorCode *)a1);
    if (*a1 > 0)
      goto LABEL_28;
    v13 = &off_1E2261B80;
    do
    {
      icu::StringPiece::StringPiece((icu::StringPiece *)&v67, *v13);
      icu::BytesTrieBuilder::add((uint64_t)v69, v67, v68, *((_DWORD *)v13 + 2) + 64, (UErrorCode *)a1);
      v13 += 2;
    }
    while (v13 != (char **)&unk_1E2261D40);
    if (*a1 >= 1)
      goto LABEL_28;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v65, "-per-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v65, v66, 128, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v63, "-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v63, v64, 129, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v61, "-and-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v61, v62, 130, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v59, "per-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v59, v60, 192, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v57, "square-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v57, v58, 258, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v55, "cubic-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v55, v56, 259, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v53, "pow2-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v53, v54, 258, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v51, "pow3-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v51, v52, 259, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v49, "pow4-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v49, v50, 260, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v47, "pow5-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v47, v48, 261, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v45, "pow6-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v45, v46, 262, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "pow7-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v43, v44, 263, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v41, "pow8-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v41, v42, 264, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "pow9-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v39, v40, 265, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v37, "pow10-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v37, v38, 266, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v35, "pow11-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v35, v36, 267, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v33, "pow12-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v33, v34, 268, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v31, "pow13-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v31, v32, 269, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v29, "pow14-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v29, v30, 270, (UErrorCode *)a1);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v27, "pow15-");
    icu::BytesTrieBuilder::add((uint64_t)v69, v27, v28, 271, (UErrorCode *)a1);
    if (*a1 > 0)
      goto LABEL_28;
    v14 = ures_getByKey((uint64_t)v2, "convertUnits", 0, a1);
    v15 = (_QWORD *)v14;
    if (*a1 <= 0)
    {
      v16 = *(_DWORD *)(v14 + 128);
      v17 = uprv_malloc((int)(8 * v16));
      qword_1EE009BE0 = (uint64_t)v17;
      if (v17 && (bzero(v17, (int)(8 * v16)), v18 = uprv_malloc((int)(4 * v16)), (qword_1EE009BE8 = (uint64_t)v18) != 0))
      {
        v19 = v18;
        bzero(v18, (int)(4 * v16));
        v25[5] = 512;
        v26 = 0u;
        v25[0] = &off_1E2261D98;
        v25[1] = qword_1EE009BE0;
        v25[2] = v19;
        v25[3] = v16;
        v25[4] = v69;
        v25[6] = v9;
        *(_QWORD *)&v26 = v10;
        ures_getAllItemsWithFallback((uint64_t)v2, "convertUnits", (uint64_t)v25, a1);
        v20 = icu::BytesTrieBuilder::buildStringPiece((uint64_t)v69, 0, a1);
        if (*a1 <= 0)
        {
          v22 = (const void *)v20;
          v23 = v21;
          v24 = uprv_malloc(v21);
          qword_1EE009BF8 = (uint64_t)v24;
          if (v24)
            memcpy(v24, v22, v23);
          else
            *a1 = 7;
        }
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v25);
      }
      else
      {
        *a1 = 7;
      }
    }
    else if (!v14)
    {
      goto LABEL_28;
    }
    ures_close(v15);
LABEL_28:
    icu::BytesTrieBuilder::~BytesTrieBuilder((icu::BytesTrieBuilder *)v69);
  }
LABEL_29:
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v71);
  icu::BytesTrieBuilder::~BytesTrieBuilder((icu::BytesTrieBuilder *)v72);
  if (!v4)
  {
LABEL_3:
    if (!v2)
      return;
    goto LABEL_4;
  }
LABEL_30:
  ures_close(v4);
  if (!v2)
    return;
LABEL_4:
  ures_close(v2);
}

void icu::MeasureUnitImpl::serialize(icu::MeasureUnitImpl *this, UErrorCode *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  char v8;
  int v9;
  _BYTE *v10;
  icu::StringPiece *v11;
  const char *v12;
  int v13;
  _BYTE v14[16];
  _BYTE v15[16];
  _BYTE v16[16];
  _BYTE v17[16];
  void *v18;
  int v19;
  __int16 v20;
  int v21;
  char *v22[7];
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    v4 = *((unsigned int *)this + 2);
    if ((_DWORD)v4)
    {
      if (*(_DWORD *)this == 1)
      {
        uprv_sortArray(*((_QWORD *)this + 2), v4, 8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_18BCFB8B8, 0, 0, (int *)a2);
        if (*(int *)a2 > 0)
          return;
        LODWORD(v4) = *((_DWORD *)this + 2);
      }
      memset(&v22[1], 0, 48);
      v5 = (char *)&v22[1] + 5;
      v22[0] = (char *)&v22[1] + 5;
      LODWORD(v22[1]) = 40;
      v23 = 0;
      if ((int)v4 >= 1)
      {
        v6 = 0;
        LOBYTE(v7) = 0;
        v8 = 1;
        while (1)
        {
          v9 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8 * v6) + 8);
          if ((v8 & 1) != 0 && v9 < 0)
          {
            v8 = 0;
            v7 = 1;
          }
          else
          {
            v7 = (v9 >= 0) & v7;
          }
          if (*(int *)a2 > 0)
            goto LABEL_29;
          if (*(_DWORD *)this == 2)
          {
            if ((_DWORD)v23)
            {
              v10 = v17;
              v11 = (icu::StringPiece *)v17;
              v12 = "-and-";
LABEL_23:
              icu::StringPiece::StringPiece(v11, v12);
              icu::CharString::append((icu::CharString *)v22, *(const char **)v10, *((_DWORD *)v10 + 2), a2);
            }
          }
          else
          {
            if (v7)
            {
              if ((_DWORD)v23)
              {
                v10 = v15;
                v11 = (icu::StringPiece *)v15;
                v12 = "-per-";
              }
              else
              {
                v10 = v16;
                v11 = (icu::StringPiece *)v16;
                v12 = "per-";
              }
              goto LABEL_23;
            }
            if ((_DWORD)v23)
            {
              v10 = v14;
              v11 = (icu::StringPiece *)v14;
              v12 = "-";
              goto LABEL_23;
            }
          }
          icu::SingleUnitImpl::appendNeutralIdentifier(*(icu::CharString **)(*((_QWORD *)this + 2) + 8 * v6++), (icu::CharString *)v22, a2);
          if (v6 >= *((int *)this + 2))
          {
            v5 = v22[0];
            v13 = v23;
            goto LABEL_27;
          }
        }
      }
      v13 = 0;
LABEL_27:
      v18 = (char *)&v20 + 1;
      v19 = 40;
      v20 = 0;
      v21 = 0;
      icu::CharString::append((icu::CharString *)&v18, v5, v13, a2);
      icu::CharString::operator=((uint64_t)this + 96, (uint64_t)&v18);
      if ((_BYTE)v20)
        uprv_free(v18);
LABEL_29:
      if (BYTE4(v22[1]))
        uprv_free(v22[0]);
    }
  }
}

uint64_t sub_18BCFAAFC(uint64_t a1, const char *a2, int a3, _DWORD *a4)
{
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = -1;
  if ((int)icu::BytesTrie::next((icu::BytesTrie *)a1, a2, a3) > 1)
    return icu::BytesTrie::readValue((icu::BytesTrie *)(*(_QWORD *)(a1 + 16) + 1), (const unsigned __int8 *)(**(unsigned __int8 **)(a1 + 16) >> 1));
  *a4 = 16;
  return 0xFFFFFFFFLL;
}

uint64_t icu::MeasureUnitImpl::takeReciprocal(uint64_t this, UErrorCode *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  *(_DWORD *)(this + 152) = 0;
  **(_BYTE **)(this + 96) = 0;
  v2 = *(unsigned int *)(this + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(uint64_t **)(this + 16);
    do
    {
      v4 = *v3++;
      *(_DWORD *)(v4 + 8) = -*(_DWORD *)(v4 + 8);
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t icu::MeasureUnitImpl::copyAndSimplify@<X0>(uint64_t this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t i;
  const icu::SingleUnitImpl *v7;
  uint64_t v8;
  int **v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 16) = a3 + 32;
  *(_DWORD *)(a3 + 24) = 8;
  *(_QWORD *)(a3 + 96) = a3 + 109;
  *(_DWORD *)(a3 + 104) = 40;
  *(_DWORD *)(a3 + 152) = 0;
  v4 = *(_DWORD *)(this + 8);
  if (v4 >= 1)
  {
    v5 = this;
    for (i = 0; i < v4; ++i)
    {
      v7 = *(const icu::SingleUnitImpl **)(*(_QWORD *)(v5 + 16) + 8 * i);
      v8 = *(unsigned int *)(a3 + 8);
      if ((int)v8 < 1)
      {
LABEL_8:
        this = icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)a3, v7, a2);
        v4 = *(_DWORD *)(v5 + 8);
      }
      else
      {
        v9 = *(int ***)(a3 + 16);
        v10 = qword_1EE009BE0;
        v11 = *(const char **)(qword_1EE009BE0 + 8 * *(int *)v7);
        while (1)
        {
          v12 = (uint64_t)*v9;
          this = strcmp(*(const char **)(v10 + 8 * **v9), v11);
          if (!(_DWORD)this && *(_DWORD *)(v12 + 4) == *((_DWORD *)v7 + 1))
            break;
          ++v9;
          if (!--v8)
            goto LABEL_8;
        }
        *(_DWORD *)(v12 + 8) += *((_DWORD *)v7 + 2);
      }
    }
  }
  return this;
}

unint64_t icu::SingleUnitImpl::forMeasureUnit(icu::SingleUnitImpl *this, const icu::MeasureUnit *a2, UErrorCode *a3, UErrorCode *a4)
{
  const icu::MeasureUnit *v5;
  unint64_t v6;
  uint64_t v7;
  int v9;
  _QWORD *v10;
  __int128 v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD v14[4];
  void *v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  memset(v14, 0, sizeof(v14));
  v11 = 0u;
  v12 = v14;
  v13 = 8;
  v15[0] = (char *)&v15[1] + 5;
  v15[1] = (void *)40;
  DWORD2(v18) = 0;
  v5 = icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v11, a2, a4);
  if (*(int *)a2 > 0 || (v9 = *((_DWORD *)v5 + 2)) == 0)
  {
    v6 = 0x1E00000000;
LABEL_3:
    v7 = 0xFFFFFFFFLL;
    goto LABEL_4;
  }
  if (v9 != 1)
  {
    *(_DWORD *)a2 = 1;
    v6 = 0x1E00000000;
    goto LABEL_3;
  }
  v10 = (_QWORD *)**((_QWORD **)v5 + 2);
  v6 = *v10 & 0xFFFFFFFF00000000;
  v7 = *v10;
LABEL_4:
  if (BYTE4(v15[1]))
    uprv_free(v15[0]);
  sub_18BC3ED98((uint64_t)&v11 + 8);
  return v6 | v7;
}

const icu::MeasureUnit *icu::MeasureUnitImpl::forMeasureUnit(icu::MeasureUnitImpl *this, const icu::MeasureUnit *a2, icu::MeasureUnitImpl *a3, UErrorCode *a4)
{
  const icu::MeasureUnit *result;
  char *Identifier;
  uint64_t v9[2];
  _BYTE v10[24];
  void *v11;
  int v12;
  int v13[22];
  void *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = (const icu::MeasureUnit *)*((_QWORD *)this + 1);
  if (!result)
  {
    Identifier = icu::MeasureUnit::getIdentifier(this);
    icu::StringPiece::StringPiece((icu::StringPiece *)v9, Identifier);
    sub_18BCFB3A8(v9[0], v9[1], (int *)a3, (uint64_t)v10);
    sub_18BCFB498((uint64_t)v10, (UErrorCode *)a3, (uint64_t)&v12);
    *(_DWORD *)a2 = v12;
    sub_18BCFC4E4((int *)a2 + 2, v13);
    icu::CharString::operator=((uint64_t)a2 + 96, (uint64_t)&v14);
    if (v15)
      uprv_free(v14);
    sub_18BC3ED98((uint64_t)v13);
    icu::BytesTrie::~BytesTrie(&v11);
    return a2;
  }
  return result;
}

uint64_t icu::SingleUnitImpl::build@<X0>(icu::SingleUnitImpl *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD v9[4];
  void *v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  memset(v9, 0, sizeof(v9));
  v6 = 0u;
  v7 = v9;
  v8 = 8;
  v10[0] = (char *)&v10[1] + 5;
  v10[1] = (void *)40;
  DWORD2(v13) = 0;
  icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)&v6, this, a2);
  icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v6, a2);
  icu::MeasureUnit::MeasureUnit(a3, &v6);
  if (BYTE4(v10[1]))
    uprv_free(v10[0]);
  return sub_18BC3ED98((uint64_t)&v6 + 8);
}

uint64_t icu::MeasureUnitImpl::appendSingleUnit(icu::MeasureUnitImpl *this, const icu::SingleUnitImpl *a2, UErrorCode *a3)
{
  const void **v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t result;

  *((_DWORD *)this + 38) = 0;
  **((_BYTE **)this + 12) = 0;
  if (*(_DWORD *)a2 == -1)
    return 0;
  v6 = (const void **)((char *)this + 8);
  if (*((int *)this + 2) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(int **)(*((_QWORD *)this + 2) + 8 * v7);
      if (!sub_18BCFC63C(v9, (int *)a2))
        v8 = v9;
      ++v7;
    }
    while (v7 < *((int *)this + 2));
    if (v8)
    {
      result = 0;
      v8[2] += *((_DWORD *)a2 + 2);
      return result;
    }
  }
  if (*(int *)a3 > 0)
    return 0;
  result = (uint64_t)sub_18BCF9DBC(v6, (unint64_t)a2);
  if (*(int *)a3 <= 0 && !result)
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  if (*(int *)a3 > 0)
    return 0;
  if (*(int *)v6 < 2)
    return 1;
  result = 1;
  if (!*(_DWORD *)this)
    *(_DWORD *)this = 1;
  return result;
}

uint64_t icu::MeasureUnitImpl::build@<X0>(icu::MeasureUnitImpl *a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  icu::MeasureUnitImpl::serialize(a1, a2);
  return icu::MeasureUnit::MeasureUnit(a3, a1);
}

uint64_t icu::SingleUnitImpl::getSimpleUnitID(icu::SingleUnitImpl *this)
{
  return *(_QWORD *)(qword_1EE009BE0 + 8 * *(int *)this);
}

icu::CharString *icu::SingleUnitImpl::appendNeutralIdentifier(icu::CharString *this, icu::CharString *a2, UErrorCode *a3)
{
  icu::CharString *v5;
  int v6;
  unsigned int v7;
  const char *v8;
  _BYTE *v9;
  icu::StringPiece *v10;
  int v11;
  uint64_t v12;
  UErrorCode v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  _BYTE v18[16];
  char *v19;
  int v20;
  _BYTE v21[16];
  _BYTE v22[16];

  v5 = this;
  v6 = *((_DWORD *)this + 2);
  if (v6 >= 0)
    v7 = *((_DWORD *)this + 2);
  else
    v7 = -v6;
  if (v7 != 1)
  {
    if (v7 == 3)
    {
      v8 = "cubic-";
      v9 = v21;
      v10 = (icu::StringPiece *)v21;
    }
    else if (v7 == 2)
    {
      v8 = "square-";
      v9 = v22;
      v10 = (icu::StringPiece *)v22;
    }
    else
    {
      if (v7 > 0xF)
      {
        v13 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_19:
        *a3 = v13;
        return this;
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "pow");
      icu::CharString::append(a2, v19, v20, a3);
      icu::CharString::appendNumber(a2, v7, a3);
      v8 = "-";
      v9 = v18;
      v10 = (icu::StringPiece *)v18;
    }
    icu::StringPiece::StringPiece(v10, v8);
    this = icu::CharString::append(a2, *(const char **)v9, *((_DWORD *)v9 + 2), a3);
  }
  if (*(int *)a3 <= 0)
  {
    v11 = *((_DWORD *)v5 + 1);
    if (v11 != 30)
    {
      v12 = 0;
      while (LODWORD((&off_1E2261B80)[v12 + 1]) != v11)
      {
        v12 += 2;
        if (v12 == 56)
        {
          v13 = U_UNSUPPORTED_ERROR;
          goto LABEL_19;
        }
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v16, (&off_1E2261B80)[v12]);
      icu::CharString::append(a2, v16, v17, a3);
    }
    icu::StringPiece::StringPiece((icu::StringPiece *)&v14, *(const char **)(qword_1EE009BE0 + 8 * *(int *)v5));
    return icu::CharString::append(a2, v14, v15, a3);
  }
  return this;
}

uint64_t icu::SingleUnitImpl::getUnitCategoryIndex(icu::SingleUnitImpl *this)
{
  return *(unsigned int *)(qword_1EE009BE8 + 4 * *(int *)this);
}

icu::MeasureUnitImpl *icu::MeasureUnitImpl::MeasureUnitImpl(icu::MeasureUnitImpl *this, const icu::SingleUnitImpl *a2, UErrorCode *a3)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = (char *)this + 32;
  *((_DWORD *)this + 6) = 8;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 12) = (char *)this + 109;
  *((_DWORD *)this + 26) = 40;
  *((_WORD *)this + 54) = 0;
  *((_DWORD *)this + 38) = 0;
  icu::MeasureUnitImpl::appendSingleUnit(this, a2, a3);
  return this;
}

{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_QWORD *)this + 2) = (char *)this + 32;
  *((_DWORD *)this + 6) = 8;
  *((_BYTE *)this + 28) = 0;
  *((_QWORD *)this + 12) = (char *)this + 109;
  *((_DWORD *)this + 26) = 40;
  *((_WORD *)this + 54) = 0;
  *((_DWORD *)this + 38) = 0;
  icu::MeasureUnitImpl::appendSingleUnit(this, a2, a3);
  return this;
}

void icu::MeasureUnitImpl::forIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v6[24];
  void *v7;

  sub_18BCFB3A8(a1, a2, a3, (uint64_t)v6);
  sub_18BCFB498((uint64_t)v6, (UErrorCode *)a3, a4);
  icu::BytesTrie::~BytesTrie(&v7);
}

void sub_18BCFB3A8(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  void *v9;

  if (*a3 >= 1)
    goto LABEL_8;
  v8 = atomic_load(&dword_1EE009BF0);
  if (v8 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009BF0))
  {
    if (dword_1EE009BF4 >= 1)
    {
      *a3 = dword_1EE009BF4;
      goto LABEL_8;
    }
  }
  else
  {
    sub_18BCFA260(a3);
    dword_1EE009BF4 = *a3;
    icu::umtx_initImplPostInit(&dword_1EE009BF0);
  }
  if (*a3 < 1)
  {
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = a1;
    *(_QWORD *)(a4 + 16) = a2;
    v9 = (void *)qword_1EE009BF8;
    goto LABEL_9;
  }
LABEL_8:
  *(_DWORD *)a4 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)(a4 + 8), "");
  v9 = &unk_18BE35972;
LABEL_9:
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v9;
  *(_DWORD *)(a4 + 48) = -1;
  *(_BYTE *)(a4 + 56) = 0;
}

uint64_t sub_18BCFB498@<X0>(uint64_t result@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;

  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 16) = a3 + 32;
  *(_DWORD *)(a3 + 24) = 8;
  *(_QWORD *)(a3 + 96) = a3 + 109;
  *(_DWORD *)(a3 + 104) = 40;
  *(_DWORD *)(a3 + 152) = 0;
  if (*(int *)a2 <= 0)
  {
    v4 = result;
    v5 = *(_DWORD *)(result + 16);
    if (v5)
    {
      v6 = *(_DWORD *)result;
      if (*(_DWORD *)result < v5)
      {
        while (1)
        {
          v17 = 0;
          v16 = 0;
          result = sub_18BCFC42C((int *)v4, a2);
          if (*(int *)a2 > 0)
            return result;
          v8 = result & 0xFFFFFFC0;
          if (v6)
            break;
          if (v8 == 192)
          {
            *(_BYTE *)(v4 + 56) = 1;
            result = sub_18BCFC42C((int *)v4, a2);
            if (*(int *)a2 >= 1)
              return result;
            v9 = 0;
            v10 = -1;
          }
          else
          {
            v9 = 0;
            v10 = 1;
          }
LABEL_24:
          v11 = 0;
          v12 = 30;
          while ((int)result < 128)
          {
            if (v11 > 1)
              goto LABEL_49;
            v12 = (result - 64);
            v11 = 2;
LABEL_32:
            if (*(_DWORD *)v4 >= *(_DWORD *)(v4 + 16))
              goto LABEL_49;
            result = sub_18BCFC42C((int *)v4, a2);
            if (*(int *)a2 >= 1)
              return result;
          }
          if (result < 0x100)
            goto LABEL_49;
          if (result <= 0x1FF)
          {
            if (v11)
              goto LABEL_49;
            v10 *= (char)result;
            v11 = 1;
            goto LABEL_32;
          }
          v16 = (result - 512) | (unint64_t)(v12 << 32);
          v17 = v10;
          result = icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)a3, (const icu::SingleUnitImpl *)&v16, a2);
          if (*(int *)a2 > 0)
            return result;
          if (v9)
            v13 = result;
          else
            v13 = 1;
          if (v13 != 1)
            goto LABEL_49;
          v14 = *(_DWORD *)(a3 + 8);
          if (v14 < 2)
            goto LABEL_47;
          if (v9)
            v15 = 2;
          else
            v15 = 1;
          if (v14 == 2)
          {
            *(_DWORD *)a3 = v15;
            goto LABEL_47;
          }
          if (*(_DWORD *)a3 != v15)
          {
LABEL_49:
            *a2 = U_ILLEGAL_ARGUMENT_ERROR;
            return result;
          }
LABEL_47:
          v6 = *(_DWORD *)v4;
          if (*(_DWORD *)v4 >= *(_DWORD *)(v4 + 16))
            return result;
        }
        if (v8 != 128)
          goto LABEL_49;
        switch((_DWORD)result)
        {
          case 0x82:
            if (*(_BYTE *)(v4 + 56))
              goto LABEL_49;
            v9 = 1;
            break;
          case 0x81:
            v9 = 0;
            if (*(_BYTE *)(v4 + 56))
              v10 = -1;
            else
              v10 = 1;
LABEL_23:
            result = sub_18BCFC42C((int *)v4, a2);
            if (*(int *)a2 > 0)
              return result;
            goto LABEL_24;
          case 0x80:
            v9 = 0;
            *(_BYTE *)(v4 + 56) = 1;
            v10 = -1;
            goto LABEL_23;
          default:
            v9 = 0;
            break;
        }
        v10 = 1;
        goto LABEL_23;
      }
    }
  }
  return result;
}

void icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(icu::MeasureUnitImpl **this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  char *Identifier;
  uint64_t v7[2];
  _BYTE v8[24];
  void *v9;

  if (this[1])
  {
    icu::MeasureUnitImpl::copy(this[1], a2, a3);
  }
  else
  {
    Identifier = icu::MeasureUnit::getIdentifier((icu::MeasureUnit *)this);
    icu::StringPiece::StringPiece((icu::StringPiece *)v7, Identifier);
    sub_18BCFB3A8(v7[0], v7[1], (int *)a2, (uint64_t)v8);
    sub_18BCFB498((uint64_t)v8, a2, a3);
    icu::BytesTrie::~BytesTrie(&v9);
  }
}

int *icu::MeasureUnitImpl::extractIndividualUnitsWithIndices@<X0>(int *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  int *v4;
  int v6;
  BOOL v7;
  int v9;
  int v10;

  v4 = this;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 8) = a3 + 24;
  *(_DWORD *)(a3 + 16) = 8;
  if (*this == 2)
  {
    v9 = 0;
    if (this[2] >= 1)
    {
      v6 = 0;
      v7 = *a2 < U_ILLEGAL_ARGUMENT_ERROR;
      while (v7)
      {
        this = (int *)sub_18BCFC810((unsigned int *)a3, &v9, *(const icu::SingleUnitImpl **)(*((_QWORD *)v4 + 2) + 8 * v6), a2);
        if (*(int *)a2 <= 0 && this == 0)
          goto LABEL_15;
        if (*(int *)a2 <= 0)
        {
          v6 = v9 + 1;
          v9 = v6;
          v7 = 1;
          if (v6 < v4[2])
            continue;
        }
        return this;
      }
    }
  }
  else
  {
    v10 = 0;
    if (*(int *)a2 <= 0)
    {
      this = (int *)sub_18BCFC704((unsigned int *)a3, &v10, (icu::MeasureUnitImpl *)this, a2);
      if (*(int *)a2 <= 0 && !this)
LABEL_15:
        *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  return this;
}

uint64_t sub_18BCFB8B8(uint64_t a1, int **a2, int **a3)
{
  return sub_18BCFC63C(*a2, *a3);
}

void icu::MeasureUnit::forIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  _BYTE v6[24];
  void *v7;
  _BYTE v8[8];
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  sub_18BCFB3A8(a1, a2, a3, (uint64_t)v6);
  sub_18BCFB498((uint64_t)v6, (UErrorCode *)a3, (uint64_t)v8);
  icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)v8, (UErrorCode *)a3);
  icu::MeasureUnit::MeasureUnit(a4, v8);
  if (v11)
    uprv_free(v10);
  sub_18BC3ED98((uint64_t)&v9);
  icu::BytesTrie::~BytesTrie(&v7);
}

uint64_t icu::MeasureUnit::getComplexity(icu::MeasureUnit *this, UErrorCode *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v4;
  __int128 v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD v9[4];
  void *v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  memset(v9, 0, sizeof(v9));
  v6 = 0u;
  v7 = v9;
  v8 = 8;
  v10[0] = (char *)&v10[1] + 5;
  v10[1] = (void *)40;
  DWORD2(v13) = 0;
  v4 = *(unsigned int *)icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v6, (icu::MeasureUnitImpl *)a2, a4);
  if (BYTE4(v10[1]))
    uprv_free(v10[0]);
  sub_18BC3ED98((uint64_t)&v6 + 8);
  return v4;
}

unint64_t icu::MeasureUnit::getPrefix(icu::MeasureUnit *this, UErrorCode *a2, UErrorCode *a3, UErrorCode *a4)
{
  return icu::SingleUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)a2, a3, a4) >> 32;
}

uint64_t icu::MeasureUnit::withPrefix@<X0>(icu::MeasureUnit *a1@<X2>, icu::SingleUnitImpl *a2@<X0>, int a3@<W1>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  _DWORD v10[4];

  v10[0] = icu::SingleUnitImpl::forMeasureUnit(a2, a1, (UErrorCode *)a1, a4);
  v10[1] = a3;
  v10[2] = v8;
  return icu::SingleUnitImpl::build((icu::SingleUnitImpl *)v10, (UErrorCode *)a1, a5);
}

uint64_t icu::MeasureUnit::getDimensionality(icu::MeasureUnit *this, UErrorCode *a2, UErrorCode *a3, UErrorCode *a4)
{
  unsigned int v5;

  if (icu::SingleUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)a2, a3, a4) != -1
    && *a2 <= U_ZERO_ERROR)
  {
    return v5;
  }
  else
  {
    return 0;
  }
}

uint64_t icu::MeasureUnit::withDimensionality@<X0>(icu::MeasureUnit *this@<X0>, UErrorCode *a2@<X2>, int a3@<W1>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  int v10;

  v9 = icu::SingleUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)a2, a2, a4);
  v10 = a3;
  return icu::SingleUnitImpl::build((icu::SingleUnitImpl *)&v9, a2, a5);
}

uint64_t icu::MeasureUnit::reciprocal@<X0>(icu::MeasureUnitImpl **this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  void *v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(this, a2, (uint64_t)&v9);
  DWORD2(v18) = 0;
  *(_BYTE *)v15[0] = 0;
  v5 = DWORD2(v9);
  if (SDWORD2(v9) >= 1)
  {
    v6 = (uint64_t *)v10;
    do
    {
      v7 = *v6++;
      *(_DWORD *)(v7 + 8) = -*(_DWORD *)(v7 + 8);
      --v5;
    }
    while (v5);
  }
  icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)&v9, a2);
  icu::MeasureUnit::MeasureUnit(a3, &v9);
  if (BYTE4(v15[1]))
    uprv_free(v15[0]);
  return sub_18BC3ED98((uint64_t)&v9 + 8);
}

uint64_t icu::MeasureUnit::product@<X0>(icu::MeasureUnitImpl **this@<X0>, const icu::MeasureUnit *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  UErrorCode *v7;
  const icu::MeasureUnit *v8;
  const icu::MeasureUnit *v9;
  uint64_t v10;
  __int128 v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD v15[4];
  void *v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[6];
  void *v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  memset(v20, 0, sizeof(v20));
  icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(this, a3, (uint64_t)v20);
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  memset(v15, 0, sizeof(v15));
  v12 = 0u;
  v13 = v15;
  v14 = 8;
  v16[0] = (char *)&v16[1] + 5;
  v16[1] = (void *)40;
  DWORD2(v19) = 0;
  v8 = icu::MeasureUnitImpl::forMeasureUnit(a2, (const icu::MeasureUnit *)&v12, (icu::MeasureUnitImpl *)a3, v7);
  if (LODWORD(v20[0]) == 2 || (v9 = v8, *(_DWORD *)v8 == 2))
  {
    *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    icu::MeasureUnit::MeasureUnit(a4);
  }
  else
  {
    if (*((int *)v8 + 2) >= 1)
    {
      v10 = 0;
      do
        icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)v20, *(const icu::SingleUnitImpl **)(*((_QWORD *)v9 + 2) + 8 * v10++), a3);
      while (v10 < *((int *)v9 + 2));
    }
    if (SDWORD2(v20[0]) > 1)
      LODWORD(v20[0]) = 1;
    icu::MeasureUnitImpl::serialize((icu::MeasureUnitImpl *)v20, a3);
    icu::MeasureUnit::MeasureUnit(a4, v20);
  }
  if (BYTE4(v16[1]))
    uprv_free(v16[0]);
  sub_18BC3ED98((uint64_t)&v12 + 8);
  if (BYTE4(v21[1]))
    uprv_free(v21[0]);
  return sub_18BC3ED98((uint64_t)v20 + 8);
}

uint64_t icu::MeasureUnit::splitToSingleUnitsImpl@<X0>(icu::MeasureUnit *this@<X0>, int *a2@<X1>, UErrorCode *a3@<X2>, UErrorCode *a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v8;
  const icu::MeasureUnit *v9;
  unint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];
  __int128 v21;
  _OWORD *v22;
  uint64_t v23;
  _OWORD v24[4];
  void *v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  memset(v24, 0, sizeof(v24));
  v21 = 0u;
  v22 = v24;
  v23 = 8;
  v25[0] = (char *)&v25[1] + 5;
  v25[1] = (void *)40;
  DWORD2(v28) = 0;
  v9 = icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v21, (icu::MeasureUnitImpl *)a3, a4);
  v10 = *((int *)v9 + 2);
  *a2 = v10;
  v11 = !is_mul_ok(v10, 0x18uLL);
  if (24 * v10 >= 0xFFFFFFFFFFFFFFF0)
    v11 = 1;
  if (v11)
    v12 = -1;
  else
    v12 = 24 * v10 + 16;
  v13 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v12, v8);
  if (v13)
  {
    *v13 = 24;
    v13[1] = v10;
    v14 = v13 + 2;
    if ((_DWORD)v10)
    {
      v15 = 24 * v10;
      v16 = (uint64_t)(v13 + 2);
      do
      {
        v16 = icu::MeasureUnit::MeasureUnit(v16) + 24;
        v15 -= 24;
      }
      while (v15);
    }
    if (*a2 >= 1)
    {
      v17 = 0;
      v18 = (uint64_t)v14;
      do
      {
        icu::SingleUnitImpl::build(*(icu::SingleUnitImpl **)(*((_QWORD *)v9 + 2) + 8 * v17), a3, (uint64_t)v20);
        icu::MeasureUnit::operator=(v18, (uint64_t)v20);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v20);
        ++v17;
        v18 += 24;
      }
      while (v17 < *a2);
    }
  }
  else
  {
    v14 = 0;
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  *a5 = v14;
  if (BYTE4(v25[1]))
    uprv_free(v25[0]);
  return sub_18BC3ED98((uint64_t)&v21 + 8);
}

uint64_t sub_18BCFBF58()
{
  uprv_free((void *)qword_1EE009BC8);
  qword_1EE009BC8 = 0;
  uprv_free((void *)qword_1EE009BD8);
  qword_1EE009BD8 = 0;
  uprv_free((void *)qword_1EE009BF8);
  qword_1EE009BF8 = 0;
  uprv_free((void *)qword_1EE009BE8);
  qword_1EE009BE8 = 0;
  uprv_free((void *)qword_1EE009BE0);
  qword_1EE009BE0 = 0;
  atomic_store(0, &dword_1EE009BF0);
  return 1;
}

void sub_18BCFBFD8(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BCFBFEC(uint64_t a1, uint64_t a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  _QWORD *result;
  int v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  int v14;
  char *__s;
  _OWORD v16[2];
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 80))(v18, a3, a5);
  if (*(int *)a5 <= 0)
  {
    if ((int)v19 + *(_DWORD *)(a1 + 32) <= **(_DWORD **)(a1 + 16))
    {
      result = (_QWORD *)icu::ResourceArray::getValue((icu::ResourceArray *)v18, 0, a3);
      if ((_DWORD)result)
      {
        v10 = 1;
        do
        {
          v17 = 0;
          memset(v16, 0, sizeof(v16));
          result = (*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v16, a3, a5);
          if (*(int *)a5 > 0)
            break;
          if ((_DWORD)v17 != 1)
          {
            v9 = 3;
            goto LABEL_4;
          }
          __s = 0;
          icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v16, 0, (const char **)&__s, a3);
          v14 = 0;
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(a1 + 32)) = (*(uint64_t (**)(icu::ResourceValue *, int *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v14, a5);
          v11 = *(_QWORD *)(a1 + 24);
          icu::StringPiece::StringPiece((icu::StringPiece *)&v12, __s);
          icu::BytesTrieBuilder::add(v11, v12, v13, *(_DWORD *)(a1 + 32), a5);
          ++*(_DWORD *)(a1 + 32);
          result = (_QWORD *)icu::ResourceArray::getValue((icu::ResourceArray *)v18, v10++, a3);
        }
        while ((_DWORD)result);
      }
    }
    else
    {
      v9 = 8;
LABEL_4:
      *a5 = v9;
    }
  }
  return result;
}

void sub_18BCFC160(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BCFC174(uint64_t a1, uint64_t a2, icu::ResourceValue *a3, uint64_t a4, UErrorCode *a5)
{
  unsigned __int8 *v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  UChar *v12;
  int v13;
  int32_t v15;
  _OWORD v16[2];
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  char *__s1;
  void *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  void *v27[7];
  int v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v25, a3, a5);
  if (*(int *)a5 > 0)
    return;
  if ((int)v26 + *(_DWORD *)(a1 + 64) > *(_DWORD *)(a1 + 24))
  {
    *a5 = U_INDEX_OUTOFBOUNDS_ERROR;
    return;
  }
  v8 = *(unsigned __int8 **)(a1 + 48);
  v21 = 0;
  v22 = v8;
  v23 = v8;
  v24 = 0xFFFFFFFFLL;
  __s1 = 0;
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v25, 0, (const char **)&__s1, a3))
    goto LABEL_19;
  v9 = 1;
  while (1)
  {
    v10 = __s1;
    if (!strcmp(__s1, "kilogram"))
      goto LABEL_16;
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(int *)(a1 + 64)) = v10;
    v11 = *(_QWORD *)(a1 + 32);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v18, __s1);
    icu::BytesTrieBuilder::add(v11, v18, v19, *(_DWORD *)(a1 + 64) + *(_DWORD *)(a1 + 40), a5);
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    (*(void (**)(_OWORD *__return_ptr, icu::ResourceValue *, UErrorCode *))(*(_QWORD *)a3 + 88))(v16, a3, a5);
    if (*(int *)a5 > 0)
      goto LABEL_19;
    if (!icu::ResourceTable::findValue((icu::ResourceTable *)v16, "target", a3))
      break;
    v15 = 0;
    v12 = (UChar *)(*(uint64_t (**)(icu::ResourceValue *, int32_t *, UErrorCode *))(*(_QWORD *)a3 + 32))(a3, &v15, a5);
    v29 = 0;
    memset(&v27[1], 0, 48);
    v27[0] = (char *)&v27[1] + 5;
    LODWORD(v27[1]) = 40;
    v28 = 0;
    icu::CharString::appendInvariantChars((int *)v27, v12, v15, a5);
    v13 = 0;
    if (*(int *)a5 <= 0)
    {
      v23 = v22;
      LODWORD(v24) = -1;
      if ((int)icu::BytesTrie::next((icu::BytesTrie *)&v21, (const char *)v27[0], v28) <= 1)
      {
        v13 = 0;
        *a5 = U_INVALID_FORMAT_ERROR;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * (int)(*(_DWORD *)(a1 + 64))++) = icu::BytesTrie::readValue((icu::BytesTrie *)(v23 + 1), (const unsigned __int8 *)(*v23 >> 1));
        v13 = 1;
      }
    }
    if (BYTE4(v27[1]))
      uprv_free(v27[0]);
    if (!v13)
      goto LABEL_19;
LABEL_16:
    if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v25, v9++, (const char **)&__s1, a3))
      goto LABEL_19;
  }
  *a5 = U_INVALID_FORMAT_ERROR;
LABEL_19:
  icu::BytesTrie::~BytesTrie(&v21);
}

uint64_t sub_18BCFC42C(int *a1, _DWORD *a2)
{
  icu::BytesTrie *v4;
  uint64_t Value;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;

  v4 = (icu::BytesTrie *)(a1 + 6);
  *((_QWORD *)a1 + 5) = *((_QWORD *)a1 + 4);
  Value = 0xFFFFFFFFLL;
  a1[12] = -1;
  v6 = -1;
  while (1)
  {
    v7 = *a1;
    if ((int)v7 >= a1[4])
      break;
    v8 = *((_QWORD *)a1 + 1);
    *a1 = v7 + 1;
    v9 = icu::BytesTrie::next(v4, *(char *)(v8 + v7));
    if (v9 != 1)
    {
      v10 = v9;
      if (!v9)
        break;
      Value = icu::BytesTrie::readValue((icu::BytesTrie *)(*((_QWORD *)a1 + 5) + 1), (const unsigned __int8 *)(**((unsigned __int8 **)a1 + 5) >> 1));
      v6 = *a1;
      if (v10 == 2)
        break;
    }
  }
  if ((Value & 0x80000000) != 0)
    *a2 = 1;
  else
    *a1 = v6;
  return Value;
}

int *sub_18BCFC4E4(int *a1, int *a2)
{
  int v4;
  int *v5;
  int v6;
  void *v7;
  int *v8;
  int *v10;
  _OWORD v11[4];
  uint64_t v12;

  v4 = *a1;
  *a1 = *a2;
  *a2 = v4;
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  v5 = (int *)*((_QWORD *)a1 + 1);
  v10 = v5;
  LODWORD(v11[0]) = a1[4];
  v6 = *((unsigned __int8 *)a1 + 20);
  BYTE4(v11[0]) = *((_BYTE *)a1 + 20);
  v7 = a1 + 6;
  if (v5 == a1 + 6)
  {
    v10 = (int *)v11 + 2;
    memcpy((char *)v11 + 8, v5, 8 * a1[4]);
    if (v6)
      uprv_free(v5);
  }
  else
  {
    *((_QWORD *)a1 + 1) = v7;
    a1[4] = 8;
    *((_BYTE *)a1 + 20) = 0;
  }
  a1[4] = a2[4];
  *((_BYTE *)a1 + 20) = *((_BYTE *)a2 + 20);
  v8 = (int *)*((_QWORD *)a2 + 1);
  if (v8 == a2 + 6)
  {
    *((_QWORD *)a1 + 1) = v7;
    memcpy(v7, v8, 8 * a2[4]);
    if (*((_BYTE *)a2 + 20))
      uprv_free(*((void **)a2 + 1));
  }
  else
  {
    *((_QWORD *)a1 + 1) = v8;
  }
  a2[4] = v11[0];
  *((_BYTE *)a2 + 20) = BYTE4(v11[0]);
  if (v10 == (int *)((char *)v11 + 8))
  {
    *((_QWORD *)a2 + 1) = a2 + 6;
    memcpy(a2 + 6, (char *)v11 + 8, 8 * SLODWORD(v11[0]));
    if (BYTE4(v11[0]))
      uprv_free((char *)v11 + 8);
  }
  else
  {
    *((_QWORD *)a2 + 1) = v10;
  }
  return a1;
}

uint64_t sub_18BCFC63C(int *a1, int *a2)
{
  int v2;
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v18;

  v2 = a1[2];
  v3 = a2[2];
  if (v2 < 0 && v3 > 0)
    return 1;
  if (v2 >= 1 && v3 < 0)
    return 0xFFFFFFFFLL;
  v5 = *a1;
  v6 = *(_DWORD *)(qword_1EE009BE8 + 4 * v5);
  v7 = *a2;
  v8 = *(_DWORD *)(qword_1EE009BE8 + 4 * v7);
  if (v6 < v8)
    return 0xFFFFFFFFLL;
  if (v6 > v8)
    return 1;
  if ((int)v5 < (int)v7)
    return 0xFFFFFFFFLL;
  if ((int)v5 > (int)v7)
    return 1;
  v9 = a1[1];
  v10 = v9 + 51;
  v11 = a2[1];
  v12 = v11 + 59;
  v13 = 3 * v9 + 180;
  v14 = v9 - 30;
  if (v10 >= 0xFFFFFFF8)
    v14 = v13;
  v15 = 3 * v11 + 180;
  v16 = v11 - 30;
  if (v12 < 8)
    v16 = v15;
  if (v14 < v16)
    return 1;
  if (v14 > v16)
    return 0xFFFFFFFFLL;
  if (v10 <= 0xFFFFFFF7 && v12 < 8)
    return 1;
  v18 = v10 > 0xFFFFFFF7 && v12 > 7;
  return (v18 << 31 >> 31);
}

uint64_t *sub_18BCFC704(unsigned int *a1, _DWORD *a2, icu::MeasureUnitImpl *a3, UErrorCode *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;

  v8 = a1[4];
  v9 = *a1;
  if ((_DWORD)v9 != v8)
  {
LABEL_16:
    v14 = icu::UMemory::operator new((uint64_t *)v9, (icu::UMemory *)0xA8, (unint64_t)a2);
    v12 = v14;
    if (v14)
    {
      *(_DWORD *)v14 = *a2;
      icu::MeasureUnitImpl::copy(a3, a4, (uint64_t)(v14 + 1));
    }
    v15 = (int)*a1;
    *a1 = v15 + 1;
    *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v15) = v12;
    return v12;
  }
  if (v8 == 8)
    v10 = 32;
  else
    v10 = 2 * v8;
  if (v10 < 1)
    return 0;
  v11 = (uint64_t *)uprv_malloc(8 * v10);
  v12 = v11;
  if (v11)
  {
    if (v8 >= 1)
    {
      v13 = a1[4];
      if (v13 >= v8)
        v13 = v8;
      if (v13 >= v10)
        v13 = v10;
      memcpy(v11, *((const void **)a1 + 1), 8 * v13);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v12;
    a1[4] = v10;
    v9 = 1;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v12;
}

uint64_t *sub_18BCFC810(unsigned int *a1, _DWORD *a2, const icu::SingleUnitImpl *a3, UErrorCode *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;

  v8 = a1[4];
  v9 = *a1;
  if ((_DWORD)v9 != v8)
  {
LABEL_16:
    v14 = icu::UMemory::operator new((uint64_t *)v9, (icu::UMemory *)0xA8, (unint64_t)a2);
    v12 = v14;
    if (v14)
    {
      *(_DWORD *)v14 = *a2;
      *((_DWORD *)v14 + 2) = 0;
      *((_DWORD *)v14 + 4) = 0;
      v14[3] = (uint64_t)(v14 + 5);
      *((_DWORD *)v14 + 8) = 8;
      *((_BYTE *)v14 + 36) = 0;
      v14[13] = (uint64_t)v14 + 117;
      *((_DWORD *)v14 + 28) = 40;
      *((_WORD *)v14 + 58) = 0;
      *((_DWORD *)v14 + 40) = 0;
      icu::MeasureUnitImpl::appendSingleUnit((icu::MeasureUnitImpl *)(v14 + 1), a3, a4);
    }
    v15 = (int)*a1;
    *a1 = v15 + 1;
    *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v15) = v12;
    return v12;
  }
  if (v8 == 8)
    v10 = 32;
  else
    v10 = 2 * v8;
  if (v10 < 1)
    return 0;
  v11 = (uint64_t *)uprv_malloc(8 * v10);
  v12 = v11;
  if (v11)
  {
    if (v8 >= 1)
    {
      v13 = a1[4];
      if (v13 >= v8)
        v13 = v8;
      if (v13 >= v10)
        v13 = v10;
      memcpy(v11, *((const void **)a1 + 1), 8 * v13);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v12;
    a1[4] = v10;
    v9 = 1;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v12;
}

void *icu::Measure::getStaticClassID(icu::Measure *this)
{
  return &unk_1EE009C00;
}

void *icu::Measure::getDynamicClassID(icu::Measure *this)
{
  return &unk_1EE009C00;
}

icu::Measure *icu::Measure::Measure(icu::Measure *this)
{
  *(_QWORD *)this = off_1E2261DE0;
  icu::Formattable::Formattable((icu::Measure *)((char *)this + 8));
  *((_QWORD *)this + 15) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E2261DE0;
  icu::Formattable::Formattable((icu::Measure *)((char *)this + 8));
  *((_QWORD *)this + 15) = 0;
  return this;
}

icu::Measure *icu::Measure::Measure(icu::Measure *this, const icu::Formattable *a2, icu::MeasureUnit *a3, UErrorCode *a4)
{
  icu::Formattable *v7;
  int isNumeric;

  *(_QWORD *)this = off_1E2261DE0;
  v7 = (icu::Formattable *)icu::Formattable::Formattable((icu::Measure *)((char *)this + 8), a2);
  *((_QWORD *)this + 15) = a3;
  if (*(int *)a4 <= 0)
  {
    isNumeric = icu::Formattable::isNumeric(v7);
    if (!a3 || !isNumeric)
      *a4 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return this;
}

uint64_t icu::Measure::Measure(icu::Measure *this, const icu::Measure *a2)
{
  *(_QWORD *)this = off_1E2261DE0;
  icu::Formattable::Formattable((icu::Measure *)((char *)this + 8));
  *((_QWORD *)this + 15) = 0;
  return icu::Measure::operator=((uint64_t)this, (uint64_t)a2);
}

{
  *(_QWORD *)this = off_1E2261DE0;
  icu::Formattable::Formattable((icu::Measure *)((char *)this + 8));
  *((_QWORD *)this + 15) = 0;
  return icu::Measure::operator=((uint64_t)this, (uint64_t)a2);
}

uint64_t icu::Measure::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a1 + 120);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    icu::Formattable::operator=(a1 + 8, a2 + 8);
    v5 = *(_QWORD *)(a2 + 120);
    if (v5)
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    *(_QWORD *)(a1 + 120) = v5;
  }
  return a1;
}

uint64_t icu::Measure::clone@<X0>(icu::Measure *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x80, a2);
  v5 = (uint64_t)v4;
  if (v4)
  {
    *v4 = (uint64_t)off_1E2261DE0;
    icu::Formattable::Formattable((icu::Formattable *)(v4 + 1));
    *(_QWORD *)(v5 + 120) = 0;
    icu::Measure::operator=(v5, (uint64_t)this);
  }
  return v5;
}

void icu::Measure::~Measure(icu::Measure *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2261DE0;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::Formattable::~Formattable((icu::Measure *)((char *)this + 8));
  icu::UObject::~UObject(this);
}

{
  void *v1;

  icu::Measure::~Measure(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::Measure::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1 == a2)
    return 1;
  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*a1 - 8), *(_QWORD *)(*a2 - 8));
  if ((_DWORD)result)
  {
    result = icu::Formattable::operator==(a1 + 1, a2 + 1);
    if ((_DWORD)result)
    {
      v5 = a1[15];
      v6 = a2[15];
      result = (v5 == 0) == (v6 == 0);
      if (v5)
      {
        if (v6)
          return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 32))(a1[15]);
      }
    }
  }
  return result;
}

void *icu::MessageFormat::getStaticClassID(icu::MessageFormat *this)
{
  return &unk_1EE009C01;
}

void *icu::MessageFormat::getDynamicClassID(icu::MessageFormat *this)
{
  return &unk_1EE009C01;
}

void *sub_18BCFCC7C()
{
  return &unk_1EE009C02;
}

icu::MessageFormat *icu::MessageFormat::MessageFormat(icu::MessageFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  icu::Locale *v6;
  icu::Locale *v7;
  uint64_t *Default;

  v6 = (icu::Locale *)icu::Format::Format((uint64_t)this);
  *(_QWORD *)v6 = off_1E2261E28;
  v7 = (icu::Locale *)((char *)v6 + 328);
  Default = icu::Locale::getDefault(v6);
  icu::Locale::Locale(v7, (uint64_t)Default);
  icu::MessagePattern::MessagePattern((icu::MessageFormat *)((char *)this + 552), a3);
  *((_QWORD *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_BYTE *)this + 712) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 94) = off_1E2262010;
  *((_QWORD *)this + 95) = this;
  *((_QWORD *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((_QWORD *)this + 98) = off_1E2262010;
  *((_QWORD *)this + 99) = this;
  *((_QWORD *)this + 100) = 0;
  *((_DWORD *)this + 202) = 1;
  icu::Format::setLocaleIDs(this, *((const char **)this + 46), *((const char **)this + 46));
  (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, UErrorCode *))(*(_QWORD *)this + 80))(this, a2, a3);
  return this;
}

uint64_t icu::MessageFormat::PluralSelectorProvider::PluralSelectorProvider(uint64_t result, uint64_t a2, int a3)
{
  *(_QWORD *)result = off_1E2262010;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a3;
  return result;
}

{
  *(_QWORD *)result = off_1E2262010;
  *(_QWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = a3;
  return result;
}

icu::MessageFormat *icu::MessageFormat::MessageFormat(icu::MessageFormat *this, const icu::UnicodeString *a2, const icu::Locale *a3, UErrorCode *a4)
{
  _QWORD *v8;

  v8 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v8 = off_1E2261E28;
  icu::Locale::Locale((icu::Locale *)(v8 + 41), (uint64_t)a3);
  icu::MessagePattern::MessagePattern((icu::MessageFormat *)((char *)this + 552), a4);
  *((_QWORD *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_BYTE *)this + 712) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 94) = off_1E2262010;
  *((_QWORD *)this + 95) = this;
  *((_QWORD *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((_QWORD *)this + 98) = off_1E2262010;
  *((_QWORD *)this + 99) = this;
  *((_QWORD *)this + 100) = 0;
  *((_DWORD *)this + 202) = 1;
  icu::Format::setLocaleIDs(this, *((const char **)this + 46), *((const char **)this + 46));
  (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, UErrorCode *))(*(_QWORD *)this + 80))(this, a2, a4);
  return this;
}

icu::MessageFormat *icu::MessageFormat::MessageFormat(icu::MessageFormat *this, const icu::UnicodeString *a2, const icu::Locale *a3, UParseError *a4, UErrorCode *a5)
{
  _QWORD *v10;

  v10 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v10 = off_1E2261E28;
  icu::Locale::Locale((icu::Locale *)(v10 + 41), (uint64_t)a3);
  icu::MessagePattern::MessagePattern((icu::MessageFormat *)((char *)this + 552), a5);
  *((_QWORD *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_BYTE *)this + 712) = 0;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 94) = off_1E2262010;
  *((_QWORD *)this + 95) = this;
  *((_QWORD *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((_QWORD *)this + 98) = off_1E2262010;
  *((_QWORD *)this + 99) = this;
  *((_QWORD *)this + 100) = 0;
  *((_DWORD *)this + 202) = 1;
  icu::Format::setLocaleIDs(this, *((const char **)this + 46), *((const char **)this + 46));
  (*(void (**)(icu::MessageFormat *, const icu::UnicodeString *, UParseError *, UErrorCode *))(*(_QWORD *)this + 88))(this, a2, a4, a5);
  return this;
}

icu::MessageFormat *icu::MessageFormat::MessageFormat(icu::MessageFormat *this, const icu::MessageFormat *a2)
{
  _QWORD *v4;
  UErrorCode v6;

  v4 = (_QWORD *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *v4 = off_1E2261E28;
  icu::Locale::Locale((icu::Locale *)(v4 + 41), (uint64_t)a2 + 328);
  icu::MessagePattern::MessagePattern((icu::MessageFormat *)((char *)this + 552), (const icu::MessageFormat *)((char *)a2 + 552));
  *((_QWORD *)this + 85) = 0;
  *((_DWORD *)this + 172) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_BYTE *)this + 712) = *((_BYTE *)a2 + 712);
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 94) = off_1E2262010;
  *((_QWORD *)this + 95) = this;
  *((_QWORD *)this + 96) = 0;
  *((_DWORD *)this + 194) = 0;
  *((_QWORD *)this + 98) = off_1E2262010;
  *((_QWORD *)this + 99) = this;
  *((_QWORD *)this + 100) = 0;
  *((_DWORD *)this + 202) = 1;
  v6 = U_ZERO_ERROR;
  icu::MessageFormat::copyObjects(this, a2, &v6);
  if (v6 >= U_ILLEGAL_ARGUMENT_ERROR)
    icu::MessageFormat::resetPattern((void ***)this);
  return this;
}

uint64_t icu::MessageFormat::copyObjects(icu::MessageFormat *this, const icu::MessageFormat *a2, UErrorCode *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;

  v6 = *((_DWORD *)a2 + 176);
  *((_DWORD *)this + 176) = v6;
  if (v6 >= 1)
  {
    result = icu::MessageFormat::allocateArgTypes(this, v6, a3);
    if (!(_DWORD)result)
      return result;
    memcpy(*((void **)this + 87), *((const void **)a2 + 87), 4 * *((int *)this + 176));
  }
  v8 = *((_QWORD *)this + 92);
  if (v8)
    uhash_removeAll(v8);
  v9 = *((_QWORD *)this + 93);
  if (v9)
    uhash_removeAll(v9);
  v10 = *((_QWORD *)a2 + 92);
  if (!v10)
    goto LABEL_16;
  if (!*((_QWORD *)this + 92))
  {
    result = (uint64_t)uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, (uint64_t)sub_18BCFDD50, (int *)a3);
    *((_QWORD *)this + 92) = result;
    if (*(int *)a3 > 0)
      return result;
    uhash_setValueDeleter(result, (uint64_t)uprv_deleteUObject);
    v10 = *((_QWORD *)a2 + 92);
  }
  v11 = uhash_count(v10);
  v19 = -1;
  if (v11 >= 1 && *(int *)a3 <= 0)
  {
    v12 = v11;
    v13 = 1;
    while (1)
    {
      v14 = uhash_nextElement(*((uint64_t **)a2 + 92), &v19);
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 8) + 32))(*(_QWORD *)(v14 + 8));
      if (!result)
        break;
      uhash_iput(*((_QWORD *)this + 92), *(_DWORD *)(v14 + 16), result, (int *)a3);
      if (v13 < v12)
      {
        ++v13;
        if (*(int *)a3 < 1)
          continue;
      }
      goto LABEL_16;
    }
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  else
  {
LABEL_16:
    result = *((_QWORD *)a2 + 93);
    if (result)
    {
      if (!*((_QWORD *)this + 93))
      {
        *((_QWORD *)this + 93) = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, (int *)a3);
        result = *((_QWORD *)a2 + 93);
      }
      result = uhash_count(result);
      v18 = -1;
      if ((int)result >= 1 && *(int *)a3 <= 0)
      {
        v15 = result;
        v16 = 1;
        do
        {
          v17 = uhash_nextElement(*((uint64_t **)a2 + 93), &v18);
          result = uhash_iputi(*((_QWORD *)this + 93), *(_DWORD *)(v17 + 16), *(_DWORD *)(v17 + 8), (int *)a3);
          if (v16 >= v15)
            break;
          ++v16;
        }
        while (*(int *)a3 < 1);
      }
    }
  }
  return result;
}

void icu::MessageFormat::resetPattern(void ***this)
{
  icu::MessagePattern::clear((uint64_t)(this + 69));
  uhash_close(this[92]);
  this[92] = 0;
  uhash_close(this[93]);
  this[93] = 0;
  *((_DWORD *)this + 176) = 0;
  *((_BYTE *)this + 712) = 0;
}

void icu::MessageFormat::~MessageFormat(icu::MessageFormat *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = off_1E2261E28;
  uhash_close(*((void ***)this + 92));
  uhash_close(*((void ***)this + 93));
  uprv_free(*((void **)this + 87));
  uprv_free(*((void **)this + 85));
  v2 = *((_QWORD *)this + 90);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 91);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 98) = off_1E2262010;
  v4 = *((_QWORD *)this + 100);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  icu::PluralFormat::PluralSelector::~PluralSelector((icu::MessageFormat *)((char *)this + 784));
  *((_QWORD *)this + 94) = off_1E2262010;
  v5 = *((_QWORD *)this + 96);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  icu::PluralFormat::PluralSelector::~PluralSelector((icu::MessageFormat *)((char *)this + 752));
  icu::MessagePattern::~MessagePattern((icu::MessageFormat *)((char *)this + 552));
  icu::Locale::~Locale((icu::MessageFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  void *v1;

  icu::MessageFormat::~MessageFormat(this);
  icu::UMemory::operator delete(v1);
}

void icu::MessageFormat::PluralSelectorProvider::~PluralSelectorProvider(icu::MessageFormat::PluralSelectorProvider *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2262010;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::PluralFormat::PluralSelector::~PluralSelector(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2262010;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::PluralFormat::PluralSelector::~PluralSelector(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2262010;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::PluralFormat::PluralSelector::~PluralSelector(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::MessageFormat::allocateArgTypes(icu::MessageFormat *this, int a2, UErrorCode *a3)
{
  uint64_t result;
  int v5;
  int v7;
  unsigned int v8;

  if (*(int *)a3 > 0)
    return 0;
  v5 = *((_DWORD *)this + 177);
  if (v5 >= a2)
    return 1;
  v7 = 2 * v5;
  if (v7 <= a2)
    v7 = a2;
  if (a2 >= 10)
    v8 = v7;
  else
    v8 = 10;
  result = (uint64_t)uprv_realloc(*((void **)this + 87), 4 * v8);
  if (result)
  {
    *((_QWORD *)this + 87) = result;
    *((_DWORD *)this + 177) = v8;
    return 1;
  }
  *a3 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

icu::MessageFormat *icu::MessageFormat::operator=(icu::MessageFormat *a1, icu::MessageFormat *a2)
{
  UErrorCode v5;

  if (a1 != a2)
  {
    icu::Format::operator=((uint64_t)a1, (uint64_t)a2);
    (*(void (**)(icu::MessageFormat *, _BYTE *))(*(_QWORD *)a1 + 64))(a1, (_BYTE *)a2 + 328);
    icu::MessagePattern::operator=((uint64_t)a1 + 552, (uint64_t)a2 + 552);
    *((_BYTE *)a1 + 712) = *((_BYTE *)a2 + 712);
    v5 = U_ZERO_ERROR;
    icu::MessageFormat::copyObjects(a1, a2, &v5);
    if (v5 >= U_ILLEGAL_ARGUMENT_ERROR)
      icu::MessageFormat::resetPattern((void ***)a1);
  }
  return a1;
}

BOOL icu::MessageFormat::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;

  if (a1 == a2)
    return 1;
  if (!icu::Format::operator==(a1, a2)
    || !icu::MessagePattern::operator==((uint64_t)(a1 + 69), (uint64_t)(a2 + 69))
    || !icu::Locale::operator==((uint64_t)(a1 + 41), (uint64_t)(a2 + 41)))
  {
    return 0;
  }
  v4 = a1[93];
  v5 = a2[93];
  v6 = (v4 == 0) == (v5 == 0);
  if (!v4 || !v5)
    return v6;
  v7 = uhash_count(v4);
  if (v7 != uhash_count(a2[93]))
    return 0;
  v18 = -1;
  v19 = -1;
  if (v7 < 1)
    return 1;
  v8 = uhash_nextElement((uint64_t *)a1[93], &v19);
  v9 = uhash_nextElement((uint64_t *)a2[93], &v18);
  v10 = *(_DWORD *)(v8 + 16);
  v11 = (unsigned int *)(v9 + 16);
  if (v10 != *(_DWORD *)(v9 + 16))
    return 0;
  v6 = 0;
  v12 = 1;
  do
  {
    v13 = uhash_iget(a1[92], v10);
    v14 = uhash_iget(a2[92], *v11);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 24))(v13, v14))
      break;
    v6 = v12 >= v7;
    if (v7 == v12)
      break;
    v15 = uhash_nextElement((uint64_t *)a1[93], &v19);
    v16 = uhash_nextElement((uint64_t *)a2[93], &v18);
    v10 = *(_DWORD *)(v15 + 16);
    v11 = (unsigned int *)(v16 + 16);
    ++v12;
  }
  while (v10 == *(_DWORD *)(v16 + 16));
  return v6;
}

icu::MessageFormat *icu::MessageFormat::clone@<X0>(icu::MessageFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::MessageFormat *result;

  result = (icu::MessageFormat *)icu::UMemory::operator new(a3, (icu::UMemory *)0x330, a2);
  if (result)
    return icu::MessageFormat::MessageFormat(result, this);
  return result;
}

uint64_t icu::MessageFormat::setLocale(icu::MessageFormat *this, const icu::Locale *a2)
{
  icu::Locale *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (icu::MessageFormat *)((char *)this + 328);
  result = icu::Locale::operator==((uint64_t)this + 328, (uint64_t)a2);
  if ((result & 1) == 0)
  {
    v6 = *((_QWORD *)this + 90);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *((_QWORD *)this + 90) = 0;
    v7 = *((_QWORD *)this + 91);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    *((_QWORD *)this + 91) = 0;
    icu::Locale::operator=(v4, (uint64_t)a2);
    icu::Format::setLocaleIDs(this, *((const char **)this + 46), *((const char **)this + 46));
    v8 = *((_QWORD *)this + 96);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    *((_QWORD *)this + 96) = 0;
    result = *((_QWORD *)this + 100);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 100) = 0;
  }
  return result;
}

uint64_t icu::MessageFormat::PluralSelectorProvider::reset(icu::MessageFormat::PluralSelectorProvider *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t icu::MessageFormat::getLocale(icu::MessageFormat *this)
{
  return (uint64_t)this + 328;
}

uint64_t icu::MessageFormat::applyPattern(icu::MessageFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  _OWORD v4[4];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  return (*(uint64_t (**)(icu::MessageFormat *, const icu::UnicodeString *, _OWORD *, UErrorCode *))(*(_QWORD *)this + 88))(this, a2, v4, a3);
}

void icu::MessageFormat::applyPattern(int32x2_t *this, UChar **a2, UParseError *a3, UErrorCode *a4)
{
  if (*(int *)a4 <= 0)
  {
    icu::MessagePattern::parse((icu::MessagePattern *)&this[69], a2, a3, a4);
    icu::MessageFormat::cacheExplicitFormats(this, a4);
    if (*(int *)a4 >= 1)
      icu::MessageFormat::resetPattern((void ***)this);
  }
}

void icu::MessageFormat::cacheExplicitFormats(int32x2_t *this, UErrorCode *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  UErrorCode v9;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  UErrorCode v17;
  unint64_t v18;
  int32x2_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int32x2_t v24;
  void *v25;
  icu::Format *v26;
  void *v27;
  void *v28;
  int32x2_t v29;
  int v30;
  int v31;
  icu::UnicodeString *v33;
  int v34;
  _OWORD v35[4];
  uint64_t v36;
  void (**v37)(icu::UnicodeString *__hidden);
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[72];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(int *)a2 <= 0)
  {
    v4 = (uint64_t)this[92];
    if (v4)
      uhash_removeAll(v4);
    v5 = (uint64_t)this[93];
    if (v5)
      uhash_removeAll(v5);
    v6 = 0;
    v7 = this[81].i32[0];
    v8 = (v7 - 2);
    this[88].i32[0] = 0;
    v9 = *a2;
    if (v7 >= 5 && v9 <= U_ZERO_ERROR)
    {
      v6 = 0;
      v11 = *(_QWORD *)&this[80] + 32;
      v12 = 3;
      v13 = (int *)v11;
      do
      {
        v14 = *v13;
        v13 += 4;
        if (v14 == 7)
        {
          v15 = *(__int16 *)(v11 + 10);
          if (v6 <= v15)
          {
            v6 = v15 + 1;
            this[88].i32[0] = v15 + 1;
            v9 = *a2;
          }
        }
        if (v12 >= v8)
          break;
        ++v12;
        v11 = (uint64_t)v13;
      }
      while (v9 <= U_ZERO_ERROR);
    }
    if (icu::MessageFormat::allocateArgTypes((icu::MessageFormat *)this, v6, a2))
    {
      v16 = this[88].u32[0];
      if ((int)v16 >= 1)
        memset_pattern16(*(void **)&this[87], &unk_18BE28290, 4 * v16);
      this[89].i8[0] = 0;
      if (v7 >= 4)
      {
        v17 = *a2;
        if (*(int *)a2 <= 0)
        {
          v33 = (icu::UnicodeString *)&this[71];
          v18 = 1;
          do
          {
            v19 = this[80];
            if (*(_DWORD *)(*(_QWORD *)&v19 + 16 * (int)v18) == 5)
            {
              v20 = (int)v18 + 1;
              if (*(_DWORD *)(*(_QWORD *)&v19 + 16 * v20) == 7)
                v21 = *(__int16 *)(*(_QWORD *)&v19 + 16 * v20 + 10);
              else
                v21 = -1;
              v22 = *(__int16 *)(*(_QWORD *)&v19 + 16 * (int)v18 + 10);
              v34 = 0;
              switch(v22)
              {
                case 0:
                case 4:
                  goto LABEL_31;
                case 1:
                  memset(v42, 0, 64);
                  v23 = (int)v18 + 3;
                  icu::UnicodeString::tempSubString(v33, *(_DWORD *)(*(_QWORD *)&v19 + 16 * (int)v18 + 36), *(unsigned __int16 *)(*(_QWORD *)&v19 + 16 * (int)v18 + 40), (icu::UnicodeString *)v42);
                  v41 = 0;
                  v39 = 0u;
                  v40 = 0u;
                  v38 = 0u;
                  v37 = off_1E2256B38;
                  LOWORD(v38) = 2;
                  v24 = this[80];
                  if (*(_DWORD *)(*(_QWORD *)&v24 + 16 * v23) == 10)
                  {
                    icu::UnicodeString::tempSubString(v33, *(_DWORD *)(*(_QWORD *)&v24 + 16 * v23 + 4), *(unsigned __int16 *)(*(_QWORD *)&v24 + 16 * v23 + 8), (icu::UnicodeString *)v35);
                    icu::UnicodeString::operator=((icu::UnicodeString *)&v37, (icu::UnicodeString *)v35);
                    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v35);
                    LODWORD(v23) = v18 + 4;
                  }
                  v36 = 0;
                  memset(v35, 0, sizeof(v35));
                  v26 = (icu::Format *)icu::MessageFormat::createAppropriateFormat((uint64_t)this, (uint64_t)v42, (icu::UnicodeString *)&v37, &v34, (uint64_t)v35, a2);
                  icu::MessageFormat::setArgStartFormat(this, v18, v26, a2);
                  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v37);
                  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v42);
                  LODWORD(v18) = v23;
                  break;
                case 2:
                case 3:
                case 5:
                  v34 = 1;
                  break;
                default:
                  *a2 = U_INTERNAL_PROGRAM_ERROR;
LABEL_31:
                  v34 = 3;
                  break;
              }
              if (v21 != -1)
              {
                v29 = this[87];
                v30 = *(_DWORD *)(*(_QWORD *)&v29 + 4 * v21);
                v31 = v34;
                if (v30 != 6 && v30 != v34)
                  this[89].i8[0] = 1;
                *(_DWORD *)(*(_QWORD *)&v29 + 4 * v21) = v31;
              }
              v17 = *a2;
            }
            v18 = (v18 + 1);
          }
          while ((int)v18 < (int)v8 && v17 < U_ILLEGAL_ARGUMENT_ERROR);
        }
      }
    }
  }
}

uint64_t icu::MessageFormat::applyPattern(_DWORD *a1, uint64_t a2, int a3, _OWORD *a4, uint64_t a5)
{
  _OWORD *v10;
  _OWORD v12[4];
  uint64_t v13;

  if (a1[140] != a3)
  {
    icu::MessagePattern::clear((uint64_t)(a1 + 138));
    a1[140] = a3;
  }
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  if (a4)
    v10 = a4;
  else
    v10 = v12;
  return (*(uint64_t (**)(_DWORD *, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, v10, a5);
}

icu::UnicodeString *icu::MessageFormat::toPattern(icu::MessageFormat *this, icu::UnicodeString *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v4 = *((_QWORD *)this + 93);
  if (v4 && uhash_count(v4) || !*((_DWORD *)this + 162))
  {
    icu::UnicodeString::setToBogus(a2);
    return a2;
  }
  else
  {
    v5 = *((unsigned __int16 *)this + 288);
    v6 = (__int16)v5;
    v7 = v5 >> 5;
    if (v6 >= 0)
      v8 = v7;
    else
      v8 = *((unsigned int *)this + 145);
    return (icu::UnicodeString *)icu::UnicodeString::doAppend((uint64_t)a2, (icu::MessageFormat *)((char *)this + 568), 0, v8);
  }
}

uint64_t icu::MessageFormat::nextTopLevelArgStart(icu::MessageFormat *this, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  int *v5;
  int v6;
  int v7;

  v2 = *((_QWORD *)this + 80);
  if (a2)
  {
    v3 = *(_DWORD *)(v2 + 16 * a2 + 12);
    if (v3 <= a2)
      v3 = a2;
    result = v3;
  }
  else
  {
    result = 0;
  }
  v5 = (int *)(v2 + 16 * result + 16);
  while (1)
  {
    v7 = *v5;
    v5 += 4;
    v6 = v7;
    if (v7 == 1)
      break;
    result = (result + 1);
    if (v6 == 5)
      return result;
  }
  return 0xFFFFFFFFLL;
}

int32x2_t *icu::MessageFormat::setArgStartFormat(int32x2_t *this, unint64_t a2, icu::Format *a3, UErrorCode *a4)
{
  icu::Format *v4;
  unsigned int v6;
  int32x2_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  v4 = a3;
  if (*(int *)a4 < 1)
  {
    v6 = a2;
    v7 = this;
    v8 = (uint64_t *)this[92];
    if (v8)
    {
      if (!a3)
      {
LABEL_6:
        v9 = icu::UMemory::operator new(v8, (icu::UMemory *)0x148, a2);
        v4 = (icu::Format *)v9;
        if (v9)
        {
          v9[40] = 0;
          *((_OWORD *)v9 + 18) = 0u;
          *((_OWORD *)v9 + 19) = 0u;
          *((_OWORD *)v9 + 16) = 0u;
          *((_OWORD *)v9 + 17) = 0u;
          *((_OWORD *)v9 + 14) = 0u;
          *((_OWORD *)v9 + 15) = 0u;
          *((_OWORD *)v9 + 12) = 0u;
          *((_OWORD *)v9 + 13) = 0u;
          *((_OWORD *)v9 + 10) = 0u;
          *((_OWORD *)v9 + 11) = 0u;
          *((_OWORD *)v9 + 8) = 0u;
          *((_OWORD *)v9 + 9) = 0u;
          *((_OWORD *)v9 + 6) = 0u;
          *((_OWORD *)v9 + 7) = 0u;
          *((_OWORD *)v9 + 4) = 0u;
          *((_OWORD *)v9 + 5) = 0u;
          *((_OWORD *)v9 + 2) = 0u;
          *((_OWORD *)v9 + 3) = 0u;
          *(_OWORD *)v9 = 0u;
          *((_OWORD *)v9 + 1) = 0u;
          icu::Format::Format((uint64_t)v9);
          *(_QWORD *)v4 = &off_1E2262050;
        }
      }
    }
    else
    {
      this = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, (uint64_t)sub_18BCFDD50, (int *)a4);
      v7[92] = (int32x2_t)this;
      if (*(int *)a4 >= 1)
      {
        if (v4)
          return (int32x2_t *)(*(uint64_t (**)(icu::Format *))(*(_QWORD *)v4 + 8))(v4);
        return this;
      }
      uhash_setValueDeleter((uint64_t)this, (uint64_t)uprv_deleteUObject);
      if (!v4)
        goto LABEL_6;
    }
    return (int32x2_t *)uhash_iput(*(_QWORD *)&v7[92], v6, (uint64_t)v4, (int *)a4);
  }
  if (a3)
    return (int32x2_t *)(*(uint64_t (**)(icu::Format *))(*(_QWORD *)v4 + 8))(v4);
  return this;
}

uint64_t sub_18BCFDD50(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

BOOL icu::MessageFormat::argNameMatches(icu::MessageFormat *this, int a2, const icu::UnicodeString *a3, int a4)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 80);
  if (*(_DWORD *)(v4 + 16 * a2) == 8)
    return sub_18BCFDDA4((uint64_t)this + 552, v4 + 16 * a2, (uint64_t)a3);
  else
    return *(__int16 *)(v4 + 16 * a2 + 10) == a4;
}

BOOL sub_18BCFDDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  int32_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;

  v3 = *(unsigned __int16 *)(a3 + 8);
  if ((v3 & 1) != 0)
  {
    v9 = (*(_WORD *)(a1 + 24) & 1) == 0;
  }
  else
  {
    v4 = a1 + 16;
    v5 = *(unsigned __int16 *)(a2 + 8);
    v6 = *(_DWORD *)(a2 + 4);
    if ((v3 & 0x8000u) == 0)
      v7 = v3 >> 5;
    else
      v7 = *(_DWORD *)(a3 + 12);
    if ((v3 & 2) != 0)
      v8 = a3 + 10;
    else
      v8 = *(_QWORD *)(a3 + 24);
    v9 = icu::UnicodeString::doCompare(v4, v6, v5, v8, v7 & (v7 >> 31), v7 & ~(v7 >> 31));
  }
  return v9 == 0;
}

uint64_t icu::MessageFormat::setCustomArgStartFormat(int32x2_t *this, unint64_t a2, icu::Format *a3, UErrorCode *a4)
{
  unsigned int v5;
  int32x2_t *v7;

  v5 = a2;
  icu::MessageFormat::setArgStartFormat(this, a2, a3, a4);
  v7 = (int32x2_t *)this[93];
  if (!v7)
  {
    v7 = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, (int *)a4);
    this[93] = (int32x2_t)v7;
  }
  return uhash_iputi((uint64_t)v7, v5, 1u, (int *)a4);
}

const void *icu::MessageFormat::getCachedFormatter(icu::MessageFormat *this, unsigned int a2)
{
  uint64_t v2;
  const void *v3;
  const void *v4;

  v2 = *((_QWORD *)this + 92);
  if (!v2)
    return 0;
  v3 = (const void *)uhash_iget(v2, a2);
  if (!v3)
    return 0;
  v4 = v3;
  {
    return 0;
  }
  return v4;
}

int32x2_t *icu::MessageFormat::adoptFormats(int32x2_t *this, icu::Format **a2, unsigned int a3)
{
  int32x2_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int32x2_t v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  icu::Format **v14;
  unint64_t v15;
  UErrorCode v16;

  if (a2 && (a3 & 0x80000000) == 0)
  {
    v5 = this;
    v6 = (uint64_t)this[92];
    if (v6)
      uhash_removeAll(v6);
    this = (int32x2_t *)v5[93];
    if (this)
      this = (int32x2_t *)uhash_removeAll((uint64_t)this);
    v16 = U_ZERO_ERROR;
    if (a3)
    {
      v7 = 0;
      LODWORD(v8) = 0;
LABEL_9:
      v9 = v5[80];
      if ((_DWORD)v8)
      {
        v10 = *(_DWORD *)(*(_QWORD *)&v9 + 16 * v8 + 12);
        if (v10 <= (int)v8)
          v8 = v8;
        else
          v8 = v10;
      }
      else
      {
        v8 = 0;
      }
      v11 = (int *)(*(_QWORD *)&v9 + 16 * v8 + 16);
      while (1)
      {
        v13 = *v11;
        v11 += 4;
        v12 = v13;
        if (v13 == 1)
          break;
        v8 = (v8 + 1);
        if (v12 == 5)
        {
          if ((v8 & 0x80000000) == 0)
          {
            this = (int32x2_t *)icu::MessageFormat::setCustomArgStartFormat(v5, v8, a2[v7++], &v16);
            if (v7 < a3 && v16 <= U_ZERO_ERROR)
              goto LABEL_9;
          }
          break;
        }
      }
    }
    else
    {
      LODWORD(v7) = 0;
    }
    if ((int)v7 < (int)a3)
    {
      v14 = &a2[v7];
      v15 = a3 - (unint64_t)v7;
      do
      {
        this = (int32x2_t *)*v14;
        if (*v14)
          this = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this + 8))(this);
        ++v14;
        --v15;
      }
      while (v15);
    }
  }
  return this;
}

void icu::MessageFormat::setFormats(int32x2_t *this, const icu::Format **a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  UErrorCode v8;
  unint64_t v9;
  unint64_t v10;
  int32x2_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  const icu::Format *v16;
  icu::Format *v17;
  UErrorCode v18;

  if (a2 && (a3 & 0x80000000) == 0)
  {
    v6 = (uint64_t)this[92];
    if (v6)
      uhash_removeAll(v6);
    v7 = (uint64_t)this[93];
    if (v7)
      uhash_removeAll(v7);
    v18 = U_ZERO_ERROR;
    if (a3)
    {
      v8 = U_ZERO_ERROR;
      v9 = 0;
      LODWORD(v10) = 0;
LABEL_9:
      v11 = this[80];
      if ((_DWORD)v10)
      {
        v12 = *(_DWORD *)(*(_QWORD *)&v11 + 16 * v10 + 12);
        if (v12 <= (int)v10)
          v10 = v10;
        else
          v10 = v12;
      }
      else
      {
        v10 = 0;
      }
      v13 = (int *)(*(_QWORD *)&v11 + 16 * v10 + 16);
      while (1)
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v15 == 1)
          break;
        v10 = (v10 + 1);
        if (v14 == 5)
        {
          if ((v10 & 0x80000000) == 0)
          {
            v16 = a2[v9];
            if (v16)
            {
              v17 = (icu::Format *)(*(uint64_t (**)(const icu::Format *))(*(_QWORD *)v16 + 32))(v16);
              if (!v17)
                v18 = U_MEMORY_ALLOCATION_ERROR;
            }
            else
            {
              v17 = 0;
            }
            icu::MessageFormat::setCustomArgStartFormat(this, v10, v17, &v18);
            ++v9;
            v8 = v18;
            if (v9 < a3 && v18 <= U_ZERO_ERROR)
              goto LABEL_9;
          }
          break;
        }
      }
      if (v8 >= U_ILLEGAL_ARGUMENT_ERROR)
        icu::MessageFormat::resetPattern((void ***)this);
    }
  }
}

int32x2_t *icu::MessageFormat::adoptFormat(int32x2_t *this, int a2, icu::Format *a3)
{
  int v4;
  unint64_t v5;
  int32x2_t v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  UErrorCode v12;

  if ((a2 & 0x80000000) == 0)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    v6 = this[80];
LABEL_3:
    if ((_DWORD)v5)
    {
      v7 = *(_DWORD *)(*(_QWORD *)&v6 + 16 * v5 + 12);
      if (v7 <= (int)v5)
        v5 = v5;
      else
        v5 = v7;
    }
    else
    {
      v5 = 0;
    }
    v8 = (int *)(*(_QWORD *)&v6 + 16 + 16 * v5);
    while (1)
    {
      v10 = *v8;
      v8 += 4;
      v9 = v10;
      if (v10 == 1)
        break;
      v5 = (v5 + 1);
      if (v9 == 5)
      {
        if ((v5 & 0x80000000) != 0)
          break;
        if (v4++ == a2)
        {
          v12 = U_ZERO_ERROR;
          return (int32x2_t *)icu::MessageFormat::setCustomArgStartFormat(this, v5, a3, &v12);
        }
        goto LABEL_3;
      }
    }
  }
  if (a3)
    return (int32x2_t *)(*(uint64_t (**)(icu::Format *))(*(_QWORD *)a3 + 8))(a3);
  return this;
}

uint64_t icu::MessageFormat::adoptFormat(uint64_t this, const icu::UnicodeString *a2, icu::Format *a3, UErrorCode *a4)
{
  int32x2_t *v7;
  int v8;
  unsigned int v9;
  icu::Format *v10;
  int32x2_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  unint64_t v20;

  if (*(int *)a4 > 0)
  {
LABEL_4:
    if (a3)
      return (*(uint64_t (**)(icu::Format *))(*(_QWORD *)a3 + 8))(a3);
    return this;
  }
  v7 = (int32x2_t *)this;
  this = icu::MessagePattern::validateArgumentName(a2, a2);
  if ((int)this < -1)
  {
    *a4 = U_ILLEGAL_ARGUMENT_ERROR;
    goto LABEL_4;
  }
  v8 = this;
  v9 = 0;
  v10 = a3;
LABEL_7:
  v11 = v7[80];
  if (v9)
  {
    v12 = *(_DWORD *)(*(_QWORD *)&v11 + 16 * v9 + 12);
    if ((int)v12 <= (int)v9)
      v13 = v9;
    else
      v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v14 = 0;
  v15 = (int *)(*(_QWORD *)&v11 + 16 * v13 + 16);
  while (1)
  {
    v17 = *v15;
    v15 += 4;
    v16 = v17;
    if (v17 == 1)
      break;
    ++v14;
    if (v16 == 5)
    {
      v9 = v13 + v14;
      if ((((_DWORD)v13 + (_DWORD)v14) & 0x80000000) == 0 && *(int *)a4 <= 0)
      {
        v18 = (v13 + v14 + 1);
        v19 = (_DWORD *)(*(_QWORD *)&v11 + 16 * v18);
        if (*v19 == 8)
        {
          this = sub_18BCFDDA4((uint64_t)&v7[69], (uint64_t)v19, (uint64_t)a2);
          if (!(_DWORD)this)
            goto LABEL_7;
        }
        else
        {
          this = v8 == *(__int16 *)(*(_QWORD *)&v11 + 16 * v18 + 10);
          if (v8 != *(__int16 *)(*(_QWORD *)&v11 + 16 * v18 + 10))
            goto LABEL_7;
        }
        if (v10
          || !a3
          || (this = (*(uint64_t (**)(icu::Format *))(*(_QWORD *)a3 + 32))(a3),
              (v10 = (icu::Format *)this) != 0))
        {
          v20 = v13 + v14;
          this = icu::MessageFormat::setCustomArgStartFormat(v7, v20, v10, a4);
          v10 = 0;
          v9 = v20;
          goto LABEL_7;
        }
        *a4 = U_MEMORY_ALLOCATION_ERROR;
        return this;
      }
      break;
    }
  }
  a3 = v10;
  if (v10)
    return (*(uint64_t (**)(icu::Format *))(*(_QWORD *)a3 + 8))(a3);
  return this;
}

int32x2_t *icu::MessageFormat::setFormat(int32x2_t *this, int a2, const icu::Format *a3)
{
  int32x2_t *v3;
  int v4;
  unint64_t v5;
  int32x2_t v6;
  int v7;
  int *v8;
  int v9;
  int v10;
  UErrorCode v12;

  if ((a2 & 0x80000000) == 0)
  {
    v3 = this;
    v4 = 0;
    LODWORD(v5) = 0;
    v6 = this[80];
LABEL_3:
    if ((_DWORD)v5)
    {
      v7 = *(_DWORD *)(*(_QWORD *)&v6 + 16 * v5 + 12);
      if (v7 <= (int)v5)
        v5 = v5;
      else
        v5 = v7;
    }
    else
    {
      v5 = 0;
    }
    v8 = (int *)(*(_QWORD *)&v6 + 16 + 16 * v5);
    while (1)
    {
      v10 = *v8;
      v8 += 4;
      v9 = v10;
      if (v10 == 1)
        break;
      v5 = (v5 + 1);
      if (v9 == 5)
      {
        if ((v5 & 0x80000000) != 0)
          return this;
        if (v4++ == a2)
        {
          this = (int32x2_t *)(*(uint64_t (**)(const icu::Format *))(*(_QWORD *)a3 + 32))(a3);
          if (this)
          {
            v12 = U_ZERO_ERROR;
            return (int32x2_t *)icu::MessageFormat::setCustomArgStartFormat(v3, v5, (icu::Format *)this, &v12);
          }
          return this;
        }
        goto LABEL_3;
      }
    }
  }
  return this;
}

const void *icu::MessageFormat::getFormat(icu::MessageFormat *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;

  if (*(int *)a3 <= 0 && *((_QWORD *)this + 92))
  {
    v7 = icu::MessagePattern::validateArgumentName(a2, a2);
    if (v7 >= -1)
    {
      v8 = v7;
      v9 = 0;
LABEL_7:
      v10 = *((_QWORD *)this + 80);
      if (v9)
      {
        v11 = *(_DWORD *)(v10 + 16 * v9 + 12);
        if ((int)v11 <= (int)v9)
          v12 = v9;
        else
          v12 = v11;
      }
      else
      {
        v12 = 0;
      }
      v13 = 0;
      v14 = (int *)(v10 + 16 * v12 + 16);
      while (1)
      {
        v16 = *v14;
        v14 += 4;
        v15 = v16;
        if (v16 == 1)
          break;
        ++v13;
        if (v15 == 5)
        {
          v9 = v12 + v13;
          if ((_DWORD)v12 + v13 < 0)
            return 0;
          v17 = (v12 + v13 + 1);
          v18 = (_DWORD *)(v10 + 16 * v17);
          if (*v18 == 8)
          {
            if (!sub_18BCFDDA4((uint64_t)this + 552, (uint64_t)v18, (uint64_t)a2))
              goto LABEL_7;
          }
          else if (v8 != *(__int16 *)(v10 + 16 * v17 + 10))
          {
            goto LABEL_7;
          }
          return icu::MessageFormat::getCachedFormatter(this, (int)v12 + v13);
        }
      }
    }
    else
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
  }
  return 0;
}

uint64_t icu::MessageFormat::setFormat(uint64_t this, const icu::UnicodeString *a2, const icu::Format *a3, UErrorCode *a4)
{
  int32x2_t *v7;
  UErrorCode v8;
  int v9;
  unint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;

  if (*(int *)a4 <= 0)
  {
    v7 = (int32x2_t *)this;
    this = icu::MessagePattern::validateArgumentName(a2, a2);
    if ((int)this >= -1)
    {
      v9 = this;
      LODWORD(v10) = 0;
LABEL_7:
      v11 = v7[80];
      if ((_DWORD)v10)
      {
        LODWORD(v12) = *(_DWORD *)(*(_QWORD *)&v11 + 16 * v10 + 12);
        if ((int)v12 <= (int)v10)
          v12 = v10;
        else
          v12 = v12;
      }
      else
      {
        v12 = 0;
      }
      v13 = 0;
      v14 = (int *)(*(_QWORD *)&v11 + 16 * v12 + 16);
      while (1)
      {
        v16 = *v14;
        v14 += 4;
        v15 = v16;
        if (v16 == 1)
          break;
        ++v13;
        if (v15 == 5)
        {
          v10 = v12 + v13;
          if ((_DWORD)v12 + (_DWORD)v13 < 0 || *(int *)a4 > 0)
            return this;
          v17 = (v12 + v13 + 1);
          v18 = (_DWORD *)(*(_QWORD *)&v11 + 16 * v17);
          if (*v18 == 8)
          {
            this = sub_18BCFDDA4((uint64_t)&v7[69], (uint64_t)v18, (uint64_t)a2);
            if (!(_DWORD)this)
              goto LABEL_7;
          }
          else
          {
            this = v9 == *(__int16 *)(*(_QWORD *)&v11 + 16 * v17 + 10);
            if (v9 != *(__int16 *)(*(_QWORD *)&v11 + 16 * v17 + 10))
              goto LABEL_7;
          }
          this = (*(uint64_t (**)(const icu::Format *))(*(_QWORD *)a3 + 32))(a3);
          if (this)
          {
            this = icu::MessageFormat::setCustomArgStartFormat(v7, v10, (icu::Format *)this, a4);
            goto LABEL_7;
          }
          v8 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_4;
        }
      }
    }
    else
    {
      v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_4:
      *a4 = v8;
    }
  }
  return this;
}

void *icu::MessageFormat::getFormats(icu::MessageFormat *this, int *a2)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  void *v11;
  void *result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  int v17;
  int v18;
  const void *CachedFormatter;
  uint64_t v20;
  uint64_t v21;

  v4 = 0;
  v5 = *((_QWORD *)this + 80);
LABEL_5:
  v7 = 0;
LABEL_6:
  v8 = (int *)(v5 + 16 + 16 * v7);
  while (1)
  {
    v10 = *v8;
    v8 += 4;
    v9 = v10;
    if (v10 == 1)
      break;
    LODWORD(v7) = v7 + 1;
    if (v9 == 5)
    {
      if ((v7 & 0x80000000) != 0)
        break;
      ++v4;
      if ((_DWORD)v7)
      {
        v6 = *(_DWORD *)(v5 + 16 * v7 + 12);
        if (v6 <= (int)v7)
          v7 = v7;
        else
          v7 = v6;
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  *a2 = 0;
  v11 = (void *)*((_QWORD *)this + 85);
  if (v11)
  {
    if ((signed int)v4 <= *((_DWORD *)this + 172))
      goto LABEL_18;
    result = uprv_realloc(v11, 8 * v4);
    if (result)
    {
      *((_QWORD *)this + 85) = result;
      *((_DWORD *)this + 172) = v4;
      goto LABEL_18;
    }
LABEL_30:
    *((_DWORD *)this + 172) = 0;
    return result;
  }
  *((_DWORD *)this + 172) = v4;
  result = uprv_malloc(8 * v4);
  if (!result)
    goto LABEL_30;
  *((_QWORD *)this + 85) = result;
LABEL_18:
  LODWORD(v13) = 0;
LABEL_19:
  v14 = *((_QWORD *)this + 80);
  if ((_DWORD)v13)
  {
    v15 = *(_DWORD *)(v14 + 16 * v13 + 12);
    if (v15 <= (int)v13)
      v13 = v13;
    else
      v13 = v15;
  }
  else
  {
    v13 = 0;
  }
  v16 = (int *)(v14 + 16 * v13 + 16);
  while (1)
  {
    v18 = *v16;
    v16 += 4;
    v17 = v18;
    if (v18 == 1)
      return (void *)*((_QWORD *)this + 85);
    LODWORD(v13) = v13 + 1;
    if (v17 == 5)
    {
      if ((v13 & 0x80000000) != 0)
        return (void *)*((_QWORD *)this + 85);
      CachedFormatter = icu::MessageFormat::getCachedFormatter(this, v13);
      v20 = *((_QWORD *)this + 85);
      v21 = *a2;
      *a2 = v21 + 1;
      *(_QWORD *)(v20 + 8 * v21) = CachedFormatter;
      goto LABEL_19;
    }
  }
}

icu::UnicodeString *icu::MessageFormat::getArgName@<X0>(icu::MessageFormat *this@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  return icu::UnicodeString::tempSubString((icu::MessageFormat *)((char *)this + 568), *(_DWORD *)(*((_QWORD *)this + 80) + 16 * a2 + 4), *(unsigned __int16 *)(*((_QWORD *)this + 80) + 16 * a2 + 8), a3);
}

uint64_t icu::MessageFormat::getFormatNames(icu::MessageFormat *this, UErrorCode *a2)
{
  uint64_t *v2;
  icu::UVector *v5;
  icu::UVector *v6;
  uint64_t result;
  unint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  void *v19;
  icu::UnicodeString *v20;
  uint64_t *v21;
  UChar *v22[9];

  v22[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 <= 0)
  {
    v5 = (icu::UVector *)icu::UMemory::operator new(v2, (icu::UMemory *)0x28, (unint64_t)a2);
    if (v5)
    {
      v6 = v5;
      icu::UVector::UVector(v5, a2);
      if (*(int *)a2 <= 0)
      {
        icu::UVector::setDeleter(v6, (void (*)(void *))uprv_deleteUObject);
        v9 = 0;
LABEL_10:
        v10 = (uint64_t *)*((_QWORD *)this + 80);
        if (v9)
        {
          LODWORD(v11) = HIDWORD(v10[2 * v9 + 1]);
          if ((int)v11 <= (int)v9)
            v11 = v9;
          else
            v11 = v11;
        }
        else
        {
          v11 = 0;
        }
        v12 = 0;
        v13 = &v10[2 * v11 + 2];
        while (1)
        {
          v15 = *(_DWORD *)v13;
          v13 += 2;
          v14 = v15;
          if (v15 == 1)
            break;
          ++v12;
          if (v14 == 5)
          {
            v9 = v11 + v12;
            if ((((_DWORD)v11 + v12) & 0x80000000) == 0)
            {
              v16 = &v10[2 * (v11 + v12 + 1)];
              icu::UnicodeString::tempSubString((icu::MessageFormat *)((char *)this + 568), *((_DWORD *)v16 + 1), *((unsigned __int16 *)v16 + 4), (icu::UnicodeString *)v22);
              v20 = icu::UnicodeString::clone(v22, v17, v18);
              if (!v20)
              {
                v19 = (void *)*(unsigned int *)a2;
                if ((int)v19 <= 0)
                  *a2 = U_MEMORY_ALLOCATION_ERROR;
              }
              icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
              icu::UVector::adoptElement(v6, v20, a2);
              if (*(int *)a2 < 1)
                goto LABEL_10;
              goto LABEL_4;
            }
            break;
          }
        }
        v21 = icu::UMemory::operator new(v10, (icu::UMemory *)0x80, v8);
        if (!v21)
        {
          if (*(int *)a2 <= 0)
            *a2 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_4;
        }
        result = icu::StringEnumeration::StringEnumeration((uint64_t)v21);
        *(_QWORD *)result = off_1E2261FA8;
        *(_DWORD *)(result + 116) = 0;
        *(_QWORD *)(result + 120) = v6;
        if (*(int *)a2 < 1)
          return result;
        (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      else
      {
LABEL_4:
        (*(void (**)(icu::UVector *))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    else if (*(int *)a2 <= 0)
    {
      result = 0;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
      return result;
    }
  }
  return 0;
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::Formattable *a2, unsigned int a3, icu::UnicodeString *a4, icu::FieldPosition *a5, UErrorCode *a6)
{
  return icu::MessageFormat::format(this, a2, 0, a3, a4, a5, a6);
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::Formattable *a2, const icu::UnicodeString *a3, unsigned int a4, icu::UnicodeString *a5, icu::FieldPosition *a6, UErrorCode *a7)
{
  uint64_t v9[2];
  _QWORD v10[2];

  if (*(int *)a7 <= 0)
  {
    v10[0] = &unk_1E2256BA0;
    v10[1] = a5;
    v9[0] = (uint64_t)v10;
    v9[1] = 0;
    icu::MessageFormat::format((char *)this, 0, 0, a2, a3, a4, v9, (uint64_t)a6, a7);
    icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v10);
  }
  return a5;
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::UnicodeString *a2, const icu::Formattable *a3, icu::UnicodeString *a4, UErrorCode *a5, UErrorCode *a6)
{
  unsigned int v8;
  _BYTE v12[816];
  uint64_t v13;

  v8 = a3;
  v13 = *MEMORY[0x1E0C80C00];
  bzero(v12, 0x330uLL);
  icu::MessageFormat::MessageFormat((icu::MessageFormat *)v12, this, a5);
  icu::MessageFormat::format((icu::MessageFormat *)v12, a2, 0, v8, a4, 0, a5);
  icu::MessageFormat::~MessageFormat((icu::MessageFormat *)v12);
  return a4;
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
  {
    if (icu::Formattable::getType(a2) == 4)
      icu::MessageFormat::format(this, *((const icu::Formattable **)a2 + 1), 0, *((_DWORD *)a2 + 4), a3, a4, a5);
    else
      *a5 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  return a3;
}

icu::UnicodeString *icu::MessageFormat::format(icu::MessageFormat *this, const icu::UnicodeString *a2, const icu::Formattable *a3, unsigned int a4, icu::UnicodeString *a5, UErrorCode *a6)
{
  return icu::MessageFormat::format(this, a3, a2, a4, a5, 0, a6);
}

const icu::Formattable *icu::MessageFormat::getArgFromListByName(icu::MessageFormat *this, const icu::Formattable *a2, const icu::UnicodeString *a3, int a4, icu::UnicodeString *a5)
{
  char *v8;
  uint64_t i;
  unsigned int v10;
  int32_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;

  if (a4 >= 1)
  {
    v8 = (char *)a5 + 10;
    for (i = a4; i; --i)
    {
      v10 = *((unsigned __int16 *)a3 + 4);
      if (*((__int16 *)a3 + 4) < 0)
        v11 = *((_DWORD *)a3 + 3);
      else
        v11 = v10 >> 5;
      v12 = *((unsigned __int16 *)a5 + 4);
      if ((v12 & 1) != 0)
      {
        if ((v10 & 1) != 0)
          return a2;
      }
      else
      {
        if ((v12 & 0x8000u) == 0)
          v13 = v12 >> 5;
        else
          v13 = *((_DWORD *)a5 + 3);
        if ((v12 & 2) != 0)
          v14 = (uint64_t)v8;
        else
          v14 = *((_QWORD *)a5 + 3);
        if (!icu::UnicodeString::doCompare((uint64_t)a3, 0, v11, v14, v13 & (v13 >> 31), v13 & ~(v13 >> 31)))return a2;
      }
      a2 = (const icu::Formattable *)((char *)a2 + 112);
      a3 = (const icu::UnicodeString *)((char *)a3 + 64);
    }
  }
  return 0;
}

char *icu::MessageFormat::format(char *result, int a2, uint64_t a3, const icu::Formattable *a4, const icu::UnicodeString *a5, unsigned int a6, uint64_t *a7, uint64_t a8, UErrorCode *a9)
{
  uint64_t v10;
  icu::MessageFormat *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  UErrorCode *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  icu::UnicodeString *v23;
  const icu::Formattable *ArgFromListByName;
  icu::DecimalFormat *DefaultNumberFormat;
  signed int v26;
  icu::DecimalFormat *DateTimeInstance;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  icu::UnicodeString *v32;
  icu::Format *CachedFormatter;
  icu::Format *v34;
  int32_t v35;
  uint64_t v36;
  UErrorCode *v37;
  uint64_t *v38;
  int32_t v39;
  uint64_t v40;
  int v41;
  void *v42;
  const icu::MessagePattern *v43;
  double Double;
  uint64_t SubMessage;
  uint64_t String;
  uint64_t v47;
  double PluralOffset;
  double v49;
  UErrorCode *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  UErrorCode *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  icu::MessagePattern *v58;
  icu::Locale *v59;
  uint64_t v60;
  icu::Formattable *v61;
  icu::UnicodeString *v67;
  __int128 v68;
  _OWORD v69[50];
  void (**v70)(icu::UnicodeString *__hidden);
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _OWORD v75[4];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (*(int *)a9 <= 0)
  {
    LODWORD(v10) = a2;
    v11 = (icu::MessageFormat *)result;
    v67 = (icu::UnicodeString *)(result + 568);
    v12 = *((_QWORD *)result + 80) + 16 * a2;
    v13 = *(_DWORD *)(v12 + 4) + *(unsigned __int16 *)(v12 + 8);
    v60 = a3 + 152;
    v61 = (icu::Formattable *)(a3 + 16);
    v58 = (icu::MessagePattern *)(result + 552);
    v59 = (icu::Locale *)(result + 328);
    v56 = result + 784;
    v57 = result + 752;
    do
    {
      v14 = (int)v10;
      v10 = (int)v10 + 1;
      v15 = *((_QWORD *)v11 + 80);
      v16 = (int *)(v15 + 16 * v10);
      v17 = *v16;
      result = (char *)sub_18BCFF314(a7, v67, v13, v16[1] - v13);
      if (v17 == 1)
        return result;
      if (v17 != 5)
      {
        v13 = v16[1] + *((unsigned __int16 *)v16 + 4);
        if (v17 == 4)
        {
          if (*(_BYTE *)(a3 + 216))
          {
            result = (char *)sub_18BCFF38C(a7, *(icu::Format **)(a3 + 144), v61, v60, a9);
          }
          else
          {
            DefaultNumberFormat = icu::MessageFormat::getDefaultNumberFormat(v11, a9, v18);
            result = (char *)sub_18BCFF420(a7, DefaultNumberFormat, v61, a9);
          }
        }
        continue;
      }
      v19 = *((_QWORD *)v11 + 80);
      if (*(_DWORD *)(v19 + 16 * v10 + 12) <= (int)v10)
        v20 = v10;
      else
        v20 = *(_DWORD *)(v19 + 16 * v10 + 12);
      if ((*v16 - 5) > 1)
        v21 = 0;
      else
        v21 = *(__int16 *)(v15 + 16 * v10 + 10);
      memset(v75, 0, sizeof(v75));
      v22 = v19 + 16 * (v14 + 2);
      v23 = icu::UnicodeString::tempSubString(v67, *(_DWORD *)(v22 + 4), *(unsigned __int16 *)(v22 + 8), (icu::UnicodeString *)v75);
      if (a5)
      {
        ArgFromListByName = icu::MessageFormat::getArgFromListByName(v23, a4, a5, a6, (icu::UnicodeString *)v75);
        if (!ArgFromListByName)
          goto LABEL_27;
      }
      else
      {
        v26 = *(__int16 *)(v22 + 10);
        if (v26 < 0 || v26 >= (int)a6)
        {
LABEL_27:
          icu::UnicodeString::UnicodeString((uint64_t)&v68, 123);
          if ((SWORD4(v75[0]) & 0x8000u) == 0)
            v28 = WORD4(v75[0]) >> 5;
          else
            v28 = HIDWORD(v75[0]);
          v29 = icu::UnicodeString::doAppend((uint64_t)&v68, (const icu::UnicodeString *)v75, 0, v28);
          LOWORD(v70) = 125;
          v30 = icu::UnicodeString::doAppend(v29, (uint64_t)&v70, 0, 1);
          sub_18BCFF4D0(a7, v30);
          v32 = (icu::UnicodeString *)&v68;
LABEL_54:
          icu::UnicodeString::~UnicodeString(v31, v32);
          goto LABEL_55;
        }
        if (!a4)
        {
          (*(void (**)(uint64_t, const __int16 *, uint64_t))(*(_QWORD *)*a7 + 40))(*a7, L"null", 4);
          *((_DWORD *)a7 + 2) += 4;
          goto LABEL_55;
        }
        ArgFromListByName = (const icu::Formattable *)((char *)a4 + 112 * v26);
      }
      if (a3 && *(_DWORD *)(a3 + 136) == (_DWORD)v10)
      {
        DateTimeInstance = *(icu::DecimalFormat **)(a3 + 144);
        if (*(double *)(a3 + 128) != 0.0)
          goto LABEL_45;
        sub_18BCFF38C(a7, DateTimeInstance, v61, v60, a9);
      }
      else
      {
        CachedFormatter = (icu::Format *)icu::MessageFormat::getCachedFormatter(v11, v10);
        if (CachedFormatter)
        {
          v34 = CachedFormatter;
          {
            v74 = 0;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            v70 = off_1E2256B38;
            LOWORD(v71) = 2;
            icu::Format::format(v34, ArgFromListByName, (icu::UnicodeString *)&v70, a9);
            if ((v71 & 0x8000u) == 0)
              v35 = (unsigned __int16)v71 >> 5;
            else
              v35 = DWORD1(v71);
            if ((icu::UnicodeString::doIndexOf((uint64_t)&v70, 0x7Bu, 0, v35) & 0x80000000) != 0
              && ((v71 & 0x8000u) == 0 ? (v39 = (unsigned __int16)v71 >> 5) : (v39 = DWORD1(v71)),
                  (icu::UnicodeString::doIndexOf((uint64_t)&v70, 0x27u, 0, v39) & 0x80000000) != 0
               || *((_DWORD *)v11 + 140) == 1))
            {
              sub_18BCFF4D0(a7, (uint64_t)&v70);
            }
            else
            {
              bzero(&v68, 0x330uLL);
              icu::MessageFormat::MessageFormat((icu::MessageFormat *)&v68, (const icu::UnicodeString *)&v70, v59, a9);
              icu::MessageFormat::format(&v68, 0, 0, a4, a5, a6, a7, a8, a9);
              icu::MessageFormat::~MessageFormat((icu::MessageFormat *)&v68);
            }
            v32 = (icu::UnicodeString *)&v70;
            goto LABEL_54;
          }
          v38 = a7;
          DateTimeInstance = v34;
          goto LABEL_46;
        }
        if (!v21 || (v36 = *((_QWORD *)v11 + 92)) != 0 && uhash_iget(v36, v10))
        {
          if (icu::Formattable::isNumeric(ArgFromListByName))
          {
            DateTimeInstance = icu::MessageFormat::getDefaultNumberFormat(v11, a9, v37);
          }
          else
          {
            if (icu::Formattable::getType(ArgFromListByName))
            {
              String = icu::Formattable::getString(ArgFromListByName, a9);
              sub_18BCFF4D0(a7, String);
              goto LABEL_55;
            }
            DateTimeInstance = (icu::DecimalFormat *)*((_QWORD *)v11 + 91);
            if (!DateTimeInstance)
            {
              DateTimeInstance = icu::DateFormat::createDateTimeInstance(3, 3, v59);
              *((_QWORD *)v11 + 91) = DateTimeInstance;
              if (!DateTimeInstance)
                *a9 = U_MEMORY_ALLOCATION_ERROR;
            }
          }
LABEL_45:
          v38 = a7;
LABEL_46:
          sub_18BCFF420(v38, DateTimeInstance, ArgFromListByName, a9);
          goto LABEL_55;
        }
        v43 = (const icu::MessagePattern *)(v14 + 3);
        switch(v21)
        {
          case 2:
            if (!icu::Formattable::isNumeric(ArgFromListByName))
              goto LABEL_78;
            Double = icu::Formattable::getDouble(ArgFromListByName, a9);
            SubMessage = icu::ChoiceFormat::findSubMessage(v58, v43, Double);
            break;
          case 5:
            goto LABEL_67;
          case 4:
            v53 = icu::Formattable::getString(ArgFromListByName, a9);
            SubMessage = icu::SelectFormat::findSubMessage(v58, v43, v53, (const icu::UnicodeString *)a9, v54);
            break;
          case 3:
LABEL_67:
            if (!icu::Formattable::isNumeric(ArgFromListByName))
            {
LABEL_78:
              v55 = 1;
LABEL_79:
              *a9 = v55;
              return (char *)icu::UnicodeString::~UnicodeString((void *)v55, (icu::UnicodeString *)v75);
            }
            if (v21 == 3)
              v47 = (uint64_t)v57;
            else
              v47 = (uint64_t)v56;
            PluralOffset = icu::MessagePattern::getPluralOffset(v58, (int)v43);
            v68 = 0u;
            memset(v69, 0, 208);
            sub_18BCFF91C((uint64_t)&v68, (int)v43, (uint64_t)v75, ArgFromListByName, a9, PluralOffset);
            v49 = icu::Formattable::getDouble(ArgFromListByName, a9);
            v51 = icu::PluralFormat::findSubMessage(v58, v43, v47, (const icu::PluralFormat::PluralSelector *)&v68, (int *)a9, v49, v50);
            icu::MessageFormat::formatComplexSubMessage(v11, v51, (uint64_t)&v68, (uint64_t)a4, (uint64_t)a5, a6, a7, a9);
            icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)((char *)&v69[8] + 8));
            icu::Formattable::~Formattable((icu::Formattable *)v69);
            goto LABEL_55;
          default:
            v55 = 5;
            goto LABEL_79;
        }
        icu::MessageFormat::formatComplexSubMessage(v11, SubMessage, 0, (uint64_t)a4, (uint64_t)a5, a6, a7, a9);
      }
LABEL_55:
      v40 = *((_QWORD *)v11 + 80) + 16 * v20;
      v41 = *(_DWORD *)(v40 + 4);
      v42 = (void *)*(unsigned __int16 *)(v40 + 8);
      v13 = v41 + (_DWORD)v42;
      result = (char *)icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v75);
      a8 = 0;
      LODWORD(v10) = v20;
    }
    while (*(int *)a9 < 1);
  }
  return result;
}

void *sub_18BCFF314(uint64_t *a1, icu::UnicodeString *this, int a3, int32_t a4)
{
  void *v5;
  _BYTE v7[64];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::tempSubString(this, a3, a4, (icu::UnicodeString *)v7);
  sub_18BCFF4D0(a1, (uint64_t)v7);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
}

uint64_t *sub_18BCFF38C(uint64_t *result, icu::Format *a2, icu::Formattable *a3, uint64_t a4, UErrorCode *a5)
{
  if (*(unsigned __int16 *)(a4 + 8) < 0x20u)
    return (uint64_t *)sub_18BCFF420(result, a2, a3, a5);
  if (*(int *)a5 <= 0)
    return (uint64_t *)sub_18BCFF4D0(result, a4);
  return result;
}

icu::DecimalFormat *icu::MessageFormat::getDefaultNumberFormat(icu::MessageFormat *this, UErrorCode *a2, UErrorCode *a3)
{
  icu::DecimalFormat *result;

  result = (icu::DecimalFormat *)*((_QWORD *)this + 90);
  if (!result)
  {
    result = icu::NumberFormat::createInstance((char **)this + 41, a2, a3);
    *((_QWORD *)this + 90) = result;
    if (*(int *)a2 < 1)
    {
      if (!result)
        *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
    else
    {
      if (result)
        (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)result + 8))(result);
      result = 0;
      *((_QWORD *)this + 90) = 0;
    }
  }
  return result;
}

void *sub_18BCFF420(uint64_t *a1, icu::Format *this, icu::Formattable *a3, UErrorCode *a4)
{
  void *v6;
  void (**v8)(icu::UnicodeString *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v9 = 0u;
  v10 = 0u;
  v12 = 0;
  v11 = 0u;
  v8 = off_1E2256B38;
  LOWORD(v9) = 2;
  icu::Format::format(this, a3, (icu::UnicodeString *)&v8, a4);
  v6 = (void *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
    sub_18BCFF4D0(a1, (uint64_t)&v8);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
}

uint64_t sub_18BCFF4D0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  int v12;
  unsigned int v13;

  v4 = *a1;
  v5 = *(unsigned __int16 *)(a2 + 8);
  if ((v5 & 0x11) != 0)
  {
    v6 = 0;
  }
  else if ((v5 & 2) != 0)
  {
    v6 = a2 + 10;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 24);
  }
  v7 = (__int16)v5;
  v8 = v5 >> 5;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = *(unsigned int *)(a2 + 12);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v6, v9);
  v11 = *(unsigned __int16 *)(a2 + 8);
  v12 = (__int16)v11;
  v13 = v11 >> 5;
  if (v12 < 0)
    v13 = *(_DWORD *)(a2 + 12);
  *((_DWORD *)a1 + 2) += v13;
  return result;
}

icu::SimpleDateFormat *icu::MessageFormat::getDefaultDateFormat(icu::MessageFormat *this, UErrorCode *a2)
{
  icu::SimpleDateFormat *result;

  result = (icu::SimpleDateFormat *)*((_QWORD *)this + 91);
  if (!result)
  {
    result = icu::DateFormat::createDateTimeInstance(3, 3, (icu::MessageFormat *)((char *)this + 328));
    *((_QWORD *)this + 91) = result;
    if (!result)
      *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

_QWORD *icu::MessageFormat::formatComplexSubMessage(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, UErrorCode *a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  const icu::UnicodeString *v15;
  _DWORD *v16;
  unsigned int v17;
  UErrorCode *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  icu::UnicodeString *v23;
  icu::UnicodeString *v24;
  uint64_t v25;
  icu::DecimalFormat *DefaultNumberFormat;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int32_t v30;
  void *v31;
  void *v32;
  unsigned int v35;
  icu::Formattable *v37;
  icu::UnicodeString *v39;
  _OWORD v40[4];
  uint64_t v41;
  _QWORD v42[69];
  uint64_t v43;
  int v44;
  void (**v45)(icu::UnicodeString *__hidden);
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  void (**v50)(icu::UnicodeString *__hidden);
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (*(int *)a8 <= 0)
  {
    LODWORD(v9) = a2;
    v10 = result;
    if (*((_DWORD *)result + 140) == 1)
    {
      v35 = a6;
      v51 = 0u;
      v54 = 0;
      v53 = 0u;
      v52 = 0u;
      v50 = off_1E2256B38;
      LOWORD(v51) = 2;
      v11 = result[80];
      v12 = *(_DWORD *)(v11 + 16 * (int)a2 + 4) + *(unsigned __int16 *)(v11 + 16 * (int)a2 + 8);
      v39 = (icu::UnicodeString *)(a3 + 152);
      v37 = (icu::Formattable *)(a3 + 16);
      while (1)
      {
        v9 = (int)v9 + 1;
        v13 = *(_DWORD *)(v11 + 16 * v9);
        v14 = v11 + 16 * v9;
        v17 = *(_DWORD *)(v14 + 4);
        v16 = (_DWORD *)(v14 + 4);
        v15 = (const icu::UnicodeString *)v17;
        switch(v13)
        {
          case 1:
            icu::UnicodeString::doAppend((uint64_t)&v50, (const icu::UnicodeString *)(v10 + 71), v12, ((_DWORD)v15 - v12));
            if ((v51 & 0x8000u) == 0)
              v30 = (unsigned __int16)v51 >> 5;
            else
              v30 = DWORD1(v51);
            if ((icu::UnicodeString::doIndexOf((uint64_t)&v50, 0x7Bu, 0, v30) & 0x80000000) != 0)
            {
              sub_18BCFF4D0(a7, (uint64_t)&v50);
            }
            else
            {
              v46 = 0u;
              v49 = 0;
              v48 = 0u;
              v47 = 0u;
              v45 = off_1E2256B38;
              LOWORD(v46) = 2;
              bzero(v42, 0x330uLL);
              icu::MessageFormat::MessageFormat((icu::MessageFormat *)v42, (const icu::UnicodeString *)&v45, (const icu::Locale *)(v10 + 41), a8);
              if (v44 != 1)
              {
                icu::MessagePattern::clear((uint64_t)&v43);
                v44 = 1;
              }
              v41 = 0;
              memset(v40, 0, sizeof(v40));
              (*(void (**)(_QWORD *, void (***)(icu::UnicodeString *__hidden), _OWORD *, UErrorCode *))(v42[0] + 88))(v42, &v50, v40, a8);
              icu::MessageFormat::format(v42, 0, 0, a4, a5, v35, a7, 0, a8);
              icu::MessageFormat::~MessageFormat((icu::MessageFormat *)v42);
              icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v45);
            }
            return icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v50);
          case 2:
          case 4:
            icu::UnicodeString::doAppend((uint64_t)&v50, (const icu::UnicodeString *)(v10 + 71), v12, ((_DWORD)v15 - v12));
            if (v13 == 4)
            {
              if (*(_BYTE *)(a3 + 216))
              {
                v19 = *(unsigned __int16 *)(a3 + 160);
                v20 = (__int16)v19;
                v21 = v19 >> 5;
                if (v20 >= 0)
                  v22 = v21;
                else
                  v22 = *(unsigned int *)(a3 + 164);
                v23 = v39;
              }
              else
              {
                DefaultNumberFormat = icu::MessageFormat::getDefaultNumberFormat((icu::MessageFormat *)v10, a8, v18);
                v23 = icu::Format::format(DefaultNumberFormat, v37, (icu::UnicodeString *)&v50, a8);
                v27 = *((unsigned __int16 *)v23 + 4);
                v28 = (__int16)v27;
                v29 = v27 >> 5;
                if (v28 >= 0)
                  v22 = v29;
                else
                  v22 = *((unsigned int *)v23 + 3);
              }
              icu::UnicodeString::doAppend((uint64_t)&v50, v23, 0, v22);
            }
            v12 = *v16 + *(unsigned __int16 *)(v11 + 16 * v9 + 8);
            goto LABEL_19;
          case 5:
            icu::UnicodeString::doAppend((uint64_t)&v50, (const icu::UnicodeString *)(v10 + 71), v12, ((_DWORD)v15 - v12));
            v25 = v10[80];
            if (*(_DWORD *)(v25 + 16 * v9 + 12) > (int)v9)
              LODWORD(v9) = *(_DWORD *)(v25 + 16 * v9 + 12);
            v12 = *(_DWORD *)(v25 + 16 * (int)v9 + 4) + *(unsigned __int16 *)(v25 + 16 * (int)v9 + 8);
            icu::MessageImpl::appendReducedApostrophes((icu::MessageImpl *)(v10 + 71), v15, v12, (uint64_t)&v50, v24);
            goto LABEL_19;
          default:
LABEL_19:
            v11 = v10[80];
            break;
        }
      }
    }
    return (_QWORD *)icu::MessageFormat::format(result, a2, a3, a4, a5, a6, a7, 0, a8);
  }
  return result;
}

uint64_t sub_18BCFF91C(uint64_t a1, int a2, uint64_t a3, icu::Formattable *a4, UErrorCode *a5, double a6)
{
  uint64_t v10;
  double Double;
  _BYTE v13[112];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v10 = a1 + 16;
  icu::Formattable::Formattable((icu::Formattable *)(a1 + 16));
  *(double *)(a1 + 128) = a6;
  *(_DWORD *)(a1 + 136) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = off_1E2256B38;
  *(_WORD *)(a1 + 160) = 2;
  *(_BYTE *)(a1 + 216) = 0;
  if (a6 == 0.0)
  {
    icu::Formattable::operator=(v10, (uint64_t)a4);
  }
  else
  {
    Double = icu::Formattable::getDouble(a4, a5);
    icu::Formattable::Formattable((icu::Formattable *)v13, Double - a6);
    icu::Formattable::operator=(v10, (uint64_t)v13);
    icu::Formattable::~Formattable((icu::Formattable *)v13);
  }
  return a1;
}

uint64_t icu::MessageFormat::updateMetaData()
{
  return 0;
}

uint64_t icu::MessageFormat::getLiteralStringUntilNextArgument@<X0>(icu::MessageFormat *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const icu::UnicodeString *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;

  v6 = (icu::MessageFormat *)((char *)this + 568);
  v7 = *((_QWORD *)this + 80);
  v8 = v7 + 16 * a2;
  v9 = *(_DWORD *)(v8 + 4) + *(unsigned __int16 *)(v8 + 8);
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)a3 = off_1E2256B38;
  *(_WORD *)(a3 + 8) = 2;
  v11 = *(_DWORD *)(v8 + 20);
  v10 = (_DWORD *)(v8 + 20);
  v12 = *(v10 - 1);
  result = icu::UnicodeString::doAppend(a3, (icu::MessageFormat *)((char *)this + 568), v9, (v11 - v9));
  if ((v12 & 0xFFFFFFFB) != 1)
  {
    v14 = 16 * a2;
    do
    {
      v15 = *v10 + *(unsigned __int16 *)(v7 + v14 + 24);
      v7 = *((_QWORD *)this + 80);
      v10 = (_DWORD *)(v7 + v14 + 36);
      v16 = *(_DWORD *)(v7 + v14 + 32);
      result = icu::UnicodeString::doAppend(a3, v6, v15, (*v10 - v15));
      v14 += 16;
    }
    while ((v16 & 0xFFFFFFFB) != 1);
  }
  return result;
}

uint64_t icu::MessageFormat::findOtherSubMessage(icu::MessageFormat *this, int a2)
{
  char *v3;
  int v4;
  int v5;
  _DWORD *v6;
  unsigned int *v7;
  uint64_t v8;
  int v9;
  const char *v11;
  _OWORD v12[4];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 552;
  v4 = *((_DWORD *)this + 162);
  if ((*(_DWORD *)(*((_QWORD *)this + 80) + 16 * a2) & 0xFFFFFFFE) == 0xC)
    v5 = a2 + 1;
  else
    v5 = a2;
  memset(v12, 0, sizeof(v12));
  v11 = "o";
  icu::UnicodeString::UnicodeString(v12, 0, &v11);
  v6 = (_DWORD *)*((_QWORD *)this + 80);
  do
  {
    v7 = &v6[4 * v5];
    v6 = (_DWORD *)*v7;
    if ((_DWORD)v6 == 6)
      break;
    v8 = v5 + 1;
    if (sub_18BCFDDA4((uint64_t)v3, (uint64_t)v7, (uint64_t)v12))
      goto LABEL_14;
    v6 = (_DWORD *)*((_QWORD *)this + 80);
    v9 = (v6[4 * v8] & 0xFFFFFFFE) == 0xC ? v5 + 2 : v5 + 1;
    if (v6[4 * v9 + 3] > v9)
      v9 = v6[4 * v9 + 3];
    v5 = v9 + 1;
  }
  while (v9 + 1 < v4);
  v8 = 0;
LABEL_14:
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  return v8;
}

uint64_t icu::MessageFormat::findFirstPluralNumberArg(icu::MessageFormat *this, int a2, const icu::UnicodeString *a3)
{
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  LODWORD(v4) = a2;
  v6 = (char *)this + 552;
  v7 = *((_QWORD *)this + 80);
LABEL_2:
  v8 = 16 * (int)v4;
  while (1)
  {
    v9 = *(_DWORD *)(v7 + v8 + 16);
    if (v9 == 1)
      return 0;
    if (v9 == 4)
      return 0xFFFFFFFFLL;
    v4 = (v4 + 1);
    v8 += 16;
    if (v9 == 5)
    {
      if (*((unsigned __int16 *)a3 + 4) >= 0x20u && *(unsigned __int16 *)(v7 + v8 + 10) <= 1u)
      {
        if (sub_18BCFDDA4((uint64_t)v6, v7 + 16 * ((int)v4 + 1), (uint64_t)a3))
          return v4;
        v7 = *((_QWORD *)this + 80);
      }
      if (*(_DWORD *)(v7 + v8 + 12) > (int)v4)
        LODWORD(v4) = *(_DWORD *)(v7 + v8 + 12);
      goto LABEL_2;
    }
  }
}

uint64_t icu::MessageFormat::parse(icu::MessageFormat *this, unint64_t a2, const icu::UnicodeString *a3, icu::ParsePosition *a4, int *a5, UErrorCode *a6)
{
  uint64_t v6;
  int v10;
  signed int v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  icu::ParsePosition *v19;
  uint64_t v20;
  uint64_t v21;
  icu::Formattable *v22;
  uint64_t v23;
  int v24;
  int v25;
  const icu::UnicodeString *v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int v31;
  int32_t v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;
  int32_t v37;
  int32_t v38;
  int v39;
  const icu::UnicodeString *v40;
  int v41;
  icu::MessageFormat *v42;
  uint64_t v43;
  int v44;
  signed int v45;
  icu::Formattable *v46;
  const void *CachedFormatter;
  uint64_t v48;
  unsigned int v49;
  int v50;
  int32_t v51;
  int v52;
  double v53;
  int *v54;
  icu::UnicodeString *v55;
  char *v56;
  int v57;
  unint64_t v58;
  int32_t v59;
  int v60;
  char *v61;
  int v62;
  void *v63;
  void *v64;
  uint64_t v65;
  int v66;
  void *v67;
  uint64_t v68;
  icu::ChoiceFormat *v70;
  char *v72;
  int *v73;
  uint64_t v74;
  icu::MessageFormat *v75;
  void (**v77)(icu::ParsePosition *__hidden);
  unint64_t v78;
  uint64_t v79;
  void (**v80)(icu::UnicodeString *__hidden);
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _OWORD v85[4];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  void (**v90)(icu::UnicodeString *__hidden);
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  _OWORD v95[2];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  if (*(int *)a6 >= 1)
  {
    v6 = 0;
LABEL_5:
    *((_DWORD *)a4 + 3) = *((_DWORD *)a4 + 2);
    return v6;
  }
  if (*((_BYTE *)this + 676))
  {
    v6 = 0;
    *a6 = U_ARGUMENT_TYPE_MISMATCH;
    goto LABEL_5;
  }
  v10 = a2;
  v70 = (icu::MessageFormat *)((char *)this + 552);
  v11 = *((_DWORD *)this + 176);
  if (v11 <= 1)
    v11 = 1;
  v12 = v11;
  v13 = 112 * v11;
  v14 = !is_mul_ok(v12, 0x70uLL);
  v15 = __CFADD__(v13, 16);
  v16 = v13 + 16;
  if (v15)
    v14 = 1;
  if (v14)
    v17 = -1;
  else
    v17 = v16;
  v18 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v17, a2);
  v73 = a5;
  if (v18)
  {
    *v18 = 112;
    v18[1] = v12;
    v20 = (uint64_t)(v18 + 2);
    v21 = 112 * v12;
    v22 = (icu::Formattable *)(v18 + 2);
    do
    {
      v22 = (icu::Formattable *)((char *)icu::Formattable::Formattable(v22) + 112);
      v21 -= 112;
    }
    while (v21);
  }
  else
  {
    v20 = 0;
  }
  v74 = v20;
  v75 = this;
  v79 = v20;
  v72 = (char *)this + 568;
  v23 = *((_QWORD *)this + 80);
  v24 = *(_DWORD *)(v23 + 16 * v10 + 4) + *(unsigned __int16 *)(v23 + 16 * v10 + 8);
  v25 = *((_DWORD *)a4 + 2);
  v77 = off_1E224A8B0;
  v78 = 0xFFFFFFFF00000000;
  v26 = a3;
  while (1)
  {
    v27 = v10;
    v28 = v10 + 1;
    v29 = (int *)(v23 + 16 * v28);
    v30 = *v29;
    v31 = v29[1];
    v32 = v31 - v24;
    if (v31 == v24)
      goto LABEL_41;
    v33 = *((unsigned __int16 *)v26 + 4);
    if ((v33 & 1) != 0)
    {
      v39 = (*((_WORD *)v75 + 288) & 1) == 0;
      goto LABEL_40;
    }
    v34 = (v33 & 0x8000u) == 0 ? v33 >> 5 : *((_DWORD *)v26 + 3);
    if (v25 < 0)
    {
      v35 = 0;
    }
    else
    {
      v35 = v34;
      v36 = v25;
      if (v34 >= v25)
      {
        if ((v32 & 0x80000000) == 0)
          goto LABEL_29;
        goto LABEL_34;
      }
    }
    v36 = v35;
    if ((v32 & 0x80000000) == 0)
    {
LABEL_29:
      v37 = v34 - v36;
      v38 = v32;
      if (v37 >= v32)
        goto LABEL_36;
      goto LABEL_35;
    }
LABEL_34:
    v37 = 0;
LABEL_35:
    v38 = v37;
LABEL_36:
    v40 = (v33 & 2) != 0
        ? (const icu::UnicodeString *)((char *)a3 + 10)
        : (const icu::UnicodeString *)*((_QWORD *)v26 + 3);
    v39 = icu::UnicodeString::doCompare((uint64_t)v72, v24, v32, (uint64_t)v40, v36, v38);
    v26 = a3;
LABEL_40:
    if (v39)
    {
      v6 = 0;
      *((_DWORD *)a4 + 3) = v25;
      goto LABEL_120;
    }
LABEL_41:
    v41 = v32 + v25;
    if (v30 == 1)
    {
      *((_DWORD *)a4 + 2) = v41;
      v79 = 0;
      v6 = v74;
      goto LABEL_120;
    }
    if ((v30 & 0xFFFFFFFE) == 2)
    {
      v24 = v29[1] + *(unsigned __int16 *)(v23 + 16 * v28 + 8);
      v10 = v28;
      v25 = v41;
      v42 = v75;
      goto LABEL_110;
    }
    v42 = v75;
    v43 = *((_QWORD *)v75 + 80);
    if (*(_DWORD *)(v43 + 16 * v28 + 12) <= (int)v28)
      v10 = v28;
    else
      v10 = *(_DWORD *)(v43 + 16 * v28 + 12);
    if ((*v29 - 5) > 1)
      v44 = 0;
    else
      v44 = *(__int16 *)(v23 + 16 * v28 + 10);
    v45 = *(__int16 *)(v43 + 16 * v27 + 42);
    v94 = 0;
    v92 = 0u;
    v93 = 0u;
    v91 = 0u;
    v90 = off_1E2256B38;
    LOWORD(v91) = 2;
    v46 = (icu::Formattable *)(v74 + 112 * v45);
    if (*((_QWORD *)v75 + 92))
    {
      CachedFormatter = icu::MessageFormat::getCachedFormatter(v75, v28);
      if (CachedFormatter)
      {
        LODWORD(v78) = v41;
        (*(void (**)(const void *, const icu::UnicodeString *, icu::Formattable *, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)CachedFormatter + 56))(CachedFormatter, a3, v46, &v77);
        v25 = v78;
        if ((_DWORD)v78 == v41)
          goto LABEL_113;
LABEL_69:
        v54 = v73;
LABEL_107:
        if (*v54 <= v45)
          *v54 = v45 + 1;
        goto LABEL_109;
      }
    }
    if (v44)
    {
      v48 = *((_QWORD *)v75 + 92);
      if (!v48 || !uhash_iget(v48, v28))
        break;
    }
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    icu::MessageFormat::getLiteralStringUntilNextArgument(v75, v10, (uint64_t)&v86);
    if (WORD4(v86) < 0x20u)
    {
      v55 = a3;
      if ((*((__int16 *)a3 + 4) & 0x80000000) == 0)
      {
        v25 = *((unsigned __int16 *)a3 + 4) >> 5;
        goto LABEL_92;
      }
      v25 = *((_DWORD *)a3 + 3);
    }
    else
    {
      v49 = *((unsigned __int16 *)a3 + 4);
      if (v41 < 0)
      {
        if ((SWORD4(v86) & 0x8000u) == 0)
          v51 = WORD4(v86) >> 5;
        else
          v51 = HIDWORD(v86);
        v52 = 0;
        if ((v49 & 0x8000) != 0)
          v50 = *((_DWORD *)a3 + 3);
        else
          v50 = v49 >> 5;
      }
      else if ((v49 & 0x8000) != 0)
      {
        v50 = *((_DWORD *)a3 + 3);
        if ((SWORD4(v86) & 0x8000u) == 0)
          v51 = WORD4(v86) >> 5;
        else
          v51 = HIDWORD(v86);
        if (v50 >= v41)
          v52 = v41;
        else
          v52 = *((_DWORD *)a3 + 3);
      }
      else
      {
        v50 = v49 >> 5;
        if ((SWORD4(v86) & 0x8000u) == 0)
          v51 = WORD4(v86) >> 5;
        else
          v51 = HIDWORD(v86);
        if (v41 >= v49 >> 5)
          v52 = v49 >> 5;
        else
          v52 = v41;
      }
      if ((BYTE8(v86) & 1) != 0 || v51 < 1)
      {
LABEL_114:
        *((_DWORD *)a4 + 3) = v41;
        icu::UnicodeString::~UnicodeString(a4, (icu::UnicodeString *)&v86);
        goto LABEL_119;
      }
      if ((BYTE8(v86) & 2) != 0)
        v56 = (char *)&v86 + 10;
      else
        v56 = (char *)*((_QWORD *)&v87 + 1);
      v57 = icu::UnicodeString::indexOf((uint64_t)a3, (uint64_t)v56, 0, v51, v52, v50 - v52);
      v55 = a3;
      v25 = v57;
    }
    if (v25 < 0)
      goto LABEL_114;
LABEL_92:
    memset(v85, 0, sizeof(v85));
    icu::UnicodeString::tempSubString(v55, v41, v25 - v41, (icu::UnicodeString *)v85);
    v84 = 0;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    v80 = off_1E2256B38;
    LOWORD(v81) = 2;
    LOWORD(v95[0]) = 123;
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 1);
    memset(v95, 0, sizeof(v95));
    uprv_itou((__int16 *)v95, 16, v45, 0xAu, 0);
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 0xFFFFFFFFLL);
    LOWORD(v95[0]) = 125;
    icu::UnicodeString::doAppend((uint64_t)&v80, (uint64_t)v95, 0, 1);
    v58 = (unsigned __int16)v81;
    if ((v81 & 1) != 0)
    {
      if ((BYTE8(v85[0]) & 1) == 0)
        goto LABEL_103;
    }
    else
    {
      if ((SWORD4(v85[0]) & 0x8000u) == 0)
        v59 = WORD4(v85[0]) >> 5;
      else
        v59 = HIDWORD(v85[0]);
      if ((v81 & 0x8000u) == 0)
        v60 = (unsigned __int16)v81 >> 5;
      else
        v60 = DWORD1(v81);
      if ((v81 & 2) != 0)
        v61 = (char *)&v81 + 2;
      else
        v61 = (char *)v82;
      if (icu::UnicodeString::doCompare((uint64_t)v85, 0, v59, (uint64_t)v61, v60 & (v60 >> 31), v60 & ~(v60 >> 31)))
      {
LABEL_103:
        icu::Formattable::setString(v46, (UChar **)v85);
        v62 = 1;
        goto LABEL_106;
      }
    }
    v62 = 0;
LABEL_106:
    v54 = v73;
    icu::UnicodeString::~UnicodeString((void *)v58, (icu::UnicodeString *)&v80);
    icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)v85);
    icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v86);
    if (v62)
      goto LABEL_107;
LABEL_109:
    v65 = *((_QWORD *)v75 + 80) + 16 * v10;
    v66 = *(_DWORD *)(v65 + 4);
    v67 = (void *)*(unsigned __int16 *)(v65 + 8);
    v24 = v66 + (_DWORD)v67;
    icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)&v90);
    v26 = a3;
LABEL_110:
    v23 = *((_QWORD *)v42 + 80);
  }
  if (v44 == 2)
  {
    LODWORD(v78) = v41;
    v53 = icu::ChoiceFormat::parseArgument(v70, (const icu::MessagePattern *)(v27 + 3), (uint64_t)a3, (const icu::UnicodeString *)&v77, v19);
    if ((_DWORD)v78 == v41)
    {
LABEL_113:
      v68 = (uint64_t)a4;
      *((_DWORD *)a4 + 3) = v41;
      goto LABEL_119;
    }
    icu::Formattable::setDouble(v46, v53);
    v25 = v78;
    goto LABEL_69;
  }
  if ((v44 - 3) > 2)
    v68 = 5;
  else
    v68 = 16;
  *a6 = v68;
LABEL_119:
  icu::UnicodeString::~UnicodeString((void *)v68, (icu::UnicodeString *)&v90);
  v6 = 0;
LABEL_120:
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v77);
  sub_18BD012EC(&v79);
  return v6;
}

uint64_t icu::MessageFormat::parse(icu::MessageFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3, int *a4)
{
  UErrorCode v5;

  v5 = U_ZERO_ERROR;
  return icu::MessageFormat::parse(this, 0, a2, a3, a4, &v5);
}

uint64_t icu::MessageFormat::parse(icu::MessageFormat *this, const icu::UnicodeString *a2, int *a3, UErrorCode *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (**v12)(icu::ParsePosition *__hidden);
  unint64_t v13;

  if (*((_BYTE *)this + 676))
  {
    v5 = 0;
    *a4 = U_ARGUMENT_TYPE_MISMATCH;
  }
  else
  {
    v12 = off_1E224A8B0;
    v13 = 0xFFFFFFFF00000000;
    v6 = (*(uint64_t (**)(icu::MessageFormat *, const icu::UnicodeString *, void (***)(icu::ParsePosition *__hidden), int *))(*(_QWORD *)this + 184))(this, a2, &v12, a3);
    v5 = v6;
    if (!(_DWORD)v13)
    {
      *a4 = U_MESSAGE_PARSE_ERROR;
      if (v6)
      {
        v7 = (void *)(v6 - 16);
        v8 = *(_QWORD *)(v6 - 8);
        if (v8)
        {
          v9 = 112 * v8;
          v10 = v6 - 112;
          do
          {
            icu::Formattable::~Formattable((icu::Formattable *)(v10 + v9));
            v9 -= 112;
          }
          while (v9);
        }
        icu::UMemory::operator delete[](v7);
        v5 = 0;
      }
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v12);
  }
  return v5;
}

icu::Formattable *icu::MessageFormat::parseObject(icu::MessageFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  icu::Formattable *result;
  int v6;

  v6 = 0;
  result = (icu::Formattable *)(*(uint64_t (**)(icu::MessageFormat *, const icu::UnicodeString *, icu::ParsePosition *, int *))(*(_QWORD *)this + 184))(this, a2, a4, &v6);
  if (result)
    return (icu::Formattable *)icu::Formattable::adoptArray(a3, result, v6);
  return result;
}

void icu::MessageFormat::autoQuoteApostrophe(icu::MessageFormat *this@<X0>, const icu::UnicodeString *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  int32_t v7;
  UChar *v8;
  uint64_t Buffer;
  int v10;
  int v11;

  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = off_1E2256B38;
  *(_WORD *)(a3 + 8) = 2;
  if (*(int *)a2 > 0)
    goto LABEL_2;
  v6 = *((unsigned __int16 *)this + 4);
  if ((v6 & 0x8000u) == 0)
    v7 = v6 >> 5;
  else
    v7 = *((_DWORD *)this + 3);
  if ((v6 & 0x11) != 0)
  {
    v8 = 0;
  }
  else if ((v6 & 2) != 0)
  {
    v8 = (UChar *)((char *)this + 10);
  }
  else
  {
    v8 = (UChar *)*((_QWORD *)this + 3);
  }
  Buffer = icu::UnicodeString::getBuffer((icu::UnicodeString *)a3, (2 * v7) | 1u);
  if (!Buffer)
  {
    *(_DWORD *)a2 = 7;
LABEL_2:
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v10 = umsg_autoQuoteApostrophe(v8, v7, Buffer, (2 * v7) | 1u, (int *)a2);
  if (*(int *)a2 <= 0)
    v11 = v10;
  else
    v11 = 0;
  icu::UnicodeString::releaseBuffer(a3, v11);
  if (*(int *)a2 >= 1)
    goto LABEL_2;
}

uint64_t icu::MessageFormat::createAppropriateFormat(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, _DWORD *a4, uint64_t a5, UErrorCode *a6)
{
  icu::number::impl::LocalizedNumberFormatterAsFormat *InstanceForSkeleton;
  uint64_t result;
  int Keyword;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  icu::MessageFormat *v18;
  UErrorCode *v19;
  unint64_t v20;
  uint64_t v21;
  UErrorCode *v22;
  void *v23;
  icu::UnicodeString *v24;
  const icu::Locale *v25;
  icu::SimpleDateFormat *DateInstance;
  void *v27;
  int v28;
  UErrorCode *v29;
  icu::DecimalFormat *Instance;
  void *v31;
  _OWORD v32[30];
  _OWORD v33[31];
  _OWORD v34[4];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 <= 0)
  {
    Keyword = icu::MessageFormat::findKeyword(a2, (const UChar **)&off_1E2261F08);
    switch(Keyword)
    {
      case 0:
        *a4 = 1;
        v18 = (icu::MessageFormat *)icu::MessageFormat::findKeyword((uint64_t)a3, (const UChar **)&off_1E2261F40);
        switch((int)v18)
        {
          case 0:
            result = (uint64_t)icu::NumberFormat::createInstance((char **)(a1 + 328), a6, v19);
            break;
          case 1:
            result = (uint64_t)icu::NumberFormat::createCurrencyInstance((char **)(a1 + 328), a6, v19);
            break;
          case 2:
            result = (uint64_t)icu::NumberFormat::createPercentInstance((char **)(a1 + 328), a6, v19);
            break;
          case 3:
            *a4 = 2;
            result = (uint64_t)icu::MessageFormat::createIntegerFormat(v18, (char **)(a1 + 328), a6);
            break;
          default:
            v28 = icu::PatternProps::skipWhiteSpace((uint64_t)a3, 0);
            if (!icu::UnicodeString::doCompare((uint64_t)a3, v28, 2, (uint64_t)":", 0, 2))
            {
              memset(v34, 0, sizeof(v34));
              icu::UnicodeString::tempSubString(a3, v28 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v34);
              icu::number::NumberFormatter::forSkeleton((UChar **)v34, a6, v32);
              icu::number::UnlocalizedNumberFormatter::locale((uint64_t)v32, a1 + 328, (uint64_t)v33);
              InstanceForSkeleton = icu::number::LocalizedNumberFormatter::toFormat((const char **)v33, a6);
              icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v33);
              sub_18BD00CDC((void **)v32);
              v24 = (icu::UnicodeString *)v34;
              goto LABEL_16;
            }
            Instance = icu::NumberFormat::createInstance((char **)(a1 + 328), a6, v29);
            InstanceForSkeleton = Instance;
            if (Instance)
            {
              if (v31)
                (*(void (**)(void *, icu::UnicodeString *, uint64_t, UErrorCode *))(*(_QWORD *)v31 + 568))(v31, a3, a5, a6);
            }
            return (uint64_t)InstanceForSkeleton;
        }
        return result;
      case 1:
      case 2:
        *a4 = 0;
        v14 = icu::PatternProps::skipWhiteSpace((uint64_t)a3, 0);
        if (icu::UnicodeString::doCompare((uint64_t)a3, v14, 2, (uint64_t)":", 0, 2))
        {
          v15 = icu::MessageFormat::findKeyword((uint64_t)a3, (const UChar **)&off_1E2261F68);
          v16 = v15;
          if (v15 < 0)
            v17 = 2;
          else
            v17 = dword_18BE28154[v15];
          v25 = (const icu::Locale *)(a1 + 328);
          if (Keyword == 1)
            DateInstance = icu::DateFormat::createDateInstance(v17, v25);
          else
            DateInstance = icu::DateFormat::createTimeInstance(v17, v25);
          InstanceForSkeleton = DateInstance;
          if (v16 < 0)
          {
            if (DateInstance)
            {
              if (v27)
                (*(void (**)(void *, icu::UnicodeString *))(*(_QWORD *)v27 + 256))(v27, a3);
            }
          }
        }
        else
        {
          memset(v33, 0, 64);
          icu::UnicodeString::tempSubString(a3, v14 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v33);
          InstanceForSkeleton = icu::DateFormat::createInstanceForSkeleton((UErrorCode *)v33, (const icu::UnicodeString *)(a1 + 328), a6, v22);
          v24 = (icu::UnicodeString *)v33;
LABEL_16:
          icu::UnicodeString::~UnicodeString(v23, v24);
        }
        return (uint64_t)InstanceForSkeleton;
      case 3:
        *a4 = 1;
        v20 = a1 + 328;
        v21 = 0;
        goto LABEL_14;
      case 4:
        *a4 = 1;
        v20 = a1 + 328;
        v21 = 1;
        goto LABEL_14;
      case 5:
        *a4 = 1;
        v20 = a1 + 328;
        v21 = 2;
LABEL_14:
        result = sub_18BD00D34(v21, v20, (uint64_t)a3, (int *)a6);
        break;
      default:
        InstanceForSkeleton = 0;
        *a4 = 3;
        *a6 = U_ILLEGAL_ARGUMENT_ERROR;
        return (uint64_t)InstanceForSkeleton;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t icu::MessageFormat::findKeyword(uint64_t a1, const UChar **a2)
{
  unsigned int v2;
  unsigned int v4;
  unsigned __int16 *v5;
  uint64_t v6;
  unsigned __int16 *v7;
  void *v8;
  const UChar *v9;
  const UChar **v10;
  int32_t v11;
  int32_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE v17[224];
  _OWORD v18[4];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int16 *)(a1 + 8);
  if (v2 < 0x20)
    return 0;
  if ((v2 & 0x8000u) == 0)
    v4 = v2 >> 5;
  else
    v4 = *(_DWORD *)(a1 + 12);
  v16 = v4;
  if ((v2 & 0x11) != 0)
  {
    v5 = 0;
  }
  else if ((v2 & 2) != 0)
  {
    v5 = (unsigned __int16 *)(a1 + 10);
  }
  else
  {
    v5 = *(unsigned __int16 **)(a1 + 24);
  }
  v7 = icu::PatternProps::trimWhiteSpace(v5, &v16);
  memset(v18, 0, sizeof(v18));
  v15 = (uint64_t)v7;
  icu::UnicodeString::UnicodeString(v18, 0, &v15);
  v14 = v15;
  icu::Locale::Locale(&v14, (icu::Locale *)v17, "", 0, 0, 0);
  icu::UnicodeString::toLower((const UChar **)v18, (const icu::Locale *)v17);
  icu::Locale::~Locale((icu::Locale *)v17);
  v9 = *a2;
  if (*a2)
  {
    v6 = 0;
    v10 = a2 + 1;
    while (1)
    {
      v11 = u_strlen(v9);
      v12 = (SWORD4(v18[0]) & 0x8000u) == 0 ? WORD4(v18[0]) >> 5 : HIDWORD(v18[0]);
      if (!icu::UnicodeString::doCompare((uint64_t)v18, 0, v12, (uint64_t)v9, 0, v11))
        break;
      v9 = v10[v6++];
      if (!v9)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    v6 = 0xFFFFFFFFLL;
  }
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v18);
  return v6;
}

icu::DecimalFormat *icu::MessageFormat::createIntegerFormat(icu::MessageFormat *this, char **a2, UErrorCode *a3)
{
  icu::DecimalFormat *Instance;
  icu::DecimalFormat *v4;
  void *v5;
  void *v6;

  Instance = icu::NumberFormat::createInstance(a2, a3, a3);
  v4 = Instance;
  if (Instance)
  {
    if (v5)
    {
      v6 = v5;
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v5 + 232))(v5, 0);
      (*(void (**)(void *, _QWORD))(*(_QWORD *)v6 + 536))(v6, 0);
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v6 + 184))(v6, 1);
    }
  }
  return v4;
}

void **sub_18BD00CDC(void **a1)
{
  icu::Locale::~Locale((icu::Locale *)(a1 + 31));
  icu::number::impl::StringProp::~StringProp(a1 + 26);
  icu::number::impl::StringProp::~StringProp(a1 + 24);
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 21));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)(a1 + 17));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 5));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 2));
  return a1;
}

uint64_t sub_18BD00D34(uint64_t a1, unint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  int v14;

  v8 = icu::UMemory::operator new((icu::UMemory *)0x2F0, a2);
  v9 = v8;
  if (v8)
  {
    icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v8, a1, a2, a4);
    if (*a4 <= 0)
    {
      v10 = *(unsigned __int16 *)(a3 + 8);
      v11 = (__int16)v10;
      v12 = v10 >> 5;
      if (v11 < 0)
        v12 = *(_DWORD *)(a3 + 12);
      if (v12 >= 1)
      {
        v14 = 0;
        (*(void (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v9 + 384))(v9, a3, &v14);
      }
    }
  }
  else
  {
    *a4 = 7;
  }
  return v9;
}

uint64_t icu::MessageFormat::usesNamedArguments(icu::MessageFormat *this)
{
  return *((char *)this + 676);
}

uint64_t icu::MessageFormat::getArgTypeCount(icu::MessageFormat *this)
{
  return *((unsigned int *)this + 176);
}

uint64_t icu::MessageFormat::equalFormats(icu::MessageFormat *this, const void *a2, const void *a3)
{
  return (*(uint64_t (**)(icu::MessageFormat *, const void *, const void *))(*(_QWORD *)this + 24))(this, a2, a3);
}

uint64_t icu::MessageFormat::DummyFormat::operator==()
{
  return 1;
}

uint64_t *icu::MessageFormat::DummyFormat::clone@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a2, (icu::UMemory *)0x148, a1);
  if (result)
  {
    result[40] = 0;
    *((_OWORD *)result + 18) = 0u;
    *((_OWORD *)result + 19) = 0u;
    *((_OWORD *)result + 16) = 0u;
    *((_OWORD *)result + 17) = 0u;
    *((_OWORD *)result + 14) = 0u;
    *((_OWORD *)result + 15) = 0u;
    *((_OWORD *)result + 12) = 0u;
    *((_OWORD *)result + 13) = 0u;
    *((_OWORD *)result + 10) = 0u;
    *((_OWORD *)result + 11) = 0u;
    *((_OWORD *)result + 8) = 0u;
    *((_OWORD *)result + 9) = 0u;
    *((_OWORD *)result + 6) = 0u;
    *((_OWORD *)result + 7) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *((_OWORD *)result + 5) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    result = (uint64_t *)icu::Format::Format((uint64_t)result);
    *result = (uint64_t)&off_1E2262050;
  }
  return result;
}

icu::UnicodeString *icu::MessageFormat::DummyFormat::format(icu::MessageFormat::DummyFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, UErrorCode *a4)
{
  icu::UnicodeString *result;

  result = a3;
  if (*(int *)a4 <= 0)
    *a4 = U_UNSUPPORTED_ERROR;
  return result;
}

icu::UnicodeString *icu::MessageFormat::DummyFormat::format(icu::MessageFormat::DummyFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  icu::UnicodeString *result;

  result = a3;
  if (*(int *)a5 <= 0)
    *a5 = U_UNSUPPORTED_ERROR;
  return result;
}

icu::UnicodeString *icu::MessageFormat::DummyFormat::format(icu::MessageFormat::DummyFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  icu::UnicodeString *result;

  result = a3;
  if (*(int *)a5 <= 0)
    *a5 = U_UNSUPPORTED_ERROR;
  return result;
}

uint64_t sub_18BD00EE4(uint64_t a1, int *a2)
{
  signed int v2;
  icu::UVector *v3;

  if (*a2 > 0)
    return 0;
  v2 = *(_DWORD *)(a1 + 116);
  v3 = *(icu::UVector **)(a1 + 120);
  if (v2 >= *((_DWORD *)v3 + 2))
    return 0;
  *(_DWORD *)(a1 + 116) = v2 + 1;
  return icu::UVector::elementAt(v3, v2);
}

uint64_t sub_18BD00F1C(uint64_t result)
{
  *(_DWORD *)(result + 116) = 0;
  return result;
}

uint64_t sub_18BD00F24(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 120);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  else
    return 0;
}

void sub_18BD00F3C(icu::StringEnumeration *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2261FA8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::StringEnumeration::~StringEnumeration(this);
}

void sub_18BD00F7C(icu::StringEnumeration *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2261FA8;
  v2 = *((_QWORD *)this + 15);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::StringEnumeration::~StringEnumeration(this);
  icu::UMemory::operator delete(v3);
}

void icu::MessageFormat::PluralSelectorProvider::select(icu::MessageFormat **this@<X0>, const icu::UnicodeString **a2@<X1>, double a3@<D0>, UErrorCode *a4@<X2>, icu::UnicodeString *a5@<X8>)
{
  int OtherSubMessage;
  int FirstPluralNumberArg;
  UErrorCode *v12;
  unsigned int v13;
  uint64_t v14;
  const icu::Formattable *v15;
  const icu::UnicodeString *v16;
  icu::DecimalFormat *v17;
  icu::DecimalFormat *v18;
  const char *v19;
  _OWORD v20[4];
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24;

  if (*(int *)a4 < 1)
  {
    if (this[2]
      || (this[2] = (icu::MessageFormat *)icu::PluralRules::forLocale((icu::MessageFormat *)((char *)this[1] + 328), *((unsigned int *)this + 6), (icu::UnifiedCache *)a4), *(int *)a4 < 1))
    {
      OtherSubMessage = icu::MessageFormat::findOtherSubMessage(this[1], *(_DWORD *)a2);
      FirstPluralNumberArg = icu::MessageFormat::findFirstPluralNumberArg(this[1], OtherSubMessage, a2[1]);
      *((_DWORD *)a2 + 34) = FirstPluralNumberArg;
      if (FirstPluralNumberArg >= 1)
      {
        v13 = FirstPluralNumberArg;
        v14 = *((_QWORD *)this[1] + 92);
        if (v14)
          a2[18] = (const icu::UnicodeString *)uhash_iget(v14, v13);
      }
      if (!a2[18])
      {
        a2[18] = icu::MessageFormat::getDefaultNumberFormat(this[1], a4, v12);
        *((_BYTE *)a2 + 216) = 1;
      }
      v15 = (const icu::Formattable *)(a2 + 2);
      if (icu::Formattable::getDouble((icu::Formattable *)(a2 + 2), a4) == a3)
      {
        icu::Format::format(a2[18], (const icu::Formattable *)(a2 + 2), (icu::UnicodeString *)(a2 + 19), a4);
        v16 = a2[18];
        if (v16
        {
          v18 = v17;
          v21 = 0;
          memset(v20, 0, sizeof(v20));
          icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v20);
          icu::DecimalFormat::formatToDecimalQuantity(v18, v15, (icu::number::impl::DecimalQuantity *)v20, a4);
          if (*(int *)a4 < 1)
          {
            icu::PluralRules::select(this[2], (const icu::IFixedDecimal *)v20, a5);
          }
          else
          {
            v19 = "o";
            icu::UnicodeString::UnicodeString(a5, 0, &v19);
          }
          icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v20);
        }
        else
        {
          icu::PluralRules::select(this[2], a3, a5);
        }
      }
      else
      {
        *a4 = U_INTERNAL_PROGRAM_ERROR;
        v22 = "o";
        icu::UnicodeString::UnicodeString(a5, 0, &v22);
      }
    }
    else
    {
      v23 = "o";
      icu::UnicodeString::UnicodeString(a5, 0, &v23);
    }
  }
  else
  {
    v24 = "o";
    icu::UnicodeString::UnicodeString(a5, 0, &v24);
  }
}

void sub_18BD012D8(icu::Format *a1)
{
  void *v1;

  icu::Format::~Format(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t *sub_18BD012EC(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1)
  {
    v3 = (void *)(v2 - 16);
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = 112 * v4;
      v6 = v2 - 112;
      do
      {
        icu::Formattable::~Formattable((icu::Formattable *)(v6 + v5));
        v5 -= 112;
      }
      while (v5);
    }
    icu::UMemory::operator delete[](v3);
  }
  return a1;
}

void *icu::NameUnicodeTransliterator::getStaticClassID(icu::NameUnicodeTransliterator *this)
{
  return &unk_1EE009C03;
}

void *sub_18BD01358()
{
  return &unk_1EE009C03;
}

uint64_t sub_18BD01364(uint64_t a1, icu::UnicodeFilter *a2)
{
  void *v4;
  UChar *v5;
  const __int16 *v7;
  UChar *v8[2];
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v7 = L"Name-Any";
  icu::UnicodeString::UnicodeString(v8, 1, &v7);
  icu::Transliterator::Transliterator((icu::Transliterator *)a1, v8, a2);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v8);
  *(_QWORD *)a1 = off_1E22620D8;
  icu::UnicodeSet::UnicodeSet((icu::UnicodeSet *)(a1 + 88));
  v8[0] = v5;
  v8[1] = (UChar *)j__uset_add;
  v9 = 0u;
  v10 = 0u;
  uprv_getCharNameCharacters((uint64_t)v8);
  return a1;
}

void sub_18BD0143C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E22620D8;
  icu::UnicodeSet::~UnicodeSet(off_1E22620D8, (icu::UnicodeSet *)(a1 + 88));
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
}

void sub_18BD0146C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E22620D8;
  icu::UnicodeSet::~UnicodeSet(off_1E22620D8, (icu::UnicodeSet *)(a1 + 88));
  icu::Transliterator::~Transliterator((icu::Transliterator *)a1);
  icu::UMemory::operator delete(v2);
}

icu::Transliterator *sub_18BD014A0@<X0>(UChar **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *v4;
  icu::Transliterator *v5;
  icu::Transliterator *v6;

  v4 = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x120, a2);
  v5 = v4;
  if (v4)
  {
    v6 = icu::Transliterator::Transliterator(v4, a1);
    *(_QWORD *)v6 = off_1E22620D8;
    icu::UnicodeSet::UnicodeSet((icu::Transliterator *)((char *)v6 + 88), (const icu::UnicodeSet *)(a1 + 11));
  }
  return v5;
}

char *sub_18BD014F0(uint64_t a1, const icu::UnicodeString *a2, _DWORD *a3, int a4)
{
  char *result;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  icu::PatternProps *v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  char *v29;
  _WORD *v30;
  UChar32 v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  int v37;
  void *v38;
  void *v39;
  void *v40;
  int v41;
  char *v42;
  icu::UnicodeSet *v43;
  int v44;
  UErrorCode pErrorCode;
  const __int16 *v46;
  void (**v47)(icu::UnicodeString *__hidden);
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void (**v52)(icu::UnicodeString *__hidden);
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[72];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  result = (char *)uprv_getMaxCharNameLength();
  if (!(_DWORD)result
    || (v9 = (int)result, v44 = (_DWORD)result + 1, (result = (char *)uprv_malloc((int)result + 1)) == 0))
  {
    a3[2] = a3[3];
    return result;
  }
  v42 = result;
  memset(v57, 0, 64);
  v46 = L"\\N~{~";
  LODWORD(v10) = -1;
  icu::UnicodeString::UnicodeString(v57, 1, &v46);
  v53 = 0u;
  v56 = 0;
  v55 = 0u;
  v54 = 0u;
  v51 = 0;
  v52 = off_1E2256B38;
  LOWORD(v53) = 2;
  v48 = 0u;
  v50 = 0u;
  v49 = 0u;
  v47 = off_1E2256B38;
  LOWORD(v48) = 2;
  v12 = a3[2];
  v11 = a3[3];
  if ((int)v12 >= v11)
    goto LABEL_78;
  v43 = (icu::UnicodeSet *)(a1 + 88);
  v41 = a4;
  do
  {
    v13 = 0;
    v10 = 0xFFFFFFFFLL;
    v14 = v12;
    while (1)
    {
      v12 = v14;
      v15 = (icu::PatternProps *)(*(uint64_t (**)(const icu::UnicodeString *, unint64_t))(*(_QWORD *)a2 + 80))(a2, v14);
      v16 = v15;
      if (v13 == 1)
        break;
      if ((_DWORD)v15 == 92)
      {
        v17 = icu::ICU_Utility::parsePattern((icu::ICU_Utility *)v57, a2, v14, v11);
        v13 = 0;
        if ((v17 & 0x80000000) == 0)
        {
          v14 = v17;
          if ((int)v17 < v11)
          {
            if ((v48 & 1) != 0)
            {
              icu::UnicodeString::unBogus((uint64_t)&v47);
            }
            else
            {
              if ((v48 & 0x8000u) == 0)
                v18 = (unsigned __int16)v48 >> 5;
              else
                v18 = DWORD1(v48);
              if (v18)
              {
                LOBYTE(v48) = v48 & 0x1F;
                LOWORD(v48) = v48;
              }
            }
            v13 = 1;
            v10 = v12;
            goto LABEL_43;
          }
        }
        v10 = v12;
      }
      else
      {
        v13 = 0;
      }
LABEL_39:
      if (v16 < 0x10000)
        v25 = 1;
      else
        v25 = 2;
      v14 = (v12 + v25);
LABEL_43:
      if ((int)v14 >= v11)
      {
        LODWORD(v12) = v14;
        a4 = v41;
        goto LABEL_78;
      }
    }
    if (icu::PatternProps::isWhiteSpace(v15))
    {
      if ((__int16)v48 < 0)
      {
        v19 = DWORD1(v48);
        if ((uint64_t)v48 <= 0)
          goto LABEL_31;
      }
      else
      {
        if ((unsigned __int16)v48 < 0x20u)
          goto LABEL_31;
        v19 = (unsigned __int16)v48 >> 5;
      }
      v22 = v19 - 1;
      v23 = (char *)&v48 + 2;
      if ((v48 & 2) == 0)
        v23 = (char *)v49;
      if (*(_WORD *)&v23[2 * v22] == 32)
      {
LABEL_31:
        v13 = 1;
        goto LABEL_39;
      }
      LOWORD(pErrorCode) = 32;
      icu::UnicodeString::doAppend((uint64_t)&v47, (uint64_t)&pErrorCode, 0, 1);
      v24 = (unsigned __int16)v48 >> 5;
      if ((v48 & 0x8000u) != 0)
        v24 = DWORD1(v48);
      v21 = v24 <= v44;
      goto LABEL_35;
    }
    if (v16 != 125)
    {
      if (!icu::UnicodeSet::contains(v43, v16))
      {
        v13 = 0;
        LODWORD(v12) = v14 - 1;
        goto LABEL_39;
      }
      icu::UnicodeString::append((uint64_t)&v47, v16);
      v20 = (unsigned __int16)v48 >> 5;
      if ((v48 & 0x8000u) != 0)
        v20 = DWORD1(v48);
      v21 = v20 <= v9;
LABEL_35:
      v13 = v21;
      goto LABEL_39;
    }
    if ((__int16)v48 < 0)
    {
      v26 = DWORD1(v48);
      if (SDWORD1(v48) > 0)
        goto LABEL_53;
    }
    else
    {
      if ((unsigned __int16)v48 < 0x20u)
      {
        v26 = 0;
        goto LABEL_58;
      }
      LODWORD(v26) = (unsigned __int16)v48 >> 5;
LABEL_53:
      v27 = v26 - 1;
      v28 = (char *)v49;
      if ((v48 & 2) != 0)
        v28 = (char *)&v48 + 2;
      if (*(_WORD *)&v28[2 * v27] == 32)
        v26 = v27;
      else
        v26 = v26;
    }
LABEL_58:
    v29 = (char *)v49;
    if ((v48 & 2) != 0)
      v29 = (char *)&v48 + 2;
    if ((v48 & 0x11) != 0)
      v30 = 0;
    else
      v30 = v29;
    if (uprv_isInvariantUString(v30, v26))
    {
      *v42 = 0;
      icu::UnicodeString::extract((uint64_t)&v47, 0, v26, v42, v44);
      pErrorCode = U_ZERO_ERROR;
      v31 = u_charFromName(U_EXTENDED_CHAR_NAME, v42, &pErrorCode);
      if (pErrorCode <= U_ZERO_ERROR)
      {
        v32 = v31;
        if ((v53 & 1) != 0)
        {
          icu::UnicodeString::unBogus((uint64_t)&v52);
        }
        else
        {
          if ((v53 & 0x8000u) == 0)
            v33 = (unsigned __int16)v53 >> 5;
          else
            v33 = DWORD1(v53);
          if (v33)
          {
            LOBYTE(v53) = v53 & 0x1F;
            LOWORD(v53) = v53;
          }
        }
        icu::UnicodeString::append((uint64_t)&v52, v32);
        (*(void (**)(const icu::UnicodeString *, uint64_t, _QWORD, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 32))(a2, v10, (v12 + 1), &v52);
        v34 = (unsigned __int16)v53 >> 5;
        if ((v53 & 0x8000u) != 0)
          v34 = DWORD1(v53);
        v35 = ~(_DWORD)v12;
        v12 = (v34 + v10);
        v11 += v35 + v12;
      }
    }
    a4 = v41;
    LODWORD(v10) = -1;
  }
  while ((int)v12 < v11);
LABEL_78:
  if ((int)v10 <= -1 || a4 == 0)
    v37 = v12;
  else
    v37 = v10;
  a3[1] += v11 - a3[3];
  a3[2] = v37;
  a3[3] = v11;
  uprv_free(v42);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v47);
  icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v52);
  return (char *)icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)v57);
}

uint64_t sub_18BD019A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  _WORD *v14;
  int32_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t *v34;
  const char *v35;
  UChar *v36[9];

  v36[8] = *(UChar **)MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = off_1E2256B38;
  v9 = a1 + 8;
  *(_WORD *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 136) = a2;
  *(_QWORD *)(a1 + 144) = uprv_malloc(0x50uLL);
  *(_QWORD *)(v9 + 144) = 0xA00000000;
  *(_WORD *)(v9 + 152) = 0;
  *(_BYTE *)(v9 + 154) = 1;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  if (*a5 > 0)
    return a1;
  v10 = a4;
  v11 = a3 + ((uint64_t)a4 << 6);
  v12 = (_WORD *)(v11 + 8);
  v13 = *(unsigned __int16 *)(v11 + 8);
  if (*(__int16 *)(v11 + 8) < 0)
  {
    if (!*(_DWORD *)(v11 + 12))
      goto LABEL_4;
  }
  else if (v13 <= 0x1F)
  {
LABEL_4:
    *a5 = 9;
    return a1;
  }
  if ((v13 & 2) != 0)
    v14 = (_WORD *)(v11 + 10);
  else
    v14 = *(_WORD **)(a3 + (v10 << 6) + 24);
  if (*v14 == 37)
  {
    if ((v13 & 0x8000) != 0)
      v15 = *(_DWORD *)(a3 + (v10 << 6) + 12);
    else
      v15 = v13 >> 5;
    v17 = icu::UnicodeString::doIndexOf(v11, 0x3Au, 0, v15);
    if ((_DWORD)v17 == -1)
    {
      *a5 = 9;
    }
    else
    {
      v18 = v17;
      icu::UnicodeString::unBogus(v9);
      if (*(__int16 *)(a1 + 16) < 0)
        v19 = *(unsigned int *)(a1 + 20);
      else
        v19 = *(unsigned __int16 *)(a1 + 16) >> 5;
      icu::UnicodeString::doReplace((icu::UnicodeString *)v9, 0, v19, (const icu::UnicodeString *)v11, 0, v18);
      v20 = a3 + (v10 << 6);
      v21 = (int *)(v20 + 12);
      v34 = (uint64_t *)(v20 + 24);
      v18 = (int)v18;
      do
      {
        if ((__int16)*v12 < 0)
        {
          v22 = *v21;
          if (v18 >= v22)
            break;
        }
        else
        {
          if (v18 >= (uint64_t)((unint64_t)(unsigned __int16)*v12 >> 5))
            break;
          v22 = (unint64_t)(unsigned __int16)*v12 >> 5;
        }
        if (v22 <= (int)v18 + 1)
        {
          v24 = 0xFFFFLL;
        }
        else
        {
          v23 = v11 + 10;
          if ((*v12 & 2) == 0)
            v23 = *v34;
          v24 = *(unsigned __int16 *)(v23 + 2 * v18 + 2);
        }
        ++v18;
      }
      while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v24));
      if ((_DWORD)v18 == 0x7FFFFFFF)
      {
        if ((*v12 & 1) != 0)
          v25 = 2;
        else
          v25 = *v12 & 0x1F;
        *v12 = v25;
LABEL_38:
        if (v25 >> 5)
          goto LABEL_40;
        goto LABEL_39;
      }
      icu::UnicodeString::doReplace(v11, 0, v18, 0, 0, 0);
    }
  }
  else
  {
    v35 = "%";
    icu::UnicodeString::UnicodeString(v36, 1, &v35);
    icu::UnicodeString::copyFrom((UChar **)v9, v36, 0);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v36);
  }
  if (((__int16)*v12 & 0x80000000) == 0)
  {
    v25 = (unsigned __int16)*v12;
    goto LABEL_38;
  }
  if (!*(_DWORD *)(a3 + (v10 << 6) + 12))
LABEL_39:
    *a5 = 9;
LABEL_40:
  if (*(__int16 *)(a1 + 16) < 0)
  {
    v27 = *(_DWORD *)(a1 + 20);
    v26 = v27 & (v27 >> 31);
  }
  else
  {
    v26 = 0;
    v27 = *(unsigned __int16 *)(a1 + 16) >> 5;
  }
  *(_BYTE *)(a1 + 161) = icu::UnicodeString::indexOf(v9, (uint64_t)&unk_18BE282DE, 0, 2, v26, v27 - v26) != 0;
  v28 = *(unsigned __int16 *)(a1 + 16);
  if ((v28 & 0x8000) != 0)
    v29 = *(_DWORD *)(a1 + 20);
  else
    v29 = v28 >> 5;
  if (icu::UnicodeString::doEqualsSubstring(v9, v29 - 8, 8, (uint64_t)L"@noparse", 0, 8))
  {
    *(_BYTE *)(a1 + 162) = 0;
    v30 = *(unsigned __int16 *)(a1 + 16);
    if ((v30 & 0x8000) != 0)
      v31 = *(_DWORD *)(a1 + 20);
    else
      v31 = v30 >> 5;
    v32 = v31 - 8;
    if ((v30 & 1) != 0 && v31 == 8)
    {
      icu::UnicodeString::unBogus(v9);
    }
    else if (v31 > v32)
    {
      if (v32 > 1023)
      {
        *(_WORD *)(a1 + 16) = v30 | 0xFFE0;
        *(_DWORD *)(a1 + 20) = v32;
      }
      else
      {
        *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0x1F | (32 * v32);
      }
    }
  }
  return a1;
}

char *sub_18BD01D68(char *result, uint64_t a2, UErrorCode *a3)
{
  unint64_t v5;
  _QWORD *v6;
  int v7;
  int v8;
  signed int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  void (**v30)(icu::UnicodeString *__hidden);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v5 = (unint64_t)result;
    v6 = result + 72;
    sub_18BD01FB0((uint64_t)(result + 72));
    v31 = 0u;
    v32 = 0u;
    v34 = 0;
    v33 = 0u;
    v30 = off_1E2256B38;
    LOWORD(v31) = 2;
    v7 = *(__int16 *)(a2 + 8);
    v8 = *(_WORD *)(a2 + 8) >> 5;
    v9 = *(_DWORD *)(a2 + 12);
    if (v7 < 0)
      v8 = *(_DWORD *)(a2 + 12);
    if (v8 >= 1)
    {
      v10 = 0;
      v11 = v7 >> 31;
      do
      {
        v12 = (unsigned __int16)v7 >> 5;
        if ((v11 & 1) != 0)
          v13 = v9;
        else
          v13 = v12;
        if (v12 >= v10)
          v14 = v10;
        else
          v14 = v12;
        if (v9 >= v10)
          v15 = v10;
        else
          v15 = v9;
        v16 = (v11 & 1) == 0;
        if ((v11 & 1) != 0)
          v17 = v15;
        else
          v17 = v14;
        if (v16)
          v9 = v12;
        if (v10 >= 0)
          v18 = v17;
        else
          v18 = 0;
        if (v10 < 0)
          v9 = v13;
        v19 = icu::UnicodeString::doIndexOf(a2, 0x3Bu, v18, v9 - v18);
        if (v19 == -1)
        {
          if (*(__int16 *)(a2 + 8) < 0)
            v19 = *(_DWORD *)(a2 + 12);
          else
            v19 = *(unsigned __int16 *)(a2 + 8) >> 5;
        }
        icu::UnicodeString::unBogus((uint64_t)&v30);
        if ((v31 & 0x8000u) == 0)
          v20 = (unsigned __int16)v31 >> 5;
        else
          v20 = DWORD1(v31);
        icu::UnicodeString::doReplace((icu::UnicodeString *)&v30, 0, v20, (const icu::UnicodeString *)a2, v10, (v19 - v10));
        v21 = *(_DWORD *)(v5 + 80);
        if (v21 && *v6)
          v22 = *(_QWORD *)(*v6 + 8 * (v21 - 1));
        else
          v22 = 0;
        sub_18BD0388C((uint64_t)&v30, v5, v22, *(_QWORD *)(v5 + 136), (uint64_t)v6, a3);
        v10 = v19 + 1;
        v7 = *(__int16 *)(a2 + 8);
        v11 = v7 >> 31;
        v23 = *(_WORD *)(a2 + 8) >> 5;
        v9 = *(_DWORD *)(a2 + 12);
        if (v7 < 0)
          v23 = *(_DWORD *)(a2 + 12);
      }
      while (v10 < v23);
    }
    v24 = *(unsigned int *)(v5 + 80);
    if ((int)v24 >= 1)
    {
      v25 = 0;
      v26 = 0;
      v27 = 8 * v24;
      do
      {
        v28 = *(uint64_t **)(*v6 + v25);
        if (*v28)
        {
          v29 = *v28 < v26;
          v26 = *v28;
          if (v29)
          {
            v24 = 9;
            *a3 = U_PARSE_ERROR;
            return (char *)icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&v30);
          }
        }
        else
        {
          sub_18BD03FF0((uint64_t)v28, v26, (uint64_t)a3);
        }
        v24 = *(unsigned __int8 *)(v5 + 160);
        if (!*(_BYTE *)(v5 + 160))
          ++v26;
        v25 += 8;
      }
      while (v27 != v25);
    }
    return (char *)icu::UnicodeString::~UnicodeString((void *)v24, (icu::UnicodeString *)&v30);
  }
  return result;
}

void sub_18BD01FB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 >= 1)
  {
    sub_18BD021CC(a1, 0);
    v3 = 0;
    v4 = *(char **)a1;
    v5 = 8 * v1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    do
    {
      v6 = *(_QWORD **)&v4[v3];
      if (v6)
      {
        v7 = sub_18BD03888(v6);
        icu::UMemory::operator delete(v7);
      }
      v3 += 8;
    }
    while (v5 != v3);
    uprv_free(v4);
  }
}

void sub_18BD02028(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;

  switch(*a2)
  {
    case 0xFFFFFFFFFFFFFFFALL:
      v4 = (_QWORD *)a1[16];
      if (v4)
      {
        v5 = sub_18BD03888(v4);
        icu::UMemory::operator delete(v5);
      }
      a1[16] = a2;
      return;
    case 0xFFFFFFFFFFFFFFFBLL:
      v6 = (_QWORD *)a1[15];
      if (v6)
      {
        v7 = sub_18BD03888(v6);
        icu::UMemory::operator delete(v7);
      }
      a1[15] = a2;
      return;
    case 0xFFFFFFFFFFFFFFFCLL:
      v8 = 3;
      goto LABEL_11;
    case 0xFFFFFFFFFFFFFFFDLL:
      v8 = 2;
      goto LABEL_11;
    case 0xFFFFFFFFFFFFFFFELL:
      v8 = 1;
LABEL_11:
      sub_18BD020E8(a1, v8, (uint64_t)a2, 1);
      break;
    case 0xFFFFFFFFFFFFFFFFLL:
      v9 = (_QWORD *)a1[11];
      if (v9)
      {
        v10 = sub_18BD03888(v9);
        icu::UMemory::operator delete(v10);
      }
      a1[11] = a2;
      break;
    default:
      return;
  }
}

_QWORD *sub_18BD020E8(_QWORD *result, int a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t DecimalFormatSymbols;
  unint64_t v11;
  int v13;
  int v14;
  char v15[8];
  unsigned __int16 v16;
  _BYTE v17[14];
  _BYTE *v18;
  uint64_t v19;

  v6 = result;
  v19 = *MEMORY[0x1E0C80C00];
  if (a4)
    result = sub_18BD021CC((uint64_t)(result + 18), a3);
  v7 = &v6[a2];
  v9 = v7[11];
  v8 = v7 + 11;
  if (!v9)
    goto LABEL_14;
  DecimalFormatSymbols = icu::RuleBasedNumberFormat::getDecimalFormatSymbols((icu::RuleBasedNumberFormat *)v6[17]);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, (UChar **)(DecimalFormatSymbols + 8));
  v11 = v16;
  if ((v16 & 0x8000u) == 0 ? v16 >> 5 : *(_DWORD *)&v17[2])
  {
    v11 = (unint64_t)((v16 & 2) != 0 ? v17 : v18);
    v13 = *(unsigned __int16 *)v11;
  }
  else
  {
    v13 = 0xFFFF;
  }
  v14 = *(unsigned __int16 *)(a3 + 14);
  result = icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)v15);
  if (v13 == v14)
LABEL_14:
    *v8 = a3;
  return result;
}

_QWORD *sub_18BD021CC(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  _QWORD *result;
  uint64_t v7;
  int v8;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 != *(_DWORD *)(a1 + 12))
  {
    result = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
      goto LABEL_3;
LABEL_5:
    v8 = 0;
    *(_DWORD *)(a1 + 12) = 0;
    goto LABEL_6;
  }
  v5 = v4 + 10;
  *(_DWORD *)(a1 + 12) = v5;
  result = uprv_realloc(*(void **)a1, 8 * v5);
  *(_QWORD *)a1 = result;
  if (!result)
    goto LABEL_5;
LABEL_3:
  v7 = *(unsigned int *)(a1 + 8);
  v8 = v7 + 1;
  result[v7] = a2;
LABEL_6:
  *(_DWORD *)(a1 + 8) = v8;
  return result;
}

uint64_t sub_18BD02238(uint64_t a1)
{
  uint64_t i;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  for (i = 0; i != 6; ++i)
  {
    if ((i - 4) <= 0xFFFFFFFC)
    {
      v3 = *(_QWORD **)(a1 + 8 * i + 88);
      if (v3)
      {
        v4 = sub_18BD03888(v3);
        icu::UMemory::operator delete(v4);
      }
    }
  }
  sub_18BD03130(a1 + 144);
  sub_18BD03130(a1 + 72);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 8));
  return a1;
}

uint64_t sub_18BD022A4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80) || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160))
    return 0;
  v4 = *(unsigned __int16 *)(a1 + 16);
  if ((v4 & 1) == 0)
  {
    if ((v4 & 0x8000) != 0)
      v5 = *(_DWORD *)(a1 + 20);
    else
      v5 = v4 >> 5;
    result = 0;
    v7 = *(unsigned __int16 *)(a2 + 16);
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *(_DWORD *)(a2 + 20);
    if ((v7 & 1) != 0)
      return result;
    if (v5 != v8)
      return result;
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 8), (const icu::UnicodeString *)(a2 + 8), v5);
    if (!(_DWORD)result)
      return result;
    goto LABEL_16;
  }
  if ((*(_WORD *)(a2 + 16) & 1) == 0)
    return 0;
LABEL_16:
  for (i = 0; i != 48; i += 8)
  {
    v10 = *(_QWORD *)(a1 + 88 + i);
    v11 = *(_QWORD *)(a2 + 88 + i);
    if (v10)
    {
      if (!v11)
        return 0;
      result = sub_18BD04414(v10, v11);
      if (!(_DWORD)result)
        return result;
    }
    else if (v11)
    {
      return 0;
    }
  }
  if (!*(_DWORD *)(a1 + 80))
    return 1;
  v12 = 0;
  do
  {
    v13 = *(_QWORD *)(a1 + 72);
    if (v13)
      v14 = *(_QWORD *)(v13 + 8 * v12);
    else
      v14 = 0;
    result = sub_18BD04414(v14, *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v12));
    if ((result & 1) == 0)
      break;
    ++v12;
  }
  while (v12 < *(unsigned int *)(a1 + 80));
  return result;
}

uint64_t sub_18BD023D4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t j;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (*(_DWORD *)(a1 + 80))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(a1 + 72);
      if (v3)
        v4 = *(_QWORD *)(v3 + 8 * v2);
      else
        v4 = 0;
      sub_18BD06488(v4);
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 80));
  }
  for (i = 1; i != 4; ++i)
  {
    v6 = a1 + 8 * i;
    v8 = *(_QWORD *)(v6 + 88);
    v7 = (_QWORD **)(v6 + 88);
    if (v8)
    {
      v9 = *(unsigned int *)(a1 + 152);
      if ((_DWORD)v9)
      {
        for (j = 0; j < v9; ++j)
        {
          v11 = *(_QWORD **)(*(_QWORD *)(a1 + 144) + 8 * j);
          if (**v7 == *v11)
          {
            sub_18BD020E8((_QWORD *)a1, i, (uint64_t)v11, 0);
            v9 = *(unsigned int *)(a1 + 152);
          }
        }
      }
    }
  }
  v12 = 0;
  v13 = a1 + 88;
  do
  {
    result = *(_QWORD *)(v13 + v12);
    if (result)
      result = sub_18BD06488(result);
    v12 += 8;
  }
  while (v12 != 48);
  return result;
}

_DWORD *sub_18BD024D0(_DWORD *result, unint64_t a2, icu::UnicodeString *a3, uint64_t a4, int a5, UErrorCode *a6)
{
  if (a5 < 64)
  {
    result = (_DWORD *)sub_18BD02550((uint64_t)result, a2);
    if (result)
      return sub_18BD04A94((uint64_t)result, a2, a3, a4, (a5 + 1), a6);
  }
  else
  {
    *a6 = U_INVALID_STATE_ERROR;
  }
  return result;
}

uint64_t sub_18BD02550(uint64_t a1, uint64_t a2)
{
  int v4;
  signed int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 160))
    return sub_18BD027B4(a1, (double)a2);
  if ((a2 & 0x8000000000000000) == 0)
    goto LABEL_4;
  v8 = *(uint64_t **)(a1 + 88);
  if (!v8)
  {
    a2 = -a2;
LABEL_4:
    v4 = *(_DWORD *)(a1 + 80);
    if (v4 < 1)
    {
      return *(_QWORD *)(a1 + 112);
    }
    else
    {
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 72);
      while (1)
      {
        v7 = (v5 + v4) / 2;
        v8 = *(uint64_t **)(v6 + 8 * v7);
        if (*v8 == a2)
          break;
        if (*v8 <= a2)
          v5 = v7 + 1;
        else
          v4 = (v5 + v4) / 2;
        if (v5 >= v4)
        {
          if (!v4)
            return 0;
          v8 = *(uint64_t **)(v6 + 8 * (v4 - 1));
          if (!sub_18BD05108((uint64_t)v8, a2))
            return (uint64_t)v8;
          if (v4 != 1 && (v9 = *(_QWORD *)(a1 + 72)) != 0)
            return *(_QWORD *)(v9 + 8 * (v4 - 2));
          else
            return 0;
        }
      }
    }
  }
  return (uint64_t)v8;
}

_DWORD *sub_18BD02630(_DWORD *result, icu::UnicodeString *a2, uint64_t a3, int a4, UErrorCode *a5, double a6)
{
  if (a4 < 64)
  {
    result = (_DWORD *)sub_18BD026B0((uint64_t)result, a6);
    if (result)
      return sub_18BD04DBC((uint64_t)result, a2, a3, (a4 + 1), a5, a6);
  }
  else
  {
    *a5 = U_INVALID_STATE_ERROR;
  }
  return result;
}

uint64_t sub_18BD026B0(uint64_t a1, double a2)
{
  double v2;
  uint64_t result;
  uint64_t v5;

  v2 = a2;
  if (*(_BYTE *)(a1 + 160))
    return sub_18BD027B4(a1, a2);
  if (uprv_isNaN(a2))
  {
    result = *(_QWORD *)(a1 + 128);
    if (!result)
      return icu::RuleBasedNumberFormat::getDefaultNaNRule(*(icu::RuleBasedNumberFormat **)(a1 + 136));
  }
  else
  {
    if (v2 < 0.0)
    {
      result = *(_QWORD *)(a1 + 88);
      if (result)
        return result;
      v2 = -v2;
    }
    if (uprv_isInfinite(v2))
    {
      result = *(_QWORD *)(a1 + 120);
      if (!result)
        return icu::RuleBasedNumberFormat::getDefaultInfinityRule(*(icu::RuleBasedNumberFormat **)(a1 + 136));
    }
    else if (v2 == uprv_floor(v2)
           || (v2 >= 1.0 || (result = *(_QWORD *)(a1 + 104)) == 0) && (result = *(_QWORD *)(a1 + 96)) == 0)
    {
      result = *(_QWORD *)(a1 + 112);
      if (!result)
      {
        v5 = sub_18BD02968(v2 + 0.5);
        return sub_18BD02550(a1, v5);
      }
    }
  }
  return result;
}

uint64_t sub_18BD027B4(uint64_t a1, double a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  _BOOL4 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  double v26;

  v4 = *(uint64_t ***)(a1 + 72);
  v5 = **v4;
  v6 = *(unsigned int *)(a1 + 80);
  if (v6 >= 2)
  {
    for (i = 1; i != v6; ++i)
    {
      v8 = *v4[i];
      v9 = (v5 & 1) == 0;
      if (((v8 | v5) & 1) != 0)
      {
        v10 = 0;
        v12 = *v4[i];
        v11 = v5;
      }
      else
      {
        v10 = 0;
        v11 = v5;
        v12 = *v4[i];
        do
        {
          v13 = v11 | v12;
          v14 = (v11 & 2) == 0;
          v11 >>= 1;
          v12 >>= 1;
          v9 = v14;
          ++v10;
        }
        while ((v13 & 2) == 0);
      }
      if (v9)
        v15 = v11;
      else
        v15 = -v12;
      if (v15)
      {
        do
        {
          do
          {
            v16 = v15;
            v15 >>= 1;
          }
          while ((v16 & 1) == 0);
          if (v16 > 0)
            v11 = v16;
          else
            v12 = -v16;
          v15 = v11 - v12;
        }
        while (v11 != v12);
      }
      v5 = v5 / (v11 << v10) * v8;
    }
  }
  v17 = sub_18BD02968(a2 * (double)v5 + 0.5);
  v18 = uprv_maxMantissa();
  v19 = sub_18BD02968(v18);
  v20 = *(unsigned int *)(a1 + 80);
  v21 = *(_QWORD *)(a1 + 72);
  if (!(_DWORD)v20)
  {
    v23 = 0;
    goto LABEL_32;
  }
  v22 = 0;
  v23 = 0;
  while (1)
  {
    v24 = **(_QWORD **)(v21 + 8 * v22) * v17 % v5;
    if (v5 - v24 < v24)
      v24 = v5 - v24;
    if (v24 >= v19)
      goto LABEL_28;
    if (!v24)
      break;
    v19 = v24;
    v23 = v22;
LABEL_28:
    if (v20 == ++v22)
      goto LABEL_32;
  }
  v23 = v22;
LABEL_32:
  if (v23 + 1 >= v20)
  {
    if (v21)
      return *(_QWORD *)(v21 + 8 * v23);
    return 0;
  }
  else
  {
    v25 = **(_QWORD **)(v21 + 8 * (v23 + 1));
    if (v25 == **(_QWORD **)(v21 + 8 * v23))
    {
      v26 = (double)v25 * a2;
      if (v26 >= 2.0 || v26 < 0.5)
        ++v23;
    }
    return *(_QWORD *)(v21 + 8 * v23);
  }
}

uint64_t sub_18BD02968(double a1)
{
  double v3;
  double v4;
  double v5;
  double v6;

  if (uprv_isNaN(a1))
    return 0;
  v3 = uprv_maxMantissa();
  v4 = -v3;
  if (-v3 <= a1)
  {
    if (v3 < a1)
      v4 = v3;
    else
      v4 = a1;
  }
  v5 = -v4;
  if (v4 >= 0.0)
    v5 = v4;
  v6 = uprv_floor(v5);
  if (v4 >= 0.0)
    return (uint64_t)v6;
  else
    return -(uint64_t)v6;
}

uint64_t sub_18BD029C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, icu::Formattable *this, int a6, double a7)
{
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  void (**v37)(icu::ParsePosition *__hidden);
  unint64_t v38;
  void (**v39)(icu::ParsePosition *__hidden);
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  icu::Formattable::setLong(this, 0);
  v13 = *(unsigned __int16 *)(a2 + 8);
  v14 = (__int16)v13;
  v15 = v13 >> 5;
  if (v14 < 0)
    v15 = *(_DWORD *)(a2 + 12);
  if (!v15)
    return 0;
  v16 = 0;
  v17 = 0;
  v39 = off_1E224A8B0;
  v40 = 0xFFFFFFFF00000000;
  v37 = off_1E224A8B0;
  v38 = *(_QWORD *)(a3 + 8);
  v35 = -1;
  do
  {
    v18 = a1 + 8 * v17;
    if (*(_QWORD *)(v18 + 88))
      v19 = ((1 << v17) & a4) == 0;
    else
      v19 = 0;
    if (v19)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v41 = 0u;
      icu::Formattable::Formattable((icu::Formattable *)&v41);
      v20 = *(_QWORD *)(v18 + 88);
      if (a6)
        v21 = 1;
      else
        v21 = sub_18BD02C90(a1);
      a4 = (1 << v17) | a4;
      if (sub_18BD0518C(v20, a2, (uint64_t)&v37, 0, a4, (icu::Formattable *)&v41, v21, a7))
        v22 = (int)v38 <= v16;
      else
        v22 = 1;
      if (!v22)
      {
        icu::Formattable::operator=((uint64_t)this, (uint64_t)&v41);
        v16 = v38;
        v40 = v38;
        v35 = HIDWORD(v38);
      }
      v38 = *(_QWORD *)(a3 + 8);
      icu::Formattable::~Formattable((icu::Formattable *)&v41);
    }
    ++v17;
  }
  while (v17 != 6);
  v23 = sub_18BD02968(a7);
  v24 = *(unsigned int *)(a1 + 80);
  if ((int)v24 < 1)
  {
    v27 = v35;
  }
  else
  {
    v25 = v23;
    v26 = v24 + 1;
    v27 = v35;
    do
    {
      v28 = *(unsigned __int16 *)(a2 + 8);
      v29 = (__int16)v28;
      v30 = v28 >> 5;
      if (v29 < 0)
        v30 = *(_DWORD *)(a2 + 12);
      if (v16 >= v30)
        break;
      v31 = v26 - 2;
      if (*(_BYTE *)(a1 + 160) || **(_QWORD **)(*(_QWORD *)(a1 + 72) + 8 * v31) < v25)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        icu::Formattable::Formattable((icu::Formattable *)&v41);
        v32 = *(_QWORD *)(a1 + 72);
        if (v32)
          v33 = *(_QWORD *)(v32 + 8 * v31);
        else
          v33 = 0;
        if (sub_18BD0518C(v33, a2, (uint64_t)&v37, *(char *)(a1 + 160), a4, (icu::Formattable *)&v41, 1, a7))
        {
          if ((int)v38 > v16)
          {
            icu::Formattable::operator=((uint64_t)this, (uint64_t)&v41);
            v16 = v38;
            v27 = HIDWORD(v38);
            v40 = v38;
          }
        }
        v38 = *(_QWORD *)(a3 + 8);
        icu::Formattable::~Formattable((icu::Formattable *)&v41);
      }
      --v26;
    }
    while (v26 > 1);
  }
  *(_DWORD *)(a3 + 8) = v16;
  *(_DWORD *)(a3 + 12) = v27;
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v37);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v39);
  return 1;
}

BOOL sub_18BD02C90(uint64_t a1)
{
  int32_t v2;
  unint64_t v3;
  int32_t v4;
  unint64_t v5;
  _BOOL8 v6;
  int32_t v7;
  int32_t v8;
  unint64_t v9;
  void *v10;
  const __int16 *v12;
  const __int16 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v13 = L"spellout-numbering-year";
  icu::UnicodeString::UnicodeString(&v18, 1, &v13);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = L"spellout-ordinal";
  icu::UnicodeString::UnicodeString(&v14, 1, &v12);
  if ((SWORD4(v18) & 0x8000u) == 0)
    v2 = WORD4(v18) >> 5;
  else
    v2 = HIDWORD(v18);
  v3 = *(__int16 *)(a1 + 16);
  if ((v3 & 0x80000000) != 0)
  {
    v4 = *(_DWORD *)(a1 + 20);
    if ((BYTE8(v18) & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    v4 = *(unsigned __int16 *)(a1 + 16) >> 5;
    if ((BYTE8(v18) & 1) != 0)
      goto LABEL_14;
  }
  if (v2 >= 1)
  {
    if ((BYTE8(v18) & 2) != 0)
      v5 = (unint64_t)&v18 | 0xA;
    else
      v5 = *((_QWORD *)&v19 + 1);
    v6 = 0;
    if (icu::UnicodeString::indexOf(a1 + 8, v5, 0, v2, 0, v4) != -1)
      goto LABEL_26;
    v3 = *(unsigned __int16 *)(a1 + 16);
  }
LABEL_14:
  if ((SWORD4(v14) & 0x8000u) == 0)
    v7 = WORD4(v14) >> 5;
  else
    v7 = HIDWORD(v14);
  if ((v3 & 0x8000) != 0)
    v8 = *(_DWORD *)(a1 + 20);
  else
    v8 = (unsigned __int16)v3 >> 5;
  v6 = 1;
  if ((BYTE8(v14) & 1) == 0 && v7 >= 1)
  {
    if ((BYTE8(v14) & 2) != 0)
      v9 = (unint64_t)&v14 | 0xA;
    else
      v9 = *((_QWORD *)&v15 + 1);
    v6 = icu::UnicodeString::indexOf(a1 + 8, v9, 0, v7, 0, v8) == -1;
  }
LABEL_26:
  icu::UnicodeString::~UnicodeString((void *)v3, (icu::UnicodeString *)&v14);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v18);
  return v6;
}

_QWORD *sub_18BD02E50(uint64_t a1, icu::UnicodeString *this)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _QWORD *v13;
  unint64_t v14;
  unint64_t j;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  v4 = *(unsigned __int16 *)(a1 + 16);
  v5 = (__int16)v4;
  v6 = v4 >> 5;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = *(unsigned int *)(a1 + 20);
  icu::UnicodeString::doAppend((uint64_t)this, (const icu::UnicodeString *)(a1 + 8), 0, v7);
  v16 = 58;
  icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v16, 0, 1);
  v17 = 10;
  result = (_QWORD *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v17, 0, 1);
  if (*(_DWORD *)(a1 + 80))
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(a1 + 72);
      if (v10)
        v11 = *(_QWORD *)(v10 + 8 * v9);
      else
        v11 = 0;
      sub_18BD0451C(v11, (uint64_t)this);
      v18 = 10;
      result = (_QWORD *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v18, 0, 1);
      ++v9;
    }
    while (v9 < *(unsigned int *)(a1 + 80));
  }
  for (i = 0; i != 6; ++i)
  {
    v13 = *(_QWORD **)(a1 + 8 * i + 88);
    if (v13)
    {
      if ((unint64_t)(*v13 + 4) > 2)
      {
        sub_18BD0451C((uint64_t)v13, (uint64_t)this);
        v20 = 10;
        result = (_QWORD *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v20, 0, 1);
      }
      else
      {
        v14 = *(unsigned int *)(a1 + 152);
        if ((_DWORD)v14)
        {
          for (j = 0; j < v14; ++j)
          {
            result = *(_QWORD **)(*(_QWORD *)(a1 + 144) + 8 * j);
            if (*result == *v13)
            {
              sub_18BD0451C((uint64_t)result, (uint64_t)this);
              v19 = 10;
              result = (_QWORD *)icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v19, 0, 1);
              v14 = *(unsigned int *)(a1 + 152);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_18BD02FE0(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if (!(_DWORD)result)
    return 0;
  v2 = result;
  if ((a2 & 1) != 0)
    result = result;
  else
    result = 1;
  if (a2 >= 2)
  {
    do
    {
      v2 *= v2;
      if ((a2 & 2) != 0)
        v3 = v2;
      else
        v3 = 1;
      result *= v3;
      v4 = a2 > 3;
      a2 >>= 1;
    }
    while (v4);
  }
  return result;
}

unint64_t sub_18BD03024(uint64_t a1, __int16 *a2, int a3, unsigned int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  char *v7;
  __int16 v8;
  _BOOL4 v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  char *v14;
  unint64_t v15;
  __int16 v16;
  BOOL v17;

  if (a4 <= 2)
    v5 = 2;
  else
    v5 = a4;
  if (v5 >= 0x24)
    v6 = 36;
  else
    v6 = v5;
  if (!a5 && a3 && a1 < 0 && (_DWORD)v6 == 10)
  {
    a1 = -a1;
    *a2 = 45;
    v7 = (char *)(a2 + 1);
    --a3;
  }
  else
  {
    if (!a1 && a3)
    {
      if (a5)
        v8 = 0;
      else
        v8 = 48;
      *a2 = v8;
      v7 = (char *)(a2 + 1);
      if (a3 == 1)
        goto LABEL_33;
      goto LABEL_32;
    }
    v7 = (char *)a2;
  }
  v9 = a3 != 0;
  if (a3 && a1)
  {
    v10 = a3 - 1;
    do
    {
      v11 = a1 / v6;
      v12 = a1 % v6;
      if (!a5)
        LOWORD(v12) = a0123456789abcd_2[(int)v12];
      *(_WORD *)v7 = v12;
      v7 += 2;
      v13 = v10-- != 0;
      v9 = v13;
      if (!v13)
        break;
      a1 /= v6;
    }
    while (v11);
  }
  if (v9)
LABEL_32:
    *(_WORD *)v7 = 0;
LABEL_33:
  v14 = v7 - 2;
  if (v7 - 2 > (char *)&a2[*a2 == 45])
  {
    v15 = (unint64_t)&a2[(*a2 == 45) + 1];
    do
    {
      v16 = *(_WORD *)v14;
      *(_WORD *)v14 = *(_WORD *)(v15 - 2);
      v14 -= 2;
      *(_WORD *)(v15 - 2) = v16;
      v17 = (unint64_t)v14 > v15;
      v15 += 2;
    }
    while (v17);
  }
  return (unint64_t)(v7 - (char *)a2) >> 1;
}

uint64_t sub_18BD03130(uint64_t a1)
{
  void *v2;
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(void **)a1;
  if (v2)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v3)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = *(_QWORD **)(*(_QWORD *)a1 + 8 * i);
        if (v5)
        {
          v6 = sub_18BD03888(v5);
          icu::UMemory::operator delete(v6);
          v3 = *(unsigned int *)(a1 + 8);
        }
      }
      v2 = *(void **)a1;
    }
    uprv_free(v2);
  }
  return a1;
}

uint64_t sub_18BD03190(uint64_t a1, uint64_t a2, UChar **a3, _DWORD *a4)
{
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 10;
  v7 = a1 + 16;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 16), a3);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a2;
  *(_QWORD *)(a1 + 104) = 0;
  if (*(unsigned __int16 *)(a1 + 24) >= 0x20u)
    sub_18BD031FC(a1, v7, a4);
  return a1;
}

void *sub_18BD031FC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v6;
  int v7;
  int32_t v8;
  int32_t v9;
  void *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  signed int v37;
  char *v38;
  int64_t v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  char *v47;
  _BOOL4 isWhiteSpace;
  unsigned int v49;
  unsigned __int16 *v50;
  unsigned int v51;
  _WORD *v52;
  int v53;
  int v54;
  uint64_t v55;
  _QWORD v56[2];
  char *v57;
  const __int16 *v58;
  const __int16 *v59;
  void (**v60)(icu::UnicodeString *__hidden);
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 *)(a2 + 8);
  v7 = (__int16)v6;
  v8 = v6 >> 5;
  if (v7 >= 0)
    v9 = v8;
  else
    v9 = *(_DWORD *)(a2 + 12);
  result = (void *)icu::UnicodeString::doIndexOf(a2, 0x3Au, 0, v9);
  if ((_DWORD)result != -1)
  {
    v11 = (uint64_t)result;
    v61 = 0u;
    v62 = 0u;
    v64 = 0;
    v63 = 0u;
    v60 = off_1E2256B38;
    LOWORD(v61) = 2;
    icu::UnicodeString::unBogus((uint64_t)&v60);
    if ((v61 & 0x8000u) == 0)
      v12 = (unsigned __int16)v61 >> 5;
    else
      v12 = DWORD1(v61);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v60, 0, v12, (const icu::UnicodeString *)a2, 0, v11);
    v13 = (int)v11 + 1;
    do
    {
      v14 = v13;
      v15 = *(__int16 *)(a2 + 8);
      if (v15 < 0)
      {
        v16 = *(int *)(a2 + 12);
        if (v13 >= v16)
          break;
      }
      else
      {
        if (v13 >= (uint64_t)((unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5))
          break;
        v16 = (unint64_t)*(unsigned __int16 *)(a2 + 8) >> 5;
      }
      if (v16 <= v13)
      {
        v18 = 0xFFFFLL;
      }
      else
      {
        if ((v15 & 2) != 0)
          v17 = a2 + 10;
        else
          v17 = *(_QWORD *)(a2 + 24);
        v18 = *(unsigned __int16 *)(v17 + 2 * v13);
      }
      ++v13;
    }
    while (icu::PatternProps::isWhiteSpace((icu::PatternProps *)v18));
    icu::UnicodeString::doReplace(a2, 0, v14, 0, 0, 0);
    if ((v61 & 0x8000u) == 0)
      v19 = (unsigned __int16)v61 >> 5;
    else
      v19 = DWORD1(v61);
    if ((_DWORD)v19)
    {
      v20 = (unsigned __int16 *)&v61 + 1;
      if ((v61 & 2) == 0)
        v20 = (unsigned __int16 *)v62;
      v21 = *v20;
    }
    else
    {
      v21 = 0xFFFF;
    }
    v22 = v19 - 1;
    if ((v61 & 0x8000u) == 0)
      v23 = (unsigned __int16)v61 >> 5;
    else
      v23 = DWORD1(v61);
    if (v23 <= v22)
    {
      v25 = 0xFFFF;
    }
    else
    {
      if ((v61 & 2) != 0)
        v24 = (char *)&v61 + 2;
      else
        v24 = (char *)v62;
      v25 = *(unsigned __int16 *)&v24[2 * v22];
    }
    if ((v21 - 48) <= 9 && v25 != 120)
    {
      if ((int)v19 < 1)
      {
        LODWORD(v19) = 0;
        v27 = 0;
        LODWORD(v30) = 32;
LABEL_64:
        sub_18BD03FF0(a1, v27, (uint64_t)a3);
        goto LABEL_65;
      }
      v26 = 0;
      v27 = 0;
      while (1)
      {
        if ((v61 & 0x8000u) == 0)
          v28 = (unsigned __int16)v61 >> 5;
        else
          v28 = DWORD1(v61);
        if (v26 >= v28)
        {
          v30 = 0xFFFFLL;
        }
        else
        {
          if ((v61 & 2) != 0)
            v29 = (char *)&v61 + 2;
          else
            v29 = (char *)v62;
          v30 = *(unsigned __int16 *)&v29[2 * v26];
          v31 = (v30 - 48);
          if (v31 <= 9)
          {
            v27 = v31 + 10 * v27;
            goto LABEL_55;
          }
          if ((_DWORD)v30 == 47 || (_DWORD)v30 == 62)
          {
            sub_18BD03FF0(a1, v27, (uint64_t)a3);
            if ((_DWORD)v30 == 47)
            {
              v44 = v26 + 1;
              if ((int)v44 >= (int)v19)
              {
                *(_DWORD *)(a1 + 8) = 0;
                LODWORD(v30) = 47;
                LODWORD(v19) = v44;
                goto LABEL_128;
              }
              v45 = 0;
              while (2)
              {
                if ((v61 & 0x8000u) == 0)
                  v46 = (unsigned __int16)v61 >> 5;
                else
                  v46 = DWORD1(v61);
                if (v44 >= v46)
                {
                  v30 = 0xFFFFLL;
                }
                else
                {
                  if ((v61 & 2) != 0)
                    v47 = (char *)&v61 + 2;
                  else
                    v47 = (char *)v62;
                  v30 = *(unsigned __int16 *)&v47[2 * v44];
                  if ((v30 - 48) <= 9)
                  {
                    v45 = v30 + 10 * v45 - 48;
                    goto LABEL_96;
                  }
                  if ((_DWORD)v30 == 62)
                  {
                    LODWORD(v19) = v44;
LABEL_132:
                    *(_DWORD *)(a1 + 8) = v45;
                    if (v45)
                    {
LABEL_133:
                      *(_WORD *)(a1 + 12) = sub_18BD0407C(a1);
                      goto LABEL_65;
                    }
LABEL_128:
                    *a3 = 9;
                    goto LABEL_133;
                  }
                }
                isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v30);
                if ((v30 & 0xFFFFFFFD) != 0x2C && !isWhiteSpace)
                  goto LABEL_98;
LABEL_96:
                if (v19 == ++v44)
                  goto LABEL_132;
                continue;
              }
            }
            LODWORD(v19) = v26;
LABEL_65:
            if ((_DWORD)v30 != 62)
              goto LABEL_112;
            v34 = (unsigned __int16)v61;
            v36 = (unint64_t)(unsigned __int16)v61 >> 5;
            v37 = DWORD1(v61);
            v38 = (char *)&v61 + 2;
            if ((v61 & 2) == 0)
              v38 = (char *)v62;
            v39 = (int)v19;
            if ((v61 & 0x8000) != 0)
              goto LABEL_71;
LABEL_69:
            v40 = v36;
            if (v39 >= v36)
              goto LABEL_112;
            while (v40 > v39)
            {
              if (*(_WORD *)&v38[2 * v39] != 62)
                break;
              v41 = *(__int16 *)(a1 + 12);
              v42 = __OFSUB__(v41, 1);
              v43 = v41 - 1;
              if (v43 < 0 != v42)
                break;
              *(_WORD *)(a1 + 12) = v43;
              ++v39;
              if ((v34 & 0x8000) == 0)
                goto LABEL_69;
LABEL_71:
              v40 = v37;
              if (v39 >= v37)
                goto LABEL_112;
            }
LABEL_98:
            *a3 = 9;
            return icu::UnicodeString::~UnicodeString((void *)9, (icu::UnicodeString *)&v60);
          }
        }
        v32 = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v30);
        if ((v30 & 0xFFFFFFFD) != 0x2C && !v32)
          goto LABEL_98;
LABEL_55:
        if (v19 == ++v26)
          goto LABEL_64;
      }
    }
    v33 = icu::UnicodeString::doCompare((uint64_t)&v60, 0, v23, (uint64_t)"-", 0, 2);
    v57 = "-";
    v34 = (uint64_t)&v57;
    if (!v33)
    {
      v34 = -1;
      *(_QWORD *)a1 = -1;
      goto LABEL_112;
    }
    if ((_DWORD)v19 != 3)
      goto LABEL_112;
    if (v21 == 48 && v25 == 120)
    {
      v35 = -3;
LABEL_102:
      *(_QWORD *)a1 = v35;
      *(_DWORD *)(a1 + 8) = 10;
      *(_WORD *)(a1 + 12) = 0;
      if ((v61 & 0x8000u) == 0)
        v49 = (unsigned __int16)v61 >> 5;
      else
        v49 = DWORD1(v61);
      if (v49 < 2)
      {
        v34 = 0xFFFFLL;
      }
      else
      {
        if ((v61 & 2) != 0)
          v50 = (unsigned __int16 *)&v61 + 2;
        else
          v50 = (unsigned __int16 *)(v62 + 2);
        v34 = *v50;
      }
      *(_WORD *)(a1 + 14) = v34;
      goto LABEL_112;
    }
    if (v21 == 120 && v25 == 120)
    {
      v35 = -2;
      goto LABEL_102;
    }
    if (v21 == 120 && v25 == 48)
    {
      v35 = -4;
      goto LABEL_102;
    }
    v59 = L"NaN";
    v53 = sub_18BBB1AB4((uint64_t)&v60, (uint64_t *)&v59, 3);
    v56[1] = v59;
    if (v53)
    {
      v58 = L"Inf";
      v54 = sub_18BBB1AB4((uint64_t)&v60, (uint64_t *)&v58, 3);
      v56[0] = v58;
      v34 = (uint64_t)v56;
      if (v54)
        goto LABEL_112;
      v55 = -5;
    }
    else
    {
      v55 = -6;
    }
    *(_QWORD *)a1 = v55;
    v34 = 10;
    *(_DWORD *)(a1 + 8) = 10;
    *(_WORD *)(a1 + 12) = 0;
LABEL_112:
    result = icu::UnicodeString::~UnicodeString((void *)v34, (icu::UnicodeString *)&v60);
  }
  v51 = *(unsigned __int16 *)(a2 + 8);
  if (*(__int16 *)(a2 + 8) < 0)
  {
    if (*(int *)(a2 + 12) <= 0)
      return result;
  }
  else if (v51 < 0x20)
  {
    return result;
  }
  if ((v51 & 2) != 0)
    v52 = (_WORD *)(a2 + 10);
  else
    v52 = *(_WORD **)(a2 + 24);
  if (*v52 == 39)
    return (void *)icu::UnicodeString::doReplace(a2, 0, 1, 0, 0, 0);
  return result;
}

_QWORD *sub_18BD03808(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[10];
  v3 = a1[11];
  if (v2 != v3)
  {
    if (v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v3 + 8))(a1[11]);
      v2 = a1[10];
    }
    a1[11] = 0;
  }
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  a1[10] = 0;
  v4 = a1[13];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[13] = 0;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 2));
  return a1;
}

void sub_18BD0388C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int32_t v17;
  int32_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int32_t v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  unint64_t v34;
  int v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  void *v46;
  UChar *v47;
  __int16 v48;
  UChar *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t *v54;

  v54 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v12 = icu::UMemory::operator new(v54, (icu::UMemory *)0x70, a2);
  if (!v12)
  {
    *a6 = U_MEMORY_ALLOCATION_ERROR;
    return;
  }
  v13 = (uint64_t)v12;
  v14 = sub_18BD03190((uint64_t)v12, a4, (UChar **)a1, a6);
  icu::UnicodeString::operator=((UChar **)a1, (UChar **)(v14 + 16));
  v15 = *(unsigned __int16 *)(a1 + 8);
  v16 = (__int16)v15;
  v17 = v15 >> 5;
  if (v16 >= 0)
    v18 = v17;
  else
    v18 = *(_DWORD *)(a1 + 12);
  v19 = icu::UnicodeString::doIndexOf(a1, 0x5Bu, 0, v18);
  if ((v19 & 0x80000000) == 0)
  {
    v20 = v19;
    v21 = *(unsigned __int16 *)(a1 + 8);
    v22 = (__int16)v21;
    v23 = v21 >> 5;
    v24 = v22 >= 0 ? v23 : *(_DWORD *)(a1 + 12);
    v25 = icu::UnicodeString::doIndexOf(a1, 0x5Du, 0, v24);
    if ((v25 & 0x80000000) == 0)
    {
      v27 = v25;
      if ((int)v20 <= v25)
      {
        v28 = *(_QWORD *)v13;
        v29 = *(uint64_t *)v13 >= 1 ? -7 : *(_QWORD *)v13;
        v30 = v29 + 6;
        v31 = v30 > 5;
        v32 = (1 << v30) & 0x2B;
        if (v31 || v32 == 0)
        {
          v50 = 0u;
          v53 = 0;
          v52 = 0u;
          v51 = 0u;
          v49 = (UChar *)off_1E2256B38;
          LOWORD(v50) = 2;
          if (v28 >= 1)
          {
            v34 = v28 % (unint64_t)sub_18BD02FE0(*(unsigned int *)(v13 + 8), *(unsigned __int16 *)(v13 + 12));
            if (!v34)
              goto LABEL_30;
            v28 = *(_QWORD *)v13;
          }
          if (v28 >= 1)
            v35 = -7;
          else
            v35 = v28;
          v34 = v35 | 2u;
          if ((_DWORD)v34 != -2)
          {
            v37 = 0;
            v41 = v27 + 1;
            goto LABEL_47;
          }
LABEL_30:
          v36 = icu::UMemory::operator new((uint64_t *)v34, (icu::UMemory *)0x70, v26);
          if (!v36)
          {
            *a6 = U_MEMORY_ALLOCATION_ERROR;
            icu::UnicodeString::~UnicodeString((void *)7, (icu::UnicodeString *)&v49);
            return;
          }
          v37 = (uint64_t)v36;
          v47 = (UChar *)off_1E2256B38;
          v48 = 2;
          sub_18BD03190((uint64_t)v36, a4, &v47, a6);
          icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v47);
          v39 = *(_QWORD *)v13;
          if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
          {
            if ((_DWORD)v39 != -4)
            {
              if ((_DWORD)v39 == -2)
                *(_QWORD *)v37 = -3;
LABEL_41:
              *(_DWORD *)(v37 + 8) = *(_DWORD *)(v13 + 8);
              *(_WORD *)(v37 + 12) = *(_WORD *)(v13 + 12);
              icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, 0, v20);
              v41 = v27 + 1;
              v42 = *(unsigned __int16 *)(a1 + 8);
              if ((v42 & 0x8000) != 0)
              {
                v43 = *(_DWORD *)(a1 + 12);
                if (v41 < v43)
                  goto LABEL_45;
              }
              else if (v41 < v42 >> 5)
              {
                v43 = v42 >> 5;
LABEL_45:
                icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, v27 + 1, (v43 + ~v27));
              }
              sub_18BD03C5C(v37, a2, &v49, a3, a6);
LABEL_47:
              sub_18BCCEECC((uint64_t)&v49, (const icu::UnicodeString *)a1, 0, v20);
              icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, v20 + 1, (v27 + ~(_DWORD)v20));
              v44 = *(unsigned __int16 *)(a1 + 8);
              if ((v44 & 0x8000) != 0)
              {
                v45 = *(_DWORD *)(a1 + 12);
                if (v41 < v45)
                  goto LABEL_51;
              }
              else if (v41 < v44 >> 5)
              {
                v45 = v44 >> 5;
LABEL_51:
                icu::UnicodeString::doAppend((uint64_t)&v49, (const icu::UnicodeString *)a1, v41, (v45 + ~v27));
              }
              sub_18BD03C5C(v13, a2, &v49, a3, a6);
              if (v37)
              {
                if ((*(_QWORD *)v37 & 0x8000000000000000) != 0)
                  sub_18BD02028((_QWORD *)a2, (_QWORD *)v37);
                else
                  sub_18BD021CC(a5, v37);
              }
              icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v49);
              goto LABEL_19;
            }
            *(_QWORD *)v37 = v39;
            v40 = -2;
          }
          else
          {
            *(_QWORD *)v37 = v39;
            if (*(_BYTE *)(a2 + 160))
              goto LABEL_41;
            v40 = *(_QWORD *)v13 + 1;
          }
          *(_QWORD *)v13 = v40;
          goto LABEL_41;
        }
      }
    }
  }
  sub_18BD03C5C(v13, a2, (UChar **)a1, a3, a6);
LABEL_19:
  if ((*(_QWORD *)v13 & 0x8000000000000000) != 0)
    sub_18BD02028((_QWORD *)a2, (_QWORD *)v13);
  else
    sub_18BD021CC(a5, v13);
}

uint64_t sub_18BD03C5C(uint64_t result, uint64_t a2, UChar **a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v8;
  icu::UnicodeString *v9;
  uint64_t *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  int32_t v22;
  int v23;
  int32_t v24;
  int32_t v25;
  int v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  int32_t v30;
  int v31;
  int32_t v32;
  int32_t v33;
  int v34;
  _BYTE *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[2];
  const __int16 *v40;
  const char *v41;
  _BYTE v42[8];
  unsigned __int16 v43;
  _BYTE v44[2];
  int32_t v45;
  _BYTE *v46;
  _OWORD v47[4];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v8 = result;
    v9 = (icu::UnicodeString *)(result + 16);
    icu::UnicodeString::operator=((UChar **)(result + 16), a3);
    v10 = sub_18BD040FC(v8, a2, a4, a5);
    *(_QWORD *)(v8 + 80) = v10;
    if (v10)
      v10 = sub_18BD040FC(v8, a2, a4, a5);
    *(_QWORD *)(v8 + 88) = v10;
    v11 = *(unsigned __int16 *)(v8 + 24);
    if ((v11 & 0x8000) != 0)
    {
      v13 = *(_DWORD *)(v8 + 28);
      v12 = v13 & (v13 >> 31);
    }
    else
    {
      v12 = 0;
      v13 = v11 >> 5;
    }
    result = icu::UnicodeString::indexOf((uint64_t)v9, (uint64_t)L"$(", 0, -1, v12, v13 - v12);
    if ((result & 0x80000000) == 0)
    {
      v14 = result;
      if (*(__int16 *)(v8 + 24) < 0)
      {
        v15 = *(_DWORD *)(v8 + 28);
        v16 = v15 >= (int)result ? result : *(_DWORD *)(v8 + 28);
      }
      else
      {
        v15 = *(unsigned __int16 *)(v8 + 24) >> 5;
        v16 = v15 >= result ? result : *(unsigned __int16 *)(v8 + 24) >> 5;
      }
      result = icu::UnicodeString::indexOf((uint64_t)v9, (uint64_t)")", 0, -1, v16, v15 - v16);
      if ((result & 0x80000000) == 0)
      {
        v17 = result;
        if (*(__int16 *)(v8 + 24) < 0)
        {
          v18 = *(_DWORD *)(v8 + 28);
          if (v18 >= v14)
            v19 = v14;
          else
            v19 = *(_DWORD *)(v8 + 28);
        }
        else
        {
          v18 = *(unsigned __int16 *)(v8 + 24) >> 5;
          if (v18 >= v14)
            v19 = v14;
          else
            v19 = *(unsigned __int16 *)(v8 + 24) >> 5;
        }
        result = icu::UnicodeString::doIndexOf((uint64_t)v9, 0x2Cu, v19, v18 - v19);
        if ((result & 0x80000000) != 0)
        {
          *a5 = U_PARSE_ERROR;
          return result;
        }
        v20 = result;
        memset(v47, 0, sizeof(v47));
        icu::UnicodeString::tempSubString(v9, v14 + 2, result - v14 - 2, (icu::UnicodeString *)v47);
        v41 = "c";
        icu::UnicodeString::UnicodeString(v42, 1, &v41);
        v21 = v43;
        if ((v43 & 0x8000u) == 0)
          v22 = v43 >> 5;
        else
          v22 = v45;
        if ((v43 & 1) != 0)
        {
          v21 = BYTE8(v47[0]);
          v26 = BYTE8(v47[0]) & 1;
          goto LABEL_42;
        }
        v23 = v22 & (v22 >> 31);
        if (v22 < 0)
        {
          v24 = 0;
        }
        else
        {
          v24 = v22 - v23;
          v25 = v22;
          if (v22 - v23 >= v22)
          {
LABEL_36:
            if ((BYTE8(v47[0]) & 1) != 0)
            {
              v26 = 0;
            }
            else
            {
              if ((v43 & 2) != 0)
                v27 = v44;
              else
                v27 = v46;
              v26 = icu::UnicodeString::doEqualsSubstring((uint64_t)v47, 0, v22, (uint64_t)v27, v23, v25);
            }
LABEL_42:
            icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)v42);
            v39[1] = v41;
            if (v26)
            {
              v28 = 0;
              goto LABEL_61;
            }
            v40 = L"ordinal";
            icu::UnicodeString::UnicodeString(v42, 1, &v40);
            v29 = v43;
            if ((v43 & 0x8000u) == 0)
              v30 = v43 >> 5;
            else
              v30 = v45;
            if ((v43 & 1) != 0)
            {
              v29 = BYTE8(v47[0]);
              v34 = BYTE8(v47[0]) & 1;
              goto LABEL_60;
            }
            v31 = v30 & (v30 >> 31);
            if (v30 < 0)
            {
              v32 = 0;
            }
            else
            {
              v32 = v30 - v31;
              v33 = v30;
              if (v30 - v31 >= v30)
              {
LABEL_54:
                if ((BYTE8(v47[0]) & 1) != 0)
                {
                  v34 = 0;
                }
                else
                {
                  if ((v43 & 2) != 0)
                    v35 = v44;
                  else
                    v35 = v46;
                  v34 = icu::UnicodeString::doEqualsSubstring((uint64_t)v47, 0, v30, (uint64_t)v35, v31, v33);
                }
LABEL_60:
                icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)v42);
                v39[0] = v40;
                v36 = v39;
                v28 = 1;
                if (!v34)
                {
                  *a5 = U_ILLEGAL_ARGUMENT_ERROR;
                  return (uint64_t)icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v47);
                }
LABEL_61:
                v37 = *(_QWORD *)(v8 + 96);
                icu::UnicodeString::tempSubString(v9, v20 + 1, v17 + ~v20, (icu::UnicodeString *)v42);
                *(_QWORD *)(v8 + 104) = icu::RuleBasedNumberFormat::createPluralFormat(v37, v28, (uint64_t)v42, a5);
                icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v42);
                return (uint64_t)icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v47);
              }
            }
            v33 = v32;
            goto LABEL_54;
          }
        }
        v25 = v24;
        goto LABEL_36;
      }
    }
  }
  return result;
}

uint64_t sub_18BD03FF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 10;
  if (a2 < 1)
  {
    *(_WORD *)(result + 12) = 0;
  }
  else
  {
    v5 = sub_18BD0407C(result);
    *(_WORD *)(v3 + 12) = v5;
    v6 = *(_QWORD *)(v3 + 80);
    if (v6)
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, *(unsigned int *)(v3 + 8), v5, a3);
    result = *(_QWORD *)(v3 + 88);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)result + 32))(result, *(unsigned int *)(v3 + 8), *(__int16 *)(v3 + 12), a3);
  }
  return result;
}

uint64_t sub_18BD0407C(uint64_t a1)
{
  int v1;
  double v3;
  int v4;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1)
  {
    if (*(uint64_t *)a1 < 1)
    {
      LOWORD(v1) = 0;
    }
    else
    {
      v3 = uprv_log((double)*(uint64_t *)a1);
      v4 = (int)(v3 / uprv_log((double)*(int *)(a1 + 8)));
      if (sub_18BD02FE0(*(unsigned int *)(a1 + 8), (unsigned __int16)(v4 + 1)) > *(_QWORD *)a1)
        LOWORD(v1) = v4;
      else
        LOWORD(v1) = v4 + 1;
    }
  }
  return (__int16)v1;
}

uint64_t *sub_18BD040FC(uint64_t a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void (**v28)(icu::UnicodeString *__hidden);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v8 = sub_18BD04380(a1);
  if ((_DWORD)v8 == -1)
    return 0;
  v9 = v8;
  if (*(__int16 *)(a1 + 24) < 0)
  {
    v11 = *(_DWORD *)(a1 + 28);
    v10 = v11 & (v11 >> 31);
  }
  else
  {
    v10 = 0;
    v11 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  if (icu::UnicodeString::indexOf(a1 + 16, (uint64_t)L">>>", 0, 3, v10, v11 - v10) == (_DWORD)v8)
  {
    v12 = v9 + 2;
  }
  else
  {
    v14 = *(unsigned __int16 *)(a1 + 24);
    if (*(__int16 *)(a1 + 24) < 0)
      v15 = *(_DWORD *)(a1 + 28);
    else
      v15 = v14 >> 5;
    if (v15 <= v9)
    {
      v17 = 0xFFFF;
    }
    else
    {
      if ((v14 & 2) != 0)
        v16 = a1 + 26;
      else
        v16 = *(_QWORD *)(a1 + 40);
      v17 = *(unsigned __int16 *)(v16 + 2 * (int)v9);
    }
    if ((int)v9 >= -1)
    {
      v20 = v9 + 1;
      if ((v14 & 0x8000) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
        if (v19 >= v20)
          v18 = v9 + 1;
        else
          v18 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v19 = v14 >> 5;
        if (v19 >= v20)
          v18 = v9 + 1;
        else
          v18 = v19;
      }
    }
    else
    {
      v18 = 0;
      if ((v14 & 0x8000) != 0)
        v19 = *(_DWORD *)(a1 + 28);
      else
        v19 = v14 >> 5;
    }
    v12 = icu::UnicodeString::doIndexOf(a1 + 16, v17, v18, v19 - v18);
    if (v17 == 60 && v12 != -1)
    {
      v21 = *(unsigned __int16 *)(a1 + 24);
      if (*(__int16 *)(a1 + 24) < 0)
        v22 = *(_DWORD *)(a1 + 28);
      else
        v22 = v21 >> 5;
      if (v12 < (int)(v22 - 1) && v22 > v12 + 1)
      {
        v23 = (v21 & 2) != 0 ? a1 + 26 : *(_QWORD *)(a1 + 40);
        if (*(_WORD *)(v23 + 2 * (v12 + 1)) == 60)
          ++v12;
      }
      goto LABEL_41;
    }
  }
  if (v12 == -1)
    return 0;
LABEL_41:
  v29 = 0u;
  v30 = 0u;
  v32 = 0;
  v31 = 0u;
  v28 = off_1E2256B38;
  LOWORD(v29) = 2;
  v24 = (v12 - v9 + 1);
  icu::UnicodeString::unBogus((uint64_t)&v28);
  if ((v29 & 0x8000u) == 0)
    v25 = (unsigned __int16)v29 >> 5;
  else
    v25 = DWORD1(v29);
  icu::UnicodeString::doReplace((icu::UnicodeString *)&v28, 0, v25, (const icu::UnicodeString *)(a1 + 16), v9, v24);
  v13 = sub_18BD068BC(v9, (uint64_t **)a1, a3, a2, *(_QWORD *)(a1 + 96), (uint64_t)&v28, a4);
  icu::UnicodeString::doReplace(a1 + 16, v9, v24, 0, 0, 0);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v28);
  return v13;
}

uint64_t sub_18BD04380(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int32_t v5;
  int v6;
  unsigned int v8;

  v2 = 0;
  v3 = a1 + 16;
  LODWORD(v4) = -1;
  do
  {
    if (*(__int16 *)(a1 + 24) < 0)
      v5 = *(_DWORD *)(a1 + 28);
    else
      v5 = *(unsigned __int16 *)(a1 + 24) >> 5;
    v6 = icu::UnicodeString::doIndexOf(v3, *(&off_1E2262178)[v2], 0, v5);
    if (v6 < (int)v4 || (_DWORD)v4 == -1)
      v8 = v6;
    else
      v8 = v4;
    if (v6 == -1)
      v4 = v4;
    else
      v4 = v8;
    ++v2;
  }
  while (v2 != 11);
  return v4;
}

uint64_t sub_18BD04414(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int16 *)(a1 + 12) != *(unsigned __int16 *)(a2 + 12))
  {
    return 0;
  }
  v4 = *(unsigned __int16 *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 24) & 1) == 0)
      return 0;
    goto LABEL_16;
  }
  if ((v4 & 0x8000) != 0)
    v5 = *(_DWORD *)(a1 + 28);
  else
    v5 = v4 >> 5;
  result = 0;
  v7 = *(unsigned __int16 *)(a2 + 24);
  if ((v7 & 0x8000u) == 0)
    v8 = v7 >> 5;
  else
    v8 = *(_DWORD *)(a2 + 28);
  if ((v7 & 1) == 0 && v5 == v8)
  {
    result = icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 16), (const icu::UnicodeString *)(a2 + 16), v5);
    if ((_DWORD)result)
    {
LABEL_16:
      v9 = *(_QWORD *)(a1 + 80);
      v10 = *(_QWORD *)(a2 + 80);
      if (v9)
      {
        if (v10)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
          if (!(_DWORD)result)
            return result;
          goto LABEL_21;
        }
      }
      else if (!v10)
      {
LABEL_21:
        v11 = *(_QWORD *)(a1 + 88);
        v12 = *(_QWORD *)(a2 + 88);
        if (v11)
        {
          if (v12)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        }
        else if (!v12)
        {
          return 1;
        }
      }
      return 0;
    }
  }
  return result;
}

void *sub_18BD0451C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  __int16 v25;
  void (**v26)(icu::UnicodeString *__hidden);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  UChar *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(uint64_t *)a1 >= 1)
    v4 = -7;
  else
    v4 = *(_QWORD *)a1;
  switch(v4)
  {
    case -6:
      icu::UnicodeString::doAppend(a2, (uint64_t)L"NaN", 0, 3);
      break;
    case -5:
      icu::UnicodeString::doAppend(a2, (uint64_t)L"Inf", 0, 3);
      break;
    case -4:
      LOWORD(v31) = 120;
      v6 = icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
      v7 = *(_WORD *)(a1 + 14);
      if (!v7)
        v7 = 46;
      LOWORD(v31) = v7;
      v8 = icu::UnicodeString::doAppend(v6, (uint64_t)&v31, 0, 1);
      v9 = 48;
      goto LABEL_18;
    case -3:
      LOWORD(v31) = 48;
      v10 = icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
      v11 = *(_WORD *)(a1 + 14);
      if (!v11)
        v11 = 46;
      LOWORD(v31) = v11;
      v8 = icu::UnicodeString::doAppend(v10, (uint64_t)&v31, 0, 1);
      v9 = 120;
LABEL_18:
      LOWORD(v31) = v9;
      goto LABEL_22;
    case -2:
      LOWORD(v31) = 120;
      v12 = icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
      v13 = *(_WORD *)(a1 + 14);
      if (!v13)
        v13 = 46;
      LOWORD(v31) = v13;
      v8 = icu::UnicodeString::doAppend(v12, (uint64_t)&v31, 0, 1);
      LOWORD(v31) = 120;
LABEL_22:
      icu::UnicodeString::doAppend(v8, (uint64_t)&v31, 0, 1);
      break;
    case -1:
      icu::UnicodeString::doAppend(a2, (uint64_t)"-", 0, 2);
      break;
    default:
      sub_18BD04988(a2, *(_QWORD *)a1);
      if (*(_DWORD *)(a1 + 8) != 10)
      {
        LOWORD(v31) = 47;
        icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
        sub_18BD04988(a2, *(int *)(a1 + 8));
      }
      v5 = sub_18BD0407C(a1) - *(__int16 *)(a1 + 12);
      if (v5 >= 1)
      {
        do
        {
          LOWORD(v31) = 62;
          icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
          --v5;
        }
        while (v5);
      }
      break;
  }
  LOWORD(v31) = 58;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
  LOWORD(v31) = 32;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
  v14 = *(unsigned __int16 *)(a1 + 24);
  if (*(__int16 *)(a1 + 24) < 0)
  {
    if (!*(_DWORD *)(a1 + 28))
      goto LABEL_35;
  }
  else if (!(v14 >> 5))
  {
    goto LABEL_35;
  }
  if ((v14 & 2) != 0)
    v15 = (_WORD *)(a1 + 26);
  else
    v15 = *(_WORD **)(a1 + 40);
  if (*v15 == 32)
  {
    v16 = *(_QWORD *)(a1 + 80);
    if (!v16 || *(_DWORD *)(v16 + 8))
    {
      LOWORD(v31) = 39;
      icu::UnicodeString::doAppend(a2, (uint64_t)&v31, 0, 1);
    }
  }
LABEL_35:
  v32 = 0u;
  v33 = 0u;
  v35 = 0;
  v34 = 0u;
  v31 = (UChar *)off_1E2256B38;
  LOWORD(v32) = 2;
  icu::UnicodeString::copyFrom(&v31, (UChar **)(a1 + 16), 0);
  v27 = 0u;
  v28 = 0u;
  v30 = 0;
  v29 = 0u;
  v26 = off_1E2256B38;
  LOWORD(v27) = 2;
  v17 = *(_QWORD *)(a1 + 88);
  if (v17)
  {
    (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)v17 + 40))(v17, &v26);
    if ((v27 & 0x8000u) == 0)
      v18 = (unsigned __int16)v27 >> 5;
    else
      v18 = DWORD1(v27);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v31, *(unsigned int *)(*(_QWORD *)(a1 + 88) + 8), 0, (const icu::UnicodeString *)&v26, 0, v18);
  }
  v19 = *(_QWORD *)(a1 + 80);
  if (v19)
  {
    (*(void (**)(uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)v19 + 40))(v19, &v26);
    if ((v27 & 0x8000u) == 0)
      v20 = (unsigned __int16)v27 >> 5;
    else
      v20 = DWORD1(v27);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v31, *(unsigned int *)(*(_QWORD *)(a1 + 80) + 8), 0, (const icu::UnicodeString *)&v26, 0, v20);
  }
  if ((v32 & 0x8000u) == 0)
    v21 = (unsigned __int16)v32 >> 5;
  else
    v21 = DWORD1(v32);
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v31, 0, v21);
  v25 = 59;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v25, 0, 1);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v26);
  return icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v31);
}

void *sub_18BD04988(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *v5;
  _OWORD v7[4];
  _OWORD v8[32];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, sizeof(v8));
  v3 = sub_18BD03024(a2, (__int16 *)v8, 512, 0xAu, 0);
  memset(v7, 0, sizeof(v7));
  icu::UnicodeString::UnicodeString((uint64_t)v7, (uint64_t)v8, v3);
  if ((SWORD4(v7[0]) & 0x8000u) == 0)
    v4 = WORD4(v7[0]) >> 5;
  else
    v4 = HIDWORD(v7[0]);
  icu::UnicodeString::doAppend(a1, (const icu::UnicodeString *)v7, 0, v4);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
}

uint64_t sub_18BD04A84(uint64_t a1)
{
  return sub_18BD02FE0(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
}

_DWORD *sub_18BD04A94(uint64_t a1, unint64_t a2, icu::UnicodeString *this, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  const icu::UnicodeString *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  icu::PluralFormat *v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  _DWORD *v40;
  unsigned int v41;
  _DWORD *result;
  unsigned int v43;
  _BYTE v44[8];
  unsigned __int16 v45;
  unsigned int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v12 = (const icu::UnicodeString *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 104);
  if (*(__int16 *)(a1 + 24) < 0)
  {
    v14 = *(unsigned int *)(a1 + 28);
    if (v13)
    {
      v15 = v14 & ((int)v14 >> 31);
      goto LABEL_6;
    }
LABEL_11:
    icu::UnicodeString::doReplace(this, a4, 0, v12, 0, v14);
    v20 = 0;
    goto LABEL_43;
  }
  v14 = *(unsigned __int16 *)(a1 + 24) >> 5;
  if (!v13)
    goto LABEL_11;
  v15 = 0;
LABEL_6:
  v16 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)L"$(", 0, -1, v15, (int)v14 - v15);
  LODWORD(v14) = v16;
  v17 = *(unsigned __int16 *)(a1 + 24);
  if (v16 < 0)
  {
    v19 = 0;
    if ((v17 & 0x8000) != 0)
      v18 = *(_DWORD *)(a1 + 28);
    else
      v18 = v17 >> 5;
  }
  else if ((v17 & 0x8000) != 0)
  {
    v18 = *(_DWORD *)(a1 + 28);
    if (v18 >= v16)
      v19 = v16;
    else
      v19 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v18 = v17 >> 5;
    if (v18 >= v16)
      v19 = v16;
    else
      v19 = v18;
  }
  v21 = icu::UnicodeString::indexOf((uint64_t)v12, (uint64_t)")", 0, -1, v19, v18 - v19);
  v22 = *((unsigned __int16 *)this + 4);
  v23 = (__int16)v22;
  v24 = v22 >> 5;
  if (v23 >= 0)
    v25 = v24;
  else
    v25 = *((_DWORD *)this + 3);
  v26 = *(unsigned __int16 *)(a1 + 24);
  if ((v26 & 0x8000) != 0)
    v27 = *(_DWORD *)(a1 + 28);
  else
    v27 = v26 >> 5;
  if (v21 < (int)(v27 - 1))
  {
    icu::UnicodeString::tempSubString(v12, v21 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0)
      v28 = v45 >> 5;
    else
      v28 = v46;
    icu::UnicodeString::doReplace(this, a4, 0, (const icu::UnicodeString *)v44, 0, v28);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v44);
  }
  v30 = *(icu::PluralFormat **)(a1 + 104);
  v31 = sub_18BD02FE0(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
  icu::PluralFormat::format(v30, a6, a2 / v31, (icu::UnicodeString *)v44);
  if ((v45 & 0x8000u) == 0)
    v32 = v45 >> 5;
  else
    v32 = v46;
  icu::UnicodeString::doReplace(this, a4, 0, (const icu::UnicodeString *)v44, 0, v32);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  if ((int)v14 >= 1)
  {
    icu::UnicodeString::tempSubString(v12, 0, v14, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0)
      v34 = v45 >> 5;
    else
      v34 = v46;
    icu::UnicodeString::doReplace(this, a4, 0, (const icu::UnicodeString *)v44, 0, v34);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v44);
  }
  if (*(__int16 *)(a1 + 24) < 0)
    v36 = *(_DWORD *)(a1 + 28);
  else
    v36 = *(unsigned __int16 *)(a1 + 24) >> 5;
  v37 = *((unsigned __int16 *)this + 4);
  v38 = (__int16)v37;
  v39 = v37 >> 5;
  if (v38 < 0)
    v39 = *((_DWORD *)this + 3);
  v20 = v36 + v25 - v39;
LABEL_43:
  v40 = *(_DWORD **)(a1 + 88);
  if (v40)
  {
    if (v40[2] <= (int)v14)
      v41 = 0;
    else
      v41 = v20;
    (*(void (**)(_DWORD *, unint64_t, icu::UnicodeString *, _QWORD, uint64_t, UErrorCode *))(*(_QWORD *)v40 + 48))(v40, a2, this, a4 - v41, a5, a6);
  }
  result = *(_DWORD **)(a1 + 80);
  if (result)
  {
    if (result[2] <= (int)v14)
      v43 = 0;
    else
      v43 = v20;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, unint64_t, icu::UnicodeString *, _QWORD, uint64_t, UErrorCode *))(*(_QWORD *)result + 48))(result, a2, this, a4 - v43, a5, a6);
  }
  return result;
}

_DWORD *sub_18BD04DBC(uint64_t a1, icu::UnicodeString *this, uint64_t a3, uint64_t a4, UErrorCode *a5, double a6)
{
  const icu::UnicodeString *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  double v30;
  double v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  _DWORD *v40;
  unsigned int v41;
  _DWORD *result;
  unsigned int v43;
  _BYTE v44[8];
  unsigned __int16 v45;
  unsigned int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v12 = (const icu::UnicodeString *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 104);
  if (*(__int16 *)(a1 + 24) < 0)
  {
    v14 = *(unsigned int *)(a1 + 28);
    if (v13)
    {
      v15 = v14 & ((int)v14 >> 31);
      goto LABEL_6;
    }
LABEL_11:
    icu::UnicodeString::doReplace(this, a3, 0, v12, 0, v14);
    v20 = 0;
    goto LABEL_47;
  }
  v14 = *(unsigned __int16 *)(a1 + 24) >> 5;
  if (!v13)
    goto LABEL_11;
  v15 = 0;
LABEL_6:
  v16 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)L"$(", 0, -1, v15, (int)v14 - v15);
  LODWORD(v14) = v16;
  v17 = *(unsigned __int16 *)(a1 + 24);
  if (v16 < 0)
  {
    v19 = 0;
    if ((v17 & 0x8000) != 0)
      v18 = *(_DWORD *)(a1 + 28);
    else
      v18 = v17 >> 5;
  }
  else if ((v17 & 0x8000) != 0)
  {
    v18 = *(_DWORD *)(a1 + 28);
    if (v18 >= v16)
      v19 = v16;
    else
      v19 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v18 = v17 >> 5;
    if (v18 >= v16)
      v19 = v16;
    else
      v19 = v18;
  }
  v21 = icu::UnicodeString::indexOf((uint64_t)v12, (uint64_t)")", 0, -1, v19, v18 - v19);
  v22 = *((unsigned __int16 *)this + 4);
  v23 = (__int16)v22;
  v24 = v22 >> 5;
  if (v23 >= 0)
    v25 = v24;
  else
    v25 = *((_DWORD *)this + 3);
  v26 = *(unsigned __int16 *)(a1 + 24);
  if ((v26 & 0x8000) != 0)
    v27 = *(_DWORD *)(a1 + 28);
  else
    v27 = v26 >> 5;
  if (v21 < (int)(v27 - 1))
  {
    icu::UnicodeString::tempSubString(v12, v21 + 2, 0x7FFFFFFF, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0)
      v28 = v45 >> 5;
    else
      v28 = v46;
    icu::UnicodeString::doReplace(this, a3, 0, (const icu::UnicodeString *)v44, 0, v28);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v44);
  }
  v30 = (double)(unint64_t)sub_18BD02FE0(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
  if (a6 < 0.0 || a6 >= 1.0)
    v31 = a6 / v30;
  else
    v31 = uprv_round(v30 * a6);
  icu::PluralFormat::format(*(icu::PluralFormat **)(a1 + 104), a5, (int)v31, (icu::UnicodeString *)v44);
  if ((v45 & 0x8000u) == 0)
    v32 = v45 >> 5;
  else
    v32 = v46;
  icu::UnicodeString::doReplace(this, a3, 0, (const icu::UnicodeString *)v44, 0, v32);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v44);
  if ((int)v14 >= 1)
  {
    icu::UnicodeString::tempSubString(v12, 0, v14, (icu::UnicodeString *)v44);
    if ((v45 & 0x8000u) == 0)
      v34 = v45 >> 5;
    else
      v34 = v46;
    icu::UnicodeString::doReplace(this, a3, 0, (const icu::UnicodeString *)v44, 0, v34);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)v44);
  }
  if (*(__int16 *)(a1 + 24) < 0)
    v36 = *(_DWORD *)(a1 + 28);
  else
    v36 = *(unsigned __int16 *)(a1 + 24) >> 5;
  v37 = *((unsigned __int16 *)this + 4);
  v38 = (__int16)v37;
  v39 = v37 >> 5;
  if (v38 < 0)
    v39 = *((_DWORD *)this + 3);
  v20 = v36 + v25 - v39;
LABEL_47:
  v40 = *(_DWORD **)(a1 + 88);
  if (v40)
  {
    if (v40[2] <= (int)v14)
      v41 = 0;
    else
      v41 = v20;
    (*(void (**)(_DWORD *, icu::UnicodeString *, _QWORD, uint64_t, UErrorCode *, double))(*(_QWORD *)v40 + 56))(v40, this, a3 - v41, a4, a5, a6);
  }
  result = *(_DWORD **)(a1 + 80);
  if (result)
  {
    if (result[2] <= (int)v14)
      v43 = 0;
    else
      v43 = v20;
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, icu::UnicodeString *, _QWORD, uint64_t, UErrorCode *, double))(*(_QWORD *)result + 56))(result, this, a3 - v43, a4, a5, a6);
  }
  return result;
}

uint64_t sub_18BD05108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 80);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4)
    || (result = *(_QWORD *)(a1 + 88)) != 0
    && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result), (_DWORD)result))
  {
    v6 = sub_18BD02FE0(*(unsigned int *)(a1 + 8), *(unsigned __int16 *)(a1 + 12));
    return !(a2 % v6) && *(_QWORD *)a1 % v6 != 0;
  }
  return result;
}

uint64_t sub_18BD0518C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, icu::Formattable *a6, int a7, double a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  void *v23;
  uint64_t v24;
  double NaN;
  int v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  void *v41;
  int v42;
  int v43;
  void *v44;
  void *v45;
  uint64_t v47;
  unsigned int v49;
  void (**v52)(icu::ParsePosition *__hidden);
  unint64_t v53;
  void (**v54)(icu::ParsePosition *__hidden);
  unint64_t v55;
  void (**v56)(icu::UnicodeString *__hidden);
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  void (**v61)(icu::UnicodeString *__hidden);
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  void (**v66)(icu::UnicodeString *__hidden);
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  _OWORD v71[4];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v54 = off_1E224A8B0;
  v55 = 0xFFFFFFFF00000000;
  memset(v71, 0, sizeof(v71));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v71, (UChar **)a2);
  v13 = *(_QWORD *)(a1 + 80);
  if (v13)
  {
    v14 = *(unsigned int *)(v13 + 8);
  }
  else if (*(__int16 *)(a1 + 24) < 0)
  {
    v14 = *(unsigned int *)(a1 + 28);
  }
  else
  {
    v14 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  v15 = *(_QWORD *)(a1 + 88);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 + 8);
  }
  else if (*(__int16 *)(a1 + 24) < 0)
  {
    v16 = *(_DWORD *)(a1 + 28);
  }
  else
  {
    v16 = *(unsigned __int16 *)(a1 + 24) >> 5;
  }
  v67 = 0u;
  v70 = 0;
  v69 = 0u;
  v68 = 0u;
  v66 = off_1E2256B38;
  LOWORD(v67) = 2;
  icu::UnicodeString::unBogus((uint64_t)&v66);
  if ((v67 & 0x8000u) == 0)
    v17 = (unsigned __int16)v67 >> 5;
  else
    v17 = DWORD1(v67);
  icu::UnicodeString::doReplace((icu::UnicodeString *)&v66, 0, v17, (const icu::UnicodeString *)(a1 + 16), 0, v14);
  sub_18BD056D4(a1, (uint64_t)v71, (uint64_t)&v66, (uint64_t)&v54);
  v18 = *(unsigned __int16 *)(a2 + 8);
  v19 = (__int16)v18;
  v20 = v18 >> 5;
  if (v19 >= 0)
    v21 = v20;
  else
    v21 = *(_DWORD *)(a2 + 12);
  if ((SWORD4(v71[0]) & 0x8000u) == 0)
    v22 = WORD4(v71[0]) >> 5;
  else
    v22 = HIDWORD(v71[0]);
  if (!(_DWORD)v55 && (_DWORD)v14)
    goto LABEL_22;
  v24 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 == -6)
  {
    *(_DWORD *)(a3 + 8) = v55;
    NaN = uprv_getNaN();
    goto LABEL_27;
  }
  if (v24 == -5)
  {
    *(_DWORD *)(a3 + 8) = v55;
    NaN = uprv_getInfinity();
LABEL_27:
    icu::Formattable::setDouble(a6, NaN);
    goto LABEL_70;
  }
  if (!a7)
  {
    v47 = *(_QWORD *)(a1 + 80);
    if (v47)
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 120))(v47))
      {
LABEL_22:
        *(_DWORD *)(a3 + 12) = HIDWORD(v55);
        icu::Formattable::setLong(a6, 0);
        goto LABEL_70;
      }
      v24 = *(_QWORD *)a1;
    }
  }
  v26 = 0;
  v27 = 0;
  v49 = v21 - v22;
  v28 = 0.0;
  v62 = 0u;
  v65 = 0;
  if (v24 >= 1)
    v29 = (double)v24;
  else
    v29 = 0.0;
  v64 = 0uLL;
  v63 = 0uLL;
  v61 = off_1E2256B38;
  LOWORD(v62) = 2;
  do
  {
    LODWORD(v55) = 0;
    icu::UnicodeString::unBogus((uint64_t)&v61);
    if ((v62 & 0x8000u) == 0)
      v30 = (unsigned __int16)v62 >> 5;
    else
      v30 = DWORD1(v62);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v61, 0, v30, (const icu::UnicodeString *)(a1 + 16), v14, (v16 - v14));
    v31 = sub_18BD05784(a1, (const icu::UnicodeString *)v71, v27, (uint64_t)&v61, (uint64_t)&v54, *(_QWORD *)(a1 + 80), a5, v29, a8);
    v32 = v55;
    if ((_DWORD)v55 || !*(_QWORD *)(a1 + 80))
    {
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      v57 = 0u;
      v56 = off_1E2256B38;
      LOWORD(v57) = 2;
      v33 = WORD4(v71[0]) >> 5;
      if (SWORD4(v71[0]) < 0)
        v33 = HIDWORD(v71[0]);
      v34 = (v33 - v55);
      icu::UnicodeString::unBogus((uint64_t)&v56);
      if ((v57 & 0x8000u) == 0)
        v35 = (unsigned __int16)v57 >> 5;
      else
        v35 = DWORD1(v57);
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v56, 0, v35, (const icu::UnicodeString *)v71, v32, v34);
      v52 = off_1E224A8B0;
      v53 = 0xFFFFFFFF00000000;
      v36 = *(unsigned __int16 *)(a1 + 24);
      if ((v36 & 0x8000) != 0)
        v37 = *(_DWORD *)(a1 + 28);
      else
        v37 = v36 >> 5;
      v38 = v37 - v16;
      icu::UnicodeString::unBogus((uint64_t)&v61);
      if ((v62 & 0x8000u) == 0)
        v39 = (unsigned __int16)v62 >> 5;
      else
        v39 = DWORD1(v62);
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v61, 0, v39, (const icu::UnicodeString *)(a1 + 16), v16, v38);
      v40 = sub_18BD05784(a1, (const icu::UnicodeString *)&v56, 0, (uint64_t)&v61, (uint64_t)&v52, *(_QWORD *)(a1 + 88), a5, v31, a8);
      if ((_DWORD)v53 || !*(_QWORD *)(a1 + 88))
      {
        if ((int)(v49 + v53 + v32) > v26)
        {
          v26 = v49 + v53 + v32;
          v28 = v40;
        }
      }
      else
      {
        v43 = HIDWORD(v53) + v14 + v32;
        if (v43 > *(_DWORD *)(a3 + 12))
          *(_DWORD *)(a3 + 12) = v43;
      }
      icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v52);
      icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v56);
      v27 = v32;
    }
    else if (HIDWORD(v55) + (int)v14 > *(_DWORD *)(a3 + 12))
    {
      *(_DWORD *)(a3 + 12) = HIDWORD(v55) + v14;
    }
    if (v16 == (_DWORD)v14 || (int)v32 < 1)
      break;
    v42 = WORD4(v71[0]) >> 5;
    if (SWORD4(v71[0]) < 0)
      v42 = HIDWORD(v71[0]);
  }
  while ((int)v32 < v42 && (_DWORD)v32 != (_DWORD)v27);
  *(_DWORD *)(a3 + 8) = v26;
  if (v26 >= 1)
  {
    *(_DWORD *)(a3 + 12) = 0;
    if (a4)
    {
      if (!*(_QWORD *)(a1 + 80))
        v28 = 1.0 / v28;
    }
  }
  icu::Formattable::setDouble(a6, v28);
  icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v61);
LABEL_70:
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v66);
  icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v71);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v54);
  return 1;
}

uint64_t sub_18BD056D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  __int16 v10;
  int v11;

  v4 = *(unsigned __int16 *)(a3 + 8);
  v5 = (__int16)v4;
  v6 = v4 >> 5;
  if (v5 < 0)
    v6 = *(_DWORD *)(a3 + 12);
  if (v6)
  {
    v11 = 0;
    result = (uint64_t)sub_18BD05AA0(result, a2, a3, &v11);
    if (v11 <= 0 && (_DWORD)result != 0)
    {
      *(_DWORD *)(a4 + 8) += result;
      if ((_DWORD)result == 0x7FFFFFFF)
      {
        if ((*(_WORD *)(a2 + 8) & 1) != 0)
          v10 = 2;
        else
          v10 = *(_WORD *)(a2 + 8) & 0x1F;
        *(_WORD *)(a2 + 8) = v10;
      }
      else
      {
        return icu::UnicodeString::doReplace(a2, 0, result, 0, 0, 0);
      }
    }
  }
  return result;
}

double sub_18BD05784(uint64_t a1, const icu::UnicodeString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  void *v28;
  void (***v29)(icu::ParsePosition *__hidden);
  void *v30;
  unsigned int v32;
  void (**v33)(icu::ParsePosition *__hidden);
  unint64_t v34;
  int v35;
  void (**v36)(icu::ParsePosition *__hidden);
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v35 = 0;
  if (!sub_18BD05D6C(a1, a4, &v35))
  {
    v19 = 0.0;
    if (v35 > 0)
      return v19;
    v33 = off_1E224A8B0;
    v34 = 0xFFFFFFFF00000000;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    icu::Formattable::Formattable((icu::Formattable *)&v41);
    v32 = 0;
    v20 = sub_18BD05E4C(a1, (uint64_t)a2, a4, a3, &v32);
    if ((v20 & 0x80000000) != 0)
    {
LABEL_23:
      *(_DWORD *)(a5 + 8) = 0;
      v19 = 0.0;
      goto LABEL_28;
    }
    v21 = v20;
    while (1)
    {
      v40 = 0;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      v36 = off_1E2256B38;
      LOWORD(v37) = 2;
      icu::UnicodeString::unBogus((uint64_t)&v36);
      if ((v37 & 0x8000u) == 0)
        v22 = (unsigned __int16)v37 >> 5;
      else
        v22 = DWORD1(v37);
      icu::UnicodeString::doReplace((icu::UnicodeString *)&v36, 0, v22, a2, 0, v21);
      v23 = (unsigned __int16)v37 >> 5;
      if ((v37 & 0x8000u) != 0)
        v23 = DWORD1(v37);
      if (v23 >= 1)
      {
        v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 200))(*(_QWORD *)(a1 + 96));
        v25 = (*(uint64_t (**)(uint64_t, void (***)(icu::ParsePosition *__hidden), void (***)(icu::ParsePosition *__hidden), uint64_t, uint64_t, __int128 *, double, double))(*(_QWORD *)a6 + 80))(a6, &v36, &v33, v24, a7, &v41, a8, a9);
        v26 = v34;
        if (v25)
          v27 = (_DWORD)v34 == (_DWORD)v21;
        else
          v27 = 0;
        if (v27)
        {
          v30 = (void *)(v32 + v21);
          *(_DWORD *)(a5 + 8) = (_DWORD)v30;
          v19 = *((double *)&v41 + 1);
          icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v36);
LABEL_28:
          icu::Formattable::~Formattable((icu::Formattable *)&v41);
          v29 = &v33;
LABEL_29:
          icu::ParsePosition::~ParsePosition((icu::ParsePosition *)v29);
          return v19;
        }
        if (SHIDWORD(v34) > 0)
          v26 = HIDWORD(v34);
        *(_DWORD *)(a5 + 12) = v26;
      }
      LODWORD(v34) = 0;
      v21 = sub_18BD05E4C(a1, (uint64_t)a2, a4, v32 + v21, &v32);
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v36);
      if ((v21 & 0x80000000) != 0)
        goto LABEL_23;
    }
  }
  if (a6)
  {
    v36 = off_1E224A8B0;
    *(_QWORD *)&v37 = 0xFFFFFFFF00000000;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    icu::Formattable::Formattable((icu::Formattable *)&v41);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 200))(*(_QWORD *)(a1 + 96));
    if ((*(unsigned int (**)(uint64_t, const icu::UnicodeString *, void (***)(icu::ParsePosition *__hidden), uint64_t, uint64_t, __int128 *, double, double))(*(_QWORD *)a6 + 80))(a6, a2, &v36, v18, a7, &v41, a8, a9)&& (_DWORD)v37)
    {
      *(_DWORD *)(a5 + 8) = v37;
      v19 = *((double *)&v41 + 1);
    }
    else
    {
      *(_DWORD *)(a5 + 12) = DWORD1(v37);
      v19 = 0.0;
    }
    icu::Formattable::~Formattable((icu::Formattable *)&v41);
    v29 = &v36;
    goto LABEL_29;
  }
  return a8;
}

icu::RuleBasedCollator *sub_18BD05AA0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v11;
  uint64_t v12;
  unsigned int v13;
  UErrorCode *v14;
  int v15;
  int32_t v16;
  int32_t v17;
  int v18;
  int32_t v19;
  int32_t v20;
  int v21;
  uint64_t v22;
  icu::RuleBasedCollator *Collator;
  icu::RuleBasedCollator *v24;
  icu::CollationElementIterator *CollationElementIterator;
  icu::CollationElementIterator *v26;
  icu::CollationElementIterator *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int i;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  UErrorCode v37;

  v4 = *(unsigned __int16 *)(a3 + 8);
  v5 = (__int16)v4;
  v6 = v4 >> 5;
  if (v5 < 0)
    v6 = *(_DWORD *)(a3 + 12);
  if (!v6)
    return 0;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 200))(*(_QWORD *)(a1 + 96));
  v13 = *(unsigned __int16 *)(a3 + 8);
  if ((v13 & 0x8000u) == 0)
    v14 = (UErrorCode *)(v13 >> 5);
  else
    v14 = (UErrorCode *)*(unsigned int *)(a3 + 12);
  if (!v11)
  {
    if ((v13 & 1) != 0)
    {
      v21 = *(_BYTE *)(a2 + 8) & 1;
      goto LABEL_51;
    }
    v18 = v14 & ((int)v14 >> 31);
    if ((v14 & 0x80000000) != 0)
    {
      v19 = 0;
    }
    else
    {
      v19 = (_DWORD)v14 - v18;
      v20 = (int)v14;
      if ((int)v14 - v18 >= v14)
      {
LABEL_45:
        if ((*(_WORD *)(a2 + 8) & 1) != 0)
        {
          v21 = 0;
        }
        else
        {
          if ((v13 & 2) != 0)
            v33 = a3 + 10;
          else
            v33 = *(_QWORD *)(a3 + 24);
          v21 = icu::UnicodeString::doEqualsSubstring(a2, 0, (int32_t)v14, v33, v18, v20);
        }
LABEL_51:
        if (v21)
          goto LABEL_52;
        return 0;
      }
    }
    v20 = v19;
    goto LABEL_45;
  }
  if ((v13 & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_26;
LABEL_52:
    if (*(__int16 *)(a3 + 8) < 0)
      return (icu::RuleBasedCollator *)*(unsigned int *)(a3 + 12);
    else
      return (icu::RuleBasedCollator *)(*(unsigned __int16 *)(a3 + 8) >> 5);
  }
  v15 = v14 & ((int)v14 >> 31);
  if ((v14 & 0x80000000) != 0)
  {
    v16 = 0;
  }
  else
  {
    v16 = (_DWORD)v14 - v15;
    v17 = (int)v14;
    if ((int)v14 - v15 >= v14)
      goto LABEL_21;
  }
  v17 = v16;
LABEL_21:
  if ((*(_WORD *)(a2 + 8) & 1) == 0)
  {
    v22 = (v13 & 2) != 0 ? a3 + 10 : *(_QWORD *)(a3 + 24);
    if (icu::UnicodeString::doEqualsSubstring(a2, 0, (int32_t)v14, v22, v15, v17))
      goto LABEL_52;
  }
LABEL_26:
  Collator = (icu::RuleBasedCollator *)icu::RuleBasedNumberFormat::getCollator(*(icu::RuleBasedNumberFormat **)(a1 + 96), v12, v14);
  v24 = Collator;
  if (Collator)
  {
    CollationElementIterator = icu::RuleBasedCollator::createCollationElementIterator(Collator, (UChar **)a2);
    v26 = icu::RuleBasedCollator::createCollationElementIterator(v24, (UChar **)a3);
    v27 = v26;
    if (CollationElementIterator && v26)
    {
      v37 = U_ZERO_ERROR;
      v28 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
      v29 = icu::CollationElementIterator::next(v27, &v37);
      if (v29 != -1)
      {
        for (i = v29; i != -1; i = icu::CollationElementIterator::next(v27, &v37))
        {
          if (!HIWORD(v28))
          {
            do
              v31 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
            while (v31 < 0x10000);
            v28 = v31;
          }
          if (!HIWORD(i))
          {
            do
              v32 = icu::CollationElementIterator::next(v27, &v37);
            while (v32 < 0x10000);
            i = v32;
          }
          if (i == -1)
            break;
          v24 = 0;
          if (v28 == -1 || (i ^ v28) >> 16)
            goto LABEL_57;
          v28 = icu::CollationElementIterator::next(CollationElementIterator, &v37);
        }
      }
      v24 = (icu::RuleBasedCollator *)(icu::CollationElementIterator::getOffset(CollationElementIterator)
                                     - (v28 != -1));
    }
    else
    {
      v24 = 0;
      *a4 = 7;
    }
LABEL_57:
    if (v27)
    {
      icu::CollationElementIterator::~CollationElementIterator(v27);
      icu::UMemory::operator delete(v34);
    }
    if (CollationElementIterator)
    {
      icu::CollationElementIterator::~CollationElementIterator(CollationElementIterator);
      icu::UMemory::operator delete(v35);
    }
  }
  else
  {
    *a4 = 7;
  }
  return v24;
}

uint64_t sub_18BD05D6C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v9;
  UErrorCode *v10;
  icu::RuleBasedCollator *Collator;
  icu::CollationElementIterator *CollationElementIterator;
  icu::CollationElementIterator *v13;
  unsigned int v14;
  _BOOL8 v15;
  void *v16;
  UErrorCode v18;

  v3 = *(unsigned __int16 *)(a2 + 8);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 < 0)
    v5 = *(_DWORD *)(a2 + 12);
  if (!v5)
    return 1;
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 200))(*(_QWORD *)(a1 + 96)))
    return 0;
  Collator = (icu::RuleBasedCollator *)icu::RuleBasedNumberFormat::getCollator(*(icu::RuleBasedNumberFormat **)(a1 + 96), v9, v10);
  if (Collator
    && (CollationElementIterator = icu::RuleBasedCollator::createCollationElementIterator(Collator, (UChar **)a2)) != 0)
  {
    v13 = CollationElementIterator;
    v18 = U_ZERO_ERROR;
    v14 = icu::CollationElementIterator::next(CollationElementIterator, &v18);
    if (!HIWORD(v14))
    {
      do
        v14 = icu::CollationElementIterator::next(v13, &v18);
      while (v14 < 0x10000);
    }
    v15 = v14 == -1;
    icu::CollationElementIterator::~CollationElementIterator(v13);
    icu::UMemory::operator delete(v16);
  }
  else
  {
    v15 = 0;
    *a3 = 7;
  }
  return v15;
}

uint64_t sub_18BD05E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  int v9;
  icu::UnicodeString *v10;
  int v11;
  int v12;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int32_t v21;
  int32_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int32_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  int32_t v35;
  unint64_t v36;
  unint64_t v37;
  int32_t v38;
  unint64_t v39;
  int v40;
  void *v41;
  int v42;
  int v43;
  unsigned int v44;
  int32_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  void (**v49)(icu::FieldPosition *__hidden);
  int v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[120];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 104))
  {
    memset(v61, 0, 112);
    icu::Formattable::Formattable((icu::Formattable *)v61);
    v52 = 0;
    v49 = off_1E225EF78;
    v51 = a4;
    v50 = 0;
    icu::PluralFormat::parseType(*(_QWORD *)(a1 + 104), a2, a1, (icu::Formattable *)v61, (uint64_t)&v49);
    v9 = v51;
    if (v51 < 0)
      goto LABEL_63;
    v10 = (icu::UnicodeString *)(a1 + 16);
    if (*(__int16 *)(a1 + 24) < 0)
    {
      v12 = *(_DWORD *)(a1 + 28);
      v11 = v12 & (v12 >> 31);
    }
    else
    {
      v11 = 0;
      v12 = *(unsigned __int16 *)(a1 + 24) >> 5;
    }
    v21 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)L"$(", 0, -1, v11, v12 - v11);
    v22 = v21;
    v23 = *(unsigned __int16 *)(a1 + 24);
    if (v21 < 0)
    {
      v25 = 0;
      if ((v23 & 0x8000) != 0)
        v24 = *(_DWORD *)(a1 + 28);
      else
        v24 = v23 >> 5;
    }
    else if ((v23 & 0x8000) != 0)
    {
      v24 = *(_DWORD *)(a1 + 28);
      if (v24 >= v21)
        v25 = v21;
      else
        v25 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v24 = v23 >> 5;
      if (v24 >= v21)
        v25 = v21;
      else
        v25 = v24;
    }
    v32 = icu::UnicodeString::indexOf(a1 + 16, (uint64_t)")", 0, -1, v25, v24 - v25) + 2;
    v34 = v52;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    icu::UnicodeString::tempSubString(v10, 0, v22, (icu::UnicodeString *)&v57);
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    icu::UnicodeString::tempSubString(v10, v32, 0x7FFFFFFF, (icu::UnicodeString *)&v53);
    if ((BYTE8(v57) & 1) != 0)
    {
      v37 = *(unsigned __int16 *)(a2 + 8);
      if ((v37 & 1) == 0)
        goto LABEL_61;
    }
    else
    {
      if ((SWORD4(v57) & 0x8000u) == 0)
        v35 = WORD4(v57) >> 5;
      else
        v35 = HIDWORD(v57);
      if ((BYTE8(v57) & 2) != 0)
        v36 = (unint64_t)&v57 | 0xA;
      else
        v36 = *((_QWORD *)&v58 + 1);
      if (icu::UnicodeString::doCompare(a2, v9 - v35, v35, v36, v35 & (v35 >> 31), v35 & ~(v35 >> 31)))goto LABEL_61;
    }
    if ((BYTE8(v53) & 1) == 0)
    {
      if ((SWORD4(v53) & 0x8000u) == 0)
        v38 = WORD4(v53) >> 5;
      else
        v38 = HIDWORD(v53);
      if ((BYTE8(v53) & 2) != 0)
        v39 = (unint64_t)&v53 | 0xA;
      else
        v39 = *((_QWORD *)&v54 + 1);
      if (icu::UnicodeString::doCompare(a2, v34, v38, v39, v38 & (v38 >> 31), v38 & ~(v38 >> 31)))goto LABEL_61;
LABEL_67:
      v40 = 0;
      v42 = WORD4(v57) >> 5;
      if (SWORD4(v57) < 0)
        v42 = HIDWORD(v57);
      v43 = WORD4(v53) >> 5;
      if (SWORD4(v53) < 0)
        v43 = HIDWORD(v53);
      v37 = (v34 - v9 + v42 + v43);
      *a5 = v37;
      v32 = (v9 - v42);
LABEL_62:
      icu::UnicodeString::~UnicodeString((void *)v37, (icu::UnicodeString *)&v53);
      icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v57);
      if (!v40)
      {
LABEL_64:
        icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v49);
        icu::Formattable::~Formattable((icu::Formattable *)v61);
        return v32;
      }
LABEL_63:
      *a5 = 0;
      v32 = 0xFFFFFFFFLL;
      goto LABEL_64;
    }
    v37 = *(unsigned __int16 *)(a2 + 8);
    if ((v37 & 1) != 0)
      goto LABEL_67;
LABEL_61:
    v40 = 1;
    goto LABEL_62;
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 200))(*(_QWORD *)(a1 + 96));
  v15 = *(unsigned __int16 *)(a3 + 8);
  v16 = (__int16)v15;
  v17 = v15 >> 5;
  if (v16 < 0)
    v17 = *(_DWORD *)(a3 + 12);
  *a5 = v17;
  v18 = *(unsigned __int16 *)(a2 + 8);
  if (v14)
  {
    if ((a4 & 0x80000000) != 0)
    {
      v19 = 0;
    }
    else if ((v18 & 0x8000) != 0)
    {
      v19 = *(_DWORD *)(a2 + 12);
      v20 = a4;
      if (v19 >= (int)a4)
      {
LABEL_30:
        v27 = *(unsigned __int16 *)(a3 + 8);
        if ((v27 & 0x8000u) == 0)
          v28 = v27 >> 5;
        else
          v28 = *(_DWORD *)(a3 + 12);
        if ((v27 & 1) != 0 || v28 < 1)
          return sub_18BD06334(a1, a2, a3, a4, a5);
        v29 = (__int16)v18;
        v30 = v18 >> 5;
        if (v29 < 0)
          v30 = *(_DWORD *)(a2 + 12);
        v31 = (v27 & 2) != 0 ? a3 + 10 : *(_QWORD *)(a3 + 24);
        v32 = icu::UnicodeString::indexOf(a2, v31, 0, v28, v20, v30 - v20);
        if ((v32 & 0x80000000) != 0)
          return sub_18BD06334(a1, a2, a3, a4, a5);
        return v32;
      }
    }
    else
    {
      v19 = v18 >> 5;
      v20 = a4;
      if (v18 >> 5 >= a4)
        goto LABEL_30;
    }
    v20 = v19;
    goto LABEL_30;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v26 = 0;
    goto LABEL_74;
  }
  if ((v18 & 0x8000) != 0)
  {
    v26 = *(_DWORD *)(a2 + 12);
    if (v26 >= (int)a4)
      goto LABEL_75;
    goto LABEL_74;
  }
  v26 = v18 >> 5;
  if (v18 >> 5 < a4)
LABEL_74:
    LODWORD(a4) = v26;
LABEL_75:
  v44 = *(unsigned __int16 *)(a3 + 8);
  if ((v44 & 0x8000u) == 0)
    v45 = v44 >> 5;
  else
    v45 = *(_DWORD *)(a3 + 12);
  v32 = 0xFFFFFFFFLL;
  if ((v44 & 1) != 0 || v45 < 1)
    return v32;
  v46 = (__int16)v18;
  v47 = v18 >> 5;
  if (v46 < 0)
    v47 = *(_DWORD *)(a2 + 12);
  if ((v44 & 2) != 0)
    v48 = a3 + 10;
  else
    v48 = *(_QWORD *)(a3 + 24);
  return icu::UnicodeString::indexOf(a2, v48, 0, v45, a4, v47 - a4);
}

uint64_t sub_18BD06334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v6;
  int i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v16;
  void (**v17)(icu::UnicodeString *__hidden);
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a4;
  v22 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v21 = 0;
  v20 = 0u;
  v17 = off_1E2256B38;
  LOWORD(v18) = 2;
  v16 = 0;
  for (i = -(int)a4; ; --i)
  {
    if (*(__int16 *)(a2 + 8) < 0)
    {
      v11 = *(unsigned int *)(a2 + 12);
      if ((int)v6 >= (int)v11)
        break;
    }
    else
    {
      v11 = *(unsigned __int16 *)(a2 + 8);
      if ((int)v6 >= (int)(v11 >> 5))
        break;
      LODWORD(v11) = v11 >> 5;
    }
    v12 = (v11 + i);
    icu::UnicodeString::unBogus((uint64_t)&v17);
    v13 = (v18 & 0x8000u) == 0 ? (unsigned __int16)v18 >> 5 : DWORD1(v18);
    icu::UnicodeString::doReplace((icu::UnicodeString *)&v17, 0, v13, (const icu::UnicodeString *)a2, v6, v12);
    v14 = sub_18BD05AA0(a1, (uint64_t)&v17, a3, &v16);
    v11 = v16;
    if (v16 > 0)
      break;
    if (v14)
      goto LABEL_13;
    v6 = (v6 + 1);
  }
  v14 = 0;
  v6 = 0xFFFFFFFFLL;
LABEL_13:
  *a5 = v14;
  icu::UnicodeString::~UnicodeString((void *)v11, (icu::UnicodeString *)&v17);
  return v6;
}

uint64_t sub_18BD06488(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
    sub_18BD06D54(v2);
  result = *(_QWORD *)(a1 + 88);
  if (result)
    return sub_18BD06D54(result);
  return result;
}

void sub_18BD064E8(icu::UObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
}

void sub_18BD0652C(icu::UObject *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

void sub_18BD06574(icu::UObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
}

void sub_18BD065B8(icu::UObject *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

void sub_18BD06600(icu::UObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
}

void sub_18BD06644(icu::UObject *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

void sub_18BD0668C(icu::UObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
}

void sub_18BD066D0(icu::UObject *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

void sub_18BD06718(icu::UObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
}

void sub_18BD0675C(icu::UObject *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

void sub_18BD067A4(icu::UObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
}

void sub_18BD067E8(icu::UObject *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

void sub_18BD06830(icu::UObject *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
}

void sub_18BD06874(icu::UObject *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E22621E8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 3) = 0;
  icu::UObject::~UObject(this);
  icu::UMemory::operator delete(v3);
}

uint64_t *sub_18BD068BC(int a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  unsigned int v14;
  uint64_t *result;
  unsigned __int16 *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t (**v19)(icu::UObject *);
  uint64_t *v20;
  uint64_t *v21;

  v14 = *(unsigned __int16 *)(a6 + 8);
  if (*(__int16 *)(a6 + 8) < 0)
  {
    if (!*(_DWORD *)(a6 + 12))
      return 0;
  }
  else if (v14 < 0x20)
  {
    return 0;
  }
  if ((v14 & 2) != 0)
    v16 = (unsigned __int16 *)(a6 + 10);
  else
    v16 = *(unsigned __int16 **)(a6 + 24);
  v17 = (uint64_t *)*v16;
  if ((_DWORD)v17 != 62)
  {
    if ((_DWORD)v17 == 61)
    {
      result = icu::UMemory::operator new(v17, (icu::UMemory *)0x20, (unint64_t)a2);
      if (result)
        return (uint64_t *)sub_18BD07528((uint64_t)result, a1, a4, a6, a7);
      return result;
    }
    if ((_DWORD)v17 == 60)
    {
      v18 = *a2;
      if ((unint64_t)*a2 + 4 < 3)
      {
        result = icu::UMemory::operator new(v18, (icu::UMemory *)0x20, (unint64_t)a2);
        if (result)
        {
          result = (uint64_t *)sub_18BD06AC8((uint64_t)result, a1, a4, (UChar **)a6, a7);
          v19 = off_1E2262518;
LABEL_26:
          *result = (uint64_t)v19;
          return result;
        }
        return result;
      }
      if (v18 != (uint64_t *)-1)
      {
        v21 = (uint64_t *)*(unsigned __int8 *)(a4 + 160);
        if (*(_BYTE *)(a4 + 160))
        {
          result = icu::UMemory::operator new(v21, (icu::UMemory *)0x38, (unint64_t)a2);
          if (result)
            return (uint64_t *)sub_18BD08908((uint64_t)result, a1, *(_QWORD *)(a5 + 384), a6, a7, (double)(uint64_t)*a2);
        }
        else
        {
          result = icu::UMemory::operator new(v21, (icu::UMemory *)0x28, (unint64_t)a2);
          if (result)
            return (uint64_t *)sub_18BD08A94((uint64_t)result, a1, (uint64_t)a2, a4, (UChar **)a6, a7);
        }
        return result;
      }
    }
LABEL_28:
    result = 0;
    *a7 = U_PARSE_ERROR;
    return result;
  }
  v20 = *a2;
  if ((unint64_t)*a2 + 4 < 3)
  {
    result = icu::UMemory::operator new(v20, (icu::UMemory *)0x28, (unint64_t)a2);
    if (result)
      return (uint64_t *)sub_18BD079FC((uint64_t)result, a1, a4, a6, a7);
    return result;
  }
  if (v20 != (uint64_t *)-1)
  {
    if (!*(_BYTE *)(a4 + 160))
    {
      result = icu::UMemory::operator new((uint64_t *)*(unsigned __int8 *)(a4 + 160), (icu::UMemory *)0x30, (unint64_t)a2);
      if (result)
        return (uint64_t *)sub_18BD0760C((uint64_t)result, a1, (uint64_t)a2, a3, a4, (UChar **)a6, a7);
      return result;
    }
    goto LABEL_28;
  }
  result = icu::UMemory::operator new((uint64_t *)0xFFFFFFFFFFFFFFFFLL, (icu::UMemory *)0x20, (unint64_t)a2);
  if (result)
  {
    result = (uint64_t *)sub_18BD06AC8((uint64_t)result, a1, a4, (UChar **)a6, a7);
    v19 = off_1E22625D8;
    goto LABEL_26;
  }
  return result;
}

uint64_t sub_18BD06AC8(uint64_t a1, int a2, uint64_t a3, UChar **a4, UErrorCode *a5)
{
  _QWORD *v9;
  unsigned int v10;
  UChar *v11;
  int v12;
  int v13;
  int v14;
  UChar *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  uint64_t DecimalFormatSymbols;
  unint64_t v22;
  uint64_t *v23;
  const icu::DecimalFormatSymbols *v24;
  icu::DecimalFormat *v25;
  icu::DecimalFormat *v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E22621E8;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = (_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v28, a4);
  v10 = *((unsigned __int16 *)a4 + 4);
  if ((__int16)a4[1] < 0)
  {
    v12 = *((_DWORD *)a4 + 3);
    if (v12 <= 1)
      goto LABEL_18;
    v11 = (UChar *)a4 + 5;
    if ((v10 & 2) == 0)
      v11 = a4[3];
  }
  else
  {
    if (v10 < 0x40)
      goto LABEL_16;
    v11 = a4[3];
    if ((v10 & 2) != 0)
      v11 = (UChar *)a4 + 5;
    v12 = v10 >> 5;
  }
  v13 = *v11;
  v14 = v12 - 1;
  v15 = (UChar *)a4 + 5;
  if ((v10 & 2) == 0)
    v15 = a4[3];
  if (v13 != v15[v14])
  {
    if ((v10 & 0x8000) == 0)
    {
LABEL_16:
      if (!(v10 >> 5))
        goto LABEL_19;
LABEL_38:
      v18 = 9;
LABEL_39:
      *a5 = v18;
      goto LABEL_40;
    }
LABEL_18:
    if (!*((_DWORD *)a4 + 3))
      goto LABEL_19;
    goto LABEL_38;
  }
  v16 = (__int16)v10;
  v17 = v10 >> 5;
  if (v16 < 0)
    v17 = *((_DWORD *)a4 + 3);
  icu::UnicodeString::doReplace((uint64_t)&v28, v17 - 1, 1, 0, 0, 0);
  icu::UnicodeString::doReplace((uint64_t)&v28, 0, 1, 0, 0, 0);
LABEL_19:
  v18 = WORD4(v28);
  if (SWORD4(v28) < 0)
  {
    if (!HIDWORD(v28))
      goto LABEL_21;
  }
  else if (WORD4(v28) <= 0x1Fu)
  {
LABEL_21:
    *v9 = a3;
    goto LABEL_40;
  }
  v19 = (unsigned __int16 *)((unint64_t)&v28 | 0xA);
  if ((BYTE8(v28) & 2) == 0)
    v19 = (unsigned __int16 *)*((_QWORD *)&v29 + 1);
  v20 = *v19;
  if (v20 == 37)
  {
    *v9 = icu::RuleBasedNumberFormat::findRuleSet(*(icu::RuleBasedNumberFormat **)(a3 + 136), (const icu::UnicodeString *)&v28, a5);
    goto LABEL_40;
  }
  LODWORD(v18) = WORD4(v28) >> 5;
  if ((SWORD4(v28) & 0x8000u) == 0)
    v18 = v18;
  else
    v18 = HIDWORD(v28);
  if (!(_DWORD)v18)
    goto LABEL_38;
  if (v20 != 35)
  {
    if (v20 == 62)
    {
      *(_QWORD *)(a1 + 16) = a3;
      *(_QWORD *)(a1 + 24) = 0;
      goto LABEL_40;
    }
    if (v20 != 48)
      goto LABEL_38;
  }
  DecimalFormatSymbols = icu::RuleBasedNumberFormat::getDecimalFormatSymbols(*(icu::RuleBasedNumberFormat **)(a3 + 136));
  if (!DecimalFormatSymbols)
  {
    v18 = 2;
    goto LABEL_39;
  }
  v24 = (const icu::DecimalFormatSymbols *)DecimalFormatSymbols;
  v25 = (icu::DecimalFormat *)icu::UMemory::operator new(v23, (icu::UMemory *)0x170, v22);
  if (!v25)
  {
    v18 = 7;
    goto LABEL_39;
  }
  v26 = icu::DecimalFormat::DecimalFormat(v25, (const icu::UnicodeString *)&v28, v24, a5);
  v18 = *(unsigned int *)a5;
  if ((int)v18 < 1)
    *(_QWORD *)(a1 + 24) = v26;
  else
    (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)v26 + 8))(v26);
LABEL_40:
  icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v28);
  return a1;
}

uint64_t sub_18BD06D54(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 336))(result);
  return result;
}

void *sub_18BD06D6C()
{
  return &unk_1EE009C04;
}

uint64_t sub_18BD06D78(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
    __cxa_bad_typeid();
  result = sub_18BBE6718(*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8) || (*(_QWORD *)(a1 + 16) != 0) == (*(_QWORD *)(a2 + 16) == 0))
    {
      return 0;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(_QWORD *)(a2 + 24);
      if (v5)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v6);
      else
        return v6 == 0;
    }
  }
  return result;
}

void *sub_18BD06E18(_QWORD *a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int16 v10;
  UChar *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a2 + 8) & 1) != 0)
    v4 = 2;
  else
    v4 = *(_WORD *)(a2 + 8) & 0x1F;
  *(_WORD *)(a2 + 8) = v4;
  LOWORD(v11) = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  icu::UnicodeString::doAppend(a2, (uint64_t)&v11, 0, 1);
  v12 = 0u;
  v13 = 0u;
  v15 = 0;
  v14 = 0u;
  v11 = (UChar *)off_1E2256B38;
  LOWORD(v12) = 2;
  v5 = a1[2];
  if (v5)
  {
    icu::UnicodeString::copyFrom(&v11, (UChar **)(v5 + 8), 0);
  }
  else
  {
    v6 = a1[3];
    if (v6)
      (*(void (**)(uint64_t, UChar **))(*(_QWORD *)v6 + 552))(v6, &v11);
  }
  if ((v12 & 0x8000u) == 0)
    v7 = (unsigned __int16)v12 >> 5;
  else
    v7 = DWORD1(v12);
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v11, 0, v7);
  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  icu::UnicodeString::doAppend(a2, (uint64_t)&v10, 0, 1);
  return icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v11);
}

_QWORD *sub_18BD06F60(_QWORD *result, uint64_t a2, icu::UnicodeString *a3, int a4, int a5, UErrorCode *a6)
{
  _QWORD *v9;
  _DWORD *v10;
  unint64_t v12;
  double v13;
  icu::Format *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _BYTE v18[112];
  void (**v19)(icu::UnicodeString *__hidden);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v9 = result;
  v24 = *MEMORY[0x1E0C80C00];
  v10 = (_DWORD *)result[2];
  if (v10)
  {
    v12 = (*(uint64_t (**)(_QWORD *))(*result + 64))(result);
    return sub_18BD024D0(v10, v12, a3, (*((_DWORD *)v9 + 2) + a4), a5, a6);
  }
  else if (result[3])
  {
    if (a2 > 0x1FFFFFFFFFFFFFLL)
    {
      v15 = (*(uint64_t (**)(_QWORD *))(*result + 64))(result);
      v20 = 0u;
      v23 = 0;
      v22 = 0u;
      v21 = 0u;
      v19 = off_1E2256B38;
      LOWORD(v20) = 2;
      v14 = (icu::Format *)v9[3];
      icu::Formattable::Formattable((icu::Formattable *)v18, v15);
    }
    else
    {
      v13 = (*(double (**)(_QWORD *, double))(*result + 72))(result, (double)a2);
      if (!icu::NumberFormat::getMaximumFractionDigits((icu::NumberFormat *)v9[3]))
        v13 = uprv_floor(v13);
      v20 = 0u;
      v23 = 0;
      v22 = 0u;
      v21 = 0u;
      v19 = off_1E2256B38;
      LOWORD(v20) = 2;
      v14 = (icu::Format *)v9[3];
      icu::Formattable::Formattable((icu::Formattable *)v18, v13);
    }
    icu::Format::format(v14, (const icu::Formattable *)v18, (icu::UnicodeString *)&v19, a6);
    icu::Formattable::~Formattable((icu::Formattable *)v18);
    if ((v20 & 0x8000u) == 0)
      v16 = (unsigned __int16)v20 >> 5;
    else
      v16 = DWORD1(v20);
    icu::UnicodeString::doReplace(a3, (*((_DWORD *)v9 + 2) + a4), 0, (const icu::UnicodeString *)&v19, 0, v16);
    return icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v19);
  }
  return result;
}

icu::NumberFormat *sub_18BD07178(uint64_t a1, icu::UnicodeString *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  double v10;
  uint64_t v11;
  double Infinity;
  uint64_t v13;
  icu::NumberFormat *result;
  double v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void (**v20)(icu::UnicodeString *__hidden);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  if (uprv_isInfinite(v10))
  {
    v11 = *(_QWORD *)(a1 + 16);
    Infinity = uprv_getInfinity();
    v13 = sub_18BD026B0(v11, Infinity);
    return (icu::NumberFormat *)sub_18BD04DBC(v13, a2, (*(_DWORD *)(a1 + 8) + a3), a4, a5, v10);
  }
  v15 = uprv_floor(v10);
  v16 = *(_DWORD **)(a1 + 16);
  if (v10 == v15)
  {
    if (v16)
    {
      v17 = sub_18BD02968(v10);
      return (icu::NumberFormat *)sub_18BD024D0(v16, v17, a2, (*(_DWORD *)(a1 + 8) + a3), a4, a5);
    }
  }
  else if (v16)
  {
    return (icu::NumberFormat *)sub_18BD02630(*(_DWORD **)(a1 + 16), a2, (*(_DWORD *)(a1 + 8) + a3), a4, a5, v10);
  }
  result = *(icu::NumberFormat **)(a1 + 24);
  if (result)
  {
    v21 = 0u;
    v22 = 0u;
    v24 = 0;
    v23 = 0u;
    v20 = off_1E2256B38;
    LOWORD(v21) = 2;
    icu::NumberFormat::format(result, v10, (icu::UnicodeString *)&v20);
    if ((v21 & 0x8000u) == 0)
      v18 = (unsigned __int16)v21 >> 5;
    else
      v18 = DWORD1(v21);
    icu::UnicodeString::doReplace(a2, (*(_DWORD *)(a1 + 8) + a3), 0, (const icu::UnicodeString *)&v20, 0, v18);
    return (icu::NumberFormat *)icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v20);
  }
  return result;
}

uint64_t sub_18BD073A0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, icu::Formattable *a6, double a7, double a8)
{
  double v15;
  uint64_t v16;
  UErrorCode *v17;
  icu::DecimalFormat *Instance;
  icu::DecimalFormat *v20;
  uint64_t v21;
  double Double;
  double v23;
  UErrorCode v25;
  int v26;

  (*(void (**)(_QWORD *, double))(*a1 + 96))(a1, a8);
  v16 = a1[2];
  if (v16)
  {
    sub_18BD029C8(v16, a2, a3, a5, a6, 0, v15);
    if (a4)
    {
      if (!*(_BYTE *)(a1[2] + 160) && *(_DWORD *)(a3 + 8) == 0)
      {
        v26 = 0;
        Instance = icu::NumberFormat::createInstance((icu::NumberFormat *)&v26, v17);
        v20 = Instance;
        if (v26 <= 0)
        {
          (*(void (**)(icu::DecimalFormat *, uint64_t, icu::Formattable *, uint64_t))(*(_QWORD *)Instance
                                                                                             + 160))(Instance, a2, a6, a3);
        }
        else if (!Instance)
        {
          goto LABEL_15;
        }
        (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)v20 + 8))(v20);
      }
    }
  }
  else
  {
    v21 = a1[3];
    if (v21)
      (*(void (**)(uint64_t, uint64_t, icu::Formattable *, uint64_t))(*(_QWORD *)v21 + 160))(v21, a2, a6, a3);
  }
LABEL_15:
  if (*(_DWORD *)(a3 + 8))
  {
    v25 = U_ZERO_ERROR;
    Double = icu::Formattable::getDouble(a6, &v25);
    v23 = (*(double (**)(_QWORD *, double, double))(*a1 + 88))(a1, Double, a7);
    icu::Formattable::setDouble(a6, v23);
    return 1;
  }
  else
  {
    icu::Formattable::setLong(a6, 0);
    return 0;
  }
}

uint64_t sub_18BD07500()
{
  return 0;
}

BOOL sub_18BD07508(uint64_t a1)
{
  return !*(_QWORD *)(a1 + 16) && *(_QWORD *)(a1 + 24) != 0;
}

uint64_t sub_18BD07528(uint64_t a1, int a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  unsigned int v8;
  int v9;
  int32_t v10;
  int32_t v11;

  *(_QWORD *)sub_18BD06AC8(a1, a2, a3, (UChar **)a4, a5) = off_1E2262278;
  v8 = *(unsigned __int16 *)(a4 + 8);
  v9 = (__int16)v8;
  v10 = v8 >> 5;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = *(_DWORD *)(a4 + 12);
  if (!icu::UnicodeString::doCompare(a4, 0, v11, (uint64_t)"=", 0, 2))
    *a5 = U_PARSE_ERROR;
  return a1;
}

void *sub_18BD075BC()
{
  return &unk_1EE009C05;
}

void *sub_18BD075C8()
{
  return &unk_1EE009C06;
}

uint64_t sub_18BD075D4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_18BD06D78(a1, a2);
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
  return result;
}

uint64_t sub_18BD0760C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, UChar **a6, UErrorCode *a7)
{
  uint64_t v12;
  unsigned int v13;
  int v14;
  int32_t v15;
  int32_t v16;

  *(_QWORD *)sub_18BD06AC8(a1, a2, a5, a6, a7) = off_1E2262308;
  v12 = sub_18BD04A84(a3);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = 0;
  if (!v12)
    *a7 = U_PARSE_ERROR;
  v13 = *((unsigned __int16 *)a6 + 4);
  v14 = (__int16)v13;
  v15 = v13 >> 5;
  if (v14 >= 0)
    v16 = v15;
  else
    v16 = *((_DWORD *)a6 + 3);
  if (!icu::UnicodeString::doCompare((uint64_t)a6, 0, v16, (uint64_t)L">>>", 0, 3))
    *(_QWORD *)(a1 + 40) = a4;
  return a1;
}

void *sub_18BD076D0()
{
  return &unk_1EE009C07;
}

uint64_t sub_18BD076DC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_18BD06D78(a1, a2);
  if ((_DWORD)result)
    return *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40);
  return result;
}

_QWORD *sub_18BD0772C(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, int a4, uint64_t a5, UErrorCode *a6)
{
  unint64_t v11;

  if (!*(_QWORD *)(a1 + 40))
    return sub_18BD06F60((_QWORD *)a1, a2, a3, a4, a5, a6);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  return sub_18BD04A94(*(_QWORD *)(a1 + 40), v11, a3, (*(_DWORD *)(a1 + 8) + a4), a5, a6);
}

icu::NumberFormat *sub_18BD077C4(uint64_t a1, icu::UnicodeString *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  double v10;

  if (!*(_QWORD *)(a1 + 40))
    return sub_18BD07178(a1, a2, a3, a4, a5);
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  return (icu::NumberFormat *)sub_18BD04DBC(*(_QWORD *)(a1 + 40), a2, (*(_DWORD *)(a1 + 8) + a3), a4, a5, v10);
}

uint64_t sub_18BD07858(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, icu::Formattable *a6, double a7, double a8)
{
  uint64_t v12;
  double Double;
  double v14;
  UErrorCode v16;

  v12 = a1[5];
  if (!v12)
    return sub_18BD073A0(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_18BD0518C(v12, a2, a3, 0, a5, a6, 1, a8);
  if (*(_DWORD *)(a3 + 8))
  {
    v16 = U_ZERO_ERROR;
    Double = icu::Formattable::getDouble(a6, &v16);
    v14 = (*(double (**)(_QWORD *, double, double))(*a1 + 88))(a1, Double, a7);
    icu::Formattable::setDouble(a6, v14);
  }
  return 1;
}

void *sub_18BD07918(_QWORD *a1, uint64_t a2)
{
  __int16 v4;
  __int16 v6;
  __int16 v7;
  __int16 v8;

  if (!a1[5])
    return sub_18BD06E18(a1, a2);
  if ((*(_WORD *)(a2 + 8) & 1) != 0)
    v4 = 2;
  else
    v4 = *(_WORD *)(a2 + 8) & 0x1F;
  *(_WORD *)(a2 + 8) = v4;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  icu::UnicodeString::doAppend(a2, (uint64_t)&v6, 0, 1);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  icu::UnicodeString::doAppend(a2, (uint64_t)&v7, 0, 1);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1);
  return (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v8, 0, 1);
}

void *sub_18BD079F0()
{
  return &unk_1EE009C08;
}

uint64_t sub_18BD079FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  int32_t v11;
  int32_t v12;
  unsigned int v13;
  int v14;
  int32_t v15;
  int32_t v16;
  unsigned int v17;
  int v18;
  int32_t v19;
  int32_t v20;

  v8 = sub_18BD06AC8(a1, a2, a3, (UChar **)a4, a5);
  *(_QWORD *)v8 = off_1E2262398;
  *(_WORD *)(v8 + 32) = 256;
  v9 = *(unsigned __int16 *)(a4 + 8);
  v10 = (__int16)v9;
  v11 = v9 >> 5;
  if (v10 >= 0)
    v12 = v11;
  else
    v12 = *(_DWORD *)(a4 + 12);
  if (icu::UnicodeString::doCompare(a4, 0, v12, (uint64_t)L">>", 0, 2)
    && ((v13 = *(unsigned __int16 *)(a4 + 8), v14 = (__int16)v13, v15 = v13 >> 5, v14 >= 0)
      ? (v16 = v15)
      : (v16 = *(_DWORD *)(a4 + 12)),
        icu::UnicodeString::doCompare(a4, 0, v16, (uint64_t)L">>>", 0, 3) && *(_QWORD *)(a1 + 16) != a3))
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 16) + 160) = 1;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 1;
    v17 = *(unsigned __int16 *)(a4 + 8);
    v18 = (__int16)v17;
    v19 = v17 >> 5;
    if (v18 >= 0)
      v20 = v19;
    else
      v20 = *(_DWORD *)(a4 + 12);
    if (!icu::UnicodeString::doCompare(a4, 0, v20, (uint64_t)L">>>", 0, 3))
      *(_BYTE *)(a1 + 33) = 0;
  }
  return a1;
}

void sub_18BD07B64(uint64_t a1, icu::UnicodeString *a2, int a3, uint64_t a4, int *a5, double a6)
{
  int v7;
  int LowerDisplayMagnitude;
  int v13;
  char v14;
  uint64_t v15;
  int Digit;
  _OWORD v18[4];
  uint64_t v19;
  __int16 v20;

  v7 = a4;
  if (*(_BYTE *)(a1 + 32))
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v18);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v18, a6);
    icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)v18, -20, 4u, a5);
    LowerDisplayMagnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude((icu::number::impl::DecimalQuantity *)v18);
    if (LowerDisplayMagnitude < 0)
    {
      v13 = LowerDisplayMagnitude;
      v14 = 1;
      do
      {
        if ((v14 & 1) == 0)
        {
          if (*(_BYTE *)(a1 + 33))
          {
            v15 = (*(_DWORD *)(a1 + 8) + a3);
            v20 = 32;
            icu::UnicodeString::doReplace((uint64_t)a2, v15, 0, (uint64_t)&v20, 0, 1);
          }
        }
        Digit = icu::number::impl::DecimalQuantity::getDigit((icu::number::impl::DecimalQuantity *)v18, v13);
        sub_18BD024D0(*(_DWORD **)(a1 + 16), Digit, a2, (*(_DWORD *)(a1 + 8) + a3), v7, (UErrorCode *)a5);
        v14 = 0;
      }
      while (!__CFADD__(v13++, 1));
    }
    else
    {
      sub_18BD024D0(*(_DWORD **)(a1 + 16), 0, a2, (*(_DWORD *)(a1 + 8) + a3), v7, (UErrorCode *)a5);
    }
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v18);
  }
  else
  {
    sub_18BD07178(a1, a2, a3, a4, (UErrorCode *)a5);
  }
}

uint64_t sub_18BD07CE0(uint64_t a1, UChar **a2, uint64_t a3, int a4, uint64_t a5, icu::Formattable *a6, double a7)
{
  int v13;
  icu::DecimalFormat *v14;
  int v15;
  UErrorCode *v16;
  char Long;
  uint64_t v18;
  _WORD *v19;
  int v20;
  icu::DecimalFormat *Instance;
  double v24;
  double v25;
  void *v26;
  UErrorCode v27;
  _OWORD v28[4];
  uint64_t v29;
  void (**v30)(icu::ParsePosition *__hidden);
  unint64_t v31;
  _OWORD v32[7];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 32))
    return sub_18BD073A0((_QWORD *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, 0.0);
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v33, a2);
  v30 = off_1E224A8B0;
  v31 = 0xFFFFFFFF00000001;
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v28);
  v13 = WORD4(v33) >> 5;
  if (SWORD4(v33) < 0)
    v13 = HIDWORD(v33);
  if (v13 < 1)
  {
    v15 = 0;
    goto LABEL_38;
  }
  v14 = 0;
  v15 = 0;
  do
  {
    LODWORD(v31) = 0;
    memset(v32, 0, sizeof(v32));
    icu::Formattable::Formattable((icu::Formattable *)v32);
    sub_18BD029C8(*(_QWORD *)(a1 + 16), (uint64_t)&v33, (uint64_t)&v30, a5, (icu::Formattable *)v32, 0, 10.0);
    v27 = U_ZERO_ERROR;
    Long = icu::Formattable::getLong((icu::Formattable *)v32, &v27);
    if (!a4)
      goto LABEL_10;
    if (!(_DWORD)v31)
    {
      if (v14)
      {
LABEL_9:
        (*(void (**)(icu::DecimalFormat *, __int128 *, _OWORD *, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)v14 + 160))(v14, &v33, v32, &v30);
        Long = icu::Formattable::getLong((icu::Formattable *)v32, &v27);
        goto LABEL_10;
      }
      v27 = U_ZERO_ERROR;
      Instance = icu::NumberFormat::createInstance((icu::NumberFormat *)&v27, v16);
      v14 = Instance;
      if (v27 < U_ILLEGAL_ARGUMENT_ERROR)
      {
        if (Instance)
          goto LABEL_9;
      }
      else if (Instance)
      {
        (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)Instance + 8))(Instance);
        v14 = 0;
      }
LABEL_10:
      if (!(_DWORD)v31)
        goto LABEL_21;
    }
    icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)v28, Long, 0, 1);
    ++v15;
    v18 = v31;
    *(_DWORD *)(a3 + 8) += v31;
    icu::UnicodeString::doReplace((uint64_t)&v33, 0, v18, 0, 0, 0);
    while (1)
    {
      if (SWORD4(v33) < 0)
      {
        if (*((uint64_t *)&v33 + 1) <= 0)
          break;
      }
      else if (WORD4(v33) < 0x20u)
      {
        break;
      }
      v19 = (_WORD *)((BYTE8(v33) & 2) != 0 ? (unint64_t)&v33 | 0xA : *((_QWORD *)&v34 + 1));
      if (*v19 != 32)
        break;
      icu::UnicodeString::doReplace((uint64_t)&v33, 0, 1, 0, 0, 0);
      ++*(_DWORD *)(a3 + 8);
    }
LABEL_21:
    icu::Formattable::~Formattable((icu::Formattable *)v32);
    v20 = WORD4(v33) >> 5;
    if (SWORD4(v33) < 0)
      v20 = HIDWORD(v33);
  }
  while (v20 >= 1 && (_DWORD)v31 != 0);
  if (v14)
    (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)v14 + 8))(v14);
LABEL_38:
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v28, -v15);
  v24 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v28);
  v25 = (*(double (**)(uint64_t, double, double))(*(_QWORD *)a1 + 88))(a1, v24, a7);
  icu::Formattable::setDouble(a6, v25);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v28);
  icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v30);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v33);
  return 1;
}

uint64_t sub_18BD08068(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_18BD06D78(a1, a2);
  if ((_DWORD)result)
    return *(unsigned __int8 *)(a2 + 32) == *(unsigned __int8 *)(a1 + 32);
  return result;
}

void *sub_18BD080A0()
{
  return &unk_1EE009C09;
}

void *sub_18BD080AC()
{
  return &unk_1EE009C0A;
}

_DWORD *sub_18BD080B8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, UErrorCode *a5)
{
  double v10;
  uint64_t v11;
  int64_t v12;
  _DWORD *v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  icu::Format *v25;
  uint64_t v26;
  void *v27;
  _WORD v28[56];
  void (**v29)(icu::UnicodeString *__hidden);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v11 = sub_18BD02968(v10);
  v12 = v11;
  v13 = *(_DWORD **)(a1 + 16);
  if (*(_BYTE *)(a1 + 48))
    v14 = v13 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v15 = *(unsigned __int16 *)(a2 + 8);
    v16 = (__int16)v15;
    v17 = v15 >> 5;
    v18 = *(_DWORD *)(a2 + 12);
    if (v16 >= 0)
      v19 = v17;
    else
      v19 = *(_DWORD *)(a2 + 12);
    v20 = 10 * v11;
    if (*(double *)(a1 + 32) > (double)(10 * v11))
    {
      do
      {
        v21 = *(_DWORD *)(a1 + 8) + a3;
        v28[0] = 32;
        icu::UnicodeString::doReplace(a2, v21, 0, (uint64_t)v28, 0, 1);
        sub_18BD024D0(v13, 0, (icu::UnicodeString *)a2, *(_DWORD *)(a1 + 8) + a3, a4, a5);
        v20 *= 10;
      }
      while (*(double *)(a1 + 32) > (double)v20);
      v16 = *(unsigned __int16 *)(a2 + 8);
      v18 = *(_DWORD *)(a2 + 12);
      v17 = v16 >> 5;
    }
    if ((v16 & 0x8000u) == 0)
      v22 = v17;
    else
      v22 = v18;
    a3 = a3 - v19 + v22;
  }
  if (v10 == (double)v12 && v13 != 0)
    return sub_18BD024D0(v13, v12, (icu::UnicodeString *)a2, *(_DWORD *)(a1 + 8) + a3, a4, a5);
  if (v13)
    return sub_18BD02630(v13, (icu::UnicodeString *)a2, *(_DWORD *)(a1 + 8) + a3, a4, a5, v10);
  v30 = 0u;
  v33 = 0;
  v32 = 0u;
  v31 = 0u;
  v29 = off_1E2256B38;
  LOWORD(v30) = 2;
  v25 = *(icu::Format **)(a1 + 24);
  icu::Formattable::Formattable((icu::Formattable *)v28, v10);
  icu::Format::format(v25, (const icu::Formattable *)v28, (icu::UnicodeString *)&v29, a5);
  icu::Formattable::~Formattable((icu::Formattable *)v28);
  if ((v30 & 0x8000u) == 0)
    v26 = (unsigned __int16)v30 >> 5;
  else
    v26 = DWORD1(v30);
  icu::UnicodeString::doReplace((icu::UnicodeString *)a2, *(_DWORD *)(a1 + 8) + a3, 0, (const icu::UnicodeString *)&v29, 0, v26);
  return icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v29);
}

uint64_t sub_18BD08310(uint64_t a1, UChar **a2, uint64_t a3, double a4, double a5, uint64_t a6, uint64_t a7, icu::Formattable *a8)
{
  int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  _WORD *v19;
  int v20;
  uint64_t v22;
  __int16 v23;
  void *v24;
  int Long;
  uint64_t v26;
  unsigned int v27;
  void (**v29)(icu::ParsePosition *__hidden);
  unint64_t v30;
  UErrorCode v31;
  _OWORD v32[7];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v31 = U_ZERO_ERROR;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v33, a2);
  if (*(_BYTE *)(a1 + 48))
  {
    v29 = off_1E224A8B0;
    v30 = 0xFFFFFFFF00000001;
    memset(v32, 0, sizeof(v32));
    icu::Formattable::Formattable((icu::Formattable *)v32);
    v15 = WORD4(v33) >> 5;
    if (SWORD4(v33) < 0)
      v15 = HIDWORD(v33);
    if (v15 < 1)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      do
      {
        LODWORD(v30) = 0;
        sub_18BD029C8(*(_QWORD *)(a1 + 16), (uint64_t)&v33, (uint64_t)&v29, a7, (icu::Formattable *)v32, 0, 1.0);
        v17 = v30;
        if (!(_DWORD)v30)
          break;
        *(_DWORD *)(a3 + 8) += v30;
        if ((_DWORD)v17 == 0x7FFFFFFF)
        {
          v18 = (BYTE8(v33) & 1) != 0 ? 2 : BYTE8(v33) & 0x1F;
          WORD4(v33) = v18;
        }
        else
        {
          icu::UnicodeString::doReplace((uint64_t)&v33, 0, v17, 0, 0, 0);
        }
        ++v16;
        while (1)
        {
          if (SWORD4(v33) < 0)
          {
            if (*((uint64_t *)&v33 + 1) <= 0)
              break;
          }
          else if (WORD4(v33) < 0x20u)
          {
            break;
          }
          v19 = (_WORD *)*((_QWORD *)&v34 + 1);
          if ((BYTE8(v33) & 2) != 0)
            v19 = (_WORD *)((unint64_t)&v33 | 0xA);
          if (*v19 != 32)
            break;
          icu::UnicodeString::doReplace((uint64_t)&v33, 0, 1, 0, 0, 0);
          ++*(_DWORD *)(a3 + 8);
        }
        v20 = WORD4(v33) >> 5;
        if (SWORD4(v33) < 0)
          v20 = HIDWORD(v33);
      }
      while (v20 >= 1 && (_DWORD)v30 != 0);
    }
    icu::UnicodeString::operator=((UChar **)&v33, a2);
    v22 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v22 == 0x7FFFFFFF)
    {
      if ((BYTE8(v33) & 1) != 0)
        v23 = 2;
      else
        v23 = BYTE8(v33) & 0x1F;
      WORD4(v33) = v23;
    }
    else
    {
      icu::UnicodeString::doReplace((uint64_t)&v33, 0, v22, 0, 0, 0);
    }
    *(_DWORD *)(a3 + 8) = 0;
    icu::Formattable::~Formattable((icu::Formattable *)v32);
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v29);
    if (*(_BYTE *)(a1 + 48))
      a4 = 1.0;
  }
  else
  {
    v16 = 0;
  }
  sub_18BD073A0((_QWORD *)a1, (uint64_t)&v33, a3, 0, a7, a8, a4, a5);
  v24 = (void *)*(unsigned __int8 *)(a1 + 48);
  if (*(_BYTE *)(a1 + 48))
  {
    Long = icu::Formattable::getLong(a8, &v31);
    v26 = 1;
    if (Long >= 1)
    {
      do
        v26 *= 10;
      while (v26 <= Long);
    }
    if (v16 >= 1)
    {
      v27 = v16 + 1;
      do
      {
        v26 *= 10;
        --v27;
      }
      while (v27 > 1);
    }
    icu::Formattable::setDouble(a8, (double)Long / (double)v26);
  }
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v33);
  return 1;
}

uint64_t sub_18BD08650(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_18BD06D78(a1, a2);
  if ((_DWORD)result)
    return *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return result;
}

void *sub_18BD08688()
{
  return &unk_1EE009C0B;
}

uint64_t sub_18BD08694(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_18BD086A8()
{
  return 61;
}

uint64_t sub_18BD086B0(uint64_t a1, uint64_t a2, unsigned __int16 a3, _DWORD *a4)
{
  uint64_t result;

  result = sub_18BD02FE0(a2, a3);
  *(_QWORD *)(a1 + 32) = result;
  if (!result)
    *a4 = 9;
  return result;
}

uint64_t sub_18BD086F0(uint64_t a1, uint64_t a2)
{
  return a2 / *(_QWORD *)(a1 + 32);
}

double sub_18BD086FC(_QWORD *a1, double a2)
{
  icu::NumberFormat *v5;

  if (!a1[2]
    && (v5 = (icu::NumberFormat *)a1[3]) != 0
    && icu::NumberFormat::getMaximumFractionDigits(v5))
  {
    return a2 / (double)(uint64_t)a1[4];
  }
  else
  {
    return uprv_floor(a2 / (double)(uint64_t)a1[4]);
  }
}

double sub_18BD08764(uint64_t a1, double a2)
{
  return (double)*(uint64_t *)(a1 + 32) * a2;
}

double sub_18BD08774(uint64_t a1)
{
  return (double)*(uint64_t *)(a1 + 32);
}

uint64_t sub_18BD08780()
{
  return 60;
}

uint64_t sub_18BD08788(uint64_t a1, uint64_t a2, unsigned __int16 a3, _DWORD *a4)
{
  uint64_t result;

  result = sub_18BD02FE0(a2, a3);
  *(_QWORD *)(a1 + 32) = result;
  if (!result)
    *a4 = 9;
  return result;
}

uint64_t sub_18BD087C8(uint64_t a1, uint64_t a2)
{
  return a2 % *(_QWORD *)(a1 + 32);
}

double sub_18BD087D8(uint64_t a1, long double a2)
{
  return uprv_fmod(a2, (double)*(uint64_t *)(a1 + 32));
}

long double sub_18BD087E4(uint64_t a1, double a2, long double a3)
{
  return a3 - uprv_fmod(a3, (double)*(uint64_t *)(a1 + 32)) + a2;
}

double sub_18BD0881C(uint64_t a1)
{
  return (double)*(uint64_t *)(a1 + 32);
}

uint64_t sub_18BD08828()
{
  return 62;
}

uint64_t sub_18BD08830()
{
  return 1;
}

uint64_t sub_18BD08838(uint64_t a1, uint64_t a2)
{
  return a2;
}

double sub_18BD08844(double a1, double a2)
{
  return a1 + a2;
}

double sub_18BD0884C()
{
  return 1.79769313e308;
}

uint64_t sub_18BD08858()
{
  return 60;
}

uint64_t sub_18BD08864()
{
  return 0;
}

double sub_18BD0886C(double a1)
{
  return a1 - uprv_floor(a1);
}

double sub_18BD08890(double a1, double a2)
{
  return a1 + a2;
}

double sub_18BD08898()
{
  return 0.0;
}

uint64_t sub_18BD088A0()
{
  return 62;
}

uint64_t sub_18BD088A8(uint64_t a1, uint64_t a2)
{
  if (a2 >= 0)
    return a2;
  else
    return -a2;
}

double sub_18BD088B8(double a1)
{
  return -a1;
}

double sub_18BD088C0()
{
  return 1.79769313e308;
}

uint64_t sub_18BD088CC()
{
  return 62;
}

uint64_t sub_18BD088D8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 40) * a2;
}

double sub_18BD088E4(uint64_t a1, double a2)
{
  return uprv_round(*(double *)(a1 + 32) * a2);
}

double sub_18BD088F0(double a1, double a2)
{
  return a1 / a2;
}

double sub_18BD088F8(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t sub_18BD08900()
{
  return 60;
}

uint64_t sub_18BD08908(uint64_t a1, int a2, uint64_t a3, uint64_t a4, UErrorCode *a5, double a6)
{
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  void *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  _OWORD v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v12 = *(unsigned __int16 *)(a4 + 8);
  v13 = (__int16)v12;
  v14 = v12 >> 5;
  if (v13 < 0)
    v14 = *(_DWORD *)(a4 + 12);
  if (icu::UnicodeString::doEqualsSubstring(a4, v14 - 2, 2, (uint64_t)"<", 0, 2))
  {
    memset(v23, 0, sizeof(v23));
    v15 = *(unsigned __int16 *)(a4 + 8);
    v16 = (__int16)v15;
    v17 = v15 >> 5;
    if (v16 < 0)
      v17 = *(_DWORD *)(a4 + 12);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v23, (const icu::UnicodeString *)a4, 0, v17 - 1);
  }
  else
  {
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v23, (UChar **)a4);
  }
  sub_18BD06AC8(a1, a2, a3, (UChar **)v23, a5);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v23);
  *(_QWORD *)a1 = off_1E2262680;
  *(double *)(a1 + 32) = a6;
  *(_QWORD *)(a1 + 40) = sub_18BD02968(a6);
  v19 = *(unsigned __int16 *)(a4 + 8);
  v20 = (__int16)v19;
  v21 = v19 >> 5;
  if (v20 < 0)
    v21 = *(_DWORD *)(a4 + 12);
  *(_BYTE *)(a1 + 48) = icu::UnicodeString::doEqualsSubstring(a4, v21 - 2, 2, (uint64_t)"<", 0, 2);
  return a1;
}

uint64_t sub_18BD08A94(uint64_t a1, int a2, uint64_t a3, uint64_t a4, UChar **a5, UErrorCode *a6)
{
  uint64_t v9;

  *(_QWORD *)sub_18BD06AC8(a1, a2, a4, a5, a6) = off_1E2262458;
  v9 = sub_18BD04A84(a3);
  *(_QWORD *)(a1 + 32) = v9;
  if (!v9)
    *a6 = U_PARSE_ERROR;
  return a1;
}

void *icu::NormalizationTransliterator::getStaticClassID(icu::NormalizationTransliterator *this)
{
  return &unk_1EE009C0C;
}

void *sub_18BD08B04()
{
  return &unk_1EE009C0C;
}

void *sub_18BD08B10()
{
  unint64_t v0;
  void *v1;
  void *v2;
  unint64_t v3;
  void *v4;
  void *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[7];
  const __int16 *v30;
  const __int16 *v31;
  const __int16 *v32;
  const __int16 *v33;
  const char *v34;
  const __int16 *v35;
  const __int16 *v36;
  const __int16 *v37;
  const __int16 *v38;
  const __int16 *v39;
  const char *v40;
  const char *v41;
  const __int16 *v42;
  const __int16 *v43;
  _BYTE v44[64];
  _BYTE v45[64];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v43 = L"Any-NFC";
  v0 = icu::UnicodeString::UnicodeString(v45, 1, &v43);
  icu::Transliterator::_registerFactory(v0, (uint64_t)sub_18BD08EA8, (uint64_t)"nfc");
  v2 = icu::UnicodeString::~UnicodeString(v1, (icu::UnicodeString *)v45);
  v29[6] = v43;
  v42 = L"Any-NFKC";
  v3 = icu::UnicodeString::UnicodeString(v2, 1, &v42);
  icu::Transliterator::_registerFactory(v3, (uint64_t)sub_18BD08EA8, (uint64_t)"nfkc");
  v5 = icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)v45);
  v29[5] = v42;
  v41 = "A";
  v6 = icu::UnicodeString::UnicodeString(v5, 1, &v41);
  icu::Transliterator::_registerFactory(v6, (uint64_t)sub_18BD08EA8, (uint64_t)"nfc");
  v8 = icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v45);
  v29[4] = v41;
  v40 = "A";
  v9 = icu::UnicodeString::UnicodeString(v8, 1, &v40);
  icu::Transliterator::_registerFactory(v9, (uint64_t)sub_18BD08EA8, (uint64_t)"nfkc");
  v11 = icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v45);
  v29[3] = v40;
  v39 = L"Any-FCD";
  v12 = icu::UnicodeString::UnicodeString(v11, 1, &v39);
  icu::Transliterator::_registerFactory(v12, (uint64_t)sub_18BD08EA8, (uint64_t)&unk_18BE284AC);
  v14 = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v45);
  v29[2] = v39;
  v38 = L"Any-FCC";
  v15 = icu::UnicodeString::UnicodeString(v14, 1, &v38);
  icu::Transliterator::_registerFactory(v15, (uint64_t)sub_18BD08EA8, (uint64_t)&unk_18BE284B2);
  v17 = icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v45);
  v29[1] = v38;
  v37 = L"NFC";
  icu::UnicodeString::UnicodeString(v17, 1, &v37);
  v36 = L"NFD";
  icu::UnicodeString::UnicodeString(v44, 1, &v36);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v45, (const icu::UnicodeString *)v44, (const icu::UnicodeString *)1);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v44);
  v29[0] = v36;
  v19 = icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v45);
  v28[1] = v37;
  v35 = L"NFKC";
  icu::UnicodeString::UnicodeString(v19, 1, &v35);
  v34 = "N";
  icu::UnicodeString::UnicodeString(v44, 1, &v34);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v45, (const icu::UnicodeString *)v44, (const icu::UnicodeString *)1);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v44);
  v28[0] = v34;
  v21 = icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v45);
  v27[1] = v35;
  v33 = L"FCC";
  icu::UnicodeString::UnicodeString(v21, 1, &v33);
  v32 = L"NFD";
  icu::UnicodeString::UnicodeString(v44, 1, &v32);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v45, (const icu::UnicodeString *)v44, 0);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v44);
  v27[0] = v32;
  v23 = icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v45);
  v26[1] = v33;
  v31 = L"FCD";
  icu::UnicodeString::UnicodeString(v23, 1, &v31);
  v30 = L"FCD";
  icu::UnicodeString::UnicodeString(v44, 1, &v30);
  icu::Transliterator::_registerSpecialInverse((icu::Transliterator *)v45, (const icu::UnicodeString *)v44, 0);
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v44);
  v26[0] = v30;
  return icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v45);
}

icu::Transliterator *sub_18BD08EA8(UChar **a1, char *__s)
{
  int v4;
  unint64_t v5;
  uint64_t Instance;
  icu::Transliterator *result;
  unsigned int v8;

  v4 = __s[strlen(__s) + 1];
  v8 = 0;
  Instance = icu::Normalizer2::getInstance(0, __s, v4, (int *)&v8);
  result = 0;
  if ((int)v8 <= 0)
  {
    result = (icu::Transliterator *)icu::UMemory::operator new((uint64_t *)v8, (icu::UMemory *)0x60, v5);
    if (result)
    {
      result = icu::Transliterator::Transliterator(result, a1, 0);
      *(_QWORD *)result = &off_1E2262728;
      *((_QWORD *)result + 11) = Instance;
    }
  }
  return result;
}

void sub_18BD08F34(icu::Transliterator *a1)
{
  void *v1;

  icu::Transliterator::~Transliterator(a1);
  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18BD08F48@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  icu::Transliterator *result;

  result = (icu::Transliterator *)icu::UMemory::operator new(a3, (icu::UMemory *)0x60, a2);
  if (result)
  {
    result = icu::Transliterator::Transliterator(result, (UChar **)a1);
    *(_QWORD *)result = &off_1E2262728;
    *((_QWORD *)result + 11) = *(_QWORD *)(a1 + 88);
  }
  return result;
}

_QWORD *sub_18BD08F8C(_QWORD *result, uint64_t a2, _DWORD *a3, int a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  void *v20;
  int v21;
  void (**v22)(icu::UnicodeString *__hidden);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void (**v27)(icu::UnicodeString *__hidden);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3[2];
  v5 = a3[3];
  if ((int)v4 >= v5)
    return result;
  v9 = result;
  v21 = 0;
  v28 = 0u;
  v29 = 0u;
  v31 = 0;
  v30 = 0u;
  v26 = 0;
  v27 = off_1E2256B38;
  LOWORD(v28) = 2;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = off_1E2256B38;
  LOWORD(v23) = 2;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v4);
  LODWORD(v11) = v4;
  while (1)
  {
    v12 = (v28 & 1) != 0 ? 2 : v28 & 0x1F;
    LOWORD(v28) = v12;
    do
    {
      icu::UnicodeString::append((uint64_t)&v27, v10);
      if (v10 < 0x10000)
        v13 = 1;
      else
        v13 = 2;
      v11 = (v13 + v11);
      if ((int)v11 >= v5)
        break;
      v14 = v9[11];
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v11);
    }
    while (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 120))(v14, v10));
    if (a4
      && (_DWORD)v11 == v5
      && !(*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)v9[11] + 128))(v9[11], v10))
    {
      break;
    }
    (*(void (**)(_QWORD, void (***)(icu::UnicodeString *__hidden), void (***)(icu::UnicodeString *__hidden), int *))(*(_QWORD *)v9[11] + 24))(v9[11], &v27, &v22, &v21);
    if (v21 > 0)
      goto LABEL_34;
    if ((v28 & 1) == 0)
    {
      if ((v28 & 0x8000u) == 0)
        v15 = (unsigned __int16)v28 >> 5;
      else
        v15 = DWORD1(v28);
      if ((v23 & 0x8000u) == 0)
        v16 = (unsigned __int16)v23 >> 5;
      else
        v16 = DWORD1(v23);
      if ((v23 & 1) == 0
        && v15 == v16
        && icu::UnicodeString::doEquals((icu::UnicodeString *)&v27, (const icu::UnicodeString *)&v22, v15))
      {
        goto LABEL_31;
      }
LABEL_28:
      (*(void (**)(uint64_t, uint64_t, uint64_t, void (***)(icu::UnicodeString *__hidden)))(*(_QWORD *)a2 + 32))(a2, v4, v11, &v22);
      v17 = (unsigned __int16)v23 >> 5;
      if ((v23 & 0x8000u) != 0)
        v17 = DWORD1(v23);
      v18 = v4 + v5 - v11;
      v11 = (v17 + v4);
      v5 = v18 + v17;
      goto LABEL_31;
    }
    if ((v23 & 1) == 0)
      goto LABEL_28;
LABEL_31:
    v4 = v11;
    if ((int)v11 >= v5)
      goto LABEL_34;
  }
  LODWORD(v11) = v4;
LABEL_34:
  v19 = (v5 - a3[3] + a3[1]);
  a3[1] = v19;
  a3[2] = v11;
  a3[3] = v5;
  icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v22);
  return icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v27);
}

void *icu::NullTransliterator::getStaticClassID(icu::NullTransliterator *this)
{
  return &unk_1EE009C0D;
}

void *sub_18BD09210()
{
  return &unk_1EE009C0D;
}

icu::Transliterator *sub_18BD0921C(icu::Transliterator *a1)
{
  void *v2;
  const __int16 *v4;
  UChar *v5[9];

  v5[8] = *(UChar **)MEMORY[0x1E0C80C00];
  v4 = L"Any-Null";
  icu::UnicodeString::UnicodeString(v5, 1, &v4);
  icu::Transliterator::Transliterator(a1, v5, 0);
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)v5);
  *(_QWORD *)a1 = &off_1E22627D8;
  return a1;
}

void sub_18BD092C8(icu::Transliterator *a1)
{
  void *v1;

  icu::Transliterator::~Transliterator(a1);
  icu::UMemory::operator delete(v1);
}

icu::Transliterator *sub_18BD092DC@<X0>(unint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  icu::Transliterator *result;

  result = (icu::Transliterator *)icu::UMemory::operator new(a2, (icu::UMemory *)0x58, a1);
  if (result)
    return sub_18BD0921C(result);
  return result;
}

void sub_18BD092FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a3 + 12);
}

uint64_t icu::number::impl::AffixUtils::estimateLength(icu::number::impl::AffixUtils *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v3;
  int v4;
  unint64_t v5;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  unsigned int v14;
  int v15;

  v3 = *((unsigned __int16 *)this + 4);
  v4 = (__int16)v3;
  LODWORD(v5) = v3 >> 5;
  if (v4 >= 0)
    v5 = v5;
  else
    v5 = *((unsigned int *)this + 3);
  if ((int)v5 < 1)
    return 0;
  LODWORD(v8) = 0;
  v9 = 0;
  v10 = 0;
  while (2)
  {
    v11 = icu::UnicodeString::char32At((uint64_t *)v5, this, v9);
    switch(v10)
    {
      case 0:
        v10 = v11 == 39;
        v12 = v11 != 39;
        goto LABEL_16;
      case 1:
        v10 = 2 * (v11 != 39);
        goto LABEL_15;
      case 2:
        v12 = v11 != 39;
        if (v11 == 39)
          v10 = 3;
        else
          v10 = 2;
        goto LABEL_16;
      case 3:
        if (v11 == 39)
          v10 = 2;
        else
          v10 = 3;
LABEL_15:
        v12 = 1;
LABEL_16:
        v8 = (v8 + v12);
        if (v11 < 0x10000)
          v13 = 1;
        else
          v13 = 2;
        v9 += v13;
        v14 = *((unsigned __int16 *)this + 4);
        v15 = (__int16)v14;
        LODWORD(v5) = v14 >> 5;
        if (v15 >= 0)
          v5 = v5;
        else
          v5 = *((unsigned int *)this + 3);
        if (v9 < (int)v5)
          continue;
        if ((v10 - 1) <= 1)
          *(_DWORD *)a2 = 1;
        break;
      default:
        abort();
    }
    return v8;
  }
}

uint64_t icu::number::impl::AffixUtils::escape@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;

  v3 = a2;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  v4 = *(unsigned __int16 *)(this + 8);
  v5 = (__int16)v4;
  LODWORD(a2) = v4 >> 5;
  if (v5 >= 0)
    a2 = a2;
  else
    a2 = *(unsigned int *)(this + 12);
  if ((int)a2 >= 1)
  {
    v6 = this;
    v7 = 0;
    v8 = 0;
    while (2)
    {
      v9 = icu::UnicodeString::char32At((uint64_t *)a2, (icu::UnicodeString *)v6, v7);
      v10 = v9;
      switch(v9)
      {
        case '%':
        case '+':
        case '-':
          goto LABEL_10;
        case '&':
        case '(':
        case ')':
        case '*':
        case ',':
          goto LABEL_12;
        case '\'':
          this = icu::UnicodeString::doAppend(v3, (uint64_t)"'", 0, 0xFFFFFFFFLL);
          goto LABEL_14;
        default:
          if (v9 == 164 || v9 == 8240)
          {
LABEL_10:
            if (!v8)
            {
              v14 = 39;
              icu::UnicodeString::doAppend(v3, (uint64_t)&v14, 0, 1);
              this = icu::UnicodeString::append(v3, v10);
              v8 = 2;
              goto LABEL_14;
            }
LABEL_13:
            this = icu::UnicodeString::append(v3, v9);
            goto LABEL_14;
          }
LABEL_12:
          if (v8 != 2)
            goto LABEL_13;
          v15 = 39;
          icu::UnicodeString::doAppend(v3, (uint64_t)&v15, 0, 1);
          this = icu::UnicodeString::append(v3, v10);
          v8 = 0;
LABEL_14:
          if (v10 < 0x10000)
            v11 = 1;
          else
            v11 = 2;
          v7 += v11;
          v12 = *(unsigned __int16 *)(v6 + 8);
          v13 = (__int16)v12;
          LODWORD(a2) = v12 >> 5;
          if (v13 >= 0)
            a2 = a2;
          else
            a2 = *(unsigned int *)(v6 + 12);
          if (v7 < (int)a2)
            continue;
          if (v8 == 2)
          {
            v16 = 39;
            this = icu::UnicodeString::doAppend(v3, (uint64_t)&v16, 0, 1);
          }
          break;
      }
      break;
    }
  }
  return this;
}

uint64_t icu::number::impl::AffixUtils::getFieldForType(unsigned int a1)
{
  if (a1 <= 0xFFFFFFF0 || ((0x7FE1u >> (a1 + 15)) & 1) == 0)
    abort();
  return byte_18BE2855D[a1 + 15];
}

uint64_t icu::number::impl::AffixUtils::unescape(icu::UnicodeString *a1, icu::FormattedStringBuilder *a2, int a3, uint64_t a4, char a5, UErrorCode *a6)
{
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t Token;
  unint64_t v16;
  unint64_t v17;
  int v18;
  icu::FormattedStringBuilder *v19;
  unint64_t v20;
  char v21;
  int inserted;
  char FieldForType;
  void *v24;
  char v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[9];

  v29[8] = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = 0;
  v12 = 0;
  if (icu::number::impl::AffixUtils::hasNext((unsigned int *)&v27, (uint64_t)a1))
  {
    v26 = a5;
    v13 = v27;
    v14 = v28;
    do
    {
      Token = icu::number::impl::AffixUtils::nextToken(v13, v14, a1, a6);
      v27 = Token;
      v28 = v16;
      if (*(int *)a6 > 0)
        return v12;
      v13 = Token;
      v14 = v16;
      v17 = HIDWORD(v16);
      if (HIDWORD(v16) == -15)
      {
        v18 = v12 + a3;
        v19 = a2;
        LODWORD(v20) = 65533;
        v21 = 39;
      }
      else
      {
        if ((v16 & 0x8000000000000000) != 0)
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a4 + 16))(v29, a4, HIDWORD(v16));
          FieldForType = icu::number::impl::AffixUtils::getFieldForType(v17);
          inserted = icu::FormattedStringBuilder::insert(a2, (int)v12 + a3, (uint64_t)v29, FieldForType, 0, a6);
          icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)v29);
          goto LABEL_9;
        }
        v20 = HIDWORD(Token);
        v19 = a2;
        v18 = v12 + a3;
        v21 = v26;
      }
      inserted = icu::FormattedStringBuilder::insertCodePoint(v19, v18, v20, v21, a6);
LABEL_9:
      v12 = (inserted + v12);
    }
    while ((icu::number::impl::AffixUtils::hasNext((unsigned int *)&v27, (uint64_t)a1) & 1) != 0);
  }
  return v12;
}

uint64_t icu::number::impl::AffixUtils::hasNext(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  signed int v8;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;

  v2 = *a1;
  if ((v2 & 0x80000000) != 0)
    return 0;
  if ((_DWORD)v2)
  {
    v3 = a1[2];
    if (v3)
    {
      if (v3 == 2)
      {
        v4 = *(unsigned __int16 *)(a2 + 8);
        v5 = *(__int16 *)(a2 + 8) < 0 ? *(_DWORD *)(a2 + 12) : v4 >> 5;
        if ((_DWORD)v2 == v5 - 1 && v5 > v2)
        {
          v13 = (v4 & 2) != 0 ? a2 + 10 : *(_QWORD *)(a2 + 24);
          if (*(_WORD *)(v13 + 2 * v2) == 39)
            return 0;
        }
      }
      return 1;
    }
    else
    {
      v10 = *(unsigned __int16 *)(a2 + 8);
      v11 = (__int16)v10;
      v12 = v10 >> 5;
      if (v11 < 0)
        v12 = *(_DWORD *)(a2 + 12);
      return (int)v2 < v12;
    }
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 8);
    v7 = (__int16)v6;
    v8 = v6 >> 5;
    if (v7 < 0)
      v8 = *(_DWORD *)(a2 + 12);
    return v8 > 0;
  }
}

unint64_t icu::number::impl::AffixUtils::nextToken(uint64_t a1, int a2, icu::UnicodeString *this, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;

  v6 = a1;
  v7 = *((unsigned __int16 *)this + 4);
  v8 = (__int16)v7;
  LODWORD(v9) = v7 >> 5;
  if (v8 >= 0)
    v9 = v9;
  else
    v9 = *((unsigned int *)this + 3);
  if ((int)v9 <= (int)a1)
  {
LABEL_35:
    v14 = -1;
    switch(a2)
    {
      case 0:
      case 3:
        return v14 | (unint64_t)(a1 << 32);
      case 1:
      case 2:
        *a4 = 1;
        v14 = -1;
        return v14 | (unint64_t)(a1 << 32);
      case 4:
        a1 = 0;
        goto LABEL_43;
      case 5:
        goto LABEL_37;
      case 6:
        goto LABEL_38;
      case 7:
        goto LABEL_39;
      case 8:
        goto LABEL_40;
      case 9:
        goto LABEL_41;
      default:
        goto LABEL_57;
    }
  }
  while (1)
  {
    a1 = (uint64_t)icu::UnicodeString::char32At((uint64_t *)v9, this, v6);
    if (a1 < 0x10000)
      v11 = 1;
    else
      v11 = 2;
    switch(a2)
    {
      case 0:
        if ((int)a1 <= 125)
        {
          switch((int)a1)
          {
            case '%':
              a1 = 0;
              v14 = v11 + v6;
              return v14 | (unint64_t)(a1 << 32);
            case '\'':
              v6 += v11;
              a2 = 1;
              goto LABEL_28;
            case '+':
              a1 = 0;
              v14 = v11 + v6;
              return v14 | (unint64_t)(a1 << 32);
            case '-':
              a1 = 0;
              v14 = v11 + v6;
              return v14 | (unint64_t)(a1 << 32);
            default:
              goto LABEL_56;
          }
        }
        switch((_DWORD)a1)
        {
          case 0xA4:
            v6 += v11;
            a2 = 4;
            goto LABEL_28;
          case 0x7E:
            a1 = 0;
            v14 = v11 + v6;
            break;
          case 0x2030:
            a1 = 0;
            v14 = v11 + v6;
            break;
          default:
LABEL_56:
            v14 = v11 + v6;
            break;
        }
        return v14 | (unint64_t)(a1 << 32);
      case 1:
        v14 = v11 + v6;
        return v14 | (unint64_t)(a1 << 32);
      case 2:
        v6 += v11;
        if ((_DWORD)a1 != 39)
          goto LABEL_43;
        a2 = 3;
        break;
      case 3:
        if ((_DWORD)a1 == 39)
        {
          v14 = v11 + v6;
          a1 = 39;
          return v14 | (unint64_t)(a1 << 32);
        }
        a2 = 0;
        break;
      case 4:
        if ((_DWORD)a1 != 164)
        {
          a1 = 0;
          goto LABEL_43;
        }
        v6 += v11;
        a2 = 5;
        break;
      case 5:
        if ((_DWORD)a1 != 164)
        {
LABEL_37:
          a1 = 0;
LABEL_43:
          v14 = v6;
          return v14 | (unint64_t)(a1 << 32);
        }
        v6 += v11;
        a2 = 6;
        break;
      case 6:
        if ((_DWORD)a1 != 164)
        {
LABEL_38:
          a1 = 0;
          goto LABEL_43;
        }
        v6 += v11;
        a2 = 7;
        break;
      case 7:
        if ((_DWORD)a1 != 164)
        {
LABEL_39:
          a1 = 0;
          goto LABEL_43;
        }
        v6 += v11;
        a2 = 8;
        break;
      case 8:
        if ((_DWORD)a1 == 164)
          goto LABEL_27;
LABEL_40:
        a1 = 0;
        goto LABEL_43;
      case 9:
        if ((_DWORD)a1 != 164)
        {
LABEL_41:
          a1 = 0;
          goto LABEL_43;
        }
LABEL_27:
        v6 += v11;
        a2 = 9;
        break;
      default:
LABEL_57:
        abort();
    }
LABEL_28:
    v12 = *((unsigned __int16 *)this + 4);
    v13 = (__int16)v12;
    LODWORD(v9) = v12 >> 5;
    if (v13 >= 0)
      v9 = v9;
    else
      v9 = *((unsigned int *)this + 3);
    if (v6 >= (int)v9)
      goto LABEL_35;
  }
}

uint64_t icu::number::impl::AffixUtils::unescapedCodePointCount(icu::number::impl::AffixUtils *this, const icu::UnicodeString *a2, const icu::number::impl::SymbolProvider *a3, UErrorCode *a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t Token;
  uint64_t v11;
  int v12;
  void *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  v16 = 0;
  v7 = 0;
  if (icu::number::impl::AffixUtils::hasNext((unsigned int *)&v15, (uint64_t)this))
  {
    v8 = v15;
    v9 = v16;
    do
    {
      Token = icu::number::impl::AffixUtils::nextToken(v8, v9, this, a3);
      v15 = Token;
      v16 = v11;
      if (*(int *)a3 > 0)
        break;
      v8 = Token;
      v9 = v11;
      if (HIDWORD(v11) == -15)
      {
        v7 = (v7 + 1);
      }
      else if (v11 < 0)
      {
        (*(void (**)(uint64_t *__return_ptr, const icu::UnicodeString *))(*(_QWORD *)a2 + 16))(&v17, a2);
        LODWORD(v13) = v18 >> 5;
        v13 = (v18 & 0x8000u) == 0 ? (void *)v13 : (void *)v19;
        v7 = ((_DWORD)v13 + v7);
        icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17);
      }
      else
      {
        v12 = HIWORD(Token) ? 2 : 1;
        v7 = (v12 + v7);
      }
    }
    while ((icu::number::impl::AffixUtils::hasNext((unsigned int *)&v15, (uint64_t)this) & 1) != 0);
  }
  return v7;
}

uint64_t icu::number::impl::AffixUtils::containsType(uint64_t a1, int a2, int *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v9;
  uint64_t v10;
  uint64_t result;
  unint64_t Token;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 < 0)
    v5 = *(_DWORD *)(a1 + 12);
  if (!v5)
    return 0;
  v9 = 0;
  v10 = 0;
  v14 = 0;
  v15 = 0;
  while (1)
  {
    result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v14, a1);
    if (!(_DWORD)result)
      break;
    Token = icu::number::impl::AffixUtils::nextToken(v10, v9, (icu::UnicodeString *)a1, a3);
    v14 = Token;
    v15 = v13;
    if (*a3 > 0)
      return 0;
    v10 = Token;
    v9 = v13;
    if (HIDWORD(v13) == a2)
      return 1;
  }
  return result;
}

uint64_t icu::number::impl::AffixUtils::hasCurrencySymbols(icu::number::impl::AffixUtils *this, const icu::UnicodeString *a2, UErrorCode *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v9;
  int v10;
  unint64_t Token;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v3 = *((unsigned __int16 *)this + 4);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 < 0)
    v5 = *((_DWORD *)this + 3);
  if (v5)
  {
    v13 = 0;
    v14 = 0;
    result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v13, (uint64_t)this);
    if (!(_DWORD)result)
      return result;
    v9 = v13;
    v10 = v14;
    do
    {
      Token = icu::number::impl::AffixUtils::nextToken(v9, v10, this, a2);
      v13 = Token;
      v14 = v12;
      if (*(int *)a2 > 0)
        break;
      v9 = Token;
      v10 = v12;
      if (v12 < 0 && icu::number::impl::AffixUtils::getFieldForType(HIDWORD(v12)) == 39)
        return 1;
    }
    while ((icu::number::impl::AffixUtils::hasNext((unsigned int *)&v13, (uint64_t)this) & 1) != 0);
  }
  return 0;
}

uint64_t icu::number::impl::AffixUtils::replaceType@<X0>(UChar **a1@<X0>, int a2@<W1>, __int16 a3@<W2>, int *a4@<X3>, icu::UnicodeString *a5@<X8>)
{
  uint64_t result;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  *((_OWORD *)a5 + 2) = 0u;
  *((_OWORD *)a5 + 3) = 0u;
  *(_OWORD *)a5 = 0u;
  *((_OWORD *)a5 + 1) = 0u;
  result = (uint64_t)icu::UnicodeString::UnicodeString(a5, a1);
  v11 = *((unsigned __int16 *)a1 + 4);
  v12 = (__int16)v11;
  v13 = v11 >> 5;
  if (v12 < 0)
    v13 = *((_DWORD *)a1 + 3);
  if (v13)
  {
    v17 = 0;
    v18 = 0;
    result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v17, (uint64_t)a1);
    if ((_DWORD)result)
    {
      v14 = v17;
      v15 = v18;
      do
      {
        result = icu::number::impl::AffixUtils::nextToken(v14, v15, (icu::UnicodeString *)a1, a4);
        v17 = result;
        v18 = v16;
        if (*a4 > 0)
          break;
        v14 = result;
        v15 = v16;
        if (HIDWORD(v16) == a2)
        {
          v19 = a3;
          icu::UnicodeString::doReplace((uint64_t)a5, (result - 1), 1, (uint64_t)&v19, 0, 1);
        }
        result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v17, (uint64_t)a1);
      }
      while ((result & 1) != 0);
    }
  }
  return result;
}

uint64_t icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables(icu::number::impl::AffixUtils *this, const icu::UnicodeString *a2, const icu::UnicodeSet *a3, UErrorCode *a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v10;
  int v11;
  unint64_t Token;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;

  v4 = *((unsigned __int16 *)this + 4);
  v5 = (__int16)v4;
  v6 = v4 >> 5;
  if (v5 < 0)
    v6 = *((_DWORD *)this + 3);
  if (!v6)
    return 1;
  v15 = 0;
  v16 = 0;
  if (!icu::number::impl::AffixUtils::hasNext((unsigned int *)&v15, (uint64_t)this))
    return 1;
  v10 = v15;
  v11 = v16;
  while (1)
  {
    Token = icu::number::impl::AffixUtils::nextToken(v10, v11, this, a3);
    v15 = Token;
    v16 = v13;
    if (*(int *)a3 > 0)
      break;
    v10 = Token;
    v11 = v13;
    if (!HIDWORD(v13))
    {
      result = icu::UnicodeSet::contains(a2, SHIDWORD(Token));
      if (!(_DWORD)result)
        return result;
    }
    if ((icu::number::impl::AffixUtils::hasNext((unsigned int *)&v15, (uint64_t)this) & 1) == 0)
      return 1;
  }
  return 0;
}

unint64_t icu::number::impl::AffixUtils::iterateWithConsumer(unint64_t result, uint64_t a2, int *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  icu::UnicodeString *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = *(unsigned __int16 *)(result + 8);
  v4 = (__int16)v3;
  v5 = v3 >> 5;
  if (v4 < 0)
    v5 = *(_DWORD *)(result + 12);
  if (v5)
  {
    v8 = (icu::UnicodeString *)result;
    v9 = 0;
    v10 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      result = icu::number::impl::AffixUtils::hasNext((unsigned int *)&v12, (uint64_t)v8);
      if (!(_DWORD)result)
        break;
      result = icu::number::impl::AffixUtils::nextToken(v10, v9, v8, a3);
      v12 = result;
      v13 = v11;
      if (*a3 > 0)
        break;
      v10 = result;
      v9 = v11;
      result = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, int *))(*(_QWORD *)a2 + 16))(a2, HIDWORD(v11), HIDWORD(result), a3);
    }
    while (*a3 < 1);
  }
  return result;
}

void *icu::number::impl::LocalizedNumberFormatterAsFormat::getStaticClassID(icu::number::impl::LocalizedNumberFormatterAsFormat *this)
{
  return &unk_1EE009C0E;
}

void *icu::number::impl::LocalizedNumberFormatterAsFormat::getDynamicClassID(icu::number::impl::LocalizedNumberFormatterAsFormat *this)
{
  return &unk_1EE009C0E;
}

icu::number::impl::LocalizedNumberFormatterAsFormat *icu::number::impl::LocalizedNumberFormatterAsFormat::LocalizedNumberFormatterAsFormat(icu::number::impl::LocalizedNumberFormatterAsFormat *this, const icu::number::LocalizedNumberFormatter *a2, const char **a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)icu::Format::Format((uint64_t)this);
  *v6 = off_1E22628D0;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v6 + 41), a2);
  icu::Locale::Locale((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 824), (uint64_t)a3);
  icu::Format::setLocaleIDs(this, a3[5], a3[5]);
  return this;
}

void icu::number::impl::LocalizedNumberFormatterAsFormat::~LocalizedNumberFormatterAsFormat(icu::number::impl::LocalizedNumberFormatterAsFormat *this)
{
  *(_QWORD *)this = off_1E22628D0;
  icu::Locale::~Locale((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 824));
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 328));
  icu::Format::~Format(this);
}

{
  void *v1;

  icu::number::impl::LocalizedNumberFormatterAsFormat::~LocalizedNumberFormatterAsFormat(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::number::impl::LocalizedNumberFormatterAsFormat::operator==(uint64_t a1, void *lpsrc)
{
  void *v3;
  void *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  void *v8;
  int v10;
  _BYTE v11[8];
  unsigned __int16 v12;
  unsigned int v13;
  _BYTE v14[8];
  unsigned __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!v3)
    return 0;
  v4 = v3;
  v10 = 0;
  icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton((UErrorCode *)&v10, a1 + 328, (uint64_t)v14);
  icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton((UErrorCode *)&v10, (uint64_t)v4 + 328, (uint64_t)v11);
  if ((v15 & 1) != 0)
  {
    v7 = v12;
    v5 = v12 & 1;
  }
  else
  {
    v5 = 0;
    if ((v15 & 0x8000u) == 0)
      v6 = v15 >> 5;
    else
      v6 = v16;
    if ((v12 & 0x8000u) == 0)
      v7 = v12 >> 5;
    else
      v7 = v13;
    if ((v12 & 1) == 0 && v6 == (_DWORD)v7)
      v5 = icu::UnicodeString::doEquals((icu::UnicodeString *)v14, (const icu::UnicodeString *)v11, v6);
  }
  icu::UnicodeString::~UnicodeString((void *)v7, (icu::UnicodeString *)v11);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v14);
  return v5;
}

uint64_t *icu::number::impl::LocalizedNumberFormatterAsFormat::clone@<X0>(icu::number::impl::LocalizedNumberFormatterAsFormat *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0x418, a2);
  v5 = v4;
  if (v4)
  {
    icu::Format::Format((uint64_t)v4, (uint64_t)this);
    *v5 = (uint64_t)off_1E22628D0;
    icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(v5 + 41), (icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 328));
    icu::Locale::Locale((icu::Locale *)(v5 + 103), (uint64_t)this + 824);
  }
  return v5;
}

icu::UnicodeString *icu::number::impl::LocalizedNumberFormatterAsFormat::format(icu::number::impl::LocalizedNumberFormatterAsFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned int v21;
  _OWORD v22[19];
  _OWORD v23[6];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v24 = 0;
    memset(v23, 0, sizeof(v23));
    memset(v22, 0, sizeof(v22));
    sub_18BCC2258((uint64_t)v22);
    icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v23, a5);
    if (*(int *)a5 > 0
      || (icu::number::LocalizedNumberFormatter::formatImpl((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 328), (icu::number::impl::UFormattedNumberData *)v22, a5), *(int *)a5 > 0))
    {
LABEL_16:
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v22);
      return a3;
    }
    *((_DWORD *)a4 + 3) = 0;
    *((_DWORD *)a4 + 4) = 0;
    if (icu::FormattedValueStringBuilderImpl::nextFieldPosition((icu::FormattedValueStringBuilderImpl *)v22, a4, a5))
    {
      if (*((__int16 *)a3 + 4) < 0)
      {
        v11 = *((_DWORD *)a3 + 3);
        if (v11)
          goto LABEL_9;
      }
      else
      {
        v10 = *((unsigned __int16 *)a3 + 4);
        if (v10 >= 0x20)
        {
          v11 = v10 >> 5;
LABEL_9:
          v12 = *((_DWORD *)a4 + 4);
          *((_DWORD *)a4 + 3) += v11;
          v13 = *((unsigned __int16 *)a3 + 4);
          v14 = (__int16)v13;
          v15 = v13 >> 5;
          if (v14 < 0)
            v15 = *((_DWORD *)a3 + 3);
          *((_DWORD *)a4 + 4) = v15 + v12;
        }
      }
    }
    icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)v22, (uint64_t)&v19);
    if ((v20 & 0x8000u) == 0)
      v16 = v20 >> 5;
    else
      v16 = v21;
    icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)&v19, 0, v16);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v19);
    goto LABEL_16;
  }
  return a3;
}

icu::UnicodeString *icu::number::impl::LocalizedNumberFormatterAsFormat::format(icu::number::impl::LocalizedNumberFormatterAsFormat *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  uint64_t v10;
  void *v11;
  _OWORD v13[2];
  uint64_t v14;
  _OWORD v15[19];
  _OWORD v16[6];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*(int *)a5 <= 0)
  {
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    sub_18BCC2258((uint64_t)v15);
    icu::Formattable::populateDecimalQuantity(a2, (icu::number::impl::DecimalQuantity *)v16, a5);
    if (*(int *)a5 <= 0)
    {
      icu::number::LocalizedNumberFormatter::formatImpl((icu::number::impl::LocalizedNumberFormatterAsFormat *)((char *)this + 328), (icu::number::impl::UFormattedNumberData *)v15, a5);
      if (*(int *)a5 <= 0)
      {
        icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)v15, (uint64_t)v13);
        if ((SWORD4(v13[0]) & 0x8000u) == 0)
          v10 = WORD4(v13[0]) >> 5;
        else
          v10 = HIDWORD(v13[0]);
        icu::UnicodeString::doAppend((uint64_t)a3, (const icu::UnicodeString *)v13, 0, v10);
        icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v13);
        if (a4)
        {
          v14 = 0;
          memset(v13, 0, sizeof(v13));
          icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v13, a4, a5);
          icu::FormattedValueStringBuilderImpl::getAllFieldPositions((icu::FormattedValueStringBuilderImpl *)v15, (icu::FieldPositionIteratorHandler *)v13, a5);
          icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v13);
        }
      }
    }
    icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)v15);
  }
  return a3;
}

void icu::number::impl::LocalizedNumberFormatterAsFormat::parseObject(icu::number::impl::LocalizedNumberFormatterAsFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  *((_DWORD *)a4 + 3) = 0;
}

uint64_t icu::number::impl::LocalizedNumberFormatterAsFormat::getNumberFormatter(icu::number::impl::LocalizedNumberFormatterAsFormat *this)
{
  return (uint64_t)this + 328;
}

icu::number::impl::LocalizedNumberFormatterAsFormat *icu::number::LocalizedNumberFormatter::toFormat(const char **this, UErrorCode *a2)
{
  uint64_t *v2;
  icu::number::impl::LocalizedNumberFormatterAsFormat *result;
  icu::number::impl::LocalizedNumberFormatterAsFormat *v6;

  v2 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v2 > 0)
    return 0;
  v6 = (icu::number::impl::LocalizedNumberFormatterAsFormat *)icu::UMemory::operator new(v2, (icu::UMemory *)0x418, (unint64_t)a2);
  if (v6)
    return icu::number::impl::LocalizedNumberFormatterAsFormat::LocalizedNumberFormatterAsFormat(v6, (const icu::number::LocalizedNumberFormatter *)this, this + 31);
  if (*(int *)a2 > 0)
    return 0;
  result = 0;
  *a2 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

uint64_t sub_18BD0A6EC(uint64_t a1, uint64_t a2)
{
  sub_18BD0BA90(a1, a2);
  icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(a1 + 304), a2 + 304);
  icu::MeasureUnit::operator=(a1 + 376, a2 + 376);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  return a1;
}

uint64_t *unumf_openResult(_DWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;

  v2 = (uint64_t *)*a1;
  if ((int)v2 > 0)
    return 0;
  v5 = icu::UMemory::operator new(v2, (icu::UMemory *)0x1C8, a2);
  v3 = v5;
  if (v5)
  {
    *(_DWORD *)v5 = 1430672896;
    v5[1] = 0;
    *((_DWORD *)v5 + 4) = 1178881536;
    v5[3] = (uint64_t)off_1E2263300;
    v5[4] = (uint64_t)(v5 + 6);
    *((_DWORD *)v5 + 10) = 0;
    sub_18BCC2258((uint64_t)(v5 + 6));
    v3[1] = (uint64_t)(v3 + 3);
  }
  else
  {
    *a1 = 7;
  }
  return v3;
}

uint64_t unumf_resultAsValue(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1178881536)
      goto LABEL_8;
    v2 = 3;
  }
  else
  {
    v2 = 1;
  }
  result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1)
    return 0;
  return result;
}

void unumf_closeResult(_DWORD *a1)
{
  if (a1)
  {
    if (a1[4] == 1178881536)
    {
      *((_QWORD *)a1 + 4) = 0;
      icu::number::impl::UFormattedNumberData::~UFormattedNumberData((icu::number::impl::UFormattedNumberData *)(a1 + 12));
      icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)(a1 + 6));
      a1[4] = 0;
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

uint64_t sub_18BD0A878(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0)
  {
    a1 = 0;
    goto LABEL_8;
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1178881536)
      goto LABEL_8;
    v2 = 3;
  }
  else
  {
    v2 = 1;
  }
  a1 = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1)
    return 0;
  else
    return a1 + 352;
}

uint64_t *unumf_openForSkeletonAndLocale(uint64_t a1, unint64_t a2, const char *a3, UErrorCode *a4)
{
  int v6;
  uint64_t *v8;
  uint64_t *v9;
  UChar **v10;
  uint64_t *v11;
  void *v12;
  uint64_t v14;
  _BYTE v15[224];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[496];
  _OWORD v25[4];
  uint64_t *v26;

  v6 = a2;
  v26 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v8 = icu::UMemory::operator new(v26, (icu::UMemory *)0x1F8, a2);
  v9 = v8;
  if (v8)
  {
    v8[62] = 0;
    *((_OWORD *)v8 + 29) = 0u;
    *((_OWORD *)v8 + 30) = 0u;
    *((_OWORD *)v8 + 27) = 0u;
    *((_OWORD *)v8 + 28) = 0u;
    *((_OWORD *)v8 + 25) = 0u;
    *((_OWORD *)v8 + 26) = 0u;
    *((_OWORD *)v8 + 23) = 0u;
    *((_OWORD *)v8 + 24) = 0u;
    *((_OWORD *)v8 + 21) = 0u;
    *((_OWORD *)v8 + 22) = 0u;
    *((_OWORD *)v8 + 19) = 0u;
    *((_OWORD *)v8 + 20) = 0u;
    *((_OWORD *)v8 + 17) = 0u;
    *((_OWORD *)v8 + 18) = 0u;
    *((_OWORD *)v8 + 15) = 0u;
    *((_OWORD *)v8 + 16) = 0u;
    *((_OWORD *)v8 + 13) = 0u;
    *((_OWORD *)v8 + 14) = 0u;
    *((_OWORD *)v8 + 11) = 0u;
    *((_OWORD *)v8 + 12) = 0u;
    *((_OWORD *)v8 + 9) = 0u;
    *((_OWORD *)v8 + 10) = 0u;
    *((_OWORD *)v8 + 7) = 0u;
    *((_OWORD *)v8 + 8) = 0u;
    *((_OWORD *)v8 + 5) = 0u;
    *((_OWORD *)v8 + 6) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    *(_DWORD *)v8 = 1313231360;
    *((_OWORD *)v8 + 2) = 0u;
    sub_18BCC1E68((uint64_t)(v8 + 1));
    v9[60] = 0;
    v9[61] = 0;
    v9[62] = 0;
    memset(v25, 0, sizeof(v25));
    v14 = a1;
    v10 = (UChar **)icu::UnicodeString::UnicodeString(v25, v6 == -1, &v14);
    icu::number::NumberFormatter::forSkeleton(v10, a4, &v16);
    icu::Locale::Locale(v11, (icu::Locale *)v15, a3, 0, 0, 0);
    icu::number::UnlocalizedNumberFormatter::locale((uint64_t)&v16, (uint64_t)v15, (uint64_t)v24);
    icu::number::LocalizedNumberFormatter::operator=((uint64_t)(v9 + 1), (uint64_t)v24);
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v24);
    icu::Locale::~Locale((icu::Locale *)v15);
    icu::Locale::~Locale((icu::Locale *)&v23);
    icu::number::impl::StringProp::~StringProp(&v22);
    icu::number::impl::StringProp::~StringProp(&v21);
    icu::number::Scale::~Scale((icu::number::Scale *)&v20);
    icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v19);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v18);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v17);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v25);
  }
  else
  {
    *a4 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v9;
}

uint64_t *unumf_openForSkeletonAndLocaleWithError(uint64_t a1, unint64_t a2, const char *a3, const icu::UnicodeString *a4, UParseError *a5)
{
  int v8;
  uint64_t *v10;
  uint64_t *v11;
  icu::number::NumberFormatter *v12;
  UErrorCode *v13;
  const icu::UnicodeString *v14;
  uint64_t *v15;
  void *v16;
  _OWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[224];
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[496];
  _BYTE v31[72];
  uint64_t *v32;

  v8 = a2;
  v32 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v10 = icu::UMemory::operator new(v32, (icu::UMemory *)0x1F8, a2);
  v11 = v10;
  if (v10)
  {
    v10[62] = 0;
    *((_OWORD *)v10 + 29) = 0u;
    *((_OWORD *)v10 + 30) = 0u;
    *((_OWORD *)v10 + 27) = 0u;
    *((_OWORD *)v10 + 28) = 0u;
    *((_OWORD *)v10 + 25) = 0u;
    *((_OWORD *)v10 + 26) = 0u;
    *((_OWORD *)v10 + 23) = 0u;
    *((_OWORD *)v10 + 24) = 0u;
    *((_OWORD *)v10 + 21) = 0u;
    *((_OWORD *)v10 + 22) = 0u;
    *((_OWORD *)v10 + 19) = 0u;
    *((_OWORD *)v10 + 20) = 0u;
    *((_OWORD *)v10 + 17) = 0u;
    *((_OWORD *)v10 + 18) = 0u;
    *((_OWORD *)v10 + 15) = 0u;
    *((_OWORD *)v10 + 16) = 0u;
    *((_OWORD *)v10 + 13) = 0u;
    *((_OWORD *)v10 + 14) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *((_OWORD *)v10 + 12) = 0u;
    *((_OWORD *)v10 + 9) = 0u;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 8) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 6) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *((_OWORD *)v10 + 4) = 0u;
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    *(_DWORD *)v10 = 1313231360;
    *((_OWORD *)v10 + 2) = 0u;
    sub_18BCC1E68((uint64_t)(v10 + 1));
    v11[60] = 0;
    v11[61] = 0;
    v11[62] = 0;
    memset(v31, 0, 64);
    v20 = a1;
    v12 = (icu::number::NumberFormatter *)icu::UnicodeString::UnicodeString(v31, v8 == -1, &v20);
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    if (a4)
      v14 = a4;
    else
      v14 = (const icu::UnicodeString *)v18;
    icu::number::NumberFormatter::forSkeleton(v22, v12, v14, a5, v13);
    icu::Locale::Locale(v15, (icu::Locale *)v21, a3, 0, 0, 0);
    icu::number::UnlocalizedNumberFormatter::locale((uint64_t)v22, (uint64_t)v21, (uint64_t)v30);
    icu::number::LocalizedNumberFormatter::operator=((uint64_t)(v11 + 1), (uint64_t)v30);
    icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v30);
    icu::Locale::~Locale((icu::Locale *)v21);
    icu::Locale::~Locale((icu::Locale *)&v29);
    icu::number::impl::StringProp::~StringProp(&v28);
    icu::number::impl::StringProp::~StringProp(&v27);
    icu::number::Scale::~Scale((icu::number::Scale *)&v26);
    icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v25);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v23);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v31);
  }
  else
  {
    a5->line = 7;
  }
  return v11;
}

_DWORD *unumf_formatInt(_DWORD *result, unint64_t a2, uint64_t a3, UErrorCode *a4)
{
  _DWORD *v5;
  icu::number::impl::UFormattedNumberData *v8;
  void **v9;
  int v10;

  if (*(int *)a4 <= 0)
  {
    v5 = result;
    if (result)
    {
      if (*result != 1313231360)
      {
LABEL_8:
        v10 = 3;
        goto LABEL_9;
      }
      if (a3)
      {
        if (*(_DWORD *)(a3 + 16) == 1178881536)
        {
          v8 = (icu::number::impl::UFormattedNumberData *)(a3 + 48);
          icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a3 + 48));
          v9 = (void **)(a3 + 352);
          icu::number::impl::DecimalQuantity::clear(v9);
          icu::number::impl::DecimalQuantity::setToLong(v9, a2);
          return (_DWORD *)icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(v5 + 2), v8, a4);
        }
        goto LABEL_8;
      }
    }
    v10 = 1;
LABEL_9:
    *a4 = v10;
  }
  return result;
}

_DWORD *unumf_formatDouble(_DWORD *result, uint64_t a2, UErrorCode *a3, double a4)
{
  _DWORD *v5;
  icu::number::impl::UFormattedNumberData *v8;
  void **v9;
  int v10;

  if (*(int *)a3 <= 0)
  {
    v5 = result;
    if (result)
    {
      if (*result != 1313231360)
      {
LABEL_8:
        v10 = 3;
        goto LABEL_9;
      }
      if (a2)
      {
        if (*(_DWORD *)(a2 + 16) == 1178881536)
        {
          v8 = (icu::number::impl::UFormattedNumberData *)(a2 + 48);
          icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a2 + 48));
          v9 = (void **)(a2 + 352);
          icu::number::impl::DecimalQuantity::clear(v9);
          icu::number::impl::DecimalQuantity::setToDouble(v9, a4);
          return (_DWORD *)icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(v5 + 2), v8, a3);
        }
        goto LABEL_8;
      }
    }
    v10 = 1;
LABEL_9:
    *a3 = v10;
  }
  return result;
}

_DWORD *unumf_formatDecimal(_DWORD *result, const char *a2, int a3, uint64_t a4, UErrorCode *a5)
{
  _DWORD *v6;
  icu::number::impl::UFormattedNumberData *v10;
  void **v11;
  int v12;

  if (*(int *)a5 <= 0)
  {
    v6 = result;
    if (result)
    {
      if (*result != 1313231360)
      {
LABEL_9:
        v12 = 3;
        goto LABEL_10;
      }
      if (a4)
      {
        if (*(_DWORD *)(a4 + 16) == 1178881536)
        {
          v10 = (icu::number::impl::UFormattedNumberData *)(a4 + 48);
          icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a4 + 48));
          v11 = (void **)(a4 + 352);
          icu::number::impl::DecimalQuantity::clear(v11);
          result = (_DWORD *)icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v11, a2, a3, a5);
          if (*(int *)a5 <= 0)
            return (_DWORD *)icu::number::LocalizedNumberFormatter::formatImpl((icu::number::LocalizedNumberFormatter *)(v6 + 2), v10, a5);
          return result;
        }
        goto LABEL_9;
      }
    }
    v12 = 1;
LABEL_10:
    *a5 = v12;
  }
  return result;
}

uint64_t unumf_resultToString(uint64_t a1, UChar *a2, int a3, UErrorCode *a4)
{
  uint64_t v4;
  UErrorCode v8;
  UChar *v10;
  UChar *v11;
  _BYTE v12[64];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) == 1178881536)
      {
        if (a2)
        {
          if ((a3 & 0x80000000) == 0)
          {
LABEL_7:
            icu::FormattedValueStringBuilderImpl::toTempString((icu::FormattedValueStringBuilderImpl *)(a1 + 48), (uint64_t)v12);
            v11 = a2;
            v4 = icu::UnicodeString::extract((uint64_t)v12, &v11, a3, (int *)a4);
            v10 = v11;
            icu::UnicodeString::~UnicodeString(&v10, (icu::UnicodeString *)v12);
            return v4;
          }
        }
        else if (!a3)
        {
          goto LABEL_7;
        }
        v4 = 0;
        v8 = U_ILLEGAL_ARGUMENT_ERROR;
LABEL_11:
        *a4 = v8;
        return v4;
      }
      v8 = U_INVALID_FORMAT_ERROR;
    }
    else
    {
      v8 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    v4 = 0;
    goto LABEL_11;
  }
  return 0;
}

BOOL unumf_resultNextFieldPosition(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  _BOOL8 v3;
  int v5;
  void (**v7)(icu::FieldPosition *__hidden);
  __int128 v8;

  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) == 1178881536)
      {
        if (a2)
        {
          *((_QWORD *)&v8 + 1) = 0;
          v7 = off_1E225EF78;
          *(_QWORD *)&v8 = *(_QWORD *)a2;
          DWORD2(v8) = *(_DWORD *)(a2 + 8);
          v3 = icu::FormattedValueStringBuilderImpl::nextFieldPosition((icu::FormattedValueStringBuilderImpl *)(a1 + 48), (icu::FieldPosition *)&v7, a3) != 0;
          *(_QWORD *)(a2 + 4) = *(_QWORD *)((char *)&v8 + 4);
          icu::FieldPosition::~FieldPosition((icu::FieldPosition *)&v7);
          return v3;
        }
        v3 = 0;
        v5 = 1;
LABEL_10:
        *a3 = v5;
        return v3;
      }
      v5 = 3;
    }
    else
    {
      v5 = 1;
    }
    v3 = 0;
    goto LABEL_10;
  }
  return 0;
}

void unumf_resultGetAllFieldPositions(uint64_t a1, icu::FieldPositionIterator *a2, UErrorCode *a3)
{
  int v5;
  _OWORD v6[2];
  uint64_t v7;

  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)(a1 + 16) != 1178881536)
      {
        v5 = 3;
        goto LABEL_8;
      }
      if (a2)
      {
        v7 = 0;
        memset(v6, 0, sizeof(v6));
        icu::FieldPositionIteratorHandler::FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v6, a2, a3);
        icu::FormattedValueStringBuilderImpl::getAllFieldPositions((icu::FormattedValueStringBuilderImpl *)(a1 + 48), (icu::FieldPositionIteratorHandler *)v6, a3);
        icu::FieldPositionIteratorHandler::~FieldPositionIteratorHandler((icu::FieldPositionIteratorHandler *)v6);
        return;
      }
    }
    v5 = 1;
LABEL_8:
    *a3 = v5;
  }
}

uint64_t unumf_resultToDecimalNumber(uint64_t a1, char *a2, int a3, UErrorCode *a4)
{
  uint64_t v4;
  icu::number::impl::DecNum *v9;
  int v10;
  _QWORD v12[2];
  void *v13[8];
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  if (!a1)
  {
    v10 = 1;
LABEL_11:
    v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (*(_DWORD *)(a1 + 16) != 1178881536)
  {
    v10 = 3;
    goto LABEL_11;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  v9 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(a1 + 352), (icu::number::impl::DecNum *)v14, a4);
  memset(&v13[1], 0, 56);
  v12[1] = 0;
  v13[0] = (char *)&v13[1] + 5;
  LODWORD(v13[1]) = 40;
  v12[0] = 0;
  icu::CharStringByteSink::CharStringByteSink(v12, (uint64_t)v13);
  icu::number::impl::DecNum::toString(v9, (icu::ByteSink *)v12, a4);
  icu::CharStringByteSink::~CharStringByteSink((icu::CharStringByteSink *)v12);
  v4 = icu::CharString::extract((char **)v13, a2, a3, a4);
  if (BYTE4(v13[1]))
    uprv_free(v13[0]);
  if (BYTE4(v14[1]))
    uprv_free(v14[0]);
  return v4;
}

void unumf_close(_DWORD *a1)
{
  if (a1)
  {
    if (*a1 == 1313231360)
    {
      icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 2));
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

uint64_t *usnum_openForInt64@<X0>(void **a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  void **v9;
  int v10;

  v5 = icu::UMemory::operator new(a3, (icu::UMemory *)0x18, (unint64_t)a2);
  v6 = v5;
  if (v5)
  {
    *v5 = 0;
    v5[2] = 0;
    v5[1] = 0;
    v7 = v5 + 1;
    *(_DWORD *)v5 = 1397640448;
    *((_DWORD *)v5 + 4) = 1;
    icu::number::SimpleNumber::forInt64(a1, a2, &v9);
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)(v6 + 1));
    *v7 = v9;
    *((_DWORD *)v6 + 4) = v10;
    v9 = 0;
    icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v9);
  }
  else
  {
    *a2 = 7;
  }
  return v6;
}

_DWORD *usnum_setToInt64(_DWORD *result, void **this, int *a3)
{
  _DWORD *v3;
  int v4;
  void **v5;
  int v6;

  if (*a3 <= 0)
  {
    v3 = result;
    if (result)
    {
      if (*result == 1397640448)
      {
        icu::number::SimpleNumber::forInt64(this, a3, &v5);
        icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)(v3 + 2));
        *((_QWORD *)v3 + 1) = v5;
        v3[4] = v6;
        v5 = 0;
        return (_DWORD *)icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v5);
      }
      v4 = 3;
    }
    else
    {
      v4 = 1;
    }
    *a3 = v4;
  }
  return result;
}

_DWORD *usnum_multiplyByPowerOfTen(_DWORD *result, int a2, UErrorCode *a3)
{
  int v3;

  if (*(int *)a3 <= 0)
  {
    if (result)
    {
      if (*result == 1397640448)
        return (_DWORD *)icu::number::SimpleNumber::multiplyByPowerOfTen((_BOOL8)(result + 2), a2, a3);
      v3 = 3;
    }
    else
    {
      v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

void usnum_roundTo(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  int v4;

  if (*a4 <= 0)
  {
    if (a1)
    {
      if (*(_DWORD *)a1 == 1397640448)
      {
        icu::number::SimpleNumber::roundTo((_QWORD *)(a1 + 8), a2, a3, a4);
        return;
      }
      v4 = 3;
    }
    else
    {
      v4 = 1;
    }
    *a4 = v4;
  }
}

_QWORD *usnum_setMinimumIntegerDigits(_QWORD *result, int a2, UErrorCode *a3)
{
  int v3;

  if (*(int *)a3 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1397640448)
        return icu::number::SimpleNumber::setMinimumIntegerDigits(result + 1, a2, a3);
      v3 = 3;
    }
    else
    {
      v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

_QWORD *usnum_setMinimumFractionDigits(_QWORD *result, int a2, UErrorCode *a3)
{
  int v3;

  if (*(int *)a3 <= 0)
  {
    if (result)
    {
      if (*(_DWORD *)result == 1397640448)
        return icu::number::SimpleNumber::setMinimumFractionDigits(result + 1, a2, a3);
      v3 = 3;
    }
    else
    {
      v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

void usnum_truncateStart(_DWORD *a1, int a2, UErrorCode *a3)
{
  int v3;

  if (*(int *)a3 <= 0)
  {
    if (a1)
    {
      if (*a1 == 1397640448)
      {
        icu::number::SimpleNumber::truncateStart((icu::number::SimpleNumber *)(a1 + 2), a2, a3);
        return;
      }
      v3 = 3;
    }
    else
    {
      v3 = 1;
    }
    *a3 = v3;
  }
}

_DWORD *usnum_setSign(_DWORD *result, int a2, int *a3)
{
  int v3;

  if (*a3 <= 0)
  {
    if (result)
    {
      if (*result == 1397640448)
        return (_DWORD *)icu::number::SimpleNumber::setSign((uint64_t)(result + 2), a2, a3);
      v3 = 3;
    }
    else
    {
      v3 = 1;
    }
    *a3 = v3;
  }
  return result;
}

uint64_t *usnumf_openForLocale(const char *a1, UErrorCode *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _DWORD *v6;
  void *v7;
  void *v8;
  uint64_t v10;
  __int128 v11;
  void *v12;
  _BYTE v13[224];
  uint64_t *v14;

  v14 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v4 = icu::UMemory::operator new(v14, (icu::UMemory *)0x28, (unint64_t)a2);
  v5 = v4;
  if (v4)
  {
    *v4 = 0;
    v4[1] = 0;
    v6 = v4 + 1;
    *(_DWORD *)v4 = 1397638656;
    *((_DWORD *)v4 + 2) = 2;
    v4[3] = 0;
    v4[4] = 0;
    v4[2] = 0;
    icu::Locale::Locale((uint64_t *)2, (icu::Locale *)v13, a1, 0, 0, 0);
    icu::number::SimpleNumberFormatter::forLocale((icu::number::SimpleNumberFormatter *)v13, a2, &v10);
    icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)(v5 + 1), v7);
    *v6 = v10;
    *((_OWORD *)v5 + 1) = v11;
    v8 = v12;
    v5[4] = (uint64_t)v12;
    v11 = 0uLL;
    v12 = 0;
    icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)&v10, v8);
    icu::Locale::~Locale((icu::Locale *)v13);
  }
  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v5;
}

uint64_t *usnumf_openForLocaleAndGroupingStrategy(const char *a1, unint64_t a2, UErrorCode *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  _DWORD *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  __int128 v13;
  void *v14;
  _BYTE v15[224];
  uint64_t *v16;

  v16 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v6 = icu::UMemory::operator new(v16, (icu::UMemory *)0x28, a2);
  v7 = v6;
  if (v6)
  {
    *v6 = 0;
    v6[1] = 0;
    v8 = v6 + 1;
    *(_DWORD *)v6 = 1397638656;
    *((_DWORD *)v6 + 2) = 2;
    v6[3] = 0;
    v6[4] = 0;
    v6[2] = 0;
    icu::Locale::Locale((uint64_t *)2, (icu::Locale *)v15, a1, 0, 0, 0);
    icu::number::SimpleNumberFormatter::forLocaleAndGroupingStrategy((const icu::Locale *)v15, a2, a3, &v12);
    icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)(v7 + 1), v9);
    *v8 = v12;
    *((_OWORD *)v7 + 1) = v13;
    v10 = v14;
    v7[4] = (uint64_t)v14;
    v13 = 0uLL;
    v14 = 0;
    icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)&v12, v10);
    icu::Locale::~Locale((icu::Locale *)v15);
  }
  else
  {
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  return v7;
}

void usnumf_format(_DWORD *a1, uint64_t a2, uint64_t a3, UErrorCode *a4)
{
  int v6;
  uint64_t v7[3];
  uint64_t v8;
  int v9;
  _QWORD v10[3];

  if (*(int *)a4 > 0)
    return;
  if (!a1)
    goto LABEL_11;
  if (*a1 != 1397638656)
    goto LABEL_12;
  if (!a2)
  {
LABEL_11:
    v6 = 1;
LABEL_13:
    *a4 = v6;
    return;
  }
  if (*(_DWORD *)a2 != 1397640448)
  {
LABEL_12:
    v6 = 3;
    goto LABEL_13;
  }
  if (!a3)
    goto LABEL_11;
  if (*(_DWORD *)(a3 + 16) != 1178881536)
    goto LABEL_12;
  memset(v10, 0, sizeof(v10));
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  icu::number::SimpleNumberFormatter::format((uint64_t)(a1 + 2), (uint64_t)&v8, a4, (uint64_t)v10);
  icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)&v8);
  if (*(int *)a4 <= 0)
  {
    icu::number::FormattedNumber::FormattedNumber((uint64_t)v7, (uint64_t)v10);
    sub_18BD0A6EC(a3 + 48, v7[1]);
    icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v7);
  }
  icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v10);
}

void usnumf_formatInt64(_DWORD *a1, void **a2, uint64_t a3, int *a4)
{
  int v5;
  uint64_t v6[3];
  _QWORD v7[3];

  if (*a4 <= 0)
  {
    if (a1)
    {
      if (*a1 != 1397638656)
      {
LABEL_8:
        v5 = 3;
        goto LABEL_9;
      }
      if (a3)
      {
        if (*(_DWORD *)(a3 + 16) == 1178881536)
        {
          memset(v7, 0, sizeof(v7));
          sub_18BD0B990(a2, (uint64_t)(a1 + 2), a4, (uint64_t)v7);
          icu::number::FormattedNumber::FormattedNumber((uint64_t)v6, (uint64_t)v7);
          sub_18BD0A6EC(a3 + 48, v6[1]);
          icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v6);
          icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v7);
          return;
        }
        goto LABEL_8;
      }
    }
    v5 = 1;
LABEL_9:
    *a4 = v5;
  }
}

uint64_t sub_18BD0B990@<X0>(void **this@<X1>, uint64_t a2@<X0>, int *a3@<X2>, uint64_t a4@<X8>)
{
  void **v8[2];

  icu::number::SimpleNumber::forInt64(this, a3, v8);
  icu::number::SimpleNumberFormatter::format(a2, (uint64_t)v8, (UErrorCode *)a3, a4);
  return icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)v8);
}

void usnum_close(_DWORD *a1)
{
  if (a1)
  {
    if (*a1 == 1397640448)
    {
      icu::number::SimpleNumber::cleanup((icu::number::SimpleNumber *)(a1 + 2));
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

void usnumf_close(unsigned int *a1)
{
  void *v2;

  if (a1)
  {
    v2 = (void *)*a1;
    if ((_DWORD)v2 == 1397638656)
    {
      icu::number::SimpleNumberFormatter::cleanup((icu::number::SimpleNumberFormatter *)(a1 + 2), v2);
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

uint64_t sub_18BD0BA90(uint64_t a1, uint64_t a2)
{
  const void *v4;

  icu::FormattedStringBuilder::operator=(a1 + 8, a2 + 8);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  if (*(_BYTE *)(a1 + 164))
    uprv_free(*(void **)(a1 + 152));
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
  v4 = *(const void **)(a2 + 152);
  if (v4 == (const void *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 152) = a1 + 168;
    memcpy((void *)(a1 + 168), v4, 16 * *(int *)(a2 + 160));
  }
  else
  {
    *(_QWORD *)(a1 + 152) = v4;
    *(_QWORD *)(a2 + 152) = a2 + 168;
    *(_DWORD *)(a2 + 160) = 8;
    *(_BYTE *)(a2 + 164) = 0;
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  return a1;
}

void sub_18BD0BB2C(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5, int *a6)
{
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  _QWORD v15[2];
  void *v16[9];

  v16[8] = *(void **)MEMORY[0x1E0C80C00];
  v15[0] = &off_1E2262988;
  v15[1] = a1;
  v11 = ures_open(0, *(char **)(a2 + 40), a6);
  if (*a6 <= 0)
  {
    v12 = strcmp(a3, "latn");
    memset(&v16[1], 0, 56);
    v16[0] = (char *)&v16[1] + 5;
    LODWORD(v16[1]) = 40;
    sub_18BD0BD30(a3, a4, a5, (icu::CharString *)v16, (UErrorCode *)a6);
    v14 = 0;
    ures_getAllItemsWithFallback((uint64_t)v11, (char *)v16[0], (uint64_t)v15, &v14);
    v13 = *(unsigned __int8 *)(a1 + 1374);
    if (*(_BYTE *)(a1 + 1374) && v12)
    {
      sub_18BD0BD30("latn", a4, a5, (icu::CharString *)v16, (UErrorCode *)a6);
      v14 = 0;
      ures_getAllItemsWithFallback((uint64_t)v11, (char *)v16[0], (uint64_t)v15, &v14);
      v13 = *(unsigned __int8 *)(a1 + 1374);
    }
    if (a4 && v13)
    {
      sub_18BD0BD30(a3, 0, a5, (icu::CharString *)v16, (UErrorCode *)a6);
      v14 = 0;
      ures_getAllItemsWithFallback((uint64_t)v11, (char *)v16[0], (uint64_t)v15, &v14);
      v13 = *(unsigned __int8 *)(a1 + 1374);
    }
    if (a4 && v13 && v12)
    {
      sub_18BD0BD30("latn", 0, a5, (icu::CharString *)v16, (UErrorCode *)a6);
      v14 = 0;
      ures_getAllItemsWithFallback((uint64_t)v11, (char *)v16[0], (uint64_t)v15, &v14);
      v13 = *(unsigned __int8 *)(a1 + 1374);
    }
    if (v13)
      *a6 = 5;
    if (BYTE4(v16[1]))
      uprv_free(v16[0]);
  }
  if (v11)
    ures_close(v11);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v15);
}

icu::CharString *sub_18BD0BD30(const char *a1, int a2, int a3, icu::CharString *a4, UErrorCode *a5)
{
  const char *v10;
  const char *v11;
  char *v13;
  int v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  char *v19;
  int v20;

  *((_DWORD *)a4 + 14) = 0;
  **(_BYTE **)a4 = 0;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v19, "NumberElements/");
  icu::CharString::append(a4, v19, v20, a5);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v17, a1);
  icu::CharString::append(a4, v17, v18, a5);
  if (a2)
    v10 = "/patternsLong";
  else
    v10 = "/patternsShort";
  icu::StringPiece::StringPiece((icu::StringPiece *)&v15, v10);
  icu::CharString::append(a4, v15, v16, a5);
  if (a3)
    v11 = "/currencyFormat";
  else
    v11 = "/decimalFormat";
  icu::StringPiece::StringPiece((icu::StringPiece *)&v13, v11);
  return icu::CharString::append(a4, v13, v14, a5);
}

uint64_t sub_18BD0BE30(uint64_t a1, int a2)
{
  int v2;

  if (a2 < 0)
    return 0;
  v2 = *(char *)(a1 + 1373);
  if (v2 >= a2)
    v2 = a2;
  return *(char *)(a1 + v2 + 1352);
}

__int16 *sub_18BD0BE54(uint64_t a1, int a2, icu::PluralRules *a3, icu::number::impl::DecimalQuantity *a4)
{
  int v7;
  uint64_t v8;
  int v9;
  __int16 *result;
  int v11;
  const icu::UnicodeString *v12;
  int v13;
  void *v14;
  __int16 *v15;
  _OWORD v16[4];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 < 0)
    return 0;
  if (*(char *)(a1 + 1373) >= a2)
    v7 = a2;
  else
    v7 = *(char *)(a1 + 1373);
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)a4 + 40))(a4))
  {
    v8 = icu::number::impl::DecimalQuantity::toLong(a4, 1);
    if (!v8)
    {
      v9 = 6;
LABEL_11:
      result = *(__int16 **)(a1 + 8 * (v9 | (8 * v7)) + 8);
      if (result)
        return result;
      goto LABEL_12;
    }
    if (v8 == 1)
    {
      v9 = 7;
      goto LABEL_11;
    }
  }
LABEL_12:
  v11 = 5;
  if (a3)
  {
    memset(v16, 0, sizeof(v16));
    icu::PluralRules::select(a3, a4, (icu::UnicodeString *)v16);
    v13 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v16, v12);
    if (v13 < 0)
      v11 = 5;
    else
      v11 = v13;
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v16);
  }
  v15 = *(__int16 **)(a1 + 8 * (v11 + 8 * v7) + 8);
  if (v11 != 5 && !v15)
    v15 = *(__int16 **)(a1 + (((uint64_t)v7 << 6) | 0x28) + 8);
  if (v15 == L"<USE FALLBACK>")
    return 0;
  else
    return v15;
}

uint64_t sub_18BD0BF94(uint64_t result, icu::UVector *this, UErrorCode *a3)
{
  UChar **v5;
  UChar **v6;
  UChar *v7;
  BOOL v8;
  signed int v9;
  BOOL v10;
  const UChar *v11;

  v5 = (UChar **)(result + 8);
  v6 = (UChar **)(result + 1352);
  do
  {
    v7 = *v5;
    if (*v5)
      v8 = v7 == (UChar *)L"<USE FALLBACK>";
    else
      v8 = 1;
    if (!v8)
    {
      v9 = *((_DWORD *)this + 2);
      while (1)
      {
        v10 = __OFSUB__(v9--, 1);
        if (v9 < 0 != v10)
          break;
        v11 = (const UChar *)icu::UVector::elementAt(this, v9);
        result = u_strcmp(v7, v11);
        if (!(_DWORD)result)
          goto LABEL_11;
      }
      result = icu::UVector::addElement(this, v7, a3);
    }
LABEL_11:
    ++v5;
  }
  while (v5 != v6);
  return result;
}

const UChar *sub_18BD0C030(uint64_t a1, char *a2, icu::ResourceValue *a3, uint64_t a4, char *a5)
{
  const UChar *result;
  int v9;
  int v10;
  int v11;
  UErrorCode *v12;
  int v13;
  int v14;
  int v15;
  const __int16 *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _OWORD v23[2];
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;
  char *v27;

  v27 = a2;
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  result = (const UChar *)(*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, char *))(*(_QWORD *)a3 + 88))(v25, a3, a5);
  if (*(int *)a5 > 0)
    return result;
  result = (const UChar *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v25, 0, (const char **)&v27, a3);
  if (!(_DWORD)result)
    return result;
  v9 = 0;
  while (1)
  {
    v10 = (char)(strlen(v27) - 1);
    if (v10 <= 19)
      break;
LABEL_29:
    result = (const UChar *)icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v25, ++v9, (const char **)&v27, a3);
    if (!(_DWORD)result)
      return result;
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v10 + 1352);
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  result = (const UChar *)(*(_QWORD *(**)(_OWORD *__return_ptr, icu::ResourceValue *, char *))(*(_QWORD *)a3 + 88))(v23, a3, a5);
  if (*(int *)a5 > 0)
    return result;
  if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v23, 0, (const char **)&v27, a3))
  {
LABEL_25:
    v20 = *(_QWORD *)(a1 + 8) + v10;
    if (!*(_BYTE *)(v20 + 1352))
    {
      *(_BYTE *)(v20 + 1352) = v11;
      v21 = *(_QWORD *)(a1 + 8);
      if (v10 > *(char *)(v21 + 1373))
        *(_BYTE *)(v21 + 1373) = v10;
      *(_BYTE *)(v21 + 1374) = 0;
    }
    goto LABEL_29;
  }
  v13 = 0;
  v14 = 8 * v10;
  while (1)
  {
    result = (const UChar *)icu::StandardPlural::indexFromString((icu::StandardPlural *)v27, a5, v12);
    if (*(int *)a5 > 0)
      return result;
    v15 = (_DWORD)result + v14;
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((int)result + v14) + 8))
    {
      v22 = 0;
      result = (const UChar *)(*(uint64_t (**)(icu::ResourceValue *, int *, char *))(*(_QWORD *)a3 + 32))(a3, &v22, a5);
      if (*(int *)a5 > 0)
        return result;
      v16 = (const __int16 *)result;
      if (!u_strcmp(result, (const UChar *)"0"))
      {
        v22 = 0;
        v16 = L"<USE FALLBACK>";
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15 + 8) = v16;
      if (!v11)
      {
        v17 = v22;
        if (v22 < 1)
        {
LABEL_23:
          v11 = 0;
        }
        else
        {
          v18 = 0;
          do
          {
            v19 = *(unsigned __int16 *)v16++;
            if (v19 == 48)
            {
              ++v18;
            }
            else if (v18 > 0)
            {
              goto LABEL_22;
            }
            --v17;
          }
          while (v17);
          if (v18 < 1)
            goto LABEL_23;
LABEL_22:
          v11 = (v18 + ~(_BYTE)v10);
        }
      }
    }
    if (!icu::ResourceTable::getKeyAndValue((icu::ResourceTable *)v23, ++v13, (const char **)&v27, a3))
      goto LABEL_25;
  }
}

uint64_t sub_18BD0C290(uint64_t a1, int a2, uint64_t a3, const char *a4, int a5, uint64_t a6, icu::number::impl::MutablePatternModifier *a7, int a8, uint64_t a9, int *a10)
{
  uint64_t v17;

  *(_QWORD *)a1 = off_1E2262960;
  *(_QWORD *)(a1 + 8) = a6;
  *(_QWORD *)(a1 + 16) = a9;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_DWORD *)(a1 + 32) = 12;
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = &off_1E2262938;
  v17 = a1 + 240;
  bzero((void *)(a1 + 248), 0x556uLL);
  *(_BYTE *)(a1 + 1614) = 1;
  sub_18BD0C8B8(a1 + 1616);
  *(_BYTE *)(a1 + 2064) = a8;
  sub_18BD0BB2C(v17, a3, a4, a2, a5, a10);
  if (a8)
    sub_18BD0C378(a1, a7, (UErrorCode *)a10);
  else
    *(_QWORD *)(a1 + 2056) = a7;
  return a1;
}

void sub_18BD0C378(uint64_t a1, icu::number::impl::MutablePatternModifier *a2, UErrorCode *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  UErrorCode *v13;
  void *v14;
  uint64_t *v15;
  void *v16;
  void *v17;
  _OWORD v18[2];
  uint64_t v19;
  UChar *v20[8];
  _OWORD v21[27];
  uint64_t v22;
  _OWORD v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    icu::UVector::UVector((icu::UVector *)v18, 0xCu, a3);
    if (*(int *)a3 > 0 || (sub_18BD0BF94(a1 + 240, (icu::UVector *)v18, a3), *(int *)a3 > 0))
    {
LABEL_4:
      icu::UVector::~UVector((icu::UVector *)v18);
      return;
    }
    v6 = DWORD2(v18[0]);
    *(_DWORD *)(a1 + 232) = DWORD2(v18[0]);
    if (*(_DWORD *)(a1 + 32) < (int)v6)
    {
      if ((int)v6 >= 1)
      {
        v7 = uprv_malloc(16 * v6);
        if (v7)
        {
          v8 = v7;
          if (*(_BYTE *)(a1 + 36))
            uprv_free(*(void **)(a1 + 24));
          *(_QWORD *)(a1 + 24) = v8;
          *(_DWORD *)(a1 + 32) = v6;
          *(_BYTE *)(a1 + 36) = 1;
        }
      }
      if (*(int *)a3 > 0)
        goto LABEL_4;
      LODWORD(v6) = *(_DWORD *)(a1 + 232);
    }
    if ((int)v6 >= 1)
    {
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = icu::UVector::elementAt((icu::UVector *)v18, v10);
        memset(v23, 0, sizeof(v23));
        icu::UnicodeString::UnicodeString((uint64_t)v23, v11);
        v12 = *(_QWORD *)(a1 + 24);
        v22 = 0;
        memset(v21, 0, sizeof(v21));
        sub_18BD0C8B8((uint64_t)v21);
        icu::UnicodeString::UnicodeString((uint64_t)v20, v11);
        icu::number::impl::PatternParser::parseToPatternInfo(v20, (const icu::UnicodeString *)v21, a3, v13);
        icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v20);
        if (*(int *)a3 > 0)
          break;
        icu::number::impl::MutablePatternModifier::setPatternInfo((uint64_t)a2, (uint64_t)v21, 44);
        *(_QWORD *)(v12 + v9) = icu::number::impl::MutablePatternModifier::createImmutable(a2, a3, v15);
        if (*(int *)a3 > 0)
          break;
        *(_QWORD *)(v12 + v9 + 8) = v11;
        sub_18BD0C994((void **)v21);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v23);
        ++v10;
        v9 += 16;
        if (v10 >= *(int *)(a1 + 232))
          goto LABEL_4;
      }
      sub_18BD0C994((void **)v21);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v23);
    }
    goto LABEL_4;
  }
}

uint64_t sub_18BD0C5BC(uint64_t a1, int a2, uint64_t a3, const char *a4, int a5, uint64_t a6, icu::number::impl::MutablePatternModifier *a7, int a8, uint64_t a9, int *a10)
{
  return sub_18BD0C290(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_18BD0C5C8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E2262960;
  v2 = *(_DWORD *)(a1 + 232);
  if (v2 >= 1)
  {
    v3 = 0;
    for (i = 0; i < v2; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + v3);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v2 = *(_DWORD *)(a1 + 232);
      }
      v3 += 16;
    }
  }
  sub_18BD0C994((void **)(a1 + 1616));
  nullsub_17(a1 + 240);
  if (*(_BYTE *)(a1 + 36))
    uprv_free(*(void **)(a1 + 24));
  return a1;
}

void sub_18BD0C664(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BD0C5C8(a1);
  icu::UMemory::operator delete(v1);
}

double sub_18BD0C678(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  double result;
  int v9;
  int v10;
  int Magnitude;
  __int16 *v12;
  const UChar *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  UErrorCode *v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  if (*a4 <= 0)
  {
    if (icu::number::impl::DecimalQuantity::isZeroish(a2))
    {
      sub_18BD26460(a3 + 104, a2, a4);
      v9 = 0;
      v10 = 0;
    }
    else
    {
      v9 = sub_18BD2637C(a3 + 104, a2, a1 + 240, a4);
      if (icu::number::impl::DecimalQuantity::isZeroish(a2))
        Magnitude = 0;
      else
        Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(a2);
      v10 = Magnitude - v9;
    }
    v12 = sub_18BD0BE54(a1 + 240, v10, *(icu::PluralRules **)(a1 + 8), a2);
    if (v12)
    {
      v13 = (const UChar *)v12;
      if (*(_BYTE *)(a1 + 2064))
      {
        if (*(int *)(a1 + 232) >= 1)
        {
          v14 = 0;
          v15 = 0;
          while (1)
          {
            v16 = *(_QWORD *)(a1 + 24);
            if (!u_strcmp(v13, *(const UChar **)(v16 + v14 + 8)))
              break;
            ++v15;
            v14 += 16;
            if (v15 >= *(int *)(a1 + 232))
              goto LABEL_20;
          }
          icu::number::impl::ImmutablePatternModifier::applyToMicros(*(_QWORD *)(v16 + v14), a3, a2, a4);
        }
      }
      else
      {
        icu::UnicodeString::UnicodeString((uint64_t)&v24, (uint64_t)v12);
        icu::number::impl::PatternParser::parseToPatternInfo((UChar **)&v24, (const icu::UnicodeString *)(a1 + 1616), (UErrorCode *)a4, v17);
        icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v24);
        icu::number::impl::MutablePatternModifier::setPatternInfo(*(_QWORD *)(a1 + 2056), a1 + 1616, 44);
        v19 = *(_QWORD *)(a1 + 2056);
        v20 = icu::number::impl::DecimalQuantity::signum(a2);
        icu::number::impl::MutablePatternModifier::setNumberProperties(v19, v20, 8);
        v21 = *(_QWORD *)(a1 + 2056);
        if (v21)
          v22 = v21 + 8;
        else
          v22 = 0;
        *(_QWORD *)(a3 + 200) = v22;
      }
    }
LABEL_20:
    icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)a2, -v9);
    sub_18BD26354((uint64_t)&v24);
    result = *(double *)&v24;
    v23 = v25[0];
    *(_OWORD *)(a3 + 104) = v24;
    *(_OWORD *)(a3 + 120) = v23;
    *(_QWORD *)(a3 + 133) = *(_QWORD *)((char *)v25 + 13);
  }
  return result;
}

void sub_18BD0C880(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD0C894(uint64_t a1)
{
  nullsub_17(a1);
  JUMPOUT(0x18D77FE8CLL);
}

uint64_t sub_18BD0C8B8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_1E2263720;
  *(_QWORD *)(a1 + 8) = off_1E2256B38;
  v2 = a1 + 8;
  *(_WORD *)(a1 + 16) = 2;
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFF0000;
  *(_DWORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 0;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(a1 + 128));
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_WORD *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0xFFFFFFFF0000;
  *(_DWORD *)(a1 + 284) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 292) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_BYTE *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)(a1 + 296));
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 372) = 0;
  *(_WORD *)(a1 + 380) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = v2;
  *(_DWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  return a1;
}

void sub_18BD0C994(void **a1)
{
  void **v2;
  void *v3;

  *a1 = &unk_1E2263720;
  v2 = a1 + 16;
  icu::number::impl::DecimalQuantity::~DecimalQuantity(a1 + 37);
  icu::number::impl::DecimalQuantity::~DecimalQuantity(v2);
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 1));
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);
}

uint64_t icu::number::impl::CurrencySymbols::CurrencySymbols(uint64_t a1, const UChar *a2, uint64_t a3, UErrorCode *a4)
{
  char *v7;
  int v8;
  char *v10;
  int v11;

  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)(a1 + 8), a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v10, *(const char **)(a3 + 40));
  v7 = v10;
  v8 = v11;
  *(_QWORD *)(a1 + 40) = a1 + 53;
  *(_DWORD *)(a1 + 48) = 40;
  *(_WORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  icu::CharString::append((icu::CharString *)(a1 + 40), v7, v8, a4);
  *(_QWORD *)(a1 + 104) = off_1E2256B38;
  *(_WORD *)(a1 + 112) = 2;
  *(_QWORD *)(a1 + 168) = off_1E2256B38;
  *(_WORD *)(a1 + 176) = 2;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 104));
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 168));
  return a1;
}

uint64_t icu::number::impl::CurrencySymbols::CurrencySymbols(uint64_t a1, const UChar *a2, uint64_t a3, uint64_t a4, UErrorCode *a5)
{
  UChar v10[16];

  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v10, a2);
  icu::number::impl::CurrencySymbols::CurrencySymbols(a1, v10, a3, a5);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v10);
  if (*(_BYTE *)(a4 + 2872))
    icu::UnicodeString::operator=((UChar **)(a1 + 104), (UChar **)(a4 + 520));
  if (*(_BYTE *)(a4 + 2873))
    icu::UnicodeString::operator=((UChar **)(a1 + 168), (UChar **)(a4 + 584));
  return a1;
}

{
  UChar v10[16];

  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v10, a2);
  icu::number::impl::CurrencySymbols::CurrencySymbols(a1, v10, a3, a5);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v10);
  if (*(_BYTE *)(a4 + 2872))
    icu::UnicodeString::operator=((UChar **)(a1 + 104), (UChar **)(a4 + 520));
  if (*(_BYTE *)(a4 + 2873))
    icu::UnicodeString::operator=((UChar **)(a1 + 168), (UChar **)(a4 + 584));
  return a1;
}

uint64_t icu::number::impl::CurrencySymbols::getIsoCode(icu::number::impl::CurrencySymbols *this)
{
  return (uint64_t)this + 28;
}

uint64_t icu::number::impl::CurrencySymbols::getNarrowCurrencySymbol@<X0>(icu::number::impl::CurrencySymbols *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::impl::CurrencySymbols::loadSymbol((uint64_t)this, 2u, (int *)a2, a3);
}

uint64_t icu::number::impl::CurrencySymbols::loadSymbol@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  const UChar *Name;
  const UChar *v8;
  int v9;

  v5 = a1 + 28;
  v9 = 0;
  Name = ucurr_getName((const UChar *)(a1 + 28), *(char **)(a1 + 40), a2, 0, &v9, a3);
  if (Name == (const UChar *)v5)
    return icu::UnicodeString::UnicodeString(a4, v5, 3);
  v8 = Name;
  return icu::UnicodeString::UnicodeString(a4, 1, &v8);
}

uint64_t icu::number::impl::CurrencySymbols::getFormalCurrencySymbol@<X0>(icu::number::impl::CurrencySymbols *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::impl::CurrencySymbols::loadSymbol((uint64_t)this, 3u, (int *)a2, a3);
}

uint64_t icu::number::impl::CurrencySymbols::getVariantCurrencySymbol@<X0>(icu::number::impl::CurrencySymbols *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::impl::CurrencySymbols::loadSymbol((uint64_t)this, 4u, (int *)a2, a3);
}

icu::UnicodeString *icu::number::impl::CurrencySymbols::getCurrencySymbol@<X0>(UChar **this@<X0>, UErrorCode *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  if (((_WORD)this[14] & 1) != 0)
    return (icu::UnicodeString *)icu::number::impl::CurrencySymbols::loadSymbol((uint64_t)this, 0, (int *)a2, (uint64_t)a3);
  else
    return icu::UnicodeString::UnicodeString(a3, this + 13);
}

icu::UnicodeString *icu::number::impl::CurrencySymbols::getIntlCurrencySymbol@<X0>(UChar **this@<X0>, icu::UnicodeString *a2@<X8>)
{
  if (((_WORD)this[22] & 1) != 0)
    return (icu::UnicodeString *)icu::UnicodeString::UnicodeString((uint64_t)a2, (uint64_t)this + 28, 3);
  else
    return icu::UnicodeString::UnicodeString(a2, this + 21);
}

uint64_t icu::number::impl::CurrencySymbols::getPluralName@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  const UChar *v6;
  char *v7;
  char *Keyword;
  const UChar *PluralName;
  const UChar *v11;
  int v12;

  v6 = (const UChar *)(a1 + 28);
  v12 = 0;
  v7 = *(char **)(a1 + 40);
  Keyword = icu::StandardPlural::getKeyword(a2);
  PluralName = ucurr_getPluralName(v6, v7, 0, Keyword, &v12, a3);
  if (PluralName == v6)
    return icu::UnicodeString::UnicodeString(a4, (uint64_t)v6, 3);
  v11 = PluralName;
  return icu::UnicodeString::UnicodeString(a4, 1, &v11);
}

BOOL icu::number::impl::CurrencySymbols::hasEmptyCurrencySymbol(icu::number::impl::CurrencySymbols *this)
{
  return (*((_WORD *)this + 56) & 0xFFE1) == 0;
}

icu::CurrencyUnit *sub_18BD0CD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, icu::CurrencyUnit *a4@<X8>)
{
  _QWORD *v7;
  int v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 8))
    return icu::CurrencyUnit::CurrencyUnit(a4, (const UChar *)(a1 + 16));
  v8 = 0;
  v9[0] = 0;
  ucurr_forLocale(*(char **)(a2 + 40), (UChar *)v9, 4, &v8);
  if (v8 > 0)
    return (icu::CurrencyUnit *)icu::CurrencyUnit::CurrencyUnit(a4);
  v7 = v9;
  return (icu::CurrencyUnit *)icu::CurrencyUnit::CurrencyUnit(a4, &v7, a3);
}

icu::number::impl::DecimalQuantity *icu::number::impl::DecimalQuantity::DecimalQuantity(icu::number::impl::DecimalQuantity *this)
{
  *(_QWORD *)this = off_1E2262A30;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
  *((_BYTE *)this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E2262A30;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
  *((_BYTE *)this + 20) = 0;
  return this;
}

void icu::number::impl::DecimalQuantity::setBcdToZero(void **this)
{
  if (*((_BYTE *)this + 64))
  {
    uprv_free(this[6]);
    *((_BYTE *)this + 64) = 0;
  }
  this[6] = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  *((_BYTE *)this + 21) = 0;
  this[3] = 0;
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 11) = 0;
}

void icu::number::impl::DecimalQuantity::~DecimalQuantity(void **this)
{
  *this = off_1E2262A30;
  if (*((_BYTE *)this + 64))
  {
    uprv_free(this[6]);
    this[6] = 0;
    *((_BYTE *)this + 64) = 0;
  }
}

{
  *this = off_1E2262A30;
  if (*((_BYTE *)this + 64))
  {
    uprv_free(this[6]);
    this[6] = 0;
    *((_BYTE *)this + 64) = 0;
  }
}

{
  *this = off_1E2262A30;
  if (*((_BYTE *)this + 64))
  {
    uprv_free(this[6]);
    this[6] = 0;
    *((_BYTE *)this + 64) = 0;
  }
  icu::UMemory::operator delete(this);
}

icu::number::impl::DecimalQuantity *icu::number::impl::DecimalQuantity::DecimalQuantity(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  *(_QWORD *)this = off_1E2262A30;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  return icu::number::impl::DecimalQuantity::operator=(this, a2);
}

{
  *(_QWORD *)this = off_1E2262A30;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  return icu::number::impl::DecimalQuantity::operator=(this, a2);
}

{
  *(_QWORD *)this = off_1E2262A30;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  return icu::number::impl::DecimalQuantity::operator=(this, a2);
}

{
  *(_QWORD *)this = off_1E2262A30;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 9) = 0;
  *((_WORD *)this + 32) = 0;
  return icu::number::impl::DecimalQuantity::operator=(this, a2);
}

icu::number::impl::DecimalQuantity *icu::number::impl::DecimalQuantity::operator=(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  if (this != (icu::number::impl::DecimalQuantity *)a2)
  {
    icu::number::impl::DecimalQuantity::copyBcdFrom((void **)this, (const icu::number::impl::DecimalQuantity *)a2);
    *((_BYTE *)this + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)((char *)this + 36) = *(_QWORD *)(a2 + 36);
    *(_QWORD *)((char *)this + 12) = *(_QWORD *)(a2 + 12);
    *((_WORD *)this + 10) = *(_WORD *)(a2 + 20);
    *((_QWORD *)this + 3) = *(_QWORD *)(a2 + 24);
    *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 32);
    *((_DWORD *)this + 11) = *(_DWORD *)(a2 + 44);
  }
  return this;
}

{
  if (this != (icu::number::impl::DecimalQuantity *)a2)
  {
    icu::number::impl::DecimalQuantity::moveBcdFrom((void **)this, (icu::number::impl::DecimalQuantity *)a2);
    *((_BYTE *)this + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)((char *)this + 36) = *(_QWORD *)(a2 + 36);
    *(_QWORD *)((char *)this + 12) = *(_QWORD *)(a2 + 12);
    *((_WORD *)this + 10) = *(_WORD *)(a2 + 20);
    *((_QWORD *)this + 3) = *(_QWORD *)(a2 + 24);
    *((_DWORD *)this + 8) = *(_DWORD *)(a2 + 32);
    *((_DWORD *)this + 11) = *(_DWORD *)(a2 + 44);
  }
  return this;
}

void icu::number::impl::DecimalQuantity::copyBcdFrom(void **this, const icu::number::impl::DecimalQuantity *a2)
{
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
  if (*((_BYTE *)a2 + 64))
  {
    icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)this, *((_DWORD *)a2 + 4));
    memcpy(this[6], *((const void **)a2 + 6), *((int *)a2 + 4));
  }
  else
  {
    this[6] = (void *)*((_QWORD *)a2 + 6);
  }
}

double icu::number::impl::DecimalQuantity::copyFieldsFrom(icu::number::impl::DecimalQuantity *this, const icu::number::impl::DecimalQuantity *a2)
{
  double result;

  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)((char *)this + 36) = *(_QWORD *)((char *)a2 + 36);
  *(_QWORD *)((char *)this + 12) = *(_QWORD *)((char *)a2 + 12);
  *((_WORD *)this + 10) = *((_WORD *)a2 + 10);
  result = *((double *)a2 + 3);
  *((double *)this + 3) = result;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  return result;
}

void icu::number::impl::DecimalQuantity::moveBcdFrom(void **this, icu::number::impl::DecimalQuantity *a2)
{
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
  if (*((_BYTE *)a2 + 64))
  {
    *((_BYTE *)this + 64) = 1;
    this[6] = (void *)*((_QWORD *)a2 + 6);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((_QWORD *)a2 + 6) = 0;
    *((_BYTE *)a2 + 64) = 0;
  }
  else
  {
    this[6] = (void *)*((_QWORD *)a2 + 6);
  }
}

void icu::number::impl::DecimalQuantity::clear(void **this)
{
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 20) = 0;
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
}

uint64_t icu::number::impl::DecimalQuantity::setMinInteger(uint64_t this, int a2)
{
  int v2;

  v2 = *(_DWORD *)(this + 36);
  if (v2 <= a2)
    v2 = a2;
  *(_DWORD *)(this + 36) = v2;
  return this;
}

uint64_t icu::number::impl::DecimalQuantity::setMinFraction(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = -a2;
  return this;
}

void icu::number::impl::DecimalQuantity::applyMaxInteger(icu::number::impl::DecimalQuantity *this, int a2)
{
  int v2;
  int v4;
  int v5;
  BOOL v6;
  int v7;

  v2 = *((_DWORD *)this + 4);
  if (v2)
  {
    v4 = *((_DWORD *)this + 3);
    if (v4 >= a2)
    {
      icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
    }
    else
    {
      v5 = v2 + v4 - 1;
      v6 = __OFSUB__(v5, a2);
      v7 = v5 - a2;
      if (v7 < 0 == v6)
      {
        icu::number::impl::DecimalQuantity::popFromLeft((uint64_t)this, v7 + 1);
        icu::number::impl::DecimalQuantity::compact(this);
      }
    }
  }
}

uint64_t icu::number::impl::DecimalQuantity::getMagnitude(icu::number::impl::DecimalQuantity *this)
{
  return (*((_DWORD *)this + 3) + *((_DWORD *)this + 4) - 1);
}

uint64_t icu::number::impl::DecimalQuantity::popFromLeft(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(this + 64))
  {
    v2 = *(int *)(this + 16);
    if (a2 <= 0)
    {
      LODWORD(v3) = v2 - a2;
    }
    else
    {
      do
      {
        *(_BYTE *)(*(_QWORD *)(this + 48) + v2 - 1) = 0;
        v3 = *(int *)(this + 16) - (uint64_t)a2;
        --v2;
      }
      while (v2 > v3);
    }
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(this + 16) - a2;
    *(_QWORD *)(this + 48) &= ~(-1 << (4 * (*(_BYTE *)(this + 16) - a2)));
  }
  *(_DWORD *)(this + 16) = v3;
  return this;
}

void icu::number::impl::DecimalQuantity::compact(icu::number::impl::DecimalQuantity *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;

  if (*((_BYTE *)this + 64))
  {
    v2 = *((unsigned int *)this + 4);
    if ((int)v2 < 1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      v3 = 0;
      while (!*(_BYTE *)(*((_QWORD *)this + 6) + v3))
      {
        if (v2 == ++v3)
          goto LABEL_16;
      }
    }
    if ((_DWORD)v3 == (_DWORD)v2)
      goto LABEL_16;
    icu::number::impl::DecimalQuantity::shiftRight((uint64_t)this, v3);
    v7 = *((unsigned int *)this + 4);
    v8 = v7 - 1;
    do
    {
      if ((int)v7 <= 0)
      {
        *((_DWORD *)this + 4) = v7;
        goto LABEL_23;
      }
      v9 = *(unsigned __int8 *)(*((_QWORD *)this + 6) + v8);
      LODWORD(v7) = v7 - 1;
      --v8;
    }
    while (!v9);
    v10 = v7 + 1;
    *((_DWORD *)this + 4) = v10;
    if (v10 > 0x10)
      return;
LABEL_23:
    icu::number::impl::DecimalQuantity::switchStorage(this);
  }
  else
  {
    v4 = *((_QWORD *)this + 6);
    if (!v4)
    {
LABEL_16:
      icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
      return;
    }
    v5 = *((unsigned int *)this + 4);
    if ((int)v5 < 1)
    {
      LODWORD(v6) = 0;
    }
    else
    {
      v6 = 0;
      while (v6 > 0xF || ((v4 >> (4 * v6)) & 0xF) == 0)
      {
        if (++v6 == v5)
        {
          LODWORD(v6) = *((_DWORD *)this + 4);
          break;
        }
      }
    }
    v11 = v4 >> (4 * v6);
    *((_QWORD *)this + 6) = v11;
    *((_DWORD *)this + 3) += v6;
    v12 = v5 & ((int)v5 >> 31);
    v13 = v5 - 1;
    v14 = 4 * v5 - 4;
    while (1)
    {
      v15 = __OFSUB__((_DWORD)v5, 1);
      LODWORD(v5) = v5 - 1;
      if ((int)v5 < 0 != v15)
        break;
      v16 = v14;
      v14 -= 4;
      v17 = v13-- & 0xFFFFFFF0;
      if (!v17 && ((15 << (v16 & 0xFC)) & v11) != 0)
      {
        v12 = v5 + 1;
        break;
      }
    }
    *((_DWORD *)this + 4) = v12;
  }
}

unint64_t icu::number::impl::DecimalQuantity::getPositionFingerprint(icu::number::impl::DecimalQuantity *this)
{
  return (int)(*((_DWORD *)this + 9) << 16) ^ ((unint64_t)*((unsigned int *)this + 10) << 32);
}

void icu::number::impl::DecimalQuantity::roundToIncrement(icu::number::impl::DecimalQuantity *a1, unint64_t a2, int a3, unsigned int a4, UErrorCode *a5)
{
  void (**v9)(icu::number::impl::DecimalQuantity *__hidden);
  __int128 v10;
  __int128 v11;
  void *v12[2];
  __int128 v13;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v9 = off_1E2262A30;
  BYTE8(v13) = 0;
  *(_QWORD *)((char *)&v10 + 4) = 0;
  WORD6(v10) = 0;
  icu::number::impl::DecimalQuantity::setToLong((void **)&v9, a2);
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)&v9, a3);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v14);
  icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)&v9, (icu::number::impl::DecNum *)v14, a5);
  if (*(int *)a5 <= 0)
  {
    icu::number::impl::DecimalQuantity::divideBy(a1, (const icu::number::impl::DecNum *)v14, a5);
    if (*(int *)a5 <= 0)
    {
      icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)a1, 0, a4, 0, (int *)a5);
      if (*(int *)a5 <= 0)
        icu::number::impl::DecimalQuantity::multiplyBy(a1, (const icu::number::impl::DecNum *)v14, a5);
    }
  }
  if (BYTE4(v14[1]))
    uprv_free(v14[0]);
  v9 = off_1E2262A30;
  if (BYTE8(v13))
    uprv_free(v12[1]);
}

void **icu::number::impl::DecimalQuantity::setToLong(void **this, unint64_t a2)
{
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
  *((_BYTE *)this + 20) = 0;
  if (a2 >= 0x8000000000000001)
  {
    *((_BYTE *)this + 20) = 1;
    a2 = -(uint64_t)a2;
LABEL_4:
    icu::number::impl::DecimalQuantity::_setToLong((icu::number::impl::DecimalQuantity *)this, a2);
    icu::number::impl::DecimalQuantity::compact((icu::number::impl::DecimalQuantity *)this);
    return this;
  }
  if (a2)
    goto LABEL_4;
  return this;
}

BOOL icu::number::impl::DecimalQuantity::adjustMagnitude(icu::number::impl::DecimalQuantity *this, int a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  int v7;

  if (!*((_DWORD *)this + 4))
    return 0;
  v4 = uprv_add32_overflow(*((_DWORD *)this + 3), a2, (_DWORD *)this + 3);
  v5 = uprv_add32_overflow(*((_DWORD *)this + 8), a2, (_DWORD *)this + 8);
  v7 = 0;
  return v5 || v4 || uprv_add32_overflow(*((_DWORD *)this + 3), *((_DWORD *)this + 4), &v7);
}

icu::number::impl::DecNum *icu::number::impl::DecimalQuantity::toDecNum(icu::number::impl::DecimalQuantity *this, icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  size_t v5;
  int64_t v7;
  char v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v13[2];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5)
  {
    v15 = 0;
    *(_OWORD *)v13 = 0u;
    v14 = 0u;
    sub_18BD0F1D8((uint64_t)v13, v5, *a3);
    if (*(int *)a3 <= 0)
    {
      LODWORD(v7) = *((_DWORD *)this + 4);
      if ((int)v7 >= 1)
      {
        v8 = 0;
        v9 = 0;
        v10 = -1;
        do
        {
          if (*((_BYTE *)this + 64))
          {
            LOBYTE(v11) = *(_BYTE *)(*((_QWORD *)this + 6) + v9);
          }
          else if (v9 <= 0xF)
          {
            v11 = (*((_QWORD *)this + 6) >> (v8 & 0xFC)) & 0xFLL;
          }
          else
          {
            LOBYTE(v11) = 0;
          }
          v13[0][(int)v7 + v10] = v11;
          ++v9;
          v7 = *((int *)this + 4);
          v8 += 4;
          --v10;
        }
        while ((uint64_t)v9 < v7);
      }
      icu::number::impl::DecNum::setTo(a2, (char *)v13[0], v7, *((_DWORD *)this + 3), *((_BYTE *)this + 20) & 1, a3);
    }
    if (BYTE4(v13[1]))
      uprv_free(v13[0]);
  }
  else
  {
    icu::number::impl::DecNum::setTo(a2, "0", a3);
  }
  return a2;
}

void icu::number::impl::DecimalQuantity::divideBy(icu::number::impl::DecimalQuantity *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  void *v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 4))
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)v6 = 0u;
    v7 = 0u;
    icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v6);
    icu::number::impl::DecimalQuantity::toDecNum(this, (icu::number::impl::DecNum *)v6, a3);
    if (*(int *)a3 <= 0)
    {
      icu::number::impl::DecNum::divideBy((icu::number::impl::DecNum *)v6, a2, a3);
      if (*(int *)a3 <= 0)
      {
        icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
        *((_BYTE *)this + 20) = 0;
        icu::number::impl::DecimalQuantity::_setToDecNum(this, (const icu::number::impl::DecNum *)v6, a3);
      }
    }
    if (BYTE4(v6[1]))
      uprv_free(v6[0]);
  }
}

void icu::number::impl::DecimalQuantity::roundToMagnitude(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  icu::number::impl::DecimalQuantity::roundToMagnitude(a1, a2, a3, 0, a4);
}

void icu::number::impl::DecimalQuantity::multiplyBy(icu::number::impl::DecimalQuantity *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  void *v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 4))
  {
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)v6 = 0u;
    v7 = 0u;
    icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v6);
    icu::number::impl::DecimalQuantity::toDecNum(this, (icu::number::impl::DecNum *)v6, a3);
    if (*(int *)a3 <= 0)
    {
      icu::number::impl::DecNum::multiplyBy((icu::number::impl::DecNum *)v6, a2, a3);
      if (*(int *)a3 <= 0)
      {
        icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
        *((_BYTE *)this + 20) = 0;
        icu::number::impl::DecimalQuantity::_setToDecNum(this, (const icu::number::impl::DecNum *)v6, a3);
      }
    }
    if (BYTE4(v6[1]))
      uprv_free(v6[0]);
  }
}

BOOL icu::number::impl::DecimalQuantity::isZeroish(icu::number::impl::DecimalQuantity *this)
{
  return *((_DWORD *)this + 4) == 0;
}

void **icu::number::impl::DecimalQuantity::setToDecNum(void **this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
  *((_BYTE *)this + 20) = 0;
  icu::number::impl::DecimalQuantity::_setToDecNum((icu::number::impl::DecimalQuantity *)this, a2, a3);
  return this;
}

uint64_t icu::number::impl::DecimalQuantity::negate(uint64_t this)
{
  *(_BYTE *)(this + 20) ^= 1u;
  return this;
}

uint64_t icu::number::impl::DecimalQuantity::adjustToZeroScale(icu::number::impl::DecimalQuantity *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 3);
  *((_DWORD *)this + 3) = 0;
  return v1;
}

double icu::number::impl::DecimalQuantity::getPluralOperand(uint64_t a1, int a2)
{
  int v2;
  double result;
  char v4;
  uint64_t v5;
  int v7;
  int v8;
  int v9;

  switch(a2)
  {
    case 1:
      v4 = *(_BYTE *)(a1 + 20);
      v5 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)a1, 1);
      if ((v4 & 1) != 0)
        return (double)-v5;
      else
        return (double)v5;
    case 2:
      v7 = 1;
      return (double)icu::number::impl::DecimalQuantity::toFractionLong((icu::number::impl::DecimalQuantity *)a1, v7);
    case 3:
      v7 = 0;
      return (double)icu::number::impl::DecimalQuantity::toFractionLong((icu::number::impl::DecimalQuantity *)a1, v7);
    case 4:
      v8 = *(_DWORD *)(a1 + 12);
      if (*(_DWORD *)(a1 + 40) < v8)
        v8 = *(_DWORD *)(a1 + 40);
      v9 = -*(_DWORD *)(a1 + 44) - v8;
      goto LABEL_15;
    case 5:
      v9 = -(*(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 44));
LABEL_15:
      v2 = v9 & ~(v9 >> 31);
      goto LABEL_16;
    case 6:
    case 7:
      v2 = *(_DWORD *)(a1 + 44);
LABEL_16:
      result = (double)v2;
      break;
    default:
      result = fabs(icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)a1));
      break;
  }
  return result;
}

uint64_t icu::number::impl::DecimalQuantity::isNegative(icu::number::impl::DecimalQuantity *this)
{
  return *((_BYTE *)this + 20) & 1;
}

uint64_t icu::number::impl::DecimalQuantity::toLong(icu::number::impl::DecimalQuantity *this, int a2)
{
  signed int v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 4);
  v3 = *((_DWORD *)this + 3) + *((_DWORD *)this + 11);
  v4 = v2 + v3 - 1;
  if (v4 >= 17)
    v5 = 17;
  else
    v5 = v2 + v3 - 1;
  if (a2)
    v6 = v5;
  else
    v6 = v4;
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = -v3;
    v9 = 4 * v6 - 4 * v3;
    do
    {
      v10 = v8 + v6;
      if (*((_BYTE *)this + 64))
      {
        LOBYTE(v11) = 0;
        if ((v10 & 0x80000000) == 0 && v2 > (int)v10)
          LOBYTE(v11) = *(_BYTE *)(*((_QWORD *)this + 6) + v10);
      }
      else if (v10 <= 0xF)
      {
        v11 = (*((_QWORD *)this + 6) >> v9) & 0xFLL;
      }
      else
      {
        LOBYTE(v11) = 0;
      }
      v7 = 10 * v7 + (char)v11;
      v9 -= 4;
    }
    while (v6-- > 0);
  }
  if ((*((_BYTE *)this + 20) & 1) != 0)
    return -v7;
  else
    return v7;
}

unint64_t icu::number::impl::DecimalQuantity::toFractionLong(icu::number::impl::DecimalQuantity *this, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t result;
  char v8;
  int v9;
  uint64_t v10;
  BOOL v11;

  v3 = *((_DWORD *)this + 11);
  v4 = ~v3;
  v5 = *((_DWORD *)this + 3);
  v6 = v5;
  if (a2)
  {
    v6 = *((_DWORD *)this + 10);
    if (v6 >= v5)
      v6 = *((_DWORD *)this + 3);
  }
  if (v6 > v4)
    return 0;
  result = 0;
  v8 = 4 * ~(v3 + v5);
  v9 = -v5;
  do
  {
    LODWORD(v10) = v9 + v4;
    if (!*((_BYTE *)this + 64))
    {
      if (v10 <= 0xF)
      {
        v10 = (*((_QWORD *)this + 6) >> v8) & 0xFLL;
        goto LABEL_14;
      }
LABEL_12:
      LOBYTE(v10) = 0;
      goto LABEL_14;
    }
    if ((v10 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v10)
      goto LABEL_12;
    LOBYTE(v10) = *(_BYTE *)(*((_QWORD *)this + 6) + v10);
LABEL_14:
    result = 10 * result + (char)v10;
    if (v4 <= v6)
      break;
    --v4;
    v8 -= 4;
  }
  while ((double)result <= 1.0e18);
  if ((a2 & 1) == 0 && result)
  {
    while (!(result % 0xA))
    {
      v11 = result > 9;
      result /= 0xAuLL;
      if (!v11)
        return 0;
    }
  }
  return result;
}

uint64_t icu::number::impl::DecimalQuantity::fractionCount(icu::number::impl::DecimalQuantity *this)
{
  int v1;

  v1 = *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 10) < v1)
    v1 = *((_DWORD *)this + 10);
  return (-*((_DWORD *)this + 11) - v1) & ~((-*((_DWORD *)this + 11) - v1) >> 31);
}

uint64_t icu::number::impl::DecimalQuantity::fractionCountWithoutTrailingZeros(icu::number::impl::DecimalQuantity *this)
{
  int v1;

  v1 = -(*((_DWORD *)this + 3) + *((_DWORD *)this + 11));
  return v1 & ~(v1 >> 31);
}

uint64_t icu::number::impl::DecimalQuantity::getExponent(icu::number::impl::DecimalQuantity *this)
{
  return *((unsigned int *)this + 11);
}

double icu::number::impl::DecimalQuantity::toDouble(icu::number::impl::DecimalQuantity *this)
{
  double v2;
  unsigned __int16 *v3;
  int v4;
  void *v5;
  int v7;
  __int128 v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)this + 24))(this) & 1) != 0)
    return NAN;
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)this + 32))(this))
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
      return -INFINITY;
    else
      return INFINITY;
  }
  else
  {
    v9 = 0;
    v12 = 0;
    v8 = 0u;
    v10 = "";
    v11 = "";
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    icu::number::impl::DecimalQuantity::toScientificString(this, (uint64_t)&v13);
    v7 = 0;
    if ((BYTE8(v13) & 0x11) != 0)
    {
      v3 = 0;
    }
    else if ((BYTE8(v13) & 2) != 0)
    {
      v3 = (unsigned __int16 *)((unint64_t)&v13 | 0xA);
    }
    else
    {
      v3 = (unsigned __int16 *)*((_QWORD *)&v14 + 1);
    }
    if ((SWORD4(v13) & 0x8000u) == 0)
      v4 = WORD4(v13) >> 5;
    else
      v4 = HIDWORD(v13);
    v2 = sub_18BCC4EA8((double *)&v8, v3, v4, &v7);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v13);
  }
  return v2;
}

uint64_t icu::number::impl::DecimalQuantity::adjustExponent(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) += a2;
  return this;
}

BOOL icu::number::impl::DecimalQuantity::resetExponent(icu::number::impl::DecimalQuantity *this)
{
  _BOOL8 result;

  result = icu::number::impl::DecimalQuantity::adjustMagnitude(this, *((_DWORD *)this + 11));
  *((_DWORD *)this + 11) = 0;
  return result;
}

BOOL icu::number::impl::DecimalQuantity::hasIntegerValue(icu::number::impl::DecimalQuantity *this)
{
  return *((_DWORD *)this + 3) >= 0;
}

uint64_t icu::number::impl::DecimalQuantity::getUpperDisplayMagnitude(icu::number::impl::DecimalQuantity *this)
{
  int v1;

  v1 = *((_DWORD *)this + 4) + *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 9) > v1)
    v1 = *((_DWORD *)this + 9);
  return (v1 - 1);
}

uint64_t icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude(icu::number::impl::DecimalQuantity *this)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *((_DWORD *)this + 3);
  v2 = *((_DWORD *)this + 10);
  if ((int)v2 >= (int)v1)
    return v1;
  else
    return v2;
}

uint64_t icu::number::impl::DecimalQuantity::getDigit(icu::number::impl::DecimalQuantity *this, int a2)
{
  uint64_t v2;

  LODWORD(v2) = a2 - *((_DWORD *)this + 3);
  if (!*((_BYTE *)this + 64))
  {
    if (v2 <= 0xF)
    {
      v2 = (*((_QWORD *)this + 6) >> (4 * v2)) & 0xFLL;
      return (char)v2;
    }
    goto LABEL_6;
  }
  if ((v2 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v2)
  {
LABEL_6:
    LOBYTE(v2) = 0;
    return (char)v2;
  }
  LOBYTE(v2) = *(_BYTE *)(*((_QWORD *)this + 6) + v2);
  return (char)v2;
}

uint64_t icu::number::impl::DecimalQuantity::getDigitPos(icu::number::impl::DecimalQuantity *this, unsigned int a2)
{
  uint64_t v2;

  if (!*((_BYTE *)this + 64))
  {
    if (a2 <= 0xF)
    {
      v2 = (*((_QWORD *)this + 6) >> (4 * a2)) & 0xFLL;
      return (char)v2;
    }
    goto LABEL_6;
  }
  if ((a2 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (signed int)a2)
  {
LABEL_6:
    LOBYTE(v2) = 0;
    return (char)v2;
  }
  LOBYTE(v2) = *(_BYTE *)(*((_QWORD *)this + 6) + a2);
  return (char)v2;
}

uint64_t icu::number::impl::DecimalQuantity::signum(icu::number::impl::DecimalQuantity *this)
{
  int v3;
  unsigned int v4;
  unsigned int v5;

  if (*((_DWORD *)this + 4))
  {
    if ((*((_BYTE *)this + 20) & 1) != 0)
      return 0;
    else
      return 3;
  }
  else
  {
    v3 = (*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)this + 32))(this);
    if ((*((_BYTE *)this + 20) & 1) != 0)
      v4 = 0;
    else
      v4 = 3;
    if ((*((_BYTE *)this + 20) & 1) != 0)
      v5 = 1;
    else
      v5 = 2;
    if (v3)
      return v4;
    else
      return v5;
  }
}

uint64_t icu::number::impl::DecimalQuantity::isInfinite(icu::number::impl::DecimalQuantity *this)
{
  return (*((unsigned __int8 *)this + 20) >> 1) & 1;
}

uint64_t icu::number::impl::DecimalQuantity::isNaN(icu::number::impl::DecimalQuantity *this)
{
  return (*((unsigned __int8 *)this + 20) >> 2) & 1;
}

void **icu::number::impl::DecimalQuantity::setToInt(void **this, int a2)
{
  icu::number::impl::DecimalQuantity::setBcdToZero(this);
  *((_BYTE *)this + 20) = 0;
  if (a2 == 0x80000000)
  {
    *((_BYTE *)this + 20) = 1;
    a2 = 0x80000000;
  }
  else if (a2 < 0)
  {
    *((_BYTE *)this + 20) = 1;
    a2 = -a2;
  }
  else if (!a2)
  {
    return this;
  }
  icu::number::impl::DecimalQuantity::_setToInt((uint64_t)this, a2);
  icu::number::impl::DecimalQuantity::compact((icu::number::impl::DecimalQuantity *)this);
  return this;
}

uint64_t icu::number::impl::DecimalQuantity::_setToInt(uint64_t this, int a2)
{
  unint64_t v2;
  int v3;
  int v4;
  __int128 v5;
  unsigned int v6;

  if (a2 == 0x80000000)
  {
    *(_QWORD *)(this + 48) = 0x2147483648;
    *(_DWORD *)(this + 12) = 0;
    v4 = 10;
  }
  else
  {
    if (a2)
    {
      v2 = 0;
      v3 = 16;
      do
      {
        *((_QWORD *)&v5 + 1) = a2
                             - 10
                             * ((((unint64_t)a2 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
        *(_QWORD *)&v5 = v2;
        v2 = v5 >> 4;
        v6 = a2 + 9;
        --v3;
        a2 /= 10;
      }
      while (v6 > 0x12);
    }
    else
    {
      v2 = 0;
      v3 = 16;
    }
    *(_QWORD *)(this + 48) = v2 >> (4 * v3);
    *(_DWORD *)(this + 12) = 0;
    v4 = 16 - v3;
  }
  *(_DWORD *)(this + 16) = v4;
  return this;
}

void icu::number::impl::DecimalQuantity::readLongToBcd(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  unint64_t v9;

  v2 = a2;
  if (a2 <= 0x2386F26FC0FFFFLL)
  {
    v6 = 0;
    v7 = 16;
    if (a2)
    {
      do
      {
        *((_QWORD *)&v8 + 1) = ((int)v2 % 10);
        *(_QWORD *)&v8 = v6;
        v6 = v8 >> 4;
        --v7;
        v9 = v2 + 9;
        v2 /= 10;
      }
      while (v9 > 0x12);
    }
    *((_QWORD *)this + 6) = v6 >> (4 * v7);
    *((_DWORD *)this + 3) = 0;
    LODWORD(v4) = 16 - v7;
  }
  else
  {
    icu::number::impl::DecimalQuantity::ensureCapacity(this, 40);
    v4 = 0;
    do
    {
      *(_BYTE *)(*((_QWORD *)this + 6) + v4++) = (char)v2 % 10;
      v5 = v2 + 9;
      v2 /= 10;
    }
    while (v5 > 0x12);
    *((_DWORD *)this + 3) = 0;
  }
  *((_DWORD *)this + 4) = v4;
}

uint64_t icu::number::impl::DecimalQuantity::readIntToBcd(uint64_t this, int a2)
{
  unint64_t v2;
  int v3;
  __int128 v4;
  unsigned int v5;

  v2 = 0;
  v3 = 16;
  if (a2)
  {
    do
    {
      *((_QWORD *)&v4 + 1) = a2
                           - 10
                           * ((((unint64_t)a2 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
      *(_QWORD *)&v4 = v2;
      v2 = v4 >> 4;
      v5 = a2 + 9;
      --v3;
      a2 /= 10;
    }
    while (v5 > 0x12);
  }
  *(_QWORD *)(this + 48) = v2 >> (4 * v3);
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 16 - v3;
  return this;
}

void icu::number::impl::DecimalQuantity::_setToLong(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  unint64_t v3;
  int v4;
  __int128 v5;
  unsigned int v6;
  UErrorCode v7;
  void *v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a2 == 0x8000000000000000)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    *(_OWORD *)v8 = 0u;
    v9 = 0u;
    icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v8);
    v7 = U_ZERO_ERROR;
    icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)v8, "9.223372036854775808E+18", &v7);
    if (v7 <= U_ZERO_ERROR)
    {
      *((_BYTE *)this + 20) |= 1u;
      icu::number::impl::DecimalQuantity::readDecNumberToBcd(this, (int **)v8);
    }
    if (BYTE4(v8[1]))
      uprv_free(v8[0]);
  }
  else if (a2 > 0x7FFFFFFF)
  {
    icu::number::impl::DecimalQuantity::readLongToBcd(this, a2);
  }
  else
  {
    v3 = 0;
    v4 = 16;
    if ((_DWORD)a2)
    {
      do
      {
        *((_QWORD *)&v5 + 1) = a2
                             - 10
                             * ((((unint64_t)(int)a2 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64) >> 3);
        *(_QWORD *)&v5 = v3;
        v3 = v5 >> 4;
        v6 = a2 + 9;
        --v4;
        LODWORD(a2) = (int)a2 / 10;
      }
      while (v6 > 0x12);
    }
    *((_QWORD *)this + 6) = v3 >> (4 * v4);
    *((_DWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = 16 - v4;
  }
}

void icu::number::impl::DecimalQuantity::readDecNumberToBcd(icu::number::impl::DecimalQuantity *this, int **a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;

  v3 = *a2;
  v4 = **a2;
  if ((int)v4 <= 16)
  {
    if ((int)v4 < 1)
    {
      v5 = 0;
    }
    else
    {
      v7 = 0;
      v5 = 0;
      v8 = (unsigned __int8 *)v3 + 9;
      do
      {
        v9 = *v8++;
        v5 |= (unint64_t)v9 << v7;
        v7 += 4;
      }
      while (4 * v4 != v7);
    }
    *((_QWORD *)this + 6) = v5;
    LODWORD(v5) = *v3;
  }
  else
  {
    icu::number::impl::DecimalQuantity::ensureCapacity(this, v4);
    LODWORD(v5) = *v3;
    if (*v3 >= 1)
    {
      v6 = 0;
      do
      {
        *(_BYTE *)(*((_QWORD *)this + 6) + v6) = *((_BYTE *)v3 + v6 + 9);
        ++v6;
        v5 = *v3;
      }
      while (v6 < v5);
    }
  }
  *((_DWORD *)this + 3) = v3[1];
  *((_DWORD *)this + 4) = v5;
}

void **icu::number::impl::DecimalQuantity::setToDouble(void **this, double a2)
{
  char v4;

  icu::number::impl::DecimalQuantity::setBcdToZero(this);
  *((_BYTE *)this + 20) = 0;
  if ((*(_QWORD *)&a2 & 0x8000000000000000) != 0)
  {
    v4 = 1;
    *((_BYTE *)this + 20) = 1;
    a2 = -a2;
  }
  else
  {
    v4 = 0;
  }
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *((_BYTE *)this + 20) = v4 | 2;
  }
  else if (a2 != 0.0)
  {
    icu::number::impl::DecimalQuantity::_setToDoubleFast((icu::number::impl::DecimalQuantity *)this, a2);
    icu::number::impl::DecimalQuantity::compact((icu::number::impl::DecimalQuantity *)this);
  }
  return this;
}

void icu::number::impl::DecimalQuantity::_setToDoubleFast(icu::number::impl::DecimalQuantity *this, double a2)
{
  uint64_t v3;
  double v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  BOOL v12;
  double v13;
  uint64_t v14;

  *((_BYTE *)this + 21) = 1;
  *((double *)this + 3) = a2;
  *((_DWORD *)this + 8) = 0;
  v3 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  if (v3 <= 0x433 && (double)(uint64_t)a2 == a2)
  {
    icu::number::impl::DecimalQuantity::_setToLong(this, (uint64_t)a2);
  }
  else if ((_DWORD)v3 != 2047 && (_DWORD)v3)
  {
    v5 = (double)(1075 - (int)v3) / 3.32192809;
    v6 = (int)v5;
    if ((int)v5 < 0)
    {
      if (v6 > 0xFFFFFFEA)
      {
        v11 = (int)v5;
      }
      else
      {
        v10 = (int)v5;
        do
        {
          v11 = v10 + 22;
          a2 = a2 / 1.0e22;
          v12 = __CFADD__(v10, 43);
          v10 += 22;
        }
        while (!v12);
      }
      v13 = a2 / dbl_18BE28648[-v11];
    }
    else
    {
      if (v6 < 0x16)
      {
        v8 = (int)v5;
      }
      else
      {
        v7 = (int)v5;
        do
        {
          a2 = a2 * 1.0e22;
          v8 = v7 - 22;
          v9 = v7 > 0x2B;
          v7 -= 22;
        }
        while (v9);
      }
      v13 = a2 * dbl_18BE28648[v8];
    }
    v14 = (uint64_t)uprv_round(v13);
    if (v14)
    {
      icu::number::impl::DecimalQuantity::_setToLong(this, v14);
      *((_DWORD *)this + 3) -= v6;
    }
  }
  else
  {
    icu::number::impl::DecimalQuantity::convertToAccurateDouble(this);
  }
}

void icu::number::impl::DecimalQuantity::convertToAccurateDouble(icu::number::impl::DecimalQuantity *this)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  char v6[8];
  uint64_t v7;
  __int16 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 8);
  *(_QWORD *)v6 = 0;
  v7 = 0;
  v8 = 0;
  v5 = 0;
  v3 = 0;
  v4 = 0;
  icu::double_conversion::DoubleToStringConverter::DoubleToAscii(0, 0, v6, 0x12u, &v5, &v4, &v3, *((double *)this + 3));
  icu::number::impl::DecimalQuantity::setBcdToZero((void **)this);
  icu::number::impl::DecimalQuantity::readDoubleConversionToBcd(this, v6, v4, v3);
  *((_DWORD *)this + 3) += v2;
  *((_BYTE *)this + 65) = 1;
}

void icu::number::impl::DecimalQuantity::readDoubleConversionToBcd(icu::number::impl::DecimalQuantity *this, const char *a2, int a3, int a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a3 <= 16)
  {
    v10 = a3 - 1;
    if (a3 < 1)
    {
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v12 |= (a2[v10] - 48) << v11;
        v11 += 4;
        --v10;
      }
      while (4 * a3 != v11);
    }
    *((_QWORD *)this + 6) = v12;
  }
  else
  {
    icu::number::impl::DecimalQuantity::ensureCapacity(this, a3);
    v8 = 0;
    v9 = a3 - 1;
    do
      *(_BYTE *)(*((_QWORD *)this + 6) + v8++) = a2[v9--] - 48;
    while (a3 != v8);
  }
  *((_DWORD *)this + 3) = a4 - a3;
  *((_DWORD *)this + 4) = a3;
}

uint64_t icu::number::impl::DecimalQuantity::setToDecNumber(uint64_t a1, const char *a2, int a3, UErrorCode *a4)
{
  void *v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  icu::number::impl::DecimalQuantity::setBcdToZero((void **)a1);
  *(_BYTE *)(a1 + 20) = 0;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v9);
  icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)v9, a2, a3, a4);
  icu::number::impl::DecimalQuantity::_setToDecNum((icu::number::impl::DecimalQuantity *)a1, (const icu::number::impl::DecNum *)v9, a4);
  if (BYTE4(v9[1]))
    uprv_free(v9[0]);
  return a1;
}

void icu::number::impl::DecimalQuantity::_setToDecNum(icu::number::impl::DecimalQuantity *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  char v5;

  if (*(int *)a3 <= 0)
  {
    if (icu::number::impl::DecNum::isNegative(a2))
      *((_BYTE *)this + 20) |= 1u;
    if (icu::number::impl::DecNum::isNaN(a2))
    {
      v5 = *((_BYTE *)this + 20) | 4;
LABEL_8:
      *((_BYTE *)this + 20) = v5;
      return;
    }
    if (icu::number::impl::DecNum::isInfinity(a2))
    {
      v5 = *((_BYTE *)this + 20) | 2;
      goto LABEL_8;
    }
    if (!icu::number::impl::DecNum::isZero(a2))
    {
      icu::number::impl::DecimalQuantity::readDecNumberToBcd(this, (int **)a2);
      icu::number::impl::DecimalQuantity::compact(this);
    }
  }
}

void icu::number::impl::DecimalQuantity::fromExponentString(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  int32_t v6;
  int32_t v7;
  int32_t v8;
  int32_t v9;
  int32_t v10;
  int32_t IndexOf;
  int32_t v12;
  int32_t v13;
  int32_t v14;
  int VisibleFractionCount;
  void *v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  int v29;
  void *v30;
  void *v31;
  _BOOL4 v32;
  _BYTE v33[64];
  _BYTE v34[64];
  const char *v35[8];
  __int128 v36;
  __int128 v37;
  void *v38[7];
  int v39;
  int v40;
  UChar *v41[8];
  _BYTE v42[72];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(__int16 *)(a1 + 8) < 0)
    v6 = *(_DWORD *)(a1 + 12);
  else
    v6 = *(unsigned __int16 *)(a1 + 8) >> 5;
  if ((icu::UnicodeString::doIndexOf(a1, 0x65u, 0, v6) & 0x80000000) != 0
    && (*(__int16 *)(a1 + 8) < 0 ? (v7 = *(_DWORD *)(a1 + 12)) : (v7 = *(unsigned __int16 *)(a1 + 8) >> 5),
        (icu::UnicodeString::doIndexOf(a1, 0x63u, 0, v7) & 0x80000000) != 0
     && (*(__int16 *)(a1 + 8) < 0 ? (v8 = *(_DWORD *)(a1 + 12)) : (v8 = *(unsigned __int16 *)(a1 + 8) >> 5),
         (icu::UnicodeString::doIndexOf(a1, 0x45u, 0, v8) & 0x80000000) != 0
      && (*(__int16 *)(a1 + 8) < 0 ? (v9 = *(_DWORD *)(a1 + 12)) : (v9 = *(unsigned __int16 *)(a1 + 8) >> 5),
          (icu::UnicodeString::doIndexOf(a1, 0x43u, 0, v9) & 0x80000000) != 0))))
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)a3 = off_1E2262A30;
    *(_DWORD *)(a3 + 36) = 0;
    *(_DWORD *)(a3 + 44) = 0;
    *(_BYTE *)(a3 + 65) = 0;
    icu::number::impl::DecimalQuantity::setBcdToZero((void **)a3);
    *(_BYTE *)(a3 + 20) = 0;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, (UChar **)a1);
    VisibleFractionCount = icu::number::impl::DecimalQuantity::getVisibleFractionCount((uint64_t)v33);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v33);
    memset(&v35[1], 0, 56);
    v35[0] = (char *)&v35[1] + 5;
    LODWORD(v35[1]) = 40;
    icu::CharString::appendInvariantChars((icu::CharString *)v35, (const icu::UnicodeString *)a1, a2);
    icu::number::impl::DecimalQuantity::setToDecNumber(a3, v35[0], (int)v35[7], a2);
    *(_DWORD *)(a3 + 40) = -VisibleFractionCount;
    if (BYTE4(v35[1]))
      uprv_free((void *)v35[0]);
  }
  else
  {
    if (*(__int16 *)(a1 + 8) < 0)
      v10 = *(_DWORD *)(a1 + 12);
    else
      v10 = *(unsigned __int16 *)(a1 + 8) >> 5;
    IndexOf = icu::UnicodeString::doLastIndexOf((icu::UnicodeString *)a1, 101, 0, v10);
    if (IndexOf < 0)
    {
      v12 = *(__int16 *)(a1 + 8) < 0 ? *(_DWORD *)(a1 + 12) : *(unsigned __int16 *)(a1 + 8) >> 5;
      IndexOf = icu::UnicodeString::doLastIndexOf((icu::UnicodeString *)a1, 99, 0, v12);
      if (IndexOf < 0)
      {
        v13 = *(__int16 *)(a1 + 8) < 0 ? *(_DWORD *)(a1 + 12) : *(unsigned __int16 *)(a1 + 8) >> 5;
        IndexOf = icu::UnicodeString::doLastIndexOf((icu::UnicodeString *)a1, 69, 0, v13);
        if (IndexOf < 0)
        {
          if (*(__int16 *)(a1 + 8) < 0)
            v14 = *(_DWORD *)(a1 + 12);
          else
            v14 = *(unsigned __int16 *)(a1 + 8) >> 5;
          IndexOf = icu::UnicodeString::doLastIndexOf((icu::UnicodeString *)a1, 67, 0, v14);
        }
      }
    }
    v17 = IndexOf + 1;
    memset(v42, 0, 64);
    v18 = *(unsigned __int16 *)(a1 + 8);
    if ((v18 & 0x8000) != 0)
      v19 = *(_DWORD *)(a1 + 12);
    else
      v19 = v18 >> 5;
    icu::UnicodeString::tempSubString((icu::UnicodeString *)a1, IndexOf + 1, v19 - v17, (icu::UnicodeString *)v42);
    v21 = *(unsigned __int16 *)(a1 + 8);
    if (*(__int16 *)(a1 + 8) < 0)
      v22 = *(_DWORD *)(a1 + 12);
    else
      v22 = v21 >> 5;
    if (v22 <= v17)
    {
      v24 = 0;
    }
    else
    {
      if ((v21 & 2) != 0)
        v23 = a1 + 10;
      else
        v23 = *(_QWORD *)(a1 + 24);
      v24 = *(unsigned __int16 *)(v23 + 2 * v17) == 45;
    }
    v32 = v24;
    v25 = icu::ICU_Utility::parseAsciiInteger((icu::ICU_Utility *)v42, (const icu::UnicodeString *)&v32, v20);
    memset(&v41[4], 0, 32);
    if (v24)
      v26 = -v25;
    else
      v26 = v25;
    memset(v41, 0, 32);
    icu::UnicodeString::tempSubString((icu::UnicodeString *)a1, 0, IndexOf, (icu::UnicodeString *)v41);
    memset(&v38[1], 0, 48);
    v40 = 0;
    v38[0] = (char *)&v38[1] + 5;
    LODWORD(v38[1]) = 40;
    v39 = 0;
    icu::CharString::appendInvariantChars((icu::CharString *)v38, (const icu::UnicodeString *)v41, a2);
    v36 = 0u;
    v37 = 0u;
    memset(v35, 0, sizeof(v35));
    icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v35);
    icu::number::impl::DecNum::setTo((icu::number::impl::DecNum *)v35, (const char *)v38[0], v39, a2);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)a3 = off_1E2262A30;
    *(_DWORD *)(a3 + 36) = 0;
    *(_DWORD *)(a3 + 44) = 0;
    *(_BYTE *)(a3 + 65) = 0;
    icu::number::impl::DecimalQuantity::setBcdToZero((void **)a3);
    *(_BYTE *)(a3 + 20) = 0;
    icu::number::impl::DecimalQuantity::setBcdToZero((void **)a3);
    *(_BYTE *)(a3 + 20) = 0;
    icu::number::impl::DecimalQuantity::_setToDecNum((icu::number::impl::DecimalQuantity *)a3, (const icu::number::impl::DecNum *)v35, a2);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v34, v41);
    v27 = icu::number::impl::DecimalQuantity::getVisibleFractionCount((uint64_t)v34);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v34);
    v29 = *(_DWORD *)(a3 + 44) + v26;
    *(_DWORD *)(a3 + 40) = -v27;
    *(_DWORD *)(a3 + 44) = v29;
    if (BYTE4(v35[1]))
      uprv_free((void *)v35[0]);
    v30 = (void *)BYTE4(v38[1]);
    if (BYTE4(v38[1]))
      uprv_free(v38[0]);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v41);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)v42);
  }
}

uint64_t icu::number::impl::DecimalQuantity::getVisibleFractionCount(uint64_t a1)
{
  int32_t v2;
  int v3;
  uint64_t result;
  BOOL v5;
  int v6;
  int v7;

  if (*(__int16 *)(a1 + 8) < 0)
    v2 = *(_DWORD *)(a1 + 12);
  else
    v2 = *(unsigned __int16 *)(a1 + 8) >> 5;
  v3 = icu::UnicodeString::doIndexOf((icu::UnicodeString *)a1, 46, 0, v2);
  result = 0;
  v5 = __CFADD__(v3, 1);
  v6 = v3 + 1;
  if (!v5)
  {
    if (*(__int16 *)(a1 + 8) < 0)
      v7 = *(_DWORD *)(a1 + 12);
    else
      v7 = *(unsigned __int16 *)(a1 + 8) >> 5;
    return (v7 - v6);
  }
  return result;
}

BOOL icu::number::impl::DecimalQuantity::fitsInLong(icu::number::impl::DecimalQuantity *this, int a2)
{
  uint64_t v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int Digit;
  char v12;
  int v13;

  if (((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)this + 32))(this) & 1) != 0
    || ((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)this + 24))(this) & 1) != 0)
  {
    return 0;
  }
  v4 = *((unsigned int *)this + 4);
  if (!(_DWORD)v4)
    return 1;
  v5 = *((_DWORD *)this + 3);
  if (v5 + *((_DWORD *)this + 11) < 0 && !a2)
    return 0;
  v7 = v4 + v5 - 1;
  if (v7 < 18)
    return 1;
  if (v7 != 18)
    return 0;
  if ((int)v4 < 1)
    return *((_BYTE *)this + 20) & 1;
  v8 = 0;
  v9 = -v4;
  v10 = &byte_18BE286F8;
  while (1)
  {
    Digit = icu::number::impl::DecimalQuantity::getDigit(this, (int)v8 + 18);
    v13 = *v10++;
    v12 = v13;
    if (v13 != Digit)
      break;
    if (v9 == --v8)
      return *((_BYTE *)this + 20) & 1;
  }
  return Digit < v12;
}

void *icu::number::impl::DecimalQuantity::toScientificString@<X0>(icu::number::impl::DecimalQuantity *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *result;
  int64_t v8;
  char v9;
  uint64_t v10;
  uint64_t quot;
  uint64_t v13;
  void *v14;
  __int16 v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  __int16 v20;
  unsigned __int16 v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v20 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
  }
  v4 = *((_DWORD *)this + 4);
  if (!v4)
    return (void *)icu::UnicodeString::doAppend(a2, (uint64_t)"0", 0, 0xFFFFFFFFLL);
  v5 = v4 - 1;
  if (*((_BYTE *)this + 64))
  {
    if (v4 >= 1)
    {
      LOBYTE(v6) = *(_BYTE *)(*((_QWORD *)this + 6) + v5);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  if (v5 > 0xF)
  {
LABEL_9:
    LOBYTE(v6) = 0;
    goto LABEL_11;
  }
  v6 = (*((_QWORD *)this + 6) >> (4 * v5)) & 0xFLL;
LABEL_11:
  icu::UnicodeString::append(a2, (char)v6 + 48);
  if (v4 > 1)
  {
    v20 = 46;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
    v8 = (v4 - 2);
    v9 = 4 * v8;
    while (*((_BYTE *)this + 64))
    {
      if (v8 >= *((int *)this + 4))
        goto LABEL_17;
      LOBYTE(v10) = *(_BYTE *)(*((_QWORD *)this + 6) + v8);
LABEL_19:
      icu::UnicodeString::append(a2, (char)v10 + 48);
      v9 -= 4;
      if (v8-- <= 0)
        goto LABEL_21;
    }
    if ((unint64_t)v8 <= 0xF)
    {
      v10 = (*((_QWORD *)this + 6) >> (v9 & 0xFC)) & 0xFLL;
      goto LABEL_19;
    }
LABEL_17:
    LOBYTE(v10) = 0;
    goto LABEL_19;
  }
LABEL_21:
  v20 = 69;
  icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
  quot = *((_DWORD *)this + 3) + v5 + *((_DWORD *)this + 11);
  if ((_DWORD)quot == 0x80000000)
  {
    icu::UnicodeString::UnicodeString((uint64_t)&v20, (uint64_t)L"-2147483648", 0xFFFFFFFFLL);
    if ((v21 & 0x8000u) == 0)
      v13 = v21 >> 5;
    else
      v13 = v22;
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v20, 0, v13);
    return icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v20);
  }
  if ((quot & 0x80000000) != 0)
  {
    quot = -(int)quot;
    v15 = 45;
  }
  else
  {
    v20 = 43;
    result = (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
    if ((_DWORD)quot)
      goto LABEL_31;
    v15 = 48;
  }
  v20 = v15;
  result = (void *)icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
LABEL_31:
  v16 = *(unsigned __int16 *)(a2 + 8);
  v17 = (__int16)v16;
  v18 = v16 >> 5;
  if (v17 >= 0)
    v19 = v18;
  else
    v19 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)quot)
  {
    do
    {
      quot = div(quot, 10).quot;
      result = (void *)icu::UnicodeString::replace((icu::UnicodeString *)a2, v19, 0, HIDWORD(quot) + 48);
    }
    while ((int)quot > 0);
  }
  return result;
}

uint64_t sub_18BD0F1D8(uint64_t a1, size_t size, int a3)
{
  int v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = a1 + 13;
  *(_DWORD *)(a1 + 8) = 20;
  *(_BYTE *)(a1 + 12) = 0;
  if ((int)size >= 21 && a3 <= 0)
  {
    v4 = size;
    v5 = uprv_malloc(size);
    if (v5)
    {
      v6 = v5;
      if (*(_BYTE *)(a1 + 12))
        uprv_free(*(void **)a1);
      *(_QWORD *)a1 = v6;
      *(_DWORD *)(a1 + 8) = v4;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }
  return a1;
}

void icu::number::impl::DecimalQuantity::truncate(icu::number::impl::DecimalQuantity *this)
{
  int v1;

  v1 = *((_DWORD *)this + 3);
  if (v1 < 0)
  {
    icu::number::impl::DecimalQuantity::shiftRight((uint64_t)this, -v1);
    *((_DWORD *)this + 3) = 0;
    icu::number::impl::DecimalQuantity::compact(this);
  }
}

uint64_t icu::number::impl::DecimalQuantity::shiftRight(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(this + 64))
  {
    v2 = *(_DWORD *)(this + 16);
    if (v2 <= a2)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      v3 = 0;
      do
      {
        *(_BYTE *)(*(_QWORD *)(this + 48) + v3) = *(_BYTE *)(*(_QWORD *)(this + 48) + v3 + a2);
        ++v3;
        v2 = *(_DWORD *)(this + 16);
      }
      while (v3 < v2 - a2);
    }
    if ((int)v3 < v2)
    {
      v4 = 0;
      do
      {
        *(_BYTE *)(*(_QWORD *)(this + 48) + v3 + v4) = 0;
        v2 = *(_DWORD *)(this + 16);
        ++v4;
      }
      while (v2 > (int)v3 + (int)v4);
    }
  }
  else
  {
    *(_QWORD *)(this + 48) >>= 4 * a2;
    v2 = *(_DWORD *)(this + 16);
  }
  *(_DWORD *)(this + 12) += a2;
  *(_DWORD *)(this + 16) = v2 - a2;
  return this;
}

void icu::number::impl::DecimalQuantity::roundToNickel(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  icu::number::impl::DecimalQuantity::roundToMagnitude(a1, a2, a3, 1, a4);
}

void icu::number::impl::DecimalQuantity::roundToMagnitude(uint64_t a1, int a2, unsigned int a3, int a4, int *a5)
{
  int v8;
  BOOL v9;
  unsigned int v10;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  signed int v18;
  signed int v19;
  int v20;
  unsigned int v21;
  char v22;
  char v23;
  int v24;
  int v25;
  unsigned int v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  char v32;
  int v33;
  unsigned int v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  char v47;
  int v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  int v54;
  _BOOL4 v55;

  v55 = a3 < 4;
  while (1)
  {
    v8 = *(_DWORD *)(a1 + 12);
    v9 = a2 - v8 <= a2 || v8 <= 0;
    if (v9)
      v10 = a2 - v8;
    else
      v10 = 0x80000000;
    if (a2 - v8 < a2 && v8 < 0)
      v12 = 0x7FFFFFFF;
    else
      v12 = v10;
    if (*(_BYTE *)(a1 + 64))
    {
      if (v12 < 0)
      {
        LODWORD(v13) = 0;
        goto LABEL_24;
      }
      if (*(_DWORD *)(a1 + 16) > v12)
      {
        LODWORD(v13) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v12);
        goto LABEL_22;
      }
LABEL_19:
      LODWORD(v13) = 0;
      goto LABEL_22;
    }
    if (v12 > 0xF)
      goto LABEL_19;
    v13 = (*(_QWORD *)(a1 + 48) >> (4 * v12)) & 0xFLL;
LABEL_22:
    if (v12 > 0)
    {
      v14 = 0;
      goto LABEL_29;
    }
LABEL_24:
    if (!*(_BYTE *)(a1 + 21) && (!a4 || !(_DWORD)v13 || (_DWORD)v13 == 5))
      return;
    v14 = 1;
LABEL_29:
    v15 = *(_DWORD *)(a1 + 16);
    if (!v15)
      return;
    v16 = v12 == 0x80000000 ? 0x80000000 : v12 - 1;
    if (*(_BYTE *)(a1 + 64))
    {
      LODWORD(v17) = 0;
      if ((v16 & 0x80000000) == 0 && v15 > (int)v16)
        LODWORD(v17) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v16);
    }
    else if (v16 <= 0xF)
    {
      v17 = (*(_QWORD *)(a1 + 48) >> (4 * v16)) & 0xFLL;
    }
    else
    {
      LODWORD(v17) = 0;
    }
    if (!*(_BYTE *)(a1 + 21))
      break;
    v54 = v14;
    if (v12 >= -2147483646)
      v18 = v12 - 2;
    else
      v18 = 0x80000000;
    v19 = uprv_max(0, v15 - 14);
    switch((int)v17)
    {
      case 0:
        if (a4)
        {
          switch((int)v13)
          {
            case 0:
            case 5:
              break;
            case 2:
            case 7:
              goto LABEL_101;
            default:
              goto LABEL_104;
          }
        }
        if (v18 < v19)
          goto LABEL_60;
        if (v12 <= -2147483646)
          v20 = -2147483646;
        else
          v20 = v12;
        v21 = v20 - 1;
        v22 = 4 * v20 - 8;
        while (1)
        {
          --v21;
          if (*(_BYTE *)(a1 + 64))
          {
            if ((v21 & 0x80000000) == 0
              && *(_DWORD *)(a1 + 16) > (signed int)v21
              && *(_BYTE *)(*(_QWORD *)(a1 + 48) + v21))
            {
              goto LABEL_105;
            }
          }
          else if (v21 <= 0xF && ((*(_QWORD *)(a1 + 48) >> v22) & 0xF) != 0)
          {
            goto LABEL_105;
          }
          v22 -= 4;
          if ((int)v21 <= v19)
          {
LABEL_60:
            v23 = 0;
            v24 = 1;
            goto LABEL_106;
          }
        }
      case 4:
        if (a4 && (_DWORD)v13 != 7 && (_DWORD)v13 != 2)
          goto LABEL_104;
        if (v18 < v19)
          goto LABEL_98;
        if (v12 <= -2147483646)
          v25 = -2147483646;
        else
          v25 = v12;
        v26 = v25 - 1;
        v27 = 4 * v25 - 8;
        while (2)
        {
          --v26;
          if (*(_BYTE *)(a1 + 64))
          {
            if ((v26 & 0x80000000) != 0 || *(_DWORD *)(a1 + 16) <= (signed int)v26)
              break;
            LODWORD(v28) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v26);
          }
          else
          {
            if (v26 > 0xF)
              break;
            v28 = (*(_QWORD *)(a1 + 48) >> v27) & 0xFLL;
          }
          if ((_DWORD)v28 == 9)
          {
            v24 = 0;
            v27 -= 4;
            v29 = 2;
            v23 = 1;
            if ((int)v26 <= v19)
              goto LABEL_127;
            continue;
          }
          break;
        }
LABEL_105:
        v23 = 0;
        v24 = 0;
LABEL_106:
        v29 = 1;
        goto LABEL_127;
      case 5:
        if (a4 && (_DWORD)v13 != 7 && (_DWORD)v13 != 2)
          goto LABEL_104;
        if (v18 < v19)
          goto LABEL_98;
        if (v12 <= -2147483646)
          v30 = -2147483646;
        else
          v30 = v12;
        v31 = v30 - 1;
        v32 = 4 * v30 - 8;
        do
        {
          --v31;
          if (*(_BYTE *)(a1 + 64))
          {
            if ((v31 & 0x80000000) == 0
              && *(_DWORD *)(a1 + 16) > (signed int)v31
              && *(_BYTE *)(*(_QWORD *)(a1 + 48) + v31))
            {
              goto LABEL_110;
            }
          }
          else if (v31 <= 0xF && ((*(_QWORD *)(a1 + 48) >> v32) & 0xF) != 0)
          {
            goto LABEL_110;
          }
          v32 -= 4;
        }
        while ((int)v31 > v19);
LABEL_98:
        v24 = 0;
        v29 = 2;
        v23 = 1;
        goto LABEL_127;
      case 9:
        if (a4)
        {
          switch((int)v13)
          {
            case 2:
            case 7:
              goto LABEL_101;
            case 4:
            case 9:
              break;
            default:
              goto LABEL_104;
          }
        }
        if (v18 < v19)
        {
          v23 = 0;
          v29 = 3;
          v24 = 1;
          goto LABEL_127;
        }
        if (v12 <= -2147483646)
          v33 = -2147483646;
        else
          v33 = v12;
        v34 = v33 - 1;
        v35 = 4 * v33 - 8;
        break;
      default:
        if (!a4 || (_DWORD)v13 == 2 || (_DWORD)v13 == 7)
        {
LABEL_101:
          v23 = 0;
          v24 = 0;
          if ((char)v17 < 5)
            v29 = 1;
          else
            v29 = 3;
          goto LABEL_127;
        }
LABEL_104:
        if ((char)v13 < 2)
          goto LABEL_105;
        if (v13 < 5)
          goto LABEL_110;
        v23 = 0;
        v24 = 0;
        if (v13 < 7)
          v29 = 1;
        else
          v29 = 3;
        goto LABEL_127;
    }
    while (1)
    {
      --v34;
      if (*(_BYTE *)(a1 + 64))
        break;
      if (v34 > 0xF)
        goto LABEL_110;
      v36 = (*(_QWORD *)(a1 + 48) >> v35) & 0xFLL;
LABEL_121:
      if ((_DWORD)v36 != 9)
        goto LABEL_110;
      v23 = 0;
      v35 -= 4;
      v29 = 3;
      v24 = 1;
      if ((int)v34 <= v19)
        goto LABEL_127;
    }
    if ((v34 & 0x80000000) == 0 && *(_DWORD *)(a1 + 16) > (signed int)v34)
    {
      LODWORD(v36) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v34);
      goto LABEL_121;
    }
LABEL_110:
    v23 = 0;
    v24 = 0;
    v29 = 3;
LABEL_127:
    if (a3 <= 3)
      v23 = 0;
    if ((v24 & v55 & 1) == 0 && (v23 & 1) == 0)
    {
      v15 = *(_DWORD *)(a1 + 16);
      if ((int)v16 >= v15 - 14)
      {
        *(_BYTE *)(a1 + 21) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        *(_DWORD *)(a1 + 32) = 0;
        if (!v54)
          goto LABEL_159;
        if (a4 && (_DWORD)v13 && (_DWORD)v13 != 5)
          goto LABEL_160;
        return;
      }
    }
    icu::number::impl::DecimalQuantity::convertToAccurateDouble((icu::number::impl::DecimalQuantity *)a1);
  }
  if (!a4 || (_DWORD)v13 == 2 || (_DWORD)v13 == 7)
  {
    if ((char)v17 >= 5)
    {
      if ((_DWORD)v17 == 5)
      {
        LODWORD(v37) = v12 - 2;
        if (v12 >= -2147483646)
          v37 = v37;
        else
          v37 = 0x80000000;
        if ((v37 & 0x80000000) == 0)
        {
          v38 = 4 * v37;
          do
          {
            if (*(_BYTE *)(a1 + 64))
            {
              if (v37 < v15 && *(_BYTE *)(*(_QWORD *)(a1 + 48) + v37))
                goto LABEL_158;
            }
            else if ((unint64_t)v37 <= 0xF && ((*(_QWORD *)(a1 + 48) >> (v38 & 0xFC)) & 0xF) != 0)
            {
              goto LABEL_158;
            }
            v38 -= 4;
            v9 = v37-- <= 0;
          }
          while (!v9);
        }
        v29 = 2;
      }
      else
      {
LABEL_158:
        v29 = 3;
      }
    }
    else
    {
      v29 = 1;
    }
LABEL_159:
    if (a4)
    {
LABEL_160:
      if ((v13 - 8) < 0xFFFFFFFA)
        goto LABEL_161;
      if ((_DWORD)v13 == 2 && v29 != 3)
      {
        v39 = 1;
        LODWORD(v13) = 2;
        goto LABEL_175;
      }
LABEL_169:
      v40 = (_DWORD)v13 == 7 && v29 == 3;
    }
    else
    {
      v40 = (v13 & 1) == 0;
    }
    v39 = v40;
  }
  else
  {
    if ((char)v13 > 1)
    {
      v29 = 3;
      if (v13 >= 5)
      {
        if (v13 < 7)
          v29 = 1;
        else
          v29 = 3;
        goto LABEL_160;
      }
      goto LABEL_169;
    }
    v29 = 1;
LABEL_161:
    v39 = 1;
  }
LABEL_175:
  if (*a5 < 1)
  {
    v41 = 0;
    v42 = *(_BYTE *)(a1 + 20);
    switch(a3)
    {
      case 0u:
        v41 = v42 & 1;
        goto LABEL_201;
      case 1u:
        goto LABEL_194;
      case 2u:
        goto LABEL_199;
      case 3u:
        goto LABEL_201;
      case 4u:
        if (v29 == 3)
          goto LABEL_200;
        v41 = v39;
        goto LABEL_190;
      case 5u:
        v43 = v29 - 1;
        if (v43 >= 3)
          goto LABEL_198;
        v41 = (3u >> (v43 & 7)) & 1;
        goto LABEL_201;
      case 6u:
        v44 = v29 - 1;
        if (v44 >= 3)
          goto LABEL_198;
        v45 = (v44 & 7) == 0;
        goto LABEL_195;
      case 8u:
        if (v29 == 1)
          goto LABEL_199;
        if (v29 == 3)
          goto LABEL_200;
        v41 = v39 ^ 1;
        goto LABEL_201;
      case 9u:
        if (v29 == 3)
          goto LABEL_200;
        v41 = v42 & 1;
LABEL_190:
        if (v29 != 2)
LABEL_199:
          v41 = 1;
        goto LABEL_201;
      case 0xAu:
        if (v29 == 1)
          goto LABEL_199;
        if (v29 == 3)
        {
LABEL_200:
          v41 = 0;
        }
        else
        {
LABEL_194:
          v45 = (v42 & 1) == 0;
LABEL_195:
          v41 = v45;
        }
LABEL_201:
        if (v12 >= v15)
        {
          icu::number::impl::DecimalQuantity::setBcdToZero((void **)a1);
          *(_DWORD *)(a1 + 12) = a2;
        }
        else
        {
          icu::number::impl::DecimalQuantity::shiftRight(a1, v12);
        }
        if (!a4)
          goto LABEL_227;
        if ((char)v13 < 5)
          v46 = v41;
        else
          v46 = 0;
        if (v46 == 1)
        {
          if (*(_BYTE *)(a1 + 64))
          {
            icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)a1, 1);
            **(_BYTE **)(a1 + 48) = 0;
          }
          else
          {
            *(_QWORD *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF0;
          }
        }
        else
        {
          if ((char)v13 < 5)
            v47 = 1;
          else
            v47 = v41;
          if ((v47 & 1) != 0)
          {
            if (*(_BYTE *)(a1 + 64))
            {
              icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)a1, 1);
              **(_BYTE **)(a1 + 48) = 5;
            }
            else
            {
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0 | 5;
            }
            if (!*(_DWORD *)(a1 + 16))
              *(_DWORD *)(a1 + 16) = 1;
            return;
          }
          if (*(_BYTE *)(a1 + 64))
          {
            icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)a1, 1);
            LODWORD(v13) = 9;
            **(_BYTE **)(a1 + 48) = 9;
          }
          else
          {
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0 | 9;
            LODWORD(v13) = 9;
          }
LABEL_227:
          if ((v41 & 1) == 0)
          {
            v48 = *(unsigned __int8 *)(a1 + 64);
            if ((_DWORD)v13 == 9)
            {
              v49 = 0;
              v50 = 0;
              if (!*(_BYTE *)(a1 + 64))
                goto LABEL_232;
LABEL_230:
              if ((uint64_t)v50 < *(int *)(a1 + 16))
              {
                LODWORD(v51) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v50);
                while ((_DWORD)v51 == 9)
                {
                  ++v50;
                  v49 += 4;
                  if (*(_BYTE *)(a1 + 64))
                    goto LABEL_230;
LABEL_232:
                  if (v50 > 0xF)
                    break;
                  v51 = (*(_QWORD *)(a1 + 48) >> (v49 & 0xFC)) & 0xFLL;
                }
              }
              icu::number::impl::DecimalQuantity::shiftRight(a1, v50);
              v48 = *(unsigned __int8 *)(a1 + 64);
            }
            if (v48)
            {
              if (*(int *)(a1 + 16) < 1)
                v52 = 1;
              else
                v52 = **(_BYTE **)(a1 + 48) + 1;
              icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)a1, 1);
              **(_BYTE **)(a1 + 48) = v52;
            }
            else
            {
              *(_QWORD *)(a1 + 48) = ((*(_QWORD *)(a1 + 48) & 0xFLL) + 1) | *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFF0;
            }
            ++*(_DWORD *)(a1 + 16);
          }
        }
        icu::number::impl::DecimalQuantity::compact((icu::number::impl::DecimalQuantity *)a1);
        return;
      default:
LABEL_198:
        *a5 = 65809;
        return;
    }
  }
}

void icu::number::impl::DecimalQuantity::setDigitPos(icu::number::impl::DecimalQuantity *this, int a2, int a3)
{
  char v3;

  v3 = a3;
  if (*((_BYTE *)this + 64))
  {
    icu::number::impl::DecimalQuantity::ensureCapacity(this, a2 + 1);
    *(_BYTE *)(*((_QWORD *)this + 6) + a2) = v3;
  }
  else if (a2 < 16)
  {
    *((_QWORD *)this + 6) = *((_QWORD *)this + 6) & ~(15 << (4 * a2)) | ((uint64_t)a3 << (4 * a2));
  }
  else
  {
    icu::number::impl::DecimalQuantity::switchStorage(this);
    icu::number::impl::DecimalQuantity::ensureCapacity(this, a2 + 1);
    *(_BYTE *)(*((_QWORD *)this + 6) + a2) = v3;
  }
}

void icu::number::impl::DecimalQuantity::roundToInfinity(icu::number::impl::DecimalQuantity *this)
{
  if (*((_BYTE *)this + 21))
    icu::number::impl::DecimalQuantity::convertToAccurateDouble(this);
}

void icu::number::impl::DecimalQuantity::appendDigit(icu::number::impl::DecimalQuantity *this, int a2, int a3, int a4)
{
  int v7;
  int *v8;
  int v9;
  int v10;

  if (a2)
  {
    v8 = (int *)((char *)this + 12);
    v7 = *((_DWORD *)this + 3);
    if (v7 >= 1)
    {
      a3 += v7;
      if (a4)
        *v8 = 0;
    }
    v9 = a3 + 1;
    icu::number::impl::DecimalQuantity::shiftLeft((const void **)this, a3 + 1);
    if (*((_BYTE *)this + 64))
    {
      icu::number::impl::DecimalQuantity::ensureCapacity(this, 1);
      **((_BYTE **)this + 6) = a2;
      if (!a4)
        return;
    }
    else
    {
      *((_QWORD *)this + 6) = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFF0 | a2;
      if (!a4)
        return;
    }
    v10 = *v8;
LABEL_13:
    *v8 = v10 + v9;
    return;
  }
  if (a4 && *((_DWORD *)this + 4))
  {
    v10 = a3 + 1;
    v9 = *((_DWORD *)this + 3);
    v8 = (int *)((char *)this + 12);
    goto LABEL_13;
  }
}

void icu::number::impl::DecimalQuantity::shiftLeft(const void **this, int a2)
{
  int v4;

  if (*((_BYTE *)this + 64)
    || *((_DWORD *)this + 4) + a2 >= 17
    && (icu::number::impl::DecimalQuantity::switchStorage((icu::number::impl::DecimalQuantity *)this),
        *((_BYTE *)this + 64)))
  {
    icu::number::impl::DecimalQuantity::ensureCapacity((icu::number::impl::DecimalQuantity *)this, *((_DWORD *)this + 4) + a2);
    memmove((char *)this[6] + a2, this[6], *((int *)this + 4));
    bzero((void *)this[6], a2);
  }
  else
  {
    this[6] = (const void *)((_QWORD)this[6] << (4 * a2));
  }
  v4 = *((_DWORD *)this + 4) + a2;
  *((_DWORD *)this + 3) -= a2;
  *((_DWORD *)this + 4) = v4;
}

uint64_t icu::number::impl::DecimalQuantity::toPlainString@<X0>(icu::number::impl::DecimalQuantity *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  char i;
  int v16;
  uint64_t v17;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;

  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v19 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v19, 0, 1);
  }
  v4 = *((_DWORD *)this + 4);
  if (v4)
  {
    v5 = *((_DWORD *)this + 11) + *((_DWORD *)this + 3);
    v6 = v5 + v4;
    if (v6 <= *((_DWORD *)this + 9))
      v7 = *((_DWORD *)this + 9);
    else
      v7 = v6;
    if (v5 >= *((_DWORD *)this + 10))
      v8 = *((_DWORD *)this + 10);
    else
      v8 = *((_DWORD *)this + 11) + *((_DWORD *)this + 3);
    if (v7 > 0)
    {
      v9 = v7 + 1;
      v10 = 4 * v7 - 4;
      while (1)
      {
        v11 = *((_DWORD *)this + 3) + *((_DWORD *)this + 11);
        LODWORD(v12) = v9 - v11 - 2;
        if (!*((_BYTE *)this + 64))
          break;
        if ((v12 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v12)
          goto LABEL_17;
        LOBYTE(v12) = *(_BYTE *)(*((_QWORD *)this + 6) + v12);
LABEL_19:
        result = icu::UnicodeString::append(a2, (char)v12 + 48);
        --v9;
        v10 -= 4;
        if (v9 <= 1)
        {
          v14 = -1;
          if (v8 < 0)
            goto LABEL_21;
          goto LABEL_22;
        }
      }
      if (v12 <= 0xF)
      {
        v12 = (*((_QWORD *)this + 6) >> (v10 - 4 * v11)) & 0xFLL;
        goto LABEL_19;
      }
LABEL_17:
      LOBYTE(v12) = 0;
      goto LABEL_19;
    }
    v21 = 48;
    result = icu::UnicodeString::doAppend(a2, (uint64_t)&v21, 0, 1);
    v14 = v7 - 1;
    if (v8 < 0)
    {
LABEL_21:
      v22 = 46;
      result = icu::UnicodeString::doAppend(a2, (uint64_t)&v22, 0, 1);
    }
LABEL_22:
    if (v14 >= v8)
    {
      for (i = 4 * v14; ; i -= 4)
      {
        v16 = *((_DWORD *)this + 3) + *((_DWORD *)this + 11);
        LODWORD(v17) = v14 - v16;
        if (!*((_BYTE *)this + 64))
          break;
        if ((v17 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v17)
          goto LABEL_29;
        LOBYTE(v17) = *(_BYTE *)(*((_QWORD *)this + 6) + v17);
LABEL_31:
        result = icu::UnicodeString::append(a2, (char)v17 + 48);
        if (v14-- <= v8)
          return result;
      }
      if (v17 <= 0xF)
      {
        v17 = (*((_QWORD *)this + 6) >> (i - 4 * v16)) & 0xFLL;
        goto LABEL_31;
      }
LABEL_29:
      LOBYTE(v17) = 0;
      goto LABEL_31;
    }
  }
  else
  {
    v20 = 48;
    return icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
  }
  return result;
}

icu::ICU_Utility *icu::number::impl::DecimalQuantity::toExponentString@<X0>(icu::number::impl::DecimalQuantity *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  int v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  icu::ICU_Utility *result;
  int v12;
  char v13;
  int v14;
  uint64_t v15;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  *(_OWORD *)(a2 + 8) = 0u;
  *(_QWORD *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = off_1E2256B38;
  *(_WORD *)(a2 + 8) = 2;
  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v17 = 45;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v17, 0, 1);
  }
  v4 = *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 4) + v4 <= *((_DWORD *)this + 9))
    v5 = *((_DWORD *)this + 9);
  else
    v5 = *((_DWORD *)this + 4) + v4;
  if (v4 >= *((_DWORD *)this + 10))
    v6 = *((_DWORD *)this + 10);
  else
    v6 = *((_DWORD *)this + 3);
  if (v5 > 0)
  {
    v7 = v5 + 1;
    v8 = 4 * v5 - 4;
    while (1)
    {
      v9 = *((_DWORD *)this + 3);
      LODWORD(v10) = v7 - v9 - 2;
      if (!*((_BYTE *)this + 64))
        break;
      if ((v10 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v10)
        goto LABEL_16;
      LOBYTE(v10) = *(_BYTE *)(*((_QWORD *)this + 6) + v10);
LABEL_18:
      result = (icu::ICU_Utility *)icu::UnicodeString::append(a2, (char)v10 + 48);
      --v7;
      v8 -= 4;
      if (v7 <= 1)
      {
        v12 = -1;
        if (v6 < 0)
          goto LABEL_20;
        goto LABEL_21;
      }
    }
    if (v10 <= 0xF)
    {
      v10 = (*((_QWORD *)this + 6) >> (v8 - 4 * v9)) & 0xFLL;
      goto LABEL_18;
    }
LABEL_16:
    LOBYTE(v10) = 0;
    goto LABEL_18;
  }
  v18 = 48;
  result = (icu::ICU_Utility *)icu::UnicodeString::doAppend(a2, (uint64_t)&v18, 0, 1);
  v12 = v5 - 1;
  if (v6 < 0)
  {
LABEL_20:
    v19 = 46;
    result = (icu::ICU_Utility *)icu::UnicodeString::doAppend(a2, (uint64_t)&v19, 0, 1);
  }
LABEL_21:
  if (v12 >= v6)
  {
    v13 = 4 * v12;
    while (1)
    {
      v14 = *((_DWORD *)this + 3);
      LODWORD(v15) = v12 - v14;
      if (!*((_BYTE *)this + 64))
        break;
      if ((v15 & 0x80000000) != 0 || *((_DWORD *)this + 4) <= (int)v15)
        goto LABEL_28;
      LOBYTE(v15) = *(_BYTE *)(*((_QWORD *)this + 6) + v15);
LABEL_30:
      result = (icu::ICU_Utility *)icu::UnicodeString::append(a2, (char)v15 + 48);
      v13 -= 4;
      if (v12-- <= v6)
        goto LABEL_32;
    }
    if (v15 <= 0xF)
    {
      v15 = (*((_QWORD *)this + 6) >> (v13 - 4 * v14)) & 0xFLL;
      goto LABEL_30;
    }
LABEL_28:
    LOBYTE(v15) = 0;
    goto LABEL_30;
  }
LABEL_32:
  if (*((_DWORD *)this + 11))
  {
    v20 = 99;
    icu::UnicodeString::doAppend(a2, (uint64_t)&v20, 0, 1);
    return icu::ICU_Utility::appendNumber((icu::ICU_Utility *)a2, (icu::UnicodeString *)*((unsigned int *)this + 11), 0xAu, 1);
  }
  return result;
}

void icu::number::impl::DecimalQuantity::ensureCapacity(icu::number::impl::DecimalQuantity *this, int a2)
{
  size_t v4;
  int v5;
  char *v6;
  void *v7;
  void *v8;

  if (a2)
  {
    if (*((_BYTE *)this + 64))
    {
      v4 = *((int *)this + 14);
      if (a2 > (int)v4)
      {
        v5 = 2 * a2;
        v6 = (char *)uprv_malloc(2 * a2);
        v7 = (void *)*((_QWORD *)this + 6);
        memcpy(v6, v7, v4);
        bzero(&v6[v4], a2 - (int)v4);
        uprv_free(v7);
        *((_QWORD *)this + 6) = v6;
        *((_DWORD *)this + 14) = v5;
      }
    }
    else
    {
      v8 = uprv_malloc(a2);
      *((_QWORD *)this + 6) = v8;
      *((_DWORD *)this + 14) = a2;
      bzero(v8, a2);
    }
    *((_BYTE *)this + 64) = 1;
  }
}

void icu::number::impl::DecimalQuantity::switchStorage(icu::number::impl::DecimalQuantity *this)
{
  uint64_t v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (*((_BYTE *)this + 64))
  {
    v2 = *((unsigned int *)this + 4);
    v3 = (char *)*((_QWORD *)this + 6);
    if ((int)v2 < 1)
    {
      v4 = 0;
    }
    else
    {
      v4 = 0;
      v5 = v2 + 1;
      do
        v4 = v3[(v5-- - 2)] | (16 * v4);
      while (v5 > 1);
    }
    uprv_free(v3);
    *((_QWORD *)this + 6) = v4;
    *((_BYTE *)this + 64) = 0;
  }
  else
  {
    v6 = *((_QWORD *)this + 6);
    icu::number::impl::DecimalQuantity::ensureCapacity(this, 40);
    if (*((int *)this + 4) >= 1)
    {
      v7 = 0;
      do
      {
        *(_BYTE *)(*((_QWORD *)this + 6) + v7) = v6 & 0xF;
        v6 >>= 4;
        ++v7;
      }
      while (v7 < *((int *)this + 4));
    }
  }
}

void icu::number::impl::DecimalQuantity::ensureCapacity(icu::number::impl::DecimalQuantity *this)
{
  icu::number::impl::DecimalQuantity::ensureCapacity(this, 40);
}

const __int16 *icu::number::impl::DecimalQuantity::checkHealth(icu::number::impl::DecimalQuantity *this)
{
  uint64_t v1;
  int v2;
  const __int16 *result;
  char *v4;
  uint64_t v5;
  char *v6;
  const __int16 *v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  v1 = *((unsigned int *)this + 4);
  if (*((_BYTE *)this + 64))
  {
    if (!(_DWORD)v1)
      return L"Zero precision but we are in byte mode";
    v2 = *((_DWORD *)this + 14);
    if ((int)v1 > v2)
      return (const __int16 *)"P";
    if ((int)v1 < 1)
      return L"Most significant digit is zero in byte mode";
    v4 = (char *)*((_QWORD *)this + 6);
    if (!v4[(v1 - 1)])
      return L"Most significant digit is zero in byte mode";
    if (*v4)
    {
      result = (const __int16 *)"D";
      v5 = v1;
      v6 = v4;
      v7 = L"Digit below 0 in byte array";
      while (1)
      {
        v9 = *v6++;
        v8 = v9;
        if (v9 > 9)
          break;
        if (v8 < 0)
          return v7;
        if (!--v5)
        {
          if ((int)v1 >= v2)
            return 0;
          v7 = L"Nonzero digits outside of range in byte array";
          v10 = v1;
          while (v10 < 0 || (int)v1 <= v10 || !v4[v10])
          {
            result = 0;
            if (v2 == ++v10)
              return result;
          }
          return v7;
        }
      }
      return result;
    }
    return L"Least significant digit is zero in long mode";
  }
  if ((_DWORD)v1)
  {
    if ((int)v1 > 16)
      return (const __int16 *)"P";
    if ((v1 - 1) > 0xF)
      return L"Most significant digit is zero in long mode";
    v11 = *((_QWORD *)this + 6);
    if (((v11 >> (4 * (v1 - 1))) & 0xF) == 0)
      return L"Most significant digit is zero in long mode";
    if ((v11 & 0xF) == 0)
      return L"Least significant digit is zero in long mode";
    v12 = 0;
    result = L"Digit exceeding 10 in long";
    while (v12 > 0xF || ((v11 >> (4 * v12)) & 0xE) <= 9)
    {
      if (++v12 == v1)
      {
        if ((int)v1 <= 15)
          goto LABEL_34;
        return 0;
      }
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 6);
    if (v11)
    {
      return L"Value in bcdLong even though precision is zero";
    }
    else
    {
LABEL_34:
      v13 = 4 * v1;
      result = (const __int16 *)"N";
      while (v1 > 0xF || ((v11 >> v13) & 0xF) == 0)
      {
        LODWORD(v1) = v1 + 1;
        v13 += 4;
        if ((_DWORD)v1 == 16)
          return 0;
      }
    }
  }
  return result;
}

BOOL icu::number::impl::DecimalQuantity::operator==(icu::number::impl::DecimalQuantity *this, uint64_t a2)
{
  int v2;
  unsigned int v5;
  int v6;
  int v7;
  _BOOL8 v8;
  int v10;
  int v11;
  int v12;
  int Digit;

  v2 = *((_DWORD *)this + 3);
  if (v2 != *(_DWORD *)(a2 + 12))
    return 0;
  v5 = *((_DWORD *)this + 4);
  if (__PAIR64__(*((unsigned __int8 *)this + 20), v5) != __PAIR64__(*(unsigned __int8 *)(a2 + 20), *(_DWORD *)(a2 + 16)))return 0;
  v6 = *((_DWORD *)this + 9);
  if (v6 != *(_DWORD *)(a2 + 36))
    return 0;
  v7 = *((_DWORD *)this + 10);
  if (v7 != *(_DWORD *)(a2 + 40) || *((unsigned __int8 *)this + 21) != *(unsigned __int8 *)(a2 + 21))
    return 0;
  if (!v5)
    return 1;
  if (*((_BYTE *)this + 21))
  {
    if (*((double *)this + 3) == *(double *)(a2 + 24))
      return *((_DWORD *)this + 8) == *(_DWORD *)(a2 + 32);
    return 0;
  }
  v10 = v5 + v2;
  if (v6 <= v10)
    v11 = v10;
  else
    v11 = *((_DWORD *)this + 9);
  if (v7 >= v2)
    v12 = *((_DWORD *)this + 3);
  else
    v12 = *((_DWORD *)this + 10);
  do
  {
    v8 = v11 <= v12;
    if (v11 <= v12)
      break;
    Digit = icu::number::impl::DecimalQuantity::getDigit(this, --v11);
  }
  while (Digit == icu::number::impl::DecimalQuantity::getDigit((icu::number::impl::DecimalQuantity *)a2, v11));
  return v8;
}

void icu::number::impl::DecimalQuantity::toString(icu::number::impl::DecimalQuantity *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  char __str[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _OWORD v19[3];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(v19, 0, sizeof(v19));
  sub_18BD108FC((uint64_t)v19, (*((_DWORD *)this + 4) + 1), 0);
  v4 = *((_DWORD *)this + 4);
  if (v4 > 0)
  {
    v5 = 0;
    v6 = -1;
    do
    {
      v7 = v4 + v6;
      if (*((_BYTE *)this + 64))
      {
        LOBYTE(v8) = 0;
        if ((v7 & 0x80000000) == 0 && v4 > (int)v7)
          LOBYTE(v8) = *(_BYTE *)(*((_QWORD *)this + 6) + v7);
      }
      else if (v7 <= 0xF)
      {
        v8 = (*((_QWORD *)this + 6) >> (4 * v7)) & 0xFLL;
      }
      else
      {
        LOBYTE(v8) = 0;
      }
      *(_BYTE *)(*(_QWORD *)&v19[0] + v5++) = v8 + 48;
      v4 = *((_DWORD *)this + 4);
      --v6;
    }
    while (v5 < v4);
  }
  *(_BYTE *)(*(_QWORD *)&v19[0] + v4) = 0;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)__str = 0u;
  v13 = 0u;
  if (*((_BYTE *)this + 64))
    v9 = "bytes";
  else
    v9 = "long";
  v10 = "-";
  if ((*((_BYTE *)this + 20) & 1) == 0)
    v10 = "";
  v11 = *(const char **)&v19[0];
  if (!*((_DWORD *)this + 4))
    v11 = "0";
  snprintf(__str, 0x64uLL, "<DecimalQuantity %d:%d %s %s%s%s%d>", *((_DWORD *)this + 9), *((_DWORD *)this + 10), v9, v10, v11, "E", *((_DWORD *)this + 3));
  icu::UnicodeString::UnicodeString(a2, __str, 0xFFFFFFFFLL, 0);
  if (BYTE12(v19[0]))
    uprv_free(*(void **)&v19[0]);
}

uint64_t sub_18BD108FC(uint64_t a1, size_t size, int a3)
{
  int v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = a1 + 13;
  *(_DWORD *)(a1 + 8) = 30;
  *(_BYTE *)(a1 + 12) = 0;
  if ((int)size >= 31 && a3 <= 0)
  {
    v4 = size;
    v5 = uprv_malloc(size);
    if (v5)
    {
      v6 = v5;
      if (*(_BYTE *)(a1 + 12))
        uprv_free(*(void **)a1);
      *(_QWORD *)a1 = v6;
      *(_DWORD *)(a1 + 8) = v4;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }
  return a1;
}

icu::number::impl::DecimalFormatProperties *icu::number::impl::DecimalFormatProperties::DecimalFormatProperties(icu::number::impl::DecimalFormatProperties *this)
{
  *(_BYTE *)this = 1;
  *((_BYTE *)this + 8) = 1;
  icu::CurrencyUnit::CurrencyUnit((icu::number::impl::DecimalFormatProperties *)((char *)this + 16));
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 1;
  *((_QWORD *)this + 16) = off_1E2256B38;
  *((_WORD *)this + 68) = 2;
  *((_QWORD *)this + 24) = off_1E2256B38;
  *((_WORD *)this + 100) = 2;
  *((_QWORD *)this + 32) = off_1E2256B38;
  *((_WORD *)this + 132) = 2;
  *((_QWORD *)this + 40) = off_1E2256B38;
  *((_WORD *)this + 164) = 2;
  *((_BYTE *)this + 384) = 1;
  *((_QWORD *)this + 49) = off_1E2256B38;
  *((_WORD *)this + 200) = 2;
  *((_BYTE *)this + 460) = 1;
  *((_QWORD *)this + 60) = off_1E2256B38;
  *((_WORD *)this + 244) = 2;
  *((_QWORD *)this + 68) = off_1E2256B38;
  *((_WORD *)this + 276) = 2;
  *((_QWORD *)this + 76) = off_1E2256B38;
  *((_WORD *)this + 308) = 2;
  *((_QWORD *)this + 84) = off_1E2256B38;
  *((_WORD *)this + 340) = 2;
  *((_BYTE *)this + 744) = 1;
  icu::number::impl::DecimalFormatProperties::clear(this);
  return this;
}

void icu::number::impl::DecimalFormatProperties::clear(icu::number::impl::DecimalFormatProperties *this)
{
  uint64_t v2;
  __int128 v3;

  *(_BYTE *)this = 1;
  *((_BYTE *)this + 8) = 1;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 1;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = 0;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *((_QWORD *)this + 9) = -1;
  *((_BYTE *)this + 80) = 1;
  *((_DWORD *)this + 21) = 0;
  *(_OWORD *)((char *)this + 88) = v3;
  *(_OWORD *)((char *)this + 104) = v3;
  *((_QWORD *)this + 15) = 1;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 128));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 192));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 256));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 320));
  *((_BYTE *)this + 384) = 1;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 392));
  *((_WORD *)this + 228) = 0;
  *((_BYTE *)this + 460) = 1;
  *((_WORD *)this + 234) = 0;
  *((_DWORD *)this + 118) = 2;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 480));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 544));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 608));
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalFormatProperties *)((char *)this + 672));
  *((_QWORD *)this + 92) = 0;
  *((_BYTE *)this + 744) = 1;
  *((_DWORD *)this + 188) = -1;
  *((_WORD *)this + 378) = 0;
}

uint64_t icu::number::impl::DecimalFormatProperties::_equals(icu::number::impl::DecimalFormatProperties *this, const icu::number::impl::DecimalFormatProperties *a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  int v8;

  if (*(_BYTE *)this)
  {
    if (!*(_BYTE *)a2)
      return 0;
  }
  else if (*(_BYTE *)a2 || *((_DWORD *)this + 1) != *((_DWORD *)a2 + 1))
  {
    return 0;
  }
  if (*((_BYTE *)this + 8))
  {
    if (!*((_BYTE *)a2 + 8))
      return 0;
  }
  else
  {
    if (*((_BYTE *)a2 + 8))
      return 0;
    result = icu::MeasureUnit::operator==((uint64_t)this + 16, (uint64_t)a2 + 16);
    if (!(_DWORD)result)
      return result;
  }
  if (*((_QWORD *)this + 6) != *((_QWORD *)a2 + 6))
    return 0;
  if (*((_BYTE *)this + 56))
  {
    if (!*((_BYTE *)a2 + 56))
      return 0;
  }
  else if (*((_BYTE *)a2 + 56) || *((_DWORD *)this + 15) != *((_DWORD *)a2 + 15))
  {
    return 0;
  }
  if (*((unsigned __int8 *)this + 65) != *((unsigned __int8 *)a2 + 65)
    || *((unsigned __int8 *)this + 66) != *((unsigned __int8 *)a2 + 66)
    || *((unsigned __int8 *)this + 67) != *((unsigned __int8 *)a2 + 67)
    || *((unsigned __int8 *)this + 68) != *((unsigned __int8 *)a2 + 68)
    || *((_DWORD *)this + 18) != *((_DWORD *)a2 + 18)
    || *((_DWORD *)this + 21) != *((_DWORD *)a2 + 21)
    || *((_DWORD *)this + 24) != *((_DWORD *)a2 + 24)
    || *((_DWORD *)this + 25) != *((_DWORD *)a2 + 25)
    || *((_DWORD *)this + 27) != *((_DWORD *)a2 + 27)
    || *((_DWORD *)this + 29) != *((_DWORD *)a2 + 29)
    || *((_DWORD *)this + 30) != *((_DWORD *)a2 + 30)
    || *((_DWORD *)this + 31) != *((_DWORD *)a2 + 31))
  {
    return 0;
  }
  result = sub_18BBED900((uint64_t)this + 128, (uint64_t)a2 + 128);
  if ((_DWORD)result)
  {
    result = sub_18BBED900((uint64_t)this + 256, (uint64_t)a2 + 256);
    if ((_DWORD)result)
    {
      if (*((_BYTE *)this + 384))
      {
        if (!*((_BYTE *)a2 + 384))
          return 0;
      }
      else if (*((_BYTE *)a2 + 384) || *((_DWORD *)this + 97) != *((_DWORD *)a2 + 97))
      {
        return 0;
      }
      result = sub_18BBED900((uint64_t)this + 392, (uint64_t)a2 + 392);
      if ((_DWORD)result)
      {
        result = sub_18BBED900((uint64_t)this + 480, (uint64_t)a2 + 480);
        if ((_DWORD)result)
        {
          result = sub_18BBED900((uint64_t)this + 608, (uint64_t)a2 + 608);
          if ((_DWORD)result)
          {
            if (*((double *)this + 92) != *((double *)a2 + 92))
              return 0;
            if (*((_BYTE *)this + 744))
            {
              if (!*((_BYTE *)a2 + 744))
                return 0;
            }
            else if (*((_BYTE *)a2 + 744) || *((_DWORD *)this + 187) != *((_DWORD *)a2 + 187))
            {
              return 0;
            }
            if (*((_DWORD *)this + 188) != *((_DWORD *)a2 + 188)
              || *((unsigned __int8 *)this + 756) != *((unsigned __int8 *)a2 + 756))
            {
              return 0;
            }
            v7 = *((unsigned __int8 *)this + 757);
            v8 = *((unsigned __int8 *)a2 + 757);
            result = v7 == v8 ? a3 : 0;
            if (v7 == v8 && (a3 & 1) == 0)
            {
              if (*((_DWORD *)this + 19) != *((_DWORD *)a2 + 19)
                || *((unsigned __int8 *)this + 80) != *((unsigned __int8 *)a2 + 80)
                || *((_DWORD *)this + 26) != *((_DWORD *)a2 + 26)
                || *((_DWORD *)this + 22) != *((_DWORD *)a2 + 22)
                || *((_DWORD *)this + 23) != *((_DWORD *)a2 + 23)
                || *((_DWORD *)this + 28) != *((_DWORD *)a2 + 28))
              {
                return 0;
              }
              result = sub_18BBED900((uint64_t)this + 192, (uint64_t)a2 + 192);
              if ((_DWORD)result)
              {
                result = sub_18BBED900((uint64_t)this + 320, (uint64_t)a2 + 320);
                if ((_DWORD)result)
                {
                  result = sub_18BBED900((uint64_t)this + 544, (uint64_t)a2 + 544);
                  if ((_DWORD)result)
                  {
                    result = sub_18BBED900((uint64_t)this + 672, (uint64_t)a2 + 672);
                    if ((_DWORD)result)
                    {
                      if (*((unsigned __int8 *)this + 64) == *((unsigned __int8 *)a2 + 64)
                        && *((unsigned __int8 *)this + 456) == *((unsigned __int8 *)a2 + 456)
                        && *((unsigned __int8 *)this + 457) == *((unsigned __int8 *)a2 + 457))
                      {
                        if (*((_BYTE *)this + 460))
                        {
                          if (*((_BYTE *)a2 + 460))
                            goto LABEL_52;
                        }
                        else if (!*((_BYTE *)a2 + 460) && *((_DWORD *)this + 116) == *((_DWORD *)a2 + 116))
                        {
LABEL_52:
                          if (*((unsigned __int8 *)this + 468) == *((unsigned __int8 *)a2 + 468)
                            && *((unsigned __int8 *)this + 469) == *((unsigned __int8 *)a2 + 469))
                          {
                            return *((_DWORD *)this + 118) == *((_DWORD *)a2 + 118);
                          }
                        }
                      }
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t icu::number::impl::DecimalFormatProperties::equalsDefaultExceptFastFormat(icu::number::impl::DecimalFormatProperties *this)
{
  unsigned int v2;

  v2 = atomic_load(&dword_1ECD280A0);
  if (v2 != 2 && icu::umtx_initImplPreInit(&dword_1ECD280A0))
  {
    icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)&unk_1ECD27DA8);
    dword_1ECD280A4 = 0;
    icu::umtx_initImplPostInit(&dword_1ECD280A0);
  }
  return icu::number::impl::DecimalFormatProperties::_equals(this, (const icu::number::impl::DecimalFormatProperties *)&unk_1ECD27DA8, 1u);
}

void *icu::number::impl::DecimalFormatProperties::getDefault(icu::number::impl::DecimalFormatProperties *this)
{
  unsigned int v1;

  v1 = atomic_load(&dword_1ECD280A0);
  if (v1 != 2 && icu::umtx_initImplPreInit(&dword_1ECD280A0))
  {
    icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)&unk_1ECD27DA8);
    dword_1ECD280A4 = 0;
    icu::umtx_initImplPostInit(&dword_1ECD280A0);
  }
  return &unk_1ECD27DA8;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::notation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 4) = *(_QWORD *)a2;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 4) = *(_QWORD *)a2;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::unit@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (uint64_t)(a3 + 1);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::MeasureUnit::operator=(v4, a2);
}

{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (uint64_t)(a3 + 1);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::MeasureUnit::operator=(v4, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::adoptUnit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 16, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 16, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::perUnit@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::MeasureUnit::operator=(v4 + 40, a2);
}

{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::MeasureUnit::operator=(v4 + 40, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::adoptPerUnit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 40, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 40, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

__n128 icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::precision@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  __n128 result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 12);
  *(__n128 *)(v4 + 76) = result;
  return result;
}

{
  uint64_t v4;
  __n128 result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 12);
  *(__n128 *)(v4 + 76) = result;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::roundingMode@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 96) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 96) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::grouping@<X0>(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v6;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  result = icu::number::impl::Grouper::forStrategy(a2);
  *(_QWORD *)(a3 + 100) = result;
  *(_DWORD *)(a3 + 108) = v6;
  return result;
}

{
  uint64_t result;
  int v6;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  result = icu::number::impl::Grouper::forStrategy(a2);
  *(_QWORD *)(a3 + 100) = result;
  *(_DWORD *)(a3 + 108) = v6;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::integerWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 124) = *(_QWORD *)a2;
  *(_BYTE *)(result + 132) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 124) = *(_QWORD *)a2;
  *(_BYTE *)(result + 132) = *(_BYTE *)(a2 + 8);
  return result;
}

icu::DecimalFormatSymbols *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::symbols@<X0>(uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::impl::SymbolsWrapper::setTo((icu::number::impl::SymbolsWrapper *)(v4 + 136), a2);
}

{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::impl::SymbolsWrapper::setTo((icu::number::impl::SymbolsWrapper *)(v4 + 136), a2);
}

_QWORD *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::adoptSymbols@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::impl::SymbolsWrapper::setTo((_QWORD *)(v4 + 136), a2);
}

{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::impl::SymbolsWrapper::setTo((_QWORD *)(v4 + 136), a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::unitWidth@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 152) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::sign@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 156) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 156) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::decimal@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 164) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 164) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::scale@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::Scale::operator=(v4 + 168, a2);
}

{
  uint64_t v4;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::Scale::operator=(v4 + 168, a2);
}

char *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::usage@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v6;

  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[13] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  a4[12] = 0u;
  v6 = (uint64_t)(a4 + 12);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a4, a1);
  return icu::number::impl::StringProp::set(v6, a2, a3);
}

{
  uint64_t v6;

  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[13] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  a4[12] = 0u;
  v6 = (uint64_t)(a4 + 12);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a4, a1);
  return icu::number::impl::StringProp::set(v6, a2, a3);
}

char *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::displayOptions@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  const char *GrammaticalCaseIdentifier;
  const char *v7;
  uint64_t v8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[13] = 0u;
  v4 = (uint64_t)(a3 + 13);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (!*a2)
    return icu::number::impl::StringProp::set(v4, 0, 0);
  GrammaticalCaseIdentifier = udispopt_getGrammaticalCaseIdentifier(*a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v7, GrammaticalCaseIdentifier);
  return icu::number::impl::StringProp::set(v4, v7, v8);
}

{
  uint64_t v4;
  const char *GrammaticalCaseIdentifier;
  const char *v7;
  uint64_t v8;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[13] = 0u;
  v4 = (uint64_t)(a3 + 13);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  if (!*a2)
    return icu::number::impl::StringProp::set(v4, 0, 0);
  GrammaticalCaseIdentifier = udispopt_getGrammaticalCaseIdentifier(*a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v7, GrammaticalCaseIdentifier);
  return icu::number::impl::StringProp::set(v4, v7, v8);
}

char *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::unitDisplayCase@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v6;

  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[11] = 0u;
  a4[12] = 0u;
  a4[9] = 0u;
  a4[10] = 0u;
  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  a4[13] = 0u;
  v6 = (uint64_t)(a4 + 13);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a4, a1);
  return icu::number::impl::StringProp::set(v6, a2, a3);
}

{
  uint64_t v6;

  a4[28] = 0u;
  a4[29] = 0u;
  a4[26] = 0u;
  a4[27] = 0u;
  a4[24] = 0u;
  a4[25] = 0u;
  a4[22] = 0u;
  a4[23] = 0u;
  a4[20] = 0u;
  a4[21] = 0u;
  a4[18] = 0u;
  a4[19] = 0u;
  a4[16] = 0u;
  a4[17] = 0u;
  a4[14] = 0u;
  a4[15] = 0u;
  a4[11] = 0u;
  a4[12] = 0u;
  a4[9] = 0u;
  a4[10] = 0u;
  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  a4[13] = 0u;
  v6 = (uint64_t)(a4 + 13);
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a4, a1);
  return icu::number::impl::StringProp::set(v6, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::padding@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 112) = *(_QWORD *)a2;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 112) = *(_QWORD *)a2;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::threshold@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 240) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 240) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::forDateFormat@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_BYTE *)(result + 245) = a2;
  return result;
}

{
  uint64_t result;

  a3[28] = 0u;
  a3[29] = 0u;
  a3[26] = 0u;
  a3[27] = 0u;
  a3[24] = 0u;
  a3[25] = 0u;
  a3[22] = 0u;
  a3[23] = 0u;
  a3[20] = 0u;
  a3[21] = 0u;
  a3[18] = 0u;
  a3[19] = 0u;
  a3[16] = 0u;
  a3[17] = 0u;
  a3[14] = 0u;
  a3[15] = 0u;
  a3[12] = 0u;
  a3[13] = 0u;
  a3[10] = 0u;
  a3[11] = 0u;
  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  result = icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)a3, a1);
  *(_BYTE *)(result + 245) = a2;
  return result;
}

icu::Locale *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = a3 + 16;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a3 + 238) = *(_QWORD *)(a2 + 238);
  return icu::Locale::operator=((icu::Locale *)(a3 + 248), a2 + 248);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = a3 + 16;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a3 + 238) = *(_QWORD *)(a2 + 238);
  return icu::Locale::operator=((icu::Locale *)(a3 + 248), a2 + 248);
}

{
  return __ZNO3icu6number23NumberFormatterSettingsINS0_26UnlocalizedNumberFormatterEE6macrosERKNS0_4impl10MacroPropsE(a1, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = a3 + 16;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=(a3 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a3 + 238) = *(_QWORD *)(a2 + 238);
  return icu::Locale::operator=(a3 + 248, a2 + 248);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = a3 + 16;
  icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(a3, a1);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=(a3 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a3 + 238) = *(_QWORD *)(a2 + 238);
  return icu::Locale::operator=(a3 + 248, a2 + 248);
}

{
  return __ZNO3icu6number23NumberFormatterSettingsINS0_26UnlocalizedNumberFormatterEE6macrosEONS0_4impl10MacroPropsE(a1, a2, a3);
}

uint64_t *icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::clone@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x1E0, a2);
  if (result)
    result = (uint64_t *)icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)result, a1);
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x1E0, a2);
  if (result)
    result = (uint64_t *)icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter((uint64_t)result, a1);
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::copyErrorTo(uint64_t a1, int *a2)
{
  if (*a2 > 0)
    return 1;
  sub_18BD128A4(a1, a2);
  return *a2 > 0;
}

uint64_t sub_18BD128A4(uint64_t a1, int *a2)
{
  int v2;
  int v3;

  if (*(_DWORD *)(a1 + 4) == 3)
  {
    v2 = *(_DWORD *)(a1 + 8);
  }
  else if (*(_DWORD *)(a1 + 64) == 10)
  {
    v2 = *(_DWORD *)(a1 + 72);
  }
  else if (*(_DWORD *)(a1 + 112) == -3)
  {
    v2 = *(_DWORD *)(a1 + 116);
  }
  else if (*(_BYTE *)(a1 + 132))
  {
    v2 = *(_DWORD *)(a1 + 124);
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 136);
    if ((v3 == 2 || v3 == 1) && !*(_QWORD *)(a1 + 144))
    {
      v2 = 7;
    }
    else
    {
      v2 = *(_DWORD *)(a1 + 184);
      if (v2 <= 0)
      {
        v2 = *(_DWORD *)(a1 + 204);
        if (v2 <= 0)
        {
          v2 = *(_DWORD *)(a1 + 220);
          if (v2 < 1)
            return 0;
        }
      }
    }
  }
  *a2 = v2;
  return 1;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::notation@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 4) = *(_QWORD *)a2;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 4) = *(_QWORD *)a2;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unit@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (uint64_t)(a3 + 1);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::MeasureUnit::operator=(v4, a2);
}

{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (uint64_t)(a3 + 1);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::MeasureUnit::operator=(v4, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::adoptUnit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 16, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 16, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::perUnit@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::MeasureUnit::operator=(v4 + 40, a2);
}

{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::MeasureUnit::operator=(v4 + 40, a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::adoptPerUnit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 40, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (a2)
  {
    icu::MeasureUnit::operator=(result + 40, a2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

__n128 icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::precision@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  __n128 result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 12);
  *(__n128 *)(v4 + 76) = result;
  return result;
}

{
  uint64_t v4;
  __n128 result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 12);
  *(__n128 *)(v4 + 76) = result;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::roundingMode@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 96) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 96) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::grouping@<X0>(uint64_t a1@<X0>, signed int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v6;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  result = icu::number::impl::Grouper::forStrategy(a2);
  *(_QWORD *)(a3 + 100) = result;
  *(_DWORD *)(a3 + 108) = v6;
  return result;
}

{
  uint64_t result;
  int v6;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  result = icu::number::impl::Grouper::forStrategy(a2);
  *(_QWORD *)(a3 + 100) = result;
  *(_DWORD *)(a3 + 108) = v6;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::integerWidth@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 124) = *(_QWORD *)a2;
  *(_BYTE *)(result + 132) = *(_BYTE *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 124) = *(_QWORD *)a2;
  *(_BYTE *)(result + 132) = *(_BYTE *)(a2 + 8);
  return result;
}

icu::DecimalFormatSymbols *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::symbols@<X0>(uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::impl::SymbolsWrapper::setTo((icu::number::impl::SymbolsWrapper *)(v4 + 136), a2);
}

{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::impl::SymbolsWrapper::setTo((icu::number::impl::SymbolsWrapper *)(v4 + 136), a2);
}

_QWORD *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::adoptSymbols@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::impl::SymbolsWrapper::setTo((_QWORD *)(v4 + 136), a2);
}

{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::impl::SymbolsWrapper::setTo((_QWORD *)(v4 + 136), a2);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitWidth@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 152) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::sign@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 156) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 156) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::decimal@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 164) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 164) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::scale@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::Scale::operator=(v4 + 168, a2);
}

{
  uint64_t v4;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  return icu::number::Scale::operator=(v4 + 168, a2);
}

char *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::usage@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v6;

  a4[29] = 0u;
  a4[30] = 0u;
  a4[27] = 0u;
  a4[28] = 0u;
  a4[25] = 0u;
  a4[26] = 0u;
  a4[23] = 0u;
  a4[24] = 0u;
  a4[21] = 0u;
  a4[22] = 0u;
  a4[19] = 0u;
  a4[20] = 0u;
  a4[17] = 0u;
  a4[18] = 0u;
  a4[15] = 0u;
  a4[16] = 0u;
  a4[13] = 0u;
  a4[14] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  a4[12] = 0u;
  v6 = (uint64_t)(a4 + 12);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a4, a1);
  return icu::number::impl::StringProp::set(v6, a2, a3);
}

{
  uint64_t v6;

  a4[29] = 0u;
  a4[30] = 0u;
  a4[27] = 0u;
  a4[28] = 0u;
  a4[25] = 0u;
  a4[26] = 0u;
  a4[23] = 0u;
  a4[24] = 0u;
  a4[21] = 0u;
  a4[22] = 0u;
  a4[19] = 0u;
  a4[20] = 0u;
  a4[17] = 0u;
  a4[18] = 0u;
  a4[15] = 0u;
  a4[16] = 0u;
  a4[13] = 0u;
  a4[14] = 0u;
  a4[10] = 0u;
  a4[11] = 0u;
  a4[8] = 0u;
  a4[9] = 0u;
  a4[6] = 0u;
  a4[7] = 0u;
  a4[4] = 0u;
  a4[5] = 0u;
  a4[2] = 0u;
  a4[3] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  a4[12] = 0u;
  v6 = (uint64_t)(a4 + 12);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a4, a1);
  return icu::number::impl::StringProp::set(v6, a2, a3);
}

char *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::displayOptions@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  const char *GrammaticalCaseIdentifier;
  const char *v7;
  uint64_t v8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[13] = 0u;
  v4 = (uint64_t)(a3 + 13);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (!*a2)
    return icu::number::impl::StringProp::set(v4, 0, 0);
  GrammaticalCaseIdentifier = udispopt_getGrammaticalCaseIdentifier(*a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v7, GrammaticalCaseIdentifier);
  return icu::number::impl::StringProp::set(v4, v7, v8);
}

{
  uint64_t v4;
  const char *GrammaticalCaseIdentifier;
  const char *v7;
  uint64_t v8;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  a3[13] = 0u;
  v4 = (uint64_t)(a3 + 13);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  if (!*a2)
    return icu::number::impl::StringProp::set(v4, 0, 0);
  GrammaticalCaseIdentifier = udispopt_getGrammaticalCaseIdentifier(*a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v7, GrammaticalCaseIdentifier);
  return icu::number::impl::StringProp::set(v4, v7, v8);
}

char *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::unitDisplayCase@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, __int16 a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v6;

  a4[29] = 0u;
  a4[30] = 0u;
  a4[27] = 0u;
  a4[28] = 0u;
  a4[25] = 0u;
  a4[26] = 0u;
  a4[23] = 0u;
  a4[24] = 0u;
  a4[21] = 0u;
  a4[22] = 0u;
  a4[19] = 0u;
  a4[20] = 0u;
  a4[17] = 0u;
  a4[18] = 0u;
  a4[15] = 0u;
  a4[16] = 0u;
  a4[14] = 0u;
  a4[11] = 0u;
  a4[12] = 0u;
  a4[9] = 0u;
  a4[10] = 0u;
  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  a4[13] = 0u;
  v6 = (uint64_t)(a4 + 13);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a4, a1);
  return icu::number::impl::StringProp::set(v6, a2, a3);
}

{
  uint64_t v6;

  a4[29] = 0u;
  a4[30] = 0u;
  a4[27] = 0u;
  a4[28] = 0u;
  a4[25] = 0u;
  a4[26] = 0u;
  a4[23] = 0u;
  a4[24] = 0u;
  a4[21] = 0u;
  a4[22] = 0u;
  a4[19] = 0u;
  a4[20] = 0u;
  a4[17] = 0u;
  a4[18] = 0u;
  a4[15] = 0u;
  a4[16] = 0u;
  a4[14] = 0u;
  a4[11] = 0u;
  a4[12] = 0u;
  a4[9] = 0u;
  a4[10] = 0u;
  a4[7] = 0u;
  a4[8] = 0u;
  a4[5] = 0u;
  a4[6] = 0u;
  a4[3] = 0u;
  a4[4] = 0u;
  a4[1] = 0u;
  a4[2] = 0u;
  *a4 = 0u;
  a4[13] = 0u;
  v6 = (uint64_t)(a4 + 13);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a4, a1);
  return icu::number::impl::StringProp::set(v6, a2, a3);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::padding@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 112) = *(_QWORD *)a2;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 8);
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_QWORD *)(result + 112) = *(_QWORD *)a2;
  *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 8);
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::threshold@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 240) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_DWORD *)(result + 240) = a2;
  return result;
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::forDateFormat@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_BYTE *)(result + 245) = a2;
  return result;
}

{
  uint64_t result;

  a3[29] = 0u;
  a3[30] = 0u;
  a3[27] = 0u;
  a3[28] = 0u;
  a3[25] = 0u;
  a3[26] = 0u;
  a3[23] = 0u;
  a3[24] = 0u;
  a3[21] = 0u;
  a3[22] = 0u;
  a3[19] = 0u;
  a3[20] = 0u;
  a3[17] = 0u;
  a3[18] = 0u;
  a3[15] = 0u;
  a3[16] = 0u;
  a3[13] = 0u;
  a3[14] = 0u;
  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  result = icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)a3, a1);
  *(_BYTE *)(result + 245) = a2;
  return result;
}

icu::Locale *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::macros@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = a3 + 16;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a3 + 238) = *(_QWORD *)(a2 + 238);
  return icu::Locale::operator=((icu::Locale *)(a3 + 248), a2 + 248);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = a3 + 16;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a3 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a3 + 238) = *(_QWORD *)(a2 + 238);
  return icu::Locale::operator=((icu::Locale *)(a3 + 248), a2 + 248);
}

uint64_t icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::macros@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = a3 + 16;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=(a3 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a3 + 238) = *(_QWORD *)(a2 + 238);
  return icu::Locale::operator=(a3 + 248, a2 + 248);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  v5 = a3 + 208;
  *(_OWORD *)(a3 + 192) = 0u;
  v6 = a3 + 192;
  *(_OWORD *)(a3 + 16) = 0u;
  v7 = a3 + 16;
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1);
  *(_QWORD *)(a3 + 4) = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12);
  icu::MeasureUnit::operator=(v7, a2 + 16);
  icu::MeasureUnit::operator=(a3 + 40, a2 + 40);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v8;
  *(_QWORD *)(a3 + 125) = *(_QWORD *)(a2 + 125);
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v9;
  icu::number::impl::SymbolsWrapper::operator=(a3 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a3 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(v6, a2 + 192);
  icu::number::impl::StringProp::operator=(v5, a2 + 208);
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a3 + 238) = *(_QWORD *)(a2 + 238);
  return icu::Locale::operator=(a3 + 248, a2 + 248);
}

uint64_t *icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::clone@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x1F0, a2);
  if (result)
    result = (uint64_t *)icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)result, a1);
  *a3 = (uint64_t)result;
  return result;
}

{
  uint64_t *result;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x1F0, a2);
  if (result)
    result = (uint64_t *)icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter((uint64_t)result, a1);
  *a3 = (uint64_t)result;
  return result;
}

BOOL icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::copyErrorTo(uint64_t a1, int *a2)
{
  if (*a2 > 0)
    return 1;
  sub_18BD128A4(a1, a2);
  return *a2 > 0;
}

uint64_t icu::number::NumberFormatter::with@<X0>(_OWORD *a1@<X8>)
{
  a1[28] = 0u;
  a1[29] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[24] = 0u;
  a1[25] = 0u;
  a1[22] = 0u;
  a1[23] = 0u;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return sub_18BCC1E68((uint64_t)a1);
}

void icu::number::NumberFormatter::withLocale(icu::number::NumberFormatter *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v5;
  _OWORD v6[11];
  __int128 v7;
  _OWORD v8[17];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_18BCC1E68((uint64_t)&v5);
  icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a2, (uint64_t)&v5, (uint64_t)this);
  icu::Locale::~Locale((icu::Locale *)((char *)&v8[2] + 8));
  icu::number::impl::StringProp::~StringProp((void **)v8);
  icu::number::impl::StringProp::~StringProp((void **)&v7);
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v6[9] + 8));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v6[7] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v6[1] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v6);
}

uint64_t icu::number::UnlocalizedNumberFormatter::locale@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1, a2);
}

{
  return icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(a3, a1, a2);
}

uint64_t icu::number::UnlocalizedNumberFormatter::UnlocalizedNumberFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper((icu::number::impl::SymbolsWrapper *)(a1 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale((icu::number::Scale *)(a1 + 168), (const icu::number::Scale *)(a2 + 168));
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  v8 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale((icu::Locale *)(a1 + 248), a2 + 248);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  v8 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale(a1 + 248, a2 + 248);
  return a1;
}

uint64_t icu::number::UnlocalizedNumberFormatter::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  v8 = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = v8;
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  v8 = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = v8;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  return a1;
}

uint64_t icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  const icu::number::LocalizedNumberFormatter *v9;
  UErrorCode v11;

  v4 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper((icu::number::impl::SymbolsWrapper *)(a1 + 136), (const icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale((icu::number::Scale *)(a1 + 168), (const icu::number::Scale *)(a2 + 168));
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  v8 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale((icu::Locale *)(a1 + 248), a2 + 248);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  v11 = U_ZERO_ERROR;
  icu::number::LocalizedNumberFormatter::lnfCopyHelper((icu::number::LocalizedNumberFormatter *)a1, v9, &v11);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 4) = v4;
  icu::MeasureUnit::MeasureUnit(a1 + 16, a2 + 16);
  icu::MeasureUnit::MeasureUnit(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  icu::number::impl::SymbolsWrapper::SymbolsWrapper(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::Scale(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::StringProp(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::StringProp(a1 + 208, a2 + 208);
  v8 = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = v8;
  icu::Locale::Locale(a1 + 248, a2 + 248);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  icu::number::LocalizedNumberFormatter::lnfMoveHelper(a1, a2);
  return a1;
}

void icu::number::LocalizedNumberFormatter::lnfCopyHelper(icu::number::LocalizedNumberFormatter *this, const icu::number::LocalizedNumberFormatter *a2, UErrorCode *a3)
{
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;

  v5 = *((_QWORD *)this + 59);
  if (v5)
  {
    v6 = (void *)sub_18BD157BC(v5);
    icu::UMemory::operator delete(v6);
  }
  atomic_store(0, (unsigned int *)this + 120);
  *((_QWORD *)this + 59) = 0;
  v7 = (_QWORD *)*((_QWORD *)this + 61);
  if (v7)
  {
    v8 = v7[309];
    if (v8)
      (*(void (**)(uint64_t, const icu::number::LocalizedNumberFormatter *))(*(_QWORD *)v8 + 8))(v8, a2);
    sub_18BCC1F2C(v7 + 1);
    icu::UMemory::operator delete(v7);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 28);
  if (v9 || (v9 = (uint64_t *)*((_QWORD *)this + 29)) != 0)
  {
    v10 = icu::UMemory::operator new(v9, (icu::UMemory *)0x9B0, (unint64_t)a2);
    if (v10)
    {
      v11 = v10;
      bzero(v10, 0x9B0uLL);
      v11[1] = (uint64_t)off_1E2262E30;
      v11[2] = (uint64_t)off_1E2256B38;
      *((_WORD *)v11 + 12) = 2;
      v11[10] = (uint64_t)off_1E2256B38;
      *((_WORD *)v11 + 44) = 2;
      v11[18] = (uint64_t)off_1E2256B38;
      *((_WORD *)v11 + 76) = 2;
      v11[26] = (uint64_t)off_1E2256B38;
      *((_WORD *)v11 + 108) = 2;
      *((_BYTE *)v11 + 274) = 1;
      v11[35] = (uint64_t)off_1E2262ED8;
      v12 = v11 + 308;
      v13 = 36;
      do
      {
        v14 = &v11[v13];
        *v14 = (uint64_t)off_1E2262E30;
        v14[1] = (uint64_t)off_1E2256B38;
        *((_WORD *)v14 + 8) = 2;
        v14[9] = (uint64_t)off_1E2256B38;
        *((_WORD *)v14 + 40) = 2;
        v14[17] = (uint64_t)off_1E2256B38;
        *((_WORD *)v14 + 72) = 2;
        v14[25] = (uint64_t)off_1E2256B38;
        *((_WORD *)v14 + 104) = 2;
        v13 += 34;
        *((_BYTE *)v14 + 266) = 1;
      }
      while (v14 + 34 != v12);
      v15 = 0;
      *((_BYTE *)v11 + 2464) = 1;
      v11[309] = 0;
      v21 = v11;
      if (*(int *)a3 <= 0)
      {
        v16 = (void *)*((_QWORD *)this + 28);
        if (v16)
        {
          sub_18BD14DE4(v11 + 1, v16, a3);
          if (*(_BYTE *)v12)
            v17 = v11 + 1;
          else
            v17 = v11 + 35;
          *((_QWORD *)this + 28) = v17;
        }
        v18 = (uint64_t *)*((_QWORD *)this + 29);
        if (v18)
        {
          v19 = icu::UMemory::operator new(v18, (icu::UMemory *)0x20, (unint64_t)v16);
          v20 = (uint64_t)v19;
          if (v19)
            icu::PluralRules::PluralRules((uint64_t)v19, *((_QWORD *)this + 29));
          sub_18BBB709C((uint64_t)(v11 + 309), v20, (int *)a3);
          *((_QWORD *)this + 29) = v11[309];
        }
        v21 = 0;
        v15 = v11;
      }
    }
    else
    {
      v15 = 0;
      v21 = 0;
      if (*(int *)a3 <= 0)
      {
        v15 = 0;
        *a3 = U_MEMORY_ALLOCATION_ERROR;
      }
    }
    *((_QWORD *)this + 61) = v15;
    sub_18BD15C7C(&v21);
  }
  else
  {
    *((_QWORD *)this + 61) = 0;
  }
}

void icu::number::LocalizedNumberFormatter::lnfMoveHelper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  unsigned int *v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 472);
  if (v4)
  {
    v5 = (void *)sub_18BD157BC(v4);
    icu::UMemory::operator delete(v5);
  }
  if (*(_QWORD *)(a2 + 472))
  {
    v6 = (_QWORD *)(a2 + 472);
    atomic_store(0x80000000, (unsigned int *)(a1 + 480));
    *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
    v7 = (unsigned int *)(a2 + 480);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 472);
    v7 = (unsigned int *)(a1 + 480);
  }
  atomic_store(0, v7);
  *v6 = 0;
  v8 = *(_QWORD **)(a1 + 488);
  if (v8)
  {
    v9 = v8[309];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    sub_18BCC1F2C(v8 + 1);
    icu::UMemory::operator delete(v8);
  }
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_QWORD *)(a2 + 488) = 0;
}

uint64_t icu::number::LocalizedNumberFormatter::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  const icu::number::LocalizedNumberFormatter *v9;
  UErrorCode v11;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 4);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(a1 + 4) = v4;
    icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
    icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    v6 = *(_OWORD *)(a2 + 96);
    v5 = *(_OWORD *)(a2 + 112);
    v7 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
    *(_OWORD *)(a1 + 96) = v6;
    *(_OWORD *)(a1 + 112) = v5;
    *(_OWORD *)(a1 + 80) = v7;
    icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    icu::number::Scale::operator=(a1 + 168, a2 + 168);
    icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
    icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
    v8 = *(_QWORD *)(a2 + 238);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 238) = v8;
    icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
    v11 = U_ZERO_ERROR;
    icu::number::LocalizedNumberFormatter::lnfCopyHelper((icu::number::LocalizedNumberFormatter *)a1, v9, &v11);
  }
  return a1;
}

{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 4) = v4;
  icu::MeasureUnit::operator=(a1 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  v7 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 80) = v7;
  icu::number::impl::SymbolsWrapper::operator=(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  v8 = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = v8;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  icu::number::LocalizedNumberFormatter::lnfMoveHelper(a1, a2);
  return a1;
}

uint64_t icu::number::LocalizedNumberFormatter::resetCompiled(uint64_t this)
{
  atomic_store(0, (unsigned int *)(this + 480));
  *(_QWORD *)(this + 472) = 0;
  return this;
}

void *sub_18BD14DE4(void *result, void *lpsrc, _DWORD *a3)
{
  uint64_t v5;
  UChar **v6;
  UChar **v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  if (!lpsrc)
    goto LABEL_8;
  v5 = (uint64_t)result;
  if (v6)
  {
    v7 = v6;
    icu::UnicodeString::operator=((UChar **)(v5 + 8), v6 + 1);
    icu::UnicodeString::operator=((UChar **)(v5 + 72), v7 + 9);
    icu::UnicodeString::operator=((UChar **)(v5 + 136), v7 + 17);
    result = icu::UnicodeString::operator=((UChar **)(v5 + 200), v7 + 25);
    v8 = *((_BYTE *)v7 + 266);
    *(_WORD *)(v5 + 264) = *((_WORD *)v7 + 132);
    *(_BYTE *)(v5 + 266) = v8;
    return result;
  }
  if (result)
  {
    v9 = (uint64_t)result;
    v10 = -2176;
    do
    {
      v11 = v5 + v10;
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2464), (UChar **)(v9 + v10 + 2192));
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2528), (UChar **)(v9 + v10 + 2256));
      icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2592), (UChar **)(v9 + v10 + 2320));
      result = icu::UnicodeString::operator=((UChar **)(v5 + v10 + 2656), (UChar **)(v9 + v10 + 2384));
      v12 = *(_BYTE *)(v9 + v10 + 2450);
      *(_WORD *)(v11 + 2720) = *(_WORD *)(v9 + v10 + 2448);
      *(_BYTE *)(v11 + 2722) = v12;
      v10 += 272;
    }
    while (v10);
    *(_BYTE *)(v5 + 2456) = *(_BYTE *)(v9 + 2184);
  }
  else
  {
LABEL_8:
    *a3 = 5;
  }
  return result;
}

void icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter(icu::number::LocalizedNumberFormatter *this)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 59);
  if (v2)
  {
    v3 = (void *)sub_18BD157BC(v2);
    icu::UMemory::operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 61);
  if (v4)
  {
    v5 = v4[309];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_18BCC1F2C(v4 + 1);
    icu::UMemory::operator delete(v4);
  }
  icu::Locale::~Locale((icu::number::LocalizedNumberFormatter *)((char *)this + 248));
  icu::number::impl::StringProp::~StringProp((void **)this + 26);
  icu::number::impl::StringProp::~StringProp((void **)this + 24);
  icu::number::Scale::~Scale((icu::number::LocalizedNumberFormatter *)((char *)this + 168));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::LocalizedNumberFormatter *)((char *)this + 136));
  icu::MeasureUnit::~MeasureUnit((icu::number::LocalizedNumberFormatter *)((char *)this + 40));
  icu::MeasureUnit::~MeasureUnit((icu::number::LocalizedNumberFormatter *)((char *)this + 16));
}

uint64_t icu::number::LocalizedNumberFormatter::LocalizedNumberFormatter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v6 = sub_18BCC1E68(a1);
  *(_QWORD *)(v6 + 472) = 0;
  *(_QWORD *)(v6 + 480) = 0;
  *(_QWORD *)(v6 + 488) = 0;
  v7 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v6 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(v6 + 4) = v7;
  icu::MeasureUnit::operator=(v6 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 80) = v10;
  icu::number::impl::SymbolsWrapper::operator=((icu::number::impl::SymbolsWrapper *)(a1 + 136), (icu::number::impl::SymbolsWrapper *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  v11 = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = v11;
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a2 + 248);
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a3);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v6 = sub_18BCC1E68(a1);
  *(_QWORD *)(v6 + 472) = 0;
  *(_QWORD *)(v6 + 480) = 0;
  *(_QWORD *)(v6 + 488) = 0;
  v7 = *(_QWORD *)(a2 + 4);
  *(_DWORD *)(v6 + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)(v6 + 4) = v7;
  icu::MeasureUnit::operator=(v6 + 16, a2 + 16);
  icu::MeasureUnit::operator=(a1 + 40, a2 + 40);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 125) = *(_QWORD *)(a2 + 125);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 80) = v10;
  icu::number::impl::SymbolsWrapper::operator=(a1 + 136, (int *)(a2 + 136));
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  icu::number::Scale::operator=(a1 + 168, a2 + 168);
  icu::number::impl::StringProp::operator=(a1 + 192, a2 + 192);
  icu::number::impl::StringProp::operator=(a1 + 208, a2 + 208);
  v11 = *(_QWORD *)(a2 + 238);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 238) = v11;
  icu::Locale::operator=(a1 + 248, a2 + 248);
  icu::Locale::operator=((icu::Locale *)(a1 + 248), a3);
  return a1;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatInt@<X0>(uint64_t *this@<X0>, UErrorCode *a2@<X2>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  void **v6;
  UErrorCode v7;
  icu::number::LocalizedNumberFormatter *v10;

  v5 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v5 <= 0)
  {
    v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, a3);
    v6 = (void **)this;
    if (this)
    {
      sub_18BCC2258((uint64_t)this);
      icu::number::impl::DecimalQuantity::setToLong(v6 + 38, a3);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v10, (icu::number::impl::UFormattedNumberData *)v6, a2);
      if (*(int *)a2 < 1)
      {
        v7 = U_ZERO_ERROR;
      }
      else
      {
        this = (uint64_t *)(*((uint64_t (**)(void **))*v6 + 1))(v6);
        v6 = 0;
        v7 = *a2;
      }
    }
    else
    {
      v7 = U_MEMORY_ALLOCATION_ERROR;
      *a2 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    v6 = 0;
    v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(_QWORD *)a4 = off_1E2263300;
  *(_QWORD *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t icu::number::LocalizedNumberFormatter::formatImpl(icu::number::LocalizedNumberFormatter *this, icu::number::impl::UFormattedNumberData *a2, UErrorCode *a3)
{
  int Magnitude;
  uint64_t result;
  int v8;

  if (*((_BYTE *)this + 244))
  {
    v8 = 0;
    Magnitude = icu::number::impl::DecimalQuantity::getMagnitude((icu::number::impl::UFormattedNumberData *)((char *)a2 + 304));
    icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)a2 + 304, Magnitude - 14, 4u, &v8);
  }
  if (icu::number::LocalizedNumberFormatter::computeCompiled(this, a3))
    result = sub_18BD16328(*((uint64_t **)this + 59), a2, a3);
  else
    result = sub_18BD15D2C((uint64_t)this, a2, a3);
  if (*(int *)a3 <= 0)
    return icu::FormattedStringBuilder::writeTerminator((icu::number::impl::UFormattedNumberData *)((char *)a2 + 8), a3);
  return result;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDouble@<X0>(uint64_t *this@<X0>, double a2@<D0>, UErrorCode *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  void **v6;
  UErrorCode v7;
  icu::number::LocalizedNumberFormatter *v10;

  v5 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v5 <= 0)
  {
    v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a3);
    v6 = (void **)this;
    if (this)
    {
      sub_18BCC2258((uint64_t)this);
      icu::number::impl::DecimalQuantity::setToDouble(v6 + 38, a2);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v10, (icu::number::impl::UFormattedNumberData *)v6, a3);
      if (*(int *)a3 < 1)
      {
        v7 = U_ZERO_ERROR;
      }
      else
      {
        this = (uint64_t *)(*((uint64_t (**)(void **))*v6 + 1))(v6);
        v6 = 0;
        v7 = *a3;
      }
    }
    else
    {
      v7 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    v6 = 0;
    v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(_QWORD *)a4 = off_1E2263300;
  *(_QWORD *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDecimal@<X0>(uint64_t *result@<X0>, const char *a2@<X1>, int a3@<W2>, UErrorCode *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v6;
  icu::number::impl::UFormattedNumberData *v7;
  UErrorCode v8;
  icu::number::LocalizedNumberFormatter *v12;

  v6 = (uint64_t *)*(unsigned int *)a4;
  if ((int)v6 <= 0)
  {
    v12 = (icu::number::LocalizedNumberFormatter *)result;
    result = icu::UMemory::operator new(v6, (icu::UMemory *)0x198, (unint64_t)a2);
    v7 = (icu::number::impl::UFormattedNumberData *)result;
    if (result)
    {
      sub_18BCC2258((uint64_t)result);
      icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v7 + 304, a2, a3, a4);
      result = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v12, v7, a4);
      if (*(int *)a4 < 1)
      {
        v8 = U_ZERO_ERROR;
      }
      else
      {
        result = (uint64_t *)(*(uint64_t (**)(icu::number::impl::UFormattedNumberData *))(*(_QWORD *)v7 + 8))(v7);
        v7 = 0;
        v8 = *a4;
      }
    }
    else
    {
      v8 = U_MEMORY_ALLOCATION_ERROR;
      *a4 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    v7 = 0;
    v8 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(_QWORD *)a5 = off_1E2263300;
  *(_QWORD *)(a5 + 8) = v7;
  *(_DWORD *)(a5 + 16) = v8;
  return result;
}

uint64_t *icu::number::LocalizedNumberFormatter::formatDecimalQuantity@<X0>(uint64_t *this@<X0>, const icu::number::impl::DecimalQuantity *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  UErrorCode v7;
  icu::number::LocalizedNumberFormatter *v10;

  v5 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v5 <= 0)
  {
    v10 = (icu::number::LocalizedNumberFormatter *)this;
    this = icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a2);
    v6 = this;
    if (this)
    {
      sub_18BCC2258((uint64_t)this);
      icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)(v6 + 38), (uint64_t)a2);
      this = (uint64_t *)icu::number::LocalizedNumberFormatter::formatImpl(v10, (icu::number::impl::UFormattedNumberData *)v6, a3);
      if (*(int *)a3 < 1)
      {
        v7 = U_ZERO_ERROR;
      }
      else
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v6 + 8))(v6);
        v6 = 0;
        v7 = *a3;
      }
    }
    else
    {
      v7 = U_MEMORY_ALLOCATION_ERROR;
      *a3 = U_MEMORY_ALLOCATION_ERROR;
    }
  }
  else
  {
    v6 = 0;
    v7 = U_ILLEGAL_ARGUMENT_ERROR;
  }
  *(_QWORD *)a4 = off_1E2263300;
  *(_QWORD *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  return this;
}

uint64_t icu::number::LocalizedNumberFormatter::computeCompiled(icu::number::LocalizedNumberFormatter *this, UErrorCode *a2)
{
  unsigned int *v4;
  uint64_t *v5;
  int v6;
  unsigned int v8;
  int v9;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 480);
  v5 = (uint64_t *)atomic_load((unsigned int *)this + 120);
  if ((v5 & 0x80000000) == 0)
  {
    v6 = *((_DWORD *)this + 60);
    if ((int)v5 <= v6 && v6 >= 1)
    {
      do
      {
        v8 = __ldaxr(v4);
        v5 = (uint64_t *)(v8 + 1);
      }
      while (__stlxr(v5, v4));
    }
  }
  v9 = *((_DWORD *)this + 60);
  if ((_DWORD)v5 != v9 || v9 < 1)
    return v5 >> 31;
  result = (uint64_t)icu::UMemory::operator new(v5, (icu::UMemory *)0x258, (unint64_t)a2);
  if (result)
  {
    *((_QWORD *)this + 59) = sub_18BD15CC8(result, (uint64_t)this, a2);
    atomic_store(0x80000000, (unsigned int *)this + 120);
    return 1;
  }
  else
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
  }
  return result;
}

void icu::number::LocalizedNumberFormatter::getAffixImpl(icu::number::LocalizedNumberFormatter *this, int a2, int a3, icu::UnicodeString *a4, UErrorCode *a5)
{
  unsigned int v10;
  int32_t v11;
  int32_t v12;
  __int16 v13;
  int v14;
  int32_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _BYTE v19[64];
  char v20[8];
  unsigned __int16 v21;
  unsigned int v22;
  _OWORD v23[8];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v23);
  if (a3)
    v10 = 0;
  else
    v10 = 3;
  if (icu::number::LocalizedNumberFormatter::computeCompiled(this, a5))
    v11 = sub_18BD16560(*((_QWORD *)this + 59), v10, 5, (uint64_t)v23, (int *)a5);
  else
    v11 = sub_18BD161B4((uint64_t)this, v10, 5, (uint64_t)v23, a5);
  v12 = v11;
  if ((*((_WORD *)a4 + 4) & 1) != 0)
    v13 = 2;
  else
    v13 = *((_WORD *)a4 + 4) & 0x1F;
  *((_WORD *)a4 + 4) = v13;
  icu::FormattedStringBuilder::toTempUnicodeString((icu::FormattedStringBuilder *)v23, (uint64_t)v19);
  if (a2)
  {
    v14 = 0;
    v15 = v12;
  }
  else
  {
    v15 = icu::FormattedStringBuilder::length((icu::FormattedStringBuilder *)v23) - v12;
    v14 = v12;
  }
  icu::UnicodeString::tempSubString((icu::UnicodeString *)v19, v14, v15, (icu::UnicodeString *)v20);
  if ((v21 & 0x8000u) == 0)
    v16 = v21 >> 5;
  else
    v16 = v22;
  icu::UnicodeString::doAppend((uint64_t)a4, (const icu::UnicodeString *)v20, 0, v16);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v19);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v23);
}

uint64_t icu::number::LocalizedNumberFormatter::getCompiled(icu::number::LocalizedNumberFormatter *this)
{
  return *((_QWORD *)this + 59);
}

uint64_t icu::number::LocalizedNumberFormatter::getCallCount(icu::number::LocalizedNumberFormatter *this)
{
  return atomic_load((unsigned int *)this + 120);
}

uint64_t icu::number::LocalizedNumberFormatter::getDecimalFormatSymbols(icu::number::LocalizedNumberFormatter *this)
{
  return icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols((icu::number::LocalizedNumberFormatter *)((char *)this + 136));
}

uint64_t sub_18BD157BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = *(_QWORD *)(a1 + 592);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 584);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 576);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 568);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 560);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 552);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 544);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 536);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 528);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 520);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 512);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 504);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  *(_QWORD *)(a1 + 8) = &off_1E2262AF8;
  if (*(_BYTE *)(a1 + 460))
    uprv_free(*(void **)(a1 + 448));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 424));
  *(_QWORD *)(a1 + 320) = off_1E2262FE8;
  icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)(a1 + 328));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 320));
  *(_QWORD *)(a1 + 280) = off_1E22632A0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 288));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 264));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 248));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 224));
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(a1 + 40));
  return a1;
}

uint64_t sub_18BD15958(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E2262AF8;
  if (*(_BYTE *)(a1 + 452))
    uprv_free(*(void **)(a1 + 440));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 416));
  *(_QWORD *)(a1 + 312) = off_1E2262FE8;
  icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)(a1 + 320));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 312));
  *(_QWORD *)(a1 + 272) = off_1E22632A0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 280));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 256));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 240));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 216));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 32));
  return a1;
}

void sub_18BD15A04(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E2262AF8;
  if (*(_BYTE *)(a1 + 452))
    uprv_free(*(void **)(a1 + 440));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(a1 + 416));
  *(_QWORD *)(a1 + 312) = off_1E2262FE8;
  icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)(a1 + 320));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 312));
  *(_QWORD *)(a1 + 272) = off_1E22632A0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 280));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 256));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 240));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)(a1 + 216));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 32));
  JUMPOUT(0x18D77FE8CLL);
}

uint64_t sub_18BD15AC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a3)
    return sub_18BD15AE0(a3, result);
  *(_BYTE *)(result + 488) = 1;
  return result;
}

uint64_t sub_18BD15AE0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_OWORD *)(a1 + 12) = v4;
  icu::UnicodeString::operator=((UChar **)(a1 + 32), (UChar **)(a2 + 32));
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 152);
  v6 = *(_OWORD *)(a2 + 168);
  v7 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 168) = v6;
  *(_OWORD *)(a1 + 152) = v5;
  v8 = *(_OWORD *)(a2 + 120);
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  icu::number::Scale::operator=(a1 + 280, a2 + 280);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  icu::UnicodeString::operator=((UChar **)(a1 + 320), (UChar **)(a2 + 320));
  v10 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v10;
  icu::MeasureUnit::operator=(a1 + 416, a2 + 416);
  if (a1 != a2)
    sub_18BD15BD4((void *)(a1 + 440), a2 + 440, (int *)(a1 + 472));
  v11 = *(_QWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(_QWORD *)(a1 + 480) = v11;
  return a1;
}

void *sub_18BD15BD4(void *result, uint64_t a2, int *a3)
{
  uint64_t v5;
  void **v6;
  void *v7;

  if (*a3 <= 0)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((int)v5 >= 1 && (v6 = (void **)result, (result = uprv_malloc(8 * v5)) != 0))
    {
      v7 = result;
      if (*((_BYTE *)v6 + 12))
        uprv_free(*v6);
      *v6 = v7;
      *((_DWORD *)v6 + 2) = v5;
      *((_BYTE *)v6 + 12) = 1;
      return memcpy(v7, *(const void **)a2, 8 * v5);
    }
    else
    {
      *a3 = 7;
    }
  }
  return result;
}

_QWORD **sub_18BD15C7C(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2[309];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    sub_18BCC1F2C(v2 + 1);
    icu::UMemory::operator delete(v2);
  }
  return a1;
}

uint64_t sub_18BD15CC8(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  *(_QWORD *)a1 = 0;
  sub_18BD17698(a1 + 8);
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)a1 = sub_18BD165E8(a1, a2, 1, a3);
  return a1;
}

uint64_t sub_18BD15D2C(uint64_t a1, _QWORD *a2, UErrorCode *a3)
{
  icu::number::impl::DecimalQuantity *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  icu::number::impl::MutablePatternModifier *v12;
  _BYTE v13[592];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v6 = (icu::number::impl::DecimalQuantity *)(a2 + 38);
  bzero(&v12, 0x258uLL);
  sub_18BD17698((uint64_t)v13);
  memset(&v13[496], 0, 96);
  v12 = sub_18BD165E8((uint64_t)&v12, a1, 0, a3);
  v7 = sub_18BD15E68((uint64_t *)&v12, v6, a3);
  v8 = 0;
  if (*(int *)a3 <= 0)
  {
    v9 = (uint64_t)v7;
    v10 = sub_18BD15EE8((uint64_t)(v7 + 1), v6, (icu::FormattedStringBuilder *)(a2 + 1), 0, a3);
    v8 = sub_18BD160EC(v9, (icu::FormattedStringBuilder *)(a2 + 1), 0, v10, a3) + v10;
    icu::MeasureUnit::operator=((uint64_t)(a2 + 47), v9 + 416);
    a2[50] = *(_QWORD *)(v9 + 184);
  }
  sub_18BD157BC((uint64_t)&v12);
  return v8;
}

uint64_t *sub_18BD15E68(uint64_t *a1, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  _QWORD *v4;
  uint64_t v6;

  if (*(int *)a3 < 1)
  {
    v6 = *a1;
    if (*a1)
    {
      v4 = a1 + 1;
      (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t *, UErrorCode *))(*(_QWORD *)v6 + 16))(v6, a2, a1 + 1, a3);
      icu::number::IntegerWidth::apply((icu::number::IntegerWidth *)((char *)a1 + 164), a2, a3);
      return v4;
    }
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  }
  return a1 + 1;
}

uint64_t sub_18BD15EE8(uint64_t a1, icu::number::impl::DecimalQuantity *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  UChar **v10;
  uint64_t v11;
  void *v12;
  int v14;
  UChar **v15;
  void *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  _BYTE v21[64];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)a2 + 32))(a2))
  {
    v10 = (UChar **)(*(_QWORD *)(a1 + 88) + 904);
LABEL_5:
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v21, v10);
    v11 = icu::FormattedStringBuilder::insert(a3, a4, (uint64_t)v21, 32, 0, a5);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v21);
    return v11;
  }
  if ((*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)a2 + 24))(a2))
  {
    v10 = (UChar **)(*(_QWORD *)(a1 + 88) + 968);
    goto LABEL_5;
  }
  v14 = sub_18BD17438(a1, a2, a3, a4, a5);
  if ((icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude(a2) & 0x80000000) != 0 || *(_DWORD *)(a1 + 20) == 1)
  {
    if ((*(_WORD *)(a1 + 32) & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 16))
        v15 = (UChar **)(*(_QWORD *)(a1 + 88) + 648);
      else
        v15 = (UChar **)(*(_QWORD *)(a1 + 88) + 8);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v21, v15);
      v14 += icu::FormattedStringBuilder::insert(a3, v14 + a4, (uint64_t)v21, 34, 0, a5);
      icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v21);
    }
    else
    {
      v14 += icu::FormattedStringBuilder::insert(a3, v14 + a4, a1 + 24, 39, 0, a5);
    }
  }
  v17 = sub_18BD175B0(a1, a2, a3, v14 + a4, a5);
  v11 = (v17 + v14);
  if (!(v17 + v14))
  {
    v18 = *(_QWORD *)(a1 + 88);
    v19 = *(_DWORD *)(v18 + 1928);
    if (v19 == -1)
      return icu::FormattedStringBuilder::insert(a3, a4, v18 + 264, 32, 0, a5);
    else
      return icu::FormattedStringBuilder::insertCodePoint(a3, a4, v19, 32, a5);
  }
  return v11;
}

uint64_t sub_18BD160EC(uint64_t a1, icu::FormattedStringBuilder *a2, uint64_t a3, int a4, UErrorCode *a5)
{
  int v10;
  const icu::number::impl::Modifier *v11;
  int v12;

  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 16))(*(_QWORD *)(a1 + 208));
  v11 = *(const icu::number::impl::Modifier **)(a1 + 200);
  if (*(int *)(a1 + 144) < 1)
  {
    v10 += (*(uint64_t (**)(_QWORD, icu::FormattedStringBuilder *, uint64_t, _QWORD, UErrorCode *))(*(_QWORD *)v11 + 16))(*(_QWORD *)(a1 + 200), a2, a3, (v10 + a4), a5);
    v12 = (*(uint64_t (**)(_QWORD, icu::FormattedStringBuilder *, uint64_t, _QWORD, UErrorCode *))(**(_QWORD **)(a1 + 192) + 16))(*(_QWORD *)(a1 + 192), a2, a3, (v10 + a4), a5);
  }
  else
  {
    v12 = icu::number::impl::Padder::padAndApply((icu::number::impl::Padder *)(a1 + 144), v11, *(const icu::number::impl::Modifier **)(a1 + 192), a2, a3, (v10 + a4), a5);
  }
  return (v12 + v10);
}

uint64_t sub_18BD161B4(uint64_t a1, int a2, int a3, uint64_t a4, UErrorCode *a5)
{
  uint64_t v10;
  icu::number::impl::MutablePatternModifier *v12;
  _BYTE v13[592];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  bzero(&v12, 0x258uLL);
  sub_18BD17698((uint64_t)v13);
  memset(&v13[496], 0, 96);
  v12 = sub_18BD165E8((uint64_t)&v12, a1, 0, a5);
  v10 = sub_18BD1629C((uint64_t)&v12, a2, a3, a4, (int *)a5);
  sub_18BD157BC((uint64_t)&v12);
  return v10;
}

uint64_t sub_18BD1629C(uint64_t a1, int a2, int a3, uint64_t a4, int *a5)
{
  if (*a5 <= 0
    && (icu::number::impl::MutablePatternModifier::setNumberProperties(*(_QWORD *)(a1 + 552), a2, a3),
        (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, int *))(**(_QWORD **)(a1 + 552) + 24))(*(_QWORD *)(a1 + 552), a4, 0, 0, a5), *a5 <= 0))
  {
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 552) + 32))(*(_QWORD *)(a1 + 552));
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18BD16328(uint64_t *a1, _QWORD *a2, UErrorCode *a3)
{
  icu::number::impl::DecimalQuantity *v6;
  uint64_t v7;
  int v8;
  void *v9;
  _OWORD v11[2];
  _OWORD v12[9];
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  __int128 v16;
  _OWORD v17[3];
  __int128 v18;
  _OWORD v19[6];
  __int128 v20;
  void *v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  v6 = (icu::number::impl::DecimalQuantity *)(a2 + 38);
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  memset(v15, 0, sizeof(v15));
  v13 = 0u;
  v14 = 0u;
  memset(v12, 0, sizeof(v12));
  memset(v11, 0, sizeof(v11));
  sub_18BD17698((uint64_t)v11);
  sub_18BD164E8(a1, v6, (uint64_t)v11, a3);
  if (*(int *)a3 <= 0)
  {
    v8 = sub_18BD15EE8((uint64_t)v11 + 8, v6, (icu::FormattedStringBuilder *)(a2 + 1), 0, a3);
    v7 = sub_18BD160EC((uint64_t)v11, (icu::FormattedStringBuilder *)(a2 + 1), 0, v8, a3) + v8;
    icu::MeasureUnit::operator=((uint64_t)(a2 + 47), (uint64_t)&v20);
    a2[50] = *((_QWORD *)&v13 + 1);
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)&v11[0] = &off_1E2262AF8;
  if (BYTE4(v22))
    uprv_free(v21[1]);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v20);
  *((_QWORD *)&v18 + 1) = off_1E2262FE8;
  icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)v19);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)&v18 + 8));
  *(_QWORD *)&v17[1] = off_1E22632A0;
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v17[1] + 8));
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)v17);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v16);
  icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)((char *)v15 + 8));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  return v7;
}

void sub_18BD164E8(uint64_t *a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v5;

  if (*(int *)a4 <= 0)
  {
    v5 = *a1;
    if (v5)
    {
      (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t, UErrorCode *))(*(_QWORD *)v5 + 16))(v5, a2, a3, a4);
      icu::number::IntegerWidth::apply((icu::number::IntegerWidth *)(a3 + 156), a2, a4);
    }
    else
    {
      *a4 = U_INTERNAL_PROGRAM_ERROR;
    }
  }
}

uint64_t sub_18BD16560(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t Modifier;

  if (*a5 <= 0
    && (Modifier = icu::number::impl::ImmutablePatternModifier::getModifier(*(_QWORD *)(a1 + 560), a2),
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, int *))(*(_QWORD *)Modifier + 16))(Modifier, a4, 0, 0, a5), *a5 <= 0))
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)Modifier + 24))(Modifier);
  }
  else
  {
    return 0;
  }
}

icu::number::impl::MutablePatternModifier *sub_18BD165E8(uint64_t a1, uint64_t a2, int a3, UErrorCode *a4)
{
  icu::number::impl::MutablePatternModifier *v8;
  icu::MeasureUnitImpl *v10;
  const char *Type;
  int v12;
  BOOL v13;
  char v14;
  const char *Subtype;
  const char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  UErrorCode *v26;
  int v27;
  icu::NumberingSystem *NumberingSystem;
  const icu::NumberingSystem *v29;
  int v30;
  int v31;
  uint64_t Name;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  const char *v36;
  unint64_t v37;
  uint64_t *v38;
  icu::DecimalFormatSymbols *v39;
  char **v40;
  icu::DecimalFormatSymbols *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  const UChar *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  const icu::UnicodeString *v50;
  const icu::number::impl::ParsedPatternInfo **v51;
  uint64_t v52;
  UChar **v53;
  UErrorCode *v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  int v65;
  __int128 v66;
  signed int v67;
  uint64_t v68;
  int v69;
  icu::number::impl::Padder *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  icu::number::impl::MutablePatternModifier *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;
  int v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  uint64_t *v94;
  uint64_t *Immutable;
  unint64_t v96;
  void *v97;
  UErrorCode *v98;
  unsigned int *OutputUnits;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t *v114;
  BOOL v115;
  int v116;
  int v117;
  uint64_t *v118;
  uint64_t v119;
  UErrorCode v120;
  unint64_t v121;
  uint64_t *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t i;
  uint64_t *v130;
  const char *v131;
  BOOL v132;
  const char *v133;
  icu::MeasureUnitImpl *v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL4 v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  int v142;
  icu::PluralRules *v143;
  int v144;
  int v145;
  void *v146;
  _BYTE v147[24];
  _BYTE v148[32];
  _OWORD v149[2];
  unsigned __int8 *v150[2];
  int v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  _BYTE v155[37];
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0 && (sub_18BD128A4(a2, (int *)a4) & 1) == 0)
  {
    v10 = (icu::MeasureUnitImpl *)(a2 + 16);
    Type = icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 16));
    v12 = strcmp("currency", Type);
    v13 = v12 == 0;
    icu::MeasureUnit::MeasureUnit((uint64_t)v155);
    v14 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)(a2 + 16) + 32))(a2 + 16, v155);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v155);
    Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)(a2 + 16));
    v144 = strcmp("percent", Subtype);
    v16 = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)(a2 + 16));
    v142 = strcmp("permille", v16);
    v17 = *(_DWORD *)(a2 + 4);
    v18 = *(_DWORD *)(a2 + 156) - 3;
    if (v18 > 5)
      v19 = 1;
    else
      v19 = dword_18BE287A4[v18];
    v139 = v19;
    v153 = 0u;
    v154 = 0u;
    v152 = &unk_18BE35972;
    icu::CurrencyUnit::CurrencyUnit(&v153, &v152, a4);
    v146 = v152;
    v138 = v17;
    if (v12)
    {
      v20 = *(_DWORD *)(a2 + 152);
      if (v20 == 7)
        v20 = 1;
      v151 = v20;
      if ((v14 & 1) == 0
        && (v144 ? (v21 = v142 == 0) : (v21 = 1), !v21 ? (v22 = 0) : (v22 = 1), v20 == 2 || !v22 || v17 == 1))
      {
        if (*icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 16)))
          v137 = 0;
        else
          v137 = icu::MeasureUnit::getComplexity((icu::MeasureUnit *)(a2 + 16), a4, v25, v26) == 2;
        v23 = 1;
      }
      else
      {
        v23 = 0;
        v137 = 0;
      }
    }
    else
    {
      icu::CurrencyUnit::CurrencyUnit((uint64_t *)&v146, (icu::CurrencyUnit *)v155, (const icu::MeasureUnit *)(a2 + 16), a4);
      icu::CurrencyUnit::operator=((uint64_t)&v153, (unint64_t)v155);
      icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v155);
      v23 = 0;
      v137 = 0;
      v24 = *(_DWORD *)(a2 + 152);
      if (v24 == 7)
        v24 = 1;
      v151 = v24;
    }
    if (icu::number::impl::SymbolsWrapper::isNumberingSystem((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
    {
      v27 = v12;
      NumberingSystem = (icu::NumberingSystem *)icu::number::impl::SymbolsWrapper::getNumberingSystem((icu::number::impl::SymbolsWrapper *)(a2 + 136));
      if (NumberingSystem)
      {
        v29 = NumberingSystem;
        v132 = v13;
        v134 = (icu::MeasureUnitImpl *)(a2 + 16);
        v30 = v23;
        v31 = a3;
        Name = icu::NumberingSystem::getName(NumberingSystem);
        v33 = a1;
        *(_QWORD *)(a1 + 192) = "";
        if (icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
        {
          v12 = v27;
          v36 = (const char *)Name;
          a3 = v31;
          v23 = v30;
          v10 = (icu::MeasureUnitImpl *)(a2 + 16);
          v13 = v132;
          goto LABEL_35;
        }
        v41 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v35, (icu::UMemory *)0xB48, v34);
        if (!v41)
          goto LABEL_165;
        v40 = (char **)v41;
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v41, (const icu::Locale *)(a2 + 248), v29, *(_BYTE *)(a2 + 245), a4);
        v12 = v27;
        v36 = (const char *)Name;
LABEL_43:
        if (*(int *)a4 > 0
          || !v12 && (icu::DecimalFormatSymbols::setCurrency(v40, (const UChar *)&v154 + 2, (int *)a4), *(int *)a4 > 0))
        {
          (*((void (**)(char **))*v40 + 1))(v40);
          goto LABEL_166;
        }
        *(_QWORD *)(v33 + 104) = v40;
        a1 = v33;
        v42 = *(_QWORD *)(v33 + 520);
        if (v42)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
        *(_QWORD *)(v33 + 520) = v40;
        a3 = v31;
        v23 = v30;
        v10 = v134;
        v13 = v132;
        if (v36)
          goto LABEL_49;
        goto LABEL_36;
      }
      *(_QWORD *)(a1 + 192) = "";
      if (!icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
      {
LABEL_39:
        v132 = v12 == 0;
        v33 = a1;
        v134 = (icu::MeasureUnitImpl *)(a2 + 16);
        v30 = v23;
        v31 = a3;
        v39 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new(v38, (icu::UMemory *)0xB48, v37);
        if (!v39)
          goto LABEL_165;
        v40 = (char **)v39;
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v39, (const icu::Locale *)(a2 + 248), a4);
        v36 = 0;
        goto LABEL_43;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 192) = "";
      if (!icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136)))
        goto LABEL_39;
    }
    v36 = 0;
LABEL_35:
    *(_QWORD *)(a1 + 104) = icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols((icu::number::impl::SymbolsWrapper *)(a2 + 136));
    if (v36)
      goto LABEL_49;
LABEL_36:
    if (*(int *)a4 > 0)
      goto LABEL_50;
    v36 = (const char *)(*(_QWORD *)(a1 + 104) + 2874);
LABEL_49:
    if (*v36)
    {
LABEL_51:
      strncpy((char *)(a1 + 180), v36, 8uLL);
      *(_BYTE *)(a1 + 188) = 0;
      if (v12 || (v47 = *(uint64_t **)(a1 + 104), (v48 = v47[310]) == 0))
      {
        if ((v23 & 1) != 0)
        {
          v44 = 0;
        }
        else
        {
          v44 = 3;
          if (v144 && v142)
          {
            if (v151 != 2 && v12 == 0)
              v44 = v139;
            else
              v44 = 0;
          }
        }
        v46 = sub_18BD2D4A0(a2 + 248, v36, v44, (int *)a4);
        v47 = (uint64_t *)*(unsigned int *)a4;
        if ((int)v47 > 0)
          goto LABEL_166;
        v48 = (uint64_t)v46;
      }
      v145 = v12;
      v49 = icu::UMemory::operator new(v47, (icu::UMemory *)0x1B8, v43);
      if (!v49)
        goto LABEL_167;
      v50 = (const icu::UnicodeString *)v49;
      v140 = v23;
      sub_18BD0C8B8((uint64_t)v49);
      v51 = (const icu::number::impl::ParsedPatternInfo **)(a1 + 536);
      v52 = *(_QWORD *)(a1 + 536);
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
      *v51 = v50;
      v53 = (UChar **)icu::UnicodeString::UnicodeString((uint64_t)v155, v48);
      icu::number::impl::PatternParser::parseToPatternInfo(v53, v50, a4, v54);
      icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)v155);
      if (*(int *)a4 > 0)
        goto LABEL_166;
      v57 = a1 + 8;
      if (*(__int16 *)(a2 + 200) < 1)
      {
        v133 = v36;
        v60 = v138;
        if (!v137)
        {
LABEL_81:
          if (*(_DWORD *)(a2 + 168) || *(_QWORD *)(a2 + 176))
          {
            icu::number::impl::MultiplierFormatHandler::setAndChain(a1 + 280, a2 + 168, v57);
            v57 = a1 + 280;
          }
          v63 = *(_DWORD *)(a2 + 64);
          memset(v149, 0, sizeof(v149));
          if (v63)
          {
            v149[0] = *(_OWORD *)(a2 + 64);
            v64 = *(_OWORD *)(a2 + 76);
          }
          else
          {
            if (v60 == 1)
            {
              icu::number::Precision::integer((uint64_t)v148);
              icu::number::FractionPrecision::withMinDigits((uint64_t)v148, 2, (uint64_t)v155);
            }
            else if (v145)
            {
              if (*(__int16 *)(a2 + 200) >= 1)
              {
                LODWORD(v149[0]) = 0;
                DWORD2(v149[1]) = 0;
LABEL_96:
                sub_18BD262EC((uint64_t)v155, (icu::number::Precision *)v149, *(_DWORD *)(a2 + 96), (const UChar *)&v153, a4);
                v66 = *(_OWORD *)&v155[16];
                *(_OWORD *)(a1 + 112) = *(_OWORD *)v155;
                *(_OWORD *)(a1 + 128) = v66;
                *(_QWORD *)(a1 + 141) = *(_QWORD *)&v155[29];
                if (*(int *)a4 > 0)
                  goto LABEL_166;
                v135 = v57;
                if (*(__int16 *)(a2 + 100) == -3)
                {
                  if (v138 == 1)
                    v67 = 1;
                  else
                    v67 = 2;
                  *(_QWORD *)(a1 + 20) = icu::number::impl::Grouper::forStrategy(v67);
                  *(_DWORD *)(a1 + 28) = v69;
                }
                else
                {
                  v68 = *(_QWORD *)(a2 + 100);
                  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 108);
                  *(_QWORD *)(a1 + 20) = v68;
                }
                v70 = (icu::number::impl::Padder *)icu::number::impl::Grouper::setLocaleData((icu::number::impl::Grouper *)(a1 + 20), *v51, (const icu::Locale *)(a2 + 248));
                if (*(_DWORD *)(a2 + 112) == -2)
                {
                  *(_QWORD *)(a1 + 152) = icu::number::impl::Padder::none(v70);
                  *(_DWORD *)(a1 + 160) = v71;
                }
                else
                {
                  v72 = *(_QWORD *)(a2 + 112);
                  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 120);
                  *(_QWORD *)(a1 + 152) = v72;
                }
                if (*(_BYTE *)(a2 + 132) || *(unsigned __int16 *)(a2 + 124) != 0xFFFF)
                {
                  v73 = *(_QWORD *)(a2 + 124);
                  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 132);
                  *(_QWORD *)(a1 + 164) = v73;
                }
                else
                {
                  *(_QWORD *)(a1 + 164) = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
                  *(_BYTE *)(a1 + 172) = v71;
                }
                v74 = *(_DWORD *)(a2 + 156);
                if (v74 == 9)
                  v74 = 0;
                *(_DWORD *)(a1 + 176) = v74;
                v75 = *(_DWORD *)(a2 + 164);
                if (v75 == 2)
                  v75 = 0;
                *(_DWORD *)(a1 + 36) = v75;
                *(_BYTE *)(a1 + 32) = v13;
                v76 = (uint64_t *)*(unsigned int *)(a2 + 4);
                if ((_DWORD)v76)
                {
                  v77 = a1;
                  v78 = v142;
                  v79 = (uint64_t *)(v77 + 264);
                  v80 = v77;
                  *(_QWORD *)(v77 + 216) = v77 + 264;
                  goto LABEL_120;
                }
                v81 = icu::UMemory::operator new(v76, (icu::UMemory *)0x28, v71);
                if (v81)
                {
                  v57 = (uint64_t)v81;
                  sub_18BD26B1C(v81, a2 + 4, *(_QWORD *)(a1 + 104), v135);
                  v80 = a1;
                  v82 = *(_QWORD *)(a1 + 544);
                  if (v82)
                    (*(void (**)(uint64_t))(*(_QWORD *)v82 + 8))(v82);
                  v78 = v142;
                  *(_QWORD *)(v80 + 544) = v57;
LABEL_120:
                  v83 = (icu::number::impl::MutablePatternModifier *)icu::UMemory::operator new(v79, (icu::UMemory *)0x188, v71);
                  v8 = v83;
                  if (!v83)
                  {
LABEL_168:
                    v65 = 7;
                    goto LABEL_169;
                  }
                  v136 = v57;
                  v143 = (icu::PluralRules *)(a2 + 248);
                  icu::number::impl::MutablePatternModifier::MutablePatternModifier(v83, 0);
                  v84 = *(_QWORD *)(v80 + 552);
                  if (v84)
                    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
                  *(_QWORD *)(v80 + 552) = v8;
                  v86 = (uint64_t *)(a2 + 224);
                  v85 = *(_QWORD *)(a2 + 224);
                  if (!v85
                    || v138 == 1
                    && (v145 == 0) != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85))
                  {
                    v86 = (uint64_t *)v51;
                  }
                  v87 = v78 == 0;
                  v88 = *v86;
                  icu::number::impl::MutablePatternModifier::setPatternInfo((uint64_t)v8, v88, 0);
                  v89 = (_QWORD *)v80;
                  icu::number::impl::MutablePatternModifier::setPatternAttributes((uint64_t)v8, *(_DWORD *)(v80 + 176), v87, *(_BYTE *)(a2 + 160));
                  v90 = icu::number::impl::MutablePatternModifier::needsPlurals(v8);
                  v91 = 0;
                  v92 = *(_QWORD *)(v80 + 104);
                  v93 = v151;
                  if (v90)
                    v91 = sub_18BD173E0(v80, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                  icu::number::impl::MutablePatternModifier::setSymbols((uint64_t)v8, v92, (const UChar *)&v153, v93, (uint64_t)v91, a4);
                  if (a3)
                  {
                    Immutable = icu::number::impl::MutablePatternModifier::createImmutable(v8, a4, v94);
                    sub_18BBB709C(v80 + 560, (uint64_t)Immutable, (int *)a4);
                  }
                  if (*(int *)a4 > 0)
                    goto LABEL_166;
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v88 + 88))(v88))
                  {
                    icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth((uint64_t)v8, a4, (icu::UnicodeString *)v155);
                    icu::UnicodeString::operator=((icu::UnicodeString *)(v80 + 40), (icu::UnicodeString *)v155);
                    icu::UnicodeString::~UnicodeString(v97, (icu::UnicodeString *)v155);
                  }
                  if (v140)
                  {
                    if (*(__int16 *)(a2 + 216) <= 0)
                      v98 = (UErrorCode *)"";
                    else
                      v98 = *(UErrorCode **)(a2 + 208);
                    if (*(__int16 *)(a2 + 200) >= 1)
                    {
                      OutputUnits = (unsigned int *)icu::units::UnitsRouter::getOutputUnits((icu::units::UnitsRouter *)(*(_QWORD *)(v80 + 504) + 8));
                      v100 = sub_18BD173E0(v80, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                      v102 = sub_18BD1C6CC((const char **)v143, OutputUnits, &v151, v98, (uint64_t)v100, v136, a4, v101);
                      sub_18BBB709C(v80 + 584, (uint64_t)v102, (int *)a4);
                      v103 = *(_QWORD *)(v80 + 584);
LABEL_148:
                      v104 = v138;
                      goto LABEL_149;
                    }
                    if (v137)
                    {
                      v107 = icu::UMemory::operator new((uint64_t *)v137, (icu::UMemory *)0x228, v96);
                      v108 = (uint64_t)v107;
                      if (v107)
                      {
                        *v107 = (uint64_t)off_1E2262C68;
                        v107[1] = (uint64_t)&unk_1E2262C98;
                        v107[2] = 0;
                        v107[3] = 0;
                        *((_DWORD *)v107 + 8) = 1;
                        v107[5] = 0;
                        sub_18BCC1E68((uint64_t)(v107 + 6));
                        *(_OWORD *)(v108 + 520) = 0u;
                        *(_OWORD *)(v108 + 536) = 0u;
                      }
                      sub_18BBB709C(v80 + 576, v108, (int *)a4);
                      v109 = sub_18BD173E0(v80, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                      sub_18BD1BE20((const char **)v143, v10, &v151, v98, (uint64_t)v109, v136, *(_QWORD *)(v80 + 576), (icu::MeasureUnitImpl *)a4);
                      v103 = *(_QWORD *)(v80 + 576);
                      goto LABEL_148;
                    }
                    v141 = a3;
                    memset(v155, 0, 24);
                    icu::MeasureUnit::MeasureUnit((uint64_t)v155, (unint64_t)v10);
                    if ((sub_18BD17390(a2 + 40) & 1) == 0)
                    {
                      icu::MeasureUnit::reciprocal((icu::MeasureUnitImpl **)(a2 + 40), a4, (uint64_t)v147);
                      icu::MeasureUnit::product((icu::MeasureUnitImpl **)v155, (const icu::MeasureUnit *)v147, a4, (uint64_t)v148);
                      icu::MeasureUnit::operator=((uint64_t)v155, (uint64_t)v148);
                      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v148);
                      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v147);
                      v123 = icu::MeasureUnit::getType((icu::MeasureUnit *)v155);
                      v122 = (uint64_t *)*(unsigned __int8 *)v123;
                      if (!*v123)
                      {
                        if (!*icu::MeasureUnit::getType(v10)
                          || (v131 = icu::MeasureUnit::getType((icu::MeasureUnit *)(a2 + 40)),
                              v122 = (uint64_t *)*(unsigned __int8 *)v131,
                              !*v131))
                        {
                          *a4 = U_UNSUPPORTED_ERROR;
                          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v155);
                          goto LABEL_166;
                        }
                      }
                    }
                    v124 = v80;
                    v125 = v80 + 568;
                    v126 = icu::UMemory::operator new(v122, (icu::UMemory *)0x368, v121);
                    v127 = (uint64_t)v126;
                    if (v126)
                    {
                      *v126 = (uint64_t)off_1E2262BC8;
                      v126[1] = (uint64_t)&unk_1E2262BF8;
                      v128 = v126 + 106;
                      for (i = 16; i != 848; i += 104)
                        icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)(v127 + i));
                      *v128 = 0;
                      *(_QWORD *)(v127 + 856) = 0;
                      *(_QWORD *)(v127 + 864) = "";
                    }
                    sub_18BBB709C(v125, v127, (int *)a4);
                    v89 = (_QWORD *)v124;
                    v130 = sub_18BD173E0(v124, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                    sub_18BD17BC4(v143, (icu::MeasureUnit *)v155, &v151, (const char *)v98, (uint64_t)v130, v136, *(_QWORD **)(v124 + 568), (int *)a4);
                    v103 = *(_QWORD *)(v124 + 568);
                    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v155);
                    v104 = v138;
                    a3 = v141;
                  }
                  else
                  {
                    v104 = v138;
                    v103 = v136;
                    if (v145 || v151 != 2)
                    {
                      v89[25] = v89 + 31;
                    }
                    else
                    {
                      v105 = sub_18BD173E0((uint64_t)v89, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                      v106 = sub_18BD1BA04((uint64_t)v143, (unint64_t)&v153, (uint64_t)v105, v136, (int *)a4);
                      sub_18BBB709C((uint64_t)(v89 + 71), (uint64_t)v106, (int *)a4);
                      v103 = v89[71];
                    }
                  }
LABEL_149:
                  v110 = (uint64_t *)*(unsigned int *)a4;
                  if ((int)v110 <= 0)
                  {
                    if (v104 != 1)
                    {
                      v111 = v103;
                      goto LABEL_152;
                    }
                    v112 = v103;
                    v113 = v151;
                    v114 = icu::UMemory::operator new(v110, (icu::UMemory *)0x818, v96);
                    if (v114)
                    {
                      v111 = (uint64_t)v114;
                      if (v145)
                        v115 = 1;
                      else
                        v115 = v113 == 2;
                      v116 = !v115;
                      v117 = *(_DWORD *)(a2 + 8);
                      v118 = sub_18BD173E0((uint64_t)v89, *(uint64_t **)(a2 + 232), v143, (const icu::Locale *)a4);
                      sub_18BD0C5BC(v111, v117, (uint64_t)v143, v133, v116, (uint64_t)v118, v8, a3, v112, (int *)a4);
                      if (*(int *)a4 < 1)
                      {
                        v119 = v89[74];
                        if (!v119)
                        {
                          v89[74] = v111;
                          goto LABEL_152;
                        }
                        (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
                        v120 = *a4;
                        v89[74] = v111;
                        if (v120 <= U_ZERO_ERROR)
                        {
LABEL_152:
                          if (a3)
                          {
                            icu::number::impl::ImmutablePatternModifier::addToChain(v89[70], v111);
                            v8 = (icu::number::impl::MutablePatternModifier *)v89[70];
                          }
                          else
                          {
                            icu::number::impl::MutablePatternModifier::addToChain((uint64_t)v8, v111);
                          }
                          goto LABEL_170;
                        }
                      }
                      goto LABEL_166;
                    }
LABEL_165:
                    if (*(int *)a4 > 0)
                      goto LABEL_166;
                    goto LABEL_167;
                  }
LABEL_166:
                  v8 = 0;
LABEL_170:
                  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v153);
                  return v8;
                }
LABEL_167:
                v8 = 0;
                goto LABEL_168;
              }
              icu::number::Precision::maxFraction(6, (uint64_t)v155);
            }
            else
            {
              icu::number::Precision::currency(0, (uint64_t)v155);
            }
            v149[0] = *(_OWORD *)v155;
            v64 = *(_OWORD *)&v155[12];
          }
          *(_OWORD *)((char *)v149 + 12) = v64;
          goto LABEL_96;
        }
        v61 = icu::UMemory::operator new((uint64_t *)v137, (icu::UMemory *)0x30, v56);
        v62 = (uint64_t)v61;
        if (v61)
          icu::number::impl::UnitConversionHandler::UnitConversionHandler(v61, v10, a1 + 8, a4);
        v59 = (uint64_t *)(a1 + 512);
        sub_18BBB709C(a1 + 512, v62, (int *)a4);
      }
      else
      {
        if ((v140 & 1) == 0)
        {
          v8 = 0;
          v65 = 1;
LABEL_169:
          *a4 = v65;
          goto LABEL_170;
        }
        v58 = icu::UMemory::operator new((uint64_t *)v140, (icu::UMemory *)0xC0, v56);
        if (v58)
        {
          icu::StringPiece::StringPiece((icu::StringPiece *)v150, *(const char **)(a2 + 192));
          icu::number::impl::UsagePrefsHandler::UsagePrefsHandler(v58, a2 + 248, (icu::MeasureUnitImpl **)v10, v150[0], (uint64_t)v150[1], a1 + 8, (int *)a4);
        }
        v133 = v36;
        v59 = (uint64_t *)(a1 + 504);
        sub_18BBB709C(a1 + 504, (uint64_t)v58, (int *)a4);
      }
      v57 = *v59;
      v60 = v138;
      goto LABEL_81;
    }
LABEL_50:
    v36 = "latn";
    goto LABEL_51;
  }
  return 0;
}

uint64_t sub_18BD17390(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  icu::MeasureUnit::MeasureUnit((uint64_t)v4);
  v2 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 32))(a1, v4);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v4);
  return v2;
}

uint64_t *sub_18BD173E0(uint64_t a1, uint64_t *a2, icu::PluralRules *a3, const icu::Locale *a4)
{
  uint64_t *v4;
  uint64_t v6;

  v4 = a2;
  if (!a2)
  {
    v4 = *(uint64_t **)(a1 + 528);
    if (!v4)
    {
      v4 = icu::PluralRules::forLocale(a3, a4, (UErrorCode *)a3);
      v6 = *(_QWORD *)(a1 + 528);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      *(_QWORD *)(a1 + 528) = v4;
    }
  }
  return v4;
}

uint64_t sub_18BD17438(uint64_t a1, icu::number::impl::DecimalQuantity *this, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  int UpperDisplayMagnitude;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  UChar **v15;
  UChar **v16;
  UChar **v17;
  void *v18;
  int Digit;
  uint64_t v20;
  int v21;
  int inserted;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[64];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  UpperDisplayMagnitude = icu::number::impl::DecimalQuantity::getUpperDisplayMagnitude(this);
  v11 = 0;
  if ((UpperDisplayMagnitude & 0x80000000) == 0)
  {
    v12 = 0;
    v13 = UpperDisplayMagnitude + 1;
    do
    {
      if (icu::number::impl::Grouper::groupAtPosition((icu::number::impl::Grouper *)(a1 + 4), v12, this))
      {
        v14 = *(_QWORD *)(a1 + 88);
        v15 = (UChar **)(v14 + 72);
        v16 = (UChar **)(v14 + 1096);
        if (*(_BYTE *)(a1 + 16))
          v17 = v16;
        else
          v17 = v15;
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v28, v17);
        LODWORD(v11) = icu::FormattedStringBuilder::insert(a3, a4, (uint64_t)v28, 38, 0, a5) + v11;
        icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v28);
      }
      Digit = icu::number::impl::DecimalQuantity::getDigit(this, v12);
      v20 = *(_QWORD *)(a1 + 88);
      v21 = *(_DWORD *)(v20 + 1928);
      if (v21 == -1)
      {
        v23 = v20 + ((unint64_t)(Digit + 17) << 6);
        v24 = v20 + 264;
        v25 = v23 + 8;
        if ((Digit - 10) >= 0xFFFFFFF7)
          v26 = v25;
        else
          v26 = v24;
        inserted = icu::FormattedStringBuilder::insert(a3, a4, v26, 32, 0, a5);
      }
      else
      {
        inserted = icu::FormattedStringBuilder::insertCodePoint(a3, a4, v21 + Digit, 32, a5);
      }
      v11 = (inserted + v11);
      ++v12;
    }
    while (v13 != v12);
  }
  return v11;
}

uint64_t sub_18BD175B0(uint64_t a1, icu::number::impl::DecimalQuantity *this, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  int LowerDisplayMagnitude;
  uint64_t v11;
  int v12;
  int v13;
  int Digit;
  int v15;
  uint64_t v16;
  int v17;
  int inserted;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  LowerDisplayMagnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude(this);
  if ((LowerDisplayMagnitude & 0x80000000) == 0)
    return 0;
  v12 = 0;
  LODWORD(v11) = 0;
  if (-LowerDisplayMagnitude <= 1)
    v13 = -1;
  else
    v13 = LowerDisplayMagnitude;
  do
  {
    Digit = icu::number::impl::DecimalQuantity::getDigit(this, --v12);
    v15 = v11 + a4;
    v16 = *(_QWORD *)(a1 + 88);
    v17 = *(_DWORD *)(v16 + 1928);
    if (v17 == -1)
    {
      v19 = v16 + ((unint64_t)(Digit + 17) << 6);
      v20 = v16 + 264;
      v21 = v19 + 8;
      if ((Digit - 10) >= 0xFFFFFFF7)
        v22 = v21;
      else
        v22 = v20;
      inserted = icu::FormattedStringBuilder::insert(a3, v15, v22, 33, 0, a5);
    }
    else
    {
      inserted = icu::FormattedStringBuilder::insertCodePoint(a3, v15, v17 + Digit, 33, a5);
    }
    v11 = (inserted + v11);
  }
  while (v13 != v12);
  return v11;
}

uint64_t sub_18BD17698(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E2262AF8;
  *(_WORD *)(a1 + 12) = -3;
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 32) = off_1E2256B38;
  *(_WORD *)(a1 + 40) = 2;
  icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 32));
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 144) = -2;
  *(_BYTE *)(a1 + 164) = 0;
  *(_WORD *)(a1 + 156) = -1;
  *(_QWORD *)(a1 + 200) = 0;
  icu::number::impl::ScientificModifier::ScientificModifier(a1 + 216);
  *(_QWORD *)(a1 + 240) = &unk_1E2262B38;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = &unk_1E2262B38;
  *(_BYTE *)(a1 + 264) = 1;
  *(_QWORD *)(a1 + 272) = off_1E22632A0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)(a1 + 312));
  icu::MeasureUnit::MeasureUnit(a1 + 416);
  *(_QWORD *)(a1 + 440) = a1 + 456;
  *(_DWORD *)(a1 + 448) = 2;
  *(_BYTE *)(a1 + 452) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 488) = 0;
  return a1;
}

void sub_18BD177AC(icu::number::impl::Modifier *a1)
{
  void *v1;

  icu::number::impl::Modifier::~Modifier(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD177C0()
{
  return 0;
}

uint64_t sub_18BD177C8()
{
  return 0;
}

uint64_t sub_18BD177D0()
{
  return 0;
}

uint64_t sub_18BD177D8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18BD177E0()
{
  return 0;
}

void sub_18BD177E8(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

BOOL sub_18BD177F0(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) == 0;
}

uint64_t icu::number::impl::Grouper::forStrategy(signed int a1)
{
  if (a1 >= 5)
    abort();
  return qword_18BE287C0[a1] | (qword_18BE287E8[a1] << 16) | qword_18BE287E8[a1];
}

unint64_t icu::number::impl::Grouper::forProperties(icu::number::impl::Grouper *this, const icu::number::impl::DecimalFormatProperties *a2)
{
  int v2;
  int v3;
  int v4;
  unint64_t v6;

  if (!*((_BYTE *)this + 80))
    return 0xFFFEFFFFFFFFLL;
  v2 = *((_DWORD *)this + 19);
  v3 = *((_DWORD *)this + 188);
  if (v3 << 16 <= 0)
    v3 = *((_DWORD *)this + 19);
  if (v2 << 16 <= 0)
    LOWORD(v2) = v3;
  v4 = *((_DWORD *)this + 27) << 16;
  if (v4 != -196608 && v4 <= 0)
    v6 = 0xFFFE00000000;
  else
    v6 = (unint64_t)(unsigned __int16)*((_DWORD *)this + 27) << 32;
  return v6 & 0xFFFFFFFF00000000 | ((unint64_t)(unsigned __int16)v3 << 16) | (unsigned __int16)v2;
}

uint64_t icu::number::impl::Grouper::setLocaleData(icu::number::impl::Grouper *this, const icu::number::impl::ParsedPatternInfo *a2, const icu::Locale *a3)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;

  result = *((unsigned __int16 *)this + 2);
  if ((_DWORD)result == 65533)
  {
    v7 = sub_18BD2D7EC((uint64_t)a3);
    result = uprv_max(2, v7);
    goto LABEL_5;
  }
  if ((_DWORD)result == 65534)
  {
    result = sub_18BD2D7EC((uint64_t)a3);
LABEL_5:
    *((_WORD *)this + 2) = result;
  }
  v8 = *(unsigned __int16 *)this;
  if (v8 == 65534 || *((__int16 *)this + 1) == -4)
  {
    v9 = *((_QWORD *)a2 + 9);
    if (v8 == 65532)
      v10 = 3;
    else
      v10 = -1;
    if (WORD1(v9) != 0xFFFF)
      v10 = *((_QWORD *)a2 + 9);
    if ((~v9 & 0xFFFF00000000) != 0)
      v11 = WORD1(*((_QWORD *)a2 + 9));
    else
      v11 = v10;
    *(_WORD *)this = v10;
    *((_WORD *)this + 1) = v11;
  }
  else if ((unsigned __int16)result == 65534)
  {
    result = sub_18BD2D7EC((uint64_t)a3);
    *((_WORD *)this + 2) = result;
  }
  return result;
}

BOOL icu::number::impl::Grouper::groupAtPosition(icu::number::impl::Grouper *this, int a2, const icu::number::impl::DecimalQuantity *a3)
{
  int v3;
  BOOL v4;
  int v6;

  v3 = *(unsigned __int16 *)this;
  if (*(_WORD *)this)
    v4 = v3 == 0xFFFF;
  else
    v4 = 1;
  if (v4)
    return 0;
  v6 = a2 - (__int16)v3;
  return v6 >= 0
      && !(v6 % *((__int16 *)this + 1))
      && (int)(icu::number::impl::DecimalQuantity::getUpperDisplayMagnitude(a3) - *(__int16 *)this + 1) >= *((__int16 *)this + 2);
}

uint64_t icu::number::impl::Grouper::getPrimary(icu::number::impl::Grouper *this)
{
  return *(__int16 *)this;
}

uint64_t icu::number::impl::Grouper::getSecondary(icu::number::impl::Grouper *this)
{
  return *((__int16 *)this + 1);
}

uint64_t icu::number::IntegerWidth::IntegerWidth(uint64_t this, __int16 a2, __int16 a3, char a4)
{
  *(_BYTE *)(this + 8) = 0;
  *(_WORD *)this = a2;
  *(_WORD *)(this + 2) = a3;
  *(_BYTE *)(this + 4) = a4;
  return this;
}

{
  *(_BYTE *)(this + 8) = 0;
  *(_WORD *)this = a2;
  *(_WORD *)(this + 2) = a3;
  *(_BYTE *)(this + 4) = a4;
  return this;
}

uint64_t icu::number::IntegerWidth::zeroFillTo(icu::number::IntegerWidth *this)
{
  if (this <= 0x3E7)
    return this | 0xFFFF0000;
  else
    return 65810;
}

unint64_t icu::number::IntegerWidth::truncateAt(icu::number::IntegerWidth *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(_QWORD *)this;
    a2 = *(_QWORD *)this >> 16;
    v3 = *(_QWORD *)this & 0xFFFFFF0000000000;
    v4 = *(_QWORD *)this & 0xFF00000000;
  }
  else
  {
    LOWORD(v2) = *(_WORD *)this;
    if (a2 > 0x3E7 || *(__int16 *)this > (int)a2)
    {
      v5 = (_DWORD)a2 == -1;
      if ((_DWORD)a2 == -1)
        LOWORD(a2) = -1;
      else
        LOWORD(a2) = 1;
      if (!v5)
        LOWORD(v2) = 274;
      v3 = 0;
      v4 = 0;
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
  }
  return v4 | v3 | (unsigned __int16)v2 | ((unsigned __int16)a2 << 16);
}

void icu::number::IntegerWidth::apply(icu::number::IntegerWidth *this, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  int v6;

  if (*(int *)a3 <= 0)
  {
    if (*((_BYTE *)this + 8))
    {
      *a3 = U_ILLEGAL_ARGUMENT_ERROR;
    }
    else
    {
      v6 = *((__int16 *)this + 1);
      if (v6 == -1)
      {
        icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)a2, *(__int16 *)this);
      }
      else
      {
        if (*((_BYTE *)this + 4))
        {
          if ((int)icu::number::impl::DecimalQuantity::getMagnitude(a2) > v6)
            *a3 = U_ILLEGAL_ARGUMENT_ERROR;
        }
        icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)a2, *(__int16 *)this);
        icu::number::impl::DecimalQuantity::applyMaxInteger(a2, *((__int16 *)this + 1));
      }
    }
  }
}

BOOL icu::number::IntegerWidth::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void *sub_18BD17BC4(void *a1, icu::MeasureUnit *this, _DWORD *a3, const char *a4, uint64_t a5, uint64_t a6, _QWORD *a7, int *a8)
{
  uint64_t i;
  _BYTE *v17;
  unint64_t v18;
  void *v19;
  uint64_t j;
  void *result;
  _BYTE v22[64];
  _BYTE v23[640];
  UChar *v24;
  unsigned __int16 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*icu::MeasureUnit::getType(this))
  {
    bzero(v23, 0x2C0uLL);
    for (i = 0; i != 704; i += 64)
    {
      v17 = &v23[i];
      *(_QWORD *)v17 = off_1E2256B38;
      *((_WORD *)v17 + 4) = 2;
    }
    sub_18BD17D68((uint64_t)a1, this, a3, a4, (uint64_t)v23, a8);
    sub_18BD1849C(a1, this, (uint64_t)v23, a8);
    v18 = *a8;
    if ((int)v18 <= 0)
    {
      a7[106] = a5;
      a7[107] = a6;
      sub_18BD18920((uint64_t)a7, (uint64_t)v23, 43, (UErrorCode *)a8);
      v18 = v25;
      if ((v25 & 1) == 0)
      {
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v22, &v24);
        a7[108] = sub_18BD18AD0((icu::UnicodeString *)v22, (UErrorCode)*a8);
        icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v22);
      }
    }
    for (j = 640; j != -64; j -= 64)
      result = icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v23[j]);
  }
  else
  {
    result = (void *)sub_18BD18C18((uint64_t)a1, (icu::MeasureUnitImpl **)this, a3, a4, (uint64_t)a7, (UErrorCode *)a8);
    a7[106] = a5;
    a7[107] = a6;
  }
  return result;
}

void sub_18BD17D68(uint64_t a1, icu::MeasureUnit *a2, _DWORD *a3, const char *a4, uint64_t a5, int *a6)
{
  uint64_t v12;
  _QWORD *v13;
  const char *Type;
  _QWORD *v15;
  const char *Subtype;
  const char *v17;
  UChar *String;
  void *v19;
  const char *v20;
  int v21;
  int v22;
  const UChar *v23;
  void *v24;
  const char *v25;
  _BYTE *v26;
  icu::StringPiece *v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  _BYTE v32[16];
  _BYTE v33[16];
  char *v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  int v39;
  UErrorCode v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  char *v47;
  int v48;
  UErrorCode v49;
  char *v50;
  int v51;
  char *v52;
  int v53;
  char *v54;
  int v55;
  _QWORD v56[2];
  const UChar *v57;
  int v58;
  void (**v59)(icu::UnicodeString *__hidden);
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  char *v64[8];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  void *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char *__s[8];
  void *v76[8];
  _OWORD v77[8];
  uint64_t v78;
  void *v79[7];
  uint64_t v80;
  uint64_t v81;

  v12 = 0;
  v81 = *MEMORY[0x1E0C80C00];
  v56[0] = &off_1E2262D68;
  v56[1] = a5;
  do
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a5 + v12));
    v12 += 64;
  }
  while (v12 != 704);
  v13 = ures_open("icudt74l-unit", *(char **)(a1 + 40), a6);
  if (*a6 > 0)
    goto LABEL_41;
  memset(&v79[1], 0, 48);
  v80 = 0;
  v79[0] = (char *)&v79[1] + 5;
  LODWORD(v79[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v54, "/");
  icu::CharString::append((icu::CharString *)v79, v54, v55, (UErrorCode *)a6);
  Type = icu::MeasureUnit::getType(a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v52, Type);
  icu::CharString::append((icu::CharString *)v79, v52, v53, (UErrorCode *)a6);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v50, "/");
  icu::CharString::append((icu::CharString *)v79, v50, v51, (UErrorCode *)a6);
  v15 = ures_open("ICUDATA", "metadata", a6);
  v49 = *a6;
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v77);
  memset(&v76[1], 0, 56);
  v76[0] = (char *)&v76[1] + 5;
  LODWORD(v76[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v47, "alias/unit/");
  icu::CharString::append((icu::CharString *)v76, v47, v48, &v49);
  Subtype = icu::MeasureUnit::getSubtype(a2);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v45, Subtype);
  icu::CharString::append((icu::CharString *)v76, v45, v46, &v49);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v43, "/replacement");
  icu::CharString::append((icu::CharString *)v76, v43, v44, &v49);
  ures_getByKeyWithFallback((uint64_t)v15, (char *)v76[0], (uint64_t)v77, &v49);
  memset(&__s[1], 0, 56);
  __s[0] = (char *)&__s[1] + 5;
  LODWORD(__s[1]) = 40;
  if (v49 <= U_ZERO_ERROR)
  {
    memset(&v64[1], 0, 56);
    v64[0] = (char *)off_1E2256B38;
    LOWORD(v64[1]) = 2;
    LODWORD(v59) = 0;
    String = (UChar *)ures_getString((uint64_t)v77, (int *)&v59, a6);
    if (*a6 <= 0)
    {
      v70 = String;
      icu::UnicodeString::setTo((icu::UnicodeString *)v64, 1, (const UChar **)&v70, (int)v59);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)v64);
    }
    icu::CharString::appendInvariantChars((icu::CharString *)__s, (const icu::UnicodeString *)v64, (UErrorCode *)a6);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v64);
  }
  else
  {
    v17 = icu::MeasureUnit::getSubtype(a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v41, v17);
    icu::CharString::append((icu::CharString *)__s, v41, v42, (UErrorCode *)a6);
  }
  v20 = __s[0];
  v21 = strlen(__s[0]);
  v22 = v21;
  if (v21 >= 8 && !strcmp(&__s[0][v21 - 7], "-person"))
    v22 -= 7;
  icu::CharString::append((icu::CharString *)v79, v20, v22, (UErrorCode *)a6);
  if (*a3 != 2)
  {
    v40 = *a6;
    v71 = 0u;
    v73 = 0u;
    v72 = 0u;
    v70 = (char *)&v71 + 5;
    LODWORD(v71) = 40;
    v74 = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v38, "units");
    icu::CharString::append((icu::CharString *)&v70, v38, v39, &v40);
    icu::CharString::append((icu::CharString *)&v70, (const char *)v79[0], v80, &v40);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v36, "/gender");
    icu::CharString::append((icu::CharString *)&v70, v36, v37, &v40);
    v69 = 0;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    memset(v64, 0, sizeof(v64));
    icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v64);
    ures_getByKeyWithFallback((uint64_t)v13, (char *)v70, (uint64_t)v64, &v40);
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0;
    v59 = off_1E2256B38;
    LOWORD(v60) = 2;
    v58 = 0;
    v23 = ures_getString((uint64_t)v64, &v58, (int *)&v40);
    if (v40 <= U_ZERO_ERROR)
    {
      v57 = v23;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v59, 1, &v57, v58);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v59);
    }
    icu::UnicodeString::operator=((icu::UnicodeString *)(a5 + 640), (icu::UnicodeString *)&v59);
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v59);
    icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v64);
    if (BYTE4(v71))
      uprv_free(v70);
  }
  memset(&v64[1], 0, 56);
  v64[0] = (char *)&v64[1] + 5;
  LODWORD(v64[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v34, "units");
  icu::CharString::append((icu::CharString *)v64, v34, v35, (UErrorCode *)a6);
  if (*a3 == 1)
  {
    v25 = "Short";
    v26 = v32;
    v27 = (icu::StringPiece *)v32;
  }
  else
  {
    if (*a3)
      goto LABEL_24;
    v25 = "Narrow";
    v26 = v33;
    v27 = (icu::StringPiece *)v33;
  }
  icu::StringPiece::StringPiece(v27, v25);
  icu::CharString::append((icu::CharString *)v64, *(const char **)v26, *((_DWORD *)v26 + 2), (UErrorCode *)a6);
LABEL_24:
  icu::CharString::append((icu::CharString *)v64, (const char *)v79[0], v80, (UErrorCode *)a6);
  if (*a3 == 2)
  {
    if (*a4)
    {
      v71 = 0u;
      v73 = 0u;
      v72 = 0u;
      v70 = (char *)&v71 + 5;
      LODWORD(v71) = 40;
      v74 = 0;
      icu::CharString::append((icu::CharString *)&v70, v64[0], (int)v64[7], (UErrorCode *)a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v30, "/case/");
      icu::CharString::append((icu::CharString *)&v70, v30, v31, (UErrorCode *)a6);
      icu::StringPiece::StringPiece((icu::StringPiece *)&v28, a4);
      icu::CharString::append((icu::CharString *)&v70, v28, v29, (UErrorCode *)a6);
      LODWORD(v59) = 0;
      ures_getAllChildrenWithFallback((uint64_t)v13, (char *)v70, (uint64_t)v56, (int *)&v59);
      if (BYTE4(v71))
        uprv_free(v70);
    }
  }
  LODWORD(v70) = 0;
  ures_getAllChildrenWithFallback((uint64_t)v13, v64[0], (uint64_t)v56, (int *)&v70);
  if (*a3 == 1 && (int)v70 >= 1)
    *a6 = (int)v70;
  if (BYTE4(v64[1]))
    uprv_free(v64[0]);
  if (BYTE4(__s[1]))
    uprv_free(__s[0]);
  if (BYTE4(v76[1]))
    uprv_free(v76[0]);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v77);
  if (v15)
    ures_close(v15);
  if (BYTE4(v79[1]))
    uprv_free(v79[0]);
LABEL_41:
  if (v13)
    ures_close(v13);
  icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v56);
}

void *sub_18BD1849C(void *result, icu::MeasureUnitImpl *a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  UErrorCode *v8;
  void *v9;
  icu::UnicodeString *v10;
  const icu::MeasureUnit *v11;
  const icu::MeasureUnit *v12;
  int v13;
  int v14;
  int v15;
  icu::SingleUnitImpl *v16;
  int v17;
  const char *SimpleUnitID;
  unint64_t v19;
  int v20;
  unint64_t v21;
  _WORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  void *v27;
  void *v28;
  uint64_t v29[2];
  _BYTE v30[24];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  _BYTE v36[224];
  _BYTE v37[224];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[224];
  __int128 v43;
  __int128 v44;
  void *v45[18];

  v45[17] = *(void **)MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a3 + 648) & 1) != 0)
  {
    v7 = (uint64_t)result;
    memset(v35, 0, sizeof(v35));
    icu::MeasureUnit::getMeter((uint64_t)v42);
    sub_18BD1B1B0(v7, (icu::MeasureUnit *)v42, a4, (uint64_t)v35);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v42);
    v9 = (void *)WORD4(v35[0]);
    if (WORD4(v35[0]) < 0x20u)
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v35);
    v10 = (icu::UnicodeString *)(a3 + 640);
    memset(&v45[8], 0, 64);
    v44 = 0u;
    memset(v45, 0, 64);
    v43 = 0u;
    *(_QWORD *)&v44 = v45;
    DWORD2(v44) = 8;
    v45[8] = (char *)&v45[9] + 5;
    LODWORD(v45[9]) = 40;
    v11 = icu::MeasureUnitImpl::forMeasureUnit(a2, (const icu::MeasureUnit *)&v43, (icu::MeasureUnitImpl *)a4, v8);
    if (*(_DWORD *)v11 == 2)
    {
      *a4 = 5;
      *(_QWORD *)&v31 = off_1E2256B38;
      WORD4(v31) = 2;
      goto LABEL_53;
    }
    v12 = v11;
    if (*(_DWORD *)v11 != 1)
    {
      v15 = 0;
LABEL_13:
      v16 = *(icu::SingleUnitImpl **)(*((_QWORD *)v12 + 2) + 8 * v15);
      v17 = *((_DWORD *)v16 + 2);
      if (v17 < 0)
        v17 = -v17;
      if (v17 != 1)
      {
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        icu::Locale::Locale((icu::Locale *)v37, v7);
        sub_18BD1B414((uint64_t)v37, "power", a4, (icu::UnicodeString *)&v31);
        icu::Locale::~Locale((icu::Locale *)v37);
        LODWORD(v19) = WORD4(v31) >> 5;
        if ((SWORD4(v31) & 0x8000u) == 0)
          v19 = v19;
        else
          v19 = HIDWORD(v31);
        if ((_DWORD)v19 != 1)
          goto LABEL_53;
        icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v31);
        v20 = *((_DWORD *)v16 + 2);
        if (v20 < 0)
          v20 = -v20;
        if (v20 != 1)
        {
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          icu::Locale::Locale((icu::Locale *)v36, v7);
          sub_18BD1B414((uint64_t)v36, "prefix", a4, (icu::UnicodeString *)&v31);
          icu::Locale::~Locale((icu::Locale *)v36);
          LODWORD(v21) = WORD4(v31) >> 5;
          if ((SWORD4(v31) & 0x8000u) == 0)
            v21 = v21;
          else
            v21 = HIDWORD(v31);
          if ((_DWORD)v21 != 1)
            goto LABEL_53;
          icu::UnicodeString::~UnicodeString((void *)v21, (icu::UnicodeString *)&v31);
        }
      }
      SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v16);
      icu::StringPiece::StringPiece((icu::StringPiece *)v29, SimpleUnitID);
      icu::MeasureUnit::forIdentifier(v29[0], v29[1], a4, (uint64_t)v30);
      sub_18BD1B1B0(v7, (icu::MeasureUnit *)v30, a4, (uint64_t)&v31);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v30);
LABEL_53:
      if (BYTE4(v45[9]))
        uprv_free(v45[8]);
      sub_18BC3ED98((uint64_t)&v43 + 8);
      icu::UnicodeString::operator=(v10, (icu::UnicodeString *)&v31);
      icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v31);
      return icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v35);
    }
    v13 = *((_DWORD *)v11 + 2);
    v14 = v13 - 1;
    if ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v11 + 2) + 8 * (v13 - 1)) + 8) & 0x80000000) == 0)
    {
      v15 = 0;
      goto LABEL_7;
    }
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    icu::Locale::Locale((icu::Locale *)v42, v7);
    sub_18BD1B414((uint64_t)v42, "per", a4, (icu::UnicodeString *)&v38);
    icu::Locale::~Locale((icu::Locale *)v42);
    if (SWORD4(v38) < 0)
    {
      if (HIDWORD(v38) == 1)
        goto LABEL_31;
    }
    else if ((WORD4(v38) & 0xFFE0) == 0x20)
    {
LABEL_31:
      if ((BYTE8(v38) & 2) != 0)
        v22 = (_WORD *)((unint64_t)&v38 | 0xA);
      else
        v22 = (_WORD *)*((_QWORD *)&v39 + 1);
      if (*v22 == 49)
      {
        v23 = (uint64_t *)*((_QWORD *)v12 + 2);
        v15 = -1;
        do
        {
          v24 = *v23++;
          ++v15;
        }
        while ((*(_DWORD *)(v24 + 8) & 0x80000000) == 0);
LABEL_59:
        icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v38);
LABEL_7:
        if (v14 > v15)
        {
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          icu::Locale::Locale((icu::Locale *)&v38, v7);
          sub_18BD1B414((uint64_t)&v38, "times", a4, (icu::UnicodeString *)&v31);
          icu::Locale::~Locale((icu::Locale *)&v38);
          if (SWORD4(v31) < 0)
          {
            if (HIDWORD(v31) != 1)
              goto LABEL_53;
          }
          else if ((WORD4(v31) & 0xFFE0) != 0x20)
          {
            goto LABEL_53;
          }
          if ((BYTE8(v31) & 2) != 0)
            v26 = (unsigned __int16 *)((unint64_t)&v31 | 0xA);
          else
            v26 = (unsigned __int16 *)*((_QWORD *)&v32 + 1);
          v27 = (void *)*v26;
          if ((_DWORD)v27 != 48)
            v15 = v14;
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v31);
        }
        goto LABEL_13;
      }
      if (v13 >= 1)
      {
        v23 = (uint64_t *)*((_QWORD *)v12 + 2);
        while ((*(_DWORD *)(v23[--v13] + 8) & 0x80000000) != 0)
        {
          if (v13 <= 0)
            goto LABEL_51;
        }
        v15 = 0;
        v14 = v13;
        goto LABEL_59;
      }
LABEL_51:
      *(_QWORD *)&v31 = off_1E2256B38;
      v25 = 2;
      WORD4(v31) = 2;
LABEL_52:
      icu::UnicodeString::~UnicodeString((void *)v25, (icu::UnicodeString *)&v38);
      goto LABEL_53;
    }
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v31, (icu::UnicodeString *)&v38);
    goto LABEL_52;
  }
  return result;
}

void *sub_18BD18920(uint64_t a1, uint64_t a2, char a3, UErrorCode *a4)
{
  uint64_t v6;
  _OWORD *v8;
  __int128 i;
  unint64_t v10;
  __int128 v11;
  void *v12;
  void *v13;
  void *result;
  uint64_t v15;
  uint64_t v16[2];
  uint64_t (**v17)();
  _OWORD v18[6];
  _QWORD v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD v24[4];
  uint64_t v25;

  v6 = 0;
  v25 = *MEMORY[0x1E0C80C00];
  v15 = a1 + 8;
  v8 = (_OWORD *)(a1 + 88);
  for (i = 0uLL; ; i = 0uLL)
  {
    v24[2] = i;
    v24[3] = i;
    v24[0] = i;
    v24[1] = i;
    sub_18BD1AC08(a2, v6, a4, (uint64_t)v24);
    v10 = *(unsigned int *)a4;
    if ((int)v10 >= 1)
      break;
    v19[0] = 0;
    v23 = 0;
    v21 = 0u;
    v22 = 0u;
    v20 = 0u;
    v19[1] = off_1E2256B38;
    LOWORD(v20) = 2;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v19, (const icu::UnicodeString *)v24, 0, 1, 0, a4);
    if (*(int *)a4 > 0)
    {
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v19);
      return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v24);
    }
    icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v16, v15, 2, v6);
    icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v17, (uint64_t)v19, a3, 0, v16[0], v16[1]);
    icu::UnicodeString::operator=((icu::UnicodeString *)(v8 - 4), (icu::UnicodeString *)v18);
    v11 = v18[5];
    *v8 = v18[4];
    v8[1] = v11;
    v17 = off_1E2262FE8;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v18);
    icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v17);
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v19);
    result = icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v24);
    ++v6;
    v8 = (_OWORD *)((char *)v8 + 104);
    if (v6 == 8)
      return result;
  }
  return icu::UnicodeString::~UnicodeString((void *)v10, (icu::UnicodeString *)v24);
}

const char *sub_18BD18AD0(icu::UnicodeString *a1, UErrorCode a2)
{
  unsigned int v2;
  const char *v3;
  int v4;
  int v5;
  const char *v6;
  int v7;
  int v8;
  const char *v9;
  int v10;
  UErrorCode v12;
  char *__s1[9];

  __s1[8] = *(char **)MEMORY[0x1E0C80C00];
  v12 = a2;
  v2 = *((unsigned __int16 *)a1 + 4);
  if ((v2 & 0x8000) != 0)
  {
    if (*((_DWORD *)a1 + 3))
      goto LABEL_3;
    return "";
  }
  if (!(v2 >> 5))
    return "";
LABEL_3:
  memset(&__s1[1], 0, 56);
  __s1[0] = (char *)&__s1[1] + 5;
  LODWORD(__s1[1]) = 40;
  icu::CharString::appendInvariantChars((icu::CharString *)__s1, a1, &v12);
  if (v12 <= U_ZERO_ERROR)
  {
    v4 = 0;
    v5 = 7;
    v6 = __s1[0];
    v3 = "";
    while (v4 < v5)
    {
      v7 = v5 + v4;
      if (v5 + v4 < 0 != __OFADD__(v5, v4))
        ++v7;
      v8 = v7 >> 1;
      v9 = off_1E2262DA0[v7 >> 1];
      v10 = strcmp(v6, v9);
      if (v10 <= 0)
        v5 = v8;
      else
        v4 = v8 + 1;
      if (!v10)
      {
        v3 = v9;
        break;
      }
    }
  }
  else
  {
    v3 = "";
  }
  if (BYTE4(__s1[1]))
    uprv_free(__s1[0]);
  return v3;
}

uint64_t sub_18BD18C18(uint64_t result, icu::MeasureUnitImpl **this, _DWORD *a3, const char *a4, uint64_t a5, UErrorCode *a6)
{
  uint64_t v10;
  uint64_t v11;
  const icu::SingleUnitImpl *v12;
  int v13;
  icu::MeasureUnitImpl *v14;
  uint64_t i;
  char *v16;
  const char *v17;
  uint64_t j;
  _BYTE *v19;
  const char *v20;
  _BOOL4 v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t k;
  uint64_t m;
  unsigned __int16 *v37;
  int v38;
  const char *v39;
  uint64_t v40;
  _BYTE v41[224];
  _BYTE v42[64];
  _BYTE v43[64];
  _BYTE v44[64];
  _BYTE v45[64];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _BYTE v55[64];
  _QWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[64];
  UChar *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char *v67[28];
  _BYTE v68[576];
  UChar *v69;
  char v70;
  char *v71[28];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[64];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[64];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  if (*(int *)a6 > 0)
    return result;
  if (!a5)
  {
    *a6 = U_INTERNAL_PROGRAM_ERROR;
    return result;
  }
  v10 = result;
  v99 = 0u;
  v101 = 0u;
  v104 = 0u;
  v103 = 0u;
  v102 = 0u;
  memset(v100, 0, sizeof(v100));
  v98 = 0u;
  *(_QWORD *)&v99 = v100;
  DWORD2(v99) = 8;
  *(_QWORD *)&v101 = (char *)&v101 + 13;
  DWORD2(v101) = 40;
  DWORD2(v104) = 0;
  v92 = 0u;
  v94 = 0u;
  v97 = 0u;
  v96 = 0u;
  v95 = 0u;
  memset(v93, 0, sizeof(v93));
  v91 = 0u;
  *(_QWORD *)&v92 = v93;
  DWORD2(v92) = 8;
  *(_QWORD *)&v94 = (char *)&v94 + 13;
  DWORD2(v94) = 40;
  DWORD2(v97) = 0;
  v81 = 0u;
  v80 = 0u;
  v79 = 0u;
  v78 = 0u;
  v77 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  icu::MeasureUnitImpl::forMeasureUnitMaybeCopy(this, a6, (uint64_t)&v72);
  if (*(int *)a6 <= 0)
  {
    if (SDWORD2(v72) >= 1)
    {
      v11 = 0;
      do
      {
        v12 = *(const icu::SingleUnitImpl **)(v73 + 8 * v11);
        v13 = *((_DWORD *)v12 + 2);
        if (v13 <= 0)
        {
          *((_DWORD *)v12 + 2) = -v13;
          v14 = (icu::MeasureUnitImpl *)&v91;
        }
        else
        {
          v14 = (icu::MeasureUnitImpl *)&v98;
        }
        icu::MeasureUnitImpl::appendSingleUnit(v14, v12, a6);
        ++v11;
      }
      while (v11 < SDWORD2(v72));
    }
    if (BYTE12(v78))
      uprv_free((void *)v78);
    sub_18BC3ED98((uint64_t)&v72 + 8);
    v90 = 0;
    v89 = 0u;
    v88 = 0u;
    v87 = 0u;
    v86 = 0u;
    v85 = 0u;
    v84 = 0u;
    v83 = 0u;
    v82 = 0u;
    sub_18BD192D4((unsigned int *)&v82, v10, "case", "per");
    bzero(&v72, 0x2C0uLL);
    for (i = 0; i != 704; i += 64)
    {
      v16 = (char *)&v72 + i;
      *(_QWORD *)v16 = off_1E2256B38;
      *((_WORD *)v16 + 4) = 2;
    }
    icu::Locale::Locale((icu::Locale *)v71, v10);
    if (BYTE4(v82))
      v17 = a4;
    else
      v17 = (const char *)*((_QWORD *)&v82 + 1);
    sub_18BD19728((icu::MeasureUnitImpl *)&v98, v71, a3, v17, (uint64_t)&v72, a6);
    icu::Locale::~Locale((icu::Locale *)v71);
    bzero(v68, 0x2C0uLL);
    for (j = 0; j != 704; j += 64)
    {
      v19 = &v68[j];
      *(_QWORD *)v19 = off_1E2256B38;
      *((_WORD *)v19 + 4) = 2;
    }
    icu::Locale::Locale((icu::Locale *)v67, v10);
    if (BYTE5(v82))
      v20 = a4;
    else
      v20 = (const char *)*((_QWORD *)&v86 + 1);
    sub_18BD19728((icu::MeasureUnitImpl *)&v91, v67, a3, v20, (uint64_t)v68, a6);
    icu::Locale::~Locale((icu::Locale *)v67);
    v63 = 0u;
    v66 = 0;
    v65 = 0u;
    v64 = 0u;
    v62 = (UChar *)off_1E2256B38;
    LOWORD(v63) = 2;
    if ((v70 & 1) != 0)
    {
      memset(v61, 0, sizeof(v61));
      icu::StringPiece::StringPiece((icu::StringPiece *)&v39, "per");
      sub_18BD1A994(v39, v40, v10, a3, (int *)a6, (uint64_t)v61);
      v56[0] = 0;
      v57 = 0u;
      v60 = 0;
      v58 = 0u;
      v59 = 0u;
      v56[1] = off_1E2256B38;
      LOWORD(v57) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v56, (const icu::UnicodeString *)v61, 2, 2, 0, a6);
      if (*(int *)a6 <= 0)
      {
        memset(v55, 0, sizeof(v55));
        v21 = 1;
        sub_18BD1AC08((uint64_t)v68, 1u, a6, (uint64_t)v55);
        v50[0] = 0;
        v51 = 0u;
        v54 = 0;
        v52 = 0u;
        v53 = 0u;
        v50[1] = off_1E2256B38;
        LOWORD(v51) = 2;
        icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v50, (const icu::UnicodeString *)v55, 0, 1, 0, a6);
        if (*(int *)a6 <= 0)
        {
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          sub_18BD1AC74((uint64_t)v50, (uint64_t)&v46);
          if ((SWORD4(v46) & 0x8000u) == 0)
            v22 = WORD4(v46) >> 5;
          else
            v22 = HIDWORD(v46);
          v38 = v22;
          if ((BYTE8(v46) & 0x11) != 0)
          {
            v23 = 0;
          }
          else if ((BYTE8(v46) & 2) != 0)
          {
            v23 = (unsigned __int16 *)((unint64_t)&v46 | 0xA);
          }
          else
          {
            v23 = (unsigned __int16 *)*((_QWORD *)&v47 + 1);
          }
          v24 = sub_18BD1ACC0(v23, &v38);
          memset(v45, 0, sizeof(v45));
          v37 = v24;
          icu::UnicodeString::UnicodeString(v45, 0, &v37);
          icu::UnicodeString::UnicodeString((uint64_t)v44, (uint64_t)L"{0}");
          icu::SimpleFormatter::format((icu::SimpleFormatter *)v56, (const icu::UnicodeString *)v44, (const icu::UnicodeString *)v45, (icu::UnicodeString *)&v62, a6);
          icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v44);
          v26 = (void *)*(unsigned int *)a6;
          v21 = (int)v26 > 0;
          icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v45);
          icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v46);
        }
        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v50);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v55);
      }
      else
      {
        v21 = 1;
      }
      icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v56);
      icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v61);
      if (v21)
        goto LABEL_48;
    }
    else
    {
      icu::UnicodeString::operator=(&v62, &v69);
    }
    v31 = (unsigned __int16)v63 >> 5;
    if ((v63 & 0x8000u) != 0)
      v31 = DWORD1(v63);
    if (v31)
    {
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v43, &v62);
      sub_18BD1AD8C(a5, (uint64_t)&v72, (icu::UnicodeString *)v43, 43, a6);
      icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v43);
    }
    else
    {
      sub_18BD18920(a5, (uint64_t)&v72, 43, a6);
    }
    icu::Locale::Locale((icu::Locale *)v41, v10);
    sub_18BD1B02C((icu::Locale *)v41, "per", (uint64_t)&v72, (uint64_t)v68, (int *)a6, (icu::UnicodeString *)v42);
    *(_QWORD *)(a5 + 864) = sub_18BD18AD0((icu::UnicodeString *)v42, *a6);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v42);
    icu::Locale::~Locale((icu::Locale *)v41);
LABEL_48:
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v62);
    for (k = 640; k != -64; k -= 64)
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v68[k]);
    for (m = 640; m != -64; m -= 64)
      icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)((char *)&v72 + m));
    if (BYTE4(v87))
      uprv_free(*((void **)&v86 + 1));
    if (BYTE4(v83))
      uprv_free(*((void **)&v82 + 1));
    goto LABEL_56;
  }
  if (BYTE12(v78))
    uprv_free((void *)v78);
  sub_18BC3ED98((uint64_t)&v72 + 8);
LABEL_56:
  if (BYTE12(v94))
    uprv_free((void *)v94);
  sub_18BC3ED98((uint64_t)&v91 + 8);
  if (BYTE12(v101))
    uprv_free((void *)v101);
  return sub_18BC3ED98((uint64_t)&v98 + 8);
}

unsigned int *sub_18BD192D4(unsigned int *a1, uint64_t a2, const char *a3, const char *a4)
{
  icu::CharString *v8;
  icu::CharString *v9;
  const UChar *StringByIndex;
  const UChar *v11;
  uint64_t v12;
  unint64_t v13;
  int32_t v14;
  int v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;
  int32_t v19;
  int v20;
  _BYTE *v21;
  int v22;
  void *v23;
  unsigned int v25;
  int v26;
  const UChar *v27;
  unsigned __int16 v28;
  _BYTE v29[2];
  int v30;
  _BYTE *v31;
  const UChar *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void (**v37)(icu::UnicodeString *__hidden);
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[128];
  uint64_t v43;
  _QWORD v44[18];

  v44[17] = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  *((_WORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 1) = (char *)a1 + 21;
  v8 = (icu::CharString *)(a1 + 2);
  a1[4] = 40;
  *((_WORD *)a1 + 10) = 0;
  a1[16] = 0;
  *((_QWORD *)a1 + 9) = (char *)a1 + 85;
  v9 = (icu::CharString *)(a1 + 18);
  a1[20] = 40;
  *((_WORD *)a1 + 42) = 0;
  a1[32] = 0;
  memset(v44, 0, 136);
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v44);
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v42);
  ures_openDirectFillIn(v44, 0, "grammaticalFeatures", (int *)a1);
  ures_getByKey((uint64_t)v44, "grammaticalData", (uint64_t)v44, (int *)a1);
  ures_getByKey((uint64_t)v44, "derivations", (uint64_t)v44, (int *)a1);
  if ((int)*a1 <= 0)
  {
    v25 = 0;
    ures_getByKey((uint64_t)v44, (const char *)(a2 + 8), (uint64_t)v42, (int *)&v25);
    if (v25 == 2)
      ures_getByKey((uint64_t)v44, "root", (uint64_t)v42, (int *)a1);
    else
      *a1 = v25;
    ures_getByKey((uint64_t)v42, "component", (uint64_t)v42, (int *)a1);
    ures_getByKey((uint64_t)v42, a3, (uint64_t)v42, (int *)a1);
    ures_getByKey((uint64_t)v42, a4, (uint64_t)v42, (int *)a1);
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    v37 = off_1E2256B38;
    LOWORD(v38) = 2;
    LODWORD(v27) = 0;
    StringByIndex = ures_getStringByIndex((uint64_t)v42, 0, (int *)&v27, (int *)a1);
    if ((int)*a1 <= 0)
    {
      v32 = StringByIndex;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v37, 1, &v32, (int)v27);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v37);
    }
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0;
    v32 = (const UChar *)off_1E2256B38;
    LOWORD(v33) = 2;
    v26 = 0;
    v11 = ures_getStringByIndex((uint64_t)v42, 1, &v26, (int *)a1);
    if ((int)*a1 <= 0)
    {
      v27 = v11;
      icu::UnicodeString::setTo((icu::UnicodeString *)&v32, 1, &v27, v26);
    }
    else
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v32);
    }
    v12 = *a1;
    if ((int)v12 <= 0)
    {
      icu::UnicodeString::UnicodeString((uint64_t)&v27, (uint64_t)"c");
      v13 = v28;
      if ((v28 & 1) != 0)
      {
        v17 = (v38 & 1) == 0;
      }
      else
      {
        if ((v38 & 0x8000u) == 0)
          v14 = (unsigned __int16)v38 >> 5;
        else
          v14 = DWORD1(v38);
        if ((v28 & 0x8000u) == 0)
          v15 = v28 >> 5;
        else
          v15 = v30;
        if ((v28 & 2) != 0)
          v16 = v29;
        else
          v16 = v31;
        v17 = icu::UnicodeString::doCompare((uint64_t)&v37, 0, v14, (uint64_t)v16, v15 & (v15 >> 31), v15 & ~(v15 >> 31));
      }
      icu::UnicodeString::~UnicodeString((void *)v13, (icu::UnicodeString *)&v27);
      if (v17)
      {
        *((_BYTE *)a1 + 4) = 0;
        icu::CharString::appendInvariantChars(v8, (const icu::UnicodeString *)&v37, (UErrorCode *)a1);
      }
      else
      {
        *((_BYTE *)a1 + 4) = 1;
      }
      icu::UnicodeString::UnicodeString((uint64_t)&v27, (uint64_t)"c");
      v18 = v28;
      if ((v28 & 1) != 0)
      {
        v22 = (v33 & 1) == 0;
      }
      else
      {
        if ((v33 & 0x8000u) == 0)
          v19 = (unsigned __int16)v33 >> 5;
        else
          v19 = DWORD1(v33);
        if ((v28 & 0x8000u) == 0)
          v20 = v28 >> 5;
        else
          v20 = v30;
        if ((v28 & 2) != 0)
          v21 = v29;
        else
          v21 = v31;
        v22 = icu::UnicodeString::doCompare((uint64_t)&v32, 0, v19, (uint64_t)v21, v20 & (v20 >> 31), v20 & ~(v20 >> 31));
      }
      icu::UnicodeString::~UnicodeString((void *)v18, (icu::UnicodeString *)&v27);
      if (v22)
      {
        *((_BYTE *)a1 + 5) = 0;
        icu::CharString::appendInvariantChars(v9, (const icu::UnicodeString *)&v32, (UErrorCode *)a1);
      }
      else
      {
        v12 = 1;
        *((_BYTE *)a1 + 5) = 1;
      }
    }
    icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)&v32);
    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v37);
  }
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v42);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v44);
  return a1;
}

void sub_18BD19728(icu::MeasureUnitImpl *this, char **a2, _DWORD *a3, const char *a4, uint64_t a5, UErrorCode *a6)
{
  UErrorCode v6;
  int v13;
  char v15;
  uint64_t v16;
  icu::UnicodeString *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  icu::StandardPlural *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  icu::StandardPlural *v25;
  icu::SingleUnitImpl *v26;
  const char *SimpleUnitID;
  const char *v28;
  void *v29;
  int v30;
  uint64_t i;
  UChar **v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  _DWORD *v37;
  const char *v38;
  UErrorCode v39;
  void *v40;
  int v41;
  int v42;
  int PrefixBase;
  int PrefixPower;
  void *v45;
  uint64_t j;
  char *v47;
  UErrorCode *v48;
  void *v49;
  __int128 v50;
  void *v51;
  void *v52;
  unsigned __int16 *v53;
  unint64_t v54;
  UChar **v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  void *v60;
  unsigned int v61;
  int v62;
  _BOOL4 v63;
  unsigned int v64;
  void **v65;
  UChar32 v66;
  uint64_t v67;
  unsigned int v68;
  char *v69;
  UChar32 v70;
  unsigned int v71;
  void **v72;
  int v73;
  uint64_t v74;
  char *v75;
  int v76;
  uint64_t v77;
  int32_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  __int128 v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t k;
  uint64_t m;
  __int128 v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  void *v100;
  void *v101;
  const char *v102;
  const char *v103;
  char *v104;
  int v105;
  icu::StandardPlural *v106;
  _DWORD *v107;
  char **v108;
  int v109;
  int v110;
  unsigned __int16 *v111;
  char *v112;
  unsigned int v113;
  char *v114;
  int v115;
  const char *v116;
  uint64_t v117;
  _QWORD v118[3];
  const char *v119;
  uint64_t v120;
  _QWORD v121[3];
  UErrorCode v122;
  char *v123;
  int v124;
  UChar *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  void *v130[8];
  uint64_t v131;
  _BYTE v132[224];
  _BYTE v133[224];
  _BYTE v134[224];
  _BYTE v135[64];
  void *v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  _BYTE v141[64];
  void (**v142)(icu::ResourceSink *__hidden);
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  UChar *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  uint64_t v151;
  _BYTE v152[64];
  _OWORD v153[8];
  uint64_t v154;
  _OWORD v155[4];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _OWORD v161[4];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  _OWORD v167[3];
  _QWORD v168[2];
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _OWORD v173[4];
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v6 = *a6;
  if (*(int *)a6 <= 0)
  {
    if (*(_DWORD *)this == 2)
    {
      *a6 = U_UNSUPPORTED_ERROR;
      return;
    }
    v13 = *((_DWORD *)this + 38);
    if (!v13)
    {
      icu::MeasureUnitImpl::serialize(this, a6);
      v6 = *a6;
      v13 = *((_DWORD *)this + 38);
    }
    if (v6 <= U_ZERO_ERROR && v13 != 0)
    {
      memset(v121, 0, sizeof(v121));
      icu::MeasureUnit::MeasureUnit((uint64_t)v121);
      if (icu::MeasureUnit::findBySubType(*((const char **)this + 12), *((_DWORD *)this + 38), (icu::MeasureUnit *)v121))
      {
        icu::MeasureUnit::MeasureUnit((uint64_t)&v147);
        v15 = (*(uint64_t (**)(_QWORD *, UChar **))(v121[0] + 32))(v121, &v147);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v147);
        if ((v15 & 1) == 0)
        {
          sub_18BD17D68((uint64_t)a2, (icu::MeasureUnit *)v121, a3, a4, a5, (int *)a6);
          sub_18BD1849C(a2, (icu::MeasureUnitImpl *)v121, a5, (int *)a6);
        }
        goto LABEL_213;
      }
      memset(v173, 0, sizeof(v173));
      icu::StringPiece::StringPiece((icu::StringPiece *)&v119, "times");
      sub_18BD1A994(v119, v120, (uint64_t)a2, a3, (int *)a6, (uint64_t)v173);
      v168[0] = 0;
      v169 = 0u;
      v172 = 0;
      v170 = 0u;
      v171 = 0u;
      v168[1] = off_1E2256B38;
      LOWORD(v169) = 2;
      icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v168, (const icu::UnicodeString *)v173, 2, 2, 0, a6);
      if (*(int *)a6 > 0)
      {
LABEL_212:
        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v168);
        icu::UnicodeString::~UnicodeString(v101, (icu::UnicodeString *)v173);
LABEL_213:
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v121);
        return;
      }
      v107 = a3;
      v103 = a4;
      v16 = 0;
      v17 = (icu::UnicodeString *)a5;
      memset(v167, 0, 44);
      do
      {
        if (v16 == 20)
        {
          if ((*(_WORD *)(a5 + 328) & 1) != 0)
            v18 = 2;
          else
            v18 = *(_WORD *)(a5 + 328) & 0x1F;
          *(_WORD *)(a5 + 328) = v18;
        }
        else
        {
          icu::UnicodeString::setToBogus(v17);
        }
        *(_DWORD *)((char *)v167 + v16) = 0;
        v16 += 4;
        v17 = (icu::UnicodeString *)((char *)v17 + 64);
      }
      while (v16 != 44);
      v166 = 0;
      v165 = 0u;
      v164 = 0u;
      v163 = 0u;
      v162 = 0u;
      memset(v161, 0, sizeof(v161));
      sub_18BD192D4((unsigned int *)v161, (uint64_t)a2, "plural", "times");
      v160 = 0;
      v159 = 0u;
      v158 = 0u;
      v157 = 0u;
      v156 = 0u;
      memset(v155, 0, sizeof(v155));
      sub_18BD192D4((unsigned int *)v155, (uint64_t)a2, "case", "times");
      v154 = 0;
      memset(v153, 0, sizeof(v153));
      sub_18BD192D4((unsigned int *)v153, (uint64_t)a2, "case", "power");
      LODWORD(v19) = *((_DWORD *)this + 2);
      if ((int)v19 < 1)
      {
        v105 = 0;
        v93 = 0uLL;
        goto LABEL_195;
      }
      v20 = 0;
      v105 = 0;
      v102 = "";
      v108 = a2;
      while (1)
      {
        if (v20 >= (int)v19 - 1)
        {
          v25 = (icu::StandardPlural *)v102;
          if (!BYTE5(v161[0]))
            v25 = (icu::StandardPlural *)*((_QWORD *)&v162 + 1);
          v106 = v25;
          if (BYTE5(v155[0]))
            v24 = v103;
          else
            v24 = (const char *)*((_QWORD *)&v156 + 1);
        }
        else
        {
          v21 = (icu::StandardPlural *)*((_QWORD *)&v161[0] + 1);
          v23 = v102;
          v22 = v103;
          if (BYTE4(v161[0]))
            v21 = (icu::StandardPlural *)v102;
          v106 = v21;
          if (BYTE4(v155[0]))
            v24 = v103;
          else
            v24 = (const char *)*((_QWORD *)&v155[0] + 1);
          if (!BYTE5(v161[0]))
            v23 = (const char *)*((_QWORD *)&v162 + 1);
          if (!BYTE5(v155[0]))
            v22 = (const char *)*((_QWORD *)&v156 + 1);
          v102 = v23;
          v103 = v22;
        }
        v104 = (char *)v20;
        v26 = *(icu::SingleUnitImpl **)(*((_QWORD *)this + 2) + 8 * v20);
        memset(v118, 0, sizeof(v118));
        icu::MeasureUnit::MeasureUnit((uint64_t)v118);
        SimpleUnitID = (const char *)icu::SingleUnitImpl::getSimpleUnitID(v26);
        icu::StringPiece::StringPiece((icu::StringPiece *)&v116, SimpleUnitID);
        if (!icu::MeasureUnit::findBySubType(v116, v117, (icu::MeasureUnit *)v118))
        {
          *a6 = U_UNSUPPORTED_ERROR;
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v118);
LABEL_211:
          sub_18BD1B170((uint64_t)v153);
          sub_18BD1B170((uint64_t)v155);
          sub_18BD1B170((uint64_t)v161);
          goto LABEL_212;
        }
        sub_18BD1B1B0((uint64_t)a2, (icu::MeasureUnit *)v118, (int *)a6, (uint64_t)v152);
        v28 = sub_18BD18AD0((icu::UnicodeString *)v152, *a6);
        icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)v152);
        v30 = *((_DWORD *)v26 + 2);
        bzero(&v147, 0x2C0uLL);
        for (i = 0; i != 88; i += 8)
        {
          v32 = &(&v147)[i];
          *v32 = (UChar *)off_1E2256B38;
          *((_WORD *)v32 + 4) = 2;
        }
        v33 = 0uLL;
        v110 = v30;
        if (v30 != 1)
          break;
LABEL_70:
        v42 = *((_DWORD *)v26 + 1);
        v146 = 0;
        v144 = v33;
        v145 = v33;
        v143 = v33;
        v142 = off_1E2256B38;
        LOWORD(v143) = 2;
        v109 = v42;
        if (v42 != 30)
        {
          v138 = v33;
          v139 = v33;
          v137 = v33;
          v136 = (char *)&v137 + 5;
          LODWORD(v137) = 40;
          v140 = 0;
          PrefixBase = umeas_getPrefixBase(v42);
          icu::CharString::appendNumber((icu::CharString *)&v136, PrefixBase, a6);
          icu::CharString::append((icu::CharString *)&v136, 112, a6);
          PrefixPower = umeas_getPrefixPower(v109);
          icu::CharString::appendNumber((icu::CharString *)&v136, PrefixPower, a6);
          sub_18BD1A994((const char *)v136, v140, (uint64_t)a2, v107, (int *)a6, (uint64_t)v130);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v142, (icu::UnicodeString *)v130);
          icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v130);
          *((_DWORD *)v26 + 1) = 30;
          if (BYTE4(v137))
            uprv_free(v136);
        }
        bzero(&v136, 0x2C0uLL);
        for (j = 0; j != 704; j += 64)
        {
          v47 = (char *)&v136 + j;
          *(_QWORD *)v47 = off_1E2256B38;
          *((_WORD *)v47 + 4) = 2;
        }
        icu::SingleUnitImpl::build(v26, a6, (uint64_t)v130);
        sub_18BD17D68((uint64_t)a2, (icu::MeasureUnit *)v130, v107, v24, (uint64_t)&v136, (int *)a6);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v130);
        v49 = (void *)*(unsigned int *)a6;
        if ((int)v49 > 0)
          goto LABEL_184;
        v50 = 0uLL;
        if ((v141[8] & 1) == 0)
        {
          memset(&v130[1], 0, 56);
          v130[0] = off_1E2256B38;
          LOWORD(v130[1]) = 2;
          if (v109 != 30)
          {
            icu::Locale::Locale((icu::Locale *)v134, (uint64_t)a2);
            sub_18BD1B02C((icu::Locale *)v134, "prefix", (uint64_t)&v136, 0, (int *)a6, (icu::UnicodeString *)v135);
            icu::UnicodeString::operator=((icu::UnicodeString *)v141, (icu::UnicodeString *)v135);
            icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)v135);
            icu::Locale::~Locale((icu::Locale *)v134);
            v50 = 0uLL;
          }
          if (v110 != 1)
          {
            icu::Locale::Locale((icu::Locale *)v133, (uint64_t)a2);
            sub_18BD1B02C((icu::Locale *)v133, "power", (uint64_t)&v136, 0, (int *)a6, (icu::UnicodeString *)v135);
            icu::UnicodeString::operator=((icu::UnicodeString *)v141, (icu::UnicodeString *)v135);
            icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)v135);
            icu::Locale::~Locale((icu::Locale *)v133);
            v50 = 0uLL;
          }
          *(_OWORD *)&v135[48] = v50;
          *(_OWORD *)&v135[32] = v50;
          *(_OWORD *)&v135[16] = v50;
          *(_OWORD *)v135 = v50;
          icu::Locale::Locale((icu::Locale *)v132, (uint64_t)a2);
          sub_18BD1B414((uint64_t)v132, "times", (int *)a6, (icu::UnicodeString *)v135);
          icu::Locale::~Locale((icu::Locale *)v132);
          if ((*(__int16 *)&v135[8] & 0x80000000) == 0)
          {
            if ((*(_WORD *)&v135[8] & 0xFFE0) == 0x20)
              goto LABEL_83;
LABEL_90:
            v54 = *(unsigned __int16 *)(a5 + 648);
            if ((v54 & 1) != 0)
            {
              v55 = (UChar **)v135;
              goto LABEL_93;
            }
LABEL_94:
            icu::UnicodeString::~UnicodeString((void *)v54, (icu::UnicodeString *)v135);
            icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v130);
            v50 = 0uLL;
            goto LABEL_95;
          }
          if (*(_DWORD *)&v135[12] != 1)
            goto LABEL_90;
LABEL_83:
          v53 = (unsigned __int16 *)&v135[10];
          if ((v135[8] & 2) == 0)
            v53 = *(unsigned __int16 **)&v135[24];
          v54 = *v53;
          if ((_DWORD)v54 == 49)
          {
            v54 = (*((_DWORD *)this + 2) - 1);
            v55 = (UChar **)v141;
            if (v104 != (char *)v54)
              goto LABEL_94;
          }
          else
          {
            if ((_DWORD)v54 != 48)
              goto LABEL_94;
            v55 = (UChar **)v141;
            v54 = (unint64_t)v104;
            if (v104)
              goto LABEL_94;
          }
LABEL_93:
          icu::UnicodeString::operator=((UChar **)(a5 + 640), v55);
          goto LABEL_94;
        }
LABEL_95:
        v57 = 0;
        v58 = 0;
        while (1)
        {
          if ((*(_WORD *)(a5 + v57 + 8) & 1) == 0)
          {
            v59 = v58;
            goto LABEL_100;
          }
          v49 = (void *)*(unsigned __int16 *)((char *)&v137 + v57);
          if ((v49 & 1) == 0)
            break;
LABEL_179:
          ++v58;
          v57 += 64;
          if (v57 == 512)
          {
            v41 = 0;
            goto LABEL_185;
          }
        }
        sub_18BD1AC08(a5, v58, a6, (uint64_t)v130);
        icu::UnicodeString::operator=((icu::UnicodeString *)(a5 + v57), (icu::UnicodeString *)v130);
        icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v130);
        v50 = 0uLL;
        v49 = (void *)*(unsigned int *)a6;
        v59 = v58;
        if ((int)v49 > 0)
          goto LABEL_184;
LABEL_100:
        v111 = (unsigned __int16 *)(a5 + v57);
        if (*(_BYTE *)v106)
        {
          v61 = sub_18BD1B640(v106, (char *)a6, v48);
          v50 = 0uLL;
          v59 = v61;
        }
        *(_QWORD *)&v135[56] = 0;
        *(_OWORD *)&v135[24] = v50;
        *(_OWORD *)&v135[40] = v50;
        *(_OWORD *)&v135[8] = v50;
        *(_QWORD *)v135 = off_1E2256B38;
        *(_WORD *)&v135[8] = 2;
        v113 = v59;
        sub_18BD1AC08((uint64_t)&v136, v59, a6, (uint64_t)v130);
        if (SLOWORD(v130[1]) >= 0)
          v62 = LOWORD(v130[1]) >> 5;
        else
          v62 = HIDWORD(v130[1]);
        v63 = icu::UnicodeString::doEqualsSubstring((uint64_t)v130, 0, 3, (uint64_t)L"{0}", 0, 3);
        if (SLOWORD(v130[1]) >= 0)
          v64 = LOWORD(v130[1]) >> 5;
        else
          v64 = HIDWORD(v130[1]);
        if (v63)
        {
          if (v64 < 4)
          {
            v66 = 0xFFFF;
          }
          else
          {
            v65 = &v130[2];
            if (((uint64_t)v130[1] & 2) == 0)
              v65 = (void **)((char *)v130[3] + 6);
            v66 = *(unsigned __int16 *)v65;
          }
          if (u_isJavaSpaceChar(v66))
          {
            if (SLOWORD(v130[1]) >= 0)
              v71 = LOWORD(v130[1]) >> 5;
            else
              v71 = HIDWORD(v130[1]);
            if (v71 < 4)
            {
              v73 = 0xFFFF;
            }
            else
            {
              v72 = &v130[2];
              if (((uint64_t)v130[1] & 2) == 0)
                v72 = (void **)((char *)v130[3] + 6);
              v73 = *(unsigned __int16 *)v72;
            }
            icu::UnicodeString::unBogus((uint64_t)v135);
            if (*(__int16 *)&v135[8] >= 0)
              v77 = *(unsigned __int16 *)&v135[8] >> 5;
            else
              v77 = *(unsigned int *)&v135[12];
            icu::UnicodeString::doReplace((icu::UnicodeString *)v135, 0, v77, (const icu::UnicodeString *)v130, 4, (v62 - 4));
            v76 = 2;
          }
          else
          {
            icu::UnicodeString::unBogus((uint64_t)v135);
            if (*(__int16 *)&v135[8] >= 0)
              v74 = *(unsigned __int16 *)&v135[8] >> 5;
            else
              v74 = *(unsigned int *)&v135[12];
            icu::UnicodeString::doReplace((icu::UnicodeString *)v135, 0, v74, (const icu::UnicodeString *)v130, 3, (v62 - 3));
            v73 = 0;
            v76 = 2;
          }
LABEL_159:
          icu::UnicodeString::~UnicodeString(v75, (icu::UnicodeString *)v130);
          if (!*((_DWORD *)v167 + v58))
          {
            *((_DWORD *)v167 + v58) = v76;
            v105 = v73;
          }
          a2 = v108;
          v83 = 0uLL;
          if (v109 != 30)
          {
            v130[0] = 0;
            memset(&v130[2], 0, 48);
            v131 = 0;
            v130[1] = off_1E2256B38;
            LOWORD(v130[2]) = 2;
            icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v130, (const icu::UnicodeString *)&v142, 1, 1, 0, a6);
            if (*(int *)a6 >= 1)
              goto LABEL_182;
            v129 = 0;
            v127 = 0u;
            v128 = 0u;
            v126 = 0u;
            v125 = (UChar *)off_1E2256B38;
            LOWORD(v126) = 2;
            if (*v107 == 2)
              icu::UnicodeString::toLower((const UChar **)v135, (const icu::Locale *)v108);
            icu::SimpleFormatter::format((icu::SimpleFormatter *)v130, (const icu::UnicodeString *)v135, (icu::UnicodeString *)&v125, a6);
            v84 = (void *)*(unsigned int *)a6;
            if ((int)v84 > 0)
              goto LABEL_181;
            icu::UnicodeString::operator=((UChar **)v135, &v125);
            icu::UnicodeString::~UnicodeString(v85, (icu::UnicodeString *)&v125);
            icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v130);
            v83 = 0uLL;
          }
          if (v110 != 1)
          {
            v131 = 0;
            *(_OWORD *)&v130[4] = v83;
            *(_OWORD *)&v130[6] = v83;
            *(_OWORD *)v130 = v83;
            *(_OWORD *)&v130[2] = v83;
            sub_18BD1AC08((uint64_t)&v147, v113, a6, (uint64_t)&v125);
            v130[1] = off_1E2256B38;
            LOWORD(v130[2]) = 2;
            icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v130, (const icu::UnicodeString *)&v125, 1, 1, 0, a6);
            icu::UnicodeString::~UnicodeString(v86, (icu::UnicodeString *)&v125);
            if (*(int *)a6 >= 1)
              goto LABEL_182;
            v129 = 0;
            v127 = 0u;
            v128 = 0u;
            v126 = 0u;
            v125 = (UChar *)off_1E2256B38;
            LOWORD(v126) = 2;
            if (*v107 == 2)
              icu::UnicodeString::toLower((const UChar **)v135, (const icu::Locale *)v108);
            icu::SimpleFormatter::format((icu::SimpleFormatter *)v130, (const icu::UnicodeString *)v135, (icu::UnicodeString *)&v125, a6);
            v84 = (void *)*(unsigned int *)a6;
            if ((int)v84 > 0)
            {
LABEL_181:
              icu::UnicodeString::~UnicodeString(v84, (icu::UnicodeString *)&v125);
LABEL_182:
              icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v130);
              goto LABEL_183;
            }
            icu::UnicodeString::operator=((UChar **)v135, &v125);
            icu::UnicodeString::~UnicodeString(v87, (icu::UnicodeString *)&v125);
            icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v130);
            v83 = 0uLL;
          }
          if ((__int16)v111[4] < 0)
          {
            if (*(_DWORD *)(a5 + v57 + 12))
              goto LABEL_175;
          }
          else if (v111[4] >> 5)
          {
LABEL_175:
            v130[7] = 0;
            *(_OWORD *)&v130[3] = v83;
            *(_OWORD *)&v130[5] = v83;
            *(_OWORD *)&v130[1] = v83;
            v130[0] = off_1E2256B38;
            LOWORD(v130[1]) = 2;
            icu::SimpleFormatter::format((icu::SimpleFormatter *)v168, (const icu::UnicodeString *)v111, (const icu::UnicodeString *)v135, (icu::UnicodeString *)v130, a6);
            icu::UnicodeString::operator=((UChar **)v111, (UChar **)v130);
            icu::UnicodeString::~UnicodeString(v88, (icu::UnicodeString *)v130);
LABEL_178:
            icu::UnicodeString::~UnicodeString(v89, (icu::UnicodeString *)v135);
            v50 = 0uLL;
            goto LABEL_179;
          }
          icu::UnicodeString::operator=((UChar **)v111, (UChar **)v135);
          goto LABEL_178;
        }
        if (icu::UnicodeString::doEqualsSubstring((uint64_t)v130, v64 - 3, 3, (uint64_t)L"{0}", 0, 3))
        {
          v67 = v62 - 4;
          if (SLOWORD(v130[1]) >= 0)
            v68 = LOWORD(v130[1]) >> 5;
          else
            v68 = HIDWORD(v130[1]);
          if (v68 <= v67)
          {
            v70 = 0xFFFF;
          }
          else
          {
            v69 = (char *)&v130[1] + 2;
            if (((uint64_t)v130[1] & 2) == 0)
              v69 = (char *)v130[3];
            v70 = *(unsigned __int16 *)&v69[2 * (int)v67];
          }
          if (u_isJavaSpaceChar(v70))
          {
            icu::UnicodeString::unBogus((uint64_t)v135);
            if (*(__int16 *)&v135[8] >= 0)
              v80 = *(unsigned __int16 *)&v135[8] >> 5;
            else
              v80 = *(unsigned int *)&v135[12];
            icu::UnicodeString::doReplace((icu::UnicodeString *)v135, 0, v80, (const icu::UnicodeString *)v130, 0, v62 - 4);
            v75 = (char *)LOWORD(v130[1]);
            if (SLOWORD(v130[1]) >= 0)
              v81 = LOWORD(v130[1]) >> 5;
            else
              v81 = HIDWORD(v130[1]);
            if (v81 <= v67)
            {
              v76 = 4;
              v73 = 0xFFFF;
              goto LABEL_159;
            }
            v75 = (char *)&v130[1] + 2;
            if (((uint64_t)v130[1] & 2) == 0)
              v75 = (char *)v130[3];
            v73 = *(unsigned __int16 *)&v75[2 * v67];
          }
          else
          {
            icu::UnicodeString::unBogus((uint64_t)v135);
            if (*(__int16 *)&v135[8] >= 0)
              v82 = *(unsigned __int16 *)&v135[8] >> 5;
            else
              v82 = *(unsigned int *)&v135[12];
            icu::UnicodeString::doReplace((icu::UnicodeString *)v135, 0, v82, (const icu::UnicodeString *)v130, 0, (v62 - 3));
            v73 = 0;
          }
          v76 = 4;
          goto LABEL_159;
        }
        v78 = v62 - 2;
        v76 = 1;
        v79 = icu::UnicodeString::indexOf((uint64_t)v130, (uint64_t)L"{0}", 0, 3, 1, v78);
        icu::UnicodeString::operator=((UChar **)v135, (UChar **)v130);
        if (v79 == -1)
        {
          v73 = 0;
          goto LABEL_159;
        }
        icu::UnicodeString::~UnicodeString(v75, (icu::UnicodeString *)v130);
        v90 = 16;
        *a6 = U_UNSUPPORTED_ERROR;
        a2 = v108;
LABEL_183:
        icu::UnicodeString::~UnicodeString((void *)v90, (icu::UnicodeString *)v135);
LABEL_184:
        v41 = 1;
LABEL_185:
        for (k = 640; k != -64; k -= 64)
          icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)((char *)&v136 + k));
        icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v142);
LABEL_188:
        for (m = 80; m != -8; m -= 8)
          icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&(&v147)[m]);
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v118);
        v93 = 0uLL;
        if (v41)
          goto LABEL_211;
        v20 = (uint64_t)(v104 + 1);
        v19 = *((int *)this + 2);
        if ((uint64_t)(v104 + 1) >= v19)
        {
LABEL_195:
          v94 = 0;
          while (1)
          {
            v95 = *(_DWORD *)((char *)v167 + v94);
            if (v95 == 4)
              break;
            if (v95 == 2)
            {
              v151 = 0;
              v149 = v93;
              v150 = v93;
              v148 = v93;
              v147 = (UChar *)off_1E2256B38;
              LOWORD(v148) = 2;
              icu::UnicodeString::doAppend((uint64_t)&v147, (uint64_t)L"{0}", 0, 3);
              if (v105)
              {
                LOWORD(v136) = v105;
                icu::UnicodeString::doAppend((uint64_t)&v147, (uint64_t)&v136, 0, 1);
              }
              v96 = *(unsigned __int16 *)(a5 + 8);
              v97 = (__int16)v96;
              v98 = v96 >> 5;
              if (v97 >= 0)
                v99 = v98;
              else
                v99 = *(unsigned int *)(a5 + 12);
              icu::UnicodeString::doAppend((uint64_t)&v147, (const icu::UnicodeString *)a5, 0, v99);
              icu::UnicodeString::operator=((UChar **)a5, &v147);
              icu::UnicodeString::~UnicodeString(v100, (icu::UnicodeString *)&v147);
LABEL_207:
              v93 = 0uLL;
            }
            v94 += 4;
            a5 += 64;
            if (v94 == 32)
              goto LABEL_211;
          }
          if (v105)
          {
            LOWORD(v147) = v105;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v147, 0, 1);
          }
          icu::UnicodeString::doAppend(a5, (uint64_t)L"{0}", 0, 3);
          goto LABEL_207;
        }
      }
      memset(v130, 0, sizeof(v130));
      icu::StringPiece::StringPiece((icu::StringPiece *)&v114, "compound/power");
      v130[0] = (char *)&v130[1] + 5;
      LODWORD(v130[1]) = 40;
      WORD2(v130[1]) = 0;
      LODWORD(v130[7]) = 0;
      icu::CharString::append((icu::CharString *)v130, v114, v115, a6);
      icu::CharString::appendNumber((icu::CharString *)v130, v30, a6);
      v34 = 0;
      v112 = (char *)v130[0];
      v35 = (int)v130[7];
      v142 = &off_1E2262DE8;
      *(_QWORD *)&v143 = v28;
      *((_QWORD *)&v143 + 1) = v24;
      *(_QWORD *)&v144 = &v147;
      do
      {
        icu::UnicodeString::setToBogus((icu::UnicodeString *)&(&v147)[v34]);
        v34 += 8;
      }
      while (v34 != 88);
      v36 = ures_open("icudt74l-unit", v108[5], (int *)a6);
      if (*(int *)a6 > 0)
      {
LABEL_56:
        if (v36)
          ures_close(v36);
        icu::ResourceSink::~ResourceSink((icu::ResourceSink *)&v142);
        v39 = *a6;
        a2 = v108;
        if (*(int *)a6 < 1)
        {
          if (!BYTE4(v153[0]))
            v24 = (const char *)*((_QWORD *)&v153[0] + 1);
          *((_DWORD *)v26 + 2) = 1;
          v33 = 0uLL;
        }
        else if (v39 == U_RESOURCE_TYPE_MISMATCH)
        {
          v33 = 0uLL;
          if (v110 >= 4)
            *a6 = U_UNSUPPORTED_ERROR;
        }
        else
        {
          v33 = 0uLL;
        }
        v40 = (void *)BYTE4(v130[1]);
        if (BYTE4(v130[1]))
        {
          uprv_free(v130[0]);
          v33 = 0uLL;
        }
        if (v39 > U_ZERO_ERROR)
        {
          v41 = 1;
          goto LABEL_188;
        }
        goto LABEL_70;
      }
      v140 = 0;
      v138 = 0u;
      v139 = 0u;
      v137 = 0u;
      v136 = (char *)&v137 + 5;
      LODWORD(v137) = 40;
      icu::StringPiece::StringPiece((icu::StringPiece *)v135, "units");
      icu::CharString::append((icu::CharString *)&v136, *(const char **)v135, *(int *)&v135[8], a6);
      v37 = v107;
      if (*v107 == 1)
      {
        v38 = "Short";
      }
      else
      {
        if (*v107)
        {
LABEL_52:
          icu::StringPiece::StringPiece((icu::StringPiece *)&v123, "/");
          icu::CharString::append((icu::CharString *)&v136, v123, v124, a6);
          icu::CharString::append((icu::CharString *)&v136, v112, v35, a6);
          v122 = *a6;
          ures_getAllChildrenWithFallback((uint64_t)v36, (char *)v136, (uint64_t)&v142, (int *)&v122);
          if (*v37 == 1)
            *a6 = v122;
          if (BYTE4(v137))
            uprv_free(v136);
          goto LABEL_56;
        }
        v38 = "Narrow";
      }
      icu::StringPiece::StringPiece((icu::StringPiece *)&v125, v38);
      icu::CharString::append((icu::CharString *)&v136, (const char *)v125, v126, a6);
      v37 = v107;
      goto LABEL_52;
    }
  }
}

void sub_18BD1A994(const char *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v11;
  const char *v12;
  _BYTE *v13;
  icu::StringPiece *v14;
  int v15;
  const UChar *StringByKeyWithFallback;
  int v17;
  char *v18;
  int v19;
  unsigned int v20;
  int v21;
  char *v22;
  int v23;
  _BYTE v24[16];
  _BYTE v25[16];
  char *v26;
  int v27;
  void *v28[7];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v11 = ures_open("icudt74l-unit", *(char **)(a3 + 40), a5);
  if (*a5 >= 1)
  {
    *(_QWORD *)a6 = off_1E2256B38;
    *(_WORD *)(a6 + 8) = 2;
    goto LABEL_17;
  }
  memset(&v28[1], 0, 48);
  v29 = 0;
  v28[0] = (char *)&v28[1] + 5;
  LODWORD(v28[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v26, "units");
  icu::CharString::append((icu::CharString *)v28, v26, v27, (UErrorCode *)a5);
  if (*a4 == 1)
  {
    v12 = "Short";
    v13 = v24;
    v14 = (icu::StringPiece *)v24;
  }
  else
  {
    if (*a4)
      goto LABEL_8;
    v12 = "Narrow";
    v13 = v25;
    v14 = (icu::StringPiece *)v25;
  }
  icu::StringPiece::StringPiece(v14, v12);
  icu::CharString::append((icu::CharString *)v28, *(const char **)v13, *((_DWORD *)v13 + 2), (UErrorCode *)a5);
LABEL_8:
  icu::StringPiece::StringPiece((icu::StringPiece *)&v22, "/compound/");
  icu::CharString::append((icu::CharString *)v28, v22, v23, (UErrorCode *)a5);
  icu::CharString::append((icu::CharString *)v28, a1, a2, (UErrorCode *)a5);
  v15 = *a5;
  v20 = 0;
  v21 = v15;
  StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v11, (char *)v28[0], (int *)&v20, (UErrorCode *)&v21);
  v17 = v21;
  if (v21 < 1 || *a4 == 1)
  {
    *a5 = v21;
  }
  else
  {
    LODWORD(v29) = 0;
    *(_BYTE *)v28[0] = 0;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v18, "unitsShort/compound/");
    icu::CharString::append((icu::CharString *)v28, v18, v19, (UErrorCode *)a5);
    icu::CharString::append((icu::CharString *)v28, a1, a2, (UErrorCode *)a5);
    StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v11, (char *)v28[0], (int *)&v20, (UErrorCode *)a5);
    v17 = *a5;
  }
  if (v17 < 1)
  {
    icu::UnicodeString::UnicodeString(a6, (uint64_t)StringByKeyWithFallback, v20);
  }
  else
  {
    *(_QWORD *)a6 = off_1E2256B38;
    *(_WORD *)(a6 + 8) = 2;
  }
  if (BYTE4(v28[1]))
    uprv_free(v28[0]);
LABEL_17:
  if (v11)
    ures_close(v11);
}

icu::UnicodeString *sub_18BD1AC08@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  icu::UnicodeString *result;

  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  result = icu::UnicodeString::UnicodeString((icu::UnicodeString *)a4, (UChar **)(a1 + ((unint64_t)a2 << 6)));
  if ((*(_WORD *)(a4 + 8) & 1) != 0)
  {
    result = icu::UnicodeString::operator=((UChar **)a4, (UChar **)(a1 + 320));
    if ((*(_WORD *)(a4 + 8) & 1) != 0)
      *a3 = 5;
  }
  return result;
}

uint64_t sub_18BD1AC74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  unsigned __int16 *v3;
  int v4;

  v2 = *(unsigned __int16 *)(a1 + 16);
  if ((v2 & 0x11) == 0)
  {
    if ((v2 & 2) != 0)
    {
      v3 = (unsigned __int16 *)(a1 + 18);
      if ((v2 & 0x8000) == 0)
        goto LABEL_6;
    }
    else
    {
      v3 = *(unsigned __int16 **)(a1 + 32);
      if ((v2 & 0x8000) == 0)
        goto LABEL_6;
    }
LABEL_8:
    v4 = *(_DWORD *)(a1 + 20);
    return icu::SimpleFormatter::getTextWithNoArguments(0, v3, v4, 0, a2);
  }
  v3 = 0;
  if ((v2 & 0x8000) != 0)
    goto LABEL_8;
LABEL_6:
  v4 = v2 >> 5;
  return icu::SimpleFormatter::getTextWithNoArguments(0, v3, v4, 0, a2);
}

unsigned __int16 *sub_18BD1ACC0(unsigned __int16 *a1, int *a2)
{
  unsigned __int16 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned __int16 *v7;
  UChar32 v8;

  v2 = a1;
  if (*a2 >= 1 && (u_isJavaSpaceChar(*a1) || u_isJavaSpaceChar(v2[*a2 - 1])))
  {
    v4 = *a2;
    if ((int)v4 <= 0)
    {
      v6 = *a2;
      LODWORD(v4) = 0;
    }
    else
    {
      v5 = 0;
      while (u_isJavaSpaceChar(v2[v5]))
      {
        if (v4 == ++v5)
        {
          v6 = v4;
          goto LABEL_13;
        }
      }
      v6 = v4 + 1;
      v7 = &v2[(int)v4 - 1];
      do
      {
        v8 = *v7--;
        --v6;
      }
      while (u_isJavaSpaceChar(v8));
      LODWORD(v4) = v5;
    }
LABEL_13:
    *a2 = v6 - v4;
    v2 += v4;
  }
  return v2;
}

void sub_18BD1AD8C(uint64_t a1, uint64_t a2, icu::UnicodeString *a3, char a4, UErrorCode *a5)
{
  uint64_t v10;
  _OWORD *v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  __int128 v16;
  void *v17;
  char v19;
  uint64_t v20;
  uint64_t v21[2];
  uint64_t (**v22)();
  _OWORD v23[6];
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  UChar *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _DWORD v34[16];
  _QWORD v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v35[0] = 0;
  v36 = 0u;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v35[1] = off_1E2256B38;
  LOWORD(v36) = 2;
  icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v35, a3, 1, 1, 0, a5);
  if (*(int *)a5 <= 0)
  {
    v10 = 0;
    v19 = a4;
    v20 = a1 + 8;
    v11 = (_OWORD *)(a1 + 88);
    while (1)
    {
      memset(v34, 0, sizeof(v34));
      sub_18BD1AC08(a2, v10, a5, (uint64_t)v34);
      v12 = (void *)*(unsigned int *)a5;
      if ((int)v12 >= 1)
      {
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v34);
        goto LABEL_18;
      }
      v33 = 0;
      v31 = 0u;
      v32 = 0u;
      v30 = 0u;
      v29 = (UChar *)off_1E2256B38;
      LOWORD(v30) = 2;
      v13 = LOWORD(v34[2]) >> 5;
      if (SLOWORD(v34[2]) < 0)
        v13 = v34[3];
      if (!v13)
        break;
      icu::SimpleFormatter::format((icu::SimpleFormatter *)v35, (const icu::UnicodeString *)v34, (icu::UnicodeString *)&v29, a5);
      v14 = (void *)*(unsigned int *)a5;
      if ((int)v14 <= 0)
        goto LABEL_10;
      v15 = 1;
LABEL_13:
      icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v29);
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v34);
      if (!v15)
      {
        v11 = (_OWORD *)((char *)v11 + 104);
        if (v10++ != 7)
          continue;
      }
      goto LABEL_18;
    }
    icu::UnicodeString::operator=(&v29, (UChar **)a3);
LABEL_10:
    v24[0] = 0;
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    v24[1] = off_1E2256B38;
    LOWORD(v25) = 2;
    v15 = 1;
    icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)v24, (const icu::UnicodeString *)&v29, 0, 1, 0, a5);
    if (*(int *)a5 <= 0)
    {
      icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v21, v20, 2, v10);
      icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v22, (uint64_t)v24, v19, 0, v21[0], v21[1]);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v11 - 4), (icu::UnicodeString *)v23);
      v16 = v23[5];
      *v11 = v23[4];
      v11[1] = v16;
      v22 = off_1E2262FE8;
      icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)v23);
      icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v22);
      v15 = 0;
    }
    icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v24);
    goto LABEL_13;
  }
LABEL_18:
  icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)v35);
}

void *sub_18BD1B02C@<X0>(icu::Locale *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, icu::UnicodeString *a6@<X8>)
{
  unsigned __int16 *v11;
  int v12;
  UChar **v13;
  uint64_t v14;
  _BYTE v16[224];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  icu::Locale::Locale((icu::Locale *)v16, (uint64_t)a1);
  sub_18BD1B414((uint64_t)v16, a2, a5, (icu::UnicodeString *)&v17);
  icu::Locale::~Locale((icu::Locale *)v16);
  if (SWORD4(v17) < 0)
  {
    if (HIDWORD(v17) != 1)
      goto LABEL_11;
  }
  else if ((WORD4(v17) & 0xFFE0) != 0x20)
  {
    goto LABEL_11;
  }
  if ((BYTE8(v17) & 2) != 0)
    v11 = (unsigned __int16 *)((unint64_t)&v17 | 0xA);
  else
    v11 = (unsigned __int16 *)*((_QWORD *)&v18 + 1);
  v12 = *v11;
  if (v12 == 49)
  {
    if (!a4)
    {
      *(_QWORD *)a6 = off_1E2256B38;
      v14 = 2;
      *((_WORD *)a6 + 4) = 2;
      return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
    }
    v13 = (UChar **)(a4 + 640);
    goto LABEL_14;
  }
  if (v12 == 48)
  {
    v13 = (UChar **)(a3 + 640);
LABEL_14:
    icu::UnicodeString::UnicodeString(a6, v13);
    return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
  }
LABEL_11:
  icu::UnicodeString::UnicodeString(a6, (icu::UnicodeString *)&v17);
  return icu::UnicodeString::~UnicodeString((void *)v14, (icu::UnicodeString *)&v17);
}

uint64_t sub_18BD1B170(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 84))
    uprv_free(*(void **)(a1 + 72));
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return a1;
}

void sub_18BD1B1B0(uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  const char *Subtype;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *Type;
  int v15;
  const UChar *StringByKeyWithFallback;
  const UChar *v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  void *v28[9];

  v28[8] = *(void **)MEMORY[0x1E0C80C00];
  v7 = ures_open("icudt74l-unit", *(char **)(a1 + 40), a3);
  if (*a3 < 1)
  {
    Subtype = icu::MeasureUnit::getSubtype(a2);
    v9 = strlen(Subtype);
    if (v9 >= 8 && (v10 = icu::MeasureUnit::getSubtype(a2), !strcmp(&v10[v9 - 7], "-person")))
    {
      v12 = icu::MeasureUnit::getSubtype(a2);
      v13 = v9 - 7;
    }
    else
    {
      v11 = icu::MeasureUnit::getSubtype(a2);
      icu::StringPiece::StringPiece((icu::StringPiece *)v28, v11);
      v12 = (const char *)v28[0];
      v13 = (int)v28[1];
    }
    memset(&v28[1], 0, 56);
    v28[0] = (char *)&v28[1] + 5;
    LODWORD(v28[1]) = 40;
    icu::StringPiece::StringPiece((icu::StringPiece *)&v26, "units/");
    icu::CharString::append((icu::CharString *)v28, v26, v27, (UErrorCode *)a3);
    Type = icu::MeasureUnit::getType(a2);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v24, Type);
    icu::CharString::append((icu::CharString *)v28, v24, v25, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v22, "/");
    icu::CharString::append((icu::CharString *)v28, v22, v23, (UErrorCode *)a3);
    icu::CharString::append((icu::CharString *)v28, v12, v13, (UErrorCode *)a3);
    icu::StringPiece::StringPiece((icu::StringPiece *)&v20, "/gender");
    icu::CharString::append((icu::CharString *)v28, v20, v21, (UErrorCode *)a3);
    v15 = *a3;
    v18 = 0;
    v19 = v15;
    StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v7, (char *)v28[0], &v18, (UErrorCode *)&v19);
    if (v19 <= 0)
    {
      *a3 = v19;
      v17 = StringByKeyWithFallback;
      icu::UnicodeString::UnicodeString(a4, 1, &v17);
    }
    else
    {
      *(_QWORD *)a4 = off_1E2256B38;
      *(_WORD *)(a4 + 8) = 2;
    }
    if (BYTE4(v28[1]))
      uprv_free(v28[0]);
  }
  else
  {
    *(_QWORD *)a4 = off_1E2256B38;
    *(_WORD *)(a4 + 8) = 2;
  }
  if (v7)
    ures_close(v7);
}

void sub_18BD1B414(uint64_t a1@<X0>, const char *a2@<X1>, int *a3@<X2>, icu::UnicodeString *a4@<X8>)
{
  const UChar *StringByKey;
  uint64_t v9;
  const UChar *v10;
  int v11;
  void (**v12)(icu::UnicodeString *__hidden);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD v17[8];
  uint64_t v18;
  _OWORD v19[8];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v19);
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  icu::StackUResourceBundle::StackUResourceBundle((icu::StackUResourceBundle *)v17);
  ures_openDirectFillIn(v19, 0, "grammaticalFeatures", a3);
  ures_getByKey((uint64_t)v19, "grammaticalData", (uint64_t)v19, a3);
  ures_getByKey((uint64_t)v19, "derivations", (uint64_t)v19, a3);
  ures_getByKey((uint64_t)v19, (const char *)(a1 + 8), (uint64_t)v17, a3);
  if (*a3 == 2)
  {
    *a3 = 0;
    ures_getByKey((uint64_t)v19, "root", (uint64_t)v17, a3);
  }
  ures_getByKey((uint64_t)v17, "compound", (uint64_t)v17, a3);
  ures_getByKey((uint64_t)v17, "gender", (uint64_t)v17, a3);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  v12 = off_1E2256B38;
  LOWORD(v13) = 2;
  v11 = 0;
  StringByKey = ures_getStringByKey((uint64_t)v17, a2, &v11, a3);
  if (*a3 <= 0)
  {
    v10 = StringByKey;
    icu::UnicodeString::setTo((icu::UnicodeString *)&v12, 1, &v10, v11);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v12);
  }
  if (*a3 < 1)
  {
    icu::UnicodeString::UnicodeString(a4, (icu::UnicodeString *)&v12);
  }
  else
  {
    *(_QWORD *)a4 = off_1E2256B38;
    v9 = 2;
    *((_WORD *)a4 + 4) = 2;
  }
  icu::UnicodeString::~UnicodeString((void *)v9, (icu::UnicodeString *)&v12);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v17);
  icu::StackUResourceBundle::~StackUResourceBundle((icu::StackUResourceBundle *)v19);
}

uint64_t sub_18BD1B640(icu::StandardPlural *this, char *a2, UErrorCode *a3)
{
  int v5;

  v5 = *(char *)this;
  if (v5 == 112)
  {
    if (!strcmp((const char *)this + 1, "er"))
      return 9;
    return icu::StandardPlural::indexFromString(this, a2, a3);
  }
  if (v5 != 103)
  {
    if (v5 == 100 && !strcmp((const char *)this + 1, "nam"))
      return 8;
    return icu::StandardPlural::indexFromString(this, a2, a3);
  }
  if (strcmp((const char *)this + 1, "ender"))
    return icu::StandardPlural::indexFromString(this, a2, a3);
  return 10;
}

void sub_18BD1B6E0(uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int a3@<W2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t i;
  _BYTE *v10;
  void *v11;
  uint64_t j;
  int v13;
  _BYTE v14[512];
  UChar *v15[25];

  v15[24] = *(UChar **)MEMORY[0x1E0C80C00];
  v13 = a3;
  if (*a4 < 1)
  {
    bzero(v14, 0x2C0uLL);
    for (i = 0; i != 704; i += 64)
    {
      v10 = &v14[i];
      *(_QWORD *)v10 = off_1E2256B38;
      *((_WORD *)v10 + 4) = 2;
    }
    sub_18BD17D68(a1, a2, &v13, "", (uint64_t)v14, a4);
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)a5, v15);
    for (j = 640; j != -64; j -= 64)
      icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v14[j]);
  }
  else
  {
    *(_OWORD *)(a5 + 8) = 0u;
    *(_QWORD *)(a5 + 56) = 0;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_QWORD *)a5 = off_1E2256B38;
    *(_WORD *)(a5 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a5);
  }
}

void sub_18BD1B840(uint64_t a1@<X0>, icu::MeasureUnit *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, int *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t i;
  _BYTE *v12;
  void *v13;
  UChar **v14;
  uint64_t j;
  int v16;
  _BYTE v17[320];
  _QWORD v18[49];

  v18[48] = *MEMORY[0x1E0C80C00];
  v16 = a3;
  if (*a5 < 1)
  {
    bzero(v17, 0x2C0uLL);
    for (i = 0; i != 704; i += 64)
    {
      v12 = &v17[i];
      *(_QWORD *)v12 = off_1E2256B38;
      *((_WORD *)v12 + 4) = 2;
    }
    sub_18BD17D68(a1, a2, &v16, "", (uint64_t)v17, a5);
    if (*a5 < 1)
    {
      if ((*(_WORD *)&v17[64 * (unint64_t)a4 + 8] & 1) != 0)
        v14 = (UChar **)v18;
      else
        v14 = (UChar **)&v17[64 * (unint64_t)a4];
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)a6, v14);
    }
    else
    {
      *(_OWORD *)(a6 + 8) = 0u;
      *(_QWORD *)(a6 + 56) = 0;
      *(_OWORD *)(a6 + 40) = 0u;
      *(_OWORD *)(a6 + 24) = 0u;
      *(_QWORD *)a6 = off_1E2256B38;
      *(_WORD *)(a6 + 8) = 2;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)a6);
    }
    for (j = 640; j != -64; j -= 64)
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v17[j]);
  }
  else
  {
    *(_OWORD *)(a6 + 8) = 0u;
    *(_QWORD *)(a6 + 56) = 0;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_QWORD *)a6 = off_1E2256B38;
    *(_WORD *)(a6 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a6);
  }
}

uint64_t *sub_18BD1BA04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t i;
  uint64_t j;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  const UChar *v19;
  _BYTE *v20;
  char *v21;
  char *Keyword;
  const UChar *PluralName;
  int32_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  void *v28;
  unint64_t v29;
  uint64_t k;
  unsigned int v32;
  _QWORD v33[2];
  _BYTE v34[704];
  char v35[8];
  unsigned __int16 v36;
  int v37;
  char v38[8];
  unsigned __int16 v39;
  unsigned int v40;
  uint64_t *v41;

  v41 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v10 = icu::UMemory::operator new(v41, (icu::UMemory *)0x368, a2);
  v11 = v10;
  if (v10)
  {
    *v10 = (uint64_t)off_1E2262BC8;
    v10[1] = (uint64_t)&unk_1E2262BF8;
    for (i = 2; i != 106; i += 13)
      icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)&v11[i]);
    v11[106] = a3;
    v11[107] = a4;
    v11[108] = (uint64_t)"";
    bzero(v34, 0x2C0uLL);
    for (j = 0; j != 704; j += 64)
    {
      v14 = &v34[j];
      *(_QWORD *)v14 = off_1E2256B38;
      *((_WORD *)v14 + 4) = 2;
    }
    v15 = 0;
    v33[0] = &off_1E2262D68;
    v33[1] = v34;
    do
    {
      icu::UnicodeString::setToBogus((icu::UnicodeString *)&v34[v15]);
      v15 += 64;
    }
    while (v15 != 704);
    v16 = ures_open("icudt74l-curr", *(char **)(a1 + 40), a5);
    v17 = v16;
    if (*a5 <= 0)
    {
      ures_getAllChildrenWithFallback((uint64_t)v16, "CurrencyUnitPatterns", (uint64_t)v33, a5);
      if (*a5 <= 0)
      {
        v18 = 0;
        v19 = (const UChar *)(a2 + 20);
        v20 = v34;
        do
        {
          if ((*((_WORD *)v20 + 4) & 1) == 0)
          {
            v32 = 0;
            v21 = *(char **)(a1 + 40);
            Keyword = icu::StandardPlural::getKeyword(v18);
            PluralName = ucurr_getPluralName(v19, v21, 0, Keyword, (int *)&v32, a5);
            icu::UnicodeString::UnicodeString((uint64_t)v38, (uint64_t)"{");
            icu::UnicodeString::UnicodeString((uint64_t)v35, (uint64_t)PluralName, v32);
            if (*((__int16 *)v20 + 4) < 0)
              v24 = *((_DWORD *)v20 + 3);
            else
              v24 = *((unsigned __int16 *)v20 + 4) >> 5;
            if ((v39 & 0x8000u) == 0)
              v25 = v39 >> 5;
            else
              v25 = v40;
            v26 = v36 >> 5;
            if ((v36 & 0x8000u) != 0)
              v26 = v37;
            icu::UnicodeString::findAndReplace((icu::UnicodeString *)v20, 0, v24, (const icu::UnicodeString *)v38, 0, v25, (const icu::UnicodeString *)v35, 0, v26);
            icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v35);
            icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v38);
          }
          ++v18;
          v20 += 64;
        }
        while (v18 != 8);
      }
    }
    if (v17)
      ures_close(v17);
    icu::ResourceSink::~ResourceSink((icu::ResourceSink *)v33);
    v29 = *a5;
    if ((int)v29 <= 0)
      sub_18BD18920((uint64_t)v11, (uint64_t)v34, 39, (UErrorCode *)a5);
    else
      v11 = 0;
    for (k = 640; k != -64; k -= 64)
      icu::UnicodeString::~UnicodeString((void *)v29, (icu::UnicodeString *)&v34[k]);
  }
  else
  {
    *a5 = 7;
  }
  return v11;
}

void sub_18BD1BCD4(_QWORD *a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  icu::PluralRules *v9;
  unsigned int v10;
  const icu::UnicodeString *v11;
  int v12;
  _OWORD v13[4];
  uint64_t v14;
  _OWORD v15[4];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = a1[107];
  if (v8)
    (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t, int *))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
  v9 = (icu::PluralRules *)a1[106];
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v13, (uint64_t)a2);
  sub_18BD26460(a3 + 104, (icu::number::impl::DecimalQuantity *)v13, a4);
  v10 = 5;
  if (v9 && *a4 <= 0)
  {
    memset(v15, 0, sizeof(v15));
    icu::PluralRules::select(v9, (const icu::IFixedDecimal *)v13, (icu::UnicodeString *)v15);
    v12 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v15, v11);
    if (v12 < 0)
      v10 = 5;
    else
      v10 = v12;
    icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v15);
  }
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v13);
  *(_QWORD *)(a3 + 192) = &a1[13 * v10 + 2];
  *(_QWORD *)(a3 + 184) = a1[108];
}

uint64_t sub_18BD1BE00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a1 + 104 * a3 + 16;
}

uint64_t sub_18BD1BE10(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return a1 + 104 * a3 + 8;
}

const char **sub_18BD1BE20(const char **result, icu::MeasureUnitImpl *this, _DWORD *a3, UErrorCode *a4, uint64_t a5, uint64_t a6, uint64_t a7, icu::MeasureUnitImpl *a8)
{
  const char **v14;
  const icu::MeasureUnit *v15;
  unint64_t v16;
  const icu::MeasureUnit *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *Instance;
  uint64_t v28;
  _BYTE v29[496];
  __int128 v30;
  __int128 v31;
  _OWORD v32[7];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(int *)a8 <= 0)
  {
    v14 = result;
    v33 = 0u;
    memset(&v32[4], 0, 48);
    memset(v32, 0, 64);
    v30 = 0u;
    v31 = 0u;
    *(_QWORD *)&v31 = v32;
    DWORD2(v31) = 8;
    *(_QWORD *)&v32[4] = (char *)&v32[4] + 13;
    DWORD2(v32[4]) = 40;
    DWORD2(v33) = 0;
    v15 = icu::MeasureUnitImpl::forMeasureUnit(this, (const icu::MeasureUnit *)&v30, a8, a4);
    if (*(_DWORD *)v15 == 2)
    {
      v17 = v15;
      v28 = a6;
      v18 = *((_DWORD *)v15 + 2);
      *(_DWORD *)(a7 + 32) = v18;
      if (v18 < 0)
        v19 = -1;
      else
        v19 = (704 * v18) | 0x10;
      v20 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v19, v16);
      if (v20)
      {
        *v20 = 64;
        v20[1] = 11 * v18;
        v21 = (char *)(v20 + 2);
        if (v18)
        {
          v22 = (char *)(v20 + 2);
          do
          {
            *(_QWORD *)v22 = off_1E2256B38;
            *((_WORD *)v22 + 4) = 2;
            v22 += 64;
          }
          while (v22 != &v21[704 * v18]);
        }
      }
      else
      {
        v21 = 0;
      }
      sub_18BD1C090((void **)(a7 + 40), v21);
      if (*(int *)(a7 + 32) >= 1)
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v25 = *(_QWORD *)(a7 + 40) + ((unint64_t)v23 << 6);
          icu::SingleUnitImpl::build(*(icu::SingleUnitImpl **)(*((_QWORD *)v17 + 2) + 8 * v24), (UErrorCode *)a8, (uint64_t)v29);
          sub_18BD17D68((uint64_t)v14, (icu::MeasureUnit *)v29, a3, (const char *)a4, v25, (int *)a8);
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v29);
          ++v24;
          v23 += 11;
        }
        while (v24 < *(int *)(a7 + 32));
      }
      if (*a3)
        v26 = *a3 != 2;
      else
        v26 = 2;
      Instance = icu::ListFormatter::createInstance(v14, 2, v26, (UErrorCode *)a8);
      sub_18BBB709C(a7 + 544, (uint64_t)Instance, (int *)a8);
      *(_QWORD *)(a7 + 16) = a5;
      *(_QWORD *)(a7 + 24) = v28;
      icu::number::NumberFormatter::withLocale((icu::number::NumberFormatter *)v14, (uint64_t)v29);
      icu::number::LocalizedNumberFormatter::operator=(a7 + 48, (uint64_t)v29);
      icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)v29);
    }
    else
    {
      *(_DWORD *)a8 = 16;
    }
    if (BYTE12(v32[4]))
      uprv_free(*(void **)&v32[4]);
    return (const char **)sub_18BC3ED98((uint64_t)&v30 + 8);
  }
  return result;
}

void sub_18BD1C090(void **a1, void *a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v4 = *a1;
  if (*a1)
  {
    v5 = (char *)(v4 - 2);
    v6 = *(v4 - 1);
    if (v6)
    {
      v7 = v6 << 6;
      v8 = (char *)(v4 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8[v7]);
        v7 -= 64;
      }
      while (v7);
    }
    icu::UMemory::operator delete[](v5);
  }
  *a1 = a2;
}

uint64_t sub_18BD1C0F8(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    (*(void (**)(uint64_t, icu::number::impl::DecimalQuantity *, uint64_t, int *))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
  result = sub_18BD1C160(a1, a2, a3, a4);
  *(_QWORD *)(a3 + 192) = result;
  return result;
}

uint64_t sub_18BD1C160(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  icu::UnicodeString *v15;
  void **v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  icu::PluralRules *v21;
  unsigned int v22;
  const icu::UnicodeString *v23;
  int v24;
  void *v25;
  icu::PluralRules *v26;
  const icu::UnicodeString *v27;
  int v28;
  unsigned int v29;
  void *v30;
  uint64_t v31;
  __int128 v32;
  void *v33;
  icu::UnicodeString *v35;
  uint64_t v36[2];
  _BYTE v37[24];
  _QWORD v38[2];
  _QWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  void (**v47)(icu::UnicodeString *__hidden);
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[4];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a3 + 484))
  {
    v8 = *(int *)(a1 + 32);
    if ((int)v8 < 0)
      v9 = -1;
    else
      v9 = (v8 << 6) | 0x10;
    v10 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v9, (unint64_t)a2);
    if (v10)
    {
      *v10 = 64;
      v10[1] = v8;
      if ((_DWORD)v8)
      {
        v11 = v10 + 2;
        do
        {
          *v11 = off_1E2256B38;
          *((_WORD *)v11 + 4) = 2;
          v11 += 8;
        }
        while (v11 != &v10[8 * v8 + 2]);
      }
      v39 = v10 + 2;
      if (*a4 <= 0)
      {
        v35 = (icu::UnicodeString *)(v10 + 2);
        if (*(int *)(a3 + 484) >= 1)
        {
          v12 = 0;
          v13 = 0;
          v14 = 0uLL;
          v15 = (icu::UnicodeString *)(v10 + 2);
          do
          {
            v56 = 0;
            v54 = v14;
            v55 = v14;
            v52 = v14;
            v53 = v14;
            v16 = (void **)icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)&v52);
            v17 = *(unint64_t **)(a3 + 440);
            if (v13)
            {
              v18 = v17[v13];
              if (v18 >= 0)
                v19 = v18;
              else
                v19 = -v18;
            }
            else
            {
              v19 = *v17;
            }
            v20 = *(unsigned int *)(a3 + 480);
            if (v13 == v20)
            {
              if ((int)v20 >= 1 && icu::number::impl::DecimalQuantity::isNegative(a2))
                icu::number::impl::DecimalQuantity::negate((uint64_t)a2);
              v21 = *(icu::PluralRules **)(a1 + 16);
              v44 = 0;
              v42 = 0u;
              v43 = 0u;
              v40 = 0u;
              v41 = 0u;
              icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)&v40, (uint64_t)a2);
              sub_18BD26460(a3 + 104, (icu::number::impl::DecimalQuantity *)&v40, a4);
              v22 = 5;
              if (v21 && *a4 <= 0)
              {
                memset(v57, 0, sizeof(v57));
                icu::PluralRules::select(v21, (const icu::IFixedDecimal *)&v40, (icu::UnicodeString *)v57);
                v24 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v57, v23);
                if (v24 < 0)
                  v22 = 5;
                else
                  v22 = v24;
                icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v57);
              }
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v40);
              memset(v57, 0, sizeof(v57));
              sub_18BD1AC08(*(_QWORD *)(a1 + 40) + ((unint64_t)v12 << 6), v22, a4, (uint64_t)v57);
              *(_QWORD *)&v40 = 0;
              v41 = 0u;
              v44 = 0;
              v42 = 0u;
              v43 = 0u;
              *((_QWORD *)&v40 + 1) = off_1E2256B38;
              LOWORD(v41) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v40, (const icu::UnicodeString *)v57, 0, 1, 0, (UErrorCode *)a4);
              icu::UnicodeString::UnicodeString((uint64_t)&v47, (uint64_t)L"{0}");
              icu::SimpleFormatter::format((icu::SimpleFormatter *)&v40, (const icu::UnicodeString *)&v47, v15, (UErrorCode *)a4);
            }
            else
            {
              icu::number::impl::DecimalQuantity::setToLong(v16, v19);
              v26 = *(icu::PluralRules **)(a1 + 16);
              if (v26)
              {
                v42 = 0u;
                v43 = 0u;
                v40 = 0u;
                v41 = 0u;
                icu::PluralRules::select(v26, (const icu::IFixedDecimal *)&v52, (icu::UnicodeString *)&v40);
                v28 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)&v40, v27);
                if (v28 < 0)
                  v29 = 5;
                else
                  v29 = v28;
                icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)&v40);
              }
              else
              {
                v29 = 5;
              }
              memset(v57, 0, sizeof(v57));
              sub_18BD1AC08(*(_QWORD *)(a1 + 40) + ((unint64_t)v12 << 6), v29, a4, (uint64_t)v57);
              *(_QWORD *)&v40 = 0;
              v41 = 0u;
              v44 = 0;
              v42 = 0u;
              v43 = 0u;
              *((_QWORD *)&v40 + 1) = off_1E2256B38;
              LOWORD(v41) = 2;
              icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v40, (const icu::UnicodeString *)v57, 0, 1, 0, (UErrorCode *)a4);
              v51 = 0;
              v49 = 0u;
              v50 = 0u;
              v48 = 0u;
              v47 = off_1E2256B38;
              LOWORD(v48) = 2;
              v38[0] = &unk_1E2256BA0;
              v38[1] = &v47;
              icu::number::LocalizedNumberFormatter::formatDecimalQuantity((uint64_t *)(a1 + 48), (const icu::number::impl::DecimalQuantity *)&v52, (UErrorCode *)a4, (uint64_t)v37);
              icu::number::FormattedNumber::appendTo((icu::number::FormattedNumber *)v37, (icu::Appendable *)v38, (UErrorCode *)a4);
              icu::number::FormattedNumber::~FormattedNumber((icu::number::FormattedNumber *)v37);
              icu::SimpleFormatter::format((icu::SimpleFormatter *)&v40, (const icu::UnicodeString *)&v47, v15, (UErrorCode *)a4);
              icu::UnicodeStringAppendable::~UnicodeStringAppendable((icu::UnicodeStringAppendable *)v38);
            }
            icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v47);
            icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v40);
            icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)v57);
            icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v52);
            ++v13;
            v12 += 11;
            v15 = (icu::UnicodeString *)((char *)v15 + 64);
            v14 = 0uLL;
          }
          while (v13 < *(int *)(a3 + 484));
        }
        memset((char *)v57 + 8, 0, 56);
        *(_QWORD *)&v57[0] = off_1E2256B38;
        WORD4(v57[0]) = 2;
        icu::ListFormatter::format(*(icu::ListFormatter **)(a1 + 544), v35, *(_DWORD *)(a1 + 32), (icu::UnicodeString *)v57, (UErrorCode *)a4);
        *(_QWORD *)&v52 = 0;
        v53 = 0u;
        v56 = 0;
        v54 = 0u;
        v55 = 0u;
        *((_QWORD *)&v52 + 1) = off_1E2256B38;
        LOWORD(v53) = 2;
        icu::SimpleFormatter::applyPatternMinMaxArguments((icu::SimpleFormatter *)&v52, (const icu::UnicodeString *)v57, 0, 1, 0, (UErrorCode *)a4);
        if (*a4 < 1)
        {
          icu::number::impl::Modifier::Parameters::Parameters((uint64_t)v36, a1 + 8, 2, 5);
          icu::number::impl::SimpleModifier::SimpleModifier((uint64_t)&v40, (uint64_t)&v52, 0, 0, v36[0], v36[1]);
          v31 = a3 + 312;
          icu::UnicodeString::operator=((icu::UnicodeString *)(a3 + 320), (icu::UnicodeString *)((char *)&v40 + 8));
          v32 = v46;
          *(_OWORD *)(a3 + 384) = v45;
          *(_OWORD *)(a3 + 400) = v32;
          *(_QWORD *)&v40 = off_1E2262FE8;
          icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)((char *)&v40 + 8));
          icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&v40);
        }
        else
        {
          v31 = a3 + 240;
        }
        icu::SimpleFormatter::~SimpleFormatter((icu::SimpleFormatter *)&v52);
        icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v57);
        goto LABEL_44;
      }
    }
    else
    {
      v39 = 0;
      if (*a4 <= 0)
        *a4 = 7;
    }
    v31 = a3 + 240;
LABEL_44:
    sub_18BBBADF4((uint64_t *)&v39);
    return v31;
  }
  *a4 = 16;
  return a3 + 240;
}

void sub_18BD1C6B4()
{
  abort();
}

void sub_18BD1C6C0()
{
  abort();
}

uint64_t *sub_18BD1C6CC@<X0>(const char **a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X2>, UErrorCode *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, UErrorCode *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t *v12;
  uint64_t *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  icu::MeasureUnit *v30;
  uint64_t v31;
  UErrorCode *v32;
  int Complexity;
  unint64_t v34;
  UErrorCode v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;

  v12 = icu::UMemory::operator new(a8, (icu::UMemory *)0x118, (unint64_t)a2);
  if (!v12)
  {
    if (*(int *)a7 > 0)
      return 0;
    v13 = 0;
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    return v13;
  }
  v13 = v12;
  *v12 = (uint64_t)off_1E2262D08;
  *((_DWORD *)v12 + 2) = 0;
  v14 = (unsigned int *)(v12 + 1);
  v12[2] = (uint64_t)(v12 + 4);
  *((_DWORD *)v12 + 6) = 8;
  *((_BYTE *)v12 + 28) = 0;
  *((_DWORD *)v12 + 24) = 0;
  v15 = (unsigned int *)(v12 + 12);
  v12[13] = (uint64_t)(v12 + 15);
  *((_DWORD *)v12 + 28) = 8;
  *((_BYTE *)v12 + 116) = 0;
  v12[23] = (uint64_t)(v12 + 25);
  *((_DWORD *)v12 + 48) = 8;
  *((_BYTE *)v12 + 196) = 0;
  v12[33] = 0;
  v12[34] = a6;
  if (*(int *)a7 > 0)
  {
LABEL_20:
    (*(void (**)(uint64_t *))(*v13 + 8))(v13);
    return 0;
  }
  v16 = *a2;
  if ((int)v16 < 1 || (v17 = uprv_malloc(8 * v16)) == 0)
  {
    *a7 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_20;
  }
  v19 = (uint64_t)v17;
  if (*((_BYTE *)v13 + 196))
    uprv_free((void *)v13[23]);
  v39 = v13 + 33;
  v13[23] = v19;
  *((_DWORD *)v13 + 48) = v16;
  *((_BYTE *)v13 + 196) = 1;
  v20 = (int)*a2;
  v21 = !is_mul_ok(v20, 0x18uLL);
  if (24 * v20 >= 0xFFFFFFFFFFFFFFF0)
    v21 = 1;
  if (v21)
    v22 = -1;
  else
    v22 = 24 * v20 + 16;
  v23 = (_QWORD *)icu::UMemory::operator new[]((icu::UMemory *)v22, v18);
  if (v23)
  {
    *v23 = 24;
    v23[1] = v20;
    v24 = (uint64_t)(v23 + 2);
    if ((_DWORD)v20)
    {
      v25 = 24 * v20;
      v26 = (uint64_t)(v23 + 2);
      do
      {
        v26 = icu::MeasureUnit::MeasureUnit(v26) + 24;
        v25 -= 24;
      }
      while (v25);
    }
  }
  else
  {
    v24 = 0;
  }
  sub_18BD1C9A0(v39, v24);
  v28 = *a2;
  if ((int)v28 >= 1)
  {
    v29 = 0;
    while (1)
    {
      v30 = *(icu::MeasureUnit **)(*((_QWORD *)a2 + 1) + 8 * v29);
      icu::MeasureUnit::operator=(*v39 + 24 * v29, (unint64_t)v30);
      Complexity = icu::MeasureUnit::getComplexity(v30, a7, v31, v32);
      v35 = *a7;
      if (Complexity == 2)
      {
        if (v35 <= U_ZERO_ERROR)
        {
          v37 = sub_18BD1D2AC(v15, v34);
          v36 = v37;
          if (*(int *)a7 <= 0 && !v37)
            *a7 = U_MEMORY_ALLOCATION_ERROR;
        }
        else
        {
          v36 = 0;
        }
        sub_18BD1BE20(a1, v30, a3, a4, a5, 0, (uint64_t)v36, (icu::MeasureUnitImpl *)a7);
      }
      else
      {
        if (v35 <= U_ZERO_ERROR)
        {
          v38 = sub_18BD1D3B8(v14, v34);
          v36 = v38;
          if (*(int *)a7 <= 0 && !v38)
            *a7 = U_MEMORY_ALLOCATION_ERROR;
        }
        else
        {
          v36 = 0;
        }
        sub_18BD17BC4(a1, v30, a3, (const char *)a4, a5, 0, v36, (int *)a7);
      }
      *(_QWORD *)(v13[23] + 8 * v29) = v36;
      if (*(int *)a7 >= 1)
        break;
      if (++v29 == v28)
        return v13;
    }
    goto LABEL_20;
  }
  return v13;
}

void sub_18BD1C9A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  if (*a1)
  {
    v5 = (void *)(v4 - 16);
    v6 = *(_QWORD *)(v4 - 8);
    if (v6)
    {
      v7 = 24 * v6;
      v8 = v4 - 24;
      do
      {
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(v8 + v7));
        v7 -= 24;
      }
      while (v7);
    }
    icu::UMemory::operator delete[](v5);
  }
  *a1 = a2;
}

uint64_t sub_18BD1CA0C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 272) + 16))(*(_QWORD *)(a1 + 272));
  if (*(int *)(a1 + 192) < 1)
  {
LABEL_5:
    if (*a4 <= 0)
      *a4 = 5;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 264) + v9) + 32))(*(_QWORD *)(a1 + 264) + v9, a3 + 416);
      if ((_DWORD)result)
        break;
      ++v10;
      v9 += 24;
      if (v10 >= *(int *)(a1 + 192))
        goto LABEL_5;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * v10);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)v11 + 16))(v11, a2, a3, a4);
  }
  return result;
}

_QWORD *sub_18BD1CAEC(_QWORD *a1)
{
  icu::number::impl::ModifierStore *v2;
  uint64_t v3;

  *a1 = off_1E2262BC8;
  a1[1] = &unk_1E2262BF8;
  v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  v3 = 104;
  do
  {
    a1[v3 - 11] = off_1E2262FE8;
    icu::UnicodeString::~UnicodeString((icu::UnicodeString *)&a1[v3 - 10]);
    icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&a1[v3 - 11]);
    v3 -= 13;
  }
  while (v3 * 8);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  return a1;
}

void sub_18BD1CB6C(_QWORD *a1)
{
  icu::number::impl::ModifierStore *v2;
  uint64_t v3;
  void *v4;

  *a1 = off_1E2262BC8;
  a1[1] = &unk_1E2262BF8;
  v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  v3 = 104;
  do
  {
    a1[v3 - 11] = off_1E2262FE8;
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&a1[v3 - 10]);
    icu::number::impl::Modifier::~Modifier((icu::number::impl::Modifier *)&a1[v3 - 11]);
    v3 -= 13;
  }
  while (v3 * 8);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  icu::UMemory::operator delete(a1);
}

void sub_18BD1CBEC(icu::number::impl::ModifierStore *a1)
{
  uint64_t v2;

  *((_QWORD *)a1 - 1) = off_1E2262BC8;
  *(_QWORD *)a1 = &unk_1E2262BF8;
  v2 = 832;
  do
  {
    *(_QWORD *)((char *)a1 + v2 - 96) = off_1E2262FE8;
    icu::UnicodeString::~UnicodeString((icu::number::impl::ModifierStore *)((char *)a1 + v2 - 88));
    icu::number::impl::Modifier::~Modifier((icu::number::impl::ModifierStore *)((char *)a1 + v2 - 96));
    v2 -= 104;
  }
  while (v2);
  icu::number::impl::ModifierStore::~ModifierStore(a1);
}

void sub_18BD1CC58(icu::number::impl::ModifierStore *a1)
{
  char *v2;
  uint64_t v3;
  void *v4;

  *((_QWORD *)a1 - 1) = off_1E2262BC8;
  v2 = (char *)a1 - 8;
  *(_QWORD *)a1 = &unk_1E2262BF8;
  v3 = 832;
  do
  {
    *(_QWORD *)((char *)a1 + v3 - 96) = off_1E2262FE8;
    icu::UnicodeString::~UnicodeString(v4, (icu::number::impl::ModifierStore *)((char *)a1 + v3 - 88));
    icu::number::impl::Modifier::~Modifier((icu::number::impl::ModifierStore *)((char *)a1 + v3 - 96));
    v3 -= 104;
  }
  while (v3);
  icu::number::impl::ModifierStore::~ModifierStore(a1);
  icu::UMemory::operator delete(v2);
}

uint64_t *sub_18BD1CCD8(uint64_t *a1)
{
  icu::number::impl::ModifierStore *v2;
  uint64_t v3;

  *a1 = (uint64_t)off_1E2262C68;
  a1[1] = (uint64_t)&unk_1E2262C98;
  v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  v3 = a1[68];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 6));
  sub_18BBBADF4(a1 + 5);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  return a1;
}

void sub_18BD1CD3C(uint64_t *a1)
{
  icu::number::impl::ModifierStore *v2;
  uint64_t v3;

  *a1 = (uint64_t)off_1E2262C68;
  a1[1] = (uint64_t)&unk_1E2262C98;
  v2 = (icu::number::impl::ModifierStore *)(a1 + 1);
  v3 = a1[68];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 6));
  sub_18BBBADF4(a1 + 5);
  icu::number::impl::ModifierStore::~ModifierStore(v2);
  icu::UMemory::operator delete(a1);
}

void sub_18BD1CDA0(uint64_t *a1)
{
  uint64_t v2;

  *(a1 - 1) = (uint64_t)off_1E2262C68;
  *a1 = (uint64_t)&unk_1E2262C98;
  v2 = a1[67];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 5));
  sub_18BBBADF4(a1 + 4);
  icu::number::impl::ModifierStore::~ModifierStore((icu::number::impl::ModifierStore *)a1);
}

void sub_18BD1CDF8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  *(a1 - 1) = (uint64_t)off_1E2262C68;
  v2 = a1 - 1;
  *a1 = (uint64_t)&unk_1E2262C98;
  v3 = a1[67];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  icu::number::LocalizedNumberFormatter::~LocalizedNumberFormatter((icu::number::LocalizedNumberFormatter *)(a1 + 5));
  sub_18BBBADF4(a1 + 4);
  icu::number::impl::ModifierStore::~ModifierStore((icu::number::impl::ModifierStore *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BD1CE5C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2262D08;
  sub_18BCF9D5C((uint64_t *)(a1 + 264));
  if (*(_BYTE *)(a1 + 196))
    uprv_free(*(void **)(a1 + 184));
  sub_18BBCBAB0(a1 + 96);
  sub_18BBCBAB0(a1 + 8);
  return a1;
}

void sub_18BD1CEB0(void *a1)
{
  *(_QWORD *)a1 = off_1E2262D08;
  sub_18BCF9D5C((uint64_t *)a1 + 33);
  if (*((_BYTE *)a1 + 196))
    uprv_free(*((void **)a1 + 23));
  sub_18BBCBAB0((uint64_t)a1 + 96);
  sub_18BBCBAB0((uint64_t)a1 + 8);
  icu::UMemory::operator delete(a1);
}

void sub_18BD1CF08(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD1CF1C(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t result;
  UErrorCode *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  _BYTE v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  result = strcmp(__s1, "case");
  if ((_DWORD)result)
  {
    result = sub_18BD1B640((icu::StandardPlural *)__s1, a5, v10);
    if (*(int *)a5 <= 0)
    {
      v11 = (int)result;
      if ((*(_WORD *)(*(_QWORD *)(a1 + 8) + ((uint64_t)(int)result << 6) + 8) & 1) != 0)
      {
        v14 = 0;
        v13 = (*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)a3 + 32))(a3, &v14, a5);
        icu::UnicodeString::UnicodeString(v15, 1, &v13);
        icu::UnicodeString::operator=((icu::UnicodeString *)(*(_QWORD *)(a1 + 8) + (v11 << 6)), (icu::UnicodeString *)v15);
        return (uint64_t)icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
      }
    }
  }
  return result;
}

void sub_18BD1D01C(icu::ResourceSink *a1)
{
  void *v1;

  icu::ResourceSink::~ResourceSink(a1);
  icu::UMemory::operator delete(v1);
}

void *sub_18BD1D030(uint64_t a1, icu::StandardPlural *this, UErrorCode *a3, int a4, char *a5)
{
  void *result;
  uint64_t v9;
  char *v10;
  void *v11;
  _OWORD v12[2];
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[64];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = (void *)sub_18BD1B640(this, a5, a3);
  if (*(int *)a5 <= 0)
  {
    v9 = (int)result;
    if ((*(_WORD *)(*(_QWORD *)(a1 + 24) + ((uint64_t)(int)result << 6) + 8) & 1) != 0)
    {
      if ((v15 = 0,
            memset(v14, 0, sizeof(v14)),
            (*(void (**)(_OWORD *__return_ptr, UErrorCode *, char *))(*(_QWORD *)a3 + 88))(v14, a3, a5),
            v13 = 0,
            memset(v12, 0, sizeof(v12)),
            v10 = *(char **)(a1 + 8),
            *v10)
        && ((sub_18BD1D1C8(a1, (icu::ResourceTable *)v14, v10, (uint64_t)v12, (icu::ResourceValue *)a3, (uint64_t)a5) & 1) != 0
         || strcmp(*(const char **)(a1 + 8), "neuter")
         && (sub_18BD1D1C8(a1, (icu::ResourceTable *)v14, "neuter", (uint64_t)v12, (icu::ResourceValue *)a3, (uint64_t)a5) & 1) != 0)
        || (result = (void *)sub_18BD1D1C8(a1, (icu::ResourceTable *)v14, "_", (uint64_t)v12, (icu::ResourceValue *)a3, (uint64_t)a5), (_DWORD)result))
      {
        v17 = 0;
        v16 = (*(uint64_t (**)(UErrorCode *, int *, char *))(*(_QWORD *)a3 + 32))(a3, &v17, a5);
        icu::UnicodeString::UnicodeString(v18, 1, &v16);
        icu::UnicodeString::operator=((icu::UnicodeString *)(*(_QWORD *)(a1 + 24) + (v9 << 6)), (icu::UnicodeString *)v18);
        return icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v18);
      }
    }
  }
  return result;
}

uint64_t sub_18BD1D1C8(uint64_t a1, icu::ResourceTable *this, char *__s1, uint64_t a4, icu::ResourceValue *a5, uint64_t a6)
{
  uint64_t result;
  __int128 v11;
  char *v12;
  __int128 v13;
  _BYTE v14[21];

  result = icu::ResourceTable::findValue(this, __s1, a5);
  if ((_DWORD)result)
  {
    (*(void (**)(__int128 *__return_ptr, icu::ResourceValue *, uint64_t))(*(_QWORD *)a5 + 88))(&v13, a5, a6);
    v11 = *(_OWORD *)v14;
    *(_OWORD *)a4 = v13;
    *(_OWORD *)(a4 + 16) = v11;
    *(_QWORD *)(a4 + 29) = *(_QWORD *)&v14[13];
    v12 = *(char **)(a1 + 16);
    return *v12
        && (icu::ResourceTable::findValue((icu::ResourceTable *)a4, v12, a5)
         || strcmp(*(const char **)(a1 + 16), "nominative")
         && icu::ResourceTable::findValue((icu::ResourceTable *)a4, "nominative", a5))
        || icu::ResourceTable::findValue((icu::ResourceTable *)a4, "_", a5) != 0;
  }
  return result;
}

uint64_t *sub_18BD1D2AC(unsigned int *a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = a1[4];
  v4 = *a1;
  if ((_DWORD)v4 != v3)
  {
LABEL_16:
    v9 = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x228, a2);
    v7 = v9;
    if (v9)
    {
      *v9 = (uint64_t)off_1E2262C68;
      v9[1] = (uint64_t)&unk_1E2262C98;
      v9[2] = 0;
      v9[3] = 0;
      *((_DWORD *)v9 + 8) = 1;
      v9[5] = 0;
      sub_18BCC1E68((uint64_t)(v9 + 6));
      *(_OWORD *)(v7 + 65) = 0u;
      *(_OWORD *)(v7 + 67) = 0u;
    }
    v10 = (int)*a1;
    *a1 = v10 + 1;
    *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v10) = v7;
    return v7;
  }
  if (v3 == 8)
    v5 = 32;
  else
    v5 = 2 * v3;
  if (v5 < 1)
    return 0;
  v6 = (uint64_t *)uprv_malloc(8 * v5);
  v7 = v6;
  if (v6)
  {
    if (v3 >= 1)
    {
      v8 = a1[4];
      if (v8 >= v3)
        v8 = v3;
      if (v8 >= v5)
        v8 = v5;
      memcpy(v6, *((const void **)a1 + 1), 8 * v8);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v7;
    a1[4] = v5;
    v4 = 1;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v7;
}

uint64_t *sub_18BD1D3B8(unsigned int *a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t i;
  uint64_t v12;

  v3 = a1[4];
  v4 = *a1;
  if ((_DWORD)v4 != v3)
  {
LABEL_16:
    v9 = icu::UMemory::operator new((uint64_t *)v4, (icu::UMemory *)0x368, a2);
    v7 = v9;
    if (v9)
    {
      *v9 = (uint64_t)off_1E2262BC8;
      v9[1] = (uint64_t)&unk_1E2262BF8;
      v10 = v9 + 106;
      for (i = 2; i != 106; i += 13)
        icu::number::impl::SimpleModifier::SimpleModifier((icu::number::impl::SimpleModifier *)&v7[i]);
      *v10 = 0;
      v7[107] = 0;
      v7[108] = (uint64_t)"";
    }
    v12 = (int)*a1;
    *a1 = v12 + 1;
    *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v12) = v7;
    return v7;
  }
  if (v3 == 8)
    v5 = 32;
  else
    v5 = 2 * v3;
  if (v5 < 1)
    return 0;
  v6 = (uint64_t *)uprv_malloc(8 * v5);
  v7 = v6;
  if (v6)
  {
    if (v3 >= 1)
    {
      v8 = a1[4];
      if (v8 >= v3)
        v8 = v3;
      if (v8 >= v5)
        v8 = v5;
      memcpy(v6, *((const void **)a1 + 1), 8 * v8);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free(*((void **)a1 + 1));
    *((_QWORD *)a1 + 1) = v7;
    a1[4] = v5;
    v4 = 1;
    *((_BYTE *)a1 + 20) = 1;
    goto LABEL_16;
  }
  return v7;
}

void sub_18BD1D4CC(uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const icu::UnicodeString *a5@<X4>, uint64_t a6@<X8>)
{
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  icu::CurrencyPluralInfo *v14;
  icu::CurrencyPluralInfo *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  int v25;
  _BOOL4 v26;
  _BOOL4 v27;
  int DefaultFractionDigitsForUsage;
  int v29;
  BOOL v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  _OWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  int v42;
  uint64_t v43;
  int v44;
  double v45;
  _BOOL4 v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  char v51;
  const icu::number::impl::DecimalFormatProperties *v52;
  icu::number::Notation *v53;
  const icu::number::impl::DecimalFormatProperties *v54;
  int v55;
  char v56;
  int v57;
  char v58;
  int v59;
  int v60;
  int v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int64_t v73;
  __int16 v74;
  __int16 v75;
  int v76;
  int v77;
  int *v78;
  uint64_t v79;
  int v80;
  _OWORD *v81;
  _BOOL4 v82;
  _BOOL4 v84;
  int v85;
  int v86;
  int v87;
  int v88;
  _OWORD v89[4];
  uint64_t v90;
  double v91;
  _BYTE v92[32];
  _OWORD v93[2];
  __int128 v94;
  __int128 v95;
  _OWORD v96[14];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a6 + 464) = 0;
  *(_OWORD *)(a6 + 432) = 0u;
  *(_OWORD *)(a6 + 448) = 0u;
  *(_OWORD *)(a6 + 400) = 0u;
  *(_OWORD *)(a6 + 416) = 0u;
  *(_OWORD *)(a6 + 368) = 0u;
  *(_OWORD *)(a6 + 384) = 0u;
  *(_OWORD *)(a6 + 336) = 0u;
  *(_OWORD *)(a6 + 352) = 0u;
  *(_OWORD *)(a6 + 304) = 0u;
  *(_OWORD *)(a6 + 320) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 288) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  v11 = (_DWORD *)(a6 + 64);
  *(_OWORD *)(a6 + 16) = 0u;
  v12 = a6 + 16;
  *(_DWORD *)(a6 + 4) = 2;
  v79 = a6 + 4;
  icu::MeasureUnit::MeasureUnit(a6 + 16);
  icu::MeasureUnit::MeasureUnit(a6 + 40);
  v81 = v11;
  *v11 = 0;
  *(_DWORD *)(a6 + 136) = 0;
  *(_DWORD *)(a6 + 88) = 0;
  *(_DWORD *)(a6 + 96) = 4;
  *(_WORD *)(a6 + 100) = -3;
  *(_DWORD *)(a6 + 112) = -2;
  *(_WORD *)(a6 + 124) = -1;
  v13 = a6 + 124;
  *(_BYTE *)(a6 + 132) = 0;
  *(_QWORD *)(a6 + 144) = 0;
  *(_QWORD *)(a6 + 152) = 0x900000007;
  *(_BYTE *)(a6 + 160) = 0;
  *(_QWORD *)(a6 + 164) = 2;
  *(_QWORD *)(a6 + 176) = 0;
  *(_DWORD *)(a6 + 184) = 0;
  *(_QWORD *)(a6 + 192) = 0;
  *(_WORD *)(a6 + 200) = 0;
  *(_DWORD *)(a6 + 204) = 0;
  *(_QWORD *)(a6 + 208) = 0;
  *(_WORD *)(a6 + 216) = 0;
  *(_QWORD *)(a6 + 228) = 0;
  *(_QWORD *)(a6 + 220) = 0;
  *(_QWORD *)(a6 + 236) = 0x300000000;
  *(_WORD *)(a6 + 244) = 0;
  icu::Locale::Locale((icu::Locale *)(a6 + 248));
  memset(v96, 0, sizeof(v96));
  icu::Locale::Locale((icu::Locale *)v96, (uint64_t)a2 + 1936);
  icu::number::impl::SymbolsWrapper::setTo((icu::number::impl::SymbolsWrapper *)(a6 + 136), a2);
  v14 = *(icu::CurrencyPluralInfo **)(a1 + 48);
  if (!v14)
  {
    v16 = a3 + 8;
    goto LABEL_7;
  }
  *(_QWORD *)(a6 + 232) = icu::CurrencyPluralInfo::getPluralRules(v14);
  v15 = *(icu::CurrencyPluralInfo **)(a1 + 48);
  v16 = a3 + 8;
  if (!v15)
  {
LABEL_7:
    sub_18BD1DFE4(v16, a1, a5);
    *(_BYTE *)(a3 + 2464) = 1;
    goto LABEL_8;
  }
  *(_BYTE *)(a3 + 274) = 1;
  sub_18BD1E6C0(a3 + 280, v15, (uint64_t *)a1, a5);
  if (!*(_BYTE *)(a3 + 2464))
    v16 = a3 + 280;
LABEL_8:
  *(_QWORD *)(a6 + 224) = v16;
  if (*(_BYTE *)(a1 + 8))
  {
    v17 = 1;
    if (!*(_QWORD *)(a1 + 48) && *(_BYTE *)(a1 + 56))
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  }
  else
  {
    v17 = 1;
  }
  v94 = 0u;
  v95 = 0u;
  v78 = (int *)a5;
  sub_18BD0CD4C(a1, (uint64_t)v96, (uint64_t)a5, (icu::CurrencyUnit *)&v94);
  if (*(_BYTE *)(a1 + 56))
    v18 = 0;
  else
    v18 = *(unsigned int *)(a1 + 60);
  if (v17)
  {
    v19 = v18;
    icu::MeasureUnit::operator=(v12, (unint64_t)&v94);
    v18 = v19;
    v13 = a6 + 124;
  }
  v20 = *(_DWORD *)(a1 + 88);
  LODWORD(v21) = *(_DWORD *)(a1 + 92);
  v22 = *(_DWORD *)(a1 + 104);
  LODWORD(v23) = *(_DWORD *)(a1 + 112);
  v24 = *(double *)(a1 + 736);
  if (*(_BYTE *)(a1 + 744))
    v25 = 4;
  else
    v25 = *(_DWORD *)(a1 + 748);
  v88 = v25;
  v26 = (v22 & v20) != -1;
  v80 = *(_DWORD *)(a1 + 96);
  v27 = (*(_DWORD *)(a1 + 116) & v80) != -1;
  v84 = v27;
  v85 = *(_DWORD *)(a1 + 116);
  if (!v17 || v22 != -1 && v20 != -1)
  {
    DefaultFractionDigitsForUsage = *(_DWORD *)(a1 + 104);
LABEL_25:
    v29 = v20;
    goto LABEL_26;
  }
  v87 = v17;
  v39 = v13;
  v40 = v18;
  DefaultFractionDigitsForUsage = ucurr_getDefaultFractionDigitsForUsage((const UChar *)&v95 + 2, v18, v78);
  v26 = (v22 & v20) != -1;
  v18 = v40;
  v13 = v39;
  v17 = v87;
  v27 = v84;
  if (v22 != -1 || (v29 = DefaultFractionDigitsForUsage, v20 != -1))
  {
    if (v22 != -1)
    {
      if (v22 <= DefaultFractionDigitsForUsage)
        v29 = DefaultFractionDigitsForUsage;
      else
        v29 = v22;
      DefaultFractionDigitsForUsage = v22;
      goto LABEL_26;
    }
    if (DefaultFractionDigitsForUsage >= v20)
      DefaultFractionDigitsForUsage = v20;
    goto LABEL_25;
  }
LABEL_26:
  if ((_DWORD)v23 || !v29)
  {
    v31 = DefaultFractionDigitsForUsage & ~(DefaultFractionDigitsForUsage >> 31);
    if (v29 <= (int)v31)
      v37 = DefaultFractionDigitsForUsage & ~(DefaultFractionDigitsForUsage >> 31);
    else
      v37 = v29;
    if (v29 < 0)
      v38 = -1;
    else
      v38 = v37;
    v86 = v38;
    if ((v23 - 1000) < 0xFFFFFC19)
      v23 = 1;
    else
      v23 = v23;
    LODWORD(v35) = v80;
    if ((v21 & 0x80000000) != 0)
    {
      v21 = 0xFFFFFFFFLL;
      v36 = v81;
    }
    else
    {
      v36 = v81;
      if ((int)v21 >= (int)v23)
      {
        if (v21 > 0x3E7)
          v21 = 0xFFFFFFFFLL;
        else
          v21 = v21;
      }
      else
      {
        v21 = v23;
      }
    }
  }
  else
  {
    v23 = 0;
    if (DefaultFractionDigitsForUsage | v21)
      v30 = DefaultFractionDigitsForUsage < 0;
    else
      v30 = 1;
    if (v30)
      v31 = 1;
    else
      v31 = DefaultFractionDigitsForUsage;
    if (v29 <= (int)v31)
      v32 = v31;
    else
      v32 = v29;
    if (v29 < 0)
      v33 = -1;
    else
      v33 = v32;
    v86 = v33;
    if ((int)v21 > 999)
      v34 = -1;
    else
      v34 = v21;
    if ((int)v21 < 0)
      v21 = 0xFFFFFFFFLL;
    else
      v21 = v34;
    LODWORD(v35) = v80;
    v36 = v81;
  }
  memset(v93, 0, sizeof(v93));
  if (!*(_BYTE *)(a1 + 56))
  {
    icu::number::Precision::constructCurrency(v18, (uint64_t)v92);
    icu::number::CurrencyPrecision::withCurrency((icu::number::CurrencyPrecision *)v92, (const UChar *)&v94, (uint64_t)v89);
LABEL_91:
    LOBYTE(v27) = v84;
    v82 = 0;
    v93[0] = v89[0];
    *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v89 + 12);
    goto LABEL_124;
  }
  if (v24 != 0.0)
  {
    v91 = v24;
    v41 = v24;
    if (!v27)
    {
      if ((icu::number::impl::PatternStringUtils::ignoreRoundingIncrement((icu::number::impl::PatternStringUtils *)&v91, (double *)v86) & 1) != 0)
      {
        icu::number::Precision::constructFraction(v31, v86, (uint64_t)v89);
        v82 = 0;
        goto LABEL_115;
      }
      v41 = v91;
      v27 = v84;
    }
    v45 = v24 / v41 + -1.0;
    v46 = v45 <= 0.001;
    if (v45 < -0.001)
      v46 = 0;
    v82 = v46;
    if (!v46)
    {
      v91 = v24;
      v41 = v24;
    }
    if (v27)
    {
      v47 = v85;
      if (v85 >= 999)
        v47 = 999;
      if (v47 <= 1)
        v48 = 1;
      else
        v48 = v47;
      if ((int)v35 >= 999)
        v49 = 999;
      else
        v49 = v35;
      if ((int)v35 < (int)v48)
        v49 = v48;
      if ((int)v35 >= 0)
        LODWORD(v35) = v49;
      else
        LODWORD(v35) = 999;
      v85 = v48;
      icu::number::Precision::constructIncrementSignificant(v48, v41, v35, (uint64_t)v89);
      v93[0] = v89[0];
      *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v89 + 12);
      goto LABEL_116;
    }
    icu::number::Precision::increment(v41, (uint64_t)v92);
    icu::number::IncrementPrecision::withMinFraction((uint64_t)v92, v31, (uint64_t)v89);
LABEL_115:
    v93[0] = v89[0];
    *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v89 + 12);
    LODWORD(v35) = -1;
    v85 = -1;
LABEL_116:
    LOBYTE(v27) = v84;
    goto LABEL_124;
  }
  if (v27)
  {
    v42 = v85;
    if (v85 >= 999)
      v42 = 999;
    if (v42 <= 1)
      v43 = 1;
    else
      v43 = v42;
    if ((int)v35 >= 999)
      v44 = 999;
    else
      v44 = v35;
    if ((int)v35 < (int)v43)
      v44 = v43;
    if ((int)v35 >= 0)
      LODWORD(v35) = v44;
    else
      LODWORD(v35) = 999;
    v85 = v43;
    icu::number::Precision::constructSignificant(v43, v35, (uint64_t)v89);
    goto LABEL_91;
  }
  if (v26)
  {
    icu::number::Precision::constructFraction(v31, v86, (uint64_t)v89);
  }
  else
  {
    if (!v17)
    {
      v82 = 0;
      goto LABEL_123;
    }
    icu::number::Precision::constructCurrency(v18, (uint64_t)v89);
  }
  LOBYTE(v27) = v84;
  v82 = 0;
  v93[0] = v89[0];
  *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v89 + 12);
LABEL_123:
  LODWORD(v35) = -1;
  v85 = -1;
LABEL_124:
  v50 = v93[0];
  if (LODWORD(v93[0]))
  {
    *(_DWORD *)(a6 + 96) = v88;
    *v36 = v93[0];
    *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v93 + 12);
  }
  v51 = (*(_BYTE *)(a1 + 757) == 0) & ~v27;
  if (v86 <= 15)
    v51 = 0;
  *(_BYTE *)(a6 + 244) = v51;
  icu::number::IntegerWidth::IntegerWidth((uint64_t)v89, v23, v21, *(_BYTE *)(a1 + 68));
  *(_QWORD *)v13 = *(_QWORD *)&v89[0];
  *(_BYTE *)(v13 + 8) = BYTE8(v89[0]);
  v53 = (icu::number::Notation *)icu::number::impl::Grouper::forProperties((icu::number::impl::Grouper *)a1, v52);
  *(_QWORD *)(a6 + 100) = v53;
  *(_DWORD *)(a6 + 108) = (_DWORD)v54;
  if (*(int *)(a1 + 72) >= 1)
  {
    v53 = (icu::number::Notation *)icu::number::impl::Padder::forProperties((icu::number::impl::Padder *)a1, v54);
    *(_QWORD *)(a6 + 112) = v53;
    *(_DWORD *)(a6 + 120) = (_DWORD)v54;
  }
  *(_DWORD *)(a6 + 164) = *(unsigned __int8 *)(a1 + 65);
  *(_DWORD *)(a6 + 156) = *(unsigned __int8 *)(a1 + 756);
  if (*(_DWORD *)(a1 + 100) != -1)
  {
    if ((int)v21 < 9)
    {
      if ((int)v23 >= 2 && (int)v21 > (int)v23)
      {
        LODWORD(v23) = 1;
        *(_QWORD *)&v89[0] = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
        DWORD2(v89[0]) = v57;
        *(_QWORD *)(a6 + 124) = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v89, v21);
        *(_BYTE *)(a6 + 132) = v58;
      }
    }
    else
    {
      *(_QWORD *)&v89[0] = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)v23);
      DWORD2(v89[0]) = v55;
      *(_QWORD *)(a6 + 124) = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v89, v23);
      *(_BYTE *)(a6 + 132) = v56;
      LODWORD(v21) = v23;
    }
    if ((int)v21 < 0)
      v59 = -1;
    else
      v59 = v21;
    v53 = (icu::number::Notation *)icu::number::ScientificNotation::ScientificNotation((uint64_t)v89, v59, v59 == v23, *(_WORD *)(a1 + 100), *(unsigned __int8 *)(a1 + 66));
    *(_QWORD *)v79 = *(_QWORD *)&v89[0];
    *(_DWORD *)(v79 + 8) = DWORD2(v89[0]);
    if (*(_DWORD *)v36 == 2)
    {
      v60 = *(_DWORD *)(a1 + 112);
      v61 = *(_DWORD *)(a1 + 88);
      if (v60 | v61)
      {
        v62 = *(_DWORD *)(a1 + 104);
        if (v60 | v62)
        {
          v63 = v61 + v60;
          if (v60 > 1 && *(_DWORD *)(a1 + 92) > v60)
            v60 = 1;
          v64 = (v60 + v62);
        }
        else
        {
          v63 = v61 + 1;
          v64 = 1;
        }
        v53 = (icu::number::Notation *)icu::number::Precision::constructSignificant(v64, v63, (uint64_t)v89);
      }
      else
      {
        icu::number::Precision::unlimited((uint64_t)v89);
      }
      *v36 = v89[0];
      *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v89 + 12);
      *(_DWORD *)(a6 + 96) = v88;
    }
  }
  if (!*(_BYTE *)a1)
  {
    if (*(_DWORD *)(a1 + 4) == 1)
      v66 = icu::number::Notation::compactLong(v53);
    else
      v66 = icu::number::Notation::compactShort(v53);
    *(_QWORD *)(a6 + 4) = v66;
    *(_DWORD *)(a6 + 12) = (_DWORD)v54;
  }
  v67 = *(_DWORD *)(a1 + 84);
  v68 = *(_DWORD *)(a1 + 120);
  v69 = *(_DWORD *)(a1 + 124);
  v70 = (v69 + v67);
  if (!(v69 + v67) || v68 == 1)
  {
    v71 = a4;
    if ((_DWORD)v70)
    {
      icu::number::Scale::powerOfTen(v70, (uint64_t)v89);
    }
    else if (v68 == 1)
    {
      icu::number::Scale::none((uint64_t)v89);
    }
    else
    {
      icu::number::Scale::byDouble((double)v68, (unint64_t)v54, (uint64_t)v89);
    }
  }
  else
  {
    icu::number::Scale::byDoubleAndPowerOfTen((icu::number::Scale *)v70, (double)v68, (unint64_t)v54, (uint64_t)v89);
    v71 = a4;
  }
  icu::number::Scale::operator=(a6 + 168, (uint64_t)v89);
  icu::number::Scale::~Scale((icu::number::Scale *)v89);
  if (v71)
  {
    icu::CurrencyUnit::operator=(v71 + 16, (unint64_t)&v94);
    *(_BYTE *)(v71 + 8) = 0;
    *(_DWORD *)(v71 + 748) = v88;
    *(_BYTE *)(v71 + 744) = 0;
    *(_DWORD *)(v71 + 112) = v23;
    if ((_DWORD)v21 == -1)
      v72 = 0x7FFFFFFF;
    else
      v72 = v21;
    *(_DWORD *)(v71 + 92) = v72;
    if (v50 == 8)
    {
      icu::number::Precision::withCurrency((icu::number::Precision *)v93, (const UChar *)&v94, (UErrorCode *)v78, (uint64_t)v89);
      v50 = v89[0];
      v73 = *((int64_t *)&v89[0] + 1);
      v74 = v89[1];
      v75 = WORD1(v89[1]);
    }
    else
    {
      v73 = *((int64_t *)&v93[0] + 1);
      v74 = v93[1];
      v75 = WORD1(v93[1]);
    }
    if (v50 == 2)
    {
      LODWORD(v31) = (__int16)v73;
      v76 = (int)v73 >> 16;
      v24 = 0.0;
    }
    else
    {
      if ((v50 - 5) > 2)
      {
        if (v50 == 9)
        {
          if (!v82)
            v24 = *(double *)&v73;
          v77 = v74;
          LODWORD(v35) = v75;
        }
        else
        {
          v24 = 0.0;
          if (v50 == 3)
          {
            v77 = (int)((unint64_t)v73 >> 16) >> 16;
            v35 = v73 >> 48;
          }
          else
          {
            v77 = v85;
          }
        }
        v76 = v86;
        goto LABEL_185;
      }
      LODWORD(v31) = v75;
      v90 = 0;
      memset(v89, 0, sizeof(v89));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v89);
      icu::number::impl::DecimalQuantity::setToLong((void **)v89, v73);
      icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v89, v74);
      v24 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)v89);
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v89);
      v76 = v31;
    }
    v77 = v85;
LABEL_185:
    *(_DWORD *)(v71 + 104) = v31;
    *(_DWORD *)(v71 + 88) = v76;
    *(_DWORD *)(v71 + 116) = v77;
    *(_DWORD *)(v71 + 96) = v35;
    *(double *)(v71 + 736) = v24;
  }
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v94);
  icu::Locale::~Locale((icu::Locale *)v96);
}

void sub_18BD1DEB4(uint64_t a1@<X0>, const icu::DecimalFormatSymbols *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const icu::UnicodeString *a5@<X4>, uint64_t a6@<X8>)
{
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  _QWORD v27[30];

  v27[29] = *MEMORY[0x1E0C80C00];
  icu::number::NumberFormatter::with(&v20);
  sub_18BD1D4CC(a1, a2, a3, a4, a5, (uint64_t)v12);
  icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros((uint64_t)&v20, (uint64_t)v12, a6);
  icu::Locale::~Locale((icu::Locale *)&v19);
  icu::number::impl::StringProp::~StringProp(&v18);
  icu::number::impl::StringProp::~StringProp(&v17);
  icu::number::Scale::~Scale((icu::number::Scale *)&v16);
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v15);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v14);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v13);
  icu::Locale::~Locale((icu::Locale *)v27);
  icu::number::impl::StringProp::~StringProp(&v26);
  icu::number::impl::StringProp::~StringProp(&v25);
  icu::number::Scale::~Scale((icu::number::Scale *)&v24);
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v23);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v22);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v21);
}

void *sub_18BD1DFE4(uint64_t a1, uint64_t a2, const icu::UnicodeString *a3)
{
  UChar **v6;
  UChar **v7;
  void *v8;
  UChar **v9;
  UChar **v10;
  void *v11;
  UChar **v12;
  UChar **v13;
  UChar **v14;
  UChar **v15;
  UErrorCode *v16;
  __int16 v17;
  void *v18;
  void *v19;
  void *v20;
  UErrorCode *v21;
  UErrorCode *v22;
  UErrorCode *v23;
  BOOL v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  _BYTE v30[64];
  UChar *v31[8];
  _OWORD v32[4];
  _OWORD v33[4];
  _OWORD v34[4];
  _OWORD v35[4];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 266) = 0;
  memset(v35, 0, sizeof(v35));
  icu::number::impl::AffixUtils::escape(a2 + 480, (uint64_t)v35);
  memset(v34, 0, sizeof(v34));
  icu::number::impl::AffixUtils::escape(a2 + 608, (uint64_t)v34);
  memset(v33, 0, sizeof(v33));
  icu::number::impl::AffixUtils::escape(a2 + 128, (uint64_t)v33);
  memset(v32, 0, sizeof(v32));
  icu::number::impl::AffixUtils::escape(a2 + 256, (uint64_t)v32);
  if ((*(_WORD *)(a2 + 488) & 1) == 0)
  {
    v6 = (UChar **)(a1 + 8);
    v7 = (UChar **)v35;
LABEL_5:
    icu::UnicodeString::operator=(v6, v7);
    goto LABEL_7;
  }
  if ((*(_WORD *)(a2 + 552) & 1) == 0)
  {
    v6 = (UChar **)(a1 + 8);
    v7 = (UChar **)(a2 + 544);
    goto LABEL_5;
  }
  icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_18BE35972);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 8), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v31);
LABEL_7:
  if ((*(_WORD *)(a2 + 616) & 1) == 0)
  {
    v9 = (UChar **)(a1 + 72);
    v10 = (UChar **)v34;
LABEL_11:
    icu::UnicodeString::operator=(v9, v10);
    goto LABEL_13;
  }
  if ((*(_WORD *)(a2 + 680) & 1) == 0)
  {
    v9 = (UChar **)(a1 + 72);
    v10 = (UChar **)(a2 + 672);
    goto LABEL_11;
  }
  icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_18BE35972);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 72), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v31);
LABEL_13:
  if ((*(_WORD *)(a2 + 136) & 1) == 0)
  {
    v12 = (UChar **)(a1 + 136);
    v13 = (UChar **)v33;
LABEL_17:
    icu::UnicodeString::operator=(v12, v13);
    goto LABEL_18;
  }
  if ((*(_WORD *)(a2 + 200) & 1) == 0)
  {
    v12 = (UChar **)(a1 + 136);
    v13 = (UChar **)(a2 + 192);
    goto LABEL_17;
  }
  v17 = *(_WORD *)(a2 + 552);
  if ((v17 & 1) != 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)L"-");
  }
  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v30, (uint64_t)L"-");
    icu::operator+((uint64_t)v30, a2 + 544, (uint64_t)v31);
  }
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 136), (icu::UnicodeString *)v31);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)v31);
  if ((v17 & 1) == 0)
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v30);
LABEL_18:
  if ((*(_WORD *)(a2 + 264) & 1) != 0)
  {
    if ((*(_WORD *)(a2 + 328) & 1) != 0)
    {
      if ((*(_WORD *)(a2 + 680) & 1) != 0)
        icu::UnicodeString::UnicodeString((uint64_t)v31, (uint64_t)&unk_18BE35972);
      else
        icu::UnicodeString::UnicodeString((icu::UnicodeString *)v31, (UChar **)(a2 + 672));
      icu::UnicodeString::operator=((UChar **)(a1 + 200), v31);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v31);
      goto LABEL_32;
    }
    v14 = (UChar **)(a1 + 200);
    v15 = (UChar **)(a2 + 320);
  }
  else
  {
    v14 = (UChar **)(a1 + 200);
    v15 = (UChar **)v32;
  }
  icu::UnicodeString::operator=(v14, v15);
LABEL_32:
  v24 = (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 544), a3, v16) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 672), a3, v21) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 192), a3, v22) & 1) != 0
     || (icu::number::impl::AffixUtils::hasCurrencySymbols((icu::number::impl::AffixUtils *)(a2 + 320), a3, v23) & 1) != 0
     || *(_BYTE *)(a2 + 67) != 0;
  *(_BYTE *)(a1 + 264) = v24;
  v25 = (void *)*(unsigned __int8 *)(a2 + 67);
  *(_BYTE *)(a1 + 265) = (_BYTE)v25;
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v32);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v33);
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)v34);
  return icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v35);
}

uint64_t sub_18BD1E2E0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v3 = a1 + 72;
  if ((a2 & 0x200) != 0)
    v3 = a1 + 200;
  if ((a2 & 0x100) != 0)
    v3 = a1 + 8;
  if ((~a2 & 0x300) != 0)
    v4 = v3;
  else
    v4 = a1 + 136;
  v5 = *(unsigned __int16 *)(v4 + 8);
  if (*(__int16 *)(v4 + 8) < 0)
    v6 = *(_DWORD *)(v4 + 12);
  else
    v6 = v5 >> 5;
  if (v6 <= a3)
    return 0xFFFFLL;
  if ((v5 & 2) != 0)
    v7 = v4 + 10;
  else
    v7 = *(_QWORD *)(v4 + 24);
  return *(unsigned __int16 *)(v7 + 2 * (int)a3);
}

uint64_t sub_18BD1E34C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 72;
  if ((a2 & 0x200) != 0)
    v2 = a1 + 200;
  if ((a2 & 0x100) != 0)
    v2 = a1 + 8;
  if ((~a2 & 0x300) != 0)
    v3 = v2;
  else
    v3 = a1 + 136;
  if (*(__int16 *)(v3 + 8) < 0)
    return *(unsigned int *)(v3 + 12);
  else
    return *(unsigned __int16 *)(v3 + 8) >> 5;
}

icu::UnicodeString *sub_18BD1E394@<X0>(UChar **a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  UChar **v3;
  UChar **v4;

  v3 = a1 + 9;
  if ((a2 & 0x200) != 0)
    v3 = a1 + 25;
  if ((a2 & 0x100) != 0)
    v3 = a1 + 1;
  if ((~a2 & 0x300) != 0)
    v4 = v3;
  else
    v4 = a1 + 17;
  return icu::UnicodeString::UnicodeString(a3, v4);
}

uint64_t sub_18BD1E3C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;

  v4 = qword_1E2246C90;
  v5 = 0;
  if ((icu::number::impl::AffixUtils::containsType(a1 + 8, -2, (int *)&v5) & 1) != 0)
    v2 = 1;
  else
    v2 = icu::number::impl::AffixUtils::containsType(a1 + 72, -2, (int *)&v5);
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v4);
  return v2;
}

uint64_t sub_18BD1E440(uint64_t a1)
{
  unsigned int v2;
  int v3;
  _BOOL8 v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  void *v9;
  unsigned __int16 *v10;
  _BYTE v12[8];
  unsigned __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int16 *)(a1 + 208);
  if ((v2 & 1) != 0)
  {
    if ((*(_WORD *)(a1 + 80) & 1) != 0)
      goto LABEL_13;
    return 1;
  }
  else
  {
    if ((v2 & 0x8000) != 0)
      v3 = *(_DWORD *)(a1 + 212);
    else
      v3 = v2 >> 5;
    v5 = *(unsigned __int16 *)(a1 + 80);
    if ((v5 & 0x8000u) == 0)
      v6 = v5 >> 5;
    else
      v6 = *(_DWORD *)(a1 + 84);
    v4 = 1;
    if ((v5 & 1) == 0
      && v3 == v6
      && icu::UnicodeString::doEquals((icu::UnicodeString *)(a1 + 200), (const icu::UnicodeString *)(a1 + 72), v3))
    {
LABEL_13:
      icu::UnicodeString::tempSubString((icu::UnicodeString *)(a1 + 136), 1, 0x7FFFFFFF, (icu::UnicodeString *)v12);
      if ((v13 & 1) != 0)
      {
        v9 = (void *)*(unsigned __int16 *)(a1 + 16);
        if ((v9 & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        if ((v13 & 0x8000u) == 0)
          v7 = v13 >> 5;
        else
          v7 = v14;
        v8 = *(unsigned __int16 *)(a1 + 16);
        if ((v8 & 0x8000u) == 0)
          v9 = (void *)(v8 >> 5);
        else
          v9 = (void *)*(unsigned int *)(a1 + 20);
        v4 = 1;
        if ((v8 & 1) != 0
          || v7 != (_DWORD)v9
          || !icu::UnicodeString::doEquals((icu::UnicodeString *)v12, (const icu::UnicodeString *)(a1 + 8), v7))
        {
          goto LABEL_33;
        }
      }
      v9 = (void *)*(unsigned __int16 *)(a1 + 144);
      if (*(__int16 *)(a1 + 144) < 0)
      {
        if (*(_DWORD *)(a1 + 148))
          goto LABEL_27;
      }
      else if (v9 >> 5)
      {
LABEL_27:
        if ((v9 & 2) != 0)
          v10 = (unsigned __int16 *)(a1 + 146);
        else
          v10 = *(unsigned __int16 **)(a1 + 160);
        v9 = (void *)*v10;
        v4 = (_DWORD)v9 != 45;
        goto LABEL_33;
      }
LABEL_30:
      v4 = 1;
LABEL_33:
      icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
    }
  }
  return v4;
}

uint64_t sub_18BD1E5B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;

  v4 = qword_1E2246C90;
  v5 = 0;
  if ((icu::number::impl::AffixUtils::containsType(a1 + 136, -1, (int *)&v5) & 1) != 0)
    v2 = 1;
  else
    v2 = icu::number::impl::AffixUtils::containsType(a1 + 200, -1, (int *)&v5);
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v4);
  return v2;
}

uint64_t sub_18BD1E628(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

uint64_t sub_18BD1E630(uint64_t a1, int a2, int *a3)
{
  if ((icu::number::impl::AffixUtils::containsType(a1 + 8, a2, a3) & 1) != 0
    || (icu::number::impl::AffixUtils::containsType(a1 + 72, a2, a3) & 1) != 0
    || (icu::number::impl::AffixUtils::containsType(a1 + 136, a2, a3) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return icu::number::impl::AffixUtils::containsType(a1 + 200, a2, a3);
  }
}

uint64_t sub_18BD1E6B0()
{
  return 1;
}

uint64_t sub_18BD1E6B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 265);
}

_QWORD *sub_18BD1E6C0(uint64_t a1, icu::CurrencyPluralInfo *a2, uint64_t *a3, const icu::UnicodeString *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *Keyword;
  UChar **CurrencyPluralPattern;
  void *v12;
  void *v13;
  _BYTE v15[64];
  UChar *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[9];
  _OWORD v34[5];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[22];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 2184) = 0;
  bzero(v22, 0x2F0uLL);
  v21 = *a3;
  v22[0] = *((_BYTE *)a3 + 8);
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)&v23, (const UChar *)a3 + 8);
  sub_18BCC22AC(&v24, (uint64_t **)a3 + 6);
  v26 = *(_OWORD *)(a3 + 9);
  v27 = *(_OWORD *)(a3 + 11);
  v28 = *(_OWORD *)(a3 + 13);
  v29 = a3[15];
  v25 = *(_OWORD *)(a3 + 7);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v30, (UChar **)a3 + 16);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v31, (UChar **)a3 + 24);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v32, (UChar **)a3 + 32);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v33, (UChar **)a3 + 40);
  v33[8] = a3[48];
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v34, (UChar **)a3 + 49);
  v34[4] = *(_OWORD *)(a3 + 57);
  v35 = *((_DWORD *)a3 + 118);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v36, (UChar **)a3 + 60);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v37, (UChar **)a3 + 68);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v38, (UChar **)a3 + 76);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v39, (UChar **)a3 + 84);
  v8 = 0;
  *(_QWORD *)&v40[14] = *(uint64_t *)((char *)a3 + 750);
  *(_OWORD *)v40 = *((_OWORD *)a3 + 46);
  v9 = a1 + 8;
  do
  {
    Keyword = icu::StandardPlural::getKeyword(v8);
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    v16 = (UChar *)off_1E2256B38;
    LOWORD(v17) = 2;
    icu::UnicodeString::UnicodeString((icu::UnicodeString *)v15, Keyword);
    CurrencyPluralPattern = icu::CurrencyPluralInfo::getCurrencyPluralPattern(a2, (const icu::UnicodeString *)v15, &v16);
    icu::UnicodeString::operator=(&v16, CurrencyPluralPattern);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
    icu::number::impl::PatternParser::parseToExistingProperties(&v16, &v21);
    sub_18BD1DFE4(v9, (uint64_t)&v21, a4);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v16);
    ++v8;
    v9 += 272;
  }
  while (v8 != 8);
  return sub_18BCC2318(&v21);
}

uint64_t sub_18BD1E8F0(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 272 * a2 + 8) + 16))(a1 + 272 * a2 + 8);
}

uint64_t sub_18BD1E908(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 272 * a2 + 8) + 24))(a1 + 272 * a2 + 8);
}

uint64_t sub_18BD1E920(uint64_t a1, unsigned __int8 a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 272 * a2 + 8) + 32))(a1 + 272 * a2 + 8);
}

uint64_t sub_18BD1E938(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1368) + 48))(a1 + 1368);
}

uint64_t sub_18BD1E94C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1368) + 56))(a1 + 1368);
}

uint64_t sub_18BD1E960(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1368) + 64))(a1 + 1368);
}

uint64_t sub_18BD1E974(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1368) + 40))(a1 + 1368);
}

uint64_t sub_18BD1E988(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1368) + 72))(a1 + 1368);
}

uint64_t sub_18BD1E99C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1368) + 80))(a1 + 1368);
}

uint64_t sub_18BD1E9B0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 1368) + 88))(a1 + 1368);
}

void sub_18BD1E9C4(uint64_t a1)
{
  icu::UnicodeString *v2;

  *(_QWORD *)a1 = off_1E2262E30;
  v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 200));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v2);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);
}

void sub_18BD1EA14(uint64_t a1)
{
  icu::UnicodeString *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_1E2262E30;
  v2 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString(off_1E2262E30, (icu::UnicodeString *)(a1 + 200));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 136));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v5, v2);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)a1);
  icu::UMemory::operator delete(v6);
}

void sub_18BD1EA68(icu::number::impl::AffixPatternProvider *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E2262ED8;
  v2 = 2176;
  do
  {
    *(_QWORD *)((char *)a1 + v2 - 264) = off_1E2262E30;
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 64));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 128));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 192));
    icu::UnicodeString::~UnicodeString((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 256));
    icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)((char *)a1 + v2 - 264));
    v2 -= 272;
  }
  while (v2);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider(a1);
}

void sub_18BD1EAEC(icu::number::impl::AffixPatternProvider *a1)
{
  uint64_t (**v2)();
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = off_1E2262ED8;
  *(_QWORD *)a1 = off_1E2262ED8;
  v3 = 2176;
  do
  {
    *(_QWORD *)((char *)a1 + v3 - 264) = off_1E2262E30;
    icu::UnicodeString::~UnicodeString(v2, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 64));
    icu::UnicodeString::~UnicodeString(v4, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 128));
    icu::UnicodeString::~UnicodeString(v5, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 192));
    icu::UnicodeString::~UnicodeString(v6, (icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 256));
    icu::number::impl::AffixPatternProvider::~AffixPatternProvider((icu::number::impl::AffixPatternProvider *)((char *)a1 + v3 - 264));
    v3 -= 272;
  }
  while (v3);
  icu::number::impl::AffixPatternProvider::~AffixPatternProvider(a1);
  icu::UMemory::operator delete(v7);
}

_QWORD *icu::number::impl::Modifier::Parameters::Parameters(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t icu::number::impl::Modifier::Parameters::Parameters(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  return result;
}

void icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore(icu::number::impl::AdoptingSignumModifierStore *this)
{
  uint64_t i;
  uint64_t v3;

  *(_QWORD *)this = off_1E2262F80;
  for (i = 8; i != 40; i += 8)
  {
    v3 = *(_QWORD *)((char *)this + i);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

{
  uint64_t i;
  uint64_t v3;

  *(_QWORD *)this = off_1E2262F80;
  for (i = 8; i != 40; i += 8)
  {
    v3 = *(_QWORD *)((char *)this + i);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

{
  uint64_t i;
  uint64_t v3;

  *(_QWORD *)this = off_1E2262F80;
  for (i = 8; i != 40; i += 8)
  {
    v3 = *(_QWORD *)((char *)this + i);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  icu::UMemory::operator delete(this);
}

uint64_t icu::number::impl::AdoptingSignumModifierStore::operator=(uint64_t result, uint64_t a2)
{
  uint64_t i;

  for (i = 8; i != 40; i += 8)
  {
    *(_QWORD *)(result + i) = *(_QWORD *)(a2 + i);
    *(_QWORD *)(a2 + i) = 0;
  }
  return result;
}

uint64_t icu::number::impl::ConstantAffixModifier::apply(icu::number::impl::ConstantAffixModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v9;

  v9 = icu::FormattedStringBuilder::insert(a2, a4, (uint64_t)this + 80, *((_BYTE *)this + 144), 0, a5);
  return icu::FormattedStringBuilder::insert(a2, a3, (uint64_t)this + 16, *((_BYTE *)this + 144), 0, a5)
       + v9;
}

uint64_t icu::number::impl::ConstantAffixModifier::getPrefixLength(icu::number::impl::ConstantAffixModifier *this)
{
  if (*((__int16 *)this + 12) < 0)
    return *((unsigned int *)this + 7);
  else
    return *((unsigned __int16 *)this + 12) >> 5;
}

uint64_t icu::number::impl::ConstantAffixModifier::getCodePointCount(icu::number::impl::ConstantAffixModifier *this)
{
  int v2;

  v2 = icu::UnicodeString::countChar32((icu::number::impl::ConstantAffixModifier *)((char *)this + 16), 0, 0x7FFFFFFF);
  return icu::UnicodeString::countChar32((icu::number::impl::ConstantAffixModifier *)((char *)this + 80), 0, 0x7FFFFFFF)+ v2;
}

uint64_t icu::number::impl::ConstantAffixModifier::isStrong(icu::number::impl::ConstantAffixModifier *this)
{
  return *((unsigned __int8 *)this + 145);
}

void icu::number::impl::ConstantAffixModifier::containsField()
{
  abort();
}

void icu::number::impl::ConstantAffixModifier::getParameters(icu::number::impl::ConstantAffixModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
  abort();
}

uint64_t icu::number::impl::ConstantAffixModifier::semanticallyEquivalent(icu::number::impl::ConstantAffixModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  if (!result)
    return result;
  v4 = result;
  v5 = *((unsigned __int16 *)this + 12);
  if ((v5 & 1) != 0)
  {
    if ((*(_WORD *)(result + 24) & 1) == 0)
      return 0;
  }
  else
  {
    if ((v5 & 0x8000) != 0)
      v6 = *((_DWORD *)this + 7);
    else
      v6 = v5 >> 5;
    result = 0;
    v7 = *(unsigned __int16 *)(v4 + 24);
    if ((v7 & 0x8000u) == 0)
      v8 = v7 >> 5;
    else
      v8 = *(_DWORD *)(v4 + 28);
    if ((v7 & 1) != 0)
      return result;
    if (v6 != v8)
      return result;
    result = icu::UnicodeString::doEquals((icu::number::impl::ConstantAffixModifier *)((char *)this + 16), (const icu::UnicodeString *)(v4 + 16), v6);
    if (!(_DWORD)result)
      return result;
  }
  v9 = *((unsigned __int16 *)this + 44);
  if ((v9 & 1) != 0)
  {
    if ((*(_WORD *)(v4 + 88) & 1) != 0)
      goto LABEL_26;
    return 0;
  }
  if ((v9 & 0x8000) != 0)
    v10 = *((_DWORD *)this + 23);
  else
    v10 = v9 >> 5;
  result = 0;
  v11 = *(unsigned __int16 *)(v4 + 88);
  if ((v11 & 0x8000u) == 0)
    v12 = v11 >> 5;
  else
    v12 = *(_DWORD *)(v4 + 92);
  if ((v11 & 1) == 0 && v10 == v12)
  {
    result = icu::UnicodeString::doEquals((icu::number::impl::ConstantAffixModifier *)((char *)this + 80), (const icu::UnicodeString *)(v4 + 80), v10);
    if ((_DWORD)result)
    {
LABEL_26:
      if (*((unsigned __int8 *)this + 144) == *(unsigned __int8 *)(v4 + 144))
        return *((unsigned __int8 *)this + 145) == *(unsigned __int8 *)(v4 + 145);
      return 0;
    }
  }
  return result;
}

uint64_t icu::number::impl::SimpleModifier::SimpleModifier(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, 0, a6);
}

{
  unsigned int v11;
  _WORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;

  *(_QWORD *)a1 = off_1E2262FE8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), (UChar **)(a2 + 8));
  *(_BYTE *)(a1 + 72) = a3;
  *(_BYTE *)(a1 + 73) = a4;
  *(_QWORD *)(a1 + 88) = a5;
  *(_QWORD *)(a1 + 96) = a6;
  v11 = *(unsigned __int16 *)(a1 + 16);
  if ((v11 & 0x11) != 0)
  {
    v12 = 0;
  }
  else if ((v11 & 2) != 0)
  {
    v12 = (_WORD *)(a1 + 18);
  }
  else
  {
    v12 = *(_WORD **)(a1 + 32);
  }
  v13 = v11 >> 5;
  if ((v11 & 0x8000) != 0)
  {
    if (!*(_DWORD *)(a1 + 20))
      goto LABEL_13;
  }
  else if (!v13)
  {
    goto LABEL_13;
  }
  if (*v12)
  {
    if ((v11 & 0x8000) != 0)
      v14 = *(_DWORD *)(a1 + 20);
    else
      v14 = v11 >> 5;
    if (v14 < 2 || ((v11 & 2) != 0 ? (v18 = a1 + 18) : (v18 = *(_QWORD *)(a1 + 32)), *(_WORD *)(v18 + 2)))
    {
      if ((v11 & 0x8000) != 0)
        v19 = *(_DWORD *)(a1 + 20);
      else
        v19 = v11 >> 5;
      if (v19 < 2)
      {
        v21 = 0xFFFF;
      }
      else
      {
        if ((v11 & 2) != 0)
          v20 = a1 + 18;
        else
          v20 = *(_QWORD *)(a1 + 32);
        v21 = *(unsigned __int16 *)(v20 + 2);
      }
      *(_DWORD *)(a1 + 76) = v21 - 256;
      v22 = v21 - 253;
      v23 = v21 - 253;
    }
    else
    {
      *(_DWORD *)(a1 + 76) = 0;
      v23 = 2;
      v22 = 3;
    }
    *(_DWORD *)(a1 + 80) = v23;
    if ((v11 & 0x8000) != 0)
    {
      v13 = *(_DWORD *)(a1 + 20);
      if (v22 < (int)v13)
      {
LABEL_40:
        if (v13 <= v23)
        {
          v17 = 65279;
        }
        else
        {
          if ((v11 & 2) != 0)
            v24 = a1 + 18;
          else
            v24 = *(_QWORD *)(a1 + 32);
          v17 = *(unsigned __int16 *)(v24 + 2 * v23) - 256;
        }
        goto LABEL_49;
      }
    }
    else if (v22 < (int)(v11 >> 5))
    {
      goto LABEL_40;
    }
    v17 = 0;
    goto LABEL_49;
  }
LABEL_13:
  if ((v11 & 0x8000) != 0)
    v13 = *(_DWORD *)(a1 + 20);
  if (v13 < 2)
  {
    v16 = 65279;
  }
  else
  {
    if ((v11 & 2) != 0)
      v15 = a1 + 18;
    else
      v15 = *(_QWORD *)(a1 + 32);
    v16 = *(unsigned __int16 *)(v15 + 2) - 256;
  }
  v17 = 0;
  *(_DWORD *)(a1 + 76) = v16;
  *(_DWORD *)(a1 + 80) = -1;
LABEL_49:
  *(_DWORD *)(a1 + 84) = v17;
  return a1;
}

{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, 0, a6);
}

{
  return icu::number::impl::SimpleModifier::SimpleModifier(a1, a2, a3, a4, a5, a6);
}

double icu::number::impl::SimpleModifier::SimpleModifier(icu::number::impl::SimpleModifier *this)
{
  double result;

  *(_QWORD *)this = off_1E2262FE8;
  *((_QWORD *)this + 1) = off_1E2256B38;
  *((_WORD *)this + 8) = 2;
  *((_WORD *)this + 36) = 0;
  result = NAN;
  *(_QWORD *)((char *)this + 76) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 21) = 0;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1E2262FE8;
  *((_QWORD *)this + 1) = off_1E2256B38;
  *((_WORD *)this + 8) = 2;
  *((_WORD *)this + 36) = 0;
  result = NAN;
  *(_QWORD *)((char *)this + 76) = 0xFFFFFFFF00000000;
  *((_DWORD *)this + 21) = 0;
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t icu::number::impl::SimpleModifier::formatAsPrefixSuffix(icu::number::impl::SimpleModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v9;
  int v10;

  v9 = *((_DWORD *)this + 19);
  if (*((_DWORD *)this + 20) == -1 && *((_DWORD *)this + 21) + v9 >= 1)
    return icu::FormattedStringBuilder::splice(a2, a3, a4, (uint64_t)this + 8, 2u, v9 + 2, *((_BYTE *)this + 72), a5);
  if (v9 >= 1)
  {
    icu::FormattedStringBuilder::insert(a2, a3, (uint64_t)this + 8, 2u, v9 + 2, *((_BYTE *)this + 72), 0, a5);
    v9 = *((_DWORD *)this + 19);
  }
  v10 = *((_DWORD *)this + 21);
  if (v10 >= 1)
  {
    icu::FormattedStringBuilder::insert(a2, v9 + a4, (uint64_t)this + 8, *((_DWORD *)this + 20) + 1, *((_DWORD *)this + 20) + 1 + v10, *((_BYTE *)this + 72), 0, a5);
    v9 = *((_DWORD *)this + 19);
    v10 = *((_DWORD *)this + 21);
  }
  return (v10 + v9);
}

uint64_t icu::number::impl::SimpleModifier::getPrefixLength(icu::number::impl::SimpleModifier *this)
{
  return *((unsigned int *)this + 19);
}

uint64_t icu::number::impl::SimpleModifier::getCodePointCount(icu::number::impl::SimpleModifier *this)
{
  int32_t v2;
  uint64_t v3;
  int32_t v4;

  v2 = *((_DWORD *)this + 19);
  if (v2 < 1)
    v3 = 0;
  else
    v3 = icu::UnicodeString::countChar32((icu::number::impl::SimpleModifier *)((char *)this + 8), 2, v2);
  v4 = *((_DWORD *)this + 21);
  if (v4 >= 1)
    return icu::UnicodeString::countChar32((icu::number::impl::SimpleModifier *)((char *)this + 8), *((_DWORD *)this + 20) + 1, v4)+ v3;
  return v3;
}

uint64_t icu::number::impl::SimpleModifier::isStrong(icu::number::impl::SimpleModifier *this)
{
  return *((unsigned __int8 *)this + 73);
}

void icu::number::impl::SimpleModifier::containsField()
{
  abort();
}

__n128 icu::number::impl::SimpleModifier::getParameters(icu::number::impl::SimpleModifier *this, __n128 *a2)
{
  __n128 result;

  result = *(__n128 *)((char *)this + 88);
  *a2 = result;
  return result;
}

uint64_t icu::number::impl::SimpleModifier::semanticallyEquivalent(icu::number::impl::SimpleModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  if (result)
  {
    v4 = result;
    v5 = *((_QWORD *)this + 11);
    if (v5)
      return v5 == *(_QWORD *)(result + 88);
    v7 = *((unsigned __int16 *)this + 8);
    if ((v7 & 1) != 0)
    {
      if ((*(_WORD *)(result + 16) & 1) == 0)
        return 0;
      goto LABEL_19;
    }
    if ((v7 & 0x8000) != 0)
      v8 = *((_DWORD *)this + 5);
    else
      v8 = v7 >> 5;
    result = 0;
    v9 = *(unsigned __int16 *)(v4 + 16);
    if ((v9 & 0x8000u) == 0)
      v10 = v9 >> 5;
    else
      v10 = *(_DWORD *)(v4 + 20);
    if ((v9 & 1) == 0 && v8 == v10)
    {
      result = icu::UnicodeString::doEquals((icu::number::impl::SimpleModifier *)((char *)this + 8), (const icu::UnicodeString *)(v4 + 8), v8);
      if ((_DWORD)result)
      {
LABEL_19:
        if (*((unsigned __int8 *)this + 72) == *(unsigned __int8 *)(v4 + 72))
          return *((unsigned __int8 *)this + 73) == *(unsigned __int8 *)(v4 + 73);
        return 0;
      }
    }
  }
  return result;
}

uint64_t icu::number::impl::SimpleModifier::formatTwoArgPattern(uint64_t a1, icu::FormattedStringBuilder *a2, int a3, _DWORD *a4, int *a5, char a6, UErrorCode *a7)
{
  unsigned int v14;
  _WORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;

  v14 = *(unsigned __int16 *)(a1 + 16);
  if ((v14 & 0x11) != 0)
  {
    v15 = 0;
  }
  else if ((v14 & 2) != 0)
  {
    v15 = (_WORD *)(a1 + 18);
  }
  else
  {
    v15 = *(_WORD **)(a1 + 32);
  }
  v16 = v14 >> 5;
  v17 = *(_DWORD *)(a1 + 20);
  if ((v14 & 0x8000u) == 0)
    v18 = v14 >> 5;
  else
    v18 = *(_DWORD *)(a1 + 20);
  if (v18 && *v15 == 2)
  {
    v33 = a1 + 8;
    if (v18 < 2)
    {
      v20 = 0xFFFF;
    }
    else
    {
      v19 = a1 + 18;
      if ((v14 & 2) == 0)
        v19 = *(_QWORD *)(a1 + 32);
      v20 = *(unsigned __int16 *)(v19 + 2);
      if (v20 < 0x100)
      {
        v21 = 0;
        v22 = 2;
        goto LABEL_19;
      }
    }
    v21 = v20 - 256;
    icu::FormattedStringBuilder::insert(a2, a3, a1 + 8, 2u, v20 - 254, a6, 0, a7);
    v22 = v20 - 253;
    v14 = *(unsigned __int16 *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 20);
    v16 = v14 >> 5;
LABEL_19:
    if ((v14 & 0x8000u) == 0)
      v17 = v16;
    if (v17 <= v22)
    {
      v26 = v22 + 1;
      v25 = 0xFFFF;
    }
    else
    {
      v24 = a1 + 18;
      if ((v14 & 2) == 0)
        v24 = *(_QWORD *)(a1 + 32);
      v25 = *(unsigned __int16 *)(v24 + 2 * v22);
      v26 = v22 + 1;
      v23 = v21;
      if (v25 < 0x100)
      {
        if ((v14 & 0x8000) == 0)
          goto LABEL_26;
        goto LABEL_30;
      }
    }
    v28 = v25 - 256;
    v29 = v25 - 256 + v26;
    icu::FormattedStringBuilder::insert(a2, v21 + a3, v33, v26, v29, a6, 0, a7);
    v23 = v28 + v21;
    v26 = v29 + 1;
    v14 = *(unsigned __int16 *)(a1 + 16);
    if ((v14 & 0x8000) == 0)
    {
LABEL_26:
      if (v26 != v14 >> 5)
      {
        v27 = v14 >> 5;
LABEL_32:
        if (v27 <= v26)
        {
          v30 = 65279;
        }
        else
        {
          if ((v14 & 2) != 0)
            v31 = a1 + 18;
          else
            v31 = *(_QWORD *)(a1 + 32);
          v30 = *(unsigned __int16 *)(v31 + 2 * v26) - 256;
        }
        icu::FormattedStringBuilder::insert(a2, v23 + a3, v33, v26 + 1, v30 + v26 + 1, a6, 0, a7);
        v23 = (v30 + v23);
        goto LABEL_39;
      }
LABEL_31:
      v30 = 0;
LABEL_39:
      *a4 = v21;
      *a5 = v30;
      return v23;
    }
LABEL_30:
    v27 = *(_DWORD *)(a1 + 20);
    if (v26 != v27)
      goto LABEL_32;
    goto LABEL_31;
  }
  v23 = 0;
  *a7 = U_INTERNAL_PROGRAM_ERROR;
  return v23;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::apply(icu::number::impl::ConstantMultiFieldModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v10;
  int v11;
  void *v12;
  void (**v14)(icu::UnicodeString *__hidden);
  __int16 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = icu::FormattedStringBuilder::insert(a2, a3, (icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8), a5);
  v11 = v10;
  if (*((_BYTE *)this + 280))
  {
    v14 = off_1E2256B38;
    v15 = 2;
    v11 = icu::FormattedStringBuilder::splice(a2, v10 + a3, v10 + a4, (uint64_t)&v14, 0, 0, 0, a5) + v10;
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v14);
  }
  return icu::FormattedStringBuilder::insert(a2, v11 + a4, (icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 144), a5)+ v11;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::getPrefixLength(icu::number::impl::ConstantMultiFieldModifier *this)
{
  return icu::FormattedStringBuilder::length((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8));
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::getCodePointCount(icu::number::impl::ConstantMultiFieldModifier *this)
{
  int v2;

  v2 = icu::FormattedStringBuilder::codePointCount((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8));
  return icu::FormattedStringBuilder::codePointCount((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 144))
       + v2;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::isStrong(icu::number::impl::ConstantMultiFieldModifier *this)
{
  return *((unsigned __int8 *)this + 281);
}

BOOL icu::number::impl::ConstantMultiFieldModifier::containsField(uint64_t a1, unsigned __int8 a2)
{
  return icu::FormattedStringBuilder::containsField(a1 + 8, a2)
      || icu::FormattedStringBuilder::containsField(a1 + 144, a2);
}

__n128 icu::number::impl::ConstantMultiFieldModifier::getParameters(__n128 *this, __n128 *a2)
{
  __n128 result;

  result = this[18];
  *a2 = result;
  return result;
}

uint64_t icu::number::impl::ConstantMultiFieldModifier::semanticallyEquivalent(icu::number::impl::ConstantMultiFieldModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  uint64_t result;
  unsigned __int8 *v4;
  uint64_t v5;

  if (result)
  {
    v4 = (unsigned __int8 *)result;
    v5 = *((_QWORD *)this + 36);
    if (v5)
      return v5 == *(_QWORD *)(result + 288);
    result = icu::FormattedStringBuilder::contentEquals((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 8), (const icu::FormattedStringBuilder *)(result + 8));
    if ((_DWORD)result)
    {
      result = icu::FormattedStringBuilder::contentEquals((icu::number::impl::ConstantMultiFieldModifier *)((char *)this + 144), (const icu::FormattedStringBuilder *)(v4 + 144));
      if ((_DWORD)result)
      {
        if (*((unsigned __int8 *)this + 280) != v4[280])
          return 0;
        return *((unsigned __int8 *)this + 281) == v4[281];
      }
    }
  }
  return result;
}

icu::number::impl::CurrencySpacingEnabledModifier *icu::number::impl::CurrencySpacingEnabledModifier::CurrencySpacingEnabledModifier(icu::number::impl::CurrencySpacingEnabledModifier *this, const icu::FormattedStringBuilder *a2, const icu::FormattedStringBuilder *a3, char a4, char a5, const icu::DecimalFormatSymbols *a6, UErrorCode *a7)
{
  int v14;
  char *v15;
  int LastCodePoint;
  void *v17;
  UChar **PatternForCurrencySpacing;
  void *v19;
  void *v20;
  char *v21;
  int FirstCodePoint;
  void *v23;
  UChar **v24;
  void *v25;
  void *v26;
  icu::UnicodeString *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  _BYTE v42[200];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E22631E0;
  icu::FormattedStringBuilder::FormattedStringBuilder((uint64_t)this + 8, (uint64_t)a2);
  icu::FormattedStringBuilder::FormattedStringBuilder((uint64_t)this + 144, (uint64_t)a3);
  *((_BYTE *)this + 280) = a4;
  *((_BYTE *)this + 281) = a5;
  *((_QWORD *)this + 36) = 0;
  *(_QWORD *)this = off_1E22630B0;
  icu::UnicodeSet::UnicodeSet((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
  *((_QWORD *)this + 63) = off_1E2256B38;
  *((_WORD *)this + 256) = 2;
  icu::UnicodeSet::UnicodeSet((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
  v28 = (icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 768);
  *((_QWORD *)this + 96) = off_1E2256B38;
  *((_WORD *)this + 388) = 2;
  if ((int)icu::FormattedStringBuilder::length(a2) < 1)
    goto LABEL_7;
  v14 = icu::FormattedStringBuilder::length(a2);
  v15 = (char *)a2 + 88;
  if (*(_BYTE *)a2)
    v15 = (char *)*((_QWORD *)a2 + 11);
  if (v15[*((int *)a2 + 32) - 1 + (uint64_t)v14] == 39)
  {
    LastCodePoint = icu::FormattedStringBuilder::getLastCodePoint(a2);
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 0, 0, a7, (icu::UnicodeSet *)&v29);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v29, LastCodePoint))
    {
      icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 1, 0, a7, (icu::UnicodeSet *)v42);
      icu::UnicodeSet::operator=((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304), (const icu::UnicodeSet *)v42);
      icu::UnicodeSet::~UnicodeSet(v17, (icu::UnicodeSet *)v42);
      icu::UnicodeSet::freeze((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
      PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a6, 2, 0, (int *)a7);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v42, PatternForCurrencySpacing);
      icu::UnicodeString::operator=((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504), (icu::UnicodeString *)v42);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v42);
    }
    else
    {
      icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
      icu::UnicodeString::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504));
    }
    icu::UnicodeSet::~UnicodeSet(v20, (icu::UnicodeSet *)&v29);
  }
  else
  {
LABEL_7:
    icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304));
    icu::UnicodeString::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 504));
  }
  if ((int)icu::FormattedStringBuilder::length(a3) >= 1
    && (*(_BYTE *)a3 ? (v21 = (char *)*((_QWORD *)a3 + 11)) : (v21 = (char *)a3 + 88), v21[*((int *)a3 + 32)] == 39))
  {
    FirstCodePoint = icu::FormattedStringBuilder::getFirstCodePoint(a3);
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 0, 1, a7, (icu::UnicodeSet *)&v29);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)&v29, FirstCodePoint))
    {
      icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet((uint64_t)a6, 1, 1, a7, (icu::UnicodeSet *)v42);
      icu::UnicodeSet::operator=((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568), (const icu::UnicodeSet *)v42);
      icu::UnicodeSet::~UnicodeSet(v23, (icu::UnicodeSet *)v42);
      icu::UnicodeSet::freeze((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
      v24 = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a6, 2, 1, (int *)a7);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v42, v24);
      icu::UnicodeString::operator=(v28, (icu::UnicodeString *)v42);
      icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)v42);
    }
    else
    {
      icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
      icu::UnicodeString::setToBogus(v28);
    }
    icu::UnicodeSet::~UnicodeSet(v26, (icu::UnicodeSet *)&v29);
  }
  else
  {
    icu::UnicodeSet::setToBogus((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568));
    icu::UnicodeString::setToBogus(v28);
  }
  return this;
}

void icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, UErrorCode *a4@<X3>, icu::UnicodeSet *a5@<X8>)
{
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  icu::UnicodeSet *v16;
  void *v17;
  uint64_t *v18;
  icu::UnicodeSet *v19;
  void *v20;
  UErrorCode v21;
  uint64_t PatternForCurrencySpacing;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int32_t v26;
  int32_t v27;
  unsigned int v28;
  int v29;
  int32_t v30;
  int32_t v31;
  const icu::UnicodeSet *v32;
  _BYTE v33[64];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    goto LABEL_17;
  v10 = atomic_load(&dword_1EE009C20);
  if (v10 != 2 && icu::umtx_initImplPreInit(&dword_1EE009C20))
  {
    sub_18BDA1768(2u, (uint64_t)sub_18BD204F0);
    v13 = icu::UMemory::operator new(v12, (icu::UMemory *)0xC8, v11);
    if (v13)
    {
      v16 = (icu::UnicodeSet *)v13;
      icu::UnicodeString::UnicodeString((uint64_t)v33, (uint64_t)&unk_18BE35B96);
      icu::UnicodeSet::UnicodeSet(v16, (const icu::UnicodeString *)v33, a4);
      qword_1EE009C10 = (uint64_t)v16;
      icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v33);
    }
    else
    {
      qword_1EE009C10 = 0;
    }
    v18 = icu::UMemory::operator new(v15, (icu::UMemory *)0xC8, v14);
    if (v18)
    {
      v19 = (icu::UnicodeSet *)v18;
      icu::UnicodeString::UnicodeString((uint64_t)v33, (uint64_t)L"[[:^S:]&[:^Z:]]");
      icu::UnicodeSet::UnicodeSet(v19, (const icu::UnicodeString *)v33, a4);
      qword_1EE009C18 = (uint64_t)v19;
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v33);
      if (qword_1EE009C10 && qword_1EE009C18)
      {
        icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_1EE009C10);
        icu::UnicodeSet::freeze((icu::UnicodeSet *)qword_1EE009C18);
        v21 = *a4;
LABEL_15:
        dword_1EE009C24 = v21;
        icu::umtx_initImplPostInit(&dword_1EE009C20);
        goto LABEL_16;
      }
    }
    else
    {
      qword_1EE009C18 = 0;
    }
    v21 = U_MEMORY_ALLOCATION_ERROR;
    *a4 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_15;
  }
  if (dword_1EE009C24 >= 1)
  {
    *a4 = dword_1EE009C24;
LABEL_17:
    icu::UnicodeSet::UnicodeSet(a5);
    return;
  }
LABEL_16:
  if (*(int *)a4 >= 1)
    goto LABEL_17;
  PatternForCurrencySpacing = icu::DecimalFormatSymbols::getPatternForCurrencySpacing(a1, a2 != 0, a3 == 1, (int *)a4);
  v23 = PatternForCurrencySpacing;
  v24 = *(unsigned __int16 *)(PatternForCurrencySpacing + 8);
  v25 = (__int16)v24;
  v26 = v24 >> 5;
  if (v25 >= 0)
    v27 = v26;
  else
    v27 = *(_DWORD *)(PatternForCurrencySpacing + 12);
  if (icu::UnicodeString::doCompare(PatternForCurrencySpacing, 0, v27, (uint64_t)&unk_18BE35B96, 0, -1))
  {
    v28 = *(unsigned __int16 *)(v23 + 8);
    v29 = (__int16)v28;
    v30 = v28 >> 5;
    if (v29 >= 0)
      v31 = v30;
    else
      v31 = *(_DWORD *)(v23 + 12);
    if (icu::UnicodeString::doCompare(v23, 0, v31, (uint64_t)L"[[:^S:]&[:^Z:]]", 0, -1))
    {
      icu::UnicodeSet::UnicodeSet(a5, (const icu::UnicodeString *)v23, a4);
      return;
    }
    v32 = (const icu::UnicodeSet *)qword_1EE009C18;
  }
  else
  {
    v32 = (const icu::UnicodeSet *)qword_1EE009C10;
  }
  icu::UnicodeSet::UnicodeSet(a5, v32);
}

icu::UnicodeString *icu::number::impl::CurrencySpacingEnabledModifier::getInsertString@<X0>(uint64_t a1@<X0>, int a2@<W1>, int *a3@<X2>, icu::UnicodeString *a4@<X8>)
{
  UChar **PatternForCurrencySpacing;

  PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing(a1, 2, a2 == 1, a3);
  return icu::UnicodeString::UnicodeString(a4, PatternForCurrencySpacing);
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::apply(icu::number::impl::CurrencySpacingEnabledModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v10;
  int v11;
  int v12;

  if (a4 <= a3)
  {
    v11 = 0;
  }
  else
  {
    if ((*((_BYTE *)this + 336) & 1) != 0
      || (v10 = icu::FormattedStringBuilder::codePointAt(a2, a3),
          !icu::UnicodeSet::contains((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 304), v10)))
    {
      v11 = 0;
    }
    else
    {
      v11 = icu::FormattedStringBuilder::insert(a2, a3, (uint64_t)this + 504, 0, 0, a5);
    }
    if ((*((_BYTE *)this + 600) & 1) == 0)
    {
      v12 = icu::FormattedStringBuilder::codePointBefore(a2, a4);
      if (icu::UnicodeSet::contains((icu::number::impl::CurrencySpacingEnabledModifier *)((char *)this + 568), v12))v11 += icu::FormattedStringBuilder::insert(a2, v11 + a4, (uint64_t)this + 768, 0, 0, a5);
    }
  }
  return icu::number::impl::ConstantMultiFieldModifier::apply(this, a2, a3, v11 + a4, a5) + v11;
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacing(icu::number::impl::CurrencySpacingEnabledModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, int a5, uint64_t a6, UErrorCode *a7, UErrorCode *a8)
{
  uint64_t v13;
  int v14;
  int v15;

  v13 = 0;
  v14 = a3 + (_DWORD)a2;
  v15 = a4 - v14;
  if (a3 >= 1 && v15 >= 1)
    v13 = icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix(this, v14, 0, a6, a7);
  if (a5 >= 1 && v15 >= 1)
    return icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix(this, (int)v13 + a4, 1, a6, a7)+ v13;
  return v13;
}

uint64_t icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacingAffix(icu::FormattedStringBuilder *this, int a2, int a3, uint64_t a4, UErrorCode *a5)
{
  char *v10;
  int v11;
  char *v12;
  int v13;
  void *v14;
  int v15;
  uint64_t v16;
  int v17;
  void *v18;
  UChar **PatternForCurrencySpacing;
  void *v20;
  _OWORD v22[12];
  uint64_t v23;
  _OWORD v24[12];
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v12 = (char *)this + 88;
    if (*(_BYTE *)this)
      v12 = (char *)*((_QWORD *)this + 11);
    if (v12[*((int *)this + 32) - 1 + (uint64_t)a2] == 39)
    {
      v11 = icu::FormattedStringBuilder::codePointBefore(this, a2);
      goto LABEL_11;
    }
    return 0;
  }
  if (*(_BYTE *)this)
    v10 = (char *)*((_QWORD *)this + 11);
  else
    v10 = (char *)this + 88;
  if (v10[*((int *)this + 32) + (uint64_t)a2] != 39)
    return 0;
  v11 = icu::FormattedStringBuilder::codePointAt(this, a2);
LABEL_11:
  v13 = v11;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(a4, 0, a3, a5, (icu::UnicodeSet *)v24);
  if (icu::UnicodeSet::contains((icu::UnicodeSet *)v24, v13))
  {
    if (a3)
      v15 = icu::FormattedStringBuilder::codePointBefore(this, a2);
    else
      v15 = icu::FormattedStringBuilder::codePointAt(this, a2);
    v17 = v15;
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    icu::number::impl::CurrencySpacingEnabledModifier::getUnicodeSet(a4, 1, a3, a5, (icu::UnicodeSet *)v22);
    if (icu::UnicodeSet::contains((icu::UnicodeSet *)v22, v17))
    {
      memset(v26, 0, sizeof(v26));
      PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing(a4, 2, a3 == 1, (int *)a5);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v26, PatternForCurrencySpacing);
      v16 = icu::FormattedStringBuilder::insert(this, a2, (uint64_t)v26, 0, 0, a5);
      icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v26);
    }
    else
    {
      v16 = 0;
    }
    icu::UnicodeSet::~UnicodeSet(v18, (icu::UnicodeSet *)v22);
  }
  else
  {
    v16 = 0;
  }
  icu::UnicodeSet::~UnicodeSet(v14, (icu::UnicodeSet *)v24);
  return v16;
}

_QWORD *sub_18BD201CC(_QWORD *a1)
{
  icu::UnicodeString *v2;
  icu::UObject *v3;

  *a1 = off_1E2263160;
  v2 = (icu::UnicodeString *)(a1 + 2);
  a1[1] = &unk_1E22631B8;
  v3 = (icu::UObject *)(a1 + 1);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 10));
  icu::UnicodeString::~UnicodeString(v2);
  icu::UObject::~UObject(v3);
  return a1;
}

void sub_18BD20228(_QWORD *a1)
{
  icu::UnicodeString *v2;
  icu::UObject *v3;
  void *v4;

  *a1 = off_1E2263160;
  v2 = (icu::UnicodeString *)(a1 + 2);
  a1[1] = &unk_1E22631B8;
  v3 = (icu::UObject *)(a1 + 1);
  icu::UnicodeString::~UnicodeString(&unk_1E22631B8, (icu::UnicodeString *)(a1 + 10));
  icu::UnicodeString::~UnicodeString(v4, v2);
  icu::UObject::~UObject(v3);
  icu::UMemory::operator delete(a1);
}

void sub_18BD20284(uint64_t a1)
{
  *(_QWORD *)(a1 - 8) = off_1E2263160;
  *(_QWORD *)a1 = &unk_1E22631B8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::UObject::~UObject((icu::UObject *)a1);
}

void sub_18BD202C4(uint64_t a1)
{
  void *v2;
  icu::UnicodeString *v3;
  void *v4;

  *(_QWORD *)(a1 - 8) = off_1E2263160;
  v2 = (void *)(a1 - 8);
  *(_QWORD *)a1 = &unk_1E22631B8;
  v3 = (icu::UnicodeString *)(a1 + 8);
  icu::UnicodeString::~UnicodeString(&unk_1E22631B8, (icu::UnicodeString *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v4, v3);
  icu::UObject::~UObject((icu::UObject *)a1);
  icu::UMemory::operator delete(v2);
}

_QWORD *sub_18BD20320(_QWORD *a1)
{
  icu::FormattedStringBuilder *v2;

  *a1 = off_1E22631E0;
  v2 = (icu::FormattedStringBuilder *)(a1 + 1);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 18));
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  return a1;
}

void sub_18BD20360(_QWORD *a1)
{
  icu::FormattedStringBuilder *v2;

  *a1 = off_1E22631E0;
  v2 = (icu::FormattedStringBuilder *)(a1 + 1);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 18));
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  icu::UMemory::operator delete(a1);
}

_QWORD *sub_18BD203A0(_QWORD *a1)
{
  *a1 = off_1E2262FE8;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 1));
  return a1;
}

void sub_18BD203D0(_QWORD *a1)
{
  *a1 = off_1E2262FE8;
  icu::UnicodeString::~UnicodeString(off_1E2262FE8, (icu::UnicodeString *)(a1 + 1));
  icu::UMemory::operator delete(a1);
}

_QWORD *sub_18BD20400(_QWORD *a1)
{
  icu::FormattedStringBuilder *v2;

  *a1 = off_1E22630B0;
  v2 = (icu::FormattedStringBuilder *)(a1 + 18);
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 96));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 71));
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 63));
  icu::UnicodeSet::~UnicodeSet((icu::UnicodeSet *)(a1 + 38));
  *a1 = off_1E22631E0;
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 1));
  return a1;
}

void sub_18BD20478(_QWORD *a1)
{
  icu::FormattedStringBuilder *v2;
  void *v3;
  void *v4;
  void *v5;

  *a1 = off_1E22630B0;
  v2 = (icu::FormattedStringBuilder *)(a1 + 18);
  icu::UnicodeString::~UnicodeString(off_1E22630B0, (icu::UnicodeString *)(a1 + 96));
  icu::UnicodeSet::~UnicodeSet(v3, (icu::UnicodeSet *)(a1 + 71));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 63));
  icu::UnicodeSet::~UnicodeSet(v5, (icu::UnicodeSet *)(a1 + 38));
  *a1 = off_1E22631E0;
  icu::FormattedStringBuilder::~FormattedStringBuilder(v2);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)(a1 + 1));
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BD204F0@<X0>(void *a1@<X8>)
{
  void *v1;
  void *v2;

  if (qword_1EE009C10)
  {
    v1 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_1EE009C10);
    icu::UMemory::operator delete(v1);
  }
  qword_1EE009C10 = 0;
  if (qword_1EE009C18)
  {
    v2 = icu::UnicodeSet::~UnicodeSet(a1, (icu::UnicodeSet *)qword_1EE009C18);
    icu::UMemory::operator delete(v2);
  }
  qword_1EE009C18 = 0;
  atomic_store(0, &dword_1EE009C20);
  return 1;
}

icu::number::Scale *icu::number::Scale::Scale(icu::number::Scale *this, int a2, icu::number::impl::DecNum *a3)
{
  icu::number::impl::DecNum *v4;
  _BYTE *v5;
  void *v6;

  *(_DWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_DWORD *)this + 4) = 0;
  if (a3)
  {
    icu::number::impl::DecNum::normalize(a3);
    v4 = (icu::number::impl::DecNum *)*((_QWORD *)this + 1);
    if (**(_DWORD **)v4 == 1
      && *(_BYTE *)(*(_QWORD *)v4 + 9) == 1
      && (icu::number::impl::DecNum::isNegative(v4) & 1) == 0)
    {
      v5 = (_BYTE *)*((_QWORD *)this + 1);
      v6 = *(void **)v5;
      *(_DWORD *)this += *(_DWORD *)(*(_QWORD *)v5 + 4);
      if (v5[12])
        uprv_free(v6);
      icu::UMemory::operator delete(v5);
      *((_QWORD *)this + 1) = 0;
    }
  }
  return this;
}

icu::number::Scale *icu::number::Scale::Scale(icu::number::Scale *this, const icu::number::Scale *a2)
{
  icu::number::impl::DecNum *v4;
  UErrorCode v6;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 1))
  {
    v6 = U_ZERO_ERROR;
    v4 = (icu::number::impl::DecNum *)icu::UMemory::operator new((icu::UMemory *)0x60, (unint64_t)a2);
    if (v4)
      v4 = (icu::number::impl::DecNum *)icu::number::impl::DecNum::DecNum(v4, *((const icu::number::impl::DecNum **)a2 + 1), &v6);
    *((_QWORD *)this + 1) = v4;
  }
  return this;
}

uint64_t icu::number::Scale::operator=(uint64_t a1, unint64_t a2)
{
  icu::number::impl::DecNum *v4;
  UErrorCode v6;

  if (a1 != a2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    if (*(_QWORD *)(a2 + 8))
    {
      v6 = U_ZERO_ERROR;
      v4 = (icu::number::impl::DecNum *)icu::UMemory::operator new((icu::UMemory *)0x60, a2);
      if (v4)
        v4 = (icu::number::impl::DecNum *)icu::number::impl::DecNum::DecNum(v4, *(const icu::number::impl::DecNum **)(a2 + 8), &v6);
      *(_QWORD *)(a1 + 8) = v4;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  }
  return a1;
}

uint64_t icu::number::Scale::Scale(uint64_t result, uint64_t a2)
{
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

{
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

uint64_t icu::number::Scale::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 12))
      uprv_free(*(void **)v4);
    icu::UMemory::operator delete((void *)v4);
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  return a1;
}

void icu::number::Scale::~Scale(icu::number::Scale *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 12))
      uprv_free(*(void **)v1);
    icu::UMemory::operator delete((void *)v1);
  }
}

void icu::number::Scale::none(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

uint64_t icu::number::Scale::powerOfTen@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = this;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return this;
}

uint64_t *icu::number::Scale::byDecimal@<X0>(const char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  icu::number::impl::DecNum *v6;
  icu::number::impl::DecNum *v7;
  int v8;
  icu::number::impl::DecNum *v10;
  int v11;

  v3 = a2;
  v11 = 0;
  v6 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a3, (icu::UMemory *)0x60, a2);
  if (!v6)
  {
    v10 = 0;
    v8 = 7;
    v11 = 7;
    goto LABEL_5;
  }
  v7 = v6;
  v10 = icu::number::impl::DecNum::DecNum(v6);
  icu::number::impl::DecNum::setTo(v10, a1, v3, (UErrorCode *)&v11);
  v8 = v11;
  if (v11 >= 1)
  {
LABEL_5:
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = v8;
    return sub_18BBCBB54((uint64_t *)&v10);
  }
  v10 = 0;
  icu::number::Scale::Scale((icu::number::Scale *)a3, 0, v7);
  return sub_18BBCBB54((uint64_t *)&v10);
}

uint64_t *icu::number::Scale::byDouble@<X0>(double a1@<D0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  icu::number::impl::DecNum *v6;
  icu::number::impl::DecNum *v7;
  UErrorCode v8;
  icu::number::impl::DecNum *v10;
  UErrorCode v11;

  v11 = U_ZERO_ERROR;
  v6 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a3, (icu::UMemory *)0x60, a2);
  if (!v6)
  {
    v10 = 0;
    v8 = U_MEMORY_ALLOCATION_ERROR;
    v11 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  v7 = v6;
  v10 = icu::number::impl::DecNum::DecNum(v6);
  icu::number::impl::DecNum::setTo(v10, a1, &v11);
  v8 = v11;
  if (v11 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_5:
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = v8;
    return sub_18BBCBB54((uint64_t *)&v10);
  }
  v10 = 0;
  icu::number::Scale::Scale((icu::number::Scale *)a3, 0, v7);
  return sub_18BBCBB54((uint64_t *)&v10);
}

uint64_t *icu::number::Scale::byDoubleAndPowerOfTen@<X0>(icu::number::Scale *this@<X0>, double a2@<D0>, unint64_t a3@<X1>, uint64_t a4@<X8>)
{
  int v4;
  icu::number::impl::DecNum *v7;
  icu::number::impl::DecNum *v8;
  UErrorCode v9;
  icu::number::impl::DecNum *v11;
  UErrorCode v12;

  v4 = (int)this;
  v12 = U_ZERO_ERROR;
  v7 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)a4, (icu::UMemory *)0x60, a3);
  if (!v7)
  {
    v11 = 0;
    v9 = U_MEMORY_ALLOCATION_ERROR;
    v12 = U_MEMORY_ALLOCATION_ERROR;
    goto LABEL_5;
  }
  v8 = v7;
  v11 = icu::number::impl::DecNum::DecNum(v7);
  icu::number::impl::DecNum::setTo(v11, a2, &v12);
  v9 = v12;
  if (v12 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
LABEL_5:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = v9;
    return sub_18BBCBB54((uint64_t *)&v11);
  }
  v11 = 0;
  icu::number::Scale::Scale((icu::number::Scale *)a4, v4, v8);
  return sub_18BBCBB54((uint64_t *)&v11);
}

void icu::number::Scale::applyTo(icu::number::Scale *this, icu::number::impl::DecimalQuantity *a2)
{
  const icu::number::impl::DecNum *v4;
  UErrorCode v5;

  icu::number::impl::DecimalQuantity::adjustMagnitude(a2, *(_DWORD *)this);
  v4 = (const icu::number::impl::DecNum *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = U_ZERO_ERROR;
    icu::number::impl::DecimalQuantity::multiplyBy(a2, v4, &v5);
  }
}

void icu::number::Scale::applyReciprocalTo(icu::number::Scale *this, icu::number::impl::DecimalQuantity *a2)
{
  const icu::number::impl::DecNum *v4;
  UErrorCode v5;

  icu::number::impl::DecimalQuantity::adjustMagnitude(a2, -*(_DWORD *)this);
  v4 = (const icu::number::impl::DecNum *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = U_ZERO_ERROR;
    icu::number::impl::DecimalQuantity::divideBy(a2, v4, &v5);
  }
}

uint64_t icu::number::impl::MultiplierFormatHandler::setAndChain(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = icu::number::Scale::operator=(a1 + 8, a2);
  *(_QWORD *)(a1 + 32) = a3;
  return result;
}

void icu::number::impl::MultiplierFormatHandler::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  icu::number::Scale::applyTo((icu::number::Scale *)(a1 + 8), a2);
}

_QWORD *sub_18BD20AB0(_QWORD *a1)
{
  *a1 = off_1E22632A0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 1));
  return a1;
}

void sub_18BD20AE0(_QWORD *a1)
{
  *a1 = off_1E22632A0;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 1));
  icu::UMemory::operator delete(a1);
}

uint64_t icu::number::Notation::scientific(icu::number::Notation *this)
{
  uint64_t v2;

  HIDWORD(v2) = 65537;
  return v2;
}

uint64_t icu::number::Notation::engineering(icu::number::Notation *this)
{
  uint64_t v2;

  HIDWORD(v2) = 65539;
  return v2;
}

uint64_t icu::number::ScientificNotation::ScientificNotation(uint64_t result, unsigned __int8 a2, int a3, unsigned __int16 a4, uint64_t a5)
{
  uint64_t v5;

  v5 = 256;
  if (!a3)
    v5 = 0;
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 4) = ((unint64_t)a4 << 16) | (a5 << 32) | v5 & 0xFFFFFFFFFFFFFF00 | a2;
  return result;
}

{
  uint64_t v5;

  v5 = 256;
  if (!a3)
    v5 = 0;
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 4) = ((unint64_t)a4 << 16) | (a5 << 32) | v5 & 0xFFFFFFFFFFFFFF00 | a2;
  return result;
}

uint64_t icu::number::Notation::compactShort(icu::number::Notation *this)
{
  unsigned int v2;

  return v2;
}

uint64_t icu::number::Notation::compactLong(icu::number::Notation *this)
{
  uint64_t v2;

  HIDWORD(v2) = 1;
  return v2;
}

uint64_t icu::number::Notation::simple(icu::number::Notation *this)
{
  unsigned int v2;

  return v2;
}

uint64_t icu::number::ScientificNotation::withMinExponentDigits(icu::number::ScientificNotation *this, int a2)
{
  int v2;
  uint64_t v4;

  if ((a2 - 1) > 0x3E6)
  {
    HIDWORD(v4) = 65810;
    v2 = 3;
  }
  else
  {
    v2 = 0;
    HIDWORD(v4) = (a2 << 16) | *((unsigned __int16 *)this + 2);
  }
  LODWORD(v4) = v2;
  return v4;
}

uint64_t icu::number::ScientificNotation::withExponentSignDisplay(uint64_t a1)
{
  uint64_t v2;

  HIDWORD(v2) = *(_DWORD *)(a1 + 4);
  return v2;
}

uint64_t icu::number::FormattedNumber::FormattedNumber(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2263300;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2263300;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::number::FormattedNumber::~FormattedNumber(icu::number::FormattedNumber *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2263300;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2263300;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2263300;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::number::FormattedNumber::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::number::FormattedNumber::toString(icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(*((_QWORD *)this + 1));
}

void icu::number::FormattedNumber::toTempString(icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 24))(*((_QWORD *)this + 1));
}

icu::Appendable *icu::number::FormattedNumber::appendTo(icu::number::FormattedNumber *this, icu::Appendable *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return a2;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(_QWORD, icu::Appendable *))(*(_QWORD *)v4 + 32))(*((_QWORD *)this + 1), a2);
}

uint64_t icu::number::FormattedNumber::nextPosition(icu::number::FormattedNumber *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return 0;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0;
  }
  return (*(uint64_t (**)(_QWORD, icu::ConstrainedFieldPosition *))(*(_QWORD *)v4 + 40))(*((_QWORD *)this + 1), a2);
}

void icu::number::FormattedNumber::toDecimalNumber(icu::number::FormattedNumber *this, icu::ByteSink *a2, UErrorCode *a3)
{
  void *v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(int *)a3 <= 0)
  {
    if (*((_QWORD *)this + 1))
    {
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      *(_OWORD *)v6 = 0u;
      v7 = 0u;
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v6);
      icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(*((_QWORD *)this + 1) + 304), (icu::number::impl::DecNum *)v6, a3);
      icu::number::impl::DecNum::toString((icu::number::impl::DecNum *)v6, a2, a3);
      if (BYTE4(v6[1]))
        uprv_free(v6[0]);
    }
    else
    {
      *a3 = *((UErrorCode *)this + 4);
    }
  }
}

void icu::number::FormattedNumber::getAllFieldPositionsImpl(icu::FormattedValueStringBuilderImpl **this, icu::FieldPositionIteratorHandler *a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (this[1])
      icu::FormattedValueStringBuilderImpl::getAllFieldPositions(this[1], a2, a3);
    else
      *a3 = *((UErrorCode *)this + 4);
  }
}

uint64_t icu::number::FormattedNumber::getOutputUnit@<X0>(icu::number::FormattedNumber *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;

  if (*(int *)a2 >= 1)
    return icu::MeasureUnit::MeasureUnit(a3);
  v6 = *((_QWORD *)this + 1);
  if (!v6)
  {
    *a2 = *((UErrorCode *)this + 4);
    return icu::MeasureUnit::MeasureUnit(a3);
  }
  return icu::MeasureUnit::MeasureUnit(a3, v6 + 376);
}

uint64_t icu::number::FormattedNumber::getNounClass(icu::number::FormattedNumber *this, UErrorCode *a2)
{
  uint64_t v3;

  if (*(int *)a2 > 0)
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    return 0;
  }
  return udispopt_fromNounClassIdentifier(*(char **)(v3 + 400));
}

icu::number::impl::DecimalQuantity *icu::number::FormattedNumber::getDecimalQuantity(icu::number::impl::DecimalQuantity *this, icu::number::impl::DecimalQuantity *a2, UErrorCode *a3)
{
  uint64_t v3;

  if (*(int *)a3 <= 0)
  {
    v3 = *((_QWORD *)this + 1);
    if (v3)
      return icu::number::impl::DecimalQuantity::operator=(a2, v3 + 304);
    else
      *a3 = *((UErrorCode *)this + 4);
  }
  return this;
}

void icu::number::impl::UFormattedNumberData::~UFormattedNumberData(void **this)
{
  *this = off_1E2263340;
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)(this + 47));
  icu::number::impl::DecimalQuantity::~DecimalQuantity(this + 38);
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(this);
}

{
  void *v1;

  icu::number::impl::UFormattedNumberData::~UFormattedNumberData(this);
  icu::UMemory::operator delete(v1);
}

uint64_t icu::number::FormattedNumberRange::FormattedNumberRange(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2263380;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)result = off_1E2263380;
  *(_QWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 27;
  return result;
}

void icu::number::FormattedNumberRange::~FormattedNumberRange(icu::number::FormattedNumberRange *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2263380;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2263380;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2263380;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 1) = 0;
  icu::FormattedValue::~FormattedValue(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::number::FormattedNumberRange::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 27;
  return a1;
}

void icu::number::FormattedNumberRange::toString(icu::number::FormattedNumberRange *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 16))(*((_QWORD *)this + 1));
}

void icu::number::FormattedNumberRange::toTempString(icu::number::FormattedNumberRange *this@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  if (*(int *)a2 >= 1)
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
LABEL_3:
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
    return;
  }
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    goto LABEL_3;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 24))(*((_QWORD *)this + 1));
}

icu::Appendable *icu::number::FormattedNumberRange::appendTo(icu::number::FormattedNumberRange *this, icu::Appendable *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return a2;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return a2;
  }
  return (icu::Appendable *)(*(uint64_t (**)(_QWORD, icu::Appendable *))(*(_QWORD *)v4 + 32))(*((_QWORD *)this + 1), a2);
}

uint64_t icu::number::FormattedNumberRange::nextPosition(icu::number::FormattedNumberRange *this, icu::ConstrainedFieldPosition *a2, UErrorCode *a3)
{
  uint64_t v4;

  if (*(int *)a3 > 0)
    return 0;
  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    *a3 = *((UErrorCode *)this + 4);
    return 0;
  }
  return (*(uint64_t (**)(_QWORD, icu::ConstrainedFieldPosition *))(*(_QWORD *)v4 + 40))(*((_QWORD *)this + 1), a2);
}

void icu::number::FormattedNumberRange::getDecimalNumbers(icu::number::FormattedNumberRange *this, icu::ByteSink *a2, icu::ByteSink *a3, UErrorCode *a4)
{
  icu::number::impl::DecNum *v8;
  icu::number::impl::DecNum *v9;
  void *v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 <= 0)
  {
    if (*((_QWORD *)this + 1))
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      *(_OWORD *)v16 = 0u;
      v17 = 0u;
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v16);
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      *(_OWORD *)v10 = 0u;
      v11 = 0u;
      icu::number::impl::DecNum::DecNum((icu::number::impl::DecNum *)v10);
      v8 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(*((_QWORD *)this + 1) + 304), (icu::number::impl::DecNum *)v16, a4);
      icu::number::impl::DecNum::toString(v8, a2, a4);
      v9 = icu::number::impl::DecimalQuantity::toDecNum((icu::number::impl::DecimalQuantity *)(*((_QWORD *)this + 1) + 376), (icu::number::impl::DecNum *)v10, a4);
      icu::number::impl::DecNum::toString(v9, a3, a4);
      if (BYTE4(v10[1]))
        uprv_free(v10[0]);
      if (BYTE4(v16[1]))
        uprv_free(v16[0]);
    }
    else
    {
      *a4 = *((UErrorCode *)this + 4);
    }
  }
}

uint64_t icu::number::FormattedNumberRange::getIdentityResult(icu::number::FormattedNumberRange *this, UErrorCode *a2)
{
  uint64_t v3;

  if (*(int *)a2 > 0)
    return 2;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
  {
    *a2 = *((UErrorCode *)this + 4);
    return 2;
  }
  return *(unsigned int *)(v3 + 448);
}

uint64_t icu::number::FormattedNumberRange::getData(icu::number::FormattedNumberRange *this, UErrorCode *a2)
{
  uint64_t result;

  if (*(int *)a2 > 0)
    return 0;
  result = *((_QWORD *)this + 1);
  if (!result)
    *a2 = *((UErrorCode *)this + 4);
  return result;
}

void sub_18BD21584(void **a1)
{
  *a1 = off_1E22633C0;
  icu::number::impl::DecimalQuantity::~DecimalQuantity(a1 + 47);
  icu::number::impl::DecimalQuantity::~DecimalQuantity(a1 + 38);
  icu::FormattedValueStringBuilderImpl::~FormattedValueStringBuilderImpl(a1);
}

void sub_18BD215C4(void **a1)
{
  void *v1;

  sub_18BD21584(a1);
  icu::UMemory::operator delete(v1);
}

_DWORD *icu::number::impl::Padder::Padder(_DWORD *result, int a2, int a3, int a4)
{
  *result = a3;
  result[1] = a2;
  result[2] = a4;
  return result;
}

{
  *result = a3;
  result[1] = a2;
  result[2] = a4;
  return result;
}

_DWORD *icu::number::impl::Padder::Padder(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

uint64_t icu::number::impl::Padder::none(icu::number::impl::Padder *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t icu::number::impl::Padder::codePoints(unsigned int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 < 0)
    v2 = 65810;
  else
    v2 = a1;
  if (a2 < 0)
    v3 = 4294967293;
  else
    v3 = a2;
  return v3 | (v2 << 32);
}

uint64_t icu::number::impl::Padder::forProperties(icu::number::impl::Padder *this, const icu::number::impl::DecimalFormatProperties *a2)
{
  unsigned int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *((unsigned __int16 *)this + 200);
  v4 = (__int16)v3;
  LODWORD(v5) = v3 >> 5;
  if (v4 >= 0)
    v5 = v5;
  else
    v5 = *((unsigned int *)this + 101);
  if ((int)v5 < 1)
    v6 = 0x2000000000;
  else
    v6 = (_QWORD)icu::UnicodeString::char32At((uint64_t *)v5, (icu::number::impl::Padder *)((char *)this + 392), 0) << 32;
  return v6 | *((unsigned int *)this + 18);
}

uint64_t icu::number::impl::Padder::padAndApply(icu::number::impl::Padder *this, const icu::number::impl::Modifier *a2, const icu::number::impl::Modifier *a3, icu::FormattedStringBuilder *a4, uint64_t a5, uint64_t a6, UErrorCode *a7)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v32;
  int v33;

  v14 = (*(uint64_t (**)(const icu::number::impl::Modifier *))(*(_QWORD *)a2 + 32))(a2);
  v15 = (*(uint64_t (**)(const icu::number::impl::Modifier *))(*(_QWORD *)a3 + 32))(a3);
  v16 = *(_DWORD *)this;
  v17 = v15 + v14 + icu::FormattedStringBuilder::codePointCount(a4);
  v18 = v16 - v17;
  if (v16 - v17 <= 0)
  {
    v23 = (*(uint64_t (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)a2 + 16))(a2, a4, a5, a6, a7);
    return (*(unsigned int (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, _QWORD, UErrorCode *))(*(_QWORD *)a3 + 16))(a3, a4, a5, (v23 + a6), a7)+ v23;
  }
  v32 = v17;
  v33 = v16;
  v21 = (char *)this + 4;
  v19 = *((_DWORD *)this + 1);
  v20 = *((_DWORD *)v21 + 1);
  if (v20 == 1)
  {
    v25 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a5, v19, 0, a7);
      --v25;
    }
    while (v25);
  }
  else
  {
    if (v20 != 2)
    {
      v26 = 0;
      goto LABEL_12;
    }
    v22 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a6, v19, 0, a7);
      --v22;
    }
    while (v22);
  }
  v26 = v18 << ((v19 & 0xFFFF0000) != 0);
LABEL_12:
  v27 = (*(uint64_t (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, _QWORD, UErrorCode *))(*(_QWORD *)a2 + 16))(a2, a4, a5, (v26 + a6), a7)+ v26;
  v24 = (*(unsigned int (**)(const icu::number::impl::Modifier *, icu::FormattedStringBuilder *, uint64_t, _QWORD, UErrorCode *))(*(_QWORD *)a3 + 16))(a3, a4, a5, (v27 + a6), a7)+ v27;
  if (v20 == 3)
  {
    v29 = v24 + a6;
    v30 = v18;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, v29, v19, 0, a7);
      --v30;
    }
    while (v30);
    return (v24 + (v18 << ((v19 & 0xFFFF0000) != 0)));
  }
  if (!v20)
  {
    v28 = v33 - v32;
    do
    {
      icu::FormattedStringBuilder::insertCodePoint(a4, a5, v19, 0, a7);
      --v28;
    }
    while (v28);
    return (v24 + (v18 << ((v19 & 0xFFFF0000) != 0)));
  }
  return v24;
}

icu::number::impl::MutablePatternModifier *icu::number::impl::MutablePatternModifier::MutablePatternModifier(icu::number::impl::MutablePatternModifier *this, char a2)
{
  *(_QWORD *)this = off_1E22634A0;
  *((_QWORD *)this + 1) = &unk_1E2263508;
  *((_QWORD *)this + 2) = &unk_1E2263560;
  *((_BYTE *)this + 24) = a2;
  icu::CurrencyUnit::CurrencyUnit((icu::number::impl::MutablePatternModifier *)((char *)this + 80));
  *((_QWORD *)this + 14) = (char *)this + 125;
  *((_DWORD *)this + 30) = 40;
  *((_WORD *)this + 62) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_QWORD *)this + 22) = off_1E2256B38;
  *((_WORD *)this + 92) = 2;
  *((_QWORD *)this + 30) = off_1E2256B38;
  *((_WORD *)this + 124) = 2;
  *((_QWORD *)this + 41) = off_1E2256B38;
  *((_WORD *)this + 168) = 2;
  return this;
}

uint64_t icu::number::impl::MutablePatternModifier::setPatternInfo(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)(result + 32) = a2;
  *(_BYTE *)(result + 40) = a3;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::setPatternAttributes(uint64_t result, int a2, char a3, char a4)
{
  *(_DWORD *)(result + 44) = a2;
  *(_BYTE *)(result + 48) = a3;
  *(_BYTE *)(result + 49) = a4;
  return result;
}

void icu::number::impl::MutablePatternModifier::setSymbols(uint64_t a1, uint64_t a2, const UChar *a3, int a4, uint64_t a5, UErrorCode *a6)
{
  void *v11;
  void *v12;
  UChar v13[16];
  _BYTE v14[224];
  _BYTE v15[8];
  _BYTE v16[32];
  void *v17;
  char v18;
  _BYTE v19[64];
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 56) = a2;
  icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v13, a3);
  icu::Locale::Locale((icu::Locale *)v14, a2 + 1936);
  icu::number::impl::CurrencySymbols::CurrencySymbols((uint64_t)v15, v13, (uint64_t)v14, a2, a6);
  icu::CurrencyUnit::operator=(a1 + 80, (unint64_t)v16);
  icu::CharString::operator=(a1 + 112, (uint64_t)&v17);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 176), (icu::UnicodeString *)v19);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 240), (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v19);
  if (v18)
    uprv_free(v17);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v16);
  icu::Locale::~Locale((icu::Locale *)v14);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v13);
  *(_DWORD *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 304) = a5;
}

uint64_t icu::number::impl::MutablePatternModifier::setNumberProperties(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(result + 312) = a2;
  *(_DWORD *)(result + 316) = a3;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::needsPlurals(icu::number::impl::MutablePatternModifier *this)
{
  int v2;

  v2 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4), 4294967288, &v2);
}

uint64_t *icu::number::impl::MutablePatternModifier::createImmutableForPlural@<X0>(icu::number::impl::MutablePatternModifier *a1@<X0>, int a2@<W1>, UErrorCode *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *result;

  *a4 = off_1E2262F80;
  *((_DWORD *)a1 + 78) = 3;
  *((_DWORD *)a1 + 79) = a2;
  a4[4] = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 1;
  *((_DWORD *)a1 + 79) = a2;
  a4[2] = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 2;
  *((_DWORD *)a1 + 79) = a2;
  a4[3] = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  *((_DWORD *)a1 + 78) = 0;
  *((_DWORD *)a1 + 79) = a2;
  result = icu::number::impl::MutablePatternModifier::createConstantModifier(a1, a3);
  a4[1] = result;
  return result;
}

uint64_t *icu::number::impl::MutablePatternModifier::createConstantModifier(icu::number::impl::MutablePatternModifier *this, UErrorCode *a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  char v8;
  _OWORD v10[8];
  uint64_t v11;
  _OWORD v12[8];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v12);
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::FormattedStringBuilder::FormattedStringBuilder((icu::FormattedStringBuilder *)v10);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::FormattedStringBuilder *)v12, 0, (uint64_t)this + 16, *((_BYTE *)this + 40), a2);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::FormattedStringBuilder *)v10, 0, (uint64_t)this + 16, *((_BYTE *)this + 40), a2);
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4)))
  {
    v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x340, v4);
    if (v6)
    {
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4));
      icu::number::impl::CurrencySpacingEnabledModifier::CurrencySpacingEnabledModifier((icu::number::impl::CurrencySpacingEnabledModifier *)v6, (const icu::FormattedStringBuilder *)v12, (const icu::FormattedStringBuilder *)v10, v7 != 1, *((_BYTE *)this + 24), *((const icu::DecimalFormatSymbols **)this + 7), a2);
    }
  }
  else
  {
    v6 = icu::UMemory::operator new(v5, (icu::UMemory *)0x130, v4);
    if (v6)
    {
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4));
      sub_18BD2291C((uint64_t)v6, (uint64_t)v12, (uint64_t)v10, v8 ^ 1, *((_BYTE *)this + 24));
    }
  }
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v10);
  icu::FormattedStringBuilder::~FormattedStringBuilder((icu::FormattedStringBuilder *)v12);
  return v6;
}

uint64_t *icu::number::impl::MutablePatternModifier::createImmutable@<X0>(icu::number::impl::MutablePatternModifier *this@<X0>, UErrorCode *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD v16[5];
  _QWORD v17[5];
  int v18;

  result = icu::UMemory::operator new(a3, (icu::UMemory *)0x148, (unint64_t)a2);
  if (!result)
  {
    *a2 = U_MEMORY_ALLOCATION_ERROR;
    return result;
  }
  v6 = (uint64_t)result;
  *(_OWORD *)(result + 31) = 0u;
  *(_OWORD *)(result + 29) = 0u;
  *(_OWORD *)(result + 27) = 0u;
  *(_OWORD *)(result + 25) = 0u;
  *(_OWORD *)(result + 23) = 0u;
  *(_OWORD *)(result + 21) = 0u;
  *(_OWORD *)(result + 19) = 0u;
  *(_OWORD *)(result + 17) = 0u;
  *(_OWORD *)(result + 15) = 0u;
  *(_OWORD *)(result + 13) = 0u;
  *(_OWORD *)(result + 11) = 0u;
  *(_OWORD *)(result + 9) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 37) = 0u;
  *(_OWORD *)(result + 39) = 0u;
  *(_OWORD *)(result + 33) = 0u;
  *(_OWORD *)(result + 35) = 0u;
  *result = (uint64_t)&unk_1E22636C0;
  v7 = 1;
  *(_OWORD *)(result + 3) = 0u;
  do
  {
    v8 = &result[v7];
    *v8 = (uint64_t)off_1E2262F80;
    *(_OWORD *)(v8 + 1) = 0uLL;
    *(_OWORD *)(v8 + 3) = 0uLL;
    v7 += 5;
  }
  while (v8 + 5 != result + 41);
  v18 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4), 4294967288, &v18))
  {
    for (i = 0; i != 6; ++i)
    {
      v10 = dword_18BE28B48[i];
      icu::number::impl::MutablePatternModifier::createImmutableForPlural(this, v10, a2, v17);
      icu::number::impl::AdoptingSignumModifierStore::operator=(v6 + 40 * v10 + 8, (uint64_t)v17);
      icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::AdoptingSignumModifierStore *)v17);
    }
    v12 = (uint64_t *)*(unsigned int *)a2;
    if ((int)v12 < 1)
    {
      result = icu::UMemory::operator new(v12, (icu::UMemory *)0x20, v11);
      if (result)
      {
        v13 = *((_QWORD *)this + 38);
        *result = (uint64_t)&off_1E2263588;
        result[1] = v6;
        result[2] = v13;
        result[3] = 0;
      }
      return result;
    }
LABEL_12:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  icu::number::impl::MutablePatternModifier::createImmutableForPlural(this, 8, a2, v16);
  icu::number::impl::AdoptingSignumModifierStore::operator=(v6 + 208, (uint64_t)v16);
  icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::AdoptingSignumModifierStore *)v16);
  v15 = (uint64_t *)*(unsigned int *)a2;
  if ((int)v15 >= 1)
    goto LABEL_12;
  result = icu::UMemory::operator new(v15, (icu::UMemory *)0x20, v14);
  if (result)
  {
    *result = (uint64_t)&off_1E2263588;
    result[1] = v6;
    result[2] = 0;
    result[3] = 0;
  }
  return result;
}

_QWORD *icu::number::impl::ImmutablePatternModifier::ImmutablePatternModifier(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_1E2263588;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0;
  return result;
}

{
  *result = &off_1E2263588;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::insertPrefix(icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, int a3, UErrorCode *a4)
{
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  return icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), a2, a3, (uint64_t)this + 16, *((_BYTE *)this + 40), a4);
}

uint64_t icu::number::impl::MutablePatternModifier::insertSuffix(icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, int a3, UErrorCode *a4)
{
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  return icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), a2, a3, (uint64_t)this + 16, *((_BYTE *)this + 40), a4);
}

void icu::number::impl::ImmutablePatternModifier::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  sub_18BD26460(a3 + 104, a2, a4);
  if (!*(_QWORD *)(a3 + 200))
    icu::number::impl::ImmutablePatternModifier::applyToMicros(a1, a3, a2, a4);
}

uint64_t icu::number::impl::ImmutablePatternModifier::applyToMicros(uint64_t a1, uint64_t a2, icu::number::impl::DecimalQuantity *a3, int *a4)
{
  icu::PluralRules *v7;
  int v9;
  uint64_t v10;
  const icu::UnicodeString *v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;
  _OWORD v20[4];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = *(icu::PluralRules **)(a1 + 16);
  if (v7)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v18, (uint64_t)a3);
    sub_18BD26460(a2 + 104, (icu::number::impl::DecimalQuantity *)v18, a4);
    v9 = *a4;
    v10 = 5;
    if (v9 <= 0)
    {
      memset(v20, 0, sizeof(v20));
      icu::PluralRules::select(v7, (const icu::IFixedDecimal *)v18, (icu::UnicodeString *)v20);
      v12 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v20, v11);
      if (v12 < 0)
        v10 = 5;
      else
        v10 = v12;
      icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v20);
    }
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v18);
    v14 = *(_QWORD *)(a1 + 8);
    v15 = icu::number::impl::DecimalQuantity::signum(a3);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v15, v10);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    result = *(_QWORD *)(v17 + 8 * icu::number::impl::DecimalQuantity::signum(a3) + 216);
  }
  *(_QWORD *)(a2 + 200) = result;
  return result;
}

uint64_t icu::number::impl::ImmutablePatternModifier::getModifier(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(v3 + 8))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    return *(_QWORD *)(v2 + 8 * a2 + 216);
}

uint64_t icu::number::impl::ImmutablePatternModifier::addToChain(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t icu::number::impl::MutablePatternModifier::addToChain(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 320) = a2;
  return result;
}

void icu::number::impl::MutablePatternModifier::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  icu::PluralRules *v8;
  int v9;
  const icu::UnicodeString *v10;
  int v11;
  _OWORD v12[4];
  uint64_t v13;
  _OWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 320) + 16))(*(_QWORD *)(a1 + 320));
  sub_18BD26460(a3 + 104, a2, a4);
  if (!*(_QWORD *)(a3 + 200))
  {
    LODWORD(v12[0]) = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t, _OWORD *))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32), 4294967288, v12))
    {
      v8 = *(icu::PluralRules **)(a1 + 304);
      v13 = 0;
      memset(v12, 0, sizeof(v12));
      icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v12, (uint64_t)a2);
      sub_18BD26460(a3 + 104, (icu::number::impl::DecimalQuantity *)v12, a4);
      v9 = 5;
      if (v8 && *a4 <= 0)
      {
        memset(v14, 0, sizeof(v14));
        icu::PluralRules::select(v8, (const icu::IFixedDecimal *)v12, (icu::UnicodeString *)v14);
        v11 = icu::StandardPlural::indexOrNegativeFromString((icu::StandardPlural *)v14, v10);
        if (v11 < 0)
          v9 = 5;
        else
          v9 = v11;
        icu::UnicodeString::~UnicodeString((void *)5, (icu::UnicodeString *)v14);
      }
      icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v12);
    }
    else
    {
      v9 = 8;
    }
    *(_DWORD *)(a1 + 312) = icu::number::impl::DecimalQuantity::signum(a2);
    *(_DWORD *)(a1 + 316) = v9;
    *(_QWORD *)(a3 + 200) = a1 + 8;
  }
}

uint64_t icu::number::impl::MutablePatternModifier::apply(icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  int v10;
  int v11;
  int v12;
  UErrorCode *v13;
  int v14;
  void *v15;
  void (**v17)(icu::UnicodeString *__hidden);
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  v10 = icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), a2, (int)a3, (uint64_t)this + 16, *((_BYTE *)this + 40), a5);
  v11 = v10 + a4;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  v12 = icu::number::impl::AffixUtils::unescape((icu::number::impl::MutablePatternModifier *)((char *)this + 328), a2, v11, (uint64_t)this + 16, *((_BYTE *)this + 40), a5);
  v14 = 0;
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 80))(*((_QWORD *)this + 4)) & 1) == 0)
  {
    v17 = off_1E2256B38;
    v18 = 2;
    v14 = icu::FormattedStringBuilder::splice(a2, v10 + (int)a3, v11, (uint64_t)&v17, 0, 0, 0, a5);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v17);
  }
  icu::number::impl::CurrencySpacingEnabledModifier::applyCurrencySpacing(a2, a3, v10, v11 + v14, v12, *((_QWORD *)this + 7), a5, v13);
  return (v12 + v10 + v14);
}

uint64_t `non-virtual thunk to'icu::number::impl::MutablePatternModifier::apply(icu::number::impl::MutablePatternModifier *this, icu::FormattedStringBuilder *a2, icu::FormattedStringBuilder *a3, int a4, UErrorCode *a5)
{
  return icu::number::impl::MutablePatternModifier::apply((icu::number::impl::MutablePatternModifier *)((char *)this - 8), a2, a3, a4, a5);
}

uint64_t icu::number::impl::MutablePatternModifier::getPrefixLength(icu::number::impl::MutablePatternModifier *this)
{
  UErrorCode *v2;
  int v4;

  v4 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  return icu::number::impl::AffixUtils::unescapedCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::number::impl::MutablePatternModifier *)((char *)this + 16), (const icu::number::impl::SymbolProvider *)&v4, v2);
}

uint64_t icu::number::impl::MutablePatternModifier::prepareAffix(icu::number::impl::MutablePatternModifier *this, int a2)
{
  uint64_t v4;
  int v5;

  v4 = *((_QWORD *)this + 4);
  v5 = icu::number::impl::PatternStringUtils::resolveSignDisplay(*((_DWORD *)this + 11), *((_DWORD *)this + 78));
  return icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(v4, a2, v5, *((unsigned __int8 *)this + 49), *((_DWORD *)this + 79), *((_BYTE *)this + 48), 0, (uint64_t)this + 328);
}

uint64_t `non-virtual thunk to'icu::number::impl::MutablePatternModifier::getPrefixLength(icu::number::impl::MutablePatternModifier *this)
{
  UErrorCode *v2;
  int v4;

  v4 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix((icu::number::impl::MutablePatternModifier *)((char *)this - 8), 1);
  return icu::number::impl::AffixUtils::unescapedCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this + 320), (icu::number::impl::MutablePatternModifier *)((char *)this + 8), (const icu::number::impl::SymbolProvider *)&v4, v2);
}

uint64_t icu::number::impl::MutablePatternModifier::getCodePointCount(icu::number::impl::MutablePatternModifier *this)
{
  UErrorCode *v2;
  int v3;
  UErrorCode *v4;
  int v6;

  v6 = 0;
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 1);
  v3 = icu::number::impl::AffixUtils::unescapedCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::number::impl::MutablePatternModifier *)((char *)this + 16), (const icu::number::impl::SymbolProvider *)&v6, v2);
  icu::number::impl::MutablePatternModifier::prepareAffix(this, 0);
  return icu::number::impl::AffixUtils::unescapedCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this + 328), (icu::number::impl::MutablePatternModifier *)((char *)this + 16), (const icu::number::impl::SymbolProvider *)&v6, v4)+ v3;
}

uint64_t `non-virtual thunk to'icu::number::impl::MutablePatternModifier::getCodePointCount(icu::number::impl::MutablePatternModifier *this)
{
  return icu::number::impl::MutablePatternModifier::getCodePointCount((icu::number::impl::MutablePatternModifier *)((char *)this - 8));
}

uint64_t icu::number::impl::MutablePatternModifier::isStrong(icu::number::impl::MutablePatternModifier *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t `non-virtual thunk to'icu::number::impl::MutablePatternModifier::isStrong(icu::number::impl::MutablePatternModifier *this)
{
  return *((unsigned __int8 *)this + 16);
}

void icu::number::impl::MutablePatternModifier::containsField()
{
  abort();
}

void `non-virtual thunk to'icu::number::impl::MutablePatternModifier::containsField()
{
  abort();
}

void icu::number::impl::MutablePatternModifier::getParameters(icu::number::impl::MutablePatternModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
  abort();
}

void `non-virtual thunk to'icu::number::impl::MutablePatternModifier::getParameters(icu::number::impl::MutablePatternModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
  abort();
}

void icu::number::impl::MutablePatternModifier::semanticallyEquivalent(icu::number::impl::MutablePatternModifier *this, const icu::number::impl::Modifier *a2)
{
  abort();
}

void `non-virtual thunk to'icu::number::impl::MutablePatternModifier::semanticallyEquivalent(icu::number::impl::MutablePatternModifier *this, const icu::number::impl::Modifier *a2)
{
  abort();
}

icu::UnicodeString *icu::number::impl::MutablePatternModifier::getSymbol@<X0>(uint64_t a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  UChar **v4;
  UErrorCode v5;

  v5 = U_ZERO_ERROR;
  switch(a2)
  {
    case -10:
    case -9:
      return (icu::UnicodeString *)icu::UnicodeString::UnicodeString((uint64_t)a3, (uint64_t)&unk_18BE36654);
    case -8:
      return (icu::UnicodeString *)icu::number::impl::CurrencySymbols::getPluralName(a1 + 72, *(_DWORD *)(a1 + 316), (int *)&v5, (uint64_t)a3);
    case -7:
      return icu::number::impl::CurrencySymbols::getIntlCurrencySymbol((UChar **)(a1 + 72), a3);
    case -6:
      return (icu::UnicodeString *)icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth(a1, &v5, a3);
    case -5:
      v4 = (UChar **)(*(_QWORD *)(a1 + 56) + 776);
      return icu::UnicodeString::UnicodeString(a3, v4);
    case -4:
      v4 = (UChar **)(*(_QWORD *)(a1 + 56) + 200);
      return icu::UnicodeString::UnicodeString(a3, v4);
    case -3:
      v4 = (UChar **)(*(_QWORD *)(a1 + 56) + 1800);
      return icu::UnicodeString::UnicodeString(a3, v4);
    case -2:
      v4 = (UChar **)(*(_QWORD *)(a1 + 56) + 456);
      return icu::UnicodeString::UnicodeString(a3, v4);
    case -1:
      v4 = (UChar **)(*(_QWORD *)(a1 + 56) + 392);
      return icu::UnicodeString::UnicodeString(a3, v4);
    default:
      abort();
  }
}

uint64_t icu::number::impl::MutablePatternModifier::getCurrencySymbolForUnitWidth@<X0>(uint64_t this@<X0>, UErrorCode *a2@<X1>, icu::UnicodeString *a3@<X8>)
{
  switch(*(_DWORD *)(this + 64))
  {
    case 0:
      this = icu::number::impl::CurrencySymbols::getNarrowCurrencySymbol((icu::number::impl::CurrencySymbols *)(this + 72), a2, (uint64_t)a3);
      break;
    case 3:
      this = (uint64_t)icu::number::impl::CurrencySymbols::getIntlCurrencySymbol((UChar **)(this + 72), a3);
      break;
    case 4:
      this = icu::number::impl::CurrencySymbols::getFormalCurrencySymbol((icu::number::impl::CurrencySymbols *)(this + 72), a2, (uint64_t)a3);
      break;
    case 5:
      this = icu::number::impl::CurrencySymbols::getVariantCurrencySymbol((icu::number::impl::CurrencySymbols *)(this + 72), a2, (uint64_t)a3);
      break;
    case 6:
      *(_QWORD *)a3 = off_1E2256B38;
      *((_WORD *)a3 + 4) = 2;
      break;
    default:
      this = (uint64_t)icu::number::impl::CurrencySymbols::getCurrencySymbol((UChar **)(this + 72), a2, a3);
      break;
  }
  return this;
}

icu::UnicodeString *`non-virtual thunk to'icu::number::impl::MutablePatternModifier::getSymbol@<X0>(uint64_t a1@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  return icu::number::impl::MutablePatternModifier::getSymbol(a1 - 16, a2, a3);
}

void icu::number::impl::MutablePatternModifier::toUnicodeString(icu::number::impl::MutablePatternModifier *this)
{
  abort();
}

void sub_18BD22784(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BD22984(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD22798(uint64_t a1)
{
  return sub_18BD22984(a1 - 8);
}

void sub_18BD227A0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BD22984(a1 - 8);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD227B8(uint64_t a1)
{
  return sub_18BD22984(a1 - 16);
}

void sub_18BD227C0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_18BD22984(a1 - 16);
  icu::UMemory::operator delete(v1);
}

_QWORD *sub_18BD227D8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E2263588;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_18BD22818(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E2263588;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::UMemory::operator delete(a1);
}

void sub_18BD22858(icu::number::impl::ModifierStore *a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &unk_1E22636C0;
  for (i = 288; i != -32; i -= 40)
    icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::ModifierStore *)((char *)a1 + i));
  icu::number::impl::ModifierStore::~ModifierStore(a1);
}

void sub_18BD228A0(icu::number::impl::ModifierStore *a1)
{
  uint64_t i;
  void *v3;

  *(_QWORD *)a1 = &unk_1E22636C0;
  for (i = 288; i != -32; i -= 40)
    icu::number::impl::AdoptingSignumModifierStore::~AdoptingSignumModifierStore((icu::number::impl::ModifierStore *)((char *)a1 + i));
  icu::number::impl::ModifierStore::~ModifierStore(a1);
  icu::UMemory::operator delete(v3);
}

uint64_t sub_18BD228EC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40 * a3 + 8 * a2 + 16);
  if (a3 != 5 && !result)
    return *(_QWORD *)(a1 + 8 * a2 + 216);
  return result;
}

uint64_t sub_18BD2291C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(_QWORD *)a1 = off_1E22631E0;
  icu::FormattedStringBuilder::FormattedStringBuilder(a1 + 8, a2);
  icu::FormattedStringBuilder::FormattedStringBuilder(a1 + 144, a3);
  *(_BYTE *)(a1 + 280) = a4;
  *(_BYTE *)(a1 + 281) = a5;
  icu::number::impl::Modifier::Parameters::Parameters((_QWORD *)(a1 + 288));
  return a1;
}

uint64_t sub_18BD22984(uint64_t a1)
{
  icu::number::impl::Modifier *v2;
  icu::number::impl::SymbolProvider *v3;
  void *v4;
  void *v5;

  *(_QWORD *)(a1 + 8) = &unk_1E2263508;
  v2 = (icu::number::impl::Modifier *)(a1 + 8);
  *(_QWORD *)a1 = off_1E22634A0;
  *(_QWORD *)(a1 + 16) = &unk_1E2263560;
  v3 = (icu::number::impl::SymbolProvider *)(a1 + 16);
  icu::UnicodeString::~UnicodeString(&unk_1E2263560, (icu::UnicodeString *)(a1 + 328));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 240));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 176));
  if (*(_BYTE *)(a1 + 124))
    uprv_free(*(void **)(a1 + 112));
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)(a1 + 80));
  icu::number::impl::SymbolProvider::~SymbolProvider(v3);
  icu::number::impl::Modifier::~Modifier(v2);
  return a1;
}

uint64_t *icu::number::impl::PatternParser::parseToPatternInfo(UChar **this, const icu::UnicodeString *a2, UErrorCode *a3, UErrorCode *a4)
{
  return icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)a2, this, a3);
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumePattern(uint64_t *this, UChar **a2, UErrorCode *a3)
{
  uint64_t v4;
  int v5;

  if (*(int *)a3 <= 0)
  {
    v4 = (uint64_t)this;
    icu::UnicodeString::operator=((UChar **)this + 1, a2);
    *(_QWORD *)(v4 + 424) = v4 + 72;
    this = icu::number::impl::ParsedPatternInfo::consumeSubpattern((icu::number::impl::ParsedPatternInfo *)v4, a3);
    if (*(int *)a3 <= 0)
    {
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) != 59
        || (icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) < 0x10000
          ? (v5 = 1)
          : (v5 = 2),
            (*(_DWORD *)(v4 + 416) += v5,
             icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408)) == -1)
         || (*(_BYTE *)(v4 + 432) = 1,
             *(_QWORD *)(v4 + 424) = v4 + 240,
             this = icu::number::impl::ParsedPatternInfo::consumeSubpattern((icu::number::impl::ParsedPatternInfo *)v4, a3), *(int *)a3 <= 0)))
      {
        this = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(v4 + 408));
        if ((_DWORD)this != -1)
          *a3 = U_UNQUOTED_SPECIAL;
      }
    }
  }
  return this;
}

void icu::number::impl::PatternParser::parseToProperties(uint64_t a1@<X0>, int a2@<W1>, UErrorCode *a3@<X2>, void *a4@<X8>)
{
  bzero(a4, 0x2F8uLL);
  icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)a4);
  icu::number::impl::PatternParser::parseToExistingPropertiesImpl(a1, (icu::number::impl::DecimalFormatProperties *)a4, a2, a3);
}

void icu::number::impl::PatternParser::parseToExistingPropertiesImpl(uint64_t a1, icu::number::impl::DecimalFormatProperties *this, int a3, UErrorCode *a4)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v11;
  int v12;
  int32_t v13;
  int32_t v14;
  void *v15;
  const char *v16;
  _OWORD v17[4];
  _OWORD v18[27];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int16 *)(a1 + 8);
  v6 = (__int16)v5;
  v7 = v5 >> 5;
  if (v6 < 0)
    v7 = *(_DWORD *)(a1 + 12);
  if (v7)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    sub_18BD0C8B8((uint64_t)v18);
    v11 = *(unsigned __int16 *)(a1 + 8);
    v12 = (__int16)v11;
    v13 = v11 >> 5;
    if (v12 >= 0)
      v14 = v13;
    else
      v14 = *(_DWORD *)(a1 + 12);
    if (icu::UnicodeString::doCompare(a1, 0, v14, (uint64_t)L"#.##E+00;-#.##E+00", 0, 18))
    {
      icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)v18, (UChar **)a1, a4);
    }
    else
    {
      memset(v17, 0, sizeof(v17));
      v16 = "0";
      icu::UnicodeString::UnicodeString(v17, 1, &v16);
      icu::number::impl::ParsedPatternInfo::consumePattern((uint64_t *)v18, (UChar **)v17, a4);
      icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v17);
    }
    if (*(int *)a4 <= 0)
      icu::number::impl::PatternParser::patternInfoToProperties((uint64_t)this, (uint64_t)v18, a3, (const icu::UnicodeString *)a4);
    sub_18BD0C994((void **)v18);
  }
  else
  {
    icu::number::impl::DecimalFormatProperties::clear(this);
  }
}

void icu::number::impl::PatternParser::parseToProperties(icu::number::impl::PatternParser *this@<X0>, UErrorCode *a2@<X1>, void *a3@<X8>)
{
  bzero(a3, 0x2F8uLL);
  icu::number::impl::DecimalFormatProperties::DecimalFormatProperties((icu::number::impl::DecimalFormatProperties *)a3);
  icu::number::impl::PatternParser::parseToExistingPropertiesImpl((uint64_t)this, (icu::number::impl::DecimalFormatProperties *)a3, 0, a2);
}

uint64_t icu::number::impl::ParsedPatternInfo::charAt(icu::number::impl::ParsedPatternInfo *this, int a2, int a3)
{
  char *v3;
  char *v4;
  _DWORD *v5;
  int v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;

  v3 = (char *)this + 224;
  if ((a2 & 0x200) != 0)
    v3 = (char *)this + 392;
  if ((a2 & 0x100) != 0)
    v3 = (char *)this + 216;
  if ((~a2 & 0x300) != 0)
    v4 = v3;
  else
    v4 = (char *)this + 384;
  if ((a2 & 0x400) != 0)
    v4 = (char *)this + 232;
  if ((~a2 & 0x600) != 0)
    v5 = v4;
  else
    v5 = (_DWORD *)((char *)this + 400);
  if (a3 < 0 || (v7 = v5, v6 = *v5, v7[1] - v6 <= a3))
    abort();
  v8 = v6 + a3;
  v9 = *((unsigned __int16 *)this + 8);
  if (*((__int16 *)this + 8) < 0)
    v10 = *((_DWORD *)this + 5);
  else
    v10 = v9 >> 5;
  if (v10 <= v8)
    return 0xFFFFLL;
  if ((v9 & 2) != 0)
    v11 = (char *)this + 18;
  else
    v11 = (char *)*((_QWORD *)this + 4);
  return *(unsigned __int16 *)&v11[2 * v8];
}

char *icu::number::impl::ParsedPatternInfo::getEndpoints(icu::number::impl::ParsedPatternInfo *this, int a2)
{
  char *v2;
  char *v3;

  v2 = (char *)this + 224;
  if ((a2 & 0x200) != 0)
    v2 = (char *)this + 392;
  if ((a2 & 0x100) != 0)
    v2 = (char *)this + 216;
  if ((~a2 & 0x300) != 0)
    v3 = v2;
  else
    v3 = (char *)this + 384;
  if ((a2 & 0x400) != 0)
    v3 = (char *)this + 232;
  if ((~a2 & 0x600) != 0)
    return v3;
  else
    return (char *)this + 400;
}

uint64_t icu::number::impl::ParsedPatternInfo::length(icu::number::impl::ParsedPatternInfo *this, int a2)
{
  char *v2;
  char *v3;
  _DWORD *v4;

  v2 = (char *)this + 224;
  if ((a2 & 0x200) != 0)
    v2 = (char *)this + 392;
  if ((a2 & 0x100) != 0)
    v2 = (char *)this + 216;
  if ((~a2 & 0x300) != 0)
    v3 = v2;
  else
    v3 = (char *)this + 384;
  if ((a2 & 0x400) != 0)
    v3 = (char *)this + 232;
  if ((~a2 & 0x600) != 0)
    v4 = v3;
  else
    v4 = (_DWORD *)((char *)this + 400);
  return (v4[1] - *v4);
}

uint64_t icu::number::impl::ParsedPatternInfo::getLengthFromEndpoints(_DWORD *a1)
{
  return (a1[1] - *a1);
}

icu::UnicodeString *icu::number::impl::ParsedPatternInfo::getString@<X0>(icu::UnicodeString *this@<X0>, int a2@<W1>, icu::UnicodeString *a3@<X8>)
{
  int *v3;
  int *v4;
  int *v5;
  int v6;
  int v7;

  v3 = (int *)((char *)this + 224);
  if ((a2 & 0x200) != 0)
    v3 = (int *)((char *)this + 392);
  if ((a2 & 0x100) != 0)
    v3 = (int *)((char *)this + 216);
  if ((~a2 & 0x300) != 0)
    v4 = v3;
  else
    v4 = (int *)((char *)this + 384);
  if ((a2 & 0x400) != 0)
    v4 = (int *)((char *)this + 232);
  if ((~a2 & 0x600) != 0)
    v5 = v4;
  else
    v5 = (int *)((char *)this + 400);
  v6 = *v5;
  v7 = v5[1];
  if (v7 != v6)
    return icu::UnicodeString::UnicodeString(a3, (icu::UnicodeString *)((char *)this + 8), v6, (v7 - v6));
  *(_QWORD *)a3 = off_1E2256B38;
  *((_WORD *)a3 + 4) = 2;
  return this;
}

uint64_t icu::number::impl::ParsedPatternInfo::positiveHasPlusSign(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 213);
}

uint64_t icu::number::impl::ParsedPatternInfo::hasNegativeSubpattern(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 432);
}

uint64_t icu::number::impl::ParsedPatternInfo::negativeHasMinusSign(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 380);
}

BOOL icu::number::impl::ParsedPatternInfo::hasCurrencySign(icu::number::impl::ParsedPatternInfo *this)
{
  if (*((_BYTE *)this + 210))
    return 1;
  if (*((_BYTE *)this + 432))
    return *((_BYTE *)this + 378) != 0;
  return 0;
}

uint64_t icu::number::impl::ParsedPatternInfo::containsSymbolType(uint64_t a1, int a2, int *a3)
{
  return icu::number::impl::AffixUtils::containsType(a1 + 8, a2, a3);
}

BOOL icu::number::impl::ParsedPatternInfo::hasBody(icu::number::impl::ParsedPatternInfo *this)
{
  return *((_DWORD *)this + 24) > 0;
}

uint64_t icu::number::impl::ParsedPatternInfo::currencyAsDecimal(icu::number::impl::ParsedPatternInfo *this)
{
  return *((unsigned __int8 *)this + 211);
}

uint64_t *icu::number::impl::ParsedPatternInfo::ParserState::peek(icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  int v1;
  uint64_t v2;
  uint64_t *v3;

  v1 = *((_DWORD *)this + 2);
  v2 = *(_QWORD *)this;
  if (*(__int16 *)(v2 + 8) < 0)
    v3 = (uint64_t *)*(unsigned int *)(v2 + 12);
  else
    v3 = (uint64_t *)(*(unsigned __int16 *)(v2 + 8) >> 5);
  if (v1 == (_DWORD)v3)
    return (uint64_t *)0xFFFFFFFFLL;
  else
    return icu::UnicodeString::char32At(v3, (icu::UnicodeString *)v2, v1);
}

uint64_t icu::number::impl::ParsedPatternInfo::ParserState::peek2(icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t *v9;

  v2 = *((_DWORD *)this + 2);
  v3 = *(_QWORD *)this;
  if (*(__int16 *)(v3 + 8) < 0)
    v4 = (uint64_t *)*(unsigned int *)(v3 + 12);
  else
    v4 = (uint64_t *)(*(unsigned __int16 *)(v3 + 8) >> 5);
  if (v2 == (_DWORD)v4)
    return 0xFFFFFFFFLL;
  v5 = icu::UnicodeString::char32At(v4, (icu::UnicodeString *)v3, v2) < 0x10000 ? 1 : 2;
  v6 = v5 + *((_DWORD *)this + 2);
  v7 = *(unsigned int **)this;
  v8 = *(unsigned __int16 *)(*(_QWORD *)this + 8);
  v9 = (v8 & 0x8000) != 0 ? (uint64_t *)v7[3] : (uint64_t *)(v8 >> 5);
  if (v6 == (_DWORD)v9)
    return 0xFFFFFFFFLL;
  else
    return (uint64_t)icu::UnicodeString::char32At(v9, (icu::UnicodeString *)v7, v6);
}

uint64_t *icu::number::impl::ParsedPatternInfo::ParserState::next(icu::number::impl::ParsedPatternInfo::ParserState *this)
{
  uint64_t *result;
  int v3;

  result = icu::number::impl::ParsedPatternInfo::ParserState::peek(this);
  if (result < 0x10000)
    v3 = 1;
  else
    v3 = 2;
  *((_DWORD *)this + 2) += v3;
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeSubpattern(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t *result;

  result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 0, a2);
  if (*(int *)a2 <= 0)
  {
    result = icu::number::impl::ParsedPatternInfo::consumeAffix((uint64_t)this, (_DWORD *)(*((_QWORD *)this + 53) + 144), a2);
    if (*(int *)a2 <= 0)
    {
      result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 1, a2);
      if (*(int *)a2 <= 0)
      {
        result = icu::number::impl::ParsedPatternInfo::consumeFormat(this, a2);
        if (*(int *)a2 <= 0)
        {
          result = icu::number::impl::ParsedPatternInfo::consumeExponent(this, a2);
          if (*(int *)a2 <= 0)
          {
            result = icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 2, a2);
            if (*(int *)a2 <= 0)
            {
              result = icu::number::impl::ParsedPatternInfo::consumeAffix((uint64_t)this, (_DWORD *)(*((_QWORD *)this + 53) + 152), a2);
              if (*(int *)a2 <= 0)
                return icu::number::impl::ParsedPatternInfo::consumePadding((uint64_t)this, 3, a2);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumePadding(uint64_t a1, int a2, UErrorCode *a3)
{
  icu::number::impl::ParsedPatternInfo::ParserState *v6;
  uint64_t *result;
  uint64_t v8;
  int v9;
  int v10;

  v6 = (icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408);
  result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408));
  if ((_DWORD)result == 42)
  {
    v8 = *(_QWORD *)(a1 + 424);
    if (*(_BYTE *)(v8 + 48))
    {
      *a3 = U_MULTIPLE_PAD_SPECIFIERS;
    }
    else
    {
      *(_DWORD *)(v8 + 52) = a2;
      *(_BYTE *)(v8 + 48) = 1;
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v6) < 0x10000)
        v9 = 1;
      else
        v9 = 2;
      v10 = v9 + *(_DWORD *)(a1 + 416);
      *(_DWORD *)(a1 + 416) = v10;
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 160) = v10;
      result = icu::number::impl::ParsedPatternInfo::consumeLiteral((icu::number::impl::ParsedPatternInfo *)a1, a3);
      *(_DWORD *)(*(_QWORD *)(a1 + 424) + 164) = *(_DWORD *)(a1 + 416);
    }
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeAffix(uint64_t a1, _DWORD *a2, UErrorCode *a3)
{
  icu::number::impl::ParsedPatternInfo::ParserState *v6;
  uint64_t *result;

  v6 = (icu::number::impl::ParsedPatternInfo::ParserState *)(a1 + 408);
  *a2 = *(_DWORD *)(a1 + 416);
  while (1)
  {
    result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    if ((int)result <= 163)
      break;
    if ((_DWORD)result == 164)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 424) + 138) = 1;
    }
    else if ((_DWORD)result == 8240)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 424) + 137) = 1;
    }
LABEL_12:
    result = icu::number::impl::ParsedPatternInfo::consumeLiteral((icu::number::impl::ParsedPatternInfo *)a1, a3);
    if (*(int *)a3 >= 1)
      return result;
  }
  switch((int)result)
  {
    case '#':
    case '*':
    case ',':
    case '.':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ';':
    case '@':
      break;
    case '$':
    case '&':
    case '\'':
    case '(':
    case ')':
    case '/':
    case ':':
    case '<':
    case '=':
    case '>':
    case '?':
      goto LABEL_12;
    case '%':
      *(_BYTE *)(*(_QWORD *)(a1 + 424) + 136) = 1;
      goto LABEL_12;
    case '+':
      *(_BYTE *)(*(_QWORD *)(a1 + 424) + 141) = 1;
      goto LABEL_12;
    case '-':
      *(_BYTE *)(*(_QWORD *)(a1 + 424) + 140) = 1;
      goto LABEL_12;
    default:
      if ((_DWORD)result != -1)
        goto LABEL_12;
      break;
  }
  a2[1] = *(_DWORD *)(a1 + 416);
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeFormat(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t *result;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  result = icu::number::impl::ParsedPatternInfo::consumeIntegerFormat(this, a2);
  if (*(int *)a2 <= 0)
  {
    v5 = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
    result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
    if (v5 == 46)
    {
      if (result < 0x10000)
        v6 = 1;
      else
        v6 = 2;
      *((_DWORD *)this + 104) += v6;
      v7 = *((_QWORD *)this + 53);
      *(_BYTE *)(v7 + 40) = 1;
      ++*(_DWORD *)(v7 + 44);
    }
    else
    {
      if ((_DWORD)result != 164)
        return result;
      result = (uint64_t *)icu::number::impl::ParsedPatternInfo::ParserState::peek2((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
      if (((_DWORD)result - 48) >= 0xA && (_DWORD)result != 35)
        return result;
      v8 = *((_QWORD *)this + 53);
      *(_WORD *)(v8 + 138) = 257;
      *(_BYTE *)(v8 + 40) = 1;
      ++*(_DWORD *)(v8 + 44);
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408)) < 0x10000)
        v9 = 1;
      else
        v9 = 2;
      *((_DWORD *)this + 104) += v9;
    }
    return icu::number::impl::ParsedPatternInfo::consumeFractionFormat(this, a2);
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeExponent(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t v4;
  icu::number::impl::ParsedPatternInfo::ParserState *v5;
  uint64_t *result;
  int v7;
  int v8;
  int v9;

  v4 = *((_QWORD *)this + 53);
  v5 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
  if ((_DWORD)result == 69)
  {
    if ((~*(_DWORD *)v4 & 0xFFFF0000) != 0)
    {
      *a2 = U_MALFORMED_EXPONENTIAL_PATTERN;
    }
    else
    {
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) < 0x10000)
        v7 = 1;
      else
        v7 = 2;
      *((_DWORD *)this + 104) += v7;
      ++*(_DWORD *)(v4 + 44);
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) != 43)
        goto LABEL_17;
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) < 0x10000)
        v8 = 1;
      else
        v8 = 2;
      *((_DWORD *)this + 104) += v8;
      *(_BYTE *)(v4 + 128) = 1;
      while (1)
      {
        ++*(_DWORD *)(v4 + 44);
LABEL_17:
        result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
        if ((_DWORD)result != 48)
          break;
        if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) < 0x10000)
          v9 = 1;
        else
          v9 = 2;
        *((_DWORD *)this + 104) += v9;
        ++*(_DWORD *)(v4 + 132);
      }
    }
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeLiteral(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  icu::number::impl::ParsedPatternInfo::ParserState *v4;
  uint64_t *result;
  unsigned int v6;
  int v7;
  int v8;
  int v9;

  v4 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  result = icu::number::impl::ParsedPatternInfo::ParserState::peek((icu::number::impl::ParsedPatternInfo *)((char *)this + 408));
  if ((_DWORD)result == -1)
  {
LABEL_16:
    *a2 = U_PATTERN_SYNTAX_ERROR;
    return result;
  }
  v6 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
  result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
  if (result < 0x10000)
    v7 = 1;
  else
    v7 = 2;
  *((_DWORD *)this + 104) += v7;
  if (v6 == 39)
  {
    for (; icu::number::impl::ParsedPatternInfo::ParserState::peek(v4) != 39; *((_DWORD *)this + 104) += v8)
    {
      result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
      if ((_DWORD)result == -1)
        goto LABEL_16;
      if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v4) < 0x10000)
        v8 = 1;
      else
        v8 = 2;
    }
    result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v4);
    if (result < 0x10000)
      v9 = 1;
    else
      v9 = 2;
    *((_DWORD *)this + 104) += v9;
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeIntegerFormat(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  uint64_t *v4;
  icu::number::impl::ParsedPatternInfo::ParserState *v5;
  uint64_t *result;
  unsigned __int8 v7;
  int v8;
  UErrorCode v9;
  uint64_t v10;

  v4 = (uint64_t *)*((_QWORD *)this + 53);
  v5 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  while (1)
  {
    result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
    if (((_DWORD)result - 48) < 0xA)
    {
      if (*((int *)v4 + 5) > 0)
        goto LABEL_23;
      ++*((_DWORD *)v4 + 11);
      ++*v4;
      ++*((_DWORD *)v4 + 4);
      ++*((_DWORD *)v4 + 6);
      if (!icu::number::impl::DecimalQuantity::isZeroish((icu::number::impl::DecimalQuantity *)(v4 + 7))
        || icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) != 48)
      {
        v7 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v5);
        icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)(v4 + 7), (char)(v7 - 48), 0, 1);
      }
      goto LABEL_7;
    }
    if ((_DWORD)result == 35)
    {
      if (*((int *)v4 + 4) > 0)
        goto LABEL_23;
      ++*((_DWORD *)v4 + 11);
      ++*v4;
      if (*((int *)v4 + 5) < 1)
        ++*((_DWORD *)v4 + 2);
      else
        ++*((_DWORD *)v4 + 3);
      ++*((_DWORD *)v4 + 6);
      goto LABEL_7;
    }
    if ((_DWORD)result != 64)
      break;
    if (*((int *)v4 + 4) > 0 || *((int *)v4 + 3) > 0)
    {
LABEL_23:
      v9 = U_UNEXPECTED_TOKEN;
LABEL_24:
      *a2 = v9;
      return result;
    }
    ++*((_DWORD *)v4 + 11);
    ++*v4;
    *(uint64_t *)((char *)v4 + 20) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v4 + 20), (int32x2_t)0x100000001);
LABEL_7:
    if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v5) < 0x10000)
      v8 = 1;
    else
      v8 = 2;
    *((_DWORD *)this + 104) += v8;
  }
  if ((_DWORD)result == 44)
  {
    ++*((_DWORD *)v4 + 11);
    *v4 <<= 16;
    goto LABEL_7;
  }
  v9 = U_UNEXPECTED_TOKEN;
  v10 = *v4;
  if (!(unsigned __int16)*v4 && v10 < 0xFFFF0000)
    goto LABEL_24;
  if (!WORD1(v10) && (v10 & 0xFFFF00000000) != 0xFFFF00000000)
  {
    v9 = U_PATTERN_SYNTAX_ERROR;
    goto LABEL_24;
  }
  return result;
}

uint64_t *icu::number::impl::ParsedPatternInfo::consumeFractionFormat(icu::number::impl::ParsedPatternInfo *this, UErrorCode *a2)
{
  int v4;
  int32x2_t *v5;
  icu::number::impl::ParsedPatternInfo::ParserState *v6;
  uint64_t *result;
  unsigned __int8 v8;
  int v9;

  v4 = 0;
  v5 = (int32x2_t *)*((_QWORD *)this + 53);
  v6 = (icu::number::impl::ParsedPatternInfo *)((char *)this + 408);
  while (1)
  {
    result = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    if (((_DWORD)result - 48) >= 0xA)
    {
      if ((_DWORD)result != 35)
        return result;
      ++v5[5].i32[1];
      v5[4] = vadd_s32(v5[4], (int32x2_t)0x100000001);
LABEL_5:
      ++v4;
      goto LABEL_7;
    }
    if (v5[4].i32[0] >= 1)
      break;
    ++v5[5].i32[1];
    ++v5[3].i32[1];
    ++v5[4].i32[1];
    if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v6) == 48)
      goto LABEL_5;
    v8 = icu::number::impl::ParsedPatternInfo::ParserState::peek(v6);
    icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)&v5[7], (char)(v8 - 48), v4, 0);
    v4 = 0;
LABEL_7:
    if (icu::number::impl::ParsedPatternInfo::ParserState::peek(v6) < 0x10000)
      v9 = 1;
    else
      v9 = 2;
    *((_DWORD *)this + 104) += v9;
  }
  *a2 = U_UNEXPECTED_TOKEN;
  return result;
}

void *icu::number::impl::PatternParser::patternInfoToProperties(uint64_t a1, uint64_t a2, int a3, const icu::UnicodeString *a4)
{
  _BOOL4 v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double v20;
  BOOL v21;
  char v22;
  int v23;
  int v24;
  UErrorCode *v25;
  int v26;
  int v27;
  UErrorCode *v28;
  int v29;
  _WORD *v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  UChar **v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  _BYTE v43[64];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[4];
  _OWORD v49[4];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (a3)
    v7 = a3 != 1 || *(_BYTE *)(a2 + 210) != 0;
  else
    v7 = 0;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = (__int16)v8;
  if ((int)v8 >> 16 == -1)
    v9 = -1;
  *(_DWORD *)(a1 + 76) = v9;
  *(_BYTE *)(a1 + 80) = (int)v8 >> 16 != -1;
  if ((~v8 & 0xFFFF00000000) != 0)
    v10 = (int)v8 >> 16;
  else
    v10 = -1;
  *(_DWORD *)(a1 + 752) = v10;
  if (*(_DWORD *)(a2 + 96))
    v11 = 1;
  else
    v11 = *(_DWORD *)(a2 + 108) < 1;
  if (v11)
  {
    v12 = *(_DWORD *)(a2 + 88);
    v13 = *(_DWORD *)(a2 + 100);
    if (v12 | v13)
      v15 = *(_DWORD *)(a2 + 88);
    else
      v15 = 1;
    if (v12 | v13)
      v14 = *(_DWORD *)(a2 + 100);
    else
      v14 = 0;
  }
  else
  {
    v14 = uprv_max(1, *(_DWORD *)(a2 + 100));
    v15 = 0;
  }
  v16 = *(_DWORD *)(a2 + 92);
  if (v16 < 1)
  {
    if (icu::number::impl::DecimalQuantity::isZeroish((icu::number::impl::DecimalQuantity *)(a2 + 128)))
    {
      v18 = *(_DWORD *)(a2 + 108);
      if (v7)
        v19 = -1;
      else
        v19 = v14;
      if (v7)
        v18 = -1;
      *(_DWORD *)(a1 + 104) = v19;
      *(_DWORD *)(a1 + 88) = v18;
      *(_QWORD *)(a1 + 736) = 0;
    }
    else
    {
      if (v7)
      {
        *(_DWORD *)(a1 + 104) = -1;
        *(_DWORD *)(a1 + 88) = -1;
        v20 = 0.0;
      }
      else
      {
        *(_DWORD *)(a1 + 104) = v14;
        *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 108);
        v20 = icu::number::impl::DecimalQuantity::toDouble((icu::number::impl::DecimalQuantity *)(a2 + 128));
      }
      *(double *)(a1 + 736) = v20;
    }
    v17 = -1;
    *(_DWORD *)(a1 + 116) = -1;
  }
  else
  {
    *(_DWORD *)(a1 + 104) = -1;
    *(_DWORD *)(a1 + 88) = -1;
    *(_QWORD *)(a1 + 736) = 0;
    *(_DWORD *)(a1 + 116) = v16;
    v17 = *(_DWORD *)(a2 + 84) + v16;
  }
  *(_DWORD *)(a1 + 96) = v17;
  if (*(_BYTE *)(a2 + 112))
    v21 = *(_DWORD *)(a2 + 108) == 0;
  else
    v21 = 0;
  v22 = v21;
  *(_BYTE *)(a1 + 65) = v22;
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 211);
  v23 = *(_DWORD *)(a2 + 204);
  if (v23 < 1)
  {
    *(_BYTE *)(a1 + 66) = 0;
    v24 = -1;
    *(_DWORD *)(a1 + 100) = -1;
    *(_DWORD *)(a1 + 112) = v15;
  }
  else
  {
    *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 200);
    *(_DWORD *)(a1 + 100) = v23;
    if (*(_DWORD *)(a2 + 92))
    {
      *(_DWORD *)(a1 + 112) = 1;
      v24 = -1;
    }
    else
    {
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 88);
      v24 = *(_DWORD *)(a2 + 96);
    }
  }
  *(_DWORD *)(a1 + 92) = v24;
  memset(v49, 0, sizeof(v49));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(v49, a2, 256);
  memset(v48, 0, sizeof(v48));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(v48, a2, 0);
  if (!*(_BYTE *)(a2 + 120))
  {
    *(_DWORD *)(a1 + 72) = -1;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 392));
    *(_BYTE *)(a1 + 384) = 1;
    goto LABEL_68;
  }
  v26 = *(_DWORD *)(a2 + 116);
  v27 = icu::number::impl::AffixUtils::estimateLength((icu::number::impl::AffixUtils *)v49, a4, v25);
  *(_DWORD *)(a1 + 72) = v27
                       + icu::number::impl::AffixUtils::estimateLength((icu::number::impl::AffixUtils *)v48, a4, v28)
                       + v26;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v44, a2, 1024);
  if (SWORD4(v44) < 0)
  {
    v29 = HIDWORD(v44);
    if (HIDWORD(v44) == 1)
      goto LABEL_63;
    if (HIDWORD(v44) != 2)
      goto LABEL_64;
LABEL_55:
    if ((BYTE8(v44) & 2) != 0)
      v30 = (_WORD *)((unint64_t)&v44 | 0xA);
    else
      v30 = (_WORD *)*((_QWORD *)&v45 + 1);
    if (*v30 == 39)
    {
      icu::UnicodeString::unBogus(a1 + 392);
      v31 = *(unsigned __int16 *)(a1 + 400);
      v32 = (__int16)v31;
      v33 = v31 >> 5;
      if (v32 >= 0)
        v34 = v33;
      else
        v34 = *(unsigned int *)(a1 + 404);
      icu::UnicodeString::doReplace(a1 + 392, 0, v34, (uint64_t)L"'", 0, 0xFFFFFFFFLL);
      goto LABEL_67;
    }
    v35 = (UChar **)(a1 + 392);
    goto LABEL_66;
  }
  if ((WORD4(v44) & 0xFFE0) == 0x40)
    goto LABEL_55;
  if ((WORD4(v44) & 0xFFE0) == 0x20)
  {
LABEL_63:
    v35 = (UChar **)(a1 + 392);
LABEL_66:
    icu::UnicodeString::operator=(v35, (UChar **)&v44);
    goto LABEL_67;
  }
  v29 = WORD4(v44) >> 5;
LABEL_64:
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v43, (const icu::UnicodeString *)&v44, 1, (v29 - 2));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 392), (icu::UnicodeString *)v43);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v43);
LABEL_67:
  v37 = (void *)*(unsigned int *)(a2 + 124);
  *(_DWORD *)(a1 + 388) = (_DWORD)v37;
  *(_BYTE *)(a1 + 384) = 0;
  icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v44);
LABEL_68:
  icu::UnicodeString::operator=((UChar **)(a1 + 544), (UChar **)v49);
  icu::UnicodeString::operator=((UChar **)(a1 + 672), (UChar **)v48);
  if (*(_BYTE *)(a2 + 432))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v44, a2, 768);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 192), (icu::UnicodeString *)&v44);
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v44);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v44, a2, 512);
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 320), (icu::UnicodeString *)&v44);
    icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v44);
  }
  else
  {
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 192));
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 320));
  }
  if (*(_BYTE *)(a2 + 208))
  {
    v40 = 2;
  }
  else
  {
    v40 = *(unsigned __int8 *)(a2 + 209);
    if (!*(_BYTE *)(a2 + 209))
    {
      *(_DWORD *)(a1 + 84) = 0;
      goto LABEL_76;
    }
    v40 = 3;
  }
  *(_DWORD *)(a1 + 84) = v40;
LABEL_76:
  icu::UnicodeString::~UnicodeString((void *)v40, (icu::UnicodeString *)v48);
  return icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v49);
}

uint64_t icu::number::impl::PatternStringUtils::ignoreRoundingIncrement(icu::number::impl::PatternStringUtils *this, double *a2)
{
  double v2;
  double v3;
  int v4;
  int v5;
  uint64_t v6;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v2 = *(double *)this + *(double *)this;
  v3 = 20.0;
  if (v2 > 1.0)
    goto LABEL_7;
  v4 = 0;
  do
  {
    v5 = v4;
    v2 = v2 * 10.0;
    v3 = v3 * 10.0;
    if (v4 >= (int)a2)
      break;
    ++v4;
  }
  while (v2 <= 1.0);
  if (v5 >= (int)a2)
    return 1;
LABEL_7:
  v6 = 0;
  *(double *)this = (double)(int)(v2 * 10.0) / v3;
  return v6;
}

void *icu::number::impl::PatternStringUtils::propertiesToPatternString@<X0>(icu::number::impl::PatternStringUtils *this@<X0>, const icu::number::impl::DecimalFormatProperties *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  icu::CurrencyPluralInfo *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  double v26;
  int v27;
  double v28;
  double v29;
  int v30;
  int v31;
  int LowerDisplayMagnitude;
  uint64_t v33;
  _WORD *v34;
  int v35;
  int v36;
  int v37;
  void *v38;
  unsigned __int16 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  char v50;
  int v51;
  int v52;
  int v53;
  char v54;
  BOOL v55;
  unsigned int v56;
  unsigned int v57;
  char *v58;
  __int16 v59;
  char v60;
  __int16 v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  void *v98;
  void *v99;
  void *v100;
  int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  _BYTE v115[64];
  _BYTE v116[64];
  _BYTE v117[64];
  _BYTE v118[64];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  void (**v128)(icu::UnicodeString *__hidden);
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _QWORD v133[2];
  __int16 v134[28];
  void (**v135)(icu::UnicodeString *__hidden);
  __int16 v136;
  void (**v137)(icu::UnicodeString *__hidden);
  __int16 v138;
  void (**v139)(icu::UnicodeString *__hidden);
  __int16 v140;
  char v141;
  _QWORD v142[273];
  char v143;
  _OWORD v144[4];
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = off_1E2256B38;
  *(_WORD *)(a3 + 8) = 2;
  v6 = uprv_min(*((unsigned int *)this + 19), 100);
  v111 = uprv_max(0, v6);
  v7 = uprv_min(*((unsigned int *)this + 188), 100);
  v113 = uprv_max(0, v7);
  v114 = *((unsigned __int8 *)this + 80);
  v106 = uprv_min(*((unsigned int *)this + 18), 100);
  v104 = *((_QWORD *)this + 48);
  memset(v144, 0, sizeof(v144));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v144, (UChar **)this + 49);
  v8 = uprv_min(*((unsigned int *)this + 28), 100);
  v9 = uprv_max(0, v8);
  v107 = uprv_min(*((unsigned int *)this + 23), 100);
  v10 = uprv_min(*((unsigned int *)this + 26), 100);
  v11 = uprv_max(0, v10);
  v110 = uprv_min(*((unsigned int *)this + 22), 100);
  v12 = uprv_min(*((unsigned int *)this + 29), 100);
  v13 = uprv_min(*((unsigned int *)this + 24), 100);
  v102 = *((unsigned __int8 *)this + 65);
  v14 = uprv_min(*((unsigned int *)this + 25), 100);
  v103 = *((unsigned __int8 *)this + 66);
  bzero(v134, 0x990uLL);
  v133[0] = off_1E2262E30;
  v133[1] = off_1E2256B38;
  v134[0] = 2;
  v135 = off_1E2256B38;
  v136 = 2;
  v137 = off_1E2256B38;
  v138 = 2;
  v139 = off_1E2256B38;
  v140 = 2;
  v141 = 1;
  v142[0] = off_1E2262ED8;
  v15 = 35;
  do
  {
    v16 = &v133[v15];
    *v16 = off_1E2262E30;
    v16[1] = off_1E2256B38;
    *((_WORD *)v16 + 8) = 2;
    v16[9] = off_1E2256B38;
    *((_WORD *)v16 + 40) = 2;
    v16[17] = off_1E2256B38;
    *((_WORD *)v16 + 72) = 2;
    v16[25] = off_1E2256B38;
    *((_WORD *)v16 + 104) = 2;
    v15 += 34;
    *((_BYTE *)v16 + 266) = 1;
  }
  while (v16 + 34 != (_QWORD *)&v143);
  v143 = 1;
  v17 = (icu::CurrencyPluralInfo *)*((_QWORD *)this + 6);
  if (v17)
  {
    v141 = 1;
    sub_18BD1E6C0((uint64_t)v142, v17, (uint64_t *)this, a2);
    if (v143)
      v18 = v133;
    else
      v18 = v142;
  }
  else
  {
    v18 = v133;
    sub_18BD1DFE4((uint64_t)v133, (uint64_t)this, a2);
    v143 = 1;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v18 + 32))(&v123, v18, 256);
  if ((SWORD4(v123) & 0x8000u) == 0)
    v19 = WORD4(v123) >> 5;
  else
    v19 = HIDWORD(v123);
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v123, 0, v19);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v123);
  v21 = *(unsigned __int16 *)(a3 + 8);
  v22 = (__int16)v21;
  v23 = v21 >> 5;
  if (v22 >= 0)
    v24 = v23;
  else
    v24 = *(_DWORD *)(a3 + 12);
  v25 = v111;
  v26 = *((double *)this + 92);
  if (v111 == v113)
    v25 = 0;
  v129 = 0u;
  v112 = v25;
  v132 = 0;
  if (v114)
    v27 = v113 + v25 + 1;
  else
    v27 = 1;
  v105 = v27;
  v131 = 0uLL;
  v130 = 0uLL;
  v128 = off_1E2256B38;
  LOWORD(v129) = 2;
  if (v13 != uprv_min(100, -1))
  {
    v36 = (unsigned __int16)v129 >> 5;
    if ((v129 & 0x8000u) != 0)
      v36 = DWORD1(v129);
    while (v36 < v12)
    {
      LOWORD(v123) = 64;
      icu::UnicodeString::doAppend((uint64_t)&v128, (uint64_t)&v123, 0, 1);
      v36 = (unsigned __int16)v129 >> 5;
      if ((v129 & 0x8000u) != 0)
        v36 = DWORD1(v129);
    }
    if (v36 < v13)
    {
      do
      {
        LOWORD(v123) = 35;
        icu::UnicodeString::doAppend((uint64_t)&v128, (uint64_t)&v123, 0, 1);
        v37 = (unsigned __int16)v129 >> 5;
        if ((v129 & 0x8000u) != 0)
          v37 = DWORD1(v129);
      }
      while (v37 < v13);
    }
    goto LABEL_47;
  }
  if (v26 == 0.0)
  {
LABEL_47:
    LowerDisplayMagnitude = 0;
    goto LABEL_50;
  }
  if ((v110 & 0x80000000) == 0)
  {
    v28 = v26 + v26;
    v29 = 20.0;
    if (v26 + v26 > 1.0)
      goto LABEL_27;
    v30 = 0;
    do
    {
      v31 = v30;
      v28 = v28 * 10.0;
      v29 = v29 * 10.0;
      if (v30 >= v110)
        break;
      ++v30;
    }
    while (v28 <= 1.0);
    if (v31 < v110)
    {
LABEL_27:
      v26 = (double)(int)(v28 * 10.0) / v29;
      goto LABEL_28;
    }
    goto LABEL_47;
  }
LABEL_28:
  v127 = 0;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)&v123);
  icu::number::impl::DecimalQuantity::setToDouble((void **)&v123, v26);
  icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)&v123);
  LowerDisplayMagnitude = icu::number::impl::DecimalQuantity::getLowerDisplayMagnitude((icu::number::impl::DecimalQuantity *)&v123);
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)&v123, -LowerDisplayMagnitude);
  icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)&v123, v9 - LowerDisplayMagnitude);
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)&v123, (uint64_t)&v119);
  if ((SWORD4(v119) & 0x8000u) == 0)
    v33 = WORD4(v119) >> 5;
  else
    v33 = HIDWORD(v119);
  if ((_DWORD)v33
    && ((BYTE8(v119) & 2) != 0
      ? (v34 = (_WORD *)((unint64_t)&v119 | 0xA))
      : (v34 = (_WORD *)*((_QWORD *)&v120 + 1)),
        *v34 == 45))
  {
    v33 = (v33 - 1);
    v35 = 1;
  }
  else
  {
    v35 = 0;
  }
  icu::UnicodeString::doAppend((uint64_t)&v128, (const icu::UnicodeString *)&v119, v35, v33);
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v119);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)&v123);
LABEL_50:
  v39 = v129;
  v40 = (unsigned __int16)v129 >> 5;
  v41 = DWORD1(v129);
  if ((v129 & 0x8000u) != 0)
    v40 = DWORD1(v129);
  if (v40 + LowerDisplayMagnitude < v9)
  {
    do
    {
      LOWORD(v123) = 48;
      icu::UnicodeString::doReplace((uint64_t)&v128, 0, 0, (uint64_t)&v123, 0, 1);
      v39 = v129;
      v42 = (unsigned __int16)v129 >> 5;
      v41 = DWORD1(v129);
      if ((v129 & 0x8000u) != 0)
        v42 = DWORD1(v129);
    }
    while (v42 + LowerDisplayMagnitude < v9);
  }
  v43 = LowerDisplayMagnitude;
  if (v11 > -LowerDisplayMagnitude)
  {
    v44 = -LowerDisplayMagnitude;
    do
    {
      LOWORD(v123) = 48;
      icu::UnicodeString::doAppend((uint64_t)&v128, (uint64_t)&v123, 0, 1);
      ++v44;
    }
    while (v11 > v44);
    v43 = -v11;
    v39 = v129;
    v41 = DWORD1(v129);
  }
  v45 = (__int16)v39;
  v46 = v39 >> 5;
  if (v45 < 0)
    v46 = v41;
  v47 = uprv_max(v105, v46 + v43);
  if (v107 != 100)
    v47 = uprv_max(v107, v47);
  v108 = v24;
  v48 = v43;
  if (v110 != 100)
    v48 = uprv_min(-v110, v43);
  if (v47 > v48)
  {
    if (v102)
      v49 = 1;
    else
      v49 = v48 < 0;
    v50 = v49;
    if (v11 >= -LowerDisplayMagnitude)
      v51 = -LowerDisplayMagnitude;
    else
      v51 = v11;
    v52 = LowerDisplayMagnitude + v51 - v11 - v47;
    v53 = v47 - 1;
    v54 = v50 ^ 1;
    do
    {
      if ((__int16)v129 < 0)
      {
        v56 = DWORD1(v129);
        v57 = v52 + DWORD1(v129);
        if (v52 + DWORD1(v129) >= 0 && (int)v57 < SDWORD1(v129))
          goto LABEL_86;
      }
      else
      {
        v55 = __CFADD__(v52, (unsigned __int16)v129 >> 5);
        if (((v52 + ((unsigned __int16)v129 >> 5)) & 0x80000000) == 0 && v55)
        {
          v56 = (unsigned __int16)v129 >> 5;
          v57 = v43 - v47 + v56;
LABEL_86:
          if (v56 <= v57)
          {
            v59 = -1;
          }
          else
          {
            v58 = (char *)&v129 + 2;
            if ((v129 & 2) == 0)
              v58 = (char *)v130;
            v59 = *(_WORD *)&v58[2 * v57];
          }
          goto LABEL_92;
        }
      }
      v59 = 35;
LABEL_92:
      LOWORD(v123) = v59;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
      if (v53)
        v60 = 1;
      else
        v60 = v54;
      if ((v60 & 1) == 0)
      {
        if (*((_BYTE *)this + 67))
          v61 = 164;
        else
          v61 = 46;
        LOWORD(v123) = v61;
        icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
      }
      if (v114)
      {
        if (v53 + 1 >= 2 && v53 == v112)
        {
          LOWORD(v123) = 44;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
        }
        if (v53 > v112 && v113 >= 1 && !((v53 - v112) % v113))
        {
          LOWORD(v123) = 44;
          icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
        }
      }
      ++v52;
      --v47;
      v49 = v53-- <= v48;
    }
    while (!v49);
  }
  v62 = v108;
  if (v14 != uprv_min(100, -1))
  {
    LOWORD(v123) = 69;
    icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
    if (v103)
    {
      LOWORD(v123) = 43;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
    }
    if (v14 >= 1)
    {
      do
      {
        LOWORD(v123) = 48;
        icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
        --v14;
      }
      while (v14);
    }
  }
  v63 = *(unsigned __int16 *)(a3 + 8);
  v64 = (__int16)v63;
  v65 = v63 >> 5;
  if (v64 >= 0)
    v66 = v65;
  else
    v66 = *(unsigned int *)(a3 + 12);
  v67 = 34;
  if (v143)
  {
    v67 = 0;
    v68 = v133;
  }
  else
  {
    v68 = v142;
  }
  (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD))(v133[v67] + 32))(&v123, v68, 0);
  if ((SWORD4(v123) & 0x8000u) == 0)
    v69 = WORD4(v123) >> 5;
  else
    v69 = HIDWORD(v123);
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v123, 0, v69);
  icu::UnicodeString::~UnicodeString(v70, (icu::UnicodeString *)&v123);
  if (v106 < 1 || (_BYTE)v104)
    goto LABEL_142;
  v71 = *(unsigned __int16 *)(a3 + 8);
  v72 = (__int16)v71;
  v73 = v71 >> 5;
  if (v72 < 0)
    v73 = *(_DWORD *)(a3 + 12);
  if (v106 > v73)
  {
    do
    {
      LOWORD(v123) = 35;
      icu::UnicodeString::doReplace(a3, v108, 0, (uint64_t)&v123, 0, 1);
      v66 = (v66 + 1);
      v74 = *(unsigned __int16 *)(a3 + 8);
      v75 = (__int16)v74;
      v76 = v74 >> 5;
      if (v75 < 0)
        v76 = *(_DWORD *)(a3 + 12);
    }
    while (v106 > v76);
  }
  switch(HIDWORD(v104))
  {
    case 0:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v118, (UChar **)v144);
      v77 = icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v118, a3, 0);
      icu::UnicodeString::~UnicodeString(v78, (icu::UnicodeString *)v118);
      LOWORD(v123) = 42;
      v79 = a3;
      v80 = 0;
      goto LABEL_135;
    case 1:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v117, (UChar **)v144);
      v77 = icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v117, a3, v108);
      icu::UnicodeString::~UnicodeString(v81, (icu::UnicodeString *)v117);
      LOWORD(v123) = 42;
      v79 = a3;
      v80 = v108;
LABEL_135:
      icu::UnicodeString::doReplace(v79, v80, 0, (uint64_t)&v123, 0, 1);
      v62 = v77 + 1 + v108;
      LODWORD(v66) = v77 + 1 + v66;
      break;
    case 2:
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v116, (UChar **)v144);
      icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v116, a3, v66);
      icu::UnicodeString::~UnicodeString(v82, (icu::UnicodeString *)v116);
      LOWORD(v123) = 42;
      icu::UnicodeString::doReplace(a3, v66, 0, (uint64_t)&v123, 0, 1);
      break;
    case 3:
      LOWORD(v123) = 42;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v115, (UChar **)v144);
      v83 = *(unsigned __int16 *)(a3 + 8);
      v84 = (__int16)v83;
      v85 = v83 >> 5;
      if (v84 >= 0)
        v86 = v85;
      else
        v86 = *(unsigned int *)(a3 + 12);
      icu::number::impl::PatternStringUtils::escapePaddingString((uint64_t)v115, a3, v86);
      icu::UnicodeString::~UnicodeString(v87, (icu::UnicodeString *)v115);
      break;
    default:
      break;
  }
  v88 = (void *)*(unsigned int *)a2;
  if ((int)v88 <= 0)
  {
LABEL_142:
    v89 = 34;
    if (v143)
    {
      v89 = 0;
      v90 = v133;
    }
    else
    {
      v90 = v142;
    }
    if ((*(unsigned int (**)(_QWORD *))(v133[v89] + 56))(v90))
    {
      LOWORD(v123) = 59;
      icu::UnicodeString::doAppend(a3, (uint64_t)&v123, 0, 1);
      if (v143)
        v91 = 0;
      else
        v91 = 34;
      if (v143)
        v92 = v133;
      else
        v92 = v142;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(v133[v91] + 32))(&v123, v92, 768);
      if ((SWORD4(v123) & 0x8000u) == 0)
        v93 = WORD4(v123) >> 5;
      else
        v93 = HIDWORD(v123);
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v123, 0, v93);
      icu::UnicodeString::~UnicodeString(v94, (icu::UnicodeString *)&v123);
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v123, (UChar **)a3);
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v123, v62, (v66 - v62));
      if (v143)
        v95 = 0;
      else
        v95 = 34;
      if (v143)
        v96 = v133;
      else
        v96 = v142;
      (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(v133[v95] + 32))(&v119, v96, 512);
      if ((SWORD4(v119) & 0x8000u) == 0)
        v97 = WORD4(v119) >> 5;
      else
        v97 = HIDWORD(v119);
      icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)&v119, 0, v97);
      icu::UnicodeString::~UnicodeString(v98, (icu::UnicodeString *)&v119);
      icu::UnicodeString::~UnicodeString(v99, (icu::UnicodeString *)&v123);
    }
  }
  icu::UnicodeString::~UnicodeString(v88, (icu::UnicodeString *)&v128);
  sub_18BCC1F2C(v133);
  return icu::UnicodeString::~UnicodeString(v100, (icu::UnicodeString *)v144);
}

uint64_t icu::number::impl::PatternStringUtils::escapePaddingString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unint64_t i;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v25;
  __int16 v26;

  v6 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
  {
    if (*(_DWORD *)(a1 + 12))
      goto LABEL_9;
  }
  else if (v6 >> 5)
  {
    goto LABEL_9;
  }
  icu::UnicodeString::unBogus(a1);
  if (*(__int16 *)(a1 + 8) < 0)
    v7 = *(unsigned int *)(a1 + 12);
  else
    v7 = *(unsigned __int16 *)(a1 + 8) >> 5;
  icu::UnicodeString::doReplace(a1, 0, v7, (uint64_t)&unk_18BE28C66, 0, 0xFFFFFFFFLL);
  LOWORD(v6) = *(_WORD *)(a1 + 8);
LABEL_9:
  v8 = *(unsigned __int16 *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 12);
  if ((v6 & 0x8000) == 0)
  {
    if ((v6 & 0xFFE0) == 0x20)
      goto LABEL_11;
    goto LABEL_17;
  }
  if (*(_DWORD *)(a1 + 12) != 1)
  {
LABEL_17:
    v25 = *(_DWORD *)(a2 + 12);
    v26 = 39;
    v14 = 1;
    icu::UnicodeString::doReplace(a2, a3, 0, (uint64_t)&v26, 0, 1);
    for (i = 0; ; ++i)
    {
      if (*(__int16 *)(a1 + 8) < 0)
      {
        if ((uint64_t)i >= *(int *)(a1 + 12))
        {
LABEL_31:
          v26 = 39;
          icu::UnicodeString::doReplace(a2, (v14 + a3), 0, (uint64_t)&v26, 0, 1);
          v9 = v25;
          goto LABEL_33;
        }
        v16 = *(unsigned int *)(a1 + 12);
      }
      else
      {
        if (i >= (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5)
          goto LABEL_31;
        v16 = (unint64_t)*(unsigned __int16 *)(a1 + 8) >> 5;
      }
      if (v16 <= i)
      {
        LOWORD(v18) = -1;
      }
      else
      {
        v17 = a1 + 10;
        if ((*(_WORD *)(a1 + 8) & 2) == 0)
          v17 = *(_QWORD *)(a1 + 24);
        v18 = *(unsigned __int16 *)(v17 + 2 * i);
        if (v18 == 39)
        {
          icu::UnicodeString::doReplace(a2, (v14 + a3), 0, (uint64_t)"'", 0, 0xFFFFFFFFLL);
          v19 = 2;
          goto LABEL_30;
        }
      }
      v26 = v18;
      v19 = 1;
      icu::UnicodeString::doReplace(a2, (v14 + a3), 0, (uint64_t)&v26, 0, 1);
LABEL_30:
      v14 += v19;
    }
  }
LABEL_11:
  if (icu::UnicodeString::doCompare(a1, 0, 1, (uint64_t)L"'", 0, -1))
  {
    v10 = *(unsigned __int16 *)(a1 + 8);
    v11 = (__int16)v10;
    v12 = v10 >> 5;
    if (v11 >= 0)
      v13 = v12;
    else
      v13 = *(unsigned int *)(a1 + 12);
    icu::UnicodeString::doReplace((icu::UnicodeString *)a2, a3, 0, (const icu::UnicodeString *)a1, 0, v13);
  }
  else
  {
    icu::UnicodeString::doReplace(a2, a3, 0, (uint64_t)"'", 0, 0xFFFFFFFFLL);
  }
LABEL_33:
  if ((v8 & 0x8000u) == 0)
    v20 = v8 >> 5;
  else
    v20 = v9;
  v21 = *(unsigned __int16 *)(a2 + 8);
  v22 = (__int16)v21;
  v23 = v21 >> 5;
  if (v22 < 0)
    v23 = *(_DWORD *)(a2 + 12);
  return v23 - v20;
}

void *icu::number::impl::PatternStringUtils::convertLocalized@<X0>(icu::number::impl::PatternStringUtils *this@<X0>, UChar **a2@<X1>, const icu::DecimalFormatSymbols *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v6;
  uint64_t i;
  _BYTE *v11;
  uint64_t v12;
  icu::UnicodeString *v13;
  void *v14;
  uint64_t v15;
  UChar **v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  UChar **v28;
  UChar **v29;
  UChar **v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  UChar **v34;
  uint64_t j;
  _BYTE *v36;
  int32_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  void *v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  char *v46;
  int v47;
  unsigned int v48;
  uint64_t k;
  _BYTE *v50;
  unsigned int v51;
  int32_t v52;
  int v53;
  unsigned int v54;
  void *v55;
  uint64_t m;
  _BYTE *v57;
  unsigned int v58;
  int32_t v59;
  int v60;
  unsigned int v61;
  void *v62;
  void *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t n;
  void *result;
  __int16 v73;
  unsigned __int16 v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[2688];
  uint64_t v81;

  v6 = a3;
  v81 = *MEMORY[0x1E0C80C00];
  bzero(v80, 0xA80uLL);
  for (i = 0; i != 2688; i += 64)
  {
    v11 = &v80[i];
    *(_QWORD *)v11 = off_1E2256B38;
    *((_WORD *)v11 + 4) = 2;
  }
  v12 = v6 ^ 1;
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)L"%");
  v13 = (icu::UnicodeString *)&v80[64 * v12];
  icu::UnicodeString::operator=(v13, (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v76);
  v15 = v6;
  v16 = (UChar **)&v80[64 * (unint64_t)v6];
  icu::UnicodeString::operator=(v16, a2 + 25);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"0 ");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 128], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 128], a2 + 97);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)".");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 256], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 256], a2 + 1);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)",");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 384], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 384], a2 + 9);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)L"-");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 512], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 512], a2 + 49);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"+");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 640], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 640], a2 + 57);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)";");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 768], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 768], a2 + 17);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"@");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 896], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 896], a2 + 129);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"E");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 1024], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 1024], a2 + 89);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"*");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 1152], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 1152], a2 + 105);
  icu::UnicodeString::UnicodeString((uint64_t)&v76, (uint64_t)"#");
  icu::UnicodeString::operator=((icu::UnicodeString *)&v80[64 * v12 + 1280], (icu::UnicodeString *)&v76);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v76);
  icu::UnicodeString::operator=((UChar **)&v80[64 * v15 + 1280], a2 + 41);
  v27 = 0;
  v28 = a2 + 33;
  v29 = v16 + 176;
  v30 = a2 + 137;
  v31 = 48;
  do
  {
    v32 = (char *)v13 + v27;
    if (*(__int16 *)((_BYTE *)v13 + v27 + 1416) < 0)
      v33 = *((unsigned int *)v32 + 355);
    else
      v33 = *(unsigned __int16 *)((char *)v13 + v27 + 1416) >> 5;
    icu::UnicodeString::replace((icu::UnicodeString *)(v32 + 1408), 0, v33, v31);
    if (v27)
      v34 = v30;
    else
      v34 = v28;
    icu::UnicodeString::operator=(&v29[v27 / 8], v34);
    ++v31;
    v27 += 128;
    v30 += 8;
  }
  while (v27 != 1280);
  for (j = 0; j != 2688; j += 128)
  {
    v36 = &v80[64 * v15];
    icu::UnicodeString::UnicodeString((uint64_t)&v76, 39);
    icu::UnicodeString::UnicodeString((uint64_t)&v73, 8217);
    if (*(__int16 *)&v36[j + 8] < 0)
      v37 = *(_DWORD *)&v36[j + 12];
    else
      v37 = *(unsigned __int16 *)&v36[j + 8] >> 5;
    if ((SWORD4(v76) & 0x8000u) == 0)
      v38 = WORD4(v76) >> 5;
    else
      v38 = HIDWORD(v76);
    v39 = v74 >> 5;
    if ((v74 & 0x8000u) != 0)
      v39 = v75;
    icu::UnicodeString::findAndReplace((icu::UnicodeString *)&v36[j], 0, v37, (const icu::UnicodeString *)&v76, 0, v38, (const icu::UnicodeString *)&v73, 0, v39);
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v73);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v76);
  }
  v42 = 0;
  v43 = 0;
  *(_OWORD *)(a5 + 8) = 0u;
  *(_QWORD *)(a5 + 56) = 0;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_QWORD *)a5 = off_1E2256B38;
  *(_WORD *)(a5 + 8) = 2;
  while (1)
  {
    v44 = *((unsigned __int16 *)this + 4);
    if (*((__int16 *)this + 4) < 0)
      break;
    if (v43 >= (int)(v44 >> 5))
      goto LABEL_93;
    v45 = v44 >> 5;
LABEL_26:
    if (v45 <= v43)
    {
      LOWORD(v47) = -1;
    }
    else
    {
      if ((v44 & 2) != 0)
        v46 = (char *)this + 10;
      else
        v46 = (char *)*((_QWORD *)this + 3);
      v47 = *(unsigned __int16 *)&v46[2 * v43];
      if (v47 == 39)
      {
        v48 = v42;
        v42 = 3;
        switch(v48)
        {
          case 0u:
            LOWORD(v76) = 39;
            v42 = 1;
            goto LABEL_73;
          case 1u:
            LOWORD(v76) = 39;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1);
            v42 = 0;
            break;
          case 2u:
            goto LABEL_88;
          case 3u:
            LOWORD(v76) = 39;
            v42 = 1;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1);
            LOWORD(v76) = 39;
            goto LABEL_73;
          case 4u:
            v42 = 5;
            break;
          default:
            LOWORD(v76) = 39;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1);
            LOWORD(v76) = 39;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1);
            v42 = 4;
            break;
        }
        goto LABEL_88;
      }
    }
    if (v42 <= 4 && ((1 << v42) & 0x19) != 0)
    {
      for (k = 0; k != 2688; k += 128)
      {
        v50 = &v80[k];
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v51 = *(unsigned __int16 *)&v80[k + 8];
        if ((v51 & 0x8000) != 0)
          v52 = *((_DWORD *)v50 + 3);
        else
          v52 = v51 >> 5;
        icu::UnicodeString::tempSubString(this, v43, v52, (icu::UnicodeString *)&v76);
        if ((BYTE8(v76) & 1) != 0)
        {
          v55 = (void *)*((unsigned __int16 *)v50 + 4);
          if ((v55 & 1) != 0)
            goto LABEL_78;
        }
        else
        {
          if ((SWORD4(v76) & 0x8000u) == 0)
            v53 = WORD4(v76) >> 5;
          else
            v53 = HIDWORD(v76);
          v54 = *((unsigned __int16 *)v50 + 4);
          if ((v54 & 0x8000u) == 0)
            v55 = (void *)(v54 >> 5);
          else
            v55 = (void *)*(unsigned int *)&v80[k + 12];
          if ((v54 & 1) == 0
            && v53 == (_DWORD)v55
            && icu::UnicodeString::doEquals((icu::UnicodeString *)&v76, (const icu::UnicodeString *)&v80[k], v53))
          {
            LODWORD(v55) = *(unsigned __int16 *)&v80[k + 8];
LABEL_78:
            if (((unsigned __int16)v55 & 0x8000) != 0)
              v64 = *(_DWORD *)&v80[k + 12];
            else
              v64 = v55 >> 5;
            if (v42 - 3 <= 1)
            {
              v73 = 39;
              icu::UnicodeString::doAppend(a5, (uint64_t)&v73, 0, 1);
              v42 = 0;
            }
            v43 = v43 + v64 - 1;
            v65 = *(unsigned __int16 *)&v80[k + 72];
            v66 = (__int16)v65;
            v67 = v65 >> 5;
            if (v66 >= 0)
              v68 = v67;
            else
              v68 = *(unsigned int *)&v80[k + 76];
            icu::UnicodeString::doAppend(a5, (const icu::UnicodeString *)&v80[k + 64], 0, v68);
LABEL_87:
            icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&v76);
            goto LABEL_88;
          }
        }
        icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v76);
      }
      for (m = 0; m != 2688; m += 128)
      {
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v57 = &v80[m];
        v58 = *(unsigned __int16 *)&v80[m + 72];
        if ((v58 & 0x8000) != 0)
          v59 = *((_DWORD *)v57 + 19);
        else
          v59 = v58 >> 5;
        icu::UnicodeString::tempSubString(this, v43, v59, (icu::UnicodeString *)&v76);
        if ((BYTE8(v76) & 1) != 0)
        {
          v62 = (void *)*((unsigned __int16 *)v57 + 36);
          if ((v62 & 1) != 0)
            goto LABEL_75;
        }
        else
        {
          if ((SWORD4(v76) & 0x8000u) == 0)
            v60 = WORD4(v76) >> 5;
          else
            v60 = HIDWORD(v76);
          v61 = *((unsigned __int16 *)v57 + 36);
          if ((v61 & 0x8000u) == 0)
            v62 = (void *)(v61 >> 5);
          else
            v62 = (void *)*(unsigned int *)&v80[m + 76];
          if ((v61 & 1) == 0
            && v60 == (_DWORD)v62
            && icu::UnicodeString::doEquals((icu::UnicodeString *)&v76, (const icu::UnicodeString *)(v57 + 64), v60))
          {
LABEL_75:
            if (!v42)
            {
              v73 = 39;
              icu::UnicodeString::doAppend(a5, (uint64_t)&v73, 0, 1);
              v42 = 4;
            }
            v73 = v47;
            icu::UnicodeString::doAppend(a5, (uint64_t)&v73, 0, 1);
            goto LABEL_87;
          }
        }
        icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v76);
      }
      if (v42 - 3 <= 1)
      {
        LOWORD(v76) = 39;
        icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1);
        v42 = 0;
      }
      LOWORD(v76) = v47;
LABEL_73:
      icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1);
    }
    else
    {
      LOWORD(v76) = v47;
      icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1);
      v42 = 2;
    }
LABEL_88:
    ++v43;
  }
  v45 = *((_DWORD *)this + 3);
  if (v43 < v45)
    goto LABEL_26;
LABEL_93:
  v69 = v42 - 3;
  if (v69 >= 2)
  {
    if (v42)
    {
      v69 = 65799;
      *a4 = 65799;
    }
  }
  else
  {
    LOWORD(v76) = 39;
    icu::UnicodeString::doAppend(a5, (uint64_t)&v76, 0, 1);
  }
  for (n = 2624; n != -64; n -= 64)
    result = icu::UnicodeString::~UnicodeString((void *)v69, (icu::UnicodeString *)&v80[n]);
  return result;
}

uint64_t icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(uint64_t a1, int a2, int a3, int a4, int a5, unsigned __int8 a6, int a7, uint64_t a8)
{
  int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const __int16 *v23;
  const __int16 *v24;
  const char *v25;
  const __int16 *v26;
  uint64_t result;
  int v28;
  __int16 v29;
  int i;
  char v31;
  int32_t v32;
  int v33;
  unsigned int v34;
  UChar v35;
  __int16 v36;

  if (a3 == 1)
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) ^ 1;
  else
    v16 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1)
    && (a3 == 2 || ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & (v16 | a4)) == 1))
  {
    v17 = 512;
    v18 = 1;
  }
  else
  {
    v18 = 0;
    v17 = 0;
  }
  if (a2)
    v17 |= 0x100u;
  if (a5 == 8)
    v19 = 0;
  else
    v19 = a5;
  v20 = v17 | v19;
  v21 = v16 | a4;
  if (a3 == 2)
    v21 = 1;
  if (!a2)
    v21 = 0;
  if ((v18 & 1) != 0)
    v22 = 0;
  else
    v22 = v21;
  v23 = L"-";
  if (v16)
    v23 = (const __int16 *)"+";
  v24 = L"~+";
  v25 = "~";
  if (a3 == 2)
    v25 = "~";
  if ((v16 & 1) == 0)
    v24 = (const __int16 *)v25;
  if (a4)
    v26 = v24;
  else
    v26 = v23;
  v34 = v20;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v28 = result + v22;
  if ((*(_WORD *)(a8 + 8) & 1) != 0)
    v29 = 2;
  else
    v29 = *(_WORD *)(a8 + 8) & 0x1F;
  *(_WORD *)(a8 + 8) = v29;
  if (v28 >= 1)
  {
    for (i = 0; i != v28; ++i)
    {
      if (i)
        v31 = 0;
      else
        v31 = v22;
      if ((v31 & 1) != 0
        || (result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, v34, ((v22 << 31 >> 31) + i)), (_DWORD)result == 45))
      {
        v32 = u_strlen((const UChar *)v26);
        result = *(unsigned __int16 *)v26;
        if (v32 != 1)
        {
          v35 = *v26;
          icu::UnicodeString::doAppend(a8, (uint64_t)&v35, 0, 1);
          result = *((unsigned __int16 *)v26 + 1);
        }
      }
      if ((a6 & ((_DWORD)result == 37)) != 0)
        v33 = 8240;
      else
        v33 = result;
      if (!a7 || v33 != 164)
      {
        v36 = v33;
        result = icu::UnicodeString::doAppend(a8, (uint64_t)&v36, 0, 1);
      }
    }
  }
  return result;
}

uint64_t icu::number::impl::PatternStringUtils::resolveSignDisplay(int a1, unsigned int a2)
{
  uint64_t result;
  unsigned int *v4;

  result = 0;
  switch(a1)
  {
    case 0:
    case 3:
      if (a2 >= 4)
        goto LABEL_11;
      v4 = (unsigned int *)&unk_18BE28C90;
      break;
    case 1:
    case 4:
      if (a2 >= 4)
        goto LABEL_11;
      v4 = (unsigned int *)&unk_18BE28CA0;
      break;
    case 2:
      return result;
    case 5:
    case 6:
      if (a2 >= 4)
        goto LABEL_11;
      v4 = (unsigned int *)&unk_18BE28CB0;
      break;
    case 7:
    case 8:
      if (a2 >= 4)
        goto LABEL_11;
      v4 = (unsigned int *)&unk_18BE28CC0;
      break;
    default:
LABEL_11:
      abort();
  }
  return v4[a2];
}

void sub_18BD2589C(void **a1)
{
  void *v1;

  sub_18BD0C994(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD258B0(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  _BYTE *v6;
  void *v7;
  UErrorCode v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  UErrorCode v22;
  _OWORD v23[4];
  uint64_t v24;
  int v25;
  __int16 v26;
  _BYTE v27[54];
  void *v28[7];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  memset(&v28[1], 0, 48);
  v29 = 0;
  v28[0] = (char *)&v28[1] + 5;
  LODWORD(v28[1]) = 40;
  v22 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v25);
  v6 = 0;
  if ((v26 & 0x11) == 0)
  {
    if ((v26 & 2) != 0)
      v6 = v27;
    else
      v6 = *(_BYTE **)&v27[14];
  }
  v21 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v23, 0, &v21);
  icu::CharString::appendInvariantChars((icu::CharString *)v28, (const icu::UnicodeString *)v23, &v22);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v23);
  v20 = v21;
  icu::UnicodeString::~UnicodeString(&v20, (icu::UnicodeString *)&v25);
  v8 = v22;
  if (v22 == U_INVARIANT_CONVERSION_ERROR)
  {
    v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }
  if (v22 > U_ZERO_ERROR)
    goto LABEL_8;
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v23);
  v25 = 0;
  icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v23, (const char *)v28[0], v29, (UErrorCode *)&v25);
  if (v25 > 0
    || (icu::number::impl::DecimalQuantity::isNaN((icu::number::impl::DecimalQuantity *)v23) & 1) != 0
    || icu::number::impl::DecimalQuantity::isInfinite((icu::number::impl::DecimalQuantity *)v23))
  {
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
  }
  else
  {
    v9 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v23);
    v10 = v9;
    v11 = v29;
    if ((int)v29 >= 1)
    {
      v12 = (unsigned __int8 *)v28[0];
      while (1)
      {
        v13 = *v12++;
        if (v13 == 46)
          break;
        if (!--v11)
          goto LABEL_23;
      }
      v14 = 1 - v11;
      icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v23, v9 + v11 - 1);
      v10 = v14;
    }
LABEL_23:
    v15 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v23, 0);
    if (v15 == 5)
      v16 = 7;
    else
      v16 = 5;
    if (v15 == 1)
      v16 = 6;
    if ((__int16)v10 <= 0)
      v17 = -v10;
    else
      LOWORD(v17) = 0;
    if (v15)
      v18 = v16;
    else
      v18 = 10;
    *(_DWORD *)a2 = v18;
    v19 = 65810;
    if (v15)
      v19 = v15;
    *(_QWORD *)(a2 + 8) = v19;
    *(_WORD *)(a2 + 16) = v10;
    if (v15)
      LOWORD(v19) = v17;
    *(_WORD *)(a2 + 18) = v19;
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 24) = 0;
  }
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
LABEL_9:
  if (BYTE4(v28[1]))
    uprv_free(v28[0]);
}

uint64_t icu::number::Precision::incrementExact@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;

  if (this)
  {
    if (this == 5)
      v3 = 7;
    else
      v3 = 5;
    if (this == 1)
      v3 = 6;
    *(_QWORD *)(a3 + 8) = this;
    *(_WORD *)(a3 + 16) = a2;
    if (a2 <= 0)
      v4 = -a2;
    else
      LOWORD(v4) = 0;
    *(_WORD *)(a3 + 18) = v4;
    *(_DWORD *)(a3 + 20) = 0;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = 65810;
    v3 = 10;
  }
  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

void icu::number::Precision::unlimited(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 13) = 0;
  *(_DWORD *)(a1 + 24) = 0;
}

double icu::number::Precision::integer@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 2;
  result = NAN;
  *(_QWORD *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t icu::number::Precision::constructFraction@<X0>(uint64_t this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 2;
  *(_WORD *)(a3 + 8) = this;
  *(_WORD *)(a3 + 10) = a2;
  *(_DWORD *)(a3 + 12) = -1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::fixedFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    v2 = 10;
  }
  else
  {
    *(_WORD *)(a2 + 8) = this;
    *(_WORD *)(a2 + 10) = this;
    *(_DWORD *)(a2 + 12) = -1;
    *(_QWORD *)(a2 + 16) = 0;
    v2 = 2;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    v2 = 10;
  }
  else
  {
    *(_WORD *)(a2 + 8) = this;
    *(_DWORD *)(a2 + 10) = -1;
    *(_WORD *)(a2 + 14) = -1;
    *(_QWORD *)(a2 + 16) = 0;
    v2 = 2;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::maxFraction@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if (this > 0x3E7)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    v2 = 10;
  }
  else
  {
    *(_WORD *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 10) = this;
    *(_DWORD *)(a2 + 12) = -1;
    *(_QWORD *)(a2 + 16) = 0;
    v2 = 2;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minMaxFraction@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  if ((int)this > a2 || (this & 0x80000000) != 0 || a2 > 999)
  {
    *(_DWORD *)(a3 + 8) = 65810;
    v3 = 10;
  }
  else
  {
    *(_WORD *)(a3 + 8) = this;
    *(_WORD *)(a3 + 10) = a2;
    *(_DWORD *)(a3 + 12) = -1;
    *(_QWORD *)(a3 + 16) = 0;
    v3 = 2;
  }
  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::fixedSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    v2 = 10;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = this;
    *(_WORD *)(a2 + 14) = this;
    *(_QWORD *)(a2 + 16) = 0;
    v2 = 3;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::constructSignificant@<X0>(uint64_t this@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 3;
  *(_DWORD *)(a3 + 8) = -1;
  *(_WORD *)(a3 + 12) = this;
  *(_WORD *)(a3 + 14) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    v2 = 10;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = this;
    *(_WORD *)(a2 + 14) = -1;
    *(_QWORD *)(a2 + 16) = 0;
    v2 = 3;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::maxSignificantDigits@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;

  if ((this - 1) > 0x3E6)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    v2 = 10;
  }
  else
  {
    *(_DWORD *)(a2 + 8) = -1;
    *(_WORD *)(a2 + 12) = 1;
    *(_WORD *)(a2 + 14) = this;
    *(_QWORD *)(a2 + 16) = 0;
    v2 = 3;
  }
  *(_DWORD *)a2 = v2;
  *(_DWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::minMaxSignificantDigits@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  if ((int)this > a2 || (int)this < 1 || a2 > 999)
  {
    *(_DWORD *)(a3 + 8) = 65810;
    v3 = 10;
  }
  else
  {
    *(_DWORD *)(a3 + 8) = -1;
    *(_WORD *)(a3 + 12) = this;
    *(_WORD *)(a3 + 14) = a2;
    *(_QWORD *)(a3 + 16) = 0;
    v3 = 3;
  }
  *(_DWORD *)a3 = v3;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

__n128 icu::number::Precision::trailingZeroDisplay@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(__n128 *)(a3 + 16) = result;
  *(_DWORD *)(a3 + 24) = a2;
  return result;
}

void icu::number::Precision::increment(double a1@<D0>, uint64_t a2@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _OWORD v10[4];
  uint64_t v11;

  if (a1 <= 0.0)
  {
    *(_DWORD *)(a2 + 8) = 65810;
    v8 = 10;
  }
  else
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
    icu::number::impl::DecimalQuantity::setToDouble((void **)v10, a1);
    icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v10);
    v5 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v10);
    v6 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v10, 0);
    if (v6 == 5)
      v7 = 7;
    else
      v7 = 5;
    if (v6 == 1)
      v8 = 6;
    else
      v8 = v7;
    *(_QWORD *)(a2 + 8) = v6;
    *(_WORD *)(a2 + 16) = v5;
    if ((__int16)v5 <= 0)
      v9 = -v5;
    else
      LOWORD(v9) = 0;
    *(_WORD *)(a2 + 18) = v9;
    *(_DWORD *)(a2 + 20) = 0;
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
  }
  *(_DWORD *)a2 = v8;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t icu::number::Precision::constructIncrement@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  if (this == 5)
    v3 = 7;
  else
    v3 = 5;
  if (this == 5)
    v4 = 5;
  else
    v4 = this;
  if (this == 1)
    v5 = 6;
  else
    v5 = v3;
  if (this == 1)
    v6 = 1;
  else
    v6 = v4;
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_WORD *)(a3 + 16) = a2;
  if (a2 <= 0)
    v7 = -a2;
  else
    LOWORD(v7) = 0;
  *(_WORD *)(a3 + 18) = v7;
  *(_DWORD *)(a3 + 20) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return this;
}

uint64_t icu::number::Precision::currency@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 12) = 0;
  *(_DWORD *)a2 = 8;
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t icu::number::Precision::constructCurrency@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 12) = 0;
  *(_DWORD *)a2 = 8;
  *(_DWORD *)(a2 + 8) = result;
  return result;
}

uint64_t icu::number::FractionPrecision::withSignificantDigits@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  __int128 v5;
  int v6;

  if (*(_DWORD *)result == 10)
  {
    v5 = *(_OWORD *)(result + 16);
    *(_OWORD *)a5 = *(_OWORD *)result;
    *(_OWORD *)(a5 + 16) = v5;
  }
  else if (a2 < 1 || a3 < a2 || a3 > 999)
  {
    *(_DWORD *)a5 = 10;
    *(_DWORD *)(a5 + 24) = 0;
    *(_DWORD *)(a5 + 8) = 65810;
  }
  else
  {
    v6 = *(_DWORD *)(result + 8);
    *(_WORD *)(a5 + 21) = *(_WORD *)(result + 21);
    *(_BYTE *)(a5 + 23) = *(_BYTE *)(result + 23);
    *(_DWORD *)a5 = 4;
    *(_DWORD *)(a5 + 8) = v6;
    *(_WORD *)(a5 + 12) = a2;
    *(_WORD *)(a5 + 14) = a3;
    *(_DWORD *)(a5 + 16) = a4;
    *(_BYTE *)(a5 + 20) = 0;
    *(_DWORD *)(a5 + 24) = 0;
  }
  return result;
}

uint64_t icu::number::Precision::constructFractionSignificant@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, __int16 a3@<W2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int v6;

  v6 = *(_DWORD *)(result + 8);
  *(_WORD *)(a6 + 21) = *(_WORD *)(result + 21);
  *(_BYTE *)(a6 + 23) = *(_BYTE *)(result + 23);
  *(_DWORD *)a6 = 4;
  *(_DWORD *)(a6 + 8) = v6;
  *(_WORD *)(a6 + 12) = a2;
  *(_WORD *)(a6 + 14) = a3;
  *(_DWORD *)(a6 + 16) = a4;
  *(_BYTE *)(a6 + 20) = a5;
  *(_DWORD *)(a6 + 24) = 0;
  return result;
}

uint64_t icu::number::FractionPrecision::withMinDigits@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  int v4;

  if (*(_DWORD *)this == 10)
  {
    v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }
  else if ((a2 - 1) > 0x3E6)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }
  else
  {
    v4 = *(_DWORD *)(this + 8);
    *(_WORD *)(a3 + 21) = *(_WORD *)(this + 21);
    *(_BYTE *)(a3 + 23) = *(_BYTE *)(this + 23);
    *(_DWORD *)a3 = 4;
    *(_DWORD *)(a3 + 8) = v4;
    *(_WORD *)(a3 + 12) = 1;
    *(_WORD *)(a3 + 14) = a2;
    *(_DWORD *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 20) = 1;
    *(_DWORD *)(a3 + 24) = 0;
  }
  return this;
}

uint64_t icu::number::FractionPrecision::withMaxDigits@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;
  int v4;

  if (*(_DWORD *)this == 10)
  {
    v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }
  else if ((a2 - 1) > 0x3E6)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }
  else
  {
    v4 = *(_DWORD *)(this + 8);
    *(_WORD *)(a3 + 21) = *(_WORD *)(this + 21);
    *(_BYTE *)(a3 + 23) = *(_BYTE *)(this + 23);
    *(_DWORD *)a3 = 4;
    *(_DWORD *)(a3 + 8) = v4;
    *(_WORD *)(a3 + 12) = 1;
    *(_WORD *)(a3 + 14) = a2;
    *(_DWORD *)(a3 + 16) = 1;
    *(_BYTE *)(a3 + 20) = 1;
    *(_DWORD *)(a3 + 24) = 0;
  }
  return this;
}

void icu::number::Precision::withCurrency(icu::number::Precision *this@<X0>, const UChar *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v6;
  const UChar *v8;
  double v9;
  double v10;
  unsigned int DefaultFractionDigitsForUsage;
  BOOL v12;
  int v13;
  int v14;
  int v15;

  if (*(_DWORD *)this == 10)
  {
    v6 = *((_OWORD *)this + 1);
    *(_OWORD *)a4 = *(_OWORD *)this;
    *(_OWORD *)(a4 + 16) = v6;
  }
  else
  {
    v8 = a2 + 10;
    ucurr_getRoundingIncrementForUsage(a2 + 10, *((_DWORD *)this + 2), (int *)a3);
    v10 = v9;
    DefaultFractionDigitsForUsage = ucurr_getDefaultFractionDigitsForUsage(v8, *((_DWORD *)this + 2), (int *)a3);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    if (v10 == 0.0)
    {
      v12 = DefaultFractionDigitsForUsage >= 0x3E8;
      if (DefaultFractionDigitsForUsage >= 0x3E8)
        v13 = 10;
      else
        v13 = 2;
      *(_DWORD *)a4 = v13;
      v14 = (unsigned __int16)DefaultFractionDigitsForUsage | ((unsigned __int16)DefaultFractionDigitsForUsage << 16);
      if (v12)
        v15 = 65810;
      else
        v15 = v14;
      *(_DWORD *)(a4 + 8) = v15;
      *(_DWORD *)(a4 + 12) = -1;
      *(_QWORD *)(a4 + 16) = 0;
    }
    else
    {
      icu::number::Precision::increment(v10, a4);
    }
    *(_DWORD *)(a4 + 24) = *((_DWORD *)this + 6);
  }
}

double icu::number::CurrencyPrecision::withCurrency@<D0>(icu::number::CurrencyPrecision *this@<X0>, const UChar *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  UErrorCode v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  UErrorCode v9;

  v9 = U_ZERO_ERROR;
  v7 = 0u;
  v8 = 0u;
  icu::number::Precision::withCurrency(this, a2, &v9, (uint64_t)&v7);
  v5 = v9;
  if (v9 < U_ILLEGAL_ARGUMENT_ERROR)
  {
    result = *(double *)&v7;
    v6 = v8;
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 16) = v6;
  }
  else
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = v5;
  }
  return result;
}

uint64_t icu::number::IncrementPrecision::withMinFraction@<X0>(uint64_t this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v3;

  if (*(_DWORD *)this == 10)
  {
    v3 = *(_OWORD *)(this + 16);
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_OWORD *)(a3 + 16) = v3;
  }
  else if (a2 > 0x3E7)
  {
    *(_DWORD *)a3 = 10;
    *(_DWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 8) = 65810;
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)this;
    *(_WORD *)(a3 + 16) = *(_WORD *)(this + 16);
    *(_QWORD *)(a3 + 20) = *(_QWORD *)(this + 20);
    *(_DWORD *)(a3 + 28) = *(_DWORD *)(this + 28);
    *(_WORD *)(a3 + 18) = a2;
  }
  return this;
}

uint64_t icu::number::Precision::constructIncrementSignificant@<X0>(uint64_t this@<X0>, double a2@<D0>, __int16 a3@<W1>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 9;
  *(double *)(a4 + 8) = a2;
  *(_WORD *)(a4 + 16) = this;
  *(_WORD *)(a4 + 18) = a3;
  *(_DWORD *)(a4 + 20) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  return this;
}

uint64_t sub_18BD262EC(uint64_t a1, icu::number::Precision *this, int a3, const UChar *a4, UErrorCode *a5)
{
  __int128 v6;
  _OWORD v8[2];

  v6 = *((_OWORD *)this + 1);
  *(_OWORD *)a1 = *(_OWORD *)this;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 36) = 0;
  if (*(_DWORD *)this == 8)
  {
    icu::number::Precision::withCurrency(this, a4, a5, (uint64_t)v8);
    *(_OWORD *)a1 = v8[0];
    *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)v8 + 12);
  }
  return a1;
}

double sub_18BD26354@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 36) = 1;
  return result;
}

BOOL sub_18BD2636C(_DWORD *a1)
{
  return *a1 == 3;
}

uint64_t sub_18BD2637C(uint64_t a1, icu::number::impl::DecimalQuantity *this, uint64_t a3, int *a4)
{
  uint64_t Magnitude;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(this);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, Magnitude);
  icu::number::impl::DecimalQuantity::adjustMagnitude(this, v9);
  sub_18BD26460(a1, this, a4);
  if (!icu::number::impl::DecimalQuantity::isZeroish(this)
    && *a4 <= 0
    && icu::number::impl::DecimalQuantity::getMagnitude(this) != (_DWORD)v9 + (_DWORD)Magnitude)
  {
    v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, (Magnitude + 1));
    if ((_DWORD)v10 != (_DWORD)v9)
    {
      v11 = v10;
      icu::number::impl::DecimalQuantity::adjustMagnitude(this, v10 - v9);
      sub_18BD26460(a1, this, a4);
      return v11;
    }
  }
  return v9;
}

void sub_18BD26460(uint64_t a1, icu::number::impl::DecimalQuantity *this, int *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int Magnitude;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _OWORD v29[4];
  uint64_t v30;

  if (*a3 <= 0 && !*(_BYTE *)(a1 + 36))
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
      case 0xA:
        v6 = 0;
        *a3 = 5;
        break;
      case 1:
        icu::number::impl::DecimalQuantity::roundToInfinity(this);
        goto LABEL_27;
      case 2:
        v7 = *(__int16 *)(a1 + 10);
        if (v7 == -1)
          v8 = 0x80000000;
        else
          v8 = -v7;
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v8, *(_DWORD *)(a1 + 32), a3);
        if (*(_WORD *)(a1 + 8))
          v9 = *(__int16 *)(a1 + 8);
        else
          v9 = -2147483647;
        goto LABEL_51;
      case 3:
        v10 = sub_18BD267DC(this, *(__int16 *)(a1 + 14));
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v10, *(_DWORD *)(a1 + 32), a3);
        v11 = sub_18BD2682C(this, *(__int16 *)(a1 + 12));
        v6 = uprv_max(0, -v11);
        if (icu::number::impl::DecimalQuantity::isZeroish(this) && *(__int16 *)(a1 + 12) >= 1)
          icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)this, 1);
        break;
      case 4:
        v12 = *(__int16 *)(a1 + 10);
        if (v12 == -1)
          v13 = 0x80000000;
        else
          v13 = -v12;
        v14 = sub_18BD267DC(this, *(__int16 *)(a1 + 14));
        if (*(_DWORD *)(a1 + 16))
          v15 = uprv_max(v13, v14);
        else
          v15 = uprv_min(v13, v14);
        v21 = v15;
        if (!icu::number::impl::DecimalQuantity::isZeroish(this))
        {
          Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(this);
          icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v21, *(_DWORD *)(a1 + 32), a3);
          if (!icu::number::impl::DecimalQuantity::isZeroish(this)
            && icu::number::impl::DecimalQuantity::getMagnitude(this) != Magnitude
            && (_DWORD)v13 == v14)
          {
            ++v14;
          }
        }
        if (*(_WORD *)(a1 + 8))
          v24 = -*(__int16 *)(a1 + 8);
        else
          v24 = 0x7FFFFFFFLL;
        v25 = sub_18BD2682C(this, *(__int16 *)(a1 + 12));
        if (*(_BYTE *)(a1 + 20))
        {
          v26 = uprv_min(v24, v25);
        }
        else
        {
          if (v14 <= (int)v13)
            v27 = v24;
          else
            v27 = v25;
          if (v14 <= (int)v13)
            v28 = v25;
          else
            v28 = v24;
          if (*(_DWORD *)(a1 + 16))
            v26 = v27;
          else
            v26 = v28;
        }
        v9 = -v26;
LABEL_51:
        v6 = uprv_max(0, v9);
        break;
      case 5:
        icu::number::impl::DecimalQuantity::roundToIncrement(this, *(_QWORD *)(a1 + 8), *(__int16 *)(a1 + 16), *(_DWORD *)(a1 + 32), (UErrorCode *)a3);
        goto LABEL_23;
      case 6:
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, *(__int16 *)(a1 + 16), *(_DWORD *)(a1 + 32), a3);
        goto LABEL_23;
      case 7:
        icu::number::impl::DecimalQuantity::roundToNickel((uint64_t)this, *(__int16 *)(a1 + 16), *(_DWORD *)(a1 + 32), a3);
LABEL_23:
        v6 = *(__int16 *)(a1 + 18);
        break;
      case 9:
        v30 = 0;
        memset(v29, 0, sizeof(v29));
        icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v29);
        icu::number::impl::DecimalQuantity::setToDouble((void **)v29, *(double *)(a1 + 8));
        icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v29);
        v16 = icu::number::impl::DecimalQuantity::adjustToZeroScale((icu::number::impl::DecimalQuantity *)v29);
        v17 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v29, 0);
        icu::number::impl::DecimalQuantity::roundToIncrement(this, v17, v16, *(_DWORD *)(a1 + 32), (UErrorCode *)a3);
        icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v29);
        v18 = sub_18BD267DC(this, *(__int16 *)(a1 + 18));
        icu::number::impl::DecimalQuantity::roundToMagnitude((uint64_t)this, v18, *(_DWORD *)(a1 + 32), a3);
        v19 = sub_18BD2682C(this, *(__int16 *)(a1 + 16));
        v20 = uprv_max(0, -v19);
        icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, v20);
        v6 = 0;
        if (icu::number::impl::DecimalQuantity::isZeroish(this))
        {
          if (*(__int16 *)(a1 + 16) >= 1)
            icu::number::impl::DecimalQuantity::setMinInteger((uint64_t)this, 1);
LABEL_27:
          v6 = 0;
        }
        break;
      default:
        abort();
    }
    if (!*(_DWORD *)(a1 + 24)
      || (*(double (**)(icu::number::impl::DecimalQuantity *, uint64_t))(*(_QWORD *)this + 16))(this, 3) != 0.0)
    {
      icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, v6);
    }
  }
}

uint64_t sub_18BD267DC(icu::number::impl::DecimalQuantity *a1, int a2)
{
  int Magnitude;

  if (a2 == -1)
    return 0x80000000;
  if (icu::number::impl::DecimalQuantity::isZeroish(a1))
    Magnitude = 0;
  else
    Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(a1);
  return (Magnitude - a2 + 1);
}

uint64_t sub_18BD2682C(icu::number::impl::DecimalQuantity *a1, int a2)
{
  int Magnitude;

  if (icu::number::impl::DecimalQuantity::isZeroish(a1))
    Magnitude = 0;
  else
    Magnitude = icu::number::impl::DecimalQuantity::getMagnitude(a1);
  return (Magnitude - a2 + 1);
}

uint64_t sub_18BD2686C(uint64_t a1, icu::number::impl::DecimalQuantity *this, int a3)
{
  return icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)this, *(__int16 *)(a1 + 12) - a3);
}

uint64_t icu::number::impl::ScientificModifier::ScientificModifier(uint64_t this)
{
  *(_QWORD *)this = &off_1E22637D8;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E22637D8;
  *(_DWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t icu::number::impl::ScientificModifier::set(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t icu::number::impl::ScientificModifier::apply(icu::number::impl::ScientificModifier *this, icu::FormattedStringBuilder *a2, int a3, int a4, UErrorCode *a5)
{
  int v9;
  void *v10;
  uint64_t v11;
  int v12;
  UChar **v13;
  void *v14;
  int v15;
  uint64_t v16;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  int v24;
  int inserted;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  _BYTE v32[64];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v32, (UChar **)(*(_QWORD *)(*((_QWORD *)this + 2) + 24) + 712));
  v9 = icu::FormattedStringBuilder::insert(a2, a4, (uint64_t)v32, 35, 0, a5) + a4;
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v32);
  v11 = *((_QWORD *)this + 2);
  v12 = *(_DWORD *)(v11 + 20);
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
  {
    if (v12 == 2)
      goto LABEL_7;
    v13 = (UChar **)(*(_QWORD *)(v11 + 24) + 392);
  }
  else
  {
    if (v12 != 1)
      goto LABEL_7;
    v13 = (UChar **)(*(_QWORD *)(v11 + 24) + 456);
  }
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v32, v13);
  v9 += icu::FormattedStringBuilder::insert(a2, v9, (uint64_t)v32, 36, 0, a5);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v32);
LABEL_7:
  v15 = *((_DWORD *)this + 2);
  v16 = *((_QWORD *)this + 2);
  if (*(__int16 *)(v16 + 18) > 0 || v15 != 0)
  {
    v18 = 0;
    if (v15 >= 0)
      v19 = *((_DWORD *)this + 2);
    else
      v19 = -v15;
    v20 = 1;
    do
    {
      v21 = v19 % 0xA;
      v22 = v9 + v18;
      v23 = *(_QWORD *)(v16 + 24);
      v24 = *(_DWORD *)(v23 + 1928);
      if (v24 == -1)
      {
        v26 = v23 + ((unint64_t)(v21 + 17) << 6);
        v27 = v23 + 264;
        v28 = v26 + 8;
        if (v21)
          v29 = v28;
        else
          v29 = v27;
        inserted = icu::FormattedStringBuilder::insert(a2, v22, v29, 37, 0, a5);
      }
      else
      {
        inserted = icu::FormattedStringBuilder::insertCodePoint(a2, v22, v24 + v21, 37, a5);
      }
      v9 += inserted;
      v16 = *((_QWORD *)this + 2);
      --v18;
      v30 = v20++ < *(__int16 *)(v16 + 18);
      v30 = v30 || v19 > 9;
      v19 /= 0xAu;
    }
    while (v30);
  }
  return (v9 - a4);
}

uint64_t icu::number::impl::ScientificModifier::getPrefixLength(icu::number::impl::ScientificModifier *this)
{
  return 0;
}

uint64_t icu::number::impl::ScientificModifier::getCodePointCount(icu::number::impl::ScientificModifier *this)
{
  return 999;
}

uint64_t icu::number::impl::ScientificModifier::isStrong(icu::number::impl::ScientificModifier *this)
{
  return 1;
}

void icu::number::impl::ScientificModifier::containsField()
{
  abort();
}

void icu::number::impl::ScientificModifier::getParameters(icu::number::impl::ScientificModifier *this, icu::number::impl::Modifier::Parameters *a2)
{
  *(_QWORD *)a2 = 0;
}

_DWORD *icu::number::impl::ScientificModifier::semanticallyEquivalent(icu::number::impl::ScientificModifier *this, const icu::number::impl::Modifier *lpsrc)
{
  _DWORD *result;

  if (result)
    return (_DWORD *)(*((_DWORD *)this + 2) == result[2]);
  return result;
}

_QWORD *sub_18BD26B1C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = off_1E2263868;
  result[1] = &unk_1E2263898;
  result[2] = *(_QWORD *)(a2 + 4);
  result[3] = a3;
  result[4] = a4;
  return result;
}

double sub_18BD26B3C(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  double result;
  int v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[21];

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  if (*a4 <= 0)
  {
    if (((*(uint64_t (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0
      || (*(unsigned int (**)(icu::number::impl::DecimalQuantity *))(*(_QWORD *)a2 + 24))(a2))
    {
      *(_QWORD *)(a3 + 208) = a3 + 256;
    }
    else
    {
      if (icu::number::impl::DecimalQuantity::isZeroish(a2))
      {
        if (*(_BYTE *)(a1 + 17) && sub_18BD2636C((_DWORD *)(a3 + 104)))
          sub_18BD2686C(a3 + 104, a2, *(char *)(a1 + 16));
        else
          sub_18BD26460(a3 + 104, a2, a4);
        v9 = 0;
      }
      else
      {
        v9 = -(int)sub_18BD2637C(a3 + 104, a2, a1 + 8, a4);
      }
      *(_DWORD *)(a3 + 224) = v9;
      *(_QWORD *)(a3 + 232) = a1;
      *(_QWORD *)(a3 + 208) = a3 + 216;
      icu::number::impl::DecimalQuantity::adjustExponent((uint64_t)a2, v9);
      sub_18BD26354((uint64_t)&v11);
      result = *(double *)&v11;
      v10 = *(_OWORD *)v12;
      *(_OWORD *)(a3 + 104) = v11;
      *(_OWORD *)(a3 + 120) = v10;
      *(_QWORD *)(a3 + 133) = *(_QWORD *)&v12[13];
    }
  }
  return result;
}

uint64_t sub_18BD26C70(uint64_t a1, int a2)
{
  int v2;

  v2 = *(char *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 17))
  {
    if (v2 >= 2)
      v2 = (__int16)(a2 % *(char *)(a1 + 16) + *(char *)(a1 + 16)) % (int)*(unsigned __int8 *)(a1 + 16) + 1;
    else
      v2 = 1;
  }
  return (v2 + ~a2);
}

uint64_t sub_18BD26CB8(uint64_t a1, int a2)
{
  int v2;

  v2 = *(char *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 9))
  {
    if (v2 >= 2)
      v2 = (__int16)(a2 % *(char *)(a1 + 8) + *(char *)(a1 + 8)) % (int)*(unsigned __int8 *)(a1 + 8) + 1;
    else
      v2 = 1;
  }
  return (v2 + ~a2);
}

void sub_18BD26D04(icu::number::impl::Modifier *a1)
{
  void *v1;

  icu::number::impl::Modifier::~Modifier(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD26D18(uint64_t a1)
{
  nullsub_17(a1 + 8);
  return a1;
}

void sub_18BD26D40(char *a1)
{
  nullsub_17(a1 + 8);
  icu::UMemory::operator delete(a1);
}

void sub_18BD26D6C(uint64_t a1)
{
  void *v1;

  v1 = (void *)(a1 - 8);
  nullsub_17(a1);
  icu::UMemory::operator delete(v1);
}

void **icu::number::SimpleNumber::forInt64@<X0>(void **this@<X0>, int *a2@<X1>, void ***a3@<X8>)
{
  uint64_t *v5;
  int v6;
  unint64_t v8;
  void **v9;
  void **v10;

  v5 = (uint64_t *)*a2;
  if ((int)v5 >= 1)
    goto LABEL_2;
  v8 = (unint64_t)this;
  this = (void **)icu::UMemory::operator new(v5, (icu::UMemory *)0x198, (unint64_t)a2);
  if (!this)
  {
    *a2 = 7;
LABEL_2:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_3;
  }
  v9 = this;
  v10 = (void **)(sub_18BCC2258((uint64_t)this) + 304);
  this = icu::number::impl::DecimalQuantity::setToLong(v10, v8);
  *a3 = v9;
  *((_DWORD *)a3 + 2) = 1;
  if (*a2 <= 0)
  {
    this = (void **)icu::number::impl::DecimalQuantity::isNegative((icu::number::impl::DecimalQuantity *)v10);
    if ((_DWORD)this)
    {
      v6 = 2;
      goto LABEL_4;
    }
LABEL_3:
    v6 = 1;
LABEL_4:
    *((_DWORD *)a3 + 2) = v6;
  }
  return this;
}

uint64_t icu::number::SimpleNumber::SimpleNumber(uint64_t a1, uint64_t a2, int *a3)
{
  int v4;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  if (*a3 <= 0)
  {
    if (a2)
    {
      if (icu::number::impl::DecimalQuantity::isNegative((icu::number::impl::DecimalQuantity *)(a2 + 304)))
        v4 = 2;
      else
        v4 = 1;
      *(_DWORD *)(a1 + 8) = v4;
    }
    else
    {
      *a3 = 1;
    }
  }
  return a1;
}

{
  int v4;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 1;
  if (*a3 <= 0)
  {
    if (a2)
    {
      if (icu::number::impl::DecimalQuantity::isNegative((icu::number::impl::DecimalQuantity *)(a2 + 304)))
        v4 = 2;
      else
        v4 = 1;
      *(_DWORD *)(a1 + 8) = v4;
    }
    else
    {
      *a3 = 1;
    }
  }
  return a1;
}

uint64_t icu::number::SimpleNumber::cleanup(icu::number::SimpleNumber *this)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)this = 0;
  return result;
}

BOOL icu::number::SimpleNumber::multiplyByPowerOfTen(_BOOL8 this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*(_QWORD *)this)
      return icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)(*(_QWORD *)this + 304), a2);
    else
      *a3 = U_INVALID_STATE_ERROR;
  }
  return this;
}

void icu::number::SimpleNumber::roundTo(_QWORD *a1, int a2, unsigned int a3, int *a4)
{
  if (*a4 <= 0)
  {
    if (*a1)
      icu::number::impl::DecimalQuantity::roundToMagnitude(*a1 + 304, a2, a3, a4);
    else
      *a4 = 27;
  }
}

_QWORD *icu::number::SimpleNumber::setMinimumIntegerDigits(_QWORD *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*this)
      return (_QWORD *)icu::number::impl::DecimalQuantity::setMinInteger(*this + 304, a2);
    else
      *a3 = U_INVALID_STATE_ERROR;
  }
  return this;
}

_QWORD *icu::number::SimpleNumber::setMinimumFractionDigits(_QWORD *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*this)
      return (_QWORD *)icu::number::impl::DecimalQuantity::setMinFraction(*this + 304, a2);
    else
      *a3 = U_INVALID_STATE_ERROR;
  }
  return this;
}

void icu::number::SimpleNumber::truncateStart(icu::number::SimpleNumber *this, int a2, UErrorCode *a3)
{
  if (*(int *)a3 <= 0)
  {
    if (*(_QWORD *)this)
      icu::number::impl::DecimalQuantity::applyMaxInteger((icu::number::impl::DecimalQuantity *)(*(_QWORD *)this + 304), a2);
    else
      *a3 = U_INVALID_STATE_ERROR;
  }
}

uint64_t icu::number::SimpleNumber::setSign(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if (*(_QWORD *)result)
      *(_DWORD *)(result + 8) = a2;
    else
      *a3 = 27;
  }
  return result;
}

uint64_t icu::number::SimpleNumberFormatter::cleanup@<X0>(icu::number::SimpleNumberFormatter *this@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;

  v4 = (_QWORD *)((char *)this + 8);
  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    icu::UnicodeString::~UnicodeString(a2, (icu::UnicodeString *)(v5 + 24));
    icu::UMemory::operator delete((void *)v5);
  }
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  return result;
}

void icu::number::SimpleNumberFormatter::forLocale(icu::number::SimpleNumberFormatter *this@<X0>, UErrorCode *a2@<X1>, _QWORD *a3@<X8>)
{
  icu::number::SimpleNumberFormatter::forLocaleAndGroupingStrategy(this, 2uLL, a2, a3);
}

void icu::number::SimpleNumberFormatter::forLocaleAndGroupingStrategy(const icu::Locale *a1@<X0>, unint64_t a2@<X1>, UErrorCode *a3@<X2>, _QWORD *a4@<X8>)
{
  signed int v5;
  _QWORD *v8;
  icu::DecimalFormatSymbols *v9;
  uint64_t v10;

  v5 = a2;
  *a4 = 0;
  a4[1] = 0;
  v8 = a4 + 1;
  *(_DWORD *)a4 = 2;
  a4[2] = 0;
  a4[3] = 0;
  v9 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((uint64_t *)2, (icu::UMemory *)0xB48, a2);
  if (v9)
  {
    v10 = (uint64_t)v9;
    *v8 = icu::DecimalFormatSymbols::DecimalFormatSymbols(v9, a1, a3);
    if (*(int *)a3 < 1)
      icu::number::SimpleNumberFormatter::initialize((uint64_t)a4, a1, v10, v5, (int *)a3);
  }
  else
  {
    *v8 = 0;
    if (*(int *)a3 <= 0)
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
}

void icu::number::SimpleNumberFormatter::initialize(uint64_t a1, const icu::Locale *a2, uint64_t a3, signed int a4, int *a5)
{
  uint64_t *v5;
  uint64_t *v11;
  uint64_t *v12;
  const UChar *v13;
  uint64_t v14;
  UErrorCode *v15;
  void *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  UChar v24[16];
  uint64_t v25;
  int v26;
  _OWORD v27[24];
  uint64_t v28;
  _OWORD v29[27];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)*a5;
  if ((int)v5 <= 0)
  {
    v11 = icu::UMemory::operator new(v5, (icu::UMemory *)0x60, (unint64_t)a2);
    if (v11)
    {
      v12 = v11;
      *(_OWORD *)v11 = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 5) = 0u;
      *((_WORD *)v11 + 2) = -3;
      *((_DWORD *)v11 + 5) = 0;
      *((_OWORD *)v11 + 2) = 0u;
      *((_OWORD *)v11 + 3) = 0u;
      v11[10] = 0;
      v11[3] = (uint64_t)off_1E2256B38;
      *((_WORD *)v11 + 16) = 2;
      icu::UnicodeString::setToBogus((icu::UnicodeString *)(v11 + 3));
      *(_QWORD *)(a1 + 16) = v12;
      v12[11] = a3;
      v13 = sub_18BD2D4A0((uint64_t)a2, (const char *)(a3 + 2874), 0, a5);
      if (*a5 <= 0)
      {
        v14 = (uint64_t)v13;
        v30 = 0;
        memset(v29, 0, sizeof(v29));
        sub_18BD0C8B8((uint64_t)v29);
        icu::UnicodeString::UnicodeString((uint64_t)v27, v14);
        icu::number::impl::PatternParser::parseToPatternInfo((UChar **)v27, (const icu::UnicodeString *)v29, (UErrorCode *)a5, v15);
        icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v27);
        if (*a5 <= 0)
        {
          v25 = icu::number::impl::Grouper::forStrategy(a4);
          v26 = v17;
          icu::number::impl::Grouper::setLocaleData((icu::number::impl::Grouper *)&v25, (const icu::number::impl::ParsedPatternInfo *)v29, a2);
          v18 = *(_QWORD *)(a1 + 16);
          v19 = v26;
          *(_QWORD *)(v18 + 4) = v25;
          *(_DWORD *)(v18 + 12) = v19;
          v28 = 0;
          memset(v27, 0, sizeof(v27));
          icu::number::impl::MutablePatternModifier::MutablePatternModifier((icu::number::impl::MutablePatternModifier *)v27, 0);
          icu::number::impl::MutablePatternModifier::setPatternInfo((uint64_t)v27, (uint64_t)v29, 0);
          icu::number::impl::MutablePatternModifier::setPatternAttributes((uint64_t)v27, 5, 0, 0);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 88);
          icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v24);
          icu::number::impl::MutablePatternModifier::setSymbols((uint64_t)v27, v20, v24, 1, 0, (UErrorCode *)a5);
          icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v24);
          v23 = icu::UMemory::operator new(v22, (icu::UMemory *)0x28, v21);
          if (v23)
            icu::number::impl::MutablePatternModifier::createImmutableForPlural((icu::number::impl::MutablePatternModifier *)v27, 8, (UErrorCode *)a5, v23);
          *(_QWORD *)(a1 + 24) = v23;
          *(_DWORD *)a1 = a4;
          sub_18BD22984((uint64_t)v27);
        }
        sub_18BD0C994((void **)v29);
      }
    }
    else
    {
      *(_QWORD *)(a1 + 16) = 0;
      *a5 = 7;
    }
  }
}

void icu::number::SimpleNumberFormatter::forLocaleAndSymbolsAndGroupingStrategy(const icu::Locale *a1@<X0>, uint64_t a2@<X1>, signed int a3@<W2>, int *a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = 0;
  a5[1] = 0;
  *(_DWORD *)a5 = 2;
  a5[2] = 0;
  a5[3] = 0;
  icu::number::SimpleNumberFormatter::initialize((uint64_t)a5, a1, a2, a3, a4);
}

uint64_t icu::number::SimpleNumberFormatter::format@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  UErrorCode v8;
  uint64_t v9;

  result = icu::number::SimpleNumberFormatter::formatImpl(a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8), a3);
  v8 = *a3;
  if (*(int *)a3 <= 0)
  {
    v8 = U_ZERO_ERROR;
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v9 = 0;
  }
  *(_QWORD *)a4 = off_1E2263300;
  *(_QWORD *)(a4 + 8) = v9;
  *(_DWORD *)(a4 + 16) = v8;
  return result;
}

uint64_t icu::number::SimpleNumberFormatter::formatImpl(uint64_t result, uint64_t a2, int a3, UErrorCode *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  icu::FormattedStringBuilder *v8;
  uint64_t v9;
  int v10;

  if (*(int *)a4 > 0)
    return result;
  if (!a2)
  {
    v10 = 1;
LABEL_12:
    *a4 = v10;
    return result;
  }
  v5 = *(_QWORD *)(result + 24);
  if (!v5 || (result = *(_QWORD *)(result + 16)) == 0)
  {
    v10 = 27;
    goto LABEL_12;
  }
  v6 = 2;
  if (!a3)
    v6 = 3;
  if (a3 == 2)
    v6 = 0;
  v7 = *(_QWORD *)(v5 + 8 * v6 + 8);
  v8 = (icu::FormattedStringBuilder *)(a2 + 8);
  v9 = sub_18BD15EE8(result, (icu::number::impl::DecimalQuantity *)(a2 + 304), (icu::FormattedStringBuilder *)(a2 + 8), 0, a4);
  (*(void (**)(uint64_t, icu::FormattedStringBuilder *, _QWORD, uint64_t, UErrorCode *))(*(_QWORD *)v7 + 16))(v7, v8, 0, v9, a4);
  return icu::FormattedStringBuilder::writeTerminator(v8, a4);
}

uint64_t sub_18BD27564(icu::number::Notation *a1)
{
  uint64_t result;

  switch((int)a1)
  {
    case 0:
      result = icu::number::Notation::compactShort(a1);
      break;
    case 1:
      result = icu::number::Notation::compactLong(a1);
      break;
    case 2:
      result = icu::number::Notation::scientific(a1);
      break;
    case 3:
      result = icu::number::Notation::engineering(a1);
      break;
    case 4:
      result = icu::number::Notation::simple(a1);
      break;
    default:
      abort();
  }
  return result;
}

void sub_18BD275C4(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 7:
      icu::MeasureUnit::getPermille(a2);
      break;
    case 6:
      icu::MeasureUnit::getPercent(a2);
      break;
    case 5:
      icu::MeasureUnit::MeasureUnit(a2);
      break;
    default:
      abort();
  }
}

void sub_18BD275F8(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  switch(a1)
  {
    case 9:
      icu::number::Precision::integer(a2);
      return;
    case 10:
      icu::number::Precision::unlimited(a2);
      return;
    case 11:
      v2 = 0;
      goto LABEL_4;
    case 12:
      v2 = 1;
LABEL_4:
      icu::number::Precision::currency(v2, a2);
      return;
    default:
      abort();
  }
}

uint64_t sub_18BD27640(int a1)
{
  if ((a1 - 13) >= 0xB)
    abort();
  return dword_18BE28DA0[a1 - 13];
}

uint64_t sub_18BD2766C(int a1, uint64_t a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-ceiling", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-floor", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-down", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-even", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 7:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 8:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-odd", 0, 0xFFFFFFFFLL);
      break;
    case 9:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"r", 0, 0xFFFFFFFFLL);
      break;
    case 10:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"rounding-mode-half-floor", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_18BD27894(int a1, uint64_t a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"group-auto", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"g", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"group-thousands", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_18BD279B4(int a1, uint64_t a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-narrow", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-short", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"u", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-iso-code", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-formal", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"unit-width-variant", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"u", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_18BD27B2C(int a1, uint64_t a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 1:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 2:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 3:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting", 0, 0xFFFFFFFFLL);
      break;
    case 4:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-always", 0, 0xFFFFFFFFLL);
      break;
    case 5:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)"s", 0, 0xFFFFFFFFLL);
      break;
    case 6:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-except-zero", 0, 0xFFFFFFFFLL);
      break;
    case 7:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-negative", 0, 0xFFFFFFFFLL);
      break;
    case 8:
      result = icu::UnicodeString::doAppend(a2, (uint64_t)L"sign-accounting-negative", 0, 0xFFFFFFFFLL);
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_18BD27CFC(int a1, uint64_t a2)
{
  if (a1 == 1)
    return icu::UnicodeString::doAppend(a2, (uint64_t)L"decimal-always", 0, 0xFFFFFFFFLL);
  if (a1)
    abort();
  return icu::UnicodeString::doAppend(a2, (uint64_t)"d", 0, 0xFFFFFFFFLL);
}

void icu::number::NumberFormatter::forSkeleton(UChar **this@<X0>, const icu::UnicodeString *a2@<X1>, UErrorCode *a3@<X2>, _OWORD *a4@<X8>)
{
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  char *v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  _OWORD v28[11];
  __int128 v29;
  void *v30[34];

  v30[33] = *(void **)MEMORY[0x1E0C80C00];
  if (a2)
  {
    *(_QWORD *)a2 = 0xFFFFFFFF00000000;
    *((_WORD *)a2 + 4) = 0;
    *((_WORD *)a2 + 20) = 0;
  }
  if (*(int *)a3 > 0)
    goto LABEL_10;
  v9 = atomic_load(&dword_1EE009C30);
  if (v9 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009C30))
  {
    if (dword_1EE009C34 >= 1)
    {
      *a3 = dword_1EE009C34;
LABEL_10:
      a4[28] = 0u;
      a4[29] = 0u;
      a4[26] = 0u;
      a4[27] = 0u;
      a4[24] = 0u;
      a4[25] = 0u;
      a4[22] = 0u;
      a4[23] = 0u;
      a4[20] = 0u;
      a4[21] = 0u;
      a4[18] = 0u;
      a4[19] = 0u;
      a4[16] = 0u;
      a4[17] = 0u;
      a4[14] = 0u;
      a4[15] = 0u;
      a4[12] = 0u;
      a4[13] = 0u;
      a4[10] = 0u;
      a4[11] = 0u;
      a4[8] = 0u;
      a4[9] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      *a4 = 0u;
      a4[1] = 0u;
      sub_18BCC1E68((uint64_t)a4);
      return;
    }
  }
  else
  {
    sub_18BD2811C(a3);
    dword_1EE009C34 = *a3;
    icu::umtx_initImplPostInit(&dword_1EE009C30);
  }
  if (*(int *)a3 >= 1)
    goto LABEL_10;
  v18 = 0;
  memset(v30, 0, 264);
  v29 = 0u;
  memset(v28, 0, sizeof(v28));
  v27 = 0u;
  sub_18BD28EE8(this, &v18, a3, (uint64_t)&v27);
  if (*(int *)a3 <= 0)
  {
    icu::number::NumberFormatter::with(&v19);
    icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::macros((uint64_t)&v19, (uint64_t)&v27, (uint64_t)a4);
    icu::Locale::~Locale((icu::Locale *)&v26);
    icu::number::impl::StringProp::~StringProp(&v25);
    icu::number::impl::StringProp::~StringProp(&v24);
    icu::number::Scale::~Scale((icu::number::Scale *)&v23);
    icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v22);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v21);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v20);
  }
  else
  {
    if (a2)
    {
      v10 = v18;
      *((_DWORD *)a2 + 1) = v18;
      v11 = uprv_max(0, v10 - 15);
      v12 = *((unsigned __int16 *)this + 4);
      v13 = (__int16)v12;
      v14 = v12 >> 5;
      if (v13 >= 0)
        v15 = v14;
      else
        v15 = *((unsigned int *)this + 3);
      v16 = uprv_min(v15, v10 + 15);
      icu::UnicodeString::doExtract((char *)this, v11, v10 - v11, (uint64_t)a2 + 8, 0);
      *((_WORD *)a2 + v10 - v11 + 4) = 0;
      v17 = (char *)a2 + 40;
      icu::UnicodeString::doExtract((char *)this, v10, v16 - v10, (uint64_t)v17, 0);
      *(_WORD *)&v17[2 * (v16 - v10)] = 0;
      *a4 = 0u;
      a4[1] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      a4[8] = 0u;
      a4[9] = 0u;
      a4[10] = 0u;
      a4[11] = 0u;
      a4[12] = 0u;
      a4[13] = 0u;
      a4[14] = 0u;
      a4[15] = 0u;
      a4[16] = 0u;
      a4[17] = 0u;
      a4[18] = 0u;
      a4[19] = 0u;
      a4[20] = 0u;
      a4[21] = 0u;
      a4[22] = 0u;
      a4[23] = 0u;
      a4[24] = 0u;
      a4[25] = 0u;
      a4[26] = 0u;
      a4[27] = 0u;
      a4[28] = 0u;
      a4[29] = 0u;
    }
    else
    {
      a4[28] = 0u;
      a4[29] = 0u;
      a4[26] = 0u;
      a4[27] = 0u;
      a4[24] = 0u;
      a4[25] = 0u;
      a4[22] = 0u;
      a4[23] = 0u;
      a4[20] = 0u;
      a4[21] = 0u;
      a4[18] = 0u;
      a4[19] = 0u;
      a4[16] = 0u;
      a4[17] = 0u;
      a4[14] = 0u;
      a4[15] = 0u;
      a4[12] = 0u;
      a4[13] = 0u;
      a4[10] = 0u;
      a4[11] = 0u;
      a4[8] = 0u;
      a4[9] = 0u;
      a4[6] = 0u;
      a4[7] = 0u;
      a4[4] = 0u;
      a4[5] = 0u;
      a4[2] = 0u;
      a4[3] = 0u;
      *a4 = 0u;
      a4[1] = 0u;
    }
    sub_18BCC1E68((uint64_t)a4);
  }
  icu::Locale::~Locale((icu::Locale *)&v30[5]);
  icu::number::impl::StringProp::~StringProp(v30);
  icu::number::impl::StringProp::~StringProp((void **)&v29);
  icu::number::Scale::~Scale((icu::number::Scale *)((char *)&v28[9] + 8));
  icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)((char *)&v28[7] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)((char *)&v28[1] + 8));
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v28);
}

void sub_18BD2811C(UErrorCode *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  int v75;
  size_t v76;
  void *v77;
  char *v78;
  void (**v79)(icu::UnicodeString *__hidden);
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _OWORD v84[7];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  sub_18BDA1768(1u, (uint64_t)sub_18BD2C4AC);
  memset(v84, 0, sizeof(v84));
  icu::UCharsTrieBuilder::UCharsTrieBuilder((icu::UCharsTrieBuilder *)v84, a1);
  if (*(int *)a1 <= 0)
  {
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"compact-short");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0, a1);
    icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"c");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 1u, a1);
    icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"scientific");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 2u, a1);
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"engineering");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 3u, a1);
    icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"n");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 4u, a1);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"b");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 5u, a1);
    icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 6u, a1);
    icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 7u, a1);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 9u, a1);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xAu, a1);
    icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"precision-currency-standard");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xBu, a1);
    icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"precision-currency-cash");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xCu, a1);
    icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-ceiling");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xDu, a1);
    icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-floor");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xEu, a1);
    icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-down");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0xFu, a1);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x10u, a1);
    icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-even");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x11u, a1);
    icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-odd");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x12u, a1);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x13u, a1);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"rounding-mode-half-floor");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x14u, a1);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x15u, a1);
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x16u, a1);
    icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"r");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x17u, a1);
    icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"i");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x18u, a1);
    icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x19u, a1);
    icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Au, a1);
    icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"group-auto");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Bu, a1);
    icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"g");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Cu, a1);
    icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"group-thousands");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Du, a1);
    icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"latin");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Eu, a1);
    icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-narrow");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Fu, a1);
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-short");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x20u, a1);
    icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x21u, a1);
    icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-iso-code");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x22u, a1);
    icu::UnicodeString::~UnicodeString(v35, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-formal");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x23u, a1);
    icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"unit-width-variant");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x24u, a1);
    icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x25u, a1);
    icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x26u, a1);
    icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x27u, a1);
    icu::UnicodeString::~UnicodeString(v40, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x28u, a1);
    icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x29u, a1);
    icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-always");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Au, a1);
    icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Bu, a1);
    icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-except-zero");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Cu, a1);
    icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-negative");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Du, a1);
    icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"sign-accounting-negative");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Eu, a1);
    icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"d");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Fu, a1);
    icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v79);
    icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"decimal-always");
    icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x30u, a1);
    icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v79);
    if (*(int *)a1 <= 0)
    {
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"p");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x31u, a1);
      icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"m");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x32u, a1);
      icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"per-measure-unit");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x33u, a1);
      icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"u");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x34u, a1);
      icu::UnicodeString::~UnicodeString(v53, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"usage");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x35u, a1);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"currency");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x36u, a1);
      icu::UnicodeString::~UnicodeString(v55, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"integer-width");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x37u, a1);
      icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"numbering-system");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x38u, a1);
      icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)&v79);
      icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"s");
      icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x39u, a1);
      icu::UnicodeString::~UnicodeString(v58, (icu::UnicodeString *)&v79);
      if (*(int *)a1 <= 0)
      {
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"K");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0, a1);
        icu::UnicodeString::~UnicodeString(v59, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"K");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 1u, a1);
        icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"%");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 6u, a1);
        icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"%x100");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 8u, a1);
        icu::UnicodeString::~UnicodeString(v62, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L",_");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x19u, a1);
        icu::UnicodeString::~UnicodeString(v63, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)",");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Au, a1);
        icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L",!");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x1Cu, a1);
        icu::UnicodeString::~UnicodeString(v65, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"+");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x27u, a1);
        icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"+_");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x28u, a1);
        icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"(");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x29u, a1);
        icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"()!");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Au, a1);
        icu::UnicodeString::~UnicodeString(v69, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"+?");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Bu, a1);
        icu::UnicodeString::~UnicodeString(v70, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"(");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Cu, a1);
        icu::UnicodeString::~UnicodeString(v71, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)"+");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Du, a1);
        icu::UnicodeString::~UnicodeString(v72, (icu::UnicodeString *)&v79);
        icu::UnicodeString::UnicodeString((uint64_t)&v79, (uint64_t)L"()-");
        icu::UCharsTrieBuilder::add((icu::UCharsTrieBuilder *)v84, (const icu::UnicodeString *)&v79, 0x2Eu, a1);
        icu::UnicodeString::~UnicodeString(v73, (icu::UnicodeString *)&v79);
        if (*(int *)a1 <= 0)
        {
          v80 = 0u;
          v83 = 0;
          v82 = 0u;
          v81 = 0u;
          v79 = off_1E2256B38;
          LOWORD(v80) = 2;
          icu::UCharsTrieBuilder::buildUnicodeString((uint64_t)v84, 0, (icu::UnicodeString *)&v79, a1);
          v74 = (void *)*(unsigned int *)a1;
          if ((int)v74 <= 0)
          {
            v75 = (unsigned __int16)v80 >> 5;
            if ((v80 & 0x8000u) != 0)
              v75 = DWORD1(v80);
            v76 = 2 * v75;
            v77 = uprv_malloc(v76);
            qword_1EE009C28 = (uint64_t)v77;
            if ((v80 & 0x11) != 0)
            {
              v78 = 0;
            }
            else if ((v80 & 2) != 0)
            {
              v78 = (char *)&v80 + 2;
            }
            else
            {
              v78 = (char *)v81;
            }
            memcpy(v77, v78, v76);
          }
          icu::UnicodeString::~UnicodeString(v74, (icu::UnicodeString *)&v79);
        }
      }
    }
  }
  icu::UCharsTrieBuilder::~UCharsTrieBuilder((icu::UCharsTrieBuilder *)v84);
}

void *sub_18BD28EE8@<X0>(UChar **a1@<X0>, _DWORD *a2@<X1>, UErrorCode *a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  int v8;
  uint64_t *v9;
  unsigned int v10;
  _BOOL4 isWhiteSpace;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23[3];
  _QWORD v24[2];
  _OWORD v25[4];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  memset(v25, 0, sizeof(v25));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v25, a1);
  LOWORD(v19) = 32;
  icu::UnicodeString::doAppend((uint64_t)v25, (uint64_t)&v19, 0, 1);
  *(_QWORD *)((char *)v24 + 6) = 0;
  v24[0] = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 304) = 0u;
  *(_OWORD *)(a4 + 320) = 0u;
  *(_OWORD *)(a4 + 336) = 0u;
  *(_OWORD *)(a4 + 352) = 0u;
  *(_OWORD *)(a4 + 368) = 0u;
  *(_OWORD *)(a4 + 384) = 0u;
  *(_OWORD *)(a4 + 400) = 0u;
  *(_OWORD *)(a4 + 416) = 0u;
  *(_OWORD *)(a4 + 432) = 0u;
  *(_OWORD *)(a4 + 448) = 0u;
  *(_QWORD *)(a4 + 464) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 4) = 2;
  icu::MeasureUnit::MeasureUnit(a4 + 16);
  icu::MeasureUnit::MeasureUnit(a4 + 40);
  *(_DWORD *)(a4 + 64) = 0;
  *(_DWORD *)(a4 + 88) = 0;
  *(_DWORD *)(a4 + 96) = 4;
  *(_WORD *)(a4 + 100) = -3;
  *(_DWORD *)(a4 + 112) = -2;
  *(_BYTE *)(a4 + 132) = 0;
  *(_WORD *)(a4 + 124) = -1;
  *(_DWORD *)(a4 + 136) = 0;
  *(_QWORD *)(a4 + 144) = 0;
  *(_QWORD *)(a4 + 152) = 0x900000007;
  *(_BYTE *)(a4 + 160) = 0;
  *(_QWORD *)(a4 + 164) = 2;
  *(_QWORD *)(a4 + 176) = 0;
  *(_DWORD *)(a4 + 184) = 0;
  *(_QWORD *)(a4 + 192) = 0;
  *(_WORD *)(a4 + 200) = 0;
  *(_DWORD *)(a4 + 204) = 0;
  *(_QWORD *)(a4 + 208) = 0;
  *(_WORD *)(a4 + 216) = 0;
  *(_QWORD *)(a4 + 228) = 0;
  *(_QWORD *)(a4 + 220) = 0;
  *(_QWORD *)(a4 + 236) = 0x300000000;
  *(_WORD *)(a4 + 244) = 0;
  icu::Locale::Locale((icu::Locale *)(a4 + 248));
  memset(v23, 0, sizeof(v23));
  icu::StringSegment::StringSegment((uint64_t)v23, (const icu::UnicodeString *)v25, 0);
  v19 = 0;
  v20 = qword_1EE009C28;
  v21 = qword_1EE009C28;
  v22 = 0xFFFFFFFFLL;
  v18 = qword_1EE009C28;
  if ((int)icu::StringSegment::length(&v18, (icu::StringSegment *)v23) < 1)
    goto LABEL_34;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = icu::StringSegment::codePointAt(v23, v7);
    v10 = v9;
    isWhiteSpace = icu::PatternProps::isWhiteSpace((icu::PatternProps *)v9);
    if (v10 != 47 && !isWhiteSpace)
    {
      if (v10 < 0x10000)
        v14 = 1;
      else
        v14 = 2;
      v7 += v14;
      if (!v8)
        icu::UCharsTrie::nextForCodePoint((icu::UCharsTrie *)&v19, v10);
      goto LABEL_30;
    }
    v13 = isWhiteSpace;
    if (v7)
    {
      icu::StringSegment::setLength((uint64_t)v23, v7);
      if (v8)
      {
        v8 = sub_18BD29B70(v8, (icu::StringSegment *)v23, a4, a3);
      }
      else
      {
        v8 = sub_18BD29658((icu::StringSegment *)v23, (icu::UCharsTrie *)&v19, v24, a4, (char *)a3);
        v21 = v20;
        LODWORD(v22) = -1;
      }
      icu::StringSegment::resetLength(v23);
      if (*(int *)a3 > 0)
        goto LABEL_33;
      icu::StringSegment::adjustOffset((uint64_t)v23, v7);
    }
    else if (v8)
    {
      break;
    }
    if (v10 == 47 && !v8)
      break;
    if (v13 && v8)
    {
      if ((v8 - 4) < 9)
        break;
      v8 = 0;
    }
    if (v10 < 0x10000)
      v15 = 1;
    else
      v15 = 2;
    icu::StringSegment::adjustOffset((uint64_t)v23, v15);
    v7 = 0;
LABEL_30:
    if (v7 >= (int)icu::StringSegment::length((uint64_t *)v14, (icu::StringSegment *)v23))
      goto LABEL_34;
  }
  *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_33:
  *a2 = icu::StringSegment::getOffset((icu::StringSegment *)v23);
LABEL_34:
  icu::UCharsTrie::~UCharsTrie(&v19);
  return icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v25);
}

uint64_t sub_18BD29210@<X0>(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;

  if (*(int *)a2 <= 0)
  {
    v6 = atomic_load(&dword_1EE009C30);
    if (v6 == 2 || !icu::umtx_initImplPreInit(&dword_1EE009C30))
    {
      if (dword_1EE009C34 >= 1)
        *a2 = dword_1EE009C34;
    }
    else
    {
      sub_18BD2811C(a2);
      dword_1EE009C34 = *a2;
      icu::umtx_initImplPostInit(&dword_1EE009C30);
    }
  }
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = off_1E2256B38;
  *(_WORD *)(a3 + 8) = 2;
  return sub_18BD292D8(a1, a3, (int *)a2);
}

uint64_t sub_18BD292D8(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  __int16 v12;

  if (*a3 <= 0)
  {
    v5 = result;
    result = sub_18BD2B450(result, a2, a3);
    if ((_DWORD)result)
    {
      v12 = 32;
      result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
    }
    if (*a3 <= 0)
    {
      result = sub_18BD2B5E4(v5, a2, (UErrorCode *)a3);
      if ((_DWORD)result)
      {
        v12 = 32;
        result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
      }
      if (*a3 <= 0)
      {
        result = sub_18BD2B8E8(v5, a2);
        if ((_DWORD)result)
        {
          v12 = 32;
          result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
        }
        if (*a3 <= 0)
        {
          result = sub_18BD2B9C0(v5, (icu::UnicodeString *)a2);
          if ((_DWORD)result)
          {
            v12 = 32;
            result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
          }
          if (*a3 <= 0)
          {
            v6 = *(_DWORD *)(v5 + 96);
            if (v6 == 4
              || (sub_18BD2766C(v6, a2),
                  v12 = 32,
                  result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1),
                  *a3 <= 0))
            {
              result = sub_18BD2BBF4(v5, a2, a3);
              if ((_DWORD)result)
              {
                v12 = 32;
                result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
              }
              if (*a3 <= 0)
              {
                result = sub_18BD2BC44(v5, (icu::UnicodeString *)a2);
                if ((_DWORD)result)
                {
                  v12 = 32;
                  result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
                }
                if (*a3 <= 0)
                {
                  result = sub_18BD2BD28(v5, a2, a3);
                  if ((_DWORD)result)
                  {
                    v12 = 32;
                    result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
                  }
                  if (*a3 <= 0)
                  {
                    v7 = *(_DWORD *)(v5 + 152);
                    if (v7 == 1
                      || v7 == 7
                      || (sub_18BD279B4(v7, a2),
                          v12 = 32,
                          result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1),
                          *a3 <= 0))
                    {
                      v8 = *(_DWORD *)(v5 + 156);
                      if (!v8
                        || v8 == 9
                        || (sub_18BD27B2C(v8, a2),
                            v12 = 32,
                            result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1),
                            *a3 <= 0))
                      {
                        v9 = *(_DWORD *)(v5 + 164);
                        if ((v9 | 2) == 2
                          || (sub_18BD27CFC(v9, a2),
                              v12 = 32,
                              result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1),
                              *a3 <= 0))
                        {
                          result = sub_18BD2BE00(v5, a2, (UErrorCode *)a3);
                          if ((_DWORD)result)
                          {
                            v12 = 32;
                            result = icu::UnicodeString::doAppend(a2, (uint64_t)&v12, 0, 1);
                          }
                          if (*a3 <= 0)
                          {
                            if (*(_DWORD *)(v5 + 112) != -2
                              || *(__int16 *)(v5 + 216) >= 1
                              || *(_QWORD *)(v5 + 224)
                              || *(_QWORD *)(v5 + 232))
                            {
                              *a3 = 16;
                              return result;
                            }
                            if (*(__int16 *)(a2 + 8) < 0)
                            {
                              v11 = *(_DWORD *)(a2 + 12);
                              if (v11 > 0)
                                return sub_18BC503EC(a2, v11 - 1);
                            }
                            else
                            {
                              v10 = *(unsigned __int16 *)(a2 + 8);
                              if (v10 >= 0x20)
                              {
                                v11 = v10 >> 5;
                                return sub_18BC503EC(a2, v11 - 1);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_18BD29658(icu::StringSegment *a1, icu::UCharsTrie *a2, _BYTE *a3, uint64_t a4, char *a5)
{
  int v10;
  uint64_t result;
  UErrorCode *v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  unsigned int v16;
  icu::number::Notation *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  signed int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  char v29;
  icu::NumberingSystem *InstanceByName;
  _BYTE v31[28];

  v10 = icu::StringSegment::charAt(a1, 0);
  if (v10 <= 63)
  {
    if (v10 == 46)
    {
      if (!a3[4])
      {
        a3[4] = 1;
        sub_18BD29D18(a1, a4, a5);
        return 2;
      }
      goto LABEL_18;
    }
    if (v10 == 48)
    {
      if (!a3[8])
      {
        a3[8] = 1;
        sub_18BD2A184(a1, a4, a5);
        return 0;
      }
      goto LABEL_18;
    }
    goto LABEL_11;
  }
  if (v10 != 64)
  {
    if (v10 == 69)
    {
      if (!*a3)
      {
        *a3 = 1;
        sub_18BD29FF0(a1, a4, a5);
        return 0;
      }
      goto LABEL_18;
    }
LABEL_11:
    if (icu::UCharsTrie::current(a2) - 4 > 0xFFFFFFFD)
    {
      v13 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
      v14 = v13 + 1;
      v15 = *v13;
      if ((__int16)*v13 < 0)
      {
        v17 = (icu::number::Notation *)(v15 & 0x7FFF);
        if (v17 >= 0x4000)
        {
          if ((_DWORD)v17 == 0x7FFF)
          {
            v18 = v13[1] << 16;
            v14 = v13 + 2;
          }
          else
          {
            v18 = ((_DWORD)v17 << 16) - 0x40000000;
          }
          v17 = (icu::number::Notation *)(v18 | *v14);
        }
      }
      else
      {
        v16 = v15 >> 6;
        if (v16 > 0x100)
        {
          if (v16 > 0x1FE)
            v17 = (icu::number::Notation *)(v13[2] | (v13[1] << 16));
          else
            v17 = (icu::number::Notation *)((*v14 | ((unsigned __int16)(v16 & 0x1FF) << 16)) - 16842752);
        }
        else
        {
          v17 = (icu::number::Notation *)(v16 - 1);
        }
      }
      switch((int)v17)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          if (*a3)
            goto LABEL_18;
          *a3 = 1;
          *(_QWORD *)(a4 + 4) = sub_18BD27564(v17);
          *(_DWORD *)(a4 + 12) = v22;
          return (v17 & 0xFFFFFFFE) == 2;
        case 5:
        case 6:
        case 7:
          if (a3[1])
            goto LABEL_18;
          a3[1] = 1;
          sub_18BD275C4((int)v17, (uint64_t)v31);
          goto LABEL_52;
        case 8:
          if (a3[13])
            goto LABEL_18;
          a3[13] = 1;
          if (a3[1])
            goto LABEL_18;
          a3[1] = 1;
          icu::number::Scale::powerOfTen(2, (uint64_t)v31);
          icu::number::Scale::operator=(a4 + 168, (uint64_t)v31);
          icu::number::Scale::~Scale((icu::number::Scale *)v31);
          icu::MeasureUnit::getPercent((uint64_t)v31);
LABEL_52:
          icu::MeasureUnit::operator=(a4 + 16, (uint64_t)v31);
          icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v31);
          return 0;
        case 9:
        case 10:
        case 11:
        case 12:
          if (a3[4])
            goto LABEL_18;
          a3[4] = 1;
          sub_18BD275F8((int)v17, (uint64_t)v31);
          *(_OWORD *)(a4 + 64) = *(_OWORD *)v31;
          *(_OWORD *)(a4 + 76) = *(_OWORD *)&v31[12];
          if ((_DWORD)v17 == 9)
            return 2;
          else
            return 3;
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
          if (a3[5])
            goto LABEL_18;
          a3[5] = 1;
          v19 = sub_18BD27640((int)v17);
          result = 0;
          *(_DWORD *)(a4 + 96) = v19;
          return result;
        case 24:
          if (a3[8])
            goto LABEL_18;
          a3[8] = 1;
          *(_QWORD *)v31 = icu::number::IntegerWidth::zeroFillTo(0);
          *(_DWORD *)&v31[8] = v27;
          v28 = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)v31, 0);
          result = 0;
          *(_QWORD *)(a4 + 124) = v28;
          *(_BYTE *)(a4 + 132) = v29;
          return result;
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
          if (a3[6])
            goto LABEL_18;
          a3[6] = 1;
          if (((_DWORD)v17 - 25) >= 5)
            v23 = 5;
          else
            v23 = (_DWORD)v17 - 25;
          v24 = icu::number::impl::Grouper::forStrategy(v23);
          result = 0;
          *(_QWORD *)(a4 + 100) = v24;
          *(_DWORD *)(a4 + 108) = v25;
          return result;
        case 30:
          if (a3[9])
            goto LABEL_18;
          a3[9] = 1;
          InstanceByName = icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)"latn", a5, v12);
          icu::number::impl::SymbolsWrapper::setTo((_QWORD *)(a4 + 136), (uint64_t)InstanceByName);
          return 0;
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
          if (a3[10])
            goto LABEL_18;
          result = 0;
          a3[10] = 1;
          v21 = (_DWORD)v17 - 31;
          if (((_DWORD)v17 - 31) >= 7)
            v21 = 7;
          *(_DWORD *)(a4 + 152) = v21;
          return result;
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
          if (a3[11])
            goto LABEL_18;
          result = 0;
          a3[11] = 1;
          v20 = (_DWORD)v17 - 38;
          if (((_DWORD)v17 - 38) >= 9)
            v20 = 9;
          *(_DWORD *)(a4 + 156) = v20;
          return result;
        case 47:
        case 48:
          if (a3[12])
            goto LABEL_18;
          result = 0;
          a3[12] = 1;
          if ((_DWORD)v17 == 48)
            v26 = 1;
          else
            v26 = 2;
          if ((_DWORD)v17 == 47)
            v26 = 0;
          *(_DWORD *)(a4 + 164) = v26;
          return result;
        case 49:
          if (a3[4])
            goto LABEL_18;
          a3[4] = 1;
          return 4;
        case 50:
          if (a3[1])
            goto LABEL_18;
          a3[1] = 1;
          return 5;
        case 51:
          if (a3[2])
            goto LABEL_18;
          a3[2] = 1;
          return 6;
        case 52:
          if (a3[1])
            goto LABEL_18;
          a3[1] = 1;
          if (a3[2])
            goto LABEL_18;
          a3[2] = 1;
          return 7;
        case 53:
          if (a3[3])
            goto LABEL_18;
          a3[3] = 1;
          return 8;
        case 54:
          if (a3[1])
            goto LABEL_18;
          a3[1] = 1;
          if (a3[2])
            goto LABEL_18;
          a3[2] = 1;
          return 9;
        case 55:
          if (a3[8])
            goto LABEL_18;
          a3[8] = 1;
          return 10;
        case 56:
          if (a3[9])
            goto LABEL_18;
          a3[9] = 1;
          return 11;
        case 57:
          if (a3[13])
            goto LABEL_18;
          a3[13] = 1;
          return 12;
        default:
          abort();
      }
    }
    goto LABEL_18;
  }
  if (a3[4])
  {
LABEL_18:
    result = 0;
    *(_DWORD *)a5 = 65811;
    return result;
  }
  a3[4] = 1;
  sub_18BD29EA4(a1, a4, a5);
  return 3;
}

uint64_t sub_18BD29B70(int a1, icu::StringSegment *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t result;
  BOOL v8;

  switch(a1)
  {
    case 1:
      if ((sub_18BD2AF4C(a2, a3) & 1) == 0)
      {
        if (*(int *)a4 > 0)
          goto LABEL_20;
        if ((sub_18BD2B00C(a2, a3) & 1) == 0)
        {
          if (*(int *)a4 >= 1)
            goto LABEL_20;
          goto LABEL_8;
        }
      }
      return 1;
    case 2:
      if ((sub_18BD2B1B0(a2, a3, a4) & 1) != 0)
        return 3;
      if (*(int *)a4 > 0)
        goto LABEL_20;
      goto LABEL_6;
    case 3:
LABEL_6:
      v8 = sub_18BD2B3AC(a2, a3);
      result = 0;
      if (!v8 && *(int *)a4 <= 0)
        goto LABEL_8;
      return result;
    case 4:
      sub_18BD258B0(a2, a3 + 64, a4);
      return 3;
    case 5:
      sub_18BD2A34C(a2, a3, a4);
      goto LABEL_20;
    case 6:
      sub_18BD2A6B8(a2, a3, a4);
      goto LABEL_20;
    case 7:
      sub_18BD2A740(a2, a3, a4);
      goto LABEL_20;
    case 8:
      sub_18BD2A8E8(a2, a3, a4);
      goto LABEL_20;
    case 9:
      sub_18BD2A234(a2, a3, a4);
      goto LABEL_20;
    case 10:
      sub_18BD2AA3C(a2, a3, a4);
      goto LABEL_20;
    case 11:
      sub_18BD2ABD0(a2, a3, (char *)a4);
      goto LABEL_20;
    case 12:
      sub_18BD2AD54(a2, a3, a4);
LABEL_20:
      result = 0;
      break;
    default:
LABEL_8:
      result = 0;
      *a4 = U_NUMBER_SKELETON_SYNTAX_ERROR;
      break;
  }
  return result;
}

double sub_18BD29D18(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  double result;
  _OWORD *v12;
  int v13;
  _BYTE v14[28];

  if ((int)icu::StringSegment::length(a1) < 2)
  {
    v7 = 0;
    v10 = 1;
  }
  else
  {
    v6 = 0;
    while (1)
    {
      v7 = (v6 + 1);
      if (icu::StringSegment::charAt(a1, (int)v6 + 1) != 48)
        break;
      v8 = icu::StringSegment::length(a1);
      v9 = v6 + 2;
      v6 = (v6 + 1);
      if (v9 >= v8)
      {
        v10 = v7 + 1;
        goto LABEL_8;
      }
    }
    v10 = v6 + 1;
    v7 = v6;
  }
LABEL_8:
  if (v10 >= (int)icu::StringSegment::length(a1))
    goto LABEL_18;
  if ((icu::StringSegment::charAt(a1, v10) & 0xFFFE) != 0x2A)
  {
    if (v10 < (int)icu::StringSegment::length(a1))
    {
      v13 = v7;
      do
      {
        if (icu::StringSegment::charAt(a1, v10) != 35)
          break;
        ++v13;
        ++v10;
      }
      while (v10 < (int)icu::StringSegment::length(a1));
LABEL_19:
      if (v10 >= (int)icu::StringSegment::length(a1))
      {
        icu::number::Precision::minMaxFraction(v7, v13, (uint64_t)v14);
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v14;
        result = *(double *)&v14[12];
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v14[12];
        return result;
      }
LABEL_20:
      *a3 = 65811;
      return result;
    }
LABEL_18:
    v13 = v7;
    goto LABEL_19;
  }
  if (v10 + 1 < (int)icu::StringSegment::length(a1))
    goto LABEL_20;
  v12 = (_OWORD *)(a2 + 64);
  if ((_DWORD)v7)
    icu::number::Precision::minFraction(v7, (uint64_t)v14);
  else
    icu::number::Precision::unlimited((uint64_t)v14);
  *v12 = *(_OWORD *)v14;
  result = *(double *)&v14[12];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)&v14[12];
  return result;
}

double sub_18BD29EA4(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  double result;
  _BYTE v9[28];

  if ((int)icu::StringSegment::length(a1) < 1)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      if (icu::StringSegment::charAt(a1, v6) != 64)
        break;
      v6 = (v6 + 1);
    }
    while ((int)v6 < (int)icu::StringSegment::length(a1));
  }
  v7 = v6;
  if ((int)v6 >= (int)icu::StringSegment::length(a1))
  {
LABEL_15:
    if (v7 >= (int)icu::StringSegment::length(a1))
    {
      icu::number::Precision::minMaxSignificantDigits(v6, v7, (uint64_t)v9);
      goto LABEL_18;
    }
LABEL_16:
    *a3 = 65811;
    return result;
  }
  if ((icu::StringSegment::charAt(a1, v6) & 0xFFFE) != 0x2A)
  {
    v7 = v6;
    if ((int)v6 < (int)icu::StringSegment::length(a1))
    {
      v7 = v6;
      do
      {
        if (icu::StringSegment::charAt(a1, v7) != 35)
          break;
        ++v7;
      }
      while (v7 < (int)icu::StringSegment::length(a1));
    }
    goto LABEL_15;
  }
  if ((int)v6 + 1 < (int)icu::StringSegment::length(a1))
    goto LABEL_16;
  icu::number::Precision::minSignificantDigits(v6, (uint64_t)v9);
LABEL_18:
  *(_OWORD *)(a2 + 64) = *(_OWORD *)v9;
  result = *(double *)&v9[12];
  *(_OWORD *)(a2 + 76) = *(_OWORD *)&v9[12];
  return result;
}

uint64_t sub_18BD29FF0(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  int v8;
  icu::number::Notation *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  result = icu::StringSegment::length(a1);
  if ((_DWORD)result == 1)
    goto LABEL_2;
  v7 = 1;
  v8 = icu::StringSegment::charAt(a1, 1);
  if (v8 == 69)
  {
    result = icu::StringSegment::length(a1);
    if ((_DWORD)result == 2)
    {
LABEL_2:
      *a3 = 65811;
      return result;
    }
    v7 = 2;
  }
  if (icu::StringSegment::charAt(a1, v7) == 43)
  {
    result = icu::StringSegment::length(a1);
    if ((_DWORD)result == v7 + 1)
      goto LABEL_2;
    if (icu::StringSegment::charAt(a1, v7 + 1) != 33)
    {
      result = icu::StringSegment::charAt(a1, v7 + 1);
      if ((_DWORD)result != 63)
        goto LABEL_2;
    }
    v7 += 2;
    result = icu::StringSegment::length(a1);
    if ((_DWORD)result == v7)
      goto LABEL_2;
  }
  v9 = (icu::number::Notation *)icu::StringSegment::length(a1);
  if (v7 < (int)v9)
  {
    v10 = 0;
    while (1)
    {
      result = icu::StringSegment::charAt(a1, v7 + v10);
      if ((_DWORD)result != 48)
        goto LABEL_2;
      ++v10;
      v9 = (icu::number::Notation *)icu::StringSegment::length(a1);
      if (v7 + v10 >= (int)v9)
        goto LABEL_16;
    }
  }
  v10 = 0;
LABEL_16:
  if (v8 == 69)
    v11 = icu::number::Notation::engineering(v9);
  else
    v11 = icu::number::Notation::scientific(v9);
  v15 = v11;
  v16 = v12;
  v17 = icu::number::ScientificNotation::withExponentSignDisplay((uint64_t)&v15);
  v18 = v13;
  result = icu::number::ScientificNotation::withMinExponentDigits((icu::number::ScientificNotation *)&v17, v10);
  *(_QWORD *)(a2 + 4) = result;
  *(_DWORD *)(a2 + 12) = v14;
  return result;
}

uint64_t sub_18BD2A184(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;
  char v11;

  if ((int)icu::StringSegment::length(a1) < 2)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    while (1)
    {
      v7 = v6 + 1;
      if (icu::StringSegment::charAt(a1, (int)v6 + 1) != 48)
        break;
      v8 = icu::StringSegment::length(a1);
      v9 = v6 + 2;
      v6 = (v6 + 1);
      if (v9 >= v8)
      {
        v6 = (v7 + 1);
        break;
      }
    }
  }
  result = icu::StringSegment::length(a1);
  if ((int)v6 >= (int)result)
  {
    result = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)v6);
    *(_QWORD *)(a2 + 124) = result;
    *(_BYTE *)(a2 + 132) = v11;
  }
  else
  {
    *a3 = 65811;
  }
  return result;
}

void sub_18BD2A234(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  __int128 *v6;
  char *v7;
  char *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (icu::StringSegment::length(a1) == 3)
  {
    icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v10);
    v6 = (__int128 *)WORD4(v10);
    if ((BYTE8(v10) & 0x11) != 0)
    {
      v7 = 0;
    }
    else if ((BYTE8(v10) & 2) != 0)
    {
      v6 = &v10;
      v7 = (char *)&v10 + 10;
    }
    else
    {
      v7 = (char *)*((_QWORD *)&v11 + 1);
    }
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10);
    v9 = 0;
    v10 = 0u;
    v11 = 0u;
    v8 = v7;
    icu::CurrencyUnit::CurrencyUnit(&v10, &v8, &v9);
    if (v9 < 1)
      icu::MeasureUnit::operator=(a2 + 16, (unint64_t)&v10);
    else
      *a3 = 65811;
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v10);
  }
  else
  {
    *a3 = 65811;
  }
}

void *sub_18BD2A34C(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  unint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  UErrorCode v13;
  unint64_t v15;
  void *v16;
  UErrorCode v17;
  uint64_t i;
  UErrorCode *v19;
  int Available;
  uint64_t v21;
  char *v22;
  const char *v23;
  const char *Subtype;
  uint64_t j;
  unint64_t v26;
  UErrorCode v27;
  unint64_t v28;
  char v29[960];
  UErrorCode v30[2];
  _DWORD v31[12];
  uint64_t v32;
  void *v33[8];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v34);
  v5 = 0;
  v6 = (void *)WORD4(v34);
  v7 = (unint64_t)WORD4(v34) >> 5;
  v8 = *((_QWORD *)&v35 + 1);
  if ((BYTE8(v34) & 2) != 0)
    v9 = (unint64_t)&v34 | 0xA;
  else
    v9 = *((_QWORD *)&v35 + 1);
  if ((WORD4(v34) & 0x8000) != 0)
    goto LABEL_7;
LABEL_5:
  v10 = (unint64_t)WORD4(v34) >> 5;
  if (v5 < v7)
  {
    while (v10 <= v5 || *(_WORD *)(v9 + 2 * v5) != 45)
    {
      ++v5;
      if ((WORD4(v34) & 0x8000) == 0)
        goto LABEL_5;
LABEL_7:
      v10 = HIDWORD(v34);
      if ((uint64_t)v5 >= SHIDWORD(v34))
        goto LABEL_13;
    }
    if ((WORD4(v34) & 0x8000) == 0)
      goto LABEL_14;
LABEL_13:
    LODWORD(v7) = HIDWORD(v34);
  }
LABEL_14:
  if ((_DWORD)v7 == (_DWORD)v5)
  {
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
    return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v34);
  }
  memset(&v33[1], 0, 56);
  v33[0] = (char *)&v33[1] + 5;
  LODWORD(v33[1]) = 40;
  v30[0] = U_ZERO_ERROR;
  if ((BYTE8(v34) & 2) != 0)
    v8 = (unint64_t)&v34 | 0xA;
  if ((BYTE8(v34) & 0x11) != 0)
    v11 = 0;
  else
    v11 = v8;
  v28 = v11;
  icu::UnicodeString::UnicodeString(v29, 0, &v28);
  icu::CharString::appendInvariantChars((icu::CharString *)v33, (const icu::UnicodeString *)v29, v30);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v29);
  v13 = v30[0];
  if (v30[0] != U_INVARIANT_CONVERSION_ERROR)
  {
    if (v30[0] > U_ZERO_ERROR)
      goto LABEL_24;
    memset(v31, 0, sizeof(v31));
    *(_QWORD *)v30 = (char *)&v31[1] + 1;
    v31[0] = 40;
    v32 = 0;
    v27 = U_ZERO_ERROR;
    v15 = *((_QWORD *)&v35 + 1);
    if ((BYTE8(v34) & 2) != 0)
      v15 = (unint64_t)&v34 | 0xA;
    if ((BYTE8(v34) & 0x11) != 0)
      v15 = 0;
    v26 = v15 + 2 * (v5 + 1);
    icu::UnicodeString::UnicodeString(v29, 0, &v26);
    icu::CharString::appendInvariantChars((icu::CharString *)v30, (const icu::UnicodeString *)v29, &v27);
    icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v29);
    v17 = v27;
    if (v27 == U_INVARIANT_CONVERSION_ERROR)
    {
      v17 = U_NUMBER_SKELETON_SYNTAX_ERROR;
    }
    else if (v27 <= U_ZERO_ERROR)
    {
      bzero(v29, 0x3C0uLL);
      for (i = 0; i != 960; i += 24)
        icu::MeasureUnit::MeasureUnit((uint64_t)&v29[i]);
      v27 = U_ZERO_ERROR;
      Available = icu::MeasureUnit::getAvailable((icu::MeasureUnit *)v33[0], (icu::MeasureUnit *)v29, (icu::MeasureUnit *)0x28, (int *)&v27, v19);
      if (v27 <= U_ZERO_ERROR)
      {
        if (Available < 1)
        {
LABEL_46:
          *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
        }
        else
        {
          v21 = Available;
          v22 = v29;
          while (1)
          {
            v23 = *(const char **)v30;
            Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v22);
            if (!strcmp(v23, Subtype))
              break;
            v22 += 24;
            if (!--v21)
              goto LABEL_46;
          }
          icu::MeasureUnit::operator=(a2 + 16, (unint64_t)v22);
        }
      }
      else
      {
        *a3 = U_INTERNAL_PROGRAM_ERROR;
      }
      for (j = 936; j != -24; j -= 24)
        icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v29[j]);
      goto LABEL_36;
    }
    *a3 = v17;
LABEL_36:
    if (LOBYTE(v31[1]))
      uprv_free(*(void **)v30);
    goto LABEL_25;
  }
  v13 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_24:
  *a3 = v13;
LABEL_25:
  v6 = (void *)BYTE4(v33[1]);
  if (BYTE4(v33[1]))
    uprv_free(v33[0]);
  return icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v34);
}

void sub_18BD2A6B8(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  unint64_t v6;
  _QWORD v7[3];

  memset(v7, 0, sizeof(v7));
  v6 = a2 + 16;
  icu::MeasureUnit::MeasureUnit((uint64_t)v7, a2 + 16);
  sub_18BD2A34C(a1, a2, a3);
  if (*(int *)a3 <= 0)
  {
    icu::MeasureUnit::operator=(a2 + 40, v6);
    icu::MeasureUnit::operator=(v6, (unint64_t)v7);
  }
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v7);
}

void sub_18BD2A740(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  char *v6;
  void *v7;
  UErrorCode v8;
  char *v9;
  char *v10;
  UErrorCode v11;
  uint64_t *v12;
  _QWORD v13[7];
  _BYTE v14[64];
  void *v15[7];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(&v15[1], 0, 48);
  v16 = 0;
  v15[0] = (char *)&v15[1] + 5;
  LODWORD(v15[1]) = 40;
  v11 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v12);
  v6 = 0;
  if ((v13[0] & 0x11) == 0)
  {
    if ((v13[0] & 2) != 0)
      v6 = (char *)v13 + 2;
    else
      v6 = (char *)v13[2];
  }
  v10 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v14, 0, &v10);
  icu::CharString::appendInvariantChars((icu::CharString *)v15, (const icu::UnicodeString *)v14, &v11);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v14);
  v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)&v12);
  v8 = v11;
  if (v11 == U_INVARIANT_CONVERSION_ERROR)
  {
    v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }
  if (v11 > U_ZERO_ERROR)
    goto LABEL_8;
  v12 = qword_1E2246C90;
  v13[0] = 0;
  icu::MeasureUnit::forIdentifier((uint64_t)v15[0], v16, (int *)v13, (uint64_t)v14);
  icu::MeasureUnit::operator=(a2 + 16, (uint64_t)v14);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v14);
  if (SLODWORD(v13[0]) >= 1)
    *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
  icu::ErrorCode::~ErrorCode((icu::ErrorCode *)&v12);
LABEL_9:
  if (BYTE4(v15[1]))
    uprv_free(v15[0]);
}

void sub_18BD2A8E8(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  _BYTE *v6;
  void *v7;
  UErrorCode v8;
  _BYTE *v9;
  _BYTE *v10;
  UErrorCode v11;
  char v12[8];
  __int16 v13;
  _BYTE v14[54];
  _BYTE v15[64];
  void *v16[7];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  memset(&v16[1], 0, 48);
  v17 = 0;
  v16[0] = (char *)&v16[1] + 5;
  LODWORD(v16[1]) = 40;
  v11 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v12);
  v6 = 0;
  if ((v13 & 0x11) == 0)
  {
    if ((v13 & 2) != 0)
      v6 = v14;
    else
      v6 = *(_BYTE **)&v14[14];
  }
  v10 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v15, 0, &v10);
  icu::CharString::appendInvariantChars((icu::CharString *)v16, (const icu::UnicodeString *)v15, &v11);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v15);
  v9 = v10;
  icu::UnicodeString::~UnicodeString(&v9, (icu::UnicodeString *)v12);
  v8 = v11;
  if (v11 == U_INVARIANT_CONVERSION_ERROR)
  {
    v8 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v8;
    goto LABEL_9;
  }
  if (v11 > U_ZERO_ERROR)
    goto LABEL_8;
  icu::number::impl::StringProp::set(a2 + 192, (const char *)v16[0], v17);
LABEL_9:
  if (BYTE4(v16[1]))
    uprv_free(v16[0]);
}

uint64_t sub_18BD2AA3C(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  icu::number::IntegerWidth *v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  char v17;
  uint64_t v18;
  int v19;

  v6 = icu::StringSegment::charAt(a1, 0) & 0xFFFE;
  v7 = v6 != 42;
  v8 = v6 == 42;
  if (v6 == 42)
    v9 = -1;
  else
    v9 = 0;
  if ((int)icu::StringSegment::length(a1) > v8 && v6 != 42 && icu::StringSegment::charAt(a1, v8) == 35)
  {
    v10 = v9 + 1;
    v11 = v8 + 1;
    do
    {
      v9 = v10;
      v8 = v11;
      if (v11 >= (int)icu::StringSegment::length(a1))
        break;
      v12 = icu::StringSegment::charAt(a1, v8);
      v10 = v9 + 1;
      v11 = v8 + 1;
    }
    while (v12 == 35);
    v7 = 1;
  }
  if (v8 >= (int)icu::StringSegment::length(a1) || v8 >= (int)icu::StringSegment::length(a1))
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    while (icu::StringSegment::charAt(a1, v8 + (int)v13) == 48)
    {
      v13 = (icu::number::IntegerWidth *)((_DWORD)v13 + 1);
      if (v8 + (int)v13 >= (int)icu::StringSegment::length(a1))
      {
        v8 += (int)v13;
        goto LABEL_18;
      }
    }
    v8 += (int)v13;
  }
LABEL_18:
  if (v7)
    v14 = ((_DWORD)v13 + v9);
  else
    v14 = 0xFFFFFFFFLL;
  result = icu::StringSegment::length(a1);
  if (v8 >= (int)result)
  {
    if ((_DWORD)v14 == -1)
    {
      result = icu::number::IntegerWidth::zeroFillTo(v13);
    }
    else
    {
      v18 = icu::number::IntegerWidth::zeroFillTo(v13);
      v19 = v16;
      result = icu::number::IntegerWidth::truncateAt((icu::number::IntegerWidth *)&v18, v14);
    }
    *(_QWORD *)(a2 + 124) = result;
    *(_BYTE *)(a2 + 132) = v17;
  }
  else
  {
    *a3 = 65811;
  }
  return result;
}

void sub_18BD2ABD0(icu::StringSegment *a1, uint64_t a2, char *a3)
{
  _BYTE *v6;
  void *v7;
  UErrorCode *v8;
  UErrorCode v9;
  icu::NumberingSystem *InstanceByName;
  _BYTE *v11;
  _BYTE *v12;
  UErrorCode v13;
  char v14[8];
  __int16 v15;
  _BYTE v16[54];
  _BYTE v17[64];
  void *v18[9];

  v18[8] = *(void **)MEMORY[0x1E0C80C00];
  memset(&v18[1], 0, 56);
  v18[0] = (char *)&v18[1] + 5;
  LODWORD(v18[1]) = 40;
  v13 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v14);
  v6 = 0;
  if ((v15 & 0x11) == 0)
  {
    if ((v15 & 2) != 0)
      v6 = v16;
    else
      v6 = *(_BYTE **)&v16[14];
  }
  v12 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v17, 0, &v12);
  icu::CharString::appendInvariantChars((icu::CharString *)v18, (const icu::UnicodeString *)v17, &v13);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v17);
  v11 = v12;
  icu::UnicodeString::~UnicodeString(&v11, (icu::UnicodeString *)v14);
  v9 = v13;
  if (v13 == U_INVARIANT_CONVERSION_ERROR)
  {
    v9 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *(_DWORD *)a3 = v9;
    goto LABEL_9;
  }
  if (v13 > U_ZERO_ERROR)
    goto LABEL_8;
  InstanceByName = icu::NumberingSystem::createInstanceByName((icu::NumberingSystem *)v18[0], a3, v8);
  if (InstanceByName && *(int *)a3 < 1)
    icu::number::impl::SymbolsWrapper::setTo((_QWORD *)(a2 + 136), (uint64_t)InstanceByName);
  else
    *(_DWORD *)a3 = 65811;
LABEL_9:
  if (BYTE4(v18[1]))
    uprv_free(v18[0]);
}

void sub_18BD2AD54(icu::StringSegment *a1, uint64_t a2, UErrorCode *a3)
{
  _BYTE *v6;
  void *v7;
  unint64_t v8;
  UErrorCode v9;
  icu::number::impl::DecNum *v10;
  icu::number::impl::DecNum *v11;
  _BYTE *v12;
  _BYTE *v13;
  UErrorCode v14;
  icu::number::impl::DecNum *v15;
  __int16 v16;
  _BYTE v17[54];
  _BYTE v18[64];
  void *v19[7];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memset(&v19[1], 0, 48);
  v20 = 0;
  v19[0] = (char *)&v19[1] + 5;
  LODWORD(v19[1]) = 40;
  v14 = U_ZERO_ERROR;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)&v15);
  v6 = 0;
  if ((v16 & 0x11) == 0)
  {
    if ((v16 & 2) != 0)
      v6 = v17;
    else
      v6 = *(_BYTE **)&v17[14];
  }
  v13 = v6;
  icu::StringSegment::length(a1);
  icu::UnicodeString::UnicodeString(v18, 0, &v13);
  icu::CharString::appendInvariantChars((icu::CharString *)v19, (const icu::UnicodeString *)v18, &v14);
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)v18);
  v12 = v13;
  icu::UnicodeString::~UnicodeString(&v12, (icu::UnicodeString *)&v15);
  v9 = v14;
  if (v14 == U_INVARIANT_CONVERSION_ERROR)
  {
    v9 = U_NUMBER_SKELETON_SYNTAX_ERROR;
LABEL_8:
    *a3 = v9;
    goto LABEL_9;
  }
  if (v14 > U_ZERO_ERROR)
    goto LABEL_8;
  v10 = (icu::number::impl::DecNum *)icu::UMemory::operator new((uint64_t *)v14, (icu::UMemory *)0x60, v8);
  if (v10)
  {
    v11 = v10;
    v15 = icu::number::impl::DecNum::DecNum(v10);
    if (*(int *)a3 <= 0)
    {
      icu::number::impl::DecNum::setTo(v11, (const char *)v19[0], v20, a3);
      if (*(int *)a3 > 0 || icu::number::impl::DecNum::isSpecial(v11))
      {
        *a3 = U_NUMBER_SKELETON_SYNTAX_ERROR;
      }
      else
      {
        v15 = 0;
        icu::number::Scale::Scale((icu::number::Scale *)v18, 0, v11);
        icu::number::Scale::operator=(a2 + 168, (uint64_t)v18);
        icu::number::Scale::~Scale((icu::number::Scale *)v18);
      }
    }
  }
  else
  {
    v15 = 0;
    if (*(int *)a3 <= 0)
      *a3 = U_MEMORY_ALLOCATION_ERROR;
  }
  sub_18BBCBB54((uint64_t *)&v15);
LABEL_9:
  if (BYTE4(v19[1]))
    uprv_free(v19[0]);
}

uint64_t sub_18BD2AF4C(icu::StringSegment *a1, uint64_t a2)
{
  __int16 v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;

  v4 = icu::StringSegment::charAt(a1, 0);
  result = 0;
  if ((v4 & 0xFFFE) == 0x2A)
  {
    if ((int)icu::StringSegment::length(a1) < 2)
    {
      v7 = 0;
      v6 = 1;
    }
    else
    {
      v6 = 1;
      do
      {
        if (icu::StringSegment::charAt(a1, v6) != 101)
          break;
        ++v6;
      }
      while (v6 < (int)icu::StringSegment::length(a1));
      v7 = v6 - 1;
    }
    if (v6 >= (int)icu::StringSegment::length(a1))
    {
      *(_QWORD *)(a2 + 4) = icu::number::ScientificNotation::withMinExponentDigits((icu::number::ScientificNotation *)(a2 + 4), v7);
      *(_DWORD *)(a2 + 12) = v8;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_18BD2B00C(icu::StringSegment *a1, uint64_t a2)
{
  _WORD *v4;
  int v5;
  int v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  _QWORD v15[2];
  _WORD *v16;
  void *v17[2];
  unsigned __int16 *v18;
  uint64_t v19;
  _BYTE v20[8];
  __int16 v21;
  _BYTE v22[54];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17[0] = 0;
  v17[1] = (void *)qword_1EE009C28;
  v18 = (unsigned __int16 *)qword_1EE009C28;
  v19 = 0xFFFFFFFFLL;
  v15[1] = qword_1EE009C28;
  icu::StringSegment::toTempUnicodeString(a1, (uint64_t)v20);
  v4 = 0;
  if ((v21 & 0x11) == 0)
  {
    if ((v21 & 2) != 0)
      v4 = v22;
    else
      v4 = *(_WORD **)&v22[14];
  }
  v16 = v4;
  v5 = icu::StringSegment::length(a1);
  v6 = icu::UCharsTrie::next((uint64_t)v17, &v16, v5);
  v15[0] = v16;
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v20);
  if ((v6 - 4) < 0xFFFFFFFE)
    goto LABEL_19;
  v7 = v18 + 1;
  v8 = *v18;
  if ((__int16)*v18 < 0)
  {
    v10 = v8 & 0x7FFF;
    if (v10 >= 0x4000)
    {
      if (v10 == 0x7FFF)
      {
        v11 = v18[1] << 16;
        v7 = v18 + 2;
      }
      else
      {
        v11 = (v10 << 16) - 0x40000000;
      }
      v10 = v11 | *v7;
    }
  }
  else
  {
    v9 = v8 >> 6;
    if (v9 > 0x100)
      v10 = v9 > 0x1FE ? v18[2] | (v18[1] << 16) : (*v7 | ((v9 & 0x1FF) << 16)) - 16842752;
    else
      v10 = v9 - 1;
  }
  if (v10 - 38 > 8)
  {
LABEL_19:
    v13 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 4) = icu::number::ScientificNotation::withExponentSignDisplay(a2 + 4);
    *(_DWORD *)(a2 + 12) = v12;
    v13 = 1;
  }
  icu::UCharsTrie::~UCharsTrie(v17);
  return v13;
}

uint64_t sub_18BD2B1B0(icu::StringSegment *a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  uint64_t result;
  int v8;
  int v9;
  _OWORD *v10;
  int v11;
  _BYTE v12[28];

  v6 = icu::StringSegment::charAt(a1, 0);
  result = 0;
  if (v6 == 64)
  {
    if ((int)icu::StringSegment::length(a1) < 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      do
      {
        if (icu::StringSegment::charAt(a1, v8) != 64)
          break;
        ++v8;
      }
      while (v8 < (int)icu::StringSegment::length(a1));
    }
    v9 = v8;
    if (v8 < (int)icu::StringSegment::length(a1))
    {
      if ((icu::StringSegment::charAt(a1, v8) & 0xFFFE) == 0x2A)
      {
        if (v8 + 1 >= (int)icu::StringSegment::length(a1))
        {
          icu::number::FractionPrecision::withMinDigits(a2 + 64, v8, (uint64_t)v12);
          *(_OWORD *)(a2 + 64) = *(_OWORD *)v12;
          *(_OWORD *)(a2 + 76) = *(_OWORD *)&v12[12];
          return 1;
        }
LABEL_24:
        result = 0;
        *a3 = 65811;
        return result;
      }
      v9 = v8;
      if (v8 < (int)icu::StringSegment::length(a1))
      {
        v9 = v8;
        do
        {
          if (icu::StringSegment::charAt(a1, v9) != 35)
            break;
          ++v9;
        }
        while (v9 < (int)icu::StringSegment::length(a1));
      }
    }
    v10 = (_OWORD *)(a2 + 64);
    if (v9 >= (int)icu::StringSegment::length(a1))
    {
      if (v8 != 1)
        goto LABEL_24;
      icu::number::FractionPrecision::withMaxDigits((uint64_t)v10, v9, (uint64_t)v12);
    }
    else
    {
      if (icu::StringSegment::codePointAt((uint64_t **)a1, v9) == 114)
      {
        v11 = 0;
      }
      else
      {
        if (icu::StringSegment::codePointAt((uint64_t **)a1, v9) != 115)
          goto LABEL_24;
        v11 = 1;
      }
      if (v9 + 1 < (int)icu::StringSegment::length(a1))
        goto LABEL_24;
      icu::number::FractionPrecision::withSignificantDigits((uint64_t)v10, v8, v9, v11, (uint64_t)v12);
    }
    *v10 = *(_OWORD *)v12;
    *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)&v12[12];
    return 1;
  }
  return result;
}

BOOL sub_18BD2B3AC(icu::StringSegment *a1, uint64_t a2)
{
  _BOOL8 v4;
  void *v5;
  _BYTE v7[56];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  icu::UnicodeString::UnicodeString((uint64_t)v7, (uint64_t)"w");
  v4 = icu::StringSegment::operator==(a1, (uint64_t)v7);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
  if (v4)
  {
    icu::number::Precision::trailingZeroDisplay(a2 + 64, 1, (uint64_t)v7);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)v7;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v7[12];
  }
  return v4;
}

uint64_t sub_18BD2B450(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  __int16 v10;

  v6 = *(_DWORD *)(a1 + 4);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = *(_DWORD *)(a1 + 8);
      if (v7)
      {
        if (v7 != 1)
        {
          v8 = 0;
          *a3 = 16;
          return v8;
        }
        icu::UnicodeString::doAppend(a2, (uint64_t)"c", 0, 0xFFFFFFFFLL);
      }
      else
      {
        icu::UnicodeString::doAppend(a2, (uint64_t)L"compact-short", 0, 0xFFFFFFFFLL);
      }
      return 1;
    }
    return 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 8) == 3)
      icu::UnicodeString::doAppend(a2, (uint64_t)L"engineering", 0, 0xFFFFFFFFLL);
    else
      icu::UnicodeString::doAppend(a2, (uint64_t)L"scientific", 0, 0xFFFFFFFFLL);
    if (*(__int16 *)(a1 + 10) < 2
      || (v10 = 47,
          icu::UnicodeString::doAppend(a2, (uint64_t)&v10, 0, 1),
          sub_18BD2BE90(*(__int16 *)(a1 + 10), a2),
          v8 = 0,
          *a3 <= 0))
    {
      if (!*(_DWORD *)(a1 + 12))
        return 1;
      v10 = 47;
      v8 = 1;
      icu::UnicodeString::doAppend(a2, (uint64_t)&v10, 0, 1);
      sub_18BD27B2C(*(_DWORD *)(a1 + 12), a2);
    }
  }
  return v8;
}

BOOL sub_18BD2B5E4(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  icu::MeasureUnit *v6;
  icu::MeasureUnit *v7;
  uint64_t v8;
  char v9;
  const char *Type;
  const char *v11;
  const char *v12;
  char v13;
  _BOOL8 v14;
  const char *Subtype;
  const char *v16;
  char *Identifier;
  uint64_t v18;
  void *v19;
  uint64_t v21[4];
  _BYTE v22[24];
  icu::MeasureUnitImpl *v23[3];
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  memset(v23, 0, sizeof(v23));
  v6 = (icu::MeasureUnit *)(a1 + 16);
  icu::MeasureUnit::MeasureUnit((uint64_t)v23, a1 + 16);
  icu::MeasureUnit::MeasureUnit((uint64_t)&v24);
  v8 = *(_QWORD *)(a1 + 40);
  v7 = (icu::MeasureUnit *)(a1 + 40);
  v9 = (*(uint64_t (**)(icu::MeasureUnit *, __int128 *))(v8 + 32))(v7, &v24);
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
  if ((v9 & 1) == 0)
  {
    Type = icu::MeasureUnit::getType(v6);
    if (!strcmp("currency", Type) || (v11 = icu::MeasureUnit::getType(v7), !strcmp("currency", v11)))
    {
      v14 = 0;
      *a3 = U_UNSUPPORTED_ERROR;
      goto LABEL_21;
    }
    icu::MeasureUnit::reciprocal((icu::MeasureUnitImpl **)v7, a3, (uint64_t)v22);
    icu::MeasureUnit::product(v23, (const icu::MeasureUnit *)v22, a3, (uint64_t)&v24);
    icu::MeasureUnit::operator=((uint64_t)v23, (uint64_t)&v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v22);
  }
  v12 = icu::MeasureUnit::getType((icu::MeasureUnit *)v23);
  if (!strcmp("currency", v12))
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)"c", 0, 0xFFFFFFFFLL);
    v21[0] = (uint64_t)"c";
    v24 = 0u;
    v25 = 0u;
    icu::CurrencyUnit::CurrencyUnit(v21, (icu::CurrencyUnit *)&v24, (const icu::MeasureUnit *)v23, a3);
    v14 = *a3 < U_ILLEGAL_ARGUMENT_ERROR;
    if (*(int *)a3 <= 0)
      icu::UnicodeString::doAppend(a2, (uint64_t)&v25 + 4, 0, 0xFFFFFFFFLL);
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v24);
  }
  else
  {
    icu::MeasureUnit::MeasureUnit((uint64_t)&v24);
    v13 = (*((uint64_t (**)(icu::MeasureUnitImpl **, __int128 *))v23[0] + 4))(v23, &v24);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v24);
    if ((v13 & 1) != 0)
    {
      v14 = 0;
    }
    else
    {
      Subtype = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v23);
      if (!strcmp("percent", Subtype))
      {
        icu::UnicodeString::doAppend(a2, (uint64_t)"p", 0, 0xFFFFFFFFLL);
        v21[1] = (uint64_t)"p";
      }
      else
      {
        v16 = icu::MeasureUnit::getSubtype((icu::MeasureUnit *)v23);
        if (!strcmp("permille", v16))
        {
          icu::UnicodeString::doAppend(a2, (uint64_t)"p", 0, 0xFFFFFFFFLL);
          v21[2] = (uint64_t)"p";
        }
        else
        {
          icu::UnicodeString::doAppend(a2, (uint64_t)L"unit/", 0, 0xFFFFFFFFLL);
          v21[3] = (uint64_t)L"unit/";
          Identifier = icu::MeasureUnit::getIdentifier((icu::MeasureUnit *)v23);
          icu::UnicodeString::UnicodeString((icu::UnicodeString *)&v24, Identifier);
          if ((SWORD4(v24) & 0x8000u) == 0)
            v18 = WORD4(v24) >> 5;
          else
            v18 = HIDWORD(v24);
          icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)&v24, 0, v18);
          icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)&v24);
        }
      }
      v14 = 1;
    }
  }
LABEL_21:
  icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v23);
  return v14;
}

BOOL sub_18BD2B8E8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v5;
  void *v6;
  _BYTE v8[8];
  unsigned __int16 v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(__int16 *)(a1 + 200);
  if (v2 >= 1)
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)L"usage/", 0, 0xFFFFFFFFLL);
    icu::UnicodeString::UnicodeString(v8, *(_QWORD *)(a1 + 192), 0xFFFFFFFFLL, 0);
    if ((v9 & 0x8000u) == 0)
      v5 = v9 >> 5;
    else
      v5 = v10;
    icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v8, 0, v5);
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v8);
  }
  return v2 > 0;
}

uint64_t sub_18BD2B9C0(uint64_t a1, icu::UnicodeString *this)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  __int16 v8;

  switch(*(_DWORD *)(a1 + 64))
  {
    case 1:
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)"p", 0, 0xFFFFFFFFLL);
      goto LABEL_14;
    case 2:
      sub_18BD2BEF0(*(__int16 *)(a1 + 72), *(__int16 *)(a1 + 74), (uint64_t)this);
      goto LABEL_14;
    case 3:
      v5 = *(__int16 *)(a1 + 76);
      v6 = *(__int16 *)(a1 + 78);
      goto LABEL_13;
    case 4:
      sub_18BD2BEF0(*(__int16 *)(a1 + 72), *(__int16 *)(a1 + 74), (uint64_t)this);
      v8 = 47;
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1);
      v6 = *(__int16 *)(a1 + 78);
      if (*(_BYTE *)(a1 + 84))
      {
        if (*(_DWORD *)(a1 + 80))
        {
          v5 = 1;
        }
        else
        {
          v5 = *(__int16 *)(a1 + 78);
          v6 = -1;
        }
LABEL_13:
        sub_18BD2BFD8(v5, v6, this);
      }
      else
      {
        sub_18BD2BFD8(*(__int16 *)(a1 + 76), v6, this);
        if (*(_DWORD *)(a1 + 80))
          v7 = 115;
        else
          v7 = 114;
        v8 = v7;
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1);
      }
LABEL_14:
      if (*(_DWORD *)(a1 + 88) == 1)
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"/w", 0, 0xFFFFFFFFLL);
      return 1;
    case 5:
    case 6:
    case 7:
      icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)"p", 0, 0xFFFFFFFFLL);
      sub_18BD2C074(*(_DWORD *)(a1 + 72), *(__int16 *)(a1 + 80), *(__int16 *)(a1 + 82), (uint64_t)this);
      goto LABEL_14;
    case 8:
      if (*(_DWORD *)(a1 + 72))
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"precision-currency-cash", 0, 0xFFFFFFFFLL);
      else
        icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)L"precision-currency-standard", 0, 0xFFFFFFFFLL);
      goto LABEL_14;
    case 9:
      v5 = *(__int16 *)(a1 + 80);
      v6 = *(__int16 *)(a1 + 82);
      goto LABEL_13;
    default:
      return 0;
  }
}

uint64_t sub_18BD2BBF4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  uint64_t result;

  if (*(__int16 *)(a1 + 100) == -3)
    return 0;
  v3 = *(_DWORD *)(a1 + 108);
  if (v3 == 2)
    return 0;
  if (v3 == 5)
  {
    result = 0;
    *a3 = 16;
  }
  else
  {
    sub_18BD27894(v3, a2);
    return 1;
  }
  return result;
}

uint64_t sub_18BD2BC44(uint64_t a1, icu::UnicodeString *a2)
{
  unsigned __int16 *v2;
  BOOL v3;
  int v6;
  uint64_t v8;
  int v9;

  v2 = (unsigned __int16 *)(a1 + 124);
  if (*(_BYTE *)(a1 + 132))
    v3 = 1;
  else
    v3 = *(unsigned __int16 *)(a1 + 124) == 0xFFFF;
  if (v3)
    return 0;
  v8 = icu::number::IntegerWidth::zeroFillTo((icu::number::IntegerWidth *)1);
  v9 = v6;
  if (icu::number::IntegerWidth::operator==(v2, (unsigned __int16 *)&v8))
    return 0;
  if (*(unsigned __int16 *)(a1 + 124) | *(unsigned __int16 *)(a1 + 126))
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"i", 0, 0xFFFFFFFFLL);
    sub_18BD2C158(*(__int16 *)(a1 + 124), *(__int16 *)(a1 + 126), a2);
  }
  else
  {
    icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)"i", 0, 0xFFFFFFFFLL);
  }
  return 1;
}

BOOL sub_18BD2BD28(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  icu::number::impl::SymbolsWrapper *v5;
  _BOOL8 isNumberingSystem;
  icu::NumberingSystem *NumberingSystem;
  const char *Name;

  v5 = (icu::number::impl::SymbolsWrapper *)(a1 + 136);
  isNumberingSystem = icu::number::impl::SymbolsWrapper::isNumberingSystem((icu::number::impl::SymbolsWrapper *)(a1 + 136));
  if (isNumberingSystem)
  {
    NumberingSystem = (icu::NumberingSystem *)icu::number::impl::SymbolsWrapper::getNumberingSystem(v5);
    Name = (const char *)icu::NumberingSystem::getName(NumberingSystem);
    if (!strcmp(Name, "latn"))
    {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"latin", 0, 0xFFFFFFFFLL);
    }
    else
    {
      icu::UnicodeString::doAppend(a2, (uint64_t)L"numbering-system/", 0, 0xFFFFFFFFLL);
      sub_18BD2C1EC(NumberingSystem, a2);
    }
  }
  else if (icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols(v5))
  {
    *a3 = 16;
  }
  return isNumberingSystem;
}

uint64_t sub_18BD2BE00(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  BOOL v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 168))
    v3 = 0;
  else
    v3 = *(_QWORD *)(a1 + 176) == 0;
  v4 = !v3;
  if (!v3)
  {
    icu::UnicodeString::doAppend(a2, (uint64_t)L"scale/", 0, 0xFFFFFFFFLL);
    sub_18BD2C284(*(_DWORD *)(a1 + 168), *(const icu::number::impl::DecNum **)(a1 + 176), a2, a3);
  }
  return v4;
}

uint64_t sub_18BD2BE90(int a1, uint64_t a2)
{
  uint64_t result;
  __int16 v5;

  v5 = 42;
  result = icu::UnicodeString::doAppend(a2, (uint64_t)&v5, 0, 1);
  if (a1 >= 1)
  {
    do
    {
      result = icu::UnicodeString::append(a2, 0x65u);
      --a1;
    }
    while (a1);
  }
  return result;
}

uint64_t sub_18BD2BEF0(int a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  __int16 v9;
  __int16 v10;

  if (!(a2 | a1))
    return icu::UnicodeString::doAppend(a3, (uint64_t)"p", 0, 0xFFFFFFFFLL);
  v9 = 46;
  result = icu::UnicodeString::doAppend(a3, (uint64_t)&v9, 0, 1);
  if (a1 >= 1)
  {
    v7 = a1;
    do
    {
      result = icu::UnicodeString::append(a3, 0x30u);
      --v7;
    }
    while (v7);
  }
  if (a2 == -1)
  {
    v10 = 42;
    return icu::UnicodeString::doAppend(a3, (uint64_t)&v10, 0, 1);
  }
  else
  {
    v8 = a2 - a1;
    if (v8 >= 1)
    {
      do
      {
        result = icu::UnicodeString::append(a3, 0x23u);
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_18BD2BFD8(uint64_t result, int a2, icu::UnicodeString *this)
{
  int v5;
  int v6;
  int v7;
  __int16 v8;

  v5 = result;
  if ((int)result >= 1)
  {
    v6 = result;
    do
    {
      result = icu::UnicodeString::append((uint64_t)this, 0x40u);
      --v6;
    }
    while (v6);
  }
  if (a2 == -1)
  {
    v8 = 42;
    return icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v8, 0, 1);
  }
  else
  {
    v7 = a2 - v5;
    if (v7 >= 1)
    {
      do
      {
        result = icu::UnicodeString::append((uint64_t)this, 0x23u);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

void sub_18BD2C074(unsigned int a1, int a2, int a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  _OWORD v10[4];
  uint64_t v11;
  _BYTE v12[8];
  unsigned __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
  icu::number::impl::DecimalQuantity::setToLong((void **)v10, a1);
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v10, a2);
  icu::number::impl::DecimalQuantity::setMinFraction((uint64_t)v10, a3);
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)v10, (uint64_t)v12);
  if ((v13 & 0x8000u) == 0)
    v8 = v13 >> 5;
  else
    v8 = v14;
  icu::UnicodeString::doAppend(a4, (const icu::UnicodeString *)v12, 0, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
}

uint64_t sub_18BD2C158(uint64_t result, int a2, icu::UnicodeString *this)
{
  int v4;
  int v5;
  __int16 v6;

  v4 = result;
  if (a2 == -1)
  {
    v6 = 42;
    result = icu::UnicodeString::doAppend((uint64_t)this, (uint64_t)&v6, 0, 1);
  }
  else
  {
    v5 = a2 - result;
    if (a2 - (int)result >= 1)
    {
      do
      {
        result = icu::UnicodeString::append((uint64_t)this, 0x23u);
        --v5;
      }
      while (v5);
    }
  }
  if (v4 >= 1)
  {
    do
    {
      result = icu::UnicodeString::append((uint64_t)this, 0x30u);
      --v4;
    }
    while (v4);
  }
  return result;
}

void *sub_18BD2C1EC(icu::NumberingSystem *a1, uint64_t a2)
{
  uint64_t Name;
  uint64_t v4;
  void *v5;
  _BYTE v7[8];
  unsigned __int16 v8;
  unsigned int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  Name = icu::NumberingSystem::getName(a1);
  icu::UnicodeString::UnicodeString(v7, Name, 0xFFFFFFFFLL, 0);
  if ((v8 & 0x8000u) == 0)
    v4 = v8 >> 5;
  else
    v4 = v9;
  icu::UnicodeString::doAppend(a2, (const icu::UnicodeString *)v7, 0, v4);
  return icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v7);
}

void sub_18BD2C284(int a1, const icu::number::impl::DecNum *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t v8;
  void *v9;
  _OWORD v10[4];
  uint64_t v11;
  _BYTE v12[8];
  unsigned __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v10);
  if (a2)
  {
    icu::number::impl::DecimalQuantity::setToDecNum((void **)v10, a2, a4);
    if (*(int *)a4 >= 1)
      goto LABEL_9;
  }
  else
  {
    icu::number::impl::DecimalQuantity::setToInt((void **)v10, 1);
  }
  icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v10, a1);
  icu::number::impl::DecimalQuantity::roundToInfinity((icu::number::impl::DecimalQuantity *)v10);
  icu::number::impl::DecimalQuantity::toPlainString((icu::number::impl::DecimalQuantity *)v10, (uint64_t)v12);
  if ((v13 & 0x8000u) == 0)
    v8 = v13 >> 5;
  else
    v8 = v14;
  icu::UnicodeString::doAppend(a3, (const icu::UnicodeString *)v12, 0, v8);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v12);
LABEL_9:
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v10);
}

void icu::number::NumberFormatterSettings<icu::number::UnlocalizedNumberFormatter>::toSkeleton(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1 || sub_18BD128A4(a1, (int *)a2))
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
  }
  else
  {
    sub_18BD29210(a1, a2, a3);
  }
}

void icu::number::NumberFormatterSettings<icu::number::LocalizedNumberFormatter>::toSkeleton(uint64_t a1@<X0>, UErrorCode *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(int *)a2 >= 1 || sub_18BD128A4(a1, (int *)a2))
  {
    *(_OWORD *)(a3 + 8) = 0u;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)a3 = off_1E2256B38;
    *(_WORD *)(a3 + 8) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)a3);
  }
  else
  {
    sub_18BD29210(a1, a2, a3);
  }
}

void icu::number::NumberFormatter::forSkeleton(UChar **this@<X0>, UErrorCode *a2@<X1>, _OWORD *a3@<X8>)
{
  icu::number::NumberFormatter::forSkeleton(this, 0, a2, a3);
}

uint64_t sub_18BD2C4AC()
{
  uprv_free((void *)qword_1EE009C28);
  qword_1EE009C28 = 0;
  atomic_store(0, &dword_1EE009C30);
  return 1;
}

icu::number::impl::SymbolsWrapper *icu::number::impl::SymbolsWrapper::SymbolsWrapper(icu::number::impl::SymbolsWrapper *this, const icu::number::impl::SymbolsWrapper *a2)
{
  icu::number::impl::SymbolsWrapper::doCopyFrom(this, a2);
  return this;
}

{
  icu::number::impl::SymbolsWrapper::doCopyFrom(this, a2);
  return this;
}

icu::NumberingSystem *icu::number::impl::SymbolsWrapper::doCopyFrom(icu::NumberingSystem *this, const icu::number::impl::SymbolsWrapper *a2)
{
  icu::NumberingSystem *v3;
  int v4;
  uint64_t *v5;
  uint64_t *v6;

  v3 = this;
  v4 = *(_DWORD *)a2;
  *(_DWORD *)this = *(_DWORD *)a2;
  if (v4 == 2)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 1);
    if (v6)
    {
      this = (icu::NumberingSystem *)icu::UMemory::operator new(v6, (icu::UMemory *)0x58, (unint64_t)a2);
      if (this)
        this = icu::NumberingSystem::NumberingSystem(this, *((const icu::NumberingSystem **)a2 + 1));
      goto LABEL_10;
    }
  }
  else
  {
    if (v4 != 1)
      return this;
    v5 = (uint64_t *)*((_QWORD *)a2 + 1);
    if (v5)
    {
      this = (icu::NumberingSystem *)icu::UMemory::operator new(v5, (icu::UMemory *)0xB48, (unint64_t)a2);
      if (this)
        this = (icu::NumberingSystem *)icu::DecimalFormatSymbols::DecimalFormatSymbols(this, *((const icu::DecimalFormatSymbols **)a2 + 1));
      goto LABEL_10;
    }
  }
  this = 0;
LABEL_10:
  *((_QWORD *)v3 + 1) = this;
  return this;
}

uint64_t icu::number::impl::SymbolsWrapper::SymbolsWrapper(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_DWORD *)result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  return result;
}

{
  int v2;

  v2 = *a2;
  *(_DWORD *)result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  return result;
}

uint64_t icu::number::impl::SymbolsWrapper::doMoveFrom(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_DWORD *)result = *a2;
  if ((v2 - 1) <= 1)
  {
    *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
  }
  return result;
}

icu::number::impl::SymbolsWrapper *icu::number::impl::SymbolsWrapper::operator=(icu::number::impl::SymbolsWrapper *this, icu::number::impl::SymbolsWrapper *a2)
{
  uint64_t v4;

  if (this != a2)
  {
    if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
    {
      v4 = *((_QWORD *)this + 1);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    icu::number::impl::SymbolsWrapper::doCopyFrom(this, a2);
  }
  return this;
}

_QWORD *icu::number::impl::SymbolsWrapper::doCleanup(_QWORD *this)
{
  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    this = (_QWORD *)this[1];
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t icu::number::impl::SymbolsWrapper::operator=(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;

  if ((int *)a1 != a2)
  {
    if (*(_DWORD *)a1 == 2 || *(_DWORD *)a1 == 1)
    {
      v4 = *(_QWORD *)(a1 + 8);
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    v5 = *a2;
    *(_DWORD *)a1 = *a2;
    if ((v5 - 1) <= 1)
    {
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
    }
  }
  return a1;
}

void icu::number::impl::SymbolsWrapper::~SymbolsWrapper(icu::number::impl::SymbolsWrapper *this)
{
  uint64_t v1;

  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    v1 = *((_QWORD *)this + 1);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
}

icu::DecimalFormatSymbols *icu::number::impl::SymbolsWrapper::setTo(icu::number::impl::SymbolsWrapper *this, const icu::DecimalFormatSymbols *a2)
{
  uint64_t v4;
  icu::DecimalFormatSymbols *result;

  if (*(_DWORD *)this == 2 || *(_DWORD *)this == 1)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  *(_DWORD *)this = 1;
  result = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((icu::UMemory *)0xB48, (unint64_t)a2);
  if (result)
    result = (icu::DecimalFormatSymbols *)icu::DecimalFormatSymbols::DecimalFormatSymbols(result, a2);
  *((_QWORD *)this + 1) = result;
  return result;
}

_QWORD *icu::number::impl::SymbolsWrapper::setTo(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;

  v3 = result;
  if (*(_DWORD *)result == 2 || *(_DWORD *)result == 1)
  {
    result = (_QWORD *)result[1];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  *(_DWORD *)v3 = 2;
  v3[1] = a2;
  return result;
}

BOOL icu::number::impl::SymbolsWrapper::isDecimalFormatSymbols(icu::number::impl::SymbolsWrapper *this)
{
  return *(_DWORD *)this == 1;
}

BOOL icu::number::impl::SymbolsWrapper::isNumberingSystem(icu::number::impl::SymbolsWrapper *this)
{
  return *(_DWORD *)this == 2;
}

uint64_t icu::number::impl::SymbolsWrapper::getDecimalFormatSymbols(icu::number::impl::SymbolsWrapper *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t icu::number::impl::SymbolsWrapper::getNumberingSystem(icu::number::impl::SymbolsWrapper *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t this, uint64_t a2)
{
  *(_QWORD *)this = 0;
  *(_WORD *)(this + 8) = 0;
  *(_DWORD *)(this + 12) = 0;
  return icu::number::impl::StringProp::operator=(this, a2);
}

uint64_t icu::number::impl::StringProp::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  BOOL v5;
  char *v6;
  uint64_t v7;

  if (a1 != a2)
  {
    *(_WORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      uprv_free(v4);
      *(_QWORD *)a1 = 0;
    }
    if (*(_QWORD *)a2)
      v5 = *(_DWORD *)(a2 + 12) <= 0;
    else
      v5 = 0;
    if (v5)
    {
      v6 = (char *)uprv_malloc(*(__int16 *)(a2 + 8) + 1);
      *(_QWORD *)a1 = v6;
      if (v6)
      {
        v7 = *(__int16 *)(a2 + 8);
        *(_WORD *)(a1 + 8) = v7;
        strncpy(v6, *(const char **)a2, v7 + 1);
      }
      else
      {
        *(_DWORD *)(a1 + 12) = 7;
      }
    }
  }
  return a1;
}

{
  void *v4;

  if (a1 != a2)
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
      uprv_free(v4);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_QWORD *)a2 = 0;
  }
  return a1;
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  return icu::number::impl::StringProp::operator=(a1, a2);
}

uint64_t icu::number::impl::StringProp::StringProp(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  return result;
}

{
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_QWORD *)a2 = 0;
  return result;
}

void icu::number::impl::StringProp::~StringProp(void **this)
{
  void *v2;

  v2 = *this;
  if (v2)
  {
    uprv_free(v2);
    *this = 0;
  }
}

{
  void *v2;

  v2 = *this;
  if (v2)
  {
    uprv_free(v2);
    *this = 0;
  }
}

char *icu::number::impl::StringProp::set(uint64_t a1, const char *a2, __int16 a3)
{
  void *v6;
  char *result;
  int v8;
  size_t v9;

  v6 = *(void **)a1;
  if (v6)
  {
    uprv_free(v6);
    *(_QWORD *)a1 = 0;
  }
  *(_WORD *)(a1 + 8) = a3;
  result = (char *)uprv_malloc(a3 + 1);
  *(_QWORD *)a1 = result;
  if (result)
  {
    v8 = *(__int16 *)(a1 + 8);
    v9 = *(unsigned __int16 *)(a1 + 8);
    if (v8 >= 1)
      result = strncpy(result, a2, v9);
    result[(__int16)v9] = 0;
  }
  else
  {
    *(_WORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 12) = 7;
  }
  return result;
}

void sub_18BD2CAC4(unsigned int *a1, void **a2, uint64_t a3, int a4)
{
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  int Type;

  v8 = *a1;
  *(_DWORD *)(a3 + 484) = v8;
  if (*(_DWORD *)(a3 + 448) < (int)v8)
  {
    if ((int)v8 < 1)
      return;
    v9 = uprv_malloc(8 * v8);
    if (!v9)
      return;
    v10 = v9;
    if (*(_BYTE *)(a3 + 452))
      uprv_free(*(void **)(a3 + 440));
    *(_QWORD *)(a3 + 440) = v10;
    *(_DWORD *)(a3 + 448) = v8;
    *(_BYTE *)(a3 + 452) = 1;
    LODWORD(v8) = *(_DWORD *)(a3 + 484);
  }
  if ((int)v8 >= 1)
  {
    v11 = 0;
    do
    {
      Type = icu::Formattable::getType((icu::Formattable *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v11) + 8));
      if (Type == 1)
      {
        icu::number::impl::DecimalQuantity::setToDouble(a2, *(double *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v11) + 16));
        *(_DWORD *)(a3 + 480) = v11;
      }
      else
      {
        if (Type != 5)
          abort();
        *(_QWORD *)(*(_QWORD *)(a3 + 440) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v11) + 16);
      }
      if (a4 >= 1)
        break;
      ++v11;
    }
    while (v11 < *(int *)(a3 + 484));
  }
}

_QWORD *icu::number::impl::UsagePrefsHandler::UsagePrefsHandler(_QWORD *a1, uint64_t a2, icu::MeasureUnitImpl **a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, int *a7)
{
  *a1 = off_1E2263908;
  icu::units::UnitsRouter::UnitsRouter((uint64_t)(a1 + 1), a3, a2, a4, a5, a7);
  a1[23] = a6;
  return a1;
}

{
  *a1 = off_1E2263908;
  icu::units::UnitsRouter::UnitsRouter((uint64_t)(a1 + 1), a3, a2, a4, a5, a7);
  a1[23] = a6;
  return a1;
}

uint64_t icu::number::impl::UsagePrefsHandler::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, UErrorCode *a4)
{
  uint64_t result;
  double v9;
  _BYTE v10[24];
  _BYTE v11[8];
  uint64_t v12;
  void *v13;
  char v14;
  unsigned int v15[24];
  _BYTE v16[96];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 16))(*(_QWORD *)(a1 + 184));
  if (*(int *)a4 <= 0)
  {
    icu::number::impl::DecimalQuantity::roundToInfinity(a2);
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    memset(v16, 0, sizeof(v16));
    memset(v15, 0, sizeof(v15));
    v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    icu::units::UnitsRouter::route(a1 + 8, (_OWORD *)(a3 + 104), a4, (uint64_t)v15, v9);
    if (*(int *)a4 <= 0)
    {
      icu::MeasureUnitImpl::copy((icu::MeasureUnitImpl *)v16, a4, (uint64_t)v11);
      icu::MeasureUnitImpl::build((icu::MeasureUnitImpl *)v11, a4, (uint64_t)v10);
      icu::MeasureUnit::operator=(a3 + 416, (uint64_t)v10);
      icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)v10);
      if (v14)
        uprv_free(v13);
      sub_18BC3ED98((uint64_t)&v12);
      if (*(int *)a4 <= 0)
        sub_18BD2CAC4(&v15[2], (void **)a2, a3, *a4);
    }
    if (BYTE12(v17))
      uprv_free((void *)v17);
    sub_18BC3ED98((uint64_t)&v16[8]);
    return sub_18BBCBAB0((uint64_t)&v15[2]);
  }
  return result;
}

uint64_t icu::number::impl::UnitConversionHandler::UnitConversionHandler(uint64_t a1, icu::MeasureUnitImpl *a2, uint64_t a3, int *a4)
{
  UErrorCode *v8;
  const icu::MeasureUnit *v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  _QWORD v15[12];
  __int128 v16;
  _OWORD *v17;
  uint64_t v18;
  _OWORD v19[4];
  void *v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[7];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E2263930;
  icu::MeasureUnit::MeasureUnit(a1 + 8, (unint64_t)a2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a3;
  v27 = 0u;
  memset(&v26[4], 0, 48);
  memset(v26, 0, 64);
  v24 = 0u;
  v25 = 0u;
  *(_QWORD *)&v25 = v26;
  DWORD2(v25) = 8;
  *(_QWORD *)&v26[4] = (char *)&v26[4] + 13;
  DWORD2(v26[4]) = 40;
  DWORD2(v27) = 0;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  v16 = 0u;
  v17 = v19;
  v18 = 8;
  v20[0] = (char *)&v20[1] + 5;
  v20[1] = (void *)40;
  DWORD2(v23) = 0;
  v15[0] = 0;
  memset(&v15[2], 0, 72);
  v15[1] = &v15[3];
  LODWORD(v15[2]) = 8;
  icu::units::getAllConversionRates((uint64_t)v15, a4);
  if (*a4 <= 0)
  {
    v9 = icu::MeasureUnitImpl::forMeasureUnit(a2, (const icu::MeasureUnit *)&v16, (icu::MeasureUnitImpl *)a4, v8);
    v12 = icu::UMemory::operator new(v11, (icu::UMemory *)0xB8, v10);
    v13 = v12;
    if (v12)
      icu::units::ComplexUnitsConverter::ComplexUnitsConverter(v12, v9, v15, a4);
    sub_18BD2CF94((void **)(a1 + 32), v13, a4);
  }
  sub_18BD2D1E8((uint64_t)v15);
  if (BYTE4(v20[1]))
    uprv_free(v20[0]);
  sub_18BC3ED98((uint64_t)&v16 + 8);
  if (BYTE12(v26[4]))
    uprv_free(*(void **)&v26[4]);
  sub_18BC3ED98((uint64_t)&v24 + 8);
  return a1;
}

void sub_18BD2CF94(void **a1, void *a2, int *a3)
{
  void *v6;

  if (*a3 <= 0)
  {
    v6 = *a1;
    if (*a1)
    {
      sub_18BD2D340((uint64_t)v6 + 96);
      sub_18BD2D3C4((uint64_t)v6 + 8);
      icu::UMemory::operator delete(v6);
    }
    *a1 = a2;
    if (!a2)
      *a3 = 7;
  }
  else if (a2)
  {
    sub_18BD2D340((uint64_t)a2 + 96);
    sub_18BD2D3C4((uint64_t)a2 + 8);
    icu::UMemory::operator delete(a2);
  }
}

uint64_t icu::number::impl::UnitConversionHandler::processQuantity(uint64_t a1, icu::number::impl::DecimalQuantity *a2, uint64_t a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  double v10;
  _OWORD v11[5];
  uint64_t v12;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  if (*a4 <= 0)
  {
    icu::number::impl::DecimalQuantity::roundToInfinity(a2);
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    v9 = *(_QWORD *)(a1 + 32);
    v10 = icu::number::impl::DecimalQuantity::toDouble(a2);
    icu::units::ComplexUnitsConverter::convert(v9, a3 + 104, a4, (uint64_t)v11, v10);
    icu::MeasureUnit::operator=(a3 + 416, a1 + 8);
    if (*a4 <= 0)
      sub_18BD2CAC4((unsigned int *)v11, (void **)a2, a3, *a4);
    return sub_18BBCBAB0((uint64_t)v11);
  }
  return result;
}

_QWORD *sub_18BD2D0F0(_QWORD *a1)
{
  *a1 = off_1E2263908;
  sub_18BD2D2A4((uint64_t)(a1 + 12));
  sub_18BBCBAB0((uint64_t)(a1 + 1));
  return a1;
}

void sub_18BD2D12C(_QWORD *a1)
{
  *a1 = off_1E2263908;
  sub_18BD2D2A4((uint64_t)(a1 + 12));
  sub_18BBCBAB0((uint64_t)(a1 + 1));
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BD2D168(uint64_t a1)
{
  icu::MeasureUnit *v2;

  *(_QWORD *)a1 = off_1E2263930;
  v2 = (icu::MeasureUnit *)(a1 + 8);
  sub_18BD2D460((void **)(a1 + 32));
  icu::MeasureUnit::~MeasureUnit(v2);
  return a1;
}

void sub_18BD2D1A8(void **a1)
{
  icu::MeasureUnit *v2;

  *a1 = off_1E2263930;
  v2 = (icu::MeasureUnit *)(a1 + 1);
  sub_18BD2D460(a1 + 4);
  icu::MeasureUnit::~MeasureUnit(v2);
  icu::UMemory::operator delete(a1);
}

uint64_t sub_18BD2D1E8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 276))
          uprv_free(*(void **)(v4 + 264));
        if (*(_BYTE *)(v4 + 212))
          uprv_free(*(void **)(v4 + 200));
        if (*(_BYTE *)(v4 + 148))
          uprv_free(*(void **)(v4 + 136));
        if (*(_BYTE *)(v4 + 84))
          uprv_free(*(void **)(v4 + 72));
        if (*(_BYTE *)(v4 + 20))
          uprv_free(*(void **)(v4 + 8));
        icu::UMemory::operator delete((void *)v4);
        v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_18BD2D2A4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 372))
          uprv_free(*(void **)(v4 + 360));
        sub_18BC3ED98(v4 + 272);
        icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(v4 + 200));
        sub_18BD2D340(v4 + 104);
        sub_18BD2D3C4(v4 + 16);
        icu::UMemory::operator delete((void *)v4);
        v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_18BD2D340(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 116))
          uprv_free(*(void **)(v4 + 104));
        sub_18BC3ED98(v4 + 16);
        icu::UMemory::operator delete((void *)v4);
        v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_18BD2D3C4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 284))
          uprv_free(*(void **)(v4 + 272));
        sub_18BC3ED98(v4 + 184);
        if (*(_BYTE *)(v4 + 124))
          uprv_free(*(void **)(v4 + 112));
        sub_18BC3ED98(v4 + 24);
        icu::UMemory::operator delete((void *)v4);
        v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return a1;
}

void **sub_18BD2D460(void **a1)
{
  void *v2;

  v2 = *a1;
  if (*a1)
  {
    sub_18BD2D340((uint64_t)v2 + 96);
    sub_18BD2D3C4((uint64_t)v2 + 8);
    icu::UMemory::operator delete(v2);
  }
  return a1;
}

const UChar *sub_18BD2D4A0(uint64_t a1, const char *a2, int a3, int *a4)
{
  const char *v7;
  const char *v8;
  _QWORD *v10;
  const UChar *v11;
  const UChar *v12;
  const UChar *v14;
  char __dst[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[29];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = "currencyFormat";
  v8 = "decimalFormat";
  switch(a3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      goto LABEL_4;
    case 2:
      v7 = "accountingFormat";
      goto LABEL_4;
    case 3:
      v7 = "percentFormat";
LABEL_4:
      memset(v23, 0, sizeof(v23));
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__dst = 0u;
      v16 = 0u;
      if (!ulocimp_setRegionToSupplementalRegion(*(char **)(a1 + 40), __dst, 157))
        strcpy(__dst, *(const char **)(a1 + 40));
      v10 = ures_open(0, __dst, a4);
      break;
    case 4:
      v8 = "scientificFormat";
LABEL_9:
      v10 = ures_openWithCountryFallback(0, *(char **)(a1 + 40), 0, a4);
      v7 = v8;
      break;
    default:
      abort();
  }
  if (*a4 > 0)
    goto LABEL_12;
  *(_DWORD *)__dst = 0;
  v11 = sub_18BD2D688((uint64_t)v10, a2, v7, (UErrorCode *)a4, (UErrorCode *)__dst);
  if (*a4 > 0)
    goto LABEL_12;
  v12 = v11;
  if (*(int *)__dst >= 1 && strcmp("latn", a2))
  {
    *(_DWORD *)__dst = 0;
    v14 = sub_18BD2D688((uint64_t)v10, "latn", v7, (UErrorCode *)a4, (UErrorCode *)__dst);
    if (*a4 > 0)
    {
LABEL_12:
      v12 = (const UChar *)&unk_18BE35972;
      goto LABEL_13;
    }
    v12 = v14;
  }
LABEL_13:
  if (v10)
    ures_close(v10);
  return v12;
}

const UChar *sub_18BD2D688(uint64_t a1, const char *a2, const char *a3, UErrorCode *a4, UErrorCode *a5)
{
  const UChar *StringByKeyWithFallback;
  char *v12;
  int v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  void *v20[9];

  v20[8] = *(void **)MEMORY[0x1E0C80C00];
  memset(&v20[1], 0, 56);
  v20[0] = (char *)&v20[1] + 5;
  LODWORD(v20[1]) = 40;
  icu::StringPiece::StringPiece((icu::StringPiece *)&v18, "NumberElements/");
  icu::CharString::append((icu::CharString *)v20, v18, v19, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v16, a2);
  icu::CharString::append((icu::CharString *)v20, v16, v17, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v14, "/patterns/");
  icu::CharString::append((icu::CharString *)v20, v14, v15, a4);
  icu::StringPiece::StringPiece((icu::StringPiece *)&v12, a3);
  icu::CharString::append((icu::CharString *)v20, v12, v13, a4);
  if (*(int *)a4 <= 0)
    StringByKeyWithFallback = ures_getStringByKeyWithFallback(a1, (char *)v20[0], 0, a5);
  else
    StringByKeyWithFallback = (const UChar *)&unk_18BE35972;
  if (BYTE4(v20[1]))
    uprv_free(v20[0]);
  return StringByKeyWithFallback;
}

uint64_t sub_18BD2D7EC(uint64_t a1)
{
  _QWORD *v1;
  const UChar *StringByKeyWithFallback;
  __int16 v4;
  int v6;
  int v7;

  v7 = 0;
  v1 = ures_open(0, *(char **)(a1 + 40), &v7);
  v6 = 0;
  StringByKeyWithFallback = ures_getStringByKeyWithFallback((uint64_t)v1, "NumberElements/minimumGroupingDigits", &v6, (UErrorCode *)&v7);
  if (v7 > 0 || v6 != 1)
  {
    v4 = 1;
    if (!v1)
      return v4;
    goto LABEL_8;
  }
  v4 = *StringByKeyWithFallback - 48;
  if (v1)
LABEL_8:
    ures_close(v1);
  return v4;
}

icu::number::impl::DecNum *icu::number::impl::DecNum::DecNum(icu::number::impl::DecNum *this)
{
  char *v2;

  *(_QWORD *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((_BYTE *)this + 12) = 0;
  v2 = (char *)this + 64;
  uprv_decContextDefault((uint64_t)this + 64, 0);
  uprv_decContextSetRounding((uint64_t)v2, 3);
  *((_DWORD *)this + 20) = 0;
  return this;
}

{
  char *v2;

  *(_QWORD *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((_BYTE *)this + 12) = 0;
  v2 = (char *)this + 64;
  uprv_decContextDefault((uint64_t)this + 64, 0);
  uprv_decContextSetRounding((uint64_t)v2, 3);
  *((_DWORD *)this + 20) = 0;
  return this;
}

icu::number::impl::DecNum *icu::number::impl::DecNum::DecNum(icu::number::impl::DecNum *this, uint64_t **a2, UErrorCode *a3)
{
  char *v5;
  __int128 v6;
  uint64_t v7;
  char *v9;
  void *v10;
  int v11;
  uint64_t v12;

  v5 = (char *)this + 16;
  *(_QWORD *)this = (char *)this + 16;
  *((_DWORD *)this + 2) = 34;
  *((_BYTE *)this + 12) = 0;
  v6 = *(_OWORD *)((char *)a2 + 76);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *(_OWORD *)((char *)this + 76) = v6;
  v7 = *((unsigned int *)this + 16);
  if ((int)v7 >= 35)
  {
    v9 = (char *)uprv_malloc(v7 + 12);
    if (!v9)
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      return this;
    }
    v5 = v9;
    v10 = *(void **)this;
    v11 = *(_DWORD *)(*(_QWORD *)this + 8);
    *(_QWORD *)v5 = **(_QWORD **)this;
    *((_DWORD *)v5 + 2) = v11;
    if (*((_BYTE *)this + 12))
      uprv_free(v10);
    *(_QWORD *)this = v5;
    *((_DWORD *)this + 2) = v7;
    *((_BYTE *)this + 12) = 1;
  }
  v12 = **a2;
  *((_DWORD *)v5 + 2) = *((_DWORD *)*a2 + 2);
  *(_QWORD *)v5 = v12;
  memcpy(v5 + 12, (char *)*a2 + 12, *((int *)a2 + 2));
  return this;
}

void icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *a1, const char *a2, int a3, UErrorCode *a4)
{
  char *v7[9];

  v7[8] = *(char **)MEMORY[0x1E0C80C00];
  memset(&v7[1], 0, 56);
  v7[0] = (char *)&v7[1] + 5;
  LODWORD(v7[1]) = 40;
  icu::CharString::append((icu::CharString *)v7, a2, a3, a4);
  if (*(int *)a4 <= 0)
    icu::number::impl::DecNum::_setTo(a1, v7[0], a3, a4);
  if (BYTE4(v7[1]))
    uprv_free(v7[0]);
}

uint64_t icu::number::impl::DecNum::_setTo(icu::number::impl::DecNum *this, char *a2, int a3, UErrorCode *a4)
{
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  void *v10;
  int v11;
  uint64_t result;
  int v13;
  UErrorCode v14;

  if (a3 < 35)
  {
    v7 = 34;
  }
  else
  {
    v7 = a3;
    v8 = uprv_malloc(a3 + 12);
    if (v8)
    {
      v9 = v8;
      v10 = *(void **)this;
      v11 = *(_DWORD *)(*(_QWORD *)this + 8);
      *(_QWORD *)v9 = **(_QWORD **)this;
      v9[2] = v11;
      if (*((_BYTE *)this + 12))
        uprv_free(v10);
      *(_QWORD *)this = v9;
      *((_DWORD *)this + 2) = v7;
      *((_BYTE *)this + 12) = 1;
    }
  }
  *((_DWORD *)this + 16) = v7;
  result = uprv_decNumberFromString(*(_QWORD *)this, (unsigned __int8 *)a2, (uint64_t)this + 64);
  v13 = *((_DWORD *)this + 21);
  if ((v13 & 1) != 0)
  {
    v14 = U_DECIMAL_NUMBER_SYNTAX_ERROR;
  }
  else
  {
    if (!v13)
      return result;
    v14 = U_UNSUPPORTED_ERROR;
  }
  *a4 = v14;
  return result;
}

uint64_t icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *this, char *__s, UErrorCode *a3)
{
  int v6;

  v6 = strlen(__s);
  return icu::number::impl::DecNum::_setTo(this, __s, v6, a3);
}

icu::number::impl::DecNum *icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *this, double a2, UErrorCode *a3)
{
  char v4;
  icu::number::impl::DecNum *v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  char v10[8];
  _QWORD v11[3];

  v4 = HIBYTE(a2);
  v11[2] = *MEMORY[0x1E0C80C00];
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v5 = this;
    *(_QWORD *)v10 = 0;
    v11[0] = 0;
    *(_QWORD *)((char *)v11 + 7) = 0;
    v9 = 0;
    v7 = 0;
    v8 = 0;
    icu::double_conversion::DoubleToStringConverter::DoubleToAscii(0, 0, v10, 0x17u, &v9, &v8, &v7, a2);
    this = (icu::number::impl::DecNum *)icu::number::impl::DecNum::_setTo(v5, v10, v8, a3);
    v6 = *(_QWORD *)v5;
    *(_DWORD *)(v6 + 4) = v7 - v8 + *(_DWORD *)(*(_QWORD *)v5 + 4);
    *(_BYTE *)(v6 + 8) |= v4 & 0x80;
  }
  else
  {
    *a3 = U_UNSUPPORTED_ERROR;
  }
  return this;
}

void icu::number::impl::DecNum::setTo(icu::number::impl::DecNum *this, char *a2, signed int a3, int a4, int a5, UErrorCode *a6)
{
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  void *v15;
  int v16;
  UErrorCode v17;
  uint64_t v18;
  char v19;

  if (a3 < 35)
  {
    v13 = 34;
  }
  else
  {
    v12 = uprv_malloc(a3 + 12);
    v13 = a3;
    if (v12)
    {
      v14 = v12;
      v15 = *(void **)this;
      v16 = *(_DWORD *)(*(_QWORD *)this + 8);
      *(_QWORD *)v14 = **(_QWORD **)this;
      v14[2] = v16;
      if (*((_BYTE *)this + 12))
        uprv_free(v15);
      *(_QWORD *)this = v14;
      *((_DWORD *)this + 2) = a3;
      *((_BYTE *)this + 12) = 1;
      v13 = a3;
    }
  }
  *((_DWORD *)this + 16) = v13;
  if ((a3 - 1000000000) < 0xC4653601)
  {
    v17 = U_UNSUPPORTED_ERROR;
LABEL_16:
    *a6 = v17;
    return;
  }
  v17 = U_UNSUPPORTED_ERROR;
  if (1000000000 - a3 < a4 || -999999998 - a3 > a4)
    goto LABEL_16;
  v18 = *(_QWORD *)this;
  *(_DWORD *)v18 = a3;
  *(_DWORD *)(v18 + 4) = a4;
  if (a5)
    v19 = 0x80;
  else
    v19 = 0;
  *(_BYTE *)(v18 + 8) = v19;
  uprv_decNumberSetBCD((unsigned int *)v18, a2, a3);
  if (*((_DWORD *)this + 21))
  {
    v17 = U_INTERNAL_PROGRAM_ERROR;
    goto LABEL_16;
  }
}

uint64_t icu::number::impl::DecNum::normalize(icu::number::impl::DecNum *this)
{
  return uprv_decNumberReduce(*(_QWORD *)this, *(_QWORD *)this, (int *)this + 16);
}

uint64_t icu::number::impl::DecNum::multiplyBy(icu::number::impl::DecNum *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t result;

  result = uprv_decNumberMultiply(*(_QWORD *)this, *(_QWORD *)this, *(_QWORD *)a2, (int *)this + 16);
  if (*((_DWORD *)this + 21))
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  return result;
}

uint64_t icu::number::impl::DecNum::divideBy(icu::number::impl::DecNum *this, const icu::number::impl::DecNum *a2, UErrorCode *a3)
{
  uint64_t result;
  BOOL v6;

  result = uprv_decNumberDivide(*(_QWORD *)this, *(_QWORD *)this, *(_QWORD *)a2, (int *)this + 16);
  if (*((_DWORD *)this + 21))
    v6 = (*((_DWORD *)this + 21) & 0x20) == 0;
  else
    v6 = 0;
  if (v6)
    *a3 = U_INTERNAL_PROGRAM_ERROR;
  return result;
}

uint64_t icu::number::impl::DecNum::isNegative(icu::number::impl::DecNum *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 8) >> 7;
}

BOOL icu::number::impl::DecNum::isZero(icu::number::impl::DecNum *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  return !*(_BYTE *)(*(_QWORD *)this + 9) && *(_DWORD *)v1 == 1 && (*(_BYTE *)(v1 + 8) & 0x70) == 0;
}

BOOL icu::number::impl::DecNum::isSpecial(icu::number::impl::DecNum *this)
{
  return (*(_BYTE *)(*(_QWORD *)this + 8) & 0x70) != 0;
}

uint64_t icu::number::impl::DecNum::isInfinity(icu::number::impl::DecNum *this)
{
  return (*(unsigned __int8 *)(*(_QWORD *)this + 8) >> 6) & 1;
}

BOOL icu::number::impl::DecNum::isNaN(icu::number::impl::DecNum *this)
{
  return (*(_BYTE *)(*(_QWORD *)this + 8) & 0x30) != 0;
}

void icu::number::impl::DecNum::toString(icu::number::impl::DecNum *this, icu::ByteSink *a2, UErrorCode *a3)
{
  int v4;
  size_t v7;
  size_t v8;
  char *__s[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  if (v4 <= 0)
  {
    v7 = (**(_DWORD **)this + 14);
    v10 = 0u;
    v11 = 0u;
    *(_OWORD *)__s = 0u;
    sub_18BD108FC((uint64_t)__s, v7, v4);
    if (*(int *)a3 <= 0)
    {
      uprv_decNumberToString(*(_QWORD *)this, __s[0]);
      v8 = strlen(__s[0]);
      (*(void (**)(icu::ByteSink *, char *, size_t))(*(_QWORD *)a2 + 16))(a2, __s[0], v8);
    }
    if (BYTE4(__s[1]))
      uprv_free(__s[0]);
  }
}

void *icu::NumberFormat::getStaticClassID(icu::NumberFormat *this)
{
  return &unk_1EE009C38;
}

double icu::NumberFormat::NumberFormat(icu::NumberFormat *this)
{
  uint64_t v1;
  double result;

  v1 = icu::Format::Format((uint64_t)this);
  *(_QWORD *)v1 = off_1E22639C8;
  *(_BYTE *)(v1 + 322) = 1;
  *(_QWORD *)&result = 0x177359400;
  *(_OWORD *)(v1 + 324) = xmmword_18BE28E30;
  *(_DWORD *)(v1 + 340) = 0;
  *(_DWORD *)(v1 + 352) = 256;
  return result;
}

void icu::SharedNumberFormat::~SharedNumberFormat(icu::SharedNumberFormat *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E2263B08;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E2263B08;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E2263B08;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  icu::SharedObject::~SharedObject(this);
  icu::UMemory::operator delete(v3);
}

uint64_t icu::NumberFormat::NumberFormat(icu::NumberFormat *this, const icu::NumberFormat *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)icu::Format::Format((uint64_t)this, (uint64_t)a2);
  *v3 = off_1E22639C8;
  return icu::NumberFormat::operator=((uint64_t)v3, (uint64_t)a2);
}

uint64_t icu::NumberFormat::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    icu::Format::operator=(a1, a2);
    *(_BYTE *)(a1 + 322) = *(_BYTE *)(a2 + 322);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)(a2 + 324);
    *(_BYTE *)(a1 + 340) = *(_BYTE *)(a2 + 340);
    u_strncpy((UChar *)(a1 + 342), (const UChar *)(a2 + 342), 3);
    *(_WORD *)(a1 + 348) = 0;
    *(_BYTE *)(a1 + 341) = *(_BYTE *)(a2 + 341);
    *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  }
  return a1;
}

BOOL icu::NumberFormat::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (a1 == a2)
    return 1;
  result = icu::Format::operator==((_QWORD *)a1, (_QWORD *)a2);
  if (result)
    return *(_DWORD *)(a1 + 324) == *(_DWORD *)(a2 + 324)
        && *(_DWORD *)(a1 + 328) == *(_DWORD *)(a2 + 328)
        && *(_DWORD *)(a1 + 332) == *(_DWORD *)(a2 + 332)
        && *(_DWORD *)(a1 + 336) == *(_DWORD *)(a2 + 336)
        && *(unsigned __int8 *)(a1 + 322) == *(unsigned __int8 *)(a2 + 322)
        && *(unsigned __int8 *)(a1 + 340) == *(unsigned __int8 *)(a2 + 340)
        && !u_strcmp((const UChar *)(a1 + 342), (const UChar *)(a2 + 342))
        && *(unsigned __int8 *)(a1 + 341) == *(unsigned __int8 *)(a2 + 341)
        && *(_DWORD *)(a1 + 352) == *(_DWORD *)(a2 + 352);
  return result;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  icu::UnicodeString *result;

  result = a3;
  if (*(int *)a5 <= 0)
    *a5 = U_UNSUPPORTED_ERROR;
  return result;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, int a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  icu::UnicodeString *result;

  result = a3;
  if (*(int *)a5 <= 0)
    *a5 = U_UNSUPPORTED_ERROR;
  return result;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  icu::UnicodeString *result;

  result = a3;
  if (*(int *)a5 <= 0)
    *a5 = U_UNSUPPORTED_ERROR;
  return result;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, double a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPosition *, double))(*(_QWORD *)this + 64))(this, a3, a4, a2);
  else
    return a3;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  if (*(int *)a5 <= 0)
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(_QWORD *)this + 88))(this, a2, a3, a4);
  else
    return a3;
}

{
  if (*(int *)a5 <= 0)
    return (icu::UnicodeString *)(*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(_QWORD *)this + 112))(this, a2, a3, a4);
  else
    return a3;
}

uint64_t icu::NumberFormat::format(uint64_t a1, const char *a2, int a3, uint64_t a4, uint64_t a5, UErrorCode *a6)
{
  _OWORD v13[7];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v13, 0, sizeof(v13));
  icu::Formattable::Formattable((icu::Formattable *)v13);
  icu::Formattable::setDecimalNumber((icu::Formattable *)v13, a2, a3, a6);
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, UErrorCode *))(*(_QWORD *)a1 + 48))(a1, v13, a4, a5, a6);
  icu::Formattable::~Formattable((icu::Formattable *)v13);
  return a4;
}

uint64_t sub_18BD2E3F8(uint64_t a1, int a2, icu::Formattable *this)
{
  const void *Object;
  icu::CurrencyAmount *v5;
  icu::CurrencyAmount *v6;
  uint64_t Currency;

  *(_QWORD *)a1 = this;
  *(_BYTE *)(a1 + 16) = 0;
  Object = (const void *)icu::Formattable::getObject(this);
  if (Object
  {
    v6 = v5;
    Currency = icu::CurrencyAmount::getCurrency(v5);
    u_strcpy((UChar *)(a1 + 8), (const UChar *)(Currency + 20));
    *(_QWORD *)a1 = (char *)v6 + 8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_WORD *)(a1 + 8) = 0;
  }
  return a1;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  double v9;

  if (*(int *)a5 <= 0)
  {
    v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    (*(void (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *, double))(*(_QWORD *)this + 80))(this, a3, a4, a5, v9);
  }
  return a3;
}

icu::UnicodeString *icu::NumberFormat::format(icu::NumberFormat *this, const icu::number::impl::DecimalQuantity *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  double v9;

  if (*(int *)a5 <= 0)
  {
    v9 = icu::number::impl::DecimalQuantity::toDouble(a2);
    (*(void (**)(icu::NumberFormat *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))(*(_QWORD *)this + 72))(this, a3, a4, a5, v9);
  }
  return a3;
}

icu::UnicodeString *icu::NumberFormat::format(const UChar *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPosition *a4, UErrorCode *a5)
{
  icu::Formattable *v10;
  uint64_t v11;
  uint64_t v12;
  int Type;
  icu::Formattable *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(int *)a5 <= 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    sub_18BD2E3F8((uint64_t)&v14, (int)a2, a2);
    v10 = v14;
    if ((_BYTE)v16 && u_strcmp((const UChar *)&v15, this + 171))
    {
      v11 = (*(uint64_t (**)(const UChar *))(*(_QWORD *)this + 32))(this);
      (*(void (**)(uint64_t, uint64_t *, UErrorCode *))(*(_QWORD *)v11 + 248))(v11, &v15, a5);
      a3 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, icu::Formattable *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(_QWORD *)v11 + 40))(v11, v10, a3, a4, a5);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    else if (icu::Formattable::isNumeric(v10) && (v12 = *((_QWORD *)v10 + 4)) != 0)
    {
      (*(void (**)(const UChar *, uint64_t, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(_QWORD *)this + 152))(this, v12, a3, a4, a5);
    }
    else
    {
      Type = icu::Formattable::getType(v10);
      switch(Type)
      {
        case 5:
          (*(void (**)(const UChar *, _QWORD, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(_QWORD *)this + 120))(this, *((_QWORD *)v10 + 1), a3, a4, a5);
          break;
        case 2:
          (*(void (**)(const UChar *, _QWORD, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *))(*(_QWORD *)this + 96))(this, *((unsigned int *)v10 + 2), a3, a4, a5);
          break;
        case 1:
          (*(void (**)(const UChar *, icu::UnicodeString *, icu::FieldPosition *, UErrorCode *, double))(*(_QWORD *)this + 72))(this, a3, a4, a5, *((double *)v10 + 1));
          break;
        default:
          *a5 = U_INVALID_FORMAT_ERROR;
          break;
      }
    }
  }
  return a3;
}

uint64_t icu::NumberFormat::getCurrency(icu::NumberFormat *this)
{
  return (uint64_t)this + 342;
}

icu::UnicodeString *icu::NumberFormat::format(const UChar *this, const icu::Formattable *a2, icu::UnicodeString *a3, icu::FieldPositionIterator *a4, UErrorCode *a5)
{
  icu::Formattable *v10;
  uint64_t v11;
  uint64_t v12;
  int Type;
  icu::Formattable *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(int *)a5 <= 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    sub_18BD2E3F8((uint64_t)&v14, (int)a2, a2);
    v10 = v14;
    if ((_BYTE)v16 && u_strcmp((const UChar *)&v15, this + 171))
    {
      v11 = (*(uint64_t (**)(const UChar *))(*(_QWORD *)this + 32))(this);
      (*(void (**)(uint64_t, uint64_t *, UErrorCode *))(*(_QWORD *)v11 + 248))(v11, &v15, a5);
      a3 = (icu::UnicodeString *)(*(uint64_t (**)(uint64_t, icu::Formattable *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(_QWORD *)v11 + 48))(v11, v10, a3, a4, a5);
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    else if (icu::Formattable::isNumeric(v10) && (v12 = *((_QWORD *)v10 + 4)) != 0)
    {
      (*(void (**)(const UChar *, uint64_t, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(_QWORD *)this + 144))(this, v12, a3, a4, a5);
    }
    else
    {
      Type = icu::Formattable::getType(v10);
      switch(Type)
      {
        case 5:
          (*(void (**)(const UChar *, _QWORD, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(_QWORD *)this + 128))(this, *((_QWORD *)v10 + 1), a3, a4, a5);
          break;
        case 2:
          (*(void (**)(const UChar *, _QWORD, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *))(*(_QWORD *)this + 104))(this, *((unsigned int *)v10 + 2), a3, a4, a5);
          break;
        case 1:
          (*(void (**)(const UChar *, icu::UnicodeString *, icu::FieldPositionIterator *, UErrorCode *, double))(*(_QWORD *)this + 80))(this, a3, a4, a5, *((double *)v10 + 1));
          break;
        default:
          *a5 = U_INVALID_FORMAT_ERROR;
          break;
      }
    }
  }
  return a3;
}

uint64_t icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3, icu::FieldPosition *a4)
{
  return (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, icu::FieldPosition *))(*(_QWORD *)this + 88))(this, a2, a3, a4);
}

uint64_t icu::NumberFormat::parseObject(icu::NumberFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, icu::ParsePosition *a4)
{
  return (*(uint64_t (**)(icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, icu::ParsePosition *))(*(_QWORD *)this + 160))(this, a2, a3, a4);
}

uint64_t icu::NumberFormat::format(icu::NumberFormat *this, double a2, icu::UnicodeString *a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v5[2] = 0;
  v5[0] = off_1E225EF78;
  v5[1] = 0xFFFFFFFFLL;
  v3 = (*(uint64_t (**)(icu::NumberFormat *, icu::UnicodeString *, _QWORD *, double))(*(_QWORD *)this + 64))(this, a3, v5, a2);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

uint64_t icu::NumberFormat::format(icu::NumberFormat *this, uint64_t a2, icu::UnicodeString *a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v5[2] = 0;
  v5[0] = off_1E225EF78;
  v5[1] = 0xFFFFFFFFLL;
  v3 = (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, _QWORD *))(*(_QWORD *)this + 88))(this, a2, a3, v5);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

{
  uint64_t v3;
  _QWORD v5[3];

  v5[2] = 0;
  v5[0] = off_1E225EF78;
  v5[1] = 0xFFFFFFFFLL;
  v3 = (*(uint64_t (**)(icu::NumberFormat *, uint64_t, icu::UnicodeString *, _QWORD *))(*(_QWORD *)this + 112))(this, a2, a3, v5);
  icu::FieldPosition::~FieldPosition((icu::FieldPosition *)v5);
  return v3;
}

void icu::NumberFormat::parse(icu::NumberFormat *this, const icu::UnicodeString *a2, icu::Formattable *a3, UErrorCode *a4)
{
  void (**v5)(icu::ParsePosition *__hidden);
  unint64_t v6;

  if (*(int *)a4 <= 0)
  {
    v5 = off_1E224A8B0;
    v6 = 0xFFFFFFFF00000000;
    (*(void (**)(icu::NumberFormat *, const icu::UnicodeString *, icu::Formattable *, void (***)(icu::ParsePosition *__hidden)))(*(_QWORD *)this + 160))(this, a2, a3, &v5);
    if (!(_DWORD)v6)
      *a4 = U_INVALID_FORMAT_ERROR;
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v5);
  }
}

uint64_t *icu::NumberFormat::parseCurrency(icu::NumberFormat *this, const icu::UnicodeString *a2, icu::ParsePosition *a3)
{
  int v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  _OWORD v14[7];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  memset(v14, 0, sizeof(v14));
  icu::Formattable::Formattable((icu::Formattable *)v14);
  v6 = *((_DWORD *)a3 + 2);
  (*(void (**)(icu::NumberFormat *, const icu::UnicodeString *, _OWORD *, icu::ParsePosition *))(*(_QWORD *)this + 160))(this, a2, v14, a3);
  if (*((_DWORD *)a3 + 2) != v6)
  {
    v13 = 0;
    v12 = 0;
    (*(void (**)(icu::NumberFormat *, uint64_t *, int *))(*(_QWORD *)this + 296))(this, &v13, &v12);
    if (v12 <= 0)
    {
      v10 = icu::UMemory::operator new((uint64_t *)v12, (icu::UMemory *)0x80, v7);
      if (v10)
      {
        v8 = v10;
        v11 = &v13;
        icu::CurrencyAmount::CurrencyAmount(v10, v14, &v11, &v12);
        if (v12 < 1)
          goto LABEL_4;
        *((_DWORD *)a3 + 2) = v6;
        (*(void (**)(uint64_t *))(*v8 + 8))(v8);
      }
      else
      {
        *((_DWORD *)a3 + 2) = v6;
      }
    }
  }
  v8 = 0;
LABEL_4:
  icu::Formattable::~Formattable((icu::Formattable *)v14);
  return v8;
}

uint64_t icu::NumberFormat::setParseIntegerOnly(uint64_t this, char a2)
{
  *(_BYTE *)(this + 340) = a2;
  return this;
}

uint64_t icu::NumberFormat::setLenient(uint64_t this, char a2)
{
  *(_BYTE *)(this + 341) = a2;
  return this;
}

icu::DecimalFormat *icu::NumberFormat::createInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::NumberFormat::createInstance((char **)Default, 1u, (UErrorCode *)this);
}

icu::DecimalFormat *icu::NumberFormat::createInstance(char **a1, unsigned int a2, UErrorCode *this)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  if (a2 != 1)
    return icu::NumberFormat::internalCreateInstance(a1, a2, this);
  if (*(int *)this > 0)
    return 0;
  v7 = 0;
  sub_18BD2F1AC((uint64_t)a1, (UErrorCode *)&v7, this);
  v4 = 0;
  if (*(int *)this <= 0)
  {
    v6 = (_QWORD *)v7;
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 24) + 32))(*(_QWORD *)(v7 + 24));
    icu::SharedObject::removeRef(v6);
    if (!v4)
      *this = U_MEMORY_ALLOCATION_ERROR;
  }
  return (icu::DecimalFormat *)v4;
}

icu::DecimalFormat *icu::NumberFormat::createInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::createInstance(this, 1u, a2);
}

icu::DecimalFormat *icu::NumberFormat::createCurrencyInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::NumberFormat::internalCreateInstance((char **)Default, 2u, (UErrorCode *)this);
}

icu::DecimalFormat *icu::NumberFormat::createCurrencyInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::internalCreateInstance(this, 2u, a2);
}

icu::DecimalFormat *icu::NumberFormat::createPercentInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::NumberFormat::makeInstance((char **)Default, 3u, 0, (UErrorCode *)this);
}

icu::DecimalFormat *icu::NumberFormat::createPercentInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(this, 3u, 0, a2);
}

icu::DecimalFormat *icu::NumberFormat::createScientificInstance(icu::NumberFormat *this, UErrorCode *a2)
{
  uint64_t *Default;

  Default = icu::Locale::getDefault(this);
  return icu::NumberFormat::makeInstance((char **)Default, 4u, 0, (UErrorCode *)this);
}

icu::DecimalFormat *icu::NumberFormat::createScientificInstance(char **this, UErrorCode *a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(this, 4u, 0, a2);
}

icu::DecimalFormat *icu::NumberFormat::internalCreateInstance(char **this, unsigned int a2, UErrorCode *a3)
{
  int KeywordValue;
  UErrorCode v8;
  char v9[16];
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    *(_OWORD *)v9 = 0u;
    v10 = 0u;
    v8 = U_ZERO_ERROR;
    KeywordValue = icu::Locale::getKeywordValue(this, "cf", v9, 32, &v8);
    a2 = 2;
    if (v8 <= U_ZERO_ERROR && KeywordValue >= 1)
    {
      if (*(_QWORD *)v9 == 0x746E756F636361)
        a2 = 12;
      else
        a2 = 2;
    }
  }
  return icu::NumberFormat::makeInstance(this, a2, 0, a3);
}

icu::DecimalFormat *icu::NumberFormat::makeInstance(char **a1, unsigned int a2, UErrorCode *a3)
{
  return icu::NumberFormat::makeInstance(a1, a2, 0, a3);
}

uint64_t icu::NumberFormat::createSharedInstance(uint64_t a1, int a2, UErrorCode *a3)
{
  uint64_t result;
  uint64_t v4;

  if (*(int *)a3 > 0)
    return 0;
  if (a2 == 1)
  {
    v4 = 0;
    sub_18BD2F1AC(a1, (UErrorCode *)&v4, a3);
    return v4;
  }
  else
  {
    result = 0;
    *a3 = U_UNSUPPORTED_ERROR;
  }
  return result;
}

uint64_t icu::NumberFormat::isGroupingUsed(icu::NumberFormat *this)
{
  return *((char *)this + 322);
}

uint64_t icu::NumberFormat::setGroupingUsed(uint64_t this, char a2)
{
  *(_BYTE *)(this + 322) = a2;
  return this;
}

uint64_t icu::NumberFormat::getMaximumIntegerDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 81);
}

uint64_t icu::NumberFormat::setMaximumIntegerDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3;
  uint64_t result;

  v3 = uprv_min(a2, 2000000000);
  result = uprv_max(0, v3);
  *((_DWORD *)this + 81) = result;
  if (*((_DWORD *)this + 82) > (int)result)
    *((_DWORD *)this + 82) = result;
  return result;
}

uint64_t icu::NumberFormat::getMinimumIntegerDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 82);
}

uint64_t icu::NumberFormat::setMinimumIntegerDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3;
  uint64_t result;

  v3 = uprv_min(a2, 127);
  result = uprv_max(0, v3);
  *((_DWORD *)this + 82) = result;
  if ((int)result > *((_DWORD *)this + 81))
    *((_DWORD *)this + 81) = result;
  return result;
}

uint64_t icu::NumberFormat::getMaximumFractionDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 83);
}

uint64_t icu::NumberFormat::setMaximumFractionDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3;
  uint64_t result;

  v3 = uprv_min(a2, 2000000000);
  result = uprv_max(0, v3);
  *((_DWORD *)this + 83) = result;
  if ((int)result < *((_DWORD *)this + 84))
    *((_DWORD *)this + 84) = result;
  return result;
}

uint64_t icu::NumberFormat::getMinimumFractionDigits(icu::NumberFormat *this)
{
  return *((unsigned int *)this + 84);
}

uint64_t icu::NumberFormat::setMinimumFractionDigits(icu::NumberFormat *this, uint64_t a2)
{
  int v3;
  uint64_t result;

  v3 = uprv_min(a2, 127);
  result = uprv_max(0, v3);
  *((_DWORD *)this + 84) = result;
  if (*((_DWORD *)this + 83) < (int)result)
    *((_DWORD *)this + 83) = result;
  return result;
}

uint64_t icu::NumberFormat::setDateSettings(uint64_t this)
{
  *(_BYTE *)(this + 322) = 0;
  *(_BYTE *)(this + 340) = 1;
  *(_DWORD *)(this + 336) = 0;
  if ((*(_DWORD *)(this + 332) & 0x80000000) != 0)
    *(_DWORD *)(this + 332) = 0;
  return this;
}

UChar *icu::NumberFormat::setCurrency(UChar *result, const UChar *a2, int *a3)
{
  UChar *v3;

  if (*a3 <= 0)
  {
    v3 = result;
    result += 171;
    if (a2)
    {
      u_strncpy(result, a2, 3);
      result = v3 + 174;
    }
    *result = 0;
  }
  return result;
}

UChar *icu::NumberFormat::getEffectiveCurrency(uint64_t a1, UChar *dst, int *a3)
{
  UChar *result;
  char *LocaleID;

  if (*(_WORD *)(a1 + 342))
  {
    result = u_strncpy(dst, (const UChar *)(a1 + 342), 3);
    dst[3] = 0;
  }
  else
  {
    LocaleID = (char *)icu::Format::getLocaleID(a1, 1, a3);
    if (!LocaleID)
      LocaleID = (char *)uloc_getDefault(0);
    return (UChar *)ucurr_forLocale(LocaleID, dst, 4, a3);
  }
  return result;
}

uint64_t icu::NumberFormat::setContext(uint64_t result, int a2, int *a3)
{
  if (*a3 <= 0)
  {
    if ((a2 & 0xFFFFFF00) == 0x100)
      *(_DWORD *)(result + 352) = a2;
    else
      *a3 = 1;
  }
  return result;
}

uint64_t icu::NumberFormat::getContext(uint64_t a1, int a2, int *a3)
{
  uint64_t result;

  if (*a3 > 0)
    return 0;
  if (a2 == 1)
    return *(unsigned int *)(a1 + 352);
  result = 0;
  *a3 = 1;
  return result;
}

uint64_t *icu::LocaleCacheKey<icu::SharedNumberFormat>::createObject(uint64_t a1, uint64_t a2, UErrorCode *a3)
{
  icu::DecimalFormat *Instance;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v10[28];
  uint64_t *v11;

  v11 = (uint64_t *)*MEMORY[0x1E0C80C00];
  icu::Locale::Locale(v11, (icu::Locale *)v10, *(const char **)(a1 + 56), 0, 0, 0);
  Instance = icu::NumberFormat::makeInstance(v10, 1u, 0, a3);
  icu::Locale::~Locale((icu::Locale *)v10);
  v6 = 0;
  v7 = (uint64_t *)*(unsigned int *)a3;
  if ((int)v7 <= 0)
  {
    v8 = icu::UMemory::operator new(v7, (icu::UMemory *)0x20, v5);
    if (v8)
    {
      v6 = v8;
      *v8 = (uint64_t)off_1E2263B08;
      v8[1] = 0;
      v8[2] = 0;
      v8[3] = (uint64_t)Instance;
      icu::SharedObject::addRef((uint64_t)v8);
    }
    else
    {
      *a3 = U_MEMORY_ALLOCATION_ERROR;
      if (Instance)
        (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)Instance + 8))(Instance);
      return 0;
    }
  }
  return v6;
}

void sub_18BD2F1AC(uint64_t a1, UErrorCode *a2, UErrorCode *this)
{
  uint64_t Instance;
  icu::SharedObject **v7;
  uint64_t (**v8)();
  int v9;
  char v10;
  _QWORD v11[29];

  v11[28] = *MEMORY[0x1E0C80C00];
  Instance = icu::UnifiedCache::getInstance(this, a2);
  if (*(int *)this <= 0)
  {
    v7 = (icu::SharedObject **)Instance;
    v9 = 0;
    v10 = 0;
    v8 = off_1E2263B60;
    icu::Locale::Locale((icu::Locale *)v11, a1);
    sub_18BC8C230(v7, (const icu::CacheKeyBase *)&v8, 0, (icu::SharedObject **)a2, this);
    v8 = off_1E2263B60;
    icu::Locale::~Locale((icu::Locale *)v11);
    icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)&v8);
  }
}

unint64_t icu::NumberFormat::isStyleSupported(char a1)
{
  return (0x13D1EuLL >> a1) & 1;
}

icu::DecimalFormat *icu::NumberFormat::makeInstance(char **this, unsigned int a2, UErrorCode *a3, UErrorCode *a4)
{
  icu::DecimalFormat *v4;
  int v6;
  uint64_t v7;
  int v9;
  unsigned int v11;
  int32x2_t *v12;
  unsigned int v13;
  UErrorCode *v14;
  const icu::NumberingSystem *Instance;
  icu::NumberingSystem *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  icu::DecimalFormatSymbols *v20;
  uint64_t v21;
  const char *Name;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  void *v28;
  int32_t v29;
  int32_t v30;
  int32_t v31;
  int32_t IndexOf;
  int32_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  void *v38;
  icu::DecimalFormatSymbols *v39;
  icu::DecimalFormat *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  const char *LocaleByType;
  const char *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  _QWORD v52[3];
  void *v53;
  void *v54;
  const __int16 *v55;
  const UChar *v56;
  const UChar **v57;
  _OWORD v58[14];
  icu::Locale *v59[8];
  int v60[58];
  UChar *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  void (**v66)(icu::UnicodeString *__hidden);
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  UChar *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  void (**v76)(icu::UnicodeString *__hidden);
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (*(int *)a4 > 0)
    return 0;
  if (a2 >= 0x11)
  {
    v4 = 0;
    v6 = 1;
LABEL_10:
    *a4 = v6;
    return v4;
  }
  if (a2 == 8)
    v7 = 1;
  else
    v7 = a2;
  if (((0x13D1EuLL >> v7) & 1) == 0)
  {
    v4 = 0;
    v6 = 16;
    goto LABEL_10;
  }
  v9 = (int)a3;
  v11 = atomic_load((unsigned int *)&unk_1ECD28100);
  if (v11 != 2 && icu::umtx_initImplPreInit((unsigned int *)&unk_1ECD28100))
  {
    sub_18BDA1768(0x16u, (uint64_t)sub_18BD2FBBC);
    v60[0] = 0;
    v12 = uhash_open((uint64_t)uhash_hashLong, (uint64_t)uhash_compareLong, 0, v60);
    qword_1ECD280A8 = (uint64_t)v12;
    if (v60[0] < 1)
      uhash_setValueDeleter((uint64_t)v12, (uint64_t)sub_18BD2FBF8);
    else
      qword_1ECD280A8 = 0;
    icu::umtx_initImplPostInit((unsigned int *)&unk_1ECD28100);
  }
  if (qword_1ECD280A8)
  {
    v13 = icu::Locale::hashCode((icu::Locale *)this);
    umtx_lock((icu::UMutex *)&unk_1ECD280B0);
    Instance = (const icu::NumberingSystem *)uhash_iget(qword_1ECD280A8, v13);
    if (!Instance)
    {
      Instance = icu::NumberingSystem::createInstance((icu::NumberingSystem *)this, a4, v14);
      uhash_iput(qword_1ECD280A8, v13, (uint64_t)Instance, (int *)a4);
    }
    umtx_unlock((std::mutex **)&unk_1ECD280B0);
    v16 = 0;
  }
  else
  {
    v16 = icu::NumberingSystem::createInstance((icu::NumberingSystem *)this, a4, a3);
    Instance = v16;
  }
  if (*(int *)a4 > 0)
  {
    v4 = 0;
    goto LABEL_25;
  }
  if (!v9 || !icu::NumberingSystem::isAlgorithmic(Instance))
  {
    v57 = 0;
    v77 = 0u;
    v80 = 0;
    v79 = 0u;
    v78 = 0u;
    v76 = off_1E2256B38;
    LOWORD(v77) = 2;
    v18 = ures_open(0, this[5], (int *)a4);
    v4 = 0;
    v19 = *(unsigned int *)a4;
    if ((int)v19 <= 0)
    {
      v20 = (icu::DecimalFormatSymbols *)icu::UMemory::operator new((uint64_t *)v19, (icu::UMemory *)0xB48, v17);
      v21 = (uint64_t)v20;
      if (Instance)
      {
        if (v20)
          icu::DecimalFormatSymbols::DecimalFormatSymbols(v20, (const icu::Locale *)this, Instance, a4);
      }
      else if (v20)
      {
        icu::DecimalFormatSymbols::DecimalFormatSymbols(v20, (const icu::Locale *)this, a4);
      }
      sub_18BBB709C((uint64_t)&v57, v21, (int *)a4);
      v19 = *(unsigned int *)a4;
      if ((int)v19 > 0)
        goto LABEL_66;
      Name = (const char *)icu::NumberingSystem::getName(Instance);
      v56 = sub_18BD2D4A0((uint64_t)this, Name, dword_18BE28E48[v7], (int *)a4);
      icu::UnicodeString::UnicodeString(v60, 1, &v56);
      icu::UnicodeString::operator=((icu::UnicodeString *)&v76, (icu::UnicodeString *)v60);
      icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)v60);
      v52[2] = v56;
      v19 = *(unsigned int *)a4;
      if ((int)v19 > 0)
        goto LABEL_66;
      if (((1 << v7) & 0x13404) != 0)
      {
        v24 = (uint64_t)v57[310];
        if (v24)
        {
          v25 = u_strlen(v57[310]);
          sub_18BD2FA48((uint64_t)&v76, v24, v25);
        }
      }
      if (icu::NumberingSystem::isAlgorithmic(Instance))
      {
        v72 = 0u;
        v75 = 0;
        v74 = 0u;
        v73 = 0u;
        v71 = (UChar *)off_1E2256B38;
        LOWORD(v72) = 2;
        v67 = 0u;
        v70 = 0;
        v69 = 0u;
        v68 = 0u;
        v66 = off_1E2256B38;
        LOWORD(v67) = 2;
        v62 = 0u;
        v65 = 0;
        v64 = 0u;
        v63 = 0u;
        v61 = (UChar *)off_1E2256B38;
        LOWORD(v62) = 2;
        memset(v60, 0, 224);
        icu::Locale::Locale((icu::Locale *)v60);
        (*(void (**)(_OWORD *__return_ptr, const icu::NumberingSystem *))(*(_QWORD *)Instance + 24))(v58, Instance);
        icu::UnicodeString::copyFrom(&v71, (UChar **)v58, 0);
        icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)v58);
        if ((v72 & 0x8000u) == 0)
          v29 = (unsigned __int16)v72 >> 5;
        else
          v29 = DWORD1(v72);
        v30 = icu::UnicodeString::doIndexOf((uint64_t)&v71, 0x2Fu, 0, v29);
        if ((v72 & 0x8000u) == 0)
          v31 = (unsigned __int16)v72 >> 5;
        else
          v31 = DWORD1(v72);
        IndexOf = icu::UnicodeString::doLastIndexOf((uint64_t)&v71, 0x2Fu, 0, v31);
        if (IndexOf <= v30)
        {
          icu::Locale::operator=((icu::Locale *)v60, (uint64_t)this);
          icu::UnicodeString::copyFrom(&v61, &v71, 0);
          v35 = 3;
        }
        else
        {
          v33 = IndexOf;
          memset(&v59[1], 0, 56);
          v59[0] = (icu::Locale *)((char *)&v59[1] + 5);
          LODWORD(v59[1]) = 40;
          icu::UnicodeString::tempSubString((icu::UnicodeString *)&v71, 0, v30, (icu::UnicodeString *)v58);
          icu::CharString::appendInvariantChars((icu::CharString *)v59, (const icu::UnicodeString *)v58, a4);
          icu::UnicodeString::~UnicodeString(v34, (icu::UnicodeString *)v58);
          sub_18BCCEECC((uint64_t)&v66, (const icu::UnicodeString *)&v71, v30 + 1, (v33 + ~v30));
          sub_18BD2FAA4((uint64_t)&v61, (uint64_t)&v71, v33 + 1);
          icu::Locale::createFromName(v59[0], (uint64_t)v58);
          icu::Locale::operator=((uint64_t)v60, (uint64_t)v58);
          icu::Locale::~Locale((icu::Locale *)v58);
          memset(v58, 0, 64);
          v55 = L"SpelloutRules";
          icu::UnicodeString::UnicodeString(v58, 1, &v55);
          v52[1] = v55;
          if (sub_18BD2FB50((uint64_t)&v66, (uint64_t)v58))
            v35 = 3;
          else
            v35 = 0;
          icu::UnicodeString::~UnicodeString((void *)3, (icu::UnicodeString *)v58);
          v37 = (uint64_t *)BYTE4(v59[1]);
          if (BYTE4(v59[1]))
            uprv_free(v59[0]);
        }
        v41 = icu::UMemory::operator new(v37, (icu::UMemory *)0x2F0, v36);
        v4 = (icu::DecimalFormat *)v41;
        if (!v41)
        {
          *a4 = U_MEMORY_ALLOCATION_ERROR;
          icu::Locale::~Locale((icu::Locale *)v60);
          icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)&v61);
          icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)&v66);
          icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)&v71);
          goto LABEL_67;
        }
        v42 = icu::RuleBasedNumberFormat::RuleBasedNumberFormat(v41, v35, v60, a4);
        (*(void (**)(uint64_t, UChar **, UErrorCode *))(*(_QWORD *)v4 + 384))(v42, &v61, a4);
        icu::Locale::~Locale((icu::Locale *)v60);
        icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)&v61);
        icu::UnicodeString::~UnicodeString(v44, (icu::UnicodeString *)&v66);
        icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)&v71);
      }
      else
      {
        if ((_DWORD)v7 == 10)
        {
          v54 = &unk_18BE28E8C;
          icu::UnicodeString::UnicodeString(v60, 1, &v54);
          v53 = &unk_18BE28E90;
          icu::UnicodeString::UnicodeString(v58, 1, &v53);
          sub_18BCAF394((uint64_t)&v76, (icu::UnicodeString *)v60, (icu::UnicodeString *)v58);
          icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v58);
          v52[0] = v53;
          icu::UnicodeString::~UnicodeString(v52, (icu::UnicodeString *)v60);
          v51 = v54;
          v27 = (uint64_t *)&v51;
        }
        v39 = (icu::DecimalFormatSymbols *)v57;
        v40 = (icu::DecimalFormat *)icu::UMemory::operator new(v27, (icu::UMemory *)0x170, v26);
        v4 = v40;
        if (!v40)
        {
          v19 = 7;
          *a4 = U_MEMORY_ALLOCATION_ERROR;
          goto LABEL_67;
        }
        icu::DecimalFormat::DecimalFormat(v40, (const icu::UnicodeString *)&v76, v39, v7, a4);
        v57 = 0;
        if (*(int *)a4 > 0)
          goto LABEL_65;
        if ((_DWORD)v7 == 13)
        {
          icu::DecimalFormat::setCurrencyUsage(v4, 1, a4);
          if (*(int *)a4 >= 1)
            goto LABEL_65;
        }
      }
      LocaleByType = (const char *)ures_getLocaleByType((uint64_t)v18, 1, (int *)a4);
      v47 = (const char *)ures_getLocaleByType((uint64_t)v18, 0, (int *)a4);
      icu::Format::setLocaleIDs(v4, LocaleByType, v47);
      v19 = *(unsigned int *)a4;
      if ((int)v19 >= 1)
      {
LABEL_65:
        (*(void (**)(icu::DecimalFormat *))(*(_QWORD *)v4 + 8))(v4);
LABEL_66:
        v4 = 0;
      }
    }
LABEL_67:
    if (v18)
      ures_close(v18);
    icu::UnicodeString::~UnicodeString((void *)v19, (icu::UnicodeString *)&v76);
    if (v57)
      (*((void (**)(const UChar **))*v57 + 1))(v57);
    goto LABEL_25;
  }
  v4 = 0;
  *a4 = U_UNSUPPORTED_ERROR;
LABEL_25:
  if (v16)
    (*(void (**)(icu::NumberingSystem *))(*(_QWORD *)v16 + 8))(v16);
  return v4;
}

uint64_t sub_18BD2FA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  icu::UnicodeString::unBogus(a1);
  if (*(__int16 *)(a1 + 8) < 0)
    v6 = *(unsigned int *)(a1 + 12);
  else
    v6 = *(unsigned __int16 *)(a1 + 8) >> 5;
  return icu::UnicodeString::doReplace(a1, 0, v6, a2, 0, a3);
}

uint64_t sub_18BD2FAA4(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;

  icu::UnicodeString::unBogus(a1);
  if (a3 < 0)
  {
    v6 = 0;
    goto LABEL_7;
  }
  if (*(__int16 *)(a2 + 8) < 0)
  {
    v6 = *(_DWORD *)(a2 + 12);
    if (v6 >= a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v6 = *(unsigned __int16 *)(a2 + 8) >> 5;
  if (v6 < a3)
LABEL_7:
    a3 = v6;
LABEL_8:
  if (*(__int16 *)(a1 + 8) < 0)
    v7 = *(unsigned int *)(a1 + 12);
  else
    v7 = *(unsigned __int16 *)(a1 + 8) >> 5;
  v8 = *(unsigned __int16 *)(a2 + 8);
  v9 = (__int16)v8;
  v10 = v8 >> 5;
  if (v9 < 0)
    v10 = *(_DWORD *)(a2 + 12);
  return icu::UnicodeString::doReplace((icu::UnicodeString *)a1, 0, v7, (const icu::UnicodeString *)a2, a3, v10 - a3);
}

uint64_t sub_18BD2FB50(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  int32_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;

  v2 = *(unsigned __int16 *)(a1 + 8);
  if (*(__int16 *)(a1 + 8) < 0)
    v3 = *(_DWORD *)(a1 + 12);
  else
    v3 = v2 >> 5;
  v4 = *(unsigned __int16 *)(a2 + 8);
  if ((v4 & 1) != 0)
    return (v2 & 1) == 0;
  if ((v4 & 0x8000u) == 0)
    v5 = v4 >> 5;
  else
    v5 = *(_DWORD *)(a2 + 12);
  if ((v4 & 2) != 0)
    v6 = a2 + 10;
  else
    v6 = *(_QWORD *)(a2 + 24);
  return icu::UnicodeString::doCompare(a1, 0, v3, v6, v5 & (v5 >> 31), v5 & ~(v5 >> 31));
}

uint64_t icu::NumberFormat::getRoundingMode(icu::NumberFormat *this)
{
  return 7;
}

uint64_t sub_18BD2FBBC()
{
  atomic_store(0, (unsigned int *)&unk_1ECD28100);
  if (qword_1ECD280A8)
  {
    uhash_close((void **)qword_1ECD280A8);
    qword_1ECD280A8 = 0;
  }
  return 1;
}

uint64_t sub_18BD2FBF8(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_18BD2FC0C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2263B60;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
}

void sub_18BD2FC3C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2263B60;
  icu::Locale::~Locale((icu::Locale *)(a1 + 16));
  icu::CacheKeyBase::~CacheKeyBase((icu::CacheKeyBase *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t sub_18BD2FC70(uint64_t a1)
{
  int v2;
  unsigned int v3;

  v2 = strlen((const char *)((unint64_t)"N3icu18SharedNumberFormatE" & 0x7FFFFFFFFFFFFFFFLL));
  v3 = ustr_hashCharsN((unsigned __int8 *)((unint64_t)"N3icu18SharedNumberFormatE" & 0x7FFFFFFFFFFFFFFFLL), v2);
  return icu::Locale::hashCode((icu::Locale *)(a1 + 16)) + 37 * v3;
}

uint64_t *sub_18BD2FCC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;

  v4 = icu::UMemory::operator new(a3, (icu::UMemory *)0xF0, a2);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 2) = *(_DWORD *)(a1 + 8);
    *((_BYTE *)v4 + 12) = 0;
    *v4 = (uint64_t)off_1E2263B60;
    icu::Locale::Locale((icu::Locale *)(v4 + 2), a1 + 16);
  }
  return v5;
}

char *sub_18BD2FD1C(uint64_t a1, char *__dst, int a3)
{
  char *result;

  result = strncpy(__dst, *(const char **)(a1 + 56), a3);
  __dst[a3 - 1] = 0;
  return result;
}

BOOL sub_18BD2FD54(_QWORD *a1, _QWORD *a2)
{
  _BOOL8 result;

  result = sub_18BC8C418(a1, a2);
  if (result)
    return icu::Locale::operator==((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return result;
}

uint64_t *sub_18BD2FD90(uint64_t a1, int a2, int a3, UErrorCode *a4)
{
  uint64_t v8;
  icu::UnicodeSet *Set;
  const icu::number::impl::CurrencySymbols ***v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  icu::UnicodeSet *v16;
  uint64_t v17;
  int v18;

  v8 = *(_QWORD *)(a1 + 80);
  if (!v8 || *(int *)(a1 + 56) < 1)
    goto LABEL_7;
  if ((*(_DWORD *)(a1 + 60) & 0x80000000) != 0)
    goto LABEL_6;
  Set = (icu::UnicodeSet *)icu::numparse::impl::SymbolMatcher::getSet(*(icu::numparse::impl::SymbolMatcher **)(a1 + 80));
  if (!icu::UnicodeSet::contains(Set, *(_DWORD *)(a1 + 60)))
  {
    v8 = *(_QWORD *)(a1 + 80);
LABEL_6:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v8);
  }
LABEL_7:
  switch(a2)
  {
    case -10:
    case -9:
    case -8:
    case -7:
    case -6:
      v10 = icu::numparse::impl::AffixTokenMatcherWarehouse::currency(*(const icu::number::impl::CurrencySymbols ****)(a1 + 72), a4);
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, const icu::number::impl::CurrencySymbols ***))(*(_QWORD *)a1 + 24))(a1, v10);
      goto LABEL_9;
    case -5:
      v12 = icu::numparse::impl::AffixTokenMatcherWarehouse::permille(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v12);
      a2 = -5;
      goto LABEL_9;
    case -4:
      v13 = icu::numparse::impl::AffixTokenMatcherWarehouse::percent(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v13);
      a2 = -4;
      goto LABEL_9;
    case -2:
      v14 = icu::numparse::impl::AffixTokenMatcherWarehouse::plusSign(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v14);
      a2 = -2;
      goto LABEL_9;
    case -1:
      v15 = icu::numparse::impl::AffixTokenMatcherWarehouse::minusSign(*(icu::numparse::impl::AffixTokenMatcherWarehouse **)(a1 + 72));
      result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v15);
      a2 = -1;
      goto LABEL_9;
    case 0:
      result = *(uint64_t **)(a1 + 80);
      if (result)
      {
        v16 = (icu::UnicodeSet *)icu::numparse::impl::SymbolMatcher::getSet((icu::numparse::impl::SymbolMatcher *)result);
        result = (uint64_t *)icu::UnicodeSet::contains(v16, a3);
        if ((_DWORD)result)
          goto LABEL_20;
      }
      v17 = *(_QWORD *)(a1 + 72);
      v18 = a3;
      if (*(int *)a4 <= 0)
      {
        result = sub_18BD30560((const void **)(v17 + 1200), &v18);
        if (result)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, result);
LABEL_20:
          a2 = a3;
LABEL_9:
          *(_DWORD *)(a1 + 60) = a2;
        }
        else
        {
          *a4 = U_MEMORY_ALLOCATION_ERROR;
        }
      }
      return result;
    default:
      abort();
  }
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::minusSign(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  void (**v3)();
  _QWORD v4[9];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  icu::numparse::impl::MinusSignMatcher::MinusSignMatcher((icu::numparse::impl::MinusSignMatcher *)&v3, *(UChar ***)(*(_QWORD *)this + 8), 1);
  icu::UnicodeString::operator=((icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 16), (icu::UnicodeString *)v4);
  *((_QWORD *)this + 10) = v4[8];
  *((_BYTE *)this + 88) = v5;
  v3 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)v4);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v3);
  return (uint64_t)this + 8;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::plusSign(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  void (**v3)();
  _QWORD v4[9];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  icu::numparse::impl::PlusSignMatcher::PlusSignMatcher((icu::numparse::impl::PlusSignMatcher *)&v3, *(UChar ***)(*(_QWORD *)this + 8), 1);
  icu::UnicodeString::operator=((icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 104), (icu::UnicodeString *)v4);
  *((_QWORD *)this + 21) = v4[8];
  *((_BYTE *)this + 176) = v5;
  v3 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)v4);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v3);
  return (uint64_t)this + 96;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::percent(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  void (**v3)();
  _QWORD v4[10];

  v4[9] = *MEMORY[0x1E0C80C00];
  icu::numparse::impl::PercentMatcher::PercentMatcher((icu::numparse::impl::PercentMatcher *)&v3, *(UChar ***)(*(_QWORD *)this + 8));
  icu::UnicodeString::operator=((icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 192), (icu::UnicodeString *)v4);
  *((_QWORD *)this + 32) = v4[8];
  v3 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)v4);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v3);
  return (uint64_t)this + 184;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::permille(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  void (**v3)();
  _QWORD v4[10];

  v4[9] = *MEMORY[0x1E0C80C00];
  icu::numparse::impl::PermilleMatcher::PermilleMatcher((icu::numparse::impl::PermilleMatcher *)&v3, *(UChar ***)(*(_QWORD *)this + 8));
  icu::UnicodeString::operator=((icu::numparse::impl::AffixTokenMatcherWarehouse *)((char *)this + 272), (icu::UnicodeString *)v4);
  *((_QWORD *)this + 42) = v4[8];
  v3 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)v4);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v3);
  return (uint64_t)this + 264;
}

const icu::number::impl::CurrencySymbols ***icu::numparse::impl::AffixTokenMatcherWarehouse::currency(const icu::number::impl::CurrencySymbols ***this, UErrorCode *a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t i;
  void *v8;
  _QWORD v10[2];
  _BYTE v11[64];
  _BYTE v12[584];
  _BYTE v13[64];
  _BYTE v14[64];
  void *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher((icu::numparse::impl::CombinedCurrencyMatcher *)v10, **this, (*this)[1], *((_DWORD *)*this + 8), a2);
  this[44] = (const icu::number::impl::CurrencySymbols **)v10[1];
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 45), (icu::UnicodeString *)v11);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 53), (icu::UnicodeString *)v12);
  v3 = 0;
  *((_BYTE *)this + 488) = v12[64];
  do
  {
    icu::UnicodeString::operator=((icu::UnicodeString *)&this[v3 + 62], (icu::UnicodeString *)&v12[v3 * 8 + 72]);
    v3 += 8;
  }
  while (v3 != 64);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 126), (icu::UnicodeString *)v13);
  icu::UnicodeString::operator=((icu::UnicodeString *)(this + 134), (icu::UnicodeString *)v14);
  icu::CharString::operator=((uint64_t)(this + 142), (uint64_t)&v15);
  v10[0] = off_1E2263F00;
  v4 = v16;
  if (v16)
    uprv_free(v15);
  icu::UnicodeString::~UnicodeString((void *)v4, (icu::UnicodeString *)v14);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)v13);
  for (i = 75; i != 11; i -= 8)
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v10[i]);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v11);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)v10);
  return this + 43;
}

uint64_t *icu::numparse::impl::AffixTokenMatcherWarehouse::nextCodePointMatcher(const void **this, int a2, UErrorCode *a3)
{
  uint64_t *result;
  int v5;

  v5 = a2;
  if (*(int *)a3 > 0)
    return 0;
  result = sub_18BD30560(this + 150, &v5);
  if (!result)
    *a3 = U_MEMORY_ALLOCATION_ERROR;
  return result;
}

void sub_18BD303A4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v4 = *(_DWORD *)(a1 + 56);
  if (v4 >= *(_DWORD *)(a1 + 24) && v4 >= 1)
  {
    v6 = 2 * v4;
    v7 = uprv_malloc(8 * (2 * v4));
    if (v7)
    {
      v8 = v7;
      v9 = *(_DWORD *)(a1 + 24);
      if (v9 >= v4)
        v9 = v4;
      if (v9 >= v6)
        v9 = 2 * v4;
      v10 = *(void **)(a1 + 16);
      memcpy(v7, v10, 8 * v9);
      if (*(_BYTE *)(a1 + 28))
        uprv_free(v10);
      *(_QWORD *)(a1 + 16) = v8;
      *(_DWORD *)(a1 + 24) = v6;
      *(_BYTE *)(a1 + 28) = 1;
    }
  }
  v11 = *(int *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v11 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v11) = a2;
}

void sub_18BD30454(uint64_t a1, uint64_t a2)
{
  sub_18BD303A4(a1 - 8, a2);
}

uint64_t icu::numparse::impl::AffixPatternMatcher::AffixPatternMatcher(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5)
{
  uint64_t v8;

  v8 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a1, a2, a3);
  *(_QWORD *)v8 = &unk_1E2263C80;
  sub_18BD31DFC((void **)(v8 + 56), a4, a5);
  return a1;
}

{
  uint64_t v8;

  v8 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a1, a2, a3);
  *(_QWORD *)v8 = &unk_1E2263C80;
  sub_18BD31DFC((void **)(v8 + 56), a4, a5);
  return a1;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = off_1E2264240;
  *(_WORD *)(a1 + 112) = 2;
  *(_QWORD *)(a1 + 96) = off_1E22643F8;
  *(_QWORD *)(a1 + 104) = off_1E2256B38;
  *(_WORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = off_1E2264348;
  *(_QWORD *)(a1 + 192) = off_1E2256B38;
  *(_WORD *)(a1 + 280) = 2;
  *(_QWORD *)(a1 + 264) = off_1E22643A0;
  *(_QWORD *)(a1 + 272) = off_1E2256B38;
  sub_18BD31D70(a1 + 344);
  *(_DWORD *)(a1 + 1200) = 0;
  *(_QWORD *)(a1 + 1208) = a1 + 1224;
  *(_DWORD *)(a1 + 1216) = 8;
  *(_BYTE *)(a1 + 1220) = 0;
  return a1;
}

uint64_t icu::numparse::impl::AffixTokenMatcherWarehouse::ignorables(icu::numparse::impl::AffixTokenMatcherWarehouse *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 16);
}

uint64_t *sub_18BD30560(const void **a1, int *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t *result;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;

  v4 = *((_DWORD *)a1 + 4);
  v5 = *(unsigned int *)a1;
  if ((_DWORD)v5 == v4)
  {
    if (v4 == 8)
      v6 = 32;
    else
      v6 = 2 * v4;
    if (v6 < 1)
      return 0;
    result = (uint64_t *)uprv_malloc(8 * v6);
    if (!result)
      return result;
    v8 = result;
    if (v4 >= 1)
    {
      v9 = *((_DWORD *)a1 + 4);
      if (v9 >= v4)
        v9 = v4;
      if (v9 >= v6)
        v9 = v6;
      memcpy(result, a1[1], 8 * v9);
    }
    if (*((_BYTE *)a1 + 20))
      uprv_free((void *)a1[1]);
    a1[1] = v8;
    *((_DWORD *)a1 + 4) = v6;
    v5 = 1;
    *((_BYTE *)a1 + 20) = 1;
  }
  result = icu::UMemory::operator new((uint64_t *)v5, (icu::UMemory *)0x10, (unint64_t)a2);
  if (result)
  {
    v10 = *a2;
    *result = (uint64_t)&off_1E2263C38;
    *((_DWORD *)result + 2) = v10;
  }
  v11 = *(int *)a1;
  *(_DWORD *)a1 = v11 + 1;
  *((_QWORD *)a1[1] + v11) = result;
  return result;
}

BOOL icu::numparse::impl::AffixTokenMatcherWarehouse::hasEmptyCurrencySymbol(icu::number::impl::CurrencySymbols ***this)
{
  return icu::number::impl::CurrencySymbols::hasEmptyCurrencySymbol(**this);
}

uint64_t icu::numparse::impl::CodePointMatcher::CodePointMatcher(uint64_t this, int a2)
{
  *(_QWORD *)this = &off_1E2263C38;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

{
  *(_QWORD *)this = &off_1E2263C38;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t icu::numparse::impl::CodePointMatcher::match(icu::numparse::impl::CodePointMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  if (icu::StringSegment::startsWith(a2, *((_DWORD *)this + 2)))
  {
    icu::StringSegment::adjustOffsetByCodePoint(a2);
    icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
  }
  return 0;
}

BOOL icu::numparse::impl::CodePointMatcher::smokeTest(icu::numparse::impl::CodePointMatcher *this, const icu::StringSegment *a2)
{
  return icu::StringSegment::startsWith(a2, *((_DWORD *)this + 2));
}

uint64_t icu::numparse::impl::CodePointMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<CodePoint>");
}

uint64_t icu::numparse::impl::AffixPatternMatcher::fromAffixPattern@<X0>(icu::numparse::impl::AffixPatternMatcher *this@<X0>, const icu::UnicodeString *a2@<X1>, icu::numparse::impl::AffixTokenMatcherWarehouse *a3@<X2>, BOOL *a4@<X4>, _BYTE *a5@<X3>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t (**v12)();
  void *v13;
  void *v14[5];
  uint64_t v15;
  icu::numparse::impl::AffixPatternMatcher *v16;
  const icu::UnicodeString *v17;
  uint64_t v18;

  if (*((unsigned __int16 *)this + 4) <= 0x1Fu)
  {
    *a5 = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    result = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a6);
    *(_QWORD *)a6 = &unk_1E2263C80;
    *(_WORD *)(a6 + 70) = 0;
    *(_QWORD *)(a6 + 56) = a6 + 70;
    *(_DWORD *)(a6 + 64) = 4;
    *(_BYTE *)(a6 + 68) = 0;
  }
  else
  {
    *a5 = 1;
    if (((unsigned __int16)a3 & 0x200) != 0)
      v9 = 0;
    else
      v9 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    memset(&v14[1], 0, 32);
    v12 = &off_1E2263BE0;
    v13 = &unk_1E2263C10;
    v14[0] = &v14[2];
    LODWORD(v14[1]) = 3;
    v15 = 0;
    v16 = this;
    v17 = a2;
    v18 = v9;
    icu::number::impl::AffixUtils::iterateWithConsumer((unint64_t)this, (uint64_t)&v12, (int *)a4);
    v11 = (uint64_t)v16;
    icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(a6, (uint64_t)v14, v15);
    *(_QWORD *)a6 = &unk_1E2263C80;
    sub_18BD31DFC((void **)(a6 + 56), v11, (int *)a4);
    v12 = &off_1E2263BE0;
    v13 = &unk_1E2263C10;
    if (BYTE4(v14[1]))
      uprv_free(v14[0]);
    return nullsub_17(&v12);
  }
  return result;
}

uint64_t sub_18BD30828(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E2263BE0;
  *(_QWORD *)(a1 + 8) = &unk_1E2263C10;
  if (*(_BYTE *)(a1 + 28))
    uprv_free(*(void **)(a1 + 16));
  return nullsub_17(a1);
}

uint64_t icu::numparse::impl::AffixPatternMatcher::getPattern@<X0>(icu::numparse::impl::AffixPatternMatcher *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 7);
  return icu::UnicodeString::UnicodeString(a2, 1, &v3);
}

uint64_t icu::numparse::impl::AffixPatternMatcher::operator==(uint64_t a1, uint64_t a2)
{
  return sub_18BD30904((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
}

uint64_t sub_18BD30904(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned int v11;
  _BYTE v12[8];
  unsigned __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  icu::UnicodeString::UnicodeString(v12, 1, &v9);
  v8 = *a2;
  icu::UnicodeString::UnicodeString(&v9, 1, &v8);
  if ((v13 & 1) != 0)
  {
    v5 = v10;
    v3 = v10 & 1;
  }
  else
  {
    v3 = 0;
    if ((v13 & 0x8000u) == 0)
      v4 = v13 >> 5;
    else
      v4 = v14;
    if ((v10 & 0x8000u) == 0)
      v5 = v10 >> 5;
    else
      v5 = v11;
    if ((v10 & 1) == 0 && v4 == (_DWORD)v5)
      v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v12, (const icu::UnicodeString *)&v9, v4);
  }
  icu::UnicodeString::~UnicodeString((void *)v5, (icu::UnicodeString *)&v9);
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v12);
  return v3;
}

uint64_t sub_18BD30A1C(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;

  for (i = 0; i != 576; i += 32)
    *(_QWORD *)(a1 + i) = &off_1E2263CE0;
  v5 = a1 + 576;
  do
  {
    v6 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(v5);
    *(_WORD *)(v6 + 70) = 0;
    *(_QWORD *)v6 = &unk_1E2263C80;
    *(_QWORD *)(v6 + 56) = v6 + 70;
    *(_DWORD *)(v6 + 64) = 4;
    *(_BYTE *)(v6 + 68) = 0;
    v5 = v6 + 80;
  }
  while (v5 != a1 + 1536);
  *(_QWORD *)(a1 + 1536) = a2;
  return a1;
}

BOOL sub_18BD30AB4(uint64_t a1, icu::numparse::impl::SymbolMatcher *a2, __int16 a3, int *a4)
{
  void *v8;
  void *v9;
  void *v10;
  const icu::UnicodeString *Set;
  UErrorCode *v12;
  const icu::UnicodeString *v13;
  UErrorCode *v14;
  const icu::UnicodeString *v15;
  UErrorCode *v16;
  const icu::UnicodeString *v17;
  UErrorCode *v18;
  _BOOL8 v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[8];
  void (**v25)(icu::UnicodeString *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void (**v30)(icu::UnicodeString *__hidden);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[4];
  _OWORD v36[4];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  memset(v36, 0, sizeof(v36));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v36, a1, 256);
  memset(v35, 0, sizeof(v35));
  (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(v35, a1, 0);
  v31 = 0u;
  v34 = 0;
  v33 = 0u;
  v32 = 0u;
  v29 = 0;
  v30 = off_1E2256B38;
  LOWORD(v31) = 2;
  v26 = 0u;
  v28 = 0u;
  v27 = 0u;
  v25 = off_1E2256B38;
  LOWORD(v26) = 2;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v24, a1, 768);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v30, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v24);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v24, a1, 512);
    icu::UnicodeString::operator=((icu::UnicodeString *)&v25, (icu::UnicodeString *)v24);
    icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v24);
  }
  v19 = 1;
  if ((a3 & 0x100) == 0)
  {
    Set = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
    if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables((icu::number::impl::AffixUtils *)v36, Set, (const icu::UnicodeSet *)a4, v12))
    {
      v13 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
      if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables((icu::number::impl::AffixUtils *)v35, v13, (const icu::UnicodeSet *)a4, v14))
      {
        v15 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
        if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables((icu::number::impl::AffixUtils *)&v30, v15, (const icu::UnicodeSet *)a4, v16))
        {
          v17 = (const icu::UnicodeString *)icu::numparse::impl::SymbolMatcher::getSet(a2);
          if (icu::number::impl::AffixUtils::containsOnlySymbolsAndIgnorables((icu::number::impl::AffixUtils *)&v25, v17, (const icu::UnicodeSet *)a4, v18))
          {
            if ((icu::number::impl::AffixUtils::containsType((uint64_t)v35, -2, a4) & 1) == 0
              && (icu::number::impl::AffixUtils::containsType((uint64_t)v35, -1, a4) & 1) == 0
              && (icu::number::impl::AffixUtils::containsType((uint64_t)&v25, -2, a4) & 1) == 0
              && !icu::number::impl::AffixUtils::containsType((uint64_t)&v25, -1, a4))
            {
              v19 = 0;
            }
          }
        }
      }
    }
  }
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)&v25);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)&v30);
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v35);
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v36);
  return v19;
}

void *sub_18BD30D08(uint64_t a1, uint64_t a2, uint64_t a3, icu::numparse::impl::SymbolMatcher *a4, icu::numparse::impl::AffixTokenMatcherWarehouse *a5, int *a6)
{
  BOOL *v6;
  icu::numparse::impl::AffixTokenMatcherWarehouse *v7;
  uint64_t v9;
  void *result;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(icu::numparse::impl::NumberParseMatcher *__hidden);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  void *v25;
  int v26;
  int v27;
  icu::numparse::impl::AffixTokenMatcherWarehouse *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  void *v38;
  int v39;
  uint64_t v40;
  icu::numparse::impl::AffixTokenMatcherWarehouse *v41;
  icu::numparse::impl::AffixTokenMatcherWarehouse *v42;
  uint64_t v43;
  int v44;
  char v45;
  void (**v46)(icu::numparse::impl::NumberParseMatcher *__hidden);
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  int v58;
  BOOL v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  BOOL *v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  icu::numparse::impl::AffixTokenMatcherWarehouse *v70;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t (**v73)(icu::numparse::impl::NumberParseMatcher *);
  __int128 v74;
  _QWORD v75[3];
  int v76;
  _BYTE *v77;
  int v78;
  unsigned __int8 v79;
  _BYTE v80[17];
  unsigned __int8 v81;
  void (**v82)(icu::UnicodeString *__hidden);
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v6 = (BOOL *)a6;
  v7 = a5;
  v9 = a2;
  v87 = *MEMORY[0x1E0C80C00];
  result = (void *)sub_18BD30AB4(a2, a4, (__int16)a5, a6);
  if (!(_DWORD)result)
    return result;
  v62 = a3;
  v12 = 0;
  v64 = 0;
  v65 = 0;
  v13 = 0;
  v14 = 0;
  v83 = 0u;
  v86 = 0;
  v85 = 0u;
  v84 = 0u;
  v82 = off_1E2256B38;
  LOWORD(v83) = 2;
  v63 = v6;
  v15 = (uint64_t)&off_1E2263DF8;
  v16 = &off_1E2263CE0;
  v69 = v7;
  v67 = v9;
  do
  {
    if (((v12 & 1) == 0
       || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9)
       && icu::number::impl::CurrencySymbols::hasEmptyCurrencySymbol(***(icu::number::impl::CurrencySymbols ****)(a1 + 1536)))
      && (((unsigned __int16)v7 & 0x400) == 0 || v12 >= 2))
    {
      v15 = v12 & 0x7E;
      if (((unsigned __int16)v7 & 0x400) != 0 || (_DWORD)v15 != 2)
      {
        v66 = v12 & 0x7E;
        v68 = v14;
        v81 = 0;
        icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(v9, 1, v12 >> 1, 0, 5, 0, v12 & 1, (uint64_t)&v82);
        icu::numparse::impl::AffixPatternMatcher::fromAffixPattern((icu::numparse::impl::AffixPatternMatcher *)&v82, *(const icu::UnicodeString **)(a1 + 1536), v7, v6, &v81, (uint64_t)&v73);
        v17 = a1 + 80 * v13;
        v18 = v17 + 576;
        if (*(_BYTE *)(v17 + 596))
          uprv_free(*(void **)(v17 + 584));
        v19 = SDWORD2(v74);
        *(_DWORD *)(v18 + 16) = DWORD2(v74);
        *(_BYTE *)(v18 + 20) = BYTE12(v74);
        if ((_QWORD *)v74 == v75)
        {
          *(_QWORD *)(v18 + 8) = v18 + 24;
          memcpy((void *)(v18 + 24), v75, 8 * v19);
        }
        else
        {
          *(_QWORD *)(v18 + 8) = v74;
          *(_QWORD *)&v74 = v75;
          DWORD2(v74) = 3;
          BYTE12(v74) = 0;
        }
        *(_DWORD *)(v18 + 48) = v76;
        v20 = a1 + 80 * v13;
        v21 = (void **)(v20 + 632);
        if (*(_BYTE *)(v20 + 644))
          uprv_free(*v21);
        v22 = (unsigned __int8 *)(v20 + 644);
        v23 = v78;
        *(_DWORD *)(a1 + 80 * v13 + 640) = v78;
        v24 = v79;
        *v22 = v79;
        if (v77 == v80)
        {
          v25 = (void *)(a1 + 80 * v13 + 646);
          *v21 = v25;
          memcpy(v25, v80, 2 * v23);
          v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))&unk_1E2263C80;
          if (v24)
            uprv_free(v80);
        }
        else
        {
          *v21 = v77;
          v77 = v80;
          v78 = 4;
          v79 = 0;
        }
        v73 = &off_1E2263DF8;
        if (BYTE12(v74))
          uprv_free((void *)v74);
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        v26 = v81;
        v27 = v13 + v81;
        if (v81)
          v28 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v18;
        else
          v28 = 0;
        v70 = v28;
        v72 = 0;
        icu::number::impl::PatternStringUtils::patternInfoToStringBuilder(v67, 0, v12 >> 1, 0, 5, 0, v12 & 1, (uint64_t)&v82);
        icu::numparse::impl::AffixPatternMatcher::fromAffixPattern((icu::numparse::impl::AffixPatternMatcher *)&v82, *(const icu::UnicodeString **)(a1 + 1536), (icu::numparse::impl::AffixTokenMatcherWarehouse *)v69, v6, &v72, (uint64_t)&v73);
        v29 = a1 + 80 * v27;
        v30 = v29 + 576;
        if (*(_BYTE *)(v29 + 596))
          uprv_free(*(void **)(v29 + 584));
        v31 = SDWORD2(v74);
        *(_DWORD *)(v30 + 16) = DWORD2(v74);
        *(_BYTE *)(v30 + 20) = BYTE12(v74);
        if ((_QWORD *)v74 == v75)
        {
          *(_QWORD *)(v30 + 8) = v30 + 24;
          memcpy((void *)(v30 + 24), v75, 8 * v31);
        }
        else
        {
          *(_QWORD *)(v30 + 8) = v74;
          *(_QWORD *)&v74 = v75;
          DWORD2(v74) = 3;
          BYTE12(v74) = 0;
        }
        v32 = v27;
        *(_DWORD *)(v30 + 48) = v76;
        v33 = a1 + 80 * v27;
        v34 = (void **)(v33 + 632);
        v71 = v32;
        if (*(_BYTE *)(v33 + 644))
        {
          uprv_free(*v34);
          LODWORD(v32) = v71;
        }
        v35 = (unsigned __int8 *)(v33 + 644);
        v36 = v78;
        *(_DWORD *)(a1 + 80 * (int)v32 + 640) = v78;
        v37 = v79;
        *v35 = v79;
        if (v77 == v80)
        {
          v38 = (void *)(a1 + 80 * (int)v32 + 646);
          *v34 = v38;
          memcpy(v38, v80, 2 * v36);
          v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))&unk_1E2263C80;
          if (v37)
            uprv_free(v80);
        }
        else
        {
          *v34 = v77;
          v77 = v80;
          v78 = 4;
          v79 = 0;
        }
        v73 = &off_1E2263DF8;
        if (BYTE12(v74))
          uprv_free((void *)v74);
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        v39 = v72;
        if (v72)
          v40 = v30;
        else
          v40 = 0;
        v41 = v70;
        v42 = v70;
        v43 = v40;
        if (v12 >= 2)
        {
          if ((v42 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v64, v43 = v65, !v64) && !v26
            || v64 && v26 && (v44 = sub_18BD30904((uint64_t *)v70 + 7, v64 + 7), v41 = v70, v44))
          {
            if (!v65 && !v39)
            {
              v43 = 0;
LABEL_51:
              v14 = v68;
LABEL_70:
              v7 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v69;
              v15 = v71;
              goto LABEL_71;
            }
            if (v65)
            {
              if (v39)
              {
                v45 = sub_18BD30904((uint64_t *)(v40 + 56), (uint64_t *)(v65 + 56));
                v41 = v70;
                if ((v45 & 1) != 0)
                {
                  v42 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v64;
                  v43 = v65;
                  goto LABEL_51;
                }
              }
            }
          }
        }
        v46 = v16;
        v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))v16;
        *(_QWORD *)&v74 = v41;
        *((_QWORD *)&v74 + 1) = v40;
        LODWORD(v75[0]) = v66 == 4;
        v47 = (int)v68 + 1;
        v48 = a1 + 32 * (int)v68;
        *(_OWORD *)(v48 + 8) = v74;
        *(_DWORD *)(v48 + 24) = v75[0];
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        if (!v26)
          goto LABEL_65;
        v7 = (icu::numparse::impl::AffixTokenMatcherWarehouse *)v69;
        v15 = v71;
        if ((v69 & 0x80) == 0 || !v39)
        {
          v14 = (int)v68 + 1;
          v16 = v46;
          v6 = v63;
LABEL_71:
          v13 = v15 + v39;
          v64 = (uint64_t *)v42;
          v65 = v43;
          v9 = v67;
          goto LABEL_72;
        }
        if (v12 >= 2 && v42 && (sub_18BD30904((uint64_t *)v70 + 7, (uint64_t *)v42 + 7) & 1) != 0)
          goto LABEL_63;
        v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))v46;
        v74 = (unint64_t)v70;
        LODWORD(v75[0]) = v66 == 4;
        v49 = v68 + 2;
        v50 = a1 + 32 * v47;
        *(_OWORD *)(v50 + 8) = (unint64_t)v70;
        *(_DWORD *)(v50 + 24) = v75[0];
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        v47 = (v68 + 2);
        if (v12 >= 2)
        {
LABEL_63:
          if (v43)
          {
            v49 = v47;
            if ((sub_18BD30904((uint64_t *)(v40 + 56), (uint64_t *)(v43 + 56)) & 1) != 0)
            {
LABEL_65:
              v14 = v47;
              v16 = v46;
LABEL_69:
              v6 = v63;
              goto LABEL_70;
            }
          }
          else
          {
            v49 = v47;
          }
        }
        v16 = v46;
        v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))v46;
        *(_QWORD *)&v74 = 0;
        *((_QWORD *)&v74 + 1) = v40;
        LODWORD(v75[0]) = v66 == 4;
        v14 = (v49 + 1);
        v51 = a1 + 32 * v49;
        *(_OWORD *)(v51 + 8) = v74;
        *(_DWORD *)(v51 + 24) = v75[0];
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        goto LABEL_69;
      }
    }
LABEL_72:
    ++v12;
  }
  while (v12 != 6);
  if ((int)v14 > 1)
  {
    v52 = 0;
    LODWORD(v15) = 1;
    do
    {
      while (1)
      {
        v53 = a1 + 32 * ((int)v15 - 1);
        v54 = v15;
        v55 = a1 + 32 * v15;
        if ((int)sub_18BD31488(v53, v55) <= 0)
          break;
        v75[0] = 0;
        v73 = (uint64_t (**)(icu::numparse::impl::NumberParseMatcher *))v16;
        v74 = *(_OWORD *)(v53 + 8);
        v56 = v74;
        LODWORD(v75[0]) = *(_DWORD *)(v53 + 24);
        v57 = v75[0];
        v58 = *(_DWORD *)(v55 + 24);
        *(_OWORD *)(v53 + 8) = *(_OWORD *)(v55 + 8);
        *(_DWORD *)(v53 + 24) = v58;
        *(_OWORD *)(v55 + 8) = v56;
        *(_DWORD *)(v55 + 24) = v57;
        icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)&v73);
        v52 = v54 + 1 < (int)v14;
        if (v54 + 1 < (int)v14)
          LODWORD(v15) = v54 + 1;
        else
          LODWORD(v15) = 1;
      }
      v59 = v54 + 1 < (int)v14;
      v60 = v59 | v52;
      if (v54 + 1 < (int)v14)
        v15 = (v54 + 1);
      else
        v15 = 1;
      v52 &= v59;
    }
    while ((v60 & 1) != 0);
  }
  if ((int)v14 >= 1)
  {
    v61 = v14;
    do
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 16))(v62, a1);
      a1 += 32;
      --v61;
    }
    while (v61);
  }
  return icu::UnicodeString::~UnicodeString((void *)v15, (icu::UnicodeString *)&v82);
}

void sub_18BD31424(void **this)
{
  *this = &unk_1E2263C80;
  if (*((_BYTE *)this + 68))
    uprv_free(this[7]);
  *this = &off_1E2263DF8;
  if (*((_BYTE *)this + 20))
    uprv_free(this[1]);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
}

uint64_t sub_18BD31488(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v13;

  v4 = (uint64_t *)(a1 + 8);
  v5 = sub_18BD31958(*(_QWORD *)(a1 + 8));
  v6 = (uint64_t *)(a2 + 8);
  if (v5 == sub_18BD31958(*(_QWORD *)(a2 + 8)))
  {
    v8 = *(_QWORD *)(a1 + 16);
    v7 = (uint64_t *)(a1 + 16);
    v9 = sub_18BD31958(v8);
    v11 = *(_QWORD *)(a2 + 16);
    v10 = (uint64_t *)(a2 + 16);
    if (v9 == sub_18BD31958(v11))
      return 0;
    v4 = v7;
    v6 = v10;
  }
  v13 = sub_18BD31958(*v4);
  if (v13 > (int)sub_18BD31958(*v6))
    return -1;
  else
    return 1;
}

uint64_t sub_18BD3152C(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, uint64_t a4)
{
  int Offset;
  uint64_t v9;
  icu::UnicodeString *v10;
  int v11;
  void *v12;
  uint64_t v14;
  _BYTE v15[64];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((icu::numparse::impl::ParsedNumber::seenNumber(this) & 1) != 0)
  {
    if ((*((_WORD *)this + 76) & 1) != 0
      && *(_QWORD *)(a1 + 16)
      && sub_18BD316D0(*(_QWORD *)(a1 + 8), (uint64_t)this + 80))
    {
      Offset = icu::StringSegment::getOffset(a2);
      v9 = (*(uint64_t (**)(_QWORD, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2, this, a4);
      if (Offset != icu::StringSegment::getOffset(a2))
      {
        v10 = (icu::numparse::impl::ParsedNumber *)((char *)this + 144);
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56);
        icu::UnicodeString::UnicodeString(v15, 1, &v14);
LABEL_11:
        icu::UnicodeString::operator=(v10, (icu::UnicodeString *)v15);
        icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v15);
        return v9;
      }
      return v9;
    }
    return 0;
  }
  if ((*((_WORD *)this + 44) & 1) == 0 || !*(_QWORD *)(a1 + 8))
    return 0;
  v11 = icu::StringSegment::getOffset(a2);
  v9 = (*(uint64_t (**)(_QWORD, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, this, a4);
  if (v11 != icu::StringSegment::getOffset(a2))
  {
    v10 = (icu::numparse::impl::ParsedNumber *)((char *)this + 80);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
    icu::UnicodeString::UnicodeString(v15, 1, &v14);
    goto LABEL_11;
  }
  return v9;
}

BOOL sub_18BD316D0(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  int v4;
  unsigned int v5;
  void *v6;
  uint64_t v8;
  _BYTE v9[8];
  unsigned __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return *(_WORD *)(a2 + 8) & 1;
  v8 = *(_QWORD *)(a1 + 56);
  icu::UnicodeString::UnicodeString(v9, 1, &v8);
  if ((v10 & 1) != 0)
  {
    v6 = (void *)*(unsigned __int16 *)(a2 + 8);
    v3 = v6 & 1;
  }
  else
  {
    v3 = 0;
    if ((v10 & 0x8000u) == 0)
      v4 = v10 >> 5;
    else
      v4 = v11;
    v5 = *(unsigned __int16 *)(a2 + 8);
    if ((v5 & 0x8000u) == 0)
      v6 = (void *)(v5 >> 5);
    else
      v6 = (void *)*(unsigned int *)(a2 + 12);
    if ((v5 & 1) == 0 && v4 == (_DWORD)v6)
      v3 = icu::UnicodeString::doEquals((icu::UnicodeString *)v9, (const icu::UnicodeString *)a2, v4);
  }
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)v9);
  return v3;
}

uint64_t sub_18BD317C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2) & 1) != 0)
    return 1;
  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a2);
  return result;
}

uint64_t sub_18BD3182C(uint64_t a1, uint64_t a2)
{
  icu::UnicodeString *v4;
  uint64_t result;
  void *v6;
  void *v7;
  uint64_t v8;
  void (**v9)(icu::UnicodeString *__hidden);
  __int16 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = (icu::UnicodeString *)(a2 + 80);
  result = sub_18BD316D0(*(_QWORD *)(a1 + 8), a2 + 80);
  if ((_DWORD)result)
  {
    result = sub_18BD316D0(*(_QWORD *)(a1 + 16), a2 + 144);
    if ((_DWORD)result)
    {
      if ((*(_WORD *)(a2 + 88) & 1) != 0)
      {
        v9 = off_1E2256B38;
        v10 = 2;
        icu::UnicodeString::operator=(v4, (icu::UnicodeString *)&v9);
        icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v9);
      }
      if ((*(_WORD *)(a2 + 152) & 1) != 0)
      {
        v9 = off_1E2256B38;
        v10 = 2;
        icu::UnicodeString::operator=((icu::UnicodeString *)(a2 + 144), (icu::UnicodeString *)&v9);
        icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)&v9);
      }
      *(_DWORD *)(a2 + 76) |= *(_DWORD *)(a1 + 24);
      v8 = *(_QWORD *)(a1 + 8);
      if (v8)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a2);
      result = *(_QWORD *)(a1 + 16);
      if (result)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2);
    }
  }
  return result;
}

uint64_t sub_18BD31958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[8];
  unsigned __int16 v5;
  unsigned int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v3 = *(_QWORD *)(a1 + 56);
  icu::UnicodeString::UnicodeString(v4, 1, &v3);
  if ((v5 & 0x8000u) == 0)
    v1 = v5 >> 5;
  else
    v1 = v6;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)v4);
  return v1;
}

void *sub_18BD319FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  _BYTE v19[64];
  _BYTE v20[64];
  _BYTE v21[64];
  _BYTE v22[64];
  _BYTE v23[64];
  _BYTE v24[64];
  _BYTE v25[64];
  _BYTE v26[64];
  _BYTE v27[64];
  _QWORD v28[9];

  v28[8] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 24);
  icu::UnicodeString::UnicodeString((uint64_t)v24, (uint64_t)L"<Affix");
  if ((v4 & 1) != 0)
    v5 = ":";
  else
    v5 = " ";
  icu::UnicodeString::UnicodeString((uint64_t)v23, (uint64_t)v5);
  icu::operator+((uint64_t)v24, (uint64_t)v23, (uint64_t)v25);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v28[0] = *(_QWORD *)(v6 + 56);
    icu::UnicodeString::UnicodeString(v22, 1, v28);
  }
  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v22, (uint64_t)L"null");
  }
  icu::operator+((uint64_t)v25, (uint64_t)v22, (uint64_t)v26);
  icu::UnicodeString::UnicodeString((uint64_t)v21, (uint64_t)"#");
  icu::operator+((uint64_t)v26, (uint64_t)v21, (uint64_t)v27);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v28[0] = *(_QWORD *)(v7 + 56);
    icu::UnicodeString::UnicodeString(v20, 1, v28);
  }
  else
  {
    icu::UnicodeString::UnicodeString((uint64_t)v20, (uint64_t)L"null");
  }
  icu::operator+((uint64_t)v27, (uint64_t)v20, (uint64_t)v28);
  icu::UnicodeString::UnicodeString((uint64_t)v19, (uint64_t)">");
  icu::operator+((uint64_t)v28, (uint64_t)v19, a2);
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)v19);
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)v28);
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v20);
  icu::UnicodeString::~UnicodeString(v11, (icu::UnicodeString *)v27);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)v21);
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)v26);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v22);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)v25);
  icu::UnicodeString::~UnicodeString(v16, (icu::UnicodeString *)v23);
  return icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)v24);
}

void sub_18BD31BD4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E2263BE0;
  *(_QWORD *)(a1 + 8) = &unk_1E2263C10;
  if (*(_BYTE *)(a1 + 28))
    uprv_free(*(void **)(a1 + 16));
  nullsub_17(a1);
  JUMPOUT(0x18D77FE8CLL);
}

uint64_t sub_18BD31C28(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 - 8) = &off_1E2263BE0;
  v1 = a1 - 8;
  *(_QWORD *)a1 = &unk_1E2263C10;
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  return nullsub_17(v1);
}

void sub_18BD31C6C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 - 8) = &off_1E2263BE0;
  v1 = a1 - 8;
  *(_QWORD *)a1 = &unk_1E2263C10;
  if (*(_BYTE *)(a1 + 20))
    uprv_free(*(void **)(a1 + 8));
  nullsub_17(v1);
  JUMPOUT(0x18D77FE8CLL);
}

void sub_18BD31CC8(icu::numparse::impl::NumberParseMatcher *a1)
{
  void *v1;

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD31CDC()
{
  return 0;
}

void sub_18BD31CE8(icu::numparse::impl::NumberParseMatcher *a1)
{
  void *v1;

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD31CFC(void **this)
{
  *this = &unk_1E2263C80;
  if (*((_BYTE *)this + 68))
    uprv_free(this[7]);
  *this = &off_1E2263DF8;
  if (*((_BYTE *)this + 20))
    uprv_free(this[1]);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
  JUMPOUT(0x18D77FE8CLL);
}

uint64_t sub_18BD31D70(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)result = off_1E2263F00;
  *(_QWORD *)(result + 16) = off_1E2256B38;
  *(_WORD *)(result + 24) = 2;
  *(_QWORD *)(result + 80) = off_1E2256B38;
  *(_WORD *)(result + 88) = 2;
  v1 = 152;
  do
  {
    v2 = result + v1;
    *(_QWORD *)v2 = off_1E2256B38;
    *(_WORD *)(v2 + 8) = 2;
    v1 += 64;
  }
  while (v2 + 64 != result + 664);
  *(_QWORD *)(result + 664) = off_1E2256B38;
  *(_WORD *)(result + 672) = 2;
  *(_QWORD *)(result + 728) = off_1E2256B38;
  *(_WORD *)(result + 736) = 2;
  *(_QWORD *)(result + 792) = result + 805;
  *(_DWORD *)(result + 800) = 40;
  *(_WORD *)(result + 804) = 0;
  *(_DWORD *)(result + 848) = 0;
  return result;
}

void **sub_18BD31DFC(void **a1, uint64_t a2, int *a3)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  const void *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = *(unsigned __int16 *)(a2 + 8);
  v7 = (__int16)v6;
  v8 = v6 >> 5;
  if (v7 < 0)
    v8 = *(_DWORD *)(a2 + 12);
  sub_18BD31EC4((uint64_t)a1, v8 + 1, *a3);
  if (*a3 <= 0)
  {
    v9 = *(unsigned __int16 *)(a2 + 8);
    if ((v9 & 0x11) != 0)
    {
      v10 = 0;
    }
    else if ((v9 & 2) != 0)
    {
      v10 = (const void *)(a2 + 10);
    }
    else
    {
      v10 = *(const void **)(a2 + 24);
    }
    v11 = (__int16)v9;
    v12 = v9 >> 5;
    if (v11 < 0)
      v12 = *(_DWORD *)(a2 + 12);
    memcpy(*a1, v10, 2 * (int)v12);
    v13 = *(unsigned __int16 *)(a2 + 8);
    v14 = (__int16)v13;
    v15 = v13 >> 5;
    if (v14 < 0)
      v15 = *(_DWORD *)(a2 + 12);
    *((_WORD *)*a1 + (int)v15) = 0;
  }
  return a1;
}

uint64_t sub_18BD31EC4(uint64_t a1, int a2, int a3)
{
  void *v5;
  void *v6;

  *(_QWORD *)a1 = a1 + 14;
  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  if (a2 >= 5 && a3 <= 0)
  {
    v5 = uprv_malloc(2 * a2);
    if (v5)
    {
      v6 = v5;
      if (*(_BYTE *)(a1 + 12))
        uprv_free(*(void **)a1);
      *(_QWORD *)a1 = v6;
      *(_DWORD *)(a1 + 8) = a2;
      *(_BYTE *)(a1 + 12) = 1;
    }
  }
  return a1;
}

BOOL icu::numparse::impl::SeriesMatcher::match(icu::numparse::impl::SeriesMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  int Offset;
  uint64_t *v9;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _BOOL8 v19;
  void *v20;
  int v22;
  _OWORD v23[5];
  _OWORD v24[4];
  _OWORD v25[4];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  sub_18BD32490(v23, (uint64_t)a3);
  Offset = icu::StringSegment::getOffset(a2);
  v9 = (uint64_t *)(*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(_QWORD *)this + 56))(this);
  if ((unint64_t)v9 >= (*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(_QWORD *)this + 64))(this))
  {
    v19 = 1;
    goto LABEL_20;
  }
  v22 = Offset;
  while (1)
  {
    v11 = *v9;
    v12 = icu::StringSegment::getOffset(a2);
    if (icu::StringSegment::length(v13, a2))
      v14 = (*(uint64_t (**)(uint64_t, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, UErrorCode *))(*(_QWORD *)v11 + 24))(v11, a2, a3, a4);
    else
      v14 = 1;
    v15 = icu::StringSegment::getOffset(a2);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    if (v15 != v12 && (v16 & 1) != 0)
      goto LABEL_15;
    if (v15 != v12)
    {
      if ((unint64_t)++v9 < (*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(_QWORD *)this + 64))(this))
      {
        v17 = icu::StringSegment::getOffset(a2);
        v18 = *((_DWORD *)a3 + 18);
        if (v17 != v18 && v18 > v12)
          icu::StringSegment::setOffset((uint64_t)a2, v18);
      }
      goto LABEL_15;
    }
    if (!v16)
      break;
    ++v9;
LABEL_15:
    if ((unint64_t)v9 >= (*(uint64_t (**)(icu::numparse::impl::SeriesMatcher *))(*(_QWORD *)this + 64))(this))
      goto LABEL_19;
  }
  icu::StringSegment::setOffset((uint64_t)a2, v22);
  sub_18BD32150((uint64_t)a3, (uint64_t)v23);
LABEL_19:
  v19 = v14 != 0;
LABEL_20:
  icu::UnicodeString::~UnicodeString(v10, (icu::UnicodeString *)v25);
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
  icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
  return v19;
}

uint64_t sub_18BD32150(uint64_t a1, uint64_t a2)
{
  icu::number::impl::DecimalQuantity::operator=((icu::number::impl::DecimalQuantity *)a1, a2);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  icu::UnicodeString::operator=((UChar **)(a1 + 80), (UChar **)(a2 + 80));
  icu::UnicodeString::operator=((UChar **)(a1 + 144), (UChar **)(a2 + 144));
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return a1;
}

uint64_t icu::numparse::impl::SeriesMatcher::smokeTest(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (v4 == (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1))
    return 0;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v4 + 32))(*v4, a2);
}

uint64_t icu::numparse::impl::SeriesMatcher::postProcess(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;

  v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (v4 != (uint64_t *)result)
  {
    v6 = (uint64_t *)result;
    do
    {
      v7 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, a2);
    }
    while (v4 != v6);
  }
  return result;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(uint64_t this)
{
  *(_QWORD *)this = &off_1E2263DF8;
  *(_QWORD *)(this + 8) = this + 24;
  *(_DWORD *)(this + 16) = 3;
  *(_BYTE *)(this + 20) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E2263DF8;
  *(_QWORD *)(this + 8) = this + 24;
  *(_DWORD *)(this + 16) = 3;
  *(_BYTE *)(this + 20) = 0;
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(uint64_t a1, uint64_t a2, int a3)
{
  const void *v5;
  const void *v6;

  v5 = *(const void **)a2;
  *(_QWORD *)a1 = &off_1E2263DF8;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 12);
  v6 = *(const void **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    *(_QWORD *)(a1 + 8) = a1 + 24;
    memcpy((void *)(a1 + 24), v6, 8 * *(int *)(a2 + 8));
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 8) = 3;
    *(_BYTE *)(a2 + 12) = 0;
  }
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

{
  const void *v5;
  const void *v6;

  v5 = *(const void **)a2;
  *(_QWORD *)a1 = &off_1E2263DF8;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 12);
  v6 = *(const void **)a2;
  if (*(_QWORD *)a2 == a2 + 16)
  {
    *(_QWORD *)(a1 + 8) = a1 + 24;
    memcpy((void *)(a1 + 24), v6, 8 * *(int *)(a2 + 8));
  }
  else
  {
    *(_QWORD *)a2 = a2 + 16;
    *(_DWORD *)(a2 + 8) = 3;
    *(_BYTE *)(a2 + 12) = 0;
  }
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::length(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::begin(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::end(icu::numparse::impl::ArraySeriesMatcher *this)
{
  return *((_QWORD *)this + 1) + 8 * *((int *)this + 12);
}

uint64_t icu::numparse::impl::ArraySeriesMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18BD32404(void **this)
{
  *this = &off_1E2263DF8;
  if (*((_BYTE *)this + 20))
    uprv_free(this[1]);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
}

void sub_18BD32440(void **this)
{
  *this = &off_1E2263DF8;
  if (*((_BYTE *)this + 20))
    uprv_free(this[1]);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)this);
  JUMPOUT(0x18D77FE8CLL);
}

_QWORD *sub_18BD32490(_QWORD *a1, uint64_t a2)
{
  icu::number::impl::DecimalQuantity *v4;

  v4 = icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)a1, a2);
  *((_QWORD *)v4 + 9) = *(_QWORD *)(a2 + 72);
  icu::UnicodeString::UnicodeString((icu::number::impl::DecimalQuantity *)((char *)v4 + 80), (UChar **)(a2 + 80));
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 18), (UChar **)(a2 + 144));
  a1[26] = *(_QWORD *)(a2 + 208);
  return a1;
}

icu::numparse::impl::CombinedCurrencyMatcher *icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher(icu::numparse::impl::CombinedCurrencyMatcher *this, UChar **a2, const icu::DecimalFormatSymbols *a3, __int16 a4, UErrorCode *a5)
{
  uint64_t v10;
  char *v11;
  UChar **PatternForCurrencySpacing;
  UChar **v13;
  char *v14;
  uint64_t IsoCode;
  __int16 v16;
  uint64_t v17;
  icu::UnicodeString *v18;
  void *v19;
  _BYTE v21[40];
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = off_1E2263F00;
  icu::number::impl::CurrencySymbols::getCurrencySymbol(a2, a5, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 16));
  icu::number::impl::CurrencySymbols::getIntlCurrencySymbol(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 80));
  *((_BYTE *)this + 144) = (a4 & 0x2000) == 0;
  v10 = 152;
  do
  {
    v11 = (char *)this + v10;
    *(_QWORD *)v11 = off_1E2256B38;
    *((_WORD *)v11 + 4) = 2;
    v10 += 64;
  }
  while (v11 + 64 != (char *)this + 664);
  PatternForCurrencySpacing = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a3, 2, 0, (int *)a5);
  icu::UnicodeString::UnicodeString((icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 664), PatternForCurrencySpacing);
  v13 = (UChar **)icu::DecimalFormatSymbols::getPatternForCurrencySpacing((uint64_t)a3, 2, 1, (int *)a5);
  icu::UnicodeString::UnicodeString((icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 728), v13);
  icu::Locale::Locale((icu::Locale *)v21, (uint64_t)a3 + 1936);
  v14 = v22;
  *((_QWORD *)this + 99) = (char *)this + 805;
  *((_DWORD *)this + 200) = 40;
  *((_WORD *)this + 402) = 0;
  *((_DWORD *)this + 212) = 0;
  icu::CharString::append((icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 792), v14, -1, a5);
  icu::Locale::~Locale((icu::Locale *)v21);
  IsoCode = icu::number::impl::CurrencySymbols::getIsoCode((icu::number::impl::CurrencySymbols *)a2);
  v16 = *(_WORD *)(IsoCode + 4);
  *((_DWORD *)this + 2) = *(_DWORD *)IsoCode;
  *((_WORD *)this + 6) = v16;
  *((_WORD *)this + 7) = 0;
  if (!*((_BYTE *)this + 144))
  {
    v17 = 0;
    v18 = (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 152);
    do
    {
      icu::number::impl::CurrencySymbols::getPluralName((uint64_t)a2, v17, (int *)a5, (uint64_t)v21);
      icu::UnicodeString::operator=(v18, (icu::UnicodeString *)v21);
      icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v21);
      ++v17;
      v18 = (icu::UnicodeString *)((char *)v18 + 64);
    }
    while (v17 != 8);
  }
  return this;
}

BOOL icu::numparse::impl::CombinedCurrencyMatcher::match(icu::numparse::impl::CombinedCurrencyMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  uint64_t matched;
  int Offset;
  int CommonPrefixLength;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t *v18;

  if (*((_WORD *)a3 + 104))
    return 0;
  Offset = icu::StringSegment::getOffset(a2);
  if (!icu::numparse::impl::ParsedNumber::seenNumber(a3) || *((unsigned __int16 *)this + 368) < 0x20u)
    goto LABEL_13;
  CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 728));
  v12 = CommonPrefixLength;
  v13 = *((unsigned __int16 *)this + 368);
  if ((v13 & 0x8000) != 0)
    v14 = (uint64_t *)*((unsigned int *)this + 185);
  else
    v14 = (uint64_t *)(v13 >> 5);
  if (CommonPrefixLength == (_DWORD)v14)
    icu::StringSegment::adjustOffset((uint64_t)a2, CommonPrefixLength);
  if (v12 == icu::StringSegment::length(v14, a2))
    matched = 1;
  else
LABEL_13:
    matched = icu::numparse::impl::CombinedCurrencyMatcher::matchCurrency(this, a2, a3, a4);
  if (*((_WORD *)a3 + 104))
  {
    if ((icu::numparse::impl::ParsedNumber::seenNumber(a3) & 1) == 0 && *((unsigned __int16 *)this + 336) >= 0x20u)
    {
      v15 = icu::StringSegment::getCommonPrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 664));
      v16 = v15;
      v17 = *((unsigned __int16 *)this + 336);
      if ((v17 & 0x8000) != 0)
        v18 = (uint64_t *)*((unsigned int *)this + 169);
      else
        v18 = (uint64_t *)(v17 >> 5);
      if (v15 == (_DWORD)v18)
        icu::StringSegment::adjustOffset((uint64_t)a2, v15);
      return (matched & 1) != 0 || v16 == icu::StringSegment::length(v18, a2);
    }
  }
  else
  {
    icu::StringSegment::setOffset((uint64_t)a2, Offset);
  }
  return matched;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::matchCurrency(icu::numparse::impl::CombinedCurrencyMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  uint64_t *v8;
  int CaseSensitivePrefixLength;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  icu::StringSegment *v15;
  int v16;
  uint64_t *v17;
  int CommonPrefixLength;
  int v19;
  int v20;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  _BOOL4 v28;
  int v30;
  int v31;
  void *v32;
  int v33;
  void (**v34)(icu::ParsePosition *__hidden);
  int v35[2];
  _OWORD v36[4];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)*((unsigned __int16 *)this + 12);
  if (v8 < 0x20)
    CaseSensitivePrefixLength = -1;
  else
    CaseSensitivePrefixLength = icu::StringSegment::getCaseSensitivePrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 16));
  v10 = icu::StringSegment::length(v8, a2);
  v11 = CaseSensitivePrefixLength == v10;
  v12 = *((unsigned __int16 *)this + 12);
  if ((v12 & 0x8000) != 0)
    v13 = *((_DWORD *)this + 7);
  else
    v13 = v12 >> 5;
  if (CaseSensitivePrefixLength == v13)
  {
    v14 = *((_DWORD *)this + 2);
    *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
    *((_DWORD *)a3 + 52) = v14;
    *((_WORD *)a3 + 107) = 0;
    v15 = a2;
    v16 = CaseSensitivePrefixLength;
LABEL_20:
    icu::StringSegment::adjustOffset((uint64_t)v15, v16);
    icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
    return v11 & 1;
  }
  v17 = (uint64_t *)*((unsigned __int16 *)this + 44);
  if (v17 < 0x20)
    CommonPrefixLength = -1;
  else
    CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + 80));
  v11 = CaseSensitivePrefixLength == v10 || CommonPrefixLength == icu::StringSegment::length(v17, a2);
  if (*((__int16 *)this + 44) < 0)
    v19 = *((_DWORD *)this + 23);
  else
    v19 = *((unsigned __int16 *)this + 44) >> 5;
  if (CommonPrefixLength == v19)
  {
    v20 = *((_DWORD *)this + 2);
    *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
    *((_DWORD *)a3 + 52) = v20;
    *((_WORD *)a3 + 107) = 0;
    v15 = a2;
    v16 = CommonPrefixLength;
    goto LABEL_20;
  }
  if (*((_BYTE *)this + 144))
  {
    memset(v36, 0, sizeof(v36));
    icu::StringSegment::toTempUnicodeString(a2, (uint64_t)v36);
    v34 = off_1E224A8B0;
    *(_QWORD *)v35 = 0xFFFFFFFF00000000;
    v33 = 0;
    uprv_parseCurrency(*((char **)this + 99), (uint64_t)v36, (uint64_t)&v34, 0, &v33, (UChar *)a3 + 104, (int *)a4);
    if ((v11 & 1) != 0)
    {
      v11 = 1;
    }
    else
    {
      v31 = v33;
      v11 = v31 == icu::StringSegment::length(v22, a2);
    }
    if (*(int *)a4 <= 0 && v35[0])
    {
      icu::StringSegment::adjustOffset((uint64_t)a2, v35[0]);
      icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
    }
    icu::ParsePosition::~ParsePosition((icu::ParsePosition *)&v34);
    icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)v36);
  }
  else
  {
    v23 = 0;
    v24 = 0;
    do
    {
      v25 = icu::StringSegment::getCommonPrefixLength(a2, (icu::numparse::impl::CombinedCurrencyMatcher *)((char *)this + v23 + 152));
      v26 = *(unsigned __int16 *)((char *)this + v23 + 160);
      if ((v26 & 0x8000) != 0)
        v28 = v25 == *(_DWORD *)((char *)this + v23 + 164) && v25 > v24;
      else
        v28 = v25 == v26 >> 5 && v24 < v25;
      if (v28)
        v24 = v25;
      v11 |= v25 > 0;
      v23 += 64;
    }
    while (v23 != 512);
    if (v24 >= 1)
    {
      v30 = *((_DWORD *)this + 2);
      *((_WORD *)a3 + 106) = *((_WORD *)this + 6);
      *((_DWORD *)a3 + 52) = v30;
      *((_WORD *)a3 + 107) = 0;
      v15 = a2;
      v16 = v24;
      goto LABEL_20;
    }
  }
  return v11 & 1;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::smokeTest()
{
  return 1;
}

uint64_t icu::numparse::impl::CombinedCurrencyMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18BD32AE0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t i;
  void *v6;

  *(_QWORD *)a1 = off_1E2263F00;
  v2 = (void *)*(unsigned __int8 *)(a1 + 804);
  if (*(_BYTE *)(a1 + 804))
    uprv_free(*(void **)(a1 + 792));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 728));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 664));
  for (i = 600; i != 88; i -= 64)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 16));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD32B54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t i;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = off_1E2263F00;
  v2 = (void *)*(unsigned __int8 *)(a1 + 804);
  if (*(_BYTE *)(a1 + 804))
    uprv_free(*(void **)(a1 + 792));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 728));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 664));
  for (i = 600; i != 88; i -= 64)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 16));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v7);
}

uint64_t sub_18BD32BCC(uint64_t a1, uint64_t a2, icu::number::impl::Grouper *a3, char a4)
{
  UChar **v8;
  UChar **v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  void *v14;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19;
  unint64_t v20;
  uint64_t *v21;
  icu::UnicodeSet *v22;
  uint64_t *v23;
  icu::UnicodeSet *v24;
  unsigned int v25;
  void *v26;
  unint64_t v27;
  uint64_t *v28;
  icu::UnicodeSet *v29;
  icu::UVector **v30;
  void *v31;
  UChar32 v32;
  _OWORD *v33;
  char *v34;
  _OWORD *v35;
  uint64_t v36;
  UChar **v37;
  uint64_t v38;
  UChar **v39;
  UChar *v41[9];

  v41[8] = *(UChar **)MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E2263F80;
  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  v8 = (UChar **)(a1 + 16);
  *(_WORD *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 80) = off_1E2256B38;
  *(_WORD *)(a1 + 88) = 2;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  if ((a4 & 2) != 0)
  {
    icu::UnicodeString::operator=(v8, (UChar **)(a2 + 1096));
    v9 = (UChar **)(a2 + 648);
  }
  else
  {
    v9 = (UChar **)(a2 + 8);
    icu::UnicodeString::operator=(v8, (UChar **)(a2 + 72));
  }
  icu::UnicodeString::operator=((UChar **)(a1 + 80), v9);
  if ((a4 & 4) != 0)
    v10 = 10;
  else
    v10 = 9;
  if ((a4 & 4) != 0)
    v11 = 5;
  else
    v11 = 3;
  if ((a4 & 4) != 0)
    v12 = 6;
  else
    v12 = 4;
  *(_QWORD *)(a1 + 144) = icu::unisets::get(v10);
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)v41, (UChar **)(a1 + 80));
  v13 = icu::unisets::chooseFrom(v41, v11, v12);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)v41);
  if (v13 < 0)
  {
    v21 = (uint64_t *)*(unsigned __int16 *)(a1 + 88);
    if (v21 < 0x20)
    {
      *(_QWORD *)(a1 + 152) = icu::unisets::get(0);
    }
    else
    {
      v22 = (icu::UnicodeSet *)icu::UMemory::operator new(v21, (icu::UMemory *)0xC8, v15);
      v24 = v22;
      if (v22)
        icu::UnicodeSet::UnicodeSet(v22);
      v25 = icu::UnicodeString::char32At(v23, (icu::UnicodeString *)(a1 + 80), 0);
      icu::UnicodeSet::add(v24, v25);
      icu::UnicodeSet::freeze(v24);
      *(_QWORD *)(a1 + 152) = v24;
      sub_18BD32ED0((icu::UnicodeSet **)(a1 + 176), v24, v26);
    }
    v29 = (icu::UnicodeSet *)icu::UMemory::operator new(v28, (icu::UMemory *)0xC8, v27);
    v30 = (icu::UVector **)v29;
    if (v29)
      icu::UnicodeSet::UnicodeSet(v29);
    icu::UnicodeSet::addAll(v30, *(const icu::UnicodeSet **)(a1 + 144));
    icu::UnicodeSet::addAll(v30, *(const icu::UnicodeSet **)(a1 + 152));
    icu::UnicodeSet::freeze((icu::UnicodeSet *)v30);
    *(_QWORD *)(a1 + 160) = v30;
    sub_18BD32ED0((icu::UnicodeSet **)(a1 + 184), (icu::UnicodeSet *)v30, v31);
    v19 = 0;
  }
  else
  {
    v16 = icu::unisets::get(v13);
    v17 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 152) = v16;
    *(_QWORD *)(a1 + 160) = v17;
    if ((a4 & 4) != 0)
      v18 = 22;
    else
      v18 = 23;
    v19 = icu::unisets::get(v18);
  }
  *(_QWORD *)(a1 + 168) = v19;
  v32 = *(_DWORD *)(a2 + 1928);
  if (v32 == -1 || !u_isdigit(*(_DWORD *)(a2 + 1928)) || u_digit(v32, 10))
  {
    v33 = (_OWORD *)icu::UMemory::operator new[]((icu::UMemory *)0x290, v20);
    if (v33)
    {
      *v33 = xmmword_18BE25AA0;
      v34 = (char *)(v33 + 1);
      v35 = v33 + 1;
      do
      {
        *(_QWORD *)v35 = off_1E2256B38;
        *((_WORD *)v35 + 4) = 2;
        v35 += 4;
      }
      while (v35 != v33 + 41);
    }
    else
    {
      v34 = 0;
    }
    sub_18BD1C090((void **)(a1 + 192), v34);
    v36 = 0;
    v37 = (UChar **)(a2 + 264);
    v38 = a2 + 1096;
    do
    {
      if (v36)
        v39 = (UChar **)(v38 + v36);
      else
        v39 = v37;
      icu::UnicodeString::operator=((UChar **)&v34[v36], v39);
      v36 += 64;
    }
    while (v36 != 640);
  }
  *(_BYTE *)(a1 + 8) = (a4 & 8) != 0;
  *(_BYTE *)(a1 + 9) = (a4 & 0x20) != 0;
  *(_BYTE *)(a1 + 10) = (a4 & 0x10) != 0;
  *(_WORD *)(a1 + 12) = icu::number::impl::Grouper::getPrimary(a3);
  *(_WORD *)(a1 + 14) = icu::number::impl::Grouper::getSecondary(a3);
  return a1;
}

void sub_18BD32ED0(icu::UnicodeSet **a1@<X0>, icu::UnicodeSet *a2@<X1>, void *a3@<X8>)
{
  icu::UnicodeSet *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    v6 = icu::UnicodeSet::~UnicodeSet(a3, v5);
    icu::UMemory::operator delete(v6);
  }
  *a1 = a2;
}

uint64_t sub_18BD32F08(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  return sub_18BD32F10(a1, a2, a3, 0);
}

uint64_t sub_18BD32F10(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, int a4)
{
  icu::numparse::impl::ParsedNumber *v5;
  char v8;
  uint64_t v9;
  int Offset;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int CodePoint;
  int v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  _WORD *v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  int CommonPrefixLength;
  uint64_t v30;
  int v31;
  int v32;
  char v33;
  uint64_t *v34;
  int v35;
  BOOL v36;
  int v37;
  uint64_t *v38;
  int v39;
  int v40;
  int v41;
  void *v42;
  void *v43;
  int v44;
  int v45;
  int v46;
  char v47;
  uint64_t v48;
  _BOOL4 v49;
  _BOOL4 v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  _BOOL4 v58;
  char v59;
  int v60;
  uint64_t v61;
  int v62;
  _BOOL4 v63;
  void *v64;
  uint64_t *v65;
  void *v66;
  uint64_t v68;
  int v69;
  int v70;
  icu::numparse::impl::ParsedNumber *v71;
  icu::UnicodeString *v72;
  UChar **v73;
  int v74;
  unsigned int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v79;
  _OWORD v80[4];
  uint64_t v81;
  _BYTE v82[64];
  UChar *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  UChar *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;

  v5 = this;
  v93 = *MEMORY[0x1E0C80C00];
  v8 = icu::numparse::impl::ParsedNumber::seenNumber(this);
  if (a4 || (v8 & 1) == 0)
  {
    Offset = icu::StringSegment::getOffset(a2);
    v81 = 0;
    memset(v80, 0, sizeof(v80));
    icu::number::impl::DecimalQuantity::DecimalQuantity((icu::number::impl::DecimalQuantity *)v80);
    BYTE8(v80[0]) = 1;
    v89 = 0u;
    v92 = 0;
    v91 = 0u;
    v90 = 0u;
    v88 = (UChar *)off_1E2256B38;
    LOWORD(v89) = 2;
    v84 = 0u;
    v87 = 0;
    v86 = 0u;
    v85 = 0u;
    v83 = (UChar *)off_1E2256B38;
    LOWORD(v84) = 2;
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v88);
    icu::UnicodeString::setToBogus((icu::UnicodeString *)&v83);
    if ((int)icu::StringSegment::length(v11, a2) < 1)
    {
      v75 = 0;
      v79 = 0;
      v56 = 0;
      v44 = 0;
      v12 = 0;
      v57 = -1;
      v45 = -1;
      v46 = -1;
      goto LABEL_152;
    }
    v69 = Offset;
    v70 = a4;
    v12 = 0;
    v13 = 0;
    v73 = (UChar **)(a1 + 80);
    v71 = v5;
    v72 = (icu::UnicodeString *)(a1 + 16);
    v77 = 0;
    v78 = -1;
    v75 = 0;
    v76 = -1;
    v74 = -1;
LABEL_6:
    v14 = v13;
    v15 = v12;
    CodePoint = icu::StringSegment::getCodePoint(a2);
    if (u_isdigit(CodePoint))
    {
      v17 = CodePoint < 0x10000 ? 1 : 2;
      icu::StringSegment::adjustOffset((uint64_t)a2, v17);
      v18 = u_digit(CodePoint, 10);
      if (v18 != -1)
      {
        v19 = 0;
        if ((v18 & 0x80) == 0)
        {
          LOBYTE(v20) = v18;
          goto LABEL_43;
        }
        v79 = v14;
LABEL_38:
        if ((v84 & 1) != 0
          && *(unsigned __int16 *)(a1 + 88) >= 0x20u
          && ((CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)v73), v19)
            ? (v19 = 1)
            : (v19 = CommonPrefixLength == icu::StringSegment::length(v28, a2)),
              *(__int16 *)(a1 + 88) < 0 ? (v31 = *(_DWORD *)(a1 + 92)) : (v31 = *(unsigned __int16 *)(a1 + 88) >> 5),
              CommonPrefixLength == v31))
        {
          icu::UnicodeString::operator=(&v83, v73);
          v32 = 1;
        }
        else
        {
          v32 = 0;
        }
        v33 = v89;
        if ((v89 & 1) != 0)
        {
          v36 = 0;
        }
        else
        {
          v35 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)&v88);
          v19 = v19 || v35 == icu::StringSegment::length(v34, a2);
          v33 = v89;
          if ((v89 & 0x8000u) == 0)
            v37 = (unsigned __int16)v89 >> 5;
          else
            v37 = DWORD1(v89);
          v36 = v35 == v37;
        }
        if (!*(_BYTE *)(a1 + 9) && (v33 & 1) != 0 && (v84 & 1) != 0 && *(unsigned __int16 *)(a1 + 24) >= 0x20u)
        {
          v39 = icu::StringSegment::getCommonPrefixLength(a2, v72);
          v19 = v19 || v39 == icu::StringSegment::length(v38, a2);
          v40 = *(__int16 *)(a1 + 24) < 0 ? *(_DWORD *)(a1 + 28) : *(unsigned __int16 *)(a1 + 24) >> 5;
          if (v39 == v40)
          {
            icu::UnicodeString::operator=(&v88, (UChar **)v72);
            goto LABEL_78;
          }
        }
        if (v36)
        {
LABEL_78:
          v41 = 1;
        }
        else if ((v84 & 1) != 0 && icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 152), CodePoint))
        {
          icu::UnicodeString::UnicodeString((uint64_t)v82, CodePoint);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v83, (icu::UnicodeString *)v82);
          icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)v82);
          v41 = 0;
          v32 = 1;
        }
        else
        {
          v41 = 0;
        }
        if (!*(_BYTE *)(a1 + 9)
          && (v89 & 1) != 0
          && (v84 & 1) != 0
          && icu::UnicodeSet::contains(*(icu::UnicodeSet **)(a1 + 144), CodePoint))
        {
          icu::UnicodeString::UnicodeString((uint64_t)v82, CodePoint);
          icu::UnicodeString::operator=((icu::UnicodeString *)&v88, (icu::UnicodeString *)v82);
          icu::UnicodeString::~UnicodeString(v43, (icu::UnicodeString *)v82);
          v41 = 1;
          v45 = v76;
          v44 = v77;
          goto LABEL_89;
        }
        v45 = v76;
        v44 = v77;
        if ((v41 | v32) == 1)
        {
LABEL_89:
          v46 = v78;
          if (!v32 || !*(_BYTE *)(a1 + 10))
          {
            if (v44 == 2)
              v47 = v41;
            else
              v47 = 0;
            if ((v47 & 1) != 0)
            {
              v44 = 2;
            }
            else
            {
              if (*(_BYTE *)(a1 + 8))
              {
                v48 = v79;
                if (v45 == 1)
                {
                  v49 = v78 == *(__int16 *)(a1 + 14);
                }
                else if (v45)
                {
                  v49 = 1;
                }
                else
                {
                  v49 = v78 <= *(__int16 *)(a1 + 14);
                }
                v52 = v44 != 1 || v15 == *(__int16 *)(a1 + 12);
              }
              else
              {
                v49 = v45 != 1 || v78 != 1;
                v52 = v44 != 1 || v15 != 1;
                v48 = v79;
              }
              if (v49 && ((v32 ^ 1 | v52) & 1) != 0)
              {
                if (!*(_BYTE *)(a1 + 8) || v15 || v44 != 1)
                {
                  if (v32)
                    v53 = -1;
                  else
                    v53 = v44;
                  v76 = v53;
                  v13 = v48;
                  if (v15)
                    v13 = icu::StringSegment::getOffset(a2);
                  if (v41)
                  {
                    if ((v89 & 0x8000u) == 0)
                      v54 = (unsigned __int16)v89 >> 5;
                    else
                      v54 = DWORD1(v89);
                    icu::StringSegment::adjustOffset((uint64_t)a2, v54);
                    v12 = 0;
                    v30 = 1;
                  }
                  else
                  {
                    if ((v84 & 0x8000u) == 0)
                      v55 = (unsigned __int16)v84 >> 5;
                    else
                      v55 = DWORD1(v84);
                    icu::StringSegment::adjustOffset((uint64_t)a2, v55);
                    v12 = 0;
                    v30 = 2;
                  }
                  v77 = v30;
                  v78 = v15;
                  v74 = v48;
                  goto LABEL_137;
                }
                v79 = v48;
                v15 = 0;
              }
              else
              {
                v58 = v15 == 0;
                v59 = v41 & v58;
                if ((v41 & v58) != 0)
                  v60 = 0;
                else
                  v60 = v15;
                v79 = v48;
                if ((v59 & 1) != 0 || !*(_BYTE *)(a1 + 8))
                {
                  v15 = v60;
                }
                else
                {
                  icu::number::impl::DecimalQuantity::clear((void **)v80);
                  v46 = v78;
                  BYTE8(v80[0]) = 1;
                }
              }
            }
          }
        }
        else
        {
          v46 = v78;
        }
        v56 = v19;
        v12 = v15;
        v5 = v71;
        Offset = v69;
        a4 = v70;
LABEL_151:
        v57 = v74;
LABEL_152:
        if (v44 != 2 && !v12)
        {
          v12 = v46;
          icu::StringSegment::setOffset((uint64_t)a2, v79);
          v56 = 1;
          v79 = v57;
          v44 = v45;
          v57 = -1;
          v46 = 1;
          v45 = 0;
        }
        if (*(_BYTE *)(a1 + 8))
        {
          if (v45 == 1)
          {
            v61 = v46 == *(__int16 *)(a1 + 14);
          }
          else if (v45)
          {
            v61 = 1;
          }
          else
          {
            v61 = v46 <= *(__int16 *)(a1 + 14);
          }
          if (v44 == 1)
          {
            v63 = v12 != *(__int16 *)(a1 + 12);
            if (!(_DWORD)v61)
            {
LABEL_180:
              v9 = 1;
              BYTE8(v80[0]) = 1;
              if ((v56 & 1) == 0)
LABEL_181:
                v9 = icu::StringSegment::length((uint64_t *)v61, a2) == 0;
LABEL_182:
              icu::StringSegment::setOffset((uint64_t)a2, Offset);
LABEL_191:
              icu::UnicodeString::~UnicodeString(v64, (icu::UnicodeString *)&v83);
              icu::UnicodeString::~UnicodeString(v66, (icu::UnicodeString *)&v88);
              icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v80);
              return v9;
            }
            goto LABEL_176;
          }
LABEL_174:
          if (v44 == 2)
            goto LABEL_177;
          v63 = 0;
          if (!(_DWORD)v61)
            goto LABEL_180;
LABEL_176:
          if (v63)
            goto LABEL_180;
LABEL_177:
          v61 = BYTE8(v80[0]);
          if (!BYTE8(v80[0]))
          {
            icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v80, -v75);
            if (a4 && icu::StringSegment::getOffset(a2) != Offset)
            {
              if (!icu::number::impl::DecimalQuantity::fitsInLong((icu::number::impl::DecimalQuantity *)v80, 0)
                || (v68 = icu::number::impl::DecimalQuantity::toLong((icu::number::impl::DecimalQuantity *)v80, 0),
                    v68 > 0x7FFFFFFF)
                || icu::number::impl::DecimalQuantity::adjustMagnitude(v5, v68 * a4))
              {
                if (a4 == -1)
                {
                  icu::number::impl::DecimalQuantity::clear((void **)v5);
                }
                else
                {
                  *((_BYTE *)v5 + 8) = 1;
                  *((_DWORD *)v5 + 19) |= 0x80u;
                }
              }
            }
            else
            {
              icu::number::impl::DecimalQuantity::operator=(v5, (uint64_t)v80);
            }
            if ((v84 & 1) == 0)
              *((_DWORD *)v5 + 19) |= 0x20u;
            icu::numparse::impl::ParsedNumber::setCharsConsumed(v5, a2);
            if (icu::StringSegment::length(v65, a2))
              v9 = v56;
            else
              v9 = 1;
            goto LABEL_191;
          }
          if ((v56 & 1) == 0)
            goto LABEL_181;
          v9 = 1;
          goto LABEL_182;
        }
        if (v45 == 1 && v46 == 1)
        {
          icu::StringSegment::setOffset((uint64_t)a2, v57);
          if (v12 == -1)
          {
LABEL_173:
            v61 = 1;
            goto LABEL_174;
          }
          v62 = ~v12;
        }
        else
        {
          v61 = 1;
          if (v44 != 1 || v12 != 1 || !(v46 | v45))
            goto LABEL_174;
          icu::StringSegment::setOffset((uint64_t)a2, v79);
          v56 = 1;
          v62 = -1;
        }
        icu::number::impl::DecimalQuantity::adjustMagnitude((icu::number::impl::DecimalQuantity *)v80, v62);
        icu::number::impl::DecimalQuantity::truncate((icu::number::impl::DecimalQuantity *)v80);
        goto LABEL_173;
      }
    }
    v79 = v14;
    if (!*(_QWORD *)(a1 + 192))
    {
      v19 = 0;
      goto LABEL_38;
    }
    v21 = 0;
    v20 = 0;
    v19 = 0;
    while (1)
    {
      v22 = *(_QWORD *)(a1 + 192);
      if (*(unsigned __int16 *)(v22 + v21 + 8) < 0x20u)
        goto LABEL_34;
      if (!icu::StringSegment::startsWith(a2, 38646))
        break;
      v23 = *(_QWORD *)(a1 + 192);
      v24 = *(unsigned __int16 *)(v23 + 8);
      if (*(__int16 *)(v23 + 8) < 0)
      {
        if (!*(_DWORD *)(v23 + 12))
          break;
      }
      else if (!(v24 >> 5))
      {
        break;
      }
      v25 = (v24 & 2) != 0 ? (_WORD *)(v23 + 10) : *(_WORD **)(v23 + 24);
      if (*v25 != 12295)
        break;
      v26 = 1;
LABEL_27:
      if (*(__int16 *)(v22 + v21 + 8) < 0)
        v27 = (uint64_t *)*(unsigned int *)(v22 + v21 + 12);
      else
        v27 = (uint64_t *)(*(unsigned __int16 *)(v22 + v21 + 8) >> 5);
      if (v26 == (_DWORD)v27)
      {
        icu::StringSegment::adjustOffset((uint64_t)a2, v26);
        v14 = v79;
LABEL_43:
        if (BYTE8(v80[0]))
        {
          BYTE8(v80[0]) = 0;
          icu::number::impl::DecimalQuantity::clear((void **)v80);
        }
        icu::number::impl::DecimalQuantity::appendDigit((icu::number::impl::DecimalQuantity *)v80, (char)v20, 0, 1);
        v12 = v15 + 1;
        if ((v84 & 1) != 0)
          v30 = v75;
        else
          v30 = v75 + 1;
        v75 = v30;
        v13 = v14;
LABEL_137:
        if ((int)icu::StringSegment::length((uint64_t *)v30, a2) <= 0)
        {
          v56 = v19;
          v79 = v13;
          v5 = v71;
          Offset = v69;
          a4 = v70;
          v45 = v76;
          v44 = v77;
          v46 = v78;
          goto LABEL_151;
        }
        goto LABEL_6;
      }
      v19 = v19 || v26 == icu::StringSegment::length(v27, a2);
LABEL_34:
      ++v20;
      v21 += 64;
      if (v20 == 10)
        goto LABEL_38;
    }
    v26 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(v22 + v21));
    goto LABEL_27;
  }
  return 0;
}

BOOL sub_18BD3382C(const icu::UnicodeSet **a1, icu::StringSegment *this)
{
  UChar32 CodePoint;
  const icu::UnicodeSet *v6;
  const icu::UnicodeSet *v7;
  __int16 v8;
  _WORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BOOL4 v13;

  if (!a1[24])
  {
    v6 = a1[21];
    if (v6)
      return icu::StringSegment::startsWith(this, v6);
  }
  if (icu::StringSegment::startsWith(this, a1[20]))
    return 1;
  CodePoint = icu::StringSegment::getCodePoint(this);
  if (u_isdigit(CodePoint))
    return 1;
  if (!a1[24])
    return 0;
  if (icu::StringSegment::startsWith(this, 38646))
  {
    v7 = a1[24];
    v8 = *((_WORD *)v7 + 4);
    if ((v8 & 0x80000000) == 0)
    {
      if ((v8 & 0xFFE0) != 0x20)
        goto LABEL_18;
LABEL_14:
      if ((v8 & 2) != 0)
        v9 = (_WORD *)((char *)v7 + 10);
      else
        v9 = (_WORD *)*((_QWORD *)v7 + 3);
      if (*v9 == 12295)
        return 1;
      goto LABEL_18;
    }
    if (*((_DWORD *)v7 + 3) == 1)
      goto LABEL_14;
  }
LABEL_18:
  if (icu::StringSegment::startsWith(this, a1[24]))
    return 1;
  v10 = 0;
  v11 = 64;
  do
  {
    v12 = v10;
    if (v10 == 9)
      break;
    v13 = icu::StringSegment::startsWith(this, (const icu::UnicodeSet *)((char *)a1[24] + v11));
    v11 += 64;
    v10 = v12 + 1;
  }
  while (!v13);
  return v12 < 9;
}

uint64_t sub_18BD33954@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18BD33964(uint64_t a1)
{
  icu::UnicodeString *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_1E2263F80;
  v2 = (icu::UnicodeString *)(a1 + 16);
  sub_18BBBADF4((uint64_t *)(a1 + 192));
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 184), v3);
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 176), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, v2);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD339BC(uint64_t a1)
{
  icu::UnicodeString *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = off_1E2263F80;
  v2 = (icu::UnicodeString *)(a1 + 16);
  sub_18BBBADF4((uint64_t *)(a1 + 192));
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 184), v3);
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 176), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 80));
  icu::UnicodeString::~UnicodeString(v6, v2);
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v7);
}

icu::UnicodeSet **sub_18BD33A18@<X0>(icu::UnicodeSet **a1@<X0>, void *a2@<X8>)
{
  icu::UnicodeSet *v3;
  void *v4;

  v3 = *a1;
  if (v3)
  {
    v4 = icu::UnicodeSet::~UnicodeSet(a2, v3);
    icu::UMemory::operator delete(v4);
  }
  return a1;
}

uint64_t icu::numparse::impl::NumberParserImpl::createSimpleParser(icu::numparse::impl::NumberParserImpl *this, const icu::Locale *a2, const icu::UnicodeString *a3, int a4, UErrorCode *a5)
{
  uint64_t v5;
  UErrorCode *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  UChar **v10;
  const icu::Locale *v11;
  icu::numparse::impl::NumberParserImpl *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  UErrorCode *v16;
  unint64_t v17;
  UChar **v18;
  int v19;
  __int128 v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t i;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t j;
  void *v48;
  void *v49;
  void *v50;
  UErrorCode *v52;
  uint64_t v53;
  int v54;
  _QWORD v55[5];
  const char *v56;
  UChar v57[16];
  UChar *v58[8];
  UChar *v59;
  uint64_t v60;
  _BYTE v61[56];
  uint64_t (**v62)();
  uint64_t v63;
  _BYTE v64[56];
  _OWORD v65[2];
  icu::UnicodeSet *v66;
  icu::UnicodeSet *v67;
  void *v68[3];
  __int128 v69;
  __int128 v70;
  icu::UnicodeSet *v71;
  icu::UnicodeSet *v72;
  void *v73[2];
  _QWORD v74[9];
  _BYTE v75[64];
  _BYTE v76[248];
  _BYTE v77[64];
  _BYTE v78[64];
  void *v79;
  unsigned __int8 v80;
  _OWORD v81[27];
  uint64_t v82;
  _OWORD v83[2];
  void *v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[8];
  uint64_t v89;
  void (**v90)();
  _QWORD v91[64];
  UChar *v92;
  UChar *v93;
  char v94;
  char v95;
  UChar *v96[361];
  uint64_t *v97;

  v5 = MEMORY[0x1E0C80A78](this);
  v52 = v6;
  v8 = v7;
  v10 = (UChar **)v9;
  v11 = (const icu::Locale *)v5;
  v97 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v12 = (icu::numparse::impl::NumberParserImpl *)icu::UMemory::operator new(v97, (icu::UMemory *)0x1460, v9);
  v13 = (uint64_t)v12;
  if (v12)
    icu::numparse::impl::NumberParserImpl::NumberParserImpl(v12, v8);
  bzero(v96, 0xB48uLL);
  icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)v96, v11, v52);
  icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher((icu::numparse::impl::IgnorablesMatcher *)&v90, v8);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 128), (icu::UnicodeString *)v91);
  *(_QWORD *)(v13 + 192) = v91[8];
  v90 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)v91);
  bzero(&v90, 0xB48uLL);
  icu::DecimalFormatSymbols::DecimalFormatSymbols((icu::DecimalFormatSymbols *)&v90, v11, v52);
  icu::UnicodeString::UnicodeString((uint64_t)&v59, (uint64_t)"I");
  v94 = 1;
  icu::UnicodeString::operator=(&v92, &v59);
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)&v59);
  icu::UnicodeString::UnicodeString((uint64_t)&v59, (uint64_t)"I");
  v95 = 1;
  icu::UnicodeString::operator=(&v93, &v59);
  icu::UnicodeString::~UnicodeString(v15, (icu::UnicodeString *)&v59);
  v89 = 0;
  memset(v88, 0, sizeof(v88));
  v87 = 0u;
  v86 = 0u;
  v85 = 0u;
  *(_OWORD *)v84 = 0u;
  memset(v83, 0, sizeof(v83));
  v56 = "I";
  icu::CurrencyUnit::CurrencyUnit(v57, &v56, v52);
  icu::number::impl::CurrencySymbols::CurrencySymbols((uint64_t)v83, v57, (uint64_t)v11, (uint64_t)&v90, v52);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v57);
  v82 = 0;
  memset(v81, 0, sizeof(v81));
  sub_18BD0C8B8((uint64_t)v81);
  icu::number::impl::PatternParser::parseToPatternInfo(v10, (const icu::UnicodeString *)v81, v52, v16);
  v55[3] = v11;
  v55[0] = v83;
  v55[1] = v96;
  v55[2] = v13 + 120;
  v55[4] = v8;
  icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(&v59, v55);
  sub_18BD343E8(v13 + 3856, (uint64_t)&v59);
  sub_18BD35BDC((uint64_t)&v59);
  sub_18BD30AB0(&v59, v13 + 3856);
  sub_18BD344E8(v13 + 2312, (uint64_t)&v59);
  v17 = 960;
  do
  {
    v18 = &(&v59)[v17 / 8];
    *(_QWORD *)&v76[v17 + 80] = &unk_1E2263C80;
    if (v76[v17 + 148])
      uprv_free(v18[69]);
    v18[62] = (UChar *)&off_1E2263DF8;
    if (*((_BYTE *)v18 + 516))
      uprv_free(*(void **)&v76[v17 + 88]);
    v17 -= 80;
  }
  while (v17);
  sub_18BD30D08(v13 + 2312, (uint64_t)v81, v13, (icu::numparse::impl::SymbolMatcher *)(v13 + 120), (icu::numparse::impl::AffixTokenMatcherWarehouse *)v8, (int *)v52);
  v53 = icu::number::impl::Grouper::forStrategy(2);
  v54 = v19;
  icu::number::impl::Grouper::setLocaleData((icu::number::impl::Grouper *)&v53, (const icu::number::impl::ParsedPatternInfo *)v81, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 120);
  sub_18BD32F04(&v59, v96, &v53, v8);
  *(_QWORD *)(v13 + 784) = v60;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 792), (icu::UnicodeString *)v61);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 856), (icu::UnicodeString *)&v63);
  v20 = v65[1];
  *(_OWORD *)(v13 + 920) = v65[0];
  *(_OWORD *)(v13 + 936) = v20;
  sub_18BD35C98((icu::UnicodeSet **)(v13 + 952), &v66, v21);
  sub_18BD35C98((icu::UnicodeSet **)(v13 + 960), &v67, v22);
  sub_18BD35CD8((void **)(v13 + 968), v68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 776);
  v59 = (UChar *)off_1E2263F80;
  sub_18BBBADF4((uint64_t *)v68);
  if (v67)
  {
    v24 = icu::UnicodeSet::~UnicodeSet(v23, v67);
    icu::UMemory::operator delete(v24);
  }
  if (v66)
  {
    v25 = icu::UnicodeSet::~UnicodeSet(v23, v66);
    icu::UMemory::operator delete(v25);
  }
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)&v63);
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)v61);
  icu::numparse::impl::MinusSignMatcher::MinusSignMatcher((icu::numparse::impl::MinusSignMatcher *)&v59, v96, 0);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 288), (icu::UnicodeString *)&v60);
  *(_QWORD *)(v13 + 352) = v62;
  *(_BYTE *)(v13 + 360) = v63;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 280);
  v59 = (UChar *)off_1E2264138;
  icu::numparse::impl::PlusSignMatcher::PlusSignMatcher((icu::numparse::impl::PlusSignMatcher *)&v59, v96, 0);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 696), (icu::UnicodeString *)&v60);
  *(_QWORD *)(v13 + 760) = v62;
  *(_BYTE *)(v13 + 768) = v63;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 688);
  v59 = (UChar *)off_1E2264138;
  icu::UnicodeString::~UnicodeString(v27, (icu::UnicodeString *)&v60);
  icu::numparse::impl::PercentMatcher::PercentMatcher((icu::numparse::impl::PercentMatcher *)&v59, v96);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 536), (icu::UnicodeString *)&v60);
  *(_QWORD *)(v13 + 600) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 528);
  v59 = (UChar *)off_1E2264138;
  icu::UnicodeString::~UnicodeString(v28, (icu::UnicodeString *)&v60);
  icu::numparse::impl::PermilleMatcher::PermilleMatcher((icu::numparse::impl::PermilleMatcher *)&v59, v96);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 616), (icu::UnicodeString *)&v60);
  *(_QWORD *)(v13 + 680) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 608);
  v59 = (UChar *)off_1E2264138;
  icu::UnicodeString::~UnicodeString(v29, (icu::UnicodeString *)&v60);
  sub_18BD36B68((uint64_t)&v59, (uint64_t)v96);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 376), (icu::UnicodeString *)&v60);
  *(_QWORD *)(v13 + 440) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 368);
  v59 = (UChar *)off_1E2264138;
  icu::UnicodeString::~UnicodeString(v30, (icu::UnicodeString *)&v60);
  sub_18BD36A84((uint64_t)&v59, (uint64_t)v96);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 208), (icu::UnicodeString *)&v60);
  *(_QWORD *)(v13 + 272) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 200);
  v59 = (UChar *)off_1E2264138;
  icu::UnicodeString::~UnicodeString(v31, (icu::UnicodeString *)&v60);
  icu::UnicodeString::UnicodeString((uint64_t)v58, (uint64_t)"@");
  sub_18BD36BAC((uint64_t)&v59, v58);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 456), (icu::UnicodeString *)&v60);
  *(_QWORD *)(v13 + 520) = v62;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 448);
  v59 = (UChar *)off_1E2264138;
  icu::UnicodeString::~UnicodeString(v32, (icu::UnicodeString *)&v60);
  icu::UnicodeString::~UnicodeString(v33, (icu::UnicodeString *)v58);
  sub_18BD36400(&v59, v96, &v53);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 984), (icu::UnicodeString *)&v60);
  *(_QWORD *)(v13 + 1056) = v63;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1064), (icu::UnicodeString *)v64);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1128), (icu::UnicodeString *)((char *)v65 + 8));
  *(_OWORD *)(v13 + 1192) = v69;
  *(_OWORD *)(v13 + 1208) = v70;
  sub_18BD35C98((icu::UnicodeSet **)(v13 + 1224), &v71, v34);
  sub_18BD35C98((icu::UnicodeSet **)(v13 + 1232), &v72, v35);
  sub_18BD35CD8((void **)(v13 + 1240), v73);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1256), (icu::UnicodeString *)v74);
  *(_QWORD *)(v13 + 1320) = v74[8];
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1328), (icu::UnicodeString *)v75);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1392), (icu::UnicodeString *)v76);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 976);
  v59 = (UChar *)off_1E22640B8;
  icu::UnicodeString::~UnicodeString(off_1E22640B8, (icu::UnicodeString *)v76);
  icu::UnicodeString::~UnicodeString(v36, (icu::UnicodeString *)v75);
  v73[1] = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v37, (icu::UnicodeString *)v74);
  v62 = off_1E2263F80;
  sub_18BBBADF4((uint64_t *)v73);
  if (v72)
  {
    v39 = icu::UnicodeSet::~UnicodeSet(v38, v72);
    icu::UMemory::operator delete(v39);
  }
  if (v71)
  {
    v40 = icu::UnicodeSet::~UnicodeSet(v38, v71);
    icu::UMemory::operator delete(v40);
  }
  icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)((char *)v65 + 8));
  icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v64);
  icu::UnicodeString::~UnicodeString(v42, (icu::UnicodeString *)&v60);
  icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher((icu::numparse::impl::CombinedCurrencyMatcher *)&v59, (const icu::number::impl::CurrencySymbols *)v83, (const icu::DecimalFormatSymbols *)v96, v8, v52);
  *(_QWORD *)(v13 + 1464) = v60;
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1472), (icu::UnicodeString *)v61);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 1536), (icu::UnicodeString *)&v63);
  *(_BYTE *)(v13 + 1600) = v65[0];
  for (i = 201; i != 265; i += 8)
    icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + i * 8), (icu::UnicodeString *)&(&v59)[i - 91]);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 2120), (icu::UnicodeString *)v77);
  icu::UnicodeString::operator=((icu::UnicodeString *)(v13 + 2184), (icu::UnicodeString *)v78);
  icu::CharString::operator=(v13 + 2248, (uint64_t)&v79);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 1456);
  v59 = (UChar *)off_1E2263F00;
  v44 = v80;
  if (v80)
    uprv_free(v79);
  icu::UnicodeString::~UnicodeString((void *)v44, (icu::UnicodeString *)v78);
  icu::UnicodeString::~UnicodeString(v45, (icu::UnicodeString *)v77);
  for (j = 75; j != 11; j -= 8)
    icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&(&v59)[j]);
  icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v63);
  icu::UnicodeString::~UnicodeString(v48, (icu::UnicodeString *)v61);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, v13 + 5176);
  *(_BYTE *)(v13 + 112) = 1;
  sub_18BD0C994((void **)v81);
  icu::UnicodeString::~UnicodeString(v49, (icu::UnicodeString *)((char *)&v88[4] + 8));
  icu::UnicodeString::~UnicodeString(v50, (icu::UnicodeString *)((char *)v88 + 8));
  if (BYTE4(v85))
    uprv_free(v84[1]);
  icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)((char *)v83 + 8));
  icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)&v90);
  icu::DecimalFormatSymbols::~DecimalFormatSymbols((icu::DecimalFormatSymbols *)v96);
  return v13;
}

uint64_t sub_18BD343E8(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 16), (icu::UnicodeString *)(a2 + 16));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 104), (icu::UnicodeString *)(a2 + 104));
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 192), (icu::UnicodeString *)(a2 + 192));
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 272), (icu::UnicodeString *)(a2 + 272));
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 360), (icu::UnicodeString *)(a2 + 360));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 424), (icu::UnicodeString *)(a2 + 424));
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  for (i = 496; i != 1008; i += 64)
    icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + i), (icu::UnicodeString *)(a2 + i));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 1008), (icu::UnicodeString *)(a2 + 1008));
  icu::UnicodeString::operator=((icu::UnicodeString *)(a1 + 1072), (icu::UnicodeString *)(a2 + 1072));
  icu::CharString::operator=(a1 + 1136, a2 + 1136);
  sub_18BCFC4E4((int *)(a1 + 1200), (int *)(a2 + 1200));
  return a1;
}

uint64_t sub_18BD344E8(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  __int128 v6;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  void *v16;

  for (i = 8; i != 584; i += 32)
  {
    v5 = a1 + i;
    v6 = *(_OWORD *)(a2 + i);
    *(_DWORD *)(v5 + 16) = *(_DWORD *)(a2 + i + 16);
    *(_OWORD *)v5 = v6;
  }
  for (j = 0; j != 960; j += 80)
  {
    v8 = a1 + j;
    if (*(_BYTE *)(a1 + j + 596))
      uprv_free(*(void **)(v8 + 584));
    v9 = a2 + j;
    *(_DWORD *)(v8 + 592) = *(_DWORD *)(a2 + j + 592);
    *(_BYTE *)(v8 + 596) = *(_BYTE *)(a2 + j + 596);
    v10 = *(const void **)(a2 + j + 584);
    v11 = a2 + j + 600;
    if ((const void *)v11 == v10)
    {
      v12 = (void *)(a1 + j + 600);
      *(_QWORD *)(v8 + 584) = v12;
      memcpy(v12, v10, 8 * *(int *)(v9 + 592));
    }
    else
    {
      *(_QWORD *)(v8 + 584) = v10;
      *(_QWORD *)(v9 + 584) = v11;
      *(_DWORD *)(v9 + 592) = 3;
      *(_BYTE *)(v9 + 596) = 0;
    }
    v13 = a2 + j;
    v14 = a1 + j;
    *(_DWORD *)(a1 + j + 624) = *(_DWORD *)(a2 + j + 624);
    if (*(_BYTE *)(a1 + j + 644))
      uprv_free(*(void **)(v14 + 632));
    *(_DWORD *)(v14 + 640) = *(_DWORD *)(v13 + 640);
    *(_BYTE *)(v14 + 644) = *(_BYTE *)(v13 + 644);
    v15 = *(const void **)(v13 + 632);
    if ((const void *)(v13 + 646) == v15)
    {
      v16 = (void *)(a1 + j + 646);
      *(_QWORD *)(v14 + 632) = v16;
      memcpy(v16, v15, 2 * *(int *)(v13 + 640));
    }
    else
    {
      *(_QWORD *)(v14 + 632) = v15;
      *(_QWORD *)(v13 + 632) = v13 + 646;
      *(_DWORD *)(v13 + 640) = 4;
      *(_BYTE *)(v13 + 644) = 0;
    }
  }
  *(_QWORD *)(a1 + 1536) = *(_QWORD *)(a2 + 1536);
  return a1;
}

uint64_t icu::numparse::impl::NumberParserImpl::freeze(uint64_t this)
{
  *(_BYTE *)(this + 112) = 1;
  return this;
}

uint64_t icu::numparse::impl::NumberParserImpl::createParserFromProperties(icu::numparse::impl::NumberParserImpl *this, const icu::number::impl::DecimalFormatProperties *a2, const icu::DecimalFormatSymbols *a3, BOOL a4, UErrorCode *a5)
{
  uint64_t v5;
  const icu::UnicodeString *v6;
  const icu::UnicodeString *v7;
  int v8;
  int v9;
  const icu::DecimalFormatSymbols *v10;
  const icu::DecimalFormatSymbols *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  icu::CurrencyPluralInfo *v15;
  uint64_t v16;
  const icu::number::impl::DecimalFormatProperties *v17;
  BOOL v18;
  int v19;
  int v20;
  void *v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int v28;
  icu::numparse::impl::NumberParserImpl *v29;
  uint64_t v30;
  void **v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t i;
  unint64_t v37;
  void *v38;
  void *v39;
  uint64_t j;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  icu::UVector **Set;
  __int128 v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  unint64_t v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  void *v67;
  void *v68;
  unsigned int v70;
  int v71;
  icu::numparse::impl::SymbolMatcher *v72;
  _BYTE v73[24];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[5];
  unint64_t v78;
  int v79;
  UChar v80[12];
  UChar v81[16];
  UChar *v82[9];
  uint64_t (**v83)();
  uint64_t v84;
  _BYTE v85[56];
  uint64_t (**v86)();
  uint64_t v87;
  _BYTE v88[56];
  _OWORD v89[2];
  icu::UnicodeSet *v90;
  icu::UnicodeSet *v91;
  void *v92[3];
  __int128 v93;
  __int128 v94;
  icu::UnicodeSet *v95;
  icu::UnicodeSet *v96;
  void *v97[2];
  _QWORD v98[9];
  _BYTE v99[64];
  _BYTE v100[248];
  _BYTE v101[64];
  _BYTE v102[64];
  void *v103;
  unsigned __int8 v104;
  _BYTE v105[32];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[128];
  uint64_t v111;
  _QWORD v112[2];
  __int16 v113[28];
  void (**v114)(icu::UnicodeString *__hidden);
  __int16 v115;
  void (**v116)(icu::UnicodeString *__hidden);
  __int16 v117;
  void (**v118)(icu::UnicodeString *__hidden);
  __int16 v119;
  char v120;
  _QWORD v121[273];
  char v122;
  _BYTE v123[232];
  uint64_t v124;

  v5 = MEMORY[0x1E0C80A78](this);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v5;
  v124 = *MEMORY[0x1E0C80C00];
  memset(v123, 0, 224);
  icu::Locale::Locale((icu::Locale *)v123, (uint64_t)v10 + 1936);
  bzero(v113, 0x990uLL);
  v112[0] = off_1E2262E30;
  v112[1] = off_1E2256B38;
  v113[0] = 2;
  v114 = off_1E2256B38;
  v115 = 2;
  v116 = off_1E2256B38;
  v117 = 2;
  v118 = off_1E2256B38;
  v119 = 2;
  v120 = 1;
  v121[0] = off_1E2262ED8;
  v13 = 35;
  do
  {
    v14 = &v112[v13];
    *v14 = off_1E2262E30;
    v14[1] = off_1E2256B38;
    *((_WORD *)v14 + 8) = 2;
    v14[9] = off_1E2256B38;
    *((_WORD *)v14 + 40) = 2;
    v14[17] = off_1E2256B38;
    *((_WORD *)v14 + 72) = 2;
    v14[25] = off_1E2256B38;
    *((_WORD *)v14 + 104) = 2;
    v13 += 34;
    *((_BYTE *)v14 + 266) = 1;
  }
  while (v14 + 34 != (_QWORD *)&v122);
  v122 = 1;
  v15 = *(icu::CurrencyPluralInfo **)(v12 + 48);
  if (v15)
  {
    v120 = 1;
    sub_18BD1E6C0((uint64_t)v121, v15, (uint64_t *)v12, v7);
  }
  else
  {
    sub_18BD1DFE4((uint64_t)v112, v12, v7);
    v122 = 1;
  }
  if (*(int *)v7 <= 0)
  {
    memset(v81, 0, sizeof(v81));
    sub_18BD0CD4C(v12, (uint64_t)v123, (uint64_t)v7, (icu::CurrencyUnit *)v81);
    v111 = 0;
    memset(v110, 0, sizeof(v110));
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    memset(v105, 0, sizeof(v105));
    icu::CurrencyUnit::CurrencyUnit((icu::CurrencyUnit *)v80, v81);
    icu::number::impl::CurrencySymbols::CurrencySymbols((uint64_t)v105, v80, (uint64_t)v123, (uint64_t)v11, (UErrorCode *)v7);
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v80);
    if (*(_BYTE *)(v12 + 460))
      v18 = 1;
    else
      v18 = *(_DWORD *)(v12 + 464) == 1;
    v19 = v18;
    v16 = 0;
    v78 = icu::number::impl::Grouper::forProperties((icu::number::impl::Grouper *)v12, v17);
    v79 = v20;
    v21 = (void *)*(unsigned int *)v7;
    if ((int)v21 <= 0)
    {
      v22 = *(_BYTE *)(v12 + 456) == 0;
      if (*(_BYTE *)(v12 + 457))
        v22 |= 0x10u;
      if (*(_BYTE *)(v12 + 756))
        v22 |= 0x400u;
      if (v19)
        v23 = 33548;
      else
        v23 = 128;
      v24 = v22 | v23;
      if ((int)icu::number::impl::Grouper::getPrimary((icu::number::impl::Grouper *)&v78) < 1)
        v24 |= 0x20u;
      if ((v9 & 1) != 0
        || ((v26 = 34, !v122) ? (v27 = v121) : (v26 = 0, v27 = v112),
            (*(unsigned int (**)(_QWORD *))(v112[v26] + 40))(v27)))
      {
        v24 |= 2u;
      }
      if (v9)
        v28 = v24;
      else
        v28 = v24 | 0x2000;
      v29 = (icu::numparse::impl::NumberParserImpl *)icu::UMemory::operator new((uint64_t *)(v24 | 0x2000u), (icu::UMemory *)0x1460, v25);
      v16 = (uint64_t)v29;
      if (v29)
        icu::numparse::impl::NumberParserImpl::NumberParserImpl(v29, v28);
      v71 = v19;
      icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher((icu::numparse::impl::IgnorablesMatcher *)&v83, v28);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 128), (icu::UnicodeString *)&v84);
      *(_QWORD *)(v16 + 192) = v86;
      v83 = (uint64_t (**)())off_1E2264138;
      icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)&v84);
      v77[0] = v105;
      v77[1] = v11;
      v72 = (icu::numparse::impl::SymbolMatcher *)(v16 + 120);
      v77[2] = v16 + 120;
      v77[3] = v123;
      v70 = v28;
      v77[4] = v28;
      icu::numparse::impl::AffixTokenMatcherWarehouse::AffixTokenMatcherWarehouse(&v83, v77);
      sub_18BD343E8(v16 + 3856, (uint64_t)&v83);
      sub_18BD35BDC((uint64_t)&v83);
      sub_18BD30AB0(&v83, v16 + 3856);
      sub_18BD344E8(v16 + 2312, (uint64_t)&v83);
      v30 = 960;
      do
      {
        v31 = (void **)&(&v83)[(unint64_t)v30 / 8];
        *(_QWORD *)&v100[v30 + 80] = &unk_1E2263C80;
        if (v100[v30 + 148])
          uprv_free(v31[69]);
        v31[62] = &off_1E2263DF8;
        if (*((_BYTE *)v31 + 516))
          uprv_free(*(void **)&v100[v30 + 88]);
        v30 -= 80;
      }
      while (v30);
      if (v122)
        v32 = v112;
      else
        v32 = v121;
      sub_18BD30D08(v16 + 2312, (uint64_t)v32, v16, v72, (icu::numparse::impl::AffixTokenMatcherWarehouse *)v28, (int *)v7);
      v33 = v9;
      if ((v9 & 1) != 0
        || ((v34 = 34, !v122) ? (v35 = v121) : (v34 = 0, v35 = v112),
            (*(unsigned int (**)(_QWORD *))(v112[v34] + 40))(v35)))
      {
        icu::numparse::impl::CombinedCurrencyMatcher::CombinedCurrencyMatcher((icu::numparse::impl::CombinedCurrencyMatcher *)&v83, (const icu::number::impl::CurrencySymbols *)v105, v11, v28, (UErrorCode *)v7);
        *(_QWORD *)(v16 + 1464) = v84;
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1472), (icu::UnicodeString *)v85);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1536), (icu::UnicodeString *)&v87);
        *(_BYTE *)(v16 + 1600) = v89[0];
        for (i = 201; i != 265; i += 8)
          icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + i * 8), (icu::UnicodeString *)&(&v83)[i - 182]);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 2120), (icu::UnicodeString *)v101);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 2184), (icu::UnicodeString *)v102);
        icu::CharString::operator=(v16 + 2248, (uint64_t)&v103);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 1456);
        v83 = off_1E2263F00;
        v37 = v104;
        if (v104)
          uprv_free(v103);
        icu::UnicodeString::~UnicodeString((void *)v37, (icu::UnicodeString *)v102);
        icu::UnicodeString::~UnicodeString(v38, (icu::UnicodeString *)v101);
        for (j = 75; j != 11; j -= 8)
          icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&(&v83)[j]);
        icu::UnicodeString::~UnicodeString(v39, (icu::UnicodeString *)&v87);
        icu::UnicodeString::~UnicodeString(v41, (icu::UnicodeString *)v85);
        v33 = v9;
      }
      if ((v71 & 1) == 0)
      {
        v42 = 34;
        if (v122)
        {
          v42 = 0;
          v43 = v112;
        }
        else
        {
          v43 = v121;
        }
        if ((*(unsigned int (**)(_QWORD *, uint64_t, const icu::UnicodeString *))(v112[v42] + 72))(v43, 4294967292, v7))
        {
          icu::numparse::impl::PercentMatcher::PercentMatcher((icu::numparse::impl::PercentMatcher *)&v83, (UChar **)v11);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 536), (icu::UnicodeString *)&v84);
          *(_QWORD *)(v16 + 600) = v86;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 528);
          v83 = (uint64_t (**)())off_1E2264138;
          icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)&v84);
        }
        v44 = 34;
        if (v122)
        {
          v44 = 0;
          v45 = v112;
        }
        else
        {
          v45 = v121;
        }
        if ((*(unsigned int (**)(_QWORD *, uint64_t, const icu::UnicodeString *))(v112[v44] + 72))(v45, 4294967291, v7))
        {
          icu::numparse::impl::PermilleMatcher::PermilleMatcher((icu::numparse::impl::PermilleMatcher *)&v83, (UChar **)v11);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 616), (icu::UnicodeString *)&v84);
          *(_QWORD *)(v16 + 680) = v86;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 608);
          v83 = (uint64_t (**)())off_1E2264138;
          icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)&v84);
        }
        icu::numparse::impl::PlusSignMatcher::PlusSignMatcher((icu::numparse::impl::PlusSignMatcher *)&v83, (UChar **)v11, 0);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 696), (icu::UnicodeString *)&v84);
        *(_QWORD *)(v16 + 760) = v86;
        *(_BYTE *)(v16 + 768) = v87;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 688);
        v83 = (uint64_t (**)())off_1E2264138;
        icu::numparse::impl::MinusSignMatcher::MinusSignMatcher((icu::numparse::impl::MinusSignMatcher *)&v83, (UChar **)v11, 0);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 288), (icu::UnicodeString *)&v84);
        *(_QWORD *)(v16 + 352) = v86;
        *(_BYTE *)(v16 + 360) = v87;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 280);
        v83 = (uint64_t (**)())off_1E2264138;
        icu::UnicodeString::~UnicodeString(v46, (icu::UnicodeString *)&v84);
      }
      sub_18BD36B68((uint64_t)&v83, (uint64_t)v11);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 376), (icu::UnicodeString *)&v84);
      *(_QWORD *)(v16 + 440) = v86;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 368);
      v83 = (uint64_t (**)())off_1E2264138;
      sub_18BD36A84((uint64_t)&v83, (uint64_t)v11);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 208), (icu::UnicodeString *)&v84);
      *(_QWORD *)(v16 + 272) = v86;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 200);
      v83 = (uint64_t (**)())off_1E2264138;
      icu::UnicodeString::~UnicodeString(v47, (icu::UnicodeString *)&v84);
      memset(v82, 0, 64);
      icu::UnicodeString::UnicodeString((icu::UnicodeString *)v82, (UChar **)(v12 + 392));
      if (((uint64_t)v82[1] & 1) == 0)
      {
        Set = (icu::UVector **)icu::numparse::impl::SymbolMatcher::getSet(v72);
        if (!icu::UnicodeSet::contains(Set, (const icu::UnicodeString *)v82))
        {
          sub_18BD36BAC((uint64_t)&v83, v82);
          icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 456), (icu::UnicodeString *)&v84);
          *(_QWORD *)(v16 + 520) = v86;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 448);
          v83 = (uint64_t (**)())off_1E2264138;
          icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)&v84);
        }
      }
      (*(void (**)(uint64_t, icu::numparse::impl::SymbolMatcher *))(*(_QWORD *)v16 + 16))(v16, v72);
      sub_18BD32F04(&v83, v11, &v78, v70);
      *(_QWORD *)(v16 + 784) = v84;
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 792), (icu::UnicodeString *)v85);
      icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 856), (icu::UnicodeString *)&v87);
      v49 = v89[1];
      *(_OWORD *)(v16 + 920) = v89[0];
      *(_OWORD *)(v16 + 936) = v49;
      sub_18BD35C98((icu::UnicodeSet **)(v16 + 952), &v90, (char *)&v81[4] + 1);
      sub_18BD35C98((icu::UnicodeSet **)(v16 + 960), &v91, v50);
      sub_18BD35CD8((void **)(v16 + 968), v92);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 776);
      v83 = off_1E2263F80;
      sub_18BBBADF4((uint64_t *)v92);
      if (v91)
      {
        v52 = icu::UnicodeSet::~UnicodeSet(v51, v91);
        icu::UMemory::operator delete(v52);
      }
      if (v90)
      {
        v53 = icu::UnicodeSet::~UnicodeSet(v51, v90);
        icu::UMemory::operator delete(v53);
      }
      icu::UnicodeString::~UnicodeString(v51, (icu::UnicodeString *)&v87);
      icu::UnicodeString::~UnicodeString(v54, (icu::UnicodeString *)v85);
      if (!*(_BYTE *)(v12 + 468) || *(int *)(v12 + 100) >= 1)
      {
        sub_18BD36400(&v83, v11, &v78);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 984), (icu::UnicodeString *)&v84);
        *(_QWORD *)(v16 + 1056) = v87;
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1064), (icu::UnicodeString *)v88);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1128), (icu::UnicodeString *)((char *)v89 + 8));
        *(_OWORD *)(v16 + 1192) = v93;
        *(_OWORD *)(v16 + 1208) = v94;
        sub_18BD35C98((icu::UnicodeSet **)(v16 + 1224), &v95, &v83);
        sub_18BD35C98((icu::UnicodeSet **)(v16 + 1232), &v96, v55);
        sub_18BD35CD8((void **)(v16 + 1240), v97);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1256), (icu::UnicodeString *)v98);
        *(_QWORD *)(v16 + 1320) = v98[8];
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1328), (icu::UnicodeString *)v99);
        icu::UnicodeString::operator=((icu::UnicodeString *)(v16 + 1392), (icu::UnicodeString *)v100);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 976);
        v83 = off_1E22640B8;
        icu::UnicodeString::~UnicodeString(off_1E22640B8, (icu::UnicodeString *)v100);
        icu::UnicodeString::~UnicodeString(v56, (icu::UnicodeString *)v99);
        v97[1] = off_1E2264138;
        icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)v98);
        v86 = off_1E2263F80;
        sub_18BBBADF4((uint64_t *)v97);
        if (v96)
        {
          v58 = icu::UnicodeSet::~UnicodeSet(v57, v96);
          icu::UMemory::operator delete(v58);
        }
        if (v95)
        {
          v59 = icu::UnicodeSet::~UnicodeSet(v57, v95);
          icu::UMemory::operator delete(v59);
        }
        icu::UnicodeString::~UnicodeString(v57, (icu::UnicodeString *)((char *)v89 + 8));
        icu::UnicodeString::~UnicodeString(v60, (icu::UnicodeString *)v88);
        icu::UnicodeString::~UnicodeString(v61, (icu::UnicodeString *)&v84);
        v33 = v9;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 5176);
      if (v71)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 5144);
      if (v33)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 5152);
      if (*(_BYTE *)(v12 + 64))
      {
        sub_18BD370D0((uint64_t)&v83, (*(unsigned __int8 *)(v12 + 65) | *(_DWORD *)(v12 + 88)) != 0);
        *(_BYTE *)(v16 + 5168) = v84;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 5160);
      }
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v63 = *(_DWORD *)(v12 + 84);
      v64 = *(_DWORD *)(v12 + 120);
      v65 = *(_DWORD *)(v12 + 124);
      v66 = (v65 + v63);
      if (!(v65 + v63) || v64 == 1)
      {
        if ((_DWORD)v66)
        {
          icu::number::Scale::powerOfTen(v66, (uint64_t)&v74);
        }
        else if (v64 == 1)
        {
          icu::number::Scale::none((uint64_t)&v74);
        }
        else
        {
          icu::number::Scale::byDouble((double)v64, v62, (uint64_t)&v74);
        }
      }
      else
      {
        icu::number::Scale::byDoubleAndPowerOfTen((icu::number::Scale *)v66, (double)v64, v62, (uint64_t)&v74);
      }
      if ((_DWORD)v74 || v75)
      {
        icu::number::Scale::Scale((icu::number::Scale *)v73, (const icu::number::Scale *)&v74);
        sub_18BD37158(&v83, (uint64_t)v73);
        icu::number::Scale::operator=(v16 + 5192, (uint64_t)&v84);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v16 + 5184);
        v83 = off_1E2264590;
        icu::number::Scale::~Scale((icu::number::Scale *)&v84);
        icu::number::Scale::~Scale((icu::number::Scale *)v73);
      }
      *(_BYTE *)(v16 + 112) = 1;
      icu::number::Scale::~Scale((icu::number::Scale *)&v74);
      icu::UnicodeString::~UnicodeString(v67, (icu::UnicodeString *)v82);
    }
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)&v110[72]);
    icu::UnicodeString::~UnicodeString(v68, (icu::UnicodeString *)&v110[8]);
    if (BYTE4(v107))
      uprv_free(*((void **)&v106 + 1));
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)&v105[8]);
    icu::CurrencyUnit::~CurrencyUnit((icu::CurrencyUnit *)v81);
  }
  else
  {
    v16 = 0;
  }
  sub_18BCC1F2C(v112);
  icu::Locale::~Locale((icu::Locale *)v123);
  return v16;
}

icu::numparse::impl::NumberParserImpl *icu::numparse::impl::NumberParserImpl::NumberParserImpl(icu::numparse::impl::NumberParserImpl *this, int a2)
{
  *(_QWORD *)this = off_1E2264000;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = (char *)this + 32;
  *((_DWORD *)this + 6) = 10;
  *((_BYTE *)this + 28) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_WORD *)this + 68) = 2;
  *((_QWORD *)this + 15) = off_1E2264190;
  *((_QWORD *)this + 16) = off_1E2256B38;
  *((_WORD *)this + 108) = 2;
  *((_QWORD *)this + 25) = off_1E22641E8;
  *((_QWORD *)this + 26) = off_1E2256B38;
  *((_WORD *)this + 148) = 2;
  *((_QWORD *)this + 35) = off_1E2264240;
  *((_QWORD *)this + 36) = off_1E2256B38;
  *((_WORD *)this + 192) = 2;
  *((_QWORD *)this + 46) = off_1E2264298;
  *((_QWORD *)this + 47) = off_1E2256B38;
  *((_WORD *)this + 232) = 2;
  *((_QWORD *)this + 56) = off_1E22642F0;
  *((_QWORD *)this + 57) = off_1E2256B38;
  *((_QWORD *)this + 67) = off_1E2256B38;
  *((_WORD *)this + 272) = 2;
  *((_QWORD *)this + 66) = off_1E2264348;
  *((_QWORD *)this + 77) = off_1E2256B38;
  *((_WORD *)this + 312) = 2;
  *((_QWORD *)this + 76) = off_1E22643A0;
  *((_QWORD *)this + 87) = off_1E2256B38;
  *((_WORD *)this + 352) = 2;
  *((_QWORD *)this + 86) = off_1E22643F8;
  *((_QWORD *)this + 97) = off_1E2263F80;
  *((_QWORD *)this + 99) = off_1E2256B38;
  *((_WORD *)this + 400) = 2;
  *((_QWORD *)this + 107) = off_1E2256B38;
  *((_WORD *)this + 432) = 2;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 119) = 0;
  *((_QWORD *)this + 120) = 0;
  *((_QWORD *)this + 122) = off_1E22640B8;
  *((_QWORD *)this + 123) = off_1E2256B38;
  *((_WORD *)this + 496) = 2;
  *((_QWORD *)this + 131) = off_1E2263F80;
  *((_QWORD *)this + 133) = off_1E2256B38;
  *((_WORD *)this + 536) = 2;
  *((_QWORD *)this + 141) = off_1E2256B38;
  *((_WORD *)this + 568) = 2;
  *((_QWORD *)this + 155) = 0;
  *((_QWORD *)this + 153) = 0;
  *((_QWORD *)this + 154) = 0;
  *((_QWORD *)this + 157) = off_1E2256B38;
  *((_WORD *)this + 632) = 2;
  *((_QWORD *)this + 156) = off_1E2264190;
  *((_QWORD *)this + 166) = off_1E2256B38;
  *((_WORD *)this + 668) = 2;
  *((_QWORD *)this + 174) = off_1E2256B38;
  *((_WORD *)this + 700) = 2;
  sub_18BD31D70((uint64_t)this + 1456);
  sub_18BD35D4C((uint64_t)this + 2312);
  sub_18BD35DD4((uint64_t)this + 3856);
  *((_QWORD *)this + 643) = &unk_1E22645D8;
  *((_QWORD *)this + 644) = &unk_1E2264670;
  *((_QWORD *)this + 645) = &off_1E2264548;
  *((_QWORD *)this + 647) = &unk_1E2264728;
  *((_QWORD *)this + 648) = off_1E2264590;
  *((_DWORD *)this + 1298) = 0;
  *((_QWORD *)this + 650) = 0;
  *((_DWORD *)this + 1302) = 0;
  return this;
}

void icu::numparse::impl::NumberParserImpl::~NumberParserImpl(icu::numparse::impl::NumberParserImpl *this)
{
  *(_QWORD *)this = off_1E2264000;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 648) = off_1E2264590;
  icu::number::Scale::~Scale((icu::numparse::impl::NumberParserImpl *)((char *)this + 5192));
  sub_18BD35E74((uint64_t)this + 120);
  if (*((_BYTE *)this + 28))
    uprv_free(*((void **)this + 2));
}

{
  void *v1;

  icu::numparse::impl::NumberParserImpl::~NumberParserImpl(this);
  icu::UMemory::operator delete(v1);
}

void icu::numparse::impl::NumberParserImpl::addMatcher(icu::numparse::impl::NumberParserImpl *this, icu::numparse::impl::NumberParseMatcher *a2)
{
  int v4;
  int v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;

  v4 = *((_DWORD *)this + 3);
  if (v4 >= *((_DWORD *)this + 6) && v4 >= 1)
  {
    v6 = 2 * v4;
    v7 = uprv_malloc(8 * (2 * v4));
    if (v7)
    {
      v8 = v7;
      v9 = *((_DWORD *)this + 6);
      if (v9 >= v4)
        v9 = v4;
      if (v9 >= v6)
        v9 = 2 * v4;
      v10 = (void *)*((_QWORD *)this + 2);
      memcpy(v7, v10, 8 * v9);
      if (*((_BYTE *)this + 28))
        uprv_free(v10);
      *((_QWORD *)this + 2) = v8;
      *((_DWORD *)this + 6) = v6;
      *((_BYTE *)this + 28) = 1;
    }
  }
  v11 = *((int *)this + 3);
  *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v11) = a2;
  *((_DWORD *)this + 3) = v11 + 1;
}

uint64_t icu::numparse::impl::NumberParserImpl::getParseFlags(icu::numparse::impl::NumberParserImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t icu::numparse::impl::NumberParserImpl::parse(icu::numparse::impl::NumberParserImpl *this, const icu::UnicodeString *a2, int a3, icu::numparse::impl::ParsedNumber *a4, UErrorCode *a5)
{
  return icu::numparse::impl::NumberParserImpl::parse((uint64_t)this, a2, 0, a3, a4, a5);
}

uint64_t icu::numparse::impl::NumberParserImpl::parse(uint64_t this, const icu::UnicodeString *a2, int a3, int a4, icu::numparse::impl::ParsedNumber *a5, UErrorCode *a6)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if (*(int *)a6 <= 0)
  {
    v10 = this;
    memset(v14, 0, sizeof(v14));
    icu::StringSegment::StringSegment((uint64_t)v14, a2, *(_DWORD *)(this + 8) & 1);
    icu::StringSegment::adjustOffset((uint64_t)v14, a3);
    if (a4)
    {
      icu::numparse::impl::NumberParserImpl::parseGreedy(v10, (icu::StringSegment *)v14, a5, a6);
    }
    else
    {
      if ((*(_BYTE *)(v10 + 9) & 0x40) != 0)
        v11 = 1;
      else
        v11 = -100;
      icu::numparse::impl::NumberParserImpl::parseLongestRecursive((icu::numparse::impl::NumberParserImpl *)v10, (icu::StringSegment *)v14, a5, v11, a6);
    }
    if (*(int *)(v10 + 12) >= 1)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v10 + 16) + 8 * v12);
        (*(void (**)(uint64_t, icu::numparse::impl::ParsedNumber *))(*(_QWORD *)v13 + 40))(v13, a5);
        ++v12;
      }
      while (v12 < *(int *)(v10 + 12));
    }
    return icu::numparse::impl::ParsedNumber::postProcess((uint64_t)a5);
  }
  return this;
}

uint64_t icu::numparse::impl::NumberParserImpl::parseGreedy(uint64_t this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int Offset;

  if (*(int *)(this + 12) >= 1)
  {
    v7 = this;
    v8 = 0;
    do
    {
      this = icu::StringSegment::length(a2);
      if (!(_DWORD)this)
        break;
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8 * v8);
      this = (*(uint64_t (**)(uint64_t, icu::StringSegment *))(*(_QWORD *)v9 + 32))(v9, a2);
      if ((this & 1) != 0)
      {
        Offset = icu::StringSegment::getOffset(a2);
        this = (*(uint64_t (**)(uint64_t, icu::StringSegment *, icu::numparse::impl::ParsedNumber *, UErrorCode *))(*(_QWORD *)v9 + 24))(v9, a2, a3, a4);
        if (*(int *)a4 > 0)
          return this;
        this = icu::StringSegment::getOffset(a2);
        if ((_DWORD)this == Offset)
          ++v8;
        else
          v8 = 0;
      }
      else
      {
        ++v8;
      }
    }
    while (v8 < *(_DWORD *)(v7 + 12));
  }
  return this;
}

void icu::numparse::impl::NumberParserImpl::parseLongestRecursive(icu::numparse::impl::NumberParserImpl *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, int a4, UErrorCode *a5)
{
  int v10;
  int Offset;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  void *v20;
  void *v21;
  void *v22;
  _OWORD v23[5];
  _OWORD v24[4];
  _OWORD v25[4];
  uint64_t v26;
  _OWORD v27[5];
  _OWORD v28[4];
  _OWORD v29[4];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v10 = icu::StringSegment::length(a2);
  if (a4 && v10)
  {
    v30 = 0;
    memset(v29, 0, sizeof(v29));
    memset(v28, 0, sizeof(v28));
    memset(v27, 0, sizeof(v27));
    sub_18BD32490(v27, (uint64_t)a3);
    v26 = 0;
    memset(v25, 0, sizeof(v25));
    memset(v24, 0, sizeof(v24));
    memset(v23, 0, sizeof(v23));
    icu::numparse::impl::ParsedNumber::ParsedNumber((icu::numparse::impl::ParsedNumber *)v23);
    Offset = icu::StringSegment::getOffset(a2);
    v12 = *((unsigned int *)this + 3);
    if ((int)v12 >= 1)
    {
      v13 = Offset;
      v14 = 0;
      v15 = a4 + 1;
      do
      {
        v16 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v14);
        if ((*(unsigned int (**)(uint64_t, icu::StringSegment *))(*(_QWORD *)v16 + 32))(v16, a2))
        {
          v17 = 0;
          do
          {
            if (v17 >= (int)icu::StringSegment::length(a2))
              break;
            if (icu::StringSegment::codePointAt((uint64_t **)a2, v17) < 0x10000)
              v18 = 1;
            else
              v18 = 2;
            v17 += v18;
            sub_18BD32150((uint64_t)v23, (uint64_t)v27);
            icu::StringSegment::setLength((uint64_t)a2, v17);
            v19 = (*(uint64_t (**)(uint64_t, icu::StringSegment *, _OWORD *, UErrorCode *))(*(_QWORD *)v16 + 24))(v16, a2, v23, a5);
            icu::StringSegment::resetLength(a2);
            v12 = *(unsigned int *)a5;
            if ((int)v12 > 0)
              goto LABEL_18;
            if (icu::StringSegment::getOffset(a2) - v13 == v17)
            {
              icu::numparse::impl::NumberParserImpl::parseLongestRecursive(this, a2, (icu::numparse::impl::ParsedNumber *)v23, v15, a5);
              v12 = *(unsigned int *)a5;
              if ((int)v12 > 0)
                goto LABEL_18;
              if (icu::numparse::impl::ParsedNumber::isBetterThan((icu::numparse::impl::ParsedNumber *)v23, a3))
                sub_18BD32150((uint64_t)a3, (uint64_t)v23);
            }
            icu::StringSegment::setOffset((uint64_t)a2, v13);
          }
          while ((v19 & 1) != 0);
        }
        ++v14;
        v12 = *((int *)this + 3);
      }
      while (v14 < v12);
    }
LABEL_18:
    icu::UnicodeString::~UnicodeString((void *)v12, (icu::UnicodeString *)v25);
    icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)v24);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v23);
    icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)v29);
    icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)v28);
    icu::number::impl::DecimalQuantity::~DecimalQuantity((void **)v27);
  }
}

uint64_t icu::numparse::impl::NumberParserImpl::toString@<X0>(icu::numparse::impl::NumberParserImpl *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  unsigned __int16 v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  icu::UnicodeString::UnicodeString((uint64_t)a2, (uint64_t)"<");
  if (*((int *)this + 3) >= 1)
  {
    v4 = 0;
    do
    {
      LOWORD(v8) = 32;
      icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)&v8, 0, 1);
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 2) + 8 * v4) + 48))(&v8);
      if ((v9 & 0x8000u) == 0)
        v5 = v9 >> 5;
      else
        v5 = v10;
      icu::UnicodeString::doAppend((uint64_t)a2, (const icu::UnicodeString *)&v8, 0, v5);
      icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)&v8);
      ++v4;
    }
    while (v4 < *((int *)this + 3));
  }
  return icu::UnicodeString::doAppend((uint64_t)a2, (uint64_t)L" ]>", 0, 0xFFFFFFFFLL);
}

uint64_t sub_18BD35BDC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  sub_18BBCBAB0(a1 + 1200);
  *(_QWORD *)(a1 + 344) = off_1E2263F00;
  v2 = (void *)*(unsigned __int8 *)(a1 + 1148);
  if (*(_BYTE *)(a1 + 1148))
    uprv_free(*(void **)(a1 + 1136));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 1072));
  icu::UnicodeString::~UnicodeString(v3, (icu::UnicodeString *)(a1 + 1008));
  for (i = 944; i != 432; i -= 64)
    icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + i));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 424));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 360));
  *(_QWORD *)(a1 + 264) = off_1E2264138;
  *(_QWORD *)(a1 + 184) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 192));
  *(_QWORD *)(a1 + 96) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(a1 + 104));
  *(_QWORD *)(a1 + 8) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 16));
  return a1;
}

icu::UnicodeSet **sub_18BD35C98@<X0>(icu::UnicodeSet **a1@<X0>, icu::UnicodeSet **a2@<X1>, void *a3@<X8>)
{
  icu::UnicodeSet *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    v6 = icu::UnicodeSet::~UnicodeSet(a3, v5);
    icu::UMemory::operator delete(v6);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

void **sub_18BD35CD8(void **a1, void **a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v4 = *a1;
  if (*a1)
  {
    v5 = (char *)(v4 - 2);
    v6 = *(v4 - 1);
    if (v6)
    {
      v7 = v6 << 6;
      v8 = (char *)(v4 - 8);
      do
      {
        icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v8[v7]);
        v7 -= 64;
      }
      while (v7);
    }
    icu::UMemory::operator delete[](v5);
  }
  *a1 = *a2;
  *a2 = 0;
  return a1;
}

uint64_t sub_18BD35D4C(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  for (i = 0; i != 576; i += 32)
    *(_QWORD *)(a1 + i) = &off_1E2263CE0;
  v3 = a1 + 576;
  do
  {
    v4 = icu::numparse::impl::ArraySeriesMatcher::ArraySeriesMatcher(v3);
    *(_WORD *)(v4 + 70) = 0;
    *(_QWORD *)v4 = &unk_1E2263C80;
    *(_QWORD *)(v4 + 56) = v4 + 70;
    *(_DWORD *)(v4 + 64) = 4;
    *(_BYTE *)(v4 + 68) = 0;
    v3 = v4 + 80;
  }
  while (v3 != a1 + 1536);
  return a1;
}

uint64_t sub_18BD35DD4(uint64_t a1)
{
  *(_WORD *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 8) = off_1E2264240;
  *(_QWORD *)(a1 + 16) = off_1E2256B38;
  *(_WORD *)(a1 + 112) = 2;
  *(_QWORD *)(a1 + 96) = off_1E22643F8;
  *(_QWORD *)(a1 + 104) = off_1E2256B38;
  *(_WORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 184) = off_1E2264348;
  *(_QWORD *)(a1 + 192) = off_1E2256B38;
  *(_WORD *)(a1 + 280) = 2;
  *(_QWORD *)(a1 + 264) = off_1E22643A0;
  *(_QWORD *)(a1 + 272) = off_1E2256B38;
  sub_18BD31D70(a1 + 344);
  *(_DWORD *)(a1 + 1200) = 0;
  *(_QWORD *)(a1 + 1208) = a1 + 1224;
  *(_DWORD *)(a1 + 1216) = 8;
  *(_BYTE *)(a1 + 1220) = 0;
  return a1;
}

uint64_t sub_18BD35E74(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t j;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  sub_18BD35BDC(a1 + 3736);
  for (i = 0; i != -960; i -= 80)
  {
    v3 = a1 + i;
    *(_QWORD *)(a1 + i + 3648) = &unk_1E2263C80;
    if (*(_BYTE *)(a1 + i + 3716))
      uprv_free(*(void **)(v3 + 3704));
    *(_QWORD *)(v3 + 3648) = &off_1E2263DF8;
    if (*(_BYTE *)(v3 + 3668))
      uprv_free(*(void **)(a1 + i + 3656));
  }
  *(_QWORD *)(a1 + 1336) = off_1E2263F00;
  v4 = (void *)*(unsigned __int8 *)(a1 + 2140);
  if (*(_BYTE *)(a1 + 2140))
    uprv_free(*(void **)(a1 + 2128));
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)(a1 + 2064));
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 2000));
  for (j = 1936; j != 1424; j -= 64)
    icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + j));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 1416));
  icu::UnicodeString::~UnicodeString(v8, (icu::UnicodeString *)(a1 + 1352));
  *(_QWORD *)(a1 + 856) = off_1E22640B8;
  icu::UnicodeString::~UnicodeString(off_1E22640B8, (icu::UnicodeString *)(a1 + 1272));
  icu::UnicodeString::~UnicodeString(v9, (icu::UnicodeString *)(a1 + 1208));
  *(_QWORD *)(a1 + 1128) = off_1E2264138;
  *(_QWORD *)(a1 + 928) = off_1E2263F80;
  sub_18BBBADF4((uint64_t *)(a1 + 1120));
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 1112), v10);
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 1104), v11);
  icu::UnicodeString::~UnicodeString(v12, (icu::UnicodeString *)(a1 + 1008));
  icu::UnicodeString::~UnicodeString(v13, (icu::UnicodeString *)(a1 + 944));
  icu::UnicodeString::~UnicodeString(v14, (icu::UnicodeString *)(a1 + 864));
  *(_QWORD *)(a1 + 656) = off_1E2263F80;
  sub_18BBBADF4((uint64_t *)(a1 + 848));
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 840), v15);
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 832), v16);
  icu::UnicodeString::~UnicodeString(v17, (icu::UnicodeString *)(a1 + 736));
  icu::UnicodeString::~UnicodeString(v18, (icu::UnicodeString *)(a1 + 672));
  *(_QWORD *)(a1 + 568) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)(a1 + 576));
  *(_QWORD *)(a1 + 488) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v20, (icu::UnicodeString *)(a1 + 496));
  *(_QWORD *)(a1 + 408) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v21, (icu::UnicodeString *)(a1 + 416));
  *(_QWORD *)(a1 + 328) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v22, (icu::UnicodeString *)(a1 + 336));
  *(_QWORD *)(a1 + 248) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v23, (icu::UnicodeString *)(a1 + 256));
  *(_QWORD *)(a1 + 160) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v24, (icu::UnicodeString *)(a1 + 168));
  *(_QWORD *)(a1 + 80) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v25, (icu::UnicodeString *)(a1 + 88));
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(v26, (icu::UnicodeString *)(a1 + 8));
  return a1;
}

icu::numparse::impl::ParsedNumber *icu::numparse::impl::ParsedNumber::ParsedNumber(icu::numparse::impl::ParsedNumber *this)
{
  icu::number::impl::DecimalQuantity *v2;

  v2 = icu::number::impl::DecimalQuantity::DecimalQuantity(this);
  *((_QWORD *)v2 + 10) = off_1E2256B38;
  *((_QWORD *)this + 18) = off_1E2256B38;
  *((_WORD *)this + 44) = 2;
  *((_WORD *)this + 76) = 2;
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 9) = 0;
  icu::UnicodeString::setToBogus((icu::number::impl::DecimalQuantity *)((char *)v2 + 80));
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 144));
  *((_WORD *)this + 104) = 0;
  return this;
}

void icu::numparse::impl::ParsedNumber::clear(icu::numparse::impl::ParsedNumber *this)
{
  *((_BYTE *)this + 8) = 1;
  *((_QWORD *)this + 9) = 0;
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 80));
  icu::UnicodeString::setToBogus((icu::numparse::impl::ParsedNumber *)((char *)this + 144));
  *((_WORD *)this + 104) = 0;
}

uint64_t icu::numparse::impl::ParsedNumber::setCharsConsumed(icu::numparse::impl::ParsedNumber *this, const icu::StringSegment *a2)
{
  uint64_t result;

  result = icu::StringSegment::getOffset(a2);
  *((_DWORD *)this + 18) = result;
  return result;
}

uint64_t icu::numparse::impl::ParsedNumber::postProcess(uint64_t this)
{
  if (!*(_BYTE *)(this + 8) && (*(_BYTE *)(this + 76) & 1) != 0)
    return icu::number::impl::DecimalQuantity::negate(this);
  return this;
}

BOOL icu::numparse::impl::ParsedNumber::success(icu::numparse::impl::ParsedNumber *this)
{
  return *((int *)this + 18) >= 1 && (*((_BYTE *)this + 77) & 1) == 0;
}

uint64_t icu::numparse::impl::ParsedNumber::seenNumber(icu::numparse::impl::ParsedNumber *this)
{
  unsigned int v1;

  if (!*((_BYTE *)this + 8))
    return 1;
  v1 = *((_DWORD *)this + 19);
  if ((v1 & 0x40) != 0)
    return 1;
  else
    return (v1 >> 7) & 1;
}

double icu::numparse::impl::ParsedNumber::getDouble(icu::numparse::impl::ParsedNumber *this, UErrorCode *a2)
{
  int v2;
  double result;

  v2 = *((_DWORD *)this + 19);
  if ((v2 & 0x40) != 0)
    return uprv_getNaN();
  if ((v2 & 0x80) != 0)
  {
    result = -INFINITY;
    if ((v2 & 1) == 0)
      return INFINITY;
  }
  else if (*((_BYTE *)this + 8))
  {
    *a2 = U_INVALID_STATE_ERROR;
    return 0.0;
  }
  else if (icu::number::impl::DecimalQuantity::isZeroish(this)
         && (icu::number::impl::DecimalQuantity::isNegative(this) & 1) != 0)
  {
    return -0.0;
  }
  else if (icu::number::impl::DecimalQuantity::fitsInLong(this, 0))
  {
    return (double)icu::number::impl::DecimalQuantity::toLong(this, 0);
  }
  else
  {
    return icu::number::impl::DecimalQuantity::toDouble(this);
  }
  return result;
}

void icu::numparse::impl::ParsedNumber::populateFormattable(icu::numparse::impl::ParsedNumber *this, icu::Formattable *a2, char a3)
{
  int v4;
  unint64_t v7;
  uint64_t *v8;
  int isNegative;
  unint64_t v10;
  double NaN;
  icu::number::impl::DecimalQuantity *v12;
  icu::number::impl::DecimalQuantity *v13;

  v4 = *((_DWORD *)this + 19);
  if ((v4 & 0x40) != 0)
  {
    NaN = uprv_getNaN();
LABEL_15:
    icu::Formattable::setDouble(a2, NaN);
    return;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v4 & 1) != 0)
      v10 = 0xFFF0000000000000;
    else
      v10 = 0x7FF0000000000000;
    goto LABEL_14;
  }
  if (icu::number::impl::DecimalQuantity::isZeroish(this))
  {
    isNegative = icu::number::impl::DecimalQuantity::isNegative(this);
    if ((a3 & 0x10) == 0)
    {
      if (isNegative)
      {
        v10 = 0x8000000000000000;
LABEL_14:
        NaN = *(double *)&v10;
        goto LABEL_15;
      }
    }
  }
  v12 = (icu::number::impl::DecimalQuantity *)icu::UMemory::operator new(v8, (icu::UMemory *)0x48, v7);
  v13 = v12;
  if (v12)
    icu::number::impl::DecimalQuantity::DecimalQuantity(v12, (uint64_t)this);
  icu::Formattable::adoptDecimalQuantity(a2, v13);
}

BOOL icu::numparse::impl::ParsedNumber::isBetterThan(icu::numparse::impl::ParsedNumber *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return *((_DWORD *)this + 18) > *((_DWORD *)a2 + 18);
}

uint64_t sub_18BD3630C(uint64_t a1, UChar **a2, uint64_t a3)
{
  icu::UVector **v6;
  UChar **v7;
  icu::UVector **v8;

  *(_QWORD *)a1 = off_1E22640B8;
  icu::UnicodeString::UnicodeString((icu::UnicodeString *)(a1 + 8), a2 + 89);
  sub_18BD32F04(a1 + 72, a2, a3, 48);
  icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher((icu::numparse::impl::IgnorablesMatcher *)(a1 + 272), 0x8000);
  *(_QWORD *)(a1 + 352) = off_1E2256B38;
  *(_WORD *)(a1 + 360) = 2;
  *(_QWORD *)(a1 + 416) = off_1E2256B38;
  *(_WORD *)(a1 + 424) = 2;
  v6 = (icu::UVector **)icu::unisets::get(11);
  if (icu::UnicodeSet::contains(v6, (const icu::UnicodeString *)(a2 + 49)))
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 352));
  else
    icu::UnicodeString::operator=((UChar **)(a1 + 352), a2 + 49);
  v7 = a2 + 57;
  v8 = (icu::UVector **)icu::unisets::get(12);
  if (icu::UnicodeSet::contains(v8, (const icu::UnicodeString *)v7))
    icu::UnicodeString::setToBogus((icu::UnicodeString *)(a1 + 416));
  else
    icu::UnicodeString::operator=((UChar **)(a1 + 416), v7);
  return a1;
}

BOOL sub_18BD36404(uint64_t a1, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this, UErrorCode *a4)
{
  int Offset;
  int CommonPrefixLength;
  uint64_t *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t *v15;
  const icu::UnicodeSet *v16;
  uint64_t *v17;
  char v18;
  const icu::UnicodeSet *v19;
  uint64_t *v20;
  char v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;

  if (!icu::numparse::impl::ParsedNumber::seenNumber(this) || (*((_BYTE *)this + 76) & 8) != 0)
    return 0;
  Offset = icu::StringSegment::getOffset(a2);
  CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 8));
  v10 = (uint64_t *)*(unsigned __int16 *)(a1 + 16);
  if (((unsigned __int16)v10 & 0x8000) != 0)
    v11 = *(_DWORD *)(a1 + 20);
  else
    v11 = v10 >> 5;
  v14 = icu::StringSegment::length(v10, a2);
  if (CommonPrefixLength != v11)
    return CommonPrefixLength == v14;
  if (v14 == CommonPrefixLength)
    return 1;
  icu::StringSegment::adjustOffset((uint64_t)a2, CommonPrefixLength);
  icu::numparse::impl::SymbolMatcher::match((icu::UnicodeSet **)(a1 + 272), a2, this, a4);
  if (!icu::StringSegment::length(v15, a2))
  {
LABEL_35:
    icu::StringSegment::setOffset((uint64_t)a2, Offset);
    return 1;
  }
  v16 = (const icu::UnicodeSet *)icu::unisets::get(11);
  if (!icu::StringSegment::startsWith(a2, v16))
  {
    v19 = (const icu::UnicodeSet *)icu::unisets::get(12);
    if (icu::StringSegment::startsWith(a2, v19))
    {
      icu::StringSegment::adjustOffsetByCodePoint(a2);
    }
    else
    {
      if (icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(a1 + 352)))
      {
        v23 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 352));
        v24 = *(unsigned __int16 *)(a1 + 360);
        if ((v24 & 0x8000) != 0)
          v25 = *(_DWORD *)(a1 + 364);
        else
          v25 = v24 >> 5;
        if (v23 != v25)
          goto LABEL_35;
        icu::StringSegment::adjustOffset((uint64_t)a2, v23);
        goto LABEL_13;
      }
      if (icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(a1 + 416)))
      {
        v26 = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(a1 + 416));
        v27 = *(unsigned __int16 *)(a1 + 424);
        if ((v27 & 0x8000) != 0)
          v28 = *(_DWORD *)(a1 + 428);
        else
          v28 = v27 >> 5;
        if (v26 != v28)
          goto LABEL_35;
        icu::StringSegment::adjustOffset((uint64_t)a2, v26);
      }
    }
    v18 = 1;
    goto LABEL_18;
  }
  icu::StringSegment::adjustOffsetByCodePoint(a2);
LABEL_13:
  v18 = -1;
LABEL_18:
  if (!icu::StringSegment::length(v17, a2))
    goto LABEL_35;
  icu::numparse::impl::SymbolMatcher::match((icu::UnicodeSet **)(a1 + 272), a2, this, a4);
  if (!icu::StringSegment::length(v20, a2))
    goto LABEL_35;
  v21 = *((_BYTE *)this + 8);
  *((_BYTE *)this + 8) = 0;
  v22 = icu::StringSegment::getOffset(a2);
  v12 = sub_18BD32F10(a1 + 72, a2, this, v18);
  *((_BYTE *)this + 8) = v21;
  if (icu::StringSegment::getOffset(a2) == v22)
    icu::StringSegment::setOffset((uint64_t)a2, Offset);
  else
    *((_DWORD *)this + 19) |= 8u;
  return v12;
}

BOOL sub_18BD3666C(uint64_t a1, icu::StringSegment *this)
{
  return icu::StringSegment::startsWith(this, (const icu::UnicodeString *)(a1 + 8));
}

uint64_t sub_18BD3667C@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<Scientific>");
}

void sub_18BD3668C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)a1 = off_1E22640B8;
  icu::UnicodeString::~UnicodeString(off_1E22640B8, (icu::UnicodeString *)(a1 + 416));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 352));
  *(_QWORD *)(a1 + 272) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 280));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 272));
  *(_QWORD *)(a1 + 72) = off_1E2263F80;
  sub_18BBBADF4((uint64_t *)(a1 + 264));
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 256), v3);
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 248), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 152));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 88));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD36738(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *(_QWORD *)a1 = off_1E22640B8;
  icu::UnicodeString::~UnicodeString(off_1E22640B8, (icu::UnicodeString *)(a1 + 416));
  icu::UnicodeString::~UnicodeString(v2, (icu::UnicodeString *)(a1 + 352));
  *(_QWORD *)(a1 + 272) = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 280));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 272));
  *(_QWORD *)(a1 + 72) = off_1E2263F80;
  sub_18BBBADF4((uint64_t *)(a1 + 264));
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 256), v3);
  sub_18BD33A18((icu::UnicodeSet **)(a1 + 248), v4);
  icu::UnicodeString::~UnicodeString(v5, (icu::UnicodeString *)(a1 + 152));
  icu::UnicodeString::~UnicodeString(v6, (icu::UnicodeString *)(a1 + 88));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)(a1 + 72));
  icu::UnicodeString::~UnicodeString(v7, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v8);
}

uint64_t icu::numparse::impl::SymbolMatcher::SymbolMatcher(uint64_t a1, UChar **a2, int a3)
{
  icu::UnicodeString *v5;
  icu::UVector **v6;

  *(_QWORD *)a1 = off_1E2264138;
  *(_QWORD *)(a1 + 8) = off_1E2256B38;
  v5 = (icu::UnicodeString *)(a1 + 8);
  *(_WORD *)(a1 + 16) = 2;
  v6 = (icu::UVector **)icu::unisets::get(a3);
  *(_QWORD *)(a1 + 72) = v6;
  if (icu::UnicodeSet::contains(v6, (const icu::UnicodeString *)a2))
    icu::UnicodeString::setToBogus(v5);
  else
    icu::UnicodeString::operator=((UChar **)v5, a2);
  return a1;
}

uint64_t icu::numparse::impl::SymbolMatcher::getSet(icu::numparse::impl::SymbolMatcher *this)
{
  return *((_QWORD *)this + 9);
}

BOOL icu::numparse::impl::SymbolMatcher::match(icu::UnicodeSet **this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3, UErrorCode *a4)
{
  int CommonPrefixLength;
  int v8;
  unsigned int v9;
  int CodePoint;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  icu::StringSegment *v14;

  if (((*((uint64_t (**)(icu::UnicodeSet **, icu::numparse::impl::ParsedNumber *))*this + 7))(this, a3) & 1) != 0)
    return 0;
  if (*((unsigned __int16 *)this + 8) < 0x20u)
  {
    v8 = 0;
    goto LABEL_7;
  }
  CommonPrefixLength = icu::StringSegment::getCommonPrefixLength(a2, (const icu::UnicodeString *)(this + 1));
  v8 = CommonPrefixLength;
  v9 = *((unsigned __int16 *)this + 8);
  if ((v9 & 0x8000) == 0)
  {
    if (CommonPrefixLength == v9 >> 5)
      goto LABEL_15;
LABEL_7:
    CodePoint = icu::StringSegment::getCodePoint(a2);
    if (CodePoint == -1)
      return v8 == icu::StringSegment::length(v11, a2);
    v12 = CodePoint;
    if (!icu::UnicodeSet::contains(this[9], CodePoint))
      return v8 == icu::StringSegment::length(v11, a2);
    if (v12 < 0x10000)
      v13 = 1;
    else
      v13 = 2;
    v14 = a2;
    goto LABEL_16;
  }
  if (CommonPrefixLength != *((_DWORD *)this + 5))
    goto LABEL_7;
LABEL_15:
  v14 = a2;
  v13 = v8;
LABEL_16:
  icu::StringSegment::adjustOffset((uint64_t)v14, v13);
  (*((void (**)(icu::UnicodeSet **, icu::StringSegment *, icu::numparse::impl::ParsedNumber *))*this + 8))(this, a2, a3);
  return 0;
}

BOOL icu::numparse::impl::SymbolMatcher::smokeTest(const icu::UnicodeSet **this, const icu::StringSegment *a2)
{
  return icu::StringSegment::startsWith(a2, this[9])
      || icu::StringSegment::startsWith(a2, (const icu::UnicodeString *)(this + 1));
}

uint64_t icu::numparse::impl::SymbolMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

icu::numparse::impl::IgnorablesMatcher *icu::numparse::impl::IgnorablesMatcher::IgnorablesMatcher(icu::numparse::impl::IgnorablesMatcher *this, __int16 a2)
{
  int v3;
  void *v4;
  UChar *v6;
  __int16 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = (UChar *)off_1E2256B38;
  v7 = 2;
  if (a2 < 0)
    v3 = 2;
  else
    v3 = 1;
  icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, &v6, v3);
  icu::UnicodeString::~UnicodeString(v4, (icu::UnicodeString *)&v6);
  *(_QWORD *)this = off_1E2264190;
  return this;
}

uint64_t icu::numparse::impl::IgnorablesMatcher::isFlexible(icu::numparse::impl::IgnorablesMatcher *this)
{
  return 1;
}

uint64_t icu::numparse::impl::IgnorablesMatcher::toString@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<Ignorables>");
}

uint64_t icu::numparse::impl::IgnorablesMatcher::isDisabled(icu::numparse::impl::IgnorablesMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return 0;
}

_QWORD *sub_18BD36A84(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, (UChar **)(a2 + 904), 15);
  *result = off_1E22641E8;
  return result;
}

uint64_t sub_18BD36AAC(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 76) >> 7;
}

uint64_t sub_18BD36AB8(int a1, const icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this)
{
  *((_DWORD *)this + 19) |= 0x80u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(this, a2);
}

uint64_t icu::numparse::impl::MinusSignMatcher::MinusSignMatcher(icu::numparse::impl::MinusSignMatcher *this, UChar **a2, char a3)
{
  uint64_t result;

  result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 49, 11);
  *(_QWORD *)result = off_1E2264240;
  *(_BYTE *)(result + 80) = a3;
  return result;
}

{
  uint64_t result;

  result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 49, 11);
  *(_QWORD *)result = off_1E2264240;
  *(_BYTE *)(result + 80) = a3;
  return result;
}

uint64_t icu::numparse::impl::MinusSignMatcher::isDisabled(icu::numparse::impl::MinusSignMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  if (*((_BYTE *)this + 80))
    return 0;
  else
    return icu::numparse::impl::ParsedNumber::seenNumber(a2);
}

uint64_t icu::numparse::impl::MinusSignMatcher::accept(icu::numparse::impl::MinusSignMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 1u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

_QWORD *sub_18BD36B68(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, (UChar **)(a2 + 968), 0);
  *result = off_1E2264298;
  return result;
}

uint64_t sub_18BD36B90(int a1, icu::numparse::impl::ParsedNumber *this)
{
  return icu::numparse::impl::ParsedNumber::seenNumber(this);
}

uint64_t sub_18BD36B98(int a1, const icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *this)
{
  *((_DWORD *)this + 19) |= 0x40u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(this, a2);
}

_QWORD *sub_18BD36BAC(uint64_t a1, UChar **a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::numparse::impl::SymbolMatcher::SymbolMatcher(a1, a2, 0);
  *result = off_1E22642F0;
  return result;
}

uint64_t sub_18BD36BD0()
{
  return 1;
}

uint64_t sub_18BD36BD8()
{
  return 0;
}

_QWORD *icu::numparse::impl::PercentMatcher::PercentMatcher(icu::numparse::impl::PercentMatcher *this, UChar **a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 25, 13);
  *result = off_1E2264348;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 25, 13);
  *result = off_1E2264348;
  return result;
}

uint64_t icu::numparse::impl::PercentMatcher::isDisabled(icu::numparse::impl::PercentMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return (*((unsigned __int8 *)a2 + 76) >> 1) & 1;
}

uint64_t icu::numparse::impl::PercentMatcher::accept(icu::numparse::impl::PercentMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 2u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

_QWORD *icu::numparse::impl::PermilleMatcher::PermilleMatcher(icu::numparse::impl::PermilleMatcher *this, UChar **a2)
{
  _QWORD *result;

  result = (_QWORD *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 97, 14);
  *result = off_1E22643A0;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 97, 14);
  *result = off_1E22643A0;
  return result;
}

uint64_t icu::numparse::impl::PermilleMatcher::isDisabled(icu::numparse::impl::PermilleMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  return (*((unsigned __int8 *)a2 + 76) >> 2) & 1;
}

uint64_t icu::numparse::impl::PermilleMatcher::accept(icu::numparse::impl::PermilleMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  *((_DWORD *)a3 + 19) |= 4u;
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

uint64_t icu::numparse::impl::PlusSignMatcher::PlusSignMatcher(icu::numparse::impl::PlusSignMatcher *this, UChar **a2, char a3)
{
  uint64_t result;

  result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 57, 12);
  *(_QWORD *)result = off_1E22643F8;
  *(_BYTE *)(result + 80) = a3;
  return result;
}

{
  uint64_t result;

  result = icu::numparse::impl::SymbolMatcher::SymbolMatcher((uint64_t)this, a2 + 57, 12);
  *(_QWORD *)result = off_1E22643F8;
  *(_BYTE *)(result + 80) = a3;
  return result;
}

uint64_t icu::numparse::impl::PlusSignMatcher::isDisabled(icu::numparse::impl::PlusSignMatcher *this, const icu::numparse::impl::ParsedNumber *a2)
{
  if (*((_BYTE *)this + 80))
    return 0;
  else
    return icu::numparse::impl::ParsedNumber::seenNumber(a2);
}

uint64_t icu::numparse::impl::PlusSignMatcher::accept(icu::numparse::impl::PlusSignMatcher *this, icu::StringSegment *a2, icu::numparse::impl::ParsedNumber *a3)
{
  return icu::numparse::impl::ParsedNumber::setCharsConsumed(a3, a2);
}

void sub_18BD36D54(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD36D84(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD36DB8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD36DE8(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD36E1C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD36E4C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD36E80(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD36EB0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD36EE4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD36F14(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD36F48(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD36F78(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD36FAC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD36FDC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD37010(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString((icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD37040(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264138;
  icu::UnicodeString::~UnicodeString(off_1E2264138, (icu::UnicodeString *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

void sub_18BD37074(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 88) & 1) != 0 || (*(_WORD *)(a2 + 152) & 1) != 0)
    *(_DWORD *)(a2 + 76) |= 0x100u;
}

uint64_t sub_18BD37094@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18BD370A4(uint64_t a1, uint64_t a2)
{
  if (!*(_WORD *)(a2 + 208))
    *(_DWORD *)(a2 + 76) |= 0x100u;
}

uint64_t sub_18BD370C0@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<ReqCurrency>");
}

uint64_t sub_18BD370D0(uint64_t result, char a2)
{
  *(_QWORD *)result = &off_1E2264548;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_18BD370E4(uint64_t result, uint64_t a2)
{
  unsigned int v2;

  v2 = *(_DWORD *)(a2 + 76);
  if (((v2 >> 5) & 1) != *(_BYTE *)(result + 8))
    *(_DWORD *)(a2 + 76) = v2 | 0x100;
  return result;
}

uint64_t sub_18BD37104@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)L"<ReqDecimal>");
}

uint64_t sub_18BD37114(int a1, icu::numparse::impl::ParsedNumber *this)
{
  uint64_t result;

  result = icu::numparse::impl::ParsedNumber::seenNumber(this);
  if ((result & 1) == 0)
    *((_DWORD *)this + 19) |= 0x100u;
  return result;
}

uint64_t sub_18BD37148@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

_QWORD *sub_18BD37158(_QWORD *a1, uint64_t a2)
{
  *a1 = off_1E2264590;
  icu::number::Scale::Scale((uint64_t)(a1 + 1), a2);
  return a1;
}

void sub_18BD37188(uint64_t a1, icu::number::impl::DecimalQuantity *a2)
{
  if (!*((_BYTE *)a2 + 8))
    icu::number::Scale::applyReciprocalTo((icu::number::Scale *)(a1 + 8), a2);
}

uint64_t sub_18BD3719C@<X0>(uint64_t a1@<X8>)
{
  return icu::UnicodeString::UnicodeString(a1, (uint64_t)"<");
}

void sub_18BD371B0(icu::numparse::impl::NumberParseMatcher *a1)
{
  void *v1;

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);
  icu::UMemory::operator delete(v1);
}

uint64_t sub_18BD371C4()
{
  return 0;
}

uint64_t sub_18BD371CC()
{
  return 0;
}

void sub_18BD371D8(icu::numparse::impl::NumberParseMatcher *a1)
{
  void *v1;

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD371F0(icu::numparse::impl::NumberParseMatcher *a1)
{
  void *v1;

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD37208(icu::numparse::impl::NumberParseMatcher *a1)
{
  void *v1;

  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher(a1);
  icu::UMemory::operator delete(v1);
}

void sub_18BD3721C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E2264590;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
}

void sub_18BD3724C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E2264590;
  icu::number::Scale::~Scale((icu::number::Scale *)(a1 + 8));
  icu::numparse::impl::NumberParseMatcher::~NumberParseMatcher((icu::numparse::impl::NumberParseMatcher *)a1);
  icu::UMemory::operator delete(v2);
}

uint64_t *unumrf_openResult(_DWORD *a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v5;

  v2 = (uint64_t *)*a1;
  if ((int)v2 > 0)
    return 0;
  v5 = icu::UMemory::operator new(v2, (icu::UMemory *)0x1F8, a2);
  v3 = v5;
  if (v5)
  {
    *(_DWORD *)v5 = 1430672896;
    v5[1] = 0;
    *((_DWORD *)v5 + 4) = 1178881536;
    v5[3] = (uint64_t)off_1E2263380;
    v5[4] = (uint64_t)(v5 + 6);
    *((_DWORD *)v5 + 10) = 0;
    sub_18BD37BA0((uint64_t)(v5 + 6));
    v3[1] = (uint64_t)(v3 + 3);
  }
  else
  {
    *a1 = 7;
  }
  return v3;
}

uint64_t unumrf_resultAsValue(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if (result)
  {
    if (*(_DWORD *)(result + 16) == 1178881536)
      goto LABEL_8;
    v2 = 3;
  }
  else
  {
    v2 = 1;
  }
  result = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1)
    return 0;
  return result;
}

void unumrf_closeResult(_DWORD *a1)
{
  if (a1)
  {
    if (a1[4] == 1178881536)
    {
      *((_QWORD *)a1 + 4) = 0;
      sub_18BD215C0((void **)a1 + 6);
      icu::number::FormattedNumberRange::~FormattedNumberRange((icu::number::FormattedNumberRange *)(a1 + 6));
      a1[4] = 0;
      *a1 = 0;
      icu::UMemory::operator delete(a1);
    }
  }
}

uint64_t sub_18BD373C4(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0)
  {
    a1 = 0;
    goto LABEL_8;
  }
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 1178881536)
      goto LABEL_8;
    v2 = 3;
  }
  else
  {
    v2 = 1;
  }
  a1 = 0;
  *a2 = v2;
LABEL_8:
  if (v2 >= 1)
    return 0;
  else
    return a1 + 48;
}

uint64_t *unumrf_openForSkeletonWithCollapseAndIdentityFallback(uint64_t a1)
{
  uint64_t v1;
  UParseError *v2;
  UParseError *v3;
  const icu::UnicodeString *v4;
  const icu::UnicodeString *v5;
  const char *v6;
  const char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  UErrorCode *v17;
  const icu::UnicodeString *v18;
  void *v19;
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[224];
  _BYTE v34[1216];
  _BYTE v35[1216];
  _DWORD v36[304];
  _DWORD v37[304];
  _BYTE v38[72];
  uint64_t *v39;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = v1;
  v39 = (uint64_t *)*MEMORY[0x1E0C80C00];
  v15 = icu::UMemory::operator new(v39, (icu::UMemory *)0x4C8, v12);
  v16 = v15;
  if (v15)
  {
    bzero(v15, 0x4C8uLL);
    *(_DWORD *)v16 = 1314014720;
    sub_18BD37BF0((uint64_t)(v16 + 1));
    v16[152] = 0;
    memset(v38, 0, 64);
    v24 = v14;
    icu::UnicodeString::UnicodeString(v38, v13 == -1, &v24);
    v21 = v24;
    v23 = 0;
    memset(v22, 0, sizeof(v22));
    icu::Locale::Locale(&v21, (icu::Locale *)v33, v7, 0, 0, 0);
    icu::number::NumberRangeFormatter::withLocale((icu::number::NumberRangeFormatter *)v33, (uint64_t)v34);
    if (v5)
      v18 = v5;
    else
      v18 = (const icu::UnicodeString *)v22;
    icu::number::NumberFormatter::forSkeleton(v25, (icu::number::NumberFormatter *)v38, v18, v3, v17);
    icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::numberFormatterBoth(v35, (uint64_t)v34, (uint64_t)v25);
    icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::collapse(v36, (uint64_t)v35, v11);
    icu::number::NumberRangeFormatterSettings<icu::number::LocalizedNumberRangeFormatter>::identityFallback(v37, (uint64_t)v36, v9);
    icu::number::LocalizedNumberRangeFormatter::operator=((uint64_t)(v16 + 1), (uint64_t)v37);
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)v37);
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)v36);
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)v35);
    icu::Locale::~Locale((icu::Locale *)&v32);
    icu::number::impl::StringProp::~StringProp(&v31);
    icu::number::impl::StringProp::~StringProp(&v30);
    icu::number::Scale::~Scale((icu::number::Scale *)&v29);
    icu::number::impl::SymbolsWrapper::~SymbolsWrapper((icu::number::impl::SymbolsWrapper *)&v28);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v27);
    icu::MeasureUnit::~MeasureUnit((icu::MeasureUnit *)&v26);
    icu::number::LocalizedNumberRangeFormatter::~LocalizedNumberRangeFormatter((icu::number::LocalizedNumberRangeFormatter *)v34);
    icu::Locale::~Locale((icu::Locale *)v33);
    icu::UnicodeString::~UnicodeString(v19, (icu::UnicodeString *)v38);
  }
  else
  {
    v3->line = 7;
  }
  return v16;
}

_DWORD *unumrf_formatDoubleRange(_DWORD *result, uint64_t a2, UErrorCode *a3, double a4, double a5)
{
  _DWORD *v6;
  _DWORD *v10;
  void **v11;
  void **v12;
  int v13;

  if (*(int *)a3 <= 0)
  {
    v6 = result;
    if (result)
    {
      if (*result != 1314014720)
      {
LABEL_8:
        v13 = 3;
        goto LABEL_9;
      }
      if (a2)
      {
        if (*(_DWORD *)(a2 + 16) == 1178881536)
        {
          v10 = (_DWORD *)(a2 + 48);
          icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a2 + 48));
          v11 = (void **)(a2 + 352);
          icu::number::impl::DecimalQuantity::clear((void **)(a2 + 352));
          v12 = (void **)(a2 + 424);
          icu::number::impl::DecimalQuantity::clear(v12);
          icu::number::impl::DecimalQuantity::setToDouble(v11, a4);
          icu::number::impl::DecimalQuantity::setToDouble(v12, a5);
          return icu::number::LocalizedNumberRangeFormatter::formatImpl((icu::number::LocalizedNumberRangeFormatter *)(v6 + 2), v10, a4 == a5, a3);
        }
        goto LABEL_8;
      }
    }
    v13 = 1;
LABEL_9:
    *a3 = v13;
  }
  return result;
}

_DWORD *unumrf_formatDecimalRange(_DWORD *result, const char *a2, int a3, const char *a4, int a5, uint64_t a6, UErrorCode *a7)
{
  _DWORD *v8;
  _DWORD *v14;
  uint64_t v15;
  void **v16;
  int v17;

  if (*(int *)a7 <= 0)
  {
    v8 = result;
    if (result)
    {
      if (*result != 1314014720)
      {
LABEL_8:
        v17 = 3;
        goto LABEL_9;
      }
      if (a6)
      {
        if (*(_DWORD *)(a6 + 16) == 1178881536)
        {
          v14 = (_DWORD *)(a6 + 48);
          icu::FormattedValueStringBuilderImpl::resetString((icu::FormattedValueStringBuilderImpl *)(a6 + 48));
          v15 = a6 + 352;
          icu::number::impl::DecimalQuantity::clear((void **)(a6 + 352));
          v16 = (void **)(a6 + 424);
          icu::number::impl::DecimalQuantity::clear(v16);
          icu::number::impl::DecimalQuantity::setToDecNumber(v15, a2, a3, a7);
          icu::number::impl::DecimalQuantity::setToDecNumber((uint64_t)v16, a4, a5, a7);
          return icu::number::LocalizedNumberRangeFormatter::formatImpl((icu::number::LocalizedNumberRangeFormatter *)(v8 + 2), v14, a2 == a4, a7);
        }
        goto LABEL_8;
      }
    }
    v17 = 1;
LABEL_9:
    *a7 = v17;
  }
  return result;
}

