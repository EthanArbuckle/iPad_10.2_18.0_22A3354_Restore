void ___ZNK4coex13CommandDriver8CallbackclEN3ctu2cf11CFSharedRefI9__CFErrorEENS4_IK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CoexTech>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::APTTable>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Policy>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimitTimeout>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCTxFrameDenialsParameters>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RbThresholdForAdvTxNotice>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxFrameDenialsParameters>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimitTimeout>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimit>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LinkPathLossThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::FilteredRBThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimit>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::PowerThreshold>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBFilterAlpha>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TechInstance>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBThreshold>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTEInstance>::getSize()
{
  return 7;
}

void __destroy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4coex13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void tlv::parseV<nas::tlv::abm::BBSearchFreqList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(_QWORD *)v10 = *(_QWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3CB480C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3CB47F4);
}

void sub_1B3CB4820(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void coex::QMICommandDriver::setPolicy_sync(uint64_t a1, const void **a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  const void *v11;
  void *v12;
  uint64_t *v13;
  const void *v14;
  void *v15;
  uint64_t *v16;
  const void *v17;
  void *v18;
  uint64_t *v19;
  const void *v20;
  void *v21;
  uint64_t *v22;
  const void *v23;
  void *v24;
  uint64_t *v25;
  const void *v26;
  void *v27;
  uint64_t *v28;
  const void *v29;
  void *v30;
  uint64_t *v31;
  const void *v32;
  void *v33;
  uint64_t *v34;
  const void *v35;
  void *v36;
  uint64_t *v37;
  const void *v38;
  void *v39;
  uint64_t *v40;
  const void *v41;
  void *v42;
  uint64_t *v43;
  const void *v44;
  void *v45;
  uint64_t *v46;
  const void *v47;
  void *v48;
  uint64_t *v49;
  const void *v50;
  void *v51;
  uint64_t *v52;
  const void *v53;
  void *v54;
  uint64_t *v55;
  const void *v56;
  void *v57;
  uint64_t *v58;
  const void *v59;
  void *v60;
  uint64_t *v61;
  const void *v62;
  void *v63;
  uint64_t *v64;
  const void *v65;
  void *v66;
  uint64_t *v67;
  const void *v68;
  void *v69;
  uint64_t *v70;
  const void *v71;
  const void *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t **v75;
  uint64_t **v76;
  BOOL v77;
  CFComparisonResult v78;
  uint64_t **v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t *v82;
  void *v83;
  uint64_t *v84;
  unint64_t Count;
  unint64_t v86;
  void *v87;
  void *v88;
  uint64_t i;
  const __CFString *v90;
  const void *v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t *v94;
  uint64_t **v95;
  CFComparisonResult v96;
  uint64_t v97;
  uint64_t **v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  void *v102;
  uint64_t *v103;
  NSObject *v104;
  void *v105;
  const void *v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[5];
  void *v111;
  dispatch_object_t object;
  const void *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  void *v117;
  uint64_t **v118;
  uint64_t *v119;
  uint64_t v120;
  const void *v121;
  unint64_t v122;
  _QWORD v123[5];
  _QWORD v124[5];
  _QWORD v125[5];
  _QWORD v126[5];
  _QWORD v127[5];
  _QWORD v128[5];
  _QWORD v129[5];
  _QWORD v130[5];
  _QWORD v131[5];
  _QWORD v132[5];
  _QWORD v133[5];
  _QWORD v134[5];
  _QWORD v135[5];
  _QWORD v136[5];
  _QWORD v137[5];
  _QWORD v138[5];
  _QWORD v139[5];
  _QWORD v140[5];
  _QWORD v141[5];
  _QWORD aBlock[5];
  uint64_t *v143;
  _QWORD *v144[2];
  uint64_t *v145[5];
  __int128 buf;
  uint64_t v147;
  uint64_t (*v148)();
  void (*v149)(uint64_t);
  _OWORD v150[2];
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v106 = *a2;
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v106;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting policy with: %@", (uint8_t *)&buf, 0xCu);
  }
  v108 = a1;
  v109 = a3;
  v144[0] = 0;
  v144[1] = 0;
  v143 = (uint64_t *)v144;
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v147 = 0x4802000000;
  v148 = __Block_byref_object_copy__67;
  v149 = __Block_byref_object_dispose__68;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v150[0] = v7;
  v150[1] = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v150);
  v8 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  aBlock[3] = &unk_1E66DCFD0;
  aBlock[4] = &buf;
  v9 = _Block_copy(aBlock);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF210];
  v10 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF210], v145);
  v11 = (const void *)v10[5];
  v10[5] = (uint64_t)v9;
  if (v11)
    _Block_release(v11);
  v141[0] = v8;
  v141[1] = 0x40000000;
  v141[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_73;
  v141[3] = &unk_1E66DD028;
  v141[4] = &buf;
  v12 = _Block_copy(v141);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF360];
  v13 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF360], v145);
  v14 = (const void *)v13[5];
  v13[5] = (uint64_t)v12;
  if (v14)
    _Block_release(v14);
  v140[0] = v8;
  v140[1] = 0x40000000;
  v140[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_78;
  v140[3] = &unk_1E66DD080;
  v140[4] = &buf;
  v15 = _Block_copy(v140);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF2F0];
  v16 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF2F0], v145);
  v17 = (const void *)v16[5];
  v16[5] = (uint64_t)v15;
  if (v17)
    _Block_release(v17);
  v139[0] = v8;
  v139[1] = 0x40000000;
  v139[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_83;
  v139[3] = &unk_1E66DD0D8;
  v139[4] = &buf;
  v18 = _Block_copy(v139);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF6E0];
  v19 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF6E0], v145);
  v20 = (const void *)v19[5];
  v19[5] = (uint64_t)v18;
  if (v20)
    _Block_release(v20);
  v138[0] = v8;
  v138[1] = 0x40000000;
  v138[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_88;
  v138[3] = &unk_1E66DD130;
  v138[4] = &buf;
  v21 = _Block_copy(v138);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF5B0];
  v22 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF5B0], v145);
  v23 = (const void *)v22[5];
  v22[5] = (uint64_t)v21;
  if (v23)
    _Block_release(v23);
  v137[0] = v8;
  v137[1] = 0x40000000;
  v137[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_93;
  v137[3] = &unk_1E66DD188;
  v137[4] = &buf;
  v24 = _Block_copy(v137);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF238];
  v25 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF238], v145);
  v26 = (const void *)v25[5];
  v25[5] = (uint64_t)v24;
  if (v26)
    _Block_release(v26);
  v136[0] = v8;
  v136[1] = 0x40000000;
  v136[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_98;
  v136[3] = &unk_1E66DD1E0;
  v136[4] = &buf;
  v27 = _Block_copy(v136);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF508];
  v28 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF508], v145);
  v29 = (const void *)v28[5];
  v28[5] = (uint64_t)v27;
  if (v29)
    _Block_release(v29);
  v135[0] = v8;
  v135[1] = 0x40000000;
  v135[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_103;
  v135[3] = &unk_1E66DD238;
  v135[4] = &buf;
  v30 = _Block_copy(v135);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF3C8];
  v31 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF3C8], v145);
  v32 = (const void *)v31[5];
  v31[5] = (uint64_t)v30;
  if (v32)
    _Block_release(v32);
  v134[0] = v8;
  v134[1] = 0x40000000;
  v134[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_108;
  v134[3] = &unk_1E66DD290;
  v134[4] = &buf;
  v33 = _Block_copy(v134);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF4E8];
  v34 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF4E8], v145);
  v35 = (const void *)v34[5];
  v34[5] = (uint64_t)v33;
  if (v35)
    _Block_release(v35);
  v133[0] = v8;
  v133[1] = 0x40000000;
  v133[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_113;
  v133[3] = &unk_1E66DD2E8;
  v133[4] = &buf;
  v36 = _Block_copy(v133);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF340];
  v37 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF340], v145);
  v38 = (const void *)v37[5];
  v37[5] = (uint64_t)v36;
  if (v38)
    _Block_release(v38);
  v132[0] = v8;
  v132[1] = 0x40000000;
  v132[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_118;
  v132[3] = &unk_1E66DD340;
  v132[4] = &buf;
  v39 = _Block_copy(v132);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF440];
  v40 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF440], v145);
  v41 = (const void *)v40[5];
  v40[5] = (uint64_t)v39;
  if (v41)
    _Block_release(v41);
  v131[0] = v8;
  v131[1] = 0x40000000;
  v131[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_123;
  v131[3] = &unk_1E66DD398;
  v131[4] = &buf;
  v42 = _Block_copy(v131);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF588];
  v43 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF588], v145);
  v44 = (const void *)v43[5];
  v43[5] = (uint64_t)v42;
  if (v44)
    _Block_release(v44);
  v130[0] = v8;
  v130[1] = 0x40000000;
  v130[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_128;
  v130[3] = &unk_1E66DD3F0;
  v130[4] = &buf;
  v45 = _Block_copy(v130);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF680];
  v46 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF680], v145);
  v47 = (const void *)v46[5];
  v46[5] = (uint64_t)v45;
  if (v47)
    _Block_release(v47);
  v129[0] = v8;
  v129[1] = 0x40000000;
  v129[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_133;
  v129[3] = &unk_1E66DD448;
  v129[4] = &buf;
  v48 = _Block_copy(v129);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF6A8];
  v49 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF6A8], v145);
  v50 = (const void *)v49[5];
  v49[5] = (uint64_t)v48;
  if (v50)
    _Block_release(v50);
  v128[0] = v8;
  v128[1] = 0x40000000;
  v128[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_138;
  v128[3] = &unk_1E66DD4A0;
  v128[4] = &buf;
  v51 = _Block_copy(v128);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF5D8];
  v52 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF5D8], v145);
  v53 = (const void *)v52[5];
  v52[5] = (uint64_t)v51;
  if (v53)
    _Block_release(v53);
  v54 = _Block_copy(&__block_literal_global_0);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF608];
  v55 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF608], v145);
  v56 = (const void *)v55[5];
  v55[5] = (uint64_t)v54;
  if (v56)
    _Block_release(v56);
  v127[0] = v8;
  v127[1] = 0x40000000;
  v127[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_145;
  v127[3] = &unk_1E66DD538;
  v127[4] = &buf;
  v57 = _Block_copy(v127);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF2E8];
  v58 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF2E8], v145);
  v59 = (const void *)v58[5];
  v58[5] = (uint64_t)v57;
  if (v59)
    _Block_release(v59);
  v126[0] = v8;
  v126[1] = 0x40000000;
  v126[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_149;
  v126[3] = &unk_1E66DD590;
  v126[4] = &buf;
  v60 = _Block_copy(v126);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF248];
  v61 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF248], v145);
  v62 = (const void *)v61[5];
  v61[5] = (uint64_t)v60;
  if (v62)
    _Block_release(v62);
  v125[0] = v8;
  v125[1] = 0x40000000;
  v125[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_154;
  v125[3] = &unk_1E66DD5E8;
  v125[4] = &buf;
  v63 = _Block_copy(v125);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF320];
  v64 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF320], v145);
  v65 = (const void *)v64[5];
  v64[5] = (uint64_t)v63;
  if (v65)
    _Block_release(v65);
  v124[0] = v8;
  v124[1] = 0x40000000;
  v124[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_159;
  v124[3] = &unk_1E66DD640;
  v124[4] = &buf;
  v66 = _Block_copy(v124);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF6E8];
  v67 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF6E8], v145);
  v68 = (const void *)v67[5];
  v67[5] = (uint64_t)v66;
  if (v68)
    _Block_release(v68);
  v123[0] = v8;
  v123[1] = 0x40000000;
  v123[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_164;
  v123[3] = &unk_1E66DD698;
  v123[4] = &buf;
  v69 = _Block_copy(v123);
  v145[0] = (uint64_t *)MEMORY[0x1E0DDF648];
  v70 = std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(&v143, MEMORY[0x1E0DDF648], v145);
  v71 = (const void *)v70[5];
  v70[5] = (uint64_t)v69;
  if (v71)
    _Block_release(v71);
  v72 = *a2;
  v121 = v72;
  v122 = 0xAAAAAAAAAAAAAAAALL;
  if (v72)
    CFRetain(v72);
  v119 = 0;
  v120 = 0;
  v118 = &v119;
  v73 = v143;
  if (v143 != (uint64_t *)v144)
  {
    while (1)
    {
      v74 = v119;
      if (v118 == &v119)
      {
        v76 = &v119;
      }
      else
      {
        v75 = &v119;
        if (v119)
        {
          do
          {
            v76 = (uint64_t **)v74;
            v74 = (uint64_t *)v74[1];
          }
          while (v74);
        }
        else
        {
          do
          {
            v76 = (uint64_t **)v75[2];
            v77 = *v76 == (uint64_t *)v75;
            v75 = v76;
          }
          while (v77);
        }
        v78 = CFStringCompare((CFStringRef)v76[4], (CFStringRef)v73[4], 0);
        v74 = v119;
        if ((v78 & 0x8000000000000000) == 0)
        {
          v79 = &v119;
          v80 = &v119;
          if (!v119)
            goto LABEL_69;
          v79 = &v119;
          while (1)
          {
            while (1)
            {
              v80 = (uint64_t **)v74;
              if ((CFStringCompare((CFStringRef)v73[4], (CFStringRef)v74[4], 0) & 0x8000000000000000) == 0)
                break;
              v74 = *v80;
              v79 = v80;
              if (!*v80)
                goto LABEL_69;
            }
            if ((CFStringCompare((CFStringRef)v80[4], (CFStringRef)v73[4], 0) & 0x8000000000000000) == 0)
              goto LABEL_66;
            v79 = v80 + 1;
            v74 = v80[1];
            if (!v74)
              goto LABEL_69;
          }
        }
      }
      v79 = &v119;
      v80 = &v119;
      if (!v74)
        goto LABEL_69;
      v79 = v76 + 1;
      v80 = v76;
LABEL_66:
      if (*v79)
      {
        v81 = (uint64_t *)v73[1];
        if (!v81)
          goto LABEL_76;
        goto LABEL_74;
      }
LABEL_69:
      v82 = (uint64_t *)operator new(0x30uLL);
      v82[4] = v73[4];
      v83 = (void *)v73[5];
      if (v83)
        v83 = _Block_copy(v83);
      v82[5] = (uint64_t)v83;
      *v82 = 0;
      v82[1] = 0;
      v82[2] = (uint64_t)v80;
      *v79 = v82;
      if (*v118)
      {
        v118 = (uint64_t **)*v118;
        v82 = *v79;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v119, v82);
      ++v120;
      v81 = (uint64_t *)v73[1];
      if (!v81)
      {
        do
        {
LABEL_76:
          v84 = (uint64_t *)v73[2];
          v77 = *v84 == (_QWORD)v73;
          v73 = v84;
        }
        while (!v77);
        goto LABEL_49;
      }
      do
      {
LABEL_74:
        v84 = v81;
        v81 = (uint64_t *)*v81;
      }
      while (v81);
LABEL_49:
      v73 = v84;
      if (v84 == (uint64_t *)v144)
      {
        v72 = v121;
        break;
      }
    }
  }
  Count = CFDictionaryGetCount((CFDictionaryRef)v72);
  v86 = Count;
  if ((Count & 0x8000000000000000) != 0)
  {
    v122 = 0;
  }
  else
  {
    if (Count)
    {
      if (Count >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v87 = operator new(8 * Count);
      bzero(v87, 8 * v86);
      v88 = operator new(8 * v86);
      bzero(v88, 8 * v86);
    }
    else
    {
      v87 = 0;
      v88 = 0;
    }
    v107 = v72;
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v72, (const void **)v87, (const void **)v88);
    if (v86)
    {
      for (i = 0; i != v86; ++i)
      {
        v90 = (const __CFString *)*((_QWORD *)v87 + i);
        v91 = (const void *)*((_QWORD *)v88 + i);
        v113 = v91;
        if (v91)
          CFRetain(v91);
        v92 = v119;
        if (v119)
        {
          v93 = &v119;
          do
          {
            v94 = v92;
            v95 = v93;
            v96 = CFStringCompare((CFStringRef)v92[4], v90, 0);
            v97 = v96;
            v98 = (uint64_t **)(v94 + 1);
            if (v96 < kCFCompareEqualTo)
            {
              v93 = v95;
            }
            else
            {
              v98 = (uint64_t **)v94;
              v93 = (uint64_t **)v94;
            }
            v92 = *v98;
          }
          while (v92);
          if (v93 != &v119)
          {
            v99 = v96 >= kCFCompareEqualTo ? v94 : (uint64_t *)v95;
            if ((CFStringCompare(v90, (CFStringRef)v99[4], 0) & 0x8000000000000000) == 0)
            {
              if (v97 >= 0)
                v100 = v94;
              else
                v100 = v95;
              v101 = v100[5];
              v145[0] = (uint64_t *)v91;
              if (v91)
                CFRetain(v91);
              (*(void (**)(uint64_t, uint64_t **))(v101 + 16))(v101, v145);
              if (v145[0])
                CFRelease(v145[0]);
            }
          }
        }
        if (v91)
          CFRelease(v91);
      }
    }
    v122 = 0;
    if (v88)
      operator delete(v88);
    v72 = v107;
    if (v87)
      operator delete(v87);
  }
  std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(v119);
  if (v72)
    CFRelease(v72);
  v113 = (const void *)(v108 + 192);
  v114 = QMIServiceMsg::create();
  v115 = 25000;
  v116 = 0;
  v117 = 0;
  v110[0] = MEMORY[0x1E0C809B0];
  v110[1] = 1174405120;
  v110[2] = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_169;
  v110[3] = &__block_descriptor_tmp_171_0;
  v110[4] = v108;
  v102 = *(void **)v109;
  if (*(_QWORD *)v109)
    v102 = _Block_copy(v102);
  v103 = (uint64_t *)MEMORY[0x1E0C809B0];
  v104 = *(NSObject **)(v109 + 8);
  v111 = v102;
  object = v104;
  if (v104)
    dispatch_retain(v104);
  v145[0] = v103;
  v145[1] = (uint64_t *)0x40000000;
  v145[2] = (uint64_t *)___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetPolicy8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v145[3] = (uint64_t *)&unk_1E66DF3B8;
  v145[4] = v110;
  v105 = _Block_copy(v145);
  v117 = v105;
  if (v114)
  {
    qmi::Client::send();
    v105 = v117;
  }
  if (v105)
    _Block_release(v105);
  if (object)
    dispatch_release(object);
  if (v111)
    _Block_release(v111);
  _Block_object_dispose(&buf, 8);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v150);
  std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(v144[0]);
}

void sub_1B3CB5558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,_QWORD *a27,uint64_t a28,const void *a29,__int16 a30,char a31,char a32)
{
  void *v32;
  qmi::MutableMessageBase *v33;
  uint64_t v34;

  operator delete(v32);
  std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(a27);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a29);
  _Block_object_dispose((const void *)(v34 - 192), 8);
  qmi::MutableMessageBase::~MutableMessageBase(v33);
  std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(*(_QWORD **)(v34 - 248));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(_QWORD *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(*a1);
    std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::destroy(a1[1]);
    v2 = (const void *)a1[5];
    if (v2)
      _Block_release(v2);
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,std::__map_value_compare<__CFString const*,std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>,coex::CFStringCompareFunctor,true>,std::allocator<std::__value_type<__CFString const*,dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<void const>)>>>>::__emplace_unique_key_args<__CFString const*,std::piecewise_construct_t const&,std::tuple<__CFString const* const&>,std::tuple<>>(uint64_t **a1, CFStringRef *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = (uint64_t)(a1 + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = **a3;
    v9[5] = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v8;
    *v6 = v9;
    v10 = (uint64_t *)**a1;
    v11 = v9;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v9;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t)v5;
      if ((CFStringCompare(*a2, (CFStringRef)v5[4], 0) & 0x8000000000000000) == 0)
        break;
      v5 = *(uint64_t **)v8;
      v6 = (uint64_t **)v8;
      if (!*(_QWORD *)v8)
        goto LABEL_9;
    }
    if ((CFStringCompare(*(CFStringRef *)(v8 + 32), *a2, 0) & 0x8000000000000000) == 0)
      break;
    v6 = (uint64_t **)(v8 + 8);
    v5 = *(uint64_t **)(v8 + 8);
    if (!v5)
      goto LABEL_9;
  }
  v9 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v9;
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_3(CFTypeID result, _DWORD *a2)
{
  unsigned int *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  int v6;

  v3 = *(unsigned int **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_169(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 10;
  strcpy((char *)__p, "set policy");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Setting policy completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3CB5C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(_QWORD *a1, char a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v4[8] = a2;
  *(_QWORD *)v4 = off_1E66DF298;
  *((_DWORD *)v4 + 3) = 0;
  v6 = v4 + 12;
  v8 = (char *)a1[2];
  v7 = a1[3];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = v4;
    v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  v11 = (char *)a1[1];
  v12 = (v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v5;
    v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (char *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v5;
  v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v22];
    v17 -= v22;
    v23 = &v16[8 * v12 - 16];
    v24 = (__int128 *)(v8 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[2] = v10;
  return v6;
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::TechInstance>(_QWORD *a1, char a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v4[8] = a2;
  *(_QWORD *)v4 = off_1E66DF2E8;
  *((_DWORD *)v4 + 3) = 0;
  v6 = v4 + 12;
  v8 = (char *)a1[2];
  v7 = a1[3];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = v4;
    v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  v11 = (char *)a1[1];
  v12 = (v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v5;
    v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (char *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v5;
  v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v22];
    v17 -= v22;
    v23 = &v16[8 * v12 - 16];
    v24 = (__int128 *)(v8 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[2] = v10;
  return v6;
}

char *qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(_QWORD *a1, char a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v4[8] = a2;
  *(_QWORD *)v4 = off_1E66DF248;
  *((_DWORD *)v4 + 3) = 0;
  v6 = v4 + 12;
  v8 = (char *)a1[2];
  v7 = a1[3];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = v4;
    v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  v11 = (char *)a1[1];
  v12 = (v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v5;
    v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (char *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v5;
  v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v22];
    v17 -= v22;
    v23 = &v16[8 * v12 - 16];
    v24 = (__int128 *)(v8 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[2] = v10;
  return v6;
}

void std::vector<nas::tlv::abm::BBFreqItem>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_DWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      std::vector<nas::tlv::abm::BBFreqItem>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_QWORD *)v5 - 2);
        v5 -= 4;
        v18 = v5[2];
        *((_QWORD *)v13 - 2) = v17;
        v13 -= 16;
        *((_DWORD *)v13 + 2) = v18;
      }
      while (v5 != v6);
      v5 = *(_DWORD **)a1;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (v5)
      operator delete(v5);
  }
}

CFTypeRef __copy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  const void *v6;
  CFTypeRef result;

  v4 = (const void *)a2[4];
  if (!v4)
  {
    v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = _Block_copy(v4);
  v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSN4coex13CommandDriver8CallbackE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c35_ZTSN4coex13CommandDriver8CallbackE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  return result;
}

__n128 __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

_QWORD *__Block_byref_object_copy__2(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[5] = result + 5;
  result[6] = result + 5;
  result[7] = 0;
  v2 = a2[7];
  if (v2)
  {
    v4 = a2[5];
    v3 = (uint64_t *)a2[6];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = result[5];
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    result[5] = v4;
    *(_QWORD *)(v4 + 8) = result + 5;
    result[7] = v2;
    a2[7] = 0;
  }
  return result;
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::locale v27;
  std::locale v28;

  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)(a1 + 40) = v4;
  v6 = a1 + 40;
  *(_QWORD *)(a1 + 152) = MEMORY[0x1E0DE4FF8] + 16;
  *(_QWORD *)(a1 + 40 + *(_QWORD *)(v4 - 24)) = v5;
  v7 = (std::ios_base *)(a1 + 40 + *(_QWORD *)(*(_QWORD *)(a1 + 40) - 24));
  v8 = (std::ios_base *)(a2 + 40 + *(_QWORD *)(*(_QWORD *)(a2 + 40) - 24));
  std::ios_base::move(v7, v8);
  v7[1].__vftable = v8[1].__vftable;
  v8[1].__vftable = 0;
  v9 = MEMORY[0x1E0DE4FE0];
  v7[1].__fmtflags_ = v8[1].__fmtflags_;
  *(_QWORD *)(a1 + 40) = v9 + 24;
  *(_QWORD *)(a1 + 152) = v9 + 64;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 112) = 0;
  v11 = (_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v12 = (__int128 *)(a2 + 112);
  if (*(char *)(a2 + 135) >= 0)
    v13 = a2 + 112;
  else
    v13 = *(_QWORD *)(a2 + 112);
  v14 = *(_QWORD *)(a2 + 64);
  if (v14)
  {
    v15 = v14 - v13;
    v16 = *(_QWORD *)(a2 + 72) - v13;
    v17 = *(_QWORD *)(a2 + 80) - v13;
    v18 = *(_QWORD *)(a2 + 88);
    if (v18)
    {
LABEL_6:
      v19 = v18 - v13;
      v20 = *(_QWORD *)(a2 + 96) - v13;
      v21 = *(_QWORD *)(a2 + 104) - v13;
      goto LABEL_9;
    }
  }
  else
  {
    v16 = -1;
    v17 = -1;
    v15 = -1;
    v18 = *(_QWORD *)(a2 + 88);
    if (v18)
      goto LABEL_6;
  }
  v19 = -1;
  v20 = -1;
  v21 = -1;
LABEL_9:
  v22 = *(_QWORD *)(a2 + 136);
  v23 = v22 - v13;
  if (!v22)
    v23 = -1;
  v24 = *v12;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *v11 = v24;
  *(_BYTE *)(a2 + 135) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  v25 = a1 + 112;
  if (*(char *)(a1 + 135) < 0)
    v25 = *(_QWORD *)v11;
  if (v15 != -1)
  {
    *(_QWORD *)(a1 + 64) = v25 + v15;
    *(_QWORD *)(a1 + 72) = v25 + v16;
    *(_QWORD *)(a1 + 80) = v25 + v17;
  }
  if (v19 != -1)
  {
    *(_QWORD *)(a1 + 104) = v25 + v21;
    *(_QWORD *)(a1 + 88) = v25 + v19;
    *(_QWORD *)(a1 + 96) = v25 + v19 + v20;
  }
  v26 = v25 + v23;
  if (v23 == -1)
    v26 = 0;
  *(_QWORD *)(a1 + 136) = v26;
  if (*(char *)(a2 + 135) < 0)
    v12 = *(__int128 **)(a2 + 112);
  *(_QWORD *)(a2 + 64) = v12;
  *(_QWORD *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 80) = v12;
  *(_QWORD *)(a2 + 88) = v12;
  *(_QWORD *)(a2 + 96) = v12;
  *(_QWORD *)(a2 + 104) = v12;
  *(_QWORD *)(a2 + 136) = v12;
  std::locale::locale(&v27, (const std::locale *)(a2 + 56));
  (*(void (**)(uint64_t, std::locale *))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48, &v27);
  v28.__locale_ = (std::locale::__imp *)0xAAAAAAAAAAAAAAAALL;
  std::locale::locale(&v28, (const std::locale *)(a1 + 56));
  std::locale::operator=((std::locale *)(a1 + 56), &v27);
  std::locale::~locale(&v28);
  std::locale::~locale(&v27);
  *(_QWORD *)(v6 + *(_QWORD *)(*(_QWORD *)(a1 + 40) - 24) + 40) = a1 + 48;
}

void sub_1B3CB6648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  uint64_t v10;
  void **v11;

  std::locale::~locale(&a9);
  if (*(char *)(v10 + 135) < 0)
    operator delete(*v11);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E2F6FC](v9);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

__n128 __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

_QWORD *__Block_byref_object_copy__7(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[5] = result + 5;
  result[6] = result + 5;
  result[7] = 0;
  v2 = a2[7];
  if (v2)
  {
    v4 = a2[5];
    v3 = (uint64_t *)a2[6];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = result[5];
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    result[5] = v4;
    *(_QWORD *)(v4 + 8) = result + 5;
    result[7] = v2;
    a2[7] = 0;
  }
  return result;
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

__n128 __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

_QWORD *__Block_byref_object_copy__10(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result[5] = result + 5;
  result[6] = result + 5;
  result[7] = 0;
  v2 = a2[7];
  if (v2)
  {
    v4 = a2[5];
    v3 = (uint64_t *)a2[6];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = result[5];
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    result[5] = v4;
    *(_QWORD *)(v4 + 8) = result + 5;
    result[7] = v2;
    a2[7] = 0;
  }
  return result;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::CoexTech>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::APTTable>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCContinuousTxSubframeDenialsThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ContinuousTxSubframeDenialsThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxPowerThresholdForAdvTxNotice>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimitTimeout>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RbThresholdForAdvTxNotice>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimitTimeout>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::ControllerTxPowerLimit>::write(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  float result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *a2;
  result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LinkPathLossThreshold>::write(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  float result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *a2;
  result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::FilteredRBThreshold>::write(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  float result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *a2;
  result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::WCI2TxPowerLimit>::write(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  float result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *a2;
  result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::PowerThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

float qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBFilterAlpha>::write(uint64_t a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  float result;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *a2;
  result = *(float *)(a1 + 12);
  *(float *)(v3 + 3) = result;
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TechInstance>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::RBThreshold>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::LTEInstance>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

void __copy_helper_block_e8_40c35_ZTSN4coex13CommandDriver8CallbackE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::Policy>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_QWORD *)(v3 + 3) = *(_QWORD *)(result + 9);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::NGCTxFrameDenialsParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TxFrameDenialsParameters>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

void __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE48c35_ZTSN4coex13CommandDriver8CallbackE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  NSObject *v6;

  v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4)
    CFRetain(v4);
  v5 = (void *)a2[6];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
    dispatch_retain(v6);
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  CFTypeRef cf;
  CFTypeRef v8;

  v4 = *a1;
  v5 = *a2;
  v8 = v5;
  if (v5)
    CFRetain(v5);
  v6 = *a3;
  cf = v6;
  if (v6)
    CFRetain(v6);
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v4 + 16))(v4, &v8, &cf);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
}

void sub_1B3CB6C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, const void **a2, const void **a3)
{
  const void *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v10;
  uint64_t v11;
  const void *v12;
  NSObject *v13;
  const void *v14;
  const void *v15;

  v3 = *a2;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (v4)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(_QWORD *)(v6 + 40);
    v7 = v6 + 40;
    if (v8)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48))
      {
        v15 = *a2;
        if (v3)
          CFRetain(v3);
        v10 = *a3;
        v14 = v10;
        if (v10)
        {
          CFRetain(v10);
          coex::CommandDriver::Callback::operator()(v7, &v15, &v14);
          CFRelease(v10);
          if (!v3)
            goto LABEL_13;
        }
        else
        {
          coex::CommandDriver::Callback::operator()(v7, &v15, &v14);
          if (!v3)
          {
LABEL_13:
            v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
            v12 = *(const void **)(v11 + 40);
            *(_QWORD *)(v11 + 40) = 0;
            if (v12)
              _Block_release(v12);
            v13 = *(NSObject **)(v11 + 48);
            *(_QWORD *)(v11 + 48) = 0;
            if (v13)
              dispatch_release(v13);
            return;
          }
        }
        CFRelease(v3);
        goto LABEL_13;
      }
    }
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

_QWORD *__Block_byref_object_dispose__2(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  if (result[7])
  {
    v1 = result;
    v2 = result + 5;
    result = (_QWORD *)result[6];
    v3 = v1[5];
    v4 = *result;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    v1[7] = 0;
    if (result != v2)
    {
      do
      {
        v5 = (_QWORD *)result[1];
        operator delete(result);
        result = v5;
      }
      while (v5 != v2);
    }
  }
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = MEMORY[0x1E0DE4F60];
  v2 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 40) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 40 + *(_QWORD *)(v2 - 24)) = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 48) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  JUMPOUT(0x1B5E2F6FCLL);
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void __Block_byref_object_dispose__7(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  if (a1[7])
  {
    v1 = (char *)(a1 + 5);
    v2 = a1[5];
    v3 = (char *)a1[6];
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[7] = 0;
    if (v3 != (char *)(a1 + 5))
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0)
LABEL_9:
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != v1);
    }
  }
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void __Block_byref_object_dispose__10(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  if (a1[7])
  {
    v1 = (char *)(a1 + 5);
    v2 = a1[5];
    v3 = (char *)a1[6];
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v2 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[7] = 0;
    if (v3 != (char *)(a1 + 5))
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0)
LABEL_9:
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != v1);
    }
  }
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4coex13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_0(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_2(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_3(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3awd3abm16MetricSubmission10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CB72C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CB72D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CB7300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *awd::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv *v5;
  unint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 20), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *((_DWORD *)v5 + 5);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 24), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 24) = *((_WORD *)v5 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 26), a2, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v5 + 13);
  v5 = (tlv *)((char *)v5 + 28);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 32), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 12) = *((_BYTE *)v5 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 13), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 13) = *((_BYTE *)v5 + 13);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 14), a2, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v5 + 7);
  v5 = (tlv *)((char *)v5 + 16);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 16), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  *(_BYTE *)a3 = *(_BYTE *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 1), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 1) = *((_BYTE *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 2), a2, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v5 + 1);
  v5 = (tlv *)((char *)v5 + 4);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 8), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

{
  tlv *v5;
  unint64_t v6;

  v5 = a1;
  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 16) = *((_WORD *)v5 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 18), a2, (const unsigned __int8 *)2);
  v6 = *((unsigned __int16 *)v5 + 9);
  v5 = (tlv *)((char *)v5 + 20);
  tlv::throwIfNotEnoughBytes(v5, a2, (const unsigned __int8 *)v6);
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)(a3 + 24), (char *)v5, (char *)v5 + v6, v6);
  return (char *)v5 + v6;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void coex::QMICommandDriver::set(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  const void *v7;
  void *v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD v11[5];
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;
  int v15;

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN4coex16QMICommandDriver3setEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v11[3] = &__block_descriptor_tmp_21_1;
  v7 = *a2;
  v11[4] = a1;
  cf = v7;
  if (v7)
    CFRetain(v7);
  v15 = a3;
  v8 = *(void **)a4;
  if (*(_QWORD *)a4)
    v8 = _Block_copy(v8);
  v9 = (uint64_t *)(a1 + 72);
  v10 = *(NSObject **)(a4 + 8);
  aBlock = v8;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
}

void ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66DE4F0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm25SendTransparentMessageReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CB7798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CB77AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CB77D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver30sendTransparentMessageReq_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  NSObject *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;

  v4 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x20uLL);
  v13 = xmmword_1B3DCC670;
  strcpy((char *)__p, "Send transparent Coex message");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    v5 = cf;
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v6 = 0;
    if (!v6)
      goto LABEL_9;
LABEL_10:
    v11 = v5;
    if (v5)
      goto LABEL_11;
LABEL_14:
    v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    v9 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p);
  v5 = cf;
  v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_9:
  v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Send transparent Coex message completed", (uint8_t *)&__p, 2u);
  v5 = cf;
  v11 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v5);
  v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  v9 = cf;
  if (cf)
LABEL_15:
    CFRelease(v9);
}

void sub_1B3CB7960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetPolicy8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CB7A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CB7A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CB7A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void coex::CommandDriver::Callback::operator()(uint64_t a1, const void **a2, const void **a3)
{
  const void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  const void *v10;
  const void *v11;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v14;
  CFTypeRef cf;

  v6 = *(const void **)a1;
  if (v6)
    v7 = _Block_copy(v6);
  else
    v7 = 0;
  v8 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK4coex13CommandDriver8CallbackclEN3ctu2cf11CFSharedRefI9__CFErrorEENS4_IK14__CFDictionaryEE_block_invoke;
  block[3] = &__block_descriptor_tmp_232;
  if (!v7)
  {
    v10 = *a2;
    aBlock = 0;
    v14 = v10;
    if (!v10)
      goto LABEL_9;
    goto LABEL_8;
  }
  v9 = _Block_copy(v7);
  v10 = *a2;
  aBlock = v9;
  v14 = v10;
  if (v10)
LABEL_8:
    CFRetain(v10);
LABEL_9:
  v11 = *a3;
  cf = v11;
  if (v11)
    CFRetain(v11);
  dispatch_async(v8, block);
  if (cf)
    CFRelease(cf);
  if (v14)
    CFRelease(v14);
  if (aBlock)
    _Block_release(aBlock);
  if (v7)
    _Block_release(v7);
}

uint64_t coex::QMICommandDriver::checkError@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  NSObject *v22;
  size_t v23;
  void **v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  const void **v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  CFTypeRef *v37;
  void *__dst[2];
  unint64_t v39;
  CFTypeRef cf[2];
  int64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *__p[2];
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t buf[4];
  CFTypeRef *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  if (!*(_DWORD *)(a2 + 4))
    return result;
  v6 = result;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = 0xAAAAAAAAAAAAAAAALL;
  v59 = v7;
  v58 = v7;
  v57 = v7;
  v56 = v7;
  v55 = v7;
  v54 = v7;
  v53 = v7;
  v52 = v7;
  v51 = v7;
  v48 = v7;
  v46 = v7;
  *(_OWORD *)__p = v7;
  v44 = v7;
  v45 = v7;
  v43 = v7;
  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v50 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v42 + *(_QWORD *)(v42 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v42 + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v12, &v43);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v42 = v8 + 24;
  v50 = v9;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v43 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v48 = 0u;
  LODWORD(v49) = 16;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Failed to ", 10);
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; ", 2);
  v20 = (const char *)qmi::asString();
  v21 = strlen(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  v22 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if ((v49 & 0x10) != 0)
    {
      v32 = *((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1) < (unint64_t)v46)
      {
        *((_QWORD *)&v48 + 1) = v46;
        v32 = v46;
      }
      v33 = (const void **)&v45 + 1;
    }
    else
    {
      if ((v49 & 8) == 0)
      {
        v30 = 0;
        HIBYTE(v41) = 0;
        v31 = cf;
        goto LABEL_50;
      }
      v33 = (const void **)&v44;
      v32 = v45;
    }
    v34 = *v33;
    v30 = v32 - (_QWORD)*v33;
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v30 >= 0x17)
    {
      v35 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v35 = v30 | 7;
      v36 = v35 + 1;
      v31 = operator new(v35 + 1);
      cf[1] = (CFTypeRef)v30;
      v41 = v36 | 0x8000000000000000;
      cf[0] = v31;
    }
    else
    {
      HIBYTE(v41) = v32 - *(_BYTE *)v33;
      v31 = cf;
      if (!v30)
        goto LABEL_50;
    }
    memmove(v31, v34, v30);
LABEL_50:
    *((_BYTE *)v31 + v30) = 0;
    v37 = cf;
    if (v41 < 0)
      v37 = (CFTypeRef *)cf[0];
    *(_DWORD *)buf = 136315138;
    v61 = v37;
    _os_log_error_impl(&dword_1B3CB3000, v22, OS_LOG_TYPE_ERROR, "%s: ", buf, 0xCu);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)cf[0]);
  }
  if ((v49 & 0x10) != 0)
  {
    v25 = *((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1) < (unint64_t)v46)
    {
      *((_QWORD *)&v48 + 1) = v46;
      v25 = v46;
    }
    v26 = (const void *)*((_QWORD *)&v45 + 1);
    v23 = v25 - *((_QWORD *)&v45 + 1);
    if ((unint64_t)(v25 - *((_QWORD *)&v45 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
  }
  else
  {
    if ((v49 & 8) == 0)
    {
      v23 = 0;
      HIBYTE(v39) = 0;
      v24 = __dst;
      goto LABEL_22;
    }
    v26 = (const void *)v44;
    v23 = v45 - v44;
    if ((_QWORD)v45 - (_QWORD)v44 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_34:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v24 = (void **)operator new(v27 + 1);
    __dst[1] = (void *)v23;
    v39 = v28 | 0x8000000000000000;
    __dst[0] = v24;
    goto LABEL_21;
  }
  HIBYTE(v39) = v23;
  v24 = __dst;
  if (v23)
LABEL_21:
    memmove(v24, v26, v23);
LABEL_22:
  *((_BYTE *)v24 + v23) = 0;
  CreateError();
  if (cf == a4)
    goto LABEL_25;
  v29 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v29)
  {
    CFRelease(v29);
LABEL_25:
    if (cf[0])
      CFRelease(cf[0]);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  v42 = *v10;
  *(uint64_t *)((char *)&v42 + *(_QWORD *)(v42 - 24)) = v10[3];
  *(_QWORD *)&v43 = v13 + 16;
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v50);
}

void sub_1B3CB801C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[6];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[4];
  if (v4)
    _Block_release(v4);
}

void qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::~TlvWrapper(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *__p = &off_1E66DFBD8;
  v2 = __p[2];
  if (v2)
  {
    v3 = __p[3];
    v4 = (void *)__p[2];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)__p[2];
    }
    __p[3] = v2;
    operator delete(v4);
  }
  operator delete(__p);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3awd3abm13SubmitTrigger10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CB8218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CB822C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CB8258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t tlv::parseV<awd::tlv::abm::SubmitTriggerExt>@<X0>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  uint64_t result;

  *(_OWORD *)(a3 + 16) = xmmword_1B3DD3720;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)v5;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 4), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *((_DWORD *)v5 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 8), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 12), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *((_DWORD *)v5 + 3);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 16), v6, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
  result = tlv::throwIfNotEnoughBytes((tlv *)((char *)v5 + 20), v6, (const unsigned __int8 *)8);
  *(_QWORD *)(a3 + 24) = *(_QWORD *)((char *)v5 + 20);
  *a1 = (tlv *)((char *)v5 + 28);
  return result;
}

void sub_1B3CB8348(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
}

CFTypeRef __copy_helper_block_e8_32c100_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  const void *v6;
  CFTypeRef result;

  v4 = (const void *)a2[4];
  if (!v4)
  {
    v6 = (const void *)a2[5];
    a1[4] = 0;
    a1[5] = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = _Block_copy(v4);
  v6 = (const void *)a2[5];
  a1[4] = v5;
  a1[5] = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const double *v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  const double *v14;
  float64x2x4_t v15;
  float64x2x4_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v1 = *(_QWORD *)(a1 + 24);
  if (v2 == v1)
    return 4;
  v3 = v1 - v2 - 32;
  if (v3 >= 0x80)
  {
    v7 = (v3 >> 5) + 1;
    v8 = v7 & 3;
    if ((v7 & 3) == 0)
      v8 = 4;
    v9 = v7 - v8;
    v5 = v2 + 32 * v9;
    v10 = (const double *)(v2 + 72);
    v11 = 0uLL;
    v12 = vdupq_n_s64(5uLL);
    v13 = 0uLL;
    do
    {
      v14 = v10 - 8;
      v15 = vld4q_f64(v14);
      v16 = vld4q_f64(v10);
      v11 = vaddq_s64(vsubq_s64(vaddq_s64(v11, (int64x2_t)v15.val[1]), (int64x2_t)v15.val[0]), v12);
      v13 = vaddq_s64(vsubq_s64(vaddq_s64(v13, (int64x2_t)v16.val[1]), (int64x2_t)v16.val[0]), v12);
      v10 += 16;
      v9 -= 4;
    }
    while (v9);
    v4 = vaddvq_s64(vaddq_s64(v13, v11));
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 16);
  }
  do
  {
    v4 = v4 + *(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8) + 5;
    v5 += 32;
  }
  while (v5 != v1);
  return v4 + 4;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIKN5radio13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<coex::tlv::abm::TransparentMessageInformationSet>::write(_BYTE *result, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;

  v3 = result[8];
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  v6 = v4 + 4;
  *(_BYTE *)(v4 + 3) = (*((_DWORD *)result + 6) - *((_DWORD *)result + 4)) >> 5;
  v7 = *((_QWORD *)result + 2);
  for (i = *((_QWORD *)result + 3); v7 != i; v7 += 32)
  {
    *(_DWORD *)v6 = *(_DWORD *)v7;
    v9 = v6 + 5;
    *(_BYTE *)(v6 + 4) = *(_BYTE *)(v7 + 16) - *(_DWORD *)(v7 + 8);
    result = memcpy((void *)(v6 + 5), *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8));
    v6 = v9 + *(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8);
  }
  *a2 = v6;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v6 - v5;
  return result;
}

void _ZNSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EEclEOSA_SD_(uint64_t a1, int *a2, QMIServiceMsg *this)
{
  int v4;
  uint64_t v6;
  NSObject *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  int v13;
  _QWORD v14[2];
  unint64_t *v15;
  _QWORD v16[3];
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(__p, 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v14, __p[0]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v4;
    _os_log_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEFAULT, "#I Received frequency report indication for type %d ", (uint8_t *)__p, 8u);
  }
  __p[0] = (void *)v14[0];
  __p[1] = (void *)v14[1];
  __p[2] = v15;
  if (v15)
  {
    v8 = v15 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)__p);
  v16[0] = __p[0];
  v16[1] = __p[1];
  v16[2] = __p[2];
  if (__p[2])
  {
    v10 = (unint64_t *)((char *)__p[2] + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v16);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)__p);
  if (v4 == 2)
    v12 = 1;
  else
    v12 = 2;
  if (v4 == 1)
    v13 = 0;
  else
    v13 = v12;
  desense::QMICommandDriver::processFrequencyInd_sync(v6, v13, (qmi::MessageBase *)v16);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v16);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
}

void sub_1B3CB8784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CB8798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void desense::QMICommandDriver::processFrequencyInd_sync(uint64_t a1, int a2, qmi::MessageBase *this)
{
  uint64_t v6;
  tlv *TlvValue;
  int v8;
  tlv *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  tlv *v15;
  int v16;
  tlv *v17;
  const unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  tlv *v36;
  int v37;
  tlv *v38;
  const unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t **v61;
  uint64_t **v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t **v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t **v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t **v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t **v95;
  uint64_t **v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t **v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t **v112;
  uint64_t **v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t **v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t **v129;
  uint64_t **v130;
  unint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  NSObject *v143;
  _BOOL4 v144;
  uint64_t **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *i;
  NSObject *v153;
  uint64_t v154;
  int v155;
  NSObject *v156;
  uint64_t v157;
  __int128 v158;
  pthread_mutex_t *v159;
  unsigned int *v160;
  unsigned int v161;
  uint64_t **v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  char *v175;
  char *v176;
  unsigned int *v177;
  unsigned int *v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  __int128 v184;
  uint64_t **v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, _QWORD ***, uint64_t);
  uint64_t v195;
  uint64_t j;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, _QWORD ***, uint64_t);
  unsigned int *v202;
  unsigned int *v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  unsigned int v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  _QWORD *v233;
  _QWORD *v234[2];
  uint64_t **v235;
  uint64_t *v236;
  uint64_t v237;
  _QWORD v238[2];
  void (*v239)(uint64_t, uint64_t *);
  void *v240;
  uint64_t *v241;
  uint64_t v242;
  _QWORD v243[2];
  void (*v244)(uint64_t, uint64_t *);
  void *v245;
  uint64_t *v246;
  uint64_t v247;
  _QWORD v248[2];
  void (*v249)(uint64_t, uint64_t *);
  void *v250;
  uint64_t *v251;
  uint64_t v252;
  _QWORD v253[2];
  void (*v254)(uint64_t, uint64_t);
  void *v255;
  uint64_t *v256;
  uint64_t v257;
  _QWORD v258[2];
  void (*v259)(uint64_t, uint64_t *);
  void *v260;
  uint64_t *v261;
  uint64_t v262;
  _QWORD v263[2];
  void (*v264)(uint64_t, uint64_t *);
  void *v265;
  uint64_t *v266;
  uint64_t v267;
  _QWORD v268[2];
  void (*v269)(uint64_t, uint64_t *);
  void *v270;
  uint64_t *v271;
  uint64_t v272;
  _QWORD v273[2];
  void (*v274)(uint64_t, uint64_t);
  void *v275;
  uint64_t *v276;
  uint64_t v277;
  _QWORD v278[2];
  void (*v279)(uint64_t, uint64_t *);
  void *v280;
  uint64_t *v281;
  uint64_t v282;
  _QWORD v283[2];
  void (*v284)(uint64_t, unsigned __int8 *);
  void *v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  uint64_t **v292;
  uint64_t v293;
  _QWORD *(*v294)(_QWORD *, _QWORD *);
  _QWORD *(*v295)(_QWORD *);
  uint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t **v300;
  uint64_t v301;
  _QWORD *(*v302)(_QWORD *, _QWORD *);
  _QWORD *(*v303)(_QWORD *);
  uint64_t v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t **v308;
  uint64_t v309;
  _QWORD *(*v310)(_QWORD *, _QWORD *);
  _QWORD *(*v311)(_QWORD *);
  uint64_t v312;
  void *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t **v316;
  uint64_t v317;
  _QWORD *(*v318)(_QWORD *, _QWORD *);
  _QWORD *(*v319)(_QWORD *);
  uint64_t v320;
  void *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  _QWORD *(*v326)(_QWORD *, _QWORD *);
  _QWORD *(*v327)(_QWORD *);
  uint64_t v328;
  void *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  _QWORD *(*v334)(_QWORD *, _QWORD *);
  _QWORD *(*v335)(_QWORD *);
  uint64_t v336;
  void *v337;
  uint64_t v338;
  _QWORD **v339;
  _QWORD *v340[2];
  _QWORD v341[4];
  __int128 v342;
  __int128 v343;
  _BYTE *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t **v347;
  unsigned int *v348;
  int v349;
  __int128 v350;
  __int128 v351;
  _QWORD **v352;
  _QWORD *v353;
  uint64_t v354;
  _QWORD **v355;
  _QWORD *v356;
  uint64_t v357;
  std::runtime_error v358;
  _BYTE __p[32];
  _BYTE v360[32];
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  void *v367[2];
  pthread_mutex_t *v368[2];
  __int128 v369;
  __int128 v370;
  __int128 v371;
  unint64_t v372;
  uint64_t v373;
  _BYTE *v374;
  uint64_t v375;
  _QWORD *v376;
  int *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  v331 = 0;
  v332 = &v331;
  v333 = 0x4002000000;
  v334 = __Block_byref_object_copy__2;
  v335 = __Block_byref_object_dispose__2;
  v336 = (uint64_t)&v336;
  v337 = &v336;
  v338 = 0;
  v323 = 0;
  v324 = &v323;
  v325 = 0x4002000000;
  v326 = __Block_byref_object_copy__2;
  v327 = __Block_byref_object_dispose__2;
  v328 = (uint64_t)&v328;
  v329 = &v328;
  v330 = 0;
  v315 = 0;
  v316 = (uint64_t **)&v315;
  v317 = 0x4002000000;
  v318 = __Block_byref_object_copy__2;
  v319 = __Block_byref_object_dispose__2;
  v320 = (uint64_t)&v320;
  v321 = &v320;
  v322 = 0;
  v307 = 0;
  v308 = (uint64_t **)&v307;
  v309 = 0x4002000000;
  v310 = __Block_byref_object_copy__2;
  v311 = __Block_byref_object_dispose__2;
  v312 = (uint64_t)&v312;
  v313 = &v312;
  v314 = 0;
  v299 = 0;
  v300 = (uint64_t **)&v299;
  v301 = 0x4002000000;
  v302 = __Block_byref_object_copy__2;
  v303 = __Block_byref_object_dispose__2;
  v304 = (uint64_t)&v304;
  v305 = &v304;
  v306 = 0;
  v291 = 0;
  v292 = (uint64_t **)&v291;
  v293 = 0x4002000000;
  v294 = __Block_byref_object_copy__2;
  v295 = __Block_byref_object_dispose__2;
  v296 = (uint64_t)&v296;
  v297 = &v296;
  v298 = 0;
  v287 = 0;
  v288 = &v287;
  v289 = 0x2000000000;
  v6 = MEMORY[0x1E0C809B0];
  v290 = 0;
  v283[0] = MEMORY[0x1E0C809B0];
  v283[1] = 0x40000000;
  v284 = (void (*)(uint64_t, unsigned __int8 *))___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke;
  v285 = &unk_1E66D6600;
  v286 = &v287;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
  v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)1);
    __p[0] = *(_BYTE *)v9;
    v284((uint64_t)v283, __p);
  }
  if ((*((_DWORD *)v288 + 6) | 2) == 2)
  {
    v278[0] = v6;
    v278[1] = 0x40000000;
    v279 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_2;
    v280 = &unk_1E66D6628;
    v282 = a1;
    v281 = &v331;
    v10 = qmi::MessageBase::findTlvValue(this);
    v12 = v10;
    if (v10)
    {
      v13 = v11;
      *(_QWORD *)&v350 = v10;
      memset(__p, 170, 24);
      tlv::parseV<nas::tlv::abm::BBCampUplinkFreqList>((tlv **)&v350, v11, (uint64_t *)__p);
      v14 = v350;
      if ((_QWORD)v350)
        v279((uint64_t)v278, (uint64_t *)__p);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      if (!v14)
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 189, v12, v13);
    }
  }
  v273[0] = v6;
  v273[1] = 0x40000000;
  v274 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_3;
  v275 = &unk_1E66D6650;
  v276 = &v291;
  v277 = a1;
  v15 = (tlv *)qmi::MessageBase::findTlvValue(this);
  v17 = v15;
  if (v15)
  {
    v18 = (const unsigned __int8 *)v15 + v16;
    tlv::throwIfNotEnoughBytes(v15, v18, (const unsigned __int8 *)8);
    v19 = *(_QWORD *)v17;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)v17 + 8), v18, (const unsigned __int8 *)4);
    v20 = *((unsigned int *)v17 + 2) | 0xAAAAAAAA00000000;
    *(_QWORD *)__p = v19;
    *(_QWORD *)&__p[8] = v20;
    v274((uint64_t)v273, (uint64_t)__p);
  }
  v268[0] = v6;
  v268[1] = 0x40000000;
  v269 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_4;
  v270 = &unk_1E66D6678;
  v271 = &v315;
  v272 = a1;
  v21 = qmi::MessageBase::findTlvValue(this);
  v23 = v21;
  if (v21)
  {
    v24 = v22;
    *(_QWORD *)&v350 = v21;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBHoppingList>((tlv **)&v350, v22, (uint64_t *)__p);
    v25 = v350;
    if ((_QWORD)v350)
      v269((uint64_t)v268, (uint64_t *)__p);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if (!v25)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 180, v23, v24);
  }
  v263[0] = v6;
  v263[1] = 0x40000000;
  v264 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_5;
  v265 = &unk_1E66D66A0;
  v266 = &v307;
  v267 = a1;
  v26 = qmi::MessageBase::findTlvValue(this);
  v28 = v26;
  if (v26)
  {
    v29 = v27;
    *(_QWORD *)&v350 = v26;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBNeighborList>((tlv **)&v350, v27, (uint64_t *)__p);
    v30 = v350;
    if ((_QWORD)v350)
      v264((uint64_t)v263, (uint64_t *)__p);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if (!v30)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 181, v28, v29);
  }
  v258[0] = v6;
  v258[1] = 0x40000000;
  v259 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_6;
  v260 = &unk_1E66D66C8;
  v261 = &v299;
  v262 = a1;
  v31 = qmi::MessageBase::findTlvValue(this);
  v33 = v31;
  if (v31)
  {
    v34 = v32;
    *(_QWORD *)&v350 = v31;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBHRPLMNList>((tlv **)&v350, v32, (uint64_t *)__p);
    v35 = v350;
    if ((_QWORD)v350)
      v259((uint64_t)v258, (uint64_t *)__p);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if (!v35)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 182, v33, v34);
  }
  v253[0] = v6;
  v253[1] = 0x40000000;
  v254 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_7;
  v255 = &unk_1E66D66F0;
  v256 = &v291;
  v257 = a1;
  v36 = (tlv *)qmi::MessageBase::findTlvValue(this);
  v38 = v36;
  if (v36)
  {
    v39 = (const unsigned __int8 *)v36 + v37;
    tlv::throwIfNotEnoughBytes(v36, v39, (const unsigned __int8 *)8);
    v40 = *(_QWORD *)v38;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)v38 + 8), v39, (const unsigned __int8 *)4);
    v41 = *((unsigned int *)v38 + 2) | 0xAAAAAAAA00000000;
    *(_QWORD *)__p = v40;
    *(_QWORD *)&__p[8] = v41;
    v254((uint64_t)v253, (uint64_t)__p);
  }
  v248[0] = v6;
  v248[1] = 0x40000000;
  v249 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_8;
  v250 = &unk_1E66D6718;
  v251 = &v307;
  v252 = a1;
  v42 = qmi::MessageBase::findTlvValue(this);
  v44 = v42;
  if (v42)
  {
    v45 = v43;
    *(_QWORD *)&v350 = v42;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBNeighborSecondList>((tlv **)&v350, v43, (uint64_t *)__p);
    v46 = v350;
    if ((_QWORD)v350)
      v249((uint64_t)v248, (uint64_t *)__p);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if (!v46)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 186, v44, v45);
  }
  v243[0] = v6;
  v243[1] = 0x40000000;
  v244 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_9;
  v245 = &unk_1E66D6740;
  v246 = &v291;
  v247 = a1;
  v47 = qmi::MessageBase::findTlvValue(this);
  v49 = v47;
  if (v47)
  {
    v50 = v48;
    *(_QWORD *)&v350 = v47;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::DLSCellFrequencyList>((tlv **)&v350, v48, (uint64_t *)__p);
    v51 = v350;
    if ((_QWORD)v350)
      v244((uint64_t)v243, (uint64_t *)__p);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if (!v51)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 188, v49, v50);
  }
  v238[0] = v6;
  v238[1] = 0x40000000;
  v239 = ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_10;
  v240 = &unk_1E66D6768;
  v241 = &v323;
  v242 = a1;
  v52 = qmi::MessageBase::findTlvValue(this);
  v54 = v52;
  if (v52)
  {
    v55 = v53;
    *(_QWORD *)&v350 = v52;
    memset(__p, 170, 24);
    tlv::parseV<nas::tlv::abm::BBSearchFreqList>((tlv **)&v350, v53, (uint64_t *)__p);
    v56 = v350;
    if ((_QWORD)v350)
      v239((uint64_t)v238, (uint64_t *)__p);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
    if (!v56)
      ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 190, v54, v55);
  }
  v236 = 0;
  v237 = 0;
  v235 = &v236;
  v57 = v332;
  v58 = (uint64_t *)operator new(0x40uLL);
  v58[4] = *MEMORY[0x1E0DDFC38];
  v58[5] = (uint64_t)(v58 + 5);
  v58[6] = (uint64_t)(v58 + 5);
  v58[7] = 0;
  *v58 = 0;
  v58[1] = 0;
  v58[2] = (uint64_t)&v236;
  v235 = (uint64_t **)v58;
  v236 = v58;
  *((_BYTE *)v58 + 24) = 1;
  v237 = 1;
  if (v58 != v57)
  {
    std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v58 + 5, v58 + 5, v57[6], (uint64_t)(v57 + 5));
    v58 = v236;
    v59 = v324;
    v60 = *MEMORY[0x1E0DDFC30];
    v61 = &v236;
    v62 = &v236;
    if (v236)
      goto LABEL_62;
LABEL_67:
    v64 = (uint64_t *)operator new(0x40uLL);
    v64[4] = v60;
    v64[5] = (uint64_t)(v64 + 5);
    v64[6] = (uint64_t)(v64 + 5);
    v64[7] = 0;
    *v64 = 0;
    v64[1] = 0;
    v64[2] = (uint64_t)v62;
    *v61 = v64;
    v65 = v64;
    if (*v235)
    {
      v235 = (uint64_t **)*v235;
      v65 = *v61;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v236, v65);
    ++v237;
    if (v64 == v59)
      goto LABEL_86;
LABEL_72:
    v66 = v64 + 5;
    v67 = (uint64_t)(v59 + 5);
    v68 = v59[6];
    v69 = (_QWORD *)v64[6];
    if ((uint64_t *)v68 != v59 + 5 && v69 != v66)
    {
      do
      {
        v69[2] = *(_QWORD *)(v68 + 16);
        *((_DWORD *)v69 + 6) = *(_DWORD *)(v68 + 24);
        v68 = *(_QWORD *)(v68 + 8);
        v69 = (_QWORD *)v69[1];
      }
      while (v68 != v67 && v69 != v66);
    }
    if (v69 == v66)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v64 + 5, v64 + 5, v68, v67);
    }
    else
    {
      v72 = v64[5];
      v73 = *v69;
      *(_QWORD *)(v73 + 8) = *(_QWORD *)(v72 + 8);
      **(_QWORD **)(v72 + 8) = v73;
      do
      {
        v74 = (_QWORD *)v69[1];
        --v64[7];
        operator delete(v69);
        v69 = v74;
      }
      while (v74 != v66);
    }
    goto LABEL_86;
  }
  v59 = v324;
  v60 = *MEMORY[0x1E0DDFC30];
  while (1)
  {
LABEL_62:
    while (1)
    {
      v62 = (uint64_t **)v58;
      v63 = v58[4];
      if (v60 >= v63)
        break;
      v58 = (uint64_t *)*v58;
      if (!*v62)
      {
        v61 = v62;
        goto LABEL_67;
      }
    }
    if (v63 >= v60)
      break;
    v58 = (uint64_t *)v58[1];
    if (!v58)
    {
      v61 = v62 + 1;
      goto LABEL_67;
    }
  }
  v64 = v58;
  if (v58 != v59)
    goto LABEL_72;
LABEL_86:
  v75 = v316;
  v76 = v236;
  v77 = *MEMORY[0x1E0DDFC40];
  v78 = &v236;
  v79 = &v236;
  if (!v236)
  {
LABEL_93:
    v81 = (uint64_t *)operator new(0x40uLL);
    v81[4] = v77;
    v81[5] = (uint64_t)(v81 + 5);
    v81[6] = (uint64_t)(v81 + 5);
    v81[7] = 0;
    *v81 = 0;
    v81[1] = 0;
    v81[2] = (uint64_t)v79;
    *v78 = v81;
    v82 = v81;
    if (*v235)
    {
      v235 = (uint64_t **)*v235;
      v82 = *v78;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v236, v82);
    ++v237;
    if (v81 == (uint64_t *)v75)
      goto LABEL_112;
LABEL_98:
    v83 = v81 + 5;
    v84 = (uint64_t)(v75 + 5);
    v85 = (uint64_t)v75[6];
    v86 = (_QWORD *)v81[6];
    if ((uint64_t **)v85 != v75 + 5 && v86 != v83)
    {
      do
      {
        v86[2] = *(_QWORD *)(v85 + 16);
        *((_DWORD *)v86 + 6) = *(_DWORD *)(v85 + 24);
        v85 = *(_QWORD *)(v85 + 8);
        v86 = (_QWORD *)v86[1];
      }
      while (v85 != v84 && v86 != v83);
    }
    if (v86 == v83)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v81 + 5, v81 + 5, v85, v84);
    }
    else
    {
      v89 = v81[5];
      v90 = *v86;
      *(_QWORD *)(v90 + 8) = *(_QWORD *)(v89 + 8);
      **(_QWORD **)(v89 + 8) = v90;
      do
      {
        v91 = (_QWORD *)v86[1];
        --v81[7];
        operator delete(v86);
        v86 = v91;
      }
      while (v91 != v83);
    }
    goto LABEL_112;
  }
  while (1)
  {
    while (1)
    {
      v79 = (uint64_t **)v76;
      v80 = v76[4];
      if (v77 >= v80)
        break;
      v76 = *v79;
      v78 = v79;
      if (!*v79)
        goto LABEL_93;
    }
    if (v80 >= v77)
      break;
    v76 = v79[1];
    if (!v76)
    {
      v78 = v79 + 1;
      goto LABEL_93;
    }
  }
  v81 = (uint64_t *)v79;
  if (v79 != v316)
    goto LABEL_98;
LABEL_112:
  v92 = v308;
  v93 = v236;
  v94 = *MEMORY[0x1E0DDFC50];
  v95 = &v236;
  v96 = &v236;
  if (!v236)
  {
LABEL_119:
    v98 = (uint64_t *)operator new(0x40uLL);
    v98[4] = v94;
    v98[5] = (uint64_t)(v98 + 5);
    v98[6] = (uint64_t)(v98 + 5);
    v98[7] = 0;
    *v98 = 0;
    v98[1] = 0;
    v98[2] = (uint64_t)v96;
    *v95 = v98;
    v99 = v98;
    if (*v235)
    {
      v235 = (uint64_t **)*v235;
      v99 = *v95;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v236, v99);
    ++v237;
    if (v98 == (uint64_t *)v92)
      goto LABEL_138;
LABEL_124:
    v100 = v98 + 5;
    v101 = (uint64_t)(v92 + 5);
    v102 = (uint64_t)v92[6];
    v103 = (_QWORD *)v98[6];
    if ((uint64_t **)v102 != v92 + 5 && v103 != v100)
    {
      do
      {
        v103[2] = *(_QWORD *)(v102 + 16);
        *((_DWORD *)v103 + 6) = *(_DWORD *)(v102 + 24);
        v102 = *(_QWORD *)(v102 + 8);
        v103 = (_QWORD *)v103[1];
      }
      while (v102 != v101 && v103 != v100);
    }
    if (v103 == v100)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v98 + 5, v98 + 5, v102, v101);
    }
    else
    {
      v106 = v98[5];
      v107 = *v103;
      *(_QWORD *)(v107 + 8) = *(_QWORD *)(v106 + 8);
      **(_QWORD **)(v106 + 8) = v107;
      do
      {
        v108 = (_QWORD *)v103[1];
        --v98[7];
        operator delete(v103);
        v103 = v108;
      }
      while (v108 != v100);
    }
    goto LABEL_138;
  }
  while (1)
  {
    while (1)
    {
      v96 = (uint64_t **)v93;
      v97 = v93[4];
      if (v94 >= v97)
        break;
      v93 = *v96;
      v95 = v96;
      if (!*v96)
        goto LABEL_119;
    }
    if (v97 >= v94)
      break;
    v93 = v96[1];
    if (!v93)
    {
      v95 = v96 + 1;
      goto LABEL_119;
    }
  }
  v98 = (uint64_t *)v96;
  if (v96 != v308)
    goto LABEL_124;
LABEL_138:
  v109 = v300;
  v110 = v236;
  v111 = *MEMORY[0x1E0DDFC28];
  v112 = &v236;
  v113 = &v236;
  if (!v236)
  {
LABEL_145:
    v115 = (uint64_t *)operator new(0x40uLL);
    v115[4] = v111;
    v115[5] = (uint64_t)(v115 + 5);
    v115[6] = (uint64_t)(v115 + 5);
    v115[7] = 0;
    *v115 = 0;
    v115[1] = 0;
    v115[2] = (uint64_t)v113;
    *v112 = v115;
    v116 = v115;
    if (*v235)
    {
      v235 = (uint64_t **)*v235;
      v116 = *v112;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v236, v116);
    ++v237;
    if (v115 == (uint64_t *)v109)
      goto LABEL_164;
LABEL_150:
    v117 = v115 + 5;
    v118 = (uint64_t)(v109 + 5);
    v119 = (uint64_t)v109[6];
    v120 = (_QWORD *)v115[6];
    if ((uint64_t **)v119 != v109 + 5 && v120 != v117)
    {
      do
      {
        v120[2] = *(_QWORD *)(v119 + 16);
        *((_DWORD *)v120 + 6) = *(_DWORD *)(v119 + 24);
        v119 = *(_QWORD *)(v119 + 8);
        v120 = (_QWORD *)v120[1];
      }
      while (v119 != v118 && v120 != v117);
    }
    if (v120 == v117)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v115 + 5, v115 + 5, v119, v118);
    }
    else
    {
      v123 = v115[5];
      v124 = *v120;
      *(_QWORD *)(v124 + 8) = *(_QWORD *)(v123 + 8);
      **(_QWORD **)(v123 + 8) = v124;
      do
      {
        v125 = (_QWORD *)v120[1];
        --v115[7];
        operator delete(v120);
        v120 = v125;
      }
      while (v125 != v117);
    }
    goto LABEL_164;
  }
  while (1)
  {
    while (1)
    {
      v113 = (uint64_t **)v110;
      v114 = v110[4];
      if (v111 >= v114)
        break;
      v110 = *v113;
      v112 = v113;
      if (!*v113)
        goto LABEL_145;
    }
    if (v114 >= v111)
      break;
    v110 = v113[1];
    if (!v110)
    {
      v112 = v113 + 1;
      goto LABEL_145;
    }
  }
  v115 = (uint64_t *)v113;
  if (v113 != v300)
    goto LABEL_150;
LABEL_164:
  v126 = v292;
  v127 = v236;
  v128 = *MEMORY[0x1E0DDFC48];
  v129 = &v236;
  v130 = &v236;
  if (!v236)
  {
LABEL_171:
    v132 = (uint64_t *)operator new(0x40uLL);
    v132[4] = v128;
    v132[5] = (uint64_t)(v132 + 5);
    v132[6] = (uint64_t)(v132 + 5);
    v132[7] = 0;
    *v132 = 0;
    v132[1] = 0;
    v132[2] = (uint64_t)v130;
    *v129 = v132;
    v133 = v132;
    if (*v235)
    {
      v235 = (uint64_t **)*v235;
      v133 = *v129;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v236, v133);
    ++v237;
    if (v132 == (uint64_t *)v126)
      goto LABEL_190;
LABEL_176:
    v134 = v132 + 5;
    v135 = (uint64_t)(v126 + 5);
    v136 = (uint64_t)v126[6];
    v137 = (_QWORD *)v132[6];
    if ((uint64_t **)v136 != v126 + 5 && v137 != v134)
    {
      do
      {
        v137[2] = *(_QWORD *)(v136 + 16);
        *((_DWORD *)v137 + 6) = *(_DWORD *)(v136 + 24);
        v136 = *(_QWORD *)(v136 + 8);
        v137 = (_QWORD *)v137[1];
      }
      while (v136 != v135 && v137 != v134);
    }
    if (v137 == v134)
    {
      std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(v132 + 5, v132 + 5, v136, v135);
    }
    else
    {
      v140 = v132[5];
      v141 = *v137;
      *(_QWORD *)(v141 + 8) = *(_QWORD *)(v140 + 8);
      **(_QWORD **)(v140 + 8) = v141;
      do
      {
        v142 = (_QWORD *)v137[1];
        --v132[7];
        operator delete(v137);
        v137 = v142;
      }
      while (v142 != v134);
    }
    goto LABEL_190;
  }
  while (1)
  {
    while (1)
    {
      v130 = (uint64_t **)v127;
      v131 = v127[4];
      if (v128 >= v131)
        break;
      v127 = *v130;
      v129 = v130;
      if (!*v130)
        goto LABEL_171;
    }
    if (v131 >= v128)
      break;
    v127 = v130[1];
    if (!v127)
    {
      v129 = v130 + 1;
      goto LABEL_171;
    }
  }
  v132 = (uint64_t *)v130;
  if (v130 != v292)
    goto LABEL_176;
LABEL_190:
  v143 = *(NSObject **)(a1 + 40);
  v144 = os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT);
  v145 = v292;
  if (v144)
  {
    v146 = v332[7];
    v147 = v324[7];
    v148 = v316[7];
    v149 = v308[7];
    v150 = v300[7];
    v151 = v292[7];
    *(_DWORD *)__p = 134219264;
    *(_QWORD *)&__p[4] = v146;
    *(_WORD *)&__p[12] = 2048;
    *(_QWORD *)&__p[14] = v147;
    *(_WORD *)&__p[22] = 2048;
    *(_QWORD *)&__p[24] = v148;
    *(_WORD *)v360 = 2048;
    *(_QWORD *)&v360[2] = v149;
    *(_WORD *)&v360[10] = 2048;
    *(_QWORD *)&v360[12] = v150;
    *(_WORD *)&v360[20] = 2048;
    *(_QWORD *)&v360[22] = v151;
    _os_log_impl(&dword_1B3CB3000, v143, OS_LOG_TYPE_DEFAULT, "#I Frequency list sizes %lu, %lu, %lu, %lu, %lu, %lu", __p, 0x3Eu);
    v145 = v292;
  }
  for (i = v145[6]; i != (uint64_t *)(v145 + 5); i = (uint64_t *)i[1])
  {
    v153 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG))
    {
      v154 = i[2];
      v155 = *((_DWORD *)i + 6);
      *(_DWORD *)__p = 134218240;
      *(_QWORD *)&__p[4] = v154;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v155;
      _os_log_debug_impl(&dword_1B3CB3000, v153, OS_LOG_TYPE_DEBUG, "#D Dl Addloop:frequency (%llu), bandwidth (%u)", __p, 0x12u);
      v145 = v292;
    }
  }
  if (v237)
  {
    v156 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = a2;
      _os_log_impl(&dword_1B3CB3000, v156, OS_LOG_TYPE_DEFAULT, "#I Sending frequency report for SubId=%d", __p, 8u);
    }
    v234[0] = 0;
    v234[1] = 0;
    v233 = v234;
    std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v233, v235, &v236);
    v157 = *(_QWORD *)(a1 + 136);
    v340[1] = 0;
    v340[0] = 0;
    v339 = v340;
    std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v339, v233, v234);
    v349 = a2;
    v348 = 0;
    v347 = 0;
    *(_QWORD *)&v158 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v158 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v366 = v158;
    v365 = v158;
    v364 = v158;
    v363 = v158;
    v362 = v158;
    v361 = v158;
    *(_OWORD *)&v360[16] = v158;
    *(_OWORD *)v360 = v158;
    *(_OWORD *)&__p[16] = v158;
    *(_OWORD *)__p = v158;
    v159 = *(pthread_mutex_t **)(v157 + 24);
    v367[0] = (void *)10;
    v367[1] = __p;
    v368[0] = 0;
    v368[1] = v159;
    pthread_mutex_lock(v159);
    v160 = *(unsigned int **)(v157 + 8);
    if (!v160)
    {
      v162 = *(uint64_t ***)v157;
      goto LABEL_213;
    }
    v161 = atomic_load(v160 + 2);
    v162 = *(uint64_t ***)v157;
    if (v161 != 1)
    {
LABEL_210:
      v160 = *(unsigned int **)(v157 + 8);
      if (v160)
      {
        v166 = v160 + 2;
        do
          v167 = __ldxr(v166);
        while (__stxr(v167 + 1, v166));
      }
LABEL_213:
      v168 = v348;
      v347 = v162;
      v348 = v160;
      if (v168)
      {
        v169 = v168 + 2;
        do
        {
          v170 = __ldaxr(v169);
          v171 = v170 - 1;
        }
        while (__stlxr(v171, v169));
        if (!v171)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v168 + 16))(v168);
          v172 = v168 + 3;
          do
          {
            v173 = __ldaxr(v172);
            v174 = v173 - 1;
          }
          while (__stlxr(v174, v172));
          if (!v174)
            (*(void (**)(unsigned int *))(*(_QWORD *)v168 + 24))(v168);
        }
      }
      pthread_mutex_unlock(v368[1]);
      v175 = (char *)v367[1];
      if (v367[1])
      {
        if ((uint64_t)&v368[0][-1].__opaque[55] >= 0)
        {
          v176 = (char *)v367[1] + 16 * (uint64_t)v368[0];
          do
          {
            v177 = (unsigned int *)*((_QWORD *)v176 - 1);
            if (v177)
            {
              v178 = v177 + 2;
              do
              {
                v179 = __ldaxr(v178);
                v180 = v179 - 1;
              }
              while (__stlxr(v180, v178));
              if (!v180)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v177 + 16))(v177);
                v181 = v177 + 3;
                do
                {
                  v182 = __ldaxr(v181);
                  v183 = v182 - 1;
                }
                while (__stlxr(v183, v181));
                if (!v183)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v177 + 24))(v177);
              }
            }
            v176 -= 16;
          }
          while (v176 > v175);
        }
        if (v367[0] >= (void *)0xB)
          operator delete(v367[1]);
      }
      *(_QWORD *)&v184 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v184 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v371 = v184;
      v370 = v184;
      v369 = v184;
      *(_OWORD *)v368 = v184;
      *(_OWORD *)v367 = v184;
      v366 = v184;
      v365 = v184;
      v364 = v184;
      v363 = v184;
      v362 = v184;
      v361 = v184;
      *(_OWORD *)&v360[16] = v184;
      *(_OWORD *)v360 = v184;
      *(_OWORD *)__p = v184;
      *(_OWORD *)&__p[16] = v184;
      __p[0] = 0;
      v372 = 0xAAAAAAAAAAAAAAAALL;
      v373 = 10;
      v374 = &__p[8];
      v375 = 0;
      v376 = &v339;
      v377 = &v349;
      v379 = 0;
      v378 = 0;
      v185 = v347;
      v186 = (uint64_t)*v347;
      v344 = __p;
      v345 = v157;
      v346 = v186;
      *(_QWORD *)&v342 = *(_QWORD *)(v186 + 8);
      *((_QWORD *)&v342 + 1) = v186;
      *(_QWORD *)&v343 = __p;
      *((_QWORD *)&v343 + 1) = v186;
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v342);
      v341[0] = *v185;
      v341[1] = v341[0];
      v341[2] = __p;
      v341[3] = v341[0];
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v341);
      v350 = v342;
      v351 = v343;
      v187 = v341[0];
      v188 = v342;
      if ((_QWORD)v342 == v341[0])
      {
        if (HIDWORD(v378) <= v378)
        {
LABEL_261:
          boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)__p);
          v202 = v348;
          if (v348)
          {
            v203 = v348 + 2;
            do
            {
              v204 = __ldaxr(v203);
              v205 = v204 - 1;
            }
            while (__stlxr(v205, v203));
            if (!v205)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v202 + 16))(v202);
              v206 = v202 + 3;
              do
              {
                v207 = __ldaxr(v206);
                v208 = v207 - 1;
              }
              while (__stlxr(v208, v206));
              if (!v208)
                (*(void (**)(unsigned int *))(*(_QWORD *)v202 + 24))(v202);
            }
          }
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v340[0]);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v234[0]);
          goto LABEL_270;
        }
      }
      else
      {
        v189 = v351;
        if (!*(_BYTE *)v351)
        {
          v190 = *(_QWORD *)(*(_QWORD *)(v342 + 16) + 32);
          v191 = *(_QWORD *)(v351 + 272);
          v353 = 0;
          v354 = 0;
          v352 = &v353;
          std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v352, *(_QWORD **)v191, (_QWORD *)(v191 + 8));
          v192 = *(_QWORD *)(v190 + 24);
          if (!v192)
          {
            std::runtime_error::runtime_error(&v358, "call to empty boost::function");
            v358.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
            boost::throw_exception<boost::bad_function_call>(&v358);
          }
          v193 = **(unsigned int **)(v189 + 280);
          v194 = *(void (**)(uint64_t, _QWORD ***, uint64_t))((v192 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v355 = v352;
          v356 = v353;
          v357 = v354;
          if (v354)
          {
            v353[2] = &v356;
            v352 = &v353;
            v353 = 0;
            v354 = 0;
          }
          else
          {
            v355 = &v356;
          }
          v194(v190 + 32, &v355, v193);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v356);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v353);
          if (!*(_BYTE *)v189)
            *(_BYTE *)v189 = 1;
        }
        *(_QWORD *)&v350 = *(_QWORD *)(v188 + 8);
        boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v350);
        v195 = v351;
        if (*(_BYTE *)v351)
          *(_BYTE *)v351 = 0;
        for (j = v350; (_QWORD)v350 != v187; j = v350)
        {
          v197 = *(_QWORD *)(*(_QWORD *)(j + 16) + 32);
          v198 = *(_QWORD *)(v195 + 272);
          v353 = 0;
          v354 = 0;
          v352 = &v353;
          std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v352, *(_QWORD **)v198, (_QWORD *)(v198 + 8));
          v199 = *(_QWORD *)(v197 + 24);
          if (!v199)
          {
            std::runtime_error::runtime_error(&v358, "call to empty boost::function");
            v358.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
            boost::throw_exception<boost::bad_function_call>(&v358);
          }
          v200 = **(unsigned int **)(v195 + 280);
          v201 = *(void (**)(uint64_t, _QWORD ***, uint64_t))((v199 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v355 = v352;
          v356 = v353;
          v357 = v354;
          if (v354)
          {
            v353[2] = &v356;
            v352 = &v353;
            v353 = 0;
            v354 = 0;
          }
          else
          {
            v355 = &v356;
          }
          v201(v197 + 32, &v355, v200);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v356);
          std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v353);
          if (!*(_BYTE *)v195)
            *(_BYTE *)v195 = 1;
          *(_QWORD *)&v350 = *(_QWORD *)(j + 8);
          boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v350);
          v195 = v351;
          if (*(_BYTE *)v351)
            *(_BYTE *)v351 = 0;
        }
        if (*((_DWORD *)v344 + 73) <= *((_DWORD *)v344 + 72))
          goto LABEL_261;
      }
      boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v345, v346);
      goto LABEL_261;
    }
    v163 = *v162;
    v164 = *(_QWORD *)(v157 + 16);
    if ((uint64_t *)v164 == *v162)
    {
      v164 = v163[1];
      *(_QWORD *)&v350 = v164;
      if (v163 == (uint64_t *)v164)
      {
LABEL_209:
        *(_QWORD *)(v157 + 16) = v164;
        goto LABEL_210;
      }
    }
    else
    {
      *(_QWORD *)&v350 = *(_QWORD *)(v157 + 16);
    }
    v165 = *(_QWORD *)(v164 + 16);
    if (*(_BYTE *)(v165 + 24))
    {
      v164 = *(_QWORD *)(v164 + 8);
    }
    else
    {
      v164 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v163, (int *)(v165 + 64), (uint64_t **)&v350);
      v162 = *(uint64_t ***)v157;
    }
    goto LABEL_209;
  }
LABEL_270:
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v236);
  _Block_object_dispose(&v287, 8);
  _Block_object_dispose(&v291, 8);
  if (v298)
  {
    v209 = (uint64_t *)v297;
    v210 = v296;
    v211 = *(_QWORD *)v297;
    *(_QWORD *)(v211 + 8) = *(_QWORD *)(v296 + 8);
    **(_QWORD **)(v210 + 8) = v211;
    v298 = 0;
    if (v209 != &v296)
    {
      do
      {
        v212 = (uint64_t *)v209[1];
        operator delete(v209);
        v209 = v212;
      }
      while (v212 != &v296);
    }
  }
  _Block_object_dispose(&v299, 8);
  if (v306)
  {
    v213 = (uint64_t *)v305;
    v214 = v304;
    v215 = *(_QWORD *)v305;
    *(_QWORD *)(v215 + 8) = *(_QWORD *)(v304 + 8);
    **(_QWORD **)(v214 + 8) = v215;
    v306 = 0;
    if (v213 != &v304)
    {
      do
      {
        v216 = (uint64_t *)v213[1];
        operator delete(v213);
        v213 = v216;
      }
      while (v216 != &v304);
    }
  }
  _Block_object_dispose(&v307, 8);
  if (v314)
  {
    v217 = (uint64_t *)v313;
    v218 = v312;
    v219 = *(_QWORD *)v313;
    *(_QWORD *)(v219 + 8) = *(_QWORD *)(v312 + 8);
    **(_QWORD **)(v218 + 8) = v219;
    v314 = 0;
    if (v217 != &v312)
    {
      do
      {
        v220 = (uint64_t *)v217[1];
        operator delete(v217);
        v217 = v220;
      }
      while (v220 != &v312);
    }
  }
  _Block_object_dispose(&v315, 8);
  if (v322)
  {
    v221 = (uint64_t *)v321;
    v222 = v320;
    v223 = *(_QWORD *)v321;
    *(_QWORD *)(v223 + 8) = *(_QWORD *)(v320 + 8);
    **(_QWORD **)(v222 + 8) = v223;
    v322 = 0;
    if (v221 != &v320)
    {
      do
      {
        v224 = (uint64_t *)v221[1];
        operator delete(v221);
        v221 = v224;
      }
      while (v224 != &v320);
    }
  }
  _Block_object_dispose(&v323, 8);
  if (v330)
  {
    v225 = (uint64_t *)v329;
    v226 = v328;
    v227 = *(_QWORD *)v329;
    *(_QWORD *)(v227 + 8) = *(_QWORD *)(v328 + 8);
    **(_QWORD **)(v226 + 8) = v227;
    v330 = 0;
    if (v225 != &v328)
    {
      do
      {
        v228 = (uint64_t *)v225[1];
        operator delete(v225);
        v225 = v228;
      }
      while (v228 != &v328);
    }
  }
  _Block_object_dispose(&v331, 8);
  if (v338)
  {
    v229 = (uint64_t *)v337;
    v230 = v336;
    v231 = *(_QWORD *)v337;
    *(_QWORD *)(v231 + 8) = *(_QWORD *)(v336 + 8);
    **(_QWORD **)(v230 + 8) = v231;
    v338 = 0;
    if (v229 != &v336)
    {
      do
      {
        v232 = (uint64_t *)v229[1];
        operator delete(v229);
        v229 = v232;
      }
      while (v232 != &v336);
    }
  }
}

void sub_1B3CBA12C()
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x4D0]);
  JUMPOUT(0x1B3CBA3B4);
}

void sub_1B3CBA13C(void *a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  std::runtime_error::~runtime_error((std::runtime_error *)&STACK[0x4C0]);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((_QWORD *)STACK[0x498]);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v7);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v9);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v8);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v6);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v4);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v5);
    JUMPOUT(0x1B3CBA3DCLL);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(STACK[0x470] + 16));
  __cxa_rethrow();
}

void sub_1B3CBA1C4(uint64_t a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v6);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)&v8);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v7);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v5);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v3);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v4);
    JUMPOUT(0x1B3CBA3DCLL);
  }
  JUMPOUT(0x1B3CBA194);
}

void sub_1B3CBA1E4(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (void *)STACK[0x4D0];
  if (STACK[0x4D0])
  {
    STACK[0x4D8] = (unint64_t)v2;
    operator delete(v2);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v10, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v3);
  _Block_object_dispose(&v11, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v4);
  _Block_object_dispose(&v12, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v5);
  _Block_object_dispose(&v13, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v6);
  _Block_object_dispose(&v14, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v7);
  _Block_object_dispose(&v15, 8);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v8);
  _Unwind_Resume(a1);
}

void sub_1B3CBA228()
{
  unint64_t v0;
  unint64_t v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v0 = STACK[0x578];
  if (STACK[0x578])
  {
    if ((uint64_t)(STACK[0x580] - 1) >= 0)
    {
      v1 = v0 + 16 * STACK[0x580];
      do
      {
        v2 = *(unsigned int **)(v1 - 8);
        if (v2)
        {
          v3 = v2 + 2;
          do
          {
            v4 = __ldaxr(v3);
            v5 = v4 - 1;
          }
          while (__stlxr(v5, v3));
          if (!v5)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
            v6 = v2 + 3;
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
              (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
          }
        }
        v1 -= 16;
      }
      while (v1 > v0);
    }
    if (STACK[0x570] >= 0xB)
      operator delete((void *)STACK[0x578]);
  }
  JUMPOUT(0x1B3CBA3B4);
}

void sub_1B3CBA2CC()
{
  JUMPOUT(0x1B3CBA3BCLL);
}

void sub_1B3CBA2D4()
{
  JUMPOUT(0x1B3CBA3C4);
}

void sub_1B3CBA2DC(void *a1, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v3, 177, v2, v4);
    JUMPOUT(0x1B3CB8A1CLL);
  }
  JUMPOUT(0x1B3CBA460);
}

void sub_1B3CBA318(void *a1, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v3, 185, v2, v4);
    JUMPOUT(0x1B3CB8DF0);
  }
  JUMPOUT(0x1B3CBA460);
}

void sub_1B3CBA350(void *a1, int a2)
{
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v3, 178, v2, v4);
    JUMPOUT(0x1B3CB8B70);
  }
  JUMPOUT(0x1B3CBA460);
}

void sub_1B3CBA388(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3CBA460);
}

void sub_1B3CBA398()
{
  JUMPOUT(0x1B3CBA3CCLL);
}

void std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a1[1]);
    if (a1[7])
    {
      v3 = a1[5];
      v2 = (uint64_t *)a1[6];
      v4 = *v2;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
      **(_QWORD **)(v3 + 8) = v4;
      a1[7] = 0;
      if (v2 != a1 + 5)
      {
        do
        {
          v5 = (uint64_t *)v2[1];
          operator delete(v2);
          v2 = v5;
        }
        while (v5 != a1 + 5);
      }
    }
    operator delete(a1);
  }
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 288);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 296);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 296);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 296) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 292);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 296);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 296) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_1B3CBAB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3CBAB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_10(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(_QWORD *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void desense::QMICommandDriver::addSingleFrequencyToMap_sync(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t *a5)
{
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  unsigned int v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  unsigned int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    v9 = a3 >> 1;
    v10 = a5[1];
    if ((uint64_t *)v10 == a5)
      goto LABEL_5;
    while (*(_QWORD *)(v10 + 16) != a2)
    {
      v10 = *(_QWORD *)(v10 + 8);
      if ((uint64_t *)v10 == a5)
        goto LABEL_5;
    }
    if ((uint64_t *)v10 == a5 || (v16 = *(_DWORD *)(v10 + 24), v9 > v16))
    {
LABEL_5:
      v11 = operator new(0x20uLL);
      v11[1] = a5;
      v11[2] = a2;
      *((_DWORD *)v11 + 6) = v9;
      v12 = *a5;
      *v11 = *a5;
      *(_QWORD *)(v12 + 8) = v11;
      *a5 = (uint64_t)v11;
      v13 = a5[2] + 1;
      a5[2] = v13;
      v14 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v18 = 134218752;
        v19 = a2;
        v20 = 1024;
        v21 = v9;
        v22 = 1024;
        v23 = a4;
        v24 = 2048;
        v25 = v13;
        _os_log_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_DEFAULT, "#I Adding Frequency: %llu, Bandwidth: %u, Priority: %d Size %lu", (uint8_t *)&v18, 0x22u);
      }
    }
    else
    {
      v17 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v18 = 134218240;
        v19 = a2;
        v20 = 1024;
        v21 = v16;
        _os_log_debug_impl(&dword_1B3CB3000, v17, OS_LOG_TYPE_DEBUG, "#D Duplicated frequency (%llu), keeping higher bandwidth (%u)", (uint8_t *)&v18, 0x12u);
      }
    }
  }
  else
  {
    v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v18) = 0;
      _os_log_error_impl(&dword_1B3CB3000, v15, OS_LOG_TYPE_ERROR, "Given report structure is NULL!", (uint8_t *)&v18, 2u);
    }
  }
}

uint64_t ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3CBB0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  char *v7;
  char *v8;
  char *v9;
  int8x8_t *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  void (*v30)(uint64_t, int8x8_t *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2;
  v31 = &__block_descriptor_tmp_70_1;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 16)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = (char *)operator new(0x18uLL);
    v9 = v8;
    v8[8] = 16;
    *(_QWORD *)v8 = off_1E66DED98;
    *(_QWORD *)(v8 + 9) = 0;
    v10 = (int8x8_t *)(v8 + 9);
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((uint64_t)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2((uint64_t)v29, (int8x8_t *)(v7 + 9));
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3CBB458(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t a1, int8x8_t *a2)
{
  const void *v3;
  CFTypeID v4;
  const void *v5;
  uint64_t (*v6)(uint64_t);
  int8x16_t v7;

  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRetain(v3);
    CFRetain(v3);
    v4 = CFGetTypeID(v3);
    if (v4 == CFDataGetTypeID())
    {
      CFRetain(v3);
      CFRetain(v3);
      CFRelease(v3);
      v5 = v3;
    }
    else
    {
      v5 = 0;
    }
    CFRelease(v3);
    CFRelease(v3);
  }
  else
  {
    v5 = 0;
  }
  v6 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!v5)
    v6 = 0;
  if (v6)
  {
    if (v5)
    {
      CFRetain(v5);
      CFRetain(v5);
    }
    ctu::cf::assign();
    if (v5)
      CFRelease(v5);
    v7 = vorrq_s8(vandq_s8((int8x16_t)0, (int8x16_t)xmmword_1B3DD0CA0), vandq_s8((int8x16_t)0, (int8x16_t)xmmword_1B3DD0C90));
    *a2 = vorr_s8(*(int8x8_t *)v7.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
    if (v5)
    {
      CFRelease(v5);
      goto LABEL_18;
    }
  }
  else if (v5)
  {
LABEL_18:
    CFRelease(v5);
  }
}

void sub_1B3CBB694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, const void *a16, const void *a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a17);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a14);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  _Unwind_Resume(a1);
}

void sub_1B3CBB6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void *v8;
  va_list va;
  uint64_t v10;
  const void *v11;
  va_list va1;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, const void *);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_113(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  float *v7;
  _BYTE *v8;
  _BYTE *v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, float *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_114;
  v31 = &__block_descriptor_tmp_116;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 25)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 25;
    *(_QWORD *)v8 = off_1E66DF068;
    *((_DWORD *)v8 + 3) = 0;
    v10 = (float *)(v8 + 12);
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_114((CFTypeID)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3CBB994(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_114(CFTypeID result, float *a2)
{
  void *v3;
  float v4;
  CFTypeID v5;
  const __CFNumber *v6;
  double v7;

  v3 = *(void **)(result + 32);
  v7 = 0.0;
  v4 = 0.0;
  if (v3)
  {
    v5 = CFGetTypeID(v3);
    result = CFNumberGetTypeID();
    if (v5 == result)
    {
      result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary> const&>(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  CFTypeID v7;
  CFTypeRef cf;
  CFTypeRef v9;

  v4 = *a1;
  v5 = *a2;
  v9 = v5;
  if (v5)
    CFRetain(v5);
  v6 = *a3;
  if (v6 && (v7 = CFGetTypeID(v6), v7 == CFDictionaryGetTypeID()))
  {
    cf = v6;
    CFRetain(v6);
  }
  else
  {
    cf = 0;
  }
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v4 + 16))(v4, &v9, &cf);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
}

void sub_1B3CBBACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3CBBAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm13ConditionFail10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CBBBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CBBBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CBBBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_5(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  tlv *TlvValue;
  int v9;
  tlv *v10;
  int v11;
  uint64_t v12;
  tlv *v13;
  int v14;
  tlv *v15;
  int v16;
  uint64_t v17;
  tlv *v18;
  int v19;
  tlv *v20;
  int v21;
  uint64_t v22;
  __CFDictionary *v23;
  __CFDictionary *v24;
  CFTypeID v25;
  __CFDictionary *v26;
  __CFDictionary *v27;
  CFMutableDictionaryRef v28;
  CFMutableDictionaryRef v29;
  CFMutableDictionaryRef v30;
  CFTypeRef v31;
  __CFDictionary *v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t *);
  void *v35;
  CFTypeRef cf;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];

  v39[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v31 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
  {
    v30 = Mutable;
    v31 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    v30 = 0;
  }
  v7 = (__CFDictionary *)MEMORY[0x1E0C809B0];
  v38 = 0;
  v32 = (__CFDictionary *)MEMORY[0x1E0C809B0];
  v33 = 1174405120;
  v34 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm33ContinuousTxSubframeDenialsStatusENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v35 = &__block_descriptor_tmp_269;
  cf = v6;
  if (v6)
    CFRetain(v6);
  v37 = *MEMORY[0x1E0DDF6B8];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v10 = TlvValue;
  if (TlvValue)
  {
    v11 = v9;
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)8);
    if ((v11 & 0xFFFFFFF8) != 0)
      v12 = *(_QWORD *)v10;
    else
      v12 = 0;
    v39[0] = v12;
    v34((uint64_t)&v32, v39);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
  {
    CFRelease(v6);
    v29 = v6;
    CFRetain(v6);
  }
  else
  {
    v29 = 0;
  }
  v38 = 0;
  v32 = v7;
  v33 = 1174405120;
  v34 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm29QMITxPowerLimitEnforceFailureENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v35 = &__block_descriptor_tmp_271;
  cf = v6;
  if (v6)
    CFRetain(v6);
  v37 = *MEMORY[0x1E0DDF528];
  v13 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v15 = v13;
  if (v13)
  {
    v16 = v14;
    tlv::throwIfNotEnoughBytes(v13, (const unsigned __int8 *)v13 + v14, (const unsigned __int8 *)8);
    if ((v16 & 0xFFFFFFF8) != 0)
      v17 = *(_QWORD *)v15;
    else
      v17 = 0;
    v39[0] = v17;
    v34((uint64_t)&v32, v39);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
  {
    CFRelease(v6);
    v28 = v6;
    CFRetain(v6);
  }
  else
  {
    v28 = 0;
  }
  v38 = 0;
  v32 = v7;
  v33 = 1174405120;
  v34 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm30WCI2TxPowerLimitEnforceFailureENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v35 = &__block_descriptor_tmp_273;
  cf = v6;
  if (v6)
    CFRetain(v6);
  v37 = *MEMORY[0x1E0DDF580];
  v18 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v20 = v18;
  if (v18)
  {
    v21 = v19;
    tlv::throwIfNotEnoughBytes(v18, (const unsigned __int8 *)v18 + v19, (const unsigned __int8 *)8);
    if ((v21 & 0xFFFFFFF8) != 0)
      v22 = *(_QWORD *)v20;
    else
      v22 = 0;
    v39[0] = v22;
    v34((uint64_t)&v32, v39);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  v32 = 0;
  v23 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v24 = v23;
  if (v23)
    v32 = v23;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v23, (CFTypeRef)*MEMORY[0x1E0DDF450], v6);
  if (v24 && (v25 = CFGetTypeID(v24), v25 == CFDictionaryGetTypeID()))
  {
    v27 = v24;
    CFRetain(v24);
    v26 = v24;
  }
  else
  {
    v26 = 0;
    v27 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, (const void **)&v27, 0);
  if (v26)
    CFRelease(v26);
  if (v24)
    CFRelease(v24);
  if (v31)
    CFRelease(v31);
}

void sub_1B3CBBFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm29QMITxPowerLimitEnforceFailureENS_3abm13ConditionFail10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  UInt8 *v4;
  CFDataRef v5;

  v3 = *a2;
  v4 = (UInt8 *)operator new(8uLL);
  *(_QWORD *)v4 = v3;
  v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, 8);
  operator delete(v4);
  ctu::cf::insert<__CFString const*,__CFData const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v5);
  if (v5)
    CFRelease(v5);
}

void sub_1B3CBC1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3CBC1F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::sendStateUpdate_sync(uint64_t a1, const void **a2, int a3)
{
  const void *v3;
  uint64_t (*v4)(uint64_t);
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  pthread_mutex_t *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CFTypeRef *v43;
  CFTypeRef v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, CFTypeRef *, uint64_t);
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  CFTypeRef *v51;
  CFTypeRef v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, CFTypeRef *, uint64_t);
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  CFTypeRef v63;
  _QWORD v64[4];
  __int128 v65;
  __int128 v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t **v70;
  unsigned int *v71;
  int v72;
  __int128 v73;
  __int128 v74;
  CFTypeRef cf;
  std::runtime_error v76;
  _BYTE buf[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  void *__p[2];
  pthread_mutex_t *v87[2];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  CFTypeRef *v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a2)
    v4 = 0;
  if (v4)
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = a3;
      *(_WORD *)&buf[8] = 2112;
      *(_QWORD *)&buf[10] = v3;
      _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I Update for SubId=%d -> %@", buf, 0x12u);
      v3 = *a2;
    }
    if (v3)
    {
      CFRetain(v3);
      v9 = *(_QWORD *)(a1 + 152);
      v63 = v3;
      CFRetain(v3);
    }
    else
    {
      v9 = *(_QWORD *)(a1 + 152);
      v63 = 0;
    }
    v72 = a3;
    v70 = 0;
    v71 = 0;
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v84 = v10;
    v85 = v10;
    v82 = v10;
    v83 = v10;
    v80 = v10;
    v81 = v10;
    v78 = v10;
    v79 = v10;
    *(_OWORD *)buf = v10;
    *(_OWORD *)&buf[16] = v10;
    v11 = *(pthread_mutex_t **)(v9 + 24);
    __p[0] = (void *)10;
    __p[1] = buf;
    v87[0] = 0;
    v87[1] = v11;
    pthread_mutex_lock(v11);
    v12 = *(unsigned int **)(v9 + 8);
    if (!v12)
    {
      v14 = *(uint64_t ***)v9;
      goto LABEL_22;
    }
    v13 = atomic_load(v12 + 2);
    v14 = *(uint64_t ***)v9;
    if (v13 != 1)
    {
LABEL_19:
      v12 = *(unsigned int **)(v9 + 8);
      if (v12)
      {
        v18 = v12 + 2;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
LABEL_22:
      v20 = v71;
      v70 = v14;
      v71 = v12;
      if (v20)
      {
        v21 = v20 + 2;
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
          v24 = v20 + 3;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
            (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 24))(v20);
        }
      }
      pthread_mutex_unlock(v87[1]);
      v27 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)&v87[0][-1].__opaque[55] >= 0)
        {
          v28 = (char *)__p[1] + 16 * (uint64_t)v87[0];
          do
          {
            v29 = (unsigned int *)*((_QWORD *)v28 - 1);
            if (v29)
            {
              v30 = v29 + 2;
              do
              {
                v31 = __ldaxr(v30);
                v32 = v31 - 1;
              }
              while (__stlxr(v32, v30));
              if (!v32)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
                v33 = v29 + 3;
                do
                {
                  v34 = __ldaxr(v33);
                  v35 = v34 - 1;
                }
                while (__stlxr(v35, v33));
                if (!v35)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
              }
            }
            v28 -= 16;
          }
          while (v28 > v27);
        }
        if (__p[0] >= (void *)0xB)
          operator delete(__p[1]);
      }
      *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v89 = v36;
      v90 = v36;
      *(_OWORD *)v87 = v36;
      v88 = v36;
      v85 = v36;
      *(_OWORD *)__p = v36;
      v83 = v36;
      v84 = v36;
      v81 = v36;
      v82 = v36;
      v79 = v36;
      v80 = v36;
      *(_OWORD *)&buf[16] = v36;
      v78 = v36;
      *(_OWORD *)buf = v36;
      buf[0] = 0;
      v91 = 0xAAAAAAAAAAAAAAAALL;
      v92 = 10;
      v93 = &buf[8];
      v94 = 0;
      v95 = &v63;
      v96 = &v72;
      v97 = 0;
      v98 = 0;
      v37 = v70;
      v38 = (uint64_t)*v70;
      v67 = buf;
      v68 = v9;
      v69 = v38;
      *(_QWORD *)&v65 = *(_QWORD *)(v38 + 8);
      *((_QWORD *)&v65 + 1) = v38;
      *(_QWORD *)&v66 = buf;
      *((_QWORD *)&v66 + 1) = v38;
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v65);
      v64[0] = *v37;
      v64[1] = v64[0];
      v64[2] = buf;
      v64[3] = v64[0];
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v64);
      v73 = v65;
      v74 = v66;
      v39 = v64[0];
      v40 = v65;
      if ((_QWORD)v65 == v64[0])
      {
        if (HIDWORD(v97) <= v97)
          goto LABEL_72;
      }
      else
      {
        v41 = v74;
        if (!*(_BYTE *)v74)
        {
          v42 = *(_QWORD *)(*(_QWORD *)(v65 + 16) + 32);
          v43 = *(CFTypeRef **)(v74 + 272);
          v44 = *v43;
          if (*v43)
            CFRetain(*v43);
          v45 = *(_QWORD *)(v42 + 24);
          if (!v45)
          {
            std::runtime_error::runtime_error(&v76, "call to empty boost::function");
            v76.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
            boost::throw_exception<boost::bad_function_call>(&v76);
          }
          v46 = **(unsigned int **)(v41 + 280);
          v47 = *(void (**)(uint64_t, CFTypeRef *, uint64_t))((v45 & 0xFFFFFFFFFFFFFFFELL) + 8);
          cf = v44;
          v47(v42 + 32, &cf, v46);
          if (cf)
            CFRelease(cf);
          if (!*(_BYTE *)v41)
            *(_BYTE *)v41 = 1;
        }
        *(_QWORD *)&v73 = *(_QWORD *)(v40 + 8);
        boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v73);
        v48 = v74;
        if (*(_BYTE *)v74)
          *(_BYTE *)v74 = 0;
        for (i = v73; (_QWORD)v73 != v39; i = v73)
        {
          v50 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
          v51 = *(CFTypeRef **)(v48 + 272);
          v52 = *v51;
          if (*v51)
            CFRetain(*v51);
          v53 = *(_QWORD *)(v50 + 24);
          if (!v53)
          {
            std::runtime_error::runtime_error(&v76, "call to empty boost::function");
            v76.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
            boost::throw_exception<boost::bad_function_call>(&v76);
          }
          v54 = **(unsigned int **)(v48 + 280);
          v55 = *(void (**)(uint64_t, CFTypeRef *, uint64_t))((v53 & 0xFFFFFFFFFFFFFFFELL) + 8);
          cf = v52;
          v55(v50 + 32, &cf, v54);
          if (cf)
            CFRelease(cf);
          if (!*(_BYTE *)v48)
            *(_BYTE *)v48 = 1;
          *(_QWORD *)&v73 = *(_QWORD *)(i + 8);
          boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v73);
          v48 = v74;
          if (*(_BYTE *)v74)
            *(_BYTE *)v74 = 0;
        }
        if (*((_DWORD *)v67 + 73) <= *((_DWORD *)v67 + 72))
          goto LABEL_72;
      }
      boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v68, v69);
LABEL_72:
      boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
      v56 = v71;
      if (v71)
      {
        v57 = v71 + 2;
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 16))(v56);
          v60 = v56 + 3;
          do
          {
            v61 = __ldaxr(v60);
            v62 = v61 - 1;
          }
          while (__stlxr(v62, v60));
          if (!v62)
            (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 24))(v56);
        }
      }
      if (v63)
        CFRelease(v63);
      if (v3)
        CFRelease(v3);
      return;
    }
    v15 = *v14;
    v16 = *(_QWORD *)(v9 + 16);
    if ((uint64_t *)v16 == *v14)
    {
      v16 = v15[1];
      *(_QWORD *)&v73 = v16;
      if (v15 == (uint64_t *)v16)
      {
LABEL_18:
        *(_QWORD *)(v9 + 16) = v16;
        goto LABEL_19;
      }
    }
    else
    {
      *(_QWORD *)&v73 = *(_QWORD *)(v9 + 16);
    }
    v17 = *(_QWORD *)(v16 + 16);
    if (*(_BYTE *)(v17 + 24))
    {
      v16 = *(_QWORD *)(v16 + 8);
    }
    else
    {
      v16 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v15, (int *)(v17 + 64), (uint64_t **)&v73);
      v14 = *(uint64_t ***)v9;
    }
    goto LABEL_18;
  }
}

void sub_1B3CBC874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a33);
  JUMPOUT(0x1B3CBCA28);
}

void sub_1B3CBC884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,std::runtime_error a31)
{
  const void *v31;
  const void *v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  std::runtime_error::~runtime_error(&a31);
  if (v31)
    CFRelease(v31);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v36);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache(&v38);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v37);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v35);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v34);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a25 + 16));
  __cxa_rethrow();
}

void sub_1B3CBC910(_Unwind_Exception *a1, int a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v6);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache(&v8);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v7);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v5);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B3CBC8E0);
}

void sub_1B3CBC954(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unint64_t a53,char *__p,uint64_t a55)
{
  char *v55;
  unsigned int *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;

  if (__p)
  {
    if (a55 - 1 >= 0)
    {
      v55 = &__p[16 * a55];
      do
      {
        v56 = (unsigned int *)*((_QWORD *)v55 - 1);
        if (v56)
        {
          v57 = v56 + 2;
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 16))(v56);
            v60 = v56 + 3;
            do
            {
              v61 = __ldaxr(v60);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v60));
            if (!v62)
              (*(void (**)(unsigned int *))(*(_QWORD *)v56 + 24))(v56);
          }
        }
        v55 -= 16;
      }
      while (v55 > __p);
    }
    if (a53 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x1B3CBCA28);
}

void sub_1B3CBCA04(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3CBCA40);
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 288);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 296);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 296) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 296);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 296) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 292);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 296);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 296) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_1B3CBD0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3CBD0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_1B3CBD3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v4 = a1[32];
  if (v4 == a1[30])
  {
    if (v4 == -1)
    {
      v6 = (_QWORD *)a1[31];
    }
    else
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      v6 = a1;
      if (v5 >= 0xB)
      {
        if (v5 >= 0xAAAAAAAAAAAAAABLL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v6 = operator new(24 * v5);
      }
      std::uninitialized_copy[abi:ne180100]<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *,boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *>(a1[31], a1[31] + 24 * v4, (uint64_t)v6);
      boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(a1);
      a1[30] = v5;
      a1[31] = v6;
      v4 = a1[32];
    }
    v7 = &v6[3 * v4 + 1];
    result = *(_QWORD *)(a2 + 8);
    if (*(_DWORD *)a2 == *(int *)a2 >> 31)
    {
      *v7 = result;
      v12 = *(_QWORD *)(a2 + 16);
      v6[3 * v4 + 2] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      goto LABEL_22;
    }
LABEL_21:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    *v7 = result;
    goto LABEL_22;
  }
  v6 = (_QWORD *)a1[31];
  v7 = &v6[3 * v4 + 1];
  result = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)a2 != *(int *)a2 >> 31)
    goto LABEL_21;
  *v7 = result;
  v9 = *(_QWORD *)(a2 + 16);
  v6[3 * v4 + 2] = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_22:
  LODWORD(v6[3 * v4]) = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  ++a1[32];
  return result;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 296), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3CBD6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::cf::insert<__CFString const*,__CFData const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3CBD808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3CBD82C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3CBD8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3CBD8E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::weakRadioCommandDriver(QMICommandDriverFactory *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  _QWORD block[5];

  v4 = *((_QWORD *)this + 11);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (*((_QWORD *)this + 11))
    {
LABEL_3:
      std::mutex::unlock((std::mutex *)((char *)this + 24));
      v4 = *((_QWORD *)this + 11);
      goto LABEL_4;
    }
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_1;
    block[4] = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v9 = *(_QWORD *)algn_1EDBEAA48;
      v22 = GetABMLogServer(void)::sLogServer;
      v23 = *(std::__shared_weak_count **)algn_1EDBEAA48;
      if (*(_QWORD *)algn_1EDBEAA48)
        goto LABEL_11;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
      v9 = *(_QWORD *)algn_1EDBEAA48;
      v22 = GetABMLogServer(void)::sLogServer;
      v23 = *(std::__shared_weak_count **)algn_1EDBEAA48;
      if (*(_QWORD *)algn_1EDBEAA48)
      {
LABEL_11:
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    QMICommandDriverFactory::createRadioCommandDriver(this, &v22, (uint64_t)&v24);
    v12 = v24;
    v24 = 0uLL;
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
    *(_OWORD *)((char *)this + 88) = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    goto LABEL_3;
  }
LABEL_4:
  v5 = *((_QWORD *)this + 12);
  *a2 = v4;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_1B3CBDB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::getBasebandTime(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting baseband time", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_84_0;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66D41D0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void coex::convert(__CFArray **a1, unsigned int **a2)
{
  uint64_t v3;
  const __CFAllocator *v5;
  __CFArray *Mutable;
  unsigned int *v7;
  unsigned int *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  uint64_t v15;
  UInt8 *v16;
  CFDataRef v17;
  CFDataRef v18;
  CFTypeID v19;
  __CFDictionary *v20;
  CFTypeID v21;
  __CFArray **v22;
  __CFDictionary *cf;
  CFDataRef valuePtr;

  v3 = (char *)a2[1] - (char *)*a2;
  if (v3 < 0)
    goto LABEL_24;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (unint64_t)v3 >> 4, MEMORY[0x1E0C9B378]);
  v22 = a1;
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    v9 = (const void *)*MEMORY[0x1E0DDF388];
    v10 = (const void *)*MEMORY[0x1E0DDF268];
    v11 = (const void *)*MEMORY[0x1E0DDF330];
    do
    {
      v12 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      valuePtr = (CFDataRef)*v7;
      v13 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
      ctu::cf::insert<__CFString const*,__CFNumber const*>(v12, v9, v13);
      if (v13)
        CFRelease(v13);
      valuePtr = (CFDataRef)v7[1];
      v14 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
      ctu::cf::insert<__CFString const*,__CFNumber const*>(v12, v10, v14);
      if (v14)
        CFRelease(v14);
      v15 = *((_QWORD *)v7 + 1);
      valuePtr = 0;
      v16 = (UInt8 *)operator new(8uLL);
      *(_QWORD *)v16 = v15;
      v17 = CFDataCreate(v5, v16, 8);
      v18 = v17;
      if (v17)
        valuePtr = v17;
      operator delete(v16);
      ctu::cf::insert<__CFString const*,__CFData const*>(v12, v11, v18);
      if (v18)
        CFRelease(v18);
      if (v12)
      {
        v19 = CFGetTypeID(v12);
        if (v19 == CFDictionaryGetTypeID())
        {
          cf = v12;
          CFRetain(v12);
          v20 = v12;
        }
        else
        {
          v20 = 0;
          cf = 0;
        }
        CFRelease(v12);
      }
      else
      {
        v20 = 0;
        cf = 0;
      }
      CFArrayAppendValue(Mutable, v20);
      if (cf)
        CFRelease(cf);
      v7 += 4;
    }
    while (v7 != v8);
  }
  a1 = v22;
  if (Mutable)
  {
    v21 = CFGetTypeID(Mutable);
    if (v21 == CFArrayGetTypeID())
    {
      *v22 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *v22 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
LABEL_24:
    *a1 = 0;
  }
}

{
  uint64_t v3;
  const __CFAllocator *v5;
  __CFArray *Mutable;
  unsigned int *v7;
  unsigned int *v8;
  CFNumberRef v9;
  CFTypeID v10;
  uint64_t valuePtr;

  v3 = (char *)a2[1] - (char *)*a2;
  if (v3 < 0)
    goto LABEL_10;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3 / 0x28uLL, MEMORY[0x1E0C9B378]);
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    valuePtr = *v7;
    v9 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
    if (v9)
    {
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
    }
    v7 += 10;
  }
  if (Mutable)
  {
    v10 = CFGetTypeID(Mutable);
    if (v10 == CFArrayGetTypeID())
    {
      *a1 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *a1 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
LABEL_10:
    *a1 = 0;
  }
}

{
  uint64_t v3;
  const __CFAllocator *v5;
  __CFArray *Mutable;
  unsigned int *v7;
  unsigned int *v8;
  CFNumberRef v9;
  CFTypeID v10;
  uint64_t valuePtr;

  v3 = (char *)a2[1] - (char *)*a2;
  if (v3 < 0)
    goto LABEL_10;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3 / 0x1CuLL, MEMORY[0x1E0C9B378]);
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    valuePtr = *v7;
    v9 = CFNumberCreate(v5, kCFNumberLongLongType, &valuePtr);
    if (v9)
    {
      CFArrayAppendValue(Mutable, v9);
      CFRelease(v9);
    }
    v7 += 7;
  }
  if (Mutable)
  {
    v10 = CFGetTypeID(Mutable);
    if (v10 == CFArrayGetTypeID())
    {
      *a1 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *a1 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
LABEL_10:
    *a1 = 0;
  }
}

void sub_1B3CBE034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3CBE060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CBE07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  uint64_t v7;
  const void *v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, const void *);
  v10 = va_arg(va2, _QWORD);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3CBE0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  const void *v7;
  va_list va1;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3CBE0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::convert(CFMutableDictionaryRef *a1, unsigned int *a2)
{
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;

  *a1 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
    *a1 = Mutable;
  coex::convert((__CFDictionary **)&v8, a2);
  v6 = v8;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v5, (CFTypeRef)*MEMORY[0x1E0DDF3F0], v8);
  if (v6)
    CFRelease(v6);
  coex::convert((__CFDictionary **)&v8, a2 + 2);
  v7 = v8;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v5, (CFTypeRef)*MEMORY[0x1E0DDF3D8], v8);
  if (v7)
    CFRelease(v7);
}

void sub_1B3CBE1DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void **v2;
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v2);
  _Unwind_Resume(a1);
}

void sub_1B3CBE210(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CBE224(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void coex::convert(__CFDictionary **a1, unsigned int *a2)
{
  const __CFAllocator *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *Mutable;
  __CFDictionary *v8;
  CFTypeID v9;
  __CFDictionary *valuePtr;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = (__CFDictionary *)*a2;
  v5 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  valuePtr = (__CFDictionary *)a2[1];
  v6 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  valuePtr = 0;
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  if (Mutable)
    valuePtr = Mutable;
  ctu::cf::insert<__CFString const*,__CFNumber const*>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF388], v5);
  ctu::cf::insert<__CFString const*,__CFNumber const*>(v8, (CFTypeRef)*MEMORY[0x1E0DDF268], v6);
  if (v8)
  {
    v9 = CFGetTypeID(v8);
    if (v9 == CFDictionaryGetTypeID())
    {
      *a1 = v8;
      CFRetain(v8);
    }
    else
    {
      *a1 = 0;
    }
    CFRelease(v8);
  }
  else
  {
    *a1 = 0;
  }
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  CFTypeID v6;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2E0], *a2, v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2A0], a2[1], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF380], a2[2], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF260], a2[3], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF250], a2[4], v4);
  if (Mutable)
  {
    v6 = CFGetTypeID(Mutable);
    if (v6 == CFDictionaryGetTypeID())
    {
      *a1 = Mutable;
      CFRetain(Mutable);
    }
    else
    {
      *a1 = 0;
    }
    CFRelease(Mutable);
  }
  else
  {
    *a1 = 0;
  }
}

void sub_1B3CBE384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, uint64_t a11, const void *a12)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a12);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFNumber const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3CBE45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3CBE480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3CBE510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3CBE534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;
  void *v14;
  dispatch_object_t object;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v3;
  v21[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  v16 = v2 + 288;
  v17 = QMIServiceMsg::create();
  v18 = 25000;
  v19 = 0;
  v20 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_83_0;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v12[4] = v2;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)a1[7];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a1[8];
  v14 = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm15GetBasebandTime8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D94D0;
  aBlock[4] = v12;
  v11 = _Block_copy(aBlock);
  v20 = v11;
  if (v17)
  {
    qmi::Client::send();
    v11 = v20;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v14)
    _Block_release(v14);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_1B3CBE6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3CBE6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm15GetBasebandTime8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CBE7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CBE7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CBE7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t (*v10)(uint64_t);
  tlv *TlvValue;
  int v12;
  tlv *v13;
  CFTypeRef v14;
  const void *v15;
  void *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD v20[2];
  void (*v21)(uint64_t, uint64_t *);
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  CFTypeRef cf;
  CFMutableDictionaryRef v26;
  CFTypeRef v27;
  std::__shared_weak_count *v29;
  uint64_t block;
  uint64_t p_block;
  uint64_t v32;
  void *v33;
  void *aBlock;
  CFTypeRef v35;
  CFTypeRef v36;
  uint64_t v37;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v29 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_50:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v27 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting baseband time", &v27);
      v26 = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v26 = Mutable;
      if (v27)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (v10)
      {
        if (!a1[7])
          goto LABEL_46;
      }
      else
      {
        block = 0;
        p_block = (uint64_t)&block;
        v32 = 0x2000000000;
        v33 = 0;
        v20[0] = MEMORY[0x1E0C809B0];
        v20[1] = 1174405120;
        v21 = ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        v22 = &unk_1E66D8828;
        v23 = &block;
        v24 = v5;
        cf = Mutable;
        if (Mutable)
          CFRetain(Mutable);
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v13 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v12, (const unsigned __int8 *)8);
          v37 = *(_QWORD *)v13;
          v21((uint64_t)v20, &v37);
        }
        if (cf)
          CFRelease(cf);
        _Block_object_dispose(&block, 8);
        if (!a1[7])
          goto LABEL_46;
      }
      if (!a1[8])
      {
LABEL_46:
        if (v9)
          CFRelease(v9);
        if (v27)
          CFRelease(v27);
        goto LABEL_50;
      }
      v14 = v27;
      if (v27)
        CFRetain(v27);
      if (v9)
        CFRetain(v9);
      v15 = (const void *)a1[7];
      if (v15)
        v16 = _Block_copy(v15);
      else
        v16 = 0;
      v17 = a1[8];
      block = MEMORY[0x1E0C809B0];
      p_block = 1174405120;
      v32 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      v33 = &__block_descriptor_tmp_163;
      if (v16)
      {
        aBlock = _Block_copy(v16);
        v35 = v14;
        if (!v14)
          goto LABEL_32;
      }
      else
      {
        aBlock = 0;
        v35 = v14;
        if (!v14)
        {
LABEL_32:
          v36 = v9;
          if (v9)
            CFRetain(v9);
          dispatch_async(v17, &block);
          if (v36)
            CFRelease(v36);
          if (v35)
            CFRelease(v35);
          if (aBlock)
            _Block_release(aBlock);
          if (v16)
            _Block_release(v16);
          if (v9)
            CFRelease(v9);
          if (v14)
            CFRelease(v14);
          goto LABEL_46;
        }
      }
      CFRetain(v14);
      goto LABEL_32;
    }
  }
}

void sub_1B3CBEB24(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 1, v2, v3);
  JUMPOUT(0x1B3CBE970);
}

void sub_1B3CBEB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  const void **v9;
  const void *v11;
  va_list va;
  const void *v13;
  va_list va1;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v13 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v9);
  _Block_object_dispose(va3, 8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B3CBEB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase15getBasebandTimeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  unint64_t v5;
  time_t v6;
  __int128 v7;
  tm *v8;
  unsigned int v9;
  __CFDictionary *v10;
  const void *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint64_t v14;
  NSObject *v15;
  std::string *v16;
  time_t v17;
  std::string v18;
  CFNumberRef v19;
  const void *v20;
  char __str[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string valuePtr;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0DDF7F8], *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 30), (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) &= 0xFFFFFFFFFFFFuLL;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) *= 5;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) >>= 2;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v6 = v5 / 0x3E8 + 315964800;
  memset(&v18, 0, sizeof(v18));
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v7;
  v28 = v7;
  *(_OWORD *)v25 = v7;
  v26 = v7;
  v23 = v7;
  v24 = v7;
  *(_OWORD *)__str = v7;
  v22 = v7;
  v17 = v6;
  v8 = localtime(&v17);
  strftime(v25, 0x40uLL, "%Y-%m-%d %H:%M:%S", v8);
  v9 = 1000 * (v5 % 0x3E8);
  snprintf(__str, 0x40uLL, "%s.%06d", v25, v9);
  std::string::__assign_external(&v18, __str);
  v10 = *(__CFDictionary **)(a1 + 48);
  v11 = (const void *)*MEMORY[0x1E0DDF810];
  v20 = v11;
  if (v11)
    CFRetain(v11);
  valuePtr.__r_.__value_.__r.__words[0] = v6;
  v12 = CFNumberCreate(v4, kCFNumberLongLongType, &valuePtr);
  v13 = v12;
  v19 = v12;
  if (v11 && v12)
  {
    CFDictionaryAddValue(v10, v11, v12);
  }
  else if (!v12)
  {
    goto LABEL_8;
  }
  CFRelease(v13);
LABEL_8:
  if (v11)
    CFRelease(v11);
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 48), (CFTypeRef)*MEMORY[0x1E0DDF838], v9, v4);
  v14 = *(_QWORD *)(a1 + 48);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&valuePtr, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
    valuePtr = v18;
  ctu::cf::insert<__CFString const*,std::string>(v14, (CFTypeRef)*MEMORY[0x1E0DDF800]);
  if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(valuePtr.__r_.__value_.__l.__data_);
    v15 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
LABEL_15:
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v18.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    v15 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
  }
  v16 = &v18;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v18.__r_.__value_.__r.__words[0];
  LODWORD(valuePtr.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)valuePtr.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
  _os_log_impl(&dword_1B3CB3000, v15, OS_LOG_TYPE_DEFAULT, "#I Baseband time: %s", (uint8_t *)&valuePtr, 0xCu);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
}

void sub_1B3CBEEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, const void *a18, const void *a19)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a18);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a19);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  BOOL v10;
  uint64_t v11;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf)
    v10 = v8 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v11;
}

void sub_1B3CBEFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CBEFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  void *v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  size_t v11;
  std::string::size_type v12;
  uint64_t v13;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__n > v8)
    {
      v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __n - v8)
      {
        v9 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          v7 = operator new(v11);
          memcpy(v7, __s, __n);
          if (v8 != 22)
            operator delete(v9);
          this->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
          this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
LABEL_23:
          this->__r_.__value_.__l.__size_ = __n;
          goto LABEL_24;
        }
LABEL_8:
        v12 = 2 * v8;
        if (__n > 2 * v8)
          v12 = __n;
        v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v13 = v12 | 7;
        if (v12 >= 0x17)
          v11 = v13 + 1;
        else
          v11 = 23;
        goto LABEL_15;
      }
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
    }
    v6 = HIBYTE(v10);
    v7 = (void *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      if (__n - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        v8 = 22;
        v9 = this;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    goto LABEL_23;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_24:
  *((_BYTE *)v7 + __n) = 0;
  return this;
}

uint64_t radio::QMICommandDriverBase::checkError@<X0>(uint64_t this@<X0>, const qmi::ResponseBase *a2@<X1>, const char *a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  size_t v14;
  const char *v15;
  uint64_t *v16;
  size_t v17;
  NSObject *v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  CFTypeRef v25;
  size_t v26;
  void *v27;
  uint64_t v28;
  const void **v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef *v33;
  void *__dst[2];
  unint64_t v35;
  CFTypeRef cf[2];
  int64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *__p[2];
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint8_t buf[4];
  CFTypeRef *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  if (!*((_DWORD *)a2 + 1))
    return this;
  v6 = this;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v55 = v7;
  v54 = v7;
  v53 = v7;
  v52 = v7;
  v51 = v7;
  v50 = v7;
  v49 = v7;
  v48 = v7;
  v47 = v7;
  v44 = v7;
  v42 = v7;
  *(_OWORD *)__p = v7;
  v40 = v7;
  v41 = v7;
  v39 = v7;
  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v46 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v38 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v38 + *(_QWORD *)(v38 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v38 + *(_QWORD *)(v38 - 24));
  std::ios_base::init(v12, &v39);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v38 = v8 + 24;
  v46 = v9;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v39 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v44 = 0u;
  LODWORD(v45) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Failed ", 7);
  if (a3)
  {
    v14 = strlen(a3);
  }
  else
  {
    a3 = "(missing description)";
    v14 = 21;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)a3, v14);
  v15 = (const char *)qmi::asString();
  if (v15)
  {
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)" ", 1);
    v17 = strlen(v15);
  }
  else
  {
    v15 = " Unknown baseband error!";
    v16 = &v38;
    v17 = 24;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v15, v17);
  v18 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    if ((v45 & 0x10) != 0)
    {
      v28 = *((_QWORD *)&v44 + 1);
      if (*((_QWORD *)&v44 + 1) < (unint64_t)v42)
      {
        *((_QWORD *)&v44 + 1) = v42;
        v28 = v42;
      }
      v29 = (const void **)&v41 + 1;
    }
    else
    {
      if ((v45 & 8) == 0)
      {
        v26 = 0;
        HIBYTE(v37) = 0;
        v27 = cf;
        goto LABEL_50;
      }
      v29 = (const void **)&v40;
      v28 = v41;
    }
    v30 = *v29;
    v26 = v28 - (_QWORD)*v29;
    if (v26 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v26 >= 0x17)
    {
      v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v31 = v26 | 7;
      v32 = v31 + 1;
      v27 = operator new(v31 + 1);
      cf[1] = (CFTypeRef)v26;
      v37 = v32 | 0x8000000000000000;
      cf[0] = v27;
    }
    else
    {
      HIBYTE(v37) = v28 - *(_BYTE *)v29;
      v27 = cf;
      if (!v26)
        goto LABEL_50;
    }
    memmove(v27, v30, v26);
LABEL_50:
    *((_BYTE *)v27 + v26) = 0;
    v33 = cf;
    if (v37 < 0)
      v33 = (CFTypeRef *)cf[0];
    *(_DWORD *)buf = 136446210;
    v57 = v33;
    _os_log_error_impl(&dword_1B3CB3000, v18, OS_LOG_TYPE_ERROR, "%{public}s: ", buf, 0xCu);
    if (SHIBYTE(v37) < 0)
      operator delete((void *)cf[0]);
  }
  if ((v45 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1) < (unint64_t)v42)
    {
      *((_QWORD *)&v44 + 1) = v42;
      v21 = v42;
    }
    v22 = (const void *)*((_QWORD *)&v41 + 1);
    v19 = v21 - *((_QWORD *)&v41 + 1);
    if ((unint64_t)(v21 - *((_QWORD *)&v41 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
  }
  else
  {
    if ((v45 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(v35) = 0;
      v20 = __dst;
      goto LABEL_22;
    }
    v22 = (const void *)v40;
    v19 = v41 - v40;
    if ((_QWORD)v41 - (_QWORD)v40 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_34:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)v19;
    v35 = v24 | 0x8000000000000000;
    __dst[0] = v20;
    goto LABEL_21;
  }
  HIBYTE(v35) = v19;
  v20 = __dst;
  if (v19)
LABEL_21:
    memmove(v20, v22, v19);
LABEL_22:
  *((_BYTE *)v20 + v19) = 0;
  CreateError();
  if (cf == a4)
    goto LABEL_25;
  v25 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v25)
  {
    CFRelease(v25);
LABEL_25:
    if (cf[0])
      CFRelease(cf[0]);
  }
  if (SHIBYTE(v35) < 0)
    operator delete(__dst[0]);
  v38 = *v10;
  *(uint64_t *)((char *)&v38 + *(_QWORD *)(v38 - 24)) = v10[3];
  *(_QWORD *)&v39 = v13 + 16;
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v46);
}

void sub_1B3CBF604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ctu::cf::insert<__CFString const*,std::string>(int a1, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  ctu::cf::convert_copy();
  if (cf)
    CFRelease(cf);
}

void sub_1B3CBF71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CBF740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver3setEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  uint64_t v3;
  int v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  const __CFDictionary *v10;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(const __CFDictionary **)(a1 + 40);
  v10 = v2;
  if (v2)
    CFRetain(v2);
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    v6 = _Block_copy(v5);
    v7 = *(NSObject **)(a1 + 56);
    v8 = v6;
    v9 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  v7 = *(NSObject **)(a1 + 56);
  v8 = 0;
  v9 = v7;
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  coex::QMICommandDriver::set_sync(v3, &v10, v4, (uint64_t)&v8);
  if (v7)
    dispatch_release(v7);
  if (v6)
    _Block_release(v6);
  if (v2)
    CFRelease(v2);
}

void sub_1B3CBF820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::set_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  const void *v17;
  const void *v18;
  CFTypeID v19;
  CFTypeID TypeID;
  const void *v21;
  const void *v22;
  CFTypeID v23;
  CFTypeID v24;
  const __CFDictionary *v25;
  void *v26;
  const void *v27;
  const void *v28;
  CFTypeID v29;
  CFTypeID v30;
  void *v31;
  const void *v32;
  const void *v33;
  CFTypeID v34;
  CFTypeID v35;
  void *v36;
  const void *v37;
  const void *v38;
  CFTypeID v39;
  CFTypeID v40;
  void *v41;
  const void *v42;
  const void *v43;
  CFTypeID v44;
  CFTypeID v45;
  void *v46;
  const void *v47;
  const void *v48;
  CFTypeID v49;
  CFTypeID v50;
  void *v51;
  const void *v52;
  const void *v53;
  CFTypeID v54;
  CFTypeID v55;
  void *v56;
  uint64_t v57;
  const void *v58;
  const void *v59;
  const void *v60;
  CFTypeID v61;
  CFTypeID v62;
  uint64_t v63;
  void *v64;
  const void *v65;
  const void *v66;
  CFTypeID v67;
  CFTypeID v68;
  void *v69;
  const void *v70;
  const void *v71;
  CFTypeID v72;
  CFTypeID v73;
  const void *v74;
  const void *v75;
  CFTypeID v76;
  CFTypeID v77;
  void *v78;
  NSObject *v79;
  const void *v80;
  const void *v81;
  CFTypeID v82;
  CFTypeID v83;
  void *v84;
  NSObject *v85;
  const void *v86;
  const void *v87;
  CFTypeID v88;
  CFTypeID v89;
  void *v90;
  NSObject *v91;
  const void *v92;
  const void *v93;
  CFTypeID v94;
  CFTypeID v95;
  void *v96;
  NSObject *v97;
  const void *v98;
  const void *v99;
  CFTypeID v100;
  CFTypeID v101;
  void *v102;
  NSObject *v103;
  const void *v104;
  const void *v105;
  CFTypeID v106;
  CFTypeID v107;
  void *v108;
  NSObject *v109;
  const void *v110;
  const void *v111;
  CFTypeID v112;
  CFTypeID v113;
  void *v114;
  NSObject *v115;
  const void *v116;
  const void *v117;
  CFTypeID v118;
  CFTypeID v119;
  void *v120;
  NSObject *v121;
  const void *v122;
  const void *v123;
  CFTypeID v124;
  CFTypeID v125;
  void *v126;
  NSObject *v127;
  NSObject *v128;
  _QWORD v129[5];
  void *v130;
  dispatch_object_t v131;
  const __CFDictionary *v132;
  void *v133;
  dispatch_object_t v134;
  const __CFDictionary *v135;
  void *v136;
  dispatch_object_t v137;
  const __CFDictionary *v138;
  void *v139;
  dispatch_object_t v140;
  const __CFDictionary *v141;
  void *v142;
  dispatch_object_t v143;
  const __CFDictionary *v144;
  void *v145;
  dispatch_object_t v146;
  const __CFDictionary *v147;
  void *v148;
  dispatch_object_t v149;
  const __CFDictionary *v150;
  void *v151;
  dispatch_object_t v152;
  const __CFDictionary *v153;
  void *v154;
  dispatch_object_t v155;
  const __CFDictionary *v156;
  _QWORD v157[2];
  const __CFDictionary *v158;
  void *v159;
  NSObject *v160;
  const __CFDictionary *v161;
  void *v162;
  NSObject *v163;
  const __CFDictionary *v164;
  void *v165;
  NSObject *v166;
  const void *v167;
  void *v168;
  NSObject *v169;
  const __CFDictionary *v170;
  void *v171;
  NSObject *v172;
  const __CFDictionary *v173;
  void *v174;
  NSObject *v175;
  const __CFDictionary *v176;
  void *v177;
  NSObject *v178;
  const __CFDictionary *v179;
  void *v180;
  NSObject *v181;
  const void *v182;
  void *v183;
  NSObject *v184;
  const __CFDictionary *v185;
  _QWORD v186[2];
  _QWORD aBlock[5];
  dispatch_object_t v188;
  const void *v189;
  dispatch_object_t v190;
  _QWORD v191[5];
  const void *v192;
  dispatch_object_t v193;

  v8 = dispatch_group_create();
  v9 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
  }
  v191[0] = 0;
  v191[1] = v191;
  v191[2] = 0x3802000000;
  v191[3] = __Block_byref_object_copy__9;
  v191[4] = __Block_byref_object_dispose__9;
  v192 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v193 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v10 = *(void **)a4;
  if (*(_QWORD *)a4)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a4 + 8);
  v192 = v10;
  v193 = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = MEMORY[0x1E0C809B0];
  v189 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v190 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex16QMICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  aBlock[3] = &unk_1E66DCCF0;
  v188 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v188);
  }
  aBlock[4] = v191;
  v13 = _Block_copy(aBlock);
  v14 = *(NSObject **)(a1 + 88);
  if (v14)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  if (v13)
  {
    v15 = _Block_copy(v13);
    v189 = v15;
    v190 = v14;
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  v15 = 0;
  v189 = 0;
  v190 = v14;
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    dispatch_release(v14);
  }
LABEL_14:
  if (v13)
    _Block_release(v13);
  v186[0] = 0xAAAAAAAAAAAAAAAALL;
  v186[1] = 0xAAAAAAAAAAAAAAAALL;
  v16 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v186, *a2);
  v17 = (const void *)(*(uint64_t (**)(uint64_t, _QWORD))v186[0])(v16, *MEMORY[0x1E0DDF530]);
  v18 = v17;
  if (v17)
  {
    v19 = CFGetTypeID(v17);
    TypeID = CFDictionaryGetTypeID();
    CFRelease(v18);
    if (v19 == TypeID)
      goto LABEL_20;
  }
  v21 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF3C0]);
  v22 = v21;
  if (v21)
  {
    v23 = CFGetTypeID(v21);
    v24 = CFDictionaryGetTypeID();
    CFRelease(v22);
    if (v23 == v24)
    {
LABEL_20:
      v25 = *a2;
      v185 = v25;
      if (v25)
        CFRetain(v25);
      if (v15)
      {
        v26 = _Block_copy(v15);
        v183 = v26;
        v184 = v14;
        if (!v14)
        {
LABEL_25:
          coex::QMICommandDriver::setWLANState_sync(a1, &v185, (uint64_t)&v183);
          if (v14)
            dispatch_release(v14);
          if (v26)
            _Block_release(v26);
          if (v25)
            CFRelease(v25);
          goto LABEL_31;
        }
      }
      else
      {
        v26 = 0;
        v183 = 0;
        v184 = v14;
        if (!v14)
          goto LABEL_25;
      }
      dispatch_retain(v14);
      goto LABEL_25;
    }
  }
LABEL_31:
  v27 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF298]);
  v28 = v27;
  if (!v27)
    goto LABEL_41;
  v29 = CFGetTypeID(v27);
  v30 = CFDictionaryGetTypeID();
  CFRelease(v28);
  if (v29 != v30)
    goto LABEL_41;
  v182 = v28;
  CFRetain(v28);
  if (!v15)
  {
    v31 = 0;
    v180 = 0;
    v181 = v14;
    if (!v14)
      goto LABEL_36;
    goto LABEL_35;
  }
  v31 = _Block_copy(v15);
  v180 = v31;
  v181 = v14;
  if (v14)
LABEL_35:
    dispatch_retain(v14);
LABEL_36:
  coex::QMICommandDriver::setPolicy_sync(a1, &v182, (uint64_t)&v180);
  if (v14)
    dispatch_release(v14);
  if (v31)
    _Block_release(v31);
  CFRelease(v28);
LABEL_41:
  v32 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF308]);
  v33 = v32;
  if (!v32)
    goto LABEL_51;
  v34 = CFGetTypeID(v32);
  v35 = CFDictionaryGetTypeID();
  CFRelease(v33);
  if (v34 != v35)
    goto LABEL_51;
  v179 = (const __CFDictionary *)v33;
  CFRetain(v33);
  if (!v15)
  {
    v36 = 0;
    v177 = 0;
    v178 = v14;
    if (!v14)
      goto LABEL_46;
    goto LABEL_45;
  }
  v36 = _Block_copy(v15);
  v177 = v36;
  v178 = v14;
  if (v14)
LABEL_45:
    dispatch_retain(v14);
LABEL_46:
  coex::QMICommandDriver::setBLER_sync(a1, &v179, (uint64_t)&v177);
  if (v14)
    dispatch_release(v14);
  if (v36)
    _Block_release(v36);
  CFRelease(v33);
LABEL_51:
  v37 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF318]);
  v38 = v37;
  if (!v37)
    goto LABEL_61;
  v39 = CFGetTypeID(v37);
  v40 = CFDictionaryGetTypeID();
  CFRelease(v38);
  if (v39 != v40)
    goto LABEL_61;
  v176 = (const __CFDictionary *)v38;
  CFRetain(v38);
  if (!v15)
  {
    v41 = 0;
    v174 = 0;
    v175 = v14;
    if (!v14)
      goto LABEL_56;
    goto LABEL_55;
  }
  v41 = _Block_copy(v15);
  v174 = v41;
  v175 = v14;
  if (v14)
LABEL_55:
    dispatch_retain(v14);
LABEL_56:
  coex::QMICommandDriver::setSINR_sync(a1, &v176, (uint64_t)&v174);
  if (v14)
    dispatch_release(v14);
  if (v41)
    _Block_release(v41);
  CFRelease(v38);
LABEL_61:
  v42 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF370]);
  v43 = v42;
  if (!v42)
    goto LABEL_71;
  v44 = CFGetTypeID(v42);
  v45 = CFDictionaryGetTypeID();
  CFRelease(v43);
  if (v44 != v45)
    goto LABEL_71;
  v173 = (const __CFDictionary *)v43;
  CFRetain(v43);
  if (!v15)
  {
    v46 = 0;
    v171 = 0;
    v172 = v14;
    if (!v14)
      goto LABEL_66;
    goto LABEL_65;
  }
  v46 = _Block_copy(v15);
  v171 = v46;
  v172 = v14;
  if (v14)
LABEL_65:
    dispatch_retain(v14);
LABEL_66:
  coex::QMICommandDriver::setBandFilterInfo_sync(a1, &v173, a3, (uint64_t)&v171);
  if (v14)
    dispatch_release(v14);
  if (v46)
    _Block_release(v46);
  CFRelease(v43);
LABEL_71:
  v47 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF500]);
  v48 = v47;
  if (!v47)
    goto LABEL_81;
  v49 = CFGetTypeID(v47);
  v50 = CFDictionaryGetTypeID();
  CFRelease(v48);
  if (v49 != v50)
    goto LABEL_81;
  v170 = (const __CFDictionary *)v48;
  CFRetain(v48);
  if (!v15)
  {
    v51 = 0;
    v168 = 0;
    v169 = v14;
    if (!v14)
      goto LABEL_76;
    goto LABEL_75;
  }
  v51 = _Block_copy(v15);
  v168 = v51;
  v169 = v14;
  if (v14)
LABEL_75:
    dispatch_retain(v14);
LABEL_76:
  coex::QMICommandDriver::setScanFreqBandFilter_sync(a1, &v170, a3, (uint64_t)&v168);
  if (v14)
    dispatch_release(v14);
  if (v51)
    _Block_release(v51);
  CFRelease(v48);
LABEL_81:
  v52 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF350]);
  v53 = v52;
  if (!v52)
    goto LABEL_91;
  v54 = CFGetTypeID(v52);
  v55 = CFDictionaryGetTypeID();
  CFRelease(v53);
  if (v54 != v55)
    goto LABEL_91;
  v167 = v53;
  v56 = (void *)CFRetain(v53);
  if (!v15)
  {
    v58 = 0;
    v165 = 0;
    v166 = v14;
    if (!v14)
      goto LABEL_86;
    goto LABEL_85;
  }
  v56 = _Block_copy(v15);
  v58 = v56;
  v165 = v56;
  v166 = v14;
  if (v14)
LABEL_85:
    dispatch_retain(v14);
LABEL_86:
  coex::QMICommandDriver::setWiFiStatus_sync((uint64_t)v56, v57, (uint64_t)&v165);
  if (v14)
    dispatch_release(v14);
  if (v58)
    _Block_release(v58);
  CFRelease(v53);
LABEL_91:
  v59 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF310]);
  v60 = v59;
  if (!v59)
    goto LABEL_101;
  v61 = CFGetTypeID(v59);
  v62 = CFDictionaryGetTypeID();
  CFRelease(v60);
  if (v61 != v62)
    goto LABEL_101;
  v164 = (const __CFDictionary *)v60;
  CFRetain(v60);
  if (!v15)
  {
    v64 = 0;
    v162 = 0;
    v163 = v14;
    if (!v14)
      goto LABEL_96;
    goto LABEL_95;
  }
  v64 = _Block_copy(v15);
  v162 = v64;
  v163 = v14;
  if (v14)
LABEL_95:
    dispatch_retain(v14);
LABEL_96:
  coex::QMICommandDriver::setLAAConfig_sync(a1, &v164, v63, (uint64_t)&v162);
  if (v14)
    dispatch_release(v14);
  if (v64)
    _Block_release(v64);
  CFRelease(v60);
LABEL_101:
  v65 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF410]);
  v66 = v65;
  if (!v65)
    goto LABEL_111;
  v67 = CFGetTypeID(v65);
  v68 = CFDictionaryGetTypeID();
  CFRelease(v66);
  if (v67 != v68)
    goto LABEL_111;
  v161 = (const __CFDictionary *)v66;
  CFRetain(v66);
  if (!v15)
  {
    v69 = 0;
    v159 = 0;
    v160 = v14;
    if (!v14)
      goto LABEL_106;
    goto LABEL_105;
  }
  v69 = _Block_copy(v15);
  v159 = v69;
  v160 = v14;
  if (v14)
LABEL_105:
    dispatch_retain(v14);
LABEL_106:
  coex::QMICommandDriver::setTimeShareConfig_sync(a1, &v161, (uint64_t)&v159);
  if (v14)
    dispatch_release(v14);
  if (v69)
    _Block_release(v69);
  CFRelease(v66);
LABEL_111:
  v70 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF3A8]);
  v71 = v70;
  if (v70)
  {
    v72 = CFGetTypeID(v70);
    v73 = CFDictionaryGetTypeID();
    CFRelease(v71);
    if (v72 == v73)
    {
      v158 = (const __CFDictionary *)v71;
      CFRetain(v71);
      if (v15)
        v15 = _Block_copy(v15);
      v157[0] = v15;
      v157[1] = v14;
      if (v14)
        dispatch_retain(v14);
      coex::QMICommandDriver::setWCI2TxAntMap_sync(a1, &v158, (uint64_t)v157);
      if (v14)
        dispatch_release(v14);
      if (v15)
        _Block_release(v15);
      CFRelease(v71);
    }
  }
  v74 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF368]);
  v75 = v74;
  if (v74)
  {
    v76 = CFGetTypeID(v74);
    v77 = CFDictionaryGetTypeID();
    CFRelease(v75);
    if (v76 == v77)
    {
      v156 = (const __CFDictionary *)v75;
      CFRetain(v75);
      if (v189)
      {
        v78 = _Block_copy(v189);
        v79 = v190;
        v154 = v78;
        v155 = v190;
        if (!v190)
        {
LABEL_127:
          coex::QMICommandDriver::setAntBlocking_sync(a1, &v156, (uint64_t)&v154);
          if (v79)
            dispatch_release(v79);
          if (v78)
            _Block_release(v78);
          CFRelease(v75);
          goto LABEL_132;
        }
      }
      else
      {
        v78 = 0;
        v79 = v190;
        v154 = 0;
        v155 = v190;
        if (!v190)
          goto LABEL_127;
      }
      dispatch_retain(v79);
      goto LABEL_127;
    }
  }
LABEL_132:
  v80 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF490]);
  v81 = v80;
  if (!v80)
    goto LABEL_142;
  v82 = CFGetTypeID(v80);
  v83 = CFDictionaryGetTypeID();
  CFRelease(v81);
  if (v82 != v83)
    goto LABEL_142;
  v153 = (const __CFDictionary *)v81;
  CFRetain(v81);
  if (!v189)
  {
    v84 = 0;
    v85 = v190;
    v151 = 0;
    v152 = v190;
    if (!v190)
      goto LABEL_137;
    goto LABEL_136;
  }
  v84 = _Block_copy(v189);
  v85 = v190;
  v151 = v84;
  v152 = v190;
  if (v190)
LABEL_136:
    dispatch_retain(v85);
LABEL_137:
  coex::QMICommandDriver::setClientAntBlocking_sync(a1, &v153, (uint64_t)&v151);
  if (v85)
    dispatch_release(v85);
  if (v84)
    _Block_release(v84);
  CFRelease(v81);
LABEL_142:
  v86 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF668]);
  v87 = v86;
  if (!v86)
    goto LABEL_152;
  v88 = CFGetTypeID(v86);
  v89 = CFDictionaryGetTypeID();
  CFRelease(v87);
  if (v88 != v89)
    goto LABEL_152;
  v150 = (const __CFDictionary *)v87;
  CFRetain(v87);
  if (!v189)
  {
    v90 = 0;
    v91 = v190;
    v148 = 0;
    v149 = v190;
    if (!v190)
      goto LABEL_147;
    goto LABEL_146;
  }
  v90 = _Block_copy(v189);
  v91 = v190;
  v148 = v90;
  v149 = v190;
  if (v190)
LABEL_146:
    dispatch_retain(v91);
LABEL_147:
  coex::QMICommandDriver::setClientAntBlockingExtended_sync(a1, &v150, (uint64_t)&v148);
  if (v91)
    dispatch_release(v91);
  if (v90)
    _Block_release(v90);
  CFRelease(v87);
LABEL_152:
  v92 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF5E0]);
  v93 = v92;
  if (!v92)
    goto LABEL_162;
  v94 = CFGetTypeID(v92);
  v95 = CFDictionaryGetTypeID();
  CFRelease(v93);
  if (v94 != v95)
    goto LABEL_162;
  v147 = (const __CFDictionary *)v93;
  CFRetain(v93);
  if (!v189)
  {
    v96 = 0;
    v97 = v190;
    v145 = 0;
    v146 = v190;
    if (!v190)
      goto LABEL_157;
    goto LABEL_156;
  }
  v96 = _Block_copy(v189);
  v97 = v190;
  v145 = v96;
  v146 = v190;
  if (v190)
LABEL_156:
    dispatch_retain(v97);
LABEL_157:
  coex::QMICommandDriver::sendTransparentMessageReq_sync(a1, &v147, (uint64_t)&v145);
  if (v97)
    dispatch_release(v97);
  if (v96)
    _Block_release(v96);
  CFRelease(v93);
LABEL_162:
  v98 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF418]);
  v99 = v98;
  if (!v98)
    goto LABEL_172;
  v100 = CFGetTypeID(v98);
  v101 = CFDictionaryGetTypeID();
  CFRelease(v99);
  if (v100 != v101)
    goto LABEL_172;
  v144 = (const __CFDictionary *)v99;
  CFRetain(v99);
  if (!v189)
  {
    v102 = 0;
    v103 = v190;
    v142 = 0;
    v143 = v190;
    if (!v190)
      goto LABEL_167;
    goto LABEL_166;
  }
  v102 = _Block_copy(v189);
  v103 = v190;
  v142 = v102;
  v143 = v190;
  if (v190)
LABEL_166:
    dispatch_retain(v103);
LABEL_167:
  coex::QMICommandDriver::setTriggerAntennaBlocking_sync(a1, &v144, (uint64_t)&v142);
  if (v103)
    dispatch_release(v103);
  if (v102)
    _Block_release(v102);
  CFRelease(v99);
LABEL_172:
  v104 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF288]);
  v105 = v104;
  if (!v104)
    goto LABEL_182;
  v106 = CFGetTypeID(v104);
  v107 = CFDictionaryGetTypeID();
  CFRelease(v105);
  if (v106 != v107)
    goto LABEL_182;
  v141 = (const __CFDictionary *)v105;
  CFRetain(v105);
  if (!v189)
  {
    v108 = 0;
    v109 = v190;
    v139 = 0;
    v140 = v190;
    if (!v190)
      goto LABEL_177;
    goto LABEL_176;
  }
  v108 = _Block_copy(v189);
  v109 = v190;
  v139 = v108;
  v140 = v190;
  if (v190)
LABEL_176:
    dispatch_retain(v109);
LABEL_177:
  coex::QMICommandDriver::setCC1_sync(a1, &v141, (uint64_t)&v139);
  if (v109)
    dispatch_release(v109);
  if (v108)
    _Block_release(v108);
  CFRelease(v105);
LABEL_182:
  v110 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF290]);
  v111 = v110;
  if (!v110)
    goto LABEL_192;
  v112 = CFGetTypeID(v110);
  v113 = CFDictionaryGetTypeID();
  CFRelease(v111);
  if (v112 != v113)
    goto LABEL_192;
  v138 = (const __CFDictionary *)v111;
  CFRetain(v111);
  if (!v189)
  {
    v114 = 0;
    v115 = v190;
    v136 = 0;
    v137 = v190;
    if (!v190)
      goto LABEL_187;
    goto LABEL_186;
  }
  v114 = _Block_copy(v189);
  v115 = v190;
  v136 = v114;
  v137 = v190;
  if (v190)
LABEL_186:
    dispatch_retain(v115);
LABEL_187:
  coex::QMICommandDriver::setCC2_sync(a1, &v138, (uint64_t)&v136);
  if (v115)
    dispatch_release(v115);
  if (v114)
    _Block_release(v114);
  CFRelease(v111);
LABEL_192:
  v116 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF4F8]);
  v117 = v116;
  if (!v116)
    goto LABEL_202;
  v118 = CFGetTypeID(v116);
  v119 = CFDictionaryGetTypeID();
  CFRelease(v117);
  if (v118 != v119)
    goto LABEL_202;
  v135 = (const __CFDictionary *)v117;
  CFRetain(v117);
  if (!v189)
  {
    v120 = 0;
    v121 = v190;
    v133 = 0;
    v134 = v190;
    if (!v190)
      goto LABEL_197;
    goto LABEL_196;
  }
  v120 = _Block_copy(v189);
  v121 = v190;
  v133 = v120;
  v134 = v190;
  if (v190)
LABEL_196:
    dispatch_retain(v121);
LABEL_197:
  coex::QMICommandDriver::setLaaGpioThrottle_sync(a1, &v135, (uint64_t)&v133);
  if (v121)
    dispatch_release(v121);
  if (v120)
    _Block_release(v120);
  CFRelease(v117);
LABEL_202:
  v122 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v186[0])(v186, *MEMORY[0x1E0DDF3B8]);
  v123 = v122;
  if (!v122)
    goto LABEL_212;
  v124 = CFGetTypeID(v122);
  v125 = CFDictionaryGetTypeID();
  CFRelease(v123);
  if (v124 != v125)
    goto LABEL_212;
  v132 = (const __CFDictionary *)v123;
  CFRetain(v123);
  if (!v189)
  {
    v126 = 0;
    v127 = v190;
    v130 = 0;
    v131 = v190;
    if (!v190)
      goto LABEL_207;
    goto LABEL_206;
  }
  v126 = _Block_copy(v189);
  v127 = v190;
  v130 = v126;
  v131 = v190;
  if (v190)
LABEL_206:
    dispatch_retain(v127);
LABEL_207:
  coex::QMICommandDriver::setGnssParams_sync(a1, &v132, (uint64_t)&v130);
  if (v127)
    dispatch_release(v127);
  if (v126)
    _Block_release(v126);
  CFRelease(v123);
LABEL_212:
  v128 = *(NSObject **)(a1 + 88);
  v129[0] = v12;
  v129[1] = 0x40000000;
  v129[2] = ___ZN4coex16QMICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_27;
  v129[3] = &unk_1E66DCD28;
  v129[4] = v191;
  dispatch_group_notify(v9, v128, v129);
  MEMORY[0x1B5E2EE44](v186);
  if (v190)
    dispatch_release(v190);
  if (v189)
    _Block_release(v189);
  if (v188)
  {
    dispatch_group_leave(v188);
    if (v188)
      dispatch_release(v188);
  }
  _Block_object_dispose(v191, 8);
  if (v193)
    dispatch_release(v193);
  if (v192)
    _Block_release(v192);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
    dispatch_release(v9);
  }
}

void sub_1B3CC08F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  MEMORY[0x1B5E2EE44](v7 - 224);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)(v7 - 160));
  v9 = *(NSObject **)(v7 - 168);
  if (v9)
  {
    dispatch_group_leave(v9);
    v10 = *(NSObject **)(v7 - 168);
    if (v10)
      dispatch_release(v10);
  }
  _Block_object_dispose((const void *)(v7 - 144), 8);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)(v7 - 104));
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
    dispatch_release(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::sendTransparentMessageReq_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  __int128 v6;
  const __CFArray *v7;
  uint64_t (*v8)(uint64_t);
  char *v9;
  char *v10;
  const void **v11;
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  char **v15;
  uint64_t v16;
  char **v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  const __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  CFIndex Count;
  CFIndex v37;
  void **v38;
  CFIndex v39;
  const void *ValueAtIndex;
  const void *v41;
  CFTypeID v42;
  uint64_t (*v43)(uint64_t);
  ctu::cf::map_adapter *v44;
  const __CFArray *v45;
  const __CFArray *v46;
  uint64_t (*v47)(uint64_t);
  CFIndex v48;
  char *v49;
  CFIndex v50;
  uint64_t v51;
  int *v52;
  int *v53;
  CFTypeID v54;
  const __CFNumber *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  size_t v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  char v65;
  unint64_t v66;
  _OWORD *v67;
  __int128 *v68;
  unint64_t v69;
  __int128 v70;
  char *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  void *v77;
  BOOL v78;
  size_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  char **v91;
  void *v92;
  size_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  __int128 v100;
  void *v101;
  uint64_t v102;
  void *v103;
  NSObject *v104;
  void *v105;
  uint64_t v108;
  char **v109;
  char *v110;
  CFIndex v111;
  __CFString *v112;
  const __CFString *v113;
  const void *v114;
  CFIndex v115;
  _QWORD v116[5];
  void *v117;
  dispatch_object_t object;
  uint64_t v119;
  void *__p;
  uint64_t v121;
  char *v122;
  void *aBlock;
  CFArrayRef theArray;
  __int128 v125;
  __int128 v126;
  _QWORD v127[2];
  _QWORD v128[2];
  __int128 buf;
  __int128 v130;
  _QWORD *v131;
  uint64_t v132;

  v4 = a1;
  v132 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v27 = *a2;
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v27;
    _os_log_debug_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEBUG, "#D Sending Coex transparent message: %@", (uint8_t *)&buf, 0xCu);
  }
  v127[0] = 0xAAAAAAAAAAAAAAAALL;
  v127[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v127, *a2);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v125 = v6;
  v126 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v125);
  v7 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v127, (const __CFString *)*MEMORY[0x1E0DDF6C8]);
  theArray = v7;
  v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v7)
    v8 = 0;
  if (!v8)
    goto LABEL_132;
  v9 = (char *)*((_QWORD *)&v125 + 1);
  v10 = (char *)v126;
  v11 = (const void **)*((_QWORD *)&v125 + 1);
  v108 = v4;
  if (*((_QWORD *)&v125 + 1) != (_QWORD)v126)
  {
    v11 = (const void **)*((_QWORD *)&v125 + 1);
    while (*((_BYTE *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v126)
        goto LABEL_14;
    }
  }
  if (v11 == (const void **)v126)
  {
LABEL_14:
    v13 = operator new(0x28uLL);
    v14 = v13;
    v13[8] = 16;
    *(_QWORD *)v13 = &off_1E66DFBD8;
    *((_QWORD *)v13 + 2) = 0;
    v15 = (char **)(v13 + 16);
    *((_QWORD *)v13 + 3) = 0;
    *((_QWORD *)v13 + 4) = 0;
    if ((unint64_t)v10 < *((_QWORD *)&v126 + 1))
    {
      *(_QWORD *)v10 = v13;
      v16 = (uint64_t)(v10 + 8);
LABEL_37:
      v109 = v15;
      *(_QWORD *)&v126 = v16;
      goto LABEL_38;
    }
    v17 = (char **)(v13 + 16);
    v18 = v10 - v9;
    v19 = (v10 - v9) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v126 + 1) - (_QWORD)v9;
    if ((uint64_t)(*((_QWORD *)&v126 + 1) - (_QWORD)v9) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v14;
      v16 = (uint64_t)(v24 + 1);
      if (v9 != v10)
      {
LABEL_25:
        v26 = v18 - 8;
        if ((unint64_t)(v18 - 8) >= 0x58)
        {
          v15 = v17;
          if ((unint64_t)(v9 - v23) >= 0x20)
          {
            v28 = (v26 >> 3) + 1;
            v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
            v30 = &v10[-v29];
            v24 = (_QWORD *)((char *)v24 - v29);
            v31 = &v23[8 * v19 - 16];
            v32 = v10 - 16;
            v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v34 = *(_OWORD *)v32;
              *(v31 - 1) = *((_OWORD *)v32 - 1);
              *v31 = v34;
              v31 -= 2;
              v32 -= 32;
              v33 -= 4;
            }
            while (v33);
            v10 = v30;
            if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_35:
              v9 = (char *)*((_QWORD *)&v125 + 1);
              *((_QWORD *)&v125 + 1) = v24;
              *(_QWORD *)&v126 = v16;
              *((_QWORD *)&v126 + 1) = v25;
              if (!v9)
                goto LABEL_37;
LABEL_36:
              operator delete(v9);
              goto LABEL_37;
            }
          }
        }
        else
        {
          v15 = v17;
        }
        do
        {
          v35 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *--v24 = v35;
        }
        while (v10 != v9);
        goto LABEL_35;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v14;
      v16 = 8 * v19 + 8;
      if (v9 != v10)
        goto LABEL_25;
    }
    v15 = v17;
    *((_QWORD *)&v125 + 1) = v24;
    *(_QWORD *)&v126 = v16;
    *((_QWORD *)&v126 + 1) = v25;
    if (!v9)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (!v12)
    __cxa_bad_cast();
  v109 = (char **)(v12 + 16);
LABEL_38:
  Count = CFArrayGetCount(v7);
  v37 = Count;
  v4 = v108;
  v38 = (void **)v109;
  if (Count >= 1)
  {
    v39 = 0;
    v113 = (const __CFString *)*MEMORY[0x1E0DDF540];
    v111 = Count;
    v112 = (__CFString *)*MEMORY[0x1E0DDF658];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v39);
      v41 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v42 = CFGetTypeID(ValueAtIndex);
        if (v42 != CFDictionaryGetTypeID())
        {
          v41 = 0;
LABEL_91:
          if (!v41)
            goto LABEL_40;
          goto LABEL_129;
        }
        CFRetain(v41);
      }
      v43 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!v41)
        v43 = 0;
      if (!v43)
        goto LABEL_91;
      v128[0] = 0xAAAAAAAAAAAAAAAALL;
      v128[1] = 0xAAAAAAAAAAAAAAAALL;
      v44 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v128, (const __CFDictionary *)v41);
      HIDWORD(v119) = -1431655766;
      v121 = 0;
      v122 = 0;
      __p = 0;
      LODWORD(v119) = ctu::cf::map_adapter::getInt(v44, v113);
      v45 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v128, v112);
      v46 = v45;
      v47 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      if (!v45)
        v47 = 0;
      v114 = v41;
      v115 = v39;
      if (v47)
      {
        v48 = CFArrayGetCount(v45);
        if (v48 >= 1)
        {
          v49 = 0;
          v50 = 0;
          while (2)
          {
            LODWORD(buf) = 0;
            v52 = (int *)CFArrayGetValueAtIndex(v46, v50);
            v53 = v52;
            if (!v52)
              goto LABEL_54;
            v54 = CFGetTypeID(v52);
            if (v54 != CFNumberGetTypeID() || !ctu::cf::assign((ctu::cf *)&buf, v53, v55))
              goto LABEL_54;
            if (v49 < v122)
            {
              *v49 = buf;
              v51 = (uint64_t)(v49 + 1);
              goto LABEL_53;
            }
            v56 = (unint64_t)__p;
            v57 = v49 - (_BYTE *)__p;
            v58 = v49 - (_BYTE *)__p + 1;
            if (v58 < 0)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v59 = v122 - (_BYTE *)__p;
            if (2 * (v122 - (_BYTE *)__p) > (unint64_t)v58)
              v58 = 2 * v59;
            if (v59 >= 0x3FFFFFFFFFFFFFFFLL)
              v60 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v60 = v58;
            if (v60)
            {
              v61 = operator new(v60);
              v62 = (char *)v61 + v57;
              *((_BYTE *)v61 + v57) = buf;
              v51 = (uint64_t)v61 + v57 + 1;
              if (v49 != (char *)v56)
              {
LABEL_67:
                if (v57 < 8
                  || (char *)v61 + v57 - 1 - &v49[~v56] > (unint64_t)v61 + v57 - 1
                  || v56 > (unint64_t)(v49 - 1)
                  || v56 - (unint64_t)v61 < 0x20)
                {
                  v63 = v49;
                }
                else if (v57 >= 0x20)
                {
                  v66 = v57 & 0xFFFFFFFFFFFFFFE0;
                  v67 = (char *)v61 + v57 - 16;
                  v68 = (__int128 *)(v49 - 16);
                  v69 = v57 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v70 = *v68;
                    *(v67 - 1) = *(v68 - 1);
                    *v67 = v70;
                    v67 -= 2;
                    v68 -= 2;
                    v69 -= 32;
                  }
                  while (v69);
                  if (v57 == v66)
                    goto LABEL_71;
                  if ((v57 & 0x18) != 0)
                    goto LABEL_85;
                  v62 -= v66;
                  v63 = &v49[-v66];
                }
                else
                {
                  v66 = 0;
LABEL_85:
                  v63 = &v49[-(v57 & 0xFFFFFFFFFFFFFFF8)];
                  v62 -= v57 & 0xFFFFFFFFFFFFFFF8;
                  v71 = &v49[-v66 - v56 - 8 + (_QWORD)v61];
                  v72 = (uint64_t *)&v49[-v66 - 8];
                  v73 = v66 - (v57 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v74 = *v72--;
                    *(_QWORD *)v71 = v74;
                    v71 -= 8;
                    v73 += 8;
                  }
                  while (v73);
                  if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
                  {
LABEL_71:
                    v49 = (char *)__p;
                    __p = v61;
                    v121 = v51;
                    v122 = (char *)v61 + v60;
                    if (!v49)
                    {
LABEL_53:
                      v121 = v51;
                      v49 = (char *)v51;
                      v39 = v115;
LABEL_54:
                      if (++v50 == v48)
                        goto LABEL_94;
                      continue;
                    }
LABEL_75:
                    operator delete(v49);
                    goto LABEL_53;
                  }
                }
                v64 = v62 - 1;
                do
                {
                  v65 = *--v63;
                  *v64-- = v65;
                }
                while (v63 != (char *)v56);
                goto LABEL_71;
              }
            }
            else
            {
              v61 = 0;
              v62 = (char *)(v49 - (_BYTE *)__p);
              *(_BYTE *)v57 = buf;
              v51 = v57 + 1;
              if (v49 != (char *)v56)
                goto LABEL_67;
            }
            break;
          }
          __p = v62;
          v121 = v51;
          v122 = (char *)v61 + v60;
          if (!v49)
            goto LABEL_53;
          goto LABEL_75;
        }
        v49 = 0;
        v76 = (char *)v38[1];
        v75 = (unint64_t)v38[2];
        if ((unint64_t)v76 < v75)
        {
LABEL_95:
          *(_DWORD *)v76 = v119;
          *((_QWORD *)v76 + 1) = 0;
          *((_QWORD *)v76 + 2) = 0;
          *((_QWORD *)v76 + 3) = 0;
          v77 = __p;
          v79 = v49 - (_BYTE *)__p;
          v78 = v49 == __p;
          v37 = v111;
          if (!v78)
          {
            if ((v79 & 0x8000000000000000) != 0)
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            v80 = (char *)operator new(v79);
            *((_QWORD *)v76 + 1) = v80;
            *((_QWORD *)v76 + 2) = v80;
            v81 = &v80[v79];
            *((_QWORD *)v76 + 3) = &v80[v79];
            memcpy(v80, v77, v79);
            *((_QWORD *)v76 + 2) = v81;
          }
          v82 = v76 + 32;
          v38[1] = v76 + 32;
          goto LABEL_124;
        }
      }
      else
      {
        v49 = 0;
LABEL_94:
        v76 = (char *)v38[1];
        v75 = (unint64_t)v38[2];
        if ((unint64_t)v76 < v75)
          goto LABEL_95;
      }
      v83 = (char *)*v38;
      v84 = (v76 - (_BYTE *)*v38) >> 5;
      v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 59)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v86 = v75 - (_QWORD)v83;
      if (v86 >> 4 > v85)
        v85 = v86 >> 4;
      if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFE0)
        v87 = 0x7FFFFFFFFFFFFFFLL;
      else
        v87 = v85;
      v131 = v109 + 2;
      if (v87)
      {
        if (v87 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v88 = (char *)operator new(32 * v87);
      }
      else
      {
        v88 = 0;
      }
      v89 = &v88[32 * v84];
      *(_QWORD *)&buf = v88;
      *((_QWORD *)&buf + 1) = v89;
      *(_QWORD *)&v130 = v89;
      *((_QWORD *)&v130 + 1) = &v88[32 * v87];
      v110 = (char *)*((_QWORD *)&v130 + 1);
      v90 = v119;
      *((_QWORD *)v89 + 1) = 0;
      *((_QWORD *)v89 + 2) = 0;
      v91 = (char **)(v89 + 16);
      *(_DWORD *)v89 = v90;
      *((_QWORD *)v89 + 3) = 0;
      v92 = __p;
      v93 = v49 - (_BYTE *)__p;
      if (v49 != __p)
      {
        if ((v93 & 0x8000000000000000) != 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v94 = (char *)operator new(v49 - (_BYTE *)__p);
        *((_QWORD *)v89 + 1) = v94;
        *v91 = v94;
        v95 = &v94[v93];
        *((_QWORD *)v89 + 3) = &v94[v93];
        memcpy(v94, v92, v93);
        *v91 = v95;
      }
      v82 = v89 + 32;
      *(_QWORD *)&v130 = v89 + 32;
      v37 = v111;
      if (v76 == v83)
      {
        v38 = (void **)v109;
        *v109 = v89;
        v109[1] = v82;
        v109[2] = v110;
        v4 = v108;
        v39 = v115;
        goto LABEL_122;
      }
      v96 = 0;
      v4 = v108;
      v38 = (void **)v109;
      do
      {
        v97 = &v89[v96];
        v98 = &v76[v96];
        *((_DWORD *)v97 - 8) = *(_DWORD *)&v76[v96 - 32];
        *((_QWORD *)v97 - 2) = 0;
        *((_QWORD *)v97 - 1) = 0;
        *(_OWORD *)(v97 - 24) = *(_OWORD *)&v76[v96 - 24];
        *((_QWORD *)v97 - 1) = *(_QWORD *)&v76[v96 - 8];
        *((_QWORD *)v98 - 3) = 0;
        *((_QWORD *)v98 - 2) = 0;
        *((_QWORD *)v98 - 1) = 0;
        v96 -= 32;
      }
      while (&v76[v96] != v83);
      v76 = *v109;
      v99 = v109[1];
      v100 = v130;
      *v109 = &v89[v96];
      *(_OWORD *)(v109 + 1) = v100;
      v82 = (char *)v100;
      if (v99 != v76)
      {
        v39 = v115;
        do
        {
          v101 = (void *)*((_QWORD *)v99 - 3);
          if (v101)
          {
            *((_QWORD *)v99 - 2) = v101;
            operator delete(v101);
          }
          v99 -= 32;
        }
        while (v99 != v76);
LABEL_122:
        if (!v76)
          goto LABEL_124;
LABEL_123:
        operator delete(v76);
        goto LABEL_124;
      }
      v39 = v115;
      if (v76)
        goto LABEL_123;
LABEL_124:
      v38[1] = v82;
      v41 = v114;
      if (v46)
        CFRelease(v46);
      if (__p)
        operator delete(__p);
      MEMORY[0x1B5E2EE44](v128);
      if (!v114)
        goto LABEL_40;
LABEL_129:
      CFRelease(v41);
LABEL_40:
      ++v39;
    }
    while (v39 != v37);
  }
LABEL_132:
  v119 = v4 + 192;
  __p = (void *)QMIServiceMsg::create();
  LODWORD(v121) = 25000;
  v122 = 0;
  aBlock = 0;
  v102 = MEMORY[0x1E0C809B0];
  v116[0] = MEMORY[0x1E0C809B0];
  v116[1] = 1174405120;
  v116[2] = ___ZN4coex16QMICommandDriver30sendTransparentMessageReq_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v116[3] = &__block_descriptor_tmp_216_0;
  v116[4] = v4;
  v103 = *(void **)a3;
  if (*(_QWORD *)a3)
    v103 = _Block_copy(v103);
  v104 = *(NSObject **)(a3 + 8);
  v117 = v103;
  object = v104;
  if (v104)
    dispatch_retain(v104);
  *(_QWORD *)&buf = v102;
  *((_QWORD *)&buf + 1) = 0x40000000;
  *(_QWORD *)&v130 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm25SendTransparentMessageReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v130 + 1) = &unk_1E66DFC08;
  v131 = v116;
  v105 = _Block_copy(&buf);
  aBlock = v105;
  if (__p)
  {
    qmi::Client::send();
    v105 = aBlock;
  }
  if (v105)
    _Block_release(v105);
  if (object)
    dispatch_release(object);
  if (v117)
    _Block_release(v117);
  if (theArray)
    CFRelease(theArray);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v125);
  return MEMORY[0x1B5E2EE44](v127);
}

void sub_1B3CC15F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm9WWANState10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CC1814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CC1828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CC1854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_4(uint64_t a1, qmi::MessageBase *a2)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  __CFDictionary *v5;
  uint64_t v6;
  tlv *TlvValue;
  int v8;
  tlv *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  tlv *v13;
  int v14;
  tlv *v15;
  int v16;
  uint64_t v17;
  tlv *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  tlv *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  __CFDictionary *v68;
  __CFDictionary *v69;
  CFTypeID v70;
  __CFDictionary *v71;
  CFMutableDictionaryRef v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  CFMutableDictionaryRef v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  tlv *v86;
  int v87;
  tlv *v88;
  int v89;
  uint64_t v90;
  tlv *v91;
  int v92;
  tlv *v93;
  int v94;
  tlv *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  tlv *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  __CFDictionary *v110;
  __CFDictionary *v111;
  CFTypeID v112;
  __CFDictionary *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const __CFAllocator *allocator;
  __CFDictionary *v150;
  CFMutableDictionaryRef v151;
  CFMutableDictionaryRef v152;
  CFMutableDictionaryRef v153;
  CFMutableDictionaryRef v154;
  CFMutableDictionaryRef v155;
  CFMutableDictionaryRef v156;
  CFMutableDictionaryRef v157;
  CFMutableDictionaryRef v158;
  CFMutableDictionaryRef v159;
  __CFDictionary *v160;
  CFMutableDictionaryRef v161;
  CFMutableDictionaryRef v162;
  CFMutableDictionaryRef v163;
  CFMutableDictionaryRef v164;
  CFMutableDictionaryRef v165;
  CFMutableDictionaryRef v166;
  CFMutableDictionaryRef v167;
  CFMutableDictionaryRef v168;
  CFMutableDictionaryRef v169;
  CFMutableDictionaryRef v170;
  CFMutableDictionaryRef v171;
  CFMutableDictionaryRef v172;
  CFMutableDictionaryRef v173;
  uint64_t v174;
  _QWORD v175[3];
  __CFDictionary *v176;
  uint64_t v177;
  void (*v178)(__CFDictionary **, tlv **);
  void *v179;
  CFMutableDictionaryRef v180;
  uint64_t v181;
  tlv *v182[2];

  v148 = *(_QWORD *)(a1 + 32);
  v173 = 0;
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (Mutable)
  {
    v172 = Mutable;
    v173 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    v172 = 0;
  }
  v5 = (__CFDictionary *)MEMORY[0x1E0C809B0];
  v174 = 0;
  v176 = (__CFDictionary *)MEMORY[0x1E0C809B0];
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTEBandInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_241;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v6 = *MEMORY[0x1E0DDF3F8];
  v181 = *MEMORY[0x1E0DDF3F8];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v9 = TlvValue;
  if (TlvValue)
  {
    v10 = v8;
    v182[0] = TlvValue;
    v175[0] = tlv::parseV<coex::tlv::abm::LTEBandInformation>(v182, v8);
    v175[1] = v11;
    if (v182[0])
      v178(&v176, (tlv **)v175);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 16, v9, v10);
  }
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v171 = v4;
    CFRetain(v4);
  }
  else
  {
    v171 = 0;
  }
  v174 = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm17LTETDDInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_243;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v12 = *MEMORY[0x1E0DDF3E0];
  v181 = *MEMORY[0x1E0DDF3E0];
  v13 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v15 = v13;
  if (v13)
  {
    v16 = v14;
    v182[0] = v13;
    memset(v175, 170, 20);
    tlv::parseV<coex::tlv::abm::LTETDDInformation>(v182, v14, (uint64_t)v175);
    if (v182[0])
      v178(&v176, (tlv **)v175);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 17, v15, v16);
  }
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v170 = v4;
    CFRetain(v4);
  }
  else
  {
    v170 = 0;
  }
  v175[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12LTEOffPeriodENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_245;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v17 = *MEMORY[0x1E0DDF300];
  v181 = *MEMORY[0x1E0DDF300];
  v18 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v26 = v18;
  if (v18)
  {
    tlv::throwIfNotEnoughBytes(v18, (const unsigned __int8 *)v18 + v19, (const unsigned __int8 *)4);
    LODWORD(v182[0]) = *(_DWORD *)v26;
    v178(&v176, v182);
  }
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v169 = v4;
    CFRetain(v4);
  }
  else
  {
    v169 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTEBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_246;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v27 = *MEMORY[0x1E0DDF4E0];
  v181 = *MEMORY[0x1E0DDF4E0];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTEBandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTEBandInformationSet const&)>(a2, (uint64_t)v175, v20, v21, v22, v23, v24, v25, v114, v125, v136);
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v168 = v4;
    CFRetain(v4);
  }
  else
  {
    v168 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25TDSCDMABandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_247;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v181 = *MEMORY[0x1E0DDF5E8];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::TDSCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::TDSCDMABandInformationSet const&)>(a2, (uint64_t)v175, v28, v29, v30, v31, v32, v33, v115, v126, v137);
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v167 = v4;
    CFRetain(v4);
  }
  else
  {
    v167 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21GSMBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_248;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v40 = *MEMORY[0x1E0DDF4C0];
  v181 = *MEMORY[0x1E0DDF4C0];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::GSMBandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSMBandInformationSet const&)>(a2, (uint64_t)v175, v34, v35, v36, v37, v38, v39, v116, v127, v138);
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v166 = v4;
    CFRetain(v4);
  }
  else
  {
    v166 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22ONEXBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_249;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v181 = *MEMORY[0x1E0DDF520];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::ONEXBandInformationSet,void({block_pointer}&)(coex::tlv::abm::ONEXBandInformationSet const&)>(a2, (uint64_t)v175, v41, v42, v43, v44, v45, v46, v117, v128, v139);
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v165 = v4;
    CFRetain(v4);
  }
  else
  {
    v165 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21HDRBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_250;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v181 = *MEMORY[0x1E0DDF4D0];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::HDRBandInformationSet,void({block_pointer}&)(coex::tlv::abm::HDRBandInformationSet const&)>(a2, (uint64_t)v175, v47, v48, v49, v50, v51, v52, v118, v129, v140);
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v164 = v4;
    CFRetain(v4);
  }
  else
  {
    v164 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm23WCDMABandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_251;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v59 = *MEMORY[0x1E0DDF578];
  v181 = *MEMORY[0x1E0DDF578];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMABandInformationSet const&)>(a2, (uint64_t)v175, v53, v54, v55, v56, v57, v58, v119, v130, v141);
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v163 = v4;
    CFRetain(v4);
  }
  else
  {
    v163 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24LTECarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_252;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v131 = (void *)*MEMORY[0x1E0DDF598];
  v181 = *MEMORY[0x1E0DDF598];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTECarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTECarrierInformationSet const&)>(a2, (uint64_t)v175);
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v162 = v4;
    CFRetain(v4);
  }
  else
  {
    v162 = 0;
  }
  v142 = v27;
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21NGCBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_253;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v66 = *MEMORY[0x1E0DDF4F0];
  v181 = *MEMORY[0x1E0DDF4F0];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGCBandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCBandInformationSet const&)>(a2, (uint64_t)v175, v60, v61, v62, v63, v64, v65, v120, v131, v142);
  if (v180)
    CFRelease(v180);
  if (v4)
  {
    CFRelease(v4);
    v161 = v4;
    CFRetain(v4);
  }
  else
  {
    v161 = 0;
  }
  v147 = v17;
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24NGCCarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_254;
  v180 = v4;
  if (v4)
    CFRetain(v4);
  v67 = *MEMORY[0x1E0DDF5A0];
  v181 = *MEMORY[0x1E0DDF5A0];
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGCCarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCCarrierInformationSet const&)>(a2, (uint64_t)v175);
  if (v180)
    CFRelease(v180);
  if (v4)
    CFRelease(v4);
  if (CFDictionaryGetCount(v4))
  {
    v176 = 0;
    v68 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v69 = v68;
    if (v68)
      v176 = v68;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v68, (CFTypeRef)*MEMORY[0x1E0DDF3A0], v4);
    if (v69 && (v70 = CFGetTypeID(v69), v70 == CFDictionaryGetTypeID()))
    {
      v160 = v69;
      CFRetain(v69);
      v71 = v69;
    }
    else
    {
      v71 = 0;
      v160 = 0;
    }
    coex::QMICommandDriver::sendStateUpdate_sync(v148, (const void **)&v160, 0);
    if (v71)
      CFRelease(v71);
    if (v69)
      CFRelease(v69);
    v4 = v173;
  }
  if (v4)
    CFRelease(v4);
  v173 = 0;
  v72 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v79 = v72;
  if (v72)
  {
    v173 = v72;
    v159 = v72;
    CFRetain(v72);
  }
  else
  {
    v159 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22GSM2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_255;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = v40;
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::GSM2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSM2BandInformationSet const&)>(a2, (uint64_t)v175, v73, v74, v75, v76, v77, v78, v121, v132, v143);
  if (v180)
    CFRelease(v180);
  if (v79)
  {
    CFRelease(v79);
    v158 = v79;
    CFRetain(v79);
  }
  else
  {
    v158 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24WCDMA2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_256;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = v59;
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMA2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMA2BandInformationSet const&)>(a2, (uint64_t)v175, v80, v81, v82, v83, v84, v85, v122, v133, v144);
  if (v180)
    CFRelease(v180);
  if (v79)
  {
    CFRelease(v79);
    v157 = v79;
    CFRetain(v79);
  }
  else
  {
    v157 = 0;
  }
  v174 = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm19LTE2BandInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_258;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = v6;
  v86 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v88 = v86;
  if (v86)
  {
    v89 = v87;
    v182[0] = v86;
    v175[0] = tlv::parseV<coex::tlv::abm::LTE2BandInformation>(v182, v87);
    v175[1] = v90;
    if (v182[0])
      v178(&v176, (tlv **)v175);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 29, v88, v89);
  }
  if (v180)
    CFRelease(v180);
  if (v79)
  {
    CFRelease(v79);
    v156 = v79;
    CFRetain(v79);
  }
  else
  {
    v156 = 0;
  }
  v174 = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTE2TDDInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_260;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = v12;
  v91 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v93 = v91;
  if (v91)
  {
    v94 = v92;
    v182[0] = v91;
    memset(v175, 170, 20);
    tlv::parseV<coex::tlv::abm::LTE2TDDInformation>(v182, v92, (uint64_t)v175);
    if (v182[0])
      v178(&v176, (tlv **)v175);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 30, v93, v94);
  }
  if (v180)
    CFRelease(v180);
  if (v79)
  {
    CFRelease(v79);
    v155 = v79;
    CFRetain(v79);
  }
  else
  {
    v155 = 0;
  }
  v175[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm13LTE2OffPeriodENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_262;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = v147;
  v95 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v103 = v95;
  if (v95)
  {
    tlv::throwIfNotEnoughBytes(v95, (const unsigned __int8 *)v95 + v96, (const unsigned __int8 *)4);
    LODWORD(v182[0]) = *(_DWORD *)v103;
    v178(&v176, v182);
  }
  if (v180)
    CFRelease(v180);
  if (v79)
  {
    CFRelease(v79);
    v154 = v79;
    CFRetain(v79);
  }
  else
  {
    v154 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTE2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_263;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = v145;
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2BandInformationSet const&)>(a2, (uint64_t)v175, v97, v98, v99, v100, v101, v102, v123, v134, v145);
  if (v180)
    CFRelease(v180);
  if (v79)
  {
    CFRelease(v79);
    v153 = v79;
    CFRetain(v79);
  }
  else
  {
    v153 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25LTE2CarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_264;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = (uint64_t)v135;
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2CarrierInformationSet const&)>(a2, (uint64_t)v175);
  if (v180)
    CFRelease(v180);
  if (v79)
  {
    CFRelease(v79);
    v152 = v79;
    CFRetain(v79);
  }
  else
  {
    v152 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22NGC2BandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_265;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = v66;
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2BandInformationSet const&)>(a2, (uint64_t)v175, v104, v105, v106, v107, v108, v109, v124, v135, v146);
  if (v180)
    CFRelease(v180);
  if (v79)
  {
    CFRelease(v79);
    v151 = v79;
    CFRetain(v79);
  }
  else
  {
    v151 = 0;
  }
  v182[0] = 0;
  v176 = v5;
  v177 = 1174405120;
  v178 = (void (*)(__CFDictionary **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25NGC2CarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v179 = &__block_descriptor_tmp_266;
  v180 = v79;
  if (v79)
    CFRetain(v79);
  v181 = v67;
  v175[0] = &v176;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2CarrierInformationSet const&)>(a2, (uint64_t)v175);
  if (v180)
    CFRelease(v180);
  if (v79)
    CFRelease(v79);
  if (CFDictionaryGetCount(v79))
  {
    v176 = 0;
    v110 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v111 = v110;
    if (v110)
      v176 = v110;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v110, (CFTypeRef)*MEMORY[0x1E0DDF3A0], v79);
    if (v111 && (v112 = CFGetTypeID(v111), v112 == CFDictionaryGetTypeID()))
    {
      v150 = v111;
      CFRetain(v111);
      v113 = v111;
    }
    else
    {
      v113 = 0;
      v150 = 0;
    }
    coex::QMICommandDriver::sendStateUpdate_sync(v148, (const void **)&v150, 1);
    if (v113)
      CFRelease(v113);
    if (v111)
      CFRelease(v111);
    v79 = v173;
  }
  if (v79)
    CFRelease(v79);
}

void sub_1B3CC2710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v7 - 160));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v7 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC28A0(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 18, v2, v3);
  JUMPOUT(0x1B3CC1B34);
}

void sub_1B3CC28F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  const void **v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v8);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v9 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v9 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  const void **v9;
  uint64_t v10;
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v9);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v10 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v10 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC294C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  const void **v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v10);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v11 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v11 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  const void **v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v11);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v12 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v12 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC29A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  const void **v15;
  uint64_t v16;
  va_list va;

  va_start(va, a15);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v15);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v16 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v16 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC29D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  const void **v16;
  uint64_t v17;
  va_list va;

  va_start(va, a16);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v16);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v17 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v17 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC29FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26)
{
  const void **v26;
  uint64_t v27;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v26);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v27 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a26);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v27 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27)
{
  const void **v27;
  uint64_t v28;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v27);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v28 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a27);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v28 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,const void *a28)
{
  const void **v28;
  uint64_t v29;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v28);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v29 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a28);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v29 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,const void *a29)
{
  const void **v29;
  uint64_t v30;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v29);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v30 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a29);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v30 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,const void *a30)
{
  const void **v30;
  uint64_t v31;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v30);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v31 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a30);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v31 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31)
{
  const void **v31;
  uint64_t v32;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v31);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v32 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a31);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v32 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,const void *a32)
{
  const void **v32;
  uint64_t v33;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v32);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v33 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v33 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,const void *a33)
{
  const void **v33;
  uint64_t v34;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v33);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v34 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a33);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v34 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34)
{
  const void **v34;
  uint64_t v35;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v34);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v35 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a34);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2B8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 160));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  const void **v35;
  uint64_t v36;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v35);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v36 - 184));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a35);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v36 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  const void **v12;
  uint64_t v13;
  va_list va;

  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v12);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v13 - 184));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v13 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2C14(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  const void **v13;
  uint64_t v14;
  va_list va;

  va_start(va, a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v13);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v14 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v14 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  const void **v14;
  uint64_t v15;
  va_list va;

  va_start(va, a14);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v14);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v15 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v15 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,const void *a36)
{
  const void **v36;
  uint64_t v37;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v36);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v37 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a36);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v37 - 200));
  _Unwind_Resume(a1);
}

void sub_1B3CC2CAC(_Unwind_Exception *a1)
{
  const void **v1;
  uint64_t v2;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v1);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)(v2 - 192));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 - 208));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 - 200));
  _Unwind_Resume(a1);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::TDSCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::TDSCDMABandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 20, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC2DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC2D90);
  JUMPOUT(0x1B3CC2D88);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2CarrierInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  tlv *TlvValue;
  int v5;
  tlv *v6;
  int v7;
  tlv *v8;
  void *__p[3];
  tlv *v10;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v10 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<coex::tlv::abm::NGC2CarrierInformationSet>(&v10, v5, (uint64_t)__p);
    v8 = v10;
    if (v10)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 38, v6, v7);
  }
}

void sub_1B3CC2E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2CarrierInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  tlv *TlvValue;
  int v5;
  tlv *v6;
  int v7;
  tlv *v8;
  void *__p[3];
  tlv *v10;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v10 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<coex::tlv::abm::LTE2CarrierInformationSet>(&v10, v5, (uint64_t)__p);
    v8 = v10;
    if (v10)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 33, v6, v7);
  }
}

void sub_1B3CC2F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMA2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMA2BandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 27, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC3060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC3040);
  JUMPOUT(0x1B3CC3038);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::NGCCarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCCarrierInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  tlv *TlvValue;
  int v5;
  tlv *v6;
  int v7;
  tlv *v8;
  void *__p[3];
  tlv *v10;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v10 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<coex::tlv::abm::NGCCarrierInformationSet>(&v10, v5, (uint64_t)__p);
    v8 = v10;
    if (v10)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 35, v6, v7);
  }
}

void sub_1B3CC3138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::LTECarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTECarrierInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  tlv *TlvValue;
  int v5;
  tlv *v6;
  int v7;
  tlv *v8;
  void *__p[3];
  tlv *v10;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v6 = TlvValue;
    v7 = v5;
    v10 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<coex::tlv::abm::LTECarrierInformationSet>(&v10, v5, (uint64_t)__p);
    v8 = v10;
    if (v10)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v8)
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 28, v6, v7);
  }
}

void sub_1B3CC321C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMABandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 24, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC3310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC32F0);
  JUMPOUT(0x1B3CC32E8);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::ONEXBandInformationSet,void({block_pointer}&)(coex::tlv::abm::ONEXBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 22, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC33F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC33D8);
  JUMPOUT(0x1B3CC33D0);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2BandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 37, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC34E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC34C0);
  JUMPOUT(0x1B3CC34B8);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2BandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 32, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC35C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC35A8);
  JUMPOUT(0x1B3CC35A0);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::GSM2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSM2BandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 25, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC36B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC3690);
  JUMPOUT(0x1B3CC3688);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::NGCBandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 34, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC3798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC3778);
  JUMPOUT(0x1B3CC3770);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::LTEBandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTEBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 19, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC3880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC3860);
  JUMPOUT(0x1B3CC3858);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::HDRBandInformationSet,void({block_pointer}&)(coex::tlv::abm::HDRBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 23, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC3968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC3948);
  JUMPOUT(0x1B3CC3940);
}

void qmi::MessageBase::applyTlv<coex::tlv::abm::GSMBandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSMBandInformationSet const&)>(qmi::MessageBase *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  tlv *TlvValue;
  int v14;
  tlv *v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *__p;
  void *v20;
  uint64_t v21;

  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    v15 = TlvValue;
    __p = 0;
    v20 = 0;
    v21 = 0;
    v16 = v14;
    if (coex::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v14, (char **)&__p))
    {
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
      v17 = 0;
      v18 = __p;
      if (!__p)
        goto LABEL_5;
    }
    else
    {
      v17 = 1;
      v18 = __p;
      if (!__p)
      {
LABEL_5:
        if (v17)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 21, v15, v16);
        return;
      }
    }
    v20 = v18;
    operator delete(v18);
    goto LABEL_5;
  }
}

void sub_1B3CC3A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3CC3A30);
  JUMPOUT(0x1B3CC3A28);
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(_QWORD *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  desense::QMICommandDriver::addSingleFrequencyToMap_sync(*(_QWORD *)(a1 + 40), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), 0, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24LTECarrierInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3CC3B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTEBandInformationSetENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int **a2)
{
  CFTypeRef v3;
  CFTypeRef v4;

  coex::convert((__CFArray **)&v4, a2);
  v3 = v4;
  ctu::cf::insert<__CFString const*,__CFArray const*>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3CC3B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTEBandInformationENS_3abm9WWANState10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke(uint64_t a1, unsigned int *a2)
{
  CFTypeRef cf;

  coex::convert((CFMutableDictionaryRef *)&cf, a2);
  ctu::cf::insert<__CFString const*,__CFDictionary *>(*(__CFDictionary **)(a1 + 32), *(CFTypeRef *)(a1 + 40), cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3CC3BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void std::vector<coex::tlv::abm::LTECarrierInformation>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x666666666666666)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x333333333333333)
      v10 = 0x666666666666666;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(40 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[40 * v7];
    v14 = &v11[40 * v10];
    v15 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 40);
        v18 = *(_OWORD *)(v5 - 24);
        *(_QWORD *)(v13 - 11) = *(_QWORD *)(v5 - 11);
        *(_OWORD *)(v13 - 24) = v18;
        *(_OWORD *)(v13 - 40) = v17;
        v13 -= 40;
        v5 -= 40;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<coex::tlv::abm::BandInfoSet>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

void sub_1B3CC3FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3CC4004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3CC4020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t coex::tlv::abm::parseField(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)8);
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 24), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 24);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 28), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 28);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 32), a2, (const unsigned __int8 *)1);
  *(_BYTE *)(a3 + 36) = *(_BYTE *)(a1 + 32);
  return a1 + 33;
}

{
  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 20), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 20) = *(_WORD *)(a1 + 20);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 22), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 22) = *(_WORD *)(a1 + 22);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 24), a2, (const unsigned __int8 *)2);
  *(_WORD *)(a3 + 24) = *(_WORD *)(a1 + 24);
  return a1 + 26;
}

{
  uint64_t v6;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  v6 = a1 + 8;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)8);
  if ((unint64_t)&a2[-a1 - 8] >= 8)
  {
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a1 + 8);
    return a1 + 16;
  }
  return v6;
}

{
  uint64_t v6;

  tlv::throwIfNotEnoughBytes((tlv *)a1, a2, (const unsigned __int8 *)4);
  *(_DWORD *)a3 = *(_DWORD *)a1;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 4), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 8), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 8);
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 12), a2, (const unsigned __int8 *)4);
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 12);
  v6 = a1 + 16;
  tlv::throwIfNotEnoughBytes((tlv *)(a1 + 16), a2, (const unsigned __int8 *)8);
  if ((unint64_t)&a2[-a1 - 16] >= 8)
  {
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
    return a1 + 24;
  }
  return v6;
}

char *coex::tlv::abm::parseField(tlv *a1, const unsigned __int8 *a2, char **a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;

  tlv::throwIfNotEnoughBytes(a1, a2, (const unsigned __int8 *)1);
  v8 = *(unsigned __int8 *)a1;
  v7 = (char *)a1 + 1;
  v6 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = (v10 - *a3) >> 4;
  v12 = v8 >= v11;
  v13 = v8 - v11;
  if (v8 <= v11)
  {
    if (!v12)
    {
      v10 = &v9[16 * v6];
      a3[1] = v10;
    }
  }
  else
  {
    std::vector<coex::tlv::abm::BandInfoSet>::__append(a3, v13);
    v9 = *a3;
    v10 = a3[1];
  }
  if (v9 == v10)
    return v7;
  v14 = v9 + 8;
  do
  {
    tlv::throwIfNotEnoughBytes((tlv *)v7, a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 2) = *(_DWORD *)v7;
    v15 = v14 - 1;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 4), a2, (const unsigned __int8 *)4);
    *((_DWORD *)v14 - 1) = *((_DWORD *)v7 + 1);
    v16 = v7 + 8;
    tlv::throwIfNotEnoughBytes((tlv *)(v7 + 8), a2, (const unsigned __int8 *)8);
    if ((unint64_t)(a2 - (const unsigned __int8 *)(v7 + 8)) >= 8)
    {
      *v14 = *((_QWORD *)v7 + 1);
      v16 = v7 + 16;
    }
    v14 += 2;
    v7 = v16;
  }
  while (v15 + 2 != (_QWORD *)v10);
  return v16;
}

void tlv::parseV<coex::tlv::abm::LTECarrierInformationSet>(tlv **a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (uint64_t)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<coex::tlv::abm::LTECarrierInformation>::__append((char **)a3, v7);
    v10 = *(char **)a3;
    v11 = *(char **)(a3 + 8);
    if (*(char **)a3 != v11)
    {
      do
      {
        v8 = coex::tlv::abm::parseField(v8, v6, (uint64_t)v10);
        v10 += 40;
      }
      while (v10 != v11);
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3CC42AC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3CC4298);
}

void sub_1B3CC42C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t tlv::parseV<coex::tlv::abm::LTEBandInformation>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)4);
  v5 = *(_DWORD *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 4), v4, (const unsigned __int8 *)4);
  v6 = *((unsigned int *)v3 + 1);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 8), v4, (const unsigned __int8 *)4);
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 12), v4, (const unsigned __int8 *)4);
  *a1 = (tlv *)((char *)v3 + 16);
  return v5 | (unint64_t)(v6 << 32);
}

void sub_1B3CC4390(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3CC4370);
}

void tlv::parseV<nas::tlv::abm::BBNeighborList>(tlv **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  tlv *v5;
  const unsigned __int8 *v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a1;
  v6 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v6, (const unsigned __int8 *)1);
  v9 = *(unsigned __int8 *)v5;
  v8 = (char *)v5 + 1;
  v7 = v9;
  if (v9)
  {
    std::vector<nas::tlv::abm::BBFreqItem>::__append((uint64_t)a3, v7);
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      do
      {
        v12 = v8;
        tlv::throwIfNotEnoughBytes((tlv *)v8, v6, (const unsigned __int8 *)8);
        *(_QWORD *)v10 = *(_QWORD *)v8;
        tlv::throwIfNotEnoughBytes((tlv *)(v8 + 8), v6, (const unsigned __int8 *)4);
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v8 + 2);
        v10 += 16;
        v8 += 12;
      }
      while (v10 != v11);
      v8 = v12 + 12;
    }
  }
  *a1 = (tlv *)v8;
}

void sub_1B3CC4464(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1B3CC444CLL);
}

void sub_1B3CC4478(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ctu::cf::insert<__CFString const*,__CFArray const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3CC4510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3CC4534(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  size_t d_namlen;
  _BYTE *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  _BYTE __dst[24];

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    v5 = readdir(result);
    if (v5)
    {
      v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17)
            v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          else
            v11 = d_namlen | 7;
          v8 = operator new(v11 + 1);
          *(_QWORD *)&__dst[8] = d_namlen;
          *(_QWORD *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          v8 = __dst;
          if (!(_DWORD)d_namlen)
          {
            __dst[d_namlen] = 0;
            v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
              goto LABEL_10;
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(_QWORD *)(a2 + 8) = v9 + 1;
          *(_QWORD *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_6;
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(_QWORD *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_21;
LABEL_6:
        v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1B3CC46B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1B5E2F564](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1B3CC4828(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1B5E2F6FC](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1B5E2F570](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1B5E2F6FC](a1 + 53);
  return a1;
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&locale->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  const char *v5;
  timespec v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void **v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  timespec v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE __p[56];
  void *v27[2];
  uint64_t v28;
  stat v29;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &v29))
    return 1;
  if (!a3)
  {
    if (v5[23] >= 0)
      v21 = v5;
    else
      v21 = *(const char **)v5;
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0)
    v7 = v5;
  else
    v7 = *(const char **)v5;
  if (*v7 == 47)
  {
    *(_OWORD *)__p = *(_OWORD *)v27;
    *(_QWORD *)&__p[16] = v28;
  }
  v8 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
  {
    v9 = 0;
    v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0)
          v11 = v27;
        else
          v11 = (void **)v27[0];
        if (v28 >= 0)
          v12 = HIBYTE(v28);
        else
          v12 = (std::string::size_type)v27[1];
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        v8 = *(_QWORD *)&__p[32];
      }
      v13 = v8 + 24 * v9;
      v14 = *(char *)(v13 + 23);
      v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(_QWORD *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2))
          break;
      }
      v9 = v10;
      v8 = *(_QWORD *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[32]) >> 3) <= v9)
        goto LABEL_42;
    }
    v20 = 0;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_42:
  v20 = 1;
  if ((__p[23] & 0x80000000) != 0)
LABEL_43:
    operator delete(*(void **)__p);
LABEL_44:
  v22 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[32])
  {
    v23 = *(_QWORD *)&__p[40];
    v24 = *(void **)&__p[32];
    if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 24;
      }
      while (v23 != v22);
      v24 = *(void **)&__p[32];
    }
    *(_QWORD *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  return v20;
}

void sub_1B3CC4BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t support::fs::removeDir(const char *a1)
{
  const std::__fs::filesystem::path *v1;
  timespec v2;
  _BOOL8 v3;
  std::error_code *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  int v10;
  std::string::size_type size;
  std::string *v12;
  std::string *p_p;
  int v14;
  size_t v15;
  unint64_t v16;
  char *p_dst;
  uint64_t v18;
  uint64_t v19;
  const std::__fs::filesystem::path *v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  timespec v25;
  std::string *v26;
  std::error_code *v27;
  const std::__fs::filesystem::path *v28;
  std::string *v29;
  char v30;
  std::string *v31;
  DIR *v32;
  DIR *v33;
  dirent *v34;
  const std::__fs::filesystem::path *v35;
  const char *v36;
  void **v37;
  void **v38;
  void *v39;
  std::string __p;
  void *v42;
  void **v43;
  uint64_t v44;
  stat __dst;
  _QWORD v46[5];

  v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x1E0C80C00];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &__dst))
    return 1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  v5 = 0;
  while (1)
  {
    v6 = v5;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (_BYTE *)v42) >> 3);
    v3 = v7 <= v5;
    if (v7 <= v5)
      break;
    v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      if (v12->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_58;
    }
    v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0)
      v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    else
      v15 = v1->__pn_.__r_.__value_.__l.__size_;
    v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16 >= 0x17)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(_QWORD *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15)
        goto LABEL_38;
    }
    if (v14 >= 0)
      v20 = v1;
    else
      v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v46 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)v23;
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v31 = &__p)
        : (v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v32 = opendir((const char *)v31), (v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = (const std::__fs::filesystem::path *)&__p;
      else
        v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      if (!remove(v28, v27))
        goto LABEL_58;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &__p;
      else
        v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    v5 = v6 + 1;
    if ((v30 & 1) == 0)
      goto LABEL_75;
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = v1;
  else
    v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = (const char *)v1;
    else
      v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    unlink(v36);
  }
LABEL_75:
  v37 = (void **)v42;
  if (v42)
  {
    v38 = v43;
    v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0)
          operator delete(*(v38 - 3));
        v38 -= 3;
      }
      while (v38 != v37);
      v39 = v42;
    }
    v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_1B3CC5020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3CC5038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  const char *v3;
  void **v4;
  void **v5;
  double v6;
  __int128 v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  int v12;
  size_t v13;
  unint64_t v14;
  stat *p_dst;
  std::string::size_type v16;
  void **v17;
  void **v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  timespec v27;
  void **v28;
  char v29;
  int v30;
  timespec v31;
  void **v32;
  std::error_code *v33;
  const std::__fs::filesystem::path *v34;
  void **v35;
  void **v36;
  DIR *v37;
  DIR *v38;
  dirent *v39;
  int v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  char v51;
  char v52;
  void **v53;
  void *v54;
  time_t v56;
  char v57;
  int v58;
  std::string v59;
  void *__p[4];
  std::string v61;
  void *v62;
  void **v63;
  uint64_t v64;
  stat __dst;

  v3 = a1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  v56 = time(0);
  v5 = (void **)v62;
  v4 = v63;
  if (v62 == v63)
  {
    v52 = 1;
    if (v62)
      goto LABEL_105;
    return v52 & 1;
  }
  v6 = (double)a2;
  v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2)
      break;
    if (v9 == 1)
    {
      v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v61;
      if (v10->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_95;
    }
LABEL_19:
    memset(__p, 170, 24);
    v12 = v3[23];
    if (v12 >= 0)
      v13 = *((unsigned __int8 *)v3 + 23);
    else
      v13 = *((_QWORD *)v3 + 1);
    v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v14 >= 0x17)
    {
      v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      v16 = v9;
      v17 = v5;
      v18 = v4;
      v19 = v3;
      v20 = a2;
      v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v21 = v14 | 7;
      v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(_QWORD *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
      a2 = v20;
      v3 = v19;
      v4 = v18;
      v5 = v17;
      v9 = v16;
      v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13)
        goto LABEL_33;
    }
    if (v12 >= 0)
      v23 = v3;
    else
      v23 = *(const char **)v3;
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0)
      v24 = &v61;
    else
      v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2)
        goto LABEL_47;
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (v36 = __p) : (v36 = (void **)__p[0]),
            (v37 = opendir((const char *)v36), (v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0)
          v34 = (const std::__fs::filesystem::path *)__p;
        else
          v34 = (const std::__fs::filesystem::path *)__p[0];
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          v30 = 0;
          v57 = 1;
          v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_91;
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      v40 = v3[23];
      if (v40 >= 0)
        v41 = *((unsigned __int8 *)v3 + 23);
      else
        v41 = *((_QWORD *)v3 + 1);
      v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v42 >= 0x17)
      {
        v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v44 = v42 | 7;
        v45 = v44 + 1;
        v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        v43 = (char *)&v59;
        *((_BYTE *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41)
          goto LABEL_80;
      }
      if (v40 >= 0)
        v46 = v3;
      else
        v46 = *(const char **)v3;
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v61;
      else
        v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        size = v61.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst.st_uid = *((_QWORD *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_88;
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if ((v51 & 1) != 0)
          goto LABEL_89;
LABEL_59:
        v57 = 0;
        v29 = 0;
        v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_91;
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((v51 & 1) != 0)
        goto LABEL_89;
      goto LABEL_59;
    }
    v29 = 0;
    v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if ((v29 & 1) != 0)
      goto LABEL_95;
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3)
      goto LABEL_97;
LABEL_3:
    v5 += 3;
    if (v5 == v4)
      goto LABEL_102;
  }
  v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v61;
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822)
    goto LABEL_19;
LABEL_95:
  v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_96;
LABEL_93:
  if (v30 == 3)
    goto LABEL_3;
LABEL_97:
  if (!v30)
    goto LABEL_3;
LABEL_102:
  v5 = (void **)v62;
  v52 = v57;
  if (!v62)
    return v52 & 1;
LABEL_105:
  v53 = v63;
  v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0)
        operator delete(*(v53 - 3));
      v53 -= 3;
    }
    while (v53 != v5);
    v54 = v62;
  }
  v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_1B3CC5618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DIR *v7;
  DIR *v8;
  dirent *v9;
  char *d_name;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  _BYTE *v20;
  _WORD *v21;
  DIR *v22;
  uint64_t v23;
  uint64_t v24;
  timespec v25;
  int v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const std::string::value_type *v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::sub_match<const char *> *v37;
  std::sub_match<std::__wrap_iter<const char *>> *v38;
  __int128 v39;
  int v40;
  int v41;
  unint64_t v42;
  __int128 v43;
  std::string *v44;
  unsigned __int8 v45;
  NSObject *v46;
  _BOOL8 result;
  int *v48;
  char *v49;
  char v50;
  const char *v52;
  std::string v53;
  _BYTE __dst[24];
  void *__p[2];
  _QWORD v56[9];
  __int128 v57;
  uint64_t v58;
  stat v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *__error() = 0;
  if (a1[23] < 0)
  {
    v7 = opendir(*(const char **)a1);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = opendir(a1);
    if (v7)
    {
LABEL_3:
      v8 = v7;
      v9 = readdir(v7);
      if (v9)
      {
        v52 = a1;
        v50 = 0;
        while (1)
        {
          d_name = v9->d_name;
          memset(__dst, 170, sizeof(__dst));
          v11 = strlen(v9->d_name);
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v12 = v11;
          if (v11 >= 0x17)
            break;
          __dst[23] = v11;
          v13 = __dst;
          if (v11)
            goto LABEL_12;
LABEL_13:
          v13[v12] = 0;
          v16 = __dst[23];
          v17 = __dst[23];
          v18 = *(_QWORD *)&__dst[8];
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          if (v19 == 2)
          {
            v21 = *(_WORD **)__dst;
            if (__dst[23] >= 0)
              v21 = __dst;
            if (*v21 == 11822)
              goto LABEL_73;
          }
          else if (v19 == 1)
          {
            v20 = *(_BYTE **)__dst;
            if (__dst[23] >= 0)
              v20 = __dst;
            if (*v20 == 46)
              goto LABEL_73;
          }
          if ((a4 & 1) != 0)
            goto LABEL_53;
          v22 = v8;
          v23 = a4;
          v24 = a3;
          v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&v59.st_blksize = v25;
          *(timespec *)v59.st_qspare = v25;
          v59.st_birthtimespec = v25;
          *(timespec *)&v59.st_size = v25;
          v59.st_mtimespec = v25;
          v59.st_ctimespec = v25;
          *(timespec *)&v59.st_uid = v25;
          v59.st_atimespec = v25;
          *(timespec *)&v59.st_dev = v25;
          v26 = v52[23];
          if (v26 >= 0)
            v27 = *((unsigned __int8 *)v52 + 23);
          else
            v27 = *((_QWORD *)v52 + 1);
          v28 = v27 + 1;
          memset(&v53, 170, sizeof(v53));
          if (v27 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v28 >= 0x17)
          {
            v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v30 = v28 | 7;
            v31 = v30 + 1;
            v29 = (char *)operator new(v30 + 1);
            v53.__r_.__value_.__l.__size_ = v27 + 1;
            v53.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
            v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          }
          else
          {
            memset(&v53, 0, sizeof(v53));
            v29 = (char *)&v53;
            *((_BYTE *)&v53.__r_.__value_.__s + 23) = v27 + 1;
            if (!v27)
              goto LABEL_40;
          }
          if (v26 >= 0)
            v32 = v52;
          else
            v32 = *(const char **)v52;
          memmove(v29, v32, v27);
LABEL_40:
          a3 = v24;
          *(_WORD *)&v29[v27] = 47;
          if (v17 >= 0)
            v33 = __dst;
          else
            v33 = *(const std::string::value_type **)__dst;
          v34 = std::string::append(&v53, v33, v19);
          a4 = v23;
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v56[0] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (v56[0] >= 0)
            v36 = __p;
          else
            v36 = (void **)__p[0];
          lstat((const char *)v36, &v59);
          v8 = v22;
          if (SHIBYTE(v56[0]) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_48:
              if ((v59.st_mode & 0xF000) != 0xA000)
                goto LABEL_52;
              goto LABEL_73;
            }
          }
          else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_48;
          }
          operator delete(v53.__r_.__value_.__l.__data_);
          if ((v59.st_mode & 0xF000) != 0xA000)
          {
LABEL_52:
            v16 = __dst[23];
            v18 = *(_QWORD *)&__dst[8];
            LOBYTE(v17) = __dst[23];
LABEL_53:
            if ((v17 & 0x80u) == 0)
              v37 = (std::sub_match<const char *> *)__dst;
            else
              v37 = *(std::sub_match<const char *> **)__dst;
            if ((v17 & 0x80u) != 0)
              v16 = v18;
            v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
            *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v57 = v39;
            v56[6] = 0xAAAAAAAAAAAAAA00;
            v56[3] = 0xAAAAAAAAAAAAAAAALL;
            v56[4] = 0;
            v56[5] = 0;
            v56[7] = 0;
            v56[8] = 0;
            LOBYTE(v57) = 0;
            BYTE8(v57) = 0;
            v58 = 0;
            *(_OWORD *)__p = 0u;
            memset(v56, 0, 25);
            *(_OWORD *)&v59.st_birthtimespec.tv_nsec = v39;
            v59.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
            v59.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
            memset(&v59.st_mtimespec, 0, 17);
            memset(&v59.st_ctimespec.tv_nsec, 0, 17);
            LOBYTE(v59.st_size) = 0;
            v59.st_blocks = 0;
            memset(&v59, 0, 41);
            v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v59, 4160);
            std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v59.st_dev, 0);
            if (*(_QWORD *)&v59.st_dev)
            {
              v59.st_ino = *(_QWORD *)&v59.st_dev;
              operator delete(*(void **)&v59.st_dev);
            }
            if ((_BYTE)v57)
              v41 = v40 ^ 1;
            else
              v41 = 1;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if ((v40 & v41) != 0)
            {
              v42 = *(_QWORD *)(a3 + 8);
              if (v42 >= *(_QWORD *)(a3 + 16))
              {
                v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
              }
              else
              {
                if ((__dst[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
                }
                else
                {
                  v43 = *(_OWORD *)__dst;
                  *(_QWORD *)(v42 + 16) = *(_QWORD *)&__dst[16];
                  *(_OWORD *)v42 = v43;
                }
                v44 = (std::string *)(v42 + 24);
                *(_QWORD *)(a3 + 8) = v42 + 24;
              }
              *(_QWORD *)(a3 + 8) = v44;
              v50 = 1;
            }
          }
LABEL_73:
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v9 = readdir(v8);
          if (!v9)
            goto LABEL_85;
        }
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)&__dst[8] = v12;
        *(_QWORD *)&__dst[16] = v15 | 0x8000000000000000;
        *(_QWORD *)__dst = v13;
LABEL_12:
        memmove(v13, d_name, v12);
        goto LABEL_13;
      }
      v50 = 0;
LABEL_85:
      closedir(v8);
      return v50 & 1;
    }
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1EDBEAA20 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v46 = qword_1EDBEAA20;
    result = os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v46 = qword_1EDBEAA20;
    result = os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v48 = __error();
  v49 = strerror(*v48);
  v59.st_dev = 136315394;
  *(_QWORD *)&v59.st_mode = a1;
  WORD2(v59.st_ino) = 2080;
  *(__darwin_ino64_t *)((char *)&v59.st_ino + 6) = (__darwin_ino64_t)v49;
  _os_log_error_impl(&dword_1B3CB3000, v46, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v59, 0x16u);
  return 0;
}

void sub_1B3CC5CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *support::fs::readCurrentLine@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  std::locale v9[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10)
        break;
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(v9, MEMORY[0x1E0DE4A90]);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_1B3CC5E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CC5EA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E66D2CF0, MEMORY[0x1E0DE42D0]);
}

void sub_1B3CC5F18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1B3CC61D4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E66D2CF8, MEMORY[0x1E0DE42E0]);
}

void sub_1B3CC62B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x1B5E2F6A8]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != (std::basic_regex<char> *)&a2[v7])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1B3CC65F4(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CC6610(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  std::basic_regex<char> *v16;
  std::__owns_one_state<char> *v17;
  int v18;
  std::basic_regex<char> *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::basic_regex<char> *v30;
  char *v31;
  std::__owns_one_state<char> *v32;
  int v33;
  std::basic_regex<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = operator new(8uLL);
  *v6 = &unk_1E66D3110;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_1E66D3168;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
        if (v13 == 256)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
LABEL_38:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = (std::basic_regex<char> *)v15;
    v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v15, a3);
    if (v15 == (char *)v16)
      break;
LABEL_17:
    if (v15 == (char *)v16)
      goto LABEL_23;
  }
  v17 = *(std::__owns_one_state<char> **)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
  if (v19 != v16)
  {
    v15 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v19, (std::basic_regex<char> *)a3, v17, (v18 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == (std::basic_regex<char> *)a2)
  {
    v20 = operator new(0x10uLL);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == (std::basic_regex<char> *)a3)
    return (std::basic_regex<char> *)a3;
  while (2)
  {
    if (LOBYTE(v16->__traits_.__loc_.__locale_) != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
    v31 = (char *)&v16->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v16 = (std::basic_regex<char> *)v31;
      v31 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v31, a3);
      if (v31 != (char *)v16)
      {
LABEL_32:
        if (v31 == (char *)v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(std::__owns_one_state<char> **)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
    if (v34 != v16)
    {
      v31 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v34, (std::basic_regex<char> *)a3, v32, (v33 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = operator new(0x10uLL);
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = operator new(0x18uLL);
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_1E66D3728;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = operator new(0x10uLL);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = operator new(0x10uLL);
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_1E66D3770;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != (std::basic_regex<char> *)a3)
      continue;
    return (std::basic_regex<char> *)a3;
  }
}

void sub_1B3CC6A24(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CC6A60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CC6AB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 == (char *)v8)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
  if (v11 != v8)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    v12 = (std::__node<char> *)operator new(0x10uLL);
    v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == (std::basic_regex<char> *)a3)
    return a3;
  while (2)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v23, a3);
      if (v23 != (char *)v8)
      {
LABEL_14:
        if (v23 == (char *)v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = a1->__end_;
    v25 = a1->__marked_count_;
    v26 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v26 != v8)
    {
      v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (std::__node<char> *)operator new(0x10uLL);
      v28 = a1->__end_;
      v29 = v28->__first_;
      v27[1].__vftable = (std::__node<char>_vtbl *)v29;
      v28->__first_ = v27;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    v15 = (std::__node<char> *)operator new(0x18uLL);
    v16 = v21->__first_;
    v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v15[2].__vftable = (std::__node<char>_vtbl *)v16;
    v15->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3728;
    end->__first_ = v15;
    v21->__first_ = 0;
    v17 = (std::__node<char> *)operator new(0x10uLL);
    v18 = a1->__end_->__first_;
    v17[1].__vftable = (std::__node<char>_vtbl *)v18;
    v21->__first_ = v17;
    a1->__end_->__first_ = 0;
    v19 = (std::__node<char> *)operator new(0x10uLL);
    v20 = v21->__first_;
    v19->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3770;
    v19[1].__vftable = (std::__node<char>_vtbl *)v20;
    a1->__end_->__first_ = v19;
    a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
    if (v8 != (std::basic_regex<char> *)a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_1E66D3260;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10)
          continue;
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_1E66D32A8;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != v3)
  {
    while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), v3);
      if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1))
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = operator new(0x18uLL);
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_1E66D3728;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = operator new(0x10uLL);
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_1E66D3770;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E66D3728;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E66D3770;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = v22 + 1;
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E66D3728;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E66D3770;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v9 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CC73AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001B3DCAF61)
    return a1 + 24;
  if (((v3 & 0x80000001B3DCAF61 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B3DCAF61))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B3DCAF61 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int marked_count;
  std::basic_regex<char> v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = (char *)operator new(0x30uLL);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E66D32F0;
          *((_QWORD *)v16 + 1) = v24;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = (char *)operator new(0x30uLL);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E66D32F0;
          *((_QWORD *)v16 + 1) = v17;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *v10 = v14 + 16;
    v10[1] = v13;
    *((_BYTE *)v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v27.__loop_count_ = v25;
    *(_OWORD *)&v27.__start_.__cntrl_ = v25;
    *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v25;
    *(_OWORD *)&v27.__traits_.__col_ = v25;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
    v27.__flags_ = *(_DWORD *)(a1 + 24);
    v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
    marked_count = v27.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v22 == a3 || *v22 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v27.__loop_count_ = v21;
  *(_OWORD *)&v27.__start_.__cntrl_ = v21;
  *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v21;
  *(_OWORD *)&v27.__traits_.__col_ = v21;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
  v27.__flags_ = *(_DWORD *)(a1 + 24);
  v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
  v23 = v27.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v23;
  if (v22 == a3 || *v22 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v27.__traits_.__loc_);
  return v22 + 1;
}

void sub_1B3CC78AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CC78C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CC78D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CC78E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int *p_open_count;
  char *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v12;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_26;
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3)
            goto LABEL_26;
          v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v12 = (std::__node<char> *)operator new(0x18uLL);
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_1E66D35C0;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (v3 = (std::basic_regex<char> *)v16, *v16 != 41))
LABEL_26:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            v17 = (std::__node<char> *)operator new(0x18uLL);
            v18 = this->__end_;
            v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3608;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_23:
        v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (std::__node<char> *)operator new(0x10uLL);
        v9 = this->__end_;
        v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3380;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_23;
      case '[':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  char *v9;
  size_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  std::basic_regex<char> *v17;
  unsigned __int8 *v18;
  BOOL v20;
  std::basic_regex<char> *v21;
  BOOL v22;
  char *v23;
  size_t v24;
  std::basic_regex<char> *v25;
  int v26;
  int v27;
  std::basic_regex<char> *v28;
  int v29;
  std::basic_regex<char> *v30;
  _BYTE *v31;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v20 = 1;
      else
        v20 = v8 == a3;
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v22 = 1;
    else
      v22 = v21 == a3;
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123)
      return this;
    v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_71;
    v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38)
      goto LABEL_71;
    v13 = v12 - 48;
    v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
          break;
        if (v13 >= 214748364)
          goto LABEL_71;
        v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3)
          goto LABEL_19;
      }
    }
    if (v14 == v11)
      goto LABEL_71;
    if (v14 == (char *)a3)
      goto LABEL_72;
    v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3)
      goto LABEL_71;
    v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v10 = v13;
        v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      goto LABEL_72;
    v27 = v26 - 48;
    v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      v28 = a3;
    }
    else
    {
      while (1)
      {
        v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38)
          break;
        if (v27 >= 214748364)
          goto LABEL_71;
        v27 = v29 + 10 * v27 - 48;
        v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3)
          goto LABEL_60;
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125)
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13)
      goto LABEL_71;
    v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1B5E2F6A8]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1B3CC7F94(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  char *v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_1E66D3338;
  *((_QWORD *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((_QWORD *)v8 + 7) = a2->__start_.__ptr_;
  *((_QWORD *)v8 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CC8098(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D32F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D32F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E66D3338;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D3338;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  std::sub_match<const char *> *begin;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::sub_match<const char *> *v16;
  uint64_t v17;
  std::vector<std::csub_match> __p;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v22 = 0xAAAAAAAAAAAAAA00;
  v24 = v4;
  v21 = 0;
  v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v6;
  LOBYTE(v22) = 0;
  v23 = v19;
  LOBYTE(v24) = v20;
  v25 = v6;
  BYTE8(v24) = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &begin[v15];
    v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)v17 = v16->std::pair<const char *, const char *>;
    *(_BYTE *)(v17 + 16) = v16->matched;
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1B3CC872C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE v45[96];
  std::vector<std::csub_match>::value_type __x;
  char *v47;
  char *v48;
  unint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 85);
    v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
    if (*(_QWORD *)&v45[56])
    {
      *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
      operator delete(*(void **)&v45[56]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v13 = v48;
    *((_DWORD *)v48 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v48;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v48;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v36 = *a4;
          *(_QWORD *)v36 = a2;
          *(_QWORD *)(v36 + 8) = v23;
          *(_BYTE *)(v36 + 16) = 1;
          v37 = *((_QWORD *)v13 - 8);
          v38 = *((_QWORD *)v13 - 7) - v37;
          if (v38)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            v40 = (_BYTE *)(v37 + 16);
            v41 = 1;
            do
            {
              v42 = v36 + 24 * v41;
              *(_OWORD *)v42 = *((_OWORD *)v40 - 1);
              v43 = *v40;
              v40 += 24;
              *(_BYTE *)(v42 + 16) = v43;
            }
            while (v39 > v41++);
          }
          v6 = 1;
          v21 = v47;
          if (!v47)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v48;
          v25 = (void *)*((_QWORD *)v48 - 5);
          if (v25)
          {
            *((_QWORD *)v48 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v48 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v45[64] = v27;
          *(_OWORD *)&v45[80] = v27;
          *(_OWORD *)&v45[32] = v27;
          *(_OWORD *)&v45[48] = v27;
          *(_OWORD *)v45 = v27;
          *(_OWORD *)&v45[16] = v27;
          std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v45[80] + 24))(*(_QWORD *)&v45[80], 0, v45);
          v28 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
            if (*(_QWORD *)&v45[56])
            {
              *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
              operator delete(*(void **)&v45[56]);
            }
          }
          else
          {
            v29 = *(_OWORD *)&v45[16];
            *(_OWORD *)v48 = *(_OWORD *)v45;
            *((_OWORD *)v28 + 1) = v29;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = 0;
            *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v28 + 8) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 56) = *(_OWORD *)&v45[56];
            *((_QWORD *)v28 + 9) = *(_QWORD *)&v45[72];
            memset(&v45[56], 0, 24);
            v30 = *(_QWORD *)&v45[80];
            *(_QWORD *)(v28 + 85) = *(_QWORD *)&v45[85];
            *((_QWORD *)v28 + 10) = v30;
            v48 = v28 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_16:
          v21 = v47;
          v13 = v48;
          ++v20;
          if (v47 != v48)
            continue;
          v6 = 0;
          if (v47)
          {
LABEL_37:
            v31 = v48;
            v32 = v21;
            if (v48 != v21)
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 5);
                if (v33)
                {
                  *((_QWORD *)v31 - 4) = v33;
                  operator delete(v33);
                }
                v34 = (void *)*((_QWORD *)v31 - 8);
                if (v34)
                {
                  *((_QWORD *)v31 - 7) = v34;
                  operator delete(v34);
                }
                v31 -= 96;
              }
              while (v31 != v21);
              v32 = v47;
            }
            v48 = v21;
            operator delete(v32);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_1B3CC8B58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B3CC8B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1B3CC8BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B3CC8BC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CC8DEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CC8E38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_1B3CC94A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!v8)
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_)
    goto LABEL_23;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1B3CC9790(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CC97DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CC9920(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1B3CC9B04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CC9B18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CC9B2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CC9B40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CC9B54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CC9B68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned __int8 v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  std::basic_regex<char>::value_type v16;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3)
        goto LABEL_81;
      v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v9;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_43;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_81;
      v13 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_81:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v16;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_81;
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  char *v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E66D33C8;
    *((_QWORD *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E66D3410;
    *((_QWORD *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3458;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1B3CCA144(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CCA1BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3530;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D33C8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D33C8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D3410;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D3410;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D34A0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D34A0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D34E8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E66D34E8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_1B3CCAF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale *v1;

  v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 negate;
  void *v27;
  unsigned __int8 v28;
  std::vector<char>::pointer v29;
  unint64_t v30;
  int v31;
  std::regex_traits<char>::char_class_type v32;
  char v33;
  int v34;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v36;
  char *v37;
  std::vector<std::pair<std::string, std::string>>::pointer v38;
  std::vector<std::pair<std::string, std::string>>::pointer v39;
  unsigned int v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  std::vector<std::string>::pointer v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  void *v82;
  int v83;
  std::string *v84;
  uint64_t v85;
  const void *v86;
  void *v87;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v88;
  std::vector<std::string>::pointer v89;
  int v90;
  int64_t v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  std::string *v98;
  void *v99;
  int v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  std::string::size_type size;
  int v107;
  std::vector<std::string>::pointer v108;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v111;
  std::regex_traits<char>::char_class_type neg_mask;
  int v113;
  std::string::size_type v114;
  std::regex_traits<char>::char_class_type v115;
  int v116;
  std::__node<char> *first;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::value_type *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  BOOL v127;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v128;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v129;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136[3];
  __int16 __src;
  void *__p[3];

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v25 = 0;
    negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_34;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v27 = __p[1];
    operator delete(__p[0]);
    if (v27)
      goto LABEL_8;
LABEL_34:
    negate = 0;
    v25 = 1;
    v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2]))
    goto LABEL_34;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 2);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = this->__ranges_.__begin_;
  v15 = HIBYTE(v136[2]);
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0)
    v19 = v136;
  else
    v19 = (void **)v136[0];
  v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0)
    v21 = (void *)HIBYTE(v136[2]);
  else
    v21 = v136[1];
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if ((unint64_t)v21 >= v61)
      v62 = v61;
    else
      v62 = (size_t)v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= (unint64_t)v21)
      v67 = (size_t)v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  p_traits = &this->__traits_;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136[0]);
  negate = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_209;
  v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  v89 = this->__equivalences_.__begin_;
  v90 = SHIBYTE(__p[2]);
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v94 = (void *)HIBYTE(__p[2]);
  else
    v94 = __p[1];
  if (SHIBYTE(__p[2]) < 0)
  {
    v135 = SHIBYTE(__p[2]);
    v103 = 0;
    v104 = __p[0];
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      v107 = (char)size;
      if ((size & 0x80u) != 0)
        size = v89->__r_.__value_.__l.__size_;
      if (v94 == (void *)size)
      {
        v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0)
      v114 = v89->__r_.__value_.__l.__size_;
    if (v114 != HIBYTE(__p[2]))
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = v122[15];
        v125 = *(_QWORD *)v122;
        v122 += 24;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == (void *)v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    negate = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    v100 = (char)v99;
    if ((char)v99 < 0)
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      v101 = __p;
      v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p[0]);
  negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        v113 = negate;
LABEL_228:
        negate = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    v28 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = this->__chars_.__begin_;
  v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    end = this->__neg_chars_.__end_;
    v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end)
      goto LABEL_244;
  }
  v38 = this->__ranges_.__begin_;
  v39 = this->__ranges_.__end_;
  if (v38 == v39)
    goto LABEL_128;
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    v41 = (char *)v39 - (char *)v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = this->__ranges_.__begin_;
  v40 = HIBYTE(v136[2]);
  v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = negate;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = v136;
  else
    v44 = (void **)v136[0];
  if ((v40 & 0x80u) == 0)
    v45 = (void *)v40;
  else
    v45 = v136[1];
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if ((unint64_t)v45 >= v51)
      v52 = v51;
    else
      v52 = (size_t)v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= (unint64_t)v45)
        v57 = (size_t)v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          negate = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  negate = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (_BYTE *)&__src + 1, __p);
  v71 = this->__equivalences_.__begin_;
  v72 = HIBYTE(__p[2]);
  v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0)
      operator delete(__p[0]);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = negate;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v78 = (void *)HIBYTE(__p[2]);
  else
    v78 = __p[1];
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p[0]);
        v2 = v130;
        negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = &v71[v74];
    else
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        negate = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  v2 = v130;
  negate = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_1B3CCBB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_1B3CCBF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void *__dst[3];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  memset(a4, 170, 24);
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, &v12[(_QWORD)v13]);
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = a4[1];
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = a4;
    else
      v16 = (_BYTE *)*a4;
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0)
LABEL_26:
    operator delete(__dst[0]);
}

void sub_1B3CCC14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CCC1A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  std::basic_regex<char>::value_type *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  std::regex_traits<char>::__lookup_collatename<char const*>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_1B3CCC6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  void **v14;
  void **v15;
  void *__p[3];
  void *v18[3];

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v9 = (char *)v18[1];
  if (!v18[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(_QWORD)v10], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v11 = *(_QWORD *)(a4 + 144);
      if (v11 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)v11 = v12;
        }
        *(_QWORD *)(a4 + 144) = v11 + 24;
        *(_QWORD *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0)
    v13 = v18[1];
  if (v13 == (void *)2)
  {
    v15 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v15 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v14 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v14 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0)
      goto LABEL_38;
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0)
LABEL_38:
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_1B3CCC980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<char const*>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_1B3CCD574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3CCD588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CCD9C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_1B3CCDC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE **a4@<X8>)
{
  unint64_t v5;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  void *__p[3];

  v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  memset(a4, 170, 24);
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v19[(_QWORD)v20]);
  v21 = (_BYTE *)*((unsigned __int8 *)a4 + 23);
  v22 = (char)v21;
  if ((char)v21 < 0)
    v21 = a4[1];
  if (v21 == (_BYTE *)1)
    goto LABEL_32;
  if (v21 != (_BYTE *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
}

void sub_1B3CCDE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CCDEB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void *__dst[3];

  v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v4);
    v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, &v12[(_QWORD)v13]);
  if (SHIBYTE(__dst[2]) >= 0)
    v14 = (const char *)__dst;
  else
    v14 = (const char *)__dst[0];
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  return classname;
}

void sub_1B3CCE004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void **v18;
  void *__p[3];

  v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v7 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    v8 = v7;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = v7 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v17 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v17[(_QWORD)v18]);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1B3CCE618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CCE66C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  void *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = operator new(0x10uLL);
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E66D3650;
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = v14;
  *((_QWORD *)v17 + 3) = __min;
  *((_QWORD *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1E66D36E0;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((_QWORD *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_1B3CCEA80(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);

  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CCEA94(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CCEB04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CCEB50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E66D36B0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E66D36B0;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E66D36B0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E66D36B0;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E66D36B0;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E66D36B0;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E2F510](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B3CCF120(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v15;
  std::__owns_one_state<char> *v16;
  int v17;
  std::basic_regex<char> *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_1E66D35C0;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new(0x18uLL);
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *v19 = &unk_1E66D3608;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  std::basic_regex<char> *v6;
  int locale_low;
  std::basic_regex<char> *v9;
  int v10;
  int v11;
  std::basic_regex<char> *v12;
  int v13;
  std::basic_regex<char> *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = this;
  if (this == a3)
    return v6;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3)
    goto LABEL_43;
  v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
    goto LABEL_43;
  v11 = v10 - 48;
  v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    v12 = a3;
  }
  else
  {
    while (1)
    {
      v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
        break;
      if (v11 >= 214748364)
        goto LABEL_43;
      v11 = v13 + 10 * v11 - 48;
      v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3)
        goto LABEL_16;
    }
  }
  if (v12 == v9)
    goto LABEL_43;
  if (v12 == a3)
    goto LABEL_41;
  v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3)
    goto LABEL_41;
  v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3)
      goto LABEL_41;
    v17 = v16 - 48;
    while (1)
    {
      v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
        break;
      if (v17 >= 214748364)
        goto LABEL_43;
      v17 = v16 + 10 * v17 - 48;
      v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3)
        goto LABEL_41;
    }
  }
  else
  {
    v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
        return a2 + 2;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v5 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E66D37B8;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  int locale_low;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2
    && (v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_1E66D37B8;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_1E66D35C0;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_1E66D3608;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_25;
    case '^':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *v10 = v13 + 16;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = this;
  if (this == a3)
    return (std::basic_regex<char>::value_type *)v3;
  v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _BYTE v97[96];
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v85 = (void **)*((_QWORD *)&v98 + 1);
    v86 = (void **)v99;
    *((_QWORD *)&v100 + 1) = 0;
    v87 = v99 - *((_QWORD *)&v98 + 1);
    if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v99;
      v85 = (void **)(*((_QWORD *)&v98 + 1) + 8);
      *((_QWORD *)&v98 + 1) = v85;
      v87 = v99 - (_QWORD)v85;
    }
    while ((_QWORD)v99 - (_QWORD)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
  v11 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  memset(&v97[56], 0, 24);
  v13 = *(_QWORD *)&v97[80];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)&v97[85];
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v100 + 1);
  v14 = v100;
  v16 = ++*((_QWORD *)&v100 + 1);
  v17 = *((_QWORD *)&v98 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v100 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v100 + 1);
    v14 = v100;
    v17 = *((_QWORD *)&v98 + 1);
  }
  v93 = 0;
  v94 = 0;
  v28 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v100 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v65 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v66 = v93;
        if ((v94 & (v93 >= v65)) == 0)
          v66 = v65;
        if (v66 == v32)
        {
          v67 = (void **)*((_QWORD *)&v98 + 1);
          v68 = v99;
          if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          {
            *((_QWORD *)&v100 + 1) = 0;
            v82 = 0;
          }
          else
          {
            v69 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((unint64_t)v100 / 0x2A));
            v70 = (_QWORD *)(*v69 + 96 * ((unint64_t)v100 % 0x2A));
            v71 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) % 0x2AuLL);
            if (v70 != (_QWORD *)v71)
            {
              do
              {
                v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((_QWORD *)((char *)v70 - *v69) == (_QWORD *)4032)
                {
                  v74 = (_QWORD *)v69[1];
                  ++v69;
                  v70 = v74;
                }
              }
              while (v70 != (_QWORD *)v71);
              v67 = (void **)*((_QWORD *)&v98 + 1);
              v68 = v99;
            }
            *((_QWORD *)&v100 + 1) = 0;
            v82 = v68 - (_QWORD)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                v67 = (void **)(*((_QWORD *)&v98 + 1) + 8);
                *((_QWORD *)&v98 + 1) = v67;
                v82 = v99 - (_QWORD)v67;
              }
              while ((_QWORD)v99 - (_QWORD)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              v94 = 1;
              v93 = a3 - a2;
              goto LABEL_8;
            }
            v83 = 42;
          }
          *(_QWORD *)&v100 = v83;
          goto LABEL_76;
        }
        v93 = v66;
        v75 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v75 / 0x2A));
        v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(_QWORD *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(_QWORD *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        v80 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v81 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v80 = 0;
        if ((unint64_t)(v80 - (*((_QWORD *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        v94 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
          continue;
        if ((v94 & 1) != 0)
        {
          v84 = *v92;
          *(_QWORD *)v84 = a2;
          *(_QWORD *)(v84 + 8) = a2 + v93;
          v6 = 1;
          *(_BYTE *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v85 = (void **)*((_QWORD *)&v98 + 1);
        v86 = (void **)v99;
        *((_QWORD *)&v100 + 1) = 0;
        v87 = v99 - *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v88 = v87 >> 3;
        if (v88 == 1)
        {
          v89 = 21;
LABEL_85:
          *(_QWORD *)&v100 = v89;
        }
        else if (v88 == 2)
        {
          v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((_QWORD)v99 != *((_QWORD *)&v98 + 1))
            *(_QWORD *)&v99 = v99 + ((*((_QWORD *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v98)
          operator delete((void *)v98);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v100;
        if (!(_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v98);
          v49 = v100;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = v100 - 1;
        ++*((_QWORD *)&v100 + 1);
        v56 = v55 + v100;
        v57 = (v55 + (uint64_t)v100) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v48 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v97[64] = v58;
        *(_OWORD *)&v97[80] = v58;
        *(_OWORD *)&v97[32] = v58;
        *(_OWORD *)&v97[48] = v58;
        *(_OWORD *)v97 = v58;
        *(_OWORD *)&v97[16] = v58;
        std::__state<char>::__state((uint64_t)v97, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v97[80] + 24))(*(_QWORD *)&v97[80], 0, v97);
        v59 = *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v61 = *((_QWORD *)&v100 + 1) + v100;
        if (v60 == *((_QWORD *)&v100 + 1) + (_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
          v59 = *((_QWORD *)&v98 + 1);
          v61 = *((_QWORD *)&v100 + 1) + v100;
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v97[16];
        *(_OWORD *)v62 = *(_OWORD *)v97;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v97[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v97[48];
        memset(&v97[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v97[56];
        *(_QWORD *)(v62 + 72) = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        v64 = *(_QWORD *)&v97[80];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)&v97[85];
        *(_QWORD *)(v62 + 80) = v64;
        ++*((_QWORD *)&v100 + 1);
        if (*(_QWORD *)&v97[56])
        {
          *(_QWORD *)&v97[64] = *(_QWORD *)&v97[56];
          operator delete(*(void **)&v97[56]);
        }
        if (*(_QWORD *)&v97[32])
        {
          *(_QWORD *)&v97[40] = *(_QWORD *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_1B3CD094C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1B3CD0960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_1B3CD09A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1B3CD09BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  const char *v59;
  char v60;
  _BYTE v62[96];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v64[40];
  void *v65[2];
  _BYTE v66[40];
  char *v67;
  char *v68;
  unint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(_QWORD *)v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 36);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.second = a3;
  *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v62 = 0;
  memset(&v62[8], 0, 85);
  v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(_QWORD *)&v62[56])
  {
    *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(_QWORD *)&v62[32])
  {
    *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  v12 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v68;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v68;
  }
  v60 = 0;
  v19 = 0;
  v20 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v59 = 0;
  *(v12 - 4) = a6;
  v58 = a3;
  do
  {
    v21 = (++v19 & 0xFFF) != 0 || (int)(v19 >> 12) < (int)v20;
    if (!v21)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v23 = v12 - 16;
    v22 = *((_QWORD *)v12 - 2);
    v24 = v12 - 96;
    if (v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v12 - 96);
    switch(*(_DWORD *)v24)
    {
      case 0xFFFFFC18:
        v25 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v25 == a2 || (a5 & 0x1000) != 0 && v25 != v58)
          goto LABEL_29;
        v33 = &v25[-*((_QWORD *)v12 - 11)];
        v34 = v59;
        if ((v60 & ((uint64_t)v59 >= (uint64_t)v33)) == 0)
        {
          v35 = *((_OWORD *)v12 - 5);
          *(_OWORD *)v64 = *(_OWORD *)v24;
          *(_OWORD *)&v64[16] = v35;
          if (v64 != v24)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(_QWORD *)v23;
          *(_QWORD *)&v66[29] = *(_QWORD *)(v12 - 11);
          *(_QWORD *)&v66[24] = v36;
          v34 = v33;
        }
        v37 = v68;
        if (v34 == v20)
        {
          v38 = v67;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v68 = v38;
          v60 = 1;
          v59 = v20;
        }
        else
        {
          v59 = v34;
          v41 = (void *)*((_QWORD *)v68 - 5);
          if (v41)
          {
            *((_QWORD *)v68 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v68 = v37 - 96;
          v60 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v26 = v68;
        v27 = (void *)*((_QWORD *)v68 - 5);
        if (v27)
        {
          *((_QWORD *)v68 - 4) = v27;
          operator delete(v27);
        }
        v28 = (void *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          *((_QWORD *)v26 - 7) = v28;
          operator delete(v28);
        }
        v68 = v26 - 96;
        break;
      case 0xFFFFFC20:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v29;
        *(_OWORD *)&v62[80] = v29;
        *(_OWORD *)&v62[32] = v29;
        *(_OWORD *)&v62[48] = v29;
        *(_OWORD *)v62 = v29;
        *(_OWORD *)&v62[16] = v29;
        std::__state<char>::__state((uint64_t)v62, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v62[80] + 24))(*(_QWORD *)&v62[80], 0, v62);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(_QWORD *)&v62[56])
          {
            *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v68 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v62[48];
          memset(&v62[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v62[56];
          *((_QWORD *)v30 + 9) = *(_QWORD *)&v62[72];
          memset(&v62[56], 0, 24);
          v32 = *(_QWORD *)&v62[80];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)&v62[85];
          *((_QWORD *)v30 + 10) = v32;
          v68 = v30 + 96;
        }
        if (*(_QWORD *)&v62[32])
        {
          *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v68;
  }
  while (v67 != v68);
  if ((v60 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = *(void **)v66;
    if (!*(_QWORD *)v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v59[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(_QWORD *)&v64[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v64[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v21 = v44 > v46++;
    }
    while (v21);
  }
  v49 = 1;
  v50 = *(void **)v66;
  if (*(_QWORD *)v66)
  {
LABEL_64:
    *(_QWORD *)&v66[8] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  v51 = v67;
  if (v67)
  {
    v52 = v68;
    v53 = v67;
    if (v68 != v67)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v67;
    }
    v68 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_1B3CD0F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_1B3CD16EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  void *v47;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v47 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      v43 = *(_QWORD *)(a1 + 16);
      v47 = *(void **)(v43 - 8);
      *(_QWORD *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12)
              v26 = 1;
            else
              v26 = (v16 - v12) >> 2;
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v26);
            v28 = v27;
            v29 = v26 >> 2;
            v18 = &v27[8 * (v26 >> 2)];
            v31 = v16 - v17;
            v30 = v16 == v17;
            v16 = v18;
            if (!v30)
            {
              v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              v32 = v31 - 8;
              if (v32 < 0x38 || (v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                v34 = &v27[8 * (v26 >> 2)];
                v35 = v17;
                goto LABEL_35;
              }
              v37 = (v32 >> 3) + 1;
              v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              v34 = &v18[v38];
              v35 = &v17[v38];
              v39 = (__int128 *)(v17 + 16);
              v40 = &v27[v33 + 16];
              v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  v36 = *(_QWORD *)v35;
                  v35 += 8;
                  *(_QWORD *)v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            v15 = &v27[8 * v26];
            if (v12)
              operator delete(v12);
            v12 = v28;
            goto LABEL_18;
          }
          v20 = (v17 - v12) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = v21 >> 1;
          v23 = &v17[-8 * (v21 >> 1)];
          v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            v24 = v17;
          }
          v25 = -v22;
          v15 = v16;
          v16 = &v23[v16 - v17];
          v18 = &v24[8 * v25];
        }
        else
        {
          v18 = v17;
        }
LABEL_18:
        v19 = *v3++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16))
          goto LABEL_48;
      }
    }
  }
  else
  {
    v44 = (char *)operator new(8uLL);
    v15 = v44 + 8;
    operator delete(v12);
    v3 = *(uint64_t **)(a1 + 8);
    v45 = *(uint64_t **)(a1 + 16);
    v12 = v44;
    *(_QWORD *)v44 = v14;
    v16 = v44 + 8;
    if (v3 != v45)
      goto LABEL_16;
  }
  v18 = v12;
LABEL_48:
  v46 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v46)
LABEL_50:
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v46)
      goto LABEL_50;
  }
}

void sub_1B3CD1DA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  const std::locale *v6;
  uint64_t v7;
  char *v8;

  v6 = (const std::locale *)MEMORY[0x1B5E2F6A8]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1B3CD24E0(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CD24FC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;

  v6 = operator new(8uLL);
  *v6 = &unk_1E66D3110;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_1E66D3168;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
    {
LABEL_6:
      if (!v12)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      if (v12 != 16)
      {
        if (v12 != 32)
LABEL_19:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
      goto LABEL_6;
  }
  if (v12 == 64)
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  if (v12 == 128)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v12 != 256)
    goto LABEL_19;
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
}

void sub_1B3CD26C4(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CD2700(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != (std::basic_regex<char> *)a2)
  {
    if (v8 != (std::basic_regex<char> *)a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (std::__node<char> *)operator new(0x10uLL);
  v13 = a1->__end_;
  first = v13->__first_;
  v12[1].__vftable = (std::__node<char>_vtbl *)first;
  v13->__first_ = v12;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != (std::basic_regex<char> *)a3)
  {
LABEL_14:
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v23, a3);
      if (v8 == (std::basic_regex<char> *)v23)
      {
        v24 = a1->__end_;
        v25 = a1->__marked_count_;
        v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (std::__node<char> *)operator new(0x10uLL);
            v28 = a1->__end_;
            v29 = v28->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v29;
            v28->__first_ = v27;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v15 = (std::__node<char> *)operator new(0x18uLL);
          v16 = v21->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v15[2].__vftable = (std::__node<char>_vtbl *)v16;
          v15->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3728;
          end->__first_ = v15;
          v21->__first_ = 0;
          v17 = (std::__node<char> *)operator new(0x10uLL);
          v18 = a1->__end_->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)v18;
          v21->__first_ = v17;
          a1->__end_->__first_ = 0;
          v19 = (std::__node<char> *)operator new(0x10uLL);
          v20 = v21->__first_;
          v19->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3770;
          v19[1].__vftable = (std::__node<char>_vtbl *)v20;
          a1->__end_->__first_ = v19;
          a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
          if (v8 == (std::basic_regex<char> *)a3)
            return a3;
          goto LABEL_14;
        }
        v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      }
      if (v23 == (char *)v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_1E66D3260;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (_BYTE *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_1E66D32A8;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = operator new(0x18uLL);
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_1E66D3728;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = operator new(0x10uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = operator new(0x10uLL);
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_1E66D3770;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E66D3728;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E66D3770;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = v22 + 1;
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E66D3728;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E66D3770;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v11 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  __int128 v8;
  char *v9;
  unsigned int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v17 = a2[1];
        if (v17 == 66)
        {
          v18 = (char *)operator new(0x30uLL);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_1E66D32F0;
          *((_QWORD *)v18 + 1) = v20;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 1;
        }
        else
        {
          if (v17 != 98)
            return v3;
          v18 = (char *)operator new(0x30uLL);
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_1E66D32F0;
          *((_QWORD *)v18 + 1) = v19;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
LABEL_17:
    *v11 = v15 + 16;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v23.__loop_count_ = v21;
    *(_OWORD *)&v23.__start_.__cntrl_ = v21;
    *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v21;
    *(_OWORD *)&v23.__traits_.__col_ = v21;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
    v23.__flags_ = *(_DWORD *)(a1 + 24);
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
    marked_count = v23.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v23.__loop_count_ = v8;
  *(_OWORD *)&v23.__start_.__cntrl_ = v8;
  *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v23.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
  v23.__flags_ = *(_DWORD *)(a1 + 24);
  v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
  v10 = v23.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v23.__traits_.__loc_);
  return v9 + 1;
}

void sub_1B3CD32C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CD32D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CD32E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CD32FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char> *v6;
  std::basic_regex<char> *result;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
        goto LABEL_26;
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_count = this->__marked_count_;
      }
      else
      {
        v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_1E66D35C0;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3)
        goto LABEL_26;
      v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41)
        goto LABEL_26;
      if ((this->__flags_ & 2) == 0)
      {
        v17 = (std::__node<char> *)operator new(0x18uLL);
        v18 = this->__end_;
        v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3608;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      v8 = (std::__node<char> *)operator new(0x10uLL);
      v9 = this->__end_;
      v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_1E66D3380;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  char *v10;
  size_t v11;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  std::basic_regex<char> *v19;
  unsigned __int8 *v20;
  BOOL v21;
  std::basic_regex<char> *v22;
  BOOL v23;
  char *v24;
  size_t v25;
  std::basic_regex<char> *v26;
  int v27;
  int v28;
  std::basic_regex<char> *v29;
  int v30;
  std::basic_regex<char> *v31;
  _BYTE *v32;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v21 = 1;
      else
        v21 = v9 == a3;
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 0;
      goto LABEL_45;
    }
    v8 = this;
    if (locale_low == 43)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v23 = 1;
    else
      v23 = v22 == a3;
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    v8 = this;
    if (locale_low != 123)
      return v8;
    v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_72;
    v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      goto LABEL_72;
    v15 = v14 - 48;
    v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
          break;
        if (v15 >= 214748364)
          goto LABEL_72;
        v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3)
          goto LABEL_21;
      }
    }
    if (v16 == v13)
      goto LABEL_72;
    if (v16 == (char *)a3)
      goto LABEL_73;
    v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3)
      goto LABEL_72;
    v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v11 = v15;
        v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_36;
      }
      v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
      goto LABEL_73;
    v28 = v27 - 48;
    v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38)
          break;
        if (v28 >= 214748364)
          goto LABEL_72;
        v28 = v30 + 10 * v28 - 48;
        v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3)
          goto LABEL_61;
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125)
LABEL_73:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15)
      goto LABEL_72;
    v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return a2;
  v4 = a2;
  if (*a2 == 92)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v8 = *v6;
    v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        v4 = a3;
      }
      else
      {
        while (1)
        {
          v11 = *v4;
          if ((v11 - 48) > 9)
            break;
          if (v9 >= 0x19999999)
            goto LABEL_24;
          ++v4;
          v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            v4 = a3;
            break;
          }
        }
        if (!v9)
LABEL_24:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_)
        goto LABEL_24;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6)
        return v4;
    }
    v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12)
        return a2;
      else
        return v12;
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1B3CD3C14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1B3CD3E68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CD3E7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CD3E90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CD3EA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CD3EB8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CD3ECC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned int v8;
  std::basic_regex<char>::value_type v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  std::basic_regex<char>::value_type v17;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65)
        goto LABEL_85;
      v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_85;
      v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v10;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6)
              goto LABEL_42;
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3)
        goto LABEL_85;
      v13 = v4[1];
      v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
        goto LABEL_47;
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u)
        goto LABEL_85;
      v14 = -87;
LABEL_47:
      if (v4 + 2 == a3)
        goto LABEL_85;
      v15 = v4[2];
      v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u)
LABEL_85:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v16 = -87;
      }
      v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v17;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_85;
      if (!a4)
        goto LABEL_68;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int64_t v5;
  int v6;
  char *v7;
  char *v8;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  std::basic_regex<char>::value_type *v29;
  char *v30;
  _BYTE *v31;
  int v32;
  void **v33;
  _BYTE *v34;
  char *v35;
  void *v37[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  int64_t v44;

  v4 = a2;
  v5 = a2 - a3;
  if (a2 == a3)
    return a2;
  v6 = *a2;
  v7 = a2;
  if (v6 == 93)
    return v7;
  v8 = (char *)a4;
  v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2)
        goto LABEL_91;
      v15 = 0;
      v16 = v5 + 4;
      v17 = (unsigned __int8 *)v4;
      v18 = v16;
      if (v4[2] == 58)
        goto LABEL_15;
      do
      {
        do
        {
          if (!v18)
            goto LABEL_91;
          v17 = (unsigned __int8 *)&v4[++v15];
          v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      v19 = &v4[v15 + 2];
      if (v19 == a3)
LABEL_91:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      v8 = &v4[v15 + 4];
      v7 = v4;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      v13 = 0;
      v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_70;
    }
    v11 = 0;
    goto LABEL_36;
  }
  v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_92;
  v22 = (unsigned __int8 *)(v4 + 2);
  v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46)
    goto LABEL_24;
  do
  {
    do
    {
      if (a3 - 4 == v4)
        goto LABEL_92;
      ++v4;
      v22 = v23;
      v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3)
LABEL_92:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  v42 = v44;
  *(_OWORD *)__p = v43;
  v25 = (char *)HIBYTE(v44);
  v11 = SHIBYTE(v44);
  v26 = *((_QWORD *)&v43 + 1);
  if (v44 < 0)
    v25 = (char *)__p[1];
  if ((unint64_t)(v25 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = (char *)(v22 + 2);
  v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0)
    v26 = HIBYTE(v44);
  if (v26)
  {
    if (v4 == a3)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      v31 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3)
        goto LABEL_52;
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3)
        goto LABEL_52;
    }
    goto LABEL_51;
  }
  v28 = *v4;
  if (v28 != 92)
    goto LABEL_44;
  v29 = v4 + 1;
  if (v27)
    v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  else
    v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1])
        goto LABEL_69;
      if (__p[1] != (void *)1)
      {
        v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        v13 = 1;
        v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0)
          goto LABEL_71;
        goto LABEL_70;
      }
      v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42))
        goto LABEL_69;
      v33 = __p;
      if (HIBYTE(v42) != 1)
        goto LABEL_68;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  v32 = *v4;
  if (v32 == 93)
    goto LABEL_52;
  v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93)
    goto LABEL_52;
  v43 = 0uLL;
  v44 = 0;
  v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if ((_DWORD)v34 == 92)
      {
        if (v27)
          v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        else
          v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  v7 = v35;
LABEL_82:
  *(_OWORD *)v39 = *(_OWORD *)__p;
  v40 = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  *(_OWORD *)v37 = v43;
  v38 = v44;
  v43 = 0uLL;
  v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_85;
LABEL_89:
      operator delete((void *)v43);
      v13 = 1;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0)
    goto LABEL_89;
LABEL_85:
  v13 = 1;
  if (SHIBYTE(v42) < 0)
LABEL_70:
    operator delete(__p[0]);
LABEL_71:
  if ((v13 & 1) != 0)
    return v7;
  return v8;
}

void sub_1B3CD48D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  void **v16;
  void **v17;
  void *__p[3];
  void *v20[3];

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_39;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  v9 = a2 + 1;
  if (*a2 != 61)
    goto LABEL_5;
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      v8 = v9;
      v10 = *v9++;
      if (v10 == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3)
    goto LABEL_39;
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = (char *)v20[1];
  if (!v20[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(_QWORD)v12], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v13 = *(_QWORD *)(a4 + 144);
      if (v13 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a4 + 144) = v13 + 24;
        *(_QWORD *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0)
    v15 = v20[1];
  if (v15 == (void *)2)
  {
    v17 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v17 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v16 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v16 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0)
      goto LABEL_38;
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
    return v7 + 2;
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_1B3CD4BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  v8 = a2 + 1;
  if (*a2 != 46)
    goto LABEL_5;
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      v7 = v8;
      v9 = *v8++;
      if (v9 == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  char *v9;
  char *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  std::string v27;
  char __s[24];

  v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    v9 = __s;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v16 = v5 | 7;
  v17 = v16 + 1;
  v9 = (char *)operator new(v16 + 1);
  *(_QWORD *)&__s[8] = v5;
  *(_QWORD *)&__s[16] = v17 | 0x8000000000000000;
  *(_QWORD *)__s = v9;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
    do
    {
LABEL_15:
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a2 + 16);
  v13 = v9 + 16;
  v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  *v10 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    if (!*(_QWORD *)&__s[8])
      goto LABEL_29;
  }
  else
  {
    if (!__s[23])
      return;
    v19 = __s;
  }
  std::__get_collation_name(&v27, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  v20 = v27.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0)
      return;
    v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    v22 = *(_QWORD *)&__s[8];
    if (*(_QWORD *)&__s[8] >= 3uLL)
      goto LABEL_29;
    goto LABEL_31;
  }
  v22 = __s[23];
  if (__s[23] < 3u)
  {
    v19 = __s;
LABEL_31:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v27, *(_QWORD *)(a1 + 16), v19, &v19[v22]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v27;
    if (*(char *)(a4 + 23) < 0)
    {
      v24 = *(_QWORD *)(a4 + 8);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0)
            v25 = __s;
          else
            v25 = *(char **)__s;
          if (__s[23] >= 0)
            v26 = __s[23];
          else
            v26 = *(_QWORD *)&__s[8];
          std::string::__assign_no_alias<false>((void **)a4, v25, v26);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(a4 + 23);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__s[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_1B3CD55AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  void **v21;
  uint64_t classname;
  void *__p[3];

  v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 > 0x16)
  {
    v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v16 = v4 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v20, &v19[(_QWORD)v20]);
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1B3CD5774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  int v16;
  std::basic_regex<char> *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(_BYTE *)a2 != 92)
    return v6;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_1E66D35C0;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_23;
      v14 = v9;
      v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 28);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v18 = operator new(0x18uLL);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8);
      *v18 = &unk_1E66D3608;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v6;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int locale_low;
  unsigned __int8 *v9;
  std::basic_regex<char> *v10;
  int v11;
  int v12;
  std::basic_regex<char> *v13;
  int v14;
  std::basic_regex<char> *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (this == a3)
    return this;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3)
    goto LABEL_45;
  v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38)
    goto LABEL_45;
  v12 = v11 - 48;
  v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    v13 = a3;
  }
  else
  {
    while (1)
    {
      v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        break;
      if (v12 >= 214748364)
        goto LABEL_45;
      v12 = v14 + 10 * v12 - 48;
      v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3)
        goto LABEL_15;
    }
  }
  if (v13 == v10)
    goto LABEL_45;
  if (v13 == a3)
LABEL_46:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3)
    goto LABEL_46;
  v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    v18 = v17 - 48;
    v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
        break;
      if (v18 >= 214748364)
        goto LABEL_45;
      v18 = v17 + 10 * v18 - 48;
      v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3)
        goto LABEL_37;
    }
  }
  else
  {
    v18 = -1;
  }
  if (v15 == a3)
  {
    v20 = (unsigned __int8 *)v15;
    v15 = a3;
    v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    v9 = (unsigned __int8 *)v15;
  }
  else
  {
    v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9)
    goto LABEL_46;
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E66D37B8;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int locale_low;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        v9 = operator new(0x10uLL);
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 8);
        *v9 = &unk_1E66D37B8;
        v9[1] = v11;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_1E66D35C0;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_1E66D3608;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_23;
    case '^':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 8);
      *v13 = v16 + 16;
      v13[1] = v17;
      *((_BYTE *)v13 + 16) = v14;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::basic_regex<char>::value_type *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = -86;
  MEMORY[0x1B5E2F5A0](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1B3CD6278(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B3CD6244);
  }
  __cxa_rethrow();
}

void sub_1B3CD62BC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void util::strip_non_printable(std::string *this)
{
  std::string *v1;
  std::string::size_type size;
  std::string *v3;
  std::string *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;

  v1 = this;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = this;
  else
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = (std::string *)((char *)v3 + size);
    v5 = size - 1;
    v6 = MEMORY[0x1E0C80978];
    while (1)
    {
      v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0)
        break;
      v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0)
        goto LABEL_15;
LABEL_8:
      v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4)
        goto LABEL_28;
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL))
      goto LABEL_8;
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      v9 = 1;
      v4 = v3;
      while (1)
      {
        v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL))
            goto LABEL_19;
        }
        else
        {
          v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0)
            goto LABEL_19;
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5)
          goto LABEL_28;
      }
    }
  }
  v4 = v3;
LABEL_28:
  v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  v13 = (char)v12;
  v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v15 = (char *)v1 + v12;
    v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0)
    v12 = v1->__r_.__value_.__l.__size_;
  v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      v1 = v14;
    }
    else
    {
      *((_BYTE *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v1 = *(char *)(result + 23);
  if (v1 >= 0)
    v2 = (_BYTE *)result;
  else
    v2 = *(_BYTE **)result;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(result + 23);
  else
    v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = MEMORY[0x1E0C80978];
    do
    {
      v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        result = __maskrune((char)*v2, 0x40000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
        result = __maskrune(v5, 0x4000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
      }
      else
      {
        v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0)
          goto LABEL_10;
        result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0)
          goto LABEL_10;
      }
      *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  std::string::size_type v10;
  char *v11;
  uint64_t size;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  int v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  int v22;
  std::string *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::string::size_type v33;
  int v34;
  std::string *v35;
  int v36;
  char *v37;
  int64_t v38;
  int64_t v39;
  char *v40;
  int v41;
  std::string *v42;
  int64_t v43;
  char *v44;
  char *v45;

  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5 = a1[23];
  v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    v8 = a3;
  else
    v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  if (size >= v9)
  {
    v27 = (char *)v8 + size;
    v28 = *v11;
    v29 = v8;
    do
    {
      v30 = size - v9;
      if (v30 == -1)
        break;
      v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31)
        break;
      v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0)
                  v33 = v10;
                if (v33 < v13)
                  break;
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0)
                  v35 = a3;
                else
                  v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v36 = a1[23];
                if (v36 >= 0)
                  v37 = a1;
                else
                  v37 = *(char **)a1;
                if (v36 >= 0)
                  v38 = a1[23];
                else
                  v38 = *((_QWORD *)a1 + 1);
                if (v38)
                {
                  if (v34 >= 0)
                    v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v39 = a3->__r_.__value_.__l.__size_;
                  if (v39 < v38)
                    return;
                  v40 = (char *)v35 + v39;
                  v41 = *v37;
                  v42 = v35;
                  while (1)
                  {
                    v43 = v39 - v38;
                    if (v43 == -1)
                      return;
                    v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44)
                      return;
                    v45 = v44;
                    if (!memcmp(v44, v37, v38))
                      break;
                    v42 = (std::string *)(v45 + 1);
                    v39 = v40 - (v45 + 1);
                    if (v39 < v38)
                      return;
                  }
                  if (v45 == v40)
                    return;
                  v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13)
                  break;
                std::string::__erase_external_with_move(a3, v13, v9);
                v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0)
                  v16 = a3;
                else
                  v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v17 = a1[23];
                if (v17 >= 0)
                  v18 = a1;
                else
                  v18 = *(char **)a1;
                if (v17 >= 0)
                  v19 = a1[23];
                else
                  v19 = *((_QWORD *)a1 + 1);
                if (v19)
                {
                  if (v15 >= 0)
                    v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v20 = a3->__r_.__value_.__l.__size_;
                  if (v20 < v19)
                    return;
                  v21 = (char *)v16 + v20;
                  v22 = *v18;
                  v23 = v16;
                  while (1)
                  {
                    v24 = v20 - v19;
                    if (v24 == -1)
                      return;
                    v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25)
                      return;
                    v26 = v25;
                    if (!memcmp(v25, v18, v19))
                      break;
                    v23 = (std::string *)(v26 + 1);
                    v20 = v21 - (v26 + 1);
                    if (v20 < v19)
                      return;
                  }
                  if (v26 == v21)
                    return;
                  v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      v29 = (std::string *)(v32 + 1);
      size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_1B3CD6820(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *util::strip_leading_trailing@<X0>(_QWORD *result@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v6 = result[1];
  if ((v4 & 0x80u) == 0)
    v7 = result;
  else
    v7 = (_QWORD *)*result;
  if ((v4 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)result + 23);
  else
    v8 = result[1];
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  if (!v8)
    goto LABEL_26;
  v12 = result;
  v13 = 0;
  if (!v11)
  {
    v14 = v8 - 1;
    if ((v4 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  while (1)
  {
    result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result)
      break;
    if (v8 == ++v13)
      goto LABEL_26;
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      v14 = -1;
      if ((v4 & 0x80) == 0)
        goto LABEL_28;
LABEL_24:
      if (v6 >= v13)
      {
        v4 = v6;
        v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  v14 = v8;
  if ((v4 & 0x80) != 0)
    goto LABEL_24;
LABEL_28:
  if (v13 > v4)
    goto LABEL_41;
LABEL_29:
  v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15)
    v16 = v15;
  else
    v16 = v4 - v13;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v17 = v16 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((_BYTE *)a3 + 23) = v16;
  if (v16)
LABEL_39:
    result = memmove(a3, (char *)v12 + v13, v16);
  *((_BYTE *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (char)v1;
  v3 = (_BYTE *)(result + v1);
  if (v2 >= 0)
    v4 = v3;
  else
    v4 = (_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if (v2 >= 0)
    v5 = (_BYTE *)result;
  else
    v5 = *(_BYTE **)result;
  for (; v5 != v4; ++v5)
  {
    result = __toupper((char)*v5);
    *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size;
  char *v3;
  char *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  std::string *v14;
  std::string::size_type v15;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = (char *)a1;
  else
    v3 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_21;
  v4 = &v3[size];
  v5 = size - 1;
  v6 = MEMORY[0x1E0C80978];
  while (1)
  {
    v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL))
        break;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0)
      break;
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4)
      goto LABEL_22;
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    v8 = 1;
    v4 = v3;
    while (1)
    {
      v9 = v3[v8];
      if ((v9 & 0x80000000) == 0)
        break;
      if (__maskrune(v9, 0x100uLL))
        goto LABEL_16;
LABEL_17:
      ++v8;
      if (!--v5)
        goto LABEL_22;
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0)
      goto LABEL_17;
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  v4 = v3;
LABEL_22:
  v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = a1->__r_.__value_.__r.__words[0];
  v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = (char *)a1 + v10;
    v14 = a1;
  }
  if ((v10 & 0x80u) != 0)
    v10 = a1->__r_.__value_.__l.__size_;
  v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(_BYTE *)(v12 + v15) = 0;
    }
    else
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  const __CFAllocator *v4;
  __CFError *v5;
  __CFError *v6;
  uint64_t (*v7)(uint64_t);
  __CFError *v8;
  __CFReadStream *v9;
  uint64_t (*v10)(uint64_t);
  CFPropertyListRef v11;
  unsigned __int8 v12;
  NSObject *v13;
  CFIndex Code;
  void **v15;
  void *__p[2];
  uint64_t v17;
  CFErrorRef error[4];
  uint8_t buf[24];
  void **v20;
  uint64_t v21;

  v2 = (const char *)a1;
  v21 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(char *)(a1 + 23) < 0)
    v2 = *(const char **)a1;
  v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 0x8000100u);
  error[3] = v5;
  v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  if (!v6)
    v7 = 0;
  if (!v7)
    goto LABEL_18;
  v8 = CFReadStreamCreateWithFile(v4, v6);
  v9 = v8;
  error[1] = v8;
  v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
  if (!v8)
    v10 = 0;
  if (!v10
    || (CFReadStreamOpen(v8),
        error[0] = 0,
        v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error),
        *a2 = v11,
        CFReadStreamClose(v9),
        !error[0]))
  {
LABEL_16:
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  CFErrorGetDomain(error[0]);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  v17 = *(_QWORD *)&buf[16];
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1EDBEAA20 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v13 = qword_1EDBEAA20;
    if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
LABEL_26:
    Code = CFErrorGetCode(error[0]);
    v15 = __p;
    if (v17 < 0)
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = Code;
    *(_WORD *)&buf[22] = 2080;
    v20 = v15;
    _os_log_error_impl(&dword_1B3CB3000, v13, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    goto LABEL_13;
  }
  v13 = qword_1EDBEAA20;
  if (os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
    goto LABEL_26;
LABEL_13:
  CFRelease(error[0]);
  *a2 = 0;
  if (v11)
    CFRelease(v11);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
    goto LABEL_16;
  operator delete(__p[0]);
  if (v9)
LABEL_17:
    CFRelease(v9);
LABEL_18:
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_1B3CD6EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void util::moveDirContent(const void **a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int filtered_files;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  int is_directory;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *v32;
  unsigned __int8 v33;
  NSObject *v34;
  int v35;
  size_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *p_p;
  unsigned __int8 v62;
  NSObject *v63;
  void **v64;
  void **v65;
  char *v66;
  __int128 v67;
  int v68;
  size_t v69;
  unint64_t v70;
  std::string *p_buf;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  int v79;
  size_t v80;
  unint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  char v90;
  unsigned __int8 v91;
  NSObject *v92;
  int v93;
  size_t v94;
  unint64_t v95;
  std::string *v96;
  NSObject *v97;
  int v98;
  size_t v99;
  unint64_t v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  std::string *v119;
  std::string::size_type v120;
  int v121;
  char *v124;
  std::locale v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::string v131;
  void *v132[2];
  std::string::size_type v133;
  std::string __dst;
  std::string __p;
  std::locale v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  char *v142;
  void **v143;
  uint64_t v144;
  uint8_t v145[4];
  std::string *v146;
  __int16 v147;
  std::string *v148;
  std::string buf;
  std::string v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  std::locale::locale(&v136, (const std::locale *)a5);
  v137 = *(_OWORD *)(a5 + 8);
  v138 = *(_OWORD *)(a5 + 24);
  v8 = *(std::__shared_weak_count **)(a5 + 48);
  v139 = *(_QWORD *)(a5 + 40);
  v140 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v141 = *(_QWORD *)(a5 + 56);
  filtered_files = ctu::fs::get_filtered_files();
  v12 = v140;
  if (!v140)
    goto LABEL_8;
  v13 = (unint64_t *)&v140->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    std::locale::~locale(&v136);
    if (filtered_files)
    {
LABEL_9:
      v15 = v142;
      v124 = (char *)v143;
      if (v142 != (char *)v143)
      {
        if (a4)
        {
          while (1)
          {
            memset(&v150, 170, sizeof(v150));
            if (v15[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
            }
            else
            {
              v16 = *(_OWORD *)v15;
              v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
              *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v16;
            }
            v17 = *((char *)a1 + 23);
            if (v17 >= 0)
              v18 = *((unsigned __int8 *)a1 + 23);
            else
              v18 = (size_t)a1[1];
            v19 = v18 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v18 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v19 >= 0x17)
            {
              v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v19 | 7) != 0x17)
                v21 = v19 | 7;
              v22 = v21 + 1;
              p_dst = (std::string *)operator new(v21 + 1);
              __dst.__r_.__value_.__l.__size_ = v18 + 1;
              __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
              if (!v18)
                goto LABEL_30;
            }
            if (v17 >= 0)
              v23 = a1;
            else
              v23 = *a1;
            memmove(p_dst, v23, v18);
LABEL_30:
            *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v150;
            else
              v24 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              size = v150.__r_.__value_.__l.__size_;
            v26 = std::string::append(&__dst, (const std::string::value_type *)v24, size);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            is_directory = ctu::fs::is_directory();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_38:
                if (is_directory)
                  goto LABEL_39;
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_38;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (is_directory)
            {
LABEL_39:
              v29 = *((char *)a1 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a1 + 23);
              else
                v30 = (size_t)a1[1];
              v31 = v30 + 1;
              memset(&__dst, 170, sizeof(__dst));
              if (v30 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 >= 0x17)
              {
                v39 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v39 = v31 | 7;
                v40 = v39 + 1;
                v32 = (std::string *)operator new(v39 + 1);
                __dst.__r_.__value_.__l.__size_ = v30 + 1;
                __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                v32 = &__dst;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30 + 1;
                if (!v30)
                  goto LABEL_65;
              }
              if (v29 >= 0)
                v41 = a1;
              else
                v41 = *a1;
              memmove(v32, v41, v30);
LABEL_65:
              *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v30) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v42 = &v150;
              else
                v42 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v43 = v150.__r_.__value_.__l.__size_;
              v44 = std::string::append(&__dst, (const std::string::value_type *)v42, v43);
              v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              v46 = std::string::append(&__p, "/", 1uLL);
              v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
              v133 = v46->__r_.__value_.__r.__words[2];
              *(_OWORD *)v132 = v47;
              v46->__r_.__value_.__l.__size_ = 0;
              v46->__r_.__value_.__r.__words[2] = 0;
              v46->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v131 = *(std::string *)a2;
              std::locale::locale(&v125, (const std::locale *)a5);
              v126 = *(_OWORD *)(a5 + 8);
              v127 = *(_OWORD *)(a5 + 24);
              v48 = *(std::__shared_weak_count **)(a5 + 48);
              v128 = *(_QWORD *)(a5 + 40);
              v129 = v48;
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              v130 = *(_QWORD *)(a5 + 56);
              util::moveDirContent(v132, &v131, a3, (a4 - 1), &v125);
              v51 = v129;
              if (!v129)
                goto LABEL_81;
              v52 = (unint64_t *)&v129->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_82;
              }
              else
              {
LABEL_81:
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SHIBYTE(v133) & 0x80000000) == 0)
                    goto LABEL_83;
LABEL_88:
                  operator delete(v132[0]);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_84;
                  goto LABEL_89;
                }
              }
              operator delete(v131.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v133) & 0x80000000) == 0)
              {
LABEL_83:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
LABEL_48:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1EDBEAA20 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v34 = qword_1EDBEAA20;
              if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
              v34 = qword_1EDBEAA20;
              if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            v35 = *((char *)a1 + 23);
            if (v35 >= 0)
              v36 = *((unsigned __int8 *)a1 + 23);
            else
              v36 = (size_t)a1[1];
            v37 = v36 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v36 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v37 >= 0x17)
            {
              v121 = v35;
              v54 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v54 = v37 | 7;
              v55 = v54 + 1;
              v38 = (std::string *)operator new(v54 + 1);
              __dst.__r_.__value_.__l.__size_ = v36 + 1;
              __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              v35 = v121;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              v38 = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
              if (!v36)
                goto LABEL_100;
            }
            if (v35 >= 0)
              v56 = a1;
            else
              v56 = *a1;
            memmove(v38, v56, v36);
LABEL_100:
            *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v36) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v150;
            else
              v57 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v58 = v150.__r_.__value_.__l.__size_;
            v59 = std::string::append(&__dst, (const std::string::value_type *)v57, v58);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
            _os_log_error_impl(&dword_1B3CB3000, v34, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_84:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_90;
              goto LABEL_91;
            }
LABEL_89:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_90:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_91:
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            v15 += 24;
            if (v15 == v124)
              goto LABEL_118;
          }
        }
        while (1)
        {
          memset(&v150, 170, sizeof(v150));
          if (v15[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v67 = *(_OWORD *)v15;
            v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v67;
          }
          memset(&__p, 170, sizeof(__p));
          v68 = *(char *)(a2 + 23);
          if (v68 >= 0)
            v69 = *(unsigned __int8 *)(a2 + 23);
          else
            v69 = *(_QWORD *)(a2 + 8);
          v70 = v69 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v69 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v70 >= 0x17)
          {
            v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v72 = v70 | 7;
            v73 = v72 + 1;
            p_buf = (std::string *)operator new(v72 + 1);
            buf.__r_.__value_.__l.__size_ = v69 + 1;
            buf.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            p_buf = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v69 + 1;
            if (!v69)
              goto LABEL_148;
          }
          if (v68 >= 0)
            v74 = (const void *)a2;
          else
            v74 = *(const void **)a2;
          memmove(p_buf, v74, v69);
LABEL_148:
          *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v69) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v150;
          else
            v75 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v76 = v150.__r_.__value_.__l.__size_;
          v77 = std::string::append(&buf, (const std::string::value_type *)v75, v76);
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          ctu::fs::get_unique_filename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_156;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_156:
          v79 = *((char *)a1 + 23);
          if (v79 >= 0)
            v80 = *((unsigned __int8 *)a1 + 23);
          else
            v80 = (size_t)a1[1];
          v81 = v80 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v80 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v81 >= 0x17)
          {
            v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v81 | 7) != 0x17)
              v83 = v81 | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            buf.__r_.__value_.__l.__size_ = v80 + 1;
            buf.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            v82 = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v80 + 1;
            if (!v80)
              goto LABEL_170;
          }
          if (v79 >= 0)
            v85 = a1;
          else
            v85 = *a1;
          memmove(v82, v85, v80);
LABEL_170:
          *(_WORD *)((char *)&v82->__r_.__value_.__l.__data_ + v80) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = &v150;
          else
            v86 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v87 = v150.__r_.__value_.__l.__size_;
          v88 = std::string::append(&buf, (const std::string::value_type *)v86, v87);
          v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          v90 = ctu::fs::rename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_178:
              if ((v90 & 1) == 0)
                goto LABEL_193;
              goto LABEL_179;
            }
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_178;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((v90 & 1) == 0)
          {
LABEL_193:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1EDBEAA20 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v97 = qword_1EDBEAA20;
              if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
                goto LABEL_243;
LABEL_196:
              v98 = *((char *)a1 + 23);
              if (v98 >= 0)
                v99 = *((unsigned __int8 *)a1 + 23);
              else
                v99 = (size_t)a1[1];
              v100 = v99 + 1;
              memset(&buf, 170, sizeof(buf));
              if (v99 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v100 >= 0x17)
              {
                v111 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v100 | 7) != 0x17)
                  v111 = v100 | 7;
                v112 = v111 + 1;
                v101 = (std::string *)operator new(v111 + 1);
                buf.__r_.__value_.__l.__size_ = v99 + 1;
                buf.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
              }
              else
              {
                memset(&buf, 0, sizeof(buf));
                v101 = &buf;
                *((_BYTE *)&buf.__r_.__value_.__s + 23) = v99 + 1;
                if (!v99)
                  goto LABEL_230;
              }
              if (v98 >= 0)
                v113 = a1;
              else
                v113 = *a1;
              memmove(v101, v113, v99);
LABEL_230:
              *(_WORD *)((char *)&v101->__r_.__value_.__l.__data_ + v99) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = &v150;
              else
                v114 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v115 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v115 = v150.__r_.__value_.__l.__size_;
              v116 = std::string::append(&buf, (const std::string::value_type *)v114, v115);
              v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              v118 = &__dst;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v118 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              v119 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v119 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)v145 = 136315394;
              v146 = v118;
              v147 = 2080;
              v148 = v119;
              _os_log_error_impl(&dword_1B3CB3000, v97, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v145, 0x16u);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_241:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_243;
                goto LABEL_242;
              }
LABEL_221:
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_243;
LABEL_242:
              operator delete(buf.__r_.__value_.__l.__data_);
              goto LABEL_243;
            }
            dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
            v97 = qword_1EDBEAA20;
            if (os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
              goto LABEL_196;
            goto LABEL_243;
          }
LABEL_179:
          {
            GetOsLogContext(void)::sOsLogContext = 0;
            qword_1EDBEAA20 = 0;
            __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
          }
          if (GetOsLogContext(void)::onceToken == -1)
          {
            v92 = qword_1EDBEAA20;
            if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
              goto LABEL_243;
LABEL_182:
            v93 = *((char *)a1 + 23);
            if (v93 >= 0)
              v94 = *((unsigned __int8 *)a1 + 23);
            else
              v94 = (size_t)a1[1];
            v95 = v94 + 1;
            memset(&buf, 170, sizeof(buf));
            if (v94 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v95 >= 0x17)
            {
              v102 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v95 | 7) != 0x17)
                v102 = v95 | 7;
              v103 = v102 + 1;
              v96 = (std::string *)operator new(v102 + 1);
              buf.__r_.__value_.__l.__size_ = v94 + 1;
              buf.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
            }
            else
            {
              memset(&buf, 0, sizeof(buf));
              v96 = &buf;
              *((_BYTE *)&buf.__r_.__value_.__s + 23) = v94 + 1;
              if (!v94)
                goto LABEL_210;
            }
            if (v93 >= 0)
              v104 = a1;
            else
              v104 = *a1;
            memmove(v96, v104, v94);
LABEL_210:
            *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v94) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v150;
            else
              v105 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v106 = v150.__r_.__value_.__l.__size_;
            v107 = std::string::append(&buf, (const std::string::value_type *)v105, v106);
            v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v108;
            v107->__r_.__value_.__l.__size_ = 0;
            v107->__r_.__value_.__r.__words[2] = 0;
            v107->__r_.__value_.__r.__words[0] = 0;
            v109 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v109 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            v110 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)v145 = 136315394;
            v146 = v109;
            v147 = 2080;
            v148 = v110;
            _os_log_impl(&dword_1B3CB3000, v92, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v145, 0x16u);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_241;
            goto LABEL_221;
          }
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
          v92 = qword_1EDBEAA20;
          if (os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
            goto LABEL_182;
LABEL_243:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
LABEL_247:
              operator delete(v150.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_247;
          }
          v15 += 24;
          if (v15 == v124)
            goto LABEL_118;
        }
      }
      goto LABEL_118;
    }
  }
  else
  {
LABEL_8:
    std::locale::~locale(&v136);
    if (filtered_files)
      goto LABEL_9;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1EDBEAA20 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v63 = qword_1EDBEAA20;
    if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v63 = qword_1EDBEAA20;
    if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  v120 = (std::string::size_type)a1;
  if (*((char *)a1 + 23) < 0)
    v120 = (std::string::size_type)*a1;
  LODWORD(v150.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words + 4) = v120;
  _os_log_error_impl(&dword_1B3CB3000, v63, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v150, 0xCu);
LABEL_118:
  if (a3)
    ctu::fs::remove_dir();
  v64 = (void **)v142;
  if (v142)
  {
    v65 = v143;
    v66 = v142;
    if (v143 != (void **)v142)
    {
      do
      {
        if (*((char *)v65 - 1) < 0)
          operator delete(*(v65 - 3));
        v65 -= 3;
      }
      while (v65 != v64);
      v66 = v142;
    }
    v143 = v64;
    operator delete(v66);
  }
}

void sub_1B3CD8030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  uint64_t v58;

  if (a57 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  const char *v11;
  int v12;
  unint64_t v13;
  ssize_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  const char *v17;
  uint8_t *p_c;
  NSObject *v19;
  uint32_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  NSObject *v28;
  int *v29;
  char *v30;
  int v31;
  int v32;
  CC_SHA256_CTX c;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1EDBEAA20 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v16 = qword_1EDBEAA20;
      if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v16 = qword_1EDBEAA20;
      if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
        return;
    }
    LOWORD(c.count[0]) = 0;
    v17 = "dataIn Buffer is NULL";
    p_c = (uint8_t *)&c;
    v19 = v16;
    v20 = 2;
LABEL_20:
    _os_log_error_impl(&dword_1B3CB3000, v19, OS_LOG_TYPE_ERROR, v17, p_c, v20);
    return;
  }
  v9 = v8;
  *(_QWORD *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v10;
  *(_OWORD *)&c.wbuf[10] = v10;
  *(_OWORD *)&c.hash[6] = v10;
  *(_OWORD *)&c.wbuf[2] = v10;
  *(_OWORD *)c.count = v10;
  *(_OWORD *)&c.hash[2] = v10;
  if (!ctu::fs::get_file_size())
    return;
  CC_SHA256_Init(&c);
  v11 = a1;
  if (a1[23] < 0)
    v11 = *(const char **)a1;
  v12 = open(v11, 0);
  if (v12 >= 1)
  {
    v13 = 0;
    while (1)
    {
      v14 = read(v12, a2, a3);
      if (v14 == -1)
        break;
      CC_SHA256_Update(&c, a2, v14);
      v13 += v14;
      if (v13 >= 0xAAAAAAAAAAAAAAAALL)
        goto LABEL_24;
    }
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1EDBEAA20 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v28 = qword_1EDBEAA20;
      if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
      {
LABEL_24:
        CC_SHA256_Final(v9, &c);
        close(v12);
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v28 = qword_1EDBEAA20;
      if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
    }
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v29 = __error();
    v30 = strerror(*v29);
    v31 = *__error();
    v32 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v30;
    v38 = 1024;
    v39 = v31;
    v40 = 1024;
    v41 = v32;
    _os_log_error_impl(&dword_1B3CB3000, v28, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
    goto LABEL_24;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1EDBEAA20 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v22 = qword_1EDBEAA20;
    if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_17;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
  v22 = qword_1EDBEAA20;
  if (os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v23 = __error();
    v24 = strerror(*v23);
    v25 = *__error();
    v26 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v24;
    v38 = 1024;
    v39 = v25;
    v40 = 1024;
    v41 = v26;
    v17 = "Failed to open: %s : %s (%d, 0x%x)";
    p_c = buf;
    v19 = v22;
    v20 = 34;
    goto LABEL_20;
  }
}

void sub_1B3CD8688(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B3CD86A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B3CD86B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B3CD86D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1B3CD86E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BOOL8 result;
  int *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t *v19;
  __int16 v20;
  _BYTE v21[14];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  v17 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_11:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1EDBEAA20 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v14 = qword_1EDBEAA20;
      result = os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v14 = qword_1EDBEAA20;
      result = os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t *)*v1;
    v15 = __error();
    v16 = strerror(*v15);
    *(_DWORD *)buf = 136315394;
    v19 = v1;
    v20 = 2080;
    *(_QWORD *)v21 = v16;
    v10 = "Failed to open %s : %s";
    v11 = v14;
    v12 = 22;
    goto LABEL_17;
  }
  v2 = open((const char *)*a1, 0);
  if (v2 < 0)
    goto LABEL_11;
LABEL_3:
  v3 = v2;
  v4 = ffsctl(v2, 0xC0084A44uLL, &v17, 0);
  close(v3);
  if (!v4)
    return 1;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1EDBEAA20 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1EDBEAA20;
    result = os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_7:
      if (*((char *)v1 + 23) < 0)
        v1 = (uint64_t *)*v1;
      v8 = __error();
      v9 = strerror(*v8);
      *(_DWORD *)buf = 136315906;
      v19 = v1;
      v20 = 1024;
      *(_DWORD *)v21 = v4;
      *(_WORD *)&v21[4] = 2080;
      *(_QWORD *)&v21[6] = v9;
      v22 = 2048;
      v23 = v17;
      v10 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
      v11 = v6;
      v12 = 38;
LABEL_17:
      _os_log_error_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      return 0;
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v6 = qword_1EDBEAA20;
    result = os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR);
    if (result)
      goto LABEL_7;
  }
  return result;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  std::sub_match<const char *> *v6;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  char *v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  char *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  char *v71;
  __int128 *v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  char *v84;
  __int128 *v85;
  _OWORD *v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  time_t v92;
  std::string v93;
  _BYTE v94[40];
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  tm __p;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v95 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v99 = v4;
  v96 = 0;
  v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  v100 = 0;
  memset(v94, 0, sizeof(v94));
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::sub_match<const char *> *)a1;
  else
    v6 = *(std::sub_match<const char *> **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  v106 = v4;
  __p.tm_zone = 0;
  v102 = 0;
  v104 = 0;
  v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  v107 = 0;
  memset(&__p, 0, 41);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(_QWORD *)&__p.tm_sec)
  {
    *(_QWORD *)&__p.tm_hour = *(_QWORD *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99)
    v9 = 0;
  else
    v9 = v8;
  if (v9 != 1)
  {
    v21 = 0;
    v22 = *(void **)v94;
    if (!*(_QWORD *)v94)
      return v21;
LABEL_23:
    *(_QWORD *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  v10 = *(_QWORD *)v94;
  if (!*(_BYTE *)(*(_QWORD *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v94 + 24);
  v11 = *(char **)(*(_QWORD *)v94 + 32);
  v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    v14 = &v93;
    if ((char *)v12 != v11)
      goto LABEL_16;
LABEL_29:
    *v14 = 0;
    goto LABEL_33;
  }
  v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v24 = v13 | 7;
  v25 = v24 + 1;
  v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11)
    goto LABEL_29;
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    v15 = v14;
    v16 = (char *)v12;
  }
  else
  {
    v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    v17 = (__int128 *)(v12 + 16);
    v18 = v14 + 16;
    v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_32;
  }
  do
  {
    v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(_BYTE *)(v10 + 64))
      goto LABEL_35;
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(_BYTE *)(v10 + 64))
    goto LABEL_45;
LABEL_35:
  v28 = *(_QWORD *)(v10 + 48);
  v27 = *(char **)(v10 + 56);
  v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    v30 = &v93;
    if ((char *)v28 != v27)
      goto LABEL_38;
LABEL_49:
    *v30 = 0;
    goto LABEL_53;
  }
  v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v37 = v29 | 7;
  v38 = v37 + 1;
  v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27)
    goto LABEL_49;
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    v31 = v30;
    v32 = (char *)v28;
  }
  else
  {
    v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    v33 = (__int128 *)(v28 + 16);
    v34 = v30 + 16;
    v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_52;
  }
  do
  {
    v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(_BYTE *)(v10 + 88))
      goto LABEL_55;
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(_BYTE *)(v10 + 88))
    goto LABEL_65;
LABEL_55:
  v41 = *(_QWORD *)(v10 + 72);
  v40 = *(char **)(v10 + 80);
  v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v42 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    v43 = &v93;
    if ((char *)v41 != v40)
      goto LABEL_58;
LABEL_69:
    *v43 = 0;
    goto LABEL_73;
  }
  v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17)
    v50 = v42 | 7;
  v51 = v50 + 1;
  v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40)
    goto LABEL_69;
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    v44 = v43;
    v45 = (char *)v41;
  }
  else
  {
    v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    v46 = (__int128 *)(v41 + 16);
    v47 = v43 + 16;
    v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_72;
  }
  do
  {
    v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 112))
      goto LABEL_75;
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 112))
    goto LABEL_85;
LABEL_75:
  v54 = *(_QWORD *)(v10 + 96);
  v53 = *(char **)(v10 + 104);
  v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v55 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    v56 = &v93;
    if ((char *)v54 != v53)
      goto LABEL_78;
LABEL_89:
    *v56 = 0;
    goto LABEL_93;
  }
  v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17)
    v63 = v55 | 7;
  v64 = v63 + 1;
  v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53)
    goto LABEL_89;
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    v57 = v56;
    v58 = (char *)v54;
  }
  else
  {
    v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    v59 = (__int128 *)(v54 + 16);
    v60 = v56 + 16;
    v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_92;
  }
  do
  {
    v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 136))
      goto LABEL_95;
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 136))
    goto LABEL_105;
LABEL_95:
  v67 = *(_QWORD *)(v10 + 120);
  v66 = *(char **)(v10 + 128);
  v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v68 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    v69 = &v93;
    if ((char *)v67 != v66)
      goto LABEL_98;
LABEL_109:
    *v69 = 0;
    goto LABEL_113;
  }
  v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17)
    v76 = v68 | 7;
  v77 = v76 + 1;
  v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66)
    goto LABEL_109;
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    v70 = v69;
    v71 = (char *)v67;
  }
  else
  {
    v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    v72 = (__int128 *)(v67 + 16);
    v73 = v69 + 16;
    v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_112;
  }
  do
  {
    v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 160))
      goto LABEL_115;
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 160))
    goto LABEL_125;
LABEL_115:
  v80 = *(_QWORD *)(v10 + 144);
  v79 = *(char **)(v10 + 152);
  v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v81 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    v82 = &v93;
    if ((char *)v80 != v79)
      goto LABEL_118;
LABEL_129:
    *v82 = 0;
    goto LABEL_133;
  }
  v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17)
    v89 = v81 | 7;
  v90 = v89 + 1;
  v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79)
    goto LABEL_129;
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    v83 = v82;
    v84 = (char *)v80;
  }
  else
  {
    v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    v85 = (__int128 *)(v80 + 16);
    v86 = v82 + 16;
    v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_132;
  }
  do
  {
    v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_isdst = -1;
  v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  v22 = *(void **)v94;
  if (*(_QWORD *)v94)
    goto LABEL_23;
  return v21;
}

void sub_1B3CD9254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v6)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!(_DWORD)v6)
    goto LABEL_29;
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v6 = std::stol(a1, &__idx, a3);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF)
    return 0;
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1B3CD9508(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v3;
  __int128 v5;
  int v6;
  size_t v7;
  int v8;
  size_t size;
  unint64_t v10;
  void **v11;
  const void *v12;
  char *v13;
  std::string *v14;
  timespec v15;
  const char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  DIR *v21;
  DIR *v22;
  dirent *v23;
  _DWORD *v24;
  void **v28;
  void *v29;
  _DWORD *v30;
  char *v34;
  uint64_t v35;
  int v36;
  int v38;
  size_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 *v47;
  void *__dst[3];
  std::string v49;
  stat v50;

  *a3 = 0;
  a3[1] = 0;
  v46 = a3;
  a3[2] = 0;
  v3 = *a2;
  v47 = a2[1];
  if (v3 == v47)
    return;
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    v6 = *((char *)a1 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a1 + 23);
    else
      v7 = (size_t)a1[1];
    v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      size = v49.__r_.__value_.__l.__size_;
    v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7)
        goto LABEL_20;
LABEL_16:
      if (v6 >= 0)
        v12 = a1;
      else
        v12 = *a1;
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v18 = v10 | 7;
    v19 = v18 + 1;
    v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7)
      goto LABEL_16;
LABEL_20:
    v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0)
        v14 = &v49;
      else
        v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespec = v15;
    *(timespec *)&v50.st_size = v15;
    v50.st_mtimespec = v15;
    v50.st_ctimespec = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespec = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0)
      v16 = (const char *)__dst;
    else
      v16 = (const char *)__dst[0];
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (v20 = (const char *)__dst) : (v20 = (const char *)__dst[0]),
          v21 = opendir(v20),
          (v22 = v21) == 0))
    {
      v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    v23 = readdir(v21);
    closedir(v22);
    v17 = HIBYTE(__dst[2]);
    if (v23)
      break;
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
LABEL_59:
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    v3 = (__int128 *)((char *)v3 + 24);
    if (v3 == v47)
      return;
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u)
      goto LABEL_99;
    v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 108)
      goto LABEL_79;
    if (*v24 == 1935962413 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 115)
      goto LABEL_79;
    if (*v24 == 1634296877 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 103)
      goto LABEL_79;
    if (HIBYTE(__dst[2]) < 9u)
      goto LABEL_99;
    v28 = __dst;
    v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  v29 = __dst[1];
  if (__dst[1] < (void *)5)
    goto LABEL_99;
  v28 = (void **)__dst[0];
  v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9)
LABEL_99:
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    v34 = (char *)v28 + (_QWORD)v29;
    v35 = *(_QWORD *)(v34 - 9);
    v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101)
      goto LABEL_79;
    goto LABEL_30;
  }
LABEL_79:
  v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v39 = v49.__r_.__value_.__l.__size_;
  v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(_QWORD *)&v50.st_uid = v43 | 0x8000000000000000;
    *(_QWORD *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39)
      goto LABEL_93;
  }
  if (v38 >= 0)
    v44 = &v49;
  else
    v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  v45 = v46;
  *v46 = *(_OWORD *)&v50.st_dev;
  *((_QWORD *)v45 + 2) = *(_QWORD *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0)
      return;
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_97;
}

void sub_1B3CD99A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  size_t v4;
  unint64_t v5;
  const void **v6;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  const void **v12;
  std::string *v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BOOL8 v21;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  std::string *v29;
  char *v30;
  void **v31;
  void **v32;
  void *v33;
  int v34;
  size_t size;
  int v36;
  size_t v37;
  unint64_t v38;
  void **v39;
  const void *v40;
  char *v41;
  std::string *v42;
  void **v43;
  uint64_t v44;
  int v45;
  void *v46;
  char *v47;
  void **v48;
  char *v49;
  unsigned __int8 v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 v59;
  NSObject *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void **v64;
  void **v65;
  void *v66;
  std::string *v68;
  void *v69;
  char *v70;
  char *v71;
  std::string v72;
  std::locale v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::string v79;
  std::string v80;
  _BYTE v81[48];
  __int128 v82;
  void *v83;
  char *v84;
  uint64_t v85;
  void *__dst[4];
  void *__p[76];

  __p[73] = *(void **)MEMORY[0x1E0C80C00];
  v83 = 0;
  v84 = 0;
  v85 = 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v81[32] = v2;
  v82 = v2;
  *(_OWORD *)v81 = v2;
  *(_OWORD *)&v81[16] = v2;
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = v4 + 2;
  memset(&v80, 170, sizeof(v80));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v80.__r_.__value_.__l.__size_ = v4 + 2;
    v80.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    *v11 = 10798;
    v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v80.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v80.__r_.__value_.__s + 23) = v4 + 2;
    v8 = &v80.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = v6;
  else
    v12 = (const void **)*v6;
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  v13 = std::string::append(&v80, ".*", 2uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v81, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    operator delete(v80.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    v79 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v73, (const std::locale *)v81);
  v74 = *(_OWORD *)&v81[8];
  v75 = *(_OWORD *)&v81[24];
  v76 = *(_QWORD *)&v81[40];
  v77 = (std::__shared_weak_count *)v82;
  if ((_QWORD)v82)
  {
    v15 = (unint64_t *)(v82 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v78 = *((_QWORD *)&v82 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)&v79, (uint64_t)&v73, (uint64_t)&v83, 0);
  v18 = v77;
  if (!v77)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v77->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    std::locale::~locale(&v73);
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if (FilteredFiles)
        goto LABEL_31;
LABEL_35:
      v21 = 0;
      goto LABEL_124;
    }
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v73);
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v79.__r_.__value_.__l.__data_);
  if (!FilteredFiles)
    goto LABEL_35;
LABEL_31:
  memset(&v80, 170, sizeof(v80));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v72 = *(std::string *)a1;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v22 = (char *)v83;
  v23 = v84;
  __p[0] = &v69;
  __p[1] = (void *)0xAAAAAAAAAAAAAA00;
  v24 = v84 - (_BYTE *)v83;
  if (v84 != v83)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 3);
    if (v25 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v26 = (char *)operator new(v24);
    v27 = 0;
    v69 = v26;
    v70 = v26;
    v71 = &v26[24 * v25];
    do
    {
      v29 = (std::string *)&v26[v27];
      v30 = &v22[v27];
      if (v22[v27 + 23] < 0)
      {
        std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
      }
      else
      {
        v28 = *(_OWORD *)v30;
        v29->__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v28;
      }
      v27 += 24;
    }
    while (&v22[v27] != v23);
    v70 = &v26[v27];
  }
  util::findBasebandLogInfoFile((const void **)&v72.__r_.__value_.__l.__data_, (__int128 **)&v69, &v80);
  v31 = (void **)v69;
  if (v69)
  {
    v32 = (void **)v70;
    v33 = v69;
    if (v70 != v69)
    {
      do
      {
        if (*((char *)v32 - 1) < 0)
          operator delete(*(v32 - 3));
        v32 -= 3;
      }
      while (v32 != v31);
      v33 = v69;
    }
    v70 = (char *)v31;
    operator delete(v33);
  }
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v34 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    else
      size = v80.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_58;
LABEL_105:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1EDBEAA20 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v56 = qword_1EDBEAA20;
      if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_111;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v56 = qword_1EDBEAA20;
      if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_111;
    }
    if (*((char *)v6 + 23) < 0)
      v6 = (const void **)*v6;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v6;
    _os_log_impl(&dword_1B3CB3000, v56, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
LABEL_111:
    v21 = 0;
    if ((v34 & 0x80) != 0)
      goto LABEL_123;
    goto LABEL_124;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  v34 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  else
    size = v80.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_105;
LABEL_58:
  memset(__p, 170, 0x240uLL);
  v36 = *(char *)(a1 + 23);
  if (v36 >= 0)
    v37 = *(unsigned __int8 *)(a1 + 23);
  else
    v37 = *(_QWORD *)(a1 + 8);
  v38 = v37 + size;
  memset(__dst, 170, 24);
  if (v37 + size > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v38 <= 0x16)
  {
    memset(__dst, 0, 24);
    v39 = __dst;
    HIBYTE(__dst[2]) = v37 + size;
    if (!v37)
      goto LABEL_68;
    goto LABEL_64;
  }
  v57 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v38 | 7) != 0x17)
    v57 = v38 | 7;
  v58 = v57 + 1;
  v39 = (void **)operator new(v57 + 1);
  __dst[1] = (void *)(v37 + size);
  __dst[2] = (void *)(v58 | 0x8000000000000000);
  __dst[0] = v39;
  if (v37)
  {
LABEL_64:
    if (v36 >= 0)
      v40 = (const void *)a1;
    else
      v40 = *(const void **)a1;
    memmove(v39, v40, v37);
  }
LABEL_68:
  v41 = (char *)v39 + v37;
  if (v34 >= 0)
    v42 = &v80;
  else
    v42 = (std::string *)v80.__r_.__value_.__r.__words[0];
  memmove(v41, v42, size);
  v41[size] = 0;
  std::ifstream::basic_ifstream(__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17])
      goto LABEL_73;
LABEL_118:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1EDBEAA20 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v60 = qword_1EDBEAA20;
      if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
      {
LABEL_121:
        v21 = 0;
        goto LABEL_122;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v60 = qword_1EDBEAA20;
      if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_ERROR))
        goto LABEL_121;
    }
    v68 = (std::string *)v80.__r_.__value_.__r.__words[0];
    if (v34 >= 0)
      v68 = &v80;
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v68;
    _os_log_error_impl(&dword_1B3CB3000, v60, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    goto LABEL_121;
  }
  if (!__p[17])
    goto LABEL_118;
LABEL_73:
  std::istream::seekg();
  memset(__dst, 170, 24);
  v43 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  v44 = HIBYTE(__dst[2]);
  v45 = SHIBYTE(__dst[2]);
  v46 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    v44 = (uint64_t)__dst[1];
    v43 = (void **)__dst[0];
  }
  v47 = (char *)v43 + v44;
  if (v44 >= 35)
  {
    v48 = v43;
    do
    {
      v49 = (char *)memchr(v48, 98, v44 - 34);
      if (!v49)
        break;
      if (*(_QWORD *)v49 == 0x6320676F6C206262
        && *((_QWORD *)v49 + 1) == 0x6F697463656C6C6FLL
        && *((_QWORD *)v49 + 2) == 0x20726F66202D206ELL
        && *((_QWORD *)v49 + 3) == 0x6E67616964737973
        && *(_QWORD *)(v49 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_93;
      }
      v48 = (void **)(v49 + 1);
      v44 = v47 - (char *)v48;
    }
    while (v47 - (char *)v48 > 34);
  }
  v49 = v47;
LABEL_93:
  v21 = v49 != v47 && v49 - (char *)v43 != -1;
  if (v45 < 0)
    operator delete(v46);
LABEL_122:
  __p[0] = *(void **)MEMORY[0x1E0DE4F40];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1B5E2F570](&__p[2]);
  std::istream::~istream();
  MEMORY[0x1B5E2F6FC](&__p[53]);
  if ((*((_BYTE *)&v80.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_123:
    operator delete(v80.__r_.__value_.__l.__data_);
LABEL_124:
  v61 = (std::__shared_weak_count *)v82;
  if ((_QWORD)v82)
  {
    v62 = (unint64_t *)(v82 + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  std::locale::~locale((std::locale *)v81);
  v64 = (void **)v83;
  if (v83)
  {
    v65 = (void **)v84;
    v66 = v83;
    if (v84 != v83)
    {
      do
      {
        if (*((char *)v65 - 1) < 0)
          operator delete(*(v65 - 3));
        v65 -= 3;
      }
      while (v65 != v64);
      v66 = v83;
    }
    v84 = (char *)v64;
    operator delete(v66);
  }
  return v21;
}

void sub_1B3CDA304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void sub_1B3CDA364(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,...)
{
  std::locale v27;
  va_list va;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  va_list va1;

  va_start(va1, a26);
  va_start(va, a26);
  v27.__locale_ = va_arg(va1, std::locale::__imp *);
  v29 = va_arg(va1, _QWORD);
  v30 = va_arg(va1, _QWORD);
  v31 = va_arg(va1, _QWORD);
  v32 = va_arg(va1, _QWORD);
  v33 = va_arg(va1, _QWORD);
  v34 = va_arg(va1, _QWORD);
  v35 = va_arg(va1, _QWORD);
  v36 = va_arg(va1, _QWORD);
  std::vector<std::string>::~vector[abi:ne180100](&a3);
  if (a11 < 0)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)va);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CDA374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a47);
  JUMPOUT(0x1B3CDA434);
}

void sub_1B3CDA37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,std::locale a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,...)
{
  va_list va;

  va_start(va, a35);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a10);
  if (a23 < 0)
    JUMPOUT(0x1B3CDA394);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a27);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3CDA3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1B3CDA40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void sub_1B3CDA420()
{
  uint64_t v0;
  uint64_t v1;

  for (; v1; v1 -= 24)
  {
    if (*(char *)(v0 + v1 - 1) < 0)
      operator delete(*(void **)(v0 + v1 - 24));
  }
  JUMPOUT(0x1B3CDA42CLL);
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8;
  std::string *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  const void **v34;
  __int128 v35;
  int64_t size;
  std::string::size_type v37;
  int v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  int64_t v42;
  __int128 v43;
  std::string::size_type v44;
  std::sub_match<const char *> *v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  _BYTE *p_end_cap;
  std::vector<std::ssub_match>::pointer begin;
  std::__wrap_iter<const char *>::iterator_type i;
  const char **p_i;
  const char *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 *v56;
  const char *v57;
  __int128 *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int v65;
  std::sub_match<std::__wrap_iter<const char *>> *v66;
  char *v67;
  int v68;
  std::string *v69;
  int64_t v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  std::string *v75;
  int64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  size_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 isDumpForSysdiagnose;
  unsigned __int8 v88;
  NSObject *v89;
  std::string *v90;
  char v91;
  char v92;
  int64_t v93;
  std::string *v94;
  size_t v95;
  unint64_t *v96;
  unint64_t v97;
  _BOOL4 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const void **v108;
  const void **v109;
  const void **v110;
  unsigned int v111;
  char *v113;
  const void **v115;
  std::string *v116;
  BOOL v117;
  std::locale v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::string v124;
  std::string v125;
  void *v126[2];
  unint64_t v127;
  std::vector<std::ssub_match> v128[2];
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  std::string v136;
  std::string v137;
  std::locale v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  void *__p[2];
  unint64_t v145;
  _BYTE v146[48];
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  void *v150[3];
  const void **v151;
  const void **v152;
  uint64_t v153;
  __int128 __dst;
  _BYTE v155[32];
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;

  v8 = a3;
  v10 = a6;
  v163 = *MEMORY[0x1E0C80C00];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  memset(v150, 170, sizeof(v150));
  v11 = strlen(__s);
  v116 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    *(_QWORD *)v155 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  v155[7] = v11;
  p_dst = &__dst;
  if (v11)
LABEL_8:
    memcpy(p_dst, __s, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v150[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v150 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v155[7] & 0x80000000) != 0)
    operator delete((void *)__dst);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v18;
  v149 = v18;
  *(_OWORD *)v148 = v18;
  *(_OWORD *)&v148[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)v150, 0);
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v146[32] = v19;
  v147 = v19;
  *(_OWORD *)v146 = v19;
  *(_OWORD *)&v146[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v146, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  v117 = a5 == 0;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    v145 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v145) = v20;
  v22 = __p;
  if (v20)
LABEL_18:
    memcpy(v22, this, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  std::locale::locale(&v138, (const std::locale *)v148);
  v139 = *(_OWORD *)&v148[8];
  v140 = *(_OWORD *)&v148[24];
  v141 = *(_QWORD *)&v148[40];
  v142 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v25 = (unint64_t *)(v149 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v143 = *((_QWORD *)&v149 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v138, (uint64_t)&v151, 0);
  v28 = v142;
  if (!v142)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
    {
LABEL_27:
      if (!FilteredFiles)
        goto LABEL_176;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_26:
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!FilteredFiles)
    goto LABEL_176;
LABEL_31:
  v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v152 - v151));
  if (v152 == v151)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((uint64_t)v151, v152, v33, 1, v31);
  memset(&v137, 0, sizeof(v137));
  v34 = v151;
  v115 = v152;
  if (v151 == v152)
  {
LABEL_176:
    if (!v8)
      goto LABEL_196;
LABEL_177:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v124, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    else
      v124 = *v10;
    std::locale::locale(&v118, (const std::locale *)v146);
    v119 = *(_OWORD *)&v146[8];
    v120 = *(_OWORD *)&v146[24];
    v121 = *(_QWORD *)&v146[40];
    v122 = (std::__shared_weak_count *)v147;
    if ((_QWORD)v147)
    {
      v96 = (unint64_t *)(v147 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v123 = *((_QWORD *)&v147 + 1);
    v98 = util::checkLogFileAge((uint64_t)&v124, v8, (uint64_t)&v118);
    v99 = v122;
    if (!v122)
      goto LABEL_187;
    v100 = (unint64_t *)&v122->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_188:
        if (!v98)
          goto LABEL_196;
LABEL_192:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_196;
      }
    }
    else
    {
LABEL_187:
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_188;
    }
    operator delete(v124.__r_.__value_.__l.__data_);
    if (!v98)
      goto LABEL_196;
    goto LABEL_192;
  }
  v111 = v8;
  v113 = a5;
  while (1)
  {
    memset(&v136, 170, sizeof(v136));
    if (*((char *)v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v136, (const std::string::value_type *)*v34, (std::string::size_type)v34[1]);
    }
    else
    {
      v35 = *(_OWORD *)v34;
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)v34[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v35;
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      size = v137.__r_.__value_.__l.__size_;
    v37 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    v38 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
    v39 = (std::string *)v136.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v137;
      else
        v40 = (std::string *)v137.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v136;
      else
        v41 = (std::string *)v136.__r_.__value_.__r.__words[0];
      v42 = v136.__r_.__value_.__l.__size_;
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if (v42 >= size)
      {
        v67 = (char *)v41 + v42;
        v68 = v40->__r_.__value_.__s.__data_[0];
        v69 = v41;
        do
        {
          v70 = v42 - size;
          if (v70 == -1)
            break;
          v71 = (char *)memchr(v69, v68, v70 + 1);
          if (!v71)
            break;
          v72 = v71;
          if (!memcmp(v71, v40, size))
          {
            if (v72 == v67 || v72 - (char *)v41 == -1)
              break;
            v65 = 3;
            v10 = v116;
            if ((v38 & 0x80) == 0)
              goto LABEL_155;
            goto LABEL_109;
          }
          v69 = (std::string *)(v72 + 1);
          v42 = v67 - (v72 + 1);
        }
        while (v42 >= size);
      }
    }
    *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v134 = v43;
    v131 = 0xAAAAAAAAAAAAAA00;
    v128[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    v129 = 0;
    v130 = 0;
    v132 = 0;
    v133 = 0;
    LOBYTE(v134) = 0;
    BYTE8(v134) = 0;
    v135 = 0;
    memset(v128, 0, 41);
    if (v117)
    {
      v44 = v136.__r_.__value_.__l.__size_;
      v161 = v43;
      v158 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&v155[24] = v43;
      v156 = 0;
      v157 = 0;
      v159 = 0;
      v160 = 0;
      LOBYTE(v161) = 0;
      BYTE8(v161) = 0;
      v162 = 0;
      __dst = 0uLL;
      *(_OWORD *)v155 = 0uLL;
      if (v38 >= 0)
        v45 = (std::sub_match<const char *> *)&v136;
      else
        v45 = (std::sub_match<const char *> *)v39;
      if (v38 >= 0)
        v44 = v37;
      *(_OWORD *)&v155[9] = 0uLL;
      v10 = v116;
      v46 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v146, v45, (std::sub_match<const char *> *)((char *)v45 + v44), (std::vector<std::csub_match> *)&__dst, 0);
      v47 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v136;
      else
        v48 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = v136.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v128, (uint64_t)v48, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v48 + v47), (uint64_t *)&__dst, 0);
      if ((_QWORD)__dst)
      {
        *((_QWORD *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v46)
      {
        p_end_cap = &v128[1].__end_cap_;
        if (v128[0].__end_ != v128[0].__begin_)
          p_end_cap = &v128[0].__begin_->matched;
        if (!*p_end_cap)
        {
          __dst = 0uLL;
          *(_QWORD *)v155 = 0;
          if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_119;
          goto LABEL_104;
        }
        begin = (std::vector<std::ssub_match>::pointer)&v128[1];
        if (v128[0].__end_ != v128[0].__begin_)
          begin = v128[0].__begin_;
        i = begin->first.__i_;
        p_i = &v128[0].__begin_->second.__i_;
        if (v128[0].__end_ == v128[0].__begin_)
          p_i = (const char **)&v128[1].__end_;
        v53 = *p_i;
        v54 = *p_i - i;
        if (v54 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v54 > 0x16)
        {
          v79 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v79 = v54 | 7;
          v80 = v79 + 1;
          v55 = (__int128 *)operator new(v79 + 1);
          *((_QWORD *)&__dst + 1) = v54;
          *(_QWORD *)v155 = v80 | 0x8000000000000000;
          *(_QWORD *)&__dst = v55;
          if (i != v53)
          {
LABEL_77:
            if (v54 < 0x20 || (unint64_t)((char *)v55 - i) < 0x20)
            {
              v56 = v55;
              v57 = i;
            }
            else
            {
              v56 = (__int128 *)((char *)v55 + (v54 & 0xFFFFFFFFFFFFFFE0));
              v57 = &i[v54 & 0xFFFFFFFFFFFFFFE0];
              v58 = (__int128 *)(i + 16);
              v59 = v55 + 1;
              v60 = v54 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v61 = *v58;
                *(v59 - 1) = *(v58 - 1);
                *v59 = v61;
                v58 += 2;
                v59 += 2;
                v60 -= 32;
              }
              while (v60);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_118:
                *(_BYTE *)v56 = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_119:
                  *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                  v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                  if (!a4)
                    goto LABEL_146;
                  goto LABEL_120;
                }
LABEL_104:
                operator delete(v116->__r_.__value_.__l.__data_);
                *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                if (!a4)
                  goto LABEL_146;
LABEL_120:
                v82 = strlen((const char *)this);
                if (v82 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v83 = (void *)v82;
                if (v82 >= 0x17)
                {
                  v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v82 | 7) != 0x17)
                    v85 = v82 | 7;
                  v86 = v85 + 1;
                  v84 = operator new(v85 + 1);
                  v126[1] = v83;
                  v127 = v86 | 0x8000000000000000;
                  v126[0] = v84;
                }
                else
                {
                  HIBYTE(v127) = v82;
                  v84 = v126;
                  if (!v82)
                  {
                    LOBYTE(v126[0]) = 0;
                    if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_124:
                      v125 = *v116;
LABEL_130:
                      isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v126, (uint64_t)&v125);
                      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v125.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v127) & 0x80000000) == 0)
                        {
LABEL_132:
                          if (isDumpForSysdiagnose)
                          {
LABEL_133:
                            if ((v88 & 1) == 0
                            {
                              GetOsLogContext(void)::sOsLogContext = 0;
                              qword_1EDBEAA20 = 0;
                              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
                            }
                            if (GetOsLogContext(void)::onceToken == -1)
                            {
                              v89 = qword_1EDBEAA20;
                              if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            else
                            {
                              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
                              v89 = qword_1EDBEAA20;
                              if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            if ((v116->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v90 = v116;
                            else
                              v90 = (std::string *)v116->__r_.__value_.__r.__words[0];
                            LODWORD(__dst) = 136315138;
                            *(_QWORD *)((char *)&__dst + 4) = v90;
                            _os_log_impl(&dword_1B3CB3000, v89, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
LABEL_140:
                            if (&v137 != v116)
                            {
                              v91 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                              if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
                              {
                                if (v91 >= 0)
                                  v94 = v116;
                                else
                                  v94 = (std::string *)v116->__r_.__value_.__r.__words[0];
                                if (v91 >= 0)
                                  v95 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                                else
                                  v95 = v116->__r_.__value_.__l.__size_;
                                std::string::__assign_no_alias<false>((void **)&v137.__r_.__value_.__l.__data_, v94, v95);
                              }
                              else
                              {
                                if ((*((_BYTE *)&v116->__r_.__value_.__s + 23) & 0x80) == 0)
                                {
                                  v137 = *v116;
LABEL_169:
                                  v65 = 0;
                                  v116->__r_.__value_.__s.__data_[0] = 0;
                                  *((_BYTE *)&v116->__r_.__value_.__s + 23) = 0;
                                  goto LABEL_151;
                                }
                                std::string::__assign_no_alias<true>(&v137, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                              }
                            }
                            if (SHIBYTE(v116->__r_.__value_.__r.__words[2]) < 0)
                            {
                              v65 = 0;
                              *v116->__r_.__value_.__l.__data_ = 0;
                              v116->__r_.__value_.__l.__size_ = 0;
                              goto LABEL_151;
                            }
                            goto LABEL_169;
                          }
                          goto LABEL_146;
                        }
                      }
                      else if ((SHIBYTE(v127) & 0x80000000) == 0)
                      {
                        goto LABEL_132;
                      }
                      operator delete(v126[0]);
                      if (isDumpForSysdiagnose)
                        goto LABEL_133;
LABEL_146:
                      v65 = 2;
LABEL_151:
                      v92 = 1;
LABEL_152:
                      v117 = v92;
                      v66 = v128[0].__begin_;
                      if (v128[0].__begin_)
                        goto LABEL_153;
                      goto LABEL_154;
                    }
LABEL_129:
                    std::string::__init_copy_ctor_external(&v125, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                    goto LABEL_130;
                  }
                }
                memcpy(v84, this, (size_t)v83);
                *((_BYTE *)v83 + (_QWORD)v84) = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_124;
                goto LABEL_129;
              }
            }
            do
            {
              v81 = *v57++;
              *(_BYTE *)v56 = v81;
              v56 = (__int128 *)((char *)v56 + 1);
            }
            while (v57 != v53);
            goto LABEL_118;
          }
        }
        else
        {
          v155[7] = *(_BYTE *)p_i - (_BYTE)i;
          v55 = &__dst;
          if (i != v53)
            goto LABEL_77;
        }
        *(_BYTE *)v55 = 0;
        if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_119;
        goto LABEL_104;
      }
LABEL_150:
      v65 = 0;
      goto LABEL_151;
    }
    if (v38 >= 0)
      v39 = &v136;
    v62 = strlen(v113);
    v10 = v116;
    if (!v62)
    {
LABEL_149:
      std::string::__assign_external(&v137, v113);
      goto LABEL_150;
    }
    v63 = v62;
    v64 = v136.__r_.__value_.__l.__size_;
    if (v38 >= 0)
      v64 = v37;
    if (v64 >= v62)
    {
      v73 = (char *)v39 + v64;
      v74 = *v113;
      v75 = v39;
      do
      {
        v76 = v64 - v63;
        if (v76 == -1)
          break;
        v77 = (char *)memchr(v75, v74, v76 + 1);
        if (!v77)
          break;
        v78 = v77;
        if (!memcmp(v77, v113, v63))
        {
          v92 = 0;
          if (v78 != v73)
          {
            v93 = v78 - (char *)v39;
            v65 = 0;
            if (v93 == -1)
              goto LABEL_152;
            goto LABEL_149;
          }
          v65 = 0;
          v117 = 0;
          v66 = v128[0].__begin_;
          if (v128[0].__begin_)
            goto LABEL_153;
          goto LABEL_154;
        }
        v75 = (std::string *)(v78 + 1);
        v64 = v73 - (v78 + 1);
      }
      while (v64 >= v63);
    }
    v65 = 0;
    v117 = 0;
    v66 = v128[0].__begin_;
    if (v128[0].__begin_)
    {
LABEL_153:
      v128[0].__end_ = v66;
      operator delete(v66);
    }
LABEL_154:
    if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
      break;
LABEL_155:
    if (v65 != 3)
      goto LABEL_156;
LABEL_36:
    v34 += 3;
    if (v34 == v115)
      goto LABEL_175;
  }
LABEL_109:
  operator delete(v136.__r_.__value_.__l.__data_);
  if (v65 == 3)
    goto LABEL_36;
LABEL_156:
  if (!v65)
    goto LABEL_36;
LABEL_175:
  v8 = v111;
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_176;
  operator delete(v137.__r_.__value_.__l.__data_);
  if (v111)
    goto LABEL_177;
LABEL_196:
  v102 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v103 = (unint64_t *)(v147 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      std::locale::~locale((std::locale *)v146);
      v105 = (std::__shared_weak_count *)v149;
      if ((_QWORD)v149)
        goto LABEL_201;
      goto LABEL_204;
    }
  }
  std::locale::~locale((std::locale *)v146);
  v105 = (std::__shared_weak_count *)v149;
  if (!(_QWORD)v149)
    goto LABEL_204;
LABEL_201:
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_204:
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
      goto LABEL_205;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
LABEL_205:
      operator delete(v150[0]);
  }
  v108 = v151;
  if (v151)
  {
    v109 = v152;
    v110 = v151;
    if (v152 != v151)
    {
      do
      {
        if (*((char *)v109 - 1) < 0)
          operator delete((void *)*(v109 - 3));
        v109 -= 3;
      }
      while (v109 != v108);
      v110 = v151;
    }
    v152 = v108;
    operator delete(v110);
  }
}

void sub_1B3CDB158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0)
    operator delete(*(void **)a24);
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  int v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  size_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::sub_match<const char *> *v39;
  std::sub_match<const char *> *v40;
  _BYTE *v41;
  __int128 *v42;
  std::__compressed_pair<std::csub_match *> *p_end_cap;
  __int128 v44;
  uint64_t *v45;
  _QWORD *v46;
  const char *second;
  std::sub_match<const char *> *first;
  int v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  _BYTE *v53;
  uint64_t *v54;
  uint64_t v55;
  char **v56;
  char *v57;
  unint64_t v58;
  _OWORD *v59;
  _BYTE *v60;
  char *v61;
  __int128 *v62;
  _OWORD *v63;
  unint64_t v64;
  __int128 v65;
  void *v66;
  void **v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint8x8_t v142;
  unint64_t v143;
  uint64_t **v144;
  uint64_t *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const void **v150;
  void **v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const void **v155;
  void **v156;
  void **v157;
  void **v158;
  uint64_t v159;
  int v160;
  std::sub_match<const char *> *v161;
  float v162;
  _BOOL8 v163;
  unint64_t v164;
  unint64_t v165;
  size_t prime;
  void *v167;
  void *v168;
  uint64_t v169;
  _QWORD **v170;
  size_t v171;
  size_t v172;
  size_t v173;
  _QWORD *i;
  size_t v175;
  uint64_t v176;
  unint64_t v177;
  uint8x8_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  unint64_t v183;
  void *v184;
  uint64_t v185;
  uint64_t v186;
  size_t v187;
  uint64_t v188;
  std::sub_match<const char *> **v189;
  unint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  void **v198;
  void *v199;
  void **v200;
  void **v201;
  void *v202;
  void **v204;
  char *v205;
  uint64_t *v206;
  std::__compressed_pair<std::csub_match *> *v207;
  __int128 *v208;
  _BYTE *v209;
  std::sub_match<const char *> *v210;
  std::sub_match<const char *> *v211;
  _QWORD *v212;
  uint64_t *v213;
  void *v214[2];
  unint64_t v215;
  std::locale v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::string v222;
  std::locale v223[2];
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _BYTE v227[48];
  __int128 v228;
  __int128 v229;
  __int128 v230;
  unint64_t v231;
  void *v232;
  std::sub_match<const char *> *v233;
  uint64_t v234;
  std::vector<std::csub_match> __p[2];
  uint64_t v236;
  _BYTE v237[32];
  uint64_t v238;
  _BYTE __dst[56];
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;
  uint64_t v244;

  v244 = *MEMORY[0x1E0C80C00];
  v232 = 0;
  v233 = 0;
  v234 = 0;
  v229 = 0u;
  v230 = 0u;
  v231 = 0xAAAAAAAA3F800000;
  v4 = (char *)operator new(0x48uLL);
  v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v227[32] = v6;
  v228 = v6;
  *(_OWORD *)v227 = v6;
  *(_OWORD *)&v227[16] = v6;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = v8 + 64;
  memset(__dst, 170, 24);
  v205 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  v10 = operator new(v11 + 1);
  *(_QWORD *)&__dst[8] = v8 + 64;
  *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
  *(_QWORD *)__dst = v10;
  if (v8)
    goto LABEL_10;
LABEL_14:
  v14 = &v10[v8];
  v15 = *(_OWORD *)v5;
  v16 = *((_OWORD *)v5 + 1);
  v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__begin_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v227, (uint64_t)__p, 0);
  if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
  {
    operator delete(__p[0].__begin_);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v225 = v20;
  v226 = v20;
  v224 = v20;
  *(_OWORD *)&v223[0].__locale_ = v20;
  v21 = *((char *)a2 + 23);
  if (v21 >= 0)
    v22 = *((unsigned __int8 *)a2 + 23);
  else
    v22 = (size_t)a2[1];
  v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0)
      v27 = a2;
    else
      v27 = *a2;
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17)
    v25 = v23 | 7;
  v26 = v25 + 1;
  v24 = operator new(v25 + 1);
  *(_QWORD *)&__dst[8] = v22 + 64;
  *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
  *(_QWORD *)__dst = v24;
  if (v22)
    goto LABEL_25;
LABEL_29:
  v28 = &v24[v22];
  v29 = *(_OWORD *)v5;
  v30 = *((_OWORD *)v5 + 1);
  v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__begin_ = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v223, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[0].__end_cap_.__value_) & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_31;
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_37;
  }
  operator delete(__p[0].__begin_);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_36;
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    v222 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v216, (const std::locale *)v227);
  v217 = *(_OWORD *)&v227[8];
  v218 = *(_OWORD *)&v227[24];
  v219 = *(_QWORD *)&v227[40];
  v220 = (std::__shared_weak_count *)v228;
  if ((_QWORD)v228)
  {
    v34 = (unint64_t *)(v228 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v221 = *((_QWORD *)&v228 + 1);
  support::fs::getFilteredFiles((const char *)&v222, (uint64_t)&v216, (uint64_t)&v232, 0);
  v36 = v220;
  if (!v220)
    goto LABEL_45;
  p_shared_owners = (unint64_t *)&v220->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    std::locale::~locale(&v216);
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_46:
      v40 = (std::sub_match<const char *> *)v232;
      v39 = v233;
      if (v232 == v233)
        goto LABEL_234;
      goto LABEL_50;
    }
  }
  else
  {
LABEL_45:
    std::locale::~locale(&v216);
    if ((SHIBYTE(v222.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  operator delete(v222.__r_.__value_.__l.__data_);
  v40 = (std::sub_match<const char *> *)v232;
  v39 = v233;
  if (v232 == v233)
    goto LABEL_234;
LABEL_50:
  v41 = &__dst[48];
  v42 = &v241;
  p_end_cap = &__p[1].__end_cap_;
  v213 = &v236;
  v211 = (std::sub_match<const char *> *)&v230;
  v212 = v237;
  v206 = (uint64_t *)&__dst[24];
  v209 = &__dst[48];
  v210 = v39;
  v207 = &__p[1].__end_cap_;
  v208 = &v241;
  while (2)
  {
    *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v241 = v44;
    v242 = v44;
    *(_OWORD *)&__dst[40] = v44;
    v240 = v44;
    *(_QWORD *)v41 = 0;
    *((_QWORD *)v41 + 1) = 0;
    v41[16] = 0;
    *(_QWORD *)v42 = 0;
    *((_QWORD *)v42 + 1) = 0;
    *((_BYTE *)v42 + 16) = 0;
    BYTE8(v242) = 0;
    v243 = 0;
    memset(__dst, 0, 41);
    *(_OWORD *)&p_end_cap[4].__value_ = v44;
    *(_OWORD *)&p_end_cap[6].__value_ = v44;
    *(_OWORD *)&p_end_cap->__value_ = v44;
    *(_OWORD *)&p_end_cap[2].__value_ = v44;
    v45 = v213;
    *v213 = 0;
    v45[1] = 0;
    *((_BYTE *)v45 + 16) = 0;
    v46 = v212;
    *v212 = 0;
    v46[1] = 0;
    *((_BYTE *)v46 + 16) = 0;
    v237[24] = 0;
    v238 = 0;
    memset(__p, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v40->matched + 7);
    if ((char)second >= 0)
      first = v40;
    else
      first = (std::sub_match<const char *> *)v40->first;
    if ((char)second < 0)
      second = v40->second;
    v49 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v223, first, (std::sub_match<const char *> *)&second[(_QWORD)first], __p, 0);
    v50 = (const char *)*((unsigned __int8 *)&v40->matched + 7);
    if ((char)v50 >= 0)
      v51 = (uint64_t)v40;
    else
      v51 = (uint64_t)v40->first;
    if ((char)v50 < 0)
      v50 = v40->second;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v51, (std::sub_match<std::__wrap_iter<const char *>> *)&v50[v51], (uint64_t *)__p, 0);
    if (__p[0].__begin_)
    {
      __p[0].__end_ = __p[0].__begin_;
      operator delete(__p[0].__begin_);
    }
    v52 = *(void **)__dst;
    if (!v49)
      goto LABEL_232;
    if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
      v53 = &__dst[40];
    else
      v53 = (_BYTE *)(*(_QWORD *)__dst + 16);
    if (!*v53)
    {
      v66 = 0;
      v67 = 0;
      v68 = 0;
      v214[0] = 0;
      v214[1] = 0;
      v215 = 0;
      goto LABEL_90;
    }
    v54 = v206;
    if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
      v54 = *(uint64_t **)__dst;
    v55 = *v54;
    v56 = (char **)(*(_QWORD *)__dst + 8);
    if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
      v56 = (char **)&__dst[32];
    v57 = *v56;
    v58 = (unint64_t)&(*v56)[-v55];
    if (v58 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v58 > 0x16)
    {
      v69 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v58 | 7) != 0x17)
        v69 = v58 | 7;
      v70 = v69 + 1;
      v59 = operator new(v69 + 1);
      v214[1] = (void *)v58;
      v215 = v70 | 0x8000000000000000;
      v214[0] = v59;
      if ((char *)v55 != v57)
        goto LABEL_76;
LABEL_86:
      v60 = v59;
      goto LABEL_89;
    }
    HIBYTE(v215) = *(_BYTE *)v56 - v55;
    v59 = v214;
    if ((char *)v55 == v57)
      goto LABEL_86;
LABEL_76:
    if (v58 < 0x20 || (unint64_t)v59 - v55 < 0x20)
    {
      v60 = v59;
      v61 = (char *)v55;
    }
    else
    {
      v60 = (char *)v59 + (v58 & 0xFFFFFFFFFFFFFFE0);
      v61 = (char *)(v55 + (v58 & 0xFFFFFFFFFFFFFFE0));
      v62 = (__int128 *)(v55 + 16);
      v63 = v59 + 1;
      v64 = v58 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v65 = *v62;
        *(v63 - 1) = *(v62 - 1);
        *v63 = v65;
        v62 += 2;
        v63 += 2;
        v64 -= 32;
      }
      while (v64);
      if (v58 == (v58 & 0x7FFFFFFFFFFFFFE0))
        goto LABEL_89;
    }
    do
    {
      v71 = *v61++;
      *v60++ = v71;
    }
    while (v61 != v57);
LABEL_89:
    *v60 = 0;
    v68 = HIBYTE(v215);
    v67 = (void **)v214[0];
    v66 = v214[1];
LABEL_90:
    if ((v68 & 0x80u) == 0)
      v72 = v214;
    else
      v72 = v67;
    if ((v68 & 0x80u) == 0)
      v73 = v68;
    else
      v73 = (unint64_t)v66;
    if (v73 > 0x20)
    {
      if (v73 <= 0x40)
      {
        if ((v68 & 0x80u) == 0)
          v67 = v214;
        v77 = (char *)v67[3];
        v78 = *(uint64_t *)((char *)v72 + v73 - 16);
        v79 = (uint64_t)*v72 - 0x3C5A37A36834CED9 * v78 + 0xC3A5C85C97CB3127 * v73;
        v80 = __ROR8__(&v77[v79], 52);
        v82 = (char *)v67[1];
        v81 = (char *)v67[2];
        v83 = &v82[v79];
        v84 = __ROR8__(v83, 7);
        v85 = &v81[(_QWORD)v83];
        v86 = v84
            + __ROR8__((char *)*v72 - 0x3C5A37A36834CED9 * v78 + 0xC3A5C85C97CB3127 * v73, 37)
            + v80
            + __ROR8__(v85, 31);
        v87 = &v81[*(_QWORD *)((char *)v72 + v73 - 32)];
        v88 = &v77[*(_QWORD *)((char *)v72 + v73 - 8)];
        v89 = __ROR8__(&v87[(_QWORD)v88], 52);
        v90 = __ROR8__(v87, 37);
        v91 = &v87[*(_QWORD *)((char *)v72 + v73 - 24)];
        v92 = __ROR8__(v91, 7);
        v93 = &v91[v78];
        v94 = &v88[(_QWORD)v93];
        v95 = &v77[v90 + v92 + v89 + __ROR8__(v93, 31) + (_QWORD)v85];
        v96 = 0x9AE16A3B2F90404FLL;
        v97 = v86
            - 0x3C5A37A36834CED9
            * ((0xC3A5C85C97CB3127 * (_QWORD)&v94[v86] - 0x651E95C4D06FBFB1 * (_QWORD)v95) ^ ((0xC3A5C85C97CB3127
                                                                                                 * (unint64_t)&v94[v86]
                                                                                                 - 0x651E95C4D06FBFB1
                                                                                                 * (_QWORD)v95) >> 47));
        goto LABEL_108;
      }
      v104 = *(uint64_t *)((char *)v72 + v73 - 48);
      v105 = *(uint64_t *)((char *)v72 + v73 - 40);
      v106 = *(uint64_t *)((char *)v72 + v73 - 24);
      v107 = *(uint64_t *)((char *)v72 + v73 - 56);
      v108 = *(uint64_t *)((char *)v72 + v73 - 16);
      v109 = *(uint64_t *)((char *)v72 + v73 - 8);
      v110 = v107 + v108;
      v111 = 0x9DDFEA08EB382D69
           * (v106 ^ ((0x9DDFEA08EB382D69 * (v106 ^ (v104 + v73))) >> 47) ^ (0x9DDFEA08EB382D69
                                                                             * (v106 ^ (v104 + v73))));
      v112 = 0x9DDFEA08EB382D69 * (v111 ^ (v111 >> 47));
      v113 = *(char **)((char *)v72 + v73 - 64) + v73;
      v114 = &v113[v104 + v107];
      v115 = &v114[v105];
      v116 = (uint64_t)&v113[__ROR8__(v114, 44) + __ROR8__(&v113[v105 + v112], 21)];
      v117 = *(uint64_t *)((char *)v72 + v73 - 32) + v107 + v108 - 0x4B6D499041670D8DLL;
      v118 = v106 + v108 + v117;
      v119 = v118 + v109;
      v120 = __ROR8__(v118, 44) + v117 + __ROR8__(v117 + v105 + v109, 21);
      v121 = v72 + 4;
      v122 = (uint64_t)*v72 - 0x4B6D499041670D8DLL * v105;
      v123 = -(uint64_t)((v73 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v124 = *(v121 - 3);
        v125 = &v115[v122 + v110 + v124];
        v126 = v121[2];
        v127 = v121[3];
        v128 = v121[1];
        v110 = (unint64_t)&v115[v128 + 0xB492B66FBE98F273 * __ROR8__(v110 + v116 + v126, 42)];
        v129 = v112 + v119;
        v130 = *(v121 - 2);
        v131 = *(v121 - 1);
        v132 = *(v121 - 4) - 0x4B6D499041670D8DLL * v116;
        v133 = v132 + v119 + v131;
        v134 = v132 + v124 + v130;
        v115 = (char *)(v134 + v131);
        v135 = __ROR8__(v134, 44) + v132;
        v136 = (0xB492B66FBE98F273 * __ROR8__(v125, 37)) ^ v120;
        v122 = 0xB492B66FBE98F273 * __ROR8__(v129, 33);
        v116 = v135 + __ROR8__(v133 + v136, 21);
        v137 = v122 + v120 + *v121;
        v119 = v128 + v126 + v137 + v127;
        v120 = __ROR8__(v128 + v126 + v137, 44) + v137 + __ROR8__(v110 + v130 + v137 + v127, 21);
        v121 += 8;
        v112 = v136;
        v123 += 64;
      }
      while (v123);
      v138 = 0x9DDFEA08EB382D69
           * (v120 ^ ((0x9DDFEA08EB382D69 * (v120 ^ v116)) >> 47) ^ (0x9DDFEA08EB382D69 * (v120 ^ v116)));
      v139 = v122 - 0x622015F714C7D297 * (v138 ^ (v138 >> 47));
      v140 = 0x9DDFEA08EB382D69
           * (v139 ^ (v136
                    - 0x4B6D499041670D8DLL * (v110 ^ (v110 >> 47))
                    - 0x622015F714C7D297
                    * ((0x9DDFEA08EB382D69
                      * (v119 ^ ((0x9DDFEA08EB382D69 * (v119 ^ (unint64_t)v115)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                                  * (v119 ^ (unint64_t)v115)))) ^ ((0x9DDFEA08EB382D69 * (v119 ^ ((0x9DDFEA08EB382D69 * (v119 ^ (unint64_t)v115)) >> 47) ^ (0x9DDFEA08EB382D69 * (v119 ^ (unint64_t)v115)))) >> 47))));
      v76 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v139 ^ (v140 >> 47) ^ v140)) ^ ((0x9DDFEA08EB382D69
                                                                     * (v139 ^ (v140 >> 47) ^ v140)) >> 47));
    }
    else
    {
      if (v73 > 0x10)
      {
        v98 = 0xB492B66FBE98F273 * (_QWORD)*v72;
        if ((v68 & 0x80u) == 0)
          v67 = v214;
        v99 = (unint64_t)v67[1];
        v100 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)v72 + v73 - 8), 30)
             + __ROR8__(v98 - v99, 43)
             - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)v72 + v73 - 16);
        v101 = v98
             + v73
             + __ROR8__(v99 ^ 0xC949D7C7509E6557, 20)
             - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)v72 + v73 - 8);
        v102 = v100 ^ v101;
        v96 = 0x9DDFEA08EB382D69;
        v103 = v101 ^ ((0x9DDFEA08EB382D69 * v102) >> 47) ^ (0x9DDFEA08EB382D69 * v102);
        goto LABEL_107;
      }
      if (v73 >= 9)
      {
        v74 = *(uint64_t *)((char *)v72 + v73 - 8);
        v75 = __ROR8__(v74 + v73, v73);
        v76 = (0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69
               * (v75 ^ ((0x9DDFEA08EB382D69 * (v75 ^ (unint64_t)*v72)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                         * (v75 ^ (unint64_t)*v72)))) ^ ((0x9DDFEA08EB382D69 * (v75 ^ ((0x9DDFEA08EB382D69 * (v75 ^ (unint64_t)*v72)) >> 47) ^ (0x9DDFEA08EB382D69 * (v75 ^ (unint64_t)*v72)))) >> 47))) ^ v74;
        goto LABEL_112;
      }
      if (v73 >= 4)
      {
        v180 = *(unsigned int *)((char *)v72 + v73 - 4);
        v96 = 0x9DDFEA08EB382D69;
        v181 = 0x9DDFEA08EB382D69 * ((v73 + (8 * *(_DWORD *)v72)) ^ v180);
        v103 = v180 ^ (v181 >> 47) ^ v181;
LABEL_107:
        v97 = 0x9DDFEA08EB382D69 * v103;
LABEL_108:
        v76 = (v97 ^ (v97 >> 47)) * v96;
        goto LABEL_112;
      }
      v76 = 0x9AE16A3B2F90404FLL;
      if (v73)
      {
        v183 = (0xC949D7C7509E6557 * (v73 + 4 * *((unsigned __int8 *)v72 + v73 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                           * (*(unsigned __int8 *)v72 | ((unint64_t)*((unsigned __int8 *)v72 + (v73 >> 1)) << 8)));
        v76 = 0x9AE16A3B2F90404FLL * (v183 ^ (v183 >> 47));
      }
    }
LABEL_112:
    v141 = *((_QWORD *)&v229 + 1);
    if (!*((_QWORD *)&v229 + 1))
    {
      v143 = 0xAAAAAAAAAAAAAAAALL;
LABEL_155:
      __p[0].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAA01;
      v161 = (std::sub_match<const char *> *)operator new(0x28uLL);
      __p[0].__begin_ = v161;
      __p[0].__end_ = v211;
      v161->first = 0;
      v161->second = (const char *)v76;
      *(_OWORD *)&v161->matched = *(_OWORD *)v214;
      v161[1].second = (const char *)v215;
      v214[0] = 0;
      v214[1] = 0;
      v215 = 0;
      v162 = (float)(unint64_t)(*((_QWORD *)&v230 + 1) + 1);
      if (v141 && (float)(*(float *)&v231 * (float)v141) >= v162)
      {
        v76 = v143;
        v41 = v209;
        v39 = v210;
        goto LABEL_220;
      }
      v163 = (v141 & (v141 - 1)) != 0;
      if (v141 < 3)
        v163 = 1;
      v164 = v163 | (2 * v141);
      v165 = vcvtps_u32_f32(v162 / *(float *)&v231);
      if (v164 <= v165)
        prime = v165;
      else
        prime = v164;
      if (prime == 1)
      {
        prime = 2;
        v41 = v209;
        v39 = v210;
      }
      else
      {
        v41 = v209;
        v39 = v210;
        if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v141 = *((_QWORD *)&v229 + 1);
        }
      }
      if (prime <= v141)
      {
        if (prime >= v141)
          goto LABEL_208;
        v177 = vcvtps_u32_f32((float)*((unint64_t *)&v230 + 1) / *(float *)&v231);
        if (v141 < 3 || (v178 = (uint8x8_t)vcnt_s8((int8x8_t)v141), v178.i16[0] = vaddlv_u8(v178), v178.u32[0] > 1uLL))
        {
          v177 = std::__next_prime(v177);
        }
        else
        {
          v179 = 1 << -(char)__clz(v177 - 1);
          if (v177 >= 2)
            v177 = v179;
        }
        if (prime <= v177)
          prime = v177;
        if (prime >= v141)
        {
          v141 = *((_QWORD *)&v229 + 1);
          v185 = *((_QWORD *)&v229 + 1) - 1;
          if ((*((_QWORD *)&v229 + 1) & (*((_QWORD *)&v229 + 1) - 1)) != 0)
          {
LABEL_218:
            if (v76 >= v141)
              v76 %= v141;
LABEL_220:
            v188 = v229;
            v189 = *(std::sub_match<const char *> ***)(v229 + 8 * v76);
            if (v189)
            {
              v161->first = (const char *)*v189;
            }
            else
            {
              v161->first = (const char *)v230;
              *(_QWORD *)&v230 = v161;
              *(_QWORD *)(v188 + 8 * v76) = v211;
              if (!v161->first)
                goto LABEL_229;
              v190 = *((_QWORD *)v161->first + 1);
              if ((v141 & (v141 - 1)) != 0)
              {
                if (v190 >= v141)
                  v190 %= v141;
              }
              else
              {
                v190 &= v141 - 1;
              }
              v189 = (std::sub_match<const char *> **)(v229 + 8 * v190);
            }
            *v189 = v161;
LABEL_229:
            ++*((_QWORD *)&v230 + 1);
            if ((v215 & 0x8000000000000000) != 0)
              goto LABEL_230;
            goto LABEL_231;
          }
LABEL_209:
          v76 &= v185;
          goto LABEL_220;
        }
        if (!prime)
        {
          v184 = (void *)v229;
          *(_QWORD *)&v229 = 0;
          if (v184)
            operator delete(v184);
          v141 = 0;
          *((_QWORD *)&v229 + 1) = 0;
          v185 = -1;
          goto LABEL_209;
        }
      }
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v167 = operator new(8 * prime);
      v168 = (void *)v229;
      *(_QWORD *)&v229 = v167;
      if (v168)
        operator delete(v168);
      v169 = 0;
      *((_QWORD *)&v229 + 1) = prime;
      do
        *(_QWORD *)(v229 + 8 * v169++) = 0;
      while (prime != v169);
      v170 = (_QWORD **)v230;
      if (!(_QWORD)v230)
      {
LABEL_217:
        v141 = prime;
        v185 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_218;
        goto LABEL_209;
      }
      v171 = *(_QWORD *)(v230 + 8);
      v172 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v173 = v171 & v172;
        *(_QWORD *)(v229 + 8 * v173) = v211;
        for (i = *v170; *v170; i = *v170)
        {
          v175 = i[1] & v172;
          if (v175 == v173)
          {
            v170 = (_QWORD **)i;
          }
          else if (*(_QWORD *)(v229 + 8 * v175))
          {
            *v170 = (_QWORD *)*i;
            v176 = 8 * v175;
            *i = **(_QWORD **)(v229 + v176);
            **(_QWORD **)(v229 + v176) = i;
          }
          else
          {
            *(_QWORD *)(v229 + 8 * v175) = v170;
            v170 = (_QWORD **)i;
            v173 = v175;
          }
        }
        goto LABEL_217;
      }
      if (v171 < prime)
      {
        *(_QWORD *)(v229 + 8 * v171) = v211;
        v182 = *v170;
        if (*v170)
          goto LABEL_212;
        goto LABEL_207;
      }
      v171 %= prime;
      *(_QWORD *)(v229 + 8 * v171) = v211;
      v182 = *v170;
      if (!*v170)
      {
LABEL_207:
        v141 = prime;
LABEL_208:
        v185 = v141 - 1;
        if ((v141 & (v141 - 1)) != 0)
          goto LABEL_218;
        goto LABEL_209;
      }
      while (1)
      {
LABEL_212:
        v187 = v182[1];
        if (v187 >= prime)
          v187 %= prime;
        if (v187 == v171)
          goto LABEL_211;
        if (*(_QWORD *)(v229 + 8 * v187))
        {
          *v170 = (_QWORD *)*v182;
          v186 = 8 * v187;
          *v182 = **(_QWORD **)(v229 + v186);
          **(_QWORD **)(v229 + v186) = v182;
          v182 = v170;
LABEL_211:
          v170 = (_QWORD **)v182;
          v182 = (_QWORD *)*v182;
          if (!v182)
            goto LABEL_217;
        }
        else
        {
          *(_QWORD *)(v229 + 8 * v187) = v170;
          v170 = (_QWORD **)v182;
          v182 = (_QWORD *)*v182;
          v171 = v187;
          if (!v182)
            goto LABEL_217;
        }
      }
    }
    v142 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v229 + 8));
    v142.i16[0] = vaddlv_u8(v142);
    if (v142.u32[0] > 1uLL)
    {
      v143 = v76;
      if (v76 >= *((_QWORD *)&v229 + 1))
        v143 = v76 % *((_QWORD *)&v229 + 1);
    }
    else
    {
      v143 = (*((_QWORD *)&v229 + 1) - 1) & v76;
    }
    v144 = *(uint64_t ***)(v229 + 8 * v143);
    if (!v144)
      goto LABEL_155;
    v145 = *v144;
    if (!*v144)
      goto LABEL_155;
    if (v142.u32[0] < 2uLL)
    {
      v146 = *((_QWORD *)&v229 + 1) - 1;
      while (1)
      {
        v152 = v145[1];
        if (v152 == v76)
        {
          v153 = *((unsigned __int8 *)v145 + 39);
          if ((v153 & 0x80u) == 0)
            v154 = *((unsigned __int8 *)v145 + 39);
          else
            v154 = v145[3];
          if (v154 == v73)
          {
            v155 = (const void **)(v145 + 2);
            if ((v153 & 0x80) != 0)
            {
              v157 = v72;
              v158 = v72;
              v159 = v146;
              v160 = memcmp(*v155, v157, v145[3]);
              v146 = v159;
              v72 = v158;
              if (!v160)
                goto LABEL_153;
            }
            else
            {
              if (!*((_BYTE *)v145 + 39))
                goto LABEL_153;
              v156 = v72;
              while (*(unsigned __int8 *)v155 == *(unsigned __int8 *)v156)
              {
                v155 = (const void **)((char *)v155 + 1);
                v156 = (void **)((char *)v156 + 1);
                if (!--v153)
                  goto LABEL_153;
              }
            }
          }
        }
        else if ((v152 & v146) != v143)
        {
          goto LABEL_155;
        }
        v145 = (uint64_t *)*v145;
        if (!v145)
          goto LABEL_155;
      }
    }
    while (1)
    {
      v147 = v145[1];
      if (v147 == v76)
        break;
      if (v147 >= v141)
        v147 %= v141;
      if (v147 != v143)
        goto LABEL_155;
LABEL_123:
      v145 = (uint64_t *)*v145;
      if (!v145)
        goto LABEL_155;
    }
    v148 = *((unsigned __int8 *)v145 + 39);
    if ((v148 & 0x80u) == 0)
      v149 = *((unsigned __int8 *)v145 + 39);
    else
      v149 = v145[3];
    if (v149 != v73)
      goto LABEL_123;
    v150 = (const void **)(v145 + 2);
    if ((v148 & 0x80) == 0)
    {
      if (!*((_BYTE *)v145 + 39))
        goto LABEL_153;
      v151 = v72;
      while (*(unsigned __int8 *)v150 == *(unsigned __int8 *)v151)
      {
        v150 = (const void **)((char *)v150 + 1);
        v151 = (void **)((char *)v151 + 1);
        if (!--v148)
          goto LABEL_153;
      }
      goto LABEL_123;
    }
    if (memcmp(*v150, v72, v145[3]))
      goto LABEL_123;
LABEL_153:
    v41 = v209;
    v39 = v210;
    if ((v68 & 0x80) != 0)
LABEL_230:
      operator delete(v214[0]);
LABEL_231:
    v52 = *(void **)__dst;
    p_end_cap = v207;
    v42 = v208;
LABEL_232:
    if (v52)
    {
      *(_QWORD *)&__dst[8] = v52;
      operator delete(v52);
    }
    if (++v40 != v39)
      continue;
    break;
  }
LABEL_234:
  v191 = *((_QWORD *)&v230 + 1);
  v192 = (std::__shared_weak_count *)v226;
  if ((_QWORD)v226)
  {
    v193 = (unint64_t *)(v226 + 8);
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  std::locale::~locale(v223);
  v195 = (std::__shared_weak_count *)v228;
  if ((_QWORD)v228)
  {
    v196 = (unint64_t *)(v228 + 8);
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  std::locale::~locale((std::locale *)v227);
  operator delete(v205);
  v198 = (void **)v230;
  if ((_QWORD)v230)
  {
    do
    {
      v204 = (void **)*v198;
      if (*((char *)v198 + 39) < 0)
        operator delete(v198[2]);
      operator delete(v198);
      v198 = v204;
    }
    while (v204);
  }
  v199 = (void *)v229;
  *(_QWORD *)&v229 = 0;
  if (v199)
    operator delete(v199);
  v200 = (void **)v232;
  if (v232)
  {
    v201 = (void **)v233;
    v202 = v232;
    if (v233 != v232)
    {
      do
      {
        if (*((char *)v201 - 1) < 0)
          operator delete(*(v201 - 3));
        v201 -= 3;
      }
      while (v201 != v200);
      v202 = v232;
    }
    v233 = (std::sub_match<const char *> *)v200;
    operator delete(v202);
  }
  return v191;
}

void sub_1B3CDC6BC(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_1B3CDC6C4()
{
  __cxa_end_catch();
  JUMPOUT(0x1B3CDC6CCLL);
}

void sub_1B3CDC6EC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  std::sub_match<const char *> *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::vector<std::ssub_match>::pointer end;
  __int128 v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::__wrap_iter<const char *>::iterator_type i;
  unint64_t v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  _BYTE *v20;
  __int128 *v21;
  BOOL *p_matched;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  void **v32;
  __int128 v33;
  uint64_t v34;
  std::sub_match<const char *> *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::vector<std::ssub_match>::pointer v39;
  std::vector<std::ssub_match>::pointer v40;
  __int128 v41;
  std::__wrap_iter<const char *>::iterator_type v42;
  std::__wrap_iter<const char *>::iterator_type v43;
  unint64_t v44;
  std::sub_match<const char *> *v45;
  std::sub_match<const char *> *v46;
  _BYTE *v47;
  __int128 *v48;
  BOOL *v49;
  unint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void **v62;
  char *v63;
  char *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *__p;
  char *v77;
  unint64_t v78;
  void *v79;
  char *v80;
  unint64_t v81;
  std::locale v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::vector<std::ssub_match> v86[2];
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::vector<std::csub_match> v94[2];
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89 = 0xAAAAAAAAAAAAAA00;
  v86[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  v92 = v5;
  v87 = 0;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  BYTE8(v92) = 0;
  v93 = 0;
  memset(v86, 0, 41);
  v84 = v5;
  v85 = v5;
  *(_OWORD *)&v82[0].__locale_ = v5;
  v83 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v82, a3, 0);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v77 = 0;
  v78 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  v100 = v6;
  v95 = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  LOBYTE(v100) = 0;
  BYTE8(v100) = 0;
  v101 = 0;
  memset(v94, 0, 32);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::sub_match<const char *> *)a1;
  else
    v8 = *(std::sub_match<const char *> **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v94, 0);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v94, 0);
  if (v94[0].__begin_)
  {
    v94[0].__end_ = v94[0].__begin_;
    operator delete(v94[0].__begin_);
  }
  if (v9)
  {
    end = v86[0].__end_;
    begin = v86[0].__begin_;
    if (v86[0].__begin_ != v86[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v94, 0, 24);
          v25 = v80;
          if ((unint64_t)v80 >= v81)
            goto LABEL_38;
          goto LABEL_16;
        }
        i = begin->first.__i_;
        v15 = begin->second.__i_;
        v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v17 > 0x16)
        {
          v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v26 = v17 | 7;
          v27 = v26 + 1;
          v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v94[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v94[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            v25 = v80;
            if ((unint64_t)v80 >= v81)
              goto LABEL_38;
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          v18 = (std::sub_match<const char *> *)v94;
          if (i == v15)
            goto LABEL_33;
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20)
          break;
        v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        v21 = (__int128 *)(i + 16);
        p_matched = &v18->matched;
        v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0))
          goto LABEL_36;
LABEL_37:
        LOBYTE(v19->first) = 0;
        v25 = v80;
        if ((unint64_t)v80 >= v81)
        {
LABEL_38:
          v80 = std::vector<std::string>::__push_back_slow_path<std::string>(&v79, (uint64_t)v94);
          if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
            operator delete(v94[0].__begin_);
          goto LABEL_17;
        }
LABEL_16:
        v14 = *(_OWORD *)&v94[0].__begin_;
        *((_QWORD *)v25 + 2) = v94[0].__end_cap_.__value_;
        *(_OWORD *)v25 = v14;
        v80 = v25 + 24;
LABEL_17:
        if (++begin == end)
          goto LABEL_40;
      }
      v19 = v18;
      v20 = i;
      do
      {
LABEL_36:
        v28 = *v20++;
        LOBYTE(v19->first) = v28;
        v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    v29 = (char *)v79;
    v30 = v80;
    if (v80 - (_BYTE *)v79 != 24)
    {
      if ((char *)v79 + 24 != v80)
      {
        v31 = (char *)v79 + 23;
        do
        {
          v32 = (void **)(v31 - 23);
          if (*v31 < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)(v31 + 1);
          *(_QWORD *)(v31 - 7) = *(_QWORD *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        v30 = v80;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0)
          operator delete(*((void **)v30 - 3));
        v30 -= 24;
      }
      v80 = v29;
    }
    *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v97 = 0xAAAAAAAAAAAAAA00;
    v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    v100 = v33;
    v95 = 0;
    v96 = 0;
    v98 = 0;
    v99 = 0;
    LOBYTE(v100) = 0;
    BYTE8(v100) = 0;
    v101 = 0;
    memset(v94, 0, 32);
    v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0)
      v35 = (std::sub_match<const char *> *)a2;
    else
      v35 = *(std::sub_match<const char *> **)a2;
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
    v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v94, 0);
    v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = a2;
    else
      v38 = *(_QWORD *)a2;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(a2 + 8);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v94, 0);
    if (v94[0].__begin_)
    {
      v94[0].__end_ = v94[0].__begin_;
      operator delete(v94[0].__begin_);
    }
    if (v36)
    {
      v40 = v86[0].__end_;
      v39 = v86[0].__begin_;
      if (v86[0].__begin_ != v86[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v94, 0, 24);
            v52 = v77;
            if ((unint64_t)v77 >= v78)
              goto LABEL_89;
            goto LABEL_67;
          }
          v43 = v39->first.__i_;
          v42 = v39->second.__i_;
          v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v44 > 0x16)
          {
            v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v53 = v44 | 7;
            v54 = v53 + 1;
            v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v94[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v94[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              v52 = v77;
              if ((unint64_t)v77 >= v78)
                goto LABEL_89;
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            v45 = (std::sub_match<const char *> *)v94;
            if (v43 == v42)
              goto LABEL_84;
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20)
            break;
          v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          v48 = (__int128 *)(v43 + 16);
          v49 = &v45->matched;
          v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_87;
LABEL_88:
          LOBYTE(v46->first) = 0;
          v52 = v77;
          if ((unint64_t)v77 >= v78)
          {
LABEL_89:
            v77 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v94);
            if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
              operator delete(v94[0].__begin_);
            goto LABEL_68;
          }
LABEL_67:
          v41 = *(_OWORD *)&v94[0].__begin_;
          *((_QWORD *)v52 + 2) = v94[0].__end_cap_.__value_;
          *(_OWORD *)v52 = v41;
          v77 = v52 + 24;
LABEL_68:
          if (++v39 == v40)
            goto LABEL_91;
        }
        v46 = v45;
        v47 = v43;
        do
        {
LABEL_87:
          v55 = *v47++;
          LOBYTE(v46->first) = v55;
          v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      v57 = (char *)__p;
      v56 = v77;
      if (v77 - (_BYTE *)__p == 24)
      {
        v58 = (char *)v79;
        v59 = v80;
        v60 = 1;
        if (v79 != v80)
          goto LABEL_117;
LABEL_105:
        if (v57)
          goto LABEL_106;
LABEL_134:
        v64 = (char *)v79;
        if (v79)
          goto LABEL_135;
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v77)
      {
        v61 = (char *)__p + 23;
        do
        {
          v62 = (void **)(v61 - 23);
          if (*v61 < 0)
            operator delete(*v62);
          *(_OWORD *)v62 = *(_OWORD *)(v61 + 1);
          *(_QWORD *)(v61 - 7) = *(_QWORD *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        v56 = v77;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0)
          operator delete(*((void **)v56 - 3));
        v56 -= 24;
      }
      v77 = v57;
      v57 = (char *)__p;
      v58 = (char *)v79;
      v59 = v80;
      v60 = 1;
      if (v79 == v80)
        goto LABEL_105;
      while (1)
      {
LABEL_117:
        v66 = v58[23];
        if ((v66 & 0x80u) == 0)
          v67 = v58[23];
        else
          v67 = *((_QWORD *)v58 + 1);
        v68 = v57[23];
        v69 = (char)v68;
        if ((v68 & 0x80u) != 0)
          v68 = *((_QWORD *)v57 + 1);
        if (v67 != v68)
          break;
        if (v69 >= 0)
          v70 = v57;
        else
          v70 = *(char **)v57;
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((_QWORD *)v58 + 1)))
            break;
        }
        else if (v58[23])
        {
          v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71)
              goto LABEL_116;
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59)
          goto LABEL_133;
      }
    }
  }
  v60 = 0;
LABEL_133:
  v57 = (char *)__p;
  if (!__p)
    goto LABEL_134;
LABEL_106:
  v63 = v77;
  if (v77 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0)
        operator delete(*((void **)v63 - 3));
      v63 -= 24;
    }
    while (v63 != v57);
    v77 = v57;
    operator delete(__p);
    v64 = (char *)v79;
    if (v79)
      goto LABEL_135;
LABEL_108:
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  v77 = v57;
  operator delete(v57);
  v64 = (char *)v79;
  if (!v79)
    goto LABEL_108;
LABEL_135:
  v72 = v80;
  if (v80 == v64)
  {
    v80 = v64;
    operator delete(v64);
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0)
      operator delete(*((void **)v72 - 3));
    v72 -= 24;
  }
  while (v72 != v64);
  v80 = v64;
  operator delete(v79);
  v65 = (std::__shared_weak_count *)v85;
  if ((_QWORD)v85)
  {
LABEL_142:
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_146:
  std::locale::~locale(v82);
  if (v86[0].__begin_)
  {
    v86[0].__end_ = v86[0].__begin_;
    operator delete(v86[0].__begin_);
  }
  return v60;
}

void sub_1B3CDCF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(_QWORD *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::string::__erase_external_with_move(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  int v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  std::string::size_type v8;
  std::string::size_type v9;

  if (!__n)
    return;
  v4 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v4 < 0)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = size - __pos;
    if (size - __pos <= __n)
      goto LABEL_8;
  }
  else
  {
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = this;
    v7 = size - __pos;
    if (size - __pos >= __n)
      v8 = __n;
    else
      v8 = HIBYTE(this->__r_.__value_.__r.__words[2]) - __pos;
    if (v7 <= __n)
      goto LABEL_8;
  }
  memmove((char *)v6 + __pos, (char *)v6 + __pos + v8, v7 - v8);
  LOBYTE(v4) = *((_BYTE *)&this->__r_.__value_.__s + 23);
LABEL_8:
  v9 = size - v8;
  if ((v4 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = v9;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
  v6->__r_.__value_.__s.__data_[v9] = 0;
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(uint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t j;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  __n128 *v27;
  size_t v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  unint64_t v35;
  const void **v36;
  const void **v37;
  const void **v38;
  const void *v39;
  const void **v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  const void **v45;
  size_t v46;
  size_t v47;
  int v48;
  const void **v49;
  __int128 v50;
  __int128 v51;
  __n128 *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  unint64_t v57;
  size_t v58;
  int v59;
  const void **v60;
  const void *v61;
  const void **v62;
  unint64_t v63;
  size_t v64;
  int v65;
  __n128 *v66;
  __n128 v67;
  __n128 v68;
  BOOL v69;
  __n128 v70;
  const void **v71;
  __n128 *v72;
  size_t v73;
  size_t v74;
  const void *v75;
  const void **v76;
  const void **v77;
  size_t v78;
  size_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  size_t v85;
  int v86;
  const void **k;
  const void **v88;
  const void **v89;
  size_t v90;
  size_t v91;
  int v92;
  const void *v93;
  __int128 v94;
  __int128 v95;
  __n128 *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  const void *v100;
  unint64_t v101;
  size_t v102;
  int v103;
  const void **v104;
  const void *v105;
  const void **v106;
  const void *v107;
  size_t v108;
  int v109;
  __n128 *v110;
  __n128 v111;
  int v112;
  const void *v113;
  size_t v114;
  size_t v115;
  int v116;
  __n128 *v117;
  int v118;
  const void **v119;
  size_t v120;
  int v121;
  void *v122;
  const void *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  int v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 *v131;
  __n128 *v132;
  int v133;
  const void *v134;
  size_t v135;
  int v136;
  __n128 *v137;
  size_t v138;
  size_t v139;
  int v140;
  __n128 v141;
  __n128 *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  int64_t v151;
  int64_t v152;
  const void **v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const void **v158;
  int v159;
  const void *v160;
  unint64_t v161;
  int v162;
  const void *v163;
  unint64_t v164;
  size_t v165;
  int v166;
  BOOL v167;
  uint64_t v168;
  int v169;
  const void *v170;
  size_t v171;
  int v172;
  const void *v173;
  size_t v174;
  size_t v175;
  int v176;
  BOOL v177;
  __n128 v178;
  __int128 v179;
  unint64_t v180;
  __n128 *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  const void *v186;
  unint64_t v187;
  int v188;
  const void *v189;
  unint64_t v190;
  size_t v191;
  int v192;
  BOOL v193;
  int v194;
  const void *v195;
  size_t v196;
  size_t v197;
  int v198;
  int64_t v199;
  uint64_t v200;
  uint64_t v201;
  __n128 *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const void *v206;
  size_t v207;
  int v208;
  const void *v209;
  size_t v210;
  size_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  const void *v218;
  size_t v219;
  int v220;
  __n128 *v221;
  size_t v222;
  size_t v223;
  int v224;
  __n128 v225;
  __n128 *v226;
  size_t v227;
  __n128 v228;
  __int128 v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  const void *v233;
  size_t v234;
  size_t v235;
  int v236;
  const void *v237;
  const void **v238;
  int v239;
  const void *v240;
  size_t v241;
  int v242;
  const void *v243;
  size_t v244;
  size_t v245;
  int v246;
  __n128 v247;
  __n128 *v248;
  size_t v249;
  uint64_t i;
  int v251;
  const void *v252;
  size_t v253;
  size_t v254;
  int v255;
  const void *v256;
  uint64_t v257;
  const void **v258;
  const void **v259;
  size_t v261;
  const void *v262;
  uint64_t v263;
  __n128 *v264;
  const void *v265;
  const void **v266;
  int64_t v267;
  const void *v268;
  const void **v269;
  const void **v270;
  __n128 v271;
  int64_t v272;

LABEL_1:
  v266 = a2 - 3;
  v269 = a2;
  v258 = a2 - 9;
  v259 = a2 - 6;
  j = a1;
  while (2)
  {
    a1 = j;
    v9 = (uint64_t)a2 - j;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v117 = (__n128 *)(a2 - 3);
        v118 = *((char *)a2 - 1);
        if (v118 >= 0)
          v119 = a2 - 3;
        else
          v119 = (const void **)*(a2 - 3);
        if (v118 >= 0)
          v120 = *((unsigned __int8 *)a2 - 1);
        else
          v120 = (size_t)*(a2 - 2);
        v121 = *(char *)(a1 + 23);
        v122 = *(void **)a1;
        v123 = *(const void **)(a1 + 8);
        if (v121 >= 0)
          v124 = (const void *)a1;
        else
          v124 = *(const void **)a1;
        if (v121 >= 0)
          v125 = *(unsigned __int8 *)(a1 + 23);
        else
          v125 = *(_QWORD *)(a1 + 8);
        if (v125 >= v120)
          v126 = v120;
        else
          v126 = v125;
        v127 = memcmp(v119, v124, v126);
        if (v127)
        {
          if (v127 < 0)
            return result;
        }
        else if (v120 <= v125)
        {
          return result;
        }
        v256 = *(const void **)(a1 + 16);
        v257 = (uint64_t)*(a2 - 1);
        result = *v117;
        *(__n128 *)a1 = *v117;
        *(_QWORD *)(a1 + 16) = v257;
        *(a2 - 3) = v122;
        *(a2 - 2) = v123;
        *(a2 - 1) = v256;
        return result;
      case 3uLL:
        result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v266).n128_u64[0];
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v266).n128_u64[0];
        return result;
      case 5uLL:
        result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v266).n128_u64[0];
        return result;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return result;
            v128 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2)
              return result;
            v129 = 0;
            v130 = a1;
            while (1)
            {
              v132 = (__n128 *)v130;
              v130 = (uint64_t)v128;
              v133 = v132[2].n128_i8[15];
              if (v133 >= 0)
                v134 = v128;
              else
                v134 = (const void *)v132[1].n128_u64[1];
              if (v133 >= 0)
                v135 = v132[2].n128_u8[15];
              else
                v135 = v132[2].n128_u64[0];
              v136 = v132[1].n128_i8[7];
              if (v136 >= 0)
                v137 = v132;
              else
                v137 = (__n128 *)v132->n128_u64[0];
              if (v136 >= 0)
                v138 = v132[1].n128_u8[7];
              else
                v138 = v132->n128_u64[1];
              if (v138 >= v135)
                v139 = v135;
              else
                v139 = v138;
              v140 = memcmp(v134, v137, v139);
              if (v140)
              {
                if (v140 < 0)
                  goto LABEL_259;
              }
              else if (v135 <= v138)
              {
                goto LABEL_259;
              }
              v141 = *(__n128 *)v130;
              v272 = *(_QWORD *)(v130 + 16);
              v271 = v141;
              if (v272 >= 0)
                v142 = &v271;
              else
                v142 = (__n128 *)v141.n128_u64[0];
              if (v272 >= 0)
                v143 = HIBYTE(v272);
              else
                v143 = v141.n128_u64[1];
              *(_QWORD *)(v130 + 16) = v132[1].n128_u64[0];
              *(__n128 *)v130 = *v132;
              v132[1].n128_u8[7] = 0;
              v132->n128_u8[0] = 0;
              v131 = (__n128 *)a1;
              if (v132 != (__n128 *)a1)
              {
                v144 = v129;
                while (1)
                {
                  v145 = a1 + v144;
                  v146 = *(char *)(a1 + v144 - 1);
                  if (v146 >= 0)
                    v147 = (const void *)(a1 + v144 - 24);
                  else
                    v147 = *(const void **)(a1 + v144 - 24);
                  if (v146 >= 0)
                    v148 = *(unsigned __int8 *)(a1 + v144 - 1);
                  else
                    v148 = *(_QWORD *)(a1 + v144 - 16);
                  if (v148 >= v143)
                    v149 = v143;
                  else
                    v149 = v148;
                  v150 = memcmp(v142, v147, v149);
                  if (v150)
                  {
                    if (v150 < 0)
                    {
                      v131 = (__n128 *)(a1 + v144);
                      break;
                    }
                  }
                  else if (v143 <= v148)
                  {
                    v131 = v132;
                    break;
                  }
                  v132 = (__n128 *)((char *)v132 - 24);
                  *(_OWORD *)v145 = *(_OWORD *)(a1 + v144 - 24);
                  *(_QWORD *)(v145 + 16) = *(_QWORD *)(a1 + v144 - 8);
                  *(_BYTE *)(v145 - 1) = 0;
                  *(_BYTE *)(v145 - 24) = 0;
                  v144 -= 24;
                  if (!v144)
                  {
                    v131 = (__n128 *)a1;
                    break;
                  }
                }
              }
              result = v271;
              v131[1].n128_u64[0] = v272;
              *v131 = result;
LABEL_259:
              v128 = (const void *)(v130 + 24);
              v129 += 24;
              if ((const void **)(v130 + 24) == v269)
                return result;
            }
          }
          if ((const void **)a1 == a2)
            return result;
          v237 = (const void *)(a1 + 24);
          if ((const void **)(a1 + 24) == a2)
            return result;
LABEL_471:
          v238 = (const void **)a1;
          a1 = (uint64_t)v237;
          v239 = *((char *)v238 + 47);
          if (v239 >= 0)
            v240 = v237;
          else
            v240 = v238[3];
          if (v239 >= 0)
            v241 = *((unsigned __int8 *)v238 + 47);
          else
            v241 = (size_t)v238[4];
          v242 = *((char *)v238 + 23);
          if (v242 >= 0)
            v243 = v238;
          else
            v243 = *v238;
          if (v242 >= 0)
            v244 = *((unsigned __int8 *)v238 + 23);
          else
            v244 = (size_t)v238[1];
          if (v244 >= v241)
            v245 = v241;
          else
            v245 = v244;
          v246 = memcmp(v240, v243, v245);
          if (v246)
          {
            if (v246 < 0)
              goto LABEL_470;
          }
          else if (v241 <= v244)
          {
            goto LABEL_470;
          }
          v247 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v247;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v272 >= 0)
            v248 = &v271;
          else
            v248 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v249 = HIBYTE(v272);
          else
            v249 = v271.n128_u64[1];
          for (i = a1; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v251 = *(char *)(i - 25);
            if (v251 >= 0)
              v252 = (const void *)(i - 48);
            else
              v252 = *(const void **)(i - 48);
            if (v251 >= 0)
              v253 = *(unsigned __int8 *)(i - 25);
            else
              v253 = *(_QWORD *)(i - 40);
            if (v253 >= v249)
              v254 = v249;
            else
              v254 = v253;
            v255 = memcmp(v248, v252, v254);
            if (v255)
            {
              if (v255 < 0)
              {
LABEL_469:
                result = v271;
                *(_QWORD *)(i - 8) = v272;
                *(__n128 *)(i - 24) = result;
LABEL_470:
                v237 = (const void *)(a1 + 24);
                if ((const void **)(a1 + 24) == a2)
                  return result;
                goto LABEL_471;
              }
            }
            else if (v249 <= v253)
            {
              goto LABEL_469;
            }
          }
        }
        if (!a3)
        {
          if ((const void **)a1 == a2)
            return result;
          v151 = (v10 - 2) >> 1;
          v152 = v151;
          while (1)
          {
            v154 = v152;
            if (v151 < v152)
              goto LABEL_306;
            v155 = (2 * v152) | 1;
            v156 = a1 + 24 * v155;
            v157 = 2 * v152 + 2;
            if (v157 >= (uint64_t)v10)
              goto LABEL_330;
            v158 = (const void **)(v156 + 24);
            v159 = *(char *)(v156 + 23);
            v160 = v159 >= 0 ? (const void *)(a1 + 24 * v155) : *(const void **)v156;
            v161 = v159 >= 0 ? *(unsigned __int8 *)(v156 + 23) : *(_QWORD *)(v156 + 8);
            v162 = *(char *)(v156 + 47);
            v163 = v162 >= 0 ? (const void *)(v156 + 24) : *(const void **)(v156 + 24);
            v164 = v162 >= 0 ? *(unsigned __int8 *)(v156 + 47) : *(_QWORD *)(v156 + 32);
            v165 = v164 >= v161 ? v161 : v164;
            v166 = memcmp(v160, v163, v165);
            if (v166)
              break;
            v167 = v161 >= v164;
            if (v161 == v164)
            {
              v158 = (const void **)(a1 + 24 * v155);
              v157 = (2 * v154) | 1;
              a2 = v269;
              goto LABEL_331;
            }
            a2 = v269;
            if (!v167)
              goto LABEL_330;
LABEL_331:
            v168 = a1 + 24 * v154;
            v169 = *((char *)v158 + 23);
            if (v169 >= 0)
              v170 = v158;
            else
              v170 = *v158;
            if (v169 >= 0)
              v171 = *((unsigned __int8 *)v158 + 23);
            else
              v171 = (size_t)v158[1];
            v172 = *(char *)(v168 + 23);
            if (v172 >= 0)
              v173 = (const void *)(a1 + 24 * v154);
            else
              v173 = *(const void **)v168;
            if (v172 >= 0)
              v174 = *(unsigned __int8 *)(v168 + 23);
            else
              v174 = *(_QWORD *)(v168 + 8);
            if (v174 >= v171)
              v175 = v171;
            else
              v175 = v174;
            v176 = memcmp(v170, v173, v175);
            if (v176)
            {
              v151 = (v10 - 2) >> 1;
              if (v176 < 0)
                goto LABEL_350;
            }
            else
            {
              v177 = v171 > v174;
              v151 = (v10 - 2) >> 1;
              if (!v177)
              {
LABEL_350:
                v178 = *(__n128 *)v168;
                v272 = *(_QWORD *)(v168 + 16);
                v271 = v178;
                *(_QWORD *)(v168 + 8) = 0;
                *(_QWORD *)(v168 + 16) = 0;
                *(_QWORD *)v168 = 0;
                v179 = *(_OWORD *)v158;
                *(_QWORD *)(v168 + 16) = v158[2];
                *(_OWORD *)v168 = v179;
                *((_BYTE *)v158 + 23) = 0;
                *(_BYTE *)v158 = 0;
                if (v151 >= v157)
                {
                  v180 = HIBYTE(v272);
                  v181 = &v271;
                  if (v272 < 0)
                  {
                    v180 = v271.n128_u64[1];
                    v181 = (__n128 *)v271.n128_u64[0];
                  }
                  v261 = v180;
                  v264 = v181;
                  v267 = v154;
                  while (1)
                  {
                    v183 = (2 * v157) | 1;
                    v184 = a1 + 24 * v183;
                    v157 = 2 * v157 + 2;
                    if (v157 >= (uint64_t)v10)
                      goto LABEL_378;
                    v153 = (const void **)(v184 + 24);
                    v185 = *(char *)(v184 + 23);
                    v186 = v185 >= 0 ? (const void *)(a1 + 24 * v183) : *(const void **)v184;
                    v187 = v185 >= 0 ? *(unsigned __int8 *)(v184 + 23) : *(_QWORD *)(v184 + 8);
                    v188 = *(char *)(v184 + 47);
                    v189 = v188 >= 0 ? (const void *)(v184 + 24) : *(const void **)(v184 + 24);
                    v190 = v188 >= 0 ? *(unsigned __int8 *)(v184 + 47) : *(_QWORD *)(v184 + 32);
                    v191 = v190 >= v187 ? v187 : v190;
                    v192 = memcmp(v186, v189, v191);
                    if (v192)
                      break;
                    v193 = v187 >= v190;
                    if (v187 == v190)
                    {
                      v153 = (const void **)(a1 + 24 * v183);
                      v157 = v183;
                      a2 = v269;
                      v151 = (v10 - 2) >> 1;
                      goto LABEL_379;
                    }
                    a2 = v269;
                    v151 = (v10 - 2) >> 1;
                    if (!v193)
                      goto LABEL_378;
LABEL_379:
                    v194 = *((char *)v153 + 23);
                    if (v194 >= 0)
                      v195 = v153;
                    else
                      v195 = *v153;
                    if (v194 >= 0)
                      v196 = *((unsigned __int8 *)v153 + 23);
                    else
                      v196 = (size_t)v153[1];
                    if (v261 >= v196)
                      v197 = v196;
                    else
                      v197 = v261;
                    v198 = memcmp(v195, v264, v197);
                    if (v198)
                    {
                      v154 = v267;
                      if ((v198 & 0x80000000) == 0)
                        goto LABEL_304;
                    }
                    else
                    {
                      v154 = v267;
                      if (v196 > v261)
                        goto LABEL_304;
                    }
                    v182 = *(_OWORD *)v153;
                    v158[2] = v153[2];
                    *(_OWORD *)v158 = v182;
                    *((_BYTE *)v153 + 23) = 0;
                    *(_BYTE *)v153 = 0;
                    v158 = v153;
                    if (v151 < v157)
                      goto LABEL_305;
                  }
                  a2 = v269;
                  v151 = (v10 - 2) >> 1;
                  if ((v192 & 0x80000000) == 0)
                    goto LABEL_379;
LABEL_378:
                  v153 = (const void **)(a1 + 24 * v183);
                  v157 = v183;
                  goto LABEL_379;
                }
LABEL_304:
                v153 = v158;
LABEL_305:
                result = v271;
                v153[2] = (const void *)v272;
                *(__n128 *)v153 = result;
              }
            }
LABEL_306:
            v152 = v154 - 1;
            if (!v154)
            {
              v199 = v9 / 0x18uLL;
              while (2)
              {
                if (v199 < 2)
                  goto LABEL_393;
                v200 = 0;
                v268 = *(const void **)a1;
                v270 = a2;
                v262 = *(const void **)(a1 + 16);
                v265 = *(const void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v201 = a1;
                *(_QWORD *)a1 = 0;
LABEL_399:
                v203 = v201 + 24 * v200 + 24;
                v204 = (2 * v200) | 1;
                v200 = 2 * v200 + 2;
                if (v200 >= v199)
                  goto LABEL_397;
                v202 = (__n128 *)(v203 + 24);
                v205 = *(char *)(v203 + 23);
                if (v205 >= 0)
                  v206 = (const void *)v203;
                else
                  v206 = *(const void **)v203;
                if (v205 >= 0)
                  v207 = *(unsigned __int8 *)(v203 + 23);
                else
                  v207 = *(_QWORD *)(v203 + 8);
                v208 = *(char *)(v203 + 47);
                if (v208 >= 0)
                  v209 = (const void *)(v203 + 24);
                else
                  v209 = *(const void **)(v203 + 24);
                if (v208 >= 0)
                  v210 = *(unsigned __int8 *)(v203 + 47);
                else
                  v210 = *(_QWORD *)(v203 + 32);
                if (v210 >= v207)
                  v211 = v207;
                else
                  v211 = v210;
                v212 = memcmp(v206, v209, v211);
                if (v212)
                {
                  if ((v212 & 0x80000000) == 0)
                    goto LABEL_417;
LABEL_397:
                  v202 = (__n128 *)v203;
                  v200 = v204;
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                  {
LABEL_398:
                    result = *v202;
                    *(_QWORD *)(v201 + 16) = v202[1].n128_u64[0];
                    *(__n128 *)v201 = result;
                    v202[1].n128_u8[7] = 0;
                    v202->n128_u8[0] = 0;
                    v201 = (uint64_t)v202;
                    if (v200 > (uint64_t)((unint64_t)(v199 - 2) >> 1))
                    {
                      if (v202 == (__n128 *)(a2 - 3))
                      {
                        v202->n128_u64[0] = (unint64_t)v268;
                        v202->n128_u64[1] = (unint64_t)v265;
                        v202[1].n128_u64[0] = (unint64_t)v262;
                      }
                      else
                      {
                        result = *(__n128 *)(a2 - 3);
                        v202[1].n128_u64[0] = (unint64_t)*(a2 - 1);
                        *v202 = result;
                        *(a2 - 3) = v268;
                        *(a2 - 2) = v265;
                        *(a2 - 1) = v262;
                        v213 = (uint64_t)&v202[1].n128_i64[1] - a1;
                        if (v213 >= 25)
                        {
                          v214 = v213 / 0x18uLL - 2;
                          v215 = v214 >> 1;
                          v216 = a1 + 24 * (v214 >> 1);
                          v217 = *(char *)(v216 + 23);
                          if (v217 >= 0)
                            v218 = (const void *)(a1 + 24 * (v214 >> 1));
                          else
                            v218 = *(const void **)v216;
                          if (v217 >= 0)
                            v219 = *(unsigned __int8 *)(v216 + 23);
                          else
                            v219 = *(_QWORD *)(v216 + 8);
                          v220 = v202[1].n128_i8[7];
                          if (v220 >= 0)
                            v221 = v202;
                          else
                            v221 = (__n128 *)v202->n128_u64[0];
                          if (v220 >= 0)
                            v222 = v202[1].n128_u8[7];
                          else
                            v222 = v202->n128_u64[1];
                          if (v222 >= v219)
                            v223 = v219;
                          else
                            v223 = v222;
                          v224 = memcmp(v218, v221, v223);
                          if (v224)
                          {
                            if (v224 < 0)
                              goto LABEL_393;
LABEL_443:
                            v225 = *v202;
                            v272 = v202[1].n128_i64[0];
                            v271 = v225;
                            v202->n128_u64[1] = 0;
                            v202[1].n128_u64[0] = 0;
                            v202->n128_u64[0] = 0;
                            if (v272 >= 0)
                              v226 = &v271;
                            else
                              v226 = (__n128 *)v271.n128_u64[0];
                            if (v272 >= 0)
                              v227 = HIBYTE(v272);
                            else
                              v227 = v271.n128_u64[1];
                            v228 = *(__n128 *)v216;
                            v202[1].n128_u64[0] = *(_QWORD *)(v216 + 16);
                            *v202 = v228;
                            *(_BYTE *)(v216 + 23) = 0;
                            *(_BYTE *)v216 = 0;
                            if (v214 >= 2)
                            {
                              while (1)
                              {
                                v230 = v215 - 1;
                                v215 = (v215 - 1) >> 1;
                                v231 = a1 + 24 * v215;
                                v232 = *(char *)(v231 + 23);
                                if (v232 >= 0)
                                  v233 = (const void *)(a1 + 24 * v215);
                                else
                                  v233 = *(const void **)v231;
                                if (v232 >= 0)
                                  v234 = *(unsigned __int8 *)(v231 + 23);
                                else
                                  v234 = *(_QWORD *)(v231 + 8);
                                if (v227 >= v234)
                                  v235 = v234;
                                else
                                  v235 = v227;
                                v236 = memcmp(v233, v226, v235);
                                if (v236)
                                {
                                  if (v236 < 0)
                                    break;
                                }
                                else if (v234 <= v227)
                                {
                                  break;
                                }
                                v229 = *(_OWORD *)v231;
                                *(_QWORD *)(v216 + 16) = *(_QWORD *)(v231 + 16);
                                *(_OWORD *)v216 = v229;
                                *(_BYTE *)(v231 + 23) = 0;
                                *(_BYTE *)v231 = 0;
                                v216 = a1 + 24 * v215;
                                if (v230 <= 1)
                                  goto LABEL_465;
                              }
                            }
                            v231 = v216;
LABEL_465:
                            result = v271;
                            *(_QWORD *)(v231 + 16) = v272;
                            *(__n128 *)v231 = result;
                            a2 = v270;
                          }
                          else if (v219 > v222)
                          {
                            goto LABEL_443;
                          }
                        }
                      }
LABEL_393:
                      a2 -= 3;
                      v177 = (unint64_t)v199-- > 2;
                      if (!v177)
                        return result;
                      continue;
                    }
                    goto LABEL_399;
                  }
                }
                else
                {
                  if (v207 == v210 || v207 < v210)
                    goto LABEL_397;
LABEL_417:
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                    goto LABEL_398;
                }
                break;
              }
              operator delete(*(void **)v201);
              goto LABEL_398;
            }
          }
          a2 = v269;
          if ((v166 & 0x80000000) == 0)
            goto LABEL_331;
LABEL_330:
          v158 = (const void **)(a1 + 24 * v155);
          v157 = (2 * v154) | 1;
          goto LABEL_331;
        }
        v11 = v10 >> 1;
        v12 = a1 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v12, a1, v266);
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v12, v266);
          v13 = 24 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v13 + a1 - 24, v259);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v13, v258);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v13 + a1 - 24, v12, (const void **)(a1 + 24 + v13));
          v14 = *(void **)a1;
          v15 = *(_OWORD *)(a1 + 8);
          v16 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = v16;
          *(_QWORD *)v12 = v14;
          *(_OWORD *)(v12 + 8) = v15;
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        v17 = *(char *)(a1 - 1);
        if (v17 >= 0)
          v18 = (const void *)(a1 - 24);
        else
          v18 = *(const void **)(a1 - 24);
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a1 - 1);
        else
          v19 = *(_QWORD *)(a1 - 16);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (const void *)a1;
        else
          v21 = *(const void **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        v24 = memcmp(v18, v21, v23);
        if (v24)
        {
          if ((v24 & 0x80000000) == 0)
            goto LABEL_26;
LABEL_124:
          v70 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v70;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v71 = a2;
          if (v272 >= 0)
            v72 = &v271;
          else
            v72 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v73 = HIBYTE(v272);
          else
            v73 = v271.n128_u64[1];
          v74 = *((unsigned __int8 *)v71 - 1);
          v76 = (const void **)*(v71 - 3);
          v75 = *(v71 - 2);
          if ((v74 & 0x80u) == 0)
            v77 = v266;
          else
            v77 = (const void **)*(v71 - 3);
          if ((v74 & 0x80u) == 0)
            v78 = *((unsigned __int8 *)v71 - 1);
          else
            v78 = (size_t)*(v71 - 2);
          if (v78 >= v73)
            v79 = v73;
          else
            v79 = v78;
          v80 = memcmp(v72, v77, v79);
          if (v80)
          {
            if ((v80 & 0x80000000) == 0)
              goto LABEL_141;
          }
          else if (v73 > v78)
          {
LABEL_141:
            v81 = a1 + 24;
            do
            {
              while (1)
              {
                j = v81;
                v82 = *(unsigned __int8 *)(v81 + 23);
                v83 = (v82 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v84 = (v82 & 0x80u) == 0 ? v82 : *(_QWORD *)(j + 8);
                v85 = v84 >= v73 ? v73 : v84;
                v86 = memcmp(v72, v83, v85);
                v81 = j + 24;
                if (v86)
                  break;
                if (v73 > v84)
                  goto LABEL_154;
              }
            }
            while (v86 < 0);
            goto LABEL_154;
          }
          for (j = a1 + 24; j < (unint64_t)v269; j += 24)
          {
            v112 = *(char *)(j + 23);
            if (v112 >= 0)
              v113 = (const void *)j;
            else
              v113 = *(const void **)j;
            if (v112 >= 0)
              v114 = *(unsigned __int8 *)(j + 23);
            else
              v114 = *(_QWORD *)(j + 8);
            if (v114 >= v73)
              v115 = v73;
            else
              v115 = v114;
            v116 = memcmp(v72, v113, v115);
            if (v116)
            {
              if ((v116 & 0x80000000) == 0)
                break;
            }
            else if (v73 > v114)
            {
              break;
            }
          }
LABEL_154:
          k = v269;
          if (j < (unint64_t)v269)
          {
            for (k = v266; ; v75 = k[1])
            {
              if ((v74 & 0x80u) == 0)
                v89 = k;
              else
                v89 = v76;
              if ((v74 & 0x80u) == 0)
                v90 = v74;
              else
                v90 = (size_t)v75;
              if (v90 >= v73)
                v91 = v73;
              else
                v91 = v90;
              v92 = memcmp(v72, v89, v91);
              if (v92)
              {
                if (v92 < 0)
                  break;
              }
              else if (v73 <= v90)
              {
                break;
              }
              v88 = (const void **)*(k - 3);
              k -= 3;
              v76 = v88;
              v74 = *((unsigned __int8 *)k + 23);
            }
          }
          if (j < (unint64_t)k)
          {
            v93 = *(const void **)j;
            do
            {
              v94 = *(_OWORD *)(j + 8);
              v95 = *(_OWORD *)k;
              *(_QWORD *)(j + 16) = k[2];
              *(_OWORD *)j = v95;
              *k = v93;
              *(_OWORD *)(k + 1) = v94;
              if (v272 >= 0)
                v96 = &v271;
              else
                v96 = (__n128 *)v271.n128_u64[0];
              if (v272 >= 0)
                v97 = HIBYTE(v272);
              else
                v97 = v271.n128_u64[1];
              v98 = j + 24;
              do
              {
                while (1)
                {
                  j = v98;
                  v99 = *(unsigned __int8 *)(v98 + 23);
                  v93 = *(const void **)j;
                  v100 = (v99 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                  v101 = (v99 & 0x80u) == 0 ? v99 : *(_QWORD *)(j + 8);
                  v102 = v101 >= v97 ? v97 : v101;
                  v103 = memcmp(v96, v100, v102);
                  v98 = j + 24;
                  if (v103)
                    break;
                  if (v97 > v101)
                    goto LABEL_191;
                }
              }
              while (v103 < 0);
LABEL_191:
              v104 = k - 3;
              do
              {
                while (1)
                {
                  k = v104;
                  v105 = (const void *)*((unsigned __int8 *)v104 + 23);
                  v106 = (char)v105 >= 0 ? k : (const void **)*k;
                  v107 = (char)v105 >= 0 ? v105 : k[1];
                  v108 = (unint64_t)v107 >= v97 ? v97 : (size_t)v107;
                  v109 = memcmp(v96, v106, v108);
                  v104 = k - 3;
                  if (v109)
                    break;
                  if (v97 <= (unint64_t)v107)
                    goto LABEL_171;
                }
              }
              while ((v109 & 0x80000000) == 0);
LABEL_171:
              ;
            }
            while (j < (unint64_t)k);
          }
          v110 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v269;
            a3 = v263;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v111 = *v110;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v111;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
            a2 = v269;
            a3 = v263;
          }
          a4 = 0;
          result = v271;
          *(_QWORD *)(j - 8) = v272;
          *v110 = result;
          continue;
        }
        if (v19 <= v22)
          goto LABEL_124;
LABEL_26:
        v25 = 0;
        v26 = *(__n128 *)a1;
        v272 = *(_QWORD *)(a1 + 16);
        v271 = v26;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v272 >= 0)
          v27 = &v271;
        else
          v27 = (__n128 *)v271.n128_u64[0];
        if (v272 >= 0)
          v28 = HIBYTE(v272);
        else
          v28 = v271.n128_u64[1];
        while (2)
        {
          v29 = *(const void **)(a1 + v25 + 24);
          v30 = *(char *)(a1 + v25 + 47);
          if (v30 >= 0)
            v31 = (const void *)(a1 + v25 + 24);
          else
            v31 = *(const void **)(a1 + v25 + 24);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + v25 + 47);
          else
            v32 = *(_QWORD *)(a1 + v25 + 32);
          if (v28 >= v32)
            v33 = v32;
          else
            v33 = v28;
          v34 = memcmp(v31, v27, v33);
          if (!v34)
          {
            if (v32 <= v28)
              goto LABEL_45;
LABEL_33:
            v25 += 24;
            continue;
          }
          break;
        }
        if ((v34 & 0x80000000) == 0)
          goto LABEL_33;
LABEL_45:
        v35 = a1 + v25 + 24;
        v36 = v266;
        if (v25)
        {
          do
          {
            while (1)
            {
              v37 = v36;
              v44 = (const void *)*((unsigned __int8 *)v36 + 23);
              v45 = (char)v44 >= 0 ? v37 : (const void **)*v37;
              v46 = (size_t)((char)v44 >= 0 ? v44 : v37[1]);
              v47 = v28 >= v46 ? v46 : v28;
              v48 = memcmp(v45, v27, v47);
              v36 = v37 - 3;
              if (v48)
                break;
              if (v46 > v28)
                goto LABEL_76;
            }
          }
          while (v48 < 0);
        }
        else
        {
          v37 = v269;
          if (v35 < (unint64_t)v269)
          {
            v38 = v266;
            do
            {
              while (1)
              {
                v37 = v38;
                v39 = (const void *)*((unsigned __int8 *)v38 + 23);
                v40 = (char)v39 >= 0 ? v37 : (const void **)*v37;
                v41 = (size_t)((char)v39 >= 0 ? v39 : v37[1]);
                v42 = v28 >= v41 ? v41 : v28;
                v43 = memcmp(v40, v27, v42);
                v38 = v37 - 3;
                if (!v43)
                  break;
                if (v35 >= (unint64_t)v37 || (v43 & 0x80000000) == 0)
                  goto LABEL_76;
              }
            }
            while (v35 < (unint64_t)v37 && v41 <= v28);
          }
        }
LABEL_76:
        if (v35 >= (unint64_t)v37)
        {
          j = v35;
        }
        else
        {
          v49 = v37;
          j = v35;
          do
          {
            v50 = *(_OWORD *)(j + 8);
            v51 = *(_OWORD *)v49;
            *(_QWORD *)(j + 16) = v49[2];
            *(_OWORD *)j = v51;
            *v49 = v29;
            *(_OWORD *)(v49 + 1) = v50;
            if (v272 >= 0)
              v52 = &v271;
            else
              v52 = (__n128 *)v271.n128_u64[0];
            if (v272 >= 0)
              v53 = HIBYTE(v272);
            else
              v53 = v271.n128_u64[1];
            v54 = j + 24;
            do
            {
              while (1)
              {
                j = v54;
                v55 = *(unsigned __int8 *)(v54 + 23);
                v29 = *(const void **)j;
                v56 = (v55 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v57 = (v55 & 0x80u) == 0 ? v55 : *(_QWORD *)(j + 8);
                v58 = v53 >= v57 ? v57 : v53;
                v59 = memcmp(v56, v52, v58);
                v54 = j + 24;
                if (v59)
                  break;
                if (v57 <= v53)
                  goto LABEL_98;
              }
            }
            while ((v59 & 0x80000000) == 0);
LABEL_98:
            v60 = v49 - 3;
            do
            {
              while (1)
              {
                v49 = v60;
                v61 = (const void *)*((unsigned __int8 *)v60 + 23);
                v62 = (char)v61 >= 0 ? v49 : (const void **)*v49;
                v63 = (unint64_t)((char)v61 >= 0 ? v61 : v49[1]);
                v64 = v53 >= v63 ? v63 : v53;
                v65 = memcmp(v62, v52, v64);
                v60 = v49 - 3;
                if (v65)
                  break;
                if (v63 > v53)
                  goto LABEL_78;
              }
            }
            while (v65 < 0);
LABEL_78:
            ;
          }
          while (j < (unint64_t)v49);
        }
        v66 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v67 = *v66;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v67;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
        }
        v68 = v271;
        *(_QWORD *)(j - 8) = v272;
        *v66 = v68;
        if (v35 < (unint64_t)v37)
        {
LABEL_122:
          std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, j - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(j - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(j, a2))
        {
          if (v69)
            continue;
          goto LABEL_122;
        }
        a2 = (const void **)(j - 24);
        if (!v69)
          goto LABEL_1;
        return result;
    }
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6;
  const void *v7;
  const void *v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  const void *v23;
  const void *v24;
  __n128 result;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  const void *v40;
  const void *v41;
  int v42;
  const void *v43;
  size_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *(char *)(a2 + 23);
  v7 = *(const void **)a2;
  v8 = *(const void **)(a2 + 8);
  if (v6 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = *(char *)(a1 + 23);
  v13 = *(const void **)a1;
  v12 = *(const void **)(a1 + 8);
  if (v11 >= 0)
    v14 = (const void *)a1;
  else
    v14 = *(const void **)a1;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 23);
  else
    v15 = *(_QWORD *)(a1 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if (v10 > v15)
  {
LABEL_18:
    v18 = *((char *)a3 + 23);
    if (v18 >= 0)
      v19 = a3;
    else
      v19 = *a3;
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)a3 + 23);
    else
      v20 = (size_t)a3[1];
    if (v10 >= v20)
      v21 = v20;
    else
      v21 = v10;
    v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        v23 = *(const void **)(a1 + 16);
        v24 = a3[2];
        result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_QWORD *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v32;
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v31;
    v33 = *((char *)a3 + 23);
    if (v33 >= 0)
      v34 = a3;
    else
      v34 = *a3;
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)a3 + 23);
    else
      v35 = (size_t)a3[1];
    if (v31 >= 0)
      v36 = (const void *)a2;
    else
      v36 = v13;
    if (v31 >= 0)
      v37 = HIBYTE(v31);
    else
      v37 = (size_t)v12;
    if (v37 >= v35)
      v38 = v35;
    else
      v38 = v37;
    v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0)
        return result;
    }
    else if (v35 <= v37)
    {
      return result;
    }
    result = *(__n128 *)a3;
    *(_QWORD *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  v26 = *((char *)a3 + 23);
  if (v26 >= 0)
    v27 = a3;
  else
    v27 = *a3;
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)a3 + 23);
  else
    v28 = (size_t)a3[1];
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = v10;
  v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v28 <= v10)
  {
    return result;
  }
  v40 = *(const void **)(a2 + 16);
  v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  v42 = *(char *)(a2 + 23);
  if (v42 >= 0)
    v43 = (const void *)a2;
  else
    v43 = *(const void **)a2;
  if (v42 >= 0)
    v44 = *(unsigned __int8 *)(a2 + 23);
  else
    v44 = *(_QWORD *)(a2 + 8);
  v45 = *(char *)(a1 + 23);
  v46 = *(const void **)a1;
  v47 = *(_QWORD *)(a1 + 8);
  if (v45 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v45 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v44)
    v50 = v44;
  else
    v50 = v49;
  v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49)
      return result;
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    v52 = *(_QWORD *)(a1 + 16);
    v53 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v53;
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v47;
    *(_QWORD *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;
  const void **v17;
  const void **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  const void **v43;
  __int128 v44;
  const void *v45;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      v11 = *(const void **)a1;
      v12 = *(const void **)(a1 + 8);
      if (v10 >= 0)
        v13 = (const void *)a1;
      else
        v13 = *(const void **)a1;
      if (v10 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 23);
      else
        v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= v9)
        v15 = v9;
      else
        v15 = v14;
      v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0)
          return 1;
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      v41 = *(const void **)(a1 + 16);
      v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v43 = v2;
      break;
  }
  while (2)
  {
    v23 = *((char *)v18 + 23);
    if (v23 >= 0)
      v24 = v18;
    else
      v24 = *v18;
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)v18 + 23);
    else
      v25 = (size_t)v18[1];
    v26 = *((char *)v17 + 23);
    if (v26 >= 0)
      v27 = v17;
    else
      v27 = *v17;
    if (v26 >= 0)
      v28 = *((unsigned __int8 *)v17 + 23);
    else
      v28 = (size_t)v17[1];
    if (v28 >= v25)
      v29 = v25;
    else
      v29 = v28;
    v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0)
        goto LABEL_25;
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    v44 = *(_OWORD *)v18;
    v45 = v18[2];
    *(_OWORD *)v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((_BYTE *)v17 + 23) = 0;
    *(_BYTE *)v17 = 0;
    v21 = a1;
    if (v17 == (const void **)a1)
      goto LABEL_24;
    v31 = v19;
    while (1)
    {
      v32 = a1 + v31;
      v33 = (_OWORD *)(a1 + v31 + 24);
      v34 = SHIBYTE(v45) >= 0 ? &v44 : (__int128 *)v44;
      v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((_QWORD *)&v44 + 1);
      v36 = *(char *)(v32 + 47);
      v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(_QWORD *)(v32 + 32);
      v39 = v38 >= v35 ? v35 : v38;
      v40 = memcmp(v34, v37, v39);
      if (!v40)
        break;
      if (v40 < 0)
      {
        v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(_QWORD *)(v32 + 64) = *(_QWORD *)(a1 + v31 + 40);
      *(_BYTE *)(v32 + 47) = 0;
      *(_BYTE *)v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38)
      goto LABEL_48;
    v21 = a1 + v31 + 48;
LABEL_23:
    v2 = v43;
LABEL_24:
    v22 = v44;
    *(_QWORD *)(v21 + 16) = v45;
    *(_OWORD *)v21 = v22;
    if (++v20 == 8)
      return v18 + 3 == v2;
LABEL_25:
    v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2)
      continue;
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  const void *v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *(char *)(a3 + 23);
  v12 = *(const void **)a3;
  v13 = *(const void **)(a3 + 8);
  if (v11 >= 0)
    v14 = (const void *)a3;
  else
    v14 = *(const void **)a3;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0)
      return result;
  }
  else if (v10 <= v15)
  {
    return result;
  }
  v19 = *(const void **)(a3 + 16);
  v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = (const void *)a3;
  else
    v22 = *(const void **)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = *(char *)(a2 + 23);
  v25 = *(const void **)a2;
  v26 = *(_QWORD *)(a2 + 8);
  if (v24 >= 0)
    v27 = (const void *)a2;
  else
    v27 = *(const void **)a2;
  if (v24 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  if (v28 >= v23)
    v29 = v23;
  else
    v29 = v28;
  v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v23 <= v28)
  {
    return result;
  }
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)a3 = v25;
  *(_QWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v31;
  v33 = *(char *)(a2 + 23);
  if (v33 >= 0)
    v34 = (const void *)a2;
  else
    v34 = *(const void **)a2;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a2 + 23);
  else
    v35 = *(_QWORD *)(a2 + 8);
  v36 = *(char *)(a1 + 23);
  v37 = *(const void **)a1;
  v38 = *(_QWORD *)(a1 + 8);
  if (v36 >= 0)
    v39 = (const void *)a1;
  else
    v39 = *(const void **)a1;
  if (v36 >= 0)
    v40 = *(unsigned __int8 *)(a1 + 23);
  else
    v40 = *(_QWORD *)(a1 + 8);
  if (v40 >= v35)
    v41 = v35;
  else
    v41 = v40;
  v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40)
      return result;
LABEL_58:
    v43 = *(_QWORD *)(a1 + 16);
    v44 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v38;
    *(_QWORD *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0)
    goto LABEL_58;
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  __n128 result;
  const void *v21;
  const void *v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const void *v36;
  size_t v37;
  int v38;
  const void *v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const void *v48;
  size_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  const void *v53;
  size_t v54;
  size_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *(char *)(a4 + 23);
  v14 = *(const void **)a4;
  v15 = *(const void **)(a4 + 8);
  if (v13 >= 0)
    v16 = (const void *)a4;
  else
    v16 = *(const void **)a4;
  if (v13 >= 0)
    v17 = *(unsigned __int8 *)(a4 + 23);
  else
    v17 = *(_QWORD *)(a4 + 8);
  if (v17 >= v12)
    v18 = v12;
  else
    v18 = v17;
  v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0)
      return result;
  }
  else if (v12 <= v17)
  {
    return result;
  }
  v21 = *(const void **)(a4 + 16);
  v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  v23 = *(char *)(a4 + 23);
  if (v23 >= 0)
    v24 = (const void *)a4;
  else
    v24 = *(const void **)a4;
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a4 + 23);
  else
    v25 = *(_QWORD *)(a4 + 8);
  v26 = *(char *)(a3 + 23);
  v27 = *(const void **)a3;
  v28 = *(_QWORD *)(a3 + 8);
  if (v26 >= 0)
    v29 = (const void *)a3;
  else
    v29 = *(const void **)a3;
  if (v26 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  if (v30 >= v25)
    v31 = v25;
  else
    v31 = v30;
  v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0)
      return result;
  }
  else if (v25 <= v30)
  {
    return result;
  }
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v34;
  *(_QWORD *)a4 = v27;
  *(_QWORD *)(a4 + 8) = v28;
  *(_QWORD *)(a4 + 16) = v33;
  v35 = *(char *)(a3 + 23);
  if (v35 >= 0)
    v36 = (const void *)a3;
  else
    v36 = *(const void **)a3;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a3 + 23);
  else
    v37 = *(_QWORD *)(a3 + 8);
  v38 = *(char *)(a2 + 23);
  v39 = *(const void **)a2;
  v40 = *(_QWORD *)(a2 + 8);
  if (v38 >= 0)
    v41 = (const void *)a2;
  else
    v41 = *(const void **)a2;
  if (v38 >= 0)
    v42 = *(unsigned __int8 *)(a2 + 23);
  else
    v42 = *(_QWORD *)(a2 + 8);
  if (v42 >= v37)
    v43 = v37;
  else
    v43 = v42;
  v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0)
      return result;
  }
  else if (v37 <= v42)
  {
    return result;
  }
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v46;
  *(_QWORD *)a3 = v39;
  *(_QWORD *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v45;
  v47 = *(char *)(a2 + 23);
  if (v47 >= 0)
    v48 = (const void *)a2;
  else
    v48 = *(const void **)a2;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a2 + 23);
  else
    v49 = *(_QWORD *)(a2 + 8);
  v50 = *(char *)(a1 + 23);
  v51 = *(const void **)a1;
  v52 = *(_QWORD *)(a1 + 8);
  if (v50 >= 0)
    v53 = (const void *)a1;
  else
    v53 = *(const void **)a1;
  if (v50 >= 0)
    v54 = *(unsigned __int8 *)(a1 + 23);
  else
    v54 = *(_QWORD *)(a1 + 8);
  if (v54 >= v49)
    v55 = v49;
  else
    v55 = v54;
  v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0)
      return result;
  }
  else if (v49 <= v54)
  {
    return result;
  }
  v57 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v58;
  *(_QWORD *)a2 = v51;
  *(_QWORD *)(a2 + 8) = v52;
  *(_QWORD *)(a2 + 16) = v57;
  return result;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

const char *abm::asString(unsigned int a1)
{
  if (a1 > 9)
    return "Unknown";
  else
    return off_1E66D3828[a1];
}

{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1E66D3878[a1];
}

const char *abm::asString(int a1)
{
  if ((a1 - 1) > 2)
    return "Unknown";
  else
    return off_1E66D3898[a1 - 1];
}

{
  if ((a1 - 1) > 2)
    return "Unknown";
  else
    return off_1E66D38B0[a1 - 1];
}

{
  const char *result;

  result = "Generic";
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = "Lightning to Headphone Jack Adapter";
      break;
    case 2:
      result = "EarPods with Lightening";
      break;
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
LABEL_7:
      result = "???";
      break;
    case 4:
      result = "Lightning Cable";
      break;
    case 5:
      result = "Charging Dock";
      break;
    case 12:
      result = "SmartKeyboard";
      break;
    case 13:
      result = "DisplayCover";
      break;
    case 14:
      result = "Pencil";
      break;
    case 15:
      result = "MagSafeCharger";
      break;
    case 16:
      result = "MagSafeBatteryPack";
      break;
    case 17:
      result = "USB3";
      break;
    case 18:
      result = "DisplayPort";
      break;
    case 19:
      result = "USB-C to Headphone Jack Adapter";
      break;
    case 20:
      result = "EarPods with USB-C";
      break;
    default:
      switch(a1)
      {
        case 2048:
          result = "AppleMagSafeSiliconCase";
          break;
        case 2049:
          result = "AppleMagSafeLeatherCase";
          break;
        case 2050:
          result = "AppleMagSafeClearCase";
          break;
        case 2051:
          result = "AppleMagSafeSleeve";
          break;
        case 2052:
          result = "AppleMagSafeWallet";
          break;
        case 2053:
          result = "AppleMagSafeBatteryPack";
          break;
        case 2054:
          result = "AppleMagSafeChargingMat";
          break;
        case 2055:
          result = "AppleMagSafeChargingCable";
          break;
        case 2056:
          result = "AppleMagSafeRuggedCase";
          break;
        case 2057:
          result = "AppleMagSafeTextileCase";
          break;
        default:
          if (a1 != 0xFFFF)
            goto LABEL_7;
          result = "Unknown";
          break;
      }
      break;
  }
  return result;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E2F6FC](a1 + 112);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1B5E2F5B8](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1B5E2F5C4](v13);
  return a1;
}

void sub_1B3CDEDF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1B5E2F5C4](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B3CDEDD0);
}

void sub_1B3CDEE38(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1B3CDEFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t abm::AccessorySimulate::create(xpc_object_t *a1)
{
  xpc_object_t value;
  int v4;
  xpc_object_t object;

  if (MEMORY[0x1B5E2FB70](*a1) != MEMORY[0x1E0C812F8] || !xpc_dictionary_get_value(*a1, "kAccessorySimulateEnabled"))
    return 170;
  value = xpc_dictionary_get_value(*a1, "kAccessorySimulateEnabled");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default();
  xpc_release(object);
  return v4 | 0x100u;
}

void sub_1B3CDF0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::AccessorySimulate::create(abm::AccessorySimulate *this)
{
  return this | 0x100;
}

void abm::AccessorySimulate::toDict(abm::AccessorySimulate *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;

  *a2 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_BOOL_create(*(_BYTE *)this);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kAccessorySimulateEnabled", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
}

const char *abm::AccessorySimulate::asString(abm::AccessorySimulate *this)
{
  if (*(_BYTE *)this)
    return "enabled";
  else
    return "disabled";
}

const char *abm::asString(__int16 a1)
{
  if ((unsigned __int16)(a1 + 1) > 5u)
    return "???";
  else
    return off_1E66D3AD8[(__int16)(a1 + 1)];
}

{
  if ((unsigned __int16)(a1 + 1) > 4u)
    return "???";
  else
    return off_1E66D3B08[(__int16)(a1 + 1)];
}

{
  if ((unsigned __int16)(a1 + 1) > 4u)
    return "???";
  else
    return off_1E66D3B30[(__int16)(a1 + 1)];
}

{
  if ((unsigned __int16)(a1 + 1) > 5u)
    return "???";
  else
    return off_1E66D3B58[(__int16)(a1 + 1)];
}

{
  if ((unsigned __int16)(a1 + 1) > 5u)
    return "NotApplicable";
  else
    return off_1E66D3B88[(__int16)(a1 + 1)];
}

unint64_t abm::AccessoryInfo::create(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  _QWORD *v17;
  size_t v18;
  void *v19;
  _BYTE *v20;
  unint64_t v21;
  void **v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void **v35;
  int v36;
  void **v37;
  unsigned int v38;
  void **v39;
  __int16 v40;
  void **v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  void **v45;
  __int16 v46;
  unsigned __int16 v48;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;
  void *__p[3];
  void *__dst[3];
  void *v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _BYTE v62[48];
  _QWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unint64_t v72;

  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v71 = v2;
  v70 = v2;
  v69 = v2;
  v68 = v2;
  v67 = v2;
  v66 = v2;
  v65 = v2;
  v64 = v2;
  v63[1] = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v62[32] = v2;
  *(_OWORD *)&v62[16] = v2;
  *(_OWORD *)v62 = v2;
  v61 = v2;
  v59 = v2;
  v60 = v2;
  v58 = v2;
  v3 = MEMORY[0x1E0DE4FD8];
  v4 = MEMORY[0x1E0DE4FD8] + 64;
  v72 = 0xAAAAAAAAAAAAAAAALL;
  v63[0] = MEMORY[0x1E0DE4FD8] + 64;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 16);
  v57 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 8);
  *(uint64_t *)((char *)&v57 + *(_QWORD *)(v57 - 24)) = v5;
  *(_QWORD *)&v58 = 0;
  v6 = (std::ios_base *)((char *)&v57 + *(_QWORD *)(v57 - 24));
  std::ios_base::init(v6, (char *)&v58 + 8);
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  v57 = v3 + 24;
  v63[0] = v4;
  std::streambuf::basic_streambuf();
  *((_QWORD *)&v58 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  v7 = &v62[8];
  memset(&v62[8], 0, 32);
  v8 = 8;
  *(_DWORD *)&v62[40] = 8;
  if (&v62[8] != (_BYTE *)a1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(&v62[8], *(void **)a1, *(_QWORD *)(a1 + 8));
      v8 = v62[40];
    }
    else
    {
      *(_OWORD *)&v62[8] = *(_OWORD *)a1;
      *(_QWORD *)&v62[24] = *(_QWORD *)(a1 + 16);
    }
  }
  *(_QWORD *)&v62[32] = 0;
  v9 = v62[31];
  if (v62[31] >= 0)
    v10 = &v62[8];
  else
    v10 = *(_BYTE **)&v62[8];
  if (v62[31] >= 0)
    v11 = v62[31];
  else
    v11 = *(_QWORD *)&v62[16];
  if ((v8 & 8) != 0)
  {
    *((_QWORD *)&v59 + 1) = v10;
    *(_QWORD *)&v60 = v10;
    *(_QWORD *)&v62[32] = &v10[v11];
    *((_QWORD *)&v60 + 1) = &v10[v11];
  }
  if ((v8 & 0x10) == 0)
    goto LABEL_29;
  *(_QWORD *)&v62[32] = &v10[v11];
  if ((v62[31] & 0x80) != 0)
  {
    v12 = (*(_QWORD *)&v62[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (*(_QWORD *)&v62[16] >= v12)
    {
      *(_QWORD *)&v62[16] = (*(_QWORD *)&v62[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v7 = *(_BYTE **)&v62[8];
      goto LABEL_21;
    }
    v9 = *(_QWORD *)&v62[16];
  }
  else
  {
    v12 = 22;
    if (v62[31] > 0x15u)
    {
      v62[31] = 22;
LABEL_21:
      v7[v12] = 0;
      goto LABEL_22;
    }
  }
  std::string::append((std::string *)&v62[8], v12 - v9, 0);
LABEL_22:
  v13 = v62[31];
  if (v62[31] < 0)
    v13 = *(_QWORD *)&v62[16];
  *(_QWORD *)&v61 = v10;
  *((_QWORD *)&v61 + 1) = v10;
  *(_QWORD *)v62 = &v10[v13];
  if ((v62[40] & 3) != 0)
  {
    if (v11 >> 31)
    {
      v14 = ((v11 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      v15 = 0x7FFFFFFF * ((v14 + ((v11 - 0x80000000 - v14) >> 1)) >> 30);
      v10 += v15 + 0x7FFFFFFF;
      v11 = v11 - v15 - 0x7FFFFFFF;
      *((_QWORD *)&v61 + 1) = v10;
    }
    if (v11)
      *((_QWORD *)&v61 + 1) = &v10[v11];
  }
LABEL_29:
  v48 = 0;
  v49 = 0;
  v16 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v50 = 0;
  v51 = 0xFFFFLL;
  while (1)
  {
    v17 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v57, (uint64_t)&v54, 0x2Cu);
    if ((*((_BYTE *)v17 + *(_QWORD *)(*v17 - 24) + 32) & 5) != 0)
      break;
    if (v56 >= 0)
      v18 = HIBYTE(v56);
    else
      v18 = v55;
    if (v56 >= 0)
      v19 = &v54;
    else
      v19 = v54;
    if (v18)
    {
      v20 = memchr(v19, 58, v18);
      if (v20)
        v21 = v20 - (_BYTE *)v19;
      else
        v21 = -1;
      __dst[1] = (void *)0xAAAAAAAAAAAAAAAALL;
      __dst[2] = (void *)0xAAAAAAAAAAAAAAAALL;
      if (v18 >= v21)
        v18 = v21;
      __dst[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
    }
    else
    {
      v21 = -1;
      memset(__dst, 170, sizeof(__dst));
    }
    if (v18 >= 0x17)
    {
      v27 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v27 = v18 | 7;
      v28 = v27 + 1;
      v22 = (void **)operator new(v27 + 1);
      __dst[1] = (void *)v18;
      __dst[2] = (void *)(v28 | 0x8000000000000000);
      __dst[0] = v22;
    }
    else
    {
      HIBYTE(__dst[2]) = v18;
      v22 = __dst;
      if (!v18)
      {
        LOBYTE(__dst[0]) = 0;
        v23 = v21 + 1;
        memset(__p, 170, sizeof(__p));
        LOBYTE(v24) = HIBYTE(v56);
        if ((SHIBYTE(v56) & 0x80000000) == 0)
          goto LABEL_49;
        goto LABEL_56;
      }
    }
    memmove(v22, v19, v18);
    *((_BYTE *)v22 + v18) = 0;
    v23 = v21 + 1;
    memset(__p, 170, sizeof(__p));
    LOBYTE(v24) = HIBYTE(v56);
    if ((SHIBYTE(v56) & 0x80000000) == 0)
    {
LABEL_49:
      v24 = v24;
      if (v23 > v24)
        goto LABEL_210;
      v25 = (char *)&v54;
      v26 = v24 - v23;
      if (v26 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_207;
      goto LABEL_58;
    }
LABEL_56:
    v24 = v55;
    if (v55 < v23)
LABEL_210:
      std::string::__throw_out_of_range[abi:ne180100]();
    v25 = (char *)v54;
    v26 = v55 - v23;
    if (v55 - v23 > 0x7FFFFFFFFFFFFFF7)
LABEL_207:
      std::string::__throw_length_error[abi:ne180100]();
LABEL_58:
    if (v26 >= 0x17)
    {
      v32 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v32 = v26 | 7;
      v33 = v32 + 1;
      v29 = operator new(v32 + 1);
      __p[1] = (void *)v26;
      __p[2] = (void *)(v33 | 0x8000000000000000);
      __p[0] = v29;
    }
    else
    {
      HIBYTE(__p[2]) = v26;
      v29 = __p;
      if (v24 == v23)
      {
        *((_BYTE *)__p + v26) = 0;
        v30 = SHIBYTE(__dst[2]);
        if (SHIBYTE(__dst[2]) < 0)
          goto LABEL_68;
        goto LABEL_61;
      }
    }
    memmove(v29, &v25[v23], v26);
    *((_BYTE *)v29 + v26) = 0;
    v30 = SHIBYTE(__dst[2]);
    if (SHIBYTE(__dst[2]) < 0)
    {
LABEL_68:
      if (!__dst[1])
LABEL_208:
        std::string::__throw_out_of_range[abi:ne180100]();
      v31 = *(char *)__dst[0] - 99;
LABEL_70:
      switch(v31)
      {
        case 0u:
          v34 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0)
            v35 = __p;
          else
            v35 = (void **)__p[0];
          if (!strcasecmp("NotApplicable", (const char *)v35))
          {
            v36 = 0;
          }
          else if (!strcasecmp("Lightning", (const char *)v35))
          {
            v36 = 0x10000;
          }
          else if (!strcasecmp("USBC", (const char *)v35))
          {
            v36 = 0x20000;
          }
          else if (!strcasecmp("NFC", (const char *)v35))
          {
            v36 = 196608;
          }
          else if (!strcasecmp("SmartConnector", (const char *)v35))
          {
            v36 = 0x40000;
          }
          else
          {
            v36 = -65536;
          }
          v38 = (unsigned __int16)v16;
          goto LABEL_176;
        case 6u:
          v34 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0)
            v41 = __p;
          else
            v41 = (void **)__p[0];
          if (!strcasecmp("Generic", (const char *)v41))
          {
            v51 = 0;
          }
          else if (!strcasecmp("Lightning to Headphone Jack Adapter", (const char *)v41))
          {
            v51 = 1;
          }
          else if (!strcasecmp("EarPods with Lightening", (const char *)v41))
          {
            v51 = 2;
          }
          else if (!strcasecmp("Lightning Cable", (const char *)v41))
          {
            v51 = 4;
          }
          else if (!strcasecmp("Charging Dock", (const char *)v41))
          {
            v51 = 5;
          }
          else if (!strcasecmp("SmartKeyboard", (const char *)v41))
          {
            v51 = 12;
          }
          else if (!strcasecmp("DisplayCover", (const char *)v41))
          {
            v51 = 13;
          }
          else if (!strcasecmp("Pencil", (const char *)v41))
          {
            v51 = 14;
          }
          else if (!strcasecmp("USB3", (const char *)v41))
          {
            v51 = 17;
          }
          else if (!strcasecmp("DisplayPort", (const char *)v41))
          {
            v51 = 18;
          }
          else if (!strcasecmp("USB-C to Headphone Jack Adapter", (const char *)v41))
          {
            v51 = 19;
          }
          else if (!strcasecmp("EarPods with USB-C", (const char *)v41))
          {
            v51 = 20;
          }
          else if (!strcasecmp("MagSafeCharger", (const char *)v41))
          {
            v51 = 15;
          }
          else if (!strcasecmp("MagSafeBatteryPack", (const char *)v41))
          {
            v51 = 16;
          }
          else if (!strcasecmp("AppleMagSafeSiliconCase", (const char *)v41))
          {
            v51 = 2048;
          }
          else if (!strcasecmp("AppleMagSafeLeatherCase", (const char *)v41))
          {
            v51 = 2049;
          }
          else if (!strcasecmp("AppleMagSafeClearCase", (const char *)v41))
          {
            v51 = 2050;
          }
          else if (!strcasecmp("AppleMagSafeSleeve", (const char *)v41))
          {
            v51 = 2051;
          }
          else if (!strcasecmp("AppleMagSafeWallet", (const char *)v41))
          {
            v51 = 2052;
          }
          else if (!strcasecmp("AppleMagSafeBatteryPack", (const char *)v41))
          {
            v51 = 2053;
          }
          else if (!strcasecmp("AppleMagSafeChargingMat", (const char *)v41))
          {
            v51 = 2054;
          }
          else if (!strcasecmp("AppleMagSafeChargingCable", (const char *)v41))
          {
            v51 = 2055;
          }
          else if (!strcasecmp("AppleMagSafeRuggedCase", (const char *)v41))
          {
            v51 = 2056;
          }
          else
          {
            if (!strcasecmp("AppleMagSafeTextileCase", (const char *)v41))
              v42 = 2057;
            else
              v42 = 0xFFFFFFFFLL;
            v51 = v42;
          }
          goto LABEL_177;
        case 0xAu:
          v34 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0)
            v37 = __p;
          else
            v37 = (void **)__p[0];
          if (!strcasecmp("NotApplicable", (const char *)v37))
          {
            v36 = 0;
            v38 = v16 & 0xFFFF0000;
          }
          else if (!strcasecmp("Leather", (const char *)v37))
          {
            v36 = 1;
            v38 = v16 & 0xFFFF0000;
          }
          else if (!strcasecmp("Silicone", (const char *)v37))
          {
            v36 = 2;
            v38 = v16 & 0xFFFF0000;
          }
          else if (!strcasecmp("Plastic", (const char *)v37))
          {
            v36 = 3;
            v38 = v16 & 0xFFFF0000;
          }
          else
          {
            if (!strcasecmp("Textile", (const char *)v37))
              v36 = 4;
            else
              v36 = 0xFFFF;
            v38 = v16 & 0xFFFF0000;
          }
LABEL_176:
          v16 = v36 | v38;
          break;
        case 0xDu:
          v34 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0)
            v43 = __p;
          else
            v43 = (void **)__p[0];
          if (!strcasecmp("NotApplicable", (const char *)v43))
          {
            v50 = 0;
          }
          else if (!strcasecmp("Battery", (const char *)v43))
          {
            v50 = 1;
          }
          else if (!strcasecmp("Wired", (const char *)v43))
          {
            v50 = 2;
          }
          else
          {
            if (!strcasecmp("Inductive", (const char *)v43))
              v44 = 3;
            else
              v44 = 0xFFFFFFFFLL;
            v50 = v44;
          }
          break;
        case 0xFu:
          v34 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0)
            v45 = __p;
          else
            v45 = (void **)__p[0];
          if (!strcasecmp("NotApplicable", (const char *)v45))
          {
            v49 = 0;
          }
          else if (!strcasecmp("White", (const char *)v45))
          {
            v49 = 1;
          }
          else if (!strcasecmp("Black", (const char *)v45))
          {
            v49 = 2;
          }
          else
          {
            if (!strcasecmp("Brown", (const char *)v45))
              v46 = 3;
            else
              v46 = -1;
            v49 = v46;
          }
          break;
        case 0x10u:
          v34 = HIBYTE(__p[2]);
          if (SHIBYTE(__p[2]) >= 0)
            v39 = __p;
          else
            v39 = (void **)__p[0];
          if (!strcasecmp("NotApplicable", (const char *)v39))
          {
            v48 = 0;
          }
          else if (!strcasecmp("Detached", (const char *)v39))
          {
            v48 = 1;
          }
          else if (!strcasecmp("Attached", (const char *)v39))
          {
            v48 = 2;
          }
          else if (!strcasecmp("Opened", (const char *)v39))
          {
            v48 = 3;
          }
          else
          {
            if (!strcasecmp("Closed", (const char *)v39))
              v40 = 4;
            else
              v40 = -1;
            v48 = v40;
          }
          break;
        default:
          goto LABEL_103;
      }
      goto LABEL_177;
    }
LABEL_61:
    if (!v30)
      goto LABEL_208;
    v31 = SLOBYTE(__dst[0]) - 99;
    if (v31 <= 0x10)
      goto LABEL_70;
LABEL_103:
    v34 = HIBYTE(__p[2]);
LABEL_177:
    if (v34 < 0)
    {
      operator delete(__p[0]);
      if ((HIBYTE(__dst[2]) & 0x80) != 0)
        goto LABEL_181;
    }
    else if ((v30 & 0x80) != 0)
    {
LABEL_181:
      operator delete(__dst[0]);
    }
  }
  if (v56 < 0)
    operator delete(v54);
  v57 = *MEMORY[0x1E0DE4F58];
  *(uint64_t *)((char *)&v57 + *(_QWORD *)(v57 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *((_QWORD *)&v58 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if ((v62[31] & 0x80000000) != 0)
    operator delete(*(void **)&v62[8]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1B5E2F6FC](v63);
  return ((unint64_t)v49 << 32) | (v50 << 48) | ((unint64_t)v48 << 16) | (unsigned __int16)v51;
}

void sub_1B3CE0080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a39 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1B5E2F6FC](v39);
  _Unwind_Resume(a1);
}

void sub_1B3CE00C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E2F6FC](v1);
  _Unwind_Resume(a1);
}

void sub_1B3CE00E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if (a32 < 0)
    {
LABEL_6:
      operator delete(a27);
      std::istringstream::~istringstream((uint64_t)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_6;
  }
  std::istringstream::~istringstream((uint64_t)&a33);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F58];
  v3 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1B5E2F6FC](a1 + 120);
  return a1;
}

unint64_t abm::AccessoryInfo::create(xpc_object_t *a1)
{
  uint64_t v2;
  unsigned __int16 v3;
  unsigned __int16 v4;
  unsigned __int16 v5;
  xpc_object_t value;
  unsigned __int16 v7;
  xpc_object_t v8;
  unsigned __int16 v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t object;
  xpc_object_t objecta;
  xpc_object_t objectb;
  xpc_object_t objectc;
  xpc_object_t objectd;
  xpc_object_t objecte;

  if (MEMORY[0x1B5E2FB70](*a1) != MEMORY[0x1E0C812F8])
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v5 = -1;
    return (v2 << 48) | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 16) | v5;
  }
  if (xpc_dictionary_get_value(*a1, "kAccessoryID"))
  {
    value = xpc_dictionary_get_value(*a1, "kAccessoryID");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v7 = xpc::dyn_cast_or_default();
    xpc_release(object);
    v5 = v7;
    if (xpc_dictionary_get_value(*a1, "kAccessoryState"))
    {
LABEL_11:
      v8 = xpc_dictionary_get_value(*a1, "kAccessoryState");
      objecta = v8;
      if (v8)
        xpc_retain(v8);
      else
        objecta = xpc_null_create();
      v9 = xpc::dyn_cast_or_default();
      xpc_release(objecta);
      v4 = v9;
      if (xpc_dictionary_get_value(*a1, "kAccessoryColor"))
        goto LABEL_15;
LABEL_8:
      v3 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = -1;
    if (xpc_dictionary_get_value(*a1, "kAccessoryState"))
      goto LABEL_11;
  }
  v4 = 0;
  if (!xpc_dictionary_get_value(*a1, "kAccessoryColor"))
    goto LABEL_8;
LABEL_15:
  v10 = xpc_dictionary_get_value(*a1, "kAccessoryColor");
  objectb = v10;
  if (v10)
    xpc_retain(v10);
  else
    objectb = xpc_null_create();
  v3 = xpc::dyn_cast_or_default();
  xpc_release(objectb);
LABEL_19:
  if (!xpc_dictionary_get_value(*a1, "kAccessoryPower"))
  {
    v2 = 0;
    if (xpc_dictionary_get_value(*a1, "kAccessoryMaterial"))
      goto LABEL_27;
LABEL_23:
    if (!xpc_dictionary_get_value(*a1, "kAccessoryConnection"))
      return (v2 << 48) | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 16) | v5;
    goto LABEL_31;
  }
  v11 = xpc_dictionary_get_value(*a1, "kAccessoryPower");
  objectc = v11;
  if (v11)
    xpc_retain(v11);
  else
    objectc = xpc_null_create();
  v12 = xpc::dyn_cast_or_default();
  xpc_release(objectc);
  v2 = v12;
  if (!xpc_dictionary_get_value(*a1, "kAccessoryMaterial"))
    goto LABEL_23;
LABEL_27:
  v13 = xpc_dictionary_get_value(*a1, "kAccessoryMaterial");
  objectd = v13;
  if (v13)
    xpc_retain(v13);
  else
    objectd = xpc_null_create();
  xpc::dyn_cast_or_default();
  xpc_release(objectd);
  if (xpc_dictionary_get_value(*a1, "kAccessoryConnection"))
  {
LABEL_31:
    v14 = xpc_dictionary_get_value(*a1, "kAccessoryConnection");
    objecte = v14;
    if (v14)
      xpc_retain(v14);
    else
      objecte = xpc_null_create();
    xpc::dyn_cast_or_default();
    xpc_release(objecte);
  }
  return (v2 << 48) | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 16) | v5;
}

void sub_1B3CE04EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void abm::AccessoryInfo::toDict(abm::AccessoryInfo *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(*(unsigned __int16 *)this);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kAccessoryID", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned __int16 *)this + 1));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAccessoryState", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_int64_create(*((unsigned __int16 *)this + 2));
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAccessoryColor", v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = xpc_int64_create(*((unsigned __int16 *)this + 3));
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAccessoryPower", v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(*((unsigned __int16 *)this + 4));
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAccessoryMaterial", v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_int64_create(*((unsigned __int16 *)this + 5));
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kAccessoryConnection", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
}

void std::vector<nas::tlv::abm::BBFreqItem>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

const char *radio::asString(int a1)
{
  if ((a1 - 1) > 6)
    return "RFSelfTestErrorCode::kSuccess";
  else
    return off_1E66D4FC0[(char)(a1 - 1)];
}

void radio::QMICommandDriverM20::create(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34[2];
  dispatch_object_t object;
  uint64_t v36;
  std::__shared_weak_count *v37;
  _QWORD v38[5];

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x180uLL);
  v9 = a1[1];
  v36 = *a1;
  v37 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a2;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  v34[0] = v13;
  v34[1] = (uint64_t)v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  radio::QMICommandDriverM20::QMICommandDriverM20((uint64_t)v8, &v36, &object, v34);
  *a4 = (uint64_t)v8;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v17 = (std::__shared_weak_count *)operator new(0x20uLL);
  v17->__shared_owners_ = 0;
  v18 = (unint64_t *)&v17->__shared_owners_;
  v17->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D4188;
  v17->__shared_weak_owners_ = 0;
  v17[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
  a4[1] = (uint64_t)v17;
  v19 = (std::__shared_weak_count *)*((_QWORD *)v8 + 10);
  if (v19)
  {
    if (v19->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v20 = __ldxr(v18);
    while (__stxr(v20 + 1, v18));
    p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v22 = __ldxr(p_shared_weak_owners);
    while (__stxr(v22 + 1, p_shared_weak_owners));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v17;
    std::__shared_weak_count::__release_weak(v19);
  }
  else
  {
    do
      v23 = __ldxr(v18);
    while (__stxr(v23 + 1, v18));
    v24 = (unint64_t *)&v17->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    *((_QWORD *)v8 + 9) = v8;
    *((_QWORD *)v8 + 10) = v17;
  }
  do
    v26 = __ldaxr(v18);
  while (__stlxr(v26 - 1, v18));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_22:
  ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  if (v14)
  {
    v27 = (unint64_t *)&v14->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (object)
    dispatch_release(object);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *a4;
  v33 = (uint64_t *)(*a4 + 72);
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 0x40000000;
  v38[2] = ___ZN5radio19QMICommandDriverM204initEv_block_invoke;
  v38[3] = &__block_descriptor_tmp_14;
  v38[4] = v32;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v33, (uint64_t)v38);
}

void sub_1B3CE0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  NSObject *v13;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v13)
    dispatch_release(v13);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void radio::QMICommandDriverM20::init(radio::QMICommandDriverM20 *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio19QMICommandDriverM204initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_14;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t radio::QMICommandDriverM20::QMICommandDriverM20(uint64_t a1, uint64_t *a2, NSObject **a3, uint64_t *a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD v20[2];
  dispatch_object_t object;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v6 = (std::__shared_weak_count *)a2[1];
  v22 = *a2;
  v23 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *a3;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = *a4;
  v11 = (std::__shared_weak_count *)a4[1];
  v20[0] = v10;
  v20[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  radio::QMICommandDriverBase::QMICommandDriverBase(a1, (uint64_t)&v22, &object, (uint64_t)v20);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (object)
    dispatch_release(object);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_1E66D3BC8;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  return a1;
}

void sub_1B3CE0D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2)
    dispatch_release(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverM20::~QMICommandDriverM20(radio::QMICommandDriverM20 *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66D3BC8;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMICommandDriverM20 *)((char *)this + 352));
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66D3BC8;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMICommandDriverM20 *)((char *)this + 352));
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66D3BC8;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((radio::QMICommandDriverM20 *)((char *)this + 352));
  radio::QMICommandDriverBase::~QMICommandDriverBase(this);
  operator delete(v3);
}

void radio::QMICommandDriverM20::startAppsClient_sync(radio::QMICommandDriverM20 *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const char *Name;
  size_t v10;
  std::string *v11;
  __int128 v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;
  NSObject *v47;
  void *v48[2];
  __int128 v49;
  _OWORD v50[2];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  memset(v50, 170, 24);
  Name = (const char *)radio::CommandDriver::getName(this);
  BYTE7(v49) = 5;
  strcpy((char *)v48, ".apps");
  v10 = strlen(Name);
  v11 = std::string::insert((std::string *)v48, 0, Name, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)&v50[1] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  v50[0] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v49) & 0x80000000) == 0)
  {
    if (*((_QWORD *)this + 31))
      goto LABEL_11;
LABEL_21:
    v20 = *((_QWORD *)this + 11);
    v42 = v20;
    if (v20)
      dispatch_retain(v20);
    v46 = 5;
    strcpy((char *)__p, "radio");
    v21 = std::__shared_weak_count::lock(v4);
    if (v21)
    {
      v22 = v21;
      v23 = (unint64_t *)&v21->__shared_weak_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v41 = v21;
      v25 = (unint64_t *)&v21->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    else
    {
      v41 = 0;
    }
    qmi::Client::createWithQueue();
    v37 = v49;
    v49 = 0uLL;
    v38 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    *((_OWORD *)this + 23) = v37;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    qmi::Client::~Client((qmi::Client *)v48);
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
    if (v46 < 0)
    {
      operator delete(__p[0]);
      v36 = v42;
      if (!v42)
        goto LABEL_50;
    }
    else
    {
      v36 = v42;
      if (!v42)
        goto LABEL_50;
    }
LABEL_49:
    dispatch_release(v36);
    goto LABEL_50;
  }
  operator delete(v48[0]);
  if (!*((_QWORD *)this + 31))
    goto LABEL_21;
LABEL_11:
  v13 = *((_QWORD *)this + 11);
  v47 = v13;
  if (v13)
    dispatch_retain(v13);
  v46 = 5;
  strcpy((char *)__p, "radio");
  v14 = std::__shared_weak_count::lock(v4);
  if (v14)
  {
    v15 = v14;
    v16 = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v44 = v14;
    v18 = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v44 = 0;
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v43 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  qmi::Client::createWithQueueLocal();
  v30 = v49;
  v49 = 0uLL;
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  *((_OWORD *)this + 23) = v30;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  qmi::Client::~Client((qmi::Client *)v48);
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  if (v46 < 0)
    operator delete(__p[0]);
  v36 = v47;
  if (v47)
    goto LABEL_49;
LABEL_50:
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::start((radio::QMICommandDriverM20 *)((char *)this + 352));
  if (SBYTE7(v50[1]) < 0)
    operator delete(*(void **)&v50[0]);
  std::__shared_weak_count::__release_weak(v4);
}

void sub_1B3CE136C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,dispatch_object_t object,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  NSObject *v35;

  if (a21)
  {
    std::__shared_weak_count::__release_weak(a21);
    if (a32 < 0)
    {
LABEL_3:
      operator delete(__p);
      v35 = object;
      if (!object)
      {
LABEL_8:
        if (*(char *)(v33 - 73) < 0)
          operator delete(*(void **)(v33 - 96));
        std::__shared_weak_count::__release_weak(v32);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v35);
      goto LABEL_8;
    }
  }
  else if (a32 < 0)
  {
    goto LABEL_3;
  }
  v35 = object;
  if (!object)
    goto LABEL_8;
  goto LABEL_7;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void ___ZN5radio19QMICommandDriverM2020startAppsClient_syncEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I APPS:Stopped", v2, 2u);
  }
}

void ___ZN5radio19QMICommandDriverM2020startAppsClient_syncEv_block_invoke_12(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I APPS:Started", v2, 2u);
  }
}

void ___ZN5radio19QMICommandDriverM204initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  Registry *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11) = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I initializing", (uint8_t *)&v11, 2u);
  }
  v3 = *(Registry **)(v1 + 232);
  if (v3)
  {
    Registry::getServerConnection(v3);
    v4 = v11;
    v11 = 0uLL;
    v5 = *(std::__shared_weak_count **)(v1 + 256);
    *(_OWORD *)(v1 + 248) = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
    if (*((_QWORD *)&v11 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  radio::QMICommandDriverBase::startDMSClient_sync((radio::QMICommandDriverBase *)v1);
  radio::QMICommandDriverBase::startBSPClient_sync((radio::QMICommandDriverBase *)v1);
  radio::QMICommandDriverM20::startAppsClient_sync((radio::QMICommandDriverM20 *)v1);
  radio::QMICommandDriverBase::setupOperatingModeReporting_sync((radio::QMICommandDriverBase *)v1);
}

void radio::QMICommandDriverM20::queryIPAWakeReason(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v5;
  void *v6;
  uint64_t *v7;
  NSObject *v8;
  _QWORD v9[5];
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_20;
  v5 = *a2;
  v9[4] = a1;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = (uint64_t *)(a1 + 72);
  v8 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v7, (uint64_t)v9);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
}

void ___ZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  _QWORD v9[5];
  CFTypeRef cf;
  void *v11;
  dispatch_object_t object;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  _OWORD v18[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18[0] = v3;
  v18[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
  v13 = v2 + 320;
  v14 = QMIServiceMsg::create();
  v15 = 25000;
  v16 = 0;
  v17 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke_2;
  v9[3] = &__block_descriptor_tmp_19;
  v5 = (const void *)a1[5];
  v9[4] = v2;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v6 = (void *)a1[6];
  if (v6)
    v6 = _Block_copy(v6);
  v7 = a1[7];
  v11 = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16GetWakeReasonIPA8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4238;
  aBlock[4] = v9;
  v8 = _Block_copy(aBlock);
  v17 = v8;
  if (v14)
  {
    qmi::Client::send();
    v8 = v17;
  }
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (v11)
    _Block_release(v11);
  if (cf)
    CFRelease(cf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
}

void sub_1B3CE18E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  const void **v10;
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v11);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v10);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CE1914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke_2(uint64_t a1, const qmi::ResponseBase *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  CFTypeRef v6;
  const void *v7;
  const void *v8;
  void *v9;
  tlv *TlvValue;
  int v11;
  tlv *v12;
  const __CFAllocator *v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  tlv *v17;
  int v18;
  tlv *v19;
  void *v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  const __CFAllocator *v26;
  const void *v27;
  CFTypeRef v28;
  CFTypeRef v29;
  char *v30;
  char *__p;
  CFTypeRef cf;
  CFTypeRef block[4];
  void *aBlock;
  CFTypeRef v35;
  CFTypeRef v36;
  char *v37;
  uint64_t v38;

  v4 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting IPA wake reason", &cf);
  if (cf)
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v5 = 0;
  if (!v5)
  {
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v12 = TlvValue;
    if (TlvValue
      && (tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v11, (const unsigned __int8 *)1),
          v14 = *(unsigned __int8 *)v12,
          *(_BYTE *)v12))
    {
      v15 = *MEMORY[0x1E0C9AE00];
      if (v14 == 1)
      {
        ctu::cf::insert<char const*,unsigned int>(*(__CFDictionary **)(a1 + 40), (const __CFString **)"kKeyBasebandWakeChannel", 0xDu, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v13);
      }
      else if (v14 == 2)
      {
        ctu::cf::insert<char const*,unsigned int>(*(__CFDictionary **)(a1 + 40), (const __CFString **)"kKeyBasebandWakeChannel", 0xAu, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v13);
      }
      else
      {
        ctu::cf::insert<char const*,unsigned int>(*(__CFDictionary **)(a1 + 40), (const __CFString **)"kKeyBasebandWakeChannel", 8u, (const __CFAllocator *)*MEMORY[0x1E0C9AE00], v13);
      }
      v17 = (tlv *)qmi::MessageBase::findTlvValue(a2);
      v19 = v17;
      if (v17
        && (tlv::throwIfNotEnoughBytes(v17, (const unsigned __int8 *)v17 + v18, (const unsigned __int8 *)4),
            *(_DWORD *)v19))
      {
        v20 = *(void **)(a1 + 40);
        if (v20)
          CFRetain(v20);
        v21 = (char *)qmi::MessageBase::findTlvValue(a2);
        v23 = v21;
        if (v21)
        {
          v24 = v22;
          v37 = v21;
          memset(block, 170, 24);
          tlv::parseV<bsp::tlv::abm::WakeBuffer>(&v37, v22, block);
          v25 = v37;
          if (v37)
          {
            v38 = 0;
            v27 = ctu::cf::convert_copy() ? (const void *)v38 : 0;
            ctu::cf::insert<char const*,__CFData const*>((__CFDictionary *)v20, (const __CFString **)"kKeyBasebandWakeData", v27, v15, v26);
            if (v27)
              CFRelease(v27);
          }
          if (block[0])
          {
            block[1] = block[0];
            operator delete((void *)block[0]);
          }
          if (!v25)
            ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 18, v23, v24);
        }
        if (v20)
          CFRelease(v20);
      }
      else
      {
        __p = (char *)operator new(0x28uLL);
        strcpy(__p, "null IPA wake data from baseband");
        CreateError();
        v28 = cf;
        cf = block[0];
        block[0] = 0;
        if (v28)
        {
          CFRelease(v28);
          if (block[0])
            CFRelease(block[0]);
        }
        operator delete(__p);
      }
    }
    else
    {
      v30 = (char *)operator new(0x20uLL);
      strcpy(v30, "invalid IPA wake reason type");
      CreateError();
      v29 = cf;
      cf = block[0];
      block[0] = 0;
      if (v29)
      {
        CFRelease(v29);
        if (block[0])
          CFRelease(block[0]);
      }
      operator delete(v30);
    }
  }
  if (*(_QWORD *)(a1 + 48) && *(_QWORD *)(a1 + 56))
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    v7 = *(const void **)(a1 + 40);
    if (v7)
      CFRetain(*(CFTypeRef *)(a1 + 40));
    v8 = *(const void **)(a1 + 48);
    if (v8)
      v9 = _Block_copy(v8);
    else
      v9 = 0;
    v16 = *(NSObject **)(a1 + 56);
    block[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
    block[1] = (CFTypeRef)1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_73;
    if (v9)
    {
      aBlock = _Block_copy(v9);
      v35 = v6;
      if (!v6)
        goto LABEL_24;
    }
    else
    {
      aBlock = 0;
      v35 = v6;
      if (!v6)
      {
LABEL_24:
        v36 = v7;
        if (v7)
          CFRetain(v7);
        dispatch_async(v16, block);
        if (v36)
          CFRelease(v36);
        if (v35)
          CFRelease(v35);
        if (aBlock)
          _Block_release(aBlock);
        if (v9)
          _Block_release(v9);
        if (v7)
          CFRelease(v7);
        if (v6)
          CFRelease(v6);
        goto LABEL_38;
      }
    }
    CFRetain(v6);
    goto LABEL_24;
  }
LABEL_38:
  if (cf)
    CFRelease(cf);
}

void sub_1B3CE1E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, const void *a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a20);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B3CE1E80);
}

void sub_1B3CE1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **_ZZZZN5radio19QMICommandDriverM2018queryIPAWakeReasonEN3ctu2cf11CFSharedRefI14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEEEUb_EUb0_EN3__2D1Ev(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void __copy_helper_block_e8_40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE48c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  NSObject *v6;

  v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4)
    CFRetain(v4);
  v5 = (void *)a2[6];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
    dispatch_retain(v6);
}

void __destroy_helper_block_e8_40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE48c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void qmi::Client::SendProxy::~SendProxy(qmi::Client::SendProxy *this)
{
  const void *v2;

  if (*((_QWORD *)this + 1))
    qmi::Client::send();
  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    _Block_release(v2);
}

void radio::QMICommandDriverM20::getWakeReason(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting Baseband wake reason", buf, 2u);
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_26;
  v8[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *v9;
  dispatch_object_t object;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  _OWORD v16[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v3;
  v16[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
  v11 = v2 + 352;
  v12 = QMIServiceMsg::create();
  v13 = 25000;
  v14 = 0;
  v15 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_25;
  v8[4] = v2;
  v5 = (void *)a1[5];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a1[6];
  v9 = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm15GetWakeReasonV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4260;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v15 = v7;
  if (v12)
  {
    qmi::Client::send();
    v7 = v15;
  }
  if (v7)
    _Block_release(v7);
  if (object)
    dispatch_release(object);
  if (v9)
    _Block_release(v9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
}

void sub_1B3CE2244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CE2268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v4;
  const __CFAllocator *v5;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v7;
  CFMutableDictionaryRef v8;
  uint64_t (*v9)(uint64_t);
  unsigned int v10;
  CFTypeRef v11;
  const void *v12;
  void *v13;
  tlv *TlvValue;
  int v15;
  tlv *v16;
  int v17;
  NSObject *v18;
  tlv *v19;
  int v20;
  tlv *v21;
  int v22;
  CFTypeRef v23;
  tlv *v24;
  int v25;
  tlv *v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  char *v31;
  const __CFAllocator *v32;
  const void *v33;
  CFTypeRef v34;
  const void *v35;
  void *v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  CFMutableDictionaryRef v40;
  void *__p;
  __int128 v42;
  void *v43;
  __int128 v44;
  CFMutableDictionaryRef v45;
  CFMutableDictionaryRef v46;
  CFTypeRef cf;
  CFTypeRef block[4];
  void *aBlock;
  CFTypeRef v50;
  CFTypeRef v51;
  char *v52;
  uint64_t v53;

  v4 = a1[4];
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting wake reason", &cf);
  v46 = 0;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  if (Mutable)
    v46 = Mutable;
  if (cf)
    v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v9 = 0;
  if (v9)
    goto LABEL_7;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v16 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v15, (const unsigned __int8 *)1);
    v17 = *(unsigned __int8 *)v16;
  }
  else
  {
    v17 = 0;
  }
  v19 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v21 = v19;
  if (v19)
  {
    tlv::throwIfNotEnoughBytes(v19, (const unsigned __int8 *)v19 + v20, (const unsigned __int8 *)1);
    v22 = *(unsigned __int8 *)v21;
    if (v17 != 2)
      goto LABEL_46;
LABEL_96:
    v10 = 14;
    goto LABEL_8;
  }
  v22 = 0;
  if (v17 == 2)
    goto LABEL_96;
LABEL_46:
  if (v17 != 1)
  {
    __p = operator new(0x20uLL);
    v42 = xmmword_1B3DCB3D0;
    strcpy((char *)__p, "invalid wake reason type");
    CreateError();
    v23 = cf;
    cf = block[0];
    block[0] = 0;
    if (v23)
    {
      CFRelease(v23);
      if (block[0])
        CFRelease(block[0]);
    }
    if (SHIBYTE(v42) < 0)
      operator delete(__p);
LABEL_7:
    v10 = 0;
    goto LABEL_8;
  }
  if (v22 <= 100)
  {
    v10 = 11;
    switch(v22)
    {
      case 5:
        v10 = 12;
        break;
      case 9:
        v10 = 15;
        break;
      case 15:
      case 17:
        goto LABEL_61;
      default:
        goto LABEL_58;
    }
    goto LABEL_61;
  }
  if (v22 != 101)
  {
    if (v22 == 102)
    {
      v10 = 16;
      goto LABEL_61;
    }
    if (v22 != 110)
    {
LABEL_58:
      v10 = 8;
LABEL_61:
      v24 = (tlv *)qmi::MessageBase::findTlvValue(a2);
      v26 = v24;
      if (v24
        && (tlv::throwIfNotEnoughBytes(v24, (const unsigned __int8 *)v24 + v25, (const unsigned __int8 *)4),
            *(_DWORD *)v26))
      {
        v45 = v8;
        if (v8)
          CFRetain(v8);
        v27 = (char *)qmi::MessageBase::findTlvValue(a2);
        v29 = v27;
        if (v27)
        {
          v30 = v28;
          v52 = v27;
          memset(block, 170, 24);
          tlv::parseV<apps::tlv::abm::WakeBuffer>(&v52, v28, block);
          v31 = v52;
          if (v52)
          {
            v53 = 0;
            v33 = ctu::cf::convert_copy() ? (const void *)v53 : 0;
            ctu::cf::insert<char const*,__CFData const*>(v8, (const __CFString **)"kKeyBasebandWakeData", v33, (uint64_t)v5, v32);
            if (v33)
              CFRelease(v33);
          }
          if (block[0])
          {
            block[1] = block[0];
            operator delete((void *)block[0]);
          }
          if (!v31)
            ((void (*)(_QWORD, uint64_t, char *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 19, v29, v30);
        }
        if (v8)
          CFRelease(v8);
      }
      else
      {
        v43 = operator new(0x20uLL);
        v44 = xmmword_1B3DCB3C0;
        strcpy((char *)v43, "null wake data from baseband");
        CreateError();
        v34 = cf;
        cf = block[0];
        block[0] = 0;
        if (v34)
        {
          CFRelease(v34);
          if (block[0])
            CFRelease(block[0]);
        }
        if (SHIBYTE(v44) < 0)
          operator delete(v43);
      }
LABEL_8:
      if (!a1[5] || !a1[6])
        goto LABEL_38;
      ctu::cf::insert<char const*,unsigned int>(v8, (const __CFString **)"kKeyBasebandWakeChannel", v10, v5, v7);
      v11 = cf;
      if (cf)
        CFRetain(cf);
      if (v8)
        CFRetain(v8);
      v12 = (const void *)a1[5];
      if (v12)
        v13 = _Block_copy(v12);
      else
        v13 = 0;
      v18 = a1[6];
      block[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
      block[1] = (CFTypeRef)1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_73;
      if (v13)
      {
        aBlock = _Block_copy(v13);
        v50 = v11;
        if (!v11)
          goto LABEL_24;
      }
      else
      {
        aBlock = 0;
        v50 = v11;
        if (!v11)
        {
LABEL_24:
          v51 = v8;
          if (v8)
            CFRetain(v8);
          dispatch_async(v18, block);
          if (v51)
            CFRelease(v51);
          if (v50)
            CFRelease(v50);
          if (aBlock)
            _Block_release(aBlock);
          if (v13)
            _Block_release(v13);
          if (v8)
            CFRelease(v8);
          if (v11)
            CFRelease(v11);
LABEL_38:
          if (!v8)
            goto LABEL_40;
          goto LABEL_39;
        }
      }
      CFRetain(v11);
      goto LABEL_24;
    }
  }
  v40 = v8;
  if (v8)
    CFRetain(v8);
  v35 = (const void *)a1[5];
  if (v35)
  {
    v36 = _Block_copy(v35);
    v37 = a1[6];
    v38 = v36;
    v39 = v37;
    if (v37)
      goto LABEL_88;
LABEL_91:
    radio::QMICommandDriverM20::queryIPAWakeReason(v4, (const void **)&v40, (uint64_t)&v38);
    if (!v36)
      goto LABEL_93;
    goto LABEL_92;
  }
  v36 = 0;
  v37 = a1[6];
  v38 = 0;
  v39 = v37;
  if (!v37)
    goto LABEL_91;
LABEL_88:
  dispatch_retain(v37);
  radio::QMICommandDriverM20::queryIPAWakeReason(v4, (const void **)&v40, (uint64_t)&v38);
  dispatch_release(v37);
  if (v36)
LABEL_92:
    _Block_release(v36);
LABEL_93:
  if (v8)
  {
    CFRelease(v8);
LABEL_39:
    CFRelease(v8);
  }
LABEL_40:
  if (cf)
    CFRelease(cf);
}

void sub_1B3CE2960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  const void *v12;
  va_list va;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

const void **_ZZZZN5radio19QMICommandDriverM2013getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEEUb1_EUb2_EN3__6D1Ev(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void __copy_helper_block_e8_40c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void radio::QMICommandDriverM20::getFieldTestConfig(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *v20;
  NSObject *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a2)
  {
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_13;
    goto LABEL_12;
  }
  v13 = _Block_copy(*(const void **)a2);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
LABEL_12:
    dispatch_retain(v14);
LABEL_13:
  v15 = (std::__shared_weak_count *)a1[10];
  if (!v15 || (v16 = a1[9], (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v19 = operator new(0x28uLL);
  *v19 = a1;
  v19[1] = v5;
  v19[2] = v7;
  v19[3] = v13;
  v19[4] = v14;
  v20 = (unint64_t *)&v18->__shared_owners_;
  v21 = a1[11];
  do
    v22 = __ldxr(v20);
  while (__stxr(v22 + 1, v20));
  v23 = operator new(0x18uLL);
  *v23 = v19;
  v23[1] = v16;
  v23[2] = v18;
  dispatch_async_f(v21, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v24 = __ldaxr(v20);
  while (__stlxr(v24 - 1, v20));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverM20::setFieldTestConfig(_QWORD *a1, const void **a2, uint64_t a3)
{
  uint64_t (*v4)(uint64_t);
  std::__shared_weak_count *v6;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  unint64_t *v24;
  NSObject *v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  void *v29;
  NSObject *v30;
  void *__p[2];
  char v32;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v36;

  if (*a2)
    v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v4 = 0;
  if (v4)
  {
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6 || (v8 = a1[9], (v9 = std::__shared_weak_count::lock(v6)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v10 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v16 = *a2;
    if (v16)
      CFRetain(v16);
    if (*(_QWORD *)a3)
    {
      v17 = _Block_copy(*(const void **)a3);
      v18 = *(NSObject **)(a3 + 8);
      if (!v18)
        goto LABEL_19;
    }
    else
    {
      v17 = 0;
      v18 = *(NSObject **)(a3 + 8);
      if (!v18)
      {
LABEL_19:
        v19 = (std::__shared_weak_count *)a1[10];
        if (!v19 || (v20 = a1[9], (v21 = std::__shared_weak_count::lock(v19)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v22 = v21;
        v23 = operator new(0x30uLL);
        *v23 = a1;
        v23[1] = v8;
        v23[2] = v10;
        v23[3] = v16;
        v23[4] = v17;
        v23[5] = v18;
        v24 = (unint64_t *)&v22->__shared_owners_;
        v25 = a1[11];
        do
          v26 = __ldxr(v24);
        while (__stxr(v26 + 1, v24));
        v27 = operator new(0x18uLL);
        *v27 = v23;
        v27[1] = v20;
        v27[2] = v22;
        dispatch_async_f(v25, v27, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
        do
          v28 = __ldaxr(v24);
        while (__stlxr(v28 - 1, v24));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        std::__shared_weak_count::__release_weak(v10);
        return;
      }
    }
    dispatch_retain(v18);
    goto LABEL_19;
  }
  if (*(_QWORD *)a3 && *(_QWORD *)(a3 + 8))
  {
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    v32 = 13;
    strcpy((char *)__p, "Invalid input");
    CreateError();
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    if (*(_QWORD *)a3)
      v29 = _Block_copy(*(const void **)a3);
    else
      v29 = 0;
    v30 = *(NSObject **)(a3 + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    block[3] = &__block_descriptor_tmp_86;
    if (v29)
    {
      aBlock = _Block_copy(v29);
      v36 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    else
    {
      aBlock = 0;
      v36 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    dispatch_async(v30, block);
    if (v36)
      CFRelease(v36);
    if (aBlock)
      _Block_release(aBlock);
    if (v29)
      _Block_release(v29);
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    CFRelease(cf);
  }
}

void sub_1B3CE2EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverM20::sendRFSelfTestReq(_QWORD *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  NSObject *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  if (!*(_QWORD *)a3)
  {
    v6 = 0;
    v7 = *(NSObject **)(a3 + 8);
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = _Block_copy(*(const void **)a3);
  v7 = *(NSObject **)(a3 + 8);
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new(0x20uLL);
  *v12 = a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v14 = a1[11];
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v16 = operator new(0x18uLL);
  *v16 = v12;
  v16[1] = v9;
  v16[2] = v11;
  dispatch_async_f(v14, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void radio::QMICommandDriverM20::getRFSelfTestNonce(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  NSObject *v16;
  uint8_t v17[16];

  if (*(_QWORD *)a2 && *(_QWORD *)(a2 + 8))
  {
    v4 = _Block_copy(*(const void **)a2);
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
      dispatch_retain(*(dispatch_object_t *)(a2 + 8));
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v6)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v9 = v8;
    v10 = operator new(0x18uLL);
    *v10 = a1;
    v10[1] = v4;
    v10[2] = v5;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v12 = a1[11];
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = operator new(0x18uLL);
    *v14 = v10;
    v14[1] = v7;
    v14[2] = v9;
    dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v16 = a1[5];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v17 = 0;
      _os_log_error_impl(&dword_1B3CB3000, v16, OS_LOG_TYPE_ERROR, "No callback for getting RF Self Test Nonce", v17, 2u);
    }
  }
}

void radio::QMICommandDriverM20::setRFSelfTestTicket(_QWORD *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  NSObject *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  if (!*(_QWORD *)a3)
  {
    v6 = 0;
    v7 = *(NSObject **)(a3 + 8);
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = _Block_copy(*(const void **)a3);
  v7 = *(NSObject **)(a3 + 8);
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new(0x20uLL);
  *v12 = a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v14 = a1[11];
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v16 = operator new(0x18uLL);
  *v16 = v12;
  v16[1] = v9;
  v16[2] = v11;
  dispatch_async_f(v14, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void radio::QMICommandDriverM20::getAntennaTxPort(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *v20;
  NSObject *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (!*(_QWORD *)a2)
  {
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_13;
    goto LABEL_12;
  }
  v13 = _Block_copy(*(const void **)a2);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
LABEL_12:
    dispatch_retain(v14);
LABEL_13:
  v15 = (std::__shared_weak_count *)a1[10];
  if (!v15 || (v16 = a1[9], (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v19 = operator new(0x28uLL);
  *v19 = a1;
  v19[1] = v5;
  v19[2] = v7;
  v19[3] = v13;
  v19[4] = v14;
  v20 = (unint64_t *)&v18->__shared_owners_;
  v21 = a1[11];
  do
    v22 = __ldxr(v20);
  while (__stxr(v22 + 1, v20));
  v23 = operator new(0x18uLL);
  *v23 = v19;
  v23[1] = v16;
  v23[2] = v18;
  dispatch_async_f(v21, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v24 = __ldaxr(v20);
  while (__stlxr(v24 - 1, v20));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverM20::setAntennaTxPort(_QWORD *a1, const void **a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t *v23;
  NSObject *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = *a2;
  if (v15)
    CFRetain(v15);
  if (!*(_QWORD *)a3)
  {
    v16 = 0;
    v17 = *(NSObject **)(a3 + 8);
    if (!v17)
      goto LABEL_15;
    goto LABEL_14;
  }
  v16 = _Block_copy(*(const void **)a3);
  v17 = *(NSObject **)(a3 + 8);
  if (v17)
LABEL_14:
    dispatch_retain(v17);
LABEL_15:
  v18 = (std::__shared_weak_count *)a1[10];
  if (!v18 || (v19 = a1[9], (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  v22 = operator new(0x30uLL);
  *v22 = a1;
  v22[1] = v7;
  v22[2] = v9;
  v22[3] = v15;
  v22[4] = v16;
  v22[5] = v17;
  v23 = (unint64_t *)&v21->__shared_owners_;
  v24 = a1[11];
  do
    v25 = __ldxr(v23);
  while (__stxr(v25 + 1, v23));
  v26 = operator new(0x18uLL);
  *v26 = v22;
  v26[1] = v19;
  v26[2] = v21;
  dispatch_async_f(v24, v26, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v27 = __ldaxr(v23);
  while (__stlxr(v27 - 1, v23));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void radio::QMICommandDriverM20::setMCC(_QWORD *a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  unint64_t *p_shared_owners;
  NSObject *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  if (!*(_QWORD *)a3)
  {
    v6 = 0;
    v7 = *(NSObject **)(a3 + 8);
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = _Block_copy(*(const void **)a3);
  v7 = *(NSObject **)(a3 + 8);
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new(0x20uLL);
  *v12 = a1;
  v12[1] = v5;
  v12[2] = v6;
  v12[3] = v7;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v14 = a1[11];
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  v16 = operator new(0x18uLL);
  *v16 = v12;
  v16[1] = v9;
  v16[2] = v11;
  dispatch_async_f(v14, v16, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void radio::QMICommandDriverM20::setLegacyMCC_sync(_QWORD *a1, const __CFDictionary **a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  ctu::cf::map_adapter *v14;
  int Bool;
  __int128 v16;
  uint64_t v17;
  const void **v18;
  _BYTE *v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  void *v26;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  void *v29;
  dispatch_object_t object;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *aBlock;
  _QWORD v36[2];
  uint64_t (*v37)(uint64_t, char *);
  void *v38;
  char v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 buf;
  void (*v44)(uint64_t, QMIServiceMsg *);
  void *v45;
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v7 = a1[9], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v42[0] = 0xAAAAAAAAAAAAAAAALL;
  v42[1] = 0xAAAAAAAAAAAAAAAALL;
  v14 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v42, *a2);
  Bool = ctu::cf::map_adapter::getBool(v14, (const __CFString *)*MEMORY[0x1E0DDF768]);
  *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v16;
  v41 = v16;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
  v17 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 0x40000000;
  v37 = ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  v38 = &__block_descriptor_tmp_29;
  v39 = Bool;
  v18 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v18 + 8) != 1)
    {
      if (++v18 == (const void **)v41)
        goto LABEL_16;
    }
  }
  if (v18 == (const void **)v41)
  {
LABEL_16:
    v20 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::Enable>(&v40, 1);
    v37((uint64_t)v36, v20);
  }
  else
  {
    if (!v19)
      __cxa_bad_cast();
    ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke((uint64_t)v36, v19 + 9);
  }
  v21 = a1[5];
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    v22 = "disable";
    if (Bool)
      v22 = "enable";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1B3CB3000, v21, OS_LOG_TYPE_DEFAULT, "#I Request to set legacy mcc to %s", (uint8_t *)&buf, 0xCu);
  }
  v31 = a1 + 40;
  v32 = QMIServiceMsg::create();
  v33 = 25000;
  v34 = 0;
  aBlock = 0;
  v27[0] = v17;
  v27[1] = 1174405120;
  v27[2] = ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_32;
  v27[3] = &__block_descriptor_tmp_34;
  v27[4] = a1;
  v27[5] = v7;
  v28 = v9;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v24 = *(void **)a3;
  if (*(_QWORD *)a3)
    v24 = _Block_copy(v24);
  v25 = *(NSObject **)(a3 + 8);
  v29 = v24;
  object = v25;
  if (v25)
    dispatch_retain(v25);
  *(_QWORD *)&buf = v17;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v44 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18SettingLegacyTxMCC8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v45 = &unk_1E66D4AB8;
  v46 = v27;
  v26 = _Block_copy(&buf);
  aBlock = v26;
  if (v32)
  {
    qmi::Client::send();
    v26 = aBlock;
  }
  if (v26)
    _Block_release(v26);
  if (object)
    dispatch_release(object);
  if (v29)
    _Block_release(v29);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v40);
  MEMORY[0x1B5E2EE44](v42);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1B3CE3AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN5radio19QMICommandDriverM2017setLegacyMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_32(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v19;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting legacy mcc", &cf);
      v8 = (const void *)a1[7];
      if (!v8 || !a1[8])
      {
LABEL_23:
        if (cf)
          CFRelease(cf);
        goto LABEL_25;
      }
      v9 = cf;
      if (cf && (CFRetain(cf), (v8 = (const void *)a1[7]) == 0))
        v10 = 0;
      else
        v10 = _Block_copy(v8);
      v11 = a1[8];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_86;
      if (v10)
      {
        aBlock = _Block_copy(v10);
        v19 = v9;
        if (!v9)
          goto LABEL_15;
      }
      else
      {
        aBlock = 0;
        v19 = v9;
        if (!v9)
        {
LABEL_15:
          dispatch_async(v11, block);
          if (v19)
            CFRelease(v19);
          if (aBlock)
            _Block_release(aBlock);
          if (v10)
            _Block_release(v10);
          if (v9)
            CFRelease(v9);
          goto LABEL_23;
        }
      }
      CFRetain(v9);
      goto LABEL_15;
    }
  }
}

void sub_1B3CE3CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t radio::QMICommandDriverM20::setSTxMCC_sync(_QWORD *a1, const __CFDictionary **a2, uint64_t a3)
{
  ctu::cf::map_adapter *v5;
  int Bool;
  __int128 v7;
  uint64_t v8;
  const void **v9;
  _BYTE *v10;
  char *v11;
  NSObject *v12;
  const char *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  NSObject *v24;
  void *v25;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  void *v29;
  dispatch_object_t object;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *aBlock;
  _QWORD v36[2];
  uint64_t (*v37)(uint64_t, char *);
  void *v38;
  char v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 buf;
  void (*v44)(uint64_t, QMIServiceMsg *);
  void *v45;
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v42[0] = 0xAAAAAAAAAAAAAAAALL;
  v42[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v42, *a2);
  Bool = ctu::cf::map_adapter::getBool(v5, (const __CFString *)*MEMORY[0x1E0DDF8B0]);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v7;
  v41 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
  v8 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 0x40000000;
  v37 = ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke;
  v38 = &__block_descriptor_tmp_35;
  v39 = Bool;
  v9 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v41)
        goto LABEL_8;
    }
  }
  if (v9 == (const void **)v41)
  {
LABEL_8:
    v11 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::Enable>(&v40, 1);
    v37((uint64_t)v36, v11);
  }
  else
  {
    if (!v10)
      __cxa_bad_cast();
    ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke((uint64_t)v36, v10 + 9);
  }
  v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = "disable";
    if (Bool)
      v13 = "enable";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_1B3CB3000, v12, OS_LOG_TYPE_DEFAULT, "#I Request to set sTx mcc to %s", (uint8_t *)&buf, 0xCu);
  }
  v14 = (std::__shared_weak_count *)a1[10];
  if (!v14 || (v15 = a1[9], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v17);
  }
  v31 = a1 + 40;
  v32 = QMIServiceMsg::create();
  v33 = 25000;
  v34 = 0;
  aBlock = 0;
  v27[0] = v8;
  v27[1] = 1174405120;
  v27[2] = ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_36;
  v27[3] = &__block_descriptor_tmp_38;
  v27[4] = a1;
  v27[5] = v15;
  v28 = v17;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = *(void **)a3;
  if (*(_QWORD *)a3)
    v23 = _Block_copy(v23);
  v24 = *(NSObject **)(a3 + 8);
  v29 = v23;
  object = v24;
  if (v24)
    dispatch_retain(v24);
  *(_QWORD *)&buf = v8;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v44 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SettingSTxMCC8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v45 = &unk_1E66D4AE0;
  v46 = v27;
  v25 = _Block_copy(&buf);
  aBlock = v25;
  if (v32)
  {
    qmi::Client::send();
    v25 = aBlock;
  }
  if (v25)
    _Block_release(v25);
  if (object)
    dispatch_release(object);
  if (v29)
    _Block_release(v29);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  std::__shared_weak_count::__release_weak(v17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v40);
  return MEMORY[0x1B5E2EE44](v42);
}

void sub_1B3CE4148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN5radio19QMICommandDriverM2014setSTxMCC_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEE_block_invoke_36(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v19;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting sTx mcc", &cf);
      v8 = (const void *)a1[7];
      if (!v8 || !a1[8])
      {
LABEL_23:
        if (cf)
          CFRelease(cf);
        goto LABEL_25;
      }
      v9 = cf;
      if (cf && (CFRetain(cf), (v8 = (const void *)a1[7]) == 0))
        v10 = 0;
      else
        v10 = _Block_copy(v8);
      v11 = a1[8];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_86;
      if (v10)
      {
        aBlock = _Block_copy(v10);
        v19 = v9;
        if (!v9)
          goto LABEL_15;
      }
      else
      {
        aBlock = 0;
        v19 = v9;
        if (!v9)
        {
LABEL_15:
          dispatch_async(v11, block);
          if (v19)
            CFRelease(v19);
          if (aBlock)
            _Block_release(aBlock);
          if (v10)
            _Block_release(v10);
          if (v9)
            CFRelease(v9);
          goto LABEL_23;
        }
      }
      CFRetain(v9);
      goto LABEL_15;
    }
  }
}

void sub_1B3CE43BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverM20::sendAccessoryInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t *v11;
  NSObject *v12;
  _QWORD v13[5];
  void *__p;
  void *v15;
  char *v16;
  void *aBlock;
  dispatch_object_t object;

  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_44;
  v13[4] = a1;
  __p = 0;
  v15 = 0;
  v16 = 0;
  v6 = *(const void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v7 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v7);
    v9 = &v8[4 * (v7 >> 2)];
    __p = v8;
    v16 = v9;
    memcpy(v8, v6, v7);
    v15 = v9;
  }
  v10 = *(void **)a3;
  if (*(_QWORD *)a3)
    v10 = _Block_copy(v10);
  v11 = (uint64_t *)(a1 + 72);
  v12 = *(NSObject **)(a3 + 8);
  aBlock = v10;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v11, (uint64_t)v13);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  const void **v12;
  char **v13;
  _BYTE *v14;
  _BYTE *v15;
  char **v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  void *v36;
  _QWORD v37[5];
  void *v38;
  dispatch_object_t object;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  _QWORD v45[2];
  void (*v46)(uint64_t, char **);
  void *v47;
  void *v48;
  void *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  _QWORD aBlock[7];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51 = v3;
  v52 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v51);
  v4 = MEMORY[0x1E0C809B0];
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 1174405120;
  v46 = ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v47 = &__block_descriptor_tmp_40;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v6 = (_BYTE *)a1[5];
  v5 = (_BYTE *)a1[6];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v7);
    v9 = &v8[4 * (v7 >> 2)];
    v48 = v8;
    v50 = v9;
    memcpy(v8, v6, v7);
    v49 = v9;
  }
  v10 = (char *)*((_QWORD *)&v51 + 1);
  v11 = (char *)v52;
  v12 = (const void **)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1) != (_QWORD)v52)
  {
    v12 = (const void **)*((_QWORD *)&v51 + 1);
    while (*((_BYTE *)*v12 + 8) != 1)
    {
      if (++v12 == (const void **)v52)
        goto LABEL_12;
    }
  }
  if (v12 == (const void **)v52)
  {
LABEL_12:
    v14 = operator new(0x28uLL);
    v15 = v14;
    v14[8] = 1;
    *(_QWORD *)v14 = &off_1E66D4B28;
    *((_QWORD *)v14 + 2) = 0;
    v16 = (char **)(v14 + 16);
    *((_QWORD *)v14 + 3) = 0;
    *((_QWORD *)v14 + 4) = 0;
    if ((unint64_t)v11 < *((_QWORD *)&v52 + 1))
    {
      *(_QWORD *)v11 = v14;
      v17 = (uint64_t)(v11 + 8);
LABEL_34:
      *(_QWORD *)&v52 = v17;
      v46((uint64_t)v45, v16);
      goto LABEL_35;
    }
    v18 = v11 - v10;
    v19 = (v11 - v10) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v52 + 1) - (_QWORD)v10;
    if ((uint64_t)(*((_QWORD *)&v52 + 1) - (_QWORD)v10) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v15;
      v17 = (uint64_t)(v24 + 1);
      if (v10 != v11)
      {
LABEL_23:
        if ((unint64_t)(v18 - 8) < 0x58)
          goto LABEL_56;
        if ((unint64_t)(v10 - v23) < 0x20)
          goto LABEL_56;
        v26 = ((unint64_t)(v18 - 8) >> 3) + 1;
        v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = &v11[-v27];
        v24 = (_QWORD *)((char *)v24 - v27);
        v29 = &v23[8 * v19 - 16];
        v30 = v11 - 16;
        v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        v11 = v28;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_56:
          do
          {
            v33 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v24 = v33;
          }
          while (v11 != v10);
        }
        v10 = (char *)*((_QWORD *)&v51 + 1);
        *((_QWORD *)&v51 + 1) = v24;
        *(_QWORD *)&v52 = v17;
        *((_QWORD *)&v52 + 1) = v25;
        if (!v10)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v15;
      v17 = 8 * v19 + 8;
      if (v10 != v11)
        goto LABEL_23;
    }
    *((_QWORD *)&v51 + 1) = v24;
    *(_QWORD *)&v52 = v17;
    *((_QWORD *)&v52 + 1) = v25;
    if (!v10)
      goto LABEL_34;
LABEL_33:
    operator delete(v10);
    goto LABEL_34;
  }
  if (!v13)
    __cxa_bad_cast();
  ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2((uint64_t)v45, v13 + 2);
LABEL_35:
  v40 = v2 + 320;
  v41 = QMIServiceMsg::create();
  v42 = 25000;
  v43 = 0;
  v44 = 0;
  v37[0] = v4;
  v37[1] = 1174405120;
  v37[2] = ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_41;
  v37[3] = &__block_descriptor_tmp_43;
  v37[4] = v2;
  v34 = (void *)a1[8];
  if (v34)
    v34 = _Block_copy(v34);
  v35 = a1[9];
  v38 = v34;
  object = v35;
  if (v35)
    dispatch_retain(v35);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17SendAccessoryInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4B58;
  aBlock[4] = v37;
  v36 = _Block_copy(aBlock);
  v44 = v36;
  if (v41)
  {
    qmi::Client::send();
    v36 = v44;
  }
  if (v36)
    _Block_release(v36);
  if (object)
    dispatch_release(object);
  if (v38)
    _Block_release(v38);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v51);
}

void sub_1B3CE48EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v29);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1, char **a2)
{
  __int16 *v2;
  __int16 *v3;
  char **v4;
  char *v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char **v18;
  __int16 v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int v24;
  char *v25;
  __int16 *v26;
  __int16 v27;
  unint64_t v28;

  v3 = *(__int16 **)(a1 + 32);
  v2 = *(__int16 **)(a1 + 40);
  if (v3 != v2)
  {
    v4 = a2;
    v5 = a2[1];
    v26 = *(__int16 **)(a1 + 40);
    do
    {
      while (1)
      {
        v6 = *v3;
        v7 = v3[1];
        v8 = v3[2];
        v9 = v3[3];
        v10 = v3[4];
        v11 = v3[5];
        v12 = (unint64_t)v4[2];
        if ((unint64_t)v5 >= v12)
          break;
        *(_WORD *)v5 = v6;
        *((_WORD *)v5 + 1) = v7;
        *((_WORD *)v5 + 2) = v8;
        *((_WORD *)v5 + 3) = v9;
        *((_WORD *)v5 + 4) = v10;
        *((_WORD *)v5 + 5) = v11;
        v4[1] = v5 + 12;
        v3 += 6;
        v5 += 12;
        if (v3 == v2)
          return;
      }
      v13 = *v4;
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *v4) >> 2);
      v15 = v14 + 1;
      if (v14 + 1 > 0x1555555555555555)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v13) >> 2);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0xAAAAAAAAAAAAAAALL)
        v17 = 0x1555555555555555;
      else
        v17 = v15;
      v28 = v17;
      if (v17)
      {
        v27 = *v3;
        if (v17 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v18 = v4;
        v19 = v3[2];
        v20 = (char *)operator new(12 * v17);
        v8 = v19;
        v4 = v18;
        v6 = v27;
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[12 * v14];
      *(_WORD *)v21 = v6;
      *((_WORD *)v21 + 1) = v7;
      *((_WORD *)v21 + 2) = v8;
      *((_WORD *)v21 + 3) = v9;
      *((_WORD *)v21 + 4) = v10;
      *((_WORD *)v21 + 5) = v11;
      v22 = v21;
      if (v5 != v13)
      {
        do
        {
          v23 = *(_QWORD *)(v5 - 12);
          v5 -= 12;
          v24 = *((_DWORD *)v5 + 2);
          *(_QWORD *)(v22 - 12) = v23;
          v22 -= 12;
          *((_DWORD *)v22 + 2) = v24;
        }
        while (v5 != v13);
        v5 = *v4;
      }
      v25 = v21 + 12;
      *v4 = v22;
      v4[1] = v21 + 12;
      v4[2] = &v20[12 * v28];
      if (v5)
        operator delete(v5);
      v2 = v26;
      v4[1] = v25;
      v3 += 6;
      v5 = v25;
    }
    while (v3 != v26);
  }
}

_QWORD *__copy_helper_block_e8_32c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[4] = 0;
  result[5] = 0;
  result[6] = 0;
  v3 = *(_BYTE **)(a2 + 32);
  v2 = *(_BYTE **)(a2 + 40);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 2) >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v4);
    v5[4] = v6;
    v5[5] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[6] = v7;
    result = memcpy(v6, v3, v4);
    v5[5] = v7;
  }
  return result;
}

void sub_1B3CE4BBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN5radio19QMICommandDriverM2017sendAccessoryInfoENSt3__16vectorIN3abm13AccessoryInfoENS1_9allocatorIS4_EEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_41(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v11;

  v3 = a1[4];
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "sending accessory info", &cf);
  v4 = (const void *)a1[5];
  if (!v4 || !a1[6])
    goto LABEL_20;
  v5 = cf;
  if (cf && (CFRetain(cf), (v4 = (const void *)a1[5]) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = a1[6];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_86;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    v11 = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v11 = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11)
    CFRelease(v11);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void __copy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  void *v9;
  NSObject *v10;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  v5 = (_BYTE *)a2[5];
  v4 = (_BYTE *)a2[6];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v6);
    a1[5] = v7;
    a1[6] = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a1[7] = v8;
    memcpy(v7, v5, v6);
    a1[6] = v8;
  }
  v9 = (void *)a2[8];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a2[9];
  a1[8] = v9;
  a1[9] = v10;
  if (v10)
    dispatch_retain(v10);
}

void sub_1B3CE4E8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE64c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  void *v4;

  v2 = a1[9];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[8];
  if (v3)
    _Block_release(v3);
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
}

void radio::QMICommandDriverM20::getRFFEScanData(uint64_t a1, uint64_t a2)
{
  const void *v3;
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD v9[5];
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v3 = *(const void **)a2;
  if (*(_QWORD *)a2 && *(_QWORD *)(a2 + 8))
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1174405120;
    v9[2] = ___ZN5radio19QMICommandDriverM2015getRFFEScanDataEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke;
    v9[3] = &__block_descriptor_tmp_48;
    v9[4] = a1;
    v5 = _Block_copy(v3);
    v6 = (uint64_t *)(a1 + 72);
    v7 = *(NSObject **)(a2 + 8);
    aBlock = v5;
    object = v7;
    if (v7)
      dispatch_retain(v7);
    ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v9);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
  else
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "No callback for getting RFFE scan data", buf, 2u);
    }
  }
}

void ___ZN5radio19QMICommandDriverM2015getRFFEScanDataEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *v9;
  dispatch_object_t object;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  _OWORD v16[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v3;
  v16[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
  v11 = v2 + 320;
  v12 = QMIServiceMsg::create();
  v13 = 25000;
  v14 = 0;
  v15 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio19QMICommandDriverM2015getRFFEScanDataEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_47;
  v8[4] = v2;
  v5 = (void *)a1[5];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a1[6];
  v9 = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15GetRFFEScanData8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4B80;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v15 = v7;
  if (v12)
  {
    qmi::Client::send();
    v7 = v15;
  }
  if (v7)
    _Block_release(v7);
  if (object)
    dispatch_release(object);
  if (v9)
    _Block_release(v9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
}

void sub_1B3CE5130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CE5154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2015getRFFEScanDataEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEE_block_invoke_2(_QWORD *a1, qmi::MessageBase *this)
{
  uint64_t v3;
  void *p_p;
  NSObject *v5;
  const void **v6;
  xpc_object_t v7;
  xpc_object_t v8;
  void *v9;
  char *TlvValue;
  int v11;
  __int128 v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  char *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  size_t v21;
  const void *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  void *__p;
  __int128 v29;
  __int128 block;
  void (*v31)(uint64_t);
  void *v32;
  void *aBlock;
  xpc_object_t v34;
  xpc_object_t object;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 1))
  {
    v3 = a1[4];
    p_p = operator new(0x20uLL);
    __p = p_p;
    v29 = xmmword_1B3DCB3C0;
    strcpy((char *)p_p, "Failed to get RFFE scan data");
    v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 136315138;
      *(_QWORD *)((char *)&block + 4) = p_p;
      _os_log_error_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
      v6 = (const void **)(a1 + 5);
      if (SHIBYTE(v29) < 0)
        p_p = __p;
      else
        p_p = &__p;
    }
    else
    {
      v6 = (const void **)(a1 + 5);
    }
    v7 = xpc_string_create((const char *)p_p);
    if (!v7)
      v7 = xpc_null_create();
    v8 = xpc_null_create();
    if (*v6)
      v9 = _Block_copy(*v6);
    else
      v9 = 0;
    v19 = a1[6];
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 1174405120;
    v31 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v32 = &__block_descriptor_tmp_112;
    if (v9)
    {
      aBlock = _Block_copy(v9);
      v34 = v7;
      if (v7)
        goto LABEL_23;
    }
    else
    {
      aBlock = 0;
      v34 = v7;
      if (v7)
      {
LABEL_23:
        xpc_retain(v7);
        object = v8;
        if (v8)
        {
LABEL_24:
          xpc_retain(v8);
          goto LABEL_28;
        }
LABEL_27:
        object = xpc_null_create();
LABEL_28:
        dispatch_async(v19, &block);
        xpc_release(object);
        object = 0;
        xpc_release(v34);
        v34 = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v9)
          _Block_release(v9);
        xpc_release(v8);
        xpc_release(v7);
        if (SHIBYTE(v29) < 0)
        {
          v20 = __p;
LABEL_63:
          operator delete(v20);
          return;
        }
        return;
      }
    }
    v34 = xpc_null_create();
    object = v8;
    if (v8)
      goto LABEL_24;
    goto LABEL_27;
  }
  __p = 0;
  v29 = 0uLL;
  TlvValue = (char *)qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    block = 0uLL;
    v31 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&block, TlvValue, &TlvValue[v11], v11);
    v12 = block;
    v13 = *((_QWORD *)&block + 1) - block;
    v14 = (char *)__p;
    if (*((_QWORD *)&v29 + 1) - (_QWORD)__p < *((_QWORD *)&block + 1) - (_QWORD)block)
    {
      if ((v13 & 0x8000000000000000) != 0)
        goto LABEL_68;
      v15 = 2 * *((_QWORD *)&v29 + 1);
      if (2 * *((_QWORD *)&v29 + 1) <= v13)
        v15 = *((_QWORD *)&block + 1) - block;
      v16 = *((_QWORD *)&v29 + 1) >= 0x3FFFFFFFFFFFFFFFuLL ? 0x7FFFFFFFFFFFFFFFLL : v15;
      if ((v16 & 0x8000000000000000) != 0)
LABEL_68:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v17 = (char *)operator new(v16);
      v14 = v17;
      __p = v17;
      *(_QWORD *)&v29 = v17;
      *((_QWORD *)&v29 + 1) = &v17[v16];
      if (*((_QWORD *)&v12 + 1) != (_QWORD)v12)
      {
        memcpy(v17, (const void *)v12, v13);
        *(_QWORD *)&v29 = &v14[v13];
        v18 = (void *)block;
        if (!(_QWORD)block)
          goto LABEL_45;
LABEL_44:
        *((_QWORD *)&block + 1) = v18;
        operator delete(v18);
        goto LABEL_45;
      }
LABEL_43:
      *(_QWORD *)&v29 = &v14[v13];
      v18 = (void *)block;
      if (!(_QWORD)block)
        goto LABEL_45;
      goto LABEL_44;
    }
    v21 = v29 - (_QWORD)__p;
    if ((_QWORD)v29 - (_QWORD)__p >= v13)
    {
      if (*((_QWORD *)&block + 1) != (_QWORD)block)
        memmove(__p, (const void *)block, *((_QWORD *)&block + 1) - block);
      goto LABEL_43;
    }
    v22 = (const void *)(block + v21);
    if ((void *)v29 != __p)
    {
      memmove(__p, (const void *)block, v21);
      v14 = (char *)v29;
    }
    if (*((const void **)&v12 + 1) != v22)
      memmove(v14, v22, *((_QWORD *)&v12 + 1) - (_QWORD)v22);
    *(_QWORD *)&v29 = &v14[*((_QWORD *)&v12 + 1) - (_QWORD)v22];
    v18 = (void *)block;
    if ((_QWORD)block)
      goto LABEL_44;
  }
LABEL_45:
  v23 = xpc_null_create();
  v24 = xpc_data_create(__p, v29 - (_QWORD)__p);
  if (v24)
  {
    v25 = (const void *)a1[5];
    if (v25)
    {
LABEL_47:
      v26 = _Block_copy(v25);
      goto LABEL_50;
    }
  }
  else
  {
    v24 = xpc_null_create();
    v25 = (const void *)a1[5];
    if (v25)
      goto LABEL_47;
  }
  v26 = 0;
LABEL_50:
  v27 = a1[6];
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  v31 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke;
  v32 = &__block_descriptor_tmp_111;
  if (v26)
  {
    aBlock = _Block_copy(v26);
    v34 = v23;
    if (v23)
      goto LABEL_52;
LABEL_55:
    v34 = xpc_null_create();
    object = v24;
    if (v24)
      goto LABEL_53;
    goto LABEL_56;
  }
  aBlock = 0;
  v34 = v23;
  if (!v23)
    goto LABEL_55;
LABEL_52:
  xpc_retain(v23);
  object = v24;
  if (v24)
  {
LABEL_53:
    xpc_retain(v24);
    goto LABEL_57;
  }
LABEL_56:
  object = xpc_null_create();
LABEL_57:
  dispatch_async(v27, &block);
  xpc_release(object);
  object = 0;
  xpc_release(v34);
  v34 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v26)
    _Block_release(v26);
  xpc_release(v24);
  xpc_release(v23);
  v20 = __p;
  if (__p)
  {
    *(_QWORD *)&v29 = __p;
    goto LABEL_63;
  }
}

void sub_1B3CE5660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

uint64_t dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void radio::QMICommandDriverM20::getResetProperties(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting reset properties", buf, 2u);
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_60;
  v8[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *v9;
  dispatch_object_t object;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  _OWORD v16[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v3;
  v16[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
  v11 = v2 + 320;
  v12 = QMIServiceMsg::create();
  v13 = 25000;
  v14 = 0;
  v15 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_59;
  v8[4] = v2;
  v5 = (void *)a1[5];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a1[6];
  v9 = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetResetProperties8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4BA8;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v15 = v7;
  if (v12)
  {
    qmi::Client::send();
    v7 = v15;
  }
  if (v7)
    _Block_release(v7);
  if (object)
    dispatch_release(object);
  if (v9)
    _Block_release(v9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
}

void sub_1B3CE5A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CE5A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  tlv *TlvValue;
  int v9;
  tlv *v10;
  tlv *v11;
  int v12;
  tlv *v13;
  tlv *v14;
  int v15;
  tlv *v16;
  CFTypeRef v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  const void *v21;
  _QWORD v22[2];
  uint64_t (*v23)(uint64_t, const void **);
  void *v24;
  uint64_t *v25;
  _QWORD v26[2];
  uint64_t (*v27)(uint64_t, const void **);
  void *v28;
  uint64_t *v29;
  _QWORD v30[2];
  uint64_t (*v31)(uint64_t, const void **);
  void *v32;
  uint64_t *v33;
  CFTypeRef cf;
  const void *v35;
  uint64_t block;
  uint64_t p_block;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t (*v40)();
  CFTypeRef v41;
  CFTypeRef v42;

  v4 = a1[4];
  v35 = 0;
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting reset properties", &cf);
  v5 = 0;
  if (cf)
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v6 = 0;
  if (v6)
  {
    if (!a1[5])
      goto LABEL_41;
LABEL_14:
    if (!a1[6])
      goto LABEL_41;
    v17 = cf;
    if (cf)
      CFRetain(cf);
    if (v5)
      CFRetain(v5);
    v18 = (const void *)a1[5];
    if (v18)
      v19 = _Block_copy(v18);
    else
      v19 = 0;
    v20 = a1[6];
    block = MEMORY[0x1E0C809B0];
    p_block = 1174405120;
    v38 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke;
    v39 = (uint64_t (*)(uint64_t, uint64_t))&__block_descriptor_tmp_105;
    if (v19)
    {
      v40 = (uint64_t (*)())_Block_copy(v19);
      v41 = v17;
      if (!v17)
        goto LABEL_27;
    }
    else
    {
      v40 = 0;
      v41 = v17;
      if (!v17)
      {
LABEL_27:
        v42 = v5;
        if (v5)
          CFRetain(v5);
        dispatch_async(v20, &block);
        if (v42)
          CFRelease(v42);
        if (v41)
          CFRelease(v41);
        if (v40)
          _Block_release(v40);
        if (v19)
          _Block_release(v19);
        if (v5)
          CFRelease(v5);
        if (v17)
          CFRelease(v17);
        goto LABEL_41;
      }
    }
    CFRetain(v17);
    goto LABEL_27;
  }
  block = 0;
  p_block = (uint64_t)&block;
  v38 = 0x3002000000;
  v39 = __Block_byref_object_copy_;
  v40 = __Block_byref_object_dispose_;
  v7 = MEMORY[0x1E0C809B0];
  v41 = (CFTypeRef)0xAAAAAAAAAAAAAA01;
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 0x40000000;
  v31 = (uint64_t (*)(uint64_t, const void **))___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_51;
  v32 = &unk_1E66D4010;
  v33 = &block;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v10 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)1);
    LOBYTE(v21) = *(_BYTE *)v10 != 0;
    v31((uint64_t)v30, &v21);
  }
  v26[0] = v7;
  v26[1] = 0x40000000;
  v27 = (uint64_t (*)(uint64_t, const void **))___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2_54;
  v28 = &unk_1E66D4038;
  v29 = &block;
  v11 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v13 = v11;
  if (v11)
  {
    tlv::throwIfNotEnoughBytes(v11, (const unsigned __int8 *)v11 + v12, (const unsigned __int8 *)2);
    LOWORD(v21) = *(_WORD *)v13;
    v27((uint64_t)v26, &v21);
  }
  v22[0] = v7;
  v22[1] = 0x40000000;
  v23 = (uint64_t (*)(uint64_t, const void **))___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
  v24 = &unk_1E66D4060;
  v25 = &block;
  v14 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v16 = v14;
  if (v14)
  {
    tlv::throwIfNotEnoughBytes(v14, (const unsigned __int8 *)v14 + v15, (const unsigned __int8 *)4);
    LODWORD(v21) = *(_DWORD *)v16;
    v23((uint64_t)v22, &v21);
  }
  radio::BasebandProperties::toDict((radio::BasebandProperties *)(p_block + 40));
  v5 = v21;
  v35 = v21;
  _Block_object_dispose(&block, 8);
  if (a1[5])
    goto LABEL_14;
LABEL_41:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

void sub_1B3CE5DC8(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 5, v2, v3);
  JUMPOUT(0x1B3CE5C3CLL);
}

void sub_1B3CE5DF4(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 4, v2, v3);
  JUMPOUT(0x1B3CE5BD8);
}

void sub_1B3CE5E20(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 3, v2, v3);
  JUMPOUT(0x1B3CE5B74);
}

void sub_1B3CE5E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26)
{
  uint64_t v26;

  _Block_object_dispose((const void *)(v26 - 120), 8);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a26);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v26 - 128));
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_51(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 41) = *a2;
  return result;
}

uint64_t ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2_54(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 42) = *a2;
  return result;
}

uint64_t ___ZN5radio19QMICommandDriverM2018getResetPropertiesEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 44) = *a2;
  return result;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void radio::QMICommandDriverM20::sendBatteryInfoUpdate(uint64_t a1, char a2, char a3, uint64_t a4)
{
  NSObject *v8;
  void *v9;
  uint64_t *v10;
  NSObject *v11;
  _QWORD v12[5];
  void *aBlock;
  dispatch_object_t object;
  char v15;
  char v16;
  uint8_t buf[16];

  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I Sending battery info update", buf, 2u);
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_68;
  v12[4] = a1;
  v15 = a3;
  v16 = a2;
  v9 = *(void **)a4;
  if (*(_QWORD *)a4)
    v9 = _Block_copy(v9);
  v10 = (uint64_t *)(a1 + 72);
  v11 = *(NSObject **)(a4 + 8);
  aBlock = v9;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v10, (uint64_t)v12);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const void **v7;
  _BYTE *v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  char v20;
  char *v21;
  char *v22;
  const void **v23;
  char *v24;
  _BYTE *v25;
  _WORD *v26;
  _WORD *v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _QWORD *v35;
  char *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  _QWORD v56[5];
  void *v57;
  dispatch_object_t object;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  void *v63;
  _QWORD v64[2];
  uint64_t (*v65)(uint64_t, _BYTE *);
  void *v66;
  char v67;
  __int128 v68;
  __int128 v69;
  _QWORD aBlock[7];

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v68 = v3;
  v69 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v68);
  v4 = MEMORY[0x1E0C809B0];
  v64[0] = MEMORY[0x1E0C809B0];
  v64[1] = 0x40000000;
  v65 = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v66 = &__block_descriptor_tmp_63;
  v67 = *(_BYTE *)(a1 + 56);
  v5 = (char *)*((_QWORD *)&v68 + 1);
  v6 = (char *)v69;
  v7 = (const void **)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1) != (_QWORD)v69)
  {
    v7 = (const void **)*((_QWORD *)&v68 + 1);
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v69)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v69)
  {
LABEL_9:
    v9 = operator new(0x10uLL);
    v10 = v9;
    v9[4] = 1;
    *(_QWORD *)v9 = off_1E66D4BF0;
    if ((unint64_t)v6 < *((_QWORD *)&v69 + 1))
    {
      *(_QWORD *)v6 = v9;
      v11 = (uint64_t)(v6 + 8);
LABEL_22:
      *(_QWORD *)&v69 = v11;
      v65((uint64_t)v64, (_BYTE *)v10 + 9);
      goto LABEL_23;
    }
    v12 = v6 - v5;
    v13 = (v6 - v5) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      goto LABEL_77;
    v15 = *((_QWORD *)&v69 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v69 + 1) - (_QWORD)v5) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        goto LABEL_78;
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v10;
      v11 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((_QWORD *)&v68 + 1) = v18;
        *(_QWORD *)&v69 = v11;
        *((_QWORD *)&v69 + 1) = v19;
        if (!v5)
          goto LABEL_22;
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v10;
      v11 = 8 * v13 + 8;
      if (v5 == v6)
        goto LABEL_20;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_81;
    if ((unint64_t)(v5 - v17) < 0x20)
      goto LABEL_81;
    v40 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v6[-v41];
    v18 = (_QWORD *)((char *)v18 - v41);
    v43 = &v17[8 * v13 - 16];
    v44 = v6 - 16;
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    v6 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_81:
      do
      {
        v47 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v18 = v47;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v68 + 1);
    *((_QWORD *)&v68 + 1) = v18;
    *(_QWORD *)&v69 = v11;
    *((_QWORD *)&v69 + 1) = v19;
    if (!v5)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v8)
    goto LABEL_76;
  ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2((uint64_t)v64, v8 + 9);
LABEL_23:
  v20 = *(_BYTE *)(a1 + 57);
  v21 = (char *)*((_QWORD *)&v68 + 1);
  v22 = (char *)v69;
  v23 = (const void **)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1) != (_QWORD)v69)
  {
    v23 = (const void **)*((_QWORD *)&v68 + 1);
    while (*((_BYTE *)*v23 + 8) != 2)
    {
      if (++v23 == (const void **)v69)
        goto LABEL_31;
    }
  }
  if (v23 != (const void **)v69)
  {
    if (v24)
    {
      v25 = v24 + 9;
      goto LABEL_45;
    }
LABEL_76:
    __cxa_bad_cast();
  }
LABEL_31:
  v26 = operator new(0x10uLL);
  v27 = v26;
  v26[4] = 2;
  *(_QWORD *)v26 = off_1E66D4C40;
  if ((unint64_t)v22 >= *((_QWORD *)&v69 + 1))
  {
    v29 = v22 - v21;
    v30 = (v22 - v21) >> 3;
    v31 = v30 + 1;
    if (!((unint64_t)(v30 + 1) >> 61))
    {
      v32 = *((_QWORD *)&v69 + 1) - (_QWORD)v21;
      if ((uint64_t)(*((_QWORD *)&v69 + 1) - (_QWORD)v21) >> 2 > v31)
        v31 = v32 >> 2;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (!v33)
      {
        v34 = 0;
        v35 = (_QWORD *)(8 * v30);
        v36 = 0;
        *(_QWORD *)(8 * v30) = v27;
        v28 = 8 * v30 + 8;
        if (v21 == v22)
        {
LABEL_42:
          *((_QWORD *)&v68 + 1) = v35;
          *(_QWORD *)&v69 = v28;
          *((_QWORD *)&v69 + 1) = v36;
          if (!v21)
            goto LABEL_44;
LABEL_43:
          operator delete(v21);
          goto LABEL_44;
        }
LABEL_68:
        if ((unint64_t)(v29 - 8) < 0x58)
          goto LABEL_82;
        if ((unint64_t)(v21 - v34) < 0x20)
          goto LABEL_82;
        v48 = ((unint64_t)(v29 - 8) >> 3) + 1;
        v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
        v50 = &v22[-v49];
        v35 = (_QWORD *)((char *)v35 - v49);
        v51 = &v34[8 * v30 - 16];
        v52 = v22 - 16;
        v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v54 = *(_OWORD *)v52;
          *(v51 - 1) = *((_OWORD *)v52 - 1);
          *v51 = v54;
          v51 -= 2;
          v52 -= 32;
          v53 -= 4;
        }
        while (v53);
        v22 = v50;
        if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_82:
          do
          {
            v55 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *--v35 = v55;
          }
          while (v22 != v21);
        }
        v21 = (char *)*((_QWORD *)&v68 + 1);
        *((_QWORD *)&v68 + 1) = v35;
        *(_QWORD *)&v69 = v28;
        *((_QWORD *)&v69 + 1) = v36;
        if (!v21)
          goto LABEL_44;
        goto LABEL_43;
      }
      if (!(v33 >> 61))
      {
        v34 = operator new(8 * v33);
        v35 = &v34[8 * v30];
        v36 = &v34[8 * v33];
        *v35 = v27;
        v28 = (uint64_t)(v35 + 1);
        if (v21 == v22)
          goto LABEL_42;
        goto LABEL_68;
      }
LABEL_78:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_77:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *(_QWORD *)v22 = v26;
  v28 = (uint64_t)(v22 + 8);
LABEL_44:
  v25 = (char *)v27 + 9;
  *(_QWORD *)&v69 = v28;
LABEL_45:
  *v25 = v20;
  v59 = v2 + 320;
  v60 = QMIServiceMsg::create();
  v61 = 25000;
  v62 = 0;
  v63 = 0;
  v56[0] = v4;
  v56[1] = 1174405120;
  v56[2] = ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4;
  v56[3] = &__block_descriptor_tmp_67;
  v56[4] = v2;
  v37 = *(void **)(a1 + 40);
  if (v37)
    v37 = _Block_copy(v37);
  v38 = *(NSObject **)(a1 + 48);
  v57 = v37;
  object = v38;
  if (v38)
    dispatch_retain(v38);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15SendBatteryInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4C70;
  aBlock[4] = v56;
  v39 = _Block_copy(aBlock);
  v63 = v39;
  if (v60)
  {
    qmi::Client::send();
    v39 = v63;
  }
  if (v39)
    _Block_release(v39);
  if (object)
    dispatch_release(object);
  if (v57)
    _Block_release(v57);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v68);
}

void sub_1B3CE6540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B3CE6564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void sub_1B3CE657C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN5radio19QMICommandDriverM2021sendBatteryInfoUpdateEhbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_4(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v11;

  v3 = a1[4];
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "sending battery info", &cf);
  v4 = (const void *)a1[5];
  if (!v4 || !a1[6])
    goto LABEL_20;
  v5 = cf;
  if (cf && (CFRetain(cf), (v4 = (const void *)a1[5]) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = a1[6];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_86;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    v11 = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v11 = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11)
    CFRelease(v11);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

void radio::QMICommandDriverM20::enableResetSPMIEvent(radio::QMICommandDriverM20 *this)
{
  char *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::string *v17;
  unint64_t *v18;
  NSObject *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  std::string __p;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = (char *)operator new(0x20uLL);
  strcpy(v2, "enable resetting SPMI event");
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v24) = 136315138;
    *(_QWORD *)((char *)&v24 + 4) = v2;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v24, 0xCu);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v4 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v24 = this;
  *((_QWORD *)&v24 + 1) = v5;
  v25 = v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  std::string::__init_copy_ctor_external(&__p, v2, 0x1BuLL);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v13 || (v14 = *((_QWORD *)this + 9), (v15 = std::__shared_weak_count::lock(v13)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v16 = v15;
  v17 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v24;
  v17->__r_.__value_.__r.__words[2] = (std::string::size_type)v25;
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0;
  v17[1] = __p;
  memset(&__p, 0, sizeof(__p));
  v18 = (unint64_t *)&v16->__shared_owners_;
  v19 = *((_QWORD *)this + 11);
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  v21 = operator new(0x18uLL);
  *v21 = v17;
  v21[1] = v14;
  v21[2] = v16;
  dispatch_async_f(v19, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0>(radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v22 = __ldaxr(v18);
  while (__stlxr(v22 - 1, v18));
  if (v22)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_21;
LABEL_25:
    operator delete(__p.__r_.__value_.__l.__data_);
    v23 = v25;
    if (!v25)
      goto LABEL_23;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
LABEL_21:
  v23 = v25;
  if (v25)
LABEL_22:
    std::__shared_weak_count::__release_weak(v23);
LABEL_23:
  std::__shared_weak_count::__release_weak(v7);
  operator delete(v2);
}

void sub_1B3CE6958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)radio::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3CE6B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3CE6B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<radio::QMICommandDriverM20 *,std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20 *)#1},std::allocator<radio::QMICommandDriverM20>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMICommandDriverM20 *,std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20 *)#1},std::allocator<radio::QMICommandDriverM20>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20*)#1}::operator() const(radio::QMICommandDriverM20*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::QMICommandDriverM20 *,std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20 *)#1},std::allocator<radio::QMICommandDriverM20>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEE"
                     "NSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_19QMICommandD"
                                "riverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::QMICommandDriverM20> ctu::SharedSynchronizable<radio::CommandDriver>::make_shared_ptr<radio::QMICommandDriverM20>(radio::QMICommandDriverM20*)::{lambda(radio::QMICommandDriverM20*)#1}::operator() const(radio::QMICommandDriverM20*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::cf::insert<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  uint64_t v12;
  unint64_t valuePtr;

  valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = (const void *)valuePtr;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    CFDictionaryAddValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_1B3CE6D2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CE6D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

BOOL ctu::cf::insert<char const*,__CFData const*>(__CFDictionary *a1, const __CFString **a2, const void *a3, uint64_t a4, const __CFAllocator *a5)
{
  const void *v7;
  _BOOL8 v8;
  const void *v10;

  v10 = 0;
  ctu::cf::convert_copy((ctu::cf *)&v10, a2, (const char *)0x8000100, a4, a5);
  v7 = v10;
  v10 = a3;
  if (!a3)
  {
    v8 = 0;
    if (!v7)
      return v8;
LABEL_7:
    CFRelease(v7);
    return v8;
  }
  CFRetain(a3);
  v8 = v7 != 0;
  if (v7)
    CFDictionaryAddValue(a1, v7, a3);
  CFRelease(a3);
  if (v7)
    goto LABEL_7;
  return v8;
}

void sub_1B3CE6E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CE6E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16GetWakeReasonIPA8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CE6F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CE6F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CE6F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm15GetWakeReasonV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CE7040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CE7054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CE7080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getFieldTestConfig(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t object;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  _OWORD v28[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28[0] = v4;
  v28[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19[0]) = 0;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Getting field test config", (uint8_t *)v19, 2u);
  }
  v23 = v3 + 320;
  v24 = QMIServiceMsg::create();
  v25 = 25000;
  v26 = 0;
  v27 = 0;
  v6 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke;
  v19[3] = &__block_descriptor_tmp_84;
  v19[4] = v3;
  v19[5] = v2[1];
  v7 = (std::__shared_weak_count *)v2[2];
  v20 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = (void *)v2[3];
  if (v10)
    v10 = _Block_copy(v10);
  v21 = v10;
  v11 = v2[4];
  object = v11;
  if (v11)
    dispatch_retain(v11);
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20GetFieldTestConfigV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4318;
  aBlock[4] = v19;
  v12 = _Block_copy(aBlock);
  v27 = v12;
  if (v24)
  {
    qmi::Client::send();
    v12 = v27;
  }
  if (v12)
    _Block_release(v12);
  if (object)
    dispatch_release(object);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
  v13 = v2[4];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v2[3];
  if (v14)
    _Block_release(v14);
  v15 = (std::__shared_weak_count *)v2[2];
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(v2);
  v16 = (std::__shared_weak_count *)a1[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(a1);
}

void sub_1B3CE72AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  NSObject *v26;
  const void *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = v24[4];
  if (v26)
    dispatch_release(v26);
  v27 = (const void *)v24[3];
  if (v27)
    _Block_release(v27);
  v28 = (std::__shared_weak_count *)v24[2];
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  operator delete(v24);
  v29 = (std::__shared_weak_count *)v23[2];
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  uint64_t (*v9)(uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t TlvValue;
  int v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  CFTypeRef v17;
  const void *v18;
  void *v19;
  std::__shared_weak_count *v20;
  NSObject *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD v24[2];
  uint64_t (*v25)(uint64_t, unsigned __int16 *);
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  CFTypeRef cf;
  _QWORD v40[2];
  void (*v41)(_QWORD *, unsigned __int8 *);
  void *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v56[3];
  char v57;
  _QWORD v58[3];
  char v59;
  _QWORD v60[3];
  char v61;
  _QWORD v62[3];
  char v63;
  _QWORD v64[3];
  char v65;
  _QWORD v66[3];
  char v67;
  _QWORD v68[3];
  char v69;
  _QWORD v70[3];
  char v71;
  _QWORD v72[3];
  char v73;
  _QWORD v74[3];
  char v75;
  _QWORD v76[3];
  char v77;
  _QWORD v78[3];
  char v79;
  CFMutableDictionaryRef v80;
  CFTypeRef v81;
  std::__shared_weak_count *v83;
  uint64_t v84;
  int v85;
  _BYTE block[40];
  __int128 v87;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v83 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v20 = v6;
LABEL_56:
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    return;
  }
  v81 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v5, a2, "getting field test config", &v81);
  v80 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  if (Mutable)
    v80 = Mutable;
  if (v81)
    v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v9 = 0;
  if (!v9)
  {
    v10 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
    if (!Mutable)
      v10 = 0;
    if (v10)
    {
      v78[0] = 0;
      v78[1] = v78;
      v78[2] = 0x2000000000;
      v79 = 1;
      v76[0] = 0;
      v76[1] = v76;
      v76[2] = 0x2000000000;
      v77 = 1;
      v74[0] = 0;
      v74[1] = v74;
      v74[2] = 0x2000000000;
      v75 = 1;
      v72[0] = 0;
      v72[1] = v72;
      v72[2] = 0x2000000000;
      v73 = 1;
      v70[0] = 0;
      v70[1] = v70;
      v70[2] = 0x2000000000;
      v71 = 1;
      v68[0] = 0;
      v68[1] = v68;
      v68[2] = 0x2000000000;
      v69 = 1;
      v66[0] = 0;
      v66[1] = v66;
      v66[2] = 0x2000000000;
      v67 = 1;
      v64[0] = 0;
      v64[1] = v64;
      v64[2] = 0x2000000000;
      v65 = 1;
      v62[0] = 0;
      v62[1] = v62;
      v62[2] = 0x2000000000;
      v63 = 1;
      v60[0] = 0;
      v60[1] = v60;
      v60[2] = 0x2000000000;
      v61 = 1;
      v58[0] = 0;
      v58[1] = v58;
      v58[2] = 0x2000000000;
      v59 = 1;
      v56[0] = 0;
      v56[1] = v56;
      v56[2] = 0x2000000000;
      v11 = MEMORY[0x1E0C809B0];
      v57 = 1;
      v40[0] = MEMORY[0x1E0C809B0];
      v40[1] = 0x40000000;
      v41 = ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke_2;
      v42 = &unk_1E66D4288;
      v54 = v56;
      v55 = v5;
      v43 = v78;
      v44 = v76;
      v45 = v74;
      v46 = v72;
      v47 = v70;
      v48 = v68;
      v49 = v66;
      v50 = v64;
      v51 = v62;
      v52 = v60;
      v53 = v58;
      TlvValue = qmi::MessageBase::findTlvValue(a2);
      if (TlvValue)
      {
        *(_DWORD *)&block[8] = 0;
        *(_QWORD *)block = 0;
        bsp::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)(TlvValue + v13), block);
        v84 = *(_QWORD *)block;
        v85 = *(_DWORD *)&block[8];
        v41(v40, (unsigned __int8 *)&v84);
      }
      v24[0] = v11;
      v24[1] = 1174405120;
      v25 = ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke_81;
      v26 = &unk_1E66D42B0;
      v8 = v80;
      v27 = v78;
      cf = v80;
      if (v80)
        CFRetain(v80);
      v28 = v76;
      v29 = v74;
      v30 = v72;
      v31 = v70;
      v32 = v68;
      v33 = v66;
      v34 = v64;
      v35 = v62;
      v36 = v60;
      v37 = v58;
      v38 = v56;
      v14 = qmi::MessageBase::findTlvValue(a2);
      if (v14)
      {
        *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&block[4] = v16;
        *(_OWORD *)&block[20] = v16;
        HIWORD(v87) = -21846;
        *(_DWORD *)block = 0;
        *(_WORD *)&block[4] = 0;
        *(_DWORD *)&block[20] = 0;
        *(_WORD *)&block[24] = 0;
        *(_WORD *)&block[28] = 0;
        *(_QWORD *)&block[8] = 0;
        *(_WORD *)&block[16] = 0;
        *(_QWORD *)&block[32] = 0;
        *(_QWORD *)&v87 = 0;
        *(_QWORD *)((char *)&v87 + 6) = 0;
        bsp::tlv::abm::parseField(v14, (const unsigned __int8 *)(v14 + v15), (uint64_t)block);
        v25((uint64_t)v24, (unsigned __int16 *)block);
      }
      if (cf)
        CFRelease(cf);
      _Block_object_dispose(v56, 8);
      _Block_object_dispose(v58, 8);
      _Block_object_dispose(v60, 8);
      _Block_object_dispose(v62, 8);
      _Block_object_dispose(v64, 8);
      _Block_object_dispose(v66, 8);
      _Block_object_dispose(v68, 8);
      _Block_object_dispose(v70, 8);
      _Block_object_dispose(v72, 8);
      _Block_object_dispose(v74, 8);
      _Block_object_dispose(v76, 8);
      _Block_object_dispose(v78, 8);
    }
  }
  if (a1[7] && a1[8])
  {
    v17 = v81;
    if (v81)
      CFRetain(v81);
    if (v8)
      CFRetain(v8);
    v18 = (const void *)a1[7];
    if (v18)
      v19 = _Block_copy(v18);
    else
      v19 = 0;
    v21 = a1[8];
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    *(_QWORD *)&block[8] = 1174405120;
    *(_QWORD *)&block[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
    *(_QWORD *)&block[24] = &__block_descriptor_tmp_73;
    if (v19)
    {
      *(_QWORD *)&block[32] = _Block_copy(v19);
      *(_QWORD *)&v87 = v17;
      if (!v17)
        goto LABEL_37;
    }
    else
    {
      *(_QWORD *)&block[32] = 0;
      *(_QWORD *)&v87 = v17;
      if (!v17)
      {
LABEL_37:
        *((_QWORD *)&v87 + 1) = v8;
        if (v8)
          CFRetain(v8);
        dispatch_async(v21, block);
        if (*((_QWORD *)&v87 + 1))
          CFRelease(*((CFTypeRef *)&v87 + 1));
        if ((_QWORD)v87)
          CFRelease((CFTypeRef)v87);
        if (*(_QWORD *)&block[32])
          _Block_release(*(const void **)&block[32]);
        if (v19)
          _Block_release(v19);
        if (v8)
          CFRelease(v8);
        if (v17)
          CFRelease(v17);
        goto LABEL_51;
      }
    }
    CFRetain(v17);
    goto LABEL_37;
  }
LABEL_51:
  if (v80)
    CFRelease(v80);
  if (v81)
    CFRelease(v81);
  v20 = v83;
  if (v83)
    goto LABEL_56;
}

void sub_1B3CE78E0(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 3, v2, v3);
  JUMPOUT(0x1B3CE76C8);
}

void sub_1B3CE7910(void *a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v2, 4, v1, v3);
  JUMPOUT(0x1B3CE75C4);
}

void sub_1B3CE796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a68;
  char a72;
  uint64_t v72;

  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a48, 8);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a56, 8);
  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&a72, 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x238], 8);
  _Block_object_dispose((const void *)(v72 - 232), 8);
  _Block_object_dispose((const void *)(v72 - 200), 8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v72 - 168));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v72 - 160));
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v72 - 152);
  _Unwind_Resume(a1);
}

void sub_1B3CE7A40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 152);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke_2(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  int v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  int v41;
  const char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a1[16];
  v5 = *a2;
  if (!*a2
    || (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0,
        v6 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    v7 = a2[1];
    if (!a2[1])
      goto LABEL_5;
    goto LABEL_4;
  }
  v29 = (const char *)&unk_1B3DD42EB;
  if (v5 == 1)
    v29 = "- Invalid";
  v41 = 136315138;
  v42 = v29;
  _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "Failed to read RxDiversityCDMA %s", (uint8_t *)&v41, 0xCu);
  v7 = a2[1];
  if (a2[1])
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
    v8 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v30 = (const char *)&unk_1B3DD42EB;
      if (v7 == 1)
        v30 = "- Invalid";
      v41 = 136315138;
      v42 = v30;
      _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "Failed to read RxDiversityWCDMA %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_5:
  v9 = a2[2];
  if (!a2[2]
    || (*(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 0,
        v10 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)))
  {
    v11 = a2[3];
    if (!a2[3])
      goto LABEL_9;
    goto LABEL_8;
  }
  v31 = (const char *)&unk_1B3DD42EB;
  if (v9 == 1)
    v31 = "- Invalid";
  v41 = 136315138;
  v42 = v31;
  _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Failed to read RxDiversityLTE %s", (uint8_t *)&v41, 0xCu);
  v11 = a2[3];
  if (a2[3])
  {
LABEL_8:
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 0;
    v12 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v32 = (const char *)&unk_1B3DD42EB;
      if (v11 == 1)
        v32 = "- Invalid";
      v41 = 136315138;
      v42 = v32;
      _os_log_error_impl(&dword_1B3CB3000, v12, OS_LOG_TYPE_ERROR, "Failed to read ARTD %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_9:
  v13 = a2[4];
  if (!a2[4]
    || (*(_BYTE *)(*(_QWORD *)(a1[8] + 8) + 24) = 0,
        v14 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)))
  {
    v15 = a2[5];
    if (!a2[5])
      goto LABEL_13;
    goto LABEL_12;
  }
  v33 = (const char *)&unk_1B3DD42EB;
  if (v13 == 1)
    v33 = "- Invalid";
  v41 = 136315138;
  v42 = v33;
  _os_log_error_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_ERROR, "Failed to read Tx Antenna %s", (uint8_t *)&v41, 0xCu);
  v15 = a2[5];
  if (a2[5])
  {
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(a1[9] + 8) + 24) = 0;
    v16 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v34 = (const char *)&unk_1B3DD42EB;
      if (v15 == 1)
        v34 = "- Invalid";
      v41 = 136315138;
      v42 = v34;
      _os_log_error_impl(&dword_1B3CB3000, v16, OS_LOG_TYPE_ERROR, "Failed to read UARFCN Lock %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_13:
  v17 = a2[6];
  if (!a2[6]
    || (*(_BYTE *)(*(_QWORD *)(a1[10] + 8) + 24) = 0,
        v18 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)))
  {
    v19 = a2[7];
    if (!a2[7])
      goto LABEL_17;
    goto LABEL_16;
  }
  v35 = (const char *)&unk_1B3DD42EB;
  if (v17 == 1)
    v35 = "- Invalid";
  v41 = 136315138;
  v42 = v35;
  _os_log_error_impl(&dword_1B3CB3000, v18, OS_LOG_TYPE_ERROR, "Failed to read EARFCN Lock %s", (uint8_t *)&v41, 0xCu);
  v19 = a2[7];
  if (a2[7])
  {
LABEL_16:
    *(_BYTE *)(*(_QWORD *)(a1[11] + 8) + 24) = 0;
    v20 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v36 = (const char *)&unk_1B3DD42EB;
      if (v19 == 1)
        v36 = "- Invalid";
      v41 = 136315138;
      v42 = v36;
      _os_log_error_impl(&dword_1B3CB3000, v20, OS_LOG_TYPE_ERROR, "Failed to read PCI Lock %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_17:
  v21 = a2[8];
  if (!a2[8]
    || (*(_BYTE *)(*(_QWORD *)(a1[12] + 8) + 24) = 0,
        v22 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)))
  {
    v23 = a2[9];
    if (!a2[9])
      goto LABEL_21;
    goto LABEL_20;
  }
  v37 = (const char *)&unk_1B3DD42EB;
  if (v21 == 1)
    v37 = "- Invalid";
  v41 = 136315138;
  v42 = v37;
  _os_log_error_impl(&dword_1B3CB3000, v22, OS_LOG_TYPE_ERROR, "Failed to read Lock Count %s", (uint8_t *)&v41, 0xCu);
  v23 = a2[9];
  if (a2[9])
  {
LABEL_20:
    *(_BYTE *)(*(_QWORD *)(a1[13] + 8) + 24) = 0;
    v24 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v38 = (const char *)&unk_1B3DD42EB;
      if (v23 == 1)
        v38 = "- Invalid";
      v41 = 136315138;
      v42 = v38;
      _os_log_error_impl(&dword_1B3CB3000, v24, OS_LOG_TYPE_ERROR, "Failed to read 5G EARFCN Lock %s", (uint8_t *)&v41, 0xCu);
    }
  }
LABEL_21:
  v25 = a2[10];
  if (!a2[10]
    || (*(_BYTE *)(*(_QWORD *)(a1[14] + 8) + 24) = 0,
        v26 = *(NSObject **)(v4 + 40),
        !os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)))
  {
    v27 = a2[11];
    if (!v27)
      return;
    goto LABEL_24;
  }
  v39 = (const char *)&unk_1B3DD42EB;
  if (v25 == 1)
    v39 = "- Invalid";
  v41 = 136315138;
  v42 = v39;
  _os_log_error_impl(&dword_1B3CB3000, v26, OS_LOG_TYPE_ERROR, "Failed to read 5G SCS Lock %s", (uint8_t *)&v41, 0xCu);
  v27 = a2[11];
  if (v27)
  {
LABEL_24:
    *(_BYTE *)(*(_QWORD *)(a1[15] + 8) + 24) = 0;
    v28 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v40 = (const char *)&unk_1B3DD42EB;
      if (v27 == 1)
        v40 = "- Invalid";
      v41 = 136315138;
      v42 = v40;
      _os_log_error_impl(&dword_1B3CB3000, v28, OS_LOG_TYPE_ERROR, "Failed to read uSleep %s", (uint8_t *)&v41, 0xCu);
    }
  }
}

uint64_t ___ZZN5radio19QMICommandDriverM2018getFieldTestConfigEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEEENK3__0clEv_block_invoke_81(uint64_t result, unsigned __int16 *a2)
{
  uint64_t v3;
  CFAllocatorRef *v4;
  const __CFAllocator *v5;

  v3 = result;
  v4 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(result + 128), (CFTypeRef)*MEMORY[0x1E0DDF988], *a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF998], a2[1], *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF968], a2[2], *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 56) + 8) + 24))
  {
    v5 = *v4;
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF990], *((unsigned __int8 *)a2 + 8), *v4);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF8D0], *((unsigned __int8 *)a2 + 9), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF778], *((unsigned __int8 *)a2 + 10), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF770], *((unsigned __int8 *)a2 + 11), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF8A0], *((unsigned __int8 *)a2 + 12), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF900], *((unsigned __int8 *)a2 + 13), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF780], *((unsigned __int8 *)a2 + 14), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF7A0], *((unsigned __int8 *)a2 + 15), v5);
    ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF790], *((unsigned __int8 *)a2 + 16), v5);
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF898], *((unsigned __int8 *)a2 + 17), v5);
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF8C8], a2[12], *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF8E0], a2[14], *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 80) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF8D8], *((_DWORD *)a2 + 8), *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF788], *((_DWORD *)a2 + 9), *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 96) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF940], *((_DWORD *)a2 + 10), *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 104) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF930], *((_DWORD *)a2 + 11), *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 112) + 8) + 24))
    result = ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF890], *((_DWORD *)a2 + 12), *v4);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 120) + 8) + 24))
    return ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(v3 + 128), (CFTypeRef)*MEMORY[0x1E0DDF938], a2[26], *v4);
  return result;
}

CFTypeRef __copy_helper_block_e8_128c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_128c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 128);
  if (v1)
    CFRelease(v1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20GetFieldTestConfigV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CE84E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CE84F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CE8520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<__CFString const*,int>(__CFDictionary *a1, CFTypeRef cf, int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  BOOL v10;
  uint64_t v11;
  int valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  v9 = v8;
  if (cf)
    v10 = v8 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v11;
}

void sub_1B3CE85D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CE85FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3CE8664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 32);
  if (!v4)
  {
    result = *(CFTypeRef *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v5 = _Block_copy(v4);
  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 40);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 32);
  if (v3)
    _Block_release(v3);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  const void **v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  const void **v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  const void **v59;
  char *v60;
  char *v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  _QWORD *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  const void **v83;
  char *v84;
  char *v85;
  _BYTE *v86;
  _BYTE *v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_weak_owners;
  unint64_t v109;
  void *v110;
  NSObject *v111;
  void *v112;
  std::__shared_weak_count *v113;
  unint64_t *p_shared_owners;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v119;
  uint8_t buf[8];
  uint64_t v121;
  void (*v122)(_QWORD *, const qmi::ResponseBase *);
  void *v123;
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void *v127;
  dispatch_object_t object;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  void *v133;
  _QWORD v134[2];
  uint64_t (*v135)(uint64_t, char *);
  void *v136;
  _BYTE v137[16];
  _QWORD v138[2];
  uint64_t (*v139)(uint64_t, uint64_t);
  void *v140;
  _BYTE v141[16];
  _QWORD v142[2];
  uint64_t (*v143)(uint64_t, char *);
  void *v144;
  _BYTE v145[16];
  _QWORD v146[2];
  uint64_t (*v147)(uint64_t, _BYTE *);
  void *v148;
  uint64_t v149;
  _QWORD v150[2];
  uint64_t (*v151)(uint64_t, char *);
  void *v152;
  _BYTE v153[16];
  _QWORD v154[2];
  __int128 v155;
  __int128 v156;
  _QWORD aBlock[7];

  v1 = *a1;
  v119 = v1;
  v2 = *v1;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v155 = v3;
  v156 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v155);
  v154[0] = 0xAAAAAAAAAAAAAAAALL;
  v154[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v154, (const __CFDictionary *)v1[3]);
  v4 = MEMORY[0x1E0C809B0];
  v150[0] = MEMORY[0x1E0C809B0];
  v150[1] = 1174405120;
  v151 = (uint64_t (*)(uint64_t, char *))___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke;
  v152 = &__block_descriptor_tmp_88;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v153, (const ctu::cf::dict_adapter *)v154);
  v5 = (char *)*((_QWORD *)&v155 + 1);
  v6 = (char *)v156;
  v7 = (const void **)*((_QWORD *)&v155 + 1);
  v116 = v2;
  if (*((_QWORD *)&v155 + 1) != (_QWORD)v156)
  {
    v7 = (const void **)*((_QWORD *)&v155 + 1);
    while (*((_BYTE *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v156)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v156)
  {
LABEL_9:
    v10 = (char *)operator new(0x10uLL);
    v11 = v10;
    v10[8] = 16;
    *(_QWORD *)v10 = off_1E66D44B0;
    *(_DWORD *)(v10 + 10) = 0;
    v9 = v10 + 10;
    *((_WORD *)v10 + 7) = 0;
    if ((unint64_t)v6 < *((_QWORD *)&v156 + 1))
    {
      *(_QWORD *)v6 = v10;
      v12 = (uint64_t)(v6 + 8);
LABEL_31:
      *(_QWORD *)&v156 = v12;
      v4 = MEMORY[0x1E0C809B0];
      goto LABEL_32;
    }
    v13 = v6 - v5;
    v14 = (v6 - v5) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v156 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v156 + 1) - (_QWORD)v5) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v11;
      v12 = (uint64_t)(v19 + 1);
      if (v5 != v6)
      {
LABEL_20:
        if ((unint64_t)(v13 - 8) < 0x58)
          goto LABEL_173;
        if ((unint64_t)(v5 - v18) < 0x20)
          goto LABEL_173;
        v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
        v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
        v23 = &v6[-v22];
        v19 = (_QWORD *)((char *)v19 - v22);
        v24 = &v18[8 * v14 - 16];
        v25 = v6 - 16;
        v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        v6 = v23;
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_173:
          do
          {
            v28 = *((_QWORD *)v6 - 1);
            v6 -= 8;
            *--v19 = v28;
          }
          while (v6 != v5);
        }
        v5 = (char *)*((_QWORD *)&v155 + 1);
        *((_QWORD *)&v155 + 1) = v19;
        *(_QWORD *)&v156 = v12;
        *((_QWORD *)&v156 + 1) = v20;
        if (!v5)
          goto LABEL_31;
        goto LABEL_30;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v11;
      v12 = 8 * v14 + 8;
      if (v5 != v6)
        goto LABEL_20;
    }
    *((_QWORD *)&v155 + 1) = v19;
    *(_QWORD *)&v156 = v12;
    *((_QWORD *)&v156 + 1) = v20;
    if (!v5)
      goto LABEL_31;
LABEL_30:
    operator delete(v5);
    goto LABEL_31;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = v8 + 10;
LABEL_32:
  v151((uint64_t)v150, v9);
  v146[0] = v4;
  v146[1] = 1174405120;
  v147 = ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_89;
  v148 = &__block_descriptor_tmp_91;
  v29 = ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v149, (const ctu::cf::dict_adapter *)v154);
  v30 = (char *)*((_QWORD *)&v155 + 1);
  v31 = (char *)v156;
  v32 = (const void **)*((_QWORD *)&v155 + 1);
  v117 = v29;
  if (*((_QWORD *)&v155 + 1) != (_QWORD)v156)
  {
    v32 = (const void **)*((_QWORD *)&v155 + 1);
    while (*((_BYTE *)*v32 + 8) != 17)
    {
      if (++v32 == (const void **)v156)
        goto LABEL_40;
    }
  }
  if (v32 == (const void **)v156)
  {
LABEL_40:
    v35 = (char *)operator new(0x20uLL);
    v36 = v35;
    v35[8] = 17;
    *(_QWORD *)v35 = off_1E66D4500;
    *(_QWORD *)(v35 + 12) = 0;
    v34 = v35 + 12;
    *((_DWORD *)v35 + 6) = 0;
    *((_WORD *)v35 + 10) = 0;
    if ((unint64_t)v31 < *((_QWORD *)&v156 + 1))
    {
      *(_QWORD *)v31 = v35;
      v37 = (uint64_t)(v31 + 8);
LABEL_62:
      *(_QWORD *)&v156 = v37;
      v4 = MEMORY[0x1E0C809B0];
      goto LABEL_63;
    }
    v38 = v31 - v30;
    v39 = (v31 - v30) >> 3;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v41 = *((_QWORD *)&v156 + 1) - (_QWORD)v30;
    if ((uint64_t)(*((_QWORD *)&v156 + 1) - (_QWORD)v30) >> 2 > v40)
      v40 = v41 >> 2;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      if (v42 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v43 = operator new(8 * v42);
      v44 = &v43[8 * v39];
      v45 = &v43[8 * v42];
      *v44 = v36;
      v37 = (uint64_t)(v44 + 1);
      if (v30 != v31)
      {
LABEL_51:
        if ((unint64_t)(v38 - 8) < 0x58)
          goto LABEL_174;
        if ((unint64_t)(v30 - v43) < 0x20)
          goto LABEL_174;
        v46 = ((unint64_t)(v38 - 8) >> 3) + 1;
        v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        v48 = &v31[-v47];
        v44 = (_QWORD *)((char *)v44 - v47);
        v49 = &v43[8 * v39 - 16];
        v50 = v31 - 16;
        v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v52 = *(_OWORD *)v50;
          *(v49 - 1) = *((_OWORD *)v50 - 1);
          *v49 = v52;
          v49 -= 2;
          v50 -= 32;
          v51 -= 4;
        }
        while (v51);
        v31 = v48;
        if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_174:
          do
          {
            v53 = *((_QWORD *)v31 - 1);
            v31 -= 8;
            *--v44 = v53;
          }
          while (v31 != v30);
        }
        v30 = (char *)*((_QWORD *)&v155 + 1);
        *((_QWORD *)&v155 + 1) = v44;
        *(_QWORD *)&v156 = v37;
        *((_QWORD *)&v156 + 1) = v45;
        if (!v30)
          goto LABEL_62;
        goto LABEL_61;
      }
    }
    else
    {
      v43 = 0;
      v44 = (_QWORD *)(8 * v39);
      v45 = 0;
      *(_QWORD *)(8 * v39) = v36;
      v37 = 8 * v39 + 8;
      if (v30 != v31)
        goto LABEL_51;
    }
    *((_QWORD *)&v155 + 1) = v44;
    *(_QWORD *)&v156 = v37;
    *((_QWORD *)&v156 + 1) = v45;
    if (!v30)
      goto LABEL_62;
LABEL_61:
    operator delete(v30);
    goto LABEL_62;
  }
  if (!v33)
    __cxa_bad_cast();
  v34 = v33 + 12;
LABEL_63:
  v147((uint64_t)v146, v34);
  v142[0] = v4;
  v142[1] = 1174405120;
  v143 = (uint64_t (*)(uint64_t, char *))___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_92;
  v144 = &__block_descriptor_tmp_94;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v145, (const ctu::cf::dict_adapter *)v154);
  v54 = (const void **)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1) != (_QWORD)v156)
  {
    while (*((_BYTE *)*v54 + 8) != 18)
    {
      if (++v54 == (const void **)v156)
        goto LABEL_70;
    }
  }
  if (v54 == (const void **)v156)
  {
LABEL_70:
    v56 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::TxAntennaConfig>(&v155, 18);
  }
  else
  {
    if (!v55)
      __cxa_bad_cast();
    v56 = v55 + 10;
  }
  v143((uint64_t)v142, v56);
  v138[0] = v4;
  v138[1] = 1174405120;
  v139 = ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_95;
  v140 = &__block_descriptor_tmp_97;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v141, (const ctu::cf::dict_adapter *)v154);
  v57 = (char *)*((_QWORD *)&v155 + 1);
  v58 = (char *)v156;
  v59 = (const void **)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1) != (_QWORD)v156)
  {
    v59 = (const void **)*((_QWORD *)&v155 + 1);
    while (*((_BYTE *)*v59 + 8) != 19)
    {
      if (++v59 == (const void **)v156)
        goto LABEL_79;
    }
  }
  if (v59 == (const void **)v156)
  {
LABEL_79:
    v62 = operator new(0x28uLL);
    v63 = v62;
    v62[8] = 19;
    *((_WORD *)v62 + 6) = 0;
    v61 = v62 + 12;
    *(_QWORD *)v62 = off_1E66D45A0;
    *((_QWORD *)v62 + 2) = 0;
    *((_QWORD *)v62 + 3) = 0;
    *((_DWORD *)v62 + 8) = 0;
    if ((unint64_t)v58 < *((_QWORD *)&v156 + 1))
    {
      *(_QWORD *)v58 = v62;
      v64 = (uint64_t)(v58 + 8);
LABEL_101:
      *(_QWORD *)&v156 = v64;
      v4 = MEMORY[0x1E0C809B0];
      goto LABEL_102;
    }
    v65 = v58 - v57;
    v66 = (v58 - v57) >> 3;
    v67 = v66 + 1;
    if ((unint64_t)(v66 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v68 = *((_QWORD *)&v156 + 1) - (_QWORD)v57;
    if ((uint64_t)(*((_QWORD *)&v156 + 1) - (_QWORD)v57) >> 2 > v67)
      v67 = v68 >> 2;
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8)
      v69 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v69 = v67;
    if (v69)
    {
      if (v69 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v70 = operator new(8 * v69);
      v71 = &v70[8 * v66];
      v72 = &v70[8 * v69];
      *v71 = v63;
      v64 = (uint64_t)(v71 + 1);
      if (v57 != v58)
      {
LABEL_90:
        if ((unint64_t)(v65 - 8) < 0x58)
          goto LABEL_175;
        if ((unint64_t)(v57 - v70) < 0x20)
          goto LABEL_175;
        v73 = ((unint64_t)(v65 - 8) >> 3) + 1;
        v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v58[-v74];
        v71 = (_QWORD *)((char *)v71 - v74);
        v76 = &v70[8 * v66 - 16];
        v77 = v58 - 16;
        v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 4;
        }
        while (v78);
        v58 = v75;
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_175:
          do
          {
            v80 = *((_QWORD *)v58 - 1);
            v58 -= 8;
            *--v71 = v80;
          }
          while (v58 != v57);
        }
        v57 = (char *)*((_QWORD *)&v155 + 1);
        *((_QWORD *)&v155 + 1) = v71;
        *(_QWORD *)&v156 = v64;
        *((_QWORD *)&v156 + 1) = v72;
        if (!v57)
          goto LABEL_101;
        goto LABEL_100;
      }
    }
    else
    {
      v70 = 0;
      v71 = (_QWORD *)(8 * v66);
      v72 = 0;
      *(_QWORD *)(8 * v66) = v63;
      v64 = 8 * v66 + 8;
      if (v57 != v58)
        goto LABEL_90;
    }
    *((_QWORD *)&v155 + 1) = v71;
    *(_QWORD *)&v156 = v64;
    *((_QWORD *)&v156 + 1) = v72;
    if (!v57)
      goto LABEL_101;
LABEL_100:
    operator delete(v57);
    goto LABEL_101;
  }
  if (!v60)
    __cxa_bad_cast();
  v61 = v60 + 12;
LABEL_102:
  v139((uint64_t)v138, (uint64_t)v61);
  v134[0] = v4;
  v134[1] = 1174405120;
  v135 = (uint64_t (*)(uint64_t, char *))___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_98;
  v136 = &__block_descriptor_tmp_100;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v137, (const ctu::cf::dict_adapter *)v154);
  v82 = (char *)*((_QWORD *)&v155 + 1);
  v81 = (char *)v156;
  v83 = (const void **)*((_QWORD *)&v155 + 1);
  if (*((_QWORD *)&v155 + 1) != (_QWORD)v156)
  {
    v83 = (const void **)*((_QWORD *)&v155 + 1);
    while (*((_BYTE *)*v83 + 8) != 20)
    {
      if (++v83 == (const void **)v156)
        goto LABEL_110;
    }
  }
  if (v83 == (const void **)v156)
  {
LABEL_110:
    v86 = operator new(0x10uLL);
    v87 = v86;
    v86[8] = 20;
    *(_QWORD *)v86 = off_1E66D45F0;
    *((_WORD *)v86 + 5) = 0;
    v85 = v86 + 10;
    if ((unint64_t)v81 < *((_QWORD *)&v156 + 1))
    {
      *(_QWORD *)v81 = v86;
      *(_QWORD *)&v156 = v81 + 8;
      goto LABEL_133;
    }
    v88 = v81 - v82;
    v89 = (v81 - v82) >> 3;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v91 = *((_QWORD *)&v156 + 1) - (_QWORD)v82;
    if ((uint64_t)(*((_QWORD *)&v156 + 1) - (_QWORD)v82) >> 2 > v90)
      v90 = v91 >> 2;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
      v92 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    if (v92)
    {
      if (v92 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v93 = operator new(8 * v92);
      v94 = &v93[8 * v89];
      v95 = &v93[8 * v92];
      *v94 = v87;
      v96 = (uint64_t)(v94 + 1);
      if (v82 != v81)
      {
LABEL_121:
        if ((unint64_t)(v88 - 8) < 0x58)
          goto LABEL_176;
        if ((unint64_t)(v82 - v93) < 0x20)
          goto LABEL_176;
        v97 = ((unint64_t)(v88 - 8) >> 3) + 1;
        v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
        v99 = &v81[-v98];
        v94 = (_QWORD *)((char *)v94 - v98);
        v100 = &v93[8 * v89 - 16];
        v101 = v81 - 16;
        v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v103 = *(_OWORD *)v101;
          *(v100 - 1) = *((_OWORD *)v101 - 1);
          *v100 = v103;
          v100 -= 2;
          v101 -= 32;
          v102 -= 4;
        }
        while (v102);
        v81 = v99;
        if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_176:
          do
          {
            v104 = *((_QWORD *)v81 - 1);
            v81 -= 8;
            *--v94 = v104;
          }
          while (v81 != v82);
        }
        v82 = (char *)*((_QWORD *)&v155 + 1);
        *((_QWORD *)&v155 + 1) = v94;
        *(_QWORD *)&v156 = v96;
        *((_QWORD *)&v156 + 1) = v95;
        if (!v82)
          goto LABEL_132;
        goto LABEL_131;
      }
    }
    else
    {
      v93 = 0;
      v94 = (_QWORD *)(8 * v89);
      v95 = 0;
      *(_QWORD *)(8 * v89) = v87;
      v96 = 8 * v89 + 8;
      if (v82 != v81)
        goto LABEL_121;
    }
    *((_QWORD *)&v155 + 1) = v94;
    *(_QWORD *)&v156 = v96;
    *((_QWORD *)&v156 + 1) = v95;
    if (!v82)
    {
LABEL_132:
      *(_QWORD *)&v156 = v96;
      goto LABEL_133;
    }
LABEL_131:
    operator delete(v82);
    goto LABEL_132;
  }
  if (!v84)
    __cxa_bad_cast();
  v85 = v84 + 10;
LABEL_133:
  v135((uint64_t)v134, v85);
  v105 = *(NSObject **)(v116 + 40);
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v105, OS_LOG_TYPE_DEFAULT, "#I Setting field test config", buf, 2u);
  }
  v129 = v116 + 320;
  v130 = QMIServiceMsg::create();
  v131 = 25000;
  v132 = 0;
  v133 = 0;
  v106 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v121 = 1174405120;
  v122 = ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_101;
  v123 = &__block_descriptor_tmp_103;
  v124 = v116;
  v125 = v1[1];
  v107 = (std::__shared_weak_count *)v1[2];
  v126 = v107;
  if (v107)
  {
    p_shared_weak_owners = (unint64_t *)&v107->__shared_weak_owners_;
    do
      v109 = __ldxr(p_shared_weak_owners);
    while (__stxr(v109 + 1, p_shared_weak_owners));
  }
  v110 = (void *)v1[4];
  if (v110)
    v110 = _Block_copy(v110);
  v127 = v110;
  v111 = v1[5];
  object = v111;
  if (v111)
    dispatch_retain(v111);
  aBlock[0] = v106;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20SetFieldTestConfigV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4620;
  aBlock[4] = buf;
  v112 = _Block_copy(aBlock);
  v133 = v112;
  if (v130)
  {
    qmi::Client::send();
    v112 = v133;
  }
  if (v112)
    _Block_release(v112);
  if (object)
    dispatch_release(object);
  if (v127)
    _Block_release(v127);
  if (v126)
    std::__shared_weak_count::__release_weak(v126);
  MEMORY[0x1B5E2EE44](v137);
  MEMORY[0x1B5E2EE44](v141);
  MEMORY[0x1B5E2EE44](v145);
  MEMORY[0x1B5E2EE44](v117);
  MEMORY[0x1B5E2EE44](v153);
  MEMORY[0x1B5E2EE44](v154);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v155);
  std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](&v119);
  v113 = (std::__shared_weak_count *)a1[2];
  if (v113)
  {
    p_shared_owners = (unint64_t *)&v113->__shared_owners_;
    do
      v115 = __ldaxr(p_shared_owners);
    while (__stlxr(v115 - 1, p_shared_owners));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  operator delete(a1);
}

void sub_1B3CE92F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *__p, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,dispatch_object_t object,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (a27)
    qmi::Client::send();
  if (a30)
    _Block_release(a30);
  MEMORY[0x1B5E2EE44](v31);
  MEMORY[0x1B5E2EE44](v30);
  MEMORY[0x1B5E2EE44](a11);
  MEMORY[0x1B5E2EE44](a13);
  MEMORY[0x1B5E2EE44](a14);
  MEMORY[0x1B5E2EE44](v32 - 208);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v32 - 192));
  std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](&a16);
  v34 = (std::__shared_weak_count *)__p[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B3CE942C()
{
  JUMPOUT(0x1B3CE93B8);
}

void sub_1B3CE9434()
{
  JUMPOUT(0x1B3CE93C0);
}

_QWORD **std::unique_ptr<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setFieldTestConfig(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[5];
    if (v3)
      dispatch_release(v3);
    v4 = (const void *)v2[4];
    if (v4)
      _Block_release(v4);
    v5 = (const void *)v2[3];
    if (v5)
      CFRelease(v5);
    v6 = (std::__shared_weak_count *)v2[2];
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke(uint64_t a1, _WORD *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF988]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF998]);
  result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF968]);
  a2[2] = result;
  return result;
}

uint64_t __copy_helper_block_e8_32c27_ZTSN3ctu2cf12dict_adapterE(uint64_t a1, uint64_t a2)
{
  return ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 32), (const ctu::cf::dict_adapter *)(a2 + 32));
}

void __destroy_helper_block_e8_32c27_ZTSN3ctu2cf12dict_adapterE()
{
  JUMPOUT(0x1B5E2EE44);
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_89(uint64_t a1, _BYTE *a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF990]);
  a2[1] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF8D0]);
  a2[2] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF778]);
  a2[3] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF770]);
  a2[4] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF8A0]);
  a2[5] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF900]);
  a2[6] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF780]);
  a2[7] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF7A0]);
  a2[8] = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF790]);
  result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF898]);
  a2[9] = result;
  return result;
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_92(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF8C8]);
  *a2 = result;
  return result;
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_95(uint64_t a1, uint64_t a2)
{
  ctu::cf::map_adapter *v3;
  uint64_t result;

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *(_WORD *)a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF8E0]);
  *(_DWORD *)(a2 + 4) = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF8D8]);
  *(_DWORD *)(a2 + 8) = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF788]);
  *(_DWORD *)(a2 + 12) = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF940]);
  *(_DWORD *)(a2 + 16) = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF930]);
  result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF890]);
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

uint64_t ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_98(uint64_t a1, _WORD *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF938]);
  *a2 = result;
  return result;
}

void ___ZZN5radio19QMICommandDriverM2018setFieldTestConfigEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_101(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v19;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting field test config", &cf);
      v8 = (const void *)a1[7];
      if (!v8 || !a1[8])
      {
LABEL_23:
        if (cf)
          CFRelease(cf);
        goto LABEL_25;
      }
      v9 = cf;
      if (cf && (CFRetain(cf), (v8 = (const void *)a1[7]) == 0))
        v10 = 0;
      else
        v10 = _Block_copy(v8);
      v11 = a1[8];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_86;
      if (v10)
      {
        aBlock = _Block_copy(v10);
        v19 = v9;
        if (!v9)
          goto LABEL_15;
      }
      else
      {
        aBlock = 0;
        v19 = v9;
        if (!v9)
        {
LABEL_15:
          dispatch_async(v11, block);
          if (v19)
            CFRelease(v19);
          if (aBlock)
            _Block_release(aBlock);
          if (v10)
            _Block_release(v10);
          if (v9)
            CFRelease(v9);
          goto LABEL_23;
        }
      }
      CFRetain(v9);
      goto LABEL_15;
    }
  }
}

void sub_1B3CE995C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfigV2>::getSize()
{
  return 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfigV2>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *(_WORD *)(v3 + 5) = *(_WORD *)(result + 12);
  *(_WORD *)(v3 + 7) = *(_WORD *)(result + 14);
  *a2 = v3 + 9;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RxDiversityConfigV2>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D44B0;
  *(_DWORD *)(result + 10) = *(_DWORD *)(a1 + 10);
  *((_WORD *)result + 7) = *(_WORD *)(a1 + 14);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigV2>::getSize()
{
  return 17;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigV2>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 12);
  *(_BYTE *)(v3 + 4) = *(_BYTE *)(result + 13);
  *(_BYTE *)(v3 + 5) = *(_BYTE *)(result + 14);
  *(_BYTE *)(v3 + 6) = *(_BYTE *)(result + 15);
  *(_BYTE *)(v3 + 7) = *(_BYTE *)(result + 16);
  *(_BYTE *)(v3 + 8) = *(_BYTE *)(result + 17);
  *(_BYTE *)(v3 + 9) = *(_BYTE *)(result + 18);
  *(_BYTE *)(v3 + 10) = *(_BYTE *)(result + 19);
  *(_BYTE *)(v3 + 11) = *(_BYTE *)(result + 20);
  *(_BYTE *)(v3 + 12) = *(_BYTE *)(result + 21);
  *(_DWORD *)(v3 + 13) = *(_DWORD *)(result + 24);
  *a2 = v3 + 17;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 14;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigV2>::clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_1E66D4500;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  return result;
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::TxAntennaConfig>(_QWORD *a1, char a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v4[8] = a2;
  *(_QWORD *)v4 = &unk_1E66D4550;
  *((_WORD *)v4 + 5) = 0;
  v6 = v4 + 10;
  v8 = (char *)a1[2];
  v7 = a1[3];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = v4;
    v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  v11 = (char *)a1[1];
  v12 = (v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v5;
    v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (char *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v5;
  v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v22];
    v17 -= v22;
    v23 = &v16[8 * v12 - 16];
    v24 = (__int128 *)(v8 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfig>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfig>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &unk_1E66D4550;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARFCNLockConfig>::getSize()
{
  return 25;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARFCNLockConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 12);
  *(_DWORD *)(v3 + 5) = *(_DWORD *)(result + 16);
  *(_DWORD *)(v3 + 9) = *(_DWORD *)(result + 20);
  *(_DWORD *)(v3 + 13) = *(_DWORD *)(result + 24);
  *(_DWORD *)(v3 + 17) = *(_DWORD *)(result + 28);
  *(_DWORD *)(v3 + 21) = *(_DWORD *)(result + 32);
  *a2 = v3 + 25;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 22;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARFCNLockConfig>::clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_1E66D45A0;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  *(_QWORD *)(v2 + 28) = *(_QWORD *)(a1 + 28);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SleepConfig>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SleepConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SleepConfig>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D45F0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20SetFieldTestConfigV28ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CE9ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CE9EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CE9F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>(radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::sendRFSelfTestReq(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD ***a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  __int128 v4;
  int Int;
  int v6;
  NSObject *v7;
  const void **v8;
  const void **v9;
  const void **v10;
  const void *v11;
  void *v12;
  _BYTE *v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  NSObject *v25;
  void *v26;
  const void *v27;
  unint64_t v28;
  uint64_t v29;
  const void **v30;
  _OWORD *v31;
  const void **v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _QWORD *v46;
  char *v47;
  char *v48;
  _BYTE *v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  void *v53;
  NSObject *v54;
  const void *v55;
  const void *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  const void **v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  const void **v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  CFTypeRef cf;
  uint64_t v72;
  void *v73;
  _QWORD v74[2];
  __int128 v75;
  __int128 v76;
  __int128 __p;
  void (*v78)(uint64_t, QMIServiceMsg *);
  void *v79;
  uint8_t *v80;
  uint8_t buf[8];
  uint64_t v82;
  void *v83;
  void *v84;
  void *aBlock;
  CFTypeRef v86;
  CFTypeRef v87;
  uint64_t v88;

  v1 = a1;
  v88 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v75 = v4;
  v76 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v75);
  v74[0] = 0xAAAAAAAAAAAAAAAALL;
  v74[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v74, (const __CFDictionary *)v2[1]);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E0DDF980]);
  v6 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v74, (const __CFString *)*MEMORY[0x1E0DDF7A8]);
  v7 = v3[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = Int;
    LOWORD(v82) = 1024;
    *(_DWORD *)((char *)&v82 + 2) = v6;
    _os_log_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEFAULT, "#I Request RF Self Test: measure type = %d, test type = %d", buf, 0xEu);
  }
  if ((Int & 0x80000000) == 0 && (v6 & 0x80000000) == 0)
  {
    v9 = (const void **)*((_QWORD *)&v75 + 1);
    v8 = (const void **)v76;
    v10 = (const void **)*((_QWORD *)&v75 + 1);
    if (*((_QWORD *)&v75 + 1) != (_QWORD)v76)
    {
      v10 = (const void **)*((_QWORD *)&v75 + 1);
      while (*((_BYTE *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v76)
          goto LABEL_18;
      }
    }
    if (v10 != (const void **)v76)
    {
      if (!v13)
        __cxa_bad_cast();
      v13[9] = Int;
      if (v9 != v8)
      {
LABEL_59:
        while (*((_BYTE *)*v9 + 8) != 16)
        {
          if (++v9 == v8)
            goto LABEL_61;
        }
        if (v9 != v8)
        {
          if (!v60)
            __cxa_bad_cast();
          v49 = v60 + 9;
          goto LABEL_75;
        }
      }
LABEL_61:
      v36 = operator new(0x10uLL);
      v37 = v36;
      v36[4] = 16;
      *(_QWORD *)v36 = off_1E66D4718;
      if ((unint64_t)v8 < *((_QWORD *)&v76 + 1))
      {
        *v8 = v36;
        v38 = (uint64_t)(v8 + 1);
LABEL_74:
        v49 = (char *)v37 + 9;
        *(_QWORD *)&v76 = v38;
LABEL_75:
        *v49 = v6;
        v72 = QMIServiceMsg::create();
        v50 = MEMORY[0x1E0C809B0];
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v82 = 1174405120;
        v83 = ___ZZN5radio19QMICommandDriverM2017sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEEENK3__0clEv_block_invoke;
        v84 = &__block_descriptor_tmp_109;
        aBlock = v3;
        v51 = (void *)v2[2];
        if (v51)
          v51 = _Block_copy(v51);
        v86 = v51;
        v52 = v2[3];
        v87 = v52;
        if (v52)
          dispatch_retain(v52);
        *(_QWORD *)&__p = v50;
        *((_QWORD *)&__p + 1) = 0x40000000;
        v78 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17TriggerRFSelfTest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v79 = &unk_1E66D4748;
        v80 = buf;
        v53 = _Block_copy(&__p);
        v73 = v53;
        if (v72)
        {
          qmi::Client::send();
          v53 = v73;
        }
        if (v53)
          _Block_release(v53);
        if (v87)
          dispatch_release((dispatch_object_t)v87);
        if (v86)
          _Block_release(v86);
        goto LABEL_87;
      }
      v39 = (char *)*((_QWORD *)&v75 + 1);
      v40 = (char *)v8 - *((_QWORD *)&v75 + 1);
      v41 = ((uint64_t)v8 - *((_QWORD *)&v75 + 1)) >> 3;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v43 = *((_QWORD *)&v76 + 1) - *((_QWORD *)&v75 + 1);
      if ((uint64_t)(*((_QWORD *)&v76 + 1) - *((_QWORD *)&v75 + 1)) >> 2 > v42)
        v42 = v43 >> 2;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
        v44 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        if (v44 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v45 = operator new(8 * v44);
        v46 = &v45[8 * v41];
        v47 = &v45[8 * v44];
        *v46 = v37;
        v38 = (uint64_t)(v46 + 1);
        v48 = (char *)((char *)v8 - v39);
        if (v8 == (const void **)v39)
        {
LABEL_72:
          *((_QWORD *)&v75 + 1) = v46;
          *(_QWORD *)&v76 = v38;
          *((_QWORD *)&v76 + 1) = v47;
          if (!v8)
            goto LABEL_74;
LABEL_73:
          operator delete(v8);
          goto LABEL_74;
        }
      }
      else
      {
        v45 = 0;
        v46 = (_QWORD *)(8 * v41);
        v47 = 0;
        *(_QWORD *)(8 * v41) = v37;
        v38 = 8 * v41 + 8;
        v48 = (char *)((char *)v8 - v39);
        if (v8 == (const void **)v39)
          goto LABEL_72;
      }
      v61 = (unint64_t)(v48 - 8);
      if (v61 >= 0x58)
      {
        if ((unint64_t)((char *)v8 - v45 - (_QWORD)v40) >= 0x20)
        {
          v63 = (v61 >> 3) + 1;
          v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
          v62 = &v8[v64 / 0xFFFFFFFFFFFFFFF8];
          v46 = (_QWORD *)((char *)v46 - v64);
          v65 = &v45[8 * v41 - 16];
          v66 = v8 - 2;
          v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v68 = *(_OWORD *)v66;
            *(v65 - 1) = *((_OWORD *)v66 - 1);
            *v65 = v68;
            v65 -= 2;
            v66 -= 4;
            v67 -= 4;
          }
          while (v67);
          if (v63 == (v63 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_111:
            v8 = (const void **)*((_QWORD *)&v75 + 1);
            *((_QWORD *)&v75 + 1) = v46;
            *(_QWORD *)&v76 = v38;
            *((_QWORD *)&v76 + 1) = v47;
            if (!v8)
              goto LABEL_74;
            goto LABEL_73;
          }
        }
        else
        {
          v62 = v8;
        }
      }
      else
      {
        v62 = v8;
      }
      do
      {
        v69 = (uint64_t)*--v62;
        *--v46 = v69;
      }
      while (v62 != (const void **)v39);
      goto LABEL_111;
    }
LABEL_18:
    v70 = v1;
    v14 = operator new(0x10uLL);
    v15 = v14;
    v14[4] = 1;
    *(_QWORD *)v14 = off_1E66D46C8;
    if ((unint64_t)v8 < *((_QWORD *)&v76 + 1))
    {
      *v8 = v14;
      v16 = (uint64_t)(v8 + 1);
      goto LABEL_58;
    }
    v17 = (char *)v8 - (char *)v9;
    v18 = v8 - v9;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = *((_QWORD *)&v76 + 1) - (_QWORD)v9;
    if ((uint64_t)(*((_QWORD *)&v76 + 1) - (_QWORD)v9) >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v15;
      v16 = (uint64_t)(v23 + 1);
      if (v9 == v8)
        goto LABEL_56;
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      v24 = 0;
      *(_QWORD *)(8 * v18) = v15;
      v16 = 8 * v18 + 8;
      if (v9 == v8)
      {
LABEL_56:
        *((_QWORD *)&v75 + 1) = v23;
        *(_QWORD *)&v76 = v16;
        *((_QWORD *)&v76 + 1) = v24;
        if (v9)
          operator delete(v9);
LABEL_58:
        *(_QWORD *)&v76 = v16;
        v9 = (const void **)*((_QWORD *)&v75 + 1);
        v8 = (const void **)v16;
        v1 = v70;
        *((_BYTE *)v15 + 9) = Int;
        if (v9 != v8)
          goto LABEL_59;
        goto LABEL_61;
      }
    }
    if ((unint64_t)(v17 - 8) < 0x58)
      goto LABEL_121;
    if ((unint64_t)((char *)v9 - v22) < 0x20)
      goto LABEL_121;
    v28 = ((unint64_t)(v17 - 8) >> 3) + 1;
    v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = &v8[v29 / 0xFFFFFFFFFFFFFFF8];
    v23 = (_QWORD *)((char *)v23 - v29);
    v31 = &v22[8 * v18 - 16];
    v32 = v8 - 2;
    v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *v31 = v34;
      v31 -= 2;
      v32 -= 4;
      v33 -= 4;
    }
    while (v33);
    v8 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_121:
      do
      {
        v35 = (uint64_t)*--v8;
        *--v23 = v35;
      }
      while (v8 != v9);
    }
    v9 = (const void **)*((_QWORD *)&v75 + 1);
    goto LABEL_56;
  }
  if (!v2[2] || !v2[3])
    goto LABEL_87;
  HIBYTE(v78) = 12;
  strcpy((char *)&__p, "Invalid type");
  CreateError();
  v11 = (const void *)v2[2];
  if (v11)
    v12 = _Block_copy(v11);
  else
    v12 = 0;
  v25 = v2[3];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v82 = 1174405120;
  v83 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke;
  v84 = &__block_descriptor_tmp_105;
  if (v12)
  {
    v26 = _Block_copy(v12);
    v27 = cf;
    aBlock = v26;
    v86 = cf;
    if (!cf)
      goto LABEL_36;
    goto LABEL_35;
  }
  v27 = cf;
  aBlock = 0;
  v86 = cf;
  if (cf)
LABEL_35:
    CFRetain(v27);
LABEL_36:
  v87 = 0;
  dispatch_async(v25, buf);
  if (v87)
    CFRelease(v87);
  if (v86)
    CFRelease(v86);
  if (aBlock)
    _Block_release(aBlock);
  if (v12)
    _Block_release(v12);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v78) < 0)
    operator delete((void *)__p);
LABEL_87:
  MEMORY[0x1B5E2EE44](v74);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v75);
  v54 = v2[3];
  if (v54)
    dispatch_release(v54);
  v55 = (const void *)v2[2];
  if (v55)
    _Block_release(v55);
  v56 = (const void *)v2[1];
  if (v56)
    CFRelease(v56);
  operator delete(v2);
  v57 = (std::__shared_weak_count *)v1[2];
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(p_shared_owners);
    while (__stlxr(v59 - 1, p_shared_owners));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  operator delete(v1);
}

void sub_1B3CEA6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *aBlock,dispatch_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZN5radio19QMICommandDriverM2017sendRFSelfTestReqEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEEENK3__0clEv_block_invoke(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v4;
  tlv *TlvValue;
  int v6;
  tlv *v7;
  unsigned int v8;
  tlv *v9;
  int v10;
  tlv *v11;
  int v12;
  const char *v13;
  size_t v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  NSObject *v18;
  uint64_t (*v19)(uint64_t);
  const __CFAllocator *v20;
  __CFDictionary *Mutable;
  __CFDictionary *v22;
  CFTypeRef v23;
  const void *v24;
  void *v25;
  NSObject *v26;
  CFTypeRef v27;
  std::string *p_p;
  uint64_t (*v29)(uint64_t);
  CFTypeRef v30;
  std::string v31;
  std::string __p;
  CFTypeRef cf;
  _QWORD v34[2];
  std::string block;
  void *v36;
  void *aBlock;
  CFTypeRef v38;
  CFTypeRef v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "triggering RF Self Test", &cf);
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v7 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v6, (const unsigned __int8 *)1);
    v8 = *(unsigned __int8 *)v7;
  }
  else
  {
    v8 = 0;
  }
  v9 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v11 = v9;
  if (v9)
  {
    tlv::throwIfNotEnoughBytes(v9, (const unsigned __int8 *)v9 + v10, (const unsigned __int8 *)2);
    v12 = *(unsigned __int16 *)v11;
    memset(&__p, 0, sizeof(__p));
    if (!v8)
      goto LABEL_16;
  }
  else
  {
    v12 = 0;
    memset(&__p, 0, sizeof(__p));
    if (!v8)
      goto LABEL_16;
  }
  block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
  *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_1B3DCB3B0;
  strcpy(block.__r_.__value_.__l.__data_, "Failed to trigger RF Self Test: ");
  if (v8 > 7)
    v13 = "RFSelfTestErrorCode::kSuccess";
  else
    v13 = off_1E66D4FC0[(char)(v8 - 1)];
  v14 = strlen(v13);
  v15 = std::string::append(&block, v13, v14);
  v16 = v15->__r_.__value_.__r.__words[0];
  v34[0] = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v16;
  __p.__r_.__value_.__l.__size_ = v34[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v34 + 7);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v17;
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  v18 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    _os_log_error_impl(&dword_1B3CB3000, v18, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (cf)
      v29 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    else
      v29 = 0;
    if (v29)
      goto LABEL_20;
    goto LABEL_64;
  }
LABEL_16:
  if (cf)
    v19 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v19 = 0;
  if (v19)
    goto LABEL_20;
LABEL_64:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_20;
    std::string::__init_copy_ctor_external(&v31, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_20;
    v31 = __p;
  }
  CreateError();
  v30 = cf;
  cf = (CFTypeRef)block.__r_.__value_.__r.__words[0];
  block.__r_.__value_.__r.__words[0] = 0;
  if (v30)
  {
    CFRelease(v30);
    if (block.__r_.__value_.__r.__words[0])
      CFRelease(block.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
LABEL_20:
  if (!a1[5] || !a1[6])
    goto LABEL_52;
  v34[0] = 0;
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = Mutable;
  if (Mutable)
    v34[0] = Mutable;
  ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF908], v12, v20);
  v23 = cf;
  if (cf)
    CFRetain(cf);
  if (v22)
    CFRetain(v22);
  v24 = (const void *)a1[5];
  if (v24)
    v25 = _Block_copy(v24);
  else
    v25 = 0;
  v26 = a1[6];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
  v36 = &__block_descriptor_tmp_73;
  if (v25)
  {
    aBlock = _Block_copy(v25);
    v38 = v23;
    if (!v23)
      goto LABEL_36;
    goto LABEL_35;
  }
  aBlock = 0;
  v38 = v23;
  if (v23)
LABEL_35:
    CFRetain(v23);
LABEL_36:
  v39 = v22;
  if (v22)
    CFRetain(v22);
  dispatch_async(v26, &block);
  if (v39)
    CFRelease(v39);
  if (v38)
    CFRelease(v38);
  if (aBlock)
    _Block_release(aBlock);
  if (v25)
    _Block_release(v25);
  if (v22)
    CFRelease(v22);
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
LABEL_52:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v27 = cf;
    if (!cf)
      return;
  }
  else
  {
    v27 = cf;
    if (!cf)
      return;
  }
  CFRelease(v27);
}

void sub_1B3CEAD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1B3CEAD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  if (SHIBYTE(a15) < 0)
  {
    operator delete(a13);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)&a16);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B3CEADF4);
}

void sub_1B3CEADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, ...)
{
  va_list va;

  va_start(va, a11);
  if (a11 < 0)
  {
    operator delete(a6);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B3CEADF4);
}

void sub_1B3CEADB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  JUMPOUT(0x1B3CEADBCLL);
}

void sub_1B3CEADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::MeasureType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::MeasureType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::MeasureType>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D46C8;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TestType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TestType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TestType>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D4718;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17TriggerRFSelfTest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEAFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEAFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEAFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::dict const&,xpc::object const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40), (void **)(a1 + 48));
}

void dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::dict const&,xpc::object const&>(uint64_t *a1, void **a2, void **a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  xpc_object_t object;
  xpc_object_t v8;

  v4 = *a1;
  v5 = *a2;
  v8 = v5;
  if (!v5)
  {
    v8 = xpc_null_create();
    v6 = *a3;
    object = v6;
    if (v6)
      goto LABEL_3;
LABEL_5:
    object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  v6 = *a3;
  object = v6;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v4 + 16))(v4, &v8, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v8);
}

void sub_1B3CEB0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c17_ZTSN3xpc6objectE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  xpc_object_t result;

  v4 = (const void *)a2[4];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6)
      goto LABEL_3;
LABEL_6:
    a1[5] = xpc_null_create();
    v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7)
      return xpc_retain(v7);
    goto LABEL_7;
  }
  v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6)
    goto LABEL_6;
LABEL_3:
  xpc_retain(v6);
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7)
    return xpc_retain(v7);
LABEL_7:
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c17_ZTSN3xpc6objectE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::object const&,xpc::object const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40), (void **)(a1 + 48));
}

void dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::object const&,xpc::object const&>(uint64_t *a1, void **a2, void **a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  xpc_object_t object;
  xpc_object_t v8;

  v4 = *a1;
  v5 = *a2;
  v8 = v5;
  if (!v5)
  {
    v8 = xpc_null_create();
    v6 = *a3;
    object = v6;
    if (v6)
      goto LABEL_3;
LABEL_5:
    object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  v6 = *a3;
  object = v6;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v4 + 16))(v4, &v8, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v8);
}

void sub_1B3CEB26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c17_ZTSN3xpc6objectE48c17_ZTSN3xpc6objectE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  xpc_object_t result;

  v4 = (const void *)a2[4];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6)
      goto LABEL_3;
LABEL_6:
    a1[5] = xpc_null_create();
    v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7)
      return xpc_retain(v7);
    goto LABEL_7;
  }
  v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6)
    goto LABEL_6;
LABEL_3:
  xpc_retain(v6);
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7)
    return xpc_retain(v7);
LABEL_7:
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c17_ZTSN3xpc6objectE48c17_ZTSN3xpc6objectE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getRFSelfTestNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  void *v9;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[5];
  void *v16;
  dispatch_object_t object;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  _OWORD v23[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23[0] = v4;
  v23[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v23);
  v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15[0]) = 0;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Request RF Self Test Nonce", (uint8_t *)v15, 2u);
  }
  v18 = v3 + 320;
  v19 = QMIServiceMsg::create();
  v20 = 25000;
  v21 = 0;
  v22 = 0;
  v6 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v15[3] = &__block_descriptor_tmp_121;
  v15[4] = v3;
  v7 = (void *)v2[1];
  if (v7)
    v7 = _Block_copy(v7);
  v16 = v7;
  v8 = v2[2];
  object = v8;
  if (v8)
    dispatch_retain(v8);
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetRFSelfTestNonce8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4850;
  aBlock[4] = v15;
  v9 = _Block_copy(aBlock);
  v22 = v9;
  if (v19)
  {
    qmi::Client::send();
    v9 = v22;
  }
  if (v9)
    _Block_release(v9);
  if (object)
    dispatch_release(object);
  if (v16)
    _Block_release(v16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v23);
  v10 = v2[2];
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)v2[1];
  if (v11)
    _Block_release(v11);
  operator delete(v2);
  v12 = (std::__shared_weak_count *)a1[2];
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  operator delete(a1);
}

void sub_1B3CEB554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21)
{
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a17)
    qmi::Client::send();
  if (a20)
    _Block_release(a20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  v24 = v22[2];
  if (v24)
    dispatch_release(v24);
  v25 = (const void *)v22[1];
  if (v25)
    _Block_release(v25);
  operator delete(v22);
  v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  std::string::size_type v6;
  tlv *TlvValue;
  int v8;
  tlv *v9;
  std::string *v10;
  __int128 v11;
  NSObject *v12;
  void **v13;
  xpc_object_t v14;
  xpc_object_t v15;
  const void *v16;
  void *v17;
  char *v18;
  int v19;
  xpc_object_t v20;
  xpc_object_t v21;
  const void *v22;
  void *v23;
  NSObject *v24;
  NSObject *v25;
  void **v26;
  void *__p[3];
  _QWORD v28[2];
  uint64_t (*v29)(uint64_t, std::string *);
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  __int16 v35;
  _QWORD v36[2];
  _QWORD *(*v37)(uint64_t, char **);
  void *v38;
  uint64_t *v39;
  CFTypeRef cf;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  __n128 (*v44)(_QWORD *, uint64_t);
  void (*v45)(uint64_t);
  void *v46;
  void *v47;
  uint64_t v48;
  std::string block;
  void *v50;
  void *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v41 = 0;
  v42 = &v41;
  v43 = 0x4002000000;
  v44 = __Block_byref_object_copy__113;
  v45 = __Block_byref_object_dispose__114;
  v47 = 0;
  v48 = 0;
  v46 = 0;
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting RF Self Test Nonce", &cf);
  if (cf)
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v5 = 0;
  v6 = MEMORY[0x1E0C809B0];
  if (v5)
  {
    v32 = 0;
    v33 = &v32;
    v34 = 0x2000000000;
    v35 = 0;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 0x40000000;
    v29 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
    v30 = &unk_1E66D47F8;
    v31 = &v32;
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v9 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)2);
      LOWORD(block.__r_.__value_.__l.__data_) = *(_WORD *)v9;
      v29((uint64_t)v28, &block);
    }
    memset(__p, 170, sizeof(__p));
    ctu::hex((ctu *)*((unsigned __int16 *)v33 + 12));
    v10 = std::string::insert(&block, 0, "Failed to get Nonce: BBSecurityStatus: 0x", 0x29uLL);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __p[2] = (void *)v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      operator delete(block.__r_.__value_.__l.__data_);
    v12 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v26 = __p;
      if (SHIBYTE(__p[2]) < 0)
        v26 = (void **)__p[0];
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      _os_log_error_impl(&dword_1B3CB3000, v12, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    if (SHIBYTE(__p[2]) >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    v14 = xpc_string_create((const char *)v13);
    if (!v14)
      v14 = xpc_null_create();
    v15 = xpc_null_create();
    v16 = (const void *)a1[5];
    if (v16)
      v17 = _Block_copy(v16);
    else
      v17 = 0;
    v24 = a1[6];
    block.__r_.__value_.__r.__words[0] = v6;
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke;
    v50 = &__block_descriptor_tmp_112;
    if (v17)
    {
      v51 = _Block_copy(v17);
      v52 = v14;
      if (v14)
        goto LABEL_26;
    }
    else
    {
      v51 = 0;
      v52 = v14;
      if (v14)
      {
LABEL_26:
        xpc_retain(v14);
        v53 = v15;
        if (v15)
        {
LABEL_27:
          xpc_retain(v15);
LABEL_31:
          dispatch_async(v24, &block);
          xpc_release(v53);
          v53 = 0;
          xpc_release(v52);
          v52 = 0;
          if (v51)
            _Block_release(v51);
          if (v17)
            _Block_release(v17);
          xpc_release(v15);
          xpc_release(v14);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          _Block_object_dispose(&v32, 8);
          goto LABEL_52;
        }
LABEL_30:
        v53 = xpc_null_create();
        goto LABEL_31;
      }
    }
    v52 = xpc_null_create();
    v53 = v15;
    if (v15)
      goto LABEL_27;
    goto LABEL_30;
  }
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 0x40000000;
  v37 = ___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_116;
  v38 = &unk_1E66D47D0;
  v39 = &v41;
  v18 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (v18)
  {
    memset(&block, 0, sizeof(block));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&block, v18, &v18[v19], v19);
    v37((uint64_t)v36, &block.__r_.__value_.__l.__data_);
    if (block.__r_.__value_.__r.__words[0])
    {
      block.__r_.__value_.__l.__size_ = block.__r_.__value_.__r.__words[0];
      operator delete(block.__r_.__value_.__l.__data_);
    }
  }
  v20 = xpc_null_create();
  v21 = xpc_data_create((const void *)v42[5], v42[6] - v42[5]);
  if (v21)
  {
    v22 = (const void *)a1[5];
    if (v22)
    {
LABEL_22:
      v23 = _Block_copy(v22);
      goto LABEL_40;
    }
  }
  else
  {
    v21 = xpc_null_create();
    v22 = (const void *)a1[5];
    if (v22)
      goto LABEL_22;
  }
  v23 = 0;
LABEL_40:
  v25 = a1[6];
  block.__r_.__value_.__r.__words[0] = v6;
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke;
  v50 = &__block_descriptor_tmp_111;
  if (v23)
  {
    v51 = _Block_copy(v23);
    v52 = v20;
    if (v20)
      goto LABEL_42;
LABEL_45:
    v52 = xpc_null_create();
    v53 = v21;
    if (v21)
      goto LABEL_43;
LABEL_46:
    v53 = xpc_null_create();
    goto LABEL_47;
  }
  v51 = 0;
  v52 = v20;
  if (!v20)
    goto LABEL_45;
LABEL_42:
  xpc_retain(v20);
  v53 = v21;
  if (!v21)
    goto LABEL_46;
LABEL_43:
  xpc_retain(v21);
LABEL_47:
  dispatch_async(v25, &block);
  xpc_release(v53);
  v53 = 0;
  xpc_release(v52);
  v52 = 0;
  if (v51)
    _Block_release(v51);
  if (v23)
    _Block_release(v23);
  xpc_release(v21);
  xpc_release(v20);
LABEL_52:
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v41, 8);
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
}

void sub_1B3CEBB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__113(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__114(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZZN5radio19QMICommandDriverM2018getRFSelfTestNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetRFSelfTestNonce8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEBDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEBDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEBE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  size_t v14;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_21;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_21:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    goto LABEL_18;
  }
  v12 = (_BYTE *)result[1];
  if (v12 - v9 >= a4)
  {
LABEL_18:
    v14 = a3 - __src;
    if (v14)
      result = memmove(v9, __src, v14);
    v7[1] = &v9[v14];
    return result;
  }
  v13 = &__src[v12 - v9];
  if (v12 != v9)
  {
    result = memmove((void *)*result, __src, v12 - v9);
    v9 = (char *)v7[1];
  }
  if (a3 != v13)
    result = memmove(v9, v13, a3 - v13);
  v7[1] = &v9[a3 - v13];
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setRFSelfTestTicket(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t v2;
  __int128 v3;
  NSObject *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  uint64_t (*v7)(uint64_t);
  char *v8;
  char *v9;
  const void **v10;
  char *v11;
  _QWORD *v12;
  const void *v13;
  void *v14;
  char *v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  CFIndex Count;
  CFIndex i;
  uint64_t v28;
  unsigned __int8 *ValueAtIndex;
  unsigned __int8 *v30;
  CFTypeID v31;
  const __CFNumber *v32;
  uint8_t v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  _BYTE *v41;
  char *v42;
  unint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  unint64_t v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  char *v54;
  void *v55;
  NSObject *v56;
  void *v57;
  NSObject *v58;
  const void *v59;
  const void *v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  NSObject *v72;
  void *v73;
  CFTypeRef v74;
  uint64_t **v75;
  uint64_t v76;
  uint64_t *__p;
  uint8_t buf[8];
  uint64_t v79;
  void *v80;
  void *v81;
  void *v82;
  CFTypeRef v83;
  dispatch_object_t object;
  CFTypeRef cf;
  uint64_t v86;
  int v87;
  uint64_t v88;
  void *v89;
  _QWORD v90[2];
  __int128 v91;
  __int128 v92;
  char *aBlock;
  __int128 v94;
  void *v95;
  uint8_t *v96;

  v1 = a1;
  __p = *a1;
  v2 = **a1;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v91 = v3;
  v92 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v91);
  v76 = v2;
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Set RF Self Test Ticket", buf, 2u);
  }
  v90[0] = 0xAAAAAAAAAAAAAAAALL;
  v90[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v90, (const __CFDictionary *)__p[1]);
  v5 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v90, (const __CFString *)*MEMORY[0x1E0DDF960]);
  v6 = v5;
  v7 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v5)
    v7 = 0;
  if (!v7)
  {
    if (!__p[2] || !__p[3])
      goto LABEL_84;
    aBlock = (char *)operator new(0x28uLL);
    v94 = xmmword_1B3DCB3B0;
    strcpy(aBlock, "Ticket for RF Self Test is empty");
    CreateError();
    v13 = (const void *)__p[2];
    if (v13)
      v14 = _Block_copy(v13);
    else
      v14 = 0;
    v72 = __p[3];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v79 = 1174405120;
    v80 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
    v81 = &__block_descriptor_tmp_86;
    if (v14)
    {
      v73 = _Block_copy(v14);
      v74 = cf;
      v82 = v73;
      v83 = cf;
      if (!cf)
        goto LABEL_113;
    }
    else
    {
      v74 = cf;
      v82 = 0;
      v83 = cf;
      if (!cf)
      {
LABEL_113:
        dispatch_async(v72, buf);
        if (v83)
          CFRelease(v83);
        if (v82)
          _Block_release(v82);
        if (v14)
          _Block_release(v14);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v94) < 0)
          operator delete(aBlock);
        goto LABEL_84;
      }
    }
    CFRetain(v74);
    goto LABEL_113;
  }
  v75 = v1;
  if (v5)
    CFRetain(v5);
  v9 = (char *)*((_QWORD *)&v91 + 1);
  v8 = (char *)v92;
  v10 = (const void **)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1) != (_QWORD)v92)
  {
    v10 = (const void **)*((_QWORD *)&v91 + 1);
    while (*((_BYTE *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v92)
        goto LABEL_20;
    }
  }
  if (v10 != (const void **)v92)
  {
    if (!v11)
      __cxa_bad_cast();
    v12 = v11 + 16;
    goto LABEL_34;
  }
LABEL_20:
  v15 = (char *)operator new(0x28uLL);
  v16 = v15;
  v15[8] = 1;
  *(_QWORD *)v15 = &off_1E66D48C8;
  *((_QWORD *)v15 + 2) = 0;
  v12 = v15 + 16;
  *((_QWORD *)v15 + 3) = 0;
  *((_QWORD *)v15 + 4) = 0;
  if ((unint64_t)v8 >= *((_QWORD *)&v92 + 1))
  {
    v17 = v8 - v9;
    v18 = (v8 - v9) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = *((_QWORD *)&v92 + 1) - (_QWORD)v9;
    if ((uint64_t)(*((_QWORD *)&v92 + 1) - (_QWORD)v9) >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v16;
      v25 = (uint64_t)(v23 + 1);
      if (v9 == v8)
      {
LABEL_31:
        *((_QWORD *)&v91 + 1) = v23;
        *(_QWORD *)&v92 = v25;
        *((_QWORD *)&v92 + 1) = v24;
        if (!v9)
        {
LABEL_33:
          *(_QWORD *)&v92 = v25;
          goto LABEL_34;
        }
LABEL_32:
        operator delete(v9);
        goto LABEL_33;
      }
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      v24 = 0;
      *(_QWORD *)(8 * v18) = v16;
      v25 = 8 * v18 + 8;
      if (v9 == v8)
        goto LABEL_31;
    }
    if ((unint64_t)(v17 - 8) < 0x58)
      goto LABEL_129;
    if ((unint64_t)(v9 - v22) < 0x20)
      goto LABEL_129;
    v64 = ((unint64_t)(v17 - 8) >> 3) + 1;
    v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
    v66 = &v8[-v65];
    v23 = (_QWORD *)((char *)v23 - v65);
    v67 = &v22[8 * v18 - 16];
    v68 = v8 - 16;
    v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v70 = *(_OWORD *)v68;
      *(v67 - 1) = *((_OWORD *)v68 - 1);
      *v67 = v70;
      v67 -= 2;
      v68 -= 32;
      v69 -= 4;
    }
    while (v69);
    v8 = v66;
    if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_129:
      do
      {
        v71 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v23 = v71;
      }
      while (v8 != v9);
    }
    v9 = (char *)*((_QWORD *)&v91 + 1);
    *((_QWORD *)&v91 + 1) = v23;
    *(_QWORD *)&v92 = v25;
    *((_QWORD *)&v92 + 1) = v24;
    if (!v9)
      goto LABEL_33;
    goto LABEL_32;
  }
  *(_QWORD *)v8 = v15;
  *(_QWORD *)&v92 = v8 + 8;
LABEL_34:
  Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (unsigned __int8 *)CFArrayGetValueAtIndex(v6, i);
      v30 = ValueAtIndex;
      buf[0] = 0;
      if (ValueAtIndex)
      {
        v31 = CFGetTypeID(ValueAtIndex);
        if (v31 == CFNumberGetTypeID())
          ctu::cf::assign((ctu::cf *)buf, v30, v32);
      }
      v33 = buf[0];
      v35 = (_BYTE *)v12[1];
      v34 = v12[2];
      if ((unint64_t)v35 < v34)
      {
        *v35 = buf[0];
        v28 = (uint64_t)(v35 + 1);
        goto LABEL_37;
      }
      v36 = (_BYTE *)*v12;
      v37 = (unint64_t)&v35[-*v12];
      v38 = v37 + 1;
      if ((uint64_t)(v37 + 1) < 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v39 = v34 - (_QWORD)v36;
      if (2 * v39 > v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
      {
        v41 = operator new(v40);
        v42 = &v41[v37];
        v41[v37] = v33;
        v28 = (uint64_t)&v41[v37 + 1];
        if (v35 == v36)
          goto LABEL_50;
      }
      else
      {
        v41 = 0;
        v42 = &v35[-*v12];
        *(_BYTE *)v37 = buf[0];
        v28 = v37 + 1;
        if (v35 == v36)
        {
LABEL_50:
          *v12 = v42;
          v12[1] = v28;
          v12[2] = &v41[v40];
          if (!v35)
            goto LABEL_37;
LABEL_69:
          operator delete(v35);
          goto LABEL_37;
        }
      }
      if (v37 < 8 || (unint64_t)(v36 - v41) < 0x20)
        goto LABEL_66;
      if (v37 >= 0x20)
      {
        v43 = v37 & 0xFFFFFFFFFFFFFFE0;
        v44 = &v41[v37 - 16];
        v45 = (__int128 *)(v35 - 16);
        v46 = v37 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 32;
        }
        while (v46);
        if (v37 == v43)
          goto LABEL_68;
        if ((v37 & 0x18) == 0)
        {
          v42 -= v43;
          v35 -= v43;
LABEL_66:
          v52 = v42 - 1;
          do
          {
            v53 = *--v35;
            *v52-- = v53;
          }
          while (v35 != v36);
          goto LABEL_68;
        }
      }
      else
      {
        v43 = 0;
      }
      v42 -= v37 & 0xFFFFFFFFFFFFFFF8;
      v48 = &v41[&v35[-v43] - v36 - 8];
      v49 = (uint64_t *)&v35[-v43 - 8];
      v50 = v43 - (v37 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v51 = *v49--;
        *v48-- = v51;
        v50 += 8;
      }
      while (v50);
      v35 -= v37 & 0xFFFFFFFFFFFFFFF8;
      if (v37 != (v37 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_66;
LABEL_68:
      v35 = (_BYTE *)*v12;
      *v12 = v41;
      v12[1] = v28;
      v12[2] = &v41[v40];
      if (v35)
        goto LABEL_69;
LABEL_37:
      v12[1] = v28;
    }
  }
  if (v6)
    CFRelease(v6);
  cf = (CFTypeRef)(v76 + 320);
  v86 = QMIServiceMsg::create();
  v87 = 25000;
  v88 = 0;
  v89 = 0;
  v54 = (char *)MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v79 = 1174405120;
  v80 = ___ZZN5radio19QMICommandDriverM2019setRFSelfTestTicketEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke;
  v81 = &__block_descriptor_tmp_125;
  v82 = (void *)v76;
  v55 = (void *)__p[2];
  if (v55)
    v55 = _Block_copy(v55);
  v83 = v55;
  v56 = __p[3];
  object = v56;
  if (v56)
    dispatch_retain(v56);
  aBlock = v54;
  *(_QWORD *)&v94 = 0x40000000;
  *((_QWORD *)&v94 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm19SetRFSelfTestTicket8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v95 = &unk_1E66D48F8;
  v96 = buf;
  v57 = _Block_copy(&aBlock);
  v89 = v57;
  v1 = v75;
  if (v86)
  {
    qmi::Client::send();
    v57 = v89;
  }
  if (v57)
    _Block_release(v57);
  if (object)
    dispatch_release(object);
  if (v83)
    _Block_release(v83);
LABEL_84:
  if (v6)
    CFRelease(v6);
  MEMORY[0x1B5E2EE44](v90);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v91);
  v58 = __p[3];
  if (v58)
    dispatch_release(v58);
  v59 = (const void *)__p[2];
  if (v59)
    _Block_release(v59);
  v60 = (const void *)__p[1];
  if (v60)
    CFRelease(v60);
  operator delete(__p);
  v61 = (std::__shared_weak_count *)v1[2];
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  operator delete(v1);
}

void sub_1B3CEC6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, _QWORD *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, dispatch_object_t object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,char a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  const void *v28;
  uint64_t v29;
  NSObject *v31;
  const void *v32;
  const void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (*(char *)(v29 - 105) < 0)
    operator delete(*(void **)(v29 - 128));
  if (v28)
    CFRelease(v28);
  MEMORY[0x1B5E2EE44](&a25);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  v31 = __p[3];
  if (v31)
    dispatch_release(v31);
  v32 = (const void *)__p[2];
  if (v32)
    _Block_release(v32);
  v33 = (const void *)__p[1];
  if (v33)
    CFRelease(v33);
  operator delete(__p);
  v34 = (std::__shared_weak_count *)v27[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2019setRFSelfTestTicketEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v11;

  v3 = a1[4];
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "setting RF Self Test Ticket", &cf);
  v4 = (const void *)a1[5];
  if (!v4 || !a1[6])
    goto LABEL_20;
  v5 = cf;
  if (cf && (CFRetain(cf), (v4 = (const void *)a1[5]) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = a1[6];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_86;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    v11 = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v11 = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11)
    CFRelease(v11);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66D48C8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66D48C8;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) + 3;
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::write(uint64_t a1, _QWORD *a2)
{
  char v4;
  uint64_t v5;
  char *v6;
  void *result;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = (char *)(*a2 + 3);
  *a2 = v6;
  result = memcpy(v6, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  v8 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  *a2 = &v6[v8];
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = v8;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RFSelfTestTicket>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E66D48C8;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[v5];
    *((_QWORD *)v2 + 4) = &v6[v5];
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B3CECB54(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm19SetRFSelfTestTicket8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CECC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CECC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CECC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>(radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::getAntennaTxPort(dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>,ctu::cf::CFSharedRef<__CFDictionary const>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  NSObject *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t object;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void *v27;
  _OWORD v28[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v28[0] = v4;
  v28[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  v5 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19[0]) = 0;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Request to get antenna tx port", (uint8_t *)v19, 2u);
  }
  v23 = v3 + 320;
  v24 = QMIServiceMsg::create();
  v25 = 25000;
  v26 = 0;
  v27 = 0;
  v6 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZZN5radio19QMICommandDriverM2016getAntennaTxPortEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEESA_ENK3__0clEv_block_invoke;
  v19[3] = &__block_descriptor_tmp_130;
  v19[4] = v3;
  v19[5] = v2[1];
  v7 = (std::__shared_weak_count *)v2[2];
  v20 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = (void *)v2[3];
  if (v10)
    v10 = _Block_copy(v10);
  v21 = v10;
  v11 = v2[4];
  object = v11;
  if (v11)
    dispatch_retain(v11);
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16GetTxAntennaPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4978;
  aBlock[4] = v19;
  v12 = _Block_copy(aBlock);
  v27 = v12;
  if (v24)
  {
    qmi::Client::send();
    v12 = v27;
  }
  if (v12)
    _Block_release(v12);
  if (object)
    dispatch_release(object);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
  v13 = v2[4];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v2[3];
  if (v14)
    _Block_release(v14);
  v15 = (std::__shared_weak_count *)v2[2];
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(v2);
  v16 = (std::__shared_weak_count *)a1[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(a1);
}

void sub_1B3CECEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  NSObject *v26;
  const void *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = v24[4];
  if (v26)
    dispatch_release(v26);
  v27 = (const void *)v24[3];
  if (v27)
    _Block_release(v27);
  v28 = (std::__shared_weak_count *)v24[2];
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  operator delete(v24);
  v29 = (std::__shared_weak_count *)v23[2];
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2016getAntennaTxPortEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEESA_ENK3__0clEv_block_invoke(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef v7;
  uint64_t (*v8)(uint64_t);
  std::__shared_weak_count *v9;
  tlv *TlvValue;
  int v11;
  tlv *v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  CFTypeRef v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t (*v22)(uint64_t, char *);
  void *v23;
  uint64_t *v24;
  CFTypeRef cf;
  CFTypeRef v26;
  std::__shared_weak_count *v28;
  uint64_t block;
  uint64_t p_block;
  uint64_t v31;
  void *v32;
  void *aBlock;
  CFTypeRef v34;
  CFTypeRef v35;
  char v36;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v28 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v9 = v6;
LABEL_48:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v26 = 0;
  radio::QMICommandDriverBase::checkError(v5, a2, "setting antenna tx port", &cf);
  v7 = 0;
  if (cf)
    v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v8 = 0;
  if (v8)
  {
    if (!a1[7])
      goto LABEL_43;
LABEL_16:
    if (!a1[8])
      goto LABEL_43;
    v15 = cf;
    if (cf)
      CFRetain(cf);
    if (v7)
      CFRetain(v7);
    v16 = (const void *)a1[7];
    if (v16)
      v17 = _Block_copy(v16);
    else
      v17 = 0;
    v18 = a1[8];
    block = MEMORY[0x1E0C809B0];
    p_block = 1174405120;
    v31 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke;
    v32 = &__block_descriptor_tmp_73;
    if (v17)
    {
      aBlock = _Block_copy(v17);
      v34 = v15;
      if (!v15)
        goto LABEL_29;
    }
    else
    {
      aBlock = 0;
      v34 = v15;
      if (!v15)
      {
LABEL_29:
        v35 = v7;
        if (v7)
          CFRetain(v7);
        dispatch_async(v18, &block);
        if (v35)
          CFRelease(v35);
        if (v34)
          CFRelease(v34);
        if (aBlock)
          _Block_release(aBlock);
        if (v17)
          _Block_release(v17);
        if (v7)
          CFRelease(v7);
        if (v15)
          CFRelease(v15);
        goto LABEL_43;
      }
    }
    CFRetain(v15);
    goto LABEL_29;
  }
  block = 0;
  p_block = (uint64_t)&block;
  v31 = 0x2000000000;
  LOBYTE(v32) = -86;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 0x40000000;
  v22 = ___ZZN5radio19QMICommandDriverM2016getAntennaTxPortEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEESA_ENK3__0clEv_block_invoke_2;
  v23 = &unk_1E66D4920;
  v24 = &block;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v12 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v11, (const unsigned __int8 *)1);
    v36 = *(_BYTE *)v12;
    v22((uint64_t)v21, &v36);
  }
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (Mutable)
    v26 = Mutable;
  ctu::cf::insert<__CFString const*,unsigned char>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF8C8], *(unsigned __int8 *)(p_block + 24), v13);
  _Block_object_dispose(&block, 8);
  if (a1[7])
    goto LABEL_16;
LABEL_43:
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  v9 = v28;
  if (v28)
    goto LABEL_48;
}

void sub_1B3CED2B0(void *a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v2, 1, v1, v3);
  JUMPOUT(0x1B3CED0A4);
}

void sub_1B3CED2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void *v8;
  va_list va;
  const void *v10;
  va_list va1;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a7);
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v10 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  _Block_object_dispose(va3, 8);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B3CED318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  const void *v9;
  va_list va;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio19QMICommandDriverM2016getAntennaTxPortEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEESA_ENK3__0clEv_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16GetTxAntennaPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CED408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CED41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CED448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::insert<__CFString const*,unsigned char>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  BOOL v10;
  uint64_t v11;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf)
    v10 = v8 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  CFRelease(v9);
LABEL_13:
  if (cf)
    CFRelease(cf);
  return v11;
}

void sub_1B3CED504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3CED528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 Int;
  __int128 v5;
  char *v6;
  char *v7;
  const void **v8;
  _BYTE *v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  NSObject *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  void *v26;
  NSObject *v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40[2];
  uint64_t v41;
  int v42;
  uint64_t v43;
  void *v44;
  _QWORD v45[2];
  uint64_t (*v46)(uint64_t, _BYTE *);
  void *v47;
  unsigned __int8 v48;
  __int128 v49;
  __int128 v50;
  _QWORD v51[2];
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v54;
  void (*v55)(_QWORD *, const qmi::ResponseBase *);
  void *v56;
  uint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60;
  dispatch_object_t object;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v40[0] = v2;
  v3 = *v2;
  v51[0] = 0xAAAAAAAAAAAAAAAALL;
  v51[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v51, (const __CFDictionary *)v2[3]);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v51, (const __CFString *)*MEMORY[0x1E0DDF8C8]);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = v5;
  v50 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v49);
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 0x40000000;
  v46 = ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke;
  v47 = &__block_descriptor_tmp_133;
  v48 = Int;
  v6 = (char *)*((_QWORD *)&v49 + 1);
  v7 = (char *)v50;
  v8 = (const void **)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1) != (_QWORD)v50)
  {
    v8 = (const void **)*((_QWORD *)&v49 + 1);
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v50)
        goto LABEL_9;
    }
  }
  if (v8 == (const void **)v50)
  {
LABEL_9:
    v10 = operator new(0x10uLL);
    v11 = v10;
    v10[4] = 1;
    *(_QWORD *)v10 = off_1E66D4A10;
    if ((unint64_t)v7 < *((_QWORD *)&v50 + 1))
    {
      *(_QWORD *)v7 = v10;
      v12 = (uint64_t)(v7 + 8);
LABEL_22:
      *(_QWORD *)&v50 = v12;
      v46((uint64_t)v45, (_BYTE *)v11 + 9);
      goto LABEL_23;
    }
    v13 = v7 - v6;
    v14 = (v7 - v6) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v50 + 1) - (_QWORD)v6;
    if ((uint64_t)(*((_QWORD *)&v50 + 1) - (_QWORD)v6) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v11;
      v12 = (uint64_t)(v19 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((_QWORD *)&v49 + 1) = v19;
        *(_QWORD *)&v50 = v12;
        *((_QWORD *)&v50 + 1) = v20;
        if (!v6)
          goto LABEL_22;
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v11;
      v12 = 8 * v14 + 8;
      if (v6 == v7)
        goto LABEL_20;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_62;
    if ((unint64_t)(v6 - v18) < 0x20)
      goto LABEL_62;
    v32 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v7[-v33];
    v19 = (_QWORD *)((char *)v19 - v33);
    v35 = &v18[8 * v14 - 16];
    v36 = v7 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v7 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v39 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v19 = v39;
      }
      while (v7 != v6);
    }
    v6 = (char *)*((_QWORD *)&v49 + 1);
    *((_QWORD *)&v49 + 1) = v19;
    *(_QWORD *)&v50 = v12;
    *((_QWORD *)&v50 + 1) = v20;
    if (!v6)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v9)
    __cxa_bad_cast();
  ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke((uint64_t)v45, v9 + 9);
LABEL_23:
  v21 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = Int;
    _os_log_impl(&dword_1B3CB3000, v21, OS_LOG_TYPE_DEFAULT, "#I Request to set antenna tx port to %d", buf, 8u);
  }
  v40[1] = (_QWORD *)(v3 + 320);
  v41 = QMIServiceMsg::create();
  v42 = 25000;
  v43 = 0;
  v44 = 0;
  v22 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v54 = 1174405120;
  v55 = ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_134;
  v56 = &__block_descriptor_tmp_135;
  v57 = v3;
  v58 = v2[1];
  v23 = (std::__shared_weak_count *)v2[2];
  v59 = v23;
  if (v23)
  {
    p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
  }
  v26 = (void *)v2[4];
  if (v26)
    v26 = _Block_copy(v26);
  v60 = v26;
  v27 = v2[5];
  object = v27;
  if (v27)
    dispatch_retain(v27);
  aBlock[0] = v22;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16SetTxAntennaPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4A40;
  aBlock[4] = buf;
  v28 = _Block_copy(aBlock);
  v44 = v28;
  if (v41)
  {
    qmi::Client::send();
    v28 = v44;
  }
  if (v28)
    _Block_release(v28);
  if (object)
    dispatch_release(object);
  if (v60)
    _Block_release(v60);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v49);
  MEMORY[0x1B5E2EE44](v51);
  std::unique_ptr<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](v40);
  v29 = (std::__shared_weak_count *)a1[2];
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(a1);
}

void sub_1B3CED9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,void *aBlock,dispatch_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD **std::unique_ptr<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMICommandDriverM20::setAntennaTxPort(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>::~unique_ptr[abi:ne180100](_QWORD **a1)
{
  _QWORD *v2;
  NSObject *v3;
  const void *v4;
  const void *v5;
  std::__shared_weak_count *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[5];
    if (v3)
      dispatch_release(v3);
    v4 = (const void *)v2[4];
    if (v4)
      _Block_release(v4);
    v5 = (const void *)v2[3];
    if (v5)
      CFRelease(v5);
    v6 = (std::__shared_weak_count *)v2[2];
    if (v6)
      std::__shared_weak_count::__release_weak(v6);
    operator delete(v2);
  }
  return a1;
}

uint64_t ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZZN5radio19QMICommandDriverM2016setAntennaTxPortEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEEEEEENK3__0clEv_block_invoke_134(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  CFTypeRef v9;
  void *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  CFTypeRef cf;
  std::__shared_weak_count *v16;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v19;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "setting antenna tx port", &cf);
      v8 = (const void *)a1[7];
      if (!v8 || !a1[8])
      {
LABEL_23:
        if (cf)
          CFRelease(cf);
        goto LABEL_25;
      }
      v9 = cf;
      if (cf && (CFRetain(cf), (v8 = (const void *)a1[7]) == 0))
        v10 = 0;
      else
        v10 = _Block_copy(v8);
      v11 = a1[8];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
      block[3] = &__block_descriptor_tmp_86;
      if (v10)
      {
        aBlock = _Block_copy(v10);
        v19 = v9;
        if (!v9)
          goto LABEL_15;
      }
      else
      {
        aBlock = 0;
        v19 = v9;
        if (!v9)
        {
LABEL_15:
          dispatch_async(v11, block);
          if (v19)
            CFRelease(v19);
          if (aBlock)
            _Block_release(aBlock);
          if (v10)
            _Block_release(v10);
          if (v9)
            CFRelease(v9);
          goto LABEL_23;
        }
      }
      CFRetain(v9);
      goto LABEL_15;
    }
  }
}

void sub_1B3CEDCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Port>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Port>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Port>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D4A10;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm16SetTxAntennaPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEDE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEDE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEDE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::setMCC(ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  const void *v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  NSObject *v12;
  const void *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  NSObject *v19;
  const void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  CFTypeRef v24;
  std::string __p;
  CFTypeRef cf;
  __int128 block;
  void (*v28)(uint64_t);
  void *v29;
  void *aBlock;
  CFTypeRef v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = CFDictionaryContainsKey(*(CFDictionaryRef *)(*a1 + 8), (const void *)*MEMORY[0x1E0DDF768]);
  v5 = (const void *)v2[1];
  if (v4)
  {
    __p.__r_.__value_.__r.__words[0] = v2[1];
    if (v5)
      CFRetain(v5);
    v6 = (const void *)v2[2];
    if (v6)
    {
      v7 = _Block_copy(v6);
      v8 = v2[3];
      *(_QWORD *)&block = v7;
      *((_QWORD *)&block + 1) = v8;
      if (!v8)
        goto LABEL_7;
    }
    else
    {
      v7 = 0;
      v8 = v2[3];
      *(_QWORD *)&block = 0;
      *((_QWORD *)&block + 1) = v8;
      if (!v8)
      {
LABEL_7:
        radio::QMICommandDriverM20::setLegacyMCC_sync(v3, (const __CFDictionary **)&__p, (uint64_t)&block);
        if (v8)
          dispatch_release(v8);
        if (v7)
          _Block_release(v7);
        if (v5)
LABEL_24:
          CFRelease(v5);
LABEL_25:
        v12 = v2[3];
        if (!v12)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    dispatch_retain(v8);
    goto LABEL_7;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)v2[1], (const void *)*MEMORY[0x1E0DDF8B0]))
  {
    v5 = (const void *)v2[1];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    if (v5)
      CFRetain(v5);
    v9 = (const void *)v2[2];
    if (v9)
    {
      v10 = _Block_copy(v9);
      v11 = v2[3];
      *(_QWORD *)&block = v10;
      *((_QWORD *)&block + 1) = v11;
      if (!v11)
        goto LABEL_19;
    }
    else
    {
      v10 = 0;
      v11 = v2[3];
      *(_QWORD *)&block = 0;
      *((_QWORD *)&block + 1) = v11;
      if (!v11)
      {
LABEL_19:
        radio::QMICommandDriverM20::setSTxMCC_sync(v3, (const __CFDictionary **)&__p, (uint64_t)&block);
        if (v11)
          dispatch_release(v11);
        if (v10)
          _Block_release(v10);
        if (v5)
          goto LABEL_24;
        goto LABEL_25;
      }
    }
    dispatch_retain(v11);
    goto LABEL_19;
  }
  v18 = (char *)operator new(0x28uLL);
  strcpy(v18, "Set MCC: Enable key is required!");
  v19 = v3[5];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = v18;
    _os_log_error_impl(&dword_1B3CB3000, v19, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
  }
  std::string::__init_copy_ctor_external(&__p, v18, 0x20uLL);
  CreateError();
  v20 = (const void *)v2[2];
  if (v20)
    v21 = _Block_copy(v20);
  else
    v21 = 0;
  v22 = v2[3];
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  v28 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke;
  v29 = &__block_descriptor_tmp_86;
  if (!v21)
  {
    v24 = cf;
    aBlock = 0;
    v31 = cf;
    if (!cf)
      goto LABEL_51;
    goto LABEL_50;
  }
  v23 = _Block_copy(v21);
  v24 = cf;
  aBlock = v23;
  v31 = cf;
  if (cf)
LABEL_50:
    CFRetain(v24);
LABEL_51:
  dispatch_async(v22, &block);
  if (v31)
    CFRelease(v31);
  if (aBlock)
    _Block_release(aBlock);
  if (v21)
    _Block_release(v21);
  if (cf)
    CFRelease(cf);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    operator delete(v18);
    v12 = v2[3];
    if (!v12)
      goto LABEL_27;
LABEL_26:
    dispatch_release(v12);
    goto LABEL_27;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  operator delete(v18);
  v12 = v2[3];
  if (v12)
    goto LABEL_26;
LABEL_27:
  v13 = (const void *)v2[2];
  if (v13)
    _Block_release(v13);
  v14 = (const void *)v2[1];
  if (v14)
    CFRelease(v14);
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1B3CEE214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::Enable>(_QWORD *a1, char a2)
{
  _BYTE *v4;
  _BYTE *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v4[8] = a2;
  *(_QWORD *)v4 = &unk_1E66D4A88;
  v4[9] = 0;
  v6 = v4 + 9;
  v8 = (char *)a1[2];
  v7 = a1[3];
  v9 = v8;
  if ((unint64_t)v8 < v7)
  {
    *(_QWORD *)v8 = v4;
    v10 = (uint64_t)(v8 + 8);
    goto LABEL_23;
  }
  v11 = (char *)a1[1];
  v12 = (v8 - v11) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_QWORD)v11;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(8 * v15);
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    *(_QWORD *)v17 = v5;
    v10 = (uint64_t)(v17 + 8);
    v19 = (char *)(v8 - v11);
    if (v8 == v11)
      goto LABEL_21;
    goto LABEL_14;
  }
  v16 = 0;
  v17 = (char *)(8 * v12);
  v18 = 0;
  *(_QWORD *)(8 * v12) = v5;
  v10 = 8 * v12 + 8;
  v19 = (char *)(v8 - v11);
  if (v8 != v11)
  {
LABEL_14:
    v20 = (unint64_t)(v19 - 8);
    if (v20 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v11 - v16) < 0x20)
      goto LABEL_28;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v9 = &v8[-v22];
    v17 -= v22;
    v23 = &v16[8 * v12 - 16];
    v24 = (__int128 *)(v8 - 16);
    v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 4;
    }
    while (v25);
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v27 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v17 - 1) = v27;
        v17 -= 8;
      }
      while (v9 != v11);
    }
    v9 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v17;
  a1[2] = v10;
  a1[3] = v18;
  if (v9)
    operator delete(v9);
LABEL_23:
  a1[2] = v10;
  return v6;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Enable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Enable>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Enable>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &unk_1E66D4A88;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18SettingLegacyTxMCC8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEE65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEE670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEE69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SettingSTxMCC8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEE770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEE784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEE7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66D4B28;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66D4B28;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 5;
  else
    return 12 * ((v2 - v1 - 12) / 0xCuLL) + 17;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  _WORD *v4;
  _WORD *v5;
  _WORD *i;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *a2 += 3;
  *(_WORD *)(v3 + 3) = -21845 * ((*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 2);
  v4 = (_WORD *)(v3 + 5);
  v5 = *(_WORD **)(result + 16);
  for (i = *(_WORD **)(result + 24); v5 != i; v5 += 6)
  {
    *v4 = *v5;
    v4[1] = v5[1];
    v4[2] = v5[2];
    v4[3] = v5[3];
    v4[4] = v5[4];
    v4[5] = v5[5];
    v4 += 6;
  }
  *a2 = (uint64_t)v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = (_WORD)v4 - (v3 + 3);
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryInfoList>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E66D4B28;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 2) >= 0x1555555555555556)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v5);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[4 * (v5 >> 2)];
    *((_QWORD *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B3CEE9D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17SendAccessoryInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEEAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEEACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEEAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15GetRFFEScanData8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEEBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEEBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEEC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18GetResetProperties8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEECF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEED20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::IsCharging>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::IsCharging>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::IsCharging>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D4BF0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ChargeLevelPercentage>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ChargeLevelPercentage>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ChargeLevelPercentage>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D4C40;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15SendBatteryInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEEED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEEEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEEF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0>(radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverM20::enableResetSPMIEvent(void)::$_0>>)::{lambda(void *)#1}::__invoke(void ***a1)
{
  void **v2;
  void *v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void **v9;
  __int128 v10;
  void *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  std::string __p;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  _OWORD v24[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[0] = v4;
  v24[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v24);
  v19 = (uint64_t)v3 + 320;
  v20 = QMIServiceMsg::create();
  v21 = 25000;
  v22 = 0;
  v23 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_148;
  v16[4] = v3;
  v16[5] = v2[1];
  v6 = (std::__shared_weak_count *)v2[2];
  v17 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = v2 + 3;
  if (*((char *)v2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v2[3], (std::string::size_type)v2[4]);
  }
  else
  {
    v10 = *(_OWORD *)v9;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v2[5];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  }
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20EnableResetSPMIEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D4CF8;
  aBlock[4] = v16;
  v11 = _Block_copy(aBlock);
  v23 = v11;
  if (v20)
  {
    qmi::Client::send();
    v11 = v23;
  }
  if (v11)
    _Block_release(v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v24);
  if (*((char *)v2 + 47) < 0)
    operator delete(*v9);
  v12 = (std::__shared_weak_count *)v2[2];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  operator delete(v2);
  v13 = (std::__shared_weak_count *)a1[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(a1);
}

void sub_1B3CEF100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *aBlock,char a28)
{
  _QWORD *v28;
  uint64_t v29;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;

  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!a24)
      goto LABEL_6;
  }
  else if (!a24)
  {
LABEL_6:
    if (aBlock)
      _Block_release(aBlock);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a28);
    if (*(char *)(v29 + 47) < 0)
    {
      operator delete(*(void **)(v29 + 24));
      v31 = *(std::__shared_weak_count **)(v29 + 16);
      if (!v31)
      {
LABEL_10:
        operator delete((void *)v29);
        v32 = (std::__shared_weak_count *)v28[2];
        if (!v32)
          goto LABEL_18;
        goto LABEL_14;
      }
    }
    else
    {
      v31 = *(std::__shared_weak_count **)(v29 + 16);
      if (!v31)
        goto LABEL_10;
    }
    std::__shared_weak_count::__release_weak(v31);
    operator delete((void *)v29);
    v32 = (std::__shared_weak_count *)v28[2];
    if (!v32)
      goto LABEL_18;
LABEL_14:
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_18:
    operator delete(v28);
    _Unwind_Resume(a1);
  }
  qmi::Client::send();
  goto LABEL_6;
}

void ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke(uint64_t a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const char **v8;
  const char *v9;
  uint64_t (*v10)(uint64_t);
  NSObject *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  CFTypeRef cf;
  std::__shared_weak_count *v23;
  __int128 buf;
  void (*v25)(uint64_t, QMIServiceMsg *);
  void *v26;
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    v23 = v6;
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        v8 = (const char **)(a1 + 56);
        v9 = (const char *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0)
          v9 = *v8;
        radio::QMICommandDriverBase::checkError(v5, a2, v9, &cf);
        if (cf)
          v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v10 = 0;
        if (v10)
        {
          v11 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            if (*(char *)(a1 + 79) < 0)
              v8 = (const char **)*v8;
            LODWORD(buf) = 136315138;
            *(_QWORD *)((char *)&buf + 4) = v8;
            _os_log_error_impl(&dword_1B3CB3000, v11, OS_LOG_TYPE_ERROR, "Failed to %s", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          v12 = MEMORY[0x1E0C809B0];
          v19[0] = MEMORY[0x1E0C809B0];
          v19[1] = 1174405120;
          v19[2] = ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke_144;
          v19[3] = &__block_descriptor_tmp_147;
          v14 = *(_QWORD *)(a1 + 40);
          v13 = *(std::__shared_weak_count **)(a1 + 48);
          v19[4] = v5;
          v19[5] = v14;
          v20 = v13;
          if (v13)
          {
            p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
            do
              v16 = __ldxr(p_shared_weak_owners);
            while (__stxr(v16 + 1, p_shared_weak_owners));
          }
          *(_QWORD *)&buf = v12;
          *((_QWORD *)&buf + 1) = 0x40000000;
          v25 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm14ResetSPMIEvent10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
          v26 = &unk_1E66D4D20;
          v27 = v19;
          qmi::Client::setIndHandler();
          if (v20)
            std::__shared_weak_count::__release_weak(v20);
        }
        if (cf)
          CFRelease(cf);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3CEF408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, const void *a16, __int16 a17, char a18, char a19)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a16);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void ___ZZN5radio19QMICommandDriverM2020enableResetSPMIEventEvENK3__0clEv_block_invoke_144(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  tlv *TlvValue;
  int v9;
  tlv *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  char *v31;
  char *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  __int128 v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  _QWORD v61[4];
  __int128 v62;
  __int128 v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  unsigned int *v68;
  int v69;
  __int128 v70;
  __int128 v71;
  std::runtime_error v72;
  uint8_t buf[16];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *__p[2];
  pthread_mutex_t *v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  unint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5] || (TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2), (v10 = TlvValue) == 0))
      {
LABEL_70:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)4);
      v11 = *(_DWORD *)v10;
      v12 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v11;
        _os_log_impl(&dword_1B3CB3000, v12, OS_LOG_TYPE_DEFAULT, "#I Resetting SPMI with data (0x%x)", buf, 8u);
      }
      v13 = *(_QWORD *)(v5 + 136);
      v69 = v11;
      v67 = 0;
      v68 = 0;
      *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v81 = v14;
      v82 = v14;
      v79 = v14;
      v80 = v14;
      v77 = v14;
      v78 = v14;
      v75 = v14;
      v76 = v14;
      *(_OWORD *)buf = v14;
      v74 = v14;
      v15 = *(pthread_mutex_t **)(v13 + 24);
      __p[0] = (void *)10;
      __p[1] = buf;
      v84[0] = 0;
      v84[1] = v15;
      pthread_mutex_lock(v15);
      v16 = *(unsigned int **)(v13 + 8);
      if (v16)
      {
        v17 = atomic_load(v16 + 2);
        v18 = *(uint64_t ***)v13;
        if (v17 == 1)
        {
          v19 = *v18;
          v20 = *(_QWORD *)(v13 + 16);
          if ((uint64_t *)v20 == *v18)
            v20 = v19[1];
          *(_QWORD *)&v70 = v20;
          if (v19 != (uint64_t *)v20)
          {
            v21 = *(_QWORD *)(v20 + 16);
            if (*(_BYTE *)(v21 + 24))
            {
              v20 = *(_QWORD *)(v20 + 8);
            }
            else
            {
              v20 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>>::erase(v19, (int *)(v21 + 64), (uint64_t **)&v70);
              v18 = *(uint64_t ***)v13;
            }
          }
          *(_QWORD *)(v13 + 16) = v20;
        }
        v16 = *(unsigned int **)(v13 + 8);
        if (v16)
        {
          v22 = v16 + 2;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
      }
      else
      {
        v18 = *(uint64_t ***)v13;
      }
      v24 = v68;
      v67 = v18;
      v68 = v16;
      if (v24)
      {
        v25 = v24 + 2;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
          v28 = v24 + 3;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
        }
      }
      pthread_mutex_unlock(v84[1]);
      v31 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)&v84[0][-1].__opaque[55] >= 0)
        {
          v32 = (char *)__p[1] + 16 * (uint64_t)v84[0];
          do
          {
            v33 = (unsigned int *)*((_QWORD *)v32 - 1);
            if (v33)
            {
              v34 = v33 + 2;
              do
              {
                v35 = __ldaxr(v34);
                v36 = v35 - 1;
              }
              while (__stlxr(v36, v34));
              if (!v36)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 16))(v33);
                v37 = v33 + 3;
                do
                {
                  v38 = __ldaxr(v37);
                  v39 = v38 - 1;
                }
                while (__stlxr(v39, v37));
                if (!v39)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 24))(v33);
              }
            }
            v32 -= 16;
          }
          while (v32 > v31);
        }
        if (__p[0] >= (void *)0xB)
          operator delete(__p[1]);
      }
      *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v86 = v40;
      v87 = v40;
      *(_OWORD *)v84 = v40;
      v85 = v40;
      v82 = v40;
      *(_OWORD *)__p = v40;
      v80 = v40;
      v81 = v40;
      v78 = v40;
      v79 = v40;
      v76 = v40;
      v77 = v40;
      v74 = v40;
      v75 = v40;
      *(_OWORD *)buf = v40;
      buf[0] = 0;
      v88 = 0xAAAAAAAAAAAAAAAALL;
      v89 = 10;
      v90 = &buf[8];
      v91 = 0;
      v92 = &v69;
      v93 = 0;
      v94 = 0;
      v41 = v67;
      v42 = (uint64_t)*v67;
      v64 = buf;
      v65 = v13;
      v66 = v42;
      *(_QWORD *)&v62 = *(_QWORD *)(v42 + 8);
      *((_QWORD *)&v62 + 1) = v42;
      *(_QWORD *)&v63 = buf;
      *((_QWORD *)&v63 + 1) = v42;
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::lock_next_callable(&v62);
      v61[0] = *v41;
      v61[1] = v61[0];
      v61[2] = buf;
      v61[3] = v61[0];
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::lock_next_callable(v61);
      v70 = v62;
      v71 = v63;
      v43 = v61[0];
      v44 = v62;
      if ((_QWORD)v62 == v61[0])
      {
        if (HIDWORD(v93) <= v93)
        {
LABEL_62:
          boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>>::~slot_call_iterator_cache((uint64_t)buf);
          v52 = v68;
          if (v68)
          {
            v53 = v68 + 2;
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
              v56 = v52 + 3;
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58)
                (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 24))(v52);
            }
          }
          goto LABEL_70;
        }
      }
      else
      {
        v45 = (_BYTE *)v71;
        if (!*(_BYTE *)v71)
        {
          v46 = *(_QWORD *)(*(_QWORD *)(v62 + 16) + 32);
          v47 = *(_QWORD *)(v46 + 24);
          if (!v47)
          {
            std::runtime_error::runtime_error(&v72, "call to empty boost::function");
            v72.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
            boost::throw_exception<boost::bad_function_call>(&v72);
          }
          (*(void (**)(uint64_t, _QWORD))((v47 & 0xFFFFFFFFFFFFFFFELL) + 8))(v46 + 32, **(unsigned int **)(v71 + 272));
          if (!*v45)
            *v45 = 1;
        }
        *(_QWORD *)&v70 = *(_QWORD *)(v44 + 8);
        boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::lock_next_callable(&v70);
        v48 = v71;
        if (*(_BYTE *)v71)
          *(_BYTE *)v71 = 0;
        for (i = v70; (_QWORD)v70 != v43; i = v70)
        {
          v50 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
          v51 = *(_QWORD *)(v50 + 24);
          if (!v51)
          {
            std::runtime_error::runtime_error(&v72, "call to empty boost::function");
            v72.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
            boost::throw_exception<boost::bad_function_call>(&v72);
          }
          (*(void (**)(uint64_t, _QWORD))((v51 & 0xFFFFFFFFFFFFFFFELL) + 8))(v50 + 32, **(unsigned int **)(v48 + 272));
          if (!*(_BYTE *)v48)
            *(_BYTE *)v48 = 1;
          *(_QWORD *)&v70 = *(_QWORD *)(i + 8);
          boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::lock_next_callable(&v70);
          v48 = v71;
          if (*(_BYTE *)v71)
            *(_BYTE *)v71 = 0;
        }
        if (*((_DWORD *)v64 + 71) <= *((_DWORD *)v64 + 70))
          goto LABEL_62;
      }
      boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::force_cleanup_connections(v65, v66);
      goto LABEL_62;
    }
  }
}

void sub_1B3CEFA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a31);
  JUMPOUT(0x1B3CEFC04);
}

void sub_1B3CEFA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::runtime_error a29)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  std::runtime_error::~runtime_error(&a29);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v32);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>>::~slot_call_iterator_cache((uint64_t)&v34);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v33);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v31);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a25 + 16));
  __cxa_rethrow();
}

void sub_1B3CEFAC0(_Unwind_Exception *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v5);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>>::~slot_call_iterator_cache((uint64_t)&v7);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v6);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v4);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B3CEFA90);
}

void sub_1B3CEFAF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,unint64_t a51,char *__p,uint64_t a53)
{
  char *v53;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;

  if (__p)
  {
    if (a53 - 1 >= 0)
    {
      v53 = &__p[16 * a53];
      do
      {
        v54 = (unsigned int *)*((_QWORD *)v53 - 1);
        if (v54)
        {
          v55 = v54 + 2;
          do
          {
            v56 = __ldaxr(v55);
            v57 = v56 - 1;
          }
          while (__stlxr(v57, v55));
          if (!v57)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 16))(v54);
            v58 = v54 + 3;
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
              (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 24))(v54);
          }
        }
        v53 -= 16;
      }
      while (v53 > __p);
    }
    if (a51 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x1B3CEFC04);
}

void sub_1B3CEFB9C(void *a1, int a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v2, 1, v3, v4);
    JUMPOUT(0x1B3CEF9B8);
  }
  JUMPOUT(0x1B3CEFC14);
}

void sub_1B3CEFBD4()
{
  JUMPOUT(0x1B3CEFC0CLL);
}

void sub_1B3CEFBE0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3CEFC14);
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1B3CEFCC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20EnableResetSPMIEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEFDE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEFDF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEFE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm14ResetSPMIEvent10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CEFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CEFF0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CEFF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void (),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = (_QWORD *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(16 * a2);
  }
  v6 = *(_QWORD **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
  {
    v7 = &v6[2 * v5];
    v8 = v4;
    do
    {
      v9 = v6[1];
      *v8 = *v6;
      v8[1] = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    v6 = *(_QWORD **)(a1 + 168);
  }
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 176);
    if (v12 - 1 >= 0)
    {
      v13 = &v6[2 * v12];
      do
      {
        v14 = (unsigned int *)*(v13 - 1);
        if (v14)
        {
          v15 = v14 + 2;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
            v18 = v14 + 3;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
          }
        }
        v13 -= 2;
      }
      while (v13 > v6);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = v4;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  __int128 v2;
  char *v3;
  char *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _OWORD v12[10];
  unint64_t v13;
  void *__p;
  uint64_t v15;
  boost::signals2::detail::connection_body_base *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[8] = v2;
  v12[9] = v2;
  v12[6] = v2;
  v12[7] = v2;
  v12[4] = v2;
  v12[5] = v2;
  v12[2] = v2;
  v12[3] = v2;
  v12[0] = v2;
  v12[1] = v2;
  v13 = 10;
  __p = v12;
  v15 = 0;
  v16 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)this + 24))(this);
  if (*((_BYTE *)this + 24))
  {
    *((_BYTE *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v12);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)v16 + 32))(v16);
  v3 = (char *)__p;
  if (__p)
  {
    if (v15 - 1 >= 0)
    {
      v4 = (char *)__p + 16 * v15;
      do
      {
        v5 = (unsigned int *)*((_QWORD *)v4 - 1);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v13 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3CF0CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CF0D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B3CF0E00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E66D4F38;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E66D4EC0;
  *(_QWORD *)(a1 + 8) = &unk_1E66D4EF0;
  *(_QWORD *)(a1 + 24) = &unk_1E66D4F18;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E66D4F90;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E66D4F38;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = &unk_1E66D4F68;
  *((_QWORD *)v2 + 3) = &unk_1E66D4F90;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E66D4EC0;
  *((_QWORD *)v2 + 1) = &unk_1E66D4EF0;
  *((_QWORD *)v2 + 3) = &unk_1E66D4F18;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_1B3CF0F94(_Unwind_Exception *a1)
{
  void *v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CF0FB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1B3CF1008(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E66D4F90;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F90;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  operator delete(&this[-1].__imp_);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F90;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  void *v1;

  std::runtime_error::~runtime_error(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E66D4F38;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E66D4F68;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E66D4F90;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E66D4EC0;
  *(_QWORD *)(a1 + 8) = &unk_1E66D4EF0;
  *(_QWORD *)(a1 + 24) = &unk_1E66D4F18;
  return a1;
}

void sub_1B3CF1294(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1B3CF138C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 280);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 288);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 288);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 288) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 284);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 288);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 288) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_1B3CF1B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3CF1B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    v2 = *(unsigned int **)(a1 + 16);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = a1[31];
  if (v1)
  {
    v3 = a1[32];
    if (v3 - 1 >= 0)
    {
      v4 = v1 + 24 * v3;
      v5 = v4;
      do
      {
        v6 = *(_DWORD *)(v5 - 24);
        v5 -= 24;
        if (v6 == v6 >> 31)
        {
          v7 = *(unsigned int **)(v4 - 8);
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
        }
        else
        {
          v14 = *(_QWORD *)(v4 - 16);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v4 = v5;
      }
      while (v5 > v1);
    }
    if (a1[30] >= 0xBuLL)
      operator delete((void *)a1[31]);
  }
}

uint64_t std::uninitialized_copy[abi:ne180100]<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *,boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  if (a1 == a2)
    return a3;
  v4 = a1;
  v5 = a3;
  do
  {
    v7 = *(_QWORD *)(v4 + 8);
    if (*(_DWORD *)v4 == *(int *)v4 >> 31)
    {
      v8 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v5 + 8) = v7;
      *(_QWORD *)(v5 + 16) = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      *(_QWORD *)(v5 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
    v6 = *(_DWORD *)v4;
    v4 += 24;
    *(_DWORD *)v5 = v6 ^ (v6 >> 31);
    v5 += 24;
  }
  while (v4 != a2);
  return v5;
}

void boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_1E66D4DB0;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_1E66D4D50;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3CF2638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>,void *>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,unsigned int>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3CF2EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t logs::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  void *v20;
  NSObject *v21;
  const void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  CFTypeRef v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD v55[2];
  std::string v56;
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;
  void *v60;
  dispatch_object_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;

  *a7 = 0xAAAAAAAAAAAAAAAALL;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  v14 = operator new(0xE0uLL);
  v15 = a1[1];
  v62 = *a1;
  v63 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(void **)a2;
  if (*(_QWORD *)a2)
    v18 = _Block_copy(v18);
  v19 = *(NSObject **)(a2 + 8);
  v60 = v18;
  v61 = v19;
  if (v19)
    dispatch_retain(v19);
  v20 = *(void **)a3;
  if (*(_QWORD *)a3)
    v20 = _Block_copy(v20);
  v21 = *(NSObject **)(a3 + 8);
  aBlock = v20;
  object = v21;
  if (v21)
    dispatch_retain(v21);
  v22 = *a4;
  cf = v22;
  if (v22)
    CFRetain(v22);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v56 = *(std::string *)a5;
  v23 = *a6;
  v24 = (std::__shared_weak_count *)a6[1];
  v55[0] = v23;
  v55[1] = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
  }
  logs::QMICommandDriver::QMICommandDriver((uint64_t)v14, &v62, (uint64_t)&v60, (uint64_t)&aBlock, (const __CFDictionary **)&cf, (uint64_t)&v56, v55);
  *a7 = v14;
  a7[1] = 0xAAAAAAAAAAAAAAAALL;
  v27 = (std::__shared_weak_count *)operator new(0x20uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D5468;
  v27->__shared_weak_owners_ = 0;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  a7[1] = v27;
  v29 = (std::__shared_weak_count *)*((_QWORD *)v14 + 10);
  if (v29)
  {
    if (v29->__shared_owners_ != -1)
      goto LABEL_32;
    do
      v30 = __ldxr(v28);
    while (__stxr(v30 + 1, v28));
    p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
    *((_QWORD *)v14 + 9) = v14;
    *((_QWORD *)v14 + 10) = v27;
    std::__shared_weak_count::__release_weak(v29);
  }
  else
  {
    do
      v33 = __ldxr(v28);
    while (__stxr(v33 + 1, v28));
    v34 = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    *((_QWORD *)v14 + 9) = v14;
    *((_QWORD *)v14 + 10) = v27;
  }
  do
    v36 = __ldaxr(v28);
  while (__stlxr(v36 - 1, v28));
  if (v36)
  {
LABEL_32:
    v37 = (_QWORD *)*a7;
    if (!*(_QWORD *)(*a7 + 56))
      goto LABEL_46;
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  v37 = (_QWORD *)*a7;
  if (!*(_QWORD *)(*a7 + 56))
    goto LABEL_46;
LABEL_33:
  v38 = (std::__shared_weak_count *)v37[10];
  if (!v38 || (v39 = v37[9], (v40 = std::__shared_weak_count::lock(v38)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v41 = v40;
  v66 = v39;
  v67 = v40;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v37 + 1));
  v64 = v39;
  v65 = v41;
  v66 = 0;
  v67 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v42 = v65;
  if (v65)
  {
    v43 = (unint64_t *)&v65->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v67;
  if (v67)
  {
    v46 = (unint64_t *)&v67->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
LABEL_46:
  if (!v24)
    goto LABEL_50;
  v48 = (unint64_t *)&v24->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_50:
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v56.__r_.__value_.__l.__data_);
    v50 = cf;
    if (!cf)
      goto LABEL_56;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v50 = cf;
  if (cf)
LABEL_55:
    CFRelease(v50);
LABEL_56:
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v61)
    dispatch_release(v61);
  if (v60)
    _Block_release(v60);
  v51 = v63;
  if (v63)
  {
    v52 = (unint64_t *)&v63->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a7 + 72))(*a7);
}

void sub_1B3CF3330(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  __break(1u);
}

void sub_1B3CF33AC()
{
  __cxa_end_catch();
  JUMPOUT(0x1B3CF33D4);
}

void sub_1B3CF33BC()
{
  JUMPOUT(0x1B3CF33D8);
}

uint64_t dispatch::callback<void({block_pointer})(std::shared_ptr<std::vector<unsigned char>>,BOOL)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(logs::CollectionState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t logs::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const __CFDictionary **a5, uint64_t a6, _QWORD *a7)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  const __CFDictionary *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  int v30;
  int Int;
  std::string v33;
  void *__p[6];
  _QWORD v35[3];
  std::__shared_weak_count *v36;
  std::string v37;
  const __CFDictionary *v38;
  const void *v39;
  dispatch_object_t v40;
  const void *v41;
  dispatch_object_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;

  v13 = (std::__shared_weak_count *)a2[1];
  v43 = *a2;
  v44 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = *(void **)a3;
  if (*(_QWORD *)a3)
    v16 = _Block_copy(v16);
  v17 = *(NSObject **)(a3 + 8);
  v41 = v16;
  v42 = v17;
  if (v17)
    dispatch_retain(v17);
  v18 = *(void **)a4;
  if (*(_QWORD *)a4)
    v18 = _Block_copy(v18);
  v19 = *(NSObject **)(a4 + 8);
  v39 = v18;
  v40 = v19;
  if (v19)
    dispatch_retain(v19);
  v38 = *a5;
  if (v38)
    CFRetain(v38);
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v37 = *(std::string *)a6;
  v20 = (std::__shared_weak_count *)a7[1];
  v35[2] = *a7;
  v36 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  logs::CommandDriver::CommandDriver();
  if (!v36)
    goto LABEL_24;
  v23 = &v36->__shared_owners_;
  do
    v24 = __ldaxr((unint64_t *)v23);
  while (__stlxr(v24 - 1, (unint64_t *)v23));
  if (v24)
  {
LABEL_24:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_28:
    operator delete(v37.__r_.__value_.__l.__data_);
    v25 = v38;
    if (!v38)
      goto LABEL_30;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
LABEL_25:
  v25 = v38;
  if (v38)
LABEL_29:
    CFRelease(v25);
LABEL_30:
  if (v40)
    dispatch_release(v40);
  if (v39)
    _Block_release(v39);
  if (v42)
    dispatch_release(v42);
  if (v41)
    _Block_release(v41);
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)a1 = off_1E66D5008;
  *(_OWORD *)(a1 + 192) = 0u;
  v35[0] = 0xAAAAAAAAAAAAAAAALL;
  v35[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v35, *a5);
  memset(&__p[3], 170, 24);
  v29 = (const char *)*MEMORY[0x1E0DDF738];
  memset(__p, 0, 24);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v45, v29);
  ctu::cf::map_adapter::getString();
  v30 = MEMORY[0x1B5E2EDFC](&v45);
  if (SHIBYTE(__p[5]) < 0)
    std::string::__init_copy_ctor_external(&v33, (const std::string::value_type *)__p[3], (std::string::size_type)__p[4]);
  else
    v33 = *(std::string *)&__p[3];
  *(_DWORD *)(a1 + 208) = logs::QMICommandDriver::convertType_sync(v30, (char *)&v33);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, (const char *)*MEMORY[0x1E0DDF740]);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v35, (const __CFString *)__p[0]);
  MEMORY[0x1B5E2EDFC](__p);
  *(_DWORD *)(a1 + 212) = Int;
  if (SHIBYTE(__p[5]) < 0)
    operator delete(__p[3]);
  MEMORY[0x1B5E2EE44](v35);
  return a1;
}

void sub_1B3CF37B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v34 - 128));
  dispatch::callback<void({block_pointer})(std::shared_ptr<std::vector<unsigned char>>,BOOL)>::~callback(v34 - 120);
  dispatch::callback<void({block_pointer})(logs::CollectionState)>::~callback(v34 - 104);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v34 - 88);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::convertType_sync(int a1, char *a2)
{
  const char *v2;
  uint64_t result;

  v2 = a2;
  if (a2[23] < 0)
  {
    v2 = *(const char **)a2;
    result = strcasecmp(*(const char **)a2, (const char *)*MEMORY[0x1E0DDF758]);
    if (!(_DWORD)result)
      return result;
    if (!strcasecmp(v2, (const char *)*MEMORY[0x1E0DDF748]))
      return 1;
  }
  else
  {
    result = strcasecmp(a2, (const char *)*MEMORY[0x1E0DDF758]);
    if (!(_DWORD)result)
      return result;
    if (!strcasecmp(v2, (const char *)*MEMORY[0x1E0DDF748]))
      return 1;
  }
  if (!strcasecmp(v2, (const char *)*MEMORY[0x1E0DDF750]))
    return 2;
  else
    return 3;
}

void logs::CommandDriver::~CommandDriver(void **this)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;

  *this = off_1E66D53C8;
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  v2 = this[18];
  if (v2)
    dispatch_release(v2);
  v3 = this[17];
  if (v3)
    _Block_release(v3);
  v4 = this[16];
  if (v4)
    dispatch_release(v4);
  v5 = this[15];
  if (v5)
    _Block_release(v5);
  v6 = (std::__shared_weak_count *)this[14];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *this = off_1E66D5428;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v9 = this[12];
  if (v9)
    dispatch_release(v9);
  v10 = this[11];
  if (v10)
    dispatch_release(v10);
  v11 = (std::__shared_weak_count *)this[10];
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void logs::QMICommandDriver::~QMICommandDriver(logs::QMICommandDriver *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66D5008;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((logs::QMICommandDriver *)((char *)this + 176));
  logs::CommandDriver::~CommandDriver((void **)this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66D5008;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((logs::QMICommandDriver *)((char *)this + 176));
  logs::CommandDriver::~CommandDriver((void **)this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66D5008;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((logs::QMICommandDriver *)((char *)this + 176));
  logs::CommandDriver::~CommandDriver((void **)this);
  operator delete(v3);
}

void logs::QMICommandDriver::init(logs::QMICommandDriver *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN4logs16QMICommandDriver4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_20_0;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4logs13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_37;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *Name;
  size_t v5;
  void *v6;
  void **v7;
  NSObject *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  qmi::Client *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD v76[6];
  std::__shared_weak_count *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD *, xpc_object_t);
  void *v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD *);
  void *v88;
  uint64_t v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(_QWORD *);
  void *v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(_QWORD *);
  void *v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(_QWORD *);
  void *v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  void *v117[2];
  char v118;
  dispatch_object_t v119;
  void *__dst[2];
  unint64_t v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  uint8_t buf[8];
  uint64_t v125;
  __int128 v126;
  _QWORD *v127;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v122 = 0xAAAAAAAAAAAAAAAALL;
  v123 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v2 + 104));
  Name = (const char *)logs::CommandDriver::getName((logs::CommandDriver *)v2);
  v5 = strlen(Name);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    v7 = (void **)operator new(v10 + 1);
    __dst[1] = v6;
    v121 = v11 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v121) = v5;
    v7 = __dst;
    if (!v5)
    {
      LOBYTE(__dst[0]) = 0;
      v8 = *(NSObject **)(v2 + 88);
      v119 = v8;
      if (!v8)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  memmove(v7, Name, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v8 = *(NSObject **)(v2 + 88);
  v119 = v8;
  if (v8)
LABEL_7:
    dispatch_retain(v8);
LABEL_8:
  if (*(_DWORD *)(v2 + 208) > 2u)
  {
    v9 = 0;
    LOBYTE(v117[0]) = 0;
  }
  else
  {
    strcpy((char *)v117, "radio");
    v9 = 5;
  }
  v118 = v9;
  v12 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v12 || (v13 = *(_QWORD *)(v2 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    v115 = 0;
    v116 = 0;
    v20 = std::__shared_weak_count::lock(v14);
    if (v20)
      goto LABEL_24;
LABEL_112:
    v115 = 0;
    v116 = v20;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v15);
  v115 = 0;
  v116 = 0;
  v20 = std::__shared_weak_count::lock(v15);
  if (!v20)
    goto LABEL_112;
LABEL_24:
  v21 = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v115 = v13;
  v116 = v20;
LABEL_27:
  std::__shared_weak_count::__release_weak(v15);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v113 = v122;
  v114 = v123;
  if (v123)
  {
    v25 = (unint64_t *)&v123->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  qmi::Client::createWithQueueLocal();
  v27 = v126;
  v126 = 0uLL;
  v28 = *(std::__shared_weak_count **)(v2 + 200);
  *(_OWORD *)(v2 + 192) = v27;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v114)
  {
    v31 = &v114->__shared_owners_;
    do
      v32 = __ldaxr((unint64_t *)v31);
    while (__stlxr(v32 - 1, (unint64_t *)v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (v116)
    std::__shared_weak_count::__release_weak(v116);
  if (v118 < 0)
    operator delete(v117[0]);
  if (v119)
    dispatch_release(v119);
  if (SHIBYTE(v121) < 0)
    operator delete(__dst[0]);
  v33 = (qmi::Client *)(v2 + 176);
  v108 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_2;
  v109 = &__block_descriptor_tmp_0;
  v35 = a1[5];
  v34 = (std::__shared_weak_count *)a1[6];
  v110 = v2;
  v111 = v35;
  v36 = MEMORY[0x1E0C809B0];
  v106 = MEMORY[0x1E0C809B0];
  v107 = 1174405120;
  v112 = v34;
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  qmi::Client::setHandler();
  v99 = v36;
  v100 = 1174405120;
  v101 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_3;
  v102 = &__block_descriptor_tmp_4;
  v40 = a1[5];
  v39 = (std::__shared_weak_count *)a1[6];
  v103 = v2;
  v104 = v40;
  v105 = v39;
  if (v39)
  {
    v41 = (unint64_t *)&v39->__shared_weak_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  qmi::Client::setHandler();
  v92 = v36;
  v93 = 1174405120;
  v94 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_5;
  v95 = &__block_descriptor_tmp_7;
  v44 = a1[5];
  v43 = (std::__shared_weak_count *)a1[6];
  v96 = v2;
  v97 = v44;
  v98 = v43;
  if (v43)
  {
    v45 = (unint64_t *)&v43->__shared_weak_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  qmi::Client::setHandler();
  v85 = v36;
  v86 = 1174405120;
  v87 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_8;
  v88 = &__block_descriptor_tmp_9;
  v48 = a1[5];
  v47 = (std::__shared_weak_count *)a1[6];
  v89 = v2;
  v90 = v48;
  v91 = v47;
  if (v47)
  {
    v49 = (unint64_t *)&v47->__shared_weak_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  qmi::Client::setHandler();
  v78 = v36;
  v79 = 1174405120;
  v80 = ___ZN4logs16QMICommandDriver4initEv_block_invoke_10;
  v81 = &__block_descriptor_tmp_12;
  v52 = a1[5];
  v51 = (std::__shared_weak_count *)a1[6];
  v82 = v2;
  v83 = v52;
  v84 = v51;
  if (v51)
  {
    v53 = (unint64_t *)&v51->__shared_weak_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  qmi::Client::setHandler();
  v76[0] = v36;
  v76[1] = 1174405120;
  v76[2] = ___ZN4logs16QMICommandDriver4initEv_block_invoke_13;
  v76[3] = &__block_descriptor_tmp_19_0;
  v56 = a1[5];
  v55 = (std::__shared_weak_count *)a1[6];
  v76[4] = v2;
  v76[5] = v56;
  v77 = v55;
  if (v55)
  {
    v57 = (unint64_t *)&v55->__shared_weak_owners_;
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 1, v57));
  }
  *(_QWORD *)buf = v36;
  v125 = 0x40000000;
  *(_QWORD *)&v126 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm17LogCollectionData10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v126 + 1) = &unk_1E66D5500;
  v127 = v76;
  qmi::Client::setIndHandler();
  v59 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v59 || (v60 = *(_QWORD *)(v2 + 72), (v61 = std::__shared_weak_count::lock(v59)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v62 = v61;
  v63 = (unint64_t *)&v61->__shared_weak_owners_;
  do
    v64 = __ldxr(v63);
  while (__stxr(v64 + 1, v63));
  v65 = (unint64_t *)&v61->__shared_owners_;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 - 1, v65));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v62);
    *(_QWORD *)buf = 0;
    v125 = 0;
    v67 = std::__shared_weak_count::lock(v62);
    if (v67)
      goto LABEL_79;
LABEL_109:
    v70 = (std::__shared_weak_count *)v125;
    *(_QWORD *)buf = 0;
    v125 = (uint64_t)v67;
    if (!v70)
      goto LABEL_83;
    goto LABEL_82;
  }
  *(_QWORD *)buf = 0;
  v125 = 0;
  v67 = std::__shared_weak_count::lock(v61);
  if (!v67)
    goto LABEL_109;
LABEL_79:
  v68 = (unint64_t *)&v67->__shared_weak_owners_;
  do
    v69 = __ldxr(v68);
  while (__stxr(v69 + 1, v68));
  v70 = (std::__shared_weak_count *)v125;
  *(_QWORD *)buf = v60;
  v125 = (uint64_t)v67;
  if (v70)
LABEL_82:
    std::__shared_weak_count::__release_weak(v70);
LABEL_83:
  std::__shared_weak_count::__release_weak(v62);
  if (v67)
  {
    v71 = (unint64_t *)&v67->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  qmi::Client::setClientHandle();
  if (v125)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v125);
  qmi::Client::start(v33);
  if (v77)
    std::__shared_weak_count::__release_weak(v77);
  if (v84)
    std::__shared_weak_count::__release_weak(v84);
  if (v91)
    std::__shared_weak_count::__release_weak(v91);
  if (v98)
    std::__shared_weak_count::__release_weak(v98);
  if (v105)
    std::__shared_weak_count::__release_weak(v105);
  if (v112)
    std::__shared_weak_count::__release_weak(v112);
  v73 = v123;
  if (v123)
  {
    v74 = (unint64_t *)&v123->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1B3CF46B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  uint64_t v50;
  std::__shared_weak_count *v52;
  NSObject *v53;

  v52 = *(std::__shared_weak_count **)(v50 - 248);
  if (v52)
  {
    std::__shared_weak_count::__release_weak(v52);
    if ((*(char *)(v50 - 177) & 0x80000000) == 0)
    {
LABEL_3:
      v53 = *(NSObject **)(v50 - 240);
      if (!v53)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v50 - 177) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v50 - 200));
  v53 = *(NSObject **)(v50 - 240);
  if (!v53)
  {
LABEL_8:
    if (*(char *)(v50 - 145) < 0)
    {
      operator delete(*(void **)(v50 - 168));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v50 - 144);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v50 - 144);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v53);
  goto LABEL_8;
}

void logs::QMICommandDriver::getServiceName_sync(unsigned int a1@<W1>, char *a2@<X8>)
{
  if (a1 > 2)
  {
    *a2 = 0;
    a2[23] = 0;
  }
  else
  {
    strcpy(a2, "radio");
    a2[23] = 5;
  }
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Stopped", v9, 2u);
        }
        logs::CommandDriver::notifyState_sync();
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3CF49C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::onStop_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_3(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Started", v9, 2u);
        }
        logs::CommandDriver::notifyState_sync();
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3CF4AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::onStart_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_5(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I EnterLowPower", v9, 2u);
        }
        logs::CommandDriver::notifyState_sync();
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3CF4BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::onEnterLowPower_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I ExitLowPower", v9, 2u);
        }
        logs::CommandDriver::notifyState_sync();
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3CF4CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t logs::QMICommandDriver::onExitLowPower_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_10(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  size_t v12;
  void *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *__dst[3];
  std::__shared_weak_count *v20;
  uint8_t buf[4];
  void **v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v20 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v8 = v6;
LABEL_10:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (a2)
      {
        xpc_retain(a2);
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          goto LABEL_9;
      }
      else
      {
        a2 = xpc_null_create();
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          goto LABEL_9;
      }
      v11 = (char *)MEMORY[0x1B5E2FB34](a2);
      memset(__dst, 170, sizeof(__dst));
      v12 = strlen(v11);
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v13 = (void *)v12;
      if (v12 >= 0x17)
      {
        v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v15 = v12 | 7;
        v16 = v15 + 1;
        v14 = (void **)operator new(v15 + 1);
        __dst[1] = v13;
        __dst[2] = (void *)(v16 | 0x8000000000000000);
        __dst[0] = v14;
      }
      else
      {
        HIBYTE(__dst[2]) = v12;
        v14 = __dst;
        if (!v12)
          goto LABEL_23;
      }
      memcpy(v14, v11, (size_t)v13);
LABEL_23:
      *((_BYTE *)v13 + (_QWORD)v14) = 0;
      free(v11);
      v17 = __dst;
      if (SHIBYTE(__dst[2]) < 0)
        v17 = (void **)__dst[0];
      *(_DWORD *)buf = 136315138;
      v22 = v17;
      _os_log_error_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_ERROR, "Server error: %s", buf, 0xCu);
      if (SHIBYTE(__dst[2]) < 0)
        operator delete(__dst[0]);
LABEL_9:
      qmi::Client::stop((qmi::Client *)(v5 + 176));
      logs::CommandDriver::notifyState_sync();
      xpc_release(a2);
      v8 = v20;
      if (!v20)
        return;
      goto LABEL_10;
    }
  }
}

void sub_1B3CF4F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t logs::QMICommandDriver::onError_sync(logs::QMICommandDriver *this)
{
  return logs::CommandDriver::notifyState_sync();
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_13(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  tlv *TlvValue;
  int v8;
  tlv *v9;
  char *v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __n128 (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  std::__shared_weak_count *v39;
  uint8_t buf[8];
  void *v41;
  uint64_t v42;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v39 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v22 = v6;
LABEL_29:
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    return;
  }
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = 0;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)1);
    *((_BYTE *)v35 + 24) = *(_BYTE *)v9 != 0;
  }
  v27 = 0;
  v28 = &v27;
  v29 = 0x3802000000;
  v30 = __Block_byref_object_copy__0;
  v31 = __Block_byref_object_dispose__0;
  v32 = 0;
  v33 = 0;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 0x40000000;
  v26[2] = ___ZN4logs16QMICommandDriver4initEv_block_invoke_16;
  v26[3] = &unk_1E66D5150;
  v26[4] = &v27;
  v10 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (v10)
  {
    *(_QWORD *)buf = 0;
    v41 = 0;
    v42 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(buf, v10, &v10[v11], v11);
    ___ZN4logs16QMICommandDriver4initEv_block_invoke_16((uint64_t)v26, (uint64_t)buf);
    if (*(_QWORD *)buf)
    {
      v41 = *(void **)buf;
      operator delete(*(void **)buf);
    }
  }
  v12 = (std::__shared_weak_count *)v28[6];
  v25 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  logs::CommandDriver::sendLogData_sync();
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (*((_BYTE *)v35 + 24))
  {
    v17 = *(NSObject **)(v5 + 216);
    if (v17)
    {
      dispatch_source_cancel(v17);
      dispatch_release(*(dispatch_object_t *)(v5 + 216));
      *(_QWORD *)(v5 + 216) = 0;
      v18 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B3CB3000, v18, OS_LOG_TYPE_DEFAULT, "#I Log collection timer stopped", buf, 2u);
      }
    }
  }
  _Block_object_dispose(&v27, 8);
  v19 = v33;
  if (v33)
  {
    v20 = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Block_object_dispose(&v34, 8);
  v22 = v39;
  if (v39)
    goto LABEL_29;
}

void sub_1B3CF525C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v11 = *(void **)(v9 - 96);
  if (v11)
  {
    *(_QWORD *)(v9 - 88) = v11;
    operator delete(v11);
  }
  _Block_object_dispose(va, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v8 + 40);
  _Block_object_dispose(va1, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v9 - 112);
  _Unwind_Resume(a1);
}

void ___ZN4logs16QMICommandDriver4initEv_block_invoke_16(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v4 = operator new(0x18uLL);
  v6 = *(_BYTE **)a2;
  v5 = *(_BYTE **)(a2 + 8);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    *v4 = v8;
    v9 = &v8[v7];
    v4[2] = &v8[v7];
    memmove(v8, v6, v7);
    v4[1] = v9;
  }
  v10 = operator new(0x20uLL);
  *v10 = off_1E66D54B8;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v4;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v12 = *(std::__shared_weak_count **)(v11 + 48);
  *(_QWORD *)(v11 + 40) = v4;
  *(_QWORD *)(v11 + 48) = v10;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1B3CF5414(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  if (v2)
  {
    v1[1] = v2;
    operator delete(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void logs::QMICommandDriver::stopLogCollectionTimer_sync(logs::QMICommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 27));
    *((_QWORD *)this + 27) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Log collection timer stopped", v4, 2u);
    }
  }
}

void logs::QMICommandDriver::enable(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4logs16QMICommandDriver6enableEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_23;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<logs::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4logs16QMICommandDriver6enableEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  if (v2)
  {
    v4 = _Block_copy(v2);
    v5 = a1[6];
    v6 = v4;
    v7 = v5;
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = a1[6];
  v6 = 0;
  v7 = v5;
  if (v5)
LABEL_3:
    dispatch_retain(v5);
LABEL_4:
  logs::QMICommandDriver::setCollectionState_sync(v3, 1, (uint64_t)&v6);
  if (v5)
    dispatch_release(v5);
  if (v4)
    _Block_release(v4);
}

void sub_1B3CF55FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void logs::QMICommandDriver::setCollectionState_sync(uint64_t a1, char a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  const void **v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  char *v17;
  const void **v18;
  char *v19;
  _BYTE *v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  NSObject *v43;
  void *v44;
  uint64_t v45;
  _QWORD v47[5];
  std::__shared_weak_count *v48;
  void *v49;
  dispatch_object_t object;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  void *v55;
  _QWORD v56[2];
  uint64_t (*v57)(uint64_t, char *);
  void *v58;
  uint64_t v59;
  void *__p[2];
  __int128 v61;
  _QWORD aBlock[6];

  v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v4 || (v45 = *(_QWORD *)(a1 + 72), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v12;
  v61 = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 0x40000000;
  v57 = ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v58 = &__block_descriptor_tmp_27;
  v59 = a1;
  v13 = (const void **)__p[1];
  if (__p[1] != (void *)v61)
  {
    while (*((_BYTE *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v61)
        goto LABEL_16;
    }
  }
  if (v13 == (const void **)v61)
  {
LABEL_16:
    v15 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::LogCollectionType>(__p);
    v57((uint64_t)v56, v15);
  }
  else
  {
    if (!v14)
      goto LABEL_66;
    ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke((uint64_t)v56, v14 + 9);
  }
  v16 = (char *)__p[1];
  v17 = (char *)v61;
  v18 = (const void **)__p[1];
  if (__p[1] != (void *)v61)
  {
    v18 = (const void **)__p[1];
    while (*((_BYTE *)*v18 + 8) != 16)
    {
      if (++v18 == (const void **)v61)
        goto LABEL_25;
    }
  }
  if (v18 == (const void **)v61)
  {
LABEL_25:
    v21 = operator new(0x10uLL);
    v22 = v21;
    v21[4] = 16;
    *(_QWORD *)v21 = off_1E66D55F0;
    if ((unint64_t)v17 < *((_QWORD *)&v61 + 1))
    {
      *(_QWORD *)v17 = v21;
      v23 = (uint64_t)(v17 + 8);
LABEL_47:
      v20 = (char *)v22 + 9;
      *(_QWORD *)&v61 = v23;
      goto LABEL_48;
    }
    v24 = v17 - v16;
    v25 = (v17 - v16) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v27 = *((_QWORD *)&v61 + 1) - (_QWORD)v16;
    if ((uint64_t)(*((_QWORD *)&v61 + 1) - (_QWORD)v16) >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = operator new(8 * v28);
      v30 = &v29[8 * v25];
      v31 = &v29[8 * v28];
      *v30 = v22;
      v23 = (uint64_t)(v30 + 1);
      if (v16 != v17)
      {
LABEL_36:
        if ((unint64_t)(v24 - 8) < 0x58)
          goto LABEL_71;
        if ((unint64_t)(v16 - v29) < 0x20)
          goto LABEL_71;
        v32 = ((unint64_t)(v24 - 8) >> 3) + 1;
        v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
        v34 = &v17[-v33];
        v30 = (_QWORD *)((char *)v30 - v33);
        v35 = &v29[8 * v25 - 16];
        v36 = v17 - 16;
        v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v38 = *(_OWORD *)v36;
          *(v35 - 1) = *((_OWORD *)v36 - 1);
          *v35 = v38;
          v35 -= 2;
          v36 -= 32;
          v37 -= 4;
        }
        while (v37);
        v17 = v34;
        if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_71:
          do
          {
            v39 = *((_QWORD *)v17 - 1);
            v17 -= 8;
            *--v30 = v39;
          }
          while (v17 != v16);
        }
        v16 = (char *)__p[1];
        __p[1] = v30;
        *(_QWORD *)&v61 = v23;
        *((_QWORD *)&v61 + 1) = v31;
        if (!v16)
          goto LABEL_47;
        goto LABEL_46;
      }
    }
    else
    {
      v29 = 0;
      v30 = (_QWORD *)(8 * v25);
      v31 = 0;
      *(_QWORD *)(8 * v25) = v22;
      v23 = 8 * v25 + 8;
      if (v16 != v17)
        goto LABEL_36;
    }
    __p[1] = v30;
    *(_QWORD *)&v61 = v23;
    *((_QWORD *)&v61 + 1) = v31;
    if (!v16)
      goto LABEL_47;
LABEL_46:
    operator delete(v16);
    goto LABEL_47;
  }
  if (!v19)
LABEL_66:
    __cxa_bad_cast();
  v20 = v19 + 9;
LABEL_48:
  *v20 = a2;
  v51 = a1 + 176;
  v52 = QMIServiceMsg::create();
  v53 = 25000;
  v54 = 0;
  v55 = 0;
  v40 = MEMORY[0x1E0C809B0];
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 1174405120;
  v47[2] = ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_3;
  v47[3] = &__block_descriptor_tmp_30;
  v47[4] = v45;
  v48 = v7;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = *(void **)a3;
  if (*(_QWORD *)a3)
    v42 = _Block_copy(v42);
  v43 = *(NSObject **)(a3 + 8);
  v49 = v42;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  aBlock[0] = v40;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D5650;
  aBlock[4] = v47;
  v44 = _Block_copy(aBlock);
  v55 = v44;
  if (v52)
  {
    qmi::Client::send();
    v44 = v55;
  }
  if (v44)
    _Block_release(v44);
  if (object)
    dispatch_release(object);
  if (v49)
    _Block_release(v49);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1B3CF5A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v30);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

void sub_1B3CF5AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::__shared_weak_count *v29;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(BOOL)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void logs::QMICommandDriver::disable(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4logs16QMICommandDriver7disableEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_24;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<logs::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4logs16QMICommandDriver7disableEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  if (v2)
  {
    v4 = _Block_copy(v2);
    v5 = a1[6];
    v6 = v4;
    v7 = v5;
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = a1[6];
  v6 = 0;
  v7 = v5;
  if (v5)
LABEL_3:
    dispatch_retain(v5);
LABEL_4:
  logs::QMICommandDriver::setCollectionState_sync(v3, 0, (uint64_t)&v6);
  if (v5)
    dispatch_release(v5);
  if (v4)
    _Block_release(v4);
}

void sub_1B3CF5CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void logs::QMICommandDriver::collectLog(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4logs16QMICommandDriver10collectLogEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_25_0;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<logs::CommandDriver>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN4logs16QMICommandDriver10collectLogEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  if (v2)
  {
    v4 = _Block_copy(v2);
    v5 = a1[6];
    v6 = v4;
    v7 = v5;
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = 0;
  v5 = a1[6];
  v6 = 0;
  v7 = v5;
  if (v5)
LABEL_3:
    dispatch_retain(v5);
LABEL_4:
  logs::QMICommandDriver::collectLog_sync(v3, (uint64_t)&v6);
  if (v5)
    dispatch_release(v5);
  if (v4)
    _Block_release(v4);
}

void sub_1B3CF5E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(BOOL)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void logs::QMICommandDriver::collectLog_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  const void **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  NSObject *v19;
  void *v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  void *v23;
  dispatch_object_t object;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  _QWORD aBlock[5];

  v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 72), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v30 = v12;
  v31 = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v30);
  v13 = (const void **)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1) != (_QWORD)v31)
  {
    while (*((_BYTE *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v31)
        goto LABEL_16;
    }
  }
  if (v13 == (const void **)v31)
  {
LABEL_16:
    v15 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::LogCollectionType>(&v30);
  }
  else
  {
    if (!v14)
      __cxa_bad_cast();
    v15 = v14 + 9;
  }
  *v15 = *(_DWORD *)(a1 + 208);
  v25 = a1 + 176;
  v26 = QMIServiceMsg::create();
  v27 = 25000;
  v28 = 0;
  v29 = 0;
  v16 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1174405120;
  v21[2] = ___ZN4logs16QMICommandDriver15collectLog_syncEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2;
  v21[3] = &__block_descriptor_tmp_32;
  v21[4] = a1;
  v21[5] = v5;
  v22 = v7;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = *(void **)a2;
  if (*(_QWORD *)a2)
    v18 = _Block_copy(v18);
  v19 = *(NSObject **)(a2 + 8);
  v23 = v18;
  object = v19;
  if (v19)
    dispatch_retain(v19);
  aBlock[0] = v16;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D5650;
  aBlock[4] = v21;
  v20 = _Block_copy(aBlock);
  v29 = v20;
  if (v26)
  {
    qmi::Client::send();
    v20 = v29;
  }
  if (v20)
    _Block_release(v20);
  if (object)
    dispatch_release(object);
  if (v23)
    _Block_release(v23);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v30);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1B3CF609C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__shared_weak_count *v23;
  uint64_t v24;

  dispatch::callback<void({block_pointer})(BOOL)>::~callback(v24);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_1B3CF60D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  std::__shared_weak_count *v15;
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_1B3CF60F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(*(_QWORD *)(result + 32) + 208);
  return result;
}

void ___ZN4logs16QMICommandDriver23setCollectionState_syncEbN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_3(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  int v7;
  const void *v8;
  void *v9;
  BOOL v10;
  NSObject *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD v15[4];
  void *aBlock;
  BOOL v17;

  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (a1[4])
      {
        v7 = *(_DWORD *)(a2 + 4);
        v8 = (const void *)a1[6];
        if (v8)
          v9 = _Block_copy(v8);
        else
          v9 = 0;
        v10 = v7 == 0;
        v11 = a1[7];
        v15[0] = MEMORY[0x1E0C809B0];
        v15[1] = 1174405120;
        v15[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v15[3] = &__block_descriptor_tmp_39;
        if (v9)
          v12 = _Block_copy(v9);
        else
          v12 = 0;
        aBlock = v12;
        v17 = v10;
        dispatch_async(v11, v15);
        if (aBlock)
          _Block_release(aBlock);
        if (v9)
          _Block_release(v9);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void __copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[6];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[7];
  a1[6] = v7;
  a1[7] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE48c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN4logs16QMICommandDriver15collectLog_syncEN8dispatch8callbackIU13block_pointerFvbEEE_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  logs::QMICommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD block[4];
  void *aBlock;
  BOOL v17;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (logs::QMICommandDriver *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *(_DWORD *)(a2 + 4);
        v9 = (const void *)a1[7];
        if (v9)
          v10 = _Block_copy(v9);
        else
          v10 = 0;
        v11 = a1[8];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 1174405120;
        block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        block[3] = &__block_descriptor_tmp_39;
        if (v10)
          v12 = _Block_copy(v10);
        else
          v12 = 0;
        aBlock = v12;
        v17 = v8 == 0;
        dispatch_async(v11, block);
        if (aBlock)
          _Block_release(aBlock);
        if (v10)
          _Block_release(v10);
        if (!v8)
          logs::QMICommandDriver::startLogCollectionTimer_sync(v5);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3CF6450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void logs::QMICommandDriver::startLogCollectionTimer_sync(logs::QMICommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  dispatch_time_t v13;
  NSObject *v14;
  int v15;
  _QWORD handler[6];
  std::__shared_weak_count *v17;
  uint8_t buf[4];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 53))
  {
    *((_QWORD *)this + 27) = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 11));
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    v10 = *((_QWORD *)this + 27);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN4logs16QMICommandDriver28startLogCollectionTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_33;
    handler[4] = this;
    handler[5] = v3;
    v17 = v5;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    dispatch_source_set_event_handler(v10, handler);
    v12 = *((_QWORD *)this + 27);
    v13 = dispatch_time(0, 1000000000 * *((unsigned int *)this + 53));
    dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    v14 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *((_DWORD *)this + 53);
      *(_DWORD *)buf = 67109120;
      v19 = v15;
      _os_log_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_DEFAULT, "#I Log collection timer started with timeout %u sec", buf, 8u);
    }
    dispatch_activate(*((dispatch_object_t *)this + 27));
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN4logs13CommandDriverEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvbEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZN4logs16QMICommandDriver28startLogCollectionTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  NSObject **v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (NSObject **)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = v3[5];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "Log collection timer expired !!", buf, 2u);
        }
        qmi::Client::stop((qmi::Client *)(v3 + 22));
        v7 = v3[27];
        if (v7)
        {
          dispatch_source_cancel(v7);
          dispatch_release(v3[27]);
          v3[27] = 0;
          v8 = v3[5];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I Log collection timer stopped", buf, 2u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3CF6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(logs::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)logs::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66D5428;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<logs::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66D5428;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<logs::QMICommandDriver *,std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver *)#1},std::allocator<logs::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<logs::QMICommandDriver *,std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver *)#1},std::allocator<logs::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver*)#1}::operator() const(logs::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<logs::QMICommandDriver *,std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver *)#1},std::allocator<logs::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4logs13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4logs13CommandDriverEE15make_shared_ptrINS1_16QMICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4logs13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4logs13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<logs::QMICommandDriver> ctu::SharedSynchronizable<logs::CommandDriver>::make_shared_ptr<logs::QMICommandDriver>(logs::QMICommandDriver*)::{lambda(logs::QMICommandDriver*)#1}::operator() const(logs::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = *(void ***)(a1 + 24);
  if (v1)
  {
    v2 = *v1;
    if (*v1)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001B3DCBEB4)
    return a1 + 24;
  if (((v3 & 0x80000001B3DCBEB4 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B3DCBEB4))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B3DCBEB4 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm17LogCollectionData10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CF6BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CF6BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CF6BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<logs::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4logs13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66D5548;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4logs13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4logs13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN4logs13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::LogCollectionType>(_QWORD *a1)
{
  _WORD *v2;
  _WORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *result;

  v2 = operator new(0x10uLL);
  v3 = v2;
  v2[4] = 1;
  *(_QWORD *)v2 = off_1E66D55A0;
  v5 = (char *)a1[2];
  v4 = a1[3];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = v2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (char *)a1[1];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v3;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v3;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  result = (char *)v3 + 9;
  a1[2] = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionType>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D55A0;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LogCollectionState>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D55F0;
  return result;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B3CF70E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<qmi::ResponseBase const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  void *__p[3];

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::ResponseBase::ResponseBase(a2, __p[0]);
    if (__p[0])
      operator delete(__p[0]);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::MessageBase::MessageBase();
  }
}

void sub_1B3CF718C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void awd::QMIAwdCommandDriver::sendEnableMetricSubmission(_QWORD *a1, uint64_t *a2, char a3, const void **a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  unint64_t *p_shared_owners;
  NSObject *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint8_t v22[16];

  v5 = *a2;
  if (*a2)
  {
    v7 = a2[1];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if (*a4)
    {
      v10 = _Block_copy(*a4);
      v11 = (std::__shared_weak_count *)a1[10];
      if (!v11)
LABEL_19:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v10 = 0;
      v11 = (std::__shared_weak_count *)a1[10];
      if (!v11)
        goto LABEL_19;
    }
    v13 = a1[9];
    v14 = std::__shared_weak_count::lock(v11);
    if (!v14)
      goto LABEL_19;
    v15 = v14;
    v16 = operator new(0x28uLL);
    *v16 = v5;
    v16[1] = v7;
    *((_BYTE *)v16 + 16) = a3;
    v16[3] = v10;
    v16[4] = a1;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v18 = a1[11];
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = operator new(0x18uLL);
    *v20 = v16;
    v20[1] = v13;
    v20[2] = v15;
    dispatch_async_f(v18, v20, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v12 = a1[5];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      _os_log_error_impl(&dword_1B3CB3000, v12, OS_LOG_TYPE_ERROR, "AppContext is NULL", v22, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::sendAddConfiguration(_QWORD *a1, _QWORD *a2, char a3, uint64_t a4, const void **a5)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  char *v13;
  char *v14;
  void *v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  char v22;
  void *v23;
  size_t v24;
  char *v25;
  char *v26;
  unint64_t *p_shared_owners;
  NSObject *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  char v36;
  void *__p;
  char *v38;
  char *v39;
  void *aBlock;
  _QWORD *v41;

  if (*a2)
  {
    v7 = a2[1];
    *(_QWORD *)&v35 = *a2;
    *((_QWORD *)&v35 + 1) = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v36 = a3;
    v38 = 0;
    v39 = 0;
    __p = 0;
    v11 = *(const void **)a4;
    v10 = *(_QWORD *)(a4 + 8);
    v12 = v10 - *(_QWORD *)a4;
    if (v10 != *(_QWORD *)a4)
    {
      if ((v12 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v13 = (char *)operator new(v10 - *(_QWORD *)a4);
      v14 = &v13[v12];
      __p = v13;
      v39 = &v13[v12];
      memcpy(v13, v11, v12);
      v38 = v14;
    }
    if (*a5)
    {
      v15 = _Block_copy(*a5);
      aBlock = v15;
      v41 = a1;
      v16 = (std::__shared_weak_count *)a1[10];
      if (!v16)
LABEL_35:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v15 = 0;
      aBlock = 0;
      v41 = a1;
      v16 = (std::__shared_weak_count *)a1[10];
      if (!v16)
        goto LABEL_35;
    }
    v18 = a1[9];
    v19 = std::__shared_weak_count::lock(v16);
    if (!v19)
      goto LABEL_35;
    v20 = v19;
    v21 = operator new(0x40uLL);
    *(_OWORD *)v21 = v35;
    v35 = 0uLL;
    v22 = v36;
    v21[3] = 0;
    *((_BYTE *)v21 + 16) = v22;
    v21[4] = 0;
    v21[5] = 0;
    v23 = __p;
    v24 = v38 - (_BYTE *)__p;
    if (v38 != __p)
    {
      if ((v24 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v25 = (char *)operator new(v38 - (_BYTE *)__p);
      v21[3] = v25;
      v26 = &v25[v24];
      v21[5] = &v25[v24];
      memcpy(v25, v23, v24);
      v21[4] = v26;
    }
    aBlock = 0;
    v21[6] = v15;
    v21[7] = a1;
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    v28 = a1[11];
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
    v30 = operator new(0x18uLL);
    *v30 = v21;
    v30[1] = v18;
    v30[2] = v20;
    dispatch_async_f(v28, v30, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (v31)
    {
      v32 = aBlock;
      if (!aBlock)
        goto LABEL_27;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v32 = aBlock;
      if (!aBlock)
      {
LABEL_27:
        if (__p)
        {
          v38 = (char *)__p;
          operator delete(__p);
        }
        if (*((_QWORD *)&v35 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v35 + 1) + 16))(*((_QWORD *)&v35 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
          }
        }
        return;
      }
    }
    _Block_release(v32);
    goto LABEL_27;
  }
  v17 = a1[5];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v35) = 0;
    _os_log_error_impl(&dword_1B3CB3000, v17, OS_LOG_TYPE_ERROR, "AppContext is NULL", (uint8_t *)&v35, 2u);
  }
}

void sub_1B3CF75B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  void **v14;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  v16 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v13 + 32) = v16;
    operator delete(v16);
  }
  v17 = *(std::__shared_weak_count **)(v13 + 8);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      __clang_call_terminate(a1);
    }
  }
  __clang_call_terminate(a1);
}

void awd::QMIAwdCommandDriver::sendClearConfiguration(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  NSObject *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint8_t v20[16];

  v4 = *a2;
  if (*a2)
  {
    v5 = a2[1];
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    if (*a3)
    {
      v8 = _Block_copy(*a3);
      v9 = (std::__shared_weak_count *)a1[10];
      if (!v9)
LABEL_19:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v8 = 0;
      v9 = (std::__shared_weak_count *)a1[10];
      if (!v9)
        goto LABEL_19;
    }
    v11 = a1[9];
    v12 = std::__shared_weak_count::lock(v9);
    if (!v12)
      goto LABEL_19;
    v13 = v12;
    v14 = operator new(0x20uLL);
    *v14 = v4;
    v14[1] = v5;
    v14[2] = v8;
    v14[3] = a1;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v16 = a1[11];
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v16, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v10 = a1[5];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v20 = 0;
      _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "AppContext is NULL", v20, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::sendUpdateProperties(_QWORD *a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  NSObject *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint8_t v20[16];

  v4 = *a2;
  if (*a2)
  {
    v5 = a2[1];
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    if (*a3)
    {
      v8 = _Block_copy(*a3);
      v9 = (std::__shared_weak_count *)a1[10];
      if (!v9)
LABEL_19:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v8 = 0;
      v9 = (std::__shared_weak_count *)a1[10];
      if (!v9)
        goto LABEL_19;
    }
    v11 = a1[9];
    v12 = std::__shared_weak_count::lock(v9);
    if (!v12)
      goto LABEL_19;
    v13 = v12;
    v14 = operator new(0x20uLL);
    *v14 = v4;
    v14[1] = v5;
    v14[2] = v8;
    v14[3] = a1;
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    v16 = a1[11];
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v16, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v10 = a1[5];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v20 = 0;
      _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "AppContext is NULL", v20, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::sendQueriableMetric(_QWORD *a1, uint64_t *a2, uint64_t a3, int *a4, const void **a5)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_owners;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8_t v24[16];

  v6 = *a2;
  if (*a2)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v8 = *a4;
    v9 = a2[1];
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (*a5)
    {
      v12 = _Block_copy(*a5);
      v13 = (std::__shared_weak_count *)a1[10];
      if (!v13)
LABEL_19:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v12 = 0;
      v13 = (std::__shared_weak_count *)a1[10];
      if (!v13)
        goto LABEL_19;
    }
    v15 = a1[9];
    v16 = std::__shared_weak_count::lock(v13);
    if (!v16)
      goto LABEL_19;
    v17 = v16;
    v18 = operator new(0x30uLL);
    *v18 = v6;
    v18[1] = v9;
    v18[2] = v7;
    *((_DWORD *)v18 + 6) = v8;
    v18[4] = v12;
    v18[5] = a1;
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    v20 = a1[11];
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v22 = operator new(0x18uLL);
    *v22 = v18;
    v22[1] = v15;
    v22[2] = v17;
    dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    v14 = a1[5];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v24 = 0;
      _os_log_error_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_ERROR, "AppContext is NULL", v24, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::sendQueriableMetric(_QWORD *a1, uint64_t *a2, uint64_t a3, const void **a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  unint64_t *p_shared_owners;
  NSObject *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint8_t v22[16];

  v5 = *a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(a3 + 8);
    v7 = a2[1];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if (*a4)
    {
      v10 = _Block_copy(*a4);
      v11 = (std::__shared_weak_count *)a1[10];
      if (!v11)
LABEL_19:
        std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    else
    {
      v10 = 0;
      v11 = (std::__shared_weak_count *)a1[10];
      if (!v11)
        goto LABEL_19;
    }
    v13 = a1[9];
    v14 = std::__shared_weak_count::lock(v11);
    if (!v14)
      goto LABEL_19;
    v15 = v14;
    v16 = operator new(0x30uLL);
    *v16 = v5;
    v16[1] = v7;
    v16[2] = v6;
    *((_DWORD *)v16 + 6) = 0;
    v16[4] = v10;
    v16[5] = a1;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    v18 = a1[11];
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = operator new(0x18uLL);
    *v20 = v16;
    v20[1] = v13;
    v20[2] = v15;
    dispatch_async_f(v18, v20, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v12 = a1[5];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v22 = 0;
      _os_log_error_impl(&dword_1B3CB3000, v12, OS_LOG_TYPE_ERROR, "AppContext is NULL", v22, 2u);
    }
  }
}

void awd::QMIAwdCommandDriver::init(awd::QMIAwdCommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::init(void)::$_0>(awd::QMIAwdCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void awd::QMIAwdCommandDriver::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xB0uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v20[0] = v11;
  v20[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  awd::QMIAwdCommandDriver::QMIAwdCommandDriver((uint64_t)v6, (uint64_t)&v21, (uint64_t)v20);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<awd::QMIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIAwdCommandDriver,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v22;
  if (!v22)
    goto LABEL_16;
  v18 = (unint64_t *)&v22->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    awd::QMIAwdCommandDriver::init((awd::QMIAwdCommandDriver *)*a3);
  }
  else
  {
LABEL_16:
    awd::QMIAwdCommandDriver::init((awd::QMIAwdCommandDriver *)*a3);
  }
}

void sub_1B3CF7E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t awd::QMIAwdCommandDriver::QMIAwdCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  awd::AwdCommandDriver::AwdCommandDriver();
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_1E66D5680;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_1B3CF7FE8(_Unwind_Exception *a1)
{
  awd::AwdCommandDriver *v1;
  qmi::Client *v2;
  qmi::Client *v3;

  v3 = v2;
  qmi::Client::~Client(v3);
  awd::AwdCommandDriver::~AwdCommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_1B3CF8008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void awd::QMIAwdCommandDriver::~QMIAwdCommandDriver(awd::QMIAwdCommandDriver *this)
{
  *(_QWORD *)this = off_1E66D5680;
  qmi::Client::~Client((awd::QMIAwdCommandDriver *)((char *)this + 144));
  awd::AwdCommandDriver::~AwdCommandDriver(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E66D5680;
  qmi::Client::~Client((awd::QMIAwdCommandDriver *)((char *)this + 144));
  awd::AwdCommandDriver::~AwdCommandDriver(this);
  operator delete(v2);
}

uint64_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(awd::AwdCommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)awd::AwdCommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  __int128 v5;
  __darwin_time_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  char *v12;
  const void **v13;
  char *v14;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v54;
  void *v55;
  _QWORD v56[2];
  uint64_t (*v57)(uint64_t, uint64_t);
  void *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  __darwin_time_t v61;
  char v62;
  timeval v63;
  __int128 v64;
  __int128 v65;
  _QWORD aBlock[5];
  __int128 buf;
  void (*v68)(uint64_t, uint64_t);
  void *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  const void *v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)*a1;
  v2 = *(_QWORD *)(*a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)v1 + 16))
      v4 = "enabled";
    else
      v4 = "disabled";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting metric submission to be %s", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65 = v5;
  v64 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v64);
  v63.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v63.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v63, 0);
  v6 = 1000 * v63.tv_sec + v63.tv_usec / 1000;
  v7 = MEMORY[0x1E0C809B0];
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 1174405120;
  v57 = ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  v58 = &__block_descriptor_tmp_1;
  v59 = *v1;
  v8 = (std::__shared_weak_count *)v1[1];
  v60 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v62 = *((_BYTE *)v1 + 16);
  v61 = v6;
  v11 = (char *)*((_QWORD *)&v64 + 1);
  v12 = (char *)v65;
  v13 = (const void **)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1) != (_QWORD)v65)
  {
    v13 = (const void **)*((_QWORD *)&v64 + 1);
    while (*((_BYTE *)*v13 + 8) != 68)
    {
      if (++v13 == (const void **)v65)
        goto LABEL_17;
    }
  }
  if (v13 == (const void **)v65)
  {
LABEL_17:
    v16 = operator new(0x20uLL);
    v17 = v16;
    v16[8] = 68;
    *(_QWORD *)v16 = off_1E66D5798;
    *((_DWORD *)v16 + 4) = 0;
    v15 = v16 + 16;
    v16[20] = 0;
    *((_QWORD *)v16 + 3) = 0;
    if ((unint64_t)v12 < *((_QWORD *)&v65 + 1))
    {
      *(_QWORD *)v12 = v16;
      *(_QWORD *)&v65 = v12 + 8;
      goto LABEL_31;
    }
    v18 = v12 - v11;
    v19 = (v12 - v11) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v65 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v65 + 1) - (_QWORD)v11) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v26 = (uint64_t)(v24 + 1);
      if (v11 == v12)
      {
LABEL_28:
        *((_QWORD *)&v64 + 1) = v24;
        *(_QWORD *)&v65 = v26;
        *((_QWORD *)&v65 + 1) = v25;
        if (!v11)
        {
LABEL_30:
          *(_QWORD *)&v65 = v26;
          goto LABEL_31;
        }
LABEL_29:
        operator delete(v11);
        goto LABEL_30;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v17;
      v26 = 8 * v19 + 8;
      if (v11 == v12)
        goto LABEL_28;
    }
    if ((unint64_t)(v18 - 8) < 0x58)
      goto LABEL_80;
    if ((unint64_t)(v11 - v23) < 0x20)
      goto LABEL_80;
    v45 = ((unint64_t)(v18 - 8) >> 3) + 1;
    v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
    v47 = &v12[-v46];
    v24 = (_QWORD *)((char *)v24 - v46);
    v48 = &v23[8 * v19 - 16];
    v49 = v12 - 16;
    v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = *(_OWORD *)v49;
      *(v48 - 1) = *((_OWORD *)v49 - 1);
      *v48 = v51;
      v48 -= 2;
      v49 -= 32;
      v50 -= 4;
    }
    while (v50);
    v12 = v47;
    if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_80:
      do
      {
        v52 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v24 = v52;
      }
      while (v12 != v11);
    }
    v11 = (char *)*((_QWORD *)&v64 + 1);
    *((_QWORD *)&v64 + 1) = v24;
    *(_QWORD *)&v65 = v26;
    *((_QWORD *)&v65 + 1) = v25;
    if (!v11)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (!v14)
    __cxa_bad_cast();
  v15 = v14 + 16;
LABEL_31:
  v57((uint64_t)v56, (uint64_t)v15);
  v54 = QMIServiceMsg::create();
  *(_QWORD *)&buf = v7;
  *((_QWORD *)&buf + 1) = 1174405120;
  v68 = ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_5;
  v69 = &__block_descriptor_tmp_9_0;
  v70 = v2;
  v74 = *((_BYTE *)v1 + 16);
  v71 = *v1;
  v27 = (std::__shared_weak_count *)v1[1];
  v72 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (void *)v1[3];
  if (v30)
    v30 = _Block_copy(v30);
  v73 = v30;
  aBlock[0] = v7;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D57C8;
  aBlock[4] = &buf;
  v31 = _Block_copy(aBlock);
  v55 = v31;
  if (v54)
  {
    qmi::Client::send();
    v31 = v55;
  }
  if (v31)
    _Block_release(v31);
  if (v73)
    _Block_release(v73);
  v32 = v72;
  if (v72)
  {
    v33 = (unint64_t *)&v72->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v60;
  if (v60)
  {
    v36 = (unint64_t *)&v60->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v64);
      v38 = (const void *)v1[3];
      if (!v38)
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v64);
  v38 = (const void *)v1[3];
  if (v38)
LABEL_52:
    _Block_release(v38);
LABEL_53:
  v39 = (std::__shared_weak_count *)v1[1];
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v1);
  v42 = (std::__shared_weak_count *)a1[2];
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  operator delete(a1);
}

void sub_1B3CF86EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 48);
  return result;
}

uint64_t __copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_5(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  void *v7;
  void *aBlock;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "enabled";
    v6 = "error";
    if (!*(_BYTE *)(a1 + 64))
      v5 = "disabled";
    if (!v3)
      v6 = "success";
    *(_DWORD *)buf = 136315394;
    v10 = v5;
    v11 = 2080;
    v12 = v6;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Metric submission %s %s", buf, 0x16u);
  }
  v7 = *(void **)(a1 + 56);
  if (v7)
    v7 = _Block_copy(v7);
  aBlock = v7;
  awd::AppContext::operator()();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3CF8A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricIndicationExt>::getSize()
{
  return 16;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricIndicationExt>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v3 + 7) = *(_BYTE *)(result + 20);
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(result + 24);
  *a2 = v3 + 16;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 13;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricIndicationExt>::clone(__n128 *a1)
{
  __n128 *v2;
  __n128 result;

  v2 = (__n128 *)operator new(0x20uLL);
  v2->n128_u8[8] = a1->n128_u8[8];
  v2->n128_u64[0] = (unint64_t)off_1E66D5798;
  result = a1[1];
  v2[1] = result;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CF8C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CF8C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CF8CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  int AppID;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t *v21;
  void *v22;
  NSObject *v23;
  const void *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  const void **v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t block;
  uint64_t v77;
  void *v78;
  void *v79;
  uint64_t *v80;
  uint64_t v81;
  awd::AppContext *v82;
  std::__shared_weak_count *v83;
  void *aBlock;
  _QWORD v85[5];
  dispatch_group_t group;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  void *v91;
  void *v92[2];
  __int128 v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  char v97;
  uint8_t buf[8];
  _BYTE v99[24];
  awd::AppContext *v100;
  std::__shared_weak_count *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 56);
  v94 = 0;
  v95 = &v94;
  v96 = 0x2000000000;
  v97 = 1;
  v75 = *(unsigned __int8 *)(v1 + 16);
  if (v75 < 3)
  {
    v4 = *(_QWORD *)(v1 + 24);
    v3 = *(_QWORD *)(v1 + 32);
    v5 = v3 - v4;
    if (v3 != v4)
    {
      v70 = v2;
      v6 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        AppID = awd::AppContext::getAppID(*(awd::AppContext **)v1);
        v8 = awd::asString();
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = AppID;
        *(_WORD *)v99 = 2080;
        *(_QWORD *)&v99[2] = v8;
        *(_WORD *)&v99[10] = 2048;
        *(_QWORD *)&v99[12] = v5;
        _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Requesting to add configuration appId: %d, type: %s, payload size: %lu", buf, 0x1Cu);
      }
      v9 = dispatch_group_create();
      v10 = v9;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v10);
      }
      v74 = *(_QWORD *)(v1 + 32) - *(_QWORD *)(v1 + 24);
      v11 = MEMORY[0x1E0C809B0];
      if ((unint64_t)(v74 + 1499) < 0x5DC)
      {
LABEL_8:
        block = v11;
        v77 = 1174405120;
        v78 = ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_15;
        v79 = &unk_1E66D5858;
        v80 = &v94;
        v81 = v70;
        v82 = *(awd::AppContext **)v1;
        v12 = *(std::__shared_weak_count **)(v1 + 8);
        v83 = v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        v15 = *(void **)(v1 + 48);
        if (v15)
          v15 = _Block_copy(v15);
        aBlock = v15;
        dispatch_group_notify(v10, *(dispatch_queue_t *)(v70 + 88), &block);
        if (aBlock)
          _Block_release(aBlock);
        v16 = v83;
        if (v83)
        {
          v17 = (unint64_t *)&v83->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        if (v10)
        {
          dispatch_group_leave(v10);
          dispatch_release(v10);
          dispatch_release(v10);
        }
        goto LABEL_33;
      }
      LODWORD(v32) = 0;
      v33 = (v74 + 1499) / 0x5DCuLL;
      v72 = v10;
      v73 = v1;
      while (1)
      {
        *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v92 = v35;
        v93 = v35;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v92);
        v36 = *(_QWORD *)(v1 + 24);
        v37 = v36 + (1500 * v32);
        v38 = v36 + v74;
        if (v38 >= v37 + 1500)
          v38 = v37 + 1500;
        *(_QWORD *)buf = v11;
        *(_QWORD *)v99 = 1174405120;
        *(_QWORD *)&v99[8] = ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
        *(_QWORD *)&v99[16] = &__block_descriptor_tmp_12_0;
        v100 = *(awd::AppContext **)v1;
        v39 = *(std::__shared_weak_count **)(v1 + 8);
        v101 = v39;
        if (v39)
        {
          v40 = (unint64_t *)&v39->__shared_owners_;
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 1, v40));
        }
        v105 = v75;
        v106 = v32;
        v42 = v33;
        v102 = v33;
        v103 = v37;
        v104 = v38;
        v44 = (char *)v92[1];
        v43 = (char *)v93;
        v45 = (const void **)v92[1];
        if (v92[1] != (void *)v93)
        {
          v45 = (const void **)v92[1];
          while (*((_BYTE *)*v45 + 8) != 64)
          {
            if (++v45 == (const void **)v93)
              goto LABEL_64;
          }
        }
        if (v45 != (const void **)v93)
        {
          if (!v46)
            __cxa_bad_cast();
          v47 = v46 + 16;
          goto LABEL_87;
        }
LABEL_64:
        v48 = (char *)operator new(0x38uLL);
        v49 = v48;
        v48[8] = 64;
        *(_QWORD *)v48 = &off_1E66D58B0;
        *((_QWORD *)v48 + 2) = 0;
        v47 = v48 + 16;
        *((_QWORD *)v48 + 5) = 0;
        *((_QWORD *)v48 + 6) = 0;
        *((_QWORD *)v48 + 4) = 0;
        *(_QWORD *)(v48 + 22) = 0;
        if ((unint64_t)v43 >= *((_QWORD *)&v93 + 1))
        {
          v51 = v43 - v44;
          v52 = (v43 - v44) >> 3;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v54 = *((_QWORD *)&v93 + 1) - (_QWORD)v44;
          if ((uint64_t)(*((_QWORD *)&v93 + 1) - (_QWORD)v44) >> 2 > v53)
            v53 = v54 >> 2;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
            v55 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v55 = v53;
          if (v55)
          {
            if (v55 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v56 = operator new(8 * v55);
            v57 = &v56[8 * v52];
            *v57 = v49;
            v50 = (uint64_t)(v57 + 1);
            if (v44 != v43)
            {
LABEL_75:
              if ((unint64_t)(v51 - 8) < 0x58)
                goto LABEL_109;
              if ((unint64_t)(v44 - v56) < 0x20)
                goto LABEL_109;
              v58 = ((unint64_t)(v51 - 8) >> 3) + 1;
              v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
              v60 = &v43[-v59];
              v57 = (_QWORD *)((char *)v57 - v59);
              v61 = &v56[8 * v52 - 16];
              v62 = v43 - 16;
              v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v64 = *(_OWORD *)v62;
                *(v61 - 1) = *((_OWORD *)v62 - 1);
                *v61 = v64;
                v61 -= 2;
                v62 -= 32;
                v63 -= 4;
              }
              while (v63);
              v43 = v60;
              if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_109:
                do
                {
                  v65 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *--v57 = v65;
                }
                while (v43 != v44);
              }
              v44 = (char *)v92[1];
              v92[1] = v57;
              *(_QWORD *)&v93 = v50;
              *((_QWORD *)&v93 + 1) = &v56[8 * v55];
              if (!v44)
                goto LABEL_86;
LABEL_85:
              operator delete(v44);
              goto LABEL_86;
            }
          }
          else
          {
            v56 = 0;
            v57 = (_QWORD *)(8 * v52);
            *(_QWORD *)(8 * v52) = v49;
            v50 = 8 * v52 + 8;
            if (v44 != v43)
              goto LABEL_75;
          }
          v92[1] = v57;
          *(_QWORD *)&v93 = v50;
          *((_QWORD *)&v93 + 1) = &v56[8 * v55];
          if (v44)
            goto LABEL_85;
        }
        else
        {
          *(_QWORD *)v43 = v48;
          v50 = (uint64_t)(v43 + 8);
        }
LABEL_86:
        *(_QWORD *)&v93 = v50;
        v10 = v72;
LABEL_87:
        (*(void (**)(uint8_t *, char *))&v99[8])(buf, v47);
        v87 = v70 + 144;
        v88 = QMIServiceMsg::create();
        v89 = 25000;
        v90 = 0;
        v91 = 0;
        v11 = MEMORY[0x1E0C809B0];
        v85[0] = MEMORY[0x1E0C809B0];
        v85[1] = 1174405120;
        v85[2] = ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_13;
        v85[3] = &unk_1E66D5820;
        group = v10;
        if (v10)
        {
          dispatch_retain(v10);
          if (group)
            dispatch_group_enter(group);
        }
        v85[4] = &v94;
        block = v11;
        v77 = 0x40000000;
        v78 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v79 = &unk_1E66D58E0;
        v80 = v85;
        v66 = _Block_copy(&block);
        v91 = v66;
        if (v88)
        {
          qmi::Client::send();
          v66 = v91;
        }
        if (v66)
          _Block_release(v66);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        v67 = v101;
        if (v101)
        {
          v68 = (unint64_t *)&v101->__shared_owners_;
          do
            v69 = __ldaxr(v68);
          while (__stlxr(v69 - 1, v68));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v92);
        v32 = (v32 + 1);
        v33 = v42;
        v34 = v42 > v32;
        v1 = v73;
        if (!v34)
          goto LABEL_8;
      }
    }
    v21 = &v94;
LABEL_27:
    v23 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B3CB3000, v23, OS_LOG_TYPE_DEFAULT, "#E Empty payload", buf, 2u);
      v21 = v95;
    }
    *((_BYTE *)v21 + 24) = 0;
    v22 = *(void **)(v1 + 48);
    if (!v22)
      goto LABEL_31;
    goto LABEL_30;
  }
  v19 = v2;
  v20 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v75;
    _os_log_error_impl(&dword_1B3CB3000, v20, OS_LOG_TYPE_ERROR, "Illegal payload type: %hhu", buf, 8u);
    v21 = v95;
    *((_BYTE *)v95 + 24) = 0;
    v2 = v19;
    if (*(_QWORD *)(v1 + 32) == *(_QWORD *)(v1 + 24))
      goto LABEL_27;
  }
  else
  {
    v21 = &v94;
    v97 = 0;
    v2 = v19;
    if (*(_QWORD *)(v1 + 32) == *(_QWORD *)(v1 + 24))
      goto LABEL_27;
  }
  v22 = *(void **)(v1 + 48);
  if (v22)
LABEL_30:
    v22 = _Block_copy(v22);
LABEL_31:
  *(_QWORD *)buf = v22;
  awd::AppContext::operator()();
  if (*(_QWORD *)buf)
    _Block_release(*(const void **)buf);
LABEL_33:
  _Block_object_dispose(&v94, 8);
  v24 = *(const void **)(v1 + 48);
  if (v24)
    _Block_release(v24);
  v25 = *(void **)(v1 + 24);
  if (v25)
  {
    *(_QWORD *)(v1 + 32) = v25;
    operator delete(v25);
  }
  v26 = *(std::__shared_weak_count **)(v1 + 8);
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete((void *)v1);
  v29 = (std::__shared_weak_count *)a1[2];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(a1);
}

void sub_1B3CF94EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, dispatch_group_t group, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,dispatch_group_t object,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *aBlock,char a39)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_13(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 0;
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver20sendAddConfigurationENSt3__110shared_ptrINS_10AppContextEEENS_11PayloadTypeERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_15(_QWORD *a1)
{
  NSObject *v2;
  const char *v3;
  void *v4;
  void *aBlock;
  uint8_t buf[4];
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(a1[5] + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
      v3 = "success";
    else
      v3 = "error";
    *(_DWORD *)buf = 136315138;
    v7 = v3;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Add configuration %s", buf, 0xCu);
  }
  v4 = (void *)a1[8];
  if (v4)
    v4 = _Block_copy(v4);
  aBlock = v4;
  awd::AppContext::operator()();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3CF985C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_48c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[8];
  if (result)
    result = _Block_copy(result);
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66D58B0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66D58B0;
  v2 = (void *)__p[4];
  if (v2)
  {
    __p[5] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32) + 19;
}

void *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::write(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  __int16 v6;
  void *result;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = *a2 + 3;
  *a2 += 3;
  *(_DWORD *)(v5 + 3) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(v5 + 7) = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v5 + 11) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v5 + 15) = *(_BYTE *)(a1 + 28);
  *(_BYTE *)(v5 + 16) = *(_BYTE *)(a1 + 29);
  *(_WORD *)(v5 + 17) = *(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 32);
  result = memcpy((void *)(v5 + 19), *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
  v8 = v5 + 19 + *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  *a2 = v8;
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::AddConfig>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  size_t v6;
  char *v7;
  char *v8;

  v2 = (char *)operator new(0x38uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E66D58B0;
  *((_QWORD *)v2 + 2) = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 22);
  *((_QWORD *)v2 + 4) = 0;
  *(_QWORD *)(v2 + 22) = v3;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  v5 = *(_BYTE **)(a1 + 32);
  v4 = *(_BYTE **)(a1 + 40);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((v6 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *((_QWORD *)v2 + 4) = v7;
    v8 = &v7[v6];
    *((_QWORD *)v2 + 6) = &v7[v6];
    memcpy(v7, v5, v6);
    *((_QWORD *)v2 + 5) = v8;
  }
  return v2;
}

void sub_1B3CF9B28(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_22;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_22:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v7[1] = &v9[v12];
    return result;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v7[1] = &v9[a3 - v15];
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CF9D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CF9D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CF9D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  int AppID;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  const void **v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v53;
  void *v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, char *);
  void *v57;
  awd::AppContext *v58;
  std::__shared_weak_count *v59;
  __int128 v60;
  __int128 v61;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  void *v66;
  uint64_t v67;
  awd::AppContext *v68;
  std::__shared_weak_count *v69;
  void *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 24);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    AppID = awd::AppContext::getAppID(*(awd::AppContext **)v1);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = AppID;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting to clear configuration: appId=%d", buf, 8u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60 = v5;
  v61 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v60);
  v6 = MEMORY[0x1E0C809B0];
  v55[0] = MEMORY[0x1E0C809B0];
  v55[1] = 1174405120;
  v56 = (uint64_t (*)(uint64_t, char *))___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  v57 = &__block_descriptor_tmp_20_1;
  v58 = *(awd::AppContext **)v1;
  v7 = *(std::__shared_weak_count **)(v1 + 8);
  v59 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)*((_QWORD *)&v60 + 1);
  v11 = (char *)v61;
  v12 = (const void **)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1) != (_QWORD)v61)
  {
    v12 = (const void **)*((_QWORD *)&v60 + 1);
    while (*((_BYTE *)*v12 + 8) != 65)
    {
      if (++v12 == (const void **)v61)
        goto LABEL_14;
    }
  }
  if (v12 == (const void **)v61)
  {
LABEL_14:
    v15 = operator new(0x18uLL);
    v16 = v15;
    v15[8] = 65;
    *(_QWORD *)v15 = off_1E66D5988;
    *((_DWORD *)v15 + 3) = 0;
    v14 = v15 + 12;
    *((_DWORD *)v15 + 4) = 0;
    if ((unint64_t)v11 < *((_QWORD *)&v61 + 1))
    {
      *(_QWORD *)v11 = v15;
      *(_QWORD *)&v61 = v11 + 8;
      goto LABEL_28;
    }
    v17 = v11 - v10;
    v18 = (v11 - v10) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = *((_QWORD *)&v61 + 1) - (_QWORD)v10;
    if ((uint64_t)(*((_QWORD *)&v61 + 1) - (_QWORD)v10) >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v16;
      v25 = (uint64_t)(v23 + 1);
      if (v10 == v11)
      {
LABEL_25:
        *((_QWORD *)&v60 + 1) = v23;
        *(_QWORD *)&v61 = v25;
        *((_QWORD *)&v61 + 1) = v24;
        if (!v10)
        {
LABEL_27:
          *(_QWORD *)&v61 = v25;
          goto LABEL_28;
        }
LABEL_26:
        operator delete(v10);
        goto LABEL_27;
      }
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      v24 = 0;
      *(_QWORD *)(8 * v18) = v16;
      v25 = 8 * v18 + 8;
      if (v10 == v11)
        goto LABEL_25;
    }
    if ((unint64_t)(v17 - 8) < 0x58)
      goto LABEL_77;
    if ((unint64_t)(v10 - v22) < 0x20)
      goto LABEL_77;
    v44 = ((unint64_t)(v17 - 8) >> 3) + 1;
    v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
    v46 = &v11[-v45];
    v23 = (_QWORD *)((char *)v23 - v45);
    v47 = &v22[8 * v18 - 16];
    v48 = v11 - 16;
    v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v50 = *(_OWORD *)v48;
      *(v47 - 1) = *((_OWORD *)v48 - 1);
      *v47 = v50;
      v47 -= 2;
      v48 -= 32;
      v49 -= 4;
    }
    while (v49);
    v11 = v46;
    if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        v51 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v23 = v51;
      }
      while (v11 != v10);
    }
    v10 = (char *)*((_QWORD *)&v60 + 1);
    *((_QWORD *)&v60 + 1) = v23;
    *(_QWORD *)&v61 = v25;
    *((_QWORD *)&v61 + 1) = v24;
    if (!v10)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (!v13)
    __cxa_bad_cast();
  v14 = v13 + 12;
LABEL_28:
  v56((uint64_t)v55, v14);
  v53 = QMIServiceMsg::create();
  *(_QWORD *)buf = v6;
  v64 = 1174405120;
  v65 = ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_21;
  v66 = &__block_descriptor_tmp_22;
  v67 = v2;
  v68 = *(awd::AppContext **)v1;
  v26 = *(std::__shared_weak_count **)(v1 + 8);
  v69 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *(void **)(v1 + 16);
  if (v29)
    v29 = _Block_copy(v29);
  v70 = v29;
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D58E0;
  aBlock[4] = buf;
  v30 = _Block_copy(aBlock);
  v54 = v30;
  if (v53)
  {
    qmi::Client::send();
    v30 = v54;
  }
  if (v30)
    _Block_release(v30);
  if (v70)
    _Block_release(v70);
  v31 = v69;
  if (v69)
  {
    v32 = (unint64_t *)&v69->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v59;
  if (v59)
  {
    v35 = (unint64_t *)&v59->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v60);
      v37 = *(const void **)(v1 + 16);
      if (!v37)
        goto LABEL_50;
      goto LABEL_49;
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v60);
  v37 = *(const void **)(v1 + 16);
  if (v37)
LABEL_49:
    _Block_release(v37);
LABEL_50:
  v38 = *(std::__shared_weak_count **)(v1 + 8);
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete((void *)v1);
  v41 = (std::__shared_weak_count *)a1[2];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(a1);
}

void sub_1B3CFA2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *a2 = result;
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_21(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  const char *v5;
  void *v6;
  void *aBlock;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "error";
    if (!v3)
      v5 = "success";
    *(_DWORD *)buf = 136315138;
    v9 = v5;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Clear configuration %s", buf, 0xCu);
  }
  v6 = *(void **)(a1 + 56);
  if (v6)
    v6 = _Block_copy(v6);
  aBlock = v6;
  awd::AppContext::operator()();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3CFA574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::DeleteConfig>::getSize()
{
  return 11;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::DeleteConfig>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *a2 = v3 + 11;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 8;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::DeleteConfig>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D5988;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __int128 v4;
  int Properties;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  const void **v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint8_t buf[8];
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  void *v56;
  uint64_t v57;
  awd::AppContext *v58;
  std::__shared_weak_count *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void *v65;
  _QWORD v66[2];
  uint64_t (*v67)(uint64_t, uint64_t);
  void *v68;
  awd::AppContext *v69;
  std::__shared_weak_count *v70;
  __int16 v71;
  char v72;
  void *__p[2];
  __int128 v74;
  _QWORD aBlock[6];

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 24);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEBUG, "#D Requesting to update properties", buf, 2u);
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v4;
  v74 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  Properties = awd::AppContext::getProperties(*(awd::AppContext **)v1);
  v6 = MEMORY[0x1E0C809B0];
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 1174405120;
  v67 = ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  v68 = &__block_descriptor_tmp_24_0;
  v69 = *(awd::AppContext **)v1;
  v7 = *(std::__shared_weak_count **)(v1 + 8);
  v70 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v71 = Properties;
  v72 = BYTE2(Properties);
  v10 = (char *)__p[1];
  v11 = (char *)v74;
  v12 = (const void **)__p[1];
  if (__p[1] != (void *)v74)
  {
    v12 = (const void **)__p[1];
    while (*((_BYTE *)*v12 + 8) != 69)
    {
      if (++v12 == (const void **)v74)
        goto LABEL_14;
    }
  }
  if (v12 == (const void **)v74)
  {
LABEL_14:
    v15 = operator new(0x18uLL);
    v16 = v15;
    v15[8] = 69;
    *(_QWORD *)v15 = off_1E66D5A38;
    *((_DWORD *)v15 + 3) = 0;
    v14 = v15 + 12;
    *((_WORD *)v15 + 8) = 0;
    if ((unint64_t)v11 < *((_QWORD *)&v74 + 1))
    {
      *(_QWORD *)v11 = v15;
      *(_QWORD *)&v74 = v11 + 8;
      goto LABEL_37;
    }
    v17 = v11 - v10;
    v18 = (v11 - v10) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = *((_QWORD *)&v74 + 1) - (_QWORD)v10;
    if ((uint64_t)(*((_QWORD *)&v74 + 1) - (_QWORD)v10) >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v16;
      v25 = (uint64_t)(v23 + 1);
      if (v10 != v11)
      {
LABEL_25:
        if ((unint64_t)(v17 - 8) < 0x58)
          goto LABEL_78;
        if ((unint64_t)(v10 - v22) < 0x20)
          goto LABEL_78;
        v26 = ((unint64_t)(v17 - 8) >> 3) + 1;
        v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = &v11[-v27];
        v23 = (_QWORD *)((char *)v23 - v27);
        v29 = &v22[8 * v18 - 16];
        v30 = v11 - 16;
        v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        v11 = v28;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_78:
          do
          {
            v33 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *--v23 = v33;
          }
          while (v11 != v10);
        }
        v10 = (char *)__p[1];
        __p[1] = v23;
        *(_QWORD *)&v74 = v25;
        *((_QWORD *)&v74 + 1) = v24;
        if (!v10)
          goto LABEL_36;
        goto LABEL_35;
      }
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      v24 = 0;
      *(_QWORD *)(8 * v18) = v16;
      v25 = 8 * v18 + 8;
      if (v10 != v11)
        goto LABEL_25;
    }
    __p[1] = v23;
    *(_QWORD *)&v74 = v25;
    *((_QWORD *)&v74 + 1) = v24;
    if (!v10)
    {
LABEL_36:
      *(_QWORD *)&v74 = v25;
      goto LABEL_37;
    }
LABEL_35:
    operator delete(v10);
    goto LABEL_36;
  }
  if (!v13)
    __cxa_bad_cast();
  v14 = v13 + 12;
LABEL_37:
  v67((uint64_t)v66, (uint64_t)v14);
  v61 = v2 + 144;
  v62 = QMIServiceMsg::create();
  v63 = 25000;
  v64 = 0;
  v65 = 0;
  *(_QWORD *)buf = v6;
  v54 = 1174405120;
  v55 = ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_25;
  v56 = &__block_descriptor_tmp_26_0;
  v57 = v2;
  v58 = *(awd::AppContext **)v1;
  v34 = *(std::__shared_weak_count **)(v1 + 8);
  v59 = v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  v37 = *(void **)(v1 + 16);
  if (v37)
    v37 = _Block_copy(v37);
  v60 = v37;
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D57C8;
  aBlock[4] = buf;
  v38 = _Block_copy(aBlock);
  v65 = v38;
  if (v62)
  {
    qmi::Client::send();
    v38 = v65;
  }
  if (v38)
    _Block_release(v38);
  if (v60)
    _Block_release(v60);
  v39 = v59;
  if (!v59)
    goto LABEL_52;
  v40 = (unint64_t *)&v59->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    v42 = v70;
    if (!v70)
      goto LABEL_56;
  }
  else
  {
LABEL_52:
    v42 = v70;
    if (!v70)
      goto LABEL_56;
  }
  v43 = (unint64_t *)&v42->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
    v45 = *(const void **)(v1 + 16);
    if (!v45)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_56:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  v45 = *(const void **)(v1 + 16);
  if (v45)
LABEL_57:
    _Block_release(v45);
LABEL_58:
  v46 = *(std::__shared_weak_count **)(v1 + 8);
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  operator delete((void *)v1);
  v49 = (std::__shared_weak_count *)a1[2];
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  operator delete(a1);
}

void sub_1B3CFAB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,char a31)
{
  _QWORD *v31;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  const void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;

  if (aBlock)
    _Block_release(aBlock);
  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  if (a20)
    qmi::Client::send();
  if (a23)
    _Block_release(a23);
  if (a29)
  {
    v35 = (unint64_t *)&a29->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))a29->__on_zero_shared)(a29);
      std::__shared_weak_count::__release_weak(a29);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a31);
  v37 = (const void *)v31[2];
  if (v37)
    _Block_release(v37);
  v38 = (std::__shared_weak_count *)v31[1];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(v31);
  v41 = (std::__shared_weak_count *)__p[2];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 49);
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_25(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  void *v5;
  const char *v6;
  void *aBlock;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(void **)(a1 + 56);
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = "error";
  if (!v3)
    v6 = "success";
  *(_DWORD *)buf = 136315138;
  v9 = v6;
  _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Update properties %s", buf, 0xCu);
  v5 = *(void **)(a1 + 56);
  if (v5)
LABEL_3:
    v5 = _Block_copy(v5);
LABEL_4:
  aBlock = v5;
  awd::AppContext::operator()();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3CFAE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::PIILocationExt>::getSize()
{
  return 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::PIILocationExt>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_BYTE *)(v3 + 7) = *(_BYTE *)(result + 16);
  *(_BYTE *)(v3 + 8) = *(_BYTE *)(result + 17);
  *a2 = v3 + 9;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 6;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::PIILocationExt>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D5A38;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,awd::TriggerInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void **v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[2];
  uint64_t (*v37)(uint64_t, char *);
  void *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  const void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*a1;
  v3 = *(_QWORD *)(*a1 + 40);
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v31 = *((_DWORD *)v2 + 4);
    v32 = *((_DWORD *)v2 + 5);
    v33 = *((_DWORD *)v2 + 6);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v31;
    LOWORD(v48) = 1024;
    *(_DWORD *)((char *)&v48 + 2) = v32;
    HIWORD(v48) = 1024;
    LODWORD(v49) = v33;
    _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Querying metric, component: 0x%x, submissionId: 0x%x, triggerId: 0x%x", buf, 0x14u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44 = v5;
  v45 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v44);
  v6 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v37 = (uint64_t (*)(uint64_t, char *))___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoERKNS_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  v38 = &__block_descriptor_tmp_28;
  v39 = *v2;
  v7 = (std::__shared_weak_count *)v2[1];
  v40 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v41 = *((_DWORD *)v2 + 5);
  v42 = *((_DWORD *)v2 + 4);
  v43 = *((_DWORD *)v2 + 6);
  v10 = (const void **)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1) != (_QWORD)v45)
  {
    while (*((_BYTE *)*v10 + 8) != 66)
    {
      if (++v10 == (const void **)v45)
        goto LABEL_13;
    }
  }
  if (v10 == (const void **)v45)
  {
LABEL_13:
    v12 = qmi::MutableMessageBase::createTLV<awd::tlv::abm::MetricsExt>(&v44);
  }
  else
  {
    if (!v11)
      __cxa_bad_cast();
    v12 = v11 + 12;
  }
  v37((uint64_t)v36, v12);
  v34 = QMIServiceMsg::create();
  *(_QWORD *)buf = v6;
  v48 = 1174405120;
  v49 = ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoERKNS_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_29;
  v50 = &__block_descriptor_tmp_30_0;
  v51 = v3;
  v52 = *v2;
  v13 = (std::__shared_weak_count *)v2[1];
  v53 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (void *)v2[4];
  if (v16)
    v16 = _Block_copy(v16);
  v54 = v16;
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D5B18;
  aBlock[4] = buf;
  v17 = _Block_copy(aBlock);
  v35 = v17;
  if (v34)
  {
    qmi::Client::send();
    v17 = v35;
  }
  if (v17)
    _Block_release(v17);
  if (v54)
    _Block_release(v54);
  v18 = v53;
  if (v53)
  {
    v19 = (unint64_t *)&v53->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v40;
  if (v40)
  {
    v22 = (unint64_t *)&v40->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
      v24 = (const void *)v2[4];
      if (!v24)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
  v24 = (const void *)v2[4];
  if (v24)
LABEL_35:
    _Block_release(v24);
LABEL_36:
  v25 = (std::__shared_weak_count *)v2[1];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v2);
  v28 = (std::__shared_weak_count *)a1[2];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a1);
}

void sub_1B3CFB294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoERKNS_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *a2 = result;
  a2[1] = *(_DWORD *)(a1 + 48);
  a2[3] = *(_DWORD *)(a1 + 52);
  a2[2] = *(_DWORD *)(a1 + 56);
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoERKNS_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_29(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  void *v5;
  const char *v6;
  void *aBlock;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(void **)(a1 + 56);
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = "error";
  if (!v3)
    v6 = "success";
  *(_DWORD *)buf = 136315138;
  v9 = v6;
  _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Metric query %s", buf, 0xCu);
  v5 = *(void **)(a1 + 56);
  if (v5)
LABEL_3:
    v5 = _Block_copy(v5);
LABEL_4:
  aBlock = v5;
  awd::AppContext::operator()();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3CFB55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

char *qmi::MutableMessageBase::createTLV<awd::tlv::abm::MetricsExt>(_QWORD *a1)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = (char *)operator new(0x20uLL);
  v3 = v2;
  v2[8] = 66;
  *(_QWORD *)(v2 + 12) = 0;
  v4 = v2 + 12;
  *(_QWORD *)v2 = off_1E66D5AE8;
  *(_QWORD *)(v2 + 20) = 0;
  v6 = (char *)a1[2];
  v5 = a1[3];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = v2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = (char *)a1[1];
  v10 = (v6 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v3;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = v3;
  v8 = 8 * v10 + 8;
  v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v6 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7)
    operator delete(v7);
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricsExt>::getSize()
{
  return 19;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricsExt>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *(_DWORD *)(v3 + 11) = *(_DWORD *)(result + 20);
  *(_DWORD *)(v3 + 15) = *(_DWORD *)(result + 24);
  *a2 = v3 + 19;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 16;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<awd::tlv::abm::MetricsExt>::clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = off_1E66D5AE8;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3CFB88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3CFB8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3CFB8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,awd::MetricInfo const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  __int128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void **v10;
  char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[2];
  uint64_t (*v37)(uint64_t, char *);
  void *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  int v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  const void *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*a1;
  v3 = *(_QWORD *)(*a1 + 40);
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v31 = *((_DWORD *)v2 + 4);
    v32 = *((_DWORD *)v2 + 5);
    v33 = *((_DWORD *)v2 + 6);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v31;
    LOWORD(v48) = 1024;
    *(_DWORD *)((char *)&v48 + 2) = v32;
    HIWORD(v48) = 1024;
    LODWORD(v49) = v33;
    _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Querying metric, component: 0x%x, submissionId: 0x%x, triggerId: 0x%x", buf, 0x14u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44 = v5;
  v45 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v44);
  v6 = MEMORY[0x1E0C809B0];
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v37 = (uint64_t (*)(uint64_t, char *))___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  v38 = &__block_descriptor_tmp_32_0;
  v39 = *v2;
  v7 = (std::__shared_weak_count *)v2[1];
  v40 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v41 = *((_DWORD *)v2 + 5);
  v42 = *((_DWORD *)v2 + 4);
  v43 = *((_DWORD *)v2 + 6);
  v10 = (const void **)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1) != (_QWORD)v45)
  {
    while (*((_BYTE *)*v10 + 8) != 66)
    {
      if (++v10 == (const void **)v45)
        goto LABEL_13;
    }
  }
  if (v10 == (const void **)v45)
  {
LABEL_13:
    v12 = qmi::MutableMessageBase::createTLV<awd::tlv::abm::MetricsExt>(&v44);
  }
  else
  {
    if (!v11)
      __cxa_bad_cast();
    v12 = v11 + 12;
  }
  v37((uint64_t)v36, v12);
  v34 = QMIServiceMsg::create();
  *(_QWORD *)buf = v6;
  v48 = 1174405120;
  v49 = ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_33;
  v50 = &__block_descriptor_tmp_34_0;
  v51 = v3;
  v52 = *v2;
  v13 = (std::__shared_weak_count *)v2[1];
  v53 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (void *)v2[4];
  if (v16)
    v16 = _Block_copy(v16);
  v54 = v16;
  aBlock[0] = v6;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd3abm19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D5B18;
  aBlock[4] = buf;
  v17 = _Block_copy(aBlock);
  v35 = v17;
  if (v34)
  {
    qmi::Client::send();
    v17 = v35;
  }
  if (v17)
    _Block_release(v17);
  if (v54)
    _Block_release(v54);
  v18 = v53;
  if (v53)
  {
    v19 = (unint64_t *)&v53->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v40;
  if (v40)
  {
    v22 = (unint64_t *)&v40->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
      v24 = (const void *)v2[4];
      if (!v24)
        goto LABEL_36;
      goto LABEL_35;
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
  v24 = (const void *)v2[4];
  if (v24)
LABEL_35:
    _Block_release(v24);
LABEL_36:
  v25 = (std::__shared_weak_count *)v2[1];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v2);
  v28 = (std::__shared_weak_count *)a1[2];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a1);
}

void sub_1B3CFBCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t a1, _DWORD *a2)
{
  uint64_t result;

  result = awd::AppContext::getAppID(*(awd::AppContext **)(a1 + 32));
  *a2 = result;
  a2[1] = *(_DWORD *)(a1 + 48);
  a2[3] = *(_DWORD *)(a1 + 52);
  a2[2] = *(_DWORD *)(a1 + 56);
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEERKNS_10MetricInfoEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_33(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  void *v5;
  const char *v6;
  void *aBlock;
  uint8_t buf[4];
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(void **)(a1 + 56);
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v6 = "error";
  if (!v3)
    v6 = "success";
  *(_DWORD *)buf = 136315138;
  v9 = v6;
  _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Metric query %s", buf, 0xCu);
  v5 = *(void **)(a1 + 56);
  if (v5)
LABEL_3:
    v5 = _Block_copy(v5);
LABEL_4:
  aBlock = v5;
  awd::AppContext::operator()();
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3CFBF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::init(void)::$_0>(awd::QMIAwdCommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const char *Name;
  size_t v6;
  size_t v7;
  void *p_dst;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];
  _QWORD v44[15];
  void *__p;
  uint64_t v46;
  uint64_t (*v47)();
  void *v48;
  uint64_t v49;
  void *__dst;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  dispatch_object_t v59;
  unint64_t v60;
  unint64_t v61;
  uint8_t buf[8];
  uint64_t v63;
  __int128 v64;
  _QWORD *v65;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Init", buf, 2u);
  }
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v61 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v3 + 104));
  Name = (const char *)awd::AwdCommandDriver::getName((awd::AwdCommandDriver *)v3);
  v6 = strlen(Name);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v41 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v41 = v6 | 7;
    v42 = v41 + 1;
    p_dst = operator new(v41 + 1);
    v51 = v7;
    v52 = v42 | 0x8000000000000000;
    __dst = p_dst;
LABEL_62:
    memmove(p_dst, Name, v7);
    *((_BYTE *)p_dst + v7) = 0;
    v9 = *(NSObject **)(v3 + 88);
    v59 = v9;
    if (!v9)
      goto LABEL_8;
    goto LABEL_7;
  }
  HIBYTE(v52) = v6;
  p_dst = &__dst;
  if (v6)
    goto LABEL_62;
  LOBYTE(__dst) = 0;
  v9 = *(NSObject **)(v3 + 88);
  v59 = v9;
  if (v9)
LABEL_7:
    dispatch_retain(v9);
LABEL_8:
  HIBYTE(v47) = 3;
  LODWORD(__p) = 6584161;
  v10 = *(std::__shared_weak_count **)(v3 + 80);
  if (!v10 || (v11 = *(_QWORD *)(v3 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
    v57 = 0;
    v58 = 0;
    v18 = std::__shared_weak_count::lock(v13);
    if (v18)
      goto LABEL_16;
LABEL_65:
    v21 = v58;
    v57 = 0;
    v58 = v18;
    if (!v21)
      goto LABEL_20;
    goto LABEL_19;
  }
  v57 = 0;
  v58 = 0;
  v18 = std::__shared_weak_count::lock(v12);
  if (!v18)
    goto LABEL_65;
LABEL_16:
  v19 = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  v21 = v58;
  v57 = v11;
  v58 = v18;
  if (v21)
LABEL_19:
    std::__shared_weak_count::__release_weak(v21);
LABEL_20:
  std::__shared_weak_count::__release_weak(v13);
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v55 = v60;
  v56 = (std::__shared_weak_count *)v61;
  if (v61)
  {
    v24 = (unint64_t *)(v61 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  qmi::Client::createWithQueueLocal();
  v26 = v64;
  v64 = 0uLL;
  v27 = *(std::__shared_weak_count **)(v3 + 168);
  *(_OWORD *)(v3 + 160) = v26;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  qmi::Client::~Client((qmi::Client *)buf);
  v30 = v56;
  if (v56)
  {
    v31 = (unint64_t *)&v56->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v58)
    std::__shared_weak_count::__release_weak(v58);
  if (SHIBYTE(v47) < 0)
    operator delete(__p);
  if (v59)
    dispatch_release(v59);
  if (SHIBYTE(v52) < 0)
    operator delete(__dst);
  v33 = (void *)MEMORY[0x1E0C809B0];
  __dst = (void *)MEMORY[0x1E0C809B0];
  v51 = 0x40000000;
  v52 = (unint64_t)___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke;
  v53 = &__block_descriptor_tmp_36_0;
  v54 = v3;
  qmi::Client::setHandler();
  __p = v33;
  v46 = 0x40000000;
  v47 = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2;
  v48 = &__block_descriptor_tmp_37_0;
  v49 = v3;
  qmi::Client::setHandler();
  v44[10] = v33;
  v44[11] = 0x40000000;
  v44[12] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_3;
  v44[13] = &__block_descriptor_tmp_39_0;
  v44[14] = v3;
  qmi::Client::setHandler();
  v44[5] = v33;
  v44[6] = 0x40000000;
  v44[7] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_4;
  v44[8] = &__block_descriptor_tmp_40_1;
  v44[9] = v3;
  qmi::Client::setHandler();
  v44[0] = v33;
  v44[1] = 0x40000000;
  v44[2] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_5;
  v44[3] = &__block_descriptor_tmp_42;
  v44[4] = v3;
  *(_QWORD *)buf = v33;
  v63 = 0x40000000;
  *(_QWORD *)&v64 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd3abm16MetricSubmission10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v64 + 1) = &unk_1E66D5CA0;
  v65 = v44;
  qmi::Client::setIndHandler();
  v43[0] = v33;
  v43[1] = 0x40000000;
  v43[2] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_43;
  v43[3] = &__block_descriptor_tmp_48_0;
  v43[4] = v3;
  *(_QWORD *)buf = v33;
  v63 = 0x40000000;
  *(_QWORD *)&v64 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd3abm13SubmitTrigger10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v64 + 1) = &unk_1E66D5CC8;
  v65 = v43;
  qmi::Client::setIndHandler();
  qmi::Client::start((qmi::Client *)(v3 + 144));
  v34 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v34, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  v35 = (std::__shared_weak_count *)v61;
  if (v61)
  {
    v36 = (unint64_t *)(v61 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(v2);
  v38 = (std::__shared_weak_count *)a1[2];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(a1);
}

void sub_1B3CFC7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  std::__shared_weak_count *v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;

  v47 = *(std::__shared_weak_count **)(v45 - 176);
  if (v47)
  {
    std::__shared_weak_count::__release_weak(v47);
    if ((a35 & 0x80000000) == 0)
    {
LABEL_3:
      v48 = *(NSObject **)(v45 - 200);
      if (!v48)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((a35 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a30);
  v48 = *(NSObject **)(v45 - 200);
  if (!v48)
  {
LABEL_8:
    if (a43 < 0)
      operator delete(__p);
    v49 = *(std::__shared_weak_count **)(v45 - 152);
    if (v49)
    {
      p_shared_owners = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldaxr(p_shared_owners);
      while (__stlxr(v51 - 1, p_shared_owners));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    operator delete(v44);
    v52 = (std::__shared_weak_count *)v43[2];
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    operator delete(v43);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v48);
  goto LABEL_8;
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke()
{
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2()
{
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_3()
{
  return awd::AwdCommandDriver::broadcastState_sync();
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_4()
{
  return awd::AwdCommandDriver::broadcastState_sync();
}

void ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_5(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v2;
  tlv *TlvValue;
  int v4;
  NSObject *v5;
  _QWORD v6[5];
  uint8_t buf[8];
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *__p;
  void *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_6;
  v6[3] = &__block_descriptor_tmp_41;
  v6[4] = v2;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    v12 = 0;
    v13 = 0;
    v10 = 0xAAAAAAAAAAAA0000;
    __p = 0;
    v8 = 0;
    v9 = 0;
    *(_QWORD *)buf = 0;
    awd::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)TlvValue + v4, (uint64_t)buf);
    ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_6((uint64_t)v6, buf);
    if (__p)
    {
      v12 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_ERROR, " Error on metric submission indication", buf, 2u);
    }
  }
}

void sub_1B3CFCAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B3CFCAC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a19)
    JUMPOUT(0x1B3CFCA14);
  JUMPOUT(0x1B3CFCA0CLL);
}

void sub_1B3CFCADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a19)
    JUMPOUT(0x1B3CFCABCLL);
  JUMPOUT(0x1B3CFCAB4);
}

void ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_6(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _BYTE *v20;
  _BYTE *v21;
  size_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p;
  uint8_t buf[8];
  std::__shared_weak_count *v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *((_DWORD *)a2 + 4);
    v6 = *(_DWORD *)a2;
    v7 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v6;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = v5;
    HIWORD(v27) = 1024;
    v28 = v7;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Got metric submission from BB: appid=%d, metricid=0x%x, submissionid=0x%x", buf, 0x14u);
  }
  v10 = *(_QWORD *)(v3 + 128);
  v9 = v3 + 128;
  v8 = v10;
  if (v10)
  {
    v11 = *a2;
    v12 = v9;
    do
    {
      v13 = *(unsigned __int8 *)(v8 + 32);
      v14 = v13 >= v11;
      if (v13 >= v11)
        v15 = (uint64_t *)v8;
      else
        v15 = (uint64_t *)(v8 + 8);
      if (v14)
        v12 = v8;
      v8 = *v15;
    }
    while (*v15);
    if (v12 != v9 && *(unsigned __int8 *)(v12 + 32) <= v11)
    {
      v17 = *(_QWORD *)(v12 + 40);
      v16 = *(std::__shared_weak_count **)(v12 + 48);
      *(_QWORD *)buf = v17;
      v27 = v16;
      if (v16)
      {
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      if (v17)
      {
        __p = 0;
        v21 = (_BYTE *)*((_QWORD *)a2 + 4);
        v20 = (_BYTE *)*((_QWORD *)a2 + 5);
        v22 = v20 - v21;
        if (v20 != v21)
        {
          if ((v22 & 0x8000000000000000) != 0)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          __p = operator new(v20 - v21);
          memcpy(__p, v21, v22);
        }
        awd::AppContext::operator()();
        if (__p)
          operator delete(__p);
      }
      if (v16)
      {
        v23 = (unint64_t *)&v16->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1B3CFCCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_43(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3;
  tlv *TlvValue;
  int v5;
  tlv *v6;
  int v7;
  __int128 v8;
  NSObject *v9;
  _QWORD v10[5];
  uint8_t buf[16];
  __int128 v12;
  tlv *v13;

  v3 = *(_QWORD *)(a1 + 32);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2_44;
  v10[3] = &__block_descriptor_tmp_47_0;
  v10[4] = v3;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
    goto LABEL_6;
  v6 = TlvValue;
  v7 = v5;
  v13 = TlvValue;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v8;
  v12 = v8;
  tlv::parseV<awd::tlv::abm::SubmitTriggerExt>(&v13, v5, (uint64_t)buf);
  if (v13)
  {
    ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2_44((uint64_t)v10, buf);
    return;
  }
  if ((((uint64_t (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 84, v6, v7) & 1) == 0)
  {
LABEL_6:
    v9 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, " Error on trigger submission indication", buf, 2u);
    }
  }
}

void ___ZZN3awd19QMIAwdCommandDriver4initEvENK3__0clEv_block_invoke_2_44(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t buf[8];
  std::__shared_weak_count *v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v20 = *((_DWORD *)a2 + 3);
    v19 = *((_DWORD *)a2 + 4);
    v21 = *(_DWORD *)a2;
    v22 = *((_DWORD *)a2 + 1);
    v23 = *((_DWORD *)a2 + 2);
    v24 = *((_QWORD *)a2 + 3);
    *(_DWORD *)buf = 67110400;
    *(_DWORD *)&buf[4] = v21;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = v19;
    HIWORD(v27) = 1024;
    v28 = v20;
    v29 = 1024;
    v30 = v22;
    v31 = 1024;
    v32 = v23;
    v33 = 2048;
    v34 = v24;
    _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Got trigger submission from BB: appid=%d, cid=0x%x, trid=0x%x, sid=0x%x, profid=0x%x, %lld", buf, 0x2Au);
    v25 = *(_QWORD *)(v3 + 128);
    v6 = v3 + 128;
    v5 = v25;
    if (!v25)
      return;
  }
  else
  {
    v7 = *(_QWORD *)(v3 + 128);
    v6 = v3 + 128;
    v5 = v7;
    if (!v7)
      return;
  }
  v8 = *a2;
  v9 = v6;
  do
  {
    v10 = *(unsigned __int8 *)(v5 + 32);
    v11 = v10 >= v8;
    if (v10 >= v8)
      v12 = (uint64_t *)v5;
    else
      v12 = (uint64_t *)(v5 + 8);
    if (v11)
      v9 = v5;
    v5 = *v12;
  }
  while (*v12);
  if (v9 != v6 && *(unsigned __int8 *)(v9 + 32) <= v8)
  {
    v13 = *(_QWORD *)(v9 + 40);
    v14 = *(std::__shared_weak_count **)(v9 + 48);
    *(_QWORD *)buf = v13;
    v27 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    if (v13)
      awd::AppContext::operator()();
    if (v14)
    {
      v17 = (unint64_t *)&v14->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1B3CFD010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ctu::Loggable<awd::AwdCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3CFD120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3CFD13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<awd::QMIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIAwdCommandDriver,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D5CF8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3CFD258(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3CFD278(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19QMIAwdCommandDriverEE"
                     "ENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19QMIAwdComm"
                                "andDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19QMIAwdCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN3awd16AwdCommandDriverEE15make_shared_ptrINS1_19QMIAwdCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void BudgetData::BudgetData(BudgetData *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

void BudgetData::~BudgetData(BudgetData *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

void BudgetData::BudgetData(BudgetData *this, const BudgetData *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (this != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (this != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_1B3CFD41C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B3CFD47C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *BudgetData::BudgetData(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = result + 1;
  v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[2])
    v3 = (_QWORD *)(result[1] + 16);
  else
    v3 = result;
  *v3 = result + 1;
  *(_QWORD *)a2 = a2 + 8;
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;

  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = result + 1;
  v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[2])
    v3 = (_QWORD *)(result[1] + 16);
  else
    v3 = result;
  *v3 = result + 1;
  *(_QWORD *)a2 = a2 + 8;
  return result;
}

uint64_t BudgetData::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

uint64_t BudgetData::get(uint64_t **a1, unsigned int a2)
{
  char v2;
  unsigned __int8 *v4;
  uint64_t **v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;

  v2 = a2;
  v5 = a1 + 1;
  v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[28];
        if (v7 <= a2)
          break;
        v4 = (unsigned __int8 *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = v6;
    v6 = operator new(0x28uLL);
    *((_BYTE *)v6 + 28) = v2;
    *((_BYTE *)v6 + 32) = 0;
    *((_BYTE *)v6 + 36) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = v6;
    v9 = (uint64_t *)**a1;
    v10 = v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *BudgetData::set(uint64_t *result, unsigned int a2, int a3)
{
  char v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t **v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = a2;
  v5 = result;
  v7 = (uint64_t **)(result + 1);
  v6 = (unsigned __int8 *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[28];
        if (v9 <= a2)
          break;
        v6 = (unsigned __int8 *)*v8;
        v7 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v6 = (unsigned __int8 *)v8[1];
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = result + 1;
LABEL_8:
    v10 = v8;
    v8 = operator new(0x28uLL);
    *((_BYTE *)v8 + 28) = v4;
    *((_BYTE *)v8 + 32) = 0;
    *((_BYTE *)v8 + 36) = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = v8;
    v11 = *(_QWORD *)*v5;
    v12 = v8;
    if (v11)
    {
      *v5 = v11;
      v12 = *v7;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
    ++v5[2];
  }
  *((_DWORD *)v8 + 8) = a3;
  *((_BYTE *)v8 + 36) = 1;
  return result;
}

void BudgetData::clear(BudgetData *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

_QWORD *BudgetData::for_each(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = result + 1;
  v3 = (_QWORD *)*result;
  if ((_QWORD *)*result != result + 1)
  {
    do
    {
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, (uint64_t)v3 + 28, v3 + 4);
      if (!(_DWORD)result)
        break;
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *i;
  uint64_t ***v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v35 = (uint64_t *)v10[1];
            if (!v35)
              break;
            do
            {
              v10 = v35;
              v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((unsigned __int8 *)v13 + 28);
          *((_BYTE *)v12 + 28) = v14;
          v15 = *((_DWORD *)v13 + 8);
          *((_BYTE *)v12 + 36) = *((_BYTE *)v13 + 36);
          *((_DWORD *)v12 + 8) = v15;
          v16 = *v8;
          v17 = (uint64_t **)(a1 + 8);
          v18 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v17;
          *v18 = v12;
          v19 = **(_QWORD **)a1;
          if (v19)
            goto LABEL_15;
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v23 = (uint64_t *)v10[1];
                  if (!v23)
                    break;
                  do
                  {
                    v10 = v23;
                    v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v20 = (_QWORD *)v13[1];
          if (v20)
          {
            do
            {
              v4 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v21 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v17 = (uint64_t **)v16;
            if (v14 >= *((unsigned __int8 *)v16 + 28))
              break;
            v16 = (uint64_t *)*v16;
            v18 = v17;
            if (!*v17)
              goto LABEL_14;
          }
          v16 = (uint64_t *)v16[1];
        }
        while (v16);
        v18 = v17 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v17;
        v17[1] = v12;
        v19 = **(_QWORD **)a1;
        if (!v19)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v19;
        v12 = *v18;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v25 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      v26 = (uint64_t *)operator new(0x28uLL);
      v27 = v26;
      v28 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v26 + 28) = *(_QWORD *)((char *)v4 + 28);
      *((_DWORD *)v26 + 9) = v28;
      v29 = *v25;
      v30 = (uint64_t **)(a1 + 8);
      v31 = (uint64_t **)(a1 + 8);
      if (*v25)
        break;
LABEL_54:
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *v31 = v26;
      v32 = **(_QWORD **)a1;
      if (v32)
        goto LABEL_55;
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
      ++*(_QWORD *)(a1 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v21 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v21);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v30 = v29;
        if (*((unsigned __int8 *)v26 + 28) >= *((unsigned __int8 *)v29 + 28))
          break;
        v29 = (uint64_t **)*v29;
        v31 = v30;
        if (!*v30)
          goto LABEL_54;
      }
      v29 = (uint64_t **)v29[1];
    }
    while (v29);
    v31 = v30 + 1;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    v32 = **(_QWORD **)a1;
    if (!v32)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v32;
    v27 = *v31;
    goto LABEL_56;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t radio::QMIHealthCommandDriver::checkError@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  NSObject *v22;
  size_t v23;
  void **v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  const void **v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  CFTypeRef *v37;
  void *__dst[2];
  unint64_t v39;
  CFTypeRef cf[2];
  int64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *__p[2];
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t buf[4];
  CFTypeRef *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  if (!*(_DWORD *)(a2 + 4))
    return result;
  v6 = result;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = 0xAAAAAAAAAAAAAAAALL;
  v59 = v7;
  v58 = v7;
  v57 = v7;
  v56 = v7;
  v55 = v7;
  v54 = v7;
  v53 = v7;
  v52 = v7;
  v51 = v7;
  v48 = v7;
  v46 = v7;
  *(_OWORD *)__p = v7;
  v44 = v7;
  v45 = v7;
  v43 = v7;
  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v50 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v42 + *(_QWORD *)(v42 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v42 + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v12, &v43);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v42 = v8 + 24;
  v50 = v9;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v43 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v48 = 0u;
  LODWORD(v49) = 16;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Failed to ", 10);
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(cf[0]) = 10;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)cf, 1);
  v20 = (const char *)qmi::asString();
  v21 = strlen(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  v22 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if ((v49 & 0x10) != 0)
    {
      v32 = *((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1) < (unint64_t)v46)
      {
        *((_QWORD *)&v48 + 1) = v46;
        v32 = v46;
      }
      v33 = (const void **)&v45 + 1;
    }
    else
    {
      if ((v49 & 8) == 0)
      {
        v30 = 0;
        HIBYTE(v41) = 0;
        v31 = cf;
        goto LABEL_50;
      }
      v33 = (const void **)&v44;
      v32 = v45;
    }
    v34 = *v33;
    v30 = v32 - (_QWORD)*v33;
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v30 >= 0x17)
    {
      v35 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v35 = v30 | 7;
      v36 = v35 + 1;
      v31 = operator new(v35 + 1);
      cf[1] = (CFTypeRef)v30;
      v41 = v36 | 0x8000000000000000;
      cf[0] = v31;
    }
    else
    {
      HIBYTE(v41) = v32 - *(_BYTE *)v33;
      v31 = cf;
      if (!v30)
        goto LABEL_50;
    }
    memmove(v31, v34, v30);
LABEL_50:
    *((_BYTE *)v31 + v30) = 0;
    v37 = cf;
    if (v41 < 0)
      v37 = (CFTypeRef *)cf[0];
    *(_DWORD *)buf = 136315138;
    v61 = v37;
    _os_log_error_impl(&dword_1B3CB3000, v22, OS_LOG_TYPE_ERROR, "%s: \n", buf, 0xCu);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)cf[0]);
  }
  if ((v49 & 0x10) != 0)
  {
    v25 = *((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1) < (unint64_t)v46)
    {
      *((_QWORD *)&v48 + 1) = v46;
      v25 = v46;
    }
    v26 = (const void *)*((_QWORD *)&v45 + 1);
    v23 = v25 - *((_QWORD *)&v45 + 1);
    if ((unint64_t)(v25 - *((_QWORD *)&v45 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
  }
  else
  {
    if ((v49 & 8) == 0)
    {
      v23 = 0;
      HIBYTE(v39) = 0;
      v24 = __dst;
      goto LABEL_22;
    }
    v26 = (const void *)v44;
    v23 = v45 - v44;
    if ((_QWORD)v45 - (_QWORD)v44 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_34:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v24 = (void **)operator new(v27 + 1);
    __dst[1] = (void *)v23;
    v39 = v28 | 0x8000000000000000;
    __dst[0] = v24;
    goto LABEL_21;
  }
  HIBYTE(v39) = v23;
  v24 = __dst;
  if (v23)
LABEL_21:
    memmove(v24, v26, v23);
LABEL_22:
  *((_BYTE *)v24 + v23) = 0;
  CreateError();
  if (cf == a4)
    goto LABEL_25;
  v29 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v29)
  {
    CFRelease(v29);
LABEL_25:
    if (cf[0])
      CFRelease(cf[0]);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  v42 = *v10;
  *(uint64_t *)((char *)&v42 + *(_QWORD *)(v42 - 24)) = v10[3];
  *(_QWORD *)&v43 = v13 + 16;
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v50);
}

void sub_1B3CFE014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t radio::QMIHealthCommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  std::__shared_weak_count *v25;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0xC0uLL);
  v9 = (uint64_t)v8;
  v10 = (std::__shared_weak_count *)a1[1];
  v24 = *a1;
  v25 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  radio::QMIHealthCommandDriver::QMIHealthCommandDriver((uint64_t)v8, (uint64_t)&v24, (uint64_t)v23);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::QMIHealthCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIHealthCommandDriver,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1},void>(a4, v9);
  ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v19 = v25;
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a4 + 48))(*a4, a2);
}

void sub_1B3CFE1D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3CFE1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t radio::QMIHealthCommandDriver::QMIHealthCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  radio::HealthCommandDriver::HealthCommandDriver();
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_1E66D5D88;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 168) = dispatch_group_create();
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1B3CFE338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void radio::HealthCommandDriver::~HealthCommandDriver(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *this = off_1E66D6178;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  *this = off_1E66D61D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = this[12];
  if (v5)
    dispatch_release(v5);
  v6 = this[11];
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)this[10];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void radio::QMIHealthCommandDriver::~QMIHealthCommandDriver(radio::QMIHealthCommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66D5D88;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  v3 = *((_QWORD *)this + 21);
  if (v3)
    dispatch_release(v3);
  std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(*((_QWORD **)this + 19));
  radio::HealthCommandDriver::~HealthCommandDriver((void **)this);
}

{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66D5D88;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  v3 = *((_QWORD *)this + 21);
  if (v3)
    dispatch_release(v3);
  std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(*((_QWORD **)this + 19));
  radio::HealthCommandDriver::~HealthCommandDriver((void **)this);
}

{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  *(_QWORD *)this = off_1E66D5D88;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v5, 2u);
  }
  v3 = *((_QWORD *)this + 21);
  if (v3)
    dispatch_release(v3);
  std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(*((_QWORD **)this + 19));
  radio::HealthCommandDriver::~HealthCommandDriver((void **)this);
  operator delete(v4);
}

void radio::QMIHealthCommandDriver::init(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v4[6];
  _QWORD *v5;
  _QWORD block[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_24_1;
  v4[4] = a1;
  v4[5] = a2;
  v5 = v4;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_49;
  block[4] = a1 + 72;
  block[5] = &v5;
  v3 = a1 + 88;
  v2 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v3 + 8))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  __int128 v14;
  std::ios_base *v15;
  capabilities::ipc *v16;
  std::string::size_type v17;
  std::string *p_dst;
  uint64_t v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  size_t size;
  NSObject *v26;
  std::string *v27;
  std::string *v28;
  const char *v29;
  size_t v30;
  std::string::size_type v31;
  void *v32;
  const char *Name;
  size_t v34;
  std::string::size_type v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t **v64;
  unsigned int v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  NSObject *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t **v91;
  uint64_t *v92;
  uint64_t **v93;
  unsigned int v94;
  char *v95;
  uint64_t v96;
  uint64_t *v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  NSObject *v105;
  __int128 v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  _QWORD *v111;
  char v112;
  uint64_t v113;
  __int128 v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  __int128 v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  std::string::size_type v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  std::__shared_weak_count *v149;
  std::__shared_weak_count *v150;
  _QWORD *v151;
  _QWORD *v152;
  BOOL v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  std::string *v159;
  std::string *v160;
  std::string *v161;
  std::string *v162;
  unsigned int *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  std::string v168;
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t);
  void *v172;
  uint64_t v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  std::string v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(uint64_t);
  void *v183;
  uint64_t v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  std::string v187;
  char v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(uint64_t, NSObject *);
  void *v192;
  uint64_t v193;
  uint64_t v194;
  std::__shared_weak_count *v195;
  std::string v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(uint64_t);
  void *v201;
  uint64_t v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  std::string v205;
  uint64_t v206;
  std::__shared_weak_count *v207;
  NSObject *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  dispatch_object_t object;
  std::string v214;
  std::string v215;
  std::__shared_weak_count *v216[2];
  std::string::size_type v217;
  std::string __dst;
  _BYTE v219[40];
  __int128 v220;
  __int128 v221;
  __int128 __p;
  __int128 v223;
  unint64_t v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  unint64_t v235;
  unint64_t v236;
  std::string v237;
  _BYTE buf[32];
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v237.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  v237.__r_.__value_.__r.__words[2] = 0x6AAAAAAAAAAAAAALL;
  v236 = 0xAAAAAAAAAAAAAAAALL;
  v237.__r_.__value_.__r.__words[0] = 0xAA00315F61746164;
  v235 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v2 + 104));
  v11 = *(unsigned int ***)(a1 + 40);
  v12 = *v11;
  v163 = v11[1];
  v164 = v4;
  v165 = v6;
  if (*v11 != v163)
  {
    v158 = *MEMORY[0x1E0DE4F60];
    v161 = *(std::string **)(MEMORY[0x1E0DE4F60] + 16);
    v162 = *(std::string **)(MEMORY[0x1E0DE4F60] + 8);
    v157 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v160 = (std::string *)(MEMORY[0x1E0DE4FE0] + 64);
    v159 = (std::string *)(MEMORY[0x1E0DE4FB8] + 16);
    while (1)
    {
      v13 = *v12;
      *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v233 = v14;
      v234 = v14;
      v231 = v14;
      v232 = v14;
      v229 = v14;
      v230 = v14;
      v227 = v14;
      v228 = v14;
      v224 = 0xAAAAAAAAAAAAAAAALL;
      v226 = v14;
      __p = v14;
      v223 = v14;
      v220 = v14;
      v221 = v14;
      *(_OWORD *)&v219[8] = v14;
      *(_OWORD *)&v219[24] = v14;
      v225 = (uint64_t)v160;
      *(_QWORD *)v219 = v162;
      *(_QWORD *)&v219[v162[-1].__r_.__value_.__r.__words[0]] = v161;
      v15 = (std::ios_base *)&v219[*(_QWORD *)(*(_QWORD *)v219 - 24)];
      std::ios_base::init(v15, &v219[8]);
      v15[1].__vftable = 0;
      v15[1].__fmtflags_ = -1;
      *(_QWORD *)v219 = MEMORY[0x1E0DE4FE0] + 24;
      v225 = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&v219[8] = v159;
      __p = 0u;
      v223 = 0u;
      LODWORD(v224) = 16;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v219, (uint64_t)"data_", 5);
      v16 = (capabilities::ipc *)std::ostream::operator<<();
      memset(&__dst, 170, sizeof(__dst));
      if ((v224 & 0x10) != 0)
      {
        v19 = *((_QWORD *)&v223 + 1);
        v20 = (const void **)&v220 + 1;
        if (*((_QWORD *)&v223 + 1) < (unint64_t)v221)
        {
          *((_QWORD *)&v223 + 1) = v221;
          v19 = v221;
          v20 = (const void **)&v220 + 1;
        }
      }
      else
      {
        if ((v224 & 8) == 0)
        {
          v17 = 0;
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
          p_dst = &__dst;
          goto LABEL_26;
        }
        v19 = v220;
        v20 = (const void **)&v219[24];
      }
      v21 = *v20;
      v17 = v19 - (_QWORD)*v20;
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v17 >= 0x17)
        break;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19 - *(_BYTE *)v20;
      p_dst = &__dst;
      if (v17)
        goto LABEL_25;
LABEL_26:
      p_dst->__r_.__value_.__s.__data_[v17] = 0;
      if ((capabilities::ipc::supportsUnifiedQMuxV2(v16) & 1) == 0)
      {
        if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &__dst;
          else
            v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            size = __dst.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((void **)&v237.__r_.__value_.__l.__data_, v24, size);
        }
        else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(&v237, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
        }
        else
        {
          v237 = __dst;
        }
      }
      v26 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v28 = &v237;
        if ((v237.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v28 = (std::string *)v237.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v27;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v28;
        _os_log_impl(&dword_1B3CB3000, v26, OS_LOG_TYPE_DEFAULT, "#I Creating WDS client %s on %s", buf, 0x16u);
      }
      if (!v235)
      {
        Name = (const char *)radio::HealthCommandDriver::getName((radio::HealthCommandDriver *)v2);
        v34 = strlen(Name);
        if (v34 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v35 = v34;
        if (v34 >= 0x17)
        {
          v69 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v69 = v34 | 7;
          v70 = v69 + 1;
          v36 = operator new(v69 + 1);
          v214.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
          v214.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
          v214.__r_.__value_.__l.__size_ = v35;
        }
        else
        {
          *((_BYTE *)&v214.__r_.__value_.__s + 23) = v34;
          v36 = &v214;
          if (!v34)
          {
LABEL_98:
            v36[v35] = 0;
            v71 = std::string::append(&v214, ": ", 2uLL);
            v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
            v215.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v72;
            v71->__r_.__value_.__l.__size_ = 0;
            v71->__r_.__value_.__r.__words[2] = 0;
            v71->__r_.__value_.__r.__words[0] = 0;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v73 = &__dst;
            else
              v73 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v74 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v74 = __dst.__r_.__value_.__l.__size_;
            v75 = std::string::append(&v215, (const std::string::value_type *)v73, v74);
            v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
            v217 = v75->__r_.__value_.__r.__words[2];
            *(_OWORD *)v216 = v76;
            v75->__r_.__value_.__l.__size_ = 0;
            v75->__r_.__value_.__r.__words[2] = 0;
            v75->__r_.__value_.__r.__words[0] = 0;
            v77 = *(NSObject **)(v2 + 88);
            v208 = v77;
            if (v77)
              dispatch_retain(v77);
            v78 = *(std::__shared_weak_count **)(v2 + 80);
            if (!v78 || (v79 = *(_QWORD *)(v2 + 72), (v80 = std::__shared_weak_count::lock(v78)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v81 = v80;
            v82 = (unint64_t *)&v80->__shared_weak_owners_;
            do
              v83 = __ldxr(v82);
            while (__stxr(v83 + 1, v82));
            v84 = (unint64_t *)&v80->__shared_owners_;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (v85)
            {
              v207 = 0;
              v206 = 0;
              v86 = std::__shared_weak_count::lock(v80);
              if (v86)
              {
LABEL_114:
                v87 = (unint64_t *)&v86->__shared_weak_owners_;
                do
                  v88 = __ldxr(v87);
                while (__stxr(v88 + 1, v87));
                v206 = v79;
                v207 = v86;
                goto LABEL_117;
              }
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v81);
              v207 = 0;
              v206 = 0;
              v86 = std::__shared_weak_count::lock(v81);
              if (v86)
                goto LABEL_114;
            }
            v206 = 0;
            v207 = v86;
LABEL_117:
            std::__shared_weak_count::__release_weak(v81);
            if (v86)
            {
              v89 = (unint64_t *)&v86->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                std::__shared_weak_count::__release_weak(v86);
              }
            }
            qmi::Client::createWithQueue();
            v91 = (uint64_t **)(v2 + 152);
            while (1)
            {
              v92 = *v91;
              v93 = v91;
              if (!*v91)
                break;
              while (1)
              {
                v91 = (uint64_t **)v92;
                v94 = *((_DWORD *)v92 + 8);
                if (v13 < v94)
                  break;
                if (v94 >= v13)
                {
                  v95 = (char *)v91;
                  goto LABEL_161;
                }
                v92 = v91[1];
                if (!v92)
                {
                  v93 = v91 + 1;
                  goto LABEL_128;
                }
              }
            }
LABEL_128:
            v95 = (char *)operator new(0x48uLL);
            *((_DWORD *)v95 + 8) = v13;
            *(_OWORD *)(v95 + 40) = 0u;
            *(_OWORD *)(v95 + 56) = 0u;
            *(_QWORD *)v95 = 0;
            *((_QWORD *)v95 + 1) = 0;
            *((_QWORD *)v95 + 2) = v91;
            *v93 = (uint64_t *)v95;
            v96 = **(_QWORD **)(v2 + 144);
            v97 = (uint64_t *)v95;
            if (v96)
            {
              *(_QWORD *)(v2 + 144) = v96;
              v97 = *v93;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 152), v97);
            ++*(_QWORD *)(v2 + 160);
LABEL_161:
            v106 = *(_OWORD *)&buf[16];
            *(_OWORD *)&buf[16] = 0uLL;
            v107 = (std::__shared_weak_count *)*((_QWORD *)v95 + 8);
            *(_OWORD *)(v95 + 56) = v106;
            v4 = v164;
            v6 = v165;
            if (!v107)
              goto LABEL_165;
            v108 = (unint64_t *)&v107->__shared_owners_;
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
              qmi::Client::~Client((qmi::Client *)buf);
              v110 = v207;
              if (v207)
LABEL_166:
                std::__shared_weak_count::__release_weak(v110);
            }
            else
            {
LABEL_165:
              qmi::Client::~Client((qmi::Client *)buf);
              v110 = v207;
              if (v207)
                goto LABEL_166;
            }
            v105 = v208;
            if (v208)
              goto LABEL_149;
            goto LABEL_150;
          }
        }
        memmove(v36, Name, v35);
        goto LABEL_98;
      }
      v29 = (const char *)radio::HealthCommandDriver::getName((radio::HealthCommandDriver *)v2);
      v30 = strlen(v29);
      if (v30 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v31 = v30;
      if (v30 >= 0x17)
      {
        v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v37 = v30 | 7;
        v38 = v37 + 1;
        v32 = operator new(v37 + 1);
        v214.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
        v214.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
        v214.__r_.__value_.__l.__size_ = v31;
LABEL_56:
        memmove(v32, v29, v31);
        goto LABEL_57;
      }
      *((_BYTE *)&v214.__r_.__value_.__s + 23) = v30;
      v32 = &v214;
      if (v30)
        goto LABEL_56;
LABEL_57:
      *((_BYTE *)v32 + v31) = 0;
      v39 = std::string::append(&v214, ": ", 2uLL);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v215.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &__dst;
      else
        v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v42 = __dst.__r_.__value_.__l.__size_;
      v43 = std::string::append(&v215, (const std::string::value_type *)v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v217 = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)v216 = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = *(NSObject **)(v2 + 88);
      object = v45;
      if (v45)
        dispatch_retain(v45);
      v46 = *(std::__shared_weak_count **)(v2 + 80);
      if (!v46 || (v47 = *(_QWORD *)(v2 + 72), (v48 = std::__shared_weak_count::lock(v46)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v49 = v48;
      v50 = (unint64_t *)&v48->__shared_weak_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
      v52 = (unint64_t *)&v48->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (v53)
      {
        v212 = 0;
        v211 = 0;
        v54 = std::__shared_weak_count::lock(v48);
        if (!v54)
          goto LABEL_93;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v49);
        v212 = 0;
        v211 = 0;
        v54 = std::__shared_weak_count::lock(v49);
        if (!v54)
        {
LABEL_93:
          v211 = 0;
          v212 = v54;
          goto LABEL_76;
        }
      }
      v55 = (unint64_t *)&v54->__shared_weak_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
      v211 = v47;
      v212 = v54;
LABEL_76:
      std::__shared_weak_count::__release_weak(v49);
      if (!v54)
        goto LABEL_80;
      v57 = (unint64_t *)&v54->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        v59 = v236;
        v209 = v235;
        v210 = (std::__shared_weak_count *)v236;
        if (v236)
        {
LABEL_81:
          v60 = (unint64_t *)(v59 + 8);
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
      }
      else
      {
LABEL_80:
        v59 = v236;
        v209 = v235;
        v210 = (std::__shared_weak_count *)v236;
        if (v236)
          goto LABEL_81;
      }
      qmi::Client::createWithQueueLocal();
      v62 = (uint64_t **)(v2 + 152);
      while (1)
      {
        v63 = *v62;
        v64 = v62;
        if (!*v62)
          break;
        while (1)
        {
          v62 = (uint64_t **)v63;
          v65 = *((_DWORD *)v63 + 8);
          if (v13 < v65)
            break;
          if (v65 >= v13)
          {
            v66 = (char *)v62;
            goto LABEL_136;
          }
          v63 = v62[1];
          if (!v63)
          {
            v64 = v62 + 1;
            goto LABEL_89;
          }
        }
      }
LABEL_89:
      v66 = (char *)operator new(0x48uLL);
      *((_DWORD *)v66 + 8) = v13;
      *(_OWORD *)(v66 + 40) = 0u;
      *(_OWORD *)(v66 + 56) = 0u;
      *(_QWORD *)v66 = 0;
      *((_QWORD *)v66 + 1) = 0;
      *((_QWORD *)v66 + 2) = v62;
      *v64 = (uint64_t *)v66;
      v67 = **(_QWORD **)(v2 + 144);
      v68 = (uint64_t *)v66;
      if (v67)
      {
        *(_QWORD *)(v2 + 144) = v67;
        v68 = *v64;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 152), v68);
      ++*(_QWORD *)(v2 + 160);
LABEL_136:
      v98 = *(_OWORD *)&buf[16];
      *(_OWORD *)&buf[16] = 0uLL;
      v99 = (std::__shared_weak_count *)*((_QWORD *)v66 + 8);
      *(_OWORD *)(v66 + 56) = v98;
      v4 = v164;
      v6 = v165;
      if (!v99)
        goto LABEL_140;
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
        qmi::Client::~Client((qmi::Client *)buf);
        v102 = v210;
        if (!v210)
          goto LABEL_146;
      }
      else
      {
LABEL_140:
        qmi::Client::~Client((qmi::Client *)buf);
        v102 = v210;
        if (!v210)
          goto LABEL_146;
      }
      v103 = (unint64_t *)&v102->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
LABEL_146:
      if (v212)
        std::__shared_weak_count::__release_weak(v212);
      v105 = object;
      if (object)
LABEL_149:
        dispatch_release(v105);
LABEL_150:
      if (SHIBYTE(v217) < 0)
      {
        operator delete(v216[0]);
        if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_152:
          if ((SHIBYTE(v214.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_153;
          goto LABEL_158;
        }
      }
      else if ((SHIBYTE(v215.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_152;
      }
      operator delete(v215.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v214.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_153:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_159;
        goto LABEL_154;
      }
LABEL_158:
      operator delete(v214.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_159:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_154:
      *(_QWORD *)v219 = v158;
      *(_QWORD *)&v219[*(_QWORD *)(v158 - 24)] = v157;
      *(_QWORD *)&v219[8] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v223) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B5E2F6FC](&v225);
      if (++v12 == v163)
        goto LABEL_171;
    }
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    p_dst = (std::string *)operator new(v22 + 1);
    __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    __dst.__r_.__value_.__l.__size_ = v17;
LABEL_25:
    v16 = (capabilities::ipc *)memmove(p_dst, v21, v17);
    goto LABEL_26;
  }
LABEL_171:
  v111 = *(_QWORD **)(v2 + 144);
  if (v111 != (_QWORD *)(v2 + 152))
  {
    v112 = 0;
    v113 = MEMORY[0x1E0C809B0];
    do
    {
      *(_QWORD *)&v114 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v114 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v219 = v114;
      *(_OWORD *)&v219[16] = v114;
      v115 = v111[7];
      v116 = v111[8];
      *(_QWORD *)&v219[32] = 0xAAAAAAAAAAAAAAAALL;
      *(_DWORD *)v219 = *((_DWORD *)v111 + 8);
      *(_QWORD *)&v219[8] = 0;
      *(_QWORD *)&v219[16] = 0;
      *(_QWORD *)&v219[24] = v115;
      *(_QWORD *)&v219[32] = v116;
      if (v116)
      {
        v117 = (unint64_t *)(v116 + 8);
        do
          v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_OWORD *)&buf[16] = *(_OWORD *)&v219[24];
        if (*(_QWORD *)&v219[32])
        {
          v119 = (unint64_t *)(*(_QWORD *)&v219[32] + 8);
          do
            v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
        }
      }
      else
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        *(_OWORD *)&buf[16] = v115;
      }
      memset(&__dst, 170, sizeof(__dst));
      v121 = qmi::Client::getName((qmi::Client *)buf);
      if (*(char *)(v121 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v121, *(_QWORD *)(v121 + 8));
      }
      else
      {
        v122 = *(_OWORD *)v121;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v121 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v122;
      }
      v198 = v113;
      v199 = 1174405120;
      v200 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_5;
      v201 = &__block_descriptor_tmp_2;
      v202 = v2;
      v203 = v4;
      v204 = v6;
      do
        v123 = __ldxr(p_shared_weak_owners);
      while (__stxr(v123 + 1, p_shared_weak_owners));
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v205, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v205 = __dst;
      qmi::Client::setHandler();
      v189 = v113;
      v190 = 1174405120;
      v191 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_7;
      v192 = &__block_descriptor_tmp_11;
      v193 = v2;
      v194 = v4;
      v195 = v6;
      do
        v124 = __ldxr(p_shared_weak_owners);
      while (__stxr(v124 + 1, p_shared_weak_owners));
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v196, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v196 = __dst;
      v197 = v112;
      qmi::Client::setHandler();
      v180 = v113;
      v181 = 1174405120;
      v182 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_12;
      v183 = &__block_descriptor_tmp_13_0;
      v184 = v2;
      v185 = v4;
      v186 = v6;
      do
        v125 = __ldxr(p_shared_weak_owners);
      while (__stxr(v125 + 1, p_shared_weak_owners));
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v187, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v187 = __dst;
      v188 = v112;
      qmi::Client::setHandler();
      v216[1] = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      v216[0] = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
      qmi::Client::operator std::weak_ptr<qmi::Client::State>();
      v169 = v113;
      v170 = 1174405120;
      v171 = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_14;
      v172 = &__block_descriptor_tmp_20_2;
      v173 = v2;
      v174 = v4;
      v175 = v6;
      do
        v126 = __ldxr(p_shared_weak_owners);
      while (__stxr(v126 + 1, p_shared_weak_owners));
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v176, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v176 = __dst;
      v177 = v216[0];
      v178 = v216[1];
      if (v216[1])
      {
        v127 = &v216[1]->__shared_weak_owners_;
        do
          v128 = __ldxr((unint64_t *)v127);
        while (__stxr(v128 + 1, (unint64_t *)v127));
      }
      v179 = v112;
      qmi::Client::setHandler();
      v166 = v6;
      do
        v129 = __ldxr(p_shared_weak_owners);
      while (__stxr(v129 + 1, p_shared_weak_owners));
      v167 = v216[1];
      if (v216[1])
      {
        v130 = &v216[1]->__shared_weak_owners_;
        do
          v131 = __ldxr((unint64_t *)v130);
        while (__stxr(v131 + 1, (unint64_t *)v130));
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v168, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      else
        v168 = __dst;
      qmi::Client::setHandler();
      v132 = *(std::__shared_weak_count **)(v2 + 80);
      if (!v132 || (v133 = *(_QWORD *)(v2 + 72), (v134 = std::__shared_weak_count::lock(v132)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v135 = v134;
      v136 = (unint64_t *)&v134->__shared_weak_owners_;
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
      v138 = (unint64_t *)&v134->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (v139)
      {
        *(_OWORD *)&v215.__r_.__value_.__l.__data_ = 0uLL;
        v140 = std::__shared_weak_count::lock(v134);
        if (!v140)
          goto LABEL_258;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v135);
        *(_OWORD *)&v215.__r_.__value_.__l.__data_ = 0uLL;
        v140 = std::__shared_weak_count::lock(v135);
        if (!v140)
        {
LABEL_258:
          v143 = (std::__shared_weak_count *)v215.__r_.__value_.__l.__size_;
          v215.__r_.__value_.__r.__words[0] = 0;
          v215.__r_.__value_.__l.__size_ = (std::string::size_type)v140;
          if (!v143)
            goto LABEL_228;
LABEL_227:
          std::__shared_weak_count::__release_weak(v143);
          goto LABEL_228;
        }
      }
      v141 = (unint64_t *)&v140->__shared_weak_owners_;
      do
        v142 = __ldxr(v141);
      while (__stxr(v142 + 1, v141));
      v143 = (std::__shared_weak_count *)v215.__r_.__value_.__l.__size_;
      v215.__r_.__value_.__r.__words[0] = v133;
      v215.__r_.__value_.__l.__size_ = (std::string::size_type)v140;
      if (v143)
        goto LABEL_227;
LABEL_228:
      std::__shared_weak_count::__release_weak(v135);
      v4 = v164;
      v6 = v165;
      if (v140)
      {
        v144 = (unint64_t *)&v140->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
          std::__shared_weak_count::__release_weak(v140);
        }
      }
      qmi::Client::setClientHandle();
      if (v215.__r_.__value_.__l.__size_)
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v215.__r_.__value_.__l.__size_);
      qmi::Client::start((qmi::Client *)buf);
      if ((SHIBYTE(v168.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v146 = v167;
        if (!v167)
          goto LABEL_238;
LABEL_237:
        std::__shared_weak_count::__release_weak(v146);
        goto LABEL_238;
      }
      operator delete(v168.__r_.__value_.__l.__data_);
      v146 = v167;
      if (v167)
        goto LABEL_237;
LABEL_238:
      std::__shared_weak_count::__release_weak(v166);
      if (v178)
        std::__shared_weak_count::__release_weak(v178);
      if ((SHIBYTE(v176.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v147 = v175;
        if (!v175)
          goto LABEL_243;
LABEL_242:
        std::__shared_weak_count::__release_weak(v147);
        goto LABEL_243;
      }
      operator delete(v176.__r_.__value_.__l.__data_);
      v147 = v175;
      if (v175)
        goto LABEL_242;
LABEL_243:
      if (v216[1])
        std::__shared_weak_count::__release_weak(v216[1]);
      if ((SHIBYTE(v187.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v148 = v186;
        if (!v186)
          goto LABEL_248;
LABEL_247:
        std::__shared_weak_count::__release_weak(v148);
        goto LABEL_248;
      }
      operator delete(v187.__r_.__value_.__l.__data_);
      v148 = v186;
      if (v186)
        goto LABEL_247;
LABEL_248:
      if ((SHIBYTE(v196.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v149 = v195;
        if (!v195)
          goto LABEL_251;
LABEL_250:
        std::__shared_weak_count::__release_weak(v149);
        goto LABEL_251;
      }
      operator delete(v196.__r_.__value_.__l.__data_);
      v149 = v195;
      if (v195)
        goto LABEL_250;
LABEL_251:
      if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v150 = v204;
        if (!v204)
          goto LABEL_254;
LABEL_253:
        std::__shared_weak_count::__release_weak(v150);
        goto LABEL_254;
      }
      operator delete(v205.__r_.__value_.__l.__data_);
      v150 = v204;
      if (v204)
        goto LABEL_253;
LABEL_254:
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        qmi::Client::~Client((qmi::Client *)buf);
        qmi::Client::~Client((qmi::Client *)&v219[8]);
        v151 = (_QWORD *)v111[1];
        if (v151)
        {
          do
          {
LABEL_271:
            v152 = v151;
            v151 = (_QWORD *)*v151;
          }
          while (v151);
          goto LABEL_173;
        }
      }
      else
      {
        qmi::Client::~Client((qmi::Client *)buf);
        qmi::Client::~Client((qmi::Client *)&v219[8]);
        v151 = (_QWORD *)v111[1];
        if (v151)
          goto LABEL_271;
      }
      do
      {
        v152 = (_QWORD *)v111[2];
        v153 = *v152 == (_QWORD)v111;
        v111 = v152;
      }
      while (!v153);
LABEL_173:
      ++v112;
      v111 = v152;
    }
    while (v152 != (_QWORD *)(v2 + 152));
  }
  v154 = (std::__shared_weak_count *)v236;
  if (v236)
  {
    v155 = (unint64_t *)(v236 + 8);
    do
      v156 = __ldaxr(v155);
    while (__stlxr(v156 - 1, v155));
    if (!v156)
    {
      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
      std::__shared_weak_count::__release_weak(v154);
      if ((SHIBYTE(v237.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_282;
      goto LABEL_281;
    }
  }
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
LABEL_281:
    operator delete(v237.__r_.__value_.__l.__data_);
LABEL_282:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1B3CFF910(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  if (*(char *)(v2 - 169) < 0)
    operator delete(*(void **)(v2 - 192));
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_5(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          v9 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v9 = (_QWORD *)*v9;
          v10 = 136315138;
          v11 = v9;
          _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D stopped %s", (uint8_t *)&v10, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1B3CFFE94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_7(uint64_t a1, NSObject *a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  _QWORD *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD block[5];
  dispatch_group_t group;
  std::string __p;
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD **)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    v19 = v6;
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = v5[5];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v9 = (_QWORD *)*v9;
          *(_DWORD *)buf = 136315138;
          v21 = v9;
          _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I entering low power %s", buf, 0xCu);
        }
        v10 = *(unsigned __int8 *)(a1 + 80);
        if (v10 >= 0x20)
          std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
        v5[23] |= 1 << v10;
        if (a2)
        {
          dispatch_retain(a2);
          dispatch_retain(a2);
          dispatch_group_enter(a2);
          dispatch_release(a2);
        }
        v11 = v5[21];
        v12 = v5[11];
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 1174405120;
        block[2] = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_8;
        block[3] = &__block_descriptor_tmp_9_1;
        block[4] = v5;
        group = a2;
        if (a2)
        {
          dispatch_retain(a2);
          dispatch_group_enter(a2);
        }
        if (*(char *)(a1 + 79) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
        else
          __p = *(std::string *)(a1 + 56);
        dispatch_group_notify(v11, v12, block);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        if (a2)
        {
          dispatch_group_leave(a2);
          dispatch_release(a2);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D00124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  NSObject *v19;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v19)
  {
    dispatch_group_leave(v19);
    dispatch_release(v19);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v3 = (_QWORD *)*v3;
    v4 = 136315138;
    v5 = v3;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I completed entering low power %s", (uint8_t *)&v4, 0xCu);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  std::string *v6;
  __int128 v7;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1B3D00294(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(v1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 40);
    if (v4)
      dispatch_release(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    v2 = *(NSObject **)(a1 + 40);
    if (!v2)
      return;
  }
  else
  {
    v2 = *(NSObject **)(a1 + 40);
    if (!v2)
      return;
  }
  dispatch_group_leave(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
    dispatch_release(v3);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_12(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t buf[4];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          v7 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v7 = (_QWORD *)*v7;
          *(_DWORD *)buf = 136315138;
          v12 = v7;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I exited low power %s", buf, 0xCu);
        }
        v8 = *(unsigned __int8 *)(a1 + 80);
        if (v8 >= 0x20)
          std::__throw_out_of_range[abi:ne180100]("bitset reset argument out of range");
        *(_QWORD *)(v3 + 184) &= ~(1 << v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D00448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_14(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  _BOOL8 v7;
  __int128 v8;
  NSObject *v9;
  int v10;
  char v11;
  __int128 v12;
  char *v13;
  char *v14;
  const void **v15;
  char *v16;
  _BYTE *v17;
  _WORD *v18;
  _WORD *v19;
  _QWORD *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  char v48;
  __int128 *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  void *aBlock;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count *v59;
  __int128 buf;
  void (*v61)(uint64_t, QMIServiceMsg *);
  void *v62;
  _QWORD *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v59 = v4;
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        v6 = *(NSObject **)(v3 + 40);
        v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG);
        if (v7)
        {
          v27 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v27 = (_QWORD *)*v27;
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v27;
          _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D started %s", (uint8_t *)&buf, 0xCu);
        }
        if (capabilities::ipc::supportsUnifiedQMuxV2((capabilities::ipc *)v7))
        {
          *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
          v56 = v8;
          v57 = v8;
          qmi::Client::Client();
          if ((_QWORD)v57)
          {
            v9 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              v10 = *(unsigned __int8 *)(a1 + 96);
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v10;
              _os_log_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEFAULT, "#I Using unified QmuxV2, attempting to bind to mux data port %u", (uint8_t *)&buf, 8u);
            }
            v11 = *(_BYTE *)(a1 + 96);
            *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v54 = v12;
            v55 = v12;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v54);
            v13 = (char *)*((_QWORD *)&v54 + 1);
            v14 = (char *)v55;
            v15 = (const void **)*((_QWORD *)&v54 + 1);
            if (*((_QWORD *)&v54 + 1) != (_QWORD)v55)
            {
              v15 = (const void **)*((_QWORD *)&v54 + 1);
              while (*((_BYTE *)*v15 + 8) != 17)
              {
                if (++v15 == (const void **)v55)
                  goto LABEL_17;
              }
            }
            if (v15 == (const void **)v55)
            {
LABEL_17:
              v18 = operator new(0x10uLL);
              v19 = v18;
              v18[4] = 17;
              *(_QWORD *)v18 = off_1E66D6280;
              if ((unint64_t)v14 >= *((_QWORD *)&v55 + 1))
              {
                v21 = v14 - v13;
                v22 = (v14 - v13) >> 3;
                v23 = v22 + 1;
                if ((unint64_t)(v22 + 1) >> 61)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v24 = *((_QWORD *)&v55 + 1) - (_QWORD)v13;
                if ((uint64_t)(*((_QWORD *)&v55 + 1) - (_QWORD)v13) >> 2 > v23)
                  v23 = v24 >> 2;
                if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
                  v25 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v25 = v23;
                if (v25)
                {
                  if (v25 >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v26 = operator new(8 * v25);
                }
                else
                {
                  v26 = 0;
                }
                v28 = &v26[8 * v22];
                v29 = &v26[8 * v25];
                *v28 = v19;
                v20 = v28 + 1;
                if (v13 != v14)
                {
                  if ((unint64_t)(v21 - 8) < 0x58)
                    goto LABEL_64;
                  if ((unint64_t)(v13 - v26) < 0x20)
                    goto LABEL_64;
                  v30 = ((unint64_t)(v21 - 8) >> 3) + 1;
                  v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
                  v32 = &v14[-v31];
                  v28 = (_QWORD *)((char *)v28 - v31);
                  v33 = &v26[8 * v22 - 16];
                  v34 = v14 - 16;
                  v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v36 = *(_OWORD *)v34;
                    *(v33 - 1) = *((_OWORD *)v34 - 1);
                    *v33 = v36;
                    v33 -= 2;
                    v34 -= 32;
                    v35 -= 4;
                  }
                  while (v35);
                  v14 = v32;
                  if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_64:
                    do
                    {
                      v37 = *((_QWORD *)v14 - 1);
                      v14 -= 8;
                      *--v28 = v37;
                    }
                    while (v14 != v13);
                  }
                  v13 = (char *)*((_QWORD *)&v54 + 1);
                }
                *((_QWORD *)&v54 + 1) = v28;
                *(_QWORD *)&v55 = v20;
                *((_QWORD *)&v55 + 1) = v29;
                if (v13)
                  operator delete(v13);
              }
              else
              {
                *(_QWORD *)v14 = v18;
                v20 = v14 + 8;
              }
              v17 = (char *)v19 + 9;
              *(_QWORD *)&v55 = v20;
            }
            else
            {
              if (!v16)
                __cxa_bad_cast();
              v17 = v16 + 9;
            }
            *v17 = v11 + 1;
            v49 = &v56;
            v50 = QMIServiceMsg::create();
            v51 = 25000;
            v52 = 0;
            aBlock = 0;
            v38 = MEMORY[0x1E0C809B0];
            v46[0] = MEMORY[0x1E0C809B0];
            v46[1] = 1174405120;
            v46[2] = ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_2;
            v46[3] = &__block_descriptor_tmp_19_1;
            v40 = *(_QWORD *)(a1 + 40);
            v39 = *(std::__shared_weak_count **)(a1 + 48);
            v46[4] = v3;
            v46[5] = v40;
            v47 = v39;
            if (v39)
            {
              p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
              do
                v42 = __ldxr(p_shared_weak_owners);
              while (__stxr(v42 + 1, p_shared_weak_owners));
            }
            v48 = v11 + 1;
            *(_QWORD *)&buf = v38;
            *((_QWORD *)&buf + 1) = 0x40000000;
            v61 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds3abm15BindMuxDataPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            v62 = &unk_1E66D62B0;
            v63 = v46;
            v43 = _Block_copy(&buf);
            aBlock = v43;
            if (v50)
            {
              qmi::Client::send();
              v43 = aBlock;
            }
            if (v43)
              _Block_release(v43);
            if (v47)
              std::__shared_weak_count::__release_weak(v47);
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v54);
          }
          qmi::Client::~Client((qmi::Client *)&v56);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v45 = __ldaxr(p_shared_owners);
      while (__stlxr(v45 - 1, p_shared_owners));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D008B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  qmi::Client::~Client((qmi::Client *)&a27);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v27 - 160);
  _Unwind_Resume(a1);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        v9 = *(NSObject **)(v5 + 40);
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v10 = *(unsigned __int8 *)(a1 + 56);
            *(_DWORD *)buf = 67109378;
            v15 = v10;
            v16 = 2080;
            v17 = qmi::asString();
            _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "Error binding to mux data port %u: %s", buf, 0x12u);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *(unsigned __int8 *)(a1 + 56);
          *(_DWORD *)buf = 67109120;
          v15 = v11;
          _os_log_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEFAULT, "#I Binded to mux data port %u", buf, 8u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D00A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *(_QWORD *)(a2 + 88);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
}

void sub_1B3D00B60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3)
      return;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 56));
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
LABEL_5:
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN5radio22QMIHealthCommandDriver4initERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke_21(uint64_t a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int128 v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  void **v13;
  void *__p[2];
  char v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    v19 = v6;
    if (v6)
    {
      v7 = v6;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_11;
      *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v16 = v8;
      v17 = v8;
      qmi::Client::Client();
      if (!(_QWORD)v17)
      {
LABEL_10:
        qmi::Client::~Client((qmi::Client *)&v16);
LABEL_11:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      qmi::Client::stop((qmi::Client *)&v16);
      if (a2)
      {
        xpc_retain(a2);
        v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_16;
      }
      else
      {
        a2 = xpc_null_create();
        v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
LABEL_16:
          v12 = (_QWORD *)(a1 + 72);
          if (*(char *)(a1 + 95) < 0)
            v12 = (_QWORD *)*v12;
          xpc::object::describe((xpc::object *)__p, (uint64_t)a2);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315394;
          v21 = v12;
          v22 = 2080;
          v23 = v13;
          _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "server error on %s:\n%s", buf, 0x16u);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
      xpc_release(a2);
      goto LABEL_10;
    }
  }
}

void sub_1B3D00D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  xpc_release(v17);
  qmi::Client::~Client((qmi::Client *)&a13);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void xpc::object::describe(xpc::object *this, uint64_t a2)
{
  char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc::object *v8;

  v3 = (char *)MEMORY[0x1B5E2FB34](a2);
  memset(this, 170, 24);
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = (xpc::object *)operator new(v6 + 1);
    *((_QWORD *)this + 1) = v5;
    *((_QWORD *)this + 2) = v7 | 0x8000000000000000;
    *(_QWORD *)this = v8;
    this = v8;
    goto LABEL_9;
  }
  *((_BYTE *)this + 23) = v4;
  if (v4)
  {
LABEL_9:
    memcpy(this, v3, v5);
    *((_BYTE *)this + v5) = 0;
    free(v3);
    return;
  }
  *(_BYTE *)this = 0;
  free(v3);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;

  v3 = *(_QWORD *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1B3D00F28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = *(std::__shared_weak_count **)(v1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    v4 = *(std::__shared_weak_count **)(v1 + 48);
    if (!v4)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(std::__shared_weak_count **)(v1 + 48);
    if (!v4)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio19HealthCommandDriverEEE56c42_ZTSNSt3__18weak_ptrIN3qmi6Client5StateEEE72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
LABEL_4:
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void radio::QMIHealthCommandDriver::updateDataStats(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *v6;
  uint64_t *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[5];
  void *aBlock;
  dispatch_object_t object;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v15[3] = &__block_descriptor_tmp_36_1;
  v15[4] = a1;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = (uint64_t *)(a1 + 72);
  v8 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  v9 = (std::__shared_weak_count *)a2[1];
  v18 = *a2;
  v19 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  ctu::SharedSynchronizable<radio::HealthCommandDriver>::execute_wrapped(v7, (uint64_t)v15);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  char *v25;
  char *v26;
  const void **v27;
  void *v28;
  _BYTE *v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  const void **v51;
  void *v52;
  _BYTE *v53;
  _BYTE *v54;
  char *v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  _OWORD *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  NSObject *v72;
  void *v73;
  _QWORD *v74;
  _QWORD *v75;
  BOOL v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  NSObject *v81;
  unint64_t *p_shared_owners;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  std::ios_base *v94;
  uint64_t v95;
  _QWORD *v96;
  NSObject *v97;
  uint64_t *v98;
  size_t v99;
  void **v100;
  uint64_t v101;
  const void **v102;
  const void *v103;
  uint64_t v104;
  uint64_t v105;
  const void *v106;
  void *v107;
  NSObject *v108;
  void *v109;
  uint64_t *v110;
  const void *v111;
  NSObject *v112;
  size_t v113;
  __int128 *v114;
  uint64_t v115;
  const void **v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD **v120;
  uint64_t v121;
  NSObject *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD block[6];
  std::__shared_weak_count *v126;
  _QWORD v127[6];
  dispatch_group_t group;
  dispatch_group_t v129;
  _QWORD v130[2];
  void (*v131)(_QWORD *, char *);
  void *v132;
  unint64_t v133;
  int v134;
  _QWORD v135[2];
  uint64_t (*v136)(uint64_t, uint64_t);
  void *v137;
  uint64_t v138;
  _BOOL4 v139;
  __int128 v140;
  __int128 v141;
  void *__dst[2];
  unint64_t v143;
  CFTypeRef cf;
  uint8_t buf[8];
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 __p;
  __int128 v151;
  _OWORD v152[10];
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  __n128 (*v158)(uint64_t, uint64_t);
  void (*v159)(uint64_t);
  void *aBlock;
  dispatch_object_t object;
  __int128 *v162;
  uint64_t v163;
  int64_t v164;
  void *v165;
  void *v166;
  CFTypeRef v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v155 = 0;
  v156 = &v155;
  v157 = 0x3802000000;
  v158 = __Block_byref_object_copy__1;
  v159 = __Block_byref_object_dispose__1;
  aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = a1[6];
  aBlock = v2;
  object = v4;
  if (v4)
    dispatch_retain(v4);
  if (*(_BYTE *)(v3 + 176) || *(_DWORD *)(v3 + 184))
  {
    v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Skipping, in low power", buf, 2u);
    }
    goto LABEL_9;
  }
  v6 = dispatch_group_create();
  v153 = 0xAAAAAAAAAAAAAAAALL;
  v154 = -1431655766;
  v122 = v6;
  radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)&v153);
  v7 = (_QWORD *)a1[7];
  v8 = (_QWORD *)*v7;
  v9 = MEMORY[0x1E0C809B0];
  v124 = v7 + 1;
  if ((_QWORD *)*v7 == v7 + 1)
  {
LABEL_126:
    v77 = *(std::__shared_weak_count **)(v3 + 80);
    if (!v77 || (v78 = *(_QWORD *)(v3 + 72), (v79 = std::__shared_weak_count::lock(v77)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v80 = v79;
    v81 = *(NSObject **)(v3 + 88);
    block[0] = v9;
    block[1] = 1174405120;
    block[2] = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_34;
    block[3] = &unk_1E66D5FC8;
    block[5] = v78;
    v126 = v79;
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v83 = __ldxr(p_shared_owners);
    while (__stxr(v83 + 1, p_shared_owners));
    block[4] = &v155;
    dispatch_group_notify(v6, v81, block);
    v84 = v126;
    if (v126)
    {
      v85 = (unint64_t *)&v126->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    goto LABEL_181;
  }
  v10 = *(_QWORD *)(a1[7] + 16);
  v11 = (_QWORD *)(v3 + 152);
  v121 = v3;
  v123 = (_QWORD *)(v3 + 152);
  while (1)
  {
    v12 = *((_DWORD *)v8 + 7);
    v13 = *v11;
    if (!*v11)
      break;
    v14 = v8[4];
    v15 = *((_DWORD *)v8 + 10);
    v16 = v11;
    do
    {
      v17 = *(_DWORD *)(v13 + 32);
      v18 = v17 >= v12;
      if (v17 >= v12)
        v19 = (uint64_t *)v13;
      else
        v19 = (uint64_t *)(v13 + 8);
      if (v18)
        v16 = (_QWORD *)v13;
      v13 = *v19;
    }
    while (*v19);
    if (v16 == v11 || v12 < *((_DWORD *)v16 + 8))
      break;
    v168 = 0uLL;
    v21 = v16[7];
    v20 = v16[8];
    v169 = v21;
    v170 = v20;
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v140 = v24;
    v141 = v24;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v140);
    LODWORD(v153) = v153 + v14;
    HIDWORD(v153) += HIDWORD(v14);
    if (v15)
      v154 = 1;
    v135[0] = v9;
    v135[1] = 0x40000000;
    v136 = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_27;
    v137 = &__block_descriptor_tmp_29_0;
    v138 = v14;
    v139 = v15 != 0;
    v26 = (char *)*((_QWORD *)&v140 + 1);
    v25 = (char *)v141;
    v27 = (const void **)*((_QWORD *)&v140 + 1);
    if (*((_QWORD *)&v140 + 1) != (_QWORD)v141)
    {
      v27 = (const void **)*((_QWORD *)&v140 + 1);
      while (*((_BYTE *)*v27 + 8) != 1)
      {
        if (++v27 == (const void **)v141)
          goto LABEL_41;
      }
    }
    if (v27 == (const void **)v141)
    {
LABEL_41:
      v29 = operator new(0x18uLL);
      v30 = v29;
      v29[8] = 1;
      *(_QWORD *)v29 = off_1E66D6348;
      *((_DWORD *)v29 + 3) = 0;
      v31 = v29 + 12;
      *((_QWORD *)v29 + 2) = 0;
      if ((unint64_t)v25 < *((_QWORD *)&v141 + 1))
      {
        v32 = v10;
        *(_QWORD *)v25 = v29;
        v33 = (uint64_t)(v25 + 8);
LABEL_63:
        *(_QWORD *)&v141 = v33;
        v9 = MEMORY[0x1E0C809B0];
        v10 = v32;
        v3 = v121;
        v6 = v122;
        v136((uint64_t)v135, (uint64_t)v31);
        goto LABEL_64;
      }
      v34 = v25 - v26;
      v35 = (v25 - v26) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        goto LABEL_203;
      v37 = *((_QWORD *)&v141 + 1) - (_QWORD)v26;
      if ((uint64_t)(*((_QWORD *)&v141 + 1) - (_QWORD)v26) >> 2 > v36)
        v36 = v37 >> 2;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
        v38 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        if (v38 >> 61)
          goto LABEL_204;
        v39 = operator new(8 * v38);
        v32 = v10;
        v40 = &v39[8 * v35];
        *v40 = v30;
        v33 = (uint64_t)(v40 + 1);
        if (v26 == v25)
          goto LABEL_61;
LABEL_54:
        if ((unint64_t)(v34 - 8) < 0x58)
          goto LABEL_210;
        if ((unint64_t)(v26 - v39) < 0x20)
          goto LABEL_210;
        v41 = ((unint64_t)(v34 - 8) >> 3) + 1;
        v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
        v43 = &v25[-v42];
        v40 = (_QWORD *)((char *)v40 - v42);
        v44 = &v39[8 * v35 - 16];
        v45 = v25 - 16;
        v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *(_OWORD *)v45;
          *(v44 - 1) = *((_OWORD *)v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 32;
          v46 -= 4;
        }
        while (v46);
        v25 = v43;
        if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_210:
          do
          {
            v48 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *--v40 = v48;
          }
          while (v25 != v26);
        }
        v26 = (char *)*((_QWORD *)&v140 + 1);
      }
      else
      {
        v32 = v10;
        v39 = 0;
        v40 = (_QWORD *)(8 * v35);
        *(_QWORD *)(8 * v35) = v30;
        v33 = 8 * v35 + 8;
        if (v26 != v25)
          goto LABEL_54;
      }
LABEL_61:
      *((_QWORD *)&v140 + 1) = v40;
      *(_QWORD *)&v141 = v33;
      *((_QWORD *)&v141 + 1) = &v39[8 * v38];
      if (v26)
        operator delete(v26);
      goto LABEL_63;
    }
    if (!v28)
      goto LABEL_202;
    ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_27((uint64_t)v135, (uint64_t)v28 + 12);
LABEL_64:
    if (!--v10)
    {
      v130[0] = v9;
      v130[1] = 0x40000000;
      v131 = (void (*)(_QWORD *, char *))___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
      v132 = &__block_descriptor_tmp_31_0;
      v133 = v153;
      v134 = v154;
      v50 = (char *)*((_QWORD *)&v140 + 1);
      v49 = (char *)v141;
      v51 = (const void **)*((_QWORD *)&v140 + 1);
      if (*((_QWORD *)&v140 + 1) != (_QWORD)v141)
      {
        v51 = (const void **)*((_QWORD *)&v140 + 1);
        while (*((_BYTE *)*v51 + 8) != 16)
        {
          if (++v51 == (const void **)v141)
            goto LABEL_73;
        }
      }
      if (v51 != (const void **)v141)
      {
        if (!v52)
LABEL_202:
          __cxa_bad_cast();
        ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2((uint64_t)v130, (uint64_t)v52 + 12);
        goto LABEL_96;
      }
LABEL_73:
      v53 = operator new(0x18uLL);
      v54 = v53;
      v53[8] = 16;
      *(_QWORD *)v53 = off_1E66D6398;
      *((_DWORD *)v53 + 3) = 0;
      v55 = v53 + 12;
      *((_QWORD *)v53 + 2) = 0;
      if ((unint64_t)v49 < *((_QWORD *)&v141 + 1))
      {
        *(_QWORD *)v49 = v53;
        v56 = (uint64_t)(v49 + 8);
LABEL_95:
        *(_QWORD *)&v141 = v56;
        v9 = MEMORY[0x1E0C809B0];
        v10 = 0;
        v3 = v121;
        v6 = v122;
        v131(v130, v55);
        goto LABEL_96;
      }
      v57 = v49 - v50;
      v58 = (v49 - v50) >> 3;
      v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 61)
LABEL_203:
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v60 = *((_QWORD *)&v141 + 1) - (_QWORD)v50;
      if ((uint64_t)(*((_QWORD *)&v141 + 1) - (_QWORD)v50) >> 2 > v59)
        v59 = v60 >> 2;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (v61)
      {
        if (v61 >> 61)
LABEL_204:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v62 = operator new(8 * v61);
        v63 = &v62[8 * v58];
        *v63 = v54;
        v56 = (uint64_t)(v63 + 1);
        if (v50 == v49)
          goto LABEL_93;
LABEL_86:
        if ((unint64_t)(v57 - 8) < 0x58)
          goto LABEL_211;
        if ((unint64_t)(v50 - v62) < 0x20)
          goto LABEL_211;
        v64 = ((unint64_t)(v57 - 8) >> 3) + 1;
        v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
        v66 = &v49[-v65];
        v63 = (_QWORD *)((char *)v63 - v65);
        v67 = &v62[8 * v58 - 16];
        v68 = v49 - 16;
        v69 = v64 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v70 = *(_OWORD *)v68;
          *(v67 - 1) = *((_OWORD *)v68 - 1);
          *v67 = v70;
          v67 -= 2;
          v68 -= 32;
          v69 -= 4;
        }
        while (v69);
        v49 = v66;
        if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_211:
          do
          {
            v71 = *((_QWORD *)v49 - 1);
            v49 -= 8;
            *--v63 = v71;
          }
          while (v49 != v50);
        }
        v50 = (char *)*((_QWORD *)&v140 + 1);
      }
      else
      {
        v62 = 0;
        v63 = (_QWORD *)(8 * v58);
        *(_QWORD *)(8 * v58) = v54;
        v56 = 8 * v58 + 8;
        if (v50 != v49)
          goto LABEL_86;
      }
LABEL_93:
      *((_QWORD *)&v140 + 1) = v63;
      *(_QWORD *)&v141 = v56;
      *((_QWORD *)&v141 + 1) = &v62[8 * v61];
      if (v50)
        operator delete(v50);
      goto LABEL_95;
    }
LABEL_96:
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    v72 = *(NSObject **)(v3 + 168);
    if (v72)
    {
      dispatch_retain(*(dispatch_object_t *)(v3 + 168));
      dispatch_group_enter(v72);
    }
    v162 = &v168;
    v163 = QMIServiceMsg::create();
    LODWORD(v164) = 25000;
    v165 = 0;
    v166 = 0;
    v127[0] = v9;
    v127[1] = 1174405120;
    v127[2] = ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
    v127[3] = &unk_1E66D5F90;
    v127[5] = v3;
    group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      if (group)
        dispatch_group_enter(group);
    }
    v129 = v72;
    if (v72)
    {
      dispatch_retain(v72);
      if (v129)
        dispatch_group_enter(v129);
    }
    v127[4] = &v155;
    *(_QWORD *)buf = v9;
    *(_QWORD *)&v146 = 0x40000000;
    *((_QWORD *)&v146 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds3abm9LinkStats8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    *(_QWORD *)&v147 = &unk_1E66D63C8;
    *((_QWORD *)&v147 + 1) = v127;
    v73 = _Block_copy(buf);
    v166 = v73;
    if (v163)
    {
      qmi::Client::send();
      v73 = v166;
    }
    if (v73)
      _Block_release(v73);
    if (v129)
    {
      dispatch_group_leave(v129);
      if (v129)
        dispatch_release(v129);
    }
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v72)
    {
      dispatch_group_leave(v72);
      dispatch_release(v72);
    }
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v140);
    qmi::Client::~Client((qmi::Client *)&v168);
    v74 = (_QWORD *)v8[1];
    if (v74)
    {
      do
      {
        v75 = v74;
        v74 = (_QWORD *)*v74;
      }
      while (v74);
    }
    else
    {
      do
      {
        v75 = (_QWORD *)v8[2];
        v76 = *v75 == (_QWORD)v8;
        v8 = v75;
      }
      while (!v76);
    }
    v8 = v75;
    v11 = v123;
    if (v75 == v124)
      goto LABEL_126;
  }
  *(_QWORD *)&v88 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v88 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v152[0] = v88;
  v152[9] = v88;
  v152[8] = v88;
  v152[7] = v88;
  v152[6] = v88;
  v152[5] = v88;
  v152[4] = v88;
  v152[3] = v88;
  v152[2] = v88;
  v152[1] = v88;
  v151 = v88;
  __p = v88;
  v149 = v88;
  v148 = v88;
  v147 = v88;
  v146 = v88;
  v89 = MEMORY[0x1E0DE4FE0];
  v90 = MEMORY[0x1E0DE4FE0] + 64;
  v91 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v92 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v93 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *((_QWORD *)&v152[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)buf = v92;
  *(_QWORD *)&buf[*(_QWORD *)(v92 - 24)] = v93;
  v94 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v94, &v146);
  v94[1].__vftable = 0;
  v94[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v89 + 24;
  *((_QWORD *)&v152[0] + 1) = v90;
  std::streambuf::basic_streambuf();
  v95 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v146 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v151 = 0u;
  LODWORD(v152[0]) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Client for interface ", 21);
  v96 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" not present", 12);
  v97 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    goto LABEL_139;
  if ((v152[0] & 0x10) != 0)
  {
    v115 = *((_QWORD *)&v151 + 1);
    if (*((_QWORD *)&v151 + 1) < (unint64_t)v149)
    {
      *((_QWORD *)&v151 + 1) = v149;
      v115 = v149;
    }
    v116 = (const void **)&v148 + 1;
  }
  else
  {
    if ((v152[0] & 8) == 0)
    {
      v113 = 0;
      HIBYTE(v164) = 0;
      v114 = (__int128 *)&v162;
      goto LABEL_198;
    }
    v116 = (const void **)&v147;
    v115 = v148;
  }
  v117 = *v116;
  v113 = v115 - (_QWORD)*v116;
  if (v113 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v113 >= 0x17)
  {
    v118 = (v113 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v113 | 7) != 0x17)
      v118 = v113 | 7;
    v119 = v118 + 1;
    v114 = (__int128 *)operator new(v118 + 1);
    v163 = v113;
    v164 = v119 | 0x8000000000000000;
    v162 = v114;
  }
  else
  {
    HIBYTE(v164) = v115 - *(_BYTE *)v116;
    v114 = (__int128 *)&v162;
    if (!v113)
      goto LABEL_198;
  }
  memmove(v114, v117, v113);
LABEL_198:
  *((_BYTE *)v114 + v113) = 0;
  v120 = &v162;
  if (v164 < 0)
    v120 = (_OWORD **)v162;
  LODWORD(v168) = 136315138;
  *(_QWORD *)((char *)&v168 + 4) = v120;
  _os_log_error_impl(&dword_1B3CB3000, v97, OS_LOG_TYPE_ERROR, "Updating data stats failed: %s", (uint8_t *)&v168, 0xCu);
  if (SHIBYTE(v164) < 0)
    operator delete(v162);
LABEL_139:
  v98 = v156;
  if (v156[5] && v156[6])
  {
    if ((v152[0] & 0x10) != 0)
    {
      v101 = *((_QWORD *)&v151 + 1);
      if (*((_QWORD *)&v151 + 1) < (unint64_t)v149)
      {
        *((_QWORD *)&v151 + 1) = v149;
        v101 = v149;
      }
      v102 = (const void **)&v148 + 1;
    }
    else
    {
      if ((v152[0] & 8) == 0)
      {
        v99 = 0;
        HIBYTE(v143) = 0;
        v100 = __dst;
        goto LABEL_156;
      }
      v102 = (const void **)&v147;
      v101 = v148;
    }
    v103 = *v102;
    v99 = v101 - (_QWORD)*v102;
    if (v99 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v99 >= 0x17)
    {
      v104 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v99 | 7) != 0x17)
        v104 = v99 | 7;
      v105 = v104 + 1;
      v100 = (void **)operator new(v104 + 1);
      __dst[1] = (void *)v99;
      v143 = v105 | 0x8000000000000000;
      __dst[0] = v100;
    }
    else
    {
      HIBYTE(v143) = v101 - *(_BYTE *)v102;
      v100 = __dst;
      if (!v99)
      {
LABEL_156:
        *((_BYTE *)v100 + v99) = 0;
        CreateError();
        v106 = (const void *)v98[5];
        if (v106)
          v107 = _Block_copy(v106);
        else
          v107 = 0;
        v108 = v98[6];
        v162 = (__int128 *)MEMORY[0x1E0C809B0];
        v163 = 1174405120;
        v164 = (int64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
        v165 = &__block_descriptor_tmp_50_0;
        if (v107)
          v109 = _Block_copy(v107);
        else
          v109 = 0;
        v166 = v109;
        v167 = cf;
        if (cf)
          CFRetain(cf);
        dispatch_async(v108, &v162);
        if (v167)
          CFRelease(v167);
        if (v166)
          _Block_release(v166);
        if (v107)
          _Block_release(v107);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v143) < 0)
          operator delete(__dst[0]);
        v110 = v156;
        v111 = (const void *)v156[5];
        v156[5] = 0;
        if (v111)
          _Block_release(v111);
        v112 = v110[6];
        v110[6] = 0;
        if (v112)
          dispatch_release(v112);
        goto LABEL_178;
      }
    }
    memmove(v100, v103, v99);
    goto LABEL_156;
  }
LABEL_178:
  *(_QWORD *)buf = *v91;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v91[3];
  *(_QWORD *)&v146 = v95 + 16;
  if (SBYTE7(v151) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E2F6FC]((char *)v152 + 8);
  v6 = v122;
LABEL_181:
  if (v6)
    dispatch_release(v6);
LABEL_9:
  _Block_object_dispose(&v155, 8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3D01E88(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_27(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  *(_QWORD *)a2 = v2;
  return result;
}

uint64_t ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  *(_QWORD *)a2 = v2;
  return result;
}

void ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  CFTypeRef v6;
  uint64_t (*v7)(uint64_t);
  void *v8;
  NSObject *v9;
  uint64_t v10;
  const void *v11;
  NSObject *v12;
  CFTypeRef cf;
  void *__p[4];
  void *aBlock;
  CFTypeRef v16;

  v3 = *(_QWORD *)(a1 + 40);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "Setting link stats");
  radio::QMIHealthCommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(const void **)(v4 + 40);
    if (!v5)
      goto LABEL_30;
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(const void **)(v4 + 40);
    if (!v5)
      goto LABEL_30;
  }
  if (*(_QWORD *)(v4 + 48))
  {
    v6 = cf;
    v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v7 = 0;
    if (v7)
    {
      if (cf && (CFRetain(cf), (v5 = *(const void **)(v4 + 40)) == 0))
        v8 = 0;
      else
        v8 = _Block_copy(v5);
      v9 = *(NSObject **)(v4 + 48);
      __p[0] = (void *)MEMORY[0x1E0C809B0];
      __p[1] = (void *)1174405120;
      __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
      __p[3] = &__block_descriptor_tmp_50_0;
      if (v8)
      {
        aBlock = _Block_copy(v8);
        v16 = v6;
        if (!v6)
          goto LABEL_18;
      }
      else
      {
        aBlock = 0;
        v16 = v6;
        if (!v6)
        {
LABEL_18:
          dispatch_async(v9, __p);
          if (v16)
            CFRelease(v16);
          if (aBlock)
            _Block_release(aBlock);
          if (v8)
            _Block_release(v8);
          if (v6)
            CFRelease(v6);
          v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
          v11 = *(const void **)(v10 + 40);
          *(_QWORD *)(v10 + 40) = 0;
          if (v11)
            _Block_release(v11);
          v12 = *(NSObject **)(v10 + 48);
          *(_QWORD *)(v10 + 48) = 0;
          if (v12)
            dispatch_release(v12);
          goto LABEL_30;
        }
      }
      CFRetain(v6);
      goto LABEL_18;
    }
  }
LABEL_30:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D021E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 48);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = *(NSObject **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = *(NSObject **)(a1 + 56);
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = *(NSObject **)(a1 + 48);
    if (v5)
      dispatch_release(v5);
  }
}

void ___ZN5radio22QMIHealthCommandDriver15updateDataStatsENSt3__110shared_ptrIKNS1_3mapIjNS_19HealthCommandDriver9LinkStatsENS1_4lessIjEENS1_9allocatorINS1_4pairIKjS5_EEEEEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_34(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  const void *v4;
  NSObject *v5;
  CFTypeRef v6;
  _QWORD v7[4];
  void *aBlock;
  CFTypeRef cf;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v2 = *(const void **)(v1 + 40);
  if (!v2 || !*(_QWORD *)(v1 + 48))
    return;
  v3 = _Block_copy(v2);
  v4 = v3;
  v5 = *(NSObject **)(v1 + 48);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
  v7[3] = &__block_descriptor_tmp_50_0;
  if (v3)
  {
    aBlock = _Block_copy(v3);
    cf = 0;
    dispatch_async(v5, v7);
    v6 = cf;
    if (!cf)
      goto LABEL_8;
    goto LABEL_7;
  }
  aBlock = 0;
  cf = 0;
  dispatch_async(v5, v7);
  v6 = cf;
  if (cf)
LABEL_7:
    CFRelease(v6);
LABEL_8:
  if (aBlock)
    _Block_release(aBlock);
  if (v4)
    _Block_release(v4);
}

uint64_t __copy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __copy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE56c121_ZTSNSt3__110shared_ptrIKNS_3mapIjN5radio19HealthCommandDriver9LinkStatsENS_4lessIjEENS_9allocatorINS_4pairIKjS4_EEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = (void *)a2[5];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = a2[6];
  a1[5] = v4;
  a1[6] = v5;
  if (v5)
    dispatch_retain(v5);
  v6 = a2[8];
  a1[7] = a2[7];
  a1[8] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE56c121_ZTSNSt3__110shared_ptrIKNS_3mapIjN5radio19HealthCommandDriver9LinkStatsENS_4lessIjEENS_9allocatorINS_4pairIKjS4_EEEEEEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const void *v6;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[6];
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)a1[5];
  if (v6)
    _Block_release(v6);
}

void radio::QMIHealthCommandDriver::enterLowPower(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;

  if (*(_QWORD *)a2)
  {
    v4 = _Block_copy(*(const void **)a2);
    v5 = *(NSObject **)(a2 + 8);
    v6 = v4;
    v7 = v5;
    if (v5)
      goto LABEL_3;
LABEL_6:
    radio::QMIHealthCommandDriver::handlePowerStateChange(a1, 1, (uint64_t)&v6);
    if (!v4)
      return;
    goto LABEL_7;
  }
  v4 = 0;
  v5 = *(NSObject **)(a2 + 8);
  v6 = 0;
  v7 = v5;
  if (!v5)
    goto LABEL_6;
LABEL_3:
  dispatch_retain(v5);
  radio::QMIHealthCommandDriver::handlePowerStateChange(a1, 1, (uint64_t)&v6);
  dispatch_release(v5);
  if (v4)
LABEL_7:
    _Block_release(v4);
}

void radio::QMIHealthCommandDriver::handlePowerStateChange(uint64_t a1, char a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  _QWORD v8[6];
  char v9;
  _QWORD v10[5];
  void *aBlock;
  dispatch_object_t object;

  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3802000000;
  v10[3] = __Block_byref_object_copy__1;
  v10[4] = __Block_byref_object_dispose__1;
  aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &unk_1E66D60A0;
  v9 = a2;
  v8[4] = v10;
  v8[5] = a1;
  ctu::SharedSynchronizable<radio::HealthCommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v8);
  _Block_object_dispose(v10, 8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void radio::QMIHealthCommandDriver::exitLowPower(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;

  if (*(_QWORD *)a2)
  {
    v4 = _Block_copy(*(const void **)a2);
    v5 = *(NSObject **)(a2 + 8);
    v6 = v4;
    v7 = v5;
    if (v5)
      goto LABEL_3;
LABEL_6:
    radio::QMIHealthCommandDriver::handlePowerStateChange(a1, 0, (uint64_t)&v6);
    if (!v4)
      return;
    goto LABEL_7;
  }
  v4 = 0;
  v5 = *(NSObject **)(a2 + 8);
  v6 = 0;
  v7 = v5;
  if (!v5)
    goto LABEL_6;
LABEL_3:
  dispatch_retain(v5);
  radio::QMIHealthCommandDriver::handlePowerStateChange(a1, 0, (uint64_t)&v6);
  dispatch_release(v5);
  if (v4)
LABEL_7:
    _Block_release(v4);
}

void ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  dispatch_time_t v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD block[7];
  std::__shared_weak_count *v24;
  dispatch_object_t object;
  char v26;
  _QWORD handler[7];
  std::__shared_weak_count *v28;
  char v29;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  *(_BYTE *)(v2 + 176) = *(_BYTE *)(a1 + 48);
  v7 = dispatch_time(0, 5000000000);
  v8 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(v2 + 88));
  v9 = v8;
  v10 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  handler[3] = &unk_1E66D6030;
  handler[5] = v2;
  handler[6] = v4;
  v28 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  handler[4] = *(_QWORD *)(a1 + 32);
  v29 = *(_BYTE *)(a1 + 48);
  dispatch_source_set_event_handler(v8, handler);
  dispatch_source_set_timer(v9, v7, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  dispatch_activate(v9);
  v13 = *(NSObject **)(v2 + 168);
  v14 = *(NSObject **)(v2 + 88);
  block[0] = v10;
  block[1] = 1174405120;
  block[2] = ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_41;
  block[3] = &unk_1E66D6068;
  block[5] = v2;
  block[6] = v4;
  v24 = v6;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v26 = *(_BYTE *)(a1 + 48);
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_group_notify(v13, v14, block);
  if (object)
    dispatch_release(object);
  v16 = v24;
  if (v24)
  {
    v17 = (unint64_t *)&v24->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v9)
    dispatch_release(v9);
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  std::string::size_type v13;
  std::string *p_dst;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  std::string *v19;
  const void *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  CFTypeRef v24;
  uint64_t v25;
  const void *v26;
  NSObject *v27;
  std::string __p;
  CFTypeRef cf;
  std::string __dst;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE buf[24];
  void *v51;
  const void *v52;
  CFTypeRef v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v49 = v3;
  v48 = v3;
  v47 = v3;
  v46 = v3;
  v45 = v3;
  v44 = v3;
  v43 = v3;
  v42 = v3;
  v41 = v3;
  v38 = v3;
  v37 = v3;
  v35 = v3;
  v36 = v3;
  v33 = v3;
  v34 = v3;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v32 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v32 + *(_QWORD *)(v32 - 24));
  std::ios_base::init(v8, &v33);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v32 = v4 + 24;
  v40 = v5;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v33 = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  LODWORD(v39) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"timeout with timeout ", 21);
  std::ostream::operator<<();
  memset(&__dst, 170, sizeof(__dst));
  if ((v39 & 0x10) != 0)
  {
    v11 = *((_QWORD *)&v38 + 1);
    if (*((_QWORD *)&v38 + 1) < (unint64_t)v36)
    {
      *((_QWORD *)&v38 + 1) = v36;
      v11 = v36;
    }
    v12 = (const void *)*((_QWORD *)&v35 + 1);
    v13 = v11 - *((_QWORD *)&v35 + 1);
    if ((unint64_t)(v11 - *((_QWORD *)&v35 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_21;
  }
  else
  {
    if ((v39 & 8) == 0)
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 0;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (!*(_QWORD *)(v10 + 40))
        goto LABEL_52;
      goto LABEL_16;
    }
    v12 = (const void *)v34;
    v13 = v35 - v34;
    if ((_QWORD)v35 - (_QWORD)v34 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_21:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    p_dst = (std::string *)operator new(v15 + 1);
    __dst.__r_.__value_.__l.__size_ = v13;
    __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_15:
    memmove(p_dst, v12, v13);
    p_dst->__r_.__value_.__s.__data_[v13] = 0;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (!*(_QWORD *)(v10 + 40))
      goto LABEL_52;
    goto LABEL_16;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13)
    goto LABEL_15;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (!*(_QWORD *)(v10 + 40))
    goto LABEL_52;
LABEL_16:
  if (!*(_QWORD *)(v10 + 48))
    goto LABEL_52;
  v17 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    if (*(_BYTE *)(a1 + 64))
      v18 = "Enter";
    else
      v18 = "Exit";
    v19 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v19;
    _os_log_error_impl(&dword_1B3CB3000, v17, OS_LOG_TYPE_ERROR, "%s failed with: %s", buf, 0x16u);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_19:
    __p = __dst;
    goto LABEL_29;
  }
  std::string::__init_copy_ctor_external(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_29:
  CreateError();
  v20 = *(const void **)(v10 + 40);
  if (v20)
    v21 = _Block_copy(v20);
  else
    v21 = 0;
  v22 = *(NSObject **)(v10 + 48);
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 1174405120;
  *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
  v51 = &__block_descriptor_tmp_50_0;
  if (!v21)
  {
    v24 = cf;
    v52 = 0;
    v53 = cf;
    if (!cf)
      goto LABEL_37;
    goto LABEL_36;
  }
  v23 = _Block_copy(v21);
  v24 = cf;
  v52 = v23;
  v53 = cf;
  if (cf)
LABEL_36:
    CFRetain(v24);
LABEL_37:
  dispatch_async(v22, buf);
  if (v53)
    CFRelease(v53);
  if (v52)
    _Block_release(v52);
  if (v21)
    _Block_release(v21);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v26 = *(const void **)(v25 + 40);
    *(_QWORD *)(v25 + 40) = 0;
    if (!v26)
      goto LABEL_50;
    goto LABEL_49;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v26 = *(const void **)(v25 + 40);
  *(_QWORD *)(v25 + 40) = 0;
  if (v26)
LABEL_49:
    _Block_release(v26);
LABEL_50:
  v27 = *(NSObject **)(v25 + 48);
  *(_QWORD *)(v25 + 48) = 0;
  if (v27)
    dispatch_release(v27);
LABEL_52:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v32 = *v6;
  *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = v6[3];
  *(_QWORD *)&v33 = v9 + 16;
  if (SBYTE7(v38) < 0)
    operator delete((void *)v37);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v40);
}

void sub_1B3D02E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_48c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN5radio22QMIHealthCommandDriver22handlePowerStateChangeEbN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_41(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  const void *v8;
  NSObject *v9;
  CFTypeRef v10;
  uint64_t v11;
  const void *v12;
  NSObject *v13;
  __int128 v14;
  void (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  CFTypeRef cf;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 72))
      v4 = "Enter";
    else
      v4 = "Exit";
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I %s completed", (uint8_t *)&v14, 0xCu);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(const void **)(v5 + 40);
  if (v6 && *(_QWORD *)(v5 + 48))
  {
    v7 = _Block_copy(v6);
    v8 = v7;
    v9 = *(NSObject **)(v5 + 48);
    *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v14 + 1) = 1174405120;
    v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0;
    v16 = &__block_descriptor_tmp_50_0;
    if (v7)
    {
      aBlock = _Block_copy(v7);
      cf = 0;
      dispatch_async(v9, &v14);
      v10 = cf;
      if (!cf)
        goto LABEL_13;
    }
    else
    {
      aBlock = 0;
      cf = 0;
      dispatch_async(v9, &v14);
      v10 = cf;
      if (!cf)
      {
LABEL_13:
        if (aBlock)
          _Block_release(aBlock);
        if (v8)
          _Block_release(v8);
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v12 = *(const void **)(v11 + 40);
        *(_QWORD *)(v11 + 40) = 0;
        if (v12)
          _Block_release(v12);
        v13 = *(NSObject **)(v11 + 48);
        *(_QWORD *)(v11 + 48) = 0;
        if (v13)
          dispatch_release(v13);
        return;
      }
    }
    CFRelease(v10);
    goto LABEL_13;
  }
}

void sub_1B3D030F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE64c22_ZTSN8dispatch6sourceE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;

  v2 = a2[7];
  a1[6] = a2[6];
  a1[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[8];
  a1[8] = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_48c55_ZTSNSt3__110shared_ptrIN5radio19HealthCommandDriverEEE64c22_ZTSN8dispatch6sourceE(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

uint64_t ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::HealthCommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)radio::HealthCommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66D61D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66D61D8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<radio::HealthCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D033E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D03404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<radio::QMIHealthCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIHealthCommandDriver,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6218;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D03520(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1}::operator() const(radio::QMIHealthCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D03540(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<radio::QMIHealthCommandDriver *,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver *)#1},std::allocator<radio::QMIHealthCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMIHealthCommandDriver *,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver *)#1},std::allocator<radio::QMIHealthCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1}::operator() const(radio::QMIHealthCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::QMIHealthCommandDriver *,std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver *)#1},std::allocator<radio::QMIHealthCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15make_shared_ptrINS1_22QMIHealthCommand"
                     "DriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15make_shared_ptrINS1_22QMIHe"
                                "althCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15make_shared_ptrINS1_22QMIHealthCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15make_shared_ptrINS1_22QMIHealthCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::QMIHealthCommandDriver> ctu::SharedSynchronizable<radio::HealthCommandDriver>::make_shared_ptr<radio::QMIHealthCommandDriver>(radio::QMIHealthCommandDriver*)::{lambda(radio::QMIHealthCommandDriver*)#1}::operator() const(radio::QMIHealthCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,qmi::Client>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,qmi::Client>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,qmi::Client>>>::destroy(a1[1]);
    qmi::Client::~Client((qmi::Client *)(a1 + 5));
    operator delete(a1);
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::MuxId>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::MuxId>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::MuxId>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D6280;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds3abm15BindMuxDataPort8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D03774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D03788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D037B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_0(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D0382C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStat>::getSize()
{
  return 12;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStat>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v3 + 11) = *(_DWORD *)(result + 20);
  *a2 = v3 + 12;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 9;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStat>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D6348;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  *((_DWORD *)result + 5) = *(_DWORD *)(a1 + 20);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStatCumulative>::getSize()
{
  return 12;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStatCumulative>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *(_DWORD *)(v3 + 7) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v3 + 11) = *(_DWORD *)(result + 20);
  *a2 = v3 + 12;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 9;
  return result;
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::abm::LinkStatCumulative>::clone(uint64_t a1)
{
  char *result;

  result = (char *)operator new(0x18uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D6398;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  *((_DWORD *)result + 5) = *(_DWORD *)(a1 + 20);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds3abm9LinkStats8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D03A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D03A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D03A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<radio::HealthCommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66D63F0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio19HealthCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio19HealthCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio19HealthCommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((_QWORD *)this + 9) = 0;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else
  {
LABEL_7:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_9:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v6)
      return;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*((void **)this + 3));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v6)
    return;
LABEL_10:
  std::__shared_weak_count::__release_weak(v6);
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  const char *v2;
  const char *v3;
  timespec v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned int v9;
  NSObject *global_queue;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v15[4];
  unsigned int v16;
  _QWORD handler[5];
  unsigned int v18;
  stat v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 48;
  v2 = (const char *)*((_QWORD *)this + 6);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0)
    v5 = (char *)this + 48;
  else
    v5 = v2;
  if (stat(v5, &v19))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1EDBEAA20 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_1EDBEAA20;
      if (os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
      {
LABEL_8:
        v8 = v3;
        if (*((char *)this + 71) < 0)
          v8 = *(const char **)v3;
        v19.st_dev = 136315138;
        *(_QWORD *)&v19.st_mode = v8;
        _os_log_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
      v7 = qword_1EDBEAA20;
      if (os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if (*((char *)this + 71) < 0)
    v3 = *(const char **)v3;
  v9 = open(v3, 0x8000);
  if ((v9 & 0x80000000) != 0)
    return 0;
  global_queue = dispatch_get_global_queue(17, 0);
  v11 = dispatch_source_create(MEMORY[0x1E0C80DE8], v9, 0x21uLL, global_queue);
  if (!v11)
  {
    close(v9);
    return 0;
  }
  v12 = v11;
  v13 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_0;
  handler[4] = this;
  v18 = v9;
  dispatch_source_set_event_handler(v11, handler);
  v15[0] = v13;
  v15[1] = 0x40000000;
  v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
  v15[3] = &__block_descriptor_tmp_9_2;
  v16 = v9;
  dispatch_source_set_cancel_handler(v12, v15);
  dispatch_activate(v12);
  return v12;
}

void ServerLogging::registerLogServer(uint64_t a1, ctu::LogServer *a2, std::__shared_weak_count *a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  os_unfair_lock_s *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = a2;
    *(_QWORD *)(a1 + 88) = a3;
    if (!v10)
    {
LABEL_7:
      if (!a2)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v8 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v10 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = a2;
    *(_QWORD *)(a1 + 88) = 0;
    if (!v10)
      goto LABEL_7;
  }
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    a2 = *(ctu::LogServer **)(a1 + 80);
    if (!a2)
      goto LABEL_17;
    goto LABEL_16;
  }
  a2 = *(ctu::LogServer **)(a1 + 80);
  if (a2)
LABEL_16:
    ctu::LogServer::setEnabled(a2);
LABEL_17:
  os_unfair_lock_unlock(v8);
  if (a3)
  {
    v13 = (unint64_t *)&a3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  char *v0;
  size_t v1;
  void *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *__dst[2];
  unint64_t v7;

  v0 = abm::trace::kTrashFolder;
  v1 = strlen(abm::trace::kTrashFolder);
  if (v1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17)
      v4 = v1 | 7;
    v5 = v4 + 1;
    v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  v3 = __dst;
  if (v1)
LABEL_8:
    memmove(v3, v0, (size_t)v2);
  *((_BYTE *)v2 + (_QWORD)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0)
    operator delete(__dst[0]);
}

void sub_1B3D04168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1EDBEAA20 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1B3CB3000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v4 = qword_1EDBEAA20;
    if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_1);
    v4 = qword_1EDBEAA20;
    if (!os_log_type_enabled((os_log_t)qword_1EDBEAA20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  v5 = (_QWORD *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
    v5 = (_QWORD *)*v5;
  v7 = 136315138;
  v8 = v5;
  _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v7, 0xCu);
LABEL_7:
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(_QWORD *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(_QWORD *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  capabilities::abs *v10;
  uint64_t v11;
  std::string *v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  int v15;
  char *v16;
  std::string::size_type v17;
  ctu::LogServer **v18;
  void *v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t v27;
  std::string::size_type v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  size_t v37;
  void *v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const __CFString *v43;
  CFPropertyListRef v44;
  const __CFString *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  char *v60;
  size_t v61;
  std::string::size_type v62;
  void *p_block;
  uint64_t v64;
  uint64_t v65;
  NSObject *global_queue;
  capabilities::abs *v67;
  ctu::LogServer *v68;
  std::string::value_type *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  ctu::LogServer *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  const std::string::value_type *v92;
  int v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  std::string __p;
  _DWORD v97[2];
  std::string v98;
  void *__dst[2];
  int64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  std::string v103;
  std::string v104;
  _QWORD v105[2];
  CFPropertyListRef v106;
  std::string block;
  void *v108;
  uint64_t *v109;

  block.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&block.__r_.__value_.__r.__words[1] = xmmword_1B3DCC670;
  strcpy(block.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size = (std::__shared_weak_count *)v104.__r_.__value_.__l.__size_;
    if (!v104.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    size = (std::__shared_weak_count *)v104.__r_.__value_.__l.__size_;
    if (!v104.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  v8 = (unint64_t *)&size->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_9:
    if ((SHIBYTE(block.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
LABEL_10:
    operator delete(block.__r_.__value_.__l.__data_);
LABEL_11:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  v10 = (capabilities::abs *)pthread_mutex_lock(&stru_1EDBEA9C0);
  v11 = qword_1EDBEAA00;
  if (qword_1EDBEAA00)
    goto LABEL_127;
  capabilities::abs::logScratchPath(v10);
  v12 = std::string::append(&block, "/abm.scratch", 0xCuLL);
  v13 = (const std::string::value_type *)v12->__r_.__value_.__r.__words[0];
  v14 = v12->__r_.__value_.__l.__size_;
  v97[0] = v12->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v97 + 3) = *(_DWORD *)((char *)&v12->__r_.__value_.__r.__words[2] + 3);
  v15 = SHIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  memset(&__p, 170, sizeof(__p));
  v92 = v13;
  v93 = v15;
  capabilities::abs::logSnapshotPath((capabilities::abs *)v12);
  v16 = (char *)operator new(0x60uLL);
  v17 = (std::string::size_type)v16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_DWORD *)v16 + 4) = 0;
  if (v15 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v16 + 1, v13, v14);
  }
  else
  {
    *((_QWORD *)v16 + 3) = v13;
    *((_QWORD *)v16 + 4) = v14;
    *((_DWORD *)v16 + 10) = v97[0];
    *(_DWORD *)(v16 + 43) = *(_DWORD *)((char *)v97 + 3);
    v16[47] = v15;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v17 + 48), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v17 + 48) = __p;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  v18 = (ctu::LogServer **)(v17 + 80);
  pthread_mutex_lock(&_MergedGlobals);
  v19 = off_1EDBEA9B0;
  if (!off_1EDBEA9B0)
  {
    v20 = operator new(0x30uLL);
    MEMORY[0x1B5E2EE50](v20, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v20[3] = 0;
    v20[4] = 0;
    *((_DWORD *)v20 + 10) = 0;
    block.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    v21 = (std::__shared_weak_count *)operator new(0x20uLL);
    v22 = v21;
    v21->__shared_owners_ = 0;
    v23 = (unint64_t *)&v21->__shared_owners_;
    v21->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6520;
    v21->__shared_weak_owners_ = 0;
    v21[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
    block.__r_.__value_.__r.__words[0] = 0;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    v20[3] = v20;
    v20[4] = v21;
    do
      v27 = __ldaxr(v23);
    while (__stlxr(v27 - 1, v23));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v22);
    }
    v28 = block.__r_.__value_.__r.__words[0];
    if (block.__r_.__value_.__r.__words[0])
    {
      v29 = *(std::__shared_weak_count **)(block.__r_.__value_.__r.__words[0] + 32);
      if (v29)
        std::__shared_weak_count::__release_weak(v29);
      v30 = (void *)MEMORY[0x1B5E2EE5C](v28);
      operator delete(v30);
    }
    v31 = (std::__shared_weak_count *)off_1EDBEA9B8;
    off_1EDBEA9B0 = v20;
    off_1EDBEA9B8 = v22;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v19 = off_1EDBEA9B0;
  }
  v101 = v19;
  v102 = (std::__shared_weak_count *)off_1EDBEA9B8;
  if (off_1EDBEA9B8)
  {
    v34 = (unint64_t *)((char *)off_1EDBEA9B8 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  pthread_mutex_unlock(&_MergedGlobals);
  v36 = abm::trace::kCurrentSnapshotFolder;
  v37 = strlen(abm::trace::kCurrentSnapshotFolder);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v38 = (void *)v37;
  if (v37 >= 0x17)
  {
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    v39 = (void **)operator new(v40 + 1);
    __dst[1] = v38;
    v100 = v41 | 0x8000000000000000;
    __dst[0] = v39;
LABEL_54:
    memmove(v39, v36, (size_t)v38);
    *((_BYTE *)v38 + (_QWORD)v39) = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_55;
  }
  HIBYTE(v100) = v37;
  v39 = __dst;
  if (v37)
    goto LABEL_54;
  LOBYTE(__dst[0]) = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_50:
    v98 = __p;
    goto LABEL_56;
  }
LABEL_55:
  std::string::__init_copy_ctor_external(&v98, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_56:
  os_unfair_lock_lock((os_unfair_lock_t)v19 + 10);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v103, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v103 = v98;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v104, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v104 = v103;
  if (v100 >= 0)
    v42 = (const char *)__dst;
  else
    v42 = (const char *)__dst[0];
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&block, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    block = v104;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v105, v42);
  v43 = (const __CFString *)v105[0];
  v106 = 0;
  ctu::cf::convert_copy();
  v44 = v106;
  v105[1] = v106;
  if (v106)
  {
    v45 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(v43, v106, *((CFStringRef *)v19 + 1), *((CFStringRef *)v19 + 2), (CFStringRef)*MEMORY[0x1E0C9B250]);
    CFPreferencesSynchronize(*((CFStringRef *)v19 + 1), *((CFStringRef *)v19 + 2), v45);
    CFRelease(v44);
  }
  MEMORY[0x1B5E2EDFC](v105);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(block.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_72:
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_73;
      goto LABEL_79;
    }
  }
  else if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_72;
  }
  operator delete(v104.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    os_unfair_lock_unlock((os_unfair_lock_t)v19 + 10);
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_74;
    goto LABEL_80;
  }
LABEL_79:
  operator delete(v103.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock((os_unfair_lock_t)v19 + 10);
  if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_74:
    if ((SHIBYTE(v100) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_81;
  }
LABEL_80:
  operator delete(v98.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
LABEL_75:
    v46 = v102;
    if (!v102)
      goto LABEL_86;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(__dst[0]);
  v46 = v102;
  if (!v102)
    goto LABEL_86;
LABEL_82:
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
LABEL_86:
  block.__r_.__value_.__r.__words[0] = v17;
  v49 = (std::__shared_weak_count *)operator new(0x20uLL);
  v49->__shared_owners_ = 0;
  v50 = (unint64_t *)&v49->__shared_owners_;
  v49->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D64D0;
  v49->__shared_weak_owners_ = 0;
  v49[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
  block.__r_.__value_.__r.__words[0] = 0;
  v51 = *(std::__shared_weak_count **)(v17 + 8);
  if (v51)
  {
    if (v51->__shared_owners_ != -1)
      goto LABEL_99;
    do
      v52 = __ldxr(v50);
    while (__stxr(v52 + 1, v50));
    v53 = (unint64_t *)&v49->__shared_weak_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    *(_QWORD *)v17 = v17;
    *(_QWORD *)(v17 + 8) = v49;
    std::__shared_weak_count::__release_weak(v51);
  }
  else
  {
    do
      v55 = __ldxr(v50);
    while (__stxr(v55 + 1, v50));
    v56 = (unint64_t *)&v49->__shared_weak_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    *(_QWORD *)v17 = v17;
    *(_QWORD *)(v17 + 8) = v49;
  }
  do
    v58 = __ldaxr(v50);
  while (__stlxr(v58 - 1, v50));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
LABEL_99:
  if (block.__r_.__value_.__r.__words[0])
  {
    ServerLogging::~ServerLogging((ServerLogging *)block.__r_.__value_.__l.__data_);
    operator delete(v59);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 16));
  *(_QWORD *)(v17 + 72) = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v17);
  v60 = abm::trace::kTrashFolder;
  v61 = strlen(abm::trace::kTrashFolder);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v62 = v61;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    p_block = operator new(v64 + 1);
    block.__r_.__value_.__l.__size_ = v62;
    block.__r_.__value_.__r.__words[2] = v65 | 0x8000000000000000;
    block.__r_.__value_.__r.__words[0] = (std::string::size_type)p_block;
    goto LABEL_108;
  }
  *((_BYTE *)&block.__r_.__value_.__s + 23) = v61;
  p_block = &block;
  if (v61)
LABEL_108:
    memmove(p_block, v60, v62);
  *((_BYTE *)p_block + v62) = 0;
  support::fs::createDir((const char *)&block, 0x1EDu, 1);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
    operator delete(block.__r_.__value_.__l.__data_);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global);
  capabilities::abs::logScratchPath(v67);
  support::fs::createDir((const char *)&block, 0x1EDu, 1);
  if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(block.__r_.__value_.__l.__data_);
    v68 = *v18;
    if (!*v18)
      goto LABEL_116;
    goto LABEL_115;
  }
  v68 = *v18;
  if (*v18)
LABEL_115:
    ctu::LogServer::setEnabled(v68);
LABEL_116:
  os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 16));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v69 = (std::string::value_type *)v92;
    if ((v93 & 0x80000000) == 0)
    {
LABEL_118:
      v70 = (std::__shared_weak_count *)off_1EDBEAA08;
      qword_1EDBEAA00 = v17;
      off_1EDBEAA08 = v49;
      if (!v70)
        goto LABEL_126;
LABEL_122:
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
      goto LABEL_126;
    }
  }
  else
  {
    v69 = (std::string::value_type *)v92;
    if ((v93 & 0x80000000) == 0)
      goto LABEL_118;
  }
  operator delete(v69);
  v70 = (std::__shared_weak_count *)off_1EDBEAA08;
  qword_1EDBEAA00 = v17;
  off_1EDBEAA08 = v49;
  if (v70)
    goto LABEL_122;
LABEL_126:
  v11 = qword_1EDBEAA00;
LABEL_127:
  v73 = (std::__shared_weak_count *)off_1EDBEAA08;
  if (off_1EDBEAA08)
  {
    v74 = (unint64_t *)((char *)off_1EDBEAA08 + 8);
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
  }
  pthread_mutex_unlock(&stru_1EDBEA9C0);
  v76 = *(_QWORD *)(a1 + 32);
  v77 = *(ctu::LogServer **)v76;
  v78 = *(std::__shared_weak_count **)(v76 + 8);
  if (v78)
  {
    v79 = (unint64_t *)&v78->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
    ServerLogging::registerLogServer(v11, v77, v78);
    do
      v81 = __ldaxr(v79);
    while (__stlxr(v81 - 1, v79));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v11, v77, 0);
  }
  if (v73)
  {
    v82 = (unint64_t *)&v73->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v84 = *(uint64_t **)(a1 + 32);
  v86 = *v84;
  v85 = (std::__shared_weak_count *)v84[1];
  v94 = v86;
  v95 = v85;
  if (v85)
  {
    v87 = (unint64_t *)&v85->__shared_owners_;
    do
      v88 = __ldxr(v87);
    while (__stxr(v88 + 1, v87));
  }
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v108 = &__block_descriptor_tmp_6;
  v109 = &v94;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v89 = v95;
    if (!v95)
      return;
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v89 = v95;
    if (!v95)
      return;
  }
  v90 = (unint64_t *)&v89->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
}

void sub_1B3D04EA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, int a10, int a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((a37 & 0x80000000) == 0)
  {
LABEL_6:
    __clang_call_terminate(a1);
  }
  operator delete(a32);
  __clang_call_terminate(a1);
}

void sub_1B3D050BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  ServerLogging *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  ServerLogging *v1;
  void *v2;

  v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrI13ServerLoggingE27__shared_ptr_default_deleteIS1_S1_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t *std::unique_ptr<SharedData>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v4 = (void *)MEMORY[0x1B5E2EE5C](v2);
    operator delete(v4);
  }
  return a1;
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void *v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    v3 = (void *)MEMORY[0x1B5E2EE5C](v1);
    operator delete(v3);
  }
}

uint64_t std::__shared_ptr_pointer<SharedData *,std::shared_ptr<SharedData>::__shared_ptr_default_delete<SharedData,SharedData>,std::allocator<SharedData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrI10SharedDataE27__shared_ptr_default_deleteIS1_S1_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &_MergedGlobals, &dword_1B3CB3000);
  }
  return result;
}

uint64_t __cxx_global_var_init_10()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &stru_1EDBEA9C0, &dword_1B3CB3000);
  }
  return result;
}

uint64_t desense::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xD0uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  desense::QMICommandDriver::QMICommandDriver((uint64_t)v6, (uint64_t)&v22, (uint64_t)v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<desense::QMICommandDriver>::shared_ptr[abi:ne180100]<desense::QMICommandDriver,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 64))(*a3);
}

void sub_1B3D05468(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D0547C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t desense::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  desense::CommandDriver::CommandDriver();
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_1E66D6570;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 192), *(os_log_s **)(a1 + 40));
  return a1;
}

void sub_1B3D055BC(_Unwind_Exception *a1)
{
  void **v1;

  desense::CommandDriver::~CommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D055D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void desense::CommandDriver::~CommandDriver(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;

  *this = off_1E66D6840;
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  v2 = (std::__shared_weak_count *)this[20];
  if (!v2)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    this[16] = &off_1E66D6898;
    v5 = (unsigned int *)this[18];
    if (!v5)
      goto LABEL_16;
  }
  else
  {
LABEL_7:
    this[16] = &off_1E66D6898;
    v5 = (unsigned int *)this[18];
    if (!v5)
      goto LABEL_16;
  }
  v6 = v5 + 2;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    v9 = v5 + 3;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
  }
LABEL_16:
  this[13] = &off_1E66D6958;
  v12 = (unsigned int *)this[15];
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
      v16 = v12 + 3;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 24))(v12);
    }
  }
  *this = off_1E66D69C8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v19 = this[12];
  if (v19)
    dispatch_release(v19);
  v20 = this[11];
  if (v20)
    dispatch_release(v20);
  v21 = (std::__shared_weak_count *)this[10];
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void desense::QMICommandDriver::~QMICommandDriver(desense::QMICommandDriver *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint8_t v6[16];

  *(_QWORD *)this = off_1E66D6570;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v6, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    desense::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
LABEL_7:
    desense::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint8_t v6[16];

  *(_QWORD *)this = off_1E66D6570;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v6, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    desense::CommandDriver::~CommandDriver((void **)this);
  }
  else
  {
LABEL_7:
    desense::CommandDriver::~CommandDriver((void **)this);
  }
}

{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  uint8_t v7[16];

  *(_QWORD *)this = off_1E66D6570;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v7, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  desense::CommandDriver::~CommandDriver((void **)this);
  operator delete(v6);
}

void desense::QMICommandDriver::init(desense::QMICommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN7desense16QMICommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_3;
  v1[4] = this;
  ctu::SharedSynchronizable<desense::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN7desense16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  NSObject **v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t (***v36)();
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  char v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  uint64_t (**v46)();
  uint64_t v47;
  unint64_t v48;
  uint64_t (***v49)();
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  Registry::getServerConnection(*(Registry **)(v1 + 152));
  v46 = (uint64_t (**)())v1;
  v47 = 0xAAAAAAAAAAAAAAAALL;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  do
    v2 = __ldxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stxr(v2 + 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  v41 = 3;
  v3 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v3)
    goto LABEL_59;
  v4 = *(_QWORD *)(v1 + 72);
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_59;
  v6 = v5;
  v39 = v4;
  v40 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  qmi::ClientRouter::addLocal<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>,std::shared_ptr<BBServerConnection> const&>(v1 + 192, 1, "Desense.1", (uint64_t)&v41, (NSObject **)(v1 + 88), &v39, &v47);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  v11 = (_DWORD)v46 + 192;
  v12 = (NSObject **)(v46 + 11);
  if (v47)
  {
    v41 = 3;
    v13 = (std::__shared_weak_count *)v46[10];
    if (v13)
    {
      v14 = (uint64_t)v46[9];
      v15 = std::__shared_weak_count::lock(v13);
      if (v15)
      {
        v16 = v15;
        v39 = v14;
        v40 = v15;
        v17 = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        v19 = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v16);
        }
        qmi::ClientRouter::addLocal<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>,std::shared_ptr<BBServerConnection> const&>(v11, 2, "Desense.2", (uint64_t)&v41, v12, &v39, &v47);
        goto LABEL_32;
      }
    }
LABEL_59:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v41 = 3;
  v21 = (std::__shared_weak_count *)v46[10];
  if (!v21)
    goto LABEL_59;
  v22 = (uint64_t)v46[9];
  v23 = std::__shared_weak_count::lock(v21);
  if (!v23)
    goto LABEL_59;
  v24 = v23;
  v39 = v22;
  v40 = v23;
  v25 = (unint64_t *)&v23->__shared_weak_owners_;
  do
    v26 = __ldxr(v25);
  while (__stxr(v26 + 1, v25));
  v27 = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  qmi::ClientRouter::add<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>>(v11, 2, "Desense.2", (uint64_t)&v41, v12, &v39);
LABEL_32:
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  v29 = (std::__shared_weak_count *)v48;
  if (v48)
  {
    v30 = (unint64_t *)(v48 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v44[0] = off_1E66D6A58;
  v44[1] = v1;
  v45 = v44;
  qmi::ClientRouter::setHandler();
  v32 = v45;
  if (v45 == v44)
  {
    v33 = 4;
    v32 = v44;
  }
  else
  {
    if (!v45)
      goto LABEL_44;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_44:
  v42[0] = off_1E66D6BA8;
  v42[1] = v1;
  v43 = v42;
  qmi::ClientRouter::setHandler();
  v34 = v43;
  if (v43 == v42)
  {
    v35 = 4;
    v34 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_49;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_49:
  v46 = off_1E66D6C28;
  v47 = v1;
  v49 = &v46;
  qmi::ClientRouter::setIndHandlerInternal();
  v36 = v49;
  if (v49 == &v46)
  {
    v37 = 4;
    v36 = &v46;
    goto LABEL_53;
  }
  if (v49)
  {
    v37 = 5;
LABEL_53:
    (*v36)[v37]();
  }
  qmi::ClientRouter::start();
  do
    v38 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v38 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v38)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
}

void sub_1B3D05E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  _ZZZN7desense16QMICommandDriver4initEvEUb_EN3__3D1Ev((uint64_t)&a22);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZZZN7desense16QMICommandDriver4initEvEUb_EN3__3D1Ev(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void desense::QMICommandDriver::registerFrequencyReporting(uint64_t a1, int a2)
{
  _QWORD v2[5];
  int v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdE_block_invoke;
  v2[3] = &__block_descriptor_tmp_2;
  v2[4] = a1;
  v3 = a2;
  ctu::SharedSynchronizable<desense::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v2);
}

void ___ZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  NSObject *v4;
  __int128 v5;
  char *v6;
  char *v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  const void *v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  std::__shared_weak_count *v47;
  _QWORD aBlock[5];
  uint8_t buf[8];
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  void *v52;
  char *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  if (v2)
    v3 = 2 * (v2 == 1);
  else
    v3 = 1;
  v4 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Register for Frequency Reporting for subID %d", buf, 8u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44 = v5;
  v45 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v44);
  v6 = (char *)*((_QWORD *)&v44 + 1);
  v7 = (char *)v45;
  v8 = (const void **)*((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1) != (_QWORD)v45)
  {
    v8 = (const void **)*((_QWORD *)&v44 + 1);
    while (*((unsigned __int8 *)*v8 + 8) != 176)
    {
      if (++v8 == (const void **)v45)
        goto LABEL_14;
    }
  }
  if (v8 == (const void **)v45)
  {
LABEL_14:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[4] = 176;
    *(_QWORD *)v11 = off_1E66D6D08;
    if ((unint64_t)v7 < *((_QWORD *)&v45 + 1))
    {
      *(_QWORD *)v7 = v11;
      v13 = (uint64_t)(v7 + 8);
LABEL_27:
      v10 = (char *)v12 + 9;
      *(_QWORD *)&v45 = v13;
      goto LABEL_28;
    }
    v14 = v7 - v6;
    v15 = (v7 - v6) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v17 = *((_QWORD *)&v45 + 1) - (_QWORD)v6;
    if ((uint64_t)(*((_QWORD *)&v45 + 1) - (_QWORD)v6) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v12;
      v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_25:
        *((_QWORD *)&v44 + 1) = v20;
        *(_QWORD *)&v45 = v13;
        *((_QWORD *)&v45 + 1) = v21;
        if (!v6)
          goto LABEL_27;
LABEL_26:
        operator delete(v6);
        goto LABEL_27;
      }
    }
    else
    {
      v19 = 0;
      v20 = (_QWORD *)(8 * v15);
      v21 = 0;
      *(_QWORD *)(8 * v15) = v12;
      v13 = 8 * v15 + 8;
      if (v6 == v7)
        goto LABEL_25;
    }
    if ((unint64_t)(v14 - 8) < 0x58)
      goto LABEL_62;
    if ((unint64_t)(v6 - v19) < 0x20)
      goto LABEL_62;
    v36 = ((unint64_t)(v14 - 8) >> 3) + 1;
    v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
    v38 = &v7[-v37];
    v20 = (_QWORD *)((char *)v20 - v37);
    v39 = &v19[8 * v15 - 16];
    v40 = v7 - 16;
    v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v42 = *(_OWORD *)v40;
      *(v39 - 1) = *((_OWORD *)v40 - 1);
      *v39 = v42;
      v39 -= 2;
      v40 -= 32;
      v41 -= 4;
    }
    while (v41);
    v7 = v38;
    if (v36 != (v36 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v43 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v20 = v43;
      }
      while (v7 != v6);
    }
    v6 = (char *)*((_QWORD *)&v44 + 1);
    *((_QWORD *)&v44 + 1) = v20;
    *(_QWORD *)&v45 = v13;
    *((_QWORD *)&v45 + 1) = v21;
    if (!v6)
      goto LABEL_27;
    goto LABEL_26;
  }
  if (!v9)
    __cxa_bad_cast();
  v10 = v9 + 9;
LABEL_28:
  *v10 = 2;
  v22 = qmi::ClientRouter::get();
  v23 = operator new(0x28uLL);
  *v23 = v22;
  v23[1] = QMIServiceMsg::create();
  *((_DWORD *)v23 + 4) = 25000;
  v23[3] = 0;
  v23[4] = 0;
  v24 = operator new(0x28uLL);
  v24[1] = 0;
  v25 = v24 + 1;
  v24[2] = 0;
  *v24 = off_1E66D6D70;
  v24[3] = v1;
  *((_DWORD *)v24 + 8) = v3;
  v46 = (char *)(v24 + 3);
  v47 = (std::__shared_weak_count *)v24;
  v26 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v50 = 1174405120;
  v51 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6EEOS1_OT__block_invoke;
  v52 = &__block_descriptor_tmp_26_1;
  v53 = (char *)(v24 + 3);
  v54 = (std::__shared_weak_count *)v24;
  do
    v27 = __ldxr(v25);
  while (__stxr(v27 + 1, v25));
  aBlock[0] = v26;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  aBlock[3] = &unk_1E66D6DB8;
  aBlock[4] = buf;
  v23[4] = _Block_copy(aBlock);
  v28 = v54;
  if (v54)
  {
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = v47;
  if (!v47)
    goto LABEL_39;
  v32 = (unint64_t *)&v47->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v34 = v23;
    if (!v23)
      goto LABEL_45;
  }
  else
  {
LABEL_39:
    v34 = v23;
    if (!v23)
      goto LABEL_45;
  }
  if (v34[1])
    qmi::Client::send();
  v35 = (const void *)v34[4];
  if (v35)
    _Block_release(v35);
  operator delete(v34);
LABEL_45:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v44);
}

void sub_1B3D064A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D0650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D06520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::SendProxy::~SendProxy(qmi::ClientRouter::SendProxy *this)
{
  _QWORD *v1;
  const void *v2;

  v1 = (_QWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v1)
  {
    if (v1[1])
      qmi::Client::send();
    v2 = (const void *)v1[4];
    if (v2)
      _Block_release(v2);
    operator delete(v1);
  }
}

void desense::QMICommandDriver::setFrequencyReportingMode(uint64_t a1, int a2, char a3)
{
  NSObject *v6;
  __int128 v7;
  char *v8;
  char *v9;
  const void **v10;
  char *v11;
  _BYTE *v12;
  _WORD *v13;
  _WORD *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  const void *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  std::__shared_weak_count *v50;
  _QWORD aBlock[5];
  __int128 buf;
  void (*v53)(uint64_t, uint64_t);
  void *v54;
  char *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = desense::asString();
    _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Set Frequency reporting mode: %s", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = v7;
  v48 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v47);
  v8 = (char *)*((_QWORD *)&v47 + 1);
  v9 = (char *)v48;
  v10 = (const void **)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1) != (_QWORD)v48)
  {
    v10 = (const void **)*((_QWORD *)&v47 + 1);
    while (*((unsigned __int8 *)*v10 + 8) != 176)
    {
      if (++v10 == (const void **)v48)
        goto LABEL_11;
    }
  }
  if (v10 == (const void **)v48)
  {
LABEL_11:
    v13 = operator new(0x10uLL);
    v14 = v13;
    v13[4] = 176;
    *(_QWORD *)v13 = off_1E66D6E00;
    if ((unint64_t)v9 < *((_QWORD *)&v48 + 1))
    {
      *(_QWORD *)v9 = v13;
      v15 = (uint64_t)(v9 + 8);
LABEL_24:
      v12 = (char *)v14 + 9;
      *(_QWORD *)&v48 = v15;
      goto LABEL_25;
    }
    v16 = v9 - v8;
    v17 = (v9 - v8) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v19 = *((_QWORD *)&v48 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v48 + 1) - (_QWORD)v8) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v14;
      v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_22:
        *((_QWORD *)&v47 + 1) = v22;
        *(_QWORD *)&v48 = v15;
        *((_QWORD *)&v48 + 1) = v23;
        if (!v8)
          goto LABEL_24;
LABEL_23:
        operator delete(v8);
        goto LABEL_24;
      }
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v17);
      v23 = 0;
      *(_QWORD *)(8 * v17) = v14;
      v15 = 8 * v17 + 8;
      if (v8 == v9)
        goto LABEL_22;
    }
    if ((unint64_t)(v16 - 8) < 0x58)
      goto LABEL_62;
    if ((unint64_t)(v8 - v21) < 0x20)
      goto LABEL_62;
    v39 = ((unint64_t)(v16 - 8) >> 3) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v41 = &v9[-v40];
    v22 = (_QWORD *)((char *)v22 - v40);
    v42 = &v21[8 * v17 - 16];
    v43 = v9 - 16;
    v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *(_OWORD *)v43;
      *(v42 - 1) = *((_OWORD *)v43 - 1);
      *v42 = v45;
      v42 -= 2;
      v43 -= 32;
      v44 -= 4;
    }
    while (v44);
    v9 = v41;
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_62:
      do
      {
        v46 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v22 = v46;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v47 + 1);
    *((_QWORD *)&v47 + 1) = v22;
    *(_QWORD *)&v48 = v15;
    *((_QWORD *)&v48 + 1) = v23;
    if (!v8)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v11)
    __cxa_bad_cast();
  v12 = v11 + 9;
LABEL_25:
  *v12 = a3;
  if (a2)
    v24 = 2 * (a2 == 1);
  else
    v24 = 1;
  v25 = qmi::ClientRouter::get();
  v26 = operator new(0x28uLL);
  *v26 = v25;
  v26[1] = QMIServiceMsg::create();
  *((_DWORD *)v26 + 4) = 25000;
  v26[3] = 0;
  v26[4] = 0;
  v27 = operator new(0x28uLL);
  v27[1] = 0;
  v28 = v27 + 1;
  v27[2] = 0;
  *v27 = off_1E66D6E68;
  v27[3] = a1;
  *((_DWORD *)v27 + 8) = v24;
  v49 = (char *)(v27 + 3);
  v50 = (std::__shared_weak_count *)v27;
  v29 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
  *((_QWORD *)&buf + 1) = 1174405120;
  v53 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN7desense16QMICommandDriver25setFrequencyReportingModeEN4coex5SubIdENS3_22FrequencyReportingModeEE3__1EEOS1_OT__block_invoke;
  v54 = &__block_descriptor_tmp_28_0;
  v55 = (char *)(v27 + 3);
  v56 = (std::__shared_weak_count *)v27;
  do
    v30 = __ldxr(v28);
  while (__stxr(v30 + 1, v28));
  aBlock[0] = v29;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  aBlock[3] = &unk_1E66D6DB8;
  aBlock[4] = &buf;
  v26[4] = _Block_copy(aBlock);
  v31 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v50;
  if (!v50)
    goto LABEL_39;
  v35 = (unint64_t *)&v50->__shared_owners_;
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    v37 = v26;
    if (!v26)
      goto LABEL_45;
  }
  else
  {
LABEL_39:
    v37 = v26;
    if (!v26)
      goto LABEL_45;
  }
  if (v37[1])
    qmi::Client::send();
  v38 = (const void *)v37[4];
  if (v38)
    _Block_release(v38);
  operator delete(v37);
LABEL_45:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v47);
}

void sub_1B3D06A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D06A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D06A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void desense::QMICommandDriver::bindSubscription_sync(uint64_t a1, int a2)
{
  __int128 v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  BOOL *v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  const void *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[5];
  std::__shared_weak_count *v46;
  char *v47;
  std::__shared_weak_count *v48;
  _QWORD aBlock[5];

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43 = v4;
  v44 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v43);
  v5 = (char *)*((_QWORD *)&v43 + 1);
  v6 = (char *)v44;
  v7 = (const void **)*((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1) != (_QWORD)v44)
  {
    v7 = (const void **)*((_QWORD *)&v43 + 1);
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v44)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v44)
  {
LABEL_9:
    v10 = operator new(0x10uLL);
    v11 = v10;
    v10[4] = 1;
    *(_QWORD *)v10 = off_1E66D6ED0;
    if ((unint64_t)v6 < *((_QWORD *)&v44 + 1))
    {
      *(_QWORD *)v6 = v10;
      v12 = (uint64_t)(v6 + 8);
LABEL_22:
      v9 = (BOOL *)v11 + 9;
      *(_QWORD *)&v44 = v12;
      goto LABEL_23;
    }
    v13 = v6 - v5;
    v14 = (v6 - v5) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v44 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v44 + 1) - (_QWORD)v5) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v11;
      v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((_QWORD *)&v43 + 1) = v19;
        *(_QWORD *)&v44 = v12;
        *((_QWORD *)&v44 + 1) = v20;
        if (!v5)
          goto LABEL_22;
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v11;
      v12 = 8 * v14 + 8;
      if (v5 == v6)
        goto LABEL_20;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_57;
    if ((unint64_t)(v5 - v18) < 0x20)
      goto LABEL_57;
    v35 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v6[-v36];
    v19 = (_QWORD *)((char *)v19 - v36);
    v38 = &v18[8 * v14 - 16];
    v39 = v6 - 16;
    v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 32;
      v40 -= 4;
    }
    while (v40);
    v6 = v37;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v42 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v19 = v42;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v43 + 1);
    *((_QWORD *)&v43 + 1) = v19;
    *(_QWORD *)&v44 = v12;
    *((_QWORD *)&v44 + 1) = v20;
    if (!v5)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = (BOOL *)(v8 + 9);
LABEL_23:
  *v9 = a2 == 2;
  v21 = qmi::ClientRouter::get();
  v22 = operator new(0x28uLL);
  *v22 = v21;
  v22[1] = QMIServiceMsg::create();
  *((_DWORD *)v22 + 4) = 25000;
  v22[3] = 0;
  v22[4] = 0;
  v23 = operator new(0x28uLL);
  v23[1] = 0;
  v24 = v23 + 1;
  v23[2] = 0;
  *v23 = off_1E66D6F38;
  v23[3] = a1;
  *((_DWORD *)v23 + 8) = a2;
  v47 = (char *)(v23 + 3);
  v48 = (std::__shared_weak_count *)v23;
  v25 = MEMORY[0x1E0C809B0];
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 1174405120;
  v45[2] = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN7desense16QMICommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke;
  v45[3] = &__block_descriptor_tmp_29_1;
  v45[4] = v23 + 3;
  v46 = (std::__shared_weak_count *)v23;
  do
    v26 = __ldxr(v24);
  while (__stxr(v26 + 1, v24));
  aBlock[0] = v25;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas3abm16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D6F80;
  aBlock[4] = v45;
  v22[4] = _Block_copy(aBlock);
  v27 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v48;
  if (!v48)
    goto LABEL_34;
  v31 = (unint64_t *)&v48->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v33 = v22;
    if (!v22)
      goto LABEL_40;
  }
  else
  {
LABEL_34:
    v33 = v22;
    if (!v22)
      goto LABEL_40;
  }
  if (v33[1])
    qmi::Client::send();
  v34 = (const void *)v33[4];
  if (v34)
    _Block_release(v34);
  operator delete(v33);
LABEL_40:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v43);
}

void sub_1B3D06E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  qmi::ClientRouter::SendProxy::~SendProxy((qmi::ClientRouter::SendProxy *)&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D06ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  operator delete(v11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D06EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D06EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void desense::QMICommandDriver::addMultipleFrequenciesToMap_sync(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(a1, *(_QWORD *)v3, *(_DWORD *)(v3 + 8), 0, a3);
      v3 += 16;
    }
    while (v3 != v4);
  }
}

uint64_t *std::list<std::pair<unsigned long long,unsigned int>>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(_QWORD *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(_QWORD *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_6(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(_QWORD *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_7(uint64_t a1, uint64_t a2)
{
  desense::QMICommandDriver::addSingleFrequencyToMap_sync(*(_QWORD *)(a1 + 40), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), 0, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40));
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(_QWORD *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

void ___ZN7desense16QMICommandDriver24processFrequencyInd_syncEN4coex5SubIdERKN3nas3abm17SetFreqReportMode7RespIndE_block_invoke_9(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    do
    {
      desense::QMICommandDriver::addSingleFrequencyToMap_sync(v4, *(_QWORD *)v2, *(_DWORD *)(v2 + 8), 0, v5);
      v2 += 16;
    }
    while (v2 != v3);
  }
}

uint64_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(desense::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)desense::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66D6898;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66D6958;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66D6898;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66D6958;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66D69C8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66D69C8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

_QWORD *std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD **v25;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result + 1;
    v24 = a3;
    v25 = (_QWORD **)result;
    while (1)
    {
      v5 = (uint64_t *)result[1];
      v6 = v4;
      if ((_QWORD *)*result != v4)
      {
        v7 = (_QWORD *)result[1];
        v8 = v4;
        if (v5)
        {
          do
          {
            v6 = v7;
            v7 = (_QWORD *)v7[1];
          }
          while (v7);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v8[2];
            v9 = *v6 == (_QWORD)v8;
            v8 = v6;
          }
          while (v9);
        }
        v10 = v3[4];
        if (v6[4] >= v10)
          break;
      }
      if (v5)
        v11 = (uint64_t **)v6;
      else
        v11 = (uint64_t **)v4;
      if (v5)
        v12 = (uint64_t **)(v6 + 1);
      else
        v12 = (uint64_t **)v4;
      if (!*v12)
        goto LABEL_25;
LABEL_31:
      v22 = (_QWORD *)v3[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v3[2];
          v9 = *v23 == (_QWORD)v3;
          v3 = v23;
        }
        while (!v9);
      }
      v3 = v23;
      result = v25;
      if (v23 == a3)
        return result;
    }
    v12 = (uint64_t **)v4;
    v11 = (uint64_t **)v4;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v5;
          v13 = v5[4];
          if (v13 <= v10)
            break;
          v5 = *v11;
          v12 = v11;
          if (!*v11)
            goto LABEL_25;
        }
        if (v13 >= v10)
          goto LABEL_31;
        v5 = v11[1];
        if (!v5)
        {
          v12 = v11 + 1;
          break;
        }
      }
    }
LABEL_25:
    v14 = (uint64_t *)operator new(0x40uLL);
    v15 = v14;
    v16 = v14 + 5;
    v14[4] = v3[4];
    v14[5] = (uint64_t)(v14 + 5);
    v14[6] = (uint64_t)(v14 + 5);
    v14[7] = 0;
    v17 = v3[6];
    if ((_QWORD *)v17 != v3 + 5)
    {
      v18 = 1;
      v19 = v14 + 5;
      do
      {
        v20 = operator new(0x20uLL);
        v20[1] = *(_OWORD *)(v17 + 16);
        *(_QWORD *)v20 = v19;
        *((_QWORD *)v20 + 1) = v16;
        v19[1] = v20;
        v15[5] = (uint64_t)v20;
        v15[7] = v18;
        v17 = *(_QWORD *)(v17 + 8);
        ++v18;
        v19 = v20;
      }
      while ((_QWORD *)v17 != v3 + 5);
    }
    *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v11;
    *v12 = v15;
    v21 = (_QWORD *)**v25;
    if (v21)
    {
      *v25 = v21;
      v15 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25[1], v15);
    v25[2] = (_QWORD *)((char *)v25[2] + 1);
    a3 = v24;
    goto LABEL_31;
  }
  return result;
}

void ctu::Loggable<desense::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D07884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D078A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<desense::QMICommandDriver>::shared_ptr[abi:ne180100]<desense::QMICommandDriver,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6A08;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D079BC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1}::operator() const(desense::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D079DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<desense::QMICommandDriver *,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver *)#1},std::allocator<desense::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<desense::QMICommandDriver *,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver *)#1},std::allocator<desense::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1}::operator() const(desense::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<desense::QMICommandDriver *,std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver *)#1},std::allocator<desense::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEEN"
                     "St3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16QMIComman"
                                "dDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7desense13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<desense::QMICommandDriver> ctu::SharedSynchronizable<desense::CommandDriver>::make_shared_ptr<desense::QMICommandDriver>(desense::QMICommandDriver*)::{lambda(desense::QMICommandDriver*)#1}::operator() const(desense::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void qmi::ClientRouter::addLocal<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>,std::shared_ptr<BBServerConnection> const&>(int a1, int a2, char *__s, uint64_t a4, NSObject **a5, uint64_t *a6, uint64_t *a7)
{
  __int128 v11;
  size_t v12;
  void *v13;
  void **v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  _QWORD v33[2];
  __int128 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;
  dispatch_object_t object;
  void *__dst[2];
  unint64_t v43;
  __int128 v44;
  __int128 v45;

  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v45 = v11;
  v44 = v11;
  v12 = strlen(__s);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v26 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v26 = v12 | 7;
    v27 = v26 + 1;
    v14 = (void **)operator new(v26 + 1);
    __dst[1] = v13;
    v43 = v27 | 0x8000000000000000;
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(v43) = v12;
    v14 = __dst;
    if (!v12)
    {
      LOBYTE(__dst[0]) = 0;
      v15 = *a5;
      object = v15;
      if (!v15)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  memcpy(v14, __s, (size_t)v13);
  *((_BYTE *)v13 + (_QWORD)v14) = 0;
  v15 = *a5;
  object = v15;
  if (v15)
LABEL_5:
    dispatch_retain(v15);
LABEL_6:
  v40 = 12;
  v38 = 0;
  strcpy((char *)__p, "registration");
  v37 = 0;
  v16 = (std::__shared_weak_count *)a6[1];
  if (!v16)
  {
    *a6 = 0;
    a6[1] = 0;
    goto LABEL_24;
  }
  v17 = std::__shared_weak_count::lock(v16);
  if (!v17)
  {
    v37 = 0;
    v38 = 0;
    v25 = (std::__shared_weak_count *)a6[1];
    *a6 = 0;
    a6[1] = 0;
    if (!v25)
      goto LABEL_24;
    goto LABEL_23;
  }
  v18 = v17;
  v19 = *a6;
  p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v37 = v19;
  v38 = v17;
  v22 = (std::__shared_weak_count *)a6[1];
  *a6 = 0;
  a6[1] = 0;
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    v25 = v18;
LABEL_23:
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_24:
  v28 = (std::__shared_weak_count *)a7[1];
  v35 = *a7;
  v36 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  qmi::Client::createWithQueueLocal();
  if (v36)
  {
    v31 = &v36->__shared_owners_;
    do
      v32 = __ldaxr((unint64_t *)v31);
    while (__stlxr(v32 - 1, (unint64_t *)v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  if (v40 < 0)
    operator delete(__p[0]);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v43) < 0)
    operator delete(__dst[0]);
  v33[0] = 0;
  v33[1] = 0;
  v34 = v45;
  v45 = 0uLL;
  qmi::ClientRouter::addClient();
  qmi::Client::~Client((qmi::Client *)v33);
  qmi::ClientRouter::get();
  qmi::Client::~Client((qmi::Client *)&v44);
}

void sub_1B3D07D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  qmi::Client::~Client((qmi::Client *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D07D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,dispatch_object_t object,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  NSObject *v31;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a17)
  {
    std::__shared_weak_count::__release_weak(a17);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      v31 = object;
      if (!object)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  v31 = object;
  if (!object)
  {
LABEL_4:
    if (a30 < 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  dispatch_release(v31);
  if (a30 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_9:
  _Unwind_Resume(a1);
}

void qmi::ClientRouter::add<char const*,qmi::ServiceType,dispatch::queue const&,char const(&)[13],std::weak_ptr<desense::CommandDriver>>(int a1, int a2, char *__s, uint64_t a4, NSObject **a5, uint64_t *a6)
{
  __int128 v9;
  size_t v10;
  void *v11;
  void **v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  dispatch_object_t object;
  void *__dst[2];
  unint64_t v34;
  __int128 v35;
  __int128 v36;

  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = v9;
  v36 = v9;
  v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v24 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v24 = v10 | 7;
    v25 = v24 + 1;
    v12 = (void **)operator new(v24 + 1);
    __dst[1] = v11;
    v34 = v25 | 0x8000000000000000;
    __dst[0] = v12;
  }
  else
  {
    HIBYTE(v34) = v10;
    v12 = __dst;
    if (!v10)
    {
      LOBYTE(__dst[0]) = 0;
      v13 = *a5;
      object = v13;
      if (!v13)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  memcpy(v12, __s, (size_t)v11);
  *((_BYTE *)v11 + (_QWORD)v12) = 0;
  v13 = *a5;
  object = v13;
  if (v13)
LABEL_5:
    dispatch_retain(v13);
LABEL_6:
  v31 = 12;
  v29 = 0;
  strcpy((char *)__p, "registration");
  v28 = 0;
  v14 = (std::__shared_weak_count *)a6[1];
  if (!v14)
  {
    *a6 = 0;
    a6[1] = 0;
    goto LABEL_24;
  }
  v15 = std::__shared_weak_count::lock(v14);
  if (!v15)
  {
    v28 = 0;
    v29 = 0;
    v23 = (std::__shared_weak_count *)a6[1];
    *a6 = 0;
    a6[1] = 0;
    if (!v23)
      goto LABEL_24;
    goto LABEL_23;
  }
  v16 = v15;
  v17 = *a6;
  p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v28 = v17;
  v29 = v15;
  v20 = (std::__shared_weak_count *)a6[1];
  *a6 = 0;
  a6[1] = 0;
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    v23 = v16;
LABEL_23:
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_24:
  qmi::Client::createWithQueue();
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  if (v31 < 0)
    operator delete(__p[0]);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v34) < 0)
    operator delete(__dst[0]);
  v26[0] = 0;
  v26[1] = 0;
  v27 = v36;
  v36 = 0uLL;
  qmi::ClientRouter::addClient();
  qmi::Client::~Client((qmi::Client *)v26);
  qmi::ClientRouter::get();
  qmi::Client::~Client((qmi::Client *)&v35);
}

void sub_1B3D08040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::Client::~Client((qmi::Client *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D08064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  NSObject *v29;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      v29 = object;
      if (!object)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  v29 = object;
  if (!object)
  {
LABEL_4:
    if (a28 < 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  dispatch_release(v29);
  if (a28 < 0)
  {
LABEL_5:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_9:
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E66D6A58;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE7__cloneEPNS0_6__baseIS9_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E66D6A58;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEEclEOS8_(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t ***v6;
  int v7;
  __int128 v8;
  pthread_mutex_t *v9;
  uint64_t **v10;
  unsigned int v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  _QWORD v46[4];
  __int128 v47;
  __int128 v48;
  int v49;
  __int128 v50;
  __int128 v51;
  std::runtime_error v52;
  uint8_t buf[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Binding started for type %d", buf, 8u);
  }
  desense::QMICommandDriver::bindSubscription_sync(v2, v3);
  v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Desense started for type %d", buf, 8u);
  }
  v6 = *(uint64_t ****)(v2 + 112);
  if (v3 == 2)
    v7 = 1;
  else
    v7 = 2;
  if (v3 == 1)
    v7 = 0;
  v49 = v7;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v61 = v8;
  v62 = v8;
  v59 = v8;
  v60 = v8;
  v57 = v8;
  v58 = v8;
  v55 = v8;
  v56 = v8;
  v54 = v8;
  *(_OWORD *)buf = v8;
  v9 = (pthread_mutex_t *)v6[3];
  *(_QWORD *)&v63 = 10;
  *((_QWORD *)&v63 + 1) = buf;
  *(_QWORD *)&v64 = 0;
  *((_QWORD *)&v64 + 1) = v9;
  pthread_mutex_lock(v9);
  v10 = v6[1];
  if (!v10)
  {
    v15 = 0;
    v12 = *v6;
    goto LABEL_23;
  }
  v11 = atomic_load((unsigned int *)v10 + 2);
  v12 = *v6;
  if (v11 == 1)
  {
    v13 = *v12;
    v14 = (uint64_t)v6[2];
    if ((uint64_t *)v14 == *v12)
    {
      v14 = v13[1];
      *(_QWORD *)&v50 = v14;
      if (v13 == (uint64_t *)v14)
      {
LABEL_19:
        v6[2] = (uint64_t **)v14;
        goto LABEL_20;
      }
    }
    else
    {
      *(_QWORD *)&v50 = v6[2];
    }
    v16 = *(_QWORD *)(v14 + 16);
    if (*(_BYTE *)(v16 + 24))
    {
      v14 = *(_QWORD *)(v14 + 8);
    }
    else
    {
      v14 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(v13, (int *)(v16 + 64), (uint64_t **)&v50);
      v12 = *v6;
    }
    goto LABEL_19;
  }
LABEL_20:
  v15 = (unsigned int *)v6[1];
  if (v15)
  {
    v17 = v15 + 2;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
LABEL_23:
  pthread_mutex_unlock(*((pthread_mutex_t **)&v64 + 1));
  v19 = *((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    if ((uint64_t)v64 - 1 >= 0)
    {
      v20 = *((_QWORD *)&v63 + 1) + 16 * v64;
      do
      {
        v21 = *(unsigned int **)(v20 - 8);
        if (v21)
        {
          v22 = v21 + 2;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 16))(v21);
            v25 = v21 + 3;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
              (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 24))(v21);
          }
        }
        v20 -= 16;
      }
      while (v20 > v19);
    }
    if ((unint64_t)v63 >= 0xB)
      operator delete(*((void **)&v63 + 1));
  }
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)buf = v28;
  v66 = v28;
  v67 = v28;
  v64 = v28;
  v65 = v28;
  v62 = v28;
  v63 = v28;
  v60 = v28;
  v61 = v28;
  v58 = v28;
  v59 = v28;
  v56 = v28;
  v57 = v28;
  v54 = v28;
  v55 = v28;
  buf[0] = 0;
  v68 = 0xAAAAAAAAAAAAAAAALL;
  v69 = 10;
  v70 = &buf[8];
  v71 = 0;
  v72 = &v49;
  v73 = 0;
  v74 = 0;
  v29 = (uint64_t)*v12;
  *(_QWORD *)&v47 = (*v12)[1];
  *((_QWORD *)&v47 + 1) = v29;
  *(_QWORD *)&v48 = buf;
  *((_QWORD *)&v48 + 1) = v29;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v47);
  v46[0] = *v12;
  v46[1] = v46[0];
  v46[2] = buf;
  v46[3] = v46[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(v46);
  v50 = v47;
  v51 = v48;
  v30 = v46[0];
  v31 = v47;
  if ((_QWORD)v47 != v46[0])
  {
    v32 = (_BYTE *)v51;
    if (!*(_BYTE *)v51)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(v47 + 16) + 32);
      v34 = *(_QWORD *)(v33 + 24);
      if (!v34)
      {
        std::runtime_error::runtime_error(&v52, "call to empty boost::function");
        v52.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
        boost::throw_exception<boost::bad_function_call>(&v52);
      }
      (*(void (**)(uint64_t, _QWORD))((v34 & 0xFFFFFFFFFFFFFFFELL) + 8))(v33 + 32, **(unsigned int **)(v51 + 272));
      if (!*v32)
        *v32 = 1;
    }
    *(_QWORD *)&v50 = *(_QWORD *)(v31 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v50);
    v35 = v51;
    if (*(_BYTE *)v51)
      *(_BYTE *)v51 = 0;
    for (i = v50; (_QWORD)v50 != v30; i = v50)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
      v38 = *(_QWORD *)(v37 + 24);
      if (!v38)
      {
        std::runtime_error::runtime_error(&v52, "call to empty boost::function");
        v52.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
        boost::throw_exception<boost::bad_function_call>(&v52);
      }
      (*(void (**)(uint64_t, _QWORD))((v38 & 0xFFFFFFFFFFFFFFFELL) + 8))(v37 + 32, **(unsigned int **)(v35 + 272));
      if (!*(_BYTE *)v35)
        *(_BYTE *)v35 = 1;
      *(_QWORD *)&v50 = *(_QWORD *)(i + 8);
      boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(&v50);
      v35 = v51;
      if (*(_BYTE *)v51)
        *(_BYTE *)v51 = 0;
    }
  }
  if (HIDWORD(v73) > v73)
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v6, v29);
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)buf);
  if (v15)
  {
    v40 = v15 + 2;
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
      v43 = v15 + 3;
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v15 + 24))(v15);
    }
  }
  return result;
}

void sub_1B3D086A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unint64_t a45,char *__p,uint64_t a47,pthread_mutex_t *a48)
{
  char *v49;
  unsigned int *v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;

  pthread_mutex_unlock(a48);
  if (__p)
  {
    if (a47 - 1 >= 0)
    {
      v49 = &__p[16 * a47];
      do
      {
        v50 = (unsigned int *)*((_QWORD *)v49 - 1);
        if (v50)
        {
          v51 = v50 + 2;
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 16))(v50);
            v54 = v50 + 3;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
              (*(void (**)(unsigned int *))(*(_QWORD *)v50 + 24))(v50);
          }
        }
        v49 -= 16;
      }
      while (v49 > __p);
    }
    if (a45 >= 0xB)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1B3D08738(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::runtime_error a23)
{
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _DWORD v34[100];

  std::runtime_error::~runtime_error(&a23);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a19 + 16));
    __cxa_rethrow();
  }
  if (v34[71] > v34[70])
    boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v23, v25);
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)v34);
  if (v24)
  {
    v28 = v24 + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
      v31 = v24 + 3;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
    }
  }
  JUMPOUT(0x1B3D0890CLL);
}

void sub_1B3D08798(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD v12[100];

  __cxa_end_catch();
  if (a2 != 2)
  {
    if (v12[71] > v12[70])
      boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(v2, v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache((uint64_t)v12);
    if (v3)
    {
      v6 = v3 + 2;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v9 = v3 + 3;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    JUMPOUT(0x1B3D0890CLL);
  }
  JUMPOUT(0x1B3D08768);
}

void sub_1B3D087CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,unint64_t a45,char *a46,uint64_t a47)
{
  char *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;

  if (a46)
  {
    if (a47 - 1 >= 0)
    {
      v48 = &a46[16 * a47];
      do
      {
        v49 = (unsigned int *)*((_QWORD *)v48 - 1);
        if (v49)
        {
          v50 = v49 + 2;
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
            v53 = v49 + 3;
            do
            {
              v54 = __ldaxr(v53);
              v55 = v54 - 1;
            }
            while (__stlxr(v55, v53));
            if (!v55)
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
          }
        }
        v48 -= 16;
      }
      while (v48 > a46);
    }
    if (a45 >= 0xB)
    {
      operator delete(a46);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1B3D08904(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1B3D0890CLL);
  __clang_call_terminate(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7desense16QMICommandDriver4initEvEUb_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN7desense16QMICommandDriver4initEvEUb_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN7desense16QMICommandDriver4initEvEUb_E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7desense16QMICommandDriver4initEvEUb_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__0NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE11target_typeEv()
{
  return &_ZTIZZN7desense16QMICommandDriver4initEvEUb_E3__0;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 280);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 288);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 288);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 288) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 284);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 288);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 288) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_1B3D0938C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D093A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_1E66D6B38;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_1E66D6AD8;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3D09BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coex::SubId>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3D0A3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E66D6BA8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE7__cloneEPNS0_6__baseIS9_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E66D6BA8;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEEclEOS8_(uint64_t a1, unsigned __int8 *a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 8) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *a2;
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Client stopped for type %d", (uint8_t *)v5, 8u);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN7desense16QMICommandDriver4initEvEUb_E3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN7desense16QMICommandDriver4initEvEUb_E3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN7desense16QMICommandDriver4initEvEUb_E3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN7desense16QMICommandDriver4initEvEUb_E3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZZN7desense16QMICommandDriver4initEvEUb_E3__1NS_9allocatorIS4_EEFvN3qmi16SubscriptionTypeEEE11target_typeEv()
{
  return &_ZTIZZN7desense16QMICommandDriver4initEvEUb_E3__1;
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E66D6C28;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EE7__cloneEPNS0_6__baseISH_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E66D6C28;
  a2[1] = v2;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3$_4EEvtOT_EUlNS_16Su"
                     "bscriptionTypeERK13QMIServiceMsgE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3$_4EEvtOT"
                                "_EUlNS_16SubscriptionTypeERK13QMIServiceMsgE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3$_4EEvtOT_EUlNS_16SubscriptionTypeERK13QMIServiceMsgE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3$_4EEvtOT_EUlNS_16SubscriptionTypeERK13QMIServiceMsgE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS2_16SubscriptionTypeERK13QMIServiceMsgE_NS_9allocatorISE_EEFvSA_SD_EE11target_typeEv()
{
  return &_ZTIZNK3qmi12ClientRouter13setIndHandlerIZZN7desense16QMICommandDriver4initEvEUb_E3__4EEvtOT_EUlNS_16SubscriptionTypeERK13QMIServiceMsgE_;
}

void ctu::SharedSynchronizable<desense::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7desense13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66D6CB0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7desense13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7desense13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7desense13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyRegistering>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyRegistering>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyRegistering>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D6D08;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  NSObject *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  _DWORD v9[2];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)v2;
  v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    v5 = v3[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 67109378;
      v9[1] = v4;
      v10 = 2080;
      v11 = qmi::asString();
      _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#N Could not register with stop report: 0x%x (%s)", (uint8_t *)v9, 0x12u);
    }
  }
  else
  {
    v6 = *(_DWORD *)(v2 + 8);
    if (v6 == 2)
      v7 = 1;
    else
      v7 = 2;
    if (v6 == 1)
      v8 = 0;
    else
      v8 = v7;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v3 + 48))(v3, v8, 1);
  }
}

uint64_t __copy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6NS_9allocatorIS5_EEED1Ev(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__120__shared_ptr_emplaceIZZN7desense16QMICommandDriver26registerFrequencyReportingEN4coex5SubIdEEUb0_E3__6NS_9allocatorIS5_EEED0Ev(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B3D0AAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyReporting>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyReporting>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::FrequencyReporting>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D6E00;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN7desense16QMICommandDriver25setFrequencyReportingModeEN4coex5SubIdENS3_22FrequencyReportingModeEE3__1EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint8_t buf[8];
  __int128 v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD **)(a1 + 32);
  v4 = *(_QWORD *)v3;
  v5 = *(_DWORD *)(a2 + 4);
  v6 = *(NSObject **)(*(_QWORD *)v3 + 40);
  v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v5;
      LOWORD(v21) = 2080;
      *(_QWORD *)((char *)&v21 + 2) = qmi::asString();
      _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#N Could not set frequency reporting mode: 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    if (v7)
    {
      v8 = v3[2];
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v8;
      _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Received frequency report response for slot %d", buf, 8u);
    }
    v9 = v3[2];
    if (v9 == 2)
      v10 = 1;
    else
      v10 = 2;
    if (v9 == 1)
      v11 = 0;
    else
      v11 = v10;
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)buf = *(_QWORD *)a2;
    *(_QWORD *)&v21 = v12;
    v13 = *(_QWORD *)(a2 + 16);
    *((_QWORD *)&v21 + 1) = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)buf);
    v18 = *(_QWORD *)buf;
    v19 = v21;
    if (*((_QWORD *)&v21 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v18);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
    desense::QMICommandDriver::processFrequencyInd_sync(v4, v11, (qmi::MessageBase *)&v18);
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)&v18);
  }
}

void sub_1B3D0AD28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D0AD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D0AD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c129_ZTSNSt3__110shared_ptrIZN7desense16QMICommandDriver25setFrequencyReportingModeEN4coex5SubIdENS1_22FrequencyReportingModeEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c129_ZTSNSt3__110shared_ptrIZN7desense16QMICommandDriver25setFrequencyReportingModeEN4coex5SubIdENS1_22FrequencyReportingModeEE3__1EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<desense::QMICommandDriver::setFrequencyReportingMode(coex::SubId,desense::FrequencyReportingMode)::$_1,std::allocator<desense::QMICommandDriver::setFrequencyReportingMode(coex::SubId,desense::FrequencyReportingMode)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<desense::QMICommandDriver::setFrequencyReportingMode(coex::SubId,desense::FrequencyReportingMode)::$_1,std::allocator<desense::QMICommandDriver::setFrequencyReportingMode(coex::SubId,desense::FrequencyReportingMode)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::SubType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::SubType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<nas::tlv::abm::SubType>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D6ED0;
  return result;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN7desense16QMICommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4))
  {
    v3 = *(unsigned __int8 **)(a1 + 32);
    v4 = v3[8];
    v5 = *(NSObject **)(*(_QWORD *)v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = qmi::asString();
      v7 = *(_DWORD *)(a2 + 4);
      v8[0] = 67109634;
      v8[1] = v4;
      v9 = 2080;
      v10 = v6;
      v11 = 1024;
      v12 = v7;
      _os_log_error_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_ERROR, "Error binding subscription to type %d : %s (0x%x)", (uint8_t *)v8, 0x18u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN7desense16QMICommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c107_ZTSNSt3__110shared_ptrIZN7desense16QMICommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_emplace<desense::QMICommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<desense::QMICommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6F38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<desense::QMICommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<desense::QMICommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D6F38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas3abm16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D0B0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D0B108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D0B134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::list<std::pair<unsigned long long,unsigned int>>::__insert_with_sentinel[abi:ne180100]<std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>,std::__list_const_iterator<std::pair<unsigned long long,unsigned int>,void *>>(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  if (a3 != a4)
  {
    v7 = result;
    result = operator new(0x20uLL);
    v8 = result;
    *result = 0;
    result[1] = 0;
    *((_OWORD *)result + 1) = *(_OWORD *)(a3 + 16);
    v9 = *(_QWORD *)(a3 + 8);
    v10 = 1;
    if (v9 != a4)
    {
      v11 = result;
      do
      {
        result = operator new(0x20uLL);
        *result = v11;
        result[1] = 0;
        *((_OWORD *)result + 1) = *(_OWORD *)(v9 + 16);
        v11[1] = result;
        ++v10;
        v9 = *(_QWORD *)(v9 + 8);
        v11 = result;
      }
      while (v9 != a4);
    }
    v12 = *a2;
    *(_QWORD *)(v12 + 8) = v8;
    *v8 = v12;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v10;
  }
  return result;
}

void sub_1B3D0B210(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B3D0B230(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 292) > *(_DWORD *)(*a1 + 288))
    boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_1E66D7010;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_1E66D6FB0;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3D0BCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t abm::asString@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a2 + 23) = 7;
  strcpy((char *)a2, "Invalid");
  if (result <= 2)
  {
    *(_BYTE *)(a2 + 23) = 4;
    *(_DWORD *)a2 = ((_DWORD)result << 16) + 1378894420;
    *(_BYTE *)(a2 + 4) = 0;
  }
  return result;
}

{
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a2 + 23) = 7;
  strcpy((char *)a2, "Invalid");
  switch((int)result)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "1000msec");
      break;
    case 1:
      *(_DWORD *)(a2 + 3) = 1667593069;
      *(_DWORD *)a2 = 1831874609;
      break;
    case 2:
      *(_BYTE *)(a2 + 23) = 5;
      strcpy((char *)a2, "1msec");
      break;
    case 10:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "ModemSkin");
      break;
    case 11:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "TangierBG");
      break;
    case 12:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "TangierCG");
      break;
    case 13:
      *(_BYTE *)(a2 + 23) = 3;
      *(_DWORD *)a2 = 5915974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t abm::convertBasebandCPMSPowerBudgetScale(_QWORD *a1)
{
  int v1;
  size_t v2;
  unsigned __int8 v3;
  uint64_t result;
  _QWORD *v5;
  int v6;
  int v7;
  int *v9;
  int v10;
  int v11;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v17;
  int v18;

  v1 = *((char *)a1 + 23);
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  else
    v2 = a1[1];
  v3 = -1;
  switch(v2)
  {
    case 3uLL:
      if (v1 < 0)
        a1 = (_QWORD *)*a1;
      if (!memcmp(a1, "FEZ", v2))
        return 13;
      else
        return -1;
    case 5uLL:
      v5 = (_QWORD *)*a1;
      if (v1 >= 0)
        v5 = a1;
      v6 = *(_DWORD *)v5;
      v7 = *((unsigned __int8 *)v5 + 4);
      if (v6 != 1702063409 || v7 != 99)
        goto LABEL_45;
      result = 2;
      break;
    case 7uLL:
      v9 = (int *)*a1;
      if (v1 >= 0)
        v9 = (int *)a1;
      v10 = *v9;
      v11 = *(int *)((char *)v9 + 3);
      if (v10 != 1831874609 || v11 != 1667593069)
        goto LABEL_45;
      result = 1;
      break;
    case 8uLL:
      v13 = (_QWORD *)*a1;
      if (v1 >= 0)
        v13 = a1;
      if (*v13 != 0x6365736D30303031)
        goto LABEL_45;
      result = 0;
      break;
    case 9uLL:
      v14 = (_QWORD *)*a1;
      if (v1 >= 0)
        v14 = a1;
      if (*v14 == 0x696B536D65646F4DLL && *((_BYTE *)v14 + 8) == 110)
      {
        result = 10;
      }
      else if (*v14 == 0x42726569676E6154 && *((_BYTE *)v14 + 8) == 71)
      {
        result = 11;
      }
      else
      {
        v17 = *v14;
        v18 = *((unsigned __int8 *)v14 + 8);
        if (v17 == 0x43726569676E6154 && v18 == 71)
          result = 12;
        else
LABEL_45:
          result = 255;
      }
      break;
    default:
      return v3;
  }
  return result;
}

void radio::QMIRFSCommandDriver::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  std::__shared_weak_count *v22;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xD0uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v21 = *a1;
  v22 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v20[0] = v11;
  v20[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  radio::QMIRFSCommandDriver::QMIRFSCommandDriver((uint64_t)v6, (uint64_t)&v21, (uint64_t)v20);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::QMIRFSCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIRFSCommandDriver,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v22;
  if (v22)
  {
    v18 = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  radio::QMIRFSCommandDriver::init((radio::QMIRFSCommandDriver *)*a3);
}

void sub_1B3D0C828(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D0C83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void radio::QMIRFSCommandDriver::init(radio::QMIRFSCommandDriver *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_11_1;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_30_2;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t radio::QMIRFSCommandDriver::QMIRFSCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  radio::RFSCommandDriver::RFSCommandDriver();
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_1E66D70F0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  return a1;
}

void sub_1B3D0CABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void radio::QMIRFSCommandDriver::~QMIRFSCommandDriver(radio::QMIRFSCommandDriver *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66D70F0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMIRFSCommandDriver *)((char *)this + 168));
  radio::RFSCommandDriver::~RFSCommandDriver(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66D70F0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMIRFSCommandDriver *)((char *)this + 168));
  radio::RFSCommandDriver::~RFSCommandDriver(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66D70F0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((radio::QMIRFSCommandDriver *)((char *)this + 168));
  radio::RFSCommandDriver::~RFSCommandDriver(this);
  operator delete(v3);
}

void ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  const char *Name;
  size_t v4;
  void *v5;
  void **v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  qmi::Client *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[6];
  std::__shared_weak_count *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD *);
  void *v63;
  uint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  void *__p[2];
  char v72;
  dispatch_object_t v73;
  void *__dst[2];
  unint64_t v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  _QWORD *v81;

  v2 = a1[4];
  v76 = 0xAAAAAAAAAAAAAAAALL;
  v77 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v2 + 128));
  Name = (const char *)radio::RFSCommandDriver::getName((radio::RFSCommandDriver *)v2);
  v4 = strlen(Name);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v56 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v56 = v4 | 7;
    v57 = v56 + 1;
    v6 = (void **)operator new(v56 + 1);
    __dst[1] = v5;
    v75 = v57 | 0x8000000000000000;
    __dst[0] = v6;
LABEL_81:
    memmove(v6, Name, (size_t)v5);
    *((_BYTE *)v5 + (_QWORD)v6) = 0;
    v7 = *(NSObject **)(v2 + 88);
    v73 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  HIBYTE(v75) = v4;
  v6 = __dst;
  if (v4)
    goto LABEL_81;
  LOBYTE(__dst[0]) = 0;
  v7 = *(NSObject **)(v2 + 88);
  v73 = v7;
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  v72 = 5;
  strcpy((char *)__p, "radio");
  v8 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v8 || (v9 = *(_QWORD *)(v2 + 72), (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
    v69 = 0;
    v70 = 0;
    v16 = std::__shared_weak_count::lock(v10);
    if (v16)
      goto LABEL_14;
LABEL_84:
    v69 = 0;
    v70 = v16;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v11);
  v69 = 0;
  v70 = 0;
  v16 = std::__shared_weak_count::lock(v11);
  if (!v16)
    goto LABEL_84;
LABEL_14:
  v17 = (unint64_t *)&v16->__shared_weak_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  v69 = v9;
  v70 = v16;
LABEL_17:
  std::__shared_weak_count::__release_weak(v11);
  if (v16)
  {
    v19 = (unint64_t *)&v16->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v67 = v76;
  v68 = v77;
  if (v77)
  {
    v21 = (unint64_t *)&v77->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  qmi::Client::createWithQueueLocal();
  v23 = v80;
  v80 = 0uLL;
  v24 = *(std::__shared_weak_count **)(v2 + 192);
  *(_OWORD *)(v2 + 184) = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  qmi::Client::~Client((qmi::Client *)&v78);
  if (v68)
  {
    v27 = &v68->__shared_owners_;
    do
      v28 = __ldaxr((unint64_t *)v27);
    while (__stlxr(v28 - 1, (unint64_t *)v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  if (v70)
    std::__shared_weak_count::__release_weak(v70);
  if (v72 < 0)
    operator delete(__p[0]);
  if (v73)
    dispatch_release(v73);
  if (SHIBYTE(v75) < 0)
    operator delete(__dst[0]);
  v29 = (qmi::Client *)(v2 + 168);
  v62 = ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_2;
  v63 = &__block_descriptor_tmp_4;
  v31 = a1[5];
  v30 = (std::__shared_weak_count *)a1[6];
  v64 = v2;
  v65 = v31;
  v32 = MEMORY[0x1E0C809B0];
  v60 = MEMORY[0x1E0C809B0];
  v61 = 1174405120;
  v66 = v30;
  if (v30)
  {
    v33 = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  qmi::Client::setHandler();
  v58[0] = v32;
  v58[1] = 1174405120;
  v58[2] = ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_3;
  v58[3] = &__block_descriptor_tmp_10_1;
  v36 = a1[5];
  v35 = (std::__shared_weak_count *)a1[6];
  v58[4] = v2;
  v58[5] = v36;
  v59 = v35;
  if (v35)
  {
    v37 = (unint64_t *)&v35->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v78 = v32;
  v79 = 0x40000000;
  *(_QWORD *)&v80 = ___ZNK3qmi6Client13setIndHandlerIRKN4mfse3abm9SyncEvent10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v80 + 1) = &unk_1E66D73E8;
  v81 = v58;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 168));
  v39 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v39 || (v40 = *(_QWORD *)(v2 + 72), (v41 = std::__shared_weak_count::lock(v39)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v42 = v41;
  v43 = (unint64_t *)&v41->__shared_weak_owners_;
  do
    v44 = __ldxr(v43);
  while (__stxr(v44 + 1, v43));
  v45 = (unint64_t *)&v41->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v42);
    v47 = std::__shared_weak_count::lock(v42);
    if (v47)
      goto LABEL_57;
LABEL_64:
    v78 = 0;
    v79 = 0;
    goto LABEL_65;
  }
  v47 = std::__shared_weak_count::lock(v41);
  if (!v47)
    goto LABEL_64;
LABEL_57:
  v48 = v47;
  v49 = (unint64_t *)&v47->__shared_weak_owners_;
  do
    v50 = __ldxr(v49);
  while (__stxr(v50 + 1, v49));
  v78 = v40;
  v79 = (uint64_t)v47;
  std::__shared_weak_count::__release_weak(v42);
  v51 = (unint64_t *)&v48->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    v42 = v48;
LABEL_65:
    std::__shared_weak_count::__release_weak(v42);
  }
  qmi::Client::setClientHandle();
  if (v79)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v79);
  qmi::Client::start(v29);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
  v53 = v77;
  if (v77)
  {
    v54 = (unint64_t *)&v77->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
}

void sub_1B3D0D418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,dispatch_object_t object,char a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  NSObject *v38;

  if (a25)
  {
    std::__shared_weak_count::__release_weak(a25);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_3:
      v38 = object;
      if (!object)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  v38 = object;
  if (!object)
  {
LABEL_8:
    if (*(char *)(v36 - 137) < 0)
    {
      operator delete(*(void **)(v36 - 160));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v36 - 136);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v36 - 136);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v38);
  goto LABEL_8;
}

void ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  radio::QMIRFSCommandDriver *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (radio::QMIRFSCommandDriver *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        *((_DWORD *)v3 + 50) = 0;
        radio::QMIRFSCommandDriver::enableIndications_sync(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D0D634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void radio::QMIRFSCommandDriver::enableIndications_sync(radio::QMIRFSCommandDriver *this)
{
  NSObject *v2;
  __int128 v3;
  void *v4;
  _QWORD v5[6];
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *aBlock;
  _OWORD v10[2];
  uint8_t buf[8];
  uint64_t v12;
  void (*v13)(uint64_t, QMIServiceMsg *);
  void *v14;
  _QWORD *v15;

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Enabling RFS Sync indication", buf, 2u);
  }
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v3;
  v10[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  v5[5] = (char *)this + 168;
  v6 = QMIServiceMsg::create();
  v7 = 25000;
  v8 = 0;
  aBlock = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN5radio19QMIRFSCommandDriver22enableIndications_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_12_1;
  v5[4] = this;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v12 = 0x40000000;
  v13 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4mfse3abm15EnableSyncEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v14 = &unk_1E66D7430;
  v15 = v5;
  v4 = _Block_copy(buf);
  aBlock = v4;
  if (v6)
  {
    qmi::Client::send();
    v4 = aBlock;
  }
  if (v4)
    _Block_release(v4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_1B3D0D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D0D780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrIN5radio16RFSCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrIN5radio16RFSCommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN5radio19QMIRFSCommandDriver4initEv_block_invoke_3(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  tlv *TlvValue;
  int v10;
  tlv *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  const char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v22 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v17 = 0;
        v18 = &v17;
        v19 = 0x2000000000;
        v20 = 0;
        v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I Received RFS Sync indication", buf, 2u);
        }
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v11 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)1);
          v12 = *(unsigned __int8 *)v11;
          *((_BYTE *)v18 + 24) = v12 != 0;
          v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            v14 = "false";
            if (v12)
              v14 = "true";
            *(_DWORD *)buf = 136315138;
            v24 = v14;
            _os_log_impl(&dword_1B3CB3000, v13, OS_LOG_TYPE_DEFAULT, "#I Reset after sync: %s", buf, 0xCu);
          }
        }
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 112), *((_BYTE *)v18 + 24));
        _Block_object_dispose(&v17, 8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D0D994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v13, 16, v14, v15);
    JUMPOUT(0x1B3D0D914);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN5radio19QMIRFSCommandDriver22enableIndications_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Failed to enable RFS Sync indication", v3, 2u);
    }
  }
}

void radio::QMIRFSCommandDriver::sync(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[5];
  void *aBlock;
  dispatch_object_t object;
  _QWORD block[6];
  std::__shared_weak_count *v23;

  v5 = MEMORY[0x1E0C809B0];
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_26_2;
  v19[4] = a1;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = (std::__shared_weak_count *)a1[10];
  if (!v8 || (v9 = a1[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = a1[11];
  block[0] = v5;
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66D7500;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  block[5] = v9;
  v23 = v11;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  block[4] = v19;
  dispatch_async(v12, block);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  __int128 v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  _QWORD v33[5];
  void *v34;
  dispatch_object_t object;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  void *aBlock;
  __int128 v41;
  __int128 v42;
  uint8_t buf[8];
  uint64_t v44;
  void (*v45)(uint64_t, QMIServiceMsg *);
  void *v46;
  _QWORD *v47;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Sending RFS sync request", buf, 2u);
  }
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41 = v4;
  v42 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v41);
  v5 = (char *)*((_QWORD *)&v41 + 1);
  v6 = (char *)v42;
  v7 = (const void **)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1) != (_QWORD)v42)
  {
    v7 = (const void **)*((_QWORD *)&v41 + 1);
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v42)
        goto LABEL_11;
    }
  }
  if (v7 == (const void **)v42)
  {
LABEL_11:
    v10 = (char *)operator new(0x10uLL);
    v11 = v10;
    v10[8] = 1;
    *(_QWORD *)v10 = off_1E66D7478;
    *((_DWORD *)v10 + 3) = 0;
    v9 = v10 + 12;
    if ((unint64_t)v6 < *((_QWORD *)&v42 + 1))
    {
      *(_QWORD *)v6 = v10;
      *(_QWORD *)&v42 = v6 + 8;
      goto LABEL_25;
    }
    v12 = v6 - v5;
    v13 = (v6 - v5) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = *((_QWORD *)&v42 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v42 + 1) - (_QWORD)v5) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v20 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_22:
        *((_QWORD *)&v41 + 1) = v18;
        *(_QWORD *)&v42 = v20;
        *((_QWORD *)&v42 + 1) = v19;
        if (!v5)
        {
LABEL_24:
          *(_QWORD *)&v42 = v20;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v5);
        goto LABEL_24;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v11;
      v20 = 8 * v13 + 8;
      if (v5 == v6)
        goto LABEL_22;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_52;
    if ((unint64_t)(v5 - v17) < 0x20)
      goto LABEL_52;
    v25 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v6[-v26];
    v18 = (_QWORD *)((char *)v18 - v26);
    v28 = &v17[8 * v13 - 16];
    v29 = v6 - 16;
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    v6 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_52:
      do
      {
        v32 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v18 = v32;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v41 + 1);
    *((_QWORD *)&v41 + 1) = v18;
    *(_QWORD *)&v42 = v20;
    *((_QWORD *)&v42 + 1) = v19;
    if (!v5)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = v8 + 12;
LABEL_25:
  *v9 = 0;
  v36 = v2 + 168;
  v37 = QMIServiceMsg::create();
  v38 = 25000;
  v39 = 0;
  aBlock = 0;
  v21 = MEMORY[0x1E0C809B0];
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 1174405120;
  v33[2] = ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_2;
  v33[3] = &__block_descriptor_tmp_25_1;
  v33[4] = v2;
  v22 = (void *)a1[5];
  if (v22)
    v22 = _Block_copy(v22);
  v23 = a1[6];
  v34 = v22;
  object = v23;
  if (v23)
    dispatch_retain(v23);
  *(_QWORD *)buf = v21;
  v44 = 0x40000000;
  v45 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4mfse3abm10SyncNoWait8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v46 = &unk_1E66D74D8;
  v47 = v33;
  v24 = _Block_copy(buf);
  aBlock = v24;
  if (v37)
  {
    qmi::Client::send();
    v24 = aBlock;
  }
  if (v24)
    _Block_release(v24);
  if (object)
    dispatch_release(object);
  if (v34)
    _Block_release(v34);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v41);
}

void sub_1B3D0DF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D0DF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D0DF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_2(_QWORD *a1, qmi::MessageBase *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  CFMutableDictionaryRef Mutable;
  void *v13;
  void *v14;
  void *v15;
  tlv *TlvValue;
  int v17;
  const __CFAllocator *v18;
  tlv *v19;
  tlv *v20;
  int v21;
  tlv *v22;
  const __CFAllocator *v23;
  const void *v24;
  char v25;
  NSObject *v26;
  uint64_t *v27;
  int v28;
  size_t v29;
  void **v30;
  unint64_t v31;
  unint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef v36;
  const void *v37;
  void *v38;
  NSObject *v39;
  void **v40;
  void *__dst[2];
  unint64_t v42;
  _QWORD v43[2];
  void (*v44)(_QWORD *, void **);
  void *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  _QWORD v50[2];
  void (*v51)(_QWORD *, int *);
  void *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  CFTypeRef cf;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  uint64_t v62;
  _OWORD v63[4];
  __int128 __p;
  __int128 v65;
  _OWORD v66[10];
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  char v74;
  CFTypeRef v75;
  void *block[2];
  void (*v77)(uint64_t);
  void *v78;
  void *v79;
  CFTypeRef v80;
  CFTypeRef v81;
  uint8_t buf[4];
  void **v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v75 = 0;
  v71 = 0;
  v72 = &v71;
  v73 = 0x2000000000;
  v74 = 1;
  v67 = 0;
  v68 = &v67;
  v69 = 0x2000000000;
  v70 = 1;
  v57 = 0;
  v58 = &v57;
  v59 = 0x13002000000;
  v60 = __Block_byref_object_copy__3;
  v61 = __Block_byref_object_dispose__3;
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v63[0] = v5;
  v63[1] = v5;
  v63[2] = v5;
  v63[3] = v5;
  __p = v5;
  v65 = v5;
  v66[0] = v5;
  v66[1] = v5;
  v66[2] = v5;
  v66[3] = v5;
  v66[4] = v5;
  v66[5] = v5;
  v66[6] = v5;
  v66[7] = v5;
  v66[8] = v5;
  v66[9] = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *((_QWORD *)&v66[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
  v62 = v8;
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v8 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v62 + *(_QWORD *)(v62 - 24));
  std::ios_base::init(v10, v63);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v62 = v6 + 24;
  *((_QWORD *)&v66[0] + 1) = v7;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v63[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v65 = 0u;
  LODWORD(v66[0]) = 16;
  cf = 0;
  v11 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = Mutable;
  if (!Mutable)
  {
    v14 = (void *)MEMORY[0x1E0C809B0];
LABEL_11:
    v15 = v14;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58 + 5, (uint64_t)"Failed creating a status dictionary", 35);
    *((_BYTE *)v68 + 24) = 0;
    if (!a1[5])
      goto LABEL_61;
LABEL_12:
    if (!a1[6])
      goto LABEL_61;
    if (*((_BYTE *)v68 + 24))
    {
      v24 = 0;
      goto LABEL_15;
    }
    v26 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      std::ostringstream::str[abi:ne180100](block, (uint64_t)(v58 + 5));
      v40 = SHIBYTE(v77) >= 0 ? block : (void **)block[0];
      *(_DWORD *)buf = 136315138;
      v83 = v40;
      _os_log_error_impl(&dword_1B3CB3000, v26, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (SHIBYTE(v77) < 0)
        operator delete(block[0]);
    }
    v27 = v58;
    v28 = *((_DWORD *)v58 + 36);
    if ((v28 & 0x10) != 0)
    {
      v31 = v58[17];
      v32 = v58[12];
      if (v31 < v32)
      {
        v58[17] = v32;
        v31 = v32;
      }
      v33 = (const void *)v27[11];
      v29 = v31 - (_QWORD)v33;
      if (v31 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_69;
    }
    else
    {
      if ((v28 & 8) == 0)
      {
        v29 = 0;
        HIBYTE(v42) = 0;
        v30 = __dst;
        goto LABEL_31;
      }
      v33 = (const void *)v58[8];
      v29 = v58[10] - (_QWORD)v33;
      if (v29 >= 0x7FFFFFFFFFFFFFF8)
LABEL_69:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v29 >= 0x17)
    {
      v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v34 = v29 | 7;
      v35 = v34 + 1;
      v30 = (void **)operator new(v34 + 1);
      __dst[1] = (void *)v29;
      v42 = v35 | 0x8000000000000000;
      __dst[0] = v30;
    }
    else
    {
      HIBYTE(v42) = v29;
      v30 = __dst;
      if (!v29)
        goto LABEL_31;
    }
    memmove(v30, v33, v29);
LABEL_31:
    *((_BYTE *)v30 + v29) = 0;
    CreateError();
    v36 = v75;
    v24 = block[0];
    v75 = block[0];
    block[0] = 0;
    if (v36)
    {
      CFRelease(v36);
      if (block[0])
        CFRelease(block[0]);
    }
    if (SHIBYTE(v42) < 0)
      operator delete(__dst[0]);
    if (v24)
    {
      CFRetain(v24);
      v25 = 0;
      v13 = (void *)cf;
      if (!cf)
        goto LABEL_39;
      goto LABEL_38;
    }
LABEL_15:
    v25 = 1;
    v13 = (void *)cf;
    if (!cf)
    {
LABEL_39:
      v37 = (const void *)a1[5];
      if (v37)
        v38 = _Block_copy(v37);
      else
        v38 = 0;
      v39 = a1[6];
      block[0] = v15;
      block[1] = (void *)1174405120;
      v77 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_0;
      v78 = &__block_descriptor_tmp_33_1;
      if (v38)
      {
        v79 = _Block_copy(v38);
        v80 = v24;
        if ((v25 & 1) != 0)
          goto LABEL_47;
      }
      else
      {
        v79 = 0;
        v80 = v24;
        if ((v25 & 1) != 0)
        {
LABEL_47:
          v81 = v13;
          if (v13)
            CFRetain(v13);
          dispatch_async(v39, block);
          if (v81)
            CFRelease(v81);
          if (v80)
            CFRelease(v80);
          if (v79)
            _Block_release(v79);
          if (v38)
            _Block_release(v38);
          if (v13)
            CFRelease(v13);
          if ((v25 & 1) == 0)
            CFRelease(v24);
          goto LABEL_61;
        }
      }
      CFRetain(v24);
      goto LABEL_47;
    }
LABEL_38:
    CFRetain(v13);
    goto LABEL_39;
  }
  cf = Mutable;
  v14 = (void *)MEMORY[0x1E0C809B0];
  if (!ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get)
    goto LABEL_11;
  v15 = (void *)MEMORY[0x1E0C809B0];
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 0x40000000;
  v51 = ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_17;
  v52 = &unk_1E66D7210;
  v53 = &v71;
  v54 = &v67;
  v55 = v4;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v19 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v17, (const unsigned __int8 *)4);
    LODWORD(block[0]) = *(_DWORD *)v19;
    v51(v50, (int *)block);
  }
  if (*((_DWORD *)a2 + 1))
  {
    v43[0] = v15;
    v43[1] = 0x40000000;
    v44 = (void (*)(_QWORD *, void **))___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_20;
    v45 = &unk_1E66D7238;
    v46 = &v71;
    v47 = &v67;
    v48 = &v57;
    v49 = v4;
    v20 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v22 = v20;
    if (v20)
    {
      tlv::throwIfNotEnoughBytes(v20, (const unsigned __int8 *)v20 + v21, (const unsigned __int8 *)4);
      LODWORD(block[0]) = *(_DWORD *)v22;
      v44(v43, block);
    }
  }
  ctu::cf::insert<char const*,BOOL>((__CFDictionary *)v13, (const __CFString **)*MEMORY[0x1E0DDF910], *((unsigned __int8 *)v68 + 24), v11, v18);
  ctu::cf::insert<char const*,BOOL>((__CFDictionary *)v13, (const __CFString **)*MEMORY[0x1E0DDF918], *((unsigned __int8 *)v72 + 24), v11, v23);
  if (a1[5])
    goto LABEL_12;
LABEL_61:
  if (v13)
    CFRelease(v13);
  _Block_object_dispose(&v57, 8);
  v62 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v62 + *(_QWORD *)(v62 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v63[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v65) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E2F6FC]((char *)v66 + 8);
  _Block_object_dispose(&v67, 8);
  _Block_object_dispose(&v71, 8);
  if (v75)
    CFRelease(v75);
}

void sub_1B3D0E63C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_17(_QWORD *a1, int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  _BOOL4 v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a1[6];
  v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v4 + 200);
    v7 = *a2;
    v12[0] = 67109376;
    v12[1] = v6;
    v13 = 1024;
    v14 = v7;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Sync token: Old = %u New = %u", (uint8_t *)v12, 0xEu);
  }
  v8 = *(_DWORD *)(v4 + 200);
  v9 = *a2;
  if (v8 == *a2)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    v10 = *(NSObject **)(v4 + 40);
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    v9 = v8;
    if (v11)
    {
      LOWORD(v12[0]) = 0;
      _os_log_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_DEFAULT, "#I Sync token same. Sync is already in progress.", (uint8_t *)v12, 2u);
      v9 = *a2;
    }
  }
  *(_DWORD *)(v4 + 200) = v9;
}

void ___ZN5radio19QMIRFSCommandDriver4syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch8callbackIU13block_pointerFvNS3_I9__CFErrorEES6_EEE_block_invoke_20(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  uint8_t v5[16];

  if (*a2 == 31)
  {
    v2 = a1[7];
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Nothing to sync", v5, 2u);
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40), (uint64_t)"Sync response with error [", 26);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"]", 1);
  }
}

_BYTE *std::ostringstream::str[abi:ne180100](_BYTE *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 104);
  if ((v3 & 0x10) != 0)
  {
    v4 = *(_QWORD *)(a2 + 96);
    v5 = *(_QWORD *)(a2 + 56);
    if (v4 < v5)
    {
      *(_QWORD *)(a2 + 96) = v5;
      v4 = v5;
    }
    v6 = *(const void **)(a2 + 48);
    v7 = v4 - (_QWORD)v6;
    if (v4 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_16;
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      __dst[23] = 0;
LABEL_4:
      *__dst = 0;
      return __dst;
    }
    v6 = *(const void **)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 40) - (_QWORD)v6;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_16:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v7 >= 0x17)
  {
    v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v8 = v7 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    v2[1] = v7;
    v2[2] = v9 | 0x8000000000000000;
    *v2 = v10;
    v2 = v10;
  }
  else
  {
    __dst[23] = v7;
    if (!v7)
      goto LABEL_4;
  }
  __dst = memmove(v2, v6, v7);
  *((_BYTE *)v2 + v7) = 0;
  return __dst;
}

void radio::QMIRFSCommandDriver::setStartHandler(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "setStartHandler";
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMIRFSCommandDriver::setIndicationHandler(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "setIndicationHandler";
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMIRFSCommandDriver::setLPMEnterAction(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "setLPMEnterAction";
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMIRFSCommandDriver::setLPMExitAction(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "setLPMExitAction";
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMIRFSCommandDriver::checkRFSStatus(radio::QMIRFSCommandDriver *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "checkRFSStatus";
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::RFSCommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)radio::RFSCommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::Loggable<radio::RFSCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D0EFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D0EFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<radio::QMIRFSCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIRFSCommandDriver,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D72E0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D0F114(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1}::operator() const(radio::QMIRFSCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D0F134(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<radio::QMIRFSCommandDriver *,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver *)#1},std::allocator<radio::QMIRFSCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMIRFSCommandDriver *,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver *)#1},std::allocator<radio::QMIRFSCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1}::operator() const(radio::QMIRFSCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::QMIRFSCommandDriver *,std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver *)#1},std::allocator<radio::QMIRFSCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19QMIRFSCommandDriver"
                     "EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19QMIRFSCo"
                                "mmandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19QMIRFSCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15make_shared_ptrINS1_19QMIRFSCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::QMIRFSCommandDriver> ctu::SharedSynchronizable<radio::RFSCommandDriver>::make_shared_ptr<radio::QMIRFSCommandDriver>(radio::QMIRFSCommandDriver*)::{lambda(radio::QMIRFSCommandDriver*)#1}::operator() const(radio::QMIRFSCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(uint64_t ***a1, char a2)
{
  __int128 v3;
  pthread_mutex_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[4];
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  uint64_t ***v45;
  uint64_t v46;
  uint64_t **v47;
  unsigned int *v48;
  char v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *__p[2];
  pthread_mutex_t *v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v47 = 0;
  v48 = 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60 = v3;
  v61 = v3;
  v58 = v3;
  v59 = v3;
  v56 = v3;
  v57 = v3;
  v54 = v3;
  v55 = v3;
  v52 = v3;
  v53 = v3;
  v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v52;
  v63[0] = 0;
  v63[1] = v4;
  pthread_mutex_lock(v4);
  v5 = a1[1];
  if (!v5)
  {
    v7 = *a1;
    goto LABEL_15;
  }
  v6 = atomic_load((unsigned int *)v5 + 2);
  v7 = *a1;
  if (v6 == 1)
  {
    v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      v8 = (*v7)[1];
      *(_QWORD *)&v50 = v8;
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)&v50 = a1[2];
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
        goto LABEL_11;
    }
    v10 = *(_QWORD *)(v8 + 16);
    if (*(_BYTE *)(v10 + 24))
    {
      v8 = *(_QWORD *)(v8 + 8);
    }
    else
    {
      v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v50);
      v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  v5 = a1[1];
  if (v5)
  {
    v11 = (unsigned int *)(v5 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
LABEL_15:
  v13 = v48;
  v47 = v7;
  v48 = (unsigned int *)v5;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
      v17 = v13 + 3;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  pthread_mutex_unlock(v63[1]);
  v20 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v63[0][-1].__opaque[55] >= 0)
    {
      v21 = (char *)__p[1] + 16 * (uint64_t)v63[0];
      do
      {
        v22 = (unsigned int *)*((_QWORD *)v21 - 1);
        if (v22)
        {
          v23 = v22 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
            v26 = v22 + 3;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 24))(v22);
          }
        }
        v21 -= 16;
      }
      while (v21 > v20);
    }
    if (__p[0] >= (void *)0xB)
      operator delete(__p[1]);
  }
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65 = v29;
  v66 = v29;
  *(_OWORD *)v63 = v29;
  v64 = v29;
  v61 = v29;
  *(_OWORD *)__p = v29;
  v59 = v29;
  v60 = v29;
  v57 = v29;
  v58 = v29;
  v55 = v29;
  v56 = v29;
  v53 = v29;
  v54 = v29;
  v52 = v29;
  LOBYTE(v52) = 0;
  v67 = 0xAAAAAAAAAAAAAAAALL;
  v68 = 10;
  v69 = (char *)&v52 + 8;
  v70 = 0;
  v72 = 0;
  v73 = 0;
  v71 = &v49;
  v30 = v47;
  v31 = (uint64_t)*v47;
  v44 = &v52;
  v45 = a1;
  v46 = v31;
  *(_QWORD *)&v42 = *(_QWORD *)(v31 + 8);
  *((_QWORD *)&v42 + 1) = v31;
  *(_QWORD *)&v43 = &v52;
  *((_QWORD *)&v43 + 1) = v31;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v42);
  v41[0] = *v30;
  v41[1] = v41[0];
  v41[2] = &v52;
  v41[3] = v41[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(v41);
  v50 = v42;
  v51 = v43;
  v32 = v41[0];
  if ((_QWORD)v42 == v41[0])
  {
    if (HIDWORD(v72) <= v72)
      goto LABEL_45;
    goto LABEL_44;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dereference(&v50);
    *(_QWORD *)&v50 = *(_QWORD *)(v50 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v50);
    if (*(_BYTE *)v51)
      *(_BYTE *)v51 = 0;
  }
  while ((_QWORD)v50 != v32);
  if (*((_DWORD *)v44 + 71) > *((_DWORD *)v44 + 70))
LABEL_44:
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v45, v46);
LABEL_45:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v52);
  v34 = v48;
  if (v48)
  {
    v35 = v48 + 2;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      v38 = v34 + 3;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
    }
  }
  return result;
}

void sub_1B3D0F5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a27);
  JUMPOUT(0x1B3D0F6A4);
}

void sub_1B3D0F5C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3D0F6ACLL);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  BOOL v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v45;

  v6 = a1 + 4;
  v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    v23 = a1[10];
    if ((uint64_t *)v23 != *a3)
      goto LABEL_55;
    v19 = *(uint64_t **)(v23 + 8);
    v9 = v6;
    v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      v45 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v45)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  v7 = *a2;
  v8 = a2[2];
  v9 = v6;
  v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v16 = *((_DWORD *)v10 + 8);
        v17 = v16 < 1;
        if (v16 == 1)
          v17 = *((_DWORD *)v10 + 10) < v8;
        if (!v17)
          break;
        v10 = (uint64_t *)v10[1];
        if (!v10)
          goto LABEL_19;
      }
      v9 = v10;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      v11 = *((_DWORD *)v10 + 8);
      v12 = v11 == v7;
      v13 = v11 < v7;
      if (v11 >= v7)
        v14 = (uint64_t **)v10;
      else
        v14 = (uint64_t **)(v10 + 1);
      if (v13)
        v15 = v9;
      else
        v15 = v10;
      if (v12)
      {
        v14 = (uint64_t **)v10;
        v9 = v10;
      }
      else
      {
        v9 = v15;
      }
      v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    v19 = *(uint64_t **)(v18 + 8);
    v20 = v6;
    if (v7 == 1)
    {
      v21 = v5;
      while (1)
      {
        v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10))
            goto LABEL_27;
LABEL_22:
          v21 = (uint64_t *)v21[1];
          if (!v21)
            goto LABEL_44;
        }
        else
        {
          if (v22 <= 1)
            goto LABEL_22;
LABEL_27:
          v20 = v21;
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_44;
        }
      }
    }
    v27 = v5;
    do
    {
      v28 = *((_DWORD *)v27 + 8);
      v29 = (uint64_t **)(v27 + 1);
      v30 = v7 == v28;
      v31 = v7 < v28;
      if (v7 >= v28)
        v32 = (uint64_t **)(v27 + 1);
      else
        v32 = (uint64_t **)v27;
      if (!v31)
        v27 = v20;
      if (v30)
        v32 = v29;
      else
        v20 = v27;
      v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1)
        goto LABEL_46;
    }
    else
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6])
        goto LABEL_46;
    }
LABEL_31:
    v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      v33 = v9;
      do
      {
        v26 = (uint64_t *)v33[2];
        v12 = *v26 == (_QWORD)v33;
        v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9)
      *v24 = v26;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  v34 = *a3;
  v35 = **a3;
  v36 = (*a3)[1];
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)v34[1] = v35;
  --a1[2];
  v37 = (unsigned int *)v34[3];
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
      v41 = v37 + 3;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
    }
  }
  operator delete(v34);
  return v36;
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t **v10;
  int v11;
  int v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v18;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    if (*a2 != 1)
    {
      v18 = *((_DWORD *)v6 + 8);
      if (v8 == v18)
        return (uint64_t **)v6;
      v10 = (uint64_t **)a1[1];
      while (1)
      {
        if (v8 < v18)
        {
          v6 = *v10;
          v7 = v10;
          if (!*v10)
            goto LABEL_13;
        }
        else
        {
          if (v18 >= v8)
            return v10;
          v6 = v10[1];
          if (!v6)
          {
LABEL_11:
            v7 = v10 + 1;
            goto LABEL_13;
          }
        }
        v18 = *((_DWORD *)v6 + 8);
        v10 = (uint64_t **)v6;
        if (v8 == v18)
          return (uint64_t **)v6;
      }
    }
    v9 = a2[2];
    while (1)
    {
      v10 = (uint64_t **)v6;
      v11 = *((_DWORD *)v6 + 8);
      if (v11 == 1)
      {
        v12 = *((_DWORD *)v6 + 10);
        if (v9 >= v12)
        {
          if (v12 >= v9)
            return v10;
          goto LABEL_10;
        }
LABEL_4:
        v6 = (uint64_t *)*v6;
        v7 = v10;
        if (!*v10)
          goto LABEL_13;
      }
      else
      {
        if (v11 > 1)
          goto LABEL_4;
LABEL_10:
        v6 = (uint64_t *)v6[1];
        if (!v6)
          goto LABEL_11;
      }
    }
  }
  v10 = a1 + 1;
LABEL_13:
  v13 = operator new(0x38uLL);
  v14 = *((_DWORD *)*a4 + 2);
  v13[4] = **a4;
  *((_DWORD *)v13 + 10) = v14;
  v13[6] = 0;
  *v13 = 0;
  v13[1] = 0;
  v13[2] = v10;
  *v7 = v13;
  v15 = (uint64_t *)**a1;
  v16 = v13;
  if (v15)
  {
    *a1 = v15;
    v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v13;
}

uint64_t boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dereference(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::runtime_error v6;

  v2 = a1[2];
  if (!*(_BYTE *)v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 32);
    v4 = *(_QWORD *)(v3 + 24);
    if (!v4)
    {
      std::runtime_error::runtime_error(&v6, "call to empty boost::function");
      v6.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
      boost::throw_exception<boost::bad_function_call>(&v6);
    }
    (*(void (**)(uint64_t, _QWORD))((v4 & 0xFFFFFFFFFFFFFFFELL) + 8))(v3 + 32, **(unsigned __int8 **)(v2 + 272));
    if (!*(_BYTE *)v2)
      *(_BYTE *)v2 = 1;
  }
  return a1[2] + 1;
}

void sub_1B3D0FC30()
{
  __break(1u);
}

void sub_1B3D0FC74()
{
  __cxa_end_catch();
  JUMPOUT(0x1B3D0FC7CLL);
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  char *v30;
  char *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  char *v45;
  char *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *__p[2];
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
  {
LABEL_53:
    v40 = a1[3];
    if (v40 != v1)
    {
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v62 = v41;
      v63 = v41;
      v60 = v41;
      v61 = v41;
      v58 = v41;
      v59 = v41;
      v56 = v41;
      v57 = v41;
      v54 = v41;
      v55 = v41;
      v42 = *(_QWORD *)(v40 + 16);
      __p[0] = (void *)10;
      __p[1] = &v54;
      *(_QWORD *)&v65 = 0;
      *((_QWORD *)&v65 + 1) = v42;
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
      v43 = a1[2];
      a1[3] = a1[1];
      v44 = *(_DWORD **)(v43 + 288);
      if (v44)
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v44, &v54);
      *(_QWORD *)(v43 + 288) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 32))(*((_QWORD *)&v65 + 1));
      v45 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)v65 - 1 >= 0)
        {
          v46 = (char *)__p[1] + 16 * v65;
          do
          {
            v47 = (unsigned int *)*((_QWORD *)v46 - 1);
            if (v47)
            {
              v48 = v47 + 2;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
                v51 = v47 + 3;
                do
                {
                  v52 = __ldaxr(v51);
                  v53 = v52 - 1;
                }
                while (__stlxr(v53, v51));
                if (!v53)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
              }
            }
            v46 -= 16;
          }
          while (v46 > v45);
        }
        if (__p[0] >= (void *)0xB)
          operator delete(__p[1]);
      }
    }
    return;
  }
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v18;
    v65 = v18;
    v62 = v18;
    v63 = v18;
    v60 = v18;
    v61 = v18;
    v58 = v18;
    v59 = v18;
    v56 = v18;
    v57 = v18;
    v54 = v18;
    v55 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    __p[0] = (void *)10;
    __p[1] = &v54;
    *(_QWORD *)&v65 = 0;
    *((_QWORD *)&v65 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(*(_QWORD *)(*a1 + 16), &v54, (_QWORD *)(a1[2] + 8));
    v20 = *(_QWORD *)(*a1 + 16);
    v21 = a1[2];
    if (*(_BYTE *)(v20 + 24))
    {
      ++*(_DWORD *)(v21 + 280);
      v22 = *(_QWORD *)(v20 + 16);
      if (v22)
      {
        if (atomic_load((unsigned int *)(v22 + 8)))
        {
          v24 = 1;
          goto LABEL_35;
        }
        v21 = a1[2];
      }
      v25 = *a1;
      v26 = a1[1];
      a1[3] = *a1;
      if (v26 == v25)
      {
        v29 = *(_DWORD **)(v21 + 288);
        if (v29)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v29, &v54);
        v24 = 0;
        *(_QWORD *)(v21 + 288) = 0;
      }
      else
      {
        v27 = *(_QWORD *)(v25 + 16);
        v28 = *(_DWORD **)(v21 + 288);
        if (v28)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v54);
        *(_QWORD *)(v21 + 288) = v27;
        v24 = 0;
        if (v27)
          ++*(_DWORD *)(v27 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v21 + 284);
      v24 = 1;
    }
LABEL_35:
    (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 32))(*((_QWORD *)&v65 + 1));
    v30 = (char *)__p[1];
    if (__p[1])
    {
      if ((uint64_t)v65 - 1 >= 0)
      {
        v31 = (char *)__p[1] + 16 * v65;
        do
        {
          v32 = (unsigned int *)*((_QWORD *)v31 - 1);
          if (v32)
          {
            v33 = v32 + 2;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 16))(v32);
              v36 = v32 + 3;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
                (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 24))(v32);
            }
          }
          v31 -= 16;
        }
        while (v31 > v30);
      }
      if (__p[0] >= (void *)0xB)
        operator delete(__p[1]);
    }
    v1 = *a1;
    v39 = a1[1];
    if (!v24)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v39)
    {
      v1 = v39;
      goto LABEL_53;
    }
  }
  if (v1 == v39)
    goto LABEL_53;
}

void sub_1B3D100B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D100CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int i;
  unsigned int v12;
  uint64_t v13;
  char v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 32);
  if (!v3)
    return;
  v4 = *v3;
  if (*v3 == v3[1])
    return;
  do
  {
    memset(v24, 170, 24);
    v8 = *(_DWORD *)v4 ^ (*(int *)v4 >> 31);
    if (v8 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 8) + 16))(&v23);
      v24[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      LODWORD(v24[0]) = 1;
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v13 = *(_QWORD *)(v4 + 16);
        if (!v13)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v13 + 8)))
          goto LABEL_27;
LABEL_21:
        boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(a3, (uint64_t)v24);
        v15 = 0;
        if (LODWORD(v24[0]) == SLODWORD(v24[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v8 != 1)
    {
      LODWORD(v24[0]) = 0;
      v24[1] = 0;
      v24[2] = 0;
      goto LABEL_18;
    }
    v9 = *(_QWORD *)(v4 + 16);
    if (!v9)
    {
LABEL_25:
      v24[1] = 0;
      v24[2] = v9;
      LODWORD(v24[0]) = 0;
      if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v10 = (unsigned int *)(v9 + 8);
    for (i = *(_DWORD *)(v9 + 8); ; i = v12)
    {
      if (!i)
      {
        v9 = 0;
        goto LABEL_25;
      }
      v12 = __ldxr(v10);
      if (v12 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v10))
        break;
    }
    v24[1] = *(_QWORD *)(v4 + 8);
    v24[2] = v9;
    LODWORD(v24[0]) = 0;
    if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 24))(*(_QWORD *)(v4 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)a1, a2);
    }
    v15 = 1;
    if (LODWORD(v24[0]) == SLODWORD(v24[0]) >> 31)
    {
LABEL_30:
      v16 = (unsigned int *)v24[2];
      if (v24[2])
      {
        v17 = (unsigned int *)(v24[2] + 8);
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v24[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[1] + 8))(v24[1]);
LABEL_38:
    if ((v15 & 1) != 0)
      break;
    v4 += 24;
  }
  while (v4 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_1B3D104E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D10538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D1054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  _OWORD v37[10];
  unint64_t v38;
  void *__p;
  uint64_t v40;
  pthread_mutex_t *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[8] = v4;
  v37[9] = v4;
  v37[6] = v4;
  v37[7] = v4;
  v37[4] = v4;
  v37[5] = v4;
  v37[2] = v4;
  v37[3] = v4;
  v37[0] = v4;
  v37[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v38 = 10;
  __p = v37;
  v40 = 0;
  v41 = v5;
  pthread_mutex_lock(v5);
  if (**(_QWORD **)a1 == a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6 || (v7 = atomic_load((unsigned int *)(v6 + 8)), v7 != 1))
    {
      v8 = (uint64_t *)operator new(0x20uLL);
      v9 = *(uint64_t **)a1;
      v10 = **(_QWORD **)a1;
      v11 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v11, v10);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v8, (uint64_t)v11);
      v8[2] = v9[2];
      v12 = v9[3];
      v8[3] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v36, (uint64_t)v8);
      v15 = *(uint64_t **)a1;
      v16 = *(unsigned int **)(a1 + 8);
      *(_OWORD *)a1 = v36;
      *(_QWORD *)&v36 = v15;
      *((_QWORD *)&v36 + 1) = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
    }
    v23 = *(uint64_t ***)a1;
    v24 = **(uint64_t ***)a1;
    v25 = v24[1];
    *(_QWORD *)&v36 = v25;
    if (v24 != (uint64_t *)v25)
    {
      do
      {
        while (1)
        {
          v26 = *(_QWORD *)(v25 + 16);
          if (!*(_BYTE *)(v26 + 24))
            break;
          v25 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)&v36 = v25;
          v24 = *v23;
          if ((uint64_t *)v25 == *v23)
            goto LABEL_20;
        }
        v25 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v24, (int *)(v26 + 64), (uint64_t **)&v36);
        v23 = *(uint64_t ***)a1;
        *(_QWORD *)&v36 = v25;
        v24 = *v23;
      }
      while ((uint64_t *)v25 != *v23);
    }
LABEL_20:
    *(_QWORD *)(a1 + 16) = v25;
  }
  pthread_mutex_unlock(v41);
  v27 = (char *)__p;
  if (__p)
  {
    if (v40 - 1 >= 0)
    {
      v28 = (char *)__p + 16 * v40;
      do
      {
        v29 = (unsigned int *)*((_QWORD *)v28 - 1);
        if (v29)
        {
          v30 = v29 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
            v33 = v29 + 3;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
              (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
          }
        }
        v28 -= 16;
      }
      while (v28 > v27);
    }
    if (v38 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3D107EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D10988(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66D7330;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D10A3C(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D10B0C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D10CC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list((_QWORD *)a1, (_QWORD *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = *(_BYTE *)(a2 + 48);
  v4[3] = v4 + 4;
  v5 = (_QWORD *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD **)(a2 + 24);
  if (v6 != (_QWORD *)(a2 + 32))
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v7[6] = v8;
      v9 = a2;
      if (v6 != v5)
        v9 = v6[6];
      v10 = (_QWORD *)v6[1];
      v11 = v10;
      v12 = v6;
      if (v10)
      {
        do
        {
          v13 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v12[2];
          v14 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (!v14);
      }
      v15 = a2;
      if (v13 != v5)
        v15 = v13[6];
      while (v9 != v15)
      {
        v9 = *(_QWORD *)(v9 + 8);
        v8 = *(_QWORD *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          v16 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v14 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v14);
      }
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v14 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v14);
      }
      v6 = v16;
      v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1B3D10E84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(_QWORD **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = (_QWORD *)a2[1];
  if (v3 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v6 = (_QWORD *)*a1;
        v5 = a1[2];
      }
      *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      v3 = (_QWORD *)v3[1];
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B3D10F50(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (v2)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (unsigned int *)v5[3];
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
            v12 = v8 + 3;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t *std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  int *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19[11];

  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      result = std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x38uLL);
        v12 = *((_QWORD *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((_QWORD *)v11 + 6) = v12;
        v13 = v19[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t)v11;
        v14 = *(_QWORD **)*v7;
        if (v14)
        {
          *v7 = (uint64_t)v14;
          v15 = (uint64_t *)*v10;
        }
        else
        {
          v15 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v16 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v16 = (int *)*((_QWORD *)v6 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v6;
        v6 = v16;
      }
      while (!v17);
LABEL_3:
      v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;

  v5 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_8;
  v6 = *a5;
  v7 = *((_DWORD *)a2 + 8);
  if (*a5 == v7)
  {
    if (v6 != 1)
    {
LABEL_6:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    v8 = a5[2];
    v9 = *((_DWORD *)a2 + 10);
    if (v8 >= v9)
    {
      if (v9 >= v8)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_8:
    v11 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v13 = a2;
    }
    else
    {
      if (v11)
      {
        v12 = (uint64_t *)*a2;
        do
        {
          v13 = v12;
          v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        v17 = a2;
        do
        {
          v13 = (uint64_t *)v17[2];
          v18 = *v13 == (_QWORD)v17;
          v17 = v13;
        }
        while (v18);
      }
      v19 = *((_DWORD *)v13 + 8);
      v20 = *a5;
      if (v19 == *a5)
      {
        if (v19 != 1 || *((_DWORD *)v13 + 10) >= a5[2])
          goto LABEL_24;
      }
      else if (v19 >= v20)
      {
LABEL_24:
        v21 = (_QWORD *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        if (v20 != 1)
        {
          while (1)
          {
            v26 = *((_DWORD *)v21 + 8);
            v23 = v21;
            if (v20 == v26)
              break;
            if (v20 < v26)
            {
              v21 = (_QWORD *)*v21;
              v5 = v23;
              if (!*v23)
                break;
            }
            else
            {
              if (v26 >= v20)
                break;
              v5 = v21 + 1;
              v21 = (_QWORD *)v21[1];
              if (!v21)
                break;
            }
          }
LABEL_40:
          *a3 = v23;
          return v5;
        }
        v22 = a5[2];
        while (1)
        {
          v23 = v21;
          v24 = *((_DWORD *)v21 + 8);
          if (v24 == 1)
          {
            v25 = *((_DWORD *)v23 + 10);
            if (v22 >= v25)
            {
              if (v25 >= v22)
                goto LABEL_40;
              goto LABEL_33;
            }
LABEL_27:
            v21 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_40;
          }
          else
          {
            if (v24 > 1)
              goto LABEL_27;
LABEL_33:
            v5 = v23 + 1;
            v21 = (_QWORD *)v23[1];
            if (!v21)
              goto LABEL_40;
          }
        }
      }
    }
    if (v11)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v7)
    goto LABEL_8;
  if (v7 >= v6)
    goto LABEL_6;
LABEL_15:
  v14 = a2[1];
  if (v14)
  {
    v15 = (uint64_t *)a2[1];
    do
    {
      v16 = v15;
      v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    v27 = a2;
    do
    {
      v16 = (uint64_t *)v27[2];
      v18 = *v16 == (_QWORD)v27;
      v27 = v16;
    }
    while (!v18);
  }
  if (v16 == v5)
    goto LABEL_56;
  v28 = *((_DWORD *)v16 + 8);
  if (v6 == v28)
  {
    if (v6 == 1)
    {
      v29 = a5[2];
      if (v29 >= *((_DWORD *)v16 + 10))
      {
        v30 = (_QWORD *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        goto LABEL_61;
      }
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v6 < v28)
  {
LABEL_56:
    if (v14)
    {
      *a3 = v16;
      return v16;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
LABEL_58:
  v30 = (_QWORD *)*v5;
  if (*v5)
  {
    if (v6 == 1)
    {
      v29 = a5[2];
LABEL_61:
      v31 = v30;
      while (1)
      {
        v30 = v31;
        v32 = *((_DWORD *)v31 + 8);
        if (v32 == 1)
        {
          v33 = *((_DWORD *)v30 + 10);
          if (v29 >= v33)
          {
            if (v33 >= v29)
              goto LABEL_72;
            goto LABEL_68;
          }
LABEL_62:
          v31 = (_QWORD *)*v30;
          v5 = v30;
          if (!*v30)
            goto LABEL_72;
        }
        else
        {
          if (v32 > 1)
            goto LABEL_62;
LABEL_68:
          v5 = v30 + 1;
          v31 = (_QWORD *)v30[1];
          if (!v31)
            goto LABEL_72;
        }
      }
    }
    v34 = *((_DWORD *)v30 + 8);
    while (v6 != v34)
    {
      if (v6 < v34)
      {
        v35 = *v30;
        v5 = v30;
        if (!*v30)
          break;
      }
      else
      {
        if (v34 >= v6)
          break;
        v5 = v30 + 1;
        v35 = v30[1];
        if (!v35)
          break;
      }
      v34 = *(_DWORD *)(v35 + 32);
      v30 = (_QWORD *)v35;
    }
  }
  else
  {
    v30 = a1 + 1;
  }
LABEL_72:
  *a3 = v30;
  return v5;
}

