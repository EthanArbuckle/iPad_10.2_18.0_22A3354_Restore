_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66D7390;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D11528(void *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D115F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3D11878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN4mfse3abm9SyncEvent10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D11A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D11A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D11A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4mfse3abm15EnableSyncEvent8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D11B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D11B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D11B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mfse::tlv::abm::FileSystem>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mfse::tlv::abm::FileSystem>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<mfse::tlv::abm::FileSystem>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D7478;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ctu::cf::insert<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v7;
  void **v8;
  void *v9;
  BOOL v10;
  void *key;

  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  v7 = key;
  v8 = (void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v8 = (void **)MEMORY[0x1E0C9AE40];
  v9 = *v8;
  key = *v8;
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (v10)
  {
    if (!v9)
      goto LABEL_10;
  }
  else
  {
    CFDictionaryAddValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_10:
  if (v7)
    CFRelease(v7);
}

void sub_1B3D11C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4mfse3abm10SyncNoWait8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D11D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D11D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D11DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio16RFSCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN5radio16RFSCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN5radio16RFSCommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void cpms::QMICommandDriver::create(uint64_t a1@<X0>, cpms::QMICommandDriver **a2@<X8>)
{
  _OWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;

  *a2 = (cpms::QMICommandDriver *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (cpms::QMICommandDriver *)0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x70uLL);
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v14 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v14 = 0;
  }
  cpms::CommandDriver::CommandDriver();
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)v4 = &off_1E66D7540;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  *a2 = (cpms::QMICommandDriver *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (cpms::QMICommandDriver *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<cpms::QMICommandDriver>::shared_ptr[abi:ne180100]<cpms::QMICommandDriver,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1},void>(a2, (uint64_t)v4);
  if (v13)
  {
    v11 = (unint64_t *)&v13->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  cpms::QMICommandDriver::init(*a2);
}

void sub_1B3D11F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D11FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  void *v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v14 = a12;
  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v12);
  _Unwind_Resume(a1);
}

uint64_t cpms::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v9;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  cpms::CommandDriver::CommandDriver();
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)a1 = &off_1E66D7540;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v9;

  v3 = *(std::__shared_weak_count **)(a2 + 8);
  v9 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  cpms::CommandDriver::CommandDriver();
  if (v9)
  {
    v6 = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)a1 = &off_1E66D7540;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_1B3D12098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void cpms::QMICommandDriver::init(cpms::QMICommandDriver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2 || (v3 = *((_QWORD *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 3);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::init(void)::$_0>(cpms::QMICommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1B3D1225C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void cpms::QMICommandDriver::~QMICommandDriver(cpms::QMICommandDriver *this)
{
  char *v2;
  NSObject *v3;
  NSObject *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint8_t v12[16];

  *(_QWORD *)this = &off_1E66D7540;
  v2 = (char *)this + 40;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v12, 2u);
  }
  v4 = *((_QWORD *)this + 13);
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)*((_QWORD *)this + 12);
  if (v5)
    _Block_release(v5);
  qmi::Client::~Client((cpms::QMICommandDriver *)((char *)this + 64));
  *(_QWORD *)this = &unk_1E66D7650;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  MEMORY[0x1B5E2ED0C](v2);
  v9 = *((_QWORD *)this + 4);
  if (v9)
    dispatch_release(v9);
  v10 = *((_QWORD *)this + 3);
  if (v10)
    dispatch_release(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

{
  void *v1;

  cpms::QMICommandDriver::~QMICommandDriver(this);
  operator delete(v1);
}

uint64_t cpms::QMICommandDriver::checkError@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  NSObject *v22;
  size_t v23;
  void **v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  const void **v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  CFTypeRef *v37;
  void *__dst[2];
  unint64_t v39;
  CFTypeRef cf[2];
  int64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *__p[2];
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t buf[4];
  CFTypeRef *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  if (!*(_DWORD *)(a2 + 4))
    return result;
  v6 = result;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = 0xAAAAAAAAAAAAAAAALL;
  v59 = v7;
  v58 = v7;
  v57 = v7;
  v56 = v7;
  v55 = v7;
  v54 = v7;
  v53 = v7;
  v52 = v7;
  v51 = v7;
  v48 = v7;
  v46 = v7;
  *(_OWORD *)__p = v7;
  v44 = v7;
  v45 = v7;
  v43 = v7;
  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v50 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v42 + *(_QWORD *)(v42 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v42 + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v12, &v43);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v42 = v8 + 24;
  v50 = v9;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v43 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v48 = 0u;
  LODWORD(v49) = 16;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Failed to ", 10);
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"; ", 2);
  v20 = (const char *)qmi::asString();
  v21 = strlen(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  v22 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if ((v49 & 0x10) != 0)
    {
      v32 = *((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1) < (unint64_t)v46)
      {
        *((_QWORD *)&v48 + 1) = v46;
        v32 = v46;
      }
      v33 = (const void **)&v45 + 1;
    }
    else
    {
      if ((v49 & 8) == 0)
      {
        v30 = 0;
        HIBYTE(v41) = 0;
        v31 = cf;
        goto LABEL_50;
      }
      v33 = (const void **)&v44;
      v32 = v45;
    }
    v34 = *v33;
    v30 = v32 - (_QWORD)*v33;
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v30 >= 0x17)
    {
      v35 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v35 = v30 | 7;
      v36 = v35 + 1;
      v31 = operator new(v35 + 1);
      cf[1] = (CFTypeRef)v30;
      v41 = v36 | 0x8000000000000000;
      cf[0] = v31;
    }
    else
    {
      HIBYTE(v41) = v32 - *(_BYTE *)v33;
      v31 = cf;
      if (!v30)
        goto LABEL_50;
    }
    memmove(v31, v34, v30);
LABEL_50:
    *((_BYTE *)v31 + v30) = 0;
    v37 = cf;
    if (v41 < 0)
      v37 = (CFTypeRef *)cf[0];
    *(_DWORD *)buf = 136315138;
    v61 = v37;
    _os_log_error_impl(&dword_1B3CB3000, v22, OS_LOG_TYPE_ERROR, "%s: ", buf, 0xCu);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)cf[0]);
  }
  if ((v49 & 0x10) != 0)
  {
    v25 = *((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1) < (unint64_t)v46)
    {
      *((_QWORD *)&v48 + 1) = v46;
      v25 = v46;
    }
    v26 = (const void *)*((_QWORD *)&v45 + 1);
    v23 = v25 - *((_QWORD *)&v45 + 1);
    if ((unint64_t)(v25 - *((_QWORD *)&v45 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
  }
  else
  {
    if ((v49 & 8) == 0)
    {
      v23 = 0;
      HIBYTE(v39) = 0;
      v24 = __dst;
      goto LABEL_22;
    }
    v26 = (const void *)v44;
    v23 = v45 - v44;
    if ((_QWORD)v45 - (_QWORD)v44 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_34:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v24 = (void **)operator new(v27 + 1);
    __dst[1] = (void *)v23;
    v39 = v28 | 0x8000000000000000;
    __dst[0] = v24;
    goto LABEL_21;
  }
  HIBYTE(v39) = v23;
  v24 = __dst;
  if (v23)
LABEL_21:
    memmove(v24, v26, v23);
LABEL_22:
  *((_BYTE *)v24 + v23) = 0;
  CreateError();
  if (cf == a4)
    goto LABEL_25;
  v29 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v29)
  {
    CFRelease(v29);
LABEL_25:
    if (cf[0])
      CFRelease(cf[0]);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  v42 = *v10;
  *(uint64_t *)((char *)&v42 + *(_QWORD *)(v42 - 24)) = v10[3];
  *(_QWORD *)&v43 = v13 + 16;
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v50);
}

void sub_1B3D12808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void cpms::QMICommandDriver::sendPowerBudget(_QWORD *a1, _OWORD *a2, NSObject **a3)
{
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t v24;
  dispatch_object_t object[2];

  v23 = 0;
  v24 = 0;
  *(_QWORD *)&v22 = a1;
  *((_QWORD *)&v22 + 1) = &v23;
  if ((__int128 *)((char *)&v22 + 8) != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v22 + 8, *(_QWORD **)a2, (_QWORD *)a2 + 1);
  v5 = *a3;
  if (*a3)
    v5 = _Block_copy(v5);
  v6 = a3[1];
  object[0] = v5;
  object[1] = v6;
  if (v6)
    dispatch_retain(v6);
  v7 = (std::__shared_weak_count *)a1[2];
  if (!v7 || (v8 = a1[1], (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  v11 = operator new(0x30uLL);
  v12 = v11;
  v13 = v11 + 1;
  *(_OWORD *)v11 = v22;
  v14 = v23;
  v15 = v24;
  v11[2] = v23;
  v23 = 0;
  v24 = 0;
  v11[3] = v15;
  v16 = v14 + 2;
  if (v15)
    v13 = v16;
  *v13 = v11 + 2;
  *((_QWORD *)&v22 + 1) = &v23;
  *((_OWORD *)v11 + 2) = *(_OWORD *)object;
  object[0] = 0;
  object[1] = 0;
  v17 = a1[3];
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v19 = __ldxr(p_shared_owners);
  while (__stxr(v19 + 1, p_shared_owners));
  v20 = operator new(0x18uLL);
  *v20 = v12;
  v20[1] = v8;
  v20[2] = v10;
  dispatch_async_f(v17, v20, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v21 = __ldaxr(p_shared_owners);
  while (__stlxr(v21 - 1, p_shared_owners));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  if (object[1])
    dispatch_release(object[1]);
  if (object[0])
    _Block_release(object[0]);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v22 + 8, v23);
}

void sub_1B3D12A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t v11;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v11, a11);
  _Unwind_Resume(a1);
}

void cpms::QMICommandDriver::registerPowerBudgetIndication(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "virtual void cpms::QMICommandDriver::registerPowerBudgetIndication(PowerBudgetIndicationCallback)";
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I %s not implemented yet", (uint8_t *)&v2, 0xCu);
  }
}

void cpms::QMICommandDriver::enablePowerBudgetIndication(cpms::QMICommandDriver *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "virtual void cpms::QMICommandDriver::enablePowerBudgetIndication(BOOL, unsigned int)";
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I %s not implemented yet", (uint8_t *)&v2, 0xCu);
  }
}

void cpms::QMICommandDriver::getCurrentPower(_QWORD *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  if (!*(_QWORD *)a2)
  {
    v4 = 0;
    v5 = *(NSObject **)(a2 + 8);
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = _Block_copy(*(const void **)a2);
  v5 = *(NSObject **)(a2 + 8);
  if (v5)
LABEL_3:
    dispatch_retain(v5);
LABEL_4:
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x18uLL);
  *v10 = a1;
  v10[1] = v4;
  v10[2] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[3];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void cpms::QMICommandDriver::queryThermalID(_QWORD *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  if (!*(_QWORD *)a2)
  {
    v4 = 0;
    v5 = *(NSObject **)(a2 + 8);
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = _Block_copy(*(const void **)a2);
  v5 = *(NSObject **)(a2 + 8);
  if (v5)
LABEL_3:
    dispatch_retain(v5);
LABEL_4:
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x18uLL);
  *v10 = a1;
  v10[1] = v4;
  v10[2] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[3];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0>(cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0,std::default_delete<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void cpms::QMICommandDriver::setThermalReportFrequency(_QWORD *a1, int a2, int a3, const void **a4, uint64_t a5)
{
  void *v9;
  const void *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _DWORD *v17;
  unint64_t *p_shared_owners;
  NSObject *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  if (*a4)
  {
    v9 = _Block_copy(*a4);
    v10 = *(const void **)a5;
    if (*(_QWORD *)a5)
      goto LABEL_3;
LABEL_14:
    v11 = 0;
    v12 = *(NSObject **)(a5 + 8);
    if (!v12)
      goto LABEL_5;
    goto LABEL_4;
  }
  v9 = 0;
  v10 = *(const void **)a5;
  if (!*(_QWORD *)a5)
    goto LABEL_14;
LABEL_3:
  v11 = _Block_copy(v10);
  v12 = *(NSObject **)(a5 + 8);
  if (v12)
LABEL_4:
    dispatch_retain(v12);
LABEL_5:
  v13 = (std::__shared_weak_count *)a1[2];
  if (!v13 || (v14 = a1[1], (v15 = std::__shared_weak_count::lock(v13)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v16 = v15;
  v17 = operator new(0x28uLL);
  *(_QWORD *)v17 = a1;
  v17[2] = a2;
  v17[3] = a3;
  *((_QWORD *)v17 + 2) = v9;
  *((_QWORD *)v17 + 3) = v11;
  *((_QWORD *)v17 + 4) = v12;
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  v19 = a1[3];
  do
    v20 = __ldxr(p_shared_owners);
  while (__stxr(v20 + 1, p_shared_owners));
  v21 = operator new(0x18uLL);
  *v21 = v17;
  v21[1] = v14;
  v21[2] = v16;
  dispatch_async_f(v19, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
}

void cpms::QMICommandDriver::getPowerMitigation(_QWORD *a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  if (!*(_QWORD *)a2)
  {
    v4 = 0;
    v5 = *(NSObject **)(a2 + 8);
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = _Block_copy(*(const void **)a2);
  v5 = *(NSObject **)(a2 + 8);
  if (v5)
LABEL_3:
    dispatch_retain(v5);
LABEL_4:
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x18uLL);
  *v10 = a1;
  v10[1] = v4;
  v10[2] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = a1[3];
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0>(cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0,std::default_delete<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

uint64_t dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

_QWORD *std::shared_ptr<cpms::QMICommandDriver>::shared_ptr[abi:ne180100]<cpms::QMICommandDriver,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D76B0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D13188(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1}::operator() const(cpms::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D131A8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<cpms::QMICommandDriver *,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver *)#1},std::allocator<cpms::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<cpms::QMICommandDriver *,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver *)#1},std::allocator<cpms::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1}::operator() const(cpms::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<cpms::QMICommandDriver *,std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver *)#1},std::allocator<cpms::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3"
                     "__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16QMICommandDr"
                                "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4cpms13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<cpms::QMICommandDriver> ctu::SharedSynchronizable<cpms::CommandDriver>::make_shared_ptr<cpms::QMICommandDriver>(cpms::QMICommandDriver*)::{lambda(cpms::QMICommandDriver*)#1}::operator() const(cpms::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::init(void)::$_0>(cpms::QMICommandDriver::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::init(void)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const char *Name;
  size_t v43;
  size_t v44;
  void *p_dst;
  NSObject *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_weak_owners;
  unint64_t v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  __int128 v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint8_t v69[8];
  void *v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  void *v73;
  uint64_t v74;
  void *__p;
  uint64_t v76;
  void (*v77)(uint64_t);
  void *v78;
  uint64_t v79;
  void *__dst;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint8_t buf[8];
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  NSObject *v89;
  std::__shared_weak_count *v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  NSObject *v93;
  unint64_t v94;
  unint64_t v95;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Init", buf, 2u);
  }
  v94 = 0xAAAAAAAAAAAAAAAALL;
  v95 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v3 + 48));
  if (!v94)
  {
    Name = (const char *)cpms::CommandDriver::getName((cpms::CommandDriver *)v3);
    v43 = strlen(Name);
    if (v43 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v44 = v43;
    if (v43 >= 0x17)
    {
      v67 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v43 | 7) != 0x17)
        v67 = v43 | 7;
      v68 = v67 + 1;
      p_dst = operator new(v67 + 1);
      v81 = v44;
      v82 = v68 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v82) = v43;
      p_dst = &__dst;
      if (!v43)
      {
        LOBYTE(__dst) = 0;
        v46 = *(NSObject **)(v3 + 24);
        v89 = v46;
        if (!v46)
        {
LABEL_65:
          HIBYTE(v77) = 3;
          LODWORD(__p) = 7369570;
          v47 = *(std::__shared_weak_count **)(v3 + 16);
          if (!v47 || (v48 = *(_QWORD *)(v3 + 8), (v49 = std::__shared_weak_count::lock(v47)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v50 = v49;
          p_shared_weak_owners = (unint64_t *)&v49->__shared_weak_owners_;
          do
            v52 = __ldxr(p_shared_weak_owners);
          while (__stxr(v52 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v49->__shared_owners_;
          do
            v54 = __ldaxr(p_shared_owners);
          while (__stlxr(v54 - 1, p_shared_owners));
          if (v54)
          {
            v91 = 0;
            v92 = 0;
            v55 = std::__shared_weak_count::lock(v49);
            if (v55)
            {
LABEL_73:
              v56 = (unint64_t *)&v55->__shared_weak_owners_;
              do
                v57 = __ldxr(v56);
              while (__stxr(v57 + 1, v56));
              v58 = v92;
              v91 = v48;
              v92 = v55;
              if (!v58)
              {
LABEL_77:
                std::__shared_weak_count::__release_weak(v50);
                if (v55)
                {
                  v59 = (unint64_t *)&v55->__shared_owners_;
                  do
                    v60 = __ldaxr(v59);
                  while (__stlxr(v60 - 1, v59));
                  if (!v60)
                  {
                    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                    std::__shared_weak_count::__release_weak(v55);
                  }
                }
                qmi::Client::createWithQueue();
                v61 = v87;
                v87 = 0uLL;
                v62 = *(std::__shared_weak_count **)(v3 + 88);
                *(_OWORD *)(v3 + 80) = v61;
                if (v62)
                {
                  v63 = (unint64_t *)&v62->__shared_owners_;
                  do
                    v64 = __ldaxr(v63);
                  while (__stlxr(v64 - 1, v63));
                  if (!v64)
                  {
                    ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                    std::__shared_weak_count::__release_weak(v62);
                  }
                }
                qmi::Client::~Client((qmi::Client *)buf);
                if (v92)
                  std::__shared_weak_count::__release_weak(v92);
                if (SHIBYTE(v77) < 0)
                {
                  operator delete(__p);
                  v33 = v89;
                  if (!v89)
                    goto LABEL_45;
                }
                else
                {
                  v33 = v89;
                  if (!v89)
                    goto LABEL_45;
                }
LABEL_44:
                dispatch_release(v33);
                goto LABEL_45;
              }
LABEL_76:
              std::__shared_weak_count::__release_weak(v58);
              goto LABEL_77;
            }
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v50);
            v91 = 0;
            v92 = 0;
            v55 = std::__shared_weak_count::lock(v50);
            if (v55)
              goto LABEL_73;
          }
          v58 = v92;
          v91 = 0;
          v92 = v55;
          if (!v58)
            goto LABEL_77;
          goto LABEL_76;
        }
LABEL_64:
        dispatch_retain(v46);
        goto LABEL_65;
      }
    }
    memmove(p_dst, Name, v44);
    *((_BYTE *)p_dst + v44) = 0;
    v46 = *(NSObject **)(v3 + 24);
    v89 = v46;
    if (!v46)
      goto LABEL_65;
    goto LABEL_64;
  }
  v5 = (const char *)cpms::CommandDriver::getName((cpms::CommandDriver *)v3);
  v6 = strlen(v5);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v65 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v65 = v6 | 7;
    v66 = v65 + 1;
    v8 = operator new(v65 + 1);
    v81 = v7;
    v82 = v66 | 0x8000000000000000;
    __dst = v8;
LABEL_95:
    memmove(v8, v5, v7);
    *((_BYTE *)v8 + v7) = 0;
    v9 = *(NSObject **)(v3 + 24);
    v93 = v9;
    if (!v9)
      goto LABEL_9;
    goto LABEL_8;
  }
  HIBYTE(v82) = v6;
  v8 = &__dst;
  if (v6)
    goto LABEL_95;
  LOBYTE(__dst) = 0;
  v9 = *(NSObject **)(v3 + 24);
  v93 = v9;
  if (v9)
LABEL_8:
    dispatch_retain(v9);
LABEL_9:
  HIBYTE(v77) = 3;
  LODWORD(__p) = 7369570;
  v10 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v10 || (v11 = *(_QWORD *)(v3 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  v14 = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
    v91 = 0;
    v92 = 0;
    v18 = std::__shared_weak_count::lock(v13);
    if (v18)
      goto LABEL_17;
LABEL_98:
    v21 = v92;
    v91 = 0;
    v92 = v18;
    if (!v21)
      goto LABEL_21;
    goto LABEL_20;
  }
  v91 = 0;
  v92 = 0;
  v18 = std::__shared_weak_count::lock(v12);
  if (!v18)
    goto LABEL_98;
LABEL_17:
  v19 = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  v21 = v92;
  v91 = v11;
  v92 = v18;
  if (v21)
LABEL_20:
    std::__shared_weak_count::__release_weak(v21);
LABEL_21:
  std::__shared_weak_count::__release_weak(v13);
  if (v18)
  {
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v89 = v94;
  v90 = (std::__shared_weak_count *)v95;
  if (v95)
  {
    v24 = (unint64_t *)(v95 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  qmi::Client::createWithQueueLocal();
  v26 = v87;
  v87 = 0uLL;
  v27 = *(std::__shared_weak_count **)(v3 + 88);
  *(_OWORD *)(v3 + 80) = v26;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  qmi::Client::~Client((qmi::Client *)buf);
  v30 = v90;
  if (v90)
  {
    v31 = (unint64_t *)&v90->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v92)
    std::__shared_weak_count::__release_weak(v92);
  if (SHIBYTE(v77) < 0)
    operator delete(__p);
  v33 = v93;
  if (v93)
    goto LABEL_44;
LABEL_45:
  if (SHIBYTE(v82) < 0)
    operator delete(__dst);
  v34 = (void *)MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v86 = 0x40000000;
  *(_QWORD *)&v87 = ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke;
  *((_QWORD *)&v87 + 1) = &__block_descriptor_tmp_5;
  v88 = v3;
  qmi::Client::setHandler();
  __dst = v34;
  v81 = 0x40000000;
  v82 = (unint64_t)___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_6;
  v83 = &__block_descriptor_tmp_7_1;
  v84 = v3;
  qmi::Client::setHandler();
  __p = v34;
  v76 = 0x40000000;
  v77 = ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_8;
  v78 = &__block_descriptor_tmp_10_2;
  v79 = v3;
  qmi::Client::setHandler();
  v70 = v34;
  v71 = 0x40000000;
  v72 = ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_11;
  v73 = &__block_descriptor_tmp_12_2;
  v74 = v3;
  qmi::Client::setHandler();
  qmi::Client::start((qmi::Client *)(v3 + 64));
  v35 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v69 = 0;
    _os_log_impl(&dword_1B3CB3000, v35, OS_LOG_TYPE_DEFAULT, "#I Starting", v69, 2u);
  }
  v36 = (std::__shared_weak_count *)v95;
  if (v95)
  {
    v37 = (unint64_t *)(v95 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  operator delete(v2);
  v39 = (std::__shared_weak_count *)a1[2];
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(a1);
}

void sub_1B3D139C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  std::__shared_weak_count *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  v32 = *(std::__shared_weak_count **)(v30 - 112);
  if (v32)
  {
    std::__shared_weak_count::__release_weak(v32);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      v33 = *(NSObject **)(v30 - 136);
      if (!v33)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  v33 = *(NSObject **)(v30 - 136);
  if (!v33)
  {
LABEL_8:
    if (a28 < 0)
      operator delete(__p);
    v34 = *(std::__shared_weak_count **)(v30 - 88);
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    operator delete(v29);
    v37 = (std::__shared_weak_count *)v28[2];
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    operator delete(v28);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v33);
  goto LABEL_8;
}

void ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I Stopped", v2, 2u);
  }
}

void ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_6(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I Started", v2, 2u);
  }
}

void ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_8(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I Enter Low Power", v2, 2u);
  }
}

void ___ZZN4cpms16QMICommandDriver4initEvENK3__0clEv_block_invoke_11(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I Enter Low Power", v2, 2u);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t (***v21)();
  uint64_t *v22;
  uint64_t (***v23)();
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  const void **v31;
  char *v32;
  _BYTE *v33;
  _WORD *v34;
  _WORD *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  NSObject *v47;
  void *v48;
  NSObject *v49;
  const void *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int v72;
  __int128 v73;
  __int128 v74;
  _QWORD aBlock[5];
  uint64_t (**v76)();
  uint64_t v77;
  int *v78;
  uint64_t (***v79)();
  uint64_t v80;
  void *v81;
  dispatch_object_t object;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v73 = v4;
  v74 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v73);
  v72 = 0;
  v5 = (char *)*((_QWORD *)&v73 + 1);
  v6 = (char *)v74;
  v7 = (const void **)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1) != (_QWORD)v74)
  {
    v7 = (const void **)*((_QWORD *)&v73 + 1);
    while (*((_BYTE *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v74)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v74)
  {
LABEL_9:
    v10 = operator new(0x28uLL);
    v11 = v10;
    v10[8] = 16;
    *(_QWORD *)v10 = &off_1E66D77C8;
    *((_QWORD *)v10 + 2) = 0;
    v9 = v10 + 16;
    *((_QWORD *)v10 + 3) = 0;
    *((_QWORD *)v10 + 4) = 0;
    if ((unint64_t)v6 < *((_QWORD *)&v74 + 1))
    {
      *(_QWORD *)v6 = v10;
      *(_QWORD *)&v74 = v6 + 8;
      goto LABEL_23;
    }
    v12 = v6 - v5;
    v13 = (v6 - v5) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = *((_QWORD *)&v74 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v74 + 1) - (_QWORD)v5) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v20 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((_QWORD *)&v73 + 1) = v18;
        *(_QWORD *)&v74 = v20;
        *((_QWORD *)&v74 + 1) = v19;
        if (!v5)
        {
LABEL_22:
          *(_QWORD *)&v74 = v20;
          goto LABEL_23;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v11;
      v20 = 8 * v13 + 8;
      if (v5 == v6)
        goto LABEL_20;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_110;
    if ((unint64_t)(v5 - v17) < 0x20)
      goto LABEL_110;
    v54 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
    v56 = &v6[-v55];
    v18 = (_QWORD *)((char *)v18 - v55);
    v57 = &v17[8 * v13 - 16];
    v58 = v6 - 16;
    v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *(_OWORD *)v58;
      *(v57 - 1) = *((_OWORD *)v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 32;
      v59 -= 4;
    }
    while (v59);
    v6 = v56;
    if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_110:
      do
      {
        v61 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v18 = v61;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v73 + 1);
    *((_QWORD *)&v73 + 1) = v18;
    *(_QWORD *)&v74 = v20;
    *((_QWORD *)&v74 + 1) = v19;
    if (!v5)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = v8 + 16;
LABEL_23:
  v76 = off_1E66D7800;
  v77 = (uint64_t)v9;
  v21 = &v76;
  v78 = &v72;
  v79 = &v76;
  v22 = (uint64_t *)v2[1];
  if (v22 == v2 + 2)
  {
    v27 = 4;
  }
  else
  {
    v23 = &v76;
    while (((unsigned int (*)(uint64_t (***)(), uint64_t, uint64_t *))(*v23)[6])(v23, (uint64_t)v22 + 28, v22 + 4))
    {
      v24 = (uint64_t *)v22[1];
      v25 = v22;
      if (v24)
      {
        do
        {
          v22 = v24;
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v22 = (uint64_t *)v25[2];
          v26 = *v22 == (_QWORD)v25;
          v25 = v22;
        }
        while (!v26);
      }
      if (v22 == v2 + 2)
        break;
      v23 = v79;
      if (!v79)
        std::__throw_bad_function_call[abi:ne180100]();
    }
    v21 = v79;
    if (v79 == &v76)
    {
      v27 = 4;
      v21 = &v76;
    }
    else
    {
      if (!v79)
        goto LABEL_40;
      v27 = 5;
    }
  }
  (*v21)[v27]();
LABEL_40:
  v28 = v72;
  v29 = (char *)*((_QWORD *)&v73 + 1);
  v30 = (char *)v74;
  v31 = (const void **)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1) != (_QWORD)v74)
  {
    v31 = (const void **)*((_QWORD *)&v73 + 1);
    while (*((_BYTE *)*v31 + 8) != 1)
    {
      if (++v31 == (const void **)v74)
        goto LABEL_48;
    }
  }
  if (v31 == (const void **)v74)
  {
LABEL_48:
    v34 = operator new(0x10uLL);
    v35 = v34;
    v34[4] = 1;
    *(_QWORD *)v34 = off_1E66D78A8;
    if ((unint64_t)v30 < *((_QWORD *)&v74 + 1))
    {
      *(_QWORD *)v30 = v34;
      v36 = (uint64_t)(v30 + 8);
LABEL_61:
      v33 = (char *)v35 + 9;
      *(_QWORD *)&v74 = v36;
      goto LABEL_62;
    }
    v37 = v30 - v29;
    v38 = (v30 - v29) >> 3;
    v39 = v38 + 1;
    if ((unint64_t)(v38 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v40 = *((_QWORD *)&v74 + 1) - (_QWORD)v29;
    if ((uint64_t)(*((_QWORD *)&v74 + 1) - (_QWORD)v29) >> 2 > v39)
      v39 = v40 >> 2;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v41 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v41 = v39;
    if (v41)
    {
      if (v41 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v42 = operator new(8 * v41);
      v43 = &v42[8 * v38];
      v44 = &v42[8 * v41];
      *v43 = v35;
      v36 = (uint64_t)(v43 + 1);
      if (v29 == v30)
      {
LABEL_59:
        *((_QWORD *)&v73 + 1) = v43;
        *(_QWORD *)&v74 = v36;
        *((_QWORD *)&v74 + 1) = v44;
        if (!v29)
          goto LABEL_61;
LABEL_60:
        operator delete(v29);
        goto LABEL_61;
      }
    }
    else
    {
      v42 = 0;
      v43 = (_QWORD *)(8 * v38);
      v44 = 0;
      *(_QWORD *)(8 * v38) = v35;
      v36 = 8 * v38 + 8;
      if (v29 == v30)
        goto LABEL_59;
    }
    if ((unint64_t)(v37 - 8) < 0x58)
      goto LABEL_111;
    if ((unint64_t)(v29 - v42) < 0x20)
      goto LABEL_111;
    v62 = ((unint64_t)(v37 - 8) >> 3) + 1;
    v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
    v64 = &v30[-v63];
    v43 = (_QWORD *)((char *)v43 - v63);
    v65 = &v42[8 * v38 - 16];
    v66 = v30 - 16;
    v67 = v62 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v68 = *(_OWORD *)v66;
      *(v65 - 1) = *((_OWORD *)v66 - 1);
      *v65 = v68;
      v65 -= 2;
      v66 -= 32;
      v67 -= 4;
    }
    while (v67);
    v30 = v64;
    if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_111:
      do
      {
        v69 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *--v43 = v69;
      }
      while (v30 != v29);
    }
    v29 = (char *)*((_QWORD *)&v73 + 1);
    *((_QWORD *)&v73 + 1) = v43;
    *(_QWORD *)&v74 = v36;
    *((_QWORD *)&v74 + 1) = v44;
    if (!v29)
      goto LABEL_61;
    goto LABEL_60;
  }
  if (!v32)
    __cxa_bad_cast();
  v33 = v32 + 9;
LABEL_62:
  *v33 = v28;
  v70 = QMIServiceMsg::create();
  v45 = MEMORY[0x1E0C809B0];
  v76 = (uint64_t (**)())MEMORY[0x1E0C809B0];
  v77 = 1174405120;
  v78 = (int *)___ZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke;
  v79 = (uint64_t (***)())&__block_descriptor_tmp_15_0;
  v80 = v3;
  v46 = (void *)v2[4];
  if (v46)
    v46 = _Block_copy(v46);
  v81 = v46;
  v47 = v2[5];
  object = v47;
  if (v47)
    dispatch_retain(v47);
  aBlock[0] = v45;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm14SetPowerBudget8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D78D8;
  aBlock[4] = &v76;
  v48 = _Block_copy(aBlock);
  v71 = v48;
  if (v70)
  {
    qmi::Client::send();
    v48 = v71;
  }
  if (v48)
    _Block_release(v48);
  if (object)
    dispatch_release(object);
  if (v81)
    _Block_release(v81);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v73);
  v49 = v2[5];
  if (v49)
    dispatch_release(v49);
  v50 = (const void *)v2[4];
  if (v50)
    _Block_release(v50);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v2 + 1), (_QWORD *)v2[2]);
  operator delete(v2);
  v51 = (std::__shared_weak_count *)a1[2];
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  operator delete(a1);
}

void sub_1B3D14348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *aBlock,dispatch_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  void *v9;
  NSObject *v10;
  void *__p;
  __int128 v12;
  void *v13;
  void *aBlock;
  CFTypeRef v15;
  _BYTE cf[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = operator new(0x20uLL);
    __p = v5;
    v12 = xmmword_1B3DCDB00;
    strcpy((char *)v5, "Failed to set power budget");
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf = 136315138;
      *(_QWORD *)&cf[4] = v5;
      _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "%s", cf, 0xCu);
    }
    cpms::QMICommandDriver::checkError(v3, a2, (uint64_t)&__p, (CFTypeRef *)cf);
    v7 = *(const void **)cf;
    if (SHIBYTE(v12) < 0)
      operator delete(__p);
    v8 = (const void *)a1[5];
    if (!v8)
    {
LABEL_13:
      if (!v7)
        return;
LABEL_29:
      CFRelease(v7);
      return;
    }
  }
  else
  {
    v7 = 0;
    v8 = (const void *)a1[5];
    if (!v8)
      goto LABEL_13;
  }
  if (!a1[6])
    goto LABEL_13;
  if (v7 && (CFRetain(v7), (v8 = (const void *)a1[5]) == 0))
    v9 = 0;
  else
    v9 = _Block_copy(v8);
  v10 = a1[6];
  __p = (void *)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v12 = 1174405120;
  *((_QWORD *)&v12 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v13 = &__block_descriptor_tmp_18_1;
  if (!v9)
  {
    aBlock = 0;
    v15 = v7;
    if (!v7)
      goto LABEL_21;
    goto LABEL_20;
  }
  aBlock = _Block_copy(v9);
  v15 = v7;
  if (v7)
LABEL_20:
    CFRetain(v7);
LABEL_21:
  dispatch_async(v10, &__p);
  if (v15)
    CFRelease(v15);
  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  if (v7)
  {
    CFRelease(v7);
    goto LABEL_29;
  }
}

void sub_1B3D14694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66D77C8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66D77C8;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::getSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v1 == v2)
    return 4;
  else
    return 5 * ((unint64_t)(v2 - v1 - 8) >> 3) + 9;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 3;
  *a2 = v4;
  v5 = v3 + 4;
  *(_BYTE *)(v3 + 3) = (*(_DWORD *)(result + 24) - *(_DWORD *)(result + 16)) >> 3;
  v6 = *(_QWORD *)(result + 16);
  for (i = *(_QWORD *)(result + 24); v6 != i; v6 += 8)
  {
    *(_BYTE *)v5 = *(_BYTE *)v6;
    *(_DWORD *)(v5 + 1) = *(_DWORD *)(v6 + 4);
    v5 += 5;
  }
  *a2 = v5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = v5 - v4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerBudgets>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E66D77C8;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[8 * (v5 >> 3)];
    *((_QWORD *)v2 + 4) = v7;
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B3D1489C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_1E66D7800;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1E66D7800;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, unsigned __int8 *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _OWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  if (*((_BYTE *)a3 + 4))
  {
    v4 = *a2;
    v5 = *a3;
    v6 = *(uint64_t ***)(a1 + 8);
    v8 = v6[1];
    v7 = (unint64_t)v6[2];
    if ((unint64_t)v8 >= v7)
    {
      v10 = *v6;
      v11 = (char *)v8 - (char *)*v6;
      v12 = v11 >> 3;
      v13 = (v11 >> 3) + 1;
      if (v13 >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v14 = v7 - (_QWORD)v10;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v16 = operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      *v17 = v4 | (v5 << 32) | 0xAAAAAA00;
      v9 = v17 + 1;
      if (v8 != v10)
      {
        v18 = (char *)v8 - (char *)v10 - 8;
        if (v18 < 0x58)
          goto LABEL_30;
        if ((unint64_t)((char *)v8 - v16 - v11) < 0x20)
          goto LABEL_30;
        v19 = (v18 >> 3) + 1;
        v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v8[v20 / 0xFFFFFFFFFFFFFFF8];
        v17 = (uint64_t *)((char *)v17 - v20);
        v22 = &v16[8 * v12 - 16];
        v23 = v8 - 2;
        v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *v22 = v25;
          v22 -= 2;
          v23 -= 4;
          v24 -= 4;
        }
        while (v24);
        v8 = v21;
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_30:
          do
          {
            v26 = *--v8;
            *--v17 = v26;
          }
          while (v8 != v10);
        }
        v8 = *v6;
      }
      *v6 = v17;
      v6[1] = v9;
      v6[2] = (uint64_t *)&v16[8 * v15];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v4 | (v5 << 32) | 0xAAAAAA00;
      v9 = v8 + 1;
    }
    v6[1] = v9;
    ++**(_DWORD **)(a1 + 16);
  }
  return 1;
}

uint64_t std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ct"
                     "u2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvENKUlRN3bsp3tlv3abm12PowerBudgetsEE_clESH_EUlRKN3abm28B"
                     "asebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_po"
                                "interFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvENKUlRN3bsp3tlv3abm12PowerBudgets"
                                "EE_clESH_EUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvENKUlRN3bsp3tlv3abm12PowerBudgetsEE_clESH_EUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN4cpms16QMICommandDriver15sendPowerBudgetE10BudgetDataN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3$_0clEvENKUlRN3bsp3tlv3abm12PowerBudgetsEE_clESH_EUlRKN3abm28BasebandCPMSPowerBudgetScaleERKNSt3__18optionalIjEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1},std::allocator<cpms::QMICommandDriver::sendPowerBudget(BudgetData,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0::operator() const(void)::{lambda(bsp::tlv::abm::PowerBudgets &)#1}::operator() const(bsp::tlv::abm::PowerBudgets &)::{lambda(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)#1}>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NumberOfBudgets>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NumberOfBudgets>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NumberOfBudgets>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D78A8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm14SetPowerBudget8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D14C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D14C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D14CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D14D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>(cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0,dispatch_queue_s *::default_delete<cpms::QMICommandDriver::getCurrentPower(dispatch::callback<void({block_pointer})(BudgetData)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *v15;
  dispatch_object_t object;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  _OWORD v22[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  v17 = v3 + 64;
  v18 = QMIServiceMsg::create();
  v19 = 25000;
  v20 = 0;
  v21 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZZN4cpms16QMICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_19_3;
  v14[4] = v3;
  v6 = (void *)v2[1];
  if (v6)
    v6 = _Block_copy(v6);
  v15 = v6;
  v7 = v2[2];
  object = v7;
  if (v7)
    dispatch_retain(v7);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21GetCurrentPowerBudget8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D7960;
  aBlock[4] = v14;
  v8 = _Block_copy(aBlock);
  v21 = v8;
  if (v18)
  {
    qmi::Client::send();
    v8 = v21;
  }
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (v15)
    _Block_release(v15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  v9 = v2[2];
  if (v9)
    dispatch_release(v9);
  v10 = (const void *)v2[1];
  if (v10)
    _Block_release(v10);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1B3D14ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21)
{
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a17)
    qmi::Client::send();
  if (a20)
    _Block_release(a20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  v24 = v22[2];
  if (v24)
    dispatch_release(v24);
  v25 = (const void *)v22[1];
  if (v25)
    _Block_release(v25);
  operator delete(v22);
  v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver15getCurrentPowerEN8dispatch8callbackIU13block_pointerFv10BudgetDataEEEENK3__0clEv_block_invoke(_QWORD *a1, qmi::MessageBase *this)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  void *v9;
  qmi::MessageBase *v10;
  tlv *TlvValue;
  int v12;
  tlv *v13;
  int v14;
  tlv *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  NSObject *v18;
  unsigned int v19;
  int v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  int v24;
  int v25;
  unsigned int v26;
  _BYTE *v27;
  uint64_t *v28;
  NSObject *v29;
  const void *v30;
  void *v31;
  NSObject *v32;
  void *v33;
  tlv *v34;
  tlv *v35;
  qmi::MessageBase *v36;
  _QWORD *v37;
  _QWORD *v38[2];
  void *__p[3];
  tlv *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  uint8_t buf[8];
  uint64_t v48;
  void (*v49)(_QWORD *);
  void *v50;
  void *aBlock;
  _QWORD **v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  if (!*((_DWORD *)this + 1))
  {
    v10 = this;
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (!TlvValue)
      return;
    v13 = TlvValue;
    v14 = v12;
    v40 = TlvValue;
    memset(__p, 170, sizeof(__p));
    tlv::parseV<bsp::tlv::abm::CurrentPowerBudgets>(&v40, v12, (uint64_t)__p);
    v15 = v40;
    if (v40)
    {
      v34 = v40;
      v35 = v13;
      v36 = v10;
      v45 = 0;
      v46 = 0;
      v44 = &v45;
      v17 = (unsigned __int8 *)__p[0];
      v16 = (unsigned __int8 *)__p[1];
      if (__p[0] != __p[1])
      {
        while (1)
        {
          v18 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            v24 = *v17;
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v24;
            _os_log_debug_impl(&dword_1B3CB3000, v18, OS_LOG_TYPE_DEBUG, "#D Current Power from BB: Budget ID: %u", buf, 8u);
            v18 = *(NSObject **)(v3 + 40);
            if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
LABEL_14:
              v19 = *v17;
              v20 = *((_DWORD *)v17 + 1);
              v21 = &v45;
              v22 = &v45;
              v23 = v45;
              if (v45)
                goto LABEL_20;
              goto LABEL_24;
            }
          }
          else if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            goto LABEL_14;
          }
          v25 = *((_DWORD *)v17 + 1);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v25;
          _os_log_debug_impl(&dword_1B3CB3000, v18, OS_LOG_TYPE_DEBUG, "#D Current Power from BB: Budget: %u", buf, 8u);
          v19 = *v17;
          v20 = *((_DWORD *)v17 + 1);
          v21 = &v45;
          v22 = &v45;
          v23 = v45;
          if (v45)
          {
            while (1)
            {
LABEL_20:
              while (1)
              {
                v22 = (uint64_t **)v23;
                v26 = *((unsigned __int8 *)v23 + 28);
                if (v26 <= v19)
                  break;
                v23 = *v22;
                v21 = v22;
                if (!*v22)
                  goto LABEL_24;
              }
              if (v26 >= v19)
                break;
              v23 = v22[1];
              if (!v23)
              {
                v21 = v22 + 1;
                goto LABEL_24;
              }
            }
            *((_DWORD *)v22 + 8) = v20;
            *((_BYTE *)v22 + 36) = 1;
            v17 += 8;
            if (v17 == v16)
              goto LABEL_36;
          }
          else
          {
LABEL_24:
            v27 = operator new(0x28uLL);
            v27[28] = v19;
            v27[32] = 0;
            v27[36] = 0;
            *(_QWORD *)v27 = 0;
            *((_QWORD *)v27 + 1) = 0;
            *((_QWORD *)v27 + 2) = v22;
            *v21 = (uint64_t *)v27;
            v28 = (uint64_t *)v27;
            if (*v44)
            {
              v44 = (uint64_t **)*v44;
              v28 = *v21;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v45, v28);
            ++v46;
            *((_DWORD *)v27 + 8) = v20;
            v27[36] = 1;
            v17 += 8;
            if (v17 == v16)
              goto LABEL_36;
          }
        }
      }
      v29 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B3CB3000, v29, OS_LOG_TYPE_DEFAULT, "#I Got zero current power budget!", buf, 2u);
      }
LABEL_36:
      if (a1[5] && a1[6])
      {
        v42 = 0;
        v43 = 0;
        v41 = &v42;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v41, v44, &v45);
        v30 = (const void *)a1[5];
        if (v30)
          v31 = _Block_copy(v30);
        else
          v31 = 0;
        v32 = a1[6];
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v48 = 1174405120;
        v49 = ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke;
        v50 = &__block_descriptor_tmp_21;
        if (v31)
          v33 = _Block_copy(v31);
        else
          v33 = 0;
        v53 = 0;
        v54 = 0;
        aBlock = v33;
        v52 = &v53;
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v52, v41, &v42);
        dispatch_async(v32, buf);
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v52, v53);
        v53 = 0;
        v54 = 0;
        v52 = &v53;
        if (aBlock)
          _Block_release(aBlock);
        if (v31)
          _Block_release(v31);
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v41, v42);
        v42 = 0;
        v43 = 0;
        v41 = &v42;
      }
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v44, v45);
      v13 = v35;
      v10 = v36;
      v15 = v34;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v15)
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)v10, 16, v13, v14);
    return;
  }
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_ERROR, "Failed to get thermal sensor IDs from the baseband", buf, 2u);
    v5 = (const void *)a1[5];
    if (!v5)
      return;
  }
  else
  {
    v5 = (const void *)a1[5];
    if (!v5)
      return;
  }
  if (a1[6])
  {
    v38[0] = 0;
    v38[1] = 0;
    v37 = v38;
    v6 = _Block_copy(v5);
    v7 = v6;
    v8 = a1[6];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v48 = 1174405120;
    v49 = ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke;
    v50 = &__block_descriptor_tmp_21;
    if (v6)
      v9 = _Block_copy(v6);
    else
      v9 = 0;
    v53 = 0;
    v54 = 0;
    aBlock = v9;
    v52 = &v53;
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v52, v37, v38);
    dispatch_async(v8, buf);
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v52, v53);
    v53 = 0;
    v54 = 0;
    v52 = &v53;
    if (aBlock)
      _Block_release(aBlock);
    if (v7)
      _Block_release(v7);
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v37, v38[0]);
  }
}

void sub_1B3D154B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *aBlock,uint64_t a34,uint64_t a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10BudgetDataEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10BudgetDataEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21GetCurrentPowerBudget8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D156FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D15710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D1573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10BudgetDataEEclIJS1_EEEvDpT__block_invoke(_QWORD *a1)
{
  uint64_t v1;
  _QWORD **v2;
  _QWORD *v3[2];

  v1 = a1[4];
  v3[0] = 0;
  v3[1] = 0;
  v2 = v3;
  if (&v2 != a1 + 5)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v2, (_QWORD *)a1[5], a1 + 6);
  (*(void (**)(uint64_t, _QWORD ***))(v1 + 16))(v1, &v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v2, v3[0]);
}

void sub_1B3D157BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1B3D157D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10BudgetDataEEE40c16_ZTS10BudgetData(_QWORD *a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  a1[6] = 0;
  a1[4] = v4;
  a1[5] = a1 + 6;
  a1[7] = 0;
  if (a1 != (_QWORD *)a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(a1 + 5), *(_QWORD **)(a2 + 40), (_QWORD *)(a2 + 48));
}

void sub_1B3D15850(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v4;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(_QWORD **)(v1 + 48));
  v4 = *(const void **)(v1 + 32);
  if (v4)
    _Block_release(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10BudgetDataEEE40c16_ZTS10BudgetData(uint64_t a1)
{
  _QWORD *v1;
  const void *v2;

  v1 = (_QWORD *)(a1 + 48);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v2 = (const void *)*(v1 - 2);
  if (v2)
    _Block_release(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0>(cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0,std::default_delete<cpms::QMICommandDriver::queryThermalID(dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *v15;
  dispatch_object_t object;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  _OWORD v22[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  v17 = v3 + 64;
  v18 = QMIServiceMsg::create();
  v19 = 25000;
  v20 = 0;
  v21 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZZN4cpms16QMICommandDriver14queryThermalIDEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_24_3;
  v14[4] = v3;
  v6 = (void *)v2[1];
  if (v6)
    v6 = _Block_copy(v6);
  v15 = v6;
  v7 = v2[2];
  object = v7;
  if (v7)
    dispatch_retain(v7);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17ThermalGetSensors8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D7A18;
  aBlock[4] = v14;
  v8 = _Block_copy(aBlock);
  v21 = v8;
  if (v18)
  {
    qmi::Client::send();
    v8 = v21;
  }
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (v15)
    _Block_release(v15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  v9 = v2[2];
  if (v9)
    dispatch_release(v9);
  v10 = (const void *)v2[1];
  if (v10)
    _Block_release(v10);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1B3D15A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21)
{
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a17)
    qmi::Client::send();
  if (a20)
    _Block_release(a20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  v24 = v22[2];
  if (v24)
    dispatch_release(v24);
  v25 = (const void *)v22[1];
  if (v25)
    _Block_release(v25);
  operator delete(v22);
  v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver14queryThermalIDEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke(_QWORD *a1, qmi::MessageBase *this)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  void *v9;
  void *v11;
  NSObject *v12;
  char *TlvValue;
  int v14;
  _QWORD v15[2];
  void (*v16)(_QWORD *, unsigned __int8 **);
  void *v17;
  uint64_t v18;
  void *aBlock;
  dispatch_object_t object;
  void *__p;
  uint64_t v22;
  void (*v23)(_QWORD *);
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v3 = a1[4];
  if (*((_DWORD *)this + 1))
  {
    v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_error_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_ERROR, "Failed to get thermal sensor IDs from the baseband", (uint8_t *)&__p, 2u);
      v5 = (const void *)a1[5];
      if (!v5)
        return;
    }
    else
    {
      v5 = (const void *)a1[5];
      if (!v5)
        return;
    }
    if (a1[6])
    {
      v6 = _Block_copy(v5);
      v7 = v6;
      v8 = a1[6];
      __p = (void *)MEMORY[0x1E0C809B0];
      v22 = 1174405120;
      v23 = ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke;
      v24 = &__block_descriptor_tmp_26_3;
      if (v6)
        v9 = _Block_copy(v6);
      else
        v9 = 0;
      v25 = v9;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      dispatch_async(v8, &__p);
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      if (v25)
        _Block_release(v25);
      if (v7)
        _Block_release(v7);
    }
  }
  else
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1174405120;
    v16 = ___ZZN4cpms16QMICommandDriver14queryThermalIDEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke_22;
    v17 = &__block_descriptor_tmp_23_2;
    v18 = v3;
    v11 = (void *)a1[5];
    if (v11)
      v11 = _Block_copy(v11);
    v12 = a1[6];
    aBlock = v11;
    object = v12;
    if (v12)
      dispatch_retain(v12);
    TlvValue = (char *)qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      __p = 0;
      v22 = 0;
      v23 = 0;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, TlvValue, &TlvValue[v14], v14);
      v16(v15, (unsigned __int8 **)&__p);
      if (__p)
      {
        v22 = (uint64_t)__p;
        operator delete(__p);
      }
    }
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
}

void sub_1B3D15D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>::~callback((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(std::vector<abm::BasebandThermalID>)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver14queryThermalIDEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke_22(_QWORD *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned __int8 *v16;
  char *v17;
  unsigned __int8 *v18;
  char *v19;
  char v20;
  unint64_t v21;
  unsigned __int8 *v22;
  __int128 *v23;
  unint64_t v24;
  __int128 v25;
  unsigned __int8 *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  const void *v30;
  size_t v31;
  char *v32;
  char *v33;
  void *v34;
  const void *v35;
  NSObject *v36;
  size_t v37;
  char *v38;
  char *v39;
  void *__p;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *aBlock;
  void *v46;
  void *v47;
  char *v48;
  uint8_t buf[4];
  void **p_p;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[1];
  v4 = 0;
  if (*a2 != v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = a1[4];
    while (1)
    {
      v10 = *(NSObject **)(v8 + 40);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
      v11 = *v2;
      v42 = 0xAAAAAAAAAAAAAAAALL;
      v43 = 0x7AAAAAAAAAAAAAALL;
      strcpy((char *)&__p, "Invalid");
      if (v11 <= 2)
      {
        HIBYTE(v43) = 4;
        LODWORD(__p) = (v11 << 16) + 1378894420;
        BYTE4(__p) = 0;
      }
      *(_DWORD *)buf = 136315138;
      p_p = &__p;
      _os_log_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_DEFAULT, "#I Available Sensor ID: %s", buf, 0xCu);
      if (SHIBYTE(v43) < 0)
      {
        operator delete(__p);
        v12 = *v2;
        if (v7 < (unsigned __int8 *)v6)
          goto LABEL_3;
LABEL_9:
        v13 = v7 - v5;
        v14 = v7 - v5 + 1;
        if (v14 < 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        if (2 * (v6 - (char *)v5) > (unint64_t)v14)
          v14 = 2 * (v6 - (char *)v5);
        if ((unint64_t)(v6 - (char *)v5) >= 0x3FFFFFFFFFFFFFFFLL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          v16 = (unsigned __int8 *)operator new(v15);
          v17 = (char *)&v16[v13];
          v16[v13] = v12;
          v9 = (uint64_t)&v16[v13 + 1];
          if (v7 == v5)
            goto LABEL_28;
        }
        else
        {
          v16 = 0;
          v17 = (char *)(v7 - v5);
          *(_BYTE *)v13 = v12;
          v9 = v13 + 1;
          if (v7 == v5)
          {
LABEL_28:
            v4 = (unsigned __int8 *)v17;
            v6 = (char *)&v16[v15];
            if (!v5)
              goto LABEL_23;
LABEL_22:
            operator delete(v5);
            goto LABEL_23;
          }
        }
        if (v13 < 8 || v16 > &v16[v7 - v5 - 1] || v5 > v7 - 1 || (unint64_t)(v5 - v16) < 0x20)
        {
          v18 = v7;
          goto LABEL_19;
        }
        if (v13 >= 0x20)
        {
          v21 = v13 & 0xFFFFFFFFFFFFFFE0;
          v22 = &v16[v13 - 16];
          v23 = (__int128 *)(v7 - 16);
          v24 = v13 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v25 = *v23;
            *((_OWORD *)v22 - 1) = *(v23 - 1);
            *(_OWORD *)v22 = v25;
            v22 -= 32;
            v23 -= 2;
            v24 -= 32;
          }
          while (v24);
          if (v13 == v21)
            goto LABEL_21;
          if ((v13 & 0x18) == 0)
          {
            v17 -= v21;
            v18 = &v7[-v21];
LABEL_19:
            v19 = v17 - 1;
            do
            {
              v20 = *--v18;
              *v19-- = v20;
            }
            while (v18 != v5);
            goto LABEL_21;
          }
        }
        else
        {
          v21 = 0;
        }
        v18 = &v7[-(v13 & 0xFFFFFFFFFFFFFFF8)];
        v17 -= v13 & 0xFFFFFFFFFFFFFFF8;
        v26 = &v16[&v7[-v21] - v5 - 8];
        v27 = (uint64_t *)&v7[-v21 - 8];
        v28 = v21 - (v13 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v29 = *v27--;
          *(_QWORD *)v26 = v29;
          v26 -= 8;
          v28 += 8;
        }
        while (v28);
        if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_19;
LABEL_21:
        v4 = v16;
        v6 = (char *)&v16[v15];
        if (v5)
          goto LABEL_22;
LABEL_23:
        v5 = v4;
        ++v2;
        v7 = (unsigned __int8 *)v9;
        if (v2 == v3)
          goto LABEL_45;
      }
      else
      {
LABEL_8:
        v12 = *v2;
        if (v7 >= (unsigned __int8 *)v6)
          goto LABEL_9;
LABEL_3:
        *v7++ = v12;
        v9 = (uint64_t)v7;
        if (++v2 == v3)
          goto LABEL_45;
      }
    }
  }
  v9 = 0;
LABEL_45:
  v30 = (const void *)a1[5];
  if (v30 && a1[6])
  {
    v31 = v9 - (_QWORD)v4;
    if ((unsigned __int8 *)v9 == v4)
    {
      v33 = 0;
      v32 = 0;
    }
    else
    {
      if ((v31 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v32 = (char *)operator new(v9 - (_QWORD)v4);
      v33 = &v32[v31];
      memcpy(v32, v4, v31);
    }
    v34 = _Block_copy(v30);
    v35 = v34;
    v36 = a1[6];
    __p = (void *)MEMORY[0x1E0C809B0];
    v42 = 1174405120;
    v43 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke;
    v44 = &__block_descriptor_tmp_26_3;
    if (v34)
    {
      aBlock = _Block_copy(v34);
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v37 = v33 - v32;
      if (v33 == v32)
        goto LABEL_57;
    }
    else
    {
      aBlock = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v37 = v33 - v32;
      if (v33 == v32)
      {
LABEL_57:
        dispatch_async(v36, &__p);
        if (v46)
        {
          v47 = v46;
          operator delete(v46);
        }
        if (aBlock)
          _Block_release(aBlock);
        if (v35)
          _Block_release(v35);
        if (v32)
          operator delete(v32);
        goto LABEL_65;
      }
    }
    if ((v37 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v38 = (char *)operator new(v37);
    v39 = &v38[v37];
    v46 = v38;
    v48 = &v38[v37];
    memcpy(v38, v32, v37);
    v47 = v39;
    goto LABEL_57;
  }
LABEL_65:
  if (v4)
    operator delete(v4);
}

void sub_1B3D16214(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c107_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c107_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17ThermalGetSensors8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D163D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D163E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D16410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke(_QWORD *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  size_t v4;
  char *v5;
  char *v6;
  void *__p;
  void *v8;
  char *v9;

  v1 = a1[4];
  v2 = (_BYTE *)a1[5];
  v3 = (_BYTE *)a1[6];
  __p = 0;
  v8 = 0;
  v9 = 0;
  v4 = v3 - v2;
  if (v3 != v2)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (char *)operator new(v3 - v2);
    v6 = &v5[v4];
    __p = v5;
    v9 = &v5[v4];
    memcpy(v5, v2, v4);
    v8 = v6;
  }
  (*(void (**)(uint64_t, void **))(v1 + 16))(v1, &__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1B3D164B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEE40c65_ZTSNSt3__16vectorIN3abm17BasebandThermalIDENS_9allocatorIS2_EEEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  _BYTE *v5;
  _BYTE *v6;
  size_t v7;
  char *v8;
  char *v9;

  result = (void *)a2[4];
  if (result)
    result = _Block_copy(result);
  a1[5] = 0;
  a1[4] = result;
  a1[6] = 0;
  a1[7] = 0;
  v6 = (_BYTE *)a2[5];
  v5 = (_BYTE *)a2[6];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    a1[5] = v8;
    a1[6] = v8;
    v9 = &v8[v7];
    a1[7] = &v8[v7];
    result = memcpy(v8, v6, v7);
    a1[6] = v9;
  }
  return result;
}

void sub_1B3D16550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  const void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(const void **)(v1 + 32);
  if (v5)
    _Block_release(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17BasebandThermalIDENS1_9allocatorIS4_EEEEEEE40c65_ZTSNSt3__16vectorIN3abm17BasebandThermalIDENS_9allocatorIS2_EEEE(_QWORD *a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<cpms::QMICommandDriver::setThermalReportFrequency(cpms::ThermalReportVersion,unsigned int,dispatch::block<void({block_pointer})(std::vector<abm::ThermalSensorData>)>,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const void **v7;
  _DWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  _DWORD *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  void *v24;
  NSObject *v25;
  const void *v26;
  const void *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v40[5];
  void *v41;
  void *v42;
  dispatch_object_t object;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[2];
  uint64_t (*v51)(uint64_t, _DWORD *);
  void *v52;
  int v53;
  __int128 v54;
  __int128 v55;
  _QWORD aBlock[7];

  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v54 = v3;
  v55 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v54);
  v4 = MEMORY[0x1E0C809B0];
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 0x40000000;
  v51 = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke;
  v52 = &__block_descriptor_tmp_28_1;
  v53 = *((_DWORD *)v1 + 3);
  v5 = (char *)*((_QWORD *)&v54 + 1);
  v6 = (char *)v55;
  v7 = (const void **)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1) != (_QWORD)v55)
  {
    v7 = (const void **)*((_QWORD *)&v54 + 1);
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v55)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v55)
  {
LABEL_9:
    v9 = operator new(0x10uLL);
    v10 = v9;
    v9[8] = 1;
    *(_QWORD *)v9 = off_1E66D7B60;
    *((_DWORD *)v9 + 3) = 0;
    v11 = v9 + 12;
    if ((unint64_t)v6 < *((_QWORD *)&v55 + 1))
    {
      *(_QWORD *)v6 = v9;
      v12 = (uint64_t)(v6 + 8);
LABEL_22:
      *(_QWORD *)&v55 = v12;
      v51((uint64_t)v50, v11);
      goto LABEL_23;
    }
    v13 = v6 - v5;
    v14 = (v6 - v5) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v55 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v55 + 1) - (_QWORD)v5) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v10;
      v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((_QWORD *)&v54 + 1) = v19;
        *(_QWORD *)&v55 = v12;
        *((_QWORD *)&v55 + 1) = v20;
        if (!v5)
          goto LABEL_22;
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v10;
      v12 = 8 * v14 + 8;
      if (v5 == v6)
        goto LABEL_20;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_65;
    if ((unint64_t)(v5 - v18) < 0x20)
      goto LABEL_65;
    v31 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v6[-v32];
    v19 = (_QWORD *)((char *)v19 - v32);
    v34 = &v18[8 * v14 - 16];
    v35 = v6 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v6 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_65:
      do
      {
        v38 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v19 = v38;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v54 + 1);
    *((_QWORD *)&v54 + 1) = v19;
    *(_QWORD *)&v55 = v12;
    *((_QWORD *)&v55 + 1) = v20;
    if (!v5)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v8)
    __cxa_bad_cast();
  ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke((uint64_t)v50, v8 + 3);
LABEL_23:
  v45 = v2 + 64;
  v46 = QMIServiceMsg::create();
  v47 = 25000;
  v48 = 0;
  v49 = 0;
  v40[0] = v4;
  v40[1] = 1174405120;
  v40[2] = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_2;
  v40[3] = &__block_descriptor_tmp_36_2;
  v40[4] = v2;
  v44 = *((_DWORD *)v1 + 2);
  v21 = (void *)v1[2];
  if (v21)
    v21 = _Block_copy(v21);
  v41 = v21;
  v22 = (void *)v1[3];
  if (v22)
    v22 = _Block_copy(v22);
  v42 = v22;
  v23 = v1[4];
  object = v23;
  if (v23)
    dispatch_retain(v23);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22ThermalConfigFrequency8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D7B90;
  aBlock[4] = v40;
  v24 = _Block_copy(aBlock);
  v49 = v24;
  if (v46)
  {
    qmi::Client::send();
    v24 = v49;
  }
  if (v24)
    _Block_release(v24);
  if (object)
    dispatch_release(object);
  if (v42)
    _Block_release(v42);
  if (v41)
    _Block_release(v41);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v54);
  v25 = v1[4];
  if (v25)
    dispatch_release(v25);
  v26 = (const void *)v1[3];
  if (v26)
    _Block_release(v26);
  v27 = (const void *)v1[2];
  if (v27)
    _Block_release(v27);
  operator delete(v1);
  v28 = (std::__shared_weak_count *)a1[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a1);
}

void sub_1B3D169D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _QWORD *v29;
  NSObject *v31;
  const void *v32;
  const void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    _Block_release(a15);
  if (a20)
    qmi::Client::send();
  if (a23)
    _Block_release(a23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  v31 = v29[4];
  if (v31)
    dispatch_release(v31);
  v32 = (const void *)v29[3];
  if (v32)
    _Block_release(v32);
  v33 = (const void *)v29[2];
  if (v33)
    _Block_release(v33);
  operator delete(v29);
  v34 = (std::__shared_weak_count *)__p[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v5;
  NSObject *v6;
  const void *v7;
  const void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[5];
  void *aBlock;
  int v15;
  uint64_t v16;
  void *__p;
  __int128 v18;
  void *v19;
  void *v20;
  CFTypeRef cf;
  _BYTE buf[24];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v16 = 0;
  if (*(_DWORD *)(a2 + 4))
  {
    v5 = operator new(0x38uLL);
    __p = v5;
    v18 = xmmword_1B3DCDB10;
    strcpy((char *)v5, "Failed to make configuration of the reporting frequency");
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5;
      _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    }
    cpms::QMICommandDriver::checkError(v3, a2, (uint64_t)&__p, (CFTypeRef *)buf);
    v7 = *(const void **)buf;
    v16 = *(_QWORD *)buf;
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
    v8 = *(const void **)(a1 + 48);
    if (!v8)
      goto LABEL_17;
  }
  else
  {
    v9 = (void *)MEMORY[0x1E0C809B0];
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 1174405120;
    v13[2] = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_30;
    v13[3] = &__block_descriptor_tmp_35_2;
    v13[4] = v3;
    v15 = *(_DWORD *)(a1 + 64);
    v10 = *(void **)(a1 + 40);
    if (v10)
      v10 = _Block_copy(v10);
    aBlock = v10;
    __p = v9;
    *(_QWORD *)&v18 = 0x40000000;
    *((_QWORD *)&v18 + 1) = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm16ThermalSensorInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v19 = &unk_1E66D7BB8;
    v20 = v13;
    qmi::Client::setIndHandler();
    if (aBlock)
      _Block_release(aBlock);
    v7 = 0;
    v8 = *(const void **)(a1 + 48);
    if (!v8)
    {
LABEL_17:
      if (!v7)
        return;
LABEL_33:
      CFRelease(v7);
      return;
    }
  }
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_17;
  if (v7 && (CFRetain(v7), (v8 = *(const void **)(a1 + 48)) == 0))
    v11 = 0;
  else
    v11 = _Block_copy(v8);
  v12 = *(NSObject **)(a1 + 56);
  __p = (void *)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v18 = 1174405120;
  *((_QWORD *)&v18 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_1;
  v19 = &__block_descriptor_tmp_18_1;
  if (!v11)
  {
    v20 = 0;
    cf = v7;
    if (!v7)
      goto LABEL_25;
    goto LABEL_24;
  }
  v20 = _Block_copy(v11);
  cf = v7;
  if (v7)
LABEL_24:
    CFRetain(v7);
LABEL_25:
  dispatch_async(v12, &__p);
  if (cf)
    CFRelease(cf);
  if (v20)
    _Block_release(v20);
  if (v11)
    _Block_release(v11);
  if (v7)
  {
    CFRelease(v7);
    goto LABEL_33;
  }
}

void sub_1B3D16D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_30(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v4;
  int v5;
  tlv *v6;
  int v7;
  tlv *v8;
  int v9;
  tlv *v10;
  uint64_t v11;
  tlv *TlvValue;
  int v13;
  tlv *v14;
  NSObject *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  int64_t v19;
  char *v20;
  char *v21;
  _QWORD v22[6];
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  void *__p;
  void *v30;
  uint64_t v31;
  tlv *v32;
  uint8_t buf[24];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v24 = 0;
  v25 = &v24;
  v26 = 0x4002000000;
  v27 = __Block_byref_object_copy__4;
  v28 = __Block_byref_object_dispose__4;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 == 2)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 0x40000000;
    v22[2] = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_33;
    v22[3] = &unk_1E66D7AB8;
    v22[4] = &v24;
    v22[5] = v4;
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
    v8 = TlvValue;
    if (TlvValue)
    {
      v9 = v13;
      v32 = TlvValue;
      memset(buf, 170, sizeof(buf));
      tlv::parseV<bsp::tlv::abm::ThermalSensorsFloatType>(&v32, v13, (uint64_t)buf);
      v14 = v32;
      if (v32)
        ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_33((uint64_t)v22, (float **)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (!v14)
      {
        v11 = 16;
        goto LABEL_17;
      }
    }
  }
  else if (v5 == 1)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 0x40000000;
    v23[2] = ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_31;
    v23[3] = &unk_1E66D7A90;
    v23[4] = &v24;
    v23[5] = v4;
    v6 = (tlv *)qmi::MessageBase::findTlvValue(this);
    v8 = v6;
    if (v6)
    {
      v9 = v7;
      v32 = v6;
      memset(buf, 170, sizeof(buf));
      tlv::parseV<bsp::tlv::abm::ThermalSensors>(&v32, v7, (uint64_t)buf);
      v10 = v32;
      if (v32)
        ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_31((uint64_t)v23, (unsigned __int8 **)buf);
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      if (!v10)
      {
        v11 = 1;
LABEL_17:
        ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, v11, v8, v9);
      }
    }
  }
  else
  {
    v15 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v5;
      _os_log_error_impl(&dword_1B3CB3000, v15, OS_LOG_TYPE_ERROR, "Cannot handle %u version", buf, 8u);
      v16 = *(_QWORD *)(a1 + 40);
      if (!v16)
        goto LABEL_25;
      goto LABEL_20;
    }
  }
  v16 = *(_QWORD *)(a1 + 40);
  if (!v16)
    goto LABEL_25;
LABEL_20:
  v18 = (_BYTE *)v25[5];
  v17 = (_BYTE *)v25[6];
  memset(buf, 0, sizeof(buf));
  v19 = v17 - v18;
  if (v17 != v18)
  {
    if (v19 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = (char *)operator new(v17 - v18);
    v21 = &v20[8 * (v19 >> 3)];
    *(_QWORD *)buf = v20;
    *(_QWORD *)&buf[16] = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)&buf[8] = v21;
  }
  (*(void (**)(uint64_t, uint8_t *))(v16 + 16))(v16, buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
LABEL_25:
  _Block_object_dispose(&v24, 8);
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
}

void sub_1B3D170D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  void *v30;
  void *v31;

  v30 = *(void **)(v28 - 80);
  if (v30)
  {
    *(_QWORD *)(v28 - 72) = v30;
    operator delete(v30);
    _Block_object_dispose(&a22, 8);
    v31 = __p;
    if (!__p)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    _Block_object_dispose(&a22, 8);
    v31 = __p;
    if (!__p)
      goto LABEL_3;
  }
  a28 = (uint64_t)v31;
  operator delete(v31);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_31(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint8_t buf[4];
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v33 = a2[1];
    v34 = v5;
    do
    {
      v7 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v31 = *v2;
        *(_DWORD *)buf = 67109120;
        v36 = v31;
        _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Thermal Sensor ID: %d", buf, 8u);
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          goto LABEL_7;
      }
      else if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_7;
      }
      v32 = *((_DWORD *)v2 + 1);
      *(_DWORD *)buf = 67109120;
      v36 = v32;
      _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Temperature (int32): %d", buf, 8u);
LABEL_7:
      v8 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
      v9 = *v2;
      v10 = *((unsigned int *)v2 + 1);
      v12 = (char *)v8[6];
      v11 = v8[7];
      if ((unint64_t)v12 < v11)
      {
        *(_QWORD *)v12 = v9 | (v10 << 32);
        v6 = (uint64_t)(v12 + 8);
        goto LABEL_4;
      }
      v13 = (char *)v8[5];
      v14 = (v12 - v13) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v16 = v11 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v18 = v17;
        v19 = (char *)operator new(8 * v17);
        v17 = v18;
        v20 = &v19[8 * v14];
        *(_QWORD *)v20 = v9 | (v10 << 32);
        v6 = (uint64_t)(v20 + 8);
        v21 = (char *)(v12 - v13);
        if (v12 == v13)
        {
LABEL_20:
          v3 = v33;
          v5 = v34;
          v8[5] = v20;
          v8[6] = v6;
          v8[7] = &v19[8 * v17];
          if (!v12)
            goto LABEL_4;
LABEL_28:
          operator delete(v12);
          goto LABEL_4;
        }
      }
      else
      {
        v19 = 0;
        v20 = (char *)(8 * v14);
        *(_QWORD *)(8 * v14) = v9 | (v10 << 32);
        v6 = 8 * v14 + 8;
        v21 = (char *)(v12 - v13);
        if (v12 == v13)
          goto LABEL_20;
      }
      v22 = (unint64_t)(v21 - 8);
      if (v22 < 0x58)
      {
        v3 = v33;
        v5 = v34;
        do
        {
LABEL_26:
          v30 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v20 - 1) = v30;
          v20 -= 8;
        }
        while (v12 != v13);
        goto LABEL_27;
      }
      v3 = v33;
      v5 = v34;
      if ((unint64_t)(v13 - v19) < 0x20)
        goto LABEL_26;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v12[-v24];
      v20 -= v24;
      v26 = &v19[8 * v14 - 16];
      v27 = v12 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v26 = v29;
        v26 -= 32;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v12 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_26;
LABEL_27:
      v12 = (char *)v8[5];
      v8[5] = v20;
      v8[6] = v6;
      v8[7] = &v19[8 * v17];
      if (v12)
        goto LABEL_28;
LABEL_4:
      v8[6] = v6;
      v2 += 8;
    }
    while (v2 != v3);
  }
}

void ___ZZN4cpms16QMICommandDriver25setThermalReportFrequencyENS_20ThermalReportVersionEjN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS4_9allocatorIS7_EEEEEEENS2_8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEENK3__0clEv_block_invoke_33(uint64_t a1, float **a2)
{
  float *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  double v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = (unsigned __int8 *)a2[1];
  if (*a2 != (float *)v3)
  {
    v5 = *(_QWORD *)(a1 + 40);
    v33 = (unsigned __int8 *)a2[1];
    v34 = v5;
    do
    {
      v7 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v31 = *(unsigned __int8 *)v2;
        *(_DWORD *)buf = 67109120;
        LODWORD(v36) = v31;
        _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Thermal Sensor ID: %d", buf, 8u);
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          goto LABEL_7;
      }
      else if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        goto LABEL_7;
      }
      v32 = v2[1];
      *(_DWORD *)buf = 134217984;
      v36 = v32;
      _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Temperature (float): %f", buf, 0xCu);
LABEL_7:
      v8 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
      v9 = *(unsigned __int8 *)v2;
      v10 = *((unsigned int *)v2 + 1);
      v12 = (char *)v8[6];
      v11 = v8[7];
      if ((unint64_t)v12 < v11)
      {
        *(_QWORD *)v12 = v9 | (v10 << 32);
        v6 = (uint64_t)(v12 + 8);
        goto LABEL_4;
      }
      v13 = (char *)v8[5];
      v14 = (v12 - v13) >> 3;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v16 = v11 - (_QWORD)v13;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v18 = v17;
        v19 = (char *)operator new(8 * v17);
        v17 = v18;
        v20 = &v19[8 * v14];
        *(_QWORD *)v20 = v9 | (v10 << 32);
        v6 = (uint64_t)(v20 + 8);
        v21 = (char *)(v12 - v13);
        if (v12 == v13)
        {
LABEL_20:
          v3 = v33;
          v5 = v34;
          v8[5] = v20;
          v8[6] = v6;
          v8[7] = &v19[8 * v17];
          if (!v12)
            goto LABEL_4;
LABEL_28:
          operator delete(v12);
          goto LABEL_4;
        }
      }
      else
      {
        v19 = 0;
        v20 = (char *)(8 * v14);
        *(_QWORD *)(8 * v14) = v9 | (v10 << 32);
        v6 = 8 * v14 + 8;
        v21 = (char *)(v12 - v13);
        if (v12 == v13)
          goto LABEL_20;
      }
      v22 = (unint64_t)(v21 - 8);
      if (v22 < 0x58)
      {
        v3 = v33;
        v5 = v34;
        do
        {
LABEL_26:
          v30 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v20 - 1) = v30;
          v20 -= 8;
        }
        while (v12 != v13);
        goto LABEL_27;
      }
      v3 = v33;
      v5 = v34;
      if ((unint64_t)(v13 - v19) < 0x20)
        goto LABEL_26;
      v23 = (v22 >> 3) + 1;
      v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      v25 = &v12[-v24];
      v20 -= v24;
      v26 = &v19[8 * v14 - 16];
      v27 = v12 - 16;
      v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *((_OWORD *)v26 - 1) = *((_OWORD *)v27 - 1);
        *(_OWORD *)v26 = v29;
        v26 -= 32;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      v12 = v25;
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_26;
LABEL_27:
      v12 = (char *)v8[5];
      v8[5] = v20;
      v8[6] = v6;
      v8[7] = &v19[8 * v17];
      if (v12)
        goto LABEL_28;
LABEL_4:
      v8[6] = v6;
      v2 += 2;
    }
    while (v2 != (float *)v3);
  }
}

void *__copy_helper_block_e8_40c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS1_9allocatorIS4_EEEEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS1_9allocatorIS4_EEEEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void __copy_helper_block_e8_40c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS1_9allocatorIS4_EEEEEEE48c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  NSObject *v6;

  v4 = (void *)a2[5];
  if (v4)
    v4 = _Block_copy(v4);
  a1[5] = v4;
  v5 = (void *)a2[6];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a2[7];
  a1[6] = v5;
  a1[7] = v6;
  if (v6)
    dispatch_retain(v6);
}

void __destroy_helper_block_e8_40c104_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm17ThermalSensorDataENS1_9allocatorIS4_EEEEEEE48c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  const void *v4;

  v2 = a1[7];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = (const void *)a1[5];
  if (v4)
    _Block_release(v4);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ReportFrequency>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ReportFrequency>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ReportFrequency>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D7B60;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22ThermalConfigFrequency8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D17938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D1794C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D17978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm16ThermalSensorInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D17A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D17A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D17A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<cpms::CommandDriver>::execute_wrapped<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0>(cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0,std::default_delete<cpms::QMICommandDriver::getPowerMitigation(dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *v15;
  dispatch_object_t object;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  _OWORD v22[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v22[0] = v4;
  v22[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
  v17 = v3 + 64;
  v18 = QMIServiceMsg::create();
  v19 = 25000;
  v20 = 0;
  v21 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZZN4cpms16QMICommandDriver18getPowerMitigationEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_41_0;
  v14[4] = v3;
  v6 = (void *)v2[1];
  if (v6)
    v6 = _Block_copy(v6);
  v15 = v6;
  v7 = v2[2];
  object = v7;
  if (v7)
    dispatch_retain(v7);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20GetCurrentMitigation8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D7C40;
  aBlock[4] = v14;
  v8 = _Block_copy(aBlock);
  v21 = v8;
  if (v18)
  {
    qmi::Client::send();
    v8 = v21;
  }
  if (v8)
    _Block_release(v8);
  if (object)
    dispatch_release(object);
  if (v15)
    _Block_release(v15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
  v9 = v2[2];
  if (v9)
    dispatch_release(v9);
  v10 = (const void *)v2[1];
  if (v10)
    _Block_release(v10);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1B3D17C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,char a21)
{
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a17)
    qmi::Client::send();
  if (a20)
    _Block_release(a20);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  v24 = v22[2];
  if (v24)
    dispatch_release(v24);
  v25 = (const void *)v22[1];
  if (v25)
    _Block_release(v25);
  operator delete(v22);
  v26 = (std::__shared_weak_count *)v21[2];
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver18getPowerMitigationEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke(_QWORD *a1, qmi::MessageBase *this)
{
  uint64_t v3;
  NSObject *v4;
  const void *v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  void *v9;
  void *v11;
  NSObject *v12;
  tlv *TlvValue;
  int v14;
  tlv *v15;
  int v16;
  tlv *v17;
  _QWORD v18[2];
  void (*v19)(_QWORD *, unsigned __int8 **);
  void *v20;
  uint64_t v21;
  void *aBlock;
  dispatch_object_t object;
  void *__p[4];
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  tlv *v29;

  v3 = a1[4];
  if (*((_DWORD *)this + 1))
  {
    v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_ERROR, "Failed to get power mitigation data from the baseband", (uint8_t *)__p, 2u);
      v5 = (const void *)a1[5];
      if (!v5)
        return;
    }
    else
    {
      v5 = (const void *)a1[5];
      if (!v5)
        return;
    }
    if (a1[6])
    {
      v6 = _Block_copy(v5);
      v7 = v6;
      v8 = a1[6];
      __p[0] = (void *)MEMORY[0x1E0C809B0];
      __p[1] = (void *)1174405120;
      __p[2] = ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke;
      __p[3] = &__block_descriptor_tmp_43_1;
      if (v6)
        v9 = _Block_copy(v6);
      else
        v9 = 0;
      v25 = v9;
      v26 = 0;
      v27 = 0;
      v28 = 0;
      dispatch_async(v8, __p);
      if (v26)
      {
        v27 = v26;
        operator delete(v26);
      }
      if (v25)
        _Block_release(v25);
      if (v7)
        _Block_release(v7);
    }
  }
  else
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v19 = ___ZZN4cpms16QMICommandDriver18getPowerMitigationEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke_39;
    v20 = &__block_descriptor_tmp_40_3;
    v21 = v3;
    v11 = (void *)a1[5];
    if (v11)
      v11 = _Block_copy(v11);
    v12 = a1[6];
    aBlock = v11;
    object = v12;
    if (v12)
      dispatch_retain(v12);
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
    v15 = TlvValue;
    if (TlvValue)
    {
      v16 = v14;
      v29 = TlvValue;
      memset(__p, 170, 24);
      tlv::parseV<bsp::tlv::abm::MitigationData>(&v29, v14, (uint64_t)__p);
      v17 = v29;
      if (v29)
        v19(v18, (unsigned __int8 **)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (!v17)
        ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)this, 16, v15, v16);
    }
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
}

void sub_1B3D17F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
    dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>::~callback((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  dispatch::callback<void({block_pointer})(std::vector<abm::PowerMitigationData>)>::~callback((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void ___ZZN4cpms16QMICommandDriver18getPowerMitigationEN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS3_9allocatorIS6_EEEEEEEENK3__0clEv_block_invoke_39(_QWORD *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  __int16 v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  const void *v31;
  int64_t v32;
  char *v33;
  char *v34;
  void *v35;
  const void *v36;
  NSObject *v37;
  int64_t v38;
  char *v39;
  char *v40;
  unsigned __int8 *v42;
  uint8_t buf[8];
  uint64_t v44;
  void (*v45)(_QWORD *);
  void *v46;
  void *aBlock;
  void *__p;
  void *v49;
  char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v2 = a2[1];
  v4 = 0;
  if (*a2 != v2)
  {
    v5 = 0;
    v6 = 0;
    v7 = a1[4];
    v42 = a2[1];
    while (1)
    {
      v9 = *(NSObject **)(v7 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v23 = *v3;
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v23;
        _os_log_debug_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEBUG, "#D Power Mitigation Device: %d", buf, 8u);
        v9 = *(NSObject **)(v7 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          goto LABEL_31;
LABEL_6:
        v10 = *v3;
        v11 = v3[1];
        if (v6 >= v5)
          goto LABEL_7;
LABEL_3:
        *(_WORD *)v6 = v10 | (v11 << 8);
        v6 += 2;
        v8 = (uint64_t)v6;
        v3 += 2;
        if (v3 == v2)
          goto LABEL_40;
      }
      else
      {
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          goto LABEL_6;
LABEL_31:
        v24 = v3[1];
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v24;
        _os_log_debug_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEBUG, "#D Power Mitigation Level: %d", buf, 8u);
        v10 = *v3;
        v11 = v3[1];
        if (v6 < v5)
          goto LABEL_3;
LABEL_7:
        v12 = v6 - v4;
        if (v6 - v4 <= -3)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v13 = v12 >> 1;
        if (v5 - v4 <= (unint64_t)((v12 >> 1) + 1))
          v14 = v13 + 1;
        else
          v14 = v5 - v4;
        if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
        {
          if (v15 < 0)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v13];
          *(_WORD *)v17 = v10 | (v11 << 8);
          v8 = (uint64_t)(v17 + 2);
          v18 = v6 - v4;
          if (v6 == v4)
            goto LABEL_22;
        }
        else
        {
          v16 = 0;
          v17 = (char *)(2 * v13);
          *(_WORD *)(2 * v13) = v10 | (v11 << 8);
          v8 = 2 * v13 + 2;
          v18 = v6 - v4;
          if (v6 == v4)
            goto LABEL_22;
        }
        v19 = v18 - 2;
        if (v19 >= 0x5E)
        {
          v22 = (v6 - 2 - v4) & 0xFFFFFFFFFFFFFFFELL;
          if (&v16[(v12 & 0xFFFFFFFFFFFFFFFELL) - 2 - v22] > &v16[(v12 & 0xFFFFFFFFFFFFFFFELL) - 2])
          {
            v20 = v6;
          }
          else if (&v6[-v22 - 2] > v6 - 2)
          {
            v20 = v6;
          }
          else if (v6 - v16 - (v12 & 0xFFFFFFFFFFFFFFFELL) >= 0x20)
          {
            v25 = (v19 >> 1) + 1;
            v26 = 2 * (v25 & 0xFFFFFFFFFFFFFFF0);
            v20 = &v6[-v26];
            v17 -= v26;
            v27 = &v16[2 * v13 - 16];
            v28 = v6 - 16;
            v29 = v25 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v30 = *(_OWORD *)v28;
              *(v27 - 1) = *((_OWORD *)v28 - 1);
              *v27 = v30;
              v27 -= 2;
              v28 -= 32;
              v29 -= 16;
            }
            while (v29);
            if (v25 == (v25 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_22;
          }
          else
          {
            v20 = v6;
          }
        }
        else
        {
          v20 = v6;
        }
        do
        {
          v21 = *((_WORD *)v20 - 1);
          v20 -= 2;
          *((_WORD *)v17 - 1) = v21;
          v17 -= 2;
        }
        while (v20 != v4);
LABEL_22:
        v5 = &v16[2 * v15];
        if (v4)
          operator delete(v4);
        v4 = v17;
        v2 = v42;
        v3 += 2;
        v6 = (char *)v8;
        if (v3 == v42)
          goto LABEL_40;
      }
    }
  }
  v8 = 0;
LABEL_40:
  v31 = (const void *)a1[5];
  if (v31 && a1[6])
  {
    v32 = v8 - (_QWORD)v4;
    if ((char *)v8 == v4)
    {
      v34 = 0;
      v33 = 0;
    }
    else
    {
      if (v32 < 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v33 = (char *)operator new(v8 - (_QWORD)v4);
      v34 = &v33[2 * (v32 >> 1)];
      memcpy(v33, v4, v32);
    }
    v35 = _Block_copy(v31);
    v36 = v35;
    v37 = a1[6];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v44 = 1174405120;
    v45 = ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke;
    v46 = &__block_descriptor_tmp_43_1;
    if (v35)
    {
      aBlock = _Block_copy(v35);
      __p = 0;
      v49 = 0;
      v50 = 0;
      v38 = v34 - v33;
      if (!v38)
        goto LABEL_52;
    }
    else
    {
      aBlock = 0;
      __p = 0;
      v49 = 0;
      v50 = 0;
      v38 = v34 - v33;
      if (!v38)
      {
LABEL_52:
        dispatch_async(v37, buf);
        if (__p)
        {
          v49 = __p;
          operator delete(__p);
        }
        if (aBlock)
          _Block_release(aBlock);
        if (v36)
          _Block_release(v36);
        if (v33)
          operator delete(v33);
        goto LABEL_60;
      }
    }
    if (v38 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v39 = (char *)operator new(v38);
    v40 = &v39[2 * (v38 >> 1)];
    __p = v39;
    v50 = v40;
    memcpy(v39, v33, v38);
    v49 = v40;
    goto LABEL_52;
  }
LABEL_60:
  if (v4)
    operator delete(v4);
}

void sub_1B3D183AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm20GetCurrentMitigation8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D18560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D18574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D185A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEclIJS7_EEEvDpT__block_invoke(_QWORD *a1)
{
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  char *v5;
  char *v6;
  void *__p;
  void *v8;
  char *v9;

  v1 = a1[4];
  v2 = (_BYTE *)a1[5];
  v3 = (_BYTE *)a1[6];
  __p = 0;
  v8 = 0;
  v9 = 0;
  v4 = v3 - v2;
  if (v3 != v2)
  {
    if (v4 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v5 = (char *)operator new(v3 - v2);
    v6 = &v5[2 * (v4 >> 1)];
    __p = v5;
    v9 = v6;
    memcpy(v5, v2, v4);
    v8 = v6;
  }
  (*(void (**)(uint64_t, void **))(v1 + 16))(v1, &__p);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_1B3D18644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEE40c67_ZTSNSt3__16vectorIN3abm19PowerMitigationDataENS_9allocatorIS2_EEEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  result = (void *)a2[4];
  if (result)
    result = _Block_copy(result);
  a1[5] = 0;
  a1[4] = result;
  a1[6] = 0;
  a1[7] = 0;
  v6 = (_BYTE *)a2[5];
  v5 = (_BYTE *)a2[6];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v5 - v6);
    a1[5] = v8;
    a1[6] = v8;
    v9 = &v8[2 * (v7 >> 1)];
    a1[7] = v9;
    result = memcpy(v8, v6, v7);
    a1[6] = v9;
  }
  return result;
}

void sub_1B3D186E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  const void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(const void **)(v1 + 32);
  if (v5)
    _Block_release(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__16vectorIN3abm19PowerMitigationDataENS1_9allocatorIS4_EEEEEEE40c67_ZTSNSt3__16vectorIN3abm19PowerMitigationDataENS_9allocatorIS2_EEEE(_QWORD *a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[4];
  if (v3)
    _Block_release(v3);
}

void abm::debug::registerLogServer(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_6;
  block[4] = a1;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce != -1)
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
}

void ___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  xpc_object_t value;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  capabilities::abs *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  capabilities::radio *v26;
  uint64_t v27;

  ctu::LogServer::getConfig(**(ctu::LogServer ***)(a1 + 32));
  value = xpc_dictionary_get_value((xpc_object_t)0xAAAAAAAAAAAAAAAALL, "kDomainLogLevels");
  v3 = value;
  v4 = MEMORY[0x1E0C812F8];
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    v3 = xpc_null_create();
    if (!v3)
    {
      v5 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v3) == v4)
  {
    xpc_retain(v3);
    v5 = v3;
  }
  else
  {
    v5 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v3);
  if (MEMORY[0x1B5E2FB70](v5) == v4)
  {
    v7 = v5;
  }
  else
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1B5E2FB70](v6) == v4)
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = xpc_null_create();
    xpc_release(v5);
    xpc_release(v8);
  }
  v9 = xpc_int64_create(1);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, "libetl", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(1);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v7, "libtu", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(1);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v7, "trace.diag.cfg", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(1);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v7, "trace.diag.svc", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(1);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v7, "libktl", v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v7)
  {
    xpc_retain(v7);
    v19 = v7;
  }
  else
  {
    v19 = xpc_null_create();
  }
  xpc_dictionary_set_value((xpc_object_t)0xAAAAAAAAAAAAAAAALL, "kDomainLogLevels", v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  xpc_retain((xpc_object_t)0xAAAAAAAAAAAAAAAALL);
  ctu::LogServer::updateConfig();
  xpc_release((xpc_object_t)0xAAAAAAAAAAAAAAAALL);
  v21 = (capabilities::abs *)operator new(0x10uLL);
  v22 = *(_QWORD **)(a1 + 32);
  *(_QWORD *)v21 = *v22;
  v23 = v22[1];
  *((_QWORD *)v21 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 16);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  _MergedGlobals_0 = (uint64_t)v21;
  if (!qword_1EDBEAA60)
  {
    v21 = (capabilities::abs *)os_log_create("com.apple.telephony.abm", "libtu");
    qword_1EDBEAA60 = (uint64_t)v21;
  }
  capabilities::abs::TUDebugFlags(v21);
  TelephonyUtilDebugSetFlags();
  v26 = (capabilities::radio *)TelephonyUtilDebugRegisterDelegate();
  v27 = capabilities::radio::ice(v26);
  if ((v27 & 1) == 0 && capabilities::radio::maverick((capabilities::radio *)v27))
  {
    if (!qword_1EDBEAA68)
      qword_1EDBEAA68 = (uint64_t)os_log_create("com.apple.telephony.abm", "libetl");
    ETLDebugRegisterDelegate();
  }
  if (!qword_1EDBEAA70)
    qword_1EDBEAA70 = (uint64_t)os_log_create("com.apple.telephony.abm", "bbu");
  BBUpdaterRegisterGlobalLogSink();
  xpc_release(v7);
  xpc_release((xpc_object_t)0xAAAAAAAAAAAAAAAALL);
}

void sub_1B3D18C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintTelephonyUtil(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(0, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryTelephonyUtil(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;

  v6 = "misc";
  if (!a2)
    v6 = "send";
  if (a2 == 1)
    v7 = "recv";
  else
    v7 = v6;
  abm::debug::handleDebugPrintBinary(a1, 0, (uint64_t)v7, a3, a4);
}

void abm::debug::handleDebugPrintETL(abm::debug *this, const char *a2, const char *a3, char *a4)
{
  abm::debug::handleDebugPrint(1, this, (uint64_t)a2, (uint64_t)a3);
}

void abm::debug::handleDebugPrintBinaryETL(uint64_t a1, int a2, uint64_t a3, int a4)
{
  const char *v6;
  const char *v7;

  v6 = "misc";
  if (!a2)
    v6 = "send";
  if (a2 == 1)
    v7 = "recv";
  else
    v7 = v6;
  abm::debug::handleDebugPrintBinary(a1, 1, (uint64_t)v7, a3, a4);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  abm::debug *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *__dst[3];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v5;
  v44 = v5;
  v43 = v5;
  v42 = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  *(_OWORD *)__p = v5;
  v34 = v5;
  v31 = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v36 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v28 + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v10, &v29);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v28 = v6 + 24;
  v36 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v29 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
  v14 = strlen(a3);
  v15 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
  memset(__dst, 170, sizeof(__dst));
  if ((v35 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < (unint64_t)v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v21 = v32;
    }
    v22 = (const void *)*((_QWORD *)&v31 + 1);
    v19 = v21 - *((_QWORD *)&v31 + 1);
    if ((unint64_t)(v21 - *((_QWORD *)&v31 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(__dst[2]) = 0;
      v20 = __dst;
      goto LABEL_14;
    }
    v22 = (const void *)v30;
    v19 = v31 - v30;
    if ((_QWORD)v31 - (_QWORD)v30 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_22:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)v19;
    __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v20;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v19;
  v20 = __dst;
  if (v19)
LABEL_13:
    v15 = (abm::debug *)memmove(v20, v22, v19);
LABEL_14:
  *((_BYTE *)v20 + v19) = 0;
  v25 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v25 = (void **)__dst[0];
  abm::debug::handleDebugPrintBBUHelper(v15, v16, v17, v18, v25);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v28 = *v8;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v8[3];
  *(_QWORD *)&v29 = v11 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v36);
}

void sub_1B3D19038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(int a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v10;
  __int128 v11;
  uint64_t v12;
  ctu::Clock *v13;
  std::string *v14;
  const char *v15;
  size_t v16;
  void *v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::string *v23;
  int v24;
  size_t size;
  std::string *data;
  _BYTE *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  char *v30;
  int v31;
  char *v32;
  std::string::size_type v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::string::__raw *v40;
  std::string::size_type v41;
  std::string::pointer v42;
  NSObject *v43;
  std::string::__raw *v44;
  std::string::__raw *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::string::pointer v51;
  std::__shared_weak_count *v52;
  void *__dst[2];
  unint64_t v54;
  std::string *v55;
  std::__shared_weak_count *v56;
  _OWORD v57[3];
  unint64_t v58;
  std::__shared_weak_count *v60;
  uint8_t buf[4];
  std::string::__raw *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)_MergedGlobals_0;
  if (!_MergedGlobals_0)
    return;
  v6 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v6)
    return;
  v10 = std::__shared_weak_count::lock(v6);
  v60 = v10;
  if (!v10)
    return;
  if (!*v4)
  {
    v19 = v10;
LABEL_73:
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    return;
  }
  v58 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v57[1] = v11;
  v57[2] = v11;
  v57[0] = v11;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v57);
  if (a2 && *a2)
  {
    v12 = MEMORY[0x1B5E2EF94](v57, a2);
    MEMORY[0x1B5E2EF94](v12, ": ");
  }
  MEMORY[0x1B5E2ED9C](&v55, a3, a4);
  ctu::operator<<();
  v13 = (ctu::Clock *)MEMORY[0x1B5E2EDB4](&v55);
  ctu::Clock::now_in_nanoseconds(v13);
  v14 = (std::string *)operator new(0x60uLL);
  v15 = abm::debug::kLogDomainMap[a1];
  v16 = strlen(v15);
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v20 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v20 = v16 | 7;
    v21 = v20 + 1;
    v18 = (void **)operator new(v20 + 1);
    __dst[1] = v17;
    v54 = v21 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_16;
  }
  HIBYTE(v54) = v16;
  v18 = __dst;
  if (v16)
LABEL_16:
    memmove(v18, v15, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  MEMORY[0x1B5E2ED84](v57);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v57);
  ctu::LogMessage::LogMessage();
  v55 = v14;
  v22 = (std::__shared_weak_count *)operator new(0x20uLL);
  v22->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D7D00;
  v22->__shared_owners_ = 0;
  v22->__shared_weak_owners_ = 0;
  v22[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v56 = v22;
  if (SHIBYTE(v54) < 0)
  {
    operator delete(__dst[0]);
    v23 = v14 + 2;
    v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
      goto LABEL_19;
  }
  else
  {
    v23 = v14 + 2;
    v24 = SHIBYTE(v14[2].__r_.__value_.__r.__words[2]);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_19:
      size = v24;
      data = v23;
      goto LABEL_22;
    }
  }
  data = (std::string *)v14[2].__r_.__value_.__l.__data_;
  size = v14[2].__r_.__value_.__l.__size_;
LABEL_22:
  v27 = memchr(data, 10, size);
  if (v27)
    v28 = (unint64_t)v27;
  else
    v28 = (unint64_t)data + size;
  if (v28 - (_QWORD)data != size)
  {
    v29 = (unsigned __int8 *)(v28 + 1);
    if ((std::string *)(v28 + 1) != (std::string *)((char *)data + size))
    {
      v30 = (char *)data + size + ~v28;
      do
      {
        v31 = *v29;
        if (v31 != 10)
          *(_BYTE *)v28++ = v31;
        ++v29;
        --v30;
      }
      while (v30);
      LOBYTE(v24) = *((_BYTE *)&v14[2].__r_.__value_.__s + 23);
    }
  }
  if ((v24 & 0x80) == 0)
  {
    v32 = (char *)v23 + v24;
    v33 = v28 - (_QWORD)v23;
    if (v24 >= v28 - (unint64_t)v23)
      goto LABEL_34;
LABEL_52:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v42 = v14[2].__r_.__value_.__l.__data_;
  v41 = v14[2].__r_.__value_.__l.__size_;
  v32 = &v42[v41];
  v33 = v28 - (_QWORD)v42;
  if (v41 < v28 - (unint64_t)v42)
    goto LABEL_52;
LABEL_34:
  if (&v32[-v28] == (char *)-1)
  {
    if ((v24 & 0x80) != 0)
    {
      v51 = v14[2].__r_.__value_.__l.__data_;
      v14[2].__r_.__value_.__l.__size_ = v33;
      v51[v33] = 0;
      v34 = v56;
      v52 = v56;
      if (!v56)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)&v14[2].__r_.__value_.__s + 23) = v33 & 0x7F;
      v23->__r_.__value_.__s.__data_[v33] = 0;
      v34 = v56;
      v52 = v56;
      if (!v56)
        goto LABEL_38;
    }
  }
  else
  {
    std::string::__erase_external_with_move(v23, v33, (std::string::size_type)&v32[-v28]);
    v34 = v56;
    v52 = v56;
    if (!v56)
      goto LABEL_38;
  }
  v35 = (unint64_t *)&v34->__shared_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
LABEL_38:
  ctu::LogServer::log();
  if (v52)
  {
    v37 = (unint64_t *)&v52->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (a1)
  {
    if (a1 == 1)
    {
      v43 = qword_1EDBEAA68;
      if (qword_1EDBEAA68 && os_log_type_enabled((os_log_t)qword_1EDBEAA68, OS_LOG_TYPE_DEBUG))
      {
        v44 = (std::string::__raw *)&v55[2];
        if (SHIBYTE(v55[2].__r_.__value_.__r.__words[2]) < 0)
          v44 = (std::string::__raw *)v44->__words[0];
        *(_DWORD *)buf = 136315138;
        v62 = v44;
        _os_log_debug_impl(&dword_1B3CB3000, v43, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
    }
    else if (a1 == 3)
    {
      v39 = qword_1EDBEAA70;
      if (qword_1EDBEAA70)
      {
        if (os_log_type_enabled((os_log_t)qword_1EDBEAA70, OS_LOG_TYPE_DEFAULT))
        {
          v40 = (std::string::__raw *)&v55[2];
          if (SHIBYTE(v55[2].__r_.__value_.__r.__words[2]) < 0)
            v40 = (std::string::__raw *)v40->__words[0];
          *(_DWORD *)buf = 136315138;
          v62 = v40;
LABEL_66:
          _os_log_impl(&dword_1B3CB3000, v39, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    v39 = qword_1EDBEAA60;
    if (qword_1EDBEAA60 && os_log_type_enabled((os_log_t)qword_1EDBEAA60, OS_LOG_TYPE_DEFAULT))
    {
      v45 = (std::string::__raw *)&v55[2];
      if (SHIBYTE(v55[2].__r_.__value_.__r.__words[2]) < 0)
        v45 = (std::string::__raw *)v45->__words[0];
      *(_DWORD *)buf = 136315138;
      v62 = v45;
      goto LABEL_66;
    }
  }
  v46 = v56;
  if (v56)
  {
    v47 = (unint64_t *)&v56->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  MEMORY[0x1B5E2EDB4](v57);
  v19 = v60;
  if (v60)
    goto LABEL_73;
}

void sub_1B3D19600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  MEMORY[0x1B5E2EDB4](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 112);
  _Unwind_Resume(a1);
}

void sub_1B3D19698(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_1B3D196AC()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1B3D196F4);
}

void sub_1B3D196D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  JUMPOUT(0x1B3D196F4);
}

void std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ctu::LogMessage *,std::shared_ptr<ctu::LogMessage>::__shared_ptr_default_delete<ctu::LogMessage,ctu::LogMessage>,std::allocator<ctu::LogMessage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001B3DCE14FLL)
    return a1 + 24;
  if (((v3 & 0x80000001B3DCE14FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B3DCE14FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B3DCE14FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void abm::debug::handleDebugPrintBinary(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  ctu::Clock *v17;
  std::__shared_weak_count_vtbl *v18;
  const char *v19;
  size_t v20;
  void *v21;
  void **v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  void **v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *__dst[2];
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  void *__p[2];
  uint64_t v43;
  _OWORD v44[3];
  unint64_t v45;
  std::__shared_weak_count *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)_MergedGlobals_0;
  if (!_MergedGlobals_0)
    return;
  v7 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v7)
    return;
  v11 = std::__shared_weak_count::lock(v7);
  v47 = v11;
  if (!v11)
    return;
  if (!*v5)
  {
    v23 = v11;
LABEL_39:
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  v45 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = v12;
  v44[2] = v12;
  v44[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v44);
  v13 = MEMORY[0x1B5E2EF94](v44, a1);
  MEMORY[0x1B5E2EF94](v13, " (");
  v14 = ctu::operator<<();
  v15 = MEMORY[0x1B5E2EF94](v14, ") ");
  v16 = MEMORY[0x1B5E2EF94](v15, a3);
  MEMORY[0x1B5E2EF94](v16, "\n");
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = 0xAAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAA00;
  ctu::assign();
  v17 = (ctu::Clock *)MEMORY[0x1B5E2EFA0](v44, __p);
  ctu::Clock::now_in_nanoseconds(v17);
  v18 = (std::__shared_weak_count_vtbl *)operator new(0x60uLL);
  v19 = abm::debug::kLogDomainMap[a2];
  v20 = strlen(v19);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  if (v20 >= 0x17)
  {
    v24 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v24 = v20 | 7;
    v25 = v24 + 1;
    v22 = (void **)operator new(v24 + 1);
    __dst[1] = v21;
    v39 = v25 | 0x8000000000000000;
    __dst[0] = v22;
    goto LABEL_13;
  }
  HIBYTE(v39) = v20;
  v22 = __dst;
  if (v20)
LABEL_13:
    memmove(v22, v19, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  MEMORY[0x1B5E2ED84](v44);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v44);
  ctu::LogMessage::LogMessage();
  v40 = v18;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D7D00;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v18;
  v41 = v26;
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  ctu::LogServer::log();
  if (v26)
  {
    v29 = (unint64_t *)&v26->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (a2)
  {
    if (a2 == 1)
    {
      v31 = qword_1EDBEAA68;
      if (qword_1EDBEAA68)
      {
        if (os_log_type_enabled((os_log_t)qword_1EDBEAA68, OS_LOG_TYPE_DEBUG))
        {
          v32 = __p;
          if (v43 < 0)
            v32 = (void **)__p[0];
          goto LABEL_46;
        }
      }
    }
  }
  else
  {
    v31 = qword_1EDBEAA60;
    if (qword_1EDBEAA60 && os_log_type_enabled((os_log_t)qword_1EDBEAA60, OS_LOG_TYPE_DEBUG))
    {
      v32 = __p;
      if (v43 < 0)
        v32 = (void **)__p[0];
LABEL_46:
      *(_DWORD *)buf = 67109634;
      v49 = a5;
      v50 = 2080;
      v51 = a3;
      v52 = 2080;
      v53 = v32;
      _os_log_debug_impl(&dword_1B3CB3000, v31, OS_LOG_TYPE_DEBUG, "(%d) %s: %s", buf, 0x1Cu);
      v33 = v41;
      if (!v41)
        goto LABEL_36;
      goto LABEL_32;
    }
  }
  v33 = v41;
  if (!v41)
    goto LABEL_36;
LABEL_32:
  v34 = (unint64_t *)&v33->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
  }
LABEL_36:
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  MEMORY[0x1B5E2EDB4](v44);
  v23 = v47;
  if (v47)
    goto LABEL_39;
}

void sub_1B3D19BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a24 < 0)
  {
    operator delete(__p);
    MEMORY[0x1B5E2EDB4](&a25);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
    _Unwind_Resume(a1);
  }
  MEMORY[0x1B5E2EDB4](&a25);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrintBBUHelper(abm::debug *this, void *a2, uint64_t a3, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  abm::debug::handleDebugPrint(3, &unk_1B3DD42EB, (uint64_t)"%s", (uint64_t)va);
}

uint64_t QMIWakeCommandParser::getWakeReasonForWMS(unsigned __int16 *a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned __int16 v5;
  unsigned __int8 *v6;
  char *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t **v27;
  BOOL v28;
  unsigned int v29;
  uint64_t **v30;
  uint64_t ***v31;
  uint64_t **v32;
  unsigned int v33;
  _QWORD *v34;
  char v35;
  uint64_t *v36;
  uint64_t *v37;
  size_t v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t **v46;
  unsigned int v47;
  uint64_t *v48;
  _BYTE *v49;
  _BYTE *v50;
  size_t v51;
  _BYTE *v52;
  uint64_t v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;

  v60 = 0;
  v58 = &v59;
  v59 = 0;
  v61 = 0xAAAAAAAA00000000;
  v2 = (a2 - 4);
  if (a2 < 4)
    goto LABEL_86;
  v3 = *a1;
  LOWORD(v61) = *a1;
  v4 = a1[1];
  WORD1(v61) = a1[1];
  if (a2 >= 8)
  {
    v5 = 0;
    v6 = (unsigned __int8 *)(a1 + 2);
    v54 = v2 - 3;
    while (1)
    {
      v11 = *v6;
      v12 = *(unsigned __int16 *)(v6 + 1);
      if (v54 - (unint64_t)v5 >= v12)
        v13 = *(unsigned __int16 *)(v6 + 1);
      else
        v13 = v54 - v5;
      if (v13)
      {
        v14 = (char *)operator new(v13);
        v15 = &v14[v13];
        bzero(v14, v13);
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
      memcpy(v14, v6 + 3, v13);
      v16 = v59;
      v17 = &v59;
LABEL_15:
      v18 = v17;
      if (v16)
      {
        while (1)
        {
          v17 = (uint64_t **)v16;
          v19 = *((unsigned __int8 *)v16 + 32);
          if (v11 < v19)
          {
            v16 = *v17;
            goto LABEL_15;
          }
          if (v19 >= v11)
            break;
          v16 = v17[1];
          if (!v16)
          {
            v18 = v17 + 1;
            goto LABEL_20;
          }
        }
        v7 = (char *)v17;
        v10 = v17[5];
        v9 = v17 + 5;
        v8 = v10;
        if (!v10)
          goto LABEL_6;
      }
      else
      {
LABEL_20:
        v7 = (char *)operator new(0x40uLL);
        v7[32] = v11;
        *((_QWORD *)v7 + 6) = 0;
        *((_QWORD *)v7 + 7) = 0;
        *((_QWORD *)v7 + 5) = 0;
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = v17;
        *v18 = (uint64_t *)v7;
        v20 = (uint64_t *)v7;
        if (*v58)
        {
          v58 = (uint64_t **)*v58;
          v20 = *v18;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v59, v20);
        ++v60;
        v9 = v7 + 40;
        v8 = (uint64_t *)*((_QWORD *)v7 + 5);
        if (!v8)
          goto LABEL_6;
      }
      *((_QWORD *)v7 + 6) = v8;
      operator delete(v8);
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
LABEL_6:
      v6 += (v12 + 3);
      v5 += v12 + 3;
      *((_QWORD *)v7 + 5) = v14;
      *((_QWORD *)v7 + 6) = v15;
      *((_QWORD *)v7 + 7) = v15;
      if (v5 + 3 >= (int)v2)
      {
        v4 = WORD1(v61);
        v3 = (unsigned __int16)v61;
        break;
      }
    }
  }
  v21 = 1;
  if (v4 && v3 == 1)
  {
    v56 = 0;
    v57 = 0;
    v55 = &v56;
    v22 = v58;
    if (v58 == &v59)
    {
      v23 = 0;
      goto LABEL_85;
    }
    while (1)
    {
      v24 = v56;
      v25 = &v56;
      if (v55 != &v56)
      {
        v26 = v56;
        v27 = &v56;
        if (v56)
        {
          do
          {
            v25 = (uint64_t **)v26;
            v26 = (uint64_t *)v26[1];
          }
          while (v26);
        }
        else
        {
          do
          {
            v25 = (uint64_t **)v27[2];
            v28 = *v25 == (uint64_t *)v27;
            v27 = v25;
          }
          while (v28);
        }
        v29 = *((unsigned __int8 *)v22 + 32);
        if (*((unsigned __int8 *)v25 + 32) >= v29)
          break;
      }
      if (v56)
        v30 = v25;
      else
        v30 = &v56;
      if (v56)
        v31 = (uint64_t ***)v25;
      else
        v31 = &v55;
      if (v56)
        v32 = v25 + 1;
      else
        v32 = &v56;
      if (!v31[1])
        goto LABEL_54;
LABEL_60:
      v41 = v22[1];
      if (v41)
      {
        do
        {
          v42 = (uint64_t **)v41;
          v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (uint64_t **)v22[2];
          v28 = *v42 == (uint64_t *)v22;
          v22 = v42;
        }
        while (!v28);
      }
      v22 = v42;
      if (v42 == &v59)
      {
        v23 = v56;
        if (v56)
        {
          v43 = &v56;
          v44 = v56;
          do
          {
            v45 = v44;
            v46 = v43;
            v47 = *((unsigned __int8 *)v44 + 32);
            if (v47 >= 0x11)
              v43 = (uint64_t **)v44;
            else
              ++v44;
            v44 = (uint64_t *)*v44;
          }
          while (v44);
          if (v43 != &v56)
          {
            v48 = v47 >= 0x11 ? v45 : (uint64_t *)v46;
            if (*((unsigned __int8 *)v48 + 32) <= 0x11u)
            {
              if (v47 < 0x11)
                v45 = (uint64_t *)v46;
              v50 = (_BYTE *)v45[5];
              v49 = (_BYTE *)v45[6];
              v51 = v49 - v50;
              if (v49 != v50)
              {
                if ((v51 & 0x8000000000000000) != 0)
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                v52 = operator new(v49 - v50);
                memcpy(v52, v50, v51);
                if (v51 >= 6 && v52[5] == 7)
                {
                  operator delete(v52);
                  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v56);
                  v21 = 0;
                  goto LABEL_87;
                }
                operator delete(v52);
                v23 = v56;
              }
            }
          }
        }
LABEL_85:
        std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v23);
LABEL_86:
        v21 = 1;
        goto LABEL_87;
      }
    }
    v32 = &v56;
    v30 = &v56;
    if (v56)
    {
      while (1)
      {
        while (1)
        {
          v30 = (uint64_t **)v24;
          v33 = *((unsigned __int8 *)v24 + 32);
          if (v33 <= v29)
            break;
          v24 = *v30;
          v32 = v30;
          if (!*v30)
            goto LABEL_54;
        }
        if (v33 >= v29)
          goto LABEL_60;
        v24 = v30[1];
        if (!v24)
        {
          v32 = v30 + 1;
          break;
        }
      }
    }
LABEL_54:
    v34 = operator new(0x40uLL);
    v35 = *((_BYTE *)v22 + 32);
    v34[5] = 0;
    *((_BYTE *)v34 + 32) = v35;
    v34[6] = 0;
    v34[7] = 0;
    v37 = v22[5];
    v36 = v22[6];
    v38 = (char *)v36 - (char *)v37;
    if (v36 != v37)
    {
      if ((v38 & 0x8000000000000000) != 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v39 = (char *)operator new((char *)v36 - (char *)v37);
      v34[5] = v39;
      v34[6] = v39;
      v40 = &v39[v38];
      v34[7] = &v39[v38];
      memcpy(v39, v37, v38);
      v34[6] = v40;
    }
    *v34 = 0;
    v34[1] = 0;
    v34[2] = v30;
    *v32 = v34;
    if (*v55)
    {
      v55 = (uint64_t **)*v55;
      v34 = *v32;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v56, v34);
    ++v57;
    goto LABEL_60;
  }
LABEL_87:
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(v59);
  return v21;
}

void sub_1B3D1A154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  if (__p)
  {
    operator delete(__p);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a15);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a18);
    _Unwind_Resume(a1);
  }
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a15);
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a18);
  _Unwind_Resume(a1);
}

void sub_1B3D1A1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a18);
  _Unwind_Resume(a1);
}

void sub_1B3D1A1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  void *v18;

  if (v18)
    operator delete(v18);
  std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a18);
  _Unwind_Resume(a1);
}

uint64_t QMIWakeCommandParser::getWakeReason(CFDataRef *a1, CFTypeRef *a2)
{
  uint64_t v4;
  CFTypeRef cf;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 1;
  CFDataGetBytePtr(*a1);
  CFDataGetLength(*a1);
  cf = *a2;
  if (*a2)
    CFRetain(*a2);
  qmi::parse();
  v4 = *((unsigned int *)v8 + 6);
  if (cf)
    CFRelease(cf);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1B3D1A2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  va_list va;

  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B3D1A314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B3D1A32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN20QMIWakeCommandParser13getWakeReasonEN3ctu2cf11CFSharedRefIK8__CFDataEENS2_I14__CFDictionaryEE_block_invoke(uint64_t a1, _BYTE *a2, unsigned __int16 *a3, int a4, int a5)
{
  int v8;
  const void *v9;

  if (*a2 == 1 && a2[4] == 128 && a2[5] == 5)
  {
    if (a5 >= a4)
      v8 = a4;
    else
      v8 = a5;
    v9 = *(const void **)(a1 + 40);
    if (v9)
      CFRetain(v9);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = QMIWakeCommandParser::getWakeReasonForWMS(a3, v8);
    if (v9)
      CFRelease(v9);
  }
}

void sub_1B3D1A3DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned char>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned char>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned char>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

std::string *abm::trace::getBasebandTraceDirSuffix@<X0>(abm::trace *this@<X0>, std::string *a2@<X8>)
{
  int v2;
  std::string *result;
  char **v5;

  v2 = (int)this;
  memset(a2, 170, sizeof(std::string));
  *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
  a2->__r_.__value_.__s.__data_[0] = 0;
  result = (std::string *)capabilities::radio::vendor(this);
  if (((_DWORD)result - 2) >= 2)
  {
    if ((_DWORD)result != 1)
      return result;
    if (v2)
    {
      *((_BYTE *)&a2->__r_.__value_.__s + 23) = 5;
      strcpy((char *)a2, "-qdss");
      return result;
    }
    v5 = &abm::trace::kEURTraceSnapshotDirectorySuffix;
  }
  else
  {
    v5 = &abm::trace::kICETraceSnapshotDirectorySuffix;
  }
  return std::string::__assign_external(a2, *v5);
}

void sub_1B3D1A518(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void abm::trace::getCoreDumpDirSuffix(std::string *a1@<X8>)
{
  unsigned __int8 v3;
  capabilities::radio *v4;
  int v5;
  char **v6;

  v3 = atomic_load((unsigned __int8 *)&_MergedGlobals_1);
  if ((v3 & 1) == 0)
  {
    v4 = (capabilities::radio *)__cxa_guard_acquire(&_MergedGlobals_1);
    if ((_DWORD)v4)
    {
      v5 = capabilities::radio::maverick(v4);
      v6 = &abm::trace::kEURCoreDumpSnapshotDirectorySuffix;
      if (!v5)
        v6 = &abm::trace::kCoreDumpSnapshotDirectorySuffix;
      std::string::basic_string[abi:ne180100]<0>(&xmmword_1EDBEAA80, *v6);
      __cxa_guard_release(&_MergedGlobals_1);
    }
  }
  if (byte_1EDBEAA97 < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)xmmword_1EDBEAA80, *((std::string::size_type *)&xmmword_1EDBEAA80 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = xmmword_1EDBEAA80;
    a1->__r_.__value_.__r.__words[2] = unk_1EDBEAA90;
  }
}

void sub_1B3D1A5EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_1);
  _Unwind_Resume(a1);
}

uint64_t abm::trace::isSupported(uint64_t a1)
{
  const char *v1;
  int v2;
  capabilities::radio *v3;
  const char *v4;
  capabilities::radio *v5;
  const char *v6;
  capabilities::radio *v7;
  capabilities::trace *v8;
  capabilities::trace *v9;

  v1 = (const char *)a1;
  v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    v3 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)abm::trace::kDIAG);
    if ((_DWORD)v3)
    {
LABEL_3:
      v4 = v1;
      if ((v2 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = (capabilities::radio *)strcasecmp((const char *)a1, (const char *)abm::trace::kDIAG);
    if ((_DWORD)v3)
      goto LABEL_3;
  }
  if ((capabilities::radio::maverick(v3) & 1) != 0)
    return 1;
  LOBYTE(v2) = v1[23];
  v4 = v1;
  if ((v2 & 0x80) == 0)
  {
LABEL_4:
    v5 = (capabilities::radio *)strcasecmp(v4, (const char *)abm::trace::kICETrace);
    if ((_DWORD)v5)
      goto LABEL_5;
LABEL_12:
    if ((capabilities::radio::ice(v5) & 1) != 0)
      return 1;
    LOBYTE(v2) = v1[23];
    if ((v2 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_11:
  v5 = (capabilities::radio *)strcasecmp(*(const char **)v1, (const char *)abm::trace::kICETrace);
  if (!(_DWORD)v5)
    goto LABEL_12;
LABEL_5:
  if ((v2 & 0x80) == 0)
  {
LABEL_6:
    v6 = v1;
    if (!strcasecmp(v1, (const char *)abm::trace::kBasebandTrace))
      return 1;
    goto LABEL_15;
  }
LABEL_14:
  v6 = *(const char **)v1;
  if (!strcasecmp(*(const char **)v1, (const char *)abm::trace::kBasebandTrace))
    return 1;
LABEL_15:
  v7 = (capabilities::radio *)strcasecmp(v6, (const char *)abm::trace::kEURCoreDump);
  if ((_DWORD)v7)
  {
    if ((v2 & 0x80) == 0)
      goto LABEL_17;
  }
  else
  {
    if ((capabilities::radio::maverick(v7) & 1) != 0)
      return 1;
    if ((v1[23] & 0x80) == 0)
    {
LABEL_17:
      if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump)
        || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
      {
        return 1;
      }
      v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kCompression);
      if (!(_DWORD)v8)
        return capabilities::trace::allowed(v8);
      v9 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kBasebandIPC);
      if ((_DWORD)v9)
      {
        v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kIPC);
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        v8 = (capabilities::trace *)strcasecmp(v1, "KernelPCI");
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTapToRadar);
        if (!(_DWORD)v8)
          return capabilities::trace::allowed(v8);
        goto LABEL_34;
      }
      return capabilities::trace::supportsBasebandIPCTrace(v9);
    }
  }
  v1 = *(const char **)v1;
  if (!strcasecmp(v1, (const char *)abm::trace::kCoreDump) || !strcasecmp(v1, (const char *)abm::trace::kSystemLogs))
    return 1;
  v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kCompression);
  if (!(_DWORD)v8)
    return capabilities::trace::allowed(v8);
  v9 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kBasebandIPC);
  if ((_DWORD)v9)
  {
    v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kIPC);
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
    v8 = (capabilities::trace *)strcasecmp(v1, "KernelPCI");
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
    v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTapToRadar);
    if (!(_DWORD)v8)
      return capabilities::trace::allowed(v8);
LABEL_34:
    if (strcasecmp(v1, (const char *)abm::trace::kProfile))
    {
      v8 = (capabilities::trace *)strcasecmp(v1, (const char *)abm::trace::kTraceTailspin);
      if ((_DWORD)v8)
      {
        v8 = (capabilities::trace *)strcasecmp(v1, "Settings");
        if ((_DWORD)v8)
        {
          v8 = (capabilities::trace *)strcasecmp(v1, "LogFilter");
          if ((_DWORD)v8)
            return 0;
        }
      }
      return capabilities::trace::allowed(v8);
    }
    return 1;
  }
  return capabilities::trace::supportsBasebandIPCTrace(v9);
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v3;
  xpc_object_t object;

  if (MEMORY[0x1B5E2FB70](*a1) != MEMORY[0x1E0C812F8])
    return "Unknown";
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v3 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v3 < 5)
    return off_1E66D7EF0[v3];
  else
    return "Unknown";
}

void sub_1B3D1A95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v4;
  xpc_object_t object;

  if (MEMORY[0x1B5E2FB70](*a1) != MEMORY[0x1E0C812F8])
    return 5;
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default();
  xpc_release(object);
  if (v4 >= 5)
    return 5;
  else
    return v4;
}

void sub_1B3D1AA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(0);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1;

  v1 = *((int *)this + 3);
  if (v1 > 2)
    return "unknown";
  else
    return off_1E66D7F18[v1];
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(0);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  int v5;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E66D7D98;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1B5E2FB70](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v5 = xpc::dyn_cast_or_default();
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1B3D1AE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E66D7D98;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(_BYTE *)(a2 + 8) = 0;
    result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(1);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(1);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E66D7DE0;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1B5E2FB70](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1B3D1B250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E66D7DE0;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(2);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*(unsigned int *)(a1 + 12));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E66D7E28;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1B5E2FB70](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1B3D1B62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E66D7E28;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(3);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*(_BYTE *)(a1 + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(3);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E66D7E70;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1B5E2FB70](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1B3D1BA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E66D7E70;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(4);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*(_BYTE *)(a1 + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1B5E2FB70](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E66D7EB8;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1B5E2FB70](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default();
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1B3D1BDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E66D7EB8;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

double QMICommandDriverFactory::create_default_global@<D0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  double result;
  uint64_t v5;

  v3 = operator new(0xA8uLL);
  v3[1] = 0;
  v3[2] = 0;
  *v3 = off_1E66D8010;
  CommandDriverFactory::CommandDriverFactory((CommandDriverFactory *)(v3 + 3));
  v3[3] = &off_1E66D7F40;
  result = 0.0;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  v3[20] = 0;
  *a1 = v5;
  a1[1] = v3;
  return result;
}

void sub_1B3D1BE88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::QMICommandDriverFactory(QMICommandDriverFactory *this)
{
  uint64_t v1;

  CommandDriverFactory::CommandDriverFactory(this);
  *(_QWORD *)v1 = &off_1E66D7F40;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 136) = 0;
}

{
  uint64_t v1;

  CommandDriverFactory::CommandDriverFactory(this);
  *(_QWORD *)v1 = &off_1E66D7F40;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 136) = 0;
}

const char *QMICommandDriverFactory::getName(QMICommandDriverFactory *this)
{
  return "qmi.driver.factory";
}

void QMICommandDriverFactory::createRadioCommandDriver(NSObject *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v4;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *isa;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  NSObject *v32;
  NSObject *v33;
  ctu::OsLogContext *v34;
  NSObject *v35;
  Class v36;
  std::__shared_weak_count *v37;
  dispatch_object_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  Class v41;
  std::__shared_weak_count *v42;
  dispatch_object_t object;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint8_t buf[16];
  __int128 v47;

  v4 = a1;
  v47 = 0uLL;
  if (a1[13].isa)
  {
LABEL_2:
    if (capabilities::radio::mav20Plus((capabilities::radio *)a1))
    {
      v6 = a2[1];
      v44 = *a2;
      v45 = (std::__shared_weak_count *)v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      isa = v4[13].isa;
      object = isa;
      if (isa)
        dispatch_retain(isa);
      v10 = (std::__shared_weak_count *)v4[2].isa;
      v41 = v4[1].isa;
      v42 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      radio::QMICommandDriverM20::create(&v44, &object, (uint64_t *)&v41, (uint64_t *)buf);
      v13 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v47 = v13;
      v14 = v42;
      if (v42)
      {
        v15 = (unint64_t *)&v42->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (object)
        dispatch_release(object);
      v17 = v45;
      if (!v45)
        goto LABEL_42;
      v18 = (unint64_t *)&v45->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
    }
    else
    {
      v20 = a2[1];
      v39 = *a2;
      v40 = (std::__shared_weak_count *)v20;
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 8);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = v4[13].isa;
      v38 = v23;
      if (v23)
        dispatch_retain(v23);
      v24 = (std::__shared_weak_count *)v4[2].isa;
      v36 = v4[1].isa;
      v37 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      radio::QMICommandDriver::create(&v39, &v38, (uint64_t *)&v36, (uint64_t *)buf);
      v27 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v47 = v27;
      v28 = v37;
      if (v37)
      {
        v29 = (unint64_t *)&v37->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v38)
        dispatch_release(v38);
      v17 = v40;
      if (!v40)
        goto LABEL_42;
      v31 = (unint64_t *)&v40->__shared_owners_;
      do
        v19 = __ldaxr(v31);
      while (__stlxr(v19 - 1, v31));
    }
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_42:
    *(_OWORD *)a3 = v47;
    return;
  }
  v32 = dispatch_workloop_create("radio.wl");
  v33 = v4[13].isa;
  v4[13].isa = (Class)v32;
  if (v33)
  {
    dispatch_release(v33);
    v32 = v4[13].isa;
  }
  if (v32)
  {
    dispatch_retain(v32);
    a1 = v4[13].isa;
    v4[13].isa = (Class)v32;
    if (!a1)
      goto LABEL_2;
    dispatch_release(a1);
    if (v4[13].isa)
      goto LABEL_2;
  }
  else
  {
    v4[13].isa = 0;
  }
  v34 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, "com.apple.telephony.abm", "qmi.driver.factory");
  v35 = *(NSObject **)&buf[8];
  ctu::OsLogContext::~OsLogContext(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v35, OS_LOG_TYPE_DEFAULT, "Failed to create radio workloop!", buf, 2u);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
}

void sub_1B3D1C1E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_1B3D1C1FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, char a12)
{
  uint64_t v12;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v12 - 48);
  _Unwind_Resume(a1);
}

void sub_1B3D1C22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, dispatch_object_t object, char a17)
{
  uint64_t v17;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v17 - 48);
  _Unwind_Resume(a1);
}

void sub_1B3D1C25C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::getRadioWorkloop(QMICommandDriverFactory *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;

  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    *a2 = v4;
LABEL_3:
    dispatch_retain(v4);
    return;
  }
  v4 = dispatch_workloop_create("radio.wl");
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = v4;
  if (v5)
  {
    dispatch_release(v5);
    v4 = *((_QWORD *)this + 13);
  }
  *a2 = v4;
  if (v4)
    goto LABEL_3;
}

void QMICommandDriverFactory::createRFSCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_1;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *(_QWORD *)algn_1EDBEAA48;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v5 = *(_QWORD *)algn_1EDBEAA48;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17[0] = v8;
  v17[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  radio::QMIRFSCommandDriver::create(&v18, v17, v20);
  *a2 = *(_OWORD *)v20;
  *(_OWORD *)v20 = 0uLL;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1B3D1C4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::weakRFSCommandDriver(QMICommandDriverFactory *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  v4 = *((_QWORD *)this + 14);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((_QWORD *)this + 14))
    {
      QMICommandDriverFactory::createRFSCommandDriver(this, &v15);
      v8 = v15;
      v15 = 0uLL;
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
      *((_OWORD *)this + 7) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (*((_QWORD *)&v15 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    v4 = *((_QWORD *)this + 14);
  }
  v5 = *((_QWORD *)this + 15);
  *a2 = v4;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_1B3D1C5C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createCoexCommandDriver(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  v4 = a2[1];
  v16 = *a2;
  v17 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  v15[0] = *(_QWORD *)(a1 + 8);
  v15[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  coex::QMICommandDriver::create(&v16, v15, (uint64_t *)&v18);
  *a3 = v18;
  v18 = 0uLL;
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1B3D1C6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createAntennaCommandDriver(uint64_t a1@<X0>, NSObject **a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20[2];
  dispatch_object_t object;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_1;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v7 = *(_QWORD *)algn_1EDBEAA48;
    v22 = GetABMLogServer(void)::sLogServer;
    v23 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v7 = *(_QWORD *)algn_1EDBEAA48;
    v22 = GetABMLogServer(void)::sLogServer;
    v23 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  v8 = (unint64_t *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_6:
  v10 = *a2;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  v20[0] = v11;
  v20[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  antenna::QMICommandDriver::create(&v22, &object, v20, v24);
  *a3 = *(_OWORD *)v24;
  *(_OWORD *)v24 = 0uLL;
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (object)
    dispatch_release(object);
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B3D1C8D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2)
    dispatch_release(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createAwdCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_1;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *(_QWORD *)algn_1EDBEAA48;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v5 = *(_QWORD *)algn_1EDBEAA48;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17[0] = v8;
  v17[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  awd::QMIAwdCommandDriver::create(&v18, v17, v20);
  *a2 = *(_OWORD *)v20;
  *(_OWORD *)v20 = 0uLL;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1B3D1CABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createHealthCommandDriver(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23[2];
  void *__p;
  void *v25;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;

  v6 = a2[1];
  v27 = *a2;
  v28 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  __p = 0;
  v25 = 0;
  v26 = 0;
  v10 = *(const void **)a3;
  v9 = *(_QWORD *)(a3 + 8);
  v11 = v9 - *(_QWORD *)a3;
  if (v9 != *(_QWORD *)a3)
  {
    if (v11 < 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v9 - *(_QWORD *)a3);
    v13 = &v12[4 * (v11 >> 2)];
    __p = v12;
    v26 = v13;
    memcpy(v12, v10, v11);
    v25 = v13;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(std::__shared_weak_count **)(a1 + 16);
  v23[0] = v14;
  v23[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  radio::QMIHealthCommandDriver::create(&v27, (uint64_t)&__p, v23, (uint64_t *)&v29);
  *a4 = v29;
  v29 = 0uLL;
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  v20 = v28;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1B3D1CC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createLogCommandDriver(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  const void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  CFTypeRef v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string v33;
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;
  void *v37;
  dispatch_object_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_1;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v13 = *(_QWORD *)algn_1EDBEAA48;
    v39 = GetABMLogServer(void)::sLogServer;
    v40 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v13 = *(_QWORD *)algn_1EDBEAA48;
    v39 = GetABMLogServer(void)::sLogServer;
    v40 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  v14 = (unint64_t *)(v13 + 8);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
LABEL_6:
  v16 = *(void **)a2;
  if (*(_QWORD *)a2)
    v16 = _Block_copy(v16);
  v17 = *(NSObject **)(a2 + 8);
  v37 = v16;
  v38 = v17;
  if (v17)
    dispatch_retain(v17);
  v18 = *(void **)a3;
  if (*(_QWORD *)a3)
    v18 = _Block_copy(v18);
  v19 = *(NSObject **)(a3 + 8);
  aBlock = v18;
  object = v19;
  if (v19)
    dispatch_retain(v19);
  v20 = *a4;
  cf = v20;
  if (v20)
    CFRetain(v20);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v33 = *(std::string *)a5;
  v21 = *(std::__shared_weak_count **)(a1 + 16);
  v31 = *(_QWORD *)(a1 + 8);
  v32 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  logs::QMICommandDriver::create(&v39, (uint64_t)&v37, (uint64_t)&aBlock, &cf, (uint64_t)&v33, &v31, &v41);
  *a6 = v41;
  v41 = 0uLL;
  v24 = v32;
  if (!v32)
    goto LABEL_26;
  v25 = (unint64_t *)&v32->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_26:
    if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    operator delete(v33.__r_.__value_.__l.__data_);
    v27 = cf;
    if (!cf)
      goto LABEL_32;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_30;
LABEL_27:
  v27 = cf;
  if (cf)
LABEL_31:
    CFRelease(v27);
LABEL_32:
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v38)
    dispatch_release(v38);
  if (v37)
    _Block_release(v37);
  v28 = v40;
  if (v40)
  {
    v29 = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1B3D1CF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  dispatch::callback<void({block_pointer})(std::shared_ptr<std::vector<unsigned char>>,BOOL)>::~callback((uint64_t)&a18);
  dispatch::callback<void({block_pointer})(logs::CollectionState)>::~callback((uint64_t)&a22);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createDataCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_1;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *(_QWORD *)algn_1EDBEAA48;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v5 = *(_QWORD *)algn_1EDBEAA48;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17[0] = v8;
  v17[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  data::QMIDataCommandDriver::create(&v18, v17, v20);
  *a2 = *(_OWORD *)v20;
  *(_OWORD *)v20 = 0uLL;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1B3D1D160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::weakDataCommandDriver(QMICommandDriverFactory *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  v4 = *((_QWORD *)this + 16);
  if (!v4)
  {
    std::mutex::lock((std::mutex *)((char *)this + 24));
    if (!*((_QWORD *)this + 16))
    {
      QMICommandDriverFactory::createDataCommandDriver(this, &v15);
      v8 = v15;
      v15 = 0uLL;
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
      *((_OWORD *)this + 8) = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
      if (*((_QWORD *)&v15 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    v4 = *((_QWORD *)this + 16);
  }
  v5 = *((_QWORD *)this + 17);
  *a2 = v4;
  a2[1] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_1B3D1D280(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createCPMSCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[2];
  __int128 v9;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v8[0] = *((_QWORD *)this + 1);
  v8[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  cpms::QMICommandDriver::create((uint64_t)v8, (cpms::QMICommandDriver **)&v9);
  *a2 = v9;
  v9 = 0uLL;
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D1D334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createCoreDumpCommandDriver(QMICommandDriverFactory *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34[2];
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37[3];
  uint64_t block;
  uint64_t v39;
  void (*v40)(uint64_t);
  void *v41;
  uint64_t *v42;

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::mav20Plus(this))
  {
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
    }
    block = MEMORY[0x1E0C809B0];
    v39 = 0x40000000;
    v40 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v41 = &__block_descriptor_tmp_13_1;
    v42 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v5 = *(_QWORD *)algn_1EDBEAA48;
      v35 = GetABMLogServer(void)::sLogServer;
      v36 = *(std::__shared_weak_count **)algn_1EDBEAA48;
      if (!*(_QWORD *)algn_1EDBEAA48)
        goto LABEL_7;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
      v5 = *(_QWORD *)algn_1EDBEAA48;
      v35 = GetABMLogServer(void)::sLogServer;
      v36 = *(std::__shared_weak_count **)algn_1EDBEAA48;
      if (!*(_QWORD *)algn_1EDBEAA48)
        goto LABEL_7;
    }
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
LABEL_7:
    v8 = *((_QWORD *)this + 1);
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    v34[0] = v8;
    v34[1] = (uint64_t)v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    coredump::QMICommandDriverM20::create(&v35, v34, v37);
    v12 = *(_OWORD *)v37;
    *(_OWORD *)v37 = 0uLL;
    *(_OWORD *)a2 = v12;
    if (v9)
    {
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v15 = v36;
    if (!v36)
      return;
    v16 = (unint64_t *)&v36->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (v17)
      return;
LABEL_37:
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
  }
  block = MEMORY[0x1E0C809B0];
  v39 = 0x40000000;
  v40 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v41 = &__block_descriptor_tmp_13_1;
  v42 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v19 = *(_QWORD *)algn_1EDBEAA48;
    v32 = GetABMLogServer(void)::sLogServer;
    v33 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_25;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v19 = *(_QWORD *)algn_1EDBEAA48;
    v32 = GetABMLogServer(void)::sLogServer;
    v33 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_25;
  }
  v20 = (unint64_t *)(v19 + 8);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_25:
  v22 = *((_QWORD *)this + 1);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v31[0] = v22;
  v31[1] = (uint64_t)v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  coredump::QMICommandDriver::create(&v32, v31, v37);
  v26 = *(_OWORD *)v37;
  *(_OWORD *)v37 = 0uLL;
  *(_OWORD *)a2 = v26;
  if (v23)
  {
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v15 = v33;
  if (v33)
  {
    v29 = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
      goto LABEL_37;
  }
}

void sub_1B3D1D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1B3D1D694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void sub_1B3D1D6B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createDebugCommandDriver(capabilities::radio *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31[2];
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34[2];
  uint64_t v35;
  std::__shared_weak_count *v36;
  __int128 v37;

  *a3 = 0;
  a3[1] = 0;
  if (capabilities::radio::mav20Plus(a1))
  {
    v6 = a2[1];
    v35 = *a2;
    v36 = (std::__shared_weak_count *)v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *((_QWORD *)a1 + 1);
    v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
    v34[0] = v9;
    v34[1] = (uint64_t)v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    radio::QMIDebugCommandDriverM20::create(&v35, v34, (uint64_t *)&v37);
    v13 = v37;
    v37 = 0uLL;
    *(_OWORD *)a3 = v13;
    if (v10)
    {
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v16 = v36;
    if (!v36)
      return;
    v17 = (unint64_t *)&v36->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (v18)
      return;
LABEL_33:
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    return;
  }
  v19 = a2[1];
  v32 = *a2;
  v33 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *((_QWORD *)a1 + 1);
  v23 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  v31[0] = v22;
  v31[1] = (uint64_t)v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  radio::QMIDebugCommandDriver::create(&v32, v31, (uint64_t *)&v37);
  v26 = v37;
  v37 = 0uLL;
  *(_OWORD *)a3 = v26;
  if (v23)
  {
    v27 = (unint64_t *)&v23->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v16 = v33;
  if (v33)
  {
    v29 = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
      goto LABEL_33;
  }
}

void sub_1B3D1D898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1B3D1D8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void sub_1B3D1D8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createDiagCommandDriver(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_1;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v7 = *(_QWORD *)algn_1EDBEAA48;
    v25 = GetABMLogServer(void)::sLogServer;
    v26 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v7 = *(_QWORD *)algn_1EDBEAA48;
    v25 = GetABMLogServer(void)::sLogServer;
    v26 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  v8 = (unint64_t *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_6:
  v10 = *(void **)a2;
  if (*(_QWORD *)a2)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a2 + 8);
  aBlock = v10;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 8);
  v22 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  diag::QMICommandDriver::create(&v25, (uint64_t)&aBlock, &v21, &v27);
  *a3 = v27;
  v27 = 0uLL;
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  v18 = v26;
  if (v26)
  {
    v19 = (unint64_t *)&v26->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1B3D1DB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(diag::CommandDriver::Event,dispatch::group_session)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void QMICommandDriverFactory::createTraceCommandDriver(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void QMICommandDriverFactory::createDesenseCommandDriver(QMICommandDriverFactory *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20[3];
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1B3CB3000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_1;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *(_QWORD *)algn_1EDBEAA48;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v5 = *(_QWORD *)algn_1EDBEAA48;
    v18 = GetABMLogServer(void)::sLogServer;
    v19 = *(std::__shared_weak_count **)algn_1EDBEAA48;
    if (!*(_QWORD *)algn_1EDBEAA48)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v17[0] = v8;
  v17[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  desense::QMICommandDriver::create(&v18, v17, v20);
  *a2 = *(_OWORD *)v20;
  *(_OWORD *)v20 = 0uLL;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v14 = v19;
  if (v19)
  {
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1B3D1DD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void QMICommandDriverFactory::createCellularCertCommandDriver(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void std::__shared_ptr_emplace<QMICommandDriverFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D8010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICommandDriverFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D8010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<QMICommandDriverFactory>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)(a1 + 24) = &off_1E66D7F40;
  v2 = *(std::__shared_weak_count **)(a1 + 160);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 144);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 144);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(NSObject **)(a1 + 128);
  if (v8)
    dispatch_release(v8);
  v9 = *(std::__shared_weak_count **)(a1 + 120);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DDFD40] + 16;
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v12 = *(std::__shared_weak_count **)(a1 + 40);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

const char *wda::asString(unsigned int a1)
{
  if (a1 > 9)
    return "???";
  else
    return off_1E66D8050[a1];
}

{
  if (a1 > 5)
    return "???";
  else
    return off_1E66D80A0[a1];
}

const char *wda::asString(int a1)
{
  const char *v1;

  v1 = "???";
  if (a1 == 7)
    v1 = "LowLatency";
  if (a1 == 4)
    return "Default";
  else
    return v1;
}

{
  const char *v1;

  v1 = "???";
  if (a1 == 2)
    v1 = "IP";
  if (a1 == 1)
    return "Ethernet";
  else
    return v1;
}

{
  if (a1 > 1)
  {
    if (a1 != 2)
    {
      if (a1 == 0x7FFFFFFF)
        return "AllMask";
      return "???";
    }
    return "FlowControl";
  }
  else
  {
    if (a1)
    {
      if (a1 == 1)
        return "DownLinkMarker";
      return "???";
    }
    return "Unsupported";
  }
}

{
  const char *v1;

  v1 = "???";
  if (a1 == 1)
    v1 = "Version1";
  if (a1)
    return v1;
  else
    return "Unsupported";
}

{
  const char *v1;

  v1 = "???";
  if (a1 == 1)
    v1 = "Enable";
  if (a1)
    return v1;
  else
    return "Disable";
}

BOOL radio::QMICommandDriverBase::isEmptyBuffer(uint64_t a1, CFDataRef *a2)
{
  uint64_t (*v2)(uint64_t);
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v6;
  int v7;
  int v8;
  _BOOL8 result;
  BOOL v11;

  v2 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
  if (!*a2)
    v2 = 0;
  if (!v2)
    return 1;
  BytePtr = CFDataGetBytePtr(*a2);
  Length = CFDataGetLength(*a2);
  v6 = Length - 1;
  if (Length < 1)
    return 1;
  do
  {
    v8 = *BytePtr++;
    v7 = v8;
    result = v8 == 0;
    v11 = v6-- != 0;
  }
  while (!v7 && v11);
  return result;
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t radio::QMICommandDriverBase::QMICommandDriverBase(uint64_t a1, uint64_t a2, dispatch_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  NSObject *object;
  std::__shared_weak_count *v19;

  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  v17 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  radio::CommandDriver::CommandDriver();
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (object)
    dispatch_release(object);
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)a1 = off_1E66D80E0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  return a1;
}

void sub_1B3D1E1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::~QMICommandDriverBase(radio::QMICommandDriverBase *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  const void *v13;
  uint64_t v14;
  radio::QMICommandDriverBase *v15;
  uint64_t v16;
  uint64_t v17;
  radio::QMICommandDriverBase *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  const void *v37;
  radio::QMICommandDriverBase *v38;
  const void *v39;
  radio::QMICommandDriverBase *v40;
  uint8_t v41[16];

  *(_QWORD *)this = off_1E66D80E0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v41 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v41, 2u);
  }
  qmi::Client::~Client((radio::QMICommandDriverBase *)((char *)this + 320));
  qmi::Client::~Client((radio::QMICommandDriverBase *)((char *)this + 288));
  *(_QWORD *)this = off_1E66D8EA0;
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *((_QWORD *)this + 26);
  if (v12)
    dispatch_release(v12);
  v13 = (const void *)*((_QWORD *)this + 25);
  if (v13)
    _Block_release(v13);
  if (*((_QWORD *)this + 24))
  {
    v14 = *((_QWORD *)this + 22);
    v15 = (radio::QMICommandDriverBase *)*((_QWORD *)this + 23);
    v16 = *(_QWORD *)v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    *((_QWORD *)this + 24) = 0;
    if (v15 != (radio::QMICommandDriverBase *)((char *)this + 176))
    {
      do
      {
        v38 = (radio::QMICommandDriverBase *)*((_QWORD *)v15 + 1);
        v37 = (const void *)*((_QWORD *)v15 + 2);
        if (v37)
          _Block_release(v37);
        operator delete(v15);
        v15 = v38;
      }
      while (v38 != (radio::QMICommandDriverBase *)((char *)this + 176));
    }
  }
  if (*((_QWORD *)this + 21))
  {
    v17 = *((_QWORD *)this + 19);
    v18 = (radio::QMICommandDriverBase *)*((_QWORD *)this + 20);
    v19 = *(_QWORD *)v18;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v17 + 8);
    **(_QWORD **)(v17 + 8) = v19;
    *((_QWORD *)this + 21) = 0;
    if (v18 != (radio::QMICommandDriverBase *)((char *)this + 152))
    {
      do
      {
        v40 = (radio::QMICommandDriverBase *)*((_QWORD *)v18 + 1);
        v39 = (const void *)*((_QWORD *)v18 + 2);
        if (v39)
          _Block_release(v39);
        operator delete(v18);
        v18 = v40;
      }
      while (v40 != (radio::QMICommandDriverBase *)((char *)this + 152));
    }
  }
  *((_QWORD *)this + 16) = &off_1E66D9040;
  v20 = (unsigned int *)*((_QWORD *)this + 18);
  if (v20)
  {
    v21 = v20 + 2;
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 16))(v20);
      v24 = v20 + 3;
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
        (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 24))(v20);
    }
  }
  *((_QWORD *)this + 13) = &off_1E66D90B0;
  v27 = (unsigned int *)*((_QWORD *)this + 15);
  if (v27)
  {
    v28 = v27 + 2;
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 16))(v27);
      v31 = v27 + 3;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
        (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
    }
  }
  *(_QWORD *)this = off_1E66D9120;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v34 = *((_QWORD *)this + 12);
  if (v34)
    dispatch_release(v34);
  v35 = *((_QWORD *)this + 11);
  if (v35)
    dispatch_release(v35);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
}

void radio::QMICommandDriverBase::startDMSClient_sync(radio::QMICommandDriverBase *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *Name;
  size_t v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  qmi::Client *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[6];
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD *, xpc_object_t);
  void *v67;
  radio::QMICommandDriverBase *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD *);
  void *v74;
  radio::QMICommandDriverBase *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD *);
  void *v81;
  radio::QMICommandDriverBase *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  NSObject *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  NSObject *v94;
  _BYTE v95[24];
  __int128 v96;
  __int128 v97;
  _QWORD *v98;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  memset(v95, 170, sizeof(v95));
  Name = (const char *)radio::CommandDriver::getName(this);
  BYTE7(v97) = 4;
  strcpy((char *)&v96, ".DMS");
  v11 = strlen(Name);
  v12 = std::string::insert((std::string *)&v96, 0, Name, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)&v95[16] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)v95 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v97) & 0x80000000) == 0)
  {
    if (*((_QWORD *)this + 31))
      goto LABEL_11;
LABEL_21:
    v21 = *((_QWORD *)this + 11);
    v87 = v21;
    if (v21)
      dispatch_retain(v21);
    v93 = 5;
    strcpy((char *)v92, "radio");
    v85 = 0;
    v86 = 0;
    v22 = std::__shared_weak_count::lock(v5);
    if (v22)
    {
      v23 = v22;
      v24 = (unint64_t *)&v22->__shared_weak_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v85 = v3;
      v86 = v22;
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      v85 = 0;
      v86 = 0;
    }
    qmi::Client::createWithQueue();
    v58 = v97;
    v97 = 0uLL;
    v59 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
    *((_OWORD *)this + 19) = v58;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    qmi::Client::~Client((qmi::Client *)&v96);
    if (v86)
      std::__shared_weak_count::__release_weak(v86);
    if (v93 < 0)
    {
      operator delete(v92[0]);
      v37 = v87;
      if (!v87)
        goto LABEL_50;
    }
    else
    {
      v37 = v87;
      if (!v87)
        goto LABEL_50;
    }
    goto LABEL_49;
  }
  operator delete((void *)v96);
  if (!*((_QWORD *)this + 31))
    goto LABEL_21;
LABEL_11:
  v14 = *((_QWORD *)this + 11);
  v94 = v14;
  if (v14)
    dispatch_retain(v14);
  v93 = 5;
  strcpy((char *)v92, "radio");
  v90 = 0;
  v91 = 0;
  v15 = std::__shared_weak_count::lock(v5);
  if (v15)
  {
    v16 = v15;
    v17 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v90 = v3;
    v91 = v15;
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v90 = 0;
    v91 = 0;
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v88 = *((_QWORD *)this + 31);
  v89 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  qmi::Client::createWithQueueLocal();
  v31 = v97;
  v97 = 0uLL;
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  *((_OWORD *)this + 19) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  qmi::Client::~Client((qmi::Client *)&v96);
  if (v89)
  {
    v35 = &v89->__shared_owners_;
    do
      v36 = __ldaxr((unint64_t *)v35);
    while (__stlxr(v36 - 1, (unint64_t *)v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v91)
    std::__shared_weak_count::__release_weak(v91);
  if (v93 < 0)
    operator delete(v92[0]);
  v37 = v94;
  if (v94)
LABEL_49:
    dispatch_release(v37);
LABEL_50:
  v38 = (radio::QMICommandDriverBase *)((char *)this + 288);
  v39 = MEMORY[0x1E0C809B0];
  v78 = MEMORY[0x1E0C809B0];
  v79 = 1174405120;
  v80 = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke;
  v81 = &__block_descriptor_tmp_8;
  v82 = this;
  v83 = v3;
  v84 = v5;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  v71 = v39;
  v72 = 1174405120;
  v73 = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_8;
  v74 = &__block_descriptor_tmp_9_4;
  v75 = this;
  v76 = v3;
  v77 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  v64 = v39;
  v65 = 1174405120;
  v66 = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_10;
  v67 = &__block_descriptor_tmp_12_3;
  v68 = this;
  v69 = v3;
  v70 = v5;
  do
    v42 = __ldxr(p_shared_weak_owners);
  while (__stxr(v42 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  v62[0] = v39;
  v62[1] = 1174405120;
  v62[2] = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_13;
  v62[3] = &__block_descriptor_tmp_20_4;
  v62[4] = this;
  v62[5] = v3;
  v63 = v5;
  do
    v43 = __ldxr(p_shared_weak_owners);
  while (__stxr(v43 + 1, p_shared_weak_owners));
  *(_QWORD *)&v96 = v39;
  *((_QWORD *)&v96 + 1) = 0x40000000;
  *(_QWORD *)&v97 = ___ZNK3qmi6Client13setIndHandlerIRKN3dms3abm11EventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v97 + 1) = &unk_1E66D91A8;
  v98 = v62;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake((radio::QMICommandDriverBase *)((char *)this + 288));
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v44 || (v45 = *((_QWORD *)this + 9), (v46 = std::__shared_weak_count::lock(v44)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v47 = v46;
  v48 = (unint64_t *)&v46->__shared_weak_owners_;
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v50 = (unint64_t *)&v46->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v47);
    v52 = std::__shared_weak_count::lock(v47);
    if (v52)
      goto LABEL_66;
LABEL_73:
    v96 = 0uLL;
    goto LABEL_74;
  }
  v52 = std::__shared_weak_count::lock(v46);
  if (!v52)
    goto LABEL_73;
LABEL_66:
  v53 = v52;
  v54 = (unint64_t *)&v52->__shared_weak_owners_;
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  *(_QWORD *)&v96 = v45;
  *((_QWORD *)&v96 + 1) = v52;
  std::__shared_weak_count::__release_weak(v47);
  v56 = (unint64_t *)&v53->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    v47 = v53;
LABEL_74:
    std::__shared_weak_count::__release_weak(v47);
  }
  qmi::Client::setClientHandle();
  if (*((_QWORD *)&v96 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
  qmi::Client::start(v38);
  if (v63)
    std::__shared_weak_count::__release_weak(v63);
  if (v70)
    std::__shared_weak_count::__release_weak(v70);
  if (v77)
    std::__shared_weak_count::__release_weak(v77);
  if (v84)
    std::__shared_weak_count::__release_weak(v84);
  if ((v95[23] & 0x80000000) != 0)
    operator delete(*(void **)v95);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1B3D1EBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;
  NSObject *v42;

  if (a39)
  {
    std::__shared_weak_count::__release_weak(a39);
    if (*(char *)(v40 - 153) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v40 - 176));
      v42 = *(NSObject **)(v40 - 216);
      if (!v42)
      {
LABEL_8:
        if (*(char *)(v40 - 121) < 0)
          operator delete(*(void **)(v40 - 144));
        std::__shared_weak_count::__release_weak(v39);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v42);
      goto LABEL_8;
    }
  }
  else if (*(char *)(v40 - 153) < 0)
  {
    goto LABEL_3;
  }
  v42 = *(NSObject **)(v40 - 216);
  if (!v42)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_1B3D1EC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (a23)
    {
      std::__shared_weak_count::__release_weak(a23);
      if (a30)
      {
        std::__shared_weak_count::__release_weak(a30);
        if (!a37)
          JUMPOUT(0x1B3D1EC64);
        JUMPOUT(0x1B3D1EC60);
      }
      JUMPOUT(0x1B3D1EC58);
    }
    JUMPOUT(0x1B3D1EC50);
  }
  JUMPOUT(0x1B3D1EC48);
}

void sub_1B3D1ECA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23)
    JUMPOUT(0x1B3D1ED24);
  JUMPOUT(0x1B3D1EC50);
}

void sub_1B3D1ECB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30)
    JUMPOUT(0x1B3D1ED30);
  JUMPOUT(0x1B3D1EC58);
}

void sub_1B3D1ECC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (!a37)
    JUMPOUT(0x1B3D1EC64);
  JUMPOUT(0x1B3D1EC60);
}

void sub_1B3D1ECD4()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    JUMPOUT(0x1B3D1EC70);
  JUMPOUT(0x1B3D1EC74);
}

void sub_1B3D1ECE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D1ECFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (a23)
    {
      std::__shared_weak_count::__release_weak(a23);
      if (a30)
      {
        std::__shared_weak_count::__release_weak(a30);
        if (!a37)
          JUMPOUT(0x1B3D1EC64);
        JUMPOUT(0x1B3D1EC60);
      }
      JUMPOUT(0x1B3D1EC58);
    }
    JUMPOUT(0x1B3D1EC50);
  }
  JUMPOUT(0x1B3D1EC48);
}

void sub_1B3D1ED0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    JUMPOUT(0x1B3D1ED18);
  JUMPOUT(0x1B3D1EC48);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  radio::CommandDriver *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (radio::CommandDriver *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *((_QWORD *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I DMS:Stopped", v9, 2u);
        }
        radio::CommandDriver::handleClientStateChanged_sync(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D1EE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  radio::QMICommandDriverBase *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (radio::QMICommandDriverBase *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *((_QWORD *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I DMS:Started", v9, 2u);
        }
        radio::QMICommandDriverBase::setupOperatingModeReporting_sync(v3);
        radio::CommandDriver::handleClientStateChanged_sync(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D1EF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::setupOperatingModeReporting_sync(radio::QMICommandDriverBase *this)
{
  __int128 v2;
  char *v3;
  char *v4;
  const void **v5;
  char *v6;
  _BYTE *v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *v18;
  NSObject *v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint8_t buf[16];
  __int128 v29;
  __int128 v30;

  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = v2;
  v30 = v2;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v29);
  v3 = (char *)*((_QWORD *)&v29 + 1);
  v4 = (char *)v30;
  v5 = (const void **)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1) != (_QWORD)v30)
  {
    v5 = (const void **)*((_QWORD *)&v29 + 1);
    while (*((_BYTE *)*v5 + 8) != 20)
    {
      if (++v5 == (const void **)v30)
        goto LABEL_9;
    }
  }
  if (v5 == (const void **)v30)
  {
LABEL_9:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[4] = 20;
    *(_QWORD *)v8 = off_1E66D92D8;
    if ((unint64_t)v4 < *((_QWORD *)&v30 + 1))
    {
      *(_QWORD *)v4 = v8;
      v10 = (uint64_t)(v4 + 8);
LABEL_22:
      v7 = (char *)v9 + 9;
      *(_QWORD *)&v30 = v10;
      goto LABEL_23;
    }
    v11 = v4 - v3;
    v12 = (v4 - v3) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = *((_QWORD *)&v30 + 1) - (_QWORD)v3;
    if ((uint64_t)(*((_QWORD *)&v30 + 1) - (_QWORD)v3) >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(8 * v15);
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v9;
      v10 = (uint64_t)(v17 + 1);
      if (v3 == v4)
      {
LABEL_20:
        *((_QWORD *)&v29 + 1) = v17;
        *(_QWORD *)&v30 = v10;
        *((_QWORD *)&v30 + 1) = v18;
        if (!v3)
          goto LABEL_22;
LABEL_21:
        operator delete(v3);
        goto LABEL_22;
      }
    }
    else
    {
      v16 = 0;
      v17 = (_QWORD *)(8 * v12);
      v18 = 0;
      *(_QWORD *)(8 * v12) = v9;
      v10 = 8 * v12 + 8;
      if (v3 == v4)
        goto LABEL_20;
    }
    if ((unint64_t)(v11 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)(v3 - v16) < 0x20)
      goto LABEL_42;
    v20 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v4[-v21];
    v17 = (_QWORD *)((char *)v17 - v21);
    v23 = &v16[8 * v12 - 16];
    v24 = v4 - 16;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 32;
      v25 -= 4;
    }
    while (v25);
    v4 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v27 = *((_QWORD *)v4 - 1);
        v4 -= 8;
        *--v17 = v27;
      }
      while (v4 != v3);
    }
    v3 = (char *)*((_QWORD *)&v29 + 1);
    *((_QWORD *)&v29 + 1) = v17;
    *(_QWORD *)&v30 = v10;
    *((_QWORD *)&v30 + 1) = v18;
    if (!v3)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v6)
    __cxa_bad_cast();
  v7 = v6 + 9;
LABEL_23:
  *v7 = 1;
  v19 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v19, OS_LOG_TYPE_DEFAULT, "#I Setup Operating mode reporting", buf, 2u);
  }
  if (QMIServiceMsg::create())
    qmi::Client::send();
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v29);
}

void sub_1B3D1F1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_10(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  radio::CommandDriver *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t v12[16];
  std::__shared_weak_count *v14;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (radio::CommandDriver *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v14 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *((_QWORD *)v5 + 5);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v12 = 0;
          _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Server error", v12, 2u);
        }
        radio::CommandDriver::handleClientStateChanged_sync(v5);
        if (a2)
          xpc_retain(a2);
        else
          a2 = xpc_null_create();
        v9 = (void *)MEMORY[0x1B5E2FB34](a2);
        free(v9);
        xpc_release(a2);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D1F318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_13(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  tlv *TlvValue;
  int v10;
  tlv *v11;
  tlv *v12;
  int v13;
  tlv *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[5];
  _QWORD v18[5];
  std::__shared_weak_count *v20;
  __int16 v21;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v20 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = MEMORY[0x1E0C809B0];
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 0x40000000;
        v18[2] = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_2;
        v18[3] = &__block_descriptor_tmp_15_1;
        v18[4] = v5;
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v11 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)2);
          v21 = *(_WORD *)v11;
          ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_2((uint64_t)v18);
        }
        v17[0] = v8;
        v17[1] = 0x40000000;
        v17[2] = ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_16;
        v17[3] = &__block_descriptor_tmp_18_2;
        v17[4] = v5;
        v12 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v14 = v12;
        if (v12)
        {
          tlv::throwIfNotEnoughBytes(v12, (const unsigned __int8 *)v12 + v13, (const unsigned __int8 *)1);
          LOBYTE(v21) = *(_BYTE *)v14;
          ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_16((uint64_t)v17);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D1F4B8(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 20, v2, v3);
  JUMPOUT(0x1B3D1F454);
}

void sub_1B3D1F4E4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B3D1F3F8);
}

void sub_1B3D1F4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void *p_p;
  void *__p;
  char v5;
  uint8_t buf[4];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  radio::OpMode::setConfig(*(radio::OpMode **)(v1 + 216));
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getConfigString(*(radio::OpMode **)(v1 + 216));
    if (v5 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136446210;
    v7 = p_p;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Protocol NV config indication: %{public}s", buf, 0xCu);
    if (v5 < 0)
      operator delete(__p);
  }
}

void ___ZN5radio20QMICommandDriverBase19startDMSClient_syncEv_block_invoke_16(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void *p_p;
  void *__p;
  char v5;
  uint8_t buf[4];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  radio::OpMode::setMode(*(radio::OpMode **)(v1 + 216));
  radio::OpMode::getMode(*(radio::OpMode **)(v1 + 216));
  radio::CommandDriver::handleOperatingModeChanged_sync();
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getModeString(*(radio::OpMode **)(v1 + 216));
    if (v5 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136446210;
    v7 = p_p;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Operating mode indication: %{public}s", buf, 0xCu);
    if (v5 < 0)
      operator delete(__p);
  }
}

void radio::QMICommandDriverBase::startBSPClient_sync(radio::QMICommandDriverBase *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *Name;
  size_t v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  qmi::Client *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[6];
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD *, xpc_object_t);
  void *v67;
  radio::QMICommandDriverBase *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD *);
  void *v74;
  radio::QMICommandDriverBase *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD *);
  void *v81;
  radio::QMICommandDriverBase *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  NSObject *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *v92[2];
  char v93;
  NSObject *v94;
  _BYTE v95[24];
  __int128 v96;
  __int128 v97;
  _QWORD *v98;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  memset(v95, 170, sizeof(v95));
  Name = (const char *)radio::CommandDriver::getName(this);
  BYTE7(v97) = 4;
  strcpy((char *)&v96, ".BSP");
  v11 = strlen(Name);
  v12 = std::string::insert((std::string *)&v96, 0, Name, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)&v95[16] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)v95 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v97) & 0x80000000) == 0)
  {
    if (*((_QWORD *)this + 31))
      goto LABEL_11;
LABEL_21:
    v21 = *((_QWORD *)this + 11);
    v87 = v21;
    if (v21)
      dispatch_retain(v21);
    v93 = 5;
    strcpy((char *)v92, "radio");
    v85 = 0;
    v86 = 0;
    v22 = std::__shared_weak_count::lock(v5);
    if (v22)
    {
      v23 = v22;
      v24 = (unint64_t *)&v22->__shared_weak_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v85 = v3;
      v86 = v22;
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    else
    {
      v85 = 0;
      v86 = 0;
    }
    qmi::Client::createWithQueue();
    v58 = v97;
    v97 = 0uLL;
    v59 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
    *((_OWORD *)this + 21) = v58;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    qmi::Client::~Client((qmi::Client *)&v96);
    if (v86)
      std::__shared_weak_count::__release_weak(v86);
    if (v93 < 0)
    {
      operator delete(v92[0]);
      v37 = v87;
      if (!v87)
        goto LABEL_50;
    }
    else
    {
      v37 = v87;
      if (!v87)
        goto LABEL_50;
    }
    goto LABEL_49;
  }
  operator delete((void *)v96);
  if (!*((_QWORD *)this + 31))
    goto LABEL_21;
LABEL_11:
  v14 = *((_QWORD *)this + 11);
  v94 = v14;
  if (v14)
    dispatch_retain(v14);
  v93 = 5;
  strcpy((char *)v92, "radio");
  v90 = 0;
  v91 = 0;
  v15 = std::__shared_weak_count::lock(v5);
  if (v15)
  {
    v16 = v15;
    v17 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v90 = v3;
    v91 = v15;
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    v90 = 0;
    v91 = 0;
  }
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  v88 = *((_QWORD *)this + 31);
  v89 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  qmi::Client::createWithQueueLocal();
  v31 = v97;
  v97 = 0uLL;
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  *((_OWORD *)this + 21) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  qmi::Client::~Client((qmi::Client *)&v96);
  if (v89)
  {
    v35 = &v89->__shared_owners_;
    do
      v36 = __ldaxr((unint64_t *)v35);
    while (__stlxr(v36 - 1, (unint64_t *)v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  if (v91)
    std::__shared_weak_count::__release_weak(v91);
  if (v93 < 0)
    operator delete(v92[0]);
  v37 = v94;
  if (v94)
LABEL_49:
    dispatch_release(v37);
LABEL_50:
  v38 = (radio::QMICommandDriverBase *)((char *)this + 320);
  v39 = MEMORY[0x1E0C809B0];
  v78 = MEMORY[0x1E0C809B0];
  v79 = 1174405120;
  v80 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke;
  v81 = &__block_descriptor_tmp_22_0;
  v82 = this;
  v83 = v3;
  v84 = v5;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  v71 = v39;
  v72 = 1174405120;
  v73 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_23;
  v74 = &__block_descriptor_tmp_24_4;
  v75 = this;
  v76 = v3;
  v77 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  v64 = v39;
  v65 = 1174405120;
  v66 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_25;
  v67 = &__block_descriptor_tmp_26_4;
  v68 = this;
  v69 = v3;
  v70 = v5;
  do
    v42 = __ldxr(p_shared_weak_owners);
  while (__stxr(v42 + 1, p_shared_weak_owners));
  qmi::Client::setHandler();
  v62[0] = v39;
  v62[1] = 1174405120;
  v62[2] = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_27;
  v62[3] = &__block_descriptor_tmp_35_3;
  v62[4] = this;
  v62[5] = v3;
  v63 = v5;
  do
    v43 = __ldxr(p_shared_weak_owners);
  while (__stxr(v43 + 1, p_shared_weak_owners));
  *(_QWORD *)&v96 = v39;
  *((_QWORD *)&v96 + 1) = 0x40000000;
  *(_QWORD *)&v97 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm11DumpLogsInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v97 + 1) = &unk_1E66D9290;
  v98 = v62;
  qmi::Client::setIndHandler();
  v44 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v44 || (v45 = *((_QWORD *)this + 9), (v46 = std::__shared_weak_count::lock(v44)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v47 = v46;
  v48 = (unint64_t *)&v46->__shared_weak_owners_;
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v50 = (unint64_t *)&v46->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v47);
    v52 = std::__shared_weak_count::lock(v47);
    if (v52)
      goto LABEL_66;
LABEL_73:
    v96 = 0uLL;
    goto LABEL_74;
  }
  v52 = std::__shared_weak_count::lock(v46);
  if (!v52)
    goto LABEL_73;
LABEL_66:
  v53 = v52;
  v54 = (unint64_t *)&v52->__shared_weak_owners_;
  do
    v55 = __ldxr(v54);
  while (__stxr(v55 + 1, v54));
  *(_QWORD *)&v96 = v45;
  *((_QWORD *)&v96 + 1) = v52;
  std::__shared_weak_count::__release_weak(v47);
  v56 = (unint64_t *)&v53->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    v47 = v53;
LABEL_74:
    std::__shared_weak_count::__release_weak(v47);
  }
  qmi::Client::setClientHandle();
  if (*((_QWORD *)&v96 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v96 + 1));
  qmi::Client::start(v38);
  if (v63)
    std::__shared_weak_count::__release_weak(v63);
  if (v70)
    std::__shared_weak_count::__release_weak(v70);
  if (v77)
    std::__shared_weak_count::__release_weak(v77);
  if (v84)
    std::__shared_weak_count::__release_weak(v84);
  if ((v95[23] & 0x80000000) != 0)
    operator delete(*(void **)v95);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1B3D1FD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  uint64_t v40;
  NSObject *v42;

  if (a39)
  {
    std::__shared_weak_count::__release_weak(a39);
    if (*(char *)(v40 - 153) < 0)
    {
LABEL_3:
      operator delete(*(void **)(v40 - 176));
      v42 = *(NSObject **)(v40 - 216);
      if (!v42)
      {
LABEL_8:
        if (*(char *)(v40 - 121) < 0)
          operator delete(*(void **)(v40 - 144));
        std::__shared_weak_count::__release_weak(v39);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v42);
      goto LABEL_8;
    }
  }
  else if (*(char *)(v40 - 153) < 0)
  {
    goto LABEL_3;
  }
  v42 = *(NSObject **)(v40 - 216);
  if (!v42)
    goto LABEL_8;
  goto LABEL_7;
}

void sub_1B3D1FE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23)
    JUMPOUT(0x1B3D1FEB4);
  JUMPOUT(0x1B3D1FDFCLL);
}

void sub_1B3D1FE54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a30)
    JUMPOUT(0x1B3D1FEC0);
  JUMPOUT(0x1B3D1FE04);
}

void sub_1B3D1FE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (!a37)
    JUMPOUT(0x1B3D1FE10);
  JUMPOUT(0x1B3D1FE0CLL);
}

void sub_1B3D1FE74()
{
  uint64_t v0;

  if (*(char *)(v0 - 97) < 0)
    JUMPOUT(0x1B3D1FE1CLL);
  JUMPOUT(0x1B3D1FE20);
}

void sub_1B3D1FE88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D1FE9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (a23)
    {
      std::__shared_weak_count::__release_weak(a23);
      if (a30)
      {
        std::__shared_weak_count::__release_weak(a30);
        if (!a37)
          JUMPOUT(0x1B3D1FE10);
        JUMPOUT(0x1B3D1FE0CLL);
      }
      JUMPOUT(0x1B3D1FE04);
    }
    JUMPOUT(0x1B3D1FDFCLL);
  }
  JUMPOUT(0x1B3D1FDF4);
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I BSP:Stopped", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_23(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I BSP:Started", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_25(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        if (a2)
          xpc_retain(a2);
        else
          a2 = xpc_null_create();
        v8 = (void *)MEMORY[0x1B5E2FB34](a2);
        v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315138;
          v13 = v8;
          _os_log_debug_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEBUG, "#D Server error %s", buf, 0xCu);
        }
        free(v8);
        xpc_release(a2);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D2019C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_27(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t TlvValue;
  int v12;
  tlv *v13;
  int v14;
  tlv *v15;
  tlv *v16;
  int v17;
  tlv *v18;
  NSObject *v19;
  CFTypeID v20;
  uint64_t v21;
  __int128 v22;
  pthread_mutex_t *v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  __int128 v48;
  uint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  CFTypeRef *v55;
  CFTypeRef v56;
  uint64_t v57;
  void (*v58)(uint64_t, CFTypeRef *);
  uint64_t v59;
  uint64_t i;
  uint64_t v61;
  CFTypeRef *v62;
  CFTypeRef v63;
  uint64_t v64;
  void (*v65)(uint64_t, CFTypeRef *);
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  _QWORD v75[2];
  void (*v76)(uint64_t);
  void *v77;
  CFTypeRef v78;
  _QWORD v79[2];
  void (*v80)(uint64_t, unsigned __int8 *);
  void *v81;
  CFTypeRef v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t *);
  void *v86;
  CFTypeRef v87;
  CFTypeRef v88;
  std::__shared_weak_count *v90;
  CFTypeRef v91;
  _QWORD v92[4];
  __int128 v93;
  __int128 v94;
  __int128 *p_p;
  uint64_t v96;
  uint64_t v97;
  uint64_t **v98;
  unsigned int *v99;
  __int128 v100;
  __int128 v101;
  CFTypeRef cf;
  std::runtime_error v103;
  __int128 __p;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  CFTypeRef *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v90 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v10 = v6;
LABEL_109:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v88 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  v9 = MEMORY[0x1E0C809B0];
  if (Mutable)
  {
    v87 = Mutable;
    v88 = Mutable;
    v83 = MEMORY[0x1E0C809B0];
    v84 = 1174405120;
    v85 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_2;
    v86 = &__block_descriptor_tmp_28_2;
    CFRetain(Mutable);
  }
  else
  {
    v83 = MEMORY[0x1E0C809B0];
    v84 = 1174405120;
    v85 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_2;
    v86 = &__block_descriptor_tmp_28_2;
    v87 = 0;
  }
  TlvValue = qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    __p = 0uLL;
    *(_QWORD *)&v105 = 0;
    std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>((void **)&__p, TlvValue, (char *)(TlvValue + v12), v12);
    v85((uint64_t)&v83, (uint64_t *)&__p);
    if (SBYTE7(v105) < 0)
      operator delete((void *)__p);
  }
  v79[0] = v9;
  v79[1] = 1174405120;
  v80 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_29;
  v81 = &__block_descriptor_tmp_31_2;
  v82 = v8;
  if (v8)
    CFRetain(v8);
  v13 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v15 = v13;
  if (v13)
  {
    tlv::throwIfNotEnoughBytes(v13, (const unsigned __int8 *)v13 + v14, (const unsigned __int8 *)1);
    LOBYTE(__p) = *(_BYTE *)v15 != 0;
    v80((uint64_t)v79, (unsigned __int8 *)&__p);
  }
  v75[0] = v9;
  v75[1] = 1174405120;
  v76 = ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_32;
  v77 = &__block_descriptor_tmp_34_3;
  v78 = v8;
  if (v8)
    CFRetain(v8);
  v16 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v18 = v16;
  if (v16)
  {
    tlv::throwIfNotEnoughBytes(v16, (const unsigned __int8 *)v16 + v17, (const unsigned __int8 *)1);
    LOBYTE(__p) = *(_BYTE *)v18;
    ((void (*)(_QWORD *, __int128 *))v76)(v75, &__p);
  }
  v19 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p) = 138412290;
    *(_QWORD *)((char *)&__p + 4) = v8;
    _os_log_impl(&dword_1B3CB3000, v19, OS_LOG_TYPE_DEFAULT, "#I Baseband requested to dump logs\n%@", (uint8_t *)&__p, 0xCu);
  }
  if (v8 && (v20 = CFGetTypeID(v8), v20 == CFDictionaryGetTypeID()))
  {
    CFRetain(v8);
    v21 = *(_QWORD *)(v5 + 112);
    v91 = v8;
    CFRetain(v8);
  }
  else
  {
    v8 = 0;
    v21 = *(_QWORD *)(v5 + 112);
    v91 = 0;
  }
  v98 = 0;
  v99 = 0;
  *(_QWORD *)&v22 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v112 = v22;
  v113 = v22;
  v110 = v22;
  v111 = v22;
  v108 = v22;
  v109 = v22;
  v106 = v22;
  v107 = v22;
  __p = v22;
  v105 = v22;
  v23 = *(pthread_mutex_t **)(v21 + 24);
  *(_QWORD *)&v114 = 10;
  *((_QWORD *)&v114 + 1) = &__p;
  *(_QWORD *)&v115 = 0;
  *((_QWORD *)&v115 + 1) = v23;
  pthread_mutex_lock(v23);
  v24 = *(unsigned int **)(v21 + 8);
  if (v24)
  {
    v25 = atomic_load(v24 + 2);
    v26 = *(uint64_t ***)v21;
    if (v25 == 1)
    {
      v27 = *v26;
      v28 = *(_QWORD *)(v21 + 16);
      if ((uint64_t *)v28 == *v26)
        v28 = v27[1];
      *(_QWORD *)&v100 = v28;
      if (v27 != (uint64_t *)v28)
      {
        v29 = *(_QWORD *)(v28 + 16);
        if (*(_BYTE *)(v29 + 24))
        {
          v28 = *(_QWORD *)(v28 + 8);
        }
        else
        {
          v28 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(v27, (int *)(v29 + 64), (uint64_t **)&v100);
          v26 = *(uint64_t ***)v21;
        }
      }
      *(_QWORD *)(v21 + 16) = v28;
    }
    v24 = *(unsigned int **)(v21 + 8);
    if (v24)
    {
      v30 = v24 + 2;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
  }
  else
  {
    v26 = *(uint64_t ***)v21;
  }
  v32 = v99;
  v98 = v26;
  v99 = v24;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 16))(v32);
      v36 = v32 + 3;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 24))(v32);
    }
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)&v115 + 1));
  v39 = *((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    if ((uint64_t)v115 - 1 >= 0)
    {
      v40 = *((_QWORD *)&v114 + 1) + 16 * v115;
      do
      {
        v41 = *(unsigned int **)(v40 - 8);
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 16))(v41);
            v45 = v41 + 3;
            do
            {
              v46 = __ldaxr(v45);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v45));
            if (!v47)
              (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 24))(v41);
          }
        }
        v40 -= 16;
      }
      while (v40 > v39);
    }
    if ((unint64_t)v114 >= 0xB)
      operator delete(*((void **)&v114 + 1));
  }
  *(_QWORD *)&v48 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v117 = v48;
  v118 = v48;
  v115 = v48;
  v116 = v48;
  v113 = v48;
  v114 = v48;
  v111 = v48;
  v112 = v48;
  v109 = v48;
  v110 = v48;
  v107 = v48;
  v108 = v48;
  v105 = v48;
  v106 = v48;
  __p = v48;
  LOBYTE(__p) = 0;
  v119 = 0xAAAAAAAAAAAAAAAALL;
  v120 = 10;
  v121 = (char *)&__p + 8;
  v122 = 0;
  v123 = &v91;
  v124 = 0;
  v125 = 0;
  v49 = v98;
  v50 = (uint64_t)*v98;
  p_p = &__p;
  v96 = v21;
  v97 = v50;
  *(_QWORD *)&v93 = *(_QWORD *)(v50 + 8);
  *((_QWORD *)&v93 + 1) = v50;
  *(_QWORD *)&v94 = &__p;
  *((_QWORD *)&v94 + 1) = v50;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v93);
  v92[0] = *v49;
  v92[1] = v92[0];
  v92[2] = &__p;
  v92[3] = v92[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(v92);
  v100 = v93;
  v101 = v94;
  v51 = v92[0];
  v52 = v93;
  if ((_QWORD)v93 == v92[0])
  {
    if (HIDWORD(v124) <= v124)
      goto LABEL_88;
LABEL_87:
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(v96, v97);
    goto LABEL_88;
  }
  v53 = (_BYTE *)v101;
  if (!*(_BYTE *)v101)
  {
    v54 = *(_QWORD *)(*(_QWORD *)(v100 + 16) + 32);
    v55 = *(CFTypeRef **)(v101 + 272);
    v56 = *v55;
    if (*v55)
      CFRetain(*v55);
    v57 = *(_QWORD *)(v54 + 24);
    if (!v57)
    {
      std::runtime_error::runtime_error(&v103, "call to empty boost::function");
      v103.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
      boost::throw_exception<boost::bad_function_call>(&v103);
    }
    v58 = *(void (**)(uint64_t, CFTypeRef *))((v57 & 0xFFFFFFFFFFFFFFFELL) + 8);
    cf = v56;
    v58(v54 + 32, &cf);
    if (cf)
      CFRelease(cf);
    if (!*v53)
      *v53 = 1;
  }
  *(_QWORD *)&v100 = *(_QWORD *)(v52 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v100);
  v59 = v101;
  if (*(_BYTE *)v101)
    *(_BYTE *)v101 = 0;
  for (i = v100; (_QWORD)v100 != v51; i = v100)
  {
    v61 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
    v62 = *(CFTypeRef **)(v59 + 272);
    v63 = *v62;
    if (*v62)
      CFRetain(*v62);
    v64 = *(_QWORD *)(v61 + 24);
    if (!v64)
    {
      std::runtime_error::runtime_error(&v103, "call to empty boost::function");
      v103.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
      boost::throw_exception<boost::bad_function_call>(&v103);
    }
    v65 = *(void (**)(uint64_t, CFTypeRef *))((v64 & 0xFFFFFFFFFFFFFFFELL) + 8);
    cf = v63;
    v65(v61 + 32, &cf);
    if (cf)
      CFRelease(cf);
    if (!*(_BYTE *)v59)
      *(_BYTE *)v59 = 1;
    *(_QWORD *)&v100 = *(_QWORD *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(&v100);
    v59 = v101;
    if (*(_BYTE *)v101)
      *(_BYTE *)v101 = 0;
  }
  if (*((_DWORD *)p_p + 71) > *((_DWORD *)p_p + 70))
    goto LABEL_87;
LABEL_88:
  boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&__p);
  v66 = v99;
  if (v99)
  {
    v67 = v99 + 2;
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 16))(v66);
      v70 = v66 + 3;
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
        (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 24))(v66);
    }
  }
  if (v91)
    CFRelease(v91);
  if (v8)
    CFRelease(v8);
  if (v78)
    CFRelease(v78);
  if (v82)
    CFRelease(v82);
  if (v87)
    CFRelease(v87);
  if (v88)
    CFRelease(v88);
  v10 = v90;
  if (v90)
    goto LABEL_109;
}

void sub_1B3D20AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if ((a56 & 0x80000000) == 0)
    JUMPOUT(0x1B3D20DBCLL);
  JUMPOUT(0x1B3D20334);
}

void sub_1B3D20B04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a51);
  JUMPOUT(0x1B3D20D88);
}

void sub_1B3D20B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,std::runtime_error a49)
{
  const void *v49;
  const void **v50;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  std::runtime_error::~runtime_error(&a49);
  if (v49)
    CFRelease(v49);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v59);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&v61);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v60);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v58);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v53);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v54);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v55);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v50);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v56);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v57);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a43 + 16));
  __cxa_rethrow();
}

void sub_1B3D20BAC(_Unwind_Exception *a1, int a2)
{
  const void **v2;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v11);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache((uint64_t)&v13);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v12);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v10);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&v5);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v6);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v7);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v2);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&v8);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&v9);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B3D20B78);
}

void sub_1B3D20BFC(void *a1, int a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v2, 20, v3, v4);
    JUMPOUT(0x1B3D20474);
  }
  JUMPOUT(0x1B3D20DD0);
}

void sub_1B3D20C38(void *a1, int a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v2, 17, v3, v4);
    JUMPOUT(0x1B3D20408);
  }
  JUMPOUT(0x1B3D20DD0);
}

void sub_1B3D20C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a71;
  char *__p;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;

  if (__p)
  {
    if ((uint64_t)(STACK[0x200] - 1) >= 0)
    {
      v72 = &__p[16 * STACK[0x200]];
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > __p);
    }
    if (a71 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x1B3D20D88);
}

void sub_1B3D20D24()
{
  JUMPOUT(0x1B3D20DC0);
}

void sub_1B3D20D3C()
{
  JUMPOUT(0x1B3D20DA0);
}

void sub_1B3D20D48()
{
  JUMPOUT(0x1B3D20DACLL);
}

void sub_1B3D20D54()
{
  JUMPOUT(0x1B3D20D78);
}

void sub_1B3D20D64(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3D20DD0);
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t *v3;
  std::string::size_type v4;
  std::string *p_p;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::value_type *v10;
  __int128 *v11;
  std::string::size_type *v12;
  unint64_t v13;
  __int128 v14;
  std::string::value_type v15;
  uint64_t v16;
  int v17;
  std::string __p;
  std::string v19;

  memset(&__p, 170, sizeof(__p));
  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_p = (std::string *)operator new(v8 + 1);
    __p.__r_.__value_.__l.__size_ = v4;
    __p.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v4;
    p_p = &__p;
    if (!v4)
    {
      v7 = &__p;
      goto LABEL_22;
    }
  }
  if (v4 < 0x20 || (unint64_t)((char *)p_p - (char *)v3) < 0x20)
  {
    v7 = p_p;
    v10 = (std::string::value_type *)v3;
  }
  else
  {
    v7 = (std::string *)((char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0));
    v10 = (char *)v3 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (__int128 *)(v3 + 2);
    v12 = &p_p->__r_.__value_.__r.__words[2];
    v13 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v14 = *v11;
      *((_OWORD *)v12 - 1) = *(v11 - 1);
      *(_OWORD *)v12 = v14;
      v11 += 2;
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
    if (v4 == (v4 & 0x7FFFFFFFFFFFFFE0))
      goto LABEL_22;
  }
  do
  {
    v15 = *v10++;
    v7->__r_.__value_.__s.__data_[0] = v15;
    v7 = (std::string *)((char *)v7 + 1);
  }
  while (v10 != (char *)v3 + v4);
LABEL_22:
  v7->__r_.__value_.__s.__data_[0] = 0;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v19 = __p;
  ctu::cf::insert<__CFString const*,std::string>(v16, (CFTypeRef)*MEMORY[0x1E0DDF9B8]);
  if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v17 & 0x80000000) == 0)
      return;
LABEL_29:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v19.__r_.__value_.__l.__data_);
  if (v17 < 0)
    goto LABEL_29;
}

void sub_1B3D20F7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D20F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  int v18;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v18 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((v18 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

CFTypeRef __copy_helper_block_e8_32c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_29(uint64_t a1, unsigned __int8 *a2)
{
  ctu::cf::insert<__CFString const*,BOOL>(*(CFMutableDictionaryRef *)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDFA28], *a2);
}

void ___ZN5radio20QMICommandDriverBase19startBSPClient_syncEv_block_invoke_32(uint64_t a1)
{
  const __CFAllocator *v2;
  const __CFString **v3;
  uint64_t v4;
  __CFDictionary *v5;
  const void *v6;
  void *v7;
  BOOL v8;
  void *value;

  v3 = (const __CFString **)radio::asString();
  v4 = *MEMORY[0x1E0C9AE00];
  v5 = *(__CFDictionary **)(a1 + 32);
  v6 = (const void *)*MEMORY[0x1E0DDFA00];
  if (*MEMORY[0x1E0DDFA00])
    CFRetain((CFTypeRef)*MEMORY[0x1E0DDFA00]);
  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, v3, (const char *)0x8000100, v4, v2);
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (!value)
      goto LABEL_10;
  }
  else
  {
    CFDictionaryAddValue(v5, v6, value);
  }
  CFRelease(v7);
LABEL_10:
  if (v6)
    CFRelease(v6);
}

void sub_1B3D210E8(_Unwind_Exception *a1)
{
  const void *v1;
  const void *v2;

  CFRelease(v2);
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::reset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, a2, 4, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3D211B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::powerOff(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  void *aBlock;
  dispatch_object_t object;

  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 152))(a1, a2, 5, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1B3D21254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::setOperatingMode_sync(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  _BOOL8 v9;
  void **v10;
  void **v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  NSObject *v27;
  NSObject *v28;
  void **v29;
  int v30;
  void **v31;
  void **v32;
  void *v33;
  CFTypeRef v34;
  void *v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  char v40;
  void *v41;
  __int128 v42;
  CFTypeRef cf;
  void *v44;
  NSObject *v45;
  _QWORD aBlock[6];
  std::__shared_weak_count *v47;
  void *v48;
  dispatch_object_t object;
  unint64_t v50;
  char v51;
  void *__p[2];
  char v53;
  void *v54[2];
  char v55;
  _BYTE buf[24];
  unint64_t v57;
  void *v58;
  CFTypeRef v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v8 = *(NSObject **)(a1 + 40);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    radio::OpMode::getModeString(*(radio::OpMode **)(a1 + 216));
    radio::OpMode::modeToString();
    v10 = v54;
    if (v55 < 0)
      v10 = (void **)v54[0];
    if (v53 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v10;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v11;
    *(_WORD *)&buf[22] = 2048;
    v57 = a2 / 0xF4240;
    _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I Preparing to change operating mode from %{public}s to %{public}s, with timeout %llu ms", buf, 0x20u);
    if (v53 < 0)
    {
      operator delete(__p[0]);
      if ((v55 & 0x80000000) == 0)
        goto LABEL_9;
    }
    else if ((v55 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v54[0]);
  }
LABEL_9:
  if (capabilities::abs::supportsProtocolNVConfig((capabilities::abs *)v9))
  {
    v12 = *(std::__shared_weak_count **)(a1 + 80);
    if (!v12 || (v13 = *(_QWORD *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v15 = v14;
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN5radio20QMICommandDriverBase21setOperatingMode_syncEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_40_4;
    aBlock[4] = a1;
    aBlock[5] = v13;
    v47 = v15;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v51 = a3;
    v21 = *(void **)a4;
    if (*(_QWORD *)a4)
      v21 = _Block_copy(v21);
    v22 = *(NSObject **)(a4 + 8);
    v48 = v21;
    object = v22;
    if (v22)
      dispatch_retain(v22);
    v50 = a2;
    v23 = _Block_copy(aBlock);
    v24 = *(NSObject **)(a1 + 88);
    if (v24)
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    if (v23)
    {
      v25 = _Block_copy(v23);
      v44 = v25;
      v45 = v24;
      if (v24)
        goto LABEL_28;
    }
    else
    {
      v25 = 0;
      v44 = 0;
      v45 = v24;
      if (v24)
      {
LABEL_28:
        dispatch_retain(v24);
        radio::QMICommandDriverBase::getOperatingMode(a1, (uint64_t)&v44);
        dispatch_release(v24);
        if (!v25)
          goto LABEL_44;
        goto LABEL_43;
      }
    }
    radio::QMICommandDriverBase::getOperatingMode(a1, (uint64_t)&v44);
    if (!v25)
    {
LABEL_44:
      if (v24)
        dispatch_release(v24);
      if (v23)
        _Block_release(v23);
      if (object)
        dispatch_release(object);
      if (v48)
        _Block_release(v48);
      if (v47)
        std::__shared_weak_count::__release_weak(v47);
      std::__shared_weak_count::__release_weak(v15);
      return;
    }
LABEL_43:
    _Block_release(v25);
    goto LABEL_44;
  }
  if ((radio::OpMode::allowModeChange(*(radio::OpMode **)(a1 + 216)) & 1) != 0)
  {
    if (*(_QWORD *)a4)
    {
      v26 = _Block_copy(*(const void **)a4);
      v27 = *(NSObject **)(a4 + 8);
      v37 = v26;
      v38 = v27;
      if (!v27)
      {
LABEL_34:
        radio::QMICommandDriverBase::setOperatingModeUnconditionally(a1, a2, a3, (uint64_t)&v37);
        if (v27)
          dispatch_release(v27);
        if (v26)
          _Block_release(v26);
        return;
      }
    }
    else
    {
      v26 = 0;
      v27 = *(NSObject **)(a4 + 8);
      v37 = 0;
      v38 = v27;
      if (!v27)
        goto LABEL_34;
    }
    dispatch_retain(v27);
    goto LABEL_34;
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v41 = operator new(0x38uLL);
  v42 = xmmword_1B3DCE3E0;
  strcpy((char *)v41, "setting operating mode while in factory test mode");
  CreateError();
  operator delete(v41);
  v28 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    goto LABEL_69;
  radio::OpMode::modeToString();
  if (v55 >= 0)
    v29 = v54;
  else
    v29 = (void **)v54[0];
  radio::OpMode::getModeString(*(radio::OpMode **)(a1 + 216));
  v30 = v53;
  v31 = (void **)__p[0];
  radio::OpMode::getConfigString(*(radio::OpMode **)(a1 + 216));
  v32 = __p;
  if (v30 < 0)
    v32 = v31;
  if (v40 >= 0)
    v33 = &v39;
  else
    v33 = v39;
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = v29;
  *(_WORD *)&buf[12] = 2082;
  *(_QWORD *)&buf[14] = v32;
  *(_WORD *)&buf[22] = 2082;
  v57 = (unint64_t)v33;
  _os_log_impl(&dword_1B3CB3000, v28, OS_LOG_TYPE_DEFAULT, "#I Rejecting operating mode change to %{public}s because current operating mode is %{public}s and protocol NV config is %{public}s", buf, 0x20u);
  if ((v40 & 0x80000000) == 0)
  {
    if ((v53 & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_91;
  }
  operator delete(v39);
  if (v53 < 0)
  {
LABEL_91:
    operator delete(__p[0]);
    if (v55 < 0)
      goto LABEL_92;
LABEL_69:
    v34 = cf;
    if (!cf)
      goto LABEL_71;
    goto LABEL_70;
  }
LABEL_68:
  if ((v55 & 0x80000000) == 0)
    goto LABEL_69;
LABEL_92:
  operator delete(v54[0]);
  v34 = cf;
  if (cf)
LABEL_70:
    CFRetain(v34);
LABEL_71:
  if (*(_QWORD *)a4)
    v35 = _Block_copy(*(const void **)a4);
  else
    v35 = 0;
  v36 = *(NSObject **)(a4 + 8);
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 1174405120;
  *(_QWORD *)&buf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  v57 = (unint64_t)&__block_descriptor_tmp_160;
  if (v35)
  {
    v58 = _Block_copy(v35);
    v59 = v34;
    if (!v34)
      goto LABEL_79;
    goto LABEL_78;
  }
  v58 = 0;
  v59 = v34;
  if (v34)
LABEL_78:
    CFRetain(v34);
LABEL_79:
  dispatch_async(v36, buf);
  if (v59)
    CFRelease(v59);
  if (v58)
    _Block_release(v58);
  if (v35)
    _Block_release(v35);
  if (v34)
    CFRelease(v34);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D21834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a36 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v36 - 145) & 0x80000000) == 0)
    {
LABEL_3:
      ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a17);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v36 - 145) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v36 - 168));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void sub_1B3D21890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D218A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN5radio20QMICommandDriverBase21setOperatingMode_syncEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1, _BYTE *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t (*v8)(uint64_t);
  int Config;
  NSObject *v10;
  _BOOL4 v11;
  const void *v12;
  const void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  const void *v20;
  NSObject *v21;
  void **v22;
  void **v23;
  void *v24;
  const void *v25;
  const void *v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void **v32;
  void **v33;
  void *v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  void *v38;
  char v39;
  void *__p;
  __int128 v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  std::__shared_weak_count *v47;
  _BYTE cf[24];
  void *v49;
  void *aBlock;
  CFTypeRef v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    v47 = v6;
    if (v6)
    {
      v7 = v6;
      if (!*(_QWORD *)(a1 + 40))
      {
LABEL_77:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      if (*(_QWORD *)a2)
        v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v8 = 0;
      if (v8)
      {
        Config = radio::OpMode::getConfig(*(radio::OpMode **)(v5 + 216));
        v10 = *(NSObject **)(v5 + 40);
        v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
        if (Config == 3)
        {
          if (v11)
          {
            radio::OpMode::getModeString(*(radio::OpMode **)(v5 + 216));
            radio::OpMode::modeToString();
            v32 = v44;
            if (v45 < 0)
              v32 = (void **)v44[0];
            if (v43 >= 0)
              v33 = v42;
            else
              v33 = (void **)v42[0];
            v34 = *(void **)a2;
            *(_DWORD *)cf = 136446722;
            *(_QWORD *)&cf[4] = v32;
            *(_WORD *)&cf[12] = 2082;
            *(_QWORD *)&cf[14] = v33;
            *(_WORD *)&cf[22] = 2112;
            v49 = v34;
            _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Skipping operating mode change from %{public}s to %{public}s because we could not get the current operating mode (error ='%@')", cf, 0x20u);
            if (v43 < 0)
              operator delete(v42[0]);
            if (v45 < 0)
              operator delete(v44[0]);
          }
          v12 = *(const void **)a2;
          if (v12)
            CFRetain(v12);
          v13 = *(const void **)(a1 + 56);
          if (v13)
            v14 = _Block_copy(v13);
          else
            v14 = 0;
          v29 = *(NSObject **)(a1 + 64);
          *(_QWORD *)cf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&cf[8] = 1174405120;
          *(_QWORD *)&cf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
          v49 = &__block_descriptor_tmp_160;
          if (v14)
          {
            aBlock = _Block_copy(v14);
            v51 = v12;
            if (!v12)
              goto LABEL_69;
          }
          else
          {
            aBlock = 0;
            v51 = v12;
            if (!v12)
            {
LABEL_69:
              dispatch_async(v29, cf);
              if (v51)
                CFRelease(v51);
              if (aBlock)
                _Block_release(aBlock);
              if (v14)
                _Block_release(v14);
              if (v12)
                CFRelease(v12);
              goto LABEL_77;
            }
          }
          CFRetain(v12);
          goto LABEL_69;
        }
        if (v11)
        {
          v35 = *(_QWORD *)a2;
          *(_DWORD *)cf = 138412290;
          *(_QWORD *)&cf[4] = v35;
          _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "%@, attempting to set operating mode anyway", cf, 0xCu);
        }
      }
      if ((radio::OpMode::allowModeChange(*(radio::OpMode **)(v5 + 216)) & 1) != 0)
      {
        v15 = *(_QWORD *)(a1 + 72);
        v16 = *(unsigned __int8 *)(a1 + 80);
        v17 = *(const void **)(a1 + 56);
        if (v17)
        {
          v18 = _Block_copy(v17);
          v19 = *(NSObject **)(a1 + 64);
          v36 = v18;
          v37 = v19;
          if (!v19)
          {
LABEL_20:
            radio::QMICommandDriverBase::setOperatingModeUnconditionally(v5, v15, v16, (uint64_t)&v36);
            if (v19)
              dispatch_release(v19);
            if (v18)
              _Block_release(v18);
            goto LABEL_77;
          }
        }
        else
        {
          v18 = 0;
          v19 = *(NSObject **)(a1 + 64);
          v36 = 0;
          v37 = v19;
          if (!v19)
            goto LABEL_20;
        }
        dispatch_retain(v19);
        goto LABEL_20;
      }
      __p = operator new(0x38uLL);
      v41 = xmmword_1B3DCE3E0;
      strcpy((char *)__p, "setting operating mode while in factory test mode");
      CreateError();
      if (cf != a2)
      {
        v20 = *(const void **)a2;
        *(_QWORD *)a2 = *(_QWORD *)cf;
        *(_QWORD *)cf = 0;
        if (!v20)
          goto LABEL_29;
        CFRelease(v20);
      }
      if (*(_QWORD *)cf)
        CFRelease(*(CFTypeRef *)cf);
LABEL_29:
      if (SHIBYTE(v41) < 0)
      {
        operator delete(__p);
        v21 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          goto LABEL_45;
      }
      else
      {
        v21 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
LABEL_45:
          v25 = *(const void **)a2;
          if (!v25)
            goto LABEL_47;
          goto LABEL_46;
        }
      }
      v22 = v44;
      radio::OpMode::modeToString();
      if (v45 < 0)
        v22 = (void **)v44[0];
      radio::OpMode::getModeString(*(radio::OpMode **)(v5 + 216));
      radio::OpMode::getConfigString(*(radio::OpMode **)(v5 + 216));
      v23 = v42;
      if (v43 < 0)
        v23 = (void **)v42[0];
      if (v39 >= 0)
        v24 = &v38;
      else
        v24 = v38;
      *(_DWORD *)cf = 136446722;
      *(_QWORD *)&cf[4] = v22;
      *(_WORD *)&cf[12] = 2082;
      *(_QWORD *)&cf[14] = v23;
      *(_WORD *)&cf[22] = 2082;
      v49 = v24;
      _os_log_impl(&dword_1B3CB3000, v21, OS_LOG_TYPE_DEFAULT, "#I Rejecting operating mode change to %{public}s because current operating mode is %{public}s and protocol NV config is %{public}s", cf, 0x20u);
      if (v39 < 0)
      {
        operator delete(v38);
        if ((v43 & 0x80000000) == 0)
        {
LABEL_44:
          if ((v45 & 0x80000000) == 0)
            goto LABEL_45;
          goto LABEL_84;
        }
      }
      else if ((v43 & 0x80000000) == 0)
      {
        goto LABEL_44;
      }
      operator delete(v42[0]);
      if ((v45 & 0x80000000) == 0)
        goto LABEL_45;
LABEL_84:
      operator delete(v44[0]);
      v25 = *(const void **)a2;
      if (!v25)
      {
LABEL_47:
        v26 = *(const void **)(a1 + 56);
        if (v26)
          v27 = _Block_copy(v26);
        else
          v27 = 0;
        v28 = *(NSObject **)(a1 + 64);
        *(_QWORD *)cf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&cf[8] = 1174405120;
        *(_QWORD *)&cf[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
        v49 = &__block_descriptor_tmp_160;
        if (v27)
        {
          aBlock = _Block_copy(v27);
          v51 = v25;
          if (!v25)
            goto LABEL_55;
        }
        else
        {
          aBlock = 0;
          v51 = v25;
          if (!v25)
          {
LABEL_55:
            dispatch_async(v28, cf);
            if (v51)
              CFRelease(v51);
            if (aBlock)
              _Block_release(aBlock);
            if (v27)
              _Block_release(v27);
            if (v25)
              CFRelease(v25);
            goto LABEL_77;
          }
        }
        CFRetain(v25);
        goto LABEL_55;
      }
LABEL_46:
      CFRetain(v25);
      goto LABEL_47;
    }
  }
}

void sub_1B3D21F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverBase::setOperatingModeUnconditionally(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  unint64_t v7;
  void *v8;
  void **v9;
  __int128 v10;
  char *v11;
  char *v12;
  const void **v13;
  char *v14;
  _BYTE *v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[5];
  void *v40;
  dispatch_object_t object;
  void *v42;
  uint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  void *aBlock;
  void *__p[2];
  __int128 v49;
  _BYTE buf[24];
  void *v51;
  _QWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  v7 = a2 / 0xF4240;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getModeString(*(radio::OpMode **)(a1 + 216));
    radio::OpMode::modeToString();
    v8 = &v42;
    if (v45 < 0)
      v8 = v42;
    if ((SBYTE7(v49) & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v9;
    *(_WORD *)&buf[22] = 2048;
    v51 = (void *)v7;
    _os_log_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEFAULT, "#I Requesting operating mode change from %{public}s to %{public}s, with timeout %llu ms", buf, 0x20u);
    if (SBYTE7(v49) < 0)
    {
      operator delete(__p[0]);
      if ((v45 & 0x80000000) == 0)
        goto LABEL_9;
    }
    else if ((v45 & 0x80000000) == 0)
    {
      goto LABEL_9;
    }
    operator delete(v42);
  }
LABEL_9:
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v10;
  v49 = v10;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v11 = (char *)__p[1];
  v12 = (char *)v49;
  v13 = (const void **)__p[1];
  if (__p[1] != (void *)v49)
  {
    v13 = (const void **)__p[1];
    while (*((_BYTE *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v49)
        goto LABEL_17;
    }
  }
  if (v13 == (const void **)v49)
  {
LABEL_17:
    v16 = operator new(0x10uLL);
    v17 = v16;
    v16[4] = 1;
    *(_QWORD *)v16 = off_1E66D9358;
    if ((unint64_t)v12 < *((_QWORD *)&v49 + 1))
    {
      *(_QWORD *)v12 = v16;
      v18 = (uint64_t)(v12 + 8);
LABEL_30:
      v15 = (char *)v17 + 9;
      *(_QWORD *)&v49 = v18;
      goto LABEL_31;
    }
    v19 = v12 - v11;
    v20 = (v12 - v11) >> 3;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v22 = *((_QWORD *)&v49 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v49 + 1) - (_QWORD)v11) >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = operator new(8 * v23);
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = v17;
      v18 = (uint64_t)(v25 + 1);
      if (v11 == v12)
      {
LABEL_28:
        __p[1] = v25;
        *(_QWORD *)&v49 = v18;
        *((_QWORD *)&v49 + 1) = v26;
        if (!v11)
          goto LABEL_30;
LABEL_29:
        operator delete(v11);
        goto LABEL_30;
      }
    }
    else
    {
      v24 = 0;
      v25 = (_QWORD *)(8 * v20);
      v26 = 0;
      *(_QWORD *)(8 * v20) = v17;
      v18 = 8 * v20 + 8;
      if (v11 == v12)
        goto LABEL_28;
    }
    if ((unint64_t)(v19 - 8) < 0x58)
      goto LABEL_60;
    if ((unint64_t)(v11 - v24) < 0x20)
      goto LABEL_60;
    v31 = ((unint64_t)(v19 - 8) >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v12[-v32];
    v25 = (_QWORD *)((char *)v25 - v32);
    v34 = &v24[8 * v20 - 16];
    v35 = v12 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v12 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_60:
      do
      {
        v38 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v25 = v38;
      }
      while (v12 != v11);
    }
    v11 = (char *)__p[1];
    __p[1] = v25;
    *(_QWORD *)&v49 = v18;
    *((_QWORD *)&v49 + 1) = v26;
    if (!v11)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (!v14)
    __cxa_bad_cast();
  v15 = v14 + 9;
LABEL_31:
  *v15 = radio::OpMode::convertMode();
  v42 = (void *)(a1 + 288);
  v43 = QMIServiceMsg::create();
  v46 = 0;
  aBlock = 0;
  v44 = v7;
  v27 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 1174405120;
  v39[2] = ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_47_1;
  v39[4] = a1;
  v28 = *(void **)a4;
  if (*(_QWORD *)a4)
    v28 = _Block_copy(v28);
  v29 = *(NSObject **)(a4 + 8);
  v40 = v28;
  object = v29;
  if (v29)
    dispatch_retain(v29);
  *(_QWORD *)buf = v27;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm16SetOperatingMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v51 = &unk_1E66D9388;
  v52 = v39;
  v30 = _Block_copy(buf);
  aBlock = v30;
  if (v43)
  {
    qmi::Client::send();
    v30 = aBlock;
  }
  if (v30)
    _Block_release(v30);
  if (object)
    dispatch_release(object);
  if (v40)
    _Block_release(v40);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_1B3D22428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B3D224A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::getOperatingMode(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting operating mode", buf, 2u);
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_61;
  v8[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio20QMICommandDriverBase31setOperatingModeUnconditionallyEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(_QWORD *a1, qmi::ResponseBase *a2)
{
  uint64_t v4;
  tlv *TlvValue;
  int v6;
  CFTypeRef v7;
  char v8;
  const void *v9;
  void *v10;
  NSObject *v11;
  CFTypeRef cf[4];
  void *aBlock;
  CFTypeRef v14;

  v4 = a1[4];
  if (*((_DWORD *)a2 + 1) == 26)
  {
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    if (TlvValue || (TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2)) != 0)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v6, (const unsigned __int8 *)1);
      radio::OpMode::convertMode(*(radio::OpMode **)(v4 + 216));
      radio::CommandDriver::handleOperatingModeChanged_sync();
    }
    v7 = 0;
    v8 = 1;
    v9 = (const void *)a1[5];
    if (v9)
      goto LABEL_12;
LABEL_8:
    v10 = 0;
    goto LABEL_13;
  }
  radio::QMICommandDriverBase::checkError(v4, a2, "setting operating mode", cf);
  v7 = cf[0];
  if (cf[0])
  {
    CFRetain(cf[0]);
    v8 = 0;
    v9 = (const void *)a1[5];
    if (!v9)
      goto LABEL_8;
  }
  else
  {
    v8 = 1;
    v9 = (const void *)a1[5];
    if (!v9)
      goto LABEL_8;
  }
LABEL_12:
  v10 = _Block_copy(v9);
LABEL_13:
  v11 = a1[6];
  cf[0] = (CFTypeRef)MEMORY[0x1E0C809B0];
  cf[1] = (CFTypeRef)1174405120;
  cf[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  cf[3] = &__block_descriptor_tmp_160;
  if (!v10)
  {
    aBlock = 0;
    v14 = v7;
    if ((v8 & 1) != 0)
      goto LABEL_18;
    goto LABEL_17;
  }
  aBlock = _Block_copy(v10);
  v14 = v7;
  if ((v8 & 1) == 0)
LABEL_17:
    CFRetain(v7);
LABEL_18:
  dispatch_async(v11, cf);
  if (v14)
    CFRelease(v14);
  if (aBlock)
    _Block_release(aBlock);
  if (v10)
    _Block_release(v10);
  if ((v8 & 1) == 0)
  {
    CFRelease(v7);
    CFRelease(v7);
  }
}

void sub_1B3D22790(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 16, v2, v3);
  JUMPOUT(0x1B3D226C0);
}

void sub_1B3D227C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D227F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::setOperatingMode(uint64_t a1, int64_t a2, char a3, uint64_t a4)
{
  dispatch_time_t v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[8];
  std::__shared_weak_count *v23;
  char v24;
  _QWORD aBlock[5];
  const void *v26;
  std::__shared_weak_count_vtbl *v27;
  unint64_t v28;
  _QWORD v29[5];
  const void *v30;
  dispatch_object_t v31;

  v8 = dispatch_time(0, a2);
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x3802000000;
  v29[3] = __Block_byref_object_copy__5;
  v29[4] = __Block_byref_object_dispose__5;
  v30 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v31 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v9 = *(void **)a4;
  if (*(_QWORD *)a4)
    v9 = _Block_copy(v9);
  v10 = *(NSObject **)(a4 + 8);
  v30 = v9;
  v31 = v10;
  if (v10)
    dispatch_retain(v10);
  v27 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0xAAAAAAAAAAAAAAAALL;
  v11 = *(NSObject **)(a1 + 88);
  if (v11)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v12 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_1E66D8528;
  aBlock[4] = v29;
  v13 = _Block_copy(aBlock);
  v26 = v13;
  watchdog::create(&v27, v11, &v26, v8);
  if (v13)
    _Block_release(v13);
  if (v11)
    dispatch_release(v11);
  v22[0] = v12;
  v22[1] = 1174405120;
  v22[2] = ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v22[3] = &unk_1E66D8588;
  v22[5] = a1;
  v22[6] = a2;
  v24 = a3;
  v22[7] = v27;
  v23 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v14 = (unint64_t *)(v28 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v22[4] = v29;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v22);
  v16 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v20 = (unint64_t *)(v28 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Block_object_dispose(v29, 8);
  if (v31)
    dispatch_release(v31);
  if (v30)
    _Block_release(v30);
}

void sub_1B3D22A40(_Unwind_Exception *a1)
{
  NSObject *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  if (v3)
    _Block_release(v3);
  if (v1)
    dispatch_release(v1);
  _Block_object_dispose((const void *)(v4 - 136), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v2);
  _Unwind_Resume(a1);
}

void watchdog::create(std::__shared_weak_count_vtbl **a1, NSObject *a2, const void **a3, dispatch_time_t a4)
{
  std::__shared_weak_count_vtbl *v8;
  void *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;

  v8 = (std::__shared_weak_count_vtbl *)operator new(0x28uLL);
  if (a2)
    dispatch_retain(a2);
  if (!*a3)
  {
    v9 = 0;
    v8->~__shared_weak_count = 0;
    v8->~__shared_weak_count_0 = 0;
    v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))a2;
    if (!a2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = _Block_copy(*a3);
  v8->~__shared_weak_count = 0;
  v8->~__shared_weak_count_0 = 0;
  v8->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))a2;
  if (a2)
LABEL_5:
    dispatch_retain(a2);
LABEL_6:
  v8->__get_deleter = 0;
  v10 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, a2);
  v8->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
  dispatch_source_set_timer(v10, a4, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  dispatch_source_set_event_handler(v10, v9);
  dispatch_activate(v10);
  *a1 = v8;
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12 = v11;
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E66D9160;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v8;
  a1[1] = (std::__shared_weak_count_vtbl *)v11;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v8->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v8;
  v8->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v11;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v12);
    if (!v9)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (v9)
LABEL_18:
    _Block_release(v9);
LABEL_19:
  if (a2)
    dispatch_release(a2);
}

void sub_1B3D22C0C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog*)#1}::operator() const(watchdog*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D22C2C(_Unwind_Exception *a1)
{
  NSObject *v1;
  const void *v2;

  __cxa_end_catch();
  if (v2)
    _Block_release(v2);
  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  NSObject *v8;
  char __p[23];
  char v10;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v14;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v10 = 7;
  strcpy(__p, "timeout");
  CreateError();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v2 + 40) && *(_QWORD *)(v2 + 48))
  {
    CFRetain(cf);
    v3 = *(const void **)(v2 + 40);
    if (v3)
      v4 = _Block_copy(v3);
    else
      v4 = 0;
    v5 = *(NSObject **)(v2 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
    block[3] = &__block_descriptor_tmp_160;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      v14 = cf;
    }
    else
    {
      aBlock = 0;
      v14 = cf;
    }
    CFRetain(cf);
    dispatch_async(v5, block);
    if (v14)
      CFRelease(v14);
    if (aBlock)
      _Block_release(aBlock);
    if (v4)
      _Block_release(v4);
    CFRelease(cf);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(const void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;
    if (v7)
      _Block_release(v7);
    v8 = *(NSObject **)(v6 + 48);
    *(_QWORD *)(v6 + 48) = 0;
    if (v8)
      dispatch_release(v8);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3D22E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD aBlock[6];
  std::__shared_weak_count *v13;
  _QWORD v14[2];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned __int8 *)(a1 + 72);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  aBlock[3] = &unk_1E66D8550;
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  aBlock[5] = *(_QWORD *)(a1 + 56);
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v7 = _Block_copy(aBlock);
  v8 = *(NSObject **)(v1 + 88);
  if (v8)
    dispatch_retain(*(dispatch_object_t *)(v1 + 88));
  v14[0] = v7;
  v14[1] = v8;
  radio::QMICommandDriverBase::setOperatingMode_sync(v1, v2, v3, (uint64_t)v14);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B3D22F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)va);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase16setOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  _QWORD v11[4];
  void *aBlock;
  CFTypeRef cf;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(const void **)(v3 + 40);
  if (!v4 || !*(_QWORD *)(v3 + 48))
    return;
  v5 = *a2;
  if (*a2 && (CFRetain(*a2), (v4 = *(const void **)(v3 + 40)) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = *(NSObject **)(v3 + 48);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  v11[3] = &__block_descriptor_tmp_160;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    cf = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  cf = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, v11);
  if (cf)
    CFRelease(cf);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(const void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;
  if (v9)
    _Block_release(v9);
  v10 = *(NSObject **)(v8 + 48);
  *(_QWORD *)(v8 + 48) = 0;
  if (v10)
    dispatch_release(v10);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__110shared_ptrI8watchdogEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__110shared_ptrI8watchdogEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __copy_helper_block_e8_56c35_ZTSNSt3__110shared_ptrI8watchdogEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_56c35_ZTSNSt3__110shared_ptrI8watchdogEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void radio::QMICommandDriverBase::forceOperatingMode(uint64_t a1, int64_t a2, char a3, uint64_t a4)
{
  dispatch_time_t v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[8];
  std::__shared_weak_count *v23;
  char v24;
  _QWORD aBlock[5];
  const void *v26;
  std::__shared_weak_count_vtbl *v27;
  unint64_t v28;
  _QWORD v29[5];
  const void *v30;
  dispatch_object_t v31;

  v8 = dispatch_time(0, a2);
  v29[0] = 0;
  v29[1] = v29;
  v29[2] = 0x3802000000;
  v29[3] = __Block_byref_object_copy__5;
  v29[4] = __Block_byref_object_dispose__5;
  v30 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v31 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v9 = *(void **)a4;
  if (*(_QWORD *)a4)
    v9 = _Block_copy(v9);
  v10 = *(NSObject **)(a4 + 8);
  v30 = v9;
  v31 = v10;
  if (v10)
    dispatch_retain(v10);
  v27 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0xAAAAAAAAAAAAAAAALL;
  v11 = *(NSObject **)(a1 + 88);
  if (v11)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  v12 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_1E66D85C0;
  aBlock[4] = v29;
  v13 = _Block_copy(aBlock);
  v26 = v13;
  watchdog::create(&v27, v11, &v26, v8);
  if (v13)
    _Block_release(v13);
  if (v11)
    dispatch_release(v11);
  v22[0] = v12;
  v22[1] = 1174405120;
  v22[2] = ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v22[3] = &unk_1E66D8620;
  v22[5] = a1;
  v22[6] = a2;
  v24 = a3;
  v22[7] = v27;
  v23 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v14 = (unint64_t *)(v28 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v22[4] = v29;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v22);
  v16 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)v28;
  if (v28)
  {
    v20 = (unint64_t *)(v28 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Block_object_dispose(v29, 8);
  if (v31)
    dispatch_release(v31);
  if (v30)
    _Block_release(v30);
}

void sub_1B3D23410(_Unwind_Exception *a1)
{
  NSObject *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  if (v3)
    _Block_release(v3);
  if (v1)
    dispatch_release(v1);
  _Block_object_dispose((const void *)(v4 - 136), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v2);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  NSObject *v8;
  char __p[23];
  char v10;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v14;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v10 = 7;
  strcpy(__p, "timeout");
  CreateError();
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v2 + 40) && *(_QWORD *)(v2 + 48))
  {
    CFRetain(cf);
    v3 = *(const void **)(v2 + 40);
    if (v3)
      v4 = _Block_copy(v3);
    else
      v4 = 0;
    v5 = *(NSObject **)(v2 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
    block[3] = &__block_descriptor_tmp_160;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      v14 = cf;
    }
    else
    {
      aBlock = 0;
      v14 = cf;
    }
    CFRetain(cf);
    dispatch_async(v5, block);
    if (v14)
      CFRelease(v14);
    if (aBlock)
      _Block_release(aBlock);
    if (v4)
      _Block_release(v4);
    CFRelease(cf);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(const void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;
    if (v7)
      _Block_release(v7);
    v8 = *(NSObject **)(v6 + 48);
    *(_QWORD *)(v6 + 48) = 0;
    if (v8)
      dispatch_release(v8);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3D23610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD aBlock[6];
  std::__shared_weak_count *v13;
  _QWORD v14[2];

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(unsigned __int8 *)(a1 + 72);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  aBlock[3] = &unk_1E66D85E8;
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  aBlock[5] = *(_QWORD *)(a1 + 56);
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  aBlock[4] = *(_QWORD *)(a1 + 32);
  v7 = _Block_copy(aBlock);
  v8 = *(NSObject **)(v1 + 88);
  if (v8)
    dispatch_retain(*(dispatch_object_t *)(v1 + 88));
  v14[0] = v7;
  v14[1] = v8;
  radio::QMICommandDriverBase::setOperatingModeUnconditionally(v1, v2, v3, (uint64_t)v14);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B3D23760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)va);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase18forceOperatingModeEyNS_13OperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  _QWORD v11[4];
  void *aBlock;
  CFTypeRef cf;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(const void **)(v3 + 40);
  if (!v4 || !*(_QWORD *)(v3 + 48))
    return;
  v5 = *a2;
  if (*a2 && (CFRetain(*a2), (v4 = *(const void **)(v3 + 40)) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = *(NSObject **)(v3 + 48);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  v11[3] = &__block_descriptor_tmp_160;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    cf = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  cf = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, v11);
  if (cf)
    CFRelease(cf);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(const void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;
  if (v9)
    _Block_release(v9);
  v10 = *(NSObject **)(v8 + 48);
  *(_QWORD *)(v8 + 48) = 0;
  if (v10)
    dispatch_release(v10);
}

void ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *v9;
  dispatch_object_t object;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  _OWORD v16[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v3;
  v16[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
  v11 = v2 + 288;
  v12 = QMIServiceMsg::create();
  v13 = 25000;
  v14 = 0;
  v15 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_60_0;
  v8[4] = v2;
  v5 = (void *)a1[5];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a1[6];
  v9 = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm16GetOperatingMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D93E0;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v15 = v7;
  if (v12)
  {
    qmi::Client::send();
    v7 = v15;
  }
  if (v7)
    _Block_release(v7);
  if (object)
    dispatch_release(object);
  if (v9)
    _Block_release(v9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
}

void sub_1B3D23A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D23A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v4;
  CFMutableDictionaryRef v5;
  uint64_t (*v6)(uint64_t);
  CFMutableDictionaryRef Mutable;
  uint64_t v8;
  tlv *TlvValue;
  int v10;
  tlv *v11;
  tlv *v12;
  int v13;
  tlv *v14;
  CFTypeRef v15;
  const void *v16;
  void *v17;
  NSObject *v18;
  _QWORD v19[2];
  void (*v20)(uint64_t);
  void *v21;
  uint64_t v22;
  CFTypeRef cf;
  _QWORD v24[2];
  void (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  CFTypeRef v28;
  CFTypeRef v29;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v32;
  CFTypeRef v33;

  v4 = a1[4];
  v28 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v29 = 0;
  radio::QMICommandDriverBase::checkError(v4, a2, "getting operating mode", &v28);
  v5 = 0;
  if (v28)
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v6 = 0;
  if (!v6)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v5 = Mutable;
    if (Mutable)
      v29 = Mutable;
    v8 = MEMORY[0x1E0C809B0];
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 0x40000000;
    v25 = ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
    v26 = &__block_descriptor_tmp_57;
    v27 = v4;
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v11 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)2);
      LOWORD(block[0]) = *(_WORD *)v11;
      ((void (*)(_QWORD *, _QWORD *))v25)(v24, block);
    }
    v19[0] = v8;
    v19[1] = 1174405120;
    v20 = ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_58;
    v21 = &__block_descriptor_tmp_59_0;
    v22 = v4;
    cf = v5;
    if (v5)
      CFRetain(v5);
    v12 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v14 = v12;
    if (v12)
    {
      tlv::throwIfNotEnoughBytes(v12, (const unsigned __int8 *)v12 + v13, (const unsigned __int8 *)1);
      LOBYTE(block[0]) = *(_BYTE *)v14;
      ((void (*)(_QWORD *, _QWORD *))v20)(v19, block);
    }
    if (cf)
      CFRelease(cf);
  }
  if (a1[5] && a1[6])
  {
    v15 = v28;
    if (v28)
      CFRetain(v28);
    if (v5)
      CFRetain(v5);
    v16 = (const void *)a1[5];
    if (v16)
      v17 = _Block_copy(v16);
    else
      v17 = 0;
    v18 = a1[6];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
    block[3] = &__block_descriptor_tmp_163;
    if (v17)
    {
      aBlock = _Block_copy(v17);
      v32 = v15;
      if (!v15)
        goto LABEL_29;
    }
    else
    {
      aBlock = 0;
      v32 = v15;
      if (!v15)
      {
LABEL_29:
        v33 = v5;
        if (v5)
          CFRetain(v5);
        dispatch_async(v18, block);
        if (v33)
          CFRelease(v33);
        if (v32)
          CFRelease(v32);
        if (aBlock)
          _Block_release(aBlock);
        if (v17)
          _Block_release(v17);
        if (v5)
          CFRelease(v5);
        if (v15)
          CFRelease(v15);
        goto LABEL_43;
      }
    }
    CFRetain(v15);
    goto LABEL_29;
  }
LABEL_43:
  if (v28)
    CFRelease(v28);
  if (v29)
    CFRelease(v29);
}

void sub_1B3D23D30(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 1, v2, v3);
  JUMPOUT(0x1B3D23BBCLL);
}

void sub_1B3D23D60(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B3D23B40);
}

void sub_1B3D23D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  const void **v12;
  const void *v14;
  va_list va;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v12);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D23DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  void *p_p;
  void *__p;
  char v5;
  uint8_t buf[4];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  radio::OpMode::setConfig(*(radio::OpMode **)(v1 + 216));
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getConfigString(*(radio::OpMode **)(v1 + 216));
    if (v5 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v7 = p_p;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Got config: %s", buf, 0xCu);
    if (v5 < 0)
      operator delete(__p);
  }
}

void ___ZN5radio20QMICommandDriverBase16getOperatingModeEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_58(uint64_t a1)
{
  uint64_t v2;
  int Mode;
  NSObject *v4;
  void *p_p;
  void *__p;
  char v7;
  uint8_t buf[4];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  radio::OpMode::setMode(*(radio::OpMode **)(v2 + 216));
  Mode = radio::OpMode::getMode(*(radio::OpMode **)(v2 + 216));
  ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 40), (CFTypeRef)*MEMORY[0x1E0DDF9B0], Mode, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    radio::OpMode::getModeString(*(radio::OpMode **)(v2 + 216));
    if (v7 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315138;
    v9 = p_p;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Got mode: %s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p);
  }
}

void radio::QMICommandDriverBase::releaseResetDetect(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Releasing reset detect", buf, 2u);
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase18releaseResetDetectEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_65;
  v8[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio20QMICommandDriverBase18releaseResetDetectEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *v9;
  dispatch_object_t object;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  _OWORD v16[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v3;
  v16[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
  v11 = v2 + 320;
  v12 = QMIServiceMsg::create();
  v13 = 25000;
  v14 = 0;
  v15 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase18releaseResetDetectEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_64;
  v8[4] = v2;
  v5 = (void *)a1[5];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a1[6];
  v9 = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18ReleaseResetDetect8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9408;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v15 = v7;
  if (v12)
  {
    qmi::Client::send();
    v7 = v15;
  }
  if (v7)
    _Block_release(v7);
  if (object)
    dispatch_release(object);
  if (v9)
    _Block_release(v9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
}

void sub_1B3D241BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D241E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase18releaseResetDetectEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v11;

  v3 = a1[4];
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "releasing reset detect", &cf);
  v4 = (const void *)a1[5];
  if (!v4 || !a1[6])
    goto LABEL_20;
  v5 = cf;
  if (cf && (CFRetain(cf), (v4 = (const void *)a1[5]) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = a1[6];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  block[3] = &__block_descriptor_tmp_160;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    v11 = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v11 = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11)
    CFRelease(v11);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

void radio::QMICommandDriverBase::eraseNonvol(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Erasing baseband nonvolatile data", buf, 2u);
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase11eraseNonvolEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_72_0;
  v8[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio20QMICommandDriverBase11eraseNonvolEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  const void **v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[5];
  void *v33;
  dispatch_object_t object;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v3;
  v41 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
  v4 = (char *)*((_QWORD *)&v40 + 1);
  v5 = (char *)v41;
  v6 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    v6 = (const void **)*((_QWORD *)&v40 + 1);
    while (*((_BYTE *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v41)
        goto LABEL_9;
    }
  }
  if (v6 == (const void **)v41)
  {
LABEL_9:
    v9 = (char *)operator new(0x10uLL);
    v10 = v9;
    v9[8] = 1;
    *(_QWORD *)v9 = off_1E66D9450;
    *((_DWORD *)v9 + 3) = 0;
    v8 = v9 + 12;
    if ((unint64_t)v5 < *((_QWORD *)&v41 + 1))
    {
      *(_QWORD *)v5 = v9;
      *(_QWORD *)&v41 = v5 + 8;
      goto LABEL_23;
    }
    v11 = v5 - v4;
    v12 = (v5 - v4) >> 3;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v14 = *((_QWORD *)&v41 + 1) - (_QWORD)v4;
    if ((uint64_t)(*((_QWORD *)&v41 + 1) - (_QWORD)v4) >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v16 = operator new(8 * v15);
      v17 = &v16[8 * v12];
      v18 = &v16[8 * v15];
      *v17 = v10;
      v19 = (uint64_t)(v17 + 1);
      if (v4 == v5)
      {
LABEL_20:
        *((_QWORD *)&v40 + 1) = v17;
        *(_QWORD *)&v41 = v19;
        *((_QWORD *)&v41 + 1) = v18;
        if (!v4)
        {
LABEL_22:
          *(_QWORD *)&v41 = v19;
          goto LABEL_23;
        }
LABEL_21:
        operator delete(v4);
        goto LABEL_22;
      }
    }
    else
    {
      v16 = 0;
      v17 = (_QWORD *)(8 * v12);
      v18 = 0;
      *(_QWORD *)(8 * v12) = v10;
      v19 = 8 * v12 + 8;
      if (v4 == v5)
        goto LABEL_20;
    }
    if ((unint64_t)(v11 - 8) < 0x58)
      goto LABEL_50;
    if ((unint64_t)(v4 - v16) < 0x20)
      goto LABEL_50;
    v24 = ((unint64_t)(v11 - 8) >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v26 = &v5[-v25];
    v17 = (_QWORD *)((char *)v17 - v25);
    v27 = &v16[8 * v12 - 16];
    v28 = v5 - 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 4;
    }
    while (v29);
    v5 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_50:
      do
      {
        v31 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *--v17 = v31;
      }
      while (v5 != v4);
    }
    v4 = (char *)*((_QWORD *)&v40 + 1);
    *((_QWORD *)&v40 + 1) = v17;
    *(_QWORD *)&v41 = v19;
    *((_QWORD *)&v41 + 1) = v18;
    if (!v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v7)
    __cxa_bad_cast();
  v8 = v7 + 12;
LABEL_23:
  *v8 = 1;
  v35 = v2 + 320;
  v36 = QMIServiceMsg::create();
  v37 = 25000;
  v38 = 0;
  v39 = 0;
  v20 = MEMORY[0x1E0C809B0];
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 1174405120;
  v32[2] = ___ZN5radio20QMICommandDriverBase11eraseNonvolEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  v32[3] = &__block_descriptor_tmp_71;
  v32[4] = v2;
  v21 = (void *)a1[5];
  if (v21)
    v21 = _Block_copy(v21);
  v22 = a1[6];
  v33 = v21;
  object = v22;
  if (v22)
    dispatch_retain(v22);
  aBlock[0] = v20;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13EraseSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9480;
  aBlock[4] = v32;
  v23 = _Block_copy(aBlock);
  v39 = v23;
  if (v36)
  {
    qmi::Client::send();
    v23 = v39;
  }
  if (v23)
    _Block_release(v23);
  if (object)
    dispatch_release(object);
  if (v33)
    _Block_release(v33);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v40);
}

void sub_1B3D24770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D24794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D247AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase11eraseNonvolEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v11;

  v3 = a1[4];
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "erasing baseband nonvolatile data", &cf);
  v4 = (const void *)a1[5];
  if (!v4 || !a1[6])
    goto LABEL_20;
  v5 = cf;
  if (cf && (CFRetain(cf), (v4 = (const void *)a1[5]) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = a1[6];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  block[3] = &__block_descriptor_tmp_160;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    v11 = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v11 = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11)
    CFRelease(v11);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

void radio::QMICommandDriverBase::restoreNonvolDefaults(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Restoring baseband carrier defaults", buf, 2u);
  }
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase21restoreNonvolDefaultsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_76;
  v8[4] = a1;
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a2 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN5radio20QMICommandDriverBase21restoreNonvolDefaultsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *v9;
  dispatch_object_t object;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  _OWORD v16[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v3;
  v16[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v16);
  v11 = v2 + 320;
  v12 = QMIServiceMsg::create();
  v13 = 25000;
  v14 = 0;
  v15 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN5radio20QMICommandDriverBase21restoreNonvolDefaultsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v8[3] = &__block_descriptor_tmp_75_0;
  v8[4] = v2;
  v5 = (void *)a1[5];
  if (v5)
    v5 = _Block_copy(v5);
  v6 = a1[6];
  v9 = v5;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21RestoreCarrierNVItems8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D94A8;
  aBlock[4] = v8;
  v7 = _Block_copy(aBlock);
  v15 = v7;
  if (v12)
  {
    qmi::Client::send();
    v7 = v15;
  }
  if (v7)
    _Block_release(v7);
  if (object)
    dispatch_release(object);
  if (v9)
    _Block_release(v9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v16);
}

void sub_1B3D24B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v8);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D24B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase21restoreNonvolDefaultsEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v11;

  v3 = a1[4];
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  radio::QMICommandDriverBase::checkError(v3, a2, "restoring baseband carrier defaults", &cf);
  v4 = (const void *)a1[5];
  if (!v4 || !a1[6])
    goto LABEL_20;
  v5 = cf;
  if (cf && (CFRetain(cf), (v4 = (const void *)a1[5]) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = a1[6];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  block[3] = &__block_descriptor_tmp_160;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    v11 = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  v11 = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, block);
  if (v11)
    CFRelease(v11);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
LABEL_20:
  if (cf)
    CFRelease(cf);
}

CFTypeRef __copy_helper_block_e8_48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_48c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 48);
  if (v1)
    CFRelease(v1);
}

void radio::QMICommandDriverBase::getBasebandStatus(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting baseband status", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_93;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;
  void *v14;
  dispatch_object_t object;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v3;
  v21[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  v16 = v2 + 320;
  v17 = QMIServiceMsg::create();
  v18 = 25000;
  v19 = 0;
  v20 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_92;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v12[4] = v2;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)a1[7];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a1[8];
  v14 = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17GetBasebandStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D94F8;
  aBlock[4] = v12;
  v11 = _Block_copy(aBlock);
  v20 = v11;
  if (v17)
  {
    qmi::Client::send();
    v11 = v20;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v14)
    _Block_release(v14);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_1B3D24FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D2500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  tlv *TlvValue;
  int v13;
  tlv *v14;
  tlv *v15;
  int v16;
  tlv *v17;
  int v18;
  uint64_t v19;
  CFTypeRef v20;
  const void *v21;
  void *v22;
  NSObject *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t (*v27)(uint64_t, unsigned int *);
  void *v28;
  CFTypeRef cf;
  _QWORD v30[2];
  void (*v31)(uint64_t, uint64_t *);
  void *v32;
  CFTypeRef v33;
  CFMutableDictionaryRef v34;
  CFTypeRef v35;
  std::__shared_weak_count *v37;
  uint64_t block;
  uint64_t v39;
  void (*v40)(uint64_t);
  void *v41;
  void *aBlock;
  CFTypeRef v43;
  CFTypeRef v44;
  tlv *v45;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v37 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_56:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v35 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting baseband status", &v35);
      v34 = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v34 = Mutable;
      if (v35)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (!v10)
      {
        v11 = MEMORY[0x1E0C809B0];
        v30[0] = MEMORY[0x1E0C809B0];
        v30[1] = 1174405120;
        v31 = (void (*)(uint64_t, uint64_t *))___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        v32 = &__block_descriptor_tmp_88_0;
        v33 = Mutable;
        if (Mutable)
          CFRetain(Mutable);
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v14 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v13, (const unsigned __int8 *)1);
          LOBYTE(block) = *(_BYTE *)v14;
          v31((uint64_t)v30, &block);
        }
        v26[0] = v11;
        v26[1] = 1174405120;
        v27 = ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_89;
        v28 = &__block_descriptor_tmp_91_0;
        cf = v9;
        if (v9)
          CFRetain(v9);
        v15 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v17 = v15;
        if (v15)
        {
          v18 = v16;
          v45 = v15;
          block = tlv::parseV<bsp::tlv::abm::SleepManagerStats>(&v45, v16);
          v39 = v19;
          if (v45)
            v27((uint64_t)v26, (unsigned int *)&block);
          else
            ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 17, v17, v18);
        }
        if (cf)
          CFRelease(cf);
        if (v33)
          CFRelease(v33);
      }
      if (!a1[7] || !a1[8])
      {
LABEL_52:
        if (v9)
          CFRelease(v9);
        if (v35)
          CFRelease(v35);
        goto LABEL_56;
      }
      v20 = v35;
      if (v35)
        CFRetain(v35);
      if (v9)
        CFRetain(v9);
      v21 = (const void *)a1[7];
      if (v21)
        v22 = _Block_copy(v21);
      else
        v22 = 0;
      v23 = a1[8];
      block = MEMORY[0x1E0C809B0];
      v39 = 1174405120;
      v40 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      v41 = &__block_descriptor_tmp_163;
      if (v22)
      {
        aBlock = _Block_copy(v22);
        v43 = v20;
        if (!v20)
          goto LABEL_38;
      }
      else
      {
        aBlock = 0;
        v43 = v20;
        if (!v20)
        {
LABEL_38:
          v44 = v9;
          if (v9)
            CFRetain(v9);
          dispatch_async(v23, &block);
          if (v44)
            CFRelease(v44);
          if (v43)
            CFRelease(v43);
          if (aBlock)
            _Block_release(aBlock);
          if (v22)
            _Block_release(v22);
          if (v9)
            CFRelease(v9);
          if (v20)
            CFRelease(v20);
          goto LABEL_52;
        }
      }
      CFRetain(v20);
      goto LABEL_38;
    }
  }
}

void sub_1B3D253C4(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 16, v2, v3);
  JUMPOUT(0x1B3D25168);
}

void sub_1B3D253F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  const void **v11;
  const void *v13;
  va_list va;
  const void *v15;
  va_list va1;
  va_list va2;

  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v15 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v11);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B3D25440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, _BYTE *a2)
{
  ctu::cf::insert<__CFString const*,BOOL>(*(CFMutableDictionaryRef *)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF7B8], *a2 != 0);
}

uint64_t ___ZN5radio20QMICommandDriverBase17getBasebandStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_89(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v4;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ctu::cf::insert<__CFString const*,unsigned char>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF808], *(unsigned __int8 *)a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF830], a2[1], v4);
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF860], a2[2], v4);
  return ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF870], a2[3], v4);
}

void radio::QMICommandDriverBase::getBasebandFWVersion(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting baseband firmware version", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_98;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;
  void *v14;
  dispatch_object_t object;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v3;
  v21[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  v16 = v2 + 288;
  v17 = QMIServiceMsg::create();
  v18 = 25000;
  v19 = 0;
  v20 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_97_0;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v12[4] = v2;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)a1[7];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a1[8];
  v14 = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm20GetBasebandFWVersion8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9520;
  aBlock[4] = v12;
  v11 = _Block_copy(aBlock);
  v20 = v11;
  if (v17)
  {
    qmi::Client::send();
    v11 = v20;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v14)
    _Block_release(v14);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_1B3D257F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D25824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t (*v10)(uint64_t);
  uint64_t TlvValue;
  int v12;
  CFTypeRef v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[2];
  void (*v20)(uint64_t, uint64_t *);
  void *v21;
  CFTypeRef cf;
  CFMutableDictionaryRef v23;
  CFTypeRef v24;
  std::__shared_weak_count *v26;
  void *__p;
  uint64_t v28;
  void (*v29)(uint64_t);
  void *v30;
  void *aBlock;
  CFTypeRef v32;
  CFTypeRef v33;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v26 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_49:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v24 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting baseband firmware version", &v24);
      v23 = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v23 = Mutable;
      if (v24)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (!v10)
      {
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 1174405120;
        v20 = ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        v21 = &__block_descriptor_tmp_96;
        cf = Mutable;
        if (Mutable)
          CFRetain(Mutable);
        TlvValue = qmi::MessageBase::findTlvValue(a2);
        if (TlvValue)
        {
          __p = 0;
          v28 = 0;
          v29 = 0;
          std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, TlvValue, (char *)(TlvValue + v12), v12);
          v20((uint64_t)v19, (uint64_t *)&__p);
          if (SHIBYTE(v29) < 0)
            operator delete(__p);
        }
        if (cf)
          CFRelease(cf);
      }
      if (!a1[7] || !a1[8])
      {
LABEL_45:
        if (v9)
          CFRelease(v9);
        if (v24)
          CFRelease(v24);
        goto LABEL_49;
      }
      v13 = v24;
      if (v24)
        CFRetain(v24);
      if (v9)
        CFRetain(v9);
      v14 = (const void *)a1[7];
      if (v14)
        v15 = _Block_copy(v14);
      else
        v15 = 0;
      v16 = a1[8];
      __p = (void *)MEMORY[0x1E0C809B0];
      v28 = 1174405120;
      v29 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      v30 = &__block_descriptor_tmp_163;
      if (v15)
      {
        aBlock = _Block_copy(v15);
        v32 = v13;
        if (!v13)
          goto LABEL_31;
      }
      else
      {
        aBlock = 0;
        v32 = v13;
        if (!v13)
        {
LABEL_31:
          v33 = v9;
          if (v9)
            CFRetain(v9);
          dispatch_async(v16, &__p);
          if (v33)
            CFRelease(v33);
          if (v32)
            CFRelease(v32);
          if (aBlock)
            _Block_release(aBlock);
          if (v15)
            _Block_release(v15);
          if (v9)
            CFRelease(v9);
          if (v13)
            CFRelease(v13);
          goto LABEL_45;
        }
      }
      CFRetain(v13);
      goto LABEL_31;
    }
  }
}

void sub_1B3D25B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, const void *a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a14);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a15);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1B3D25BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase20getBasebandFWVersionEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t *v3;
  std::string::size_type v4;
  std::string *p_p;
  std::string *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::value_type *v10;
  __int128 *v11;
  std::string::size_type *v12;
  unint64_t v13;
  __int128 v14;
  std::string::value_type v15;
  char v16;
  std::string::size_type size;
  std::string *v18;
  _BYTE *v19;
  std::string::size_type v20;
  std::string::size_type v22;
  void *p_dst;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string __p;
  std::string __dst;

  memset(&__p, 170, sizeof(__p));
  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = a2[1];
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_p = (std::string *)operator new(v8 + 1);
    __p.__r_.__value_.__l.__size_ = v4;
    __p.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v4;
    p_p = &__p;
    if (!v4)
    {
      v7 = &__p;
      goto LABEL_22;
    }
  }
  if (v4 < 0x20 || (unint64_t)((char *)p_p - (char *)v3) < 0x20)
  {
    v7 = p_p;
    v10 = (std::string::value_type *)v3;
  }
  else
  {
    v7 = (std::string *)((char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0));
    v10 = (char *)v3 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (__int128 *)(v3 + 2);
    v12 = &p_p->__r_.__value_.__r.__words[2];
    v13 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v14 = *v11;
      *((_OWORD *)v12 - 1) = *(v11 - 1);
      *(_OWORD *)v12 = v14;
      v11 += 2;
      v12 += 4;
      v13 -= 32;
    }
    while (v13);
    if (v4 == (v4 & 0x7FFFFFFFFFFFFFE0))
      goto LABEL_22;
  }
  do
  {
    v15 = *v10++;
    v7->__r_.__value_.__s.__data_[0] = v15;
    v7 = (std::string *)((char *)v7 + 1);
  }
  while (v10 != (char *)v3 + v4);
LABEL_22:
  v7->__r_.__value_.__s.__data_[0] = 0;
  v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size >= 2)
  {
    v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v19 = memchr((char *)&v18->__r_.__value_.__l.__data_ + 1, 32, size - 1);
    v20 = v19 - (_BYTE *)v18;
    if (v19 && v20 != -1)
    {
      if (size >= v20)
        v22 = v19 - (_BYTE *)v18;
      else
        v22 = size;
      if (v22 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v22 >= 0x17)
      {
        v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v22 | 7) != 0x17)
          v25 = v22 | 7;
        v26 = v25 + 1;
        p_dst = operator new(v25 + 1);
        __dst.__r_.__value_.__l.__size_ = v22;
        __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
        p_dst = &__dst;
        if (!v22)
        {
          __dst.__r_.__value_.__s.__data_[0] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_40:
            __p = __dst;
            v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            goto LABEL_41;
          }
LABEL_53:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_40;
        }
      }
      memmove(p_dst, v18, v22);
      *((_BYTE *)p_dst + v22) = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_53;
    }
  }
LABEL_41:
  v24 = *(_QWORD *)(a1 + 32);
  if (v16 < 0)
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  ctu::cf::insert<__CFString const*,std::string>(v24, (CFTypeRef)*MEMORY[0x1E0DDF9A0]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_48:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_48;
}

void sub_1B3D25E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverBase::getFactoryCalibrationStatus(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting factory calibration status", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_104_0;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;
  void *v14;
  dispatch_object_t object;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v3;
  v21[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  v16 = v2 + 320;
  v17 = QMIServiceMsg::create();
  v18 = 25000;
  v19 = 0;
  v20 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_103_0;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v12[4] = v2;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)a1[7];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a1[8];
  v14 = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm27GetFactoryCalibrationStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9548;
  aBlock[4] = v12;
  v11 = _Block_copy(aBlock);
  v20 = v11;
  if (v17)
  {
    qmi::Client::send();
    v11 = v20;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v14)
    _Block_release(v14);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_1B3D261C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D261F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  const void *v12;
  void *v13;
  uint64_t (*v14)(uint64_t);
  tlv *TlvValue;
  int v16;
  tlv *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[2];
  uint64_t (*v22)(uint64_t, unsigned __int8 *);
  void *v23;
  CFTypeRef v24;
  CFMutableDictionaryRef v25;
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v31;
  CFTypeRef v32;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v28 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_51:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting factory calibration status", &cf);
      v25 = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v25 = Mutable;
      if (cf)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (!v10)
      {
        v14 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
        if (!Mutable)
          v14 = 0;
        if (v14)
        {
          v21[0] = MEMORY[0x1E0C809B0];
          v21[1] = 1174405120;
          v22 = ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
          v23 = &__block_descriptor_tmp_102;
          v24 = Mutable;
          if (Mutable)
            CFRetain(Mutable);
          TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
          v17 = TlvValue;
          if (TlvValue)
          {
            tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v16, (const unsigned __int8 *)1);
            LOBYTE(block[0]) = *(_BYTE *)v17;
            v22((uint64_t)v21, (unsigned __int8 *)block);
          }
          if (v24)
            CFRelease(v24);
        }
      }
      if (!a1[7] || !a1[8])
      {
LABEL_47:
        if (v9)
          CFRelease(v9);
        if (cf)
          CFRelease(cf);
        goto LABEL_51;
      }
      v11 = cf;
      if (cf)
        CFRetain(cf);
      if (v9)
        CFRetain(v9);
      v12 = (const void *)a1[7];
      if (v12)
        v13 = _Block_copy(v12);
      else
        v13 = 0;
      v18 = a1[8];
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      block[3] = &__block_descriptor_tmp_163;
      if (v13)
      {
        aBlock = _Block_copy(v13);
        v31 = v11;
        if (!v11)
          goto LABEL_33;
      }
      else
      {
        aBlock = 0;
        v31 = v11;
        if (!v11)
        {
LABEL_33:
          v32 = v9;
          if (v9)
            CFRetain(v9);
          dispatch_async(v18, block);
          if (v32)
            CFRelease(v32);
          if (v31)
            CFRelease(v31);
          if (aBlock)
            _Block_release(aBlock);
          if (v13)
            _Block_release(v13);
          if (v9)
            CFRelease(v9);
          if (v11)
            CFRelease(v11);
          goto LABEL_47;
        }
      }
      CFRetain(v11);
      goto LABEL_33;
    }
  }
}

void sub_1B3D264D8(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 1, v2, v3);
  JUMPOUT(0x1B3D2639CLL);
}

void sub_1B3D26538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  const void **v6;
  const void *v8;
  va_list va;
  const void *v10;
  va_list va1;
  va_list va2;

  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v10 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v6);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B3D26574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio20QMICommandDriverBase27getFactoryCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, unsigned __int8 *a2)
{
  return ctu::cf::insert<__CFString const*,int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDFA30], *a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
}

void radio::QMICommandDriverBase::getRFCalibrationStatus(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting RF calibration status", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_125_0;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;
  void *v14;
  dispatch_object_t object;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v3;
  v21[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  v16 = v2 + 320;
  v17 = QMIServiceMsg::create();
  v18 = 25000;
  v19 = 0;
  v20 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_124;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v12[4] = v2;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)a1[7];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a1[8];
  v14 = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22GetRFCalibrationStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9570;
  aBlock[4] = v12;
  v11 = _Block_copy(aBlock);
  v20 = v11;
  if (v17)
  {
    qmi::Client::send();
    v11 = v20;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v14)
    _Block_release(v14);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_1B3D2688C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D268BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t (*v10)(uint64_t);
  CFTypeRef v11;
  const void *v12;
  void *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  tlv *TlvValue;
  int v17;
  tlv *v18;
  tlv *v19;
  int v20;
  tlv *v21;
  const unsigned __int8 *v22;
  int v23;
  tlv *v24;
  int v25;
  tlv *v26;
  const unsigned __int8 *v27;
  uint64_t v28;
  tlv *v29;
  int v30;
  tlv *v31;
  const unsigned __int8 *v32;
  uint64_t v33;
  tlv *v34;
  int v35;
  tlv *v36;
  const unsigned __int8 *v37;
  uint64_t v38;
  tlv *v39;
  int v40;
  unint64_t *v41;
  const unsigned __int8 *v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _QWORD v48[2];
  void (*v49)(uint64_t, uint64_t *);
  void *v50;
  CFTypeRef cf;
  _QWORD v52[2];
  uint64_t (*v53)(uint64_t, unsigned int *);
  void *v54;
  CFTypeRef v55;
  _QWORD v56[2];
  uint64_t (*v57)(uint64_t, unsigned int *);
  void *v58;
  CFTypeRef v59;
  _QWORD v60[2];
  uint64_t (*v61)(uint64_t, unsigned int *);
  void *v62;
  CFTypeRef v63;
  _QWORD v64[2];
  void (*v65)(uint64_t, unsigned __int16 *);
  void *v66;
  CFTypeRef v67;
  _QWORD v68[2];
  void (*v69)(uint64_t, unsigned __int8 *);
  void *v70;
  CFTypeRef v71;
  CFMutableDictionaryRef v72;
  CFTypeRef v73;
  std::__shared_weak_count *v75;
  unint64_t block;
  uint64_t v77;
  void (*v78)(uint64_t);
  void *v79;
  void *v80;
  CFTypeRef v81;
  CFMutableDictionaryRef v82;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v75 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_81:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v47 = __ldaxr(p_shared_owners);
        while (__stlxr(v47 - 1, p_shared_owners));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v73 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting RF calibration status", &v73);
      v72 = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v72 = Mutable;
      if (v73)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (!v10)
      {
        v14 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
        if (!Mutable)
          v14 = 0;
        if (v14)
        {
          v15 = MEMORY[0x1E0C809B0];
          v68[0] = MEMORY[0x1E0C809B0];
          v68[1] = 1174405120;
          v69 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
          v70 = &__block_descriptor_tmp_108;
          v71 = Mutable;
          if (Mutable)
            CFRetain(Mutable);
          TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
          v18 = TlvValue;
          if (TlvValue)
          {
            tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v17, (const unsigned __int8 *)1);
            LOBYTE(block) = *(_BYTE *)v18;
            v69((uint64_t)v68, (unsigned __int8 *)&block);
          }
          v64[0] = v15;
          v64[1] = 1174405120;
          v65 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_109;
          v66 = &__block_descriptor_tmp_111_0;
          v67 = v9;
          if (v9)
            CFRetain(v9);
          v19 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          v21 = v19;
          if (v19)
          {
            v22 = (const unsigned __int8 *)v19 + v20;
            tlv::throwIfNotEnoughBytes(v19, v22, (const unsigned __int8 *)2);
            v23 = *(unsigned __int16 *)v21;
            tlv::throwIfNotEnoughBytes((tlv *)((char *)v21 + 2), v22, (const unsigned __int8 *)2);
            LODWORD(block) = v23 | (*((unsigned __int16 *)v21 + 1) << 16);
            v65((uint64_t)v64, (unsigned __int16 *)&block);
          }
          v60[0] = v15;
          v60[1] = 1174405120;
          v61 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_112;
          v62 = &__block_descriptor_tmp_114;
          v63 = v9;
          if (v9)
            CFRetain(v9);
          v24 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          v26 = v24;
          if (v24)
          {
            v27 = (const unsigned __int8 *)v24 + v25;
            tlv::throwIfNotEnoughBytes(v24, v27, (const unsigned __int8 *)4);
            v28 = *(unsigned int *)v26;
            tlv::throwIfNotEnoughBytes((tlv *)((char *)v26 + 4), v27, (const unsigned __int8 *)4);
            block = v28 | ((unint64_t)*((unsigned int *)v26 + 1) << 32);
            v61((uint64_t)v60, (unsigned int *)&block);
          }
          v56[0] = v15;
          v56[1] = 1174405120;
          v57 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_115;
          v58 = &__block_descriptor_tmp_117_0;
          v59 = v9;
          if (v9)
            CFRetain(v9);
          v29 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          v31 = v29;
          if (v29)
          {
            v32 = (const unsigned __int8 *)v29 + v30;
            tlv::throwIfNotEnoughBytes(v29, v32, (const unsigned __int8 *)4);
            v33 = *(unsigned int *)v31;
            tlv::throwIfNotEnoughBytes((tlv *)((char *)v31 + 4), v32, (const unsigned __int8 *)4);
            block = v33 | ((unint64_t)*((unsigned int *)v31 + 1) << 32);
            v57((uint64_t)v56, (unsigned int *)&block);
          }
          v52[0] = v15;
          v52[1] = 1174405120;
          v53 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_118;
          v54 = &__block_descriptor_tmp_120;
          v55 = v9;
          if (v9)
            CFRetain(v9);
          v34 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          v36 = v34;
          if (v34)
          {
            v37 = (const unsigned __int8 *)v34 + v35;
            tlv::throwIfNotEnoughBytes(v34, v37, (const unsigned __int8 *)4);
            v38 = *(unsigned int *)v36;
            tlv::throwIfNotEnoughBytes((tlv *)((char *)v36 + 4), v37, (const unsigned __int8 *)4);
            block = v38 | ((unint64_t)*((unsigned int *)v36 + 1) << 32);
            v53((uint64_t)v52, (unsigned int *)&block);
          }
          v48[0] = v15;
          v48[1] = 1174405120;
          v49 = ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_121;
          v50 = &__block_descriptor_tmp_123;
          cf = v9;
          if (v9)
            CFRetain(v9);
          v39 = (tlv *)qmi::MessageBase::findTlvValue(a2);
          v41 = (unint64_t *)v39;
          if (v39)
          {
            v42 = (const unsigned __int8 *)v39 + v40;
            tlv::throwIfNotEnoughBytes(v39, v42, (const unsigned __int8 *)8);
            v43 = *v41;
            tlv::throwIfNotEnoughBytes((tlv *)(v41 + 1), v42, (const unsigned __int8 *)8);
            v44 = v41[1];
            block = v43;
            v77 = v44;
            v49((uint64_t)v48, (uint64_t *)&block);
          }
          if (cf)
            CFRelease(cf);
          if (v55)
            CFRelease(v55);
          if (v59)
            CFRelease(v59);
          if (v63)
            CFRelease(v63);
          if (v67)
            CFRelease(v67);
          if (v71)
            CFRelease(v71);
        }
      }
      if (!a1[7] || !a1[8])
      {
LABEL_77:
        if (v9)
          CFRelease(v9);
        if (v73)
          CFRelease(v73);
        goto LABEL_81;
      }
      v11 = v73;
      if (v73)
        CFRetain(v73);
      if (v9)
        CFRetain(v9);
      v12 = (const void *)a1[7];
      if (v12)
        v13 = _Block_copy(v12);
      else
        v13 = 0;
      v45 = a1[8];
      block = MEMORY[0x1E0C809B0];
      v77 = 1174405120;
      v78 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      v79 = &__block_descriptor_tmp_163;
      if (v13)
      {
        v80 = _Block_copy(v13);
        v81 = v11;
        if (!v11)
          goto LABEL_63;
      }
      else
      {
        v80 = 0;
        v81 = v11;
        if (!v11)
        {
LABEL_63:
          v82 = v9;
          if (v9)
            CFRetain(v9);
          dispatch_async(v45, &block);
          if (v82)
            CFRelease(v82);
          if (v81)
            CFRelease(v81);
          if (v80)
            _Block_release(v80);
          if (v13)
            _Block_release(v13);
          if (v9)
            CFRelease(v9);
          if (v11)
            CFRelease(v11);
          goto LABEL_77;
        }
      }
      CFRetain(v11);
      goto LABEL_63;
    }
  }
}

void sub_1B3D26ED8(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 1, v2, v3);
  JUMPOUT(0x1B3D26A6CLL);
}

void sub_1B3D26F38(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 7, v2, v3);
  JUMPOUT(0x1B3D26D30);
}

void sub_1B3D26F64(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 6, v2, v3);
  JUMPOUT(0x1B3D26CA0);
}

void sub_1B3D26F90(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 5, v2, v3);
  JUMPOUT(0x1B3D26C14);
}

void sub_1B3D26FBC(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 4, v2, v3);
  JUMPOUT(0x1B3D26B88);
}

void sub_1B3D26FE8(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 3, v2, v3);
  JUMPOUT(0x1B3D26AFCLL);
}

void sub_1B3D27014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  uint64_t v35;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a35);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 - 192));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v35 - 184));
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v35 - 176);
  _Unwind_Resume(a1);
}

void sub_1B3D270B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, unsigned __int8 *a2)
{
  ctu::cf::insert<__CFString const*,BOOL>(*(CFMutableDictionaryRef *)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDFA40], *a2 == 1);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_109(uint64_t a1, unsigned __int16 *a2)
{
  const __CFAllocator *v4;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ctu::cf::insert<__CFString const*,unsigned short>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF9E0], *a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  ctu::cf::insert<__CFString const*,unsigned short>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF9C0], a2[1], v4);
}

uint64_t ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_112(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v4;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF9F8], *a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  return ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF9D0], a2[1], v4);
}

uint64_t ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_115(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v4;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDFA18], *a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  return ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF9F0], a2[1], v4);
}

uint64_t ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_118(uint64_t a1, unsigned int *a2)
{
  const __CFAllocator *v4;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDFA38], *a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  return ctu::cf::insert<__CFString const*,unsigned int>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDFA10], a2[1], v4);
}

void ___ZN5radio20QMICommandDriverBase22getRFCalibrationStatusEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_121(uint64_t a1, uint64_t *a2)
{
  const __CFAllocator *v4;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ctu::cf::insert<__CFString const*,long long>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF9E8], *a2, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  ctu::cf::insert<__CFString const*,long long>(*(__CFDictionary **)(a1 + 32), (CFTypeRef)*MEMORY[0x1E0DDF9C8], a2[1], v4);
}

void radio::QMICommandDriverBase::getWakeReason(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  void *aBlock;
  dispatch_object_t object;
  uint8_t buf[16];

  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Getting Baseband wake reason", buf, 2u);
  }
  v6 = a1[9];
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_134;
  v16[4] = a1;
  v16[5] = v6;
  v17 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = *(void **)a2;
  if (*(_QWORD *)a2)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a2 + 8);
  aBlock = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(a1 + 9, (uint64_t)v16);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::__shared_weak_count::__release_weak(v8);
}

void ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[6];
  std::__shared_weak_count *v13;
  void *v14;
  dispatch_object_t object;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  _OWORD v21[2];
  _QWORD aBlock[5];

  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[0] = v3;
  v21[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v21);
  v16 = v2 + 320;
  v17 = QMIServiceMsg::create();
  v18 = 25000;
  v19 = 0;
  v20 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v12[3] = &__block_descriptor_tmp_133_0;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  v12[4] = v2;
  v12[5] = v6;
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)a1[7];
  if (v9)
    v9 = _Block_copy(v9);
  v10 = a1[8];
  v14 = v9;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v4;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13GetWakeReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9598;
  aBlock[4] = v12;
  v11 = _Block_copy(aBlock);
  v20 = v11;
  if (v17)
  {
    qmi::Client::send();
    v11 = v20;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v14)
    _Block_release(v14);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v21);
}

void sub_1B3D275D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v23);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Unwind_Resume(a1);
}

void sub_1B3D27604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  tlv *TlvValue;
  int v13;
  tlv *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  char *__p;
  _QWORD v23[7];
  CFTypeRef v24;
  _QWORD v25[2];
  uint64_t (*v26)(uint64_t, _DWORD *, uint64_t, uint64_t, const __CFAllocator *);
  void *v27;
  _QWORD *v28;
  CFTypeRef v29;
  _QWORD v30[3];
  int v31;
  CFMutableDictionaryRef v32;
  CFTypeRef cf;
  std::__shared_weak_count *v35;
  uint64_t block;
  uint64_t p_block;
  uint64_t v38;
  void *v39;
  void *v40;
  CFTypeRef v41;
  CFMutableDictionaryRef v42;
  _QWORD *v43;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v35 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_59:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      radio::QMICommandDriverBase::checkError(v5, a2, "getting wake reason", &cf);
      v32 = 0;
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = Mutable;
      if (Mutable)
        v32 = Mutable;
      if (cf)
        v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v10 = 0;
      if (v10)
      {
        if (!a1[7])
          goto LABEL_55;
      }
      else
      {
        block = 0;
        p_block = (uint64_t)&block;
        v38 = 0x2000000000;
        LOBYTE(v39) = 0;
        v30[0] = 0;
        v30[1] = v30;
        v30[2] = 0x2000000000;
        v31 = 0;
        v11 = MEMORY[0x1E0C809B0];
        v25[0] = MEMORY[0x1E0C809B0];
        v25[1] = 1174405120;
        v26 = ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3;
        v27 = &unk_1E66D8C20;
        v28 = v30;
        v29 = Mutable;
        if (Mutable)
          CFRetain(Mutable);
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v14 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v13, (const unsigned __int8 *)4);
          LODWORD(v43) = *(_DWORD *)v14;
          ((void (*)(_QWORD *, _QWORD **))v26)(v25, &v43);
        }
        v23[0] = v11;
        v23[1] = 1174405120;
        v23[2] = ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_130;
        v23[3] = &unk_1E66D8C58;
        v23[6] = v5;
        v24 = v9;
        if (v9)
          CFRetain(v9);
        v23[4] = v30;
        v23[5] = &block;
        v43 = v23;
        qmi::MessageBase::applyTlv<bsp::tlv::abm::WakeBuffer,void({block_pointer}&)(bsp::tlv::abm::WakeBuffer const&)>(a2, 19, (uint64_t)&v43);
        if (*(_BYTE *)(p_block + 24))
        {
          __p = (char *)operator new(0x20uLL);
          strcpy(__p, "Null wake data from baseband");
          CreateError();
          v15 = cf;
          cf = v43;
          v43 = 0;
          if (v15)
          {
            CFRelease(v15);
            if (v43)
              CFRelease(v43);
          }
          operator delete(__p);
        }
        if (v24)
          CFRelease(v24);
        if (v29)
          CFRelease(v29);
        _Block_object_dispose(v30, 8);
        _Block_object_dispose(&block, 8);
        if (!a1[7])
          goto LABEL_55;
      }
      if (!a1[8])
      {
LABEL_55:
        if (v9)
          CFRelease(v9);
        if (cf)
          CFRelease(cf);
        goto LABEL_59;
      }
      v16 = cf;
      if (cf)
        CFRetain(cf);
      if (v9)
        CFRetain(v9);
      v17 = (const void *)a1[7];
      if (v17)
        v18 = _Block_copy(v17);
      else
        v18 = 0;
      v19 = a1[8];
      block = MEMORY[0x1E0C809B0];
      p_block = 1174405120;
      v38 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_1;
      v39 = &__block_descriptor_tmp_163;
      if (v18)
      {
        v40 = _Block_copy(v18);
        v41 = v16;
        if (!v16)
          goto LABEL_41;
      }
      else
      {
        v40 = 0;
        v41 = v16;
        if (!v16)
        {
LABEL_41:
          v42 = v9;
          if (v9)
            CFRetain(v9);
          dispatch_async(v19, &block);
          if (v42)
            CFRelease(v42);
          if (v41)
            CFRelease(v41);
          if (v40)
            _Block_release(v40);
          if (v18)
            _Block_release(v18);
          if (v9)
            CFRelease(v9);
          if (v16)
            CFRelease(v16);
          goto LABEL_55;
        }
      }
      CFRetain(v16);
      goto LABEL_41;
    }
  }
}

void sub_1B3D27A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,const void *a34,const void *a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a15 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 + 56));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a29);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v36 - 160), 8);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a34);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a35);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v36 - 176);
  _Unwind_Resume(a1);
}

void sub_1B3D27AF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

uint64_t ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_3(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  __CFDictionary *v5;

  v5 = *(__CFDictionary **)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return ctu::cf::insert<char const*,unsigned int>(v5, (const __CFString **)"kKeyBasebandWakeChannel", *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), (const __CFAllocator *)*MEMORY[0x1E0C9AE00], a5);
}

void ___ZN5radio20QMICommandDriverBase13getWakeReasonEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_130(uint64_t a1)
{
  const __CFAllocator *v2;
  unsigned int v3;
  BOOL v4;
  int v5;

  ctu::cf::convert_copy();
  ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 56), (const __CFString **)"kKeyBasebandWakeData", 0, *MEMORY[0x1E0C9AE00], v2);
  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  v4 = v3 > 0xD;
  v5 = (1 << v3) & 0x2410;
  if (!v4 && v5 != 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
}

void sub_1B3D27CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D27CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D27CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

CFTypeRef __copy_helper_block_e8_56c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_56c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 56);
  if (v1)
    CFRelease(v1);
}

void radio::QMICommandDriverBase::dumpLogsIndState_sync(radio::QMICommandDriverBase *this, char a2)
{
  __int128 v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  _BYTE *v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  char v45;
  char *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  __int128 v54;
  _QWORD aBlock[5];

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = v4;
  v54 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v53);
  v5 = (char *)*((_QWORD *)&v53 + 1);
  v6 = (char *)v54;
  v7 = (const void **)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1) != (_QWORD)v54)
  {
    v7 = (const void **)*((_QWORD *)&v53 + 1);
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v54)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v54)
  {
LABEL_9:
    v10 = operator new(0x10uLL);
    v11 = v10;
    v10[4] = 1;
    *(_QWORD *)v10 = off_1E66D95E0;
    if ((unint64_t)v6 < *((_QWORD *)&v54 + 1))
    {
      *(_QWORD *)v6 = v10;
      v12 = (uint64_t)(v6 + 8);
LABEL_22:
      v9 = (char *)v11 + 9;
      *(_QWORD *)&v54 = v12;
      goto LABEL_23;
    }
    v13 = v6 - v5;
    v14 = (v6 - v5) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v54 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v54 + 1) - (_QWORD)v5) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v11;
      v12 = (uint64_t)(v19 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((_QWORD *)&v53 + 1) = v19;
        *(_QWORD *)&v54 = v12;
        *((_QWORD *)&v54 + 1) = v20;
        if (!v5)
          goto LABEL_22;
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v11;
      v12 = 8 * v14 + 8;
      if (v5 == v6)
        goto LABEL_20;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_57;
    if ((unint64_t)(v5 - v18) < 0x20)
      goto LABEL_57;
    v35 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v6[-v36];
    v19 = (_QWORD *)((char *)v19 - v36);
    v38 = &v18[8 * v14 - 16];
    v39 = v6 - 16;
    v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 32;
      v40 -= 4;
    }
    while (v40);
    v6 = v37;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v42 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v19 = v42;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v53 + 1);
    *((_QWORD *)&v53 + 1) = v19;
    *(_QWORD *)&v54 = v12;
    *((_QWORD *)&v54 + 1) = v20;
    if (!v5)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = v8 + 9;
LABEL_23:
  *v9 = a2;
  v22 = *((_QWORD *)this + 9);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v51 = v22;
  if (!v21 || (v23 = std::__shared_weak_count::lock(v21), (v52 = v23) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  v46 = (char *)this + 320;
  v47 = QMIServiceMsg::create();
  v48 = 25000;
  v49 = 0;
  v50 = 0;
  v25 = MEMORY[0x1E0C809B0];
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 1174405120;
  v43[2] = ___ZN5radio20QMICommandDriverBase21dumpLogsIndState_syncEb_block_invoke_2;
  v43[3] = &__block_descriptor_tmp_141_0;
  v43[4] = this;
  v43[5] = v22;
  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  v44 = v24;
  do
    v27 = __ldxr(p_shared_owners);
  while (__stxr(v27 + 1, p_shared_owners));
  v45 = a2;
  aBlock[0] = v25;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm8DumpLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9610;
  aBlock[4] = v43;
  v28 = _Block_copy(aBlock);
  v50 = v28;
  if (v47)
  {
    qmi::Client::send();
    v28 = v50;
  }
  if (v28)
    _Block_release(v28);
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v52;
  if (v52)
  {
    v33 = (unint64_t *)&v52->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v53);
}

void sub_1B3D28104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;
  uint64_t v20;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v18 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v10);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va2);
  _Unwind_Resume(a1);
}

void sub_1B3D2813C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D28150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase21dumpLogsIndState_syncEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a2 + 4))
      v5 = "Failure";
    else
      v5 = "Success";
    v6 = "Enable";
    if (!*(_BYTE *)(a1 + 56))
      v6 = "Disable";
    v7 = 136315394;
    v8 = v5;
    v9 = 2080;
    v10 = v6;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s DumpLogs indication", (uint8_t *)&v7, 0x16u);
  }
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIN5radio13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void radio::QMICommandDriverBase::enableDumpLogsInd(radio::QMICommandDriverBase *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio20QMICommandDriverBase17enableDumpLogsIndEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_142_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio20QMICommandDriverBase17enableDumpLogsIndEv_block_invoke(uint64_t a1)
{
  radio::QMICommandDriverBase::dumpLogsIndState_sync(*(radio::QMICommandDriverBase **)(a1 + 32), 1);
}

void radio::QMICommandDriverBase::disableDumpLogsInd(radio::QMICommandDriverBase *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio20QMICommandDriverBase18disableDumpLogsIndEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_143_0;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio20QMICommandDriverBase18disableDumpLogsIndEv_block_invoke(uint64_t a1)
{
  radio::QMICommandDriverBase::dumpLogsIndState_sync(*(radio::QMICommandDriverBase **)(a1 + 32), 0);
}

void radio::QMICommandDriverBase::simTestCommand(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  unint64_t v18;
  _QWORD v19[5];
  std::string __p;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v7 = *(_QWORD *)(a1 + 72);
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v6 = (uint64_t *)(a1 + 72);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v19[2] = ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke;
  v19[3] = &__block_descriptor_tmp_150_0;
  v19[4] = a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v16 = *(void **)a3;
  if (*(_QWORD *)a3)
    v16 = _Block_copy(v16);
  v17 = *(NSObject **)(a3 + 8);
  aBlock = v16;
  object = v17;
  if (v17)
    dispatch_retain(v17);
  v23 = v7;
  v24 = v11;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped(v6, (uint64_t)v19);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1B3D28510(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  char **v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  const void *v29;
  void *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  unint64_t *p_shared_weak_owners;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  void *v38;
  NSObject *v39;
  _QWORD v40[6];
  std::__shared_weak_count *v41;
  std::string v42;
  void *v43;
  dispatch_object_t object;
  CFTypeRef cf;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[2];
  char *(*v51)(char *, char **);
  void *v52;
  std::string v53;
  void *__p[2];
  __int128 v55;
  char *v56;
  __int128 v57;
  uint64_t aBlock;
  uint64_t v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  CFTypeRef v63;
  CFTypeRef v64;

  if (*(char *)(a1 + 63) < 0)
  {
    if (*(_QWORD *)(a1 + 48))
    {
LABEL_3:
      v2 = *(_QWORD *)(a1 + 32);
      v3 = (_OWORD *)(a1 + 40);
      *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v4;
      v55 = v4;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      v50[0] = MEMORY[0x1E0C809B0];
      v50[1] = 1174405120;
      v51 = ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke_2;
      v52 = &__block_descriptor_tmp_146;
      if (*(char *)(a1 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *v3;
        v53.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
      }
      v5 = (char *)__p[1];
      v6 = (char *)v55;
      v7 = (const void **)__p[1];
      if (__p[1] != (void *)v55)
      {
        v7 = (const void **)__p[1];
        while (*((_BYTE *)*v7 + 8) != 1)
        {
          if (++v7 == (const void **)v55)
            goto LABEL_16;
        }
      }
      if (v7 != (const void **)v55)
      {
        if (!v8)
          __cxa_bad_cast();
        v9 = (char **)(v8 + 16);
        goto LABEL_43;
      }
LABEL_16:
      v10 = operator new(0x28uLL);
      v11 = v10;
      v10[8] = 1;
      *(_QWORD *)v10 = &off_1E66D9688;
      *((_QWORD *)v10 + 2) = 0;
      v9 = (char **)(v10 + 16);
      *((_QWORD *)v10 + 3) = 0;
      *((_QWORD *)v10 + 4) = 0;
      if ((unint64_t)v6 < *((_QWORD *)&v55 + 1))
      {
        *(_QWORD *)v6 = v10;
        *(_QWORD *)&v55 = v6 + 8;
LABEL_43:
        v51((char *)v50, v9);
        cf = (CFTypeRef)(v2 + 320);
        v46 = QMIServiceMsg::create();
        v47 = 25000;
        v48 = 0;
        v49 = 0;
        v31 = MEMORY[0x1E0C809B0];
        v40[0] = MEMORY[0x1E0C809B0];
        v40[1] = 1174405120;
        v40[2] = ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke_147;
        v40[3] = &__block_descriptor_tmp_149_0;
        v33 = *(_QWORD *)(a1 + 80);
        v32 = *(std::__shared_weak_count **)(a1 + 88);
        v40[4] = v2;
        v40[5] = v33;
        v41 = v32;
        if (v32)
        {
          p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
          do
            v35 = __ldxr(p_shared_weak_owners);
          while (__stxr(v35 + 1, p_shared_weak_owners));
        }
        if (*(char *)(a1 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *v3;
          v42.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
        }
        v36 = *(void **)(a1 + 64);
        if (v36)
          v36 = _Block_copy(v36);
        v37 = *(NSObject **)(a1 + 72);
        v43 = v36;
        object = v37;
        if (v37)
          dispatch_retain(v37);
        aBlock = v31;
        v59 = 0x40000000;
        v60 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15SendTestCommand8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v61 = &unk_1E66D96B8;
        v62 = v40;
        v38 = _Block_copy(&aBlock);
        v49 = v38;
        if (v46)
        {
          qmi::Client::send();
          v38 = v49;
        }
        if (v38)
          _Block_release(v38);
        if (object)
          dispatch_release(object);
        if (v43)
          _Block_release(v43);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (v41)
          std::__shared_weak_count::__release_weak(v41);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        return;
      }
      v12 = v6 - v5;
      v13 = (v6 - v5) >> 3;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v15 = *((_QWORD *)&v55 + 1) - (_QWORD)v5;
      if ((uint64_t)(*((_QWORD *)&v55 + 1) - (_QWORD)v5) >> 2 > v14)
        v14 = v15 >> 2;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        if (v16 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v17 = operator new(8 * v16);
        v18 = &v17[8 * v13];
        v19 = &v17[8 * v16];
        *v18 = v11;
        v20 = (uint64_t)(v18 + 1);
        if (v5 != v6)
        {
LABEL_27:
          if ((unint64_t)(v12 - 8) < 0x58)
            goto LABEL_87;
          if ((unint64_t)(v5 - v17) < 0x20)
            goto LABEL_87;
          v21 = ((unint64_t)(v12 - 8) >> 3) + 1;
          v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
          v23 = &v6[-v22];
          v18 = (_QWORD *)((char *)v18 - v22);
          v24 = &v17[8 * v13 - 16];
          v25 = v6 - 16;
          v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 4;
          }
          while (v26);
          v6 = v23;
          if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_87:
            do
            {
              v28 = *((_QWORD *)v6 - 1);
              v6 -= 8;
              *--v18 = v28;
            }
            while (v6 != v5);
          }
          v5 = (char *)__p[1];
          __p[1] = v18;
          *(_QWORD *)&v55 = v20;
          *((_QWORD *)&v55 + 1) = v19;
          if (!v5)
            goto LABEL_42;
          goto LABEL_41;
        }
      }
      else
      {
        v17 = 0;
        v18 = (_QWORD *)(8 * v13);
        v19 = 0;
        *(_QWORD *)(8 * v13) = v11;
        v20 = 8 * v13 + 8;
        if (v5 != v6)
          goto LABEL_27;
      }
      __p[1] = v18;
      *(_QWORD *)&v55 = v20;
      *((_QWORD *)&v55 + 1) = v19;
      if (!v5)
      {
LABEL_42:
        *(_QWORD *)&v55 = v20;
        goto LABEL_43;
      }
LABEL_41:
      operator delete(v5);
      goto LABEL_42;
    }
  }
  else if (*(_BYTE *)(a1 + 63))
  {
    goto LABEL_3;
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v56 = (char *)operator new(0x20uLL);
  v57 = xmmword_1B3DCB3D0;
  strcpy(v56, "Invalid SIM test command");
  CreateError();
  operator delete(v56);
  if (*(_QWORD *)(a1 + 64) && *(_QWORD *)(a1 + 72))
  {
    CFRetain(cf);
    v29 = *(const void **)(a1 + 64);
    if (v29)
      v30 = _Block_copy(v29);
    else
      v30 = 0;
    v39 = *(NSObject **)(a1 + 72);
    aBlock = MEMORY[0x1E0C809B0];
    v59 = 1174405120;
    v60 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
    v61 = &__block_descriptor_tmp_175;
    if (v30)
    {
      v62 = _Block_copy(v30);
      v63 = cf;
    }
    else
    {
      v62 = 0;
      v63 = cf;
    }
    CFRetain(cf);
    v64 = 0;
    dispatch_async(v39, &aBlock);
    if (v64)
      CFRelease(v64);
    if (v63)
      CFRelease(v63);
    if (v62)
      _Block_release(v62);
    if (v30)
      _Block_release(v30);
    CFRelease(cf);
  }
  CFRelease(cf);
}

void sub_1B3D28ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a24);
  if (a38 < 0)
    operator delete(__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a39);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ___ZN5radio20QMICommandDriverBase14simTestCommandENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENSC_IK14__CFDictionaryEEEEE_block_invoke_147(uint64_t a1, const qmi::ResponseBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  size_t v9;
  unint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t (*v17)(uint64_t);
  NSObject *v18;
  const void *v19;
  CFTypeRef v20;
  void *v21;
  NSObject *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  CFTypeRef cf;
  std::__shared_weak_count *v27;
  _BYTE __p[32];
  void *aBlock;
  CFTypeRef v30;
  CFTypeRef v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    v27 = v6;
    if (v6)
    {
      v7 = v6;
      if (!*(_QWORD *)(a1 + 40))
      {
LABEL_57:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      v8 = *(char *)(a1 + 79);
      if (v8 >= 0)
        v9 = *(unsigned __int8 *)(a1 + 79);
      else
        v9 = *(_QWORD *)(a1 + 64);
      v10 = v9 + 26;
      memset(__p, 170, 24);
      if (v9 + 26 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v11 = (_QWORD *)(a1 + 56);
      if (v10 > 0x16)
      {
        v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17)
          v13 = v10 | 7;
        *(_QWORD *)&__p[8] = v9 + 26;
        *(_QWORD *)&__p[16] = (v13 + 1) | 0x8000000000000000;
        *(_QWORD *)__p = operator new(v13 + 1);
        qmemcpy(*(void **)__p, "sending SIM test command: ", 26);
        v12 = (_BYTE *)(*(_QWORD *)__p + 26);
        if (!v9)
        {
LABEL_17:
          v12[v9] = 0;
          if (__p[23] >= 0)
            v15 = __p;
          else
            v15 = *(const char **)__p;
          radio::QMICommandDriverBase::checkError(v5, a2, v15, &cf);
          if ((__p[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)__p);
            if (cf)
              v17 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v17 = 0;
            if (v17)
              goto LABEL_34;
          }
          else
          {
            if (cf)
              v16 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            else
              v16 = 0;
            if (v16)
              goto LABEL_34;
          }
          v18 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a1 + 79) < 0)
              v11 = (_QWORD *)*v11;
            *(_DWORD *)__p = 136315138;
            *(_QWORD *)&__p[4] = v11;
            _os_log_impl(&dword_1B3CB3000, v18, OS_LOG_TYPE_DEFAULT, "#I SIM test command: %s successful", __p, 0xCu);
          }
LABEL_34:
          v19 = *(const void **)(a1 + 80);
          if (!v19 || !*(_QWORD *)(a1 + 88))
          {
LABEL_55:
            if (cf)
              CFRelease(cf);
            goto LABEL_57;
          }
          v20 = cf;
          if (cf && (CFRetain(cf), (v19 = *(const void **)(a1 + 80)) == 0))
            v21 = 0;
          else
            v21 = _Block_copy(v19);
          v22 = *(NSObject **)(a1 + 88);
          *(_QWORD *)__p = MEMORY[0x1E0C809B0];
          *(_QWORD *)&__p[8] = 1174405120;
          *(_QWORD *)&__p[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0;
          *(_QWORD *)&__p[24] = &__block_descriptor_tmp_175;
          if (v21)
          {
            aBlock = _Block_copy(v21);
            v30 = v20;
            if (!v20)
              goto LABEL_45;
          }
          else
          {
            aBlock = 0;
            v30 = v20;
            if (!v20)
            {
LABEL_45:
              v31 = 0;
              dispatch_async(v22, __p);
              if (v31)
                CFRelease(v31);
              if (v30)
                CFRelease(v30);
              if (aBlock)
                _Block_release(aBlock);
              if (v21)
                _Block_release(v21);
              if (v20)
                CFRelease(v20);
              goto LABEL_55;
            }
          }
          CFRetain(v20);
          goto LABEL_45;
        }
      }
      else
      {
        qmemcpy(__p, "sending SIM test command: ", 26);
        v12 = &__p[26];
      }
      if (v8 >= 0)
        v14 = (_QWORD *)(a1 + 56);
      else
        v14 = (_QWORD *)*v11;
      memmove(v12, v14, v9);
      goto LABEL_17;
    }
  }
}

void sub_1B3D2914C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  void *v9;
  NSObject *v10;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  v9 = *(void **)(a2 + 80);
  if (v9)
    v9 = _Block_copy(v9);
  v10 = *(NSObject **)(a2 + 88);
  a1[10] = v9;
  a1[11] = v10;
  if (v10)
    dispatch_retain(v10);
}

void sub_1B3D29240(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 88);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 80);
  if (v3)
    _Block_release(v3);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v4 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v4)
      return;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
LABEL_7:
    std::__shared_weak_count::__release_weak(v4);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE80c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = (std::string *)(a1 + 5);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v6 = *(void **)(a2 + 64);
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  v6 = *(void **)(a2 + 64);
  if (v6)
LABEL_5:
    v6 = _Block_copy(v6);
LABEL_6:
  v7 = *(NSObject **)(a2 + 72);
  a1[8] = v6;
  a1[9] = v7;
  if (v7)
    dispatch_retain(v7);
  v8 = *(_QWORD *)(a2 + 88);
  a1[10] = *(_QWORD *)(a2 + 80);
  a1[11] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c103_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEE80c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  const void *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 72);
  if (v3)
    dispatch_release(v3);
  v4 = *(const void **)(a1 + 64);
  if (v4)
    _Block_release(v4);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void radio::QMICommandDriverBase::getFirmwareNonce(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::getPkHash(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::getPersParams(uint64_t a1, uint64_t a2)
{
  void *p_p;
  NSObject *v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  NSObject *v9;
  void *__p;
  __int128 v11;
  __int128 block;
  void (*v13)(uint64_t);
  void *v14;
  void *aBlock;
  xpc_object_t v16;
  xpc_object_t object;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  p_p = operator new(0x20uLL);
  __p = p_p;
  v11 = xmmword_1B3DCE3F0;
  strcpy((char *)p_p, "Unsupported cmd: getPersParams");
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = p_p;
    _os_log_error_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (SHIBYTE(v11) < 0)
      p_p = __p;
    else
      p_p = &__p;
  }
  v6 = xpc_string_create((const char *)p_p);
  if (!v6)
    v6 = xpc_null_create();
  v7 = xpc_null_create();
  if (*(_QWORD *)a2)
    v8 = _Block_copy(*(const void **)a2);
  else
    v8 = 0;
  v9 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  v13 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
  v14 = &__block_descriptor_tmp_177;
  if (v8)
  {
    aBlock = _Block_copy(v8);
    v16 = v6;
    if (v6)
      goto LABEL_9;
LABEL_12:
    v16 = xpc_null_create();
    object = v7;
    if (v7)
      goto LABEL_10;
    goto LABEL_13;
  }
  aBlock = 0;
  v16 = v6;
  if (!v6)
    goto LABEL_12;
LABEL_9:
  xpc_retain(v6);
  object = v7;
  if (v7)
  {
LABEL_10:
    xpc_retain(v7);
    goto LABEL_14;
  }
LABEL_13:
  object = xpc_null_create();
LABEL_14:
  dispatch_async(v9, &block);
  xpc_release(object);
  object = 0;
  xpc_release(v16);
  v16 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v8)
    _Block_release(v8);
  xpc_release(v7);
  xpc_release(v6);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
}

void sub_1B3D298DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::getFirmwareInfo(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t radio::QMICommandDriverBase::mapManifestStatus(radio::QMICommandDriverBase *this, int a2)
{
  unsigned int v2;

  if (a2 == 1)
    v2 = 1;
  else
    v2 = 2;
  if (a2)
    return v2;
  else
    return 0;
}

void radio::QMICommandDriverBase::getManifestStatus(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::getManifest(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  void *v13;
  NSObject *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t *v21;
  NSObject *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *(const void **)a2;
    if (*(_QWORD *)a2)
      goto LABEL_9;
LABEL_12:
    v13 = 0;
    v14 = *(NSObject **)(a2 + 8);
    if (!v14)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_12;
LABEL_9:
  v13 = _Block_copy(v12);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
  {
LABEL_13:
    dispatch_retain(v14);
    goto LABEL_14;
  }
  do
LABEL_14:
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (std::__shared_weak_count *)a1[10];
  if (!v16 || (v17 = a1[9], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v20 = operator new(0x28uLL);
  *v20 = a1;
  v20[1] = v13;
  v20[2] = v14;
  v20[3] = v5;
  v20[4] = v7;
  v21 = (unint64_t *)&v19->__shared_owners_;
  v22 = a1[11];
  do
    v23 = __ldxr(v21);
  while (__stxr(v23 + 1, v21));
  v24 = operator new(0x18uLL);
  *v24 = v20;
  v24[1] = v17;
  v24[2] = v19;
  dispatch_async_f(v22, v24, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v25 = __ldaxr(v21);
  while (__stlxr(v25 - 1, v21));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::setRegionCode(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "setRegionCode";
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMICommandDriverBase::screenState(radio::QMICommandDriverBase *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _BYTE *v17;
  unint64_t *v18;
  NSObject *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v13 || (v14 = *((_QWORD *)this + 9), (v15 = std::__shared_weak_count::lock(v13)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v16 = v15;
  v17 = operator new(0x20uLL);
  *(_QWORD *)v17 = this;
  v17[8] = a2;
  *((_QWORD *)v17 + 2) = v5;
  *((_QWORD *)v17 + 3) = v7;
  v18 = (unint64_t *)&v16->__shared_owners_;
  v19 = *((_QWORD *)this + 11);
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  v21 = operator new(0x18uLL);
  *v21 = v17;
  v21[1] = v14;
  v21[2] = v16;
  dispatch_async_f(v19, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::screenState(BOOL)::$_0>(radio::QMICommandDriverBase::screenState(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::screenState(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::screenState(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v22 = __ldaxr(v18);
  while (__stlxr(v22 - 1, v18));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::forceNetworkSearch(radio::QMICommandDriverBase *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    v2 = 136315138;
    v3 = "forceNetworkSearch";
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D %s: not supported!", (uint8_t *)&v2, 0xCu);
  }
}

void radio::QMICommandDriverBase::getRFSelfTestNonce(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  const char *p_p;
  xpc_object_t v7;
  xpc_object_t v8;
  void *v9;
  NSObject *v10;
  void *__p;
  __int128 v12;
  __int128 block;
  void (*v14)(uint64_t);
  void *v15;
  void *aBlock;
  xpc_object_t v17;
  xpc_object_t object;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = operator new(0x28uLL);
  __p = v4;
  v12 = xmmword_1B3DCE400;
  strcpy((char *)v4, "Get RF Self Test none: not supported!");
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = v4;
    _os_log_error_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (!*(_QWORD *)a2)
      goto LABEL_24;
  }
  else if (!*(_QWORD *)a2)
  {
    goto LABEL_24;
  }
  if (!*(_QWORD *)(a2 + 8))
    goto LABEL_24;
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v7 = xpc_string_create(p_p);
  if (!v7)
    v7 = xpc_null_create();
  v8 = xpc_null_create();
  if (*(_QWORD *)a2)
    v9 = _Block_copy(*(const void **)a2);
  else
    v9 = 0;
  v10 = *(NSObject **)(a2 + 8);
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
  v15 = &__block_descriptor_tmp_177;
  if (v9)
  {
    aBlock = _Block_copy(v9);
    v17 = v7;
    if (v7)
      goto LABEL_14;
LABEL_17:
    v17 = xpc_null_create();
    object = v8;
    if (v8)
      goto LABEL_15;
LABEL_18:
    object = xpc_null_create();
    goto LABEL_19;
  }
  aBlock = 0;
  v17 = v7;
  if (!v7)
    goto LABEL_17;
LABEL_14:
  xpc_retain(v7);
  object = v8;
  if (!v8)
    goto LABEL_18;
LABEL_15:
  xpc_retain(v8);
LABEL_19:
  dispatch_async(v10, &block);
  xpc_release(object);
  object = 0;
  xpc_release(v17);
  v17 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  xpc_release(v8);
  xpc_release(v7);
LABEL_24:
  if (SHIBYTE(v12) < 0)
    operator delete(__p);
}

void sub_1B3D2A2E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void radio::QMICommandDriverBase::setRFSelfTestTicket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  CFTypeRef v10;
  std::string __p;
  CFTypeRef cf;
  __int128 block;
  void (*v14)(uint64_t);
  void *v15;
  void *aBlock;
  CFTypeRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x28uLL);
  strcpy(v5, "Set RF Self Test Ticket: not supported!");
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = v5;
    _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (!*(_QWORD *)a3)
      goto LABEL_22;
  }
  else if (!*(_QWORD *)a3)
  {
    goto LABEL_22;
  }
  if (!*(_QWORD *)(a3 + 8))
    goto LABEL_22;
  std::string::__init_copy_ctor_external(&__p, v5, 0x27uLL);
  CreateError();
  if (*(_QWORD *)a3)
    v7 = _Block_copy(*(const void **)a3);
  else
    v7 = 0;
  v8 = *(NSObject **)(a3 + 8);
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  v15 = &__block_descriptor_tmp_160;
  if (v7)
  {
    v9 = _Block_copy(v7);
    v10 = cf;
    aBlock = v9;
    v17 = cf;
    if (!cf)
      goto LABEL_12;
    goto LABEL_11;
  }
  v10 = cf;
  aBlock = 0;
  v17 = cf;
  if (cf)
LABEL_11:
    CFRetain(v10);
LABEL_12:
  dispatch_async(v8, &block);
  if (v17)
    CFRelease(v17);
  if (aBlock)
    _Block_release(aBlock);
  if (v7)
    _Block_release(v7);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_22:
  operator delete(v5);
}

void sub_1B3D2A524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverBase::prepareRFSelfTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  CFTypeRef v10;
  std::string __p;
  CFTypeRef cf;
  __int128 block;
  void (*v14)(uint64_t);
  void *v15;
  void *aBlock;
  CFTypeRef v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (char *)operator new(0x38uLL);
  strcpy(v5, "Prepare baseband for RF Self Test: not supported!");
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LODWORD(block) = 136315138;
    *(_QWORD *)((char *)&block + 4) = v5;
    _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    if (!*(_QWORD *)a3)
      goto LABEL_22;
  }
  else if (!*(_QWORD *)a3)
  {
    goto LABEL_22;
  }
  if (!*(_QWORD *)(a3 + 8))
    goto LABEL_22;
  std::string::__init_copy_ctor_external(&__p, v5, 0x31uLL);
  CreateError();
  if (*(_QWORD *)a3)
    v7 = _Block_copy(*(const void **)a3);
  else
    v7 = 0;
  v8 = *(NSObject **)(a3 + 8);
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  v14 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2;
  v15 = &__block_descriptor_tmp_160;
  if (v7)
  {
    v9 = _Block_copy(v7);
    v10 = cf;
    aBlock = v9;
    v17 = cf;
    if (!cf)
      goto LABEL_12;
    goto LABEL_11;
  }
  v10 = cf;
  aBlock = 0;
  v17 = cf;
  if (cf)
LABEL_11:
    CFRetain(v10);
LABEL_12:
  dispatch_async(v8, &block);
  if (v17)
    CFRelease(v17);
  if (aBlock)
    _Block_release(aBlock);
  if (v7)
    _Block_release(v7);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_22:
  operator delete(v5);
}

void sub_1B3D2A754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void radio::QMICommandDriverBase::setBreadMode(radio::QMICommandDriverBase *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _BYTE *v17;
  unint64_t *v18;
  NSObject *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v13 || (v14 = *((_QWORD *)this + 9), (v15 = std::__shared_weak_count::lock(v13)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v16 = v15;
  v17 = operator new(0x20uLL);
  *(_QWORD *)v17 = this;
  v17[8] = a2;
  *((_QWORD *)v17 + 2) = v5;
  *((_QWORD *)v17 + 3) = v7;
  v18 = (unint64_t *)&v16->__shared_owners_;
  v19 = *((_QWORD *)this + 11);
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  v21 = operator new(0x18uLL);
  *v21 = v17;
  v21[1] = v14;
  v21[2] = v16;
  dispatch_async_f(v19, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0>(radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v22 = __ldaxr(v18);
  while (__stlxr(v22 - 1, v18));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::setButterMode(radio::QMICommandDriverBase *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _BYTE *v17;
  unint64_t *v18;
  NSObject *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v13 || (v14 = *((_QWORD *)this + 9), (v15 = std::__shared_weak_count::lock(v13)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v16 = v15;
  v17 = operator new(0x20uLL);
  *(_QWORD *)v17 = this;
  v17[8] = a2;
  *((_QWORD *)v17 + 2) = v5;
  *((_QWORD *)v17 + 3) = v7;
  v18 = (unint64_t *)&v16->__shared_owners_;
  v19 = *((_QWORD *)this + 11);
  do
    v20 = __ldxr(v18);
  while (__stxr(v20 + 1, v18));
  v21 = operator new(0x18uLL);
  *v21 = v17;
  v21[1] = v14;
  v21[2] = v16;
  dispatch_async_f(v19, v21, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0>(radio::QMICommandDriverBase::setButterMode(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v22 = __ldaxr(v18);
  while (__stlxr(v22 - 1, v18));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void radio::QMICommandDriverBase::sendVisitInfo(radio::QMICommandDriverBase *this, unsigned int a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v4 || (v7 = *((_QWORD *)this + 9), (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15 || (v16 = *((_QWORD *)this + 9), (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v19 = operator new(0x20uLL);
  *v19 = this;
  v19[1] = v7;
  v19[2] = v9;
  v19[3] = a2 | (unint64_t)(a3 << 32);
  v20 = *((_QWORD *)this + 11);
  v21 = (unint64_t *)&v18->__shared_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v23 = operator new(0x18uLL);
  *v23 = v19;
  v23[1] = v16;
  v23[2] = v18;
  dispatch_async_f(v20, v23, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0>(radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v24 = __ldaxr(v21);
  while (__stlxr(v24 - 1, v21));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v9);
}

_QWORD *boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66D9040;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66D90B0;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66D9040;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66D90B0;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66D9120;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<radio::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66D9120;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<watchdog *,std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog *)#1},std::allocator<watchdog>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<watchdog *,std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog *)#1},std::allocator<watchdog>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog*)#1}::operator() const(watchdog*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<watchdog *,std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog *)#1},std::allocator<watchdog>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI8watchdogE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI8watchdogE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI8watchdogE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI8watchdogE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<watchdog> ctu::SharedSynchronizable<watchdog>::make_shared_ptr<watchdog>(watchdog*)::{lambda(watchdog*)#1}::operator() const(watchdog*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  if (a1)
  {
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 32));
    v2 = *(NSObject **)(a1 + 32);
    if (v2)
      dispatch_release(v2);
    v3 = *(NSObject **)(a1 + 24);
    if (v3)
      dispatch_release(v3);
    v4 = *(NSObject **)(a1 + 16);
    if (v4)
      dispatch_release(v4);
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete((void *)a1);
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3dms3abm11EventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2B038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2B04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2B078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  const void **v6;
  const void *v7;

  if (cf)
    CFRetain(cf);
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v6 = (const void **)MEMORY[0x1E0C9AE40];
  v7 = *v6;
  if (cf && v7)
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D2B124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t ***v28;
  BOOL v29;
  BOOL v30;
  uint64_t ***v31;
  uint64_t *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;

  v7 = (uint64_t **)(a1 + 4);
  v6 = a1[4];
  if (!v6)
  {
    v23 = (uint64_t *)a1[10];
    if (v23 != *a3)
      goto LABEL_80;
    v24 = (uint64_t *)v23[1];
    v25 = (uint64_t **)(a1 + 4);
    v10 = a1 + 4;
    if (v24 != a1)
      goto LABEL_76;
    goto LABEL_55;
  }
  v8 = *a2;
  v9 = a2[2];
  v10 = a1 + 4;
  v11 = a1[4];
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v17 = *(_DWORD *)(v11 + 32);
        v18 = v17 < 1;
        if (v17 == 1)
          v18 = *(_DWORD *)(v11 + 40) < v9;
        if (!v18)
          break;
        v11 = *(_QWORD *)(v11 + 8);
        if (!v11)
          goto LABEL_19;
      }
      v10 = (uint64_t *)v11;
      v11 = *(_QWORD *)v11;
    }
    while (v11);
  }
  else
  {
    do
    {
      v12 = *(_DWORD *)(v11 + 32);
      v13 = v12 == v8;
      v14 = v12 < v8;
      if (v12 >= v8)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v16 = v10;
      else
        v16 = (uint64_t *)v11;
      if (v13)
      {
        v15 = (uint64_t *)v11;
        v10 = (uint64_t *)v11;
      }
      else
      {
        v10 = v16;
      }
      v11 = *v15;
    }
    while (*v15);
  }
LABEL_19:
  v19 = (uint64_t *)v10[6];
  if (v19 != *a3)
    goto LABEL_80;
  v20 = (uint64_t **)(a1 + 4);
  if (v8 == 1)
  {
    v21 = (uint64_t *)a1[4];
    while (1)
    {
      v22 = *((_DWORD *)v21 + 8);
      if (v22 == 1)
      {
        if (v9 < *((_DWORD *)v21 + 10))
          goto LABEL_27;
LABEL_22:
        v21 = (uint64_t *)v21[1];
        if (!v21)
          goto LABEL_42;
      }
      else
      {
        if (v22 <= 1)
          goto LABEL_22;
LABEL_27:
        v20 = (uint64_t **)v21;
        v21 = (uint64_t *)*v21;
        if (!v21)
          goto LABEL_42;
      }
    }
  }
  v26 = (uint64_t **)a1[4];
  do
  {
    v27 = *((_DWORD *)v26 + 8);
    v28 = (uint64_t ***)(v26 + 1);
    v29 = v8 == v27;
    v30 = v8 < v27;
    if (v8 >= v27)
      v31 = (uint64_t ***)(v26 + 1);
    else
      v31 = (uint64_t ***)v26;
    if (!v30)
      v26 = v20;
    if (v29)
      v31 = v28;
    else
      v20 = v26;
    v26 = *v31;
  }
  while (*v31);
LABEL_42:
  v24 = (uint64_t *)v19[1];
  v32 = a1;
  if (v20 != v7)
    v32 = v20[6];
  if (v24 == v32)
  {
LABEL_55:
    v37 = (uint64_t *)v10[1];
    if (v37)
    {
      do
      {
        v38 = v37;
        v37 = (uint64_t *)*v37;
      }
      while (v37);
    }
    else
    {
      v41 = v10;
      do
      {
        v38 = (uint64_t *)v41[2];
        v13 = *v38 == (_QWORD)v41;
        v41 = v38;
      }
      while (!v13);
    }
    if ((uint64_t *)a1[3] == v10)
      a1[3] = (uint64_t)v38;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6, v10);
    operator delete(v10);
    goto LABEL_80;
  }
  v33 = *a2;
  if (*a2 == 1)
  {
    v34 = a2[2];
    while (1)
    {
      v25 = (uint64_t **)v6;
      v35 = *(_DWORD *)(v6 + 32);
      if (v35 == 1)
      {
        v36 = *(_DWORD *)(v6 + 40);
        if (v36 <= v34)
        {
          if (v36 >= v34)
          {
            *(_QWORD *)(v6 + 48) = v24;
            goto LABEL_80;
          }
          goto LABEL_53;
        }
LABEL_47:
        v6 = *(_QWORD *)v6;
        if (!*v25)
        {
          v7 = v25;
          goto LABEL_76;
        }
      }
      else
      {
        if (v35 > 1)
          goto LABEL_47;
LABEL_53:
        v6 = *(_QWORD *)(v6 + 8);
        if (!v6)
        {
          v7 = v25 + 1;
          goto LABEL_76;
        }
      }
    }
  }
  v39 = *(_DWORD *)(v6 + 32);
  if (v33 == v39)
    goto LABEL_79;
  while (v33 >= v39)
  {
    if (v39 >= v33)
      goto LABEL_79;
    v40 = *(_QWORD *)(v6 + 8);
    if (!v40)
    {
      v7 = (uint64_t **)(v6 + 8);
      goto LABEL_75;
    }
LABEL_61:
    v39 = *(_DWORD *)(v40 + 32);
    v6 = v40;
    if (v33 == v39)
    {
      *(_QWORD *)(v40 + 48) = v24;
      goto LABEL_80;
    }
  }
  v40 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
    goto LABEL_61;
  v7 = (uint64_t **)v6;
LABEL_75:
  v25 = (uint64_t **)v6;
LABEL_76:
  v6 = (uint64_t)operator new(0x38uLL);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)a2;
  *(_DWORD *)(v6 + 40) = a2[2];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = v25;
  *v7 = (uint64_t *)v6;
  v42 = *(_QWORD *)a1[3];
  v43 = (uint64_t *)v6;
  if (v42)
  {
    a1[3] = v42;
    v43 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[4], v43);
  ++a1[5];
LABEL_79:
  *(_QWORD *)(v6 + 48) = v24;
LABEL_80:
  v44 = *a3;
  v45 = **a3;
  v46 = (*a3)[1];
  *(_QWORD *)(v45 + 8) = v46;
  *(_QWORD *)v44[1] = v45;
  --a1[2];
  v47 = (unsigned int *)v44[3];
  if (v47)
  {
    v48 = v47 + 2;
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
      v51 = v47 + 3;
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
        (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
    }
  }
  operator delete(v44);
  return v46;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int i;
  unsigned int v30;
  uint64_t v31;
  char v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  _DWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[6];

  v84[3] = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
    goto LABEL_94;
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v82 = v18;
    v83 = v18;
    v80 = v18;
    v81 = v18;
    v78 = v18;
    v79 = v18;
    v76 = v18;
    v77 = v18;
    v74 = v18;
    v75 = v18;
    v72 = v18;
    v73 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v82 = 10;
    *((_QWORD *)&v82 + 1) = &v72;
    *(_QWORD *)&v83 = 0;
    *((_QWORD *)&v83 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        v25 = (_QWORD *)(v22 + 8);
        while (1)
        {
          memset(v84, 170, 24);
          v26 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v26 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v71);
            v84[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 16))(v71);
            LODWORD(v84[0]) = 1;
            if (v71)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_47;
LABEL_40:
              v31 = *(_QWORD *)(v24 + 16);
              if (!v31)
                goto LABEL_48;
              if (!atomic_load((unsigned int *)(v31 + 8)))
                goto LABEL_48;
LABEL_42:
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(v25, (uint64_t)v84);
              v33 = 0;
              if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
                goto LABEL_51;
              goto LABEL_43;
            }
LABEL_39:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          if (v26 != 1)
          {
            LODWORD(v84[0]) = 0;
            v84[1] = 0;
            v84[2] = 0;
            goto LABEL_39;
          }
          v27 = *(_QWORD *)(v24 + 16);
          if (!v27)
          {
LABEL_46:
            v84[1] = 0;
            v84[2] = v27;
            LODWORD(v84[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_47;
            goto LABEL_40;
          }
          v28 = (unsigned int *)(v27 + 8);
          for (i = *(_DWORD *)(v27 + 8); ; i = v30)
          {
            if (!i)
            {
              v27 = 0;
              goto LABEL_46;
            }
            v30 = __ldxr(v28);
            if (v30 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v28))
              break;
          }
          v84[1] = *(_QWORD *)(v24 + 8);
          v84[2] = v27;
          LODWORD(v84[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_40;
LABEL_47:
          if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
            goto LABEL_42;
LABEL_48:
          if (*(_BYTE *)(v21 + 24))
          {
            *(_BYTE *)(v21 + 24) = 0;
            boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v72);
          }
          v33 = 1;
          if (LODWORD(v84[0]) == SLODWORD(v84[0]) >> 31)
          {
LABEL_51:
            v34 = (unsigned int *)v84[2];
            if (v84[2])
            {
              v35 = (unsigned int *)(v84[2] + 8);
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
                v38 = v34 + 3;
                do
                {
                  v39 = __ldaxr(v38);
                  v40 = v39 - 1;
                }
                while (__stlxr(v40, v38));
                if (!v40)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
              }
            }
            goto LABEL_59;
          }
LABEL_43:
          if (v84[1])
            (*(void (**)(_QWORD))(*(_QWORD *)v84[1] + 8))(v84[1]);
LABEL_59:
          if ((v33 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 280);
      v41 = *(_QWORD *)(v21 + 16);
      if (v41)
      {
        if (atomic_load((unsigned int *)(v41 + 8)))
        {
          v43 = 1;
          goto LABEL_76;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v46 = *(_DWORD **)(v22 + 288);
        if (v46)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v46, &v72);
        v43 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v44 = *(_QWORD *)(v20 + 16);
        v45 = *(_DWORD **)(v22 + 288);
        if (v45)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v45, &v72);
        *(_QWORD *)(v22 + 288) = v44;
        v43 = 0;
        if (v44)
          ++*(_DWORD *)(v44 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 284);
      v43 = 1;
    }
LABEL_76:
    (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
    v47 = *((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1))
    {
      if ((uint64_t)v83 - 1 >= 0)
      {
        v48 = *((_QWORD *)&v82 + 1) + 16 * v83;
        do
        {
          v49 = *(unsigned int **)(v48 - 8);
          if (v49)
          {
            v50 = v49 + 2;
            do
            {
              v51 = __ldaxr(v50);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, v50));
            if (!v52)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
              v53 = v49 + 3;
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
            }
          }
          v48 -= 16;
        }
        while (v48 > v47);
      }
      if ((unint64_t)v82 >= 0xB)
        operator delete(*((void **)&v82 + 1));
    }
    v1 = *a1;
    v56 = a1[1];
    if (!v43)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v56)
    {
      v1 = v56;
LABEL_94:
      v57 = a1[3];
      if (v57 != v1)
      {
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v80 = v58;
        v81 = v58;
        v78 = v58;
        v79 = v58;
        v76 = v58;
        v77 = v58;
        v74 = v58;
        v75 = v58;
        v72 = v58;
        v73 = v58;
        v59 = *(_QWORD *)(v57 + 16);
        *(_QWORD *)&v82 = 10;
        *((_QWORD *)&v82 + 1) = &v72;
        *(_QWORD *)&v83 = 0;
        *((_QWORD *)&v83 + 1) = v59;
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 24))(v59);
        v60 = a1[2];
        a1[3] = a1[1];
        v61 = *(_DWORD **)(v60 + 288);
        if (v61)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v61, &v72);
        *(_QWORD *)(v60 + 288) = 0;
        (*(void (**)(_QWORD))(**((_QWORD **)&v83 + 1) + 32))(*((_QWORD *)&v83 + 1));
        v62 = *((_QWORD *)&v82 + 1);
        if (*((_QWORD *)&v82 + 1))
        {
          if ((uint64_t)v83 - 1 >= 0)
          {
            v63 = *((_QWORD *)&v82 + 1) + 16 * v83;
            do
            {
              v64 = *(unsigned int **)(v63 - 8);
              if (v64)
              {
                v65 = v64 + 2;
                do
                {
                  v66 = __ldaxr(v65);
                  v67 = v66 - 1;
                }
                while (__stlxr(v67, v65));
                if (!v67)
                {
                  (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 16))(v64);
                  v68 = v64 + 3;
                  do
                  {
                    v69 = __ldaxr(v68);
                    v70 = v69 - 1;
                  }
                  while (__stlxr(v70, v68));
                  if (!v70)
                    (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 24))(v64);
                }
              }
              v63 -= 16;
            }
            while (v63 > v62);
          }
          if ((unint64_t)v82 >= 0xB)
            operator delete(*((void **)&v82 + 1));
        }
      }
      return;
    }
  }
  if (v1 == v56)
    goto LABEL_94;
}

void sub_1B3D2BBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D2BC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t *v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  int v47;
  int v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t *v59;
  unsigned int *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t *v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t *v83;
  _OWORD v84[10];
  unint64_t v85;
  void *__p;
  uint64_t v87;
  pthread_mutex_t *v88;
  uint64_t v89;

  v3 = (uint64_t **)a1;
  v89 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84[8] = v4;
  v84[9] = v4;
  v84[6] = v4;
  v84[7] = v4;
  v84[4] = v4;
  v84[5] = v4;
  v84[2] = v4;
  v84[3] = v4;
  v84[0] = v4;
  v84[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v85 = 10;
  __p = v84;
  v87 = 0;
  v88 = v5;
  pthread_mutex_lock(v5);
  if (**v3 != a2)
    goto LABEL_101;
  v6 = v3[1];
  if (!v6 || (v7 = atomic_load((unsigned int *)v6 + 2), v7 != 1))
  {
    v82 = (uint64_t *)operator new(0x20uLL);
    v8 = *v3;
    v9 = **v3;
    v10 = operator new(0x40uLL);
    v11 = v10;
    *v10 = v10;
    v10[1] = v10;
    v10[2] = 0;
    v12 = *(_QWORD **)(v9 + 8);
    if (v12 != (_QWORD *)v9)
    {
      v13 = 0;
      v14 = v10;
      do
      {
        v15 = operator new(0x20uLL);
        v15[2] = v12[2];
        v16 = v12[3];
        v15[3] = v16;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          v14 = (_QWORD *)*v11;
          v13 = v11[2];
        }
        *v15 = v14;
        v15[1] = v11;
        v14[1] = v15;
        *v11 = v15;
        v11[2] = ++v13;
        v12 = (_QWORD *)v12[1];
        v14 = v15;
      }
      while (v12 != (_QWORD *)v9);
    }
    v80 = v8;
    v81 = v3;
    v11[3] = 0;
    v19 = (_QWORD **)(v11 + 3);
    v11[4] = 0;
    v20 = v11 + 4;
    v11[5] = 0;
    *((_BYTE *)v11 + 48) = *(_BYTE *)(v9 + 48);
    v11[3] = v11 + 4;
    v21 = *(_QWORD **)(v9 + 24);
    v22 = (_QWORD *)(v9 + 32);
    if (v21 == (_QWORD *)(v9 + 32))
    {
LABEL_12:
      *((_BYTE *)v11 + 56) = *(_BYTE *)(v9 + 56);
      v23 = *(_QWORD **)(v9 + 24);
      if (v23 != v22)
      {
        v24 = (_QWORD *)v11[3];
        v25 = v11[1];
        do
        {
          v24[6] = v25;
          v26 = v9;
          if (v23 != v22)
            v26 = v23[6];
          v27 = (_QWORD *)v23[1];
          v28 = v27;
          v29 = v23;
          if (v27)
          {
            do
            {
              v30 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v30 = (_QWORD *)v29[2];
              v31 = *v30 == (_QWORD)v29;
              v29 = v30;
            }
            while (!v31);
          }
          v32 = v9;
          if (v30 != v22)
            v32 = v30[6];
          while (v26 != v32)
          {
            v26 = *(_QWORD *)(v26 + 8);
            v25 = *(_QWORD *)(v25 + 8);
          }
          if (v27)
          {
            do
            {
              v33 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v33 = (_QWORD *)v23[2];
              v31 = *v33 == (_QWORD)v23;
              v23 = v33;
            }
            while (!v31);
          }
          v34 = (_QWORD *)v24[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD *)v24[2];
              v31 = *v35 == (_QWORD)v24;
              v24 = v35;
            }
            while (!v31);
          }
          v23 = v33;
          v24 = v35;
        }
        while (v33 != v22);
      }
      *v82 = (uint64_t)v11;
      v82[1] = 0;
      v55 = operator new(0x18uLL);
      v55[1] = 0x100000001;
      *v55 = off_1E66D9238;
      v55[2] = v11;
      v82[1] = (uint64_t)v55;
      v3 = v81;
      v82[2] = v80[2];
      v56 = v80[3];
      v82[3] = v56;
      if (v56)
      {
        v57 = (unsigned int *)(v56 + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v59 = (uint64_t *)operator new(0x18uLL);
      v59[1] = 0x100000001;
      *v59 = (uint64_t)off_1E66D91D8;
      v59[2] = (uint64_t)v82;
      v60 = (unsigned int *)v81[1];
      *v81 = v82;
      v81[1] = v59;
      if (v60)
      {
        v61 = v60 + 2;
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 16))(v60);
          v64 = v60 + 3;
          do
          {
            v65 = __ldaxr(v64);
            v66 = v65 - 1;
          }
          while (__stlxr(v66, v64));
          if (!v66)
            (*(void (**)(unsigned int *))(*(_QWORD *)v60 + 24))(v60);
        }
      }
      goto LABEL_95;
    }
    while (1)
    {
      v36 = *((_DWORD *)v21 + 8);
      v37 = (_QWORD *)*v20;
      v38 = v11 + 4;
      if (*v19 != v20)
      {
        v39 = (_QWORD *)*v20;
        v40 = v11 + 4;
        if (v37)
        {
          do
          {
            v38 = v39;
            v39 = (_QWORD *)v39[1];
          }
          while (v39);
        }
        else
        {
          do
          {
            v38 = (_QWORD *)v40[2];
            v31 = *v38 == (_QWORD)v40;
            v40 = v38;
          }
          while (v31);
        }
        v41 = *((_DWORD *)v21 + 10);
        v42 = *((_DWORD *)v38 + 8);
        if (v42 == v36)
        {
          if (v36 != 1)
            goto LABEL_57;
          if (*((_DWORD *)v38 + 10) >= v41)
          {
            v43 = (_QWORD *)*v20;
            v44 = v11 + 4;
            v45 = v11 + 4;
            if (v37)
              goto LABEL_61;
LABEL_68:
            v49 = operator new(0x38uLL);
            v50 = *((_OWORD *)v21 + 2);
            v49[6] = v21[6];
            *((_OWORD *)v49 + 2) = v50;
            *v49 = 0;
            v49[1] = 0;
            v49[2] = v45;
            *v44 = v49;
            v51 = (_QWORD *)**v19;
            if (v51)
            {
              *v19 = v51;
              v49 = (_QWORD *)*v44;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v11[4], v49);
            ++v11[5];
            goto LABEL_71;
          }
        }
        else if (v42 >= v36)
        {
LABEL_57:
          v44 = v11 + 4;
          v45 = v11 + 4;
          if (!v37)
            goto LABEL_68;
          v43 = (_QWORD *)*v20;
          if (v36 != 1)
          {
            v46 = *((_DWORD *)v37 + 8);
            v45 = (_QWORD *)*v20;
            while (v36 != v46)
            {
              if (v36 < v46)
              {
                v54 = *v45;
                v44 = v45;
                if (!*v45)
                  goto LABEL_68;
              }
              else
              {
                if (v46 >= v36)
                  goto LABEL_71;
                v54 = v45[1];
                if (!v54)
                  goto LABEL_67;
              }
              v46 = *(_DWORD *)(v54 + 32);
              v45 = (_QWORD *)v54;
            }
            goto LABEL_71;
          }
          while (1)
          {
LABEL_61:
            v45 = v43;
            v47 = *((_DWORD *)v43 + 8);
            if (v47 == 1)
            {
              v48 = *((_DWORD *)v43 + 10);
              if (v48 > v41)
                goto LABEL_60;
              if (v48 >= v41)
                goto LABEL_71;
            }
            else if (v47 > 1)
            {
LABEL_60:
              v43 = (_QWORD *)*v43;
              v44 = v45;
              if (!*v45)
                goto LABEL_68;
              continue;
            }
            v43 = (_QWORD *)v43[1];
            if (!v43)
            {
LABEL_67:
              v44 = v45 + 1;
              goto LABEL_68;
            }
          }
        }
      }
      if (v37)
        v45 = v38;
      else
        v45 = v11 + 4;
      if (v37)
        v44 = v38 + 1;
      else
        v44 = v11 + 4;
      if (!*v44)
        goto LABEL_68;
LABEL_71:
      v52 = (_QWORD *)v21[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v21[2];
          v31 = *v53 == (_QWORD)v21;
          v21 = v53;
        }
        while (!v31);
      }
      v21 = v53;
      if (v53 == v22)
        goto LABEL_12;
    }
  }
LABEL_95:
  v67 = (uint64_t **)*v3;
  v68 = (uint64_t *)**v3;
  v69 = (uint64_t *)v68[1];
  v83 = v69;
  if (v68 != v69)
  {
    do
    {
      while (1)
      {
        v70 = v69[2];
        if (!*(_BYTE *)(v70 + 24))
          break;
        v69 = (uint64_t *)v69[1];
        v83 = v69;
        v68 = *v67;
        if (v69 == *v67)
          goto LABEL_100;
      }
      v69 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::erase(v68, (int *)(v70 + 64), &v83);
      v67 = (uint64_t **)*v3;
      v83 = v69;
      v68 = *v67;
    }
    while (v69 != *v67);
  }
LABEL_100:
  v3[2] = v69;
LABEL_101:
  pthread_mutex_unlock(v88);
  v71 = (char *)__p;
  if (__p)
  {
    if (v87 - 1 >= 0)
    {
      v72 = (char *)__p + 16 * v87;
      do
      {
        v73 = (unsigned int *)*((_QWORD *)v72 - 1);
        if (v73)
        {
          v74 = v73 + 2;
          do
          {
            v75 = __ldaxr(v74);
            v76 = v75 - 1;
          }
          while (__stlxr(v76, v74));
          if (!v76)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 16))(v73);
            v77 = v73 + 3;
            do
            {
              v78 = __ldaxr(v77);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v77));
            if (!v79)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 24))(v73);
          }
        }
        v72 -= 16;
      }
      while (v72 > v71);
    }
    if (v85 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3D2C41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,ctu::cf::CFSharedRef<__CFDictionary const>>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3D2CC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm11DumpLogsInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2CDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2CDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingModeReporting>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingModeReporting>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingModeReporting>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D92D8;
  return result;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_2(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D2CEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingMode>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingMode>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<dms::tlv::abm::OperatingMode>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D9358;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm16SetOperatingMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2D034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2D048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2D074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm16GetOperatingMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2D148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2D15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2D188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm18ReleaseResetDetect8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2D25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2D270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EraseMask>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EraseMask>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::EraseMask>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D9450;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13EraseSettings8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2D3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2D3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2D428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21RestoreCarrierNVItems8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2D4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2D510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2D53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17GetBasebandStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2D610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2D624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2D650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms3abm20GetBasebandFWVersion8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2D724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2D738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2D764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm27GetFactoryCalibrationStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2D84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2D878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned short>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D2D928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D2D94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D2D9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D2DA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22GetRFCalibrationStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2DAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2DB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2DB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<bsp::tlv::abm::WakeBuffer,void({block_pointer}&)(bsp::tlv::abm::WakeBuffer const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  void *__p;
  void *v7;
  uint64_t v8;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    __p = 0;
    v7 = 0;
    v8 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, (char *)result, (char *)(result + v5), v5);
    (*(void (**)(void))(*(_QWORD *)a3 + 16))();
    if (__p)
    {
      v7 = __p;
      operator delete(__p);
    }
    return 1;
  }
  return result;
}

void sub_1B3D2DC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B3D2DC2C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!a10)
    JUMPOUT(0x1B3D2DBB8);
  JUMPOUT(0x1B3D2DBB0);
}

void sub_1B3D2DC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1B3D2DC24);
  JUMPOUT(0x1B3D2DC1CLL);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13GetWakeReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<bsp::abm::GetWakeReason::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B3D2DC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<bsp::abm::GetWakeReason::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  qmi::MessageBase *v4;
  void *__p[3];

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    memset(__p, 170, sizeof(__p));
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::ResponseBase::ResponseBase(a2, __p[0]);
    qmi::MessageBase::validateMsgId(a2);
    if (__p[0])
      operator delete(__p[0]);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId(v4);
  }
}

void sub_1B3D2DD58(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D2DD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  qmi::MessageBase *v11;

  qmi::MessageBase::~MessageBase(v11);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DumpLogsState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DumpLogsState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DumpLogsState>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D95E0;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm8DumpLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2DED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2DEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2DF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_0(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E66D9688;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::~TlvWrapper(_QWORD *__p)
{
  void *v2;

  *__p = &off_1E66D9688;
  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16) + 3;
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::write(uint64_t a1, _QWORD *a2)
{
  char v4;
  uint64_t v5;
  char *v6;
  void *result;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = (char *)(*a2 + 3);
  *a2 = v6;
  result = memcpy(v6, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
  v8 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
  *a2 = &v6[v8];
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = v8;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Payload>::clone(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  char *v6;
  char *v7;

  v2 = operator new(0x28uLL);
  v2[8] = *(_BYTE *)(a1 + 8);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E66D9688;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v4 = *(_BYTE **)(a1 + 16);
  v3 = *(_BYTE **)(a1 + 24);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v3 - v4);
    *((_QWORD *)v2 + 2) = v6;
    v7 = &v6[v5];
    *((_QWORD *)v2 + 4) = &v6[v5];
    memcpy(v6, v4, v5);
    *((_QWORD *)v2 + 3) = v7;
  }
  return v2;
}

void sub_1B3D2E0C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[3] = v4;
    operator delete(v4);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm15SendTestCommand8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2E1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2E1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2E1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::object const&,xpc::object const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40), (void **)(a1 + 48));
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getFirmwareNonce(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  void *v20;
  dispatch_object_t object;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  _OWORD v27[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v4;
  v27[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v27);
  v22 = v3 + 320;
  v23 = QMIServiceMsg::create();
  v24 = 25000;
  v25 = 0;
  v26 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v18[3] = &__block_descriptor_tmp_185;
  v18[4] = v3;
  v18[5] = v2[3];
  v6 = (std::__shared_weak_count *)v2[4];
  v19 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)v2[1];
  if (v9)
    v9 = _Block_copy(v9);
  v20 = v9;
  v10 = v2[2];
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm8GetNonce8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9790;
  aBlock[4] = v18;
  v11 = _Block_copy(aBlock);
  v26 = v11;
  if (v23)
  {
    qmi::Client::send();
    v11 = v26;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v20)
    _Block_release(v20);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v27);
  v12 = (std::__shared_weak_count *)v2[4];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = v2[2];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v2[1];
  if (v14)
    _Block_release(v14);
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1B3D2E3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v26;
  NSObject *v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    v27 = v24[2];
    if (!v27)
      goto LABEL_13;
  }
  dispatch_release(v27);
  v28 = (const void *)v24[1];
  if (!v28)
    goto LABEL_18;
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::string::size_type v8;
  tlv *TlvValue;
  int v10;
  tlv *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  void **v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const void *v18;
  void *v19;
  void *v20;
  char *v21;
  int v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const void *v25;
  void *v26;
  NSObject *v27;
  NSObject *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void **v31;
  void *v32[3];
  _QWORD v33[2];
  uint64_t (*v34)(uint64_t, std::string *);
  void *v35;
  void **v36;
  _QWORD v37[2];
  _QWORD *(*v38)(uint64_t, char **);
  void *v39;
  std::string *p_block;
  std::__shared_weak_count *v42;
  void *__p;
  uint64_t p_p;
  uint64_t v45;
  void *v46;
  void *aBlock;
  xpc_object_t v48;
  xpc_object_t object;
  std::string block;
  __n128 (*v51)(_QWORD *, uint64_t);
  const void *v52;
  xpc_object_t v53;
  xpc_object_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v42 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_53:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      if (*((_DWORD *)a2 + 1))
      {
        __p = 0;
        p_p = (uint64_t)&__p;
        v45 = 0x2000000000;
        v8 = MEMORY[0x1E0C809B0];
        LOWORD(v46) = 0;
        v33[0] = MEMORY[0x1E0C809B0];
        v33[1] = 0x40000000;
        v34 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
        v35 = &unk_1E66D9738;
        v36 = &__p;
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v11 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)2);
          LOWORD(block.__r_.__value_.__l.__data_) = *(_WORD *)v11;
          v34((uint64_t)v33, &block);
        }
        memset(v32, 170, sizeof(v32));
        ctu::hex((ctu *)*(unsigned __int16 *)(p_p + 24));
        v12 = std::string::insert(&block, 0, "Failed to get Nonce: BBSecurityStatus: 0x", 0x29uLL);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v32[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)v32 = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
          operator delete(block.__r_.__value_.__l.__data_);
        v14 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v31 = v32;
          if (SHIBYTE(v32[2]) < 0)
            v31 = (void **)v32[0];
          LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
          _os_log_error_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
        }
        if (SHIBYTE(v32[2]) >= 0)
          v15 = v32;
        else
          v15 = (void **)v32[0];
        v16 = xpc_string_create((const char *)v15);
        if (!v16)
          v16 = xpc_null_create();
        v17 = xpc_null_create();
        v18 = (const void *)a1[7];
        if (v18)
          v19 = _Block_copy(v18);
        else
          v19 = 0;
        v27 = a1[8];
        block.__r_.__value_.__r.__words[0] = v8;
        block.__r_.__value_.__l.__size_ = 1174405120;
        block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
        v51 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_177;
        if (v19)
        {
          v52 = _Block_copy(v19);
          v53 = v16;
          if (v16)
            goto LABEL_27;
        }
        else
        {
          v52 = 0;
          v53 = v16;
          if (v16)
          {
LABEL_27:
            xpc_retain(v16);
            v54 = v17;
            if (v17)
            {
LABEL_28:
              xpc_retain(v17);
LABEL_32:
              dispatch_async(v27, &block);
              xpc_release(v54);
              v54 = 0;
              xpc_release(v53);
              v53 = 0;
              if (v52)
                _Block_release(v52);
              if (v19)
                _Block_release(v19);
              xpc_release(v17);
              xpc_release(v16);
              if (SHIBYTE(v32[2]) < 0)
                operator delete(v32[0]);
              _Block_object_dispose(&__p, 8);
              goto LABEL_53;
            }
LABEL_31:
            v54 = xpc_null_create();
            goto LABEL_32;
          }
        }
        v53 = xpc_null_create();
        v54 = v17;
        if (v17)
          goto LABEL_28;
        goto LABEL_31;
      }
      block.__r_.__value_.__r.__words[0] = 0;
      block.__r_.__value_.__l.__size_ = (std::string::size_type)&block;
      block.__r_.__value_.__r.__words[2] = 0x4002000000;
      v51 = __Block_byref_object_copy__178;
      v52 = __Block_byref_object_dispose__179;
      v55 = 0;
      v20 = (void *)MEMORY[0x1E0C809B0];
      v53 = 0;
      v54 = 0;
      v37[0] = MEMORY[0x1E0C809B0];
      v37[1] = 0x40000000;
      v38 = ___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_180;
      v39 = &unk_1E66D9710;
      p_block = &block;
      v21 = (char *)qmi::MessageBase::findTlvValue(a2);
      if (v21)
      {
        __p = 0;
        p_p = 0;
        v45 = 0;
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v21, &v21[v22], v22);
        v38((uint64_t)v37, (char **)&__p);
        if (__p)
        {
          p_p = (uint64_t)__p;
          operator delete(__p);
        }
      }
      v23 = xpc_null_create();
      v24 = xpc_data_create(*(const void **)(block.__r_.__value_.__l.__size_ + 40), *(_QWORD *)(block.__r_.__value_.__l.__size_ + 48) - *(_QWORD *)(block.__r_.__value_.__l.__size_ + 40));
      if (!v24)
        v24 = xpc_null_create();
      v25 = (const void *)a1[7];
      if (v25)
        v26 = _Block_copy(v25);
      else
        v26 = 0;
      v28 = a1[8];
      __p = v20;
      p_p = 1174405120;
      v45 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke_0;
      v46 = &__block_descriptor_tmp_187;
      if (v26)
      {
        aBlock = _Block_copy(v26);
        v48 = v23;
        if (v23)
          goto LABEL_42;
      }
      else
      {
        aBlock = 0;
        v48 = v23;
        if (v23)
        {
LABEL_42:
          xpc_retain(v23);
          object = v24;
          if (v24)
          {
LABEL_43:
            xpc_retain(v24);
LABEL_47:
            dispatch_async(v28, &__p);
            xpc_release(object);
            object = 0;
            xpc_release(v48);
            v48 = 0;
            if (aBlock)
              _Block_release(aBlock);
            if (v26)
              _Block_release(v26);
            xpc_release(v24);
            xpc_release(v23);
            _Block_object_dispose(&block, 8);
            if (v53)
            {
              v54 = v53;
              operator delete(v53);
            }
            goto LABEL_53;
          }
LABEL_46:
          object = xpc_null_create();
          goto LABEL_47;
        }
      }
      v48 = xpc_null_create();
      object = v24;
      if (v24)
        goto LABEL_43;
      goto LABEL_46;
    }
  }
}

void sub_1B3D2EA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__178(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__179(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZZN5radio20QMICommandDriverBase16getFirmwareNonceEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrIN5radio13CommandDriverEEE56c61_ZTSN8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm8GetNonce8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2ED74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2EDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES2_EEEvDpT__block_invoke_0(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::object,xpc::object)>::operator()<xpc::dict const&,xpc::object const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40), (void **)(a1 + 48));
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getPkHash(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  void *v20;
  dispatch_object_t object;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  _OWORD v27[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v4;
  v27[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v27);
  v22 = v3 + 320;
  v23 = QMIServiceMsg::create();
  v24 = 25000;
  v25 = 0;
  v26 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v18[3] = &__block_descriptor_tmp_191;
  v18[4] = v3;
  v18[5] = v2[3];
  v6 = (std::__shared_weak_count *)v2[4];
  v19 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)v2[1];
  if (v9)
    v9 = _Block_copy(v9);
  v20 = v9;
  v10 = v2[2];
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm9GetPKHash8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9868;
  aBlock[4] = v18;
  v11 = _Block_copy(aBlock);
  v26 = v11;
  if (v23)
  {
    qmi::Client::send();
    v11 = v26;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v20)
    _Block_release(v20);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v27);
  v12 = (std::__shared_weak_count *)v2[4];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = v2[2];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v2[1];
  if (v14)
    _Block_release(v14);
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1B3D2EFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v26;
  NSObject *v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    v27 = v24[2];
    if (!v27)
      goto LABEL_13;
  }
  dispatch_release(v27);
  v28 = (const void *)v24[1];
  if (!v28)
    goto LABEL_18;
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::string::size_type v8;
  tlv *TlvValue;
  int v10;
  tlv *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  void *v18;
  void *v19;
  char *v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  xpc_object_t v24;
  xpc_object_t v25;
  NSObject *v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  const void *v33;
  void *v34;
  NSObject *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void **v38;
  void *v39[3];
  _QWORD v40[2];
  uint64_t (*v41)(uint64_t, std::string *);
  void *v42;
  void **v43;
  _QWORD v44[2];
  _QWORD *(*v45)(uint64_t, char **);
  void *v46;
  std::string *p_block;
  std::__shared_weak_count *v49;
  void *__p;
  uint64_t p_p;
  uint64_t v52;
  void *v53;
  void *aBlock;
  xpc_object_t v55;
  xpc_object_t object;
  std::string block;
  __n128 (*v58)(_QWORD *, uint64_t);
  const void *v59;
  xpc_object_t v60;
  xpc_object_t v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v49 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
  {
LABEL_62:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  if (*((_DWORD *)a2 + 1))
  {
    __p = 0;
    p_p = (uint64_t)&__p;
    v52 = 0x2000000000;
    v8 = MEMORY[0x1E0C809B0];
    LOWORD(v53) = 0;
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 0x40000000;
    v41 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3;
    v42 = &unk_1E66D9810;
    v43 = &__p;
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v11 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)2);
      LOWORD(block.__r_.__value_.__l.__data_) = *(_WORD *)v11;
      v41((uint64_t)v40, &block);
    }
    memset(v39, 170, sizeof(v39));
    ctu::hex((ctu *)*(unsigned __int16 *)(p_p + 24));
    v12 = std::string::insert(&block, 0, "Failed to get PK hash: BBSecurityStatus: 0x", 0x2BuLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v39[2] = (void *)v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)v39 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      operator delete(block.__r_.__value_.__l.__data_);
    v14 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v38 = v39;
      if (SHIBYTE(v39[2]) < 0)
        v38 = (void **)v39[0];
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
      _os_log_error_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    v15 = xpc_int64_create(*(unsigned __int16 *)(p_p + 24));
    if (!v15)
      v15 = xpc_null_create();
    v16 = xpc_null_create();
    v17 = (const void *)a1[7];
    if (v17)
      v18 = _Block_copy(v17);
    else
      v18 = 0;
    v26 = a1[8];
    block.__r_.__value_.__r.__words[0] = v8;
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
    v58 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_177;
    if (v18)
    {
      v59 = _Block_copy(v18);
      v60 = v15;
      if (v15)
        goto LABEL_25;
    }
    else
    {
      v59 = 0;
      v60 = v15;
      if (v15)
      {
LABEL_25:
        xpc_retain(v15);
        v61 = v16;
        if (v16)
        {
LABEL_26:
          xpc_retain(v16);
LABEL_30:
          dispatch_async(v26, &block);
          xpc_release(v61);
          v61 = 0;
          xpc_release(v60);
          v60 = 0;
          if (v59)
            _Block_release(v59);
          if (v18)
            _Block_release(v18);
          xpc_release(v16);
          xpc_release(v15);
          if (SHIBYTE(v39[2]) < 0)
            operator delete(v39[0]);
          _Block_object_dispose(&__p, 8);
          goto LABEL_62;
        }
LABEL_29:
        v61 = xpc_null_create();
        goto LABEL_30;
      }
    }
    v60 = xpc_null_create();
    v61 = v16;
    if (v16)
      goto LABEL_26;
    goto LABEL_29;
  }
  block.__r_.__value_.__r.__words[0] = 0;
  block.__r_.__value_.__l.__size_ = (std::string::size_type)&block;
  block.__r_.__value_.__r.__words[2] = 0x4002000000;
  v58 = __Block_byref_object_copy__178;
  v59 = __Block_byref_object_dispose__179;
  v62 = 0;
  v19 = (void *)MEMORY[0x1E0C809B0];
  v60 = 0;
  v61 = 0;
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 0x40000000;
  v45 = ___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
  v46 = &unk_1E66D97E8;
  p_block = &block;
  v20 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (v20)
  {
    __p = 0;
    p_p = 0;
    v52 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__p, v20, &v20[v21], v21);
    v45((uint64_t)v44, (char **)&__p);
    if (__p)
    {
      p_p = (uint64_t)__p;
      operator delete(__p);
    }
  }
  v22 = *(unsigned int **)(block.__r_.__value_.__l.__size_ + 40);
  if (*(_QWORD *)(block.__r_.__value_.__l.__size_ + 48) - (_QWORD)v22 < 4uLL)
    std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]();
  v23 = *v22;
  v24 = xpc_dictionary_create(0, 0, 0);
  if (v24 || (v24 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1B5E2FB70](v24) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v24);
      v25 = v24;
    }
    else
    {
      v25 = xpc_null_create();
    }
  }
  else
  {
    v25 = xpc_null_create();
    v24 = 0;
  }
  xpc_release(v24);
  v27 = xpc_data_create(*(const void **)(block.__r_.__value_.__l.__size_ + 40), *(_QWORD *)(block.__r_.__value_.__l.__size_ + 48) - *(_QWORD *)(block.__r_.__value_.__l.__size_ + 40));
  if (!v27)
    v27 = xpc_null_create();
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E0DDF7D0], v27);
  v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  v29 = xpc_int64_create(bswap32(v23));
  if (!v29)
    v29 = xpc_null_create();
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E0DDF7C0], v29);
  v30 = xpc_null_create();
  xpc_release(v29);
  xpc_release(v30);
  v31 = xpc_null_create();
  if (v25)
  {
    xpc_retain(v25);
    v32 = v25;
    v33 = (const void *)a1[7];
    if (v33)
    {
LABEL_45:
      v34 = _Block_copy(v33);
      goto LABEL_48;
    }
  }
  else
  {
    v32 = xpc_null_create();
    v33 = (const void *)a1[7];
    if (v33)
      goto LABEL_45;
  }
  v34 = 0;
LABEL_48:
  v35 = a1[8];
  __p = v19;
  p_p = 1174405120;
  v52 = (uint64_t)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  v53 = &__block_descriptor_tmp_193;
  if (v34)
  {
    aBlock = _Block_copy(v34);
    v55 = v31;
    if (v31)
      goto LABEL_50;
LABEL_53:
    v55 = xpc_null_create();
    object = v32;
    if (v32)
      goto LABEL_51;
    goto LABEL_54;
  }
  aBlock = 0;
  v55 = v31;
  if (!v31)
    goto LABEL_53;
LABEL_50:
  xpc_retain(v31);
  object = v32;
  if (v32)
  {
LABEL_51:
    xpc_retain(v32);
    goto LABEL_55;
  }
LABEL_54:
  object = xpc_null_create();
LABEL_55:
  dispatch_async(v35, &__p);
  xpc_release(object);
  object = 0;
  xpc_release(v55);
  v55 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v34)
    _Block_release(v34);
  xpc_release(v32);
  xpc_release(v31);
  xpc_release(v25);
  _Block_object_dispose(&block, 8);
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  v7 = v49;
  if (v49)
    goto LABEL_62;
}

void sub_1B3D2F708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN5radio20QMICommandDriverBase9getPkHashEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm9GetPKHash8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D2F994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D2F9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D2F9D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  xpc_object_t object;
  xpc_object_t v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  v6 = v2;
  if (!v2)
  {
    v6 = xpc_null_create();
    v4 = (void *)a1[6];
    object = v4;
    if (v4)
      goto LABEL_3;
LABEL_5:
    object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v2);
  v4 = (void *)a1[6];
  object = v4;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  xpc_retain(v4);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(v3 + 16))(v3, &v6, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v6);
}

void sub_1B3D2FA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  xpc_object_t result;

  v4 = (const void *)a2[4];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = (void *)a2[5];
    a1[4] = v5;
    a1[5] = v6;
    if (v6)
      goto LABEL_3;
LABEL_6:
    a1[5] = xpc_null_create();
    v7 = (void *)a2[6];
    a1[6] = v7;
    if (v7)
      return xpc_retain(v7);
    goto LABEL_7;
  }
  v6 = (void *)a2[5];
  a1[4] = 0;
  a1[5] = v6;
  if (!v6)
    goto LABEL_6;
LABEL_3:
  xpc_retain(v6);
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (v7)
    return xpc_retain(v7);
LABEL_7:
  result = xpc_null_create();
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSN8dispatch5blockIU13block_pointerFvN3xpc6objectES2_EEE40c15_ZTSN3xpc4dictE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getFirmwareInfo(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  void *v20;
  dispatch_object_t object;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  _OWORD v27[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v4;
  v27[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v27);
  v22 = v3 + 320;
  v23 = QMIServiceMsg::create();
  v24 = 25000;
  v25 = 0;
  v26 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v18[3] = &__block_descriptor_tmp_198;
  v18[4] = v3;
  v18[5] = v2[3];
  v6 = (std::__shared_weak_count *)v2[4];
  v19 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)v2[1];
  if (v9)
    v9 = _Block_copy(v9);
  v20 = v9;
  v10 = v2[2];
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21GetChipIdSerialNumber8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9940;
  aBlock[4] = v18;
  v11 = _Block_copy(aBlock);
  v26 = v11;
  if (v23)
  {
    qmi::Client::send();
    v11 = v26;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v20)
    _Block_release(v20);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v27);
  v12 = (std::__shared_weak_count *)v2[4];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = v2[2];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v2[1];
  if (v14)
    _Block_release(v14);
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1B3D2FD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v26;
  NSObject *v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    v27 = v24[2];
    if (!v27)
      goto LABEL_13;
  }
  dispatch_release(v27);
  v28 = (const void *)v24[1];
  if (!v28)
    goto LABEL_18;
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::string::size_type v8;
  tlv *TlvValue;
  int v10;
  tlv *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  void *v18;
  std::string::size_type v19;
  tlv *v20;
  int v21;
  tlv *v22;
  const unsigned __int8 *v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  xpc_object_t v31;
  xpc_object_t v32;
  NSObject *v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const void *v40;
  void *v41;
  NSObject *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void **v45;
  void *__p[3];
  _QWORD v47[2];
  uint64_t (*v48)(uint64_t, std::string *);
  void *v49;
  uint64_t *v50;
  _QWORD v51[2];
  uint64_t (*v52)(uint64_t, std::string *);
  void *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  std::__shared_weak_count *v65;
  std::string block;
  void *v67;
  void *v68;
  xpc_object_t v69;
  xpc_object_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v65 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
  {
LABEL_61:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v60 = 0;
  v61 = &v60;
  v62 = 0x2000000000;
  v63 = 0;
  if (*((_DWORD *)a2 + 1))
  {
    v56 = 0;
    v57 = &v56;
    v58 = 0x2000000000;
    v8 = MEMORY[0x1E0C809B0];
    LOWORD(v59) = 0;
    v47[0] = MEMORY[0x1E0C809B0];
    v47[1] = 0x40000000;
    v48 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3;
    v49 = &unk_1E66D98E8;
    v50 = &v56;
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v11 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v10, (const unsigned __int8 *)2);
      LOWORD(block.__r_.__value_.__l.__data_) = *(_WORD *)v11;
      v48((uint64_t)v47, &block);
    }
    memset(__p, 170, sizeof(__p));
    ctu::hex((ctu *)*((unsigned __int16 *)v57 + 12));
    v12 = std::string::insert(&block, 0, "Failed to get firmware information: BBSecurityStatus: 0x", 0x38uLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      operator delete(block.__r_.__value_.__l.__data_);
    v14 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v45 = __p;
      if (SHIBYTE(__p[2]) < 0)
        v45 = (void **)__p[0];
      LODWORD(block.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)block.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
      _os_log_error_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&block, 0xCu);
    }
    v15 = xpc_int64_create(*((unsigned __int16 *)v57 + 12));
    if (!v15)
      v15 = xpc_null_create();
    v16 = xpc_null_create();
    v17 = (const void *)a1[7];
    if (v17)
      v18 = _Block_copy(v17);
    else
      v18 = 0;
    v33 = a1[8];
    block.__r_.__value_.__r.__words[0] = v8;
    block.__r_.__value_.__l.__size_ = 1174405120;
    block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
    v67 = &__block_descriptor_tmp_177;
    if (v18)
    {
      v68 = _Block_copy(v18);
      v69 = v15;
      if (v15)
        goto LABEL_26;
    }
    else
    {
      v68 = 0;
      v69 = v15;
      if (v15)
      {
LABEL_26:
        xpc_retain(v15);
        v70 = v16;
        if (v16)
        {
LABEL_27:
          xpc_retain(v16);
LABEL_31:
          dispatch_async(v33, &block);
          xpc_release(v70);
          v70 = 0;
          xpc_release(v69);
          v69 = 0;
          if (v68)
            _Block_release(v68);
          if (v18)
            _Block_release(v18);
          xpc_release(v16);
          xpc_release(v15);
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          _Block_object_dispose(&v56, 8);
          _Block_object_dispose(&v60, 8);
          goto LABEL_61;
        }
LABEL_30:
        v70 = xpc_null_create();
        goto LABEL_31;
      }
    }
    v69 = xpc_null_create();
    v70 = v16;
    if (v16)
      goto LABEL_27;
    goto LABEL_30;
  }
  v56 = 0;
  v57 = &v56;
  v58 = 0x2000000000;
  v59 = 0;
  v19 = MEMORY[0x1E0C809B0];
  v51[0] = MEMORY[0x1E0C809B0];
  v51[1] = 0x40000000;
  v52 = (uint64_t (*)(uint64_t, std::string *))___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
  v53 = &unk_1E66D98C0;
  v54 = &v56;
  v55 = &v60;
  v20 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v22 = v20;
  if (v20)
  {
    v23 = (const unsigned __int8 *)v20 + v21;
    tlv::throwIfNotEnoughBytes(v20, v23, (const unsigned __int8 *)4);
    v24 = *(unsigned int *)v22;
    tlv::throwIfNotEnoughBytes((tlv *)((char *)v22 + 4), v23, (const unsigned __int8 *)4);
    block.__r_.__value_.__r.__words[0] = v24 | ((unint64_t)*((unsigned int *)v22 + 1) << 32);
    v52((uint64_t)v51, &block);
  }
  v25 = v57;
  v26 = (char *)operator new(4uLL);
  *(_DWORD *)v26 = *((_DWORD *)v25 + 6);
  v27 = v26 + 1;
  v28 = v26 + 3;
  do
  {
    v29 = *(v27 - 1);
    *(v27 - 1) = *v28;
    *v28-- = v29;
  }
  while (v27++ < v28);
  v31 = xpc_dictionary_create(0, 0, 0);
  if (v31 || (v31 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1B5E2FB70](v31) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v31);
      v32 = v31;
    }
    else
    {
      v32 = xpc_null_create();
    }
  }
  else
  {
    v32 = xpc_null_create();
    v31 = 0;
  }
  xpc_release(v31);
  v34 = xpc_int64_create(*((unsigned int *)v61 + 6));
  if (!v34)
    v34 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0DDF7C8], v34);
  v35 = xpc_null_create();
  xpc_release(v34);
  xpc_release(v35);
  v36 = xpc_data_create(v26, 4uLL);
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0DDF820], v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v38 = xpc_null_create();
  if (v32)
  {
    xpc_retain(v32);
    v39 = v32;
    v40 = (const void *)a1[7];
    if (v40)
    {
LABEL_46:
      v41 = _Block_copy(v40);
      goto LABEL_49;
    }
  }
  else
  {
    v39 = xpc_null_create();
    v40 = (const void *)a1[7];
    if (v40)
      goto LABEL_46;
  }
  v41 = 0;
LABEL_49:
  v42 = a1[8];
  block.__r_.__value_.__r.__words[0] = v19;
  block.__r_.__value_.__l.__size_ = 1174405120;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  v67 = &__block_descriptor_tmp_193;
  if (v41)
  {
    v68 = _Block_copy(v41);
    v69 = v38;
    if (v38)
      goto LABEL_51;
LABEL_54:
    v69 = xpc_null_create();
    v70 = v39;
    if (v39)
      goto LABEL_52;
    goto LABEL_55;
  }
  v68 = 0;
  v69 = v38;
  if (!v38)
    goto LABEL_54;
LABEL_51:
  xpc_retain(v38);
  v70 = v39;
  if (v39)
  {
LABEL_52:
    xpc_retain(v39);
    goto LABEL_56;
  }
LABEL_55:
  v70 = xpc_null_create();
LABEL_56:
  dispatch_async(v42, &block);
  xpc_release(v70);
  v70 = 0;
  xpc_release(v69);
  v69 = 0;
  if (v68)
    _Block_release(v68);
  if (v41)
    _Block_release(v41);
  xpc_release(v39);
  xpc_release(v38);
  xpc_release(v32);
  _Block_object_dispose(&v56, 8);
  operator delete(v26);
  v7 = v65;
  _Block_object_dispose(&v60, 8);
  if (v7)
    goto LABEL_61;
}

void sub_1B3D304E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = a2[1];
  return result;
}

uint64_t ___ZZN5radio20QMICommandDriverBase15getFirmwareInfoEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm21GetChipIdSerialNumber8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3074C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D30760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3078C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getManifestStatus(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  void *v20;
  dispatch_object_t object;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  _OWORD v27[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v4;
  v27[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v27);
  v22 = v3 + 320;
  v23 = QMIServiceMsg::create();
  v24 = 25000;
  v25 = 0;
  v26 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v18[3] = &__block_descriptor_tmp_206;
  v18[4] = v3;
  v18[5] = v2[3];
  v6 = (std::__shared_weak_count *)v2[4];
  v19 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)v2[1];
  if (v9)
    v9 = _Block_copy(v9);
  v20 = v9;
  v10 = v2[2];
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17GetManifestStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9A38;
  aBlock[4] = v18;
  v11 = _Block_copy(aBlock);
  v26 = v11;
  if (v23)
  {
    qmi::Client::send();
    v11 = v26;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v20)
    _Block_release(v20);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v27);
  v12 = (std::__shared_weak_count *)v2[4];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = v2[2];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v2[1];
  if (v14)
    _Block_release(v14);
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1B3D3097C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v26;
  NSObject *v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    v27 = v24[2];
    if (!v27)
      goto LABEL_13;
  }
  dispatch_release(v27);
  v28 = (const void *)v24[1];
  if (!v28)
    goto LABEL_18;
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  tlv *TlvValue;
  int v17;
  tlv *v18;
  tlv *v19;
  int v20;
  tlv *v21;
  char *v22;
  int v23;
  xpc_object_t v24;
  xpc_object_t v25;
  NSObject *v26;
  tlv *v27;
  int v28;
  tlv *v29;
  int v30;
  __int128 v31;
  tlv *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  const void *v41;
  void *v42;
  NSObject *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  _QWORD *(*v48)(_QWORD *, uint64_t);
  void *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD v54[2];
  _QWORD *(*v55)(_QWORD *, char **);
  void *v56;
  uint64_t *v57;
  uint64_t *p_block;
  uint64_t *v59;
  _QWORD v60[2];
  uint64_t (*v61)(uint64_t, __int128 *);
  void *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  _QWORD v66[2];
  uint64_t (*v67)(uint64_t, __int128 *);
  void *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  char v83;
  std::__shared_weak_count *v85;
  __int128 v86;
  __int128 v87;
  void *v88;
  xpc_object_t v89;
  xpc_object_t v90;
  tlv *v91;
  uint64_t block;
  __int128 v93;
  __n128 (*v94)(_QWORD *, uint64_t);
  const void *v95;
  xpc_object_t v96;
  xpc_object_t v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v85 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
  {
LABEL_70:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v8 = *((_DWORD *)a2 + 1);
  if (v8)
  {
    v9 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v46 = qmi::asString();
      LODWORD(block) = 67109378;
      HIDWORD(block) = v8;
      LOWORD(v93) = 2080;
      *(_QWORD *)((char *)&v93 + 2) = v46;
      _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "Error = 0x%x (%s)", (uint8_t *)&block, 0x12u);
    }
    v10 = (const char *)qmi::asString();
    v11 = xpc_string_create(v10);
    if (!v11)
      v11 = xpc_null_create();
    v12 = xpc_null_create();
    v13 = (const void *)a1[7];
    if (v13)
      v14 = _Block_copy(v13);
    else
      v14 = 0;
    v26 = a1[8];
    block = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v93 = 1174405120;
    *((_QWORD *)&v93 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
    v94 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_177;
    if (v14)
    {
      v95 = _Block_copy(v14);
      v96 = v11;
      if (v11)
        goto LABEL_26;
    }
    else
    {
      v95 = 0;
      v96 = v11;
      if (v11)
      {
LABEL_26:
        xpc_retain(v11);
        v97 = v12;
        if (v12)
        {
LABEL_27:
          xpc_retain(v12);
LABEL_31:
          dispatch_async(v26, &block);
          xpc_release(v97);
          v97 = 0;
          xpc_release(v96);
          v96 = 0;
          if (v95)
            _Block_release(v95);
          if (v14)
            _Block_release(v14);
          xpc_release(v12);
          xpc_release(v11);
          goto LABEL_70;
        }
LABEL_30:
        v97 = xpc_null_create();
        goto LABEL_31;
      }
    }
    v96 = xpc_null_create();
    v97 = v12;
    if (v12)
      goto LABEL_27;
    goto LABEL_30;
  }
  v80 = 0;
  v81 = &v80;
  v82 = 0x2000000000;
  v83 = 0;
  v76 = 0;
  v77 = &v76;
  v78 = 0x2000000000;
  v79 = 0;
  v72 = 0;
  v73 = &v72;
  v74 = 0x2000000000;
  v75 = 0;
  block = 0;
  *(_QWORD *)&v93 = &block;
  *((_QWORD *)&v93 + 1) = 0x4002000000;
  v94 = __Block_byref_object_copy__178;
  v95 = __Block_byref_object_dispose__179;
  v97 = 0;
  v98 = 0;
  v96 = 0;
  v15 = MEMORY[0x1E0C809B0];
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 0x40000000;
  v67 = (uint64_t (*)(uint64_t, __int128 *))___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
  v68 = &unk_1E66D9968;
  v70 = &v80;
  v71 = v5;
  v69 = &v76;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v18 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v17, (const unsigned __int8 *)2);
    LOWORD(v86) = *(_WORD *)v18;
    v67((uint64_t)v66, &v86);
  }
  v60[0] = v15;
  v60[1] = 0x40000000;
  v61 = (uint64_t (*)(uint64_t, __int128 *))___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3;
  v62 = &unk_1E66D9990;
  v63 = &v72;
  v64 = &v80;
  v65 = v5;
  v19 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v21 = v19;
  if (v19)
  {
    tlv::throwIfNotEnoughBytes(v19, (const unsigned __int8 *)v19 + v20, (const unsigned __int8 *)2);
    LOWORD(v86) = *(_WORD *)v21;
    v61((uint64_t)v60, &v86);
  }
  v54[0] = v15;
  v54[1] = 0x40000000;
  v55 = ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_4;
  v56 = &unk_1E66D99B8;
  v57 = &v76;
  p_block = &block;
  v59 = &v80;
  v22 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (v22)
  {
    v86 = 0uLL;
    *(_QWORD *)&v87 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v86, v22, &v22[v23], v23);
    v55(v54, (char **)&v86);
    if ((_QWORD)v86)
    {
      *((_QWORD *)&v86 + 1) = v86;
      operator delete((void *)v86);
    }
  }
  if (!*((_BYTE *)v81 + 24))
  {
    v47[0] = v15;
    v47[1] = 0x40000000;
    v48 = ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_5;
    v49 = &unk_1E66D99E0;
    v50 = &v76;
    v51 = &v72;
    v52 = &block;
    v53 = v5;
    v27 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v29 = v27;
    if (v27)
    {
      v30 = v28;
      v91 = v27;
      *(_QWORD *)&v31 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v86 = v31;
      v87 = v31;
      tlv::parseV<bsp::tlv::abm::ManifestStruct>(&v91, v28, (uint64_t)&v86);
      v32 = v91;
      if (v91)
        v48(v47, (uint64_t)&v86);
      if (*((_QWORD *)&v86 + 1))
      {
        *(_QWORD *)&v87 = *((_QWORD *)&v86 + 1);
        operator delete(*((void **)&v86 + 1));
      }
      if (!v32)
        ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 1, v29, v30);
    }
  }
  v24 = xpc_dictionary_create(0, 0, 0);
  if (v24 || (v24 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1B5E2FB70](v24) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v24);
      v25 = v24;
    }
    else
    {
      v25 = xpc_null_create();
    }
  }
  else
  {
    v25 = xpc_null_create();
    v24 = 0;
  }
  xpc_release(v24);
  v33 = xpc_int64_create(*((unsigned int *)v77 + 6));
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E0DDF7F0], v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = xpc_int64_create(*((unsigned int *)v73 + 6));
  if (!v35)
    v35 = xpc_null_create();
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E0DDF7E8], v35);
  v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  v37 = xpc_data_create(*(const void **)(v93 + 40), *(_QWORD *)(v93 + 48) - *(_QWORD *)(v93 + 40));
  if (!v37)
    v37 = xpc_null_create();
  xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E0DDF7E0], v37);
  v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  v39 = xpc_null_create();
  if (v25)
  {
    xpc_retain(v25);
    v40 = v25;
    v41 = (const void *)a1[7];
    if (v41)
    {
LABEL_53:
      v42 = _Block_copy(v41);
      goto LABEL_56;
    }
  }
  else
  {
    v40 = xpc_null_create();
    v41 = (const void *)a1[7];
    if (v41)
      goto LABEL_53;
  }
  v42 = 0;
LABEL_56:
  v43 = a1[8];
  *(_QWORD *)&v86 = v15;
  *((_QWORD *)&v86 + 1) = 1174405120;
  *(_QWORD *)&v87 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  *((_QWORD *)&v87 + 1) = &__block_descriptor_tmp_193;
  if (v42)
  {
    v88 = _Block_copy(v42);
    v89 = v39;
    if (v39)
      goto LABEL_58;
LABEL_61:
    v89 = xpc_null_create();
    v90 = v40;
    if (v40)
      goto LABEL_59;
    goto LABEL_62;
  }
  v88 = 0;
  v89 = v39;
  if (!v39)
    goto LABEL_61;
LABEL_58:
  xpc_retain(v39);
  v90 = v40;
  if (v40)
  {
LABEL_59:
    xpc_retain(v40);
    goto LABEL_63;
  }
LABEL_62:
  v90 = xpc_null_create();
LABEL_63:
  dispatch_async(v43, &v86);
  xpc_release(v90);
  v90 = 0;
  xpc_release(v89);
  v89 = 0;
  if (v88)
    _Block_release(v88);
  if (v42)
    _Block_release(v42);
  xpc_release(v40);
  xpc_release(v39);
  xpc_release(v25);
  _Block_object_dispose(&block, 8);
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  _Block_object_dispose(&v72, 8);
  _Block_object_dispose(&v76, 8);
  _Block_object_dispose(&v80, 8);
  v7 = v85;
  if (v85)
    goto LABEL_70;
}

void sub_1B3D3121C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;
  void *v49;
  void *v50;

  v49 = *(void **)(v47 - 232);
  if (v49)
  {
    *(_QWORD *)(v47 - 224) = v49;
    operator delete(v49);
  }
  _Block_object_dispose((const void *)(v47 - 176), 8);
  v50 = *(void **)(v47 - 136);
  if (v50)
  {
    *(_QWORD *)(v47 - 128) = v50;
    operator delete(v50);
  }
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a47, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v47 - 256);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2(uint64_t result, _WORD *a2)
{
  int v2;
  int v3;

  if (*a2 == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*a2)
    v3 = v2;
  else
    v3 = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
  return result;
}

uint64_t ___ZZN5radio20QMICommandDriverBase17getManifestStatusEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3(uint64_t result, _WORD *a2)
{
  int v2;
  int v3;

  if (*a2 == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*a2)
    v3 = v2;
  else
    v3 = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = v3;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm17GetManifestStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3162C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D31640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3166C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>(radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::getManifest(dispatch::callback<void({block_pointer})(xpc::object,xpc::object)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  void *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  void *v20;
  dispatch_object_t object;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  void *v26;
  _OWORD v27[2];
  _QWORD aBlock[5];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27[0] = v4;
  v27[1] = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v27);
  v22 = v3 + 320;
  v23 = QMIServiceMsg::create();
  v24 = 25000;
  v25 = 0;
  v26 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke;
  v18[3] = &__block_descriptor_tmp_217;
  v18[4] = v3;
  v18[5] = v2[3];
  v6 = (std::__shared_weak_count *)v2[4];
  v19 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = (void *)v2[1];
  if (v9)
    v9 = _Block_copy(v9);
  v20 = v9;
  v10 = v2[2];
  object = v10;
  if (v10)
    dispatch_retain(v10);
  aBlock[0] = v5;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm11GetManifest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9B30;
  aBlock[4] = v18;
  v11 = _Block_copy(aBlock);
  v26 = v11;
  if (v23)
  {
    qmi::Client::send();
    v11 = v26;
  }
  if (v11)
    _Block_release(v11);
  if (object)
    dispatch_release(object);
  if (v20)
    _Block_release(v20);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v27);
  v12 = (std::__shared_weak_count *)v2[4];
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  v13 = v2[2];
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)v2[1];
  if (v14)
    _Block_release(v14);
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1B3D3185C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v26;
  NSObject *v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a19)
    qmi::Client::send();
  if (a22)
    _Block_release(a22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = (std::__shared_weak_count *)v24[4];
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    v27 = v24[2];
    if (!v27)
    {
LABEL_13:
      v28 = (const void *)v24[1];
      if (!v28)
      {
LABEL_18:
        operator delete(v24);
        v29 = (std::__shared_weak_count *)v23[2];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        operator delete(v23);
        _Unwind_Resume(a1);
      }
LABEL_17:
      _Block_release(v28);
      goto LABEL_18;
    }
  }
  else
  {
    v27 = v24[2];
    if (!v27)
      goto LABEL_13;
  }
  dispatch_release(v27);
  v28 = (const void *)v24[1];
  if (!v28)
    goto LABEL_18;
  goto LABEL_17;
}

void ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  const void *v13;
  void *v14;
  tlv *v15;
  tlv *TlvValue;
  int v17;
  tlv *v18;
  int v19;
  NSObject *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  tlv *v29;
  int v30;
  char *v31;
  const unsigned __int8 *v32;
  unint64_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  tlv *v36;
  int v37;
  char *v38;
  const unsigned __int8 *v39;
  unint64_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  char *v43;
  int v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  const void *v49;
  void *v50;
  NSObject *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  _QWORD v54[2];
  char *(*v55)(uint64_t, char **);
  void *v56;
  tlv **v57;
  _QWORD v58[2];
  char *(*v59)(uint64_t, char **);
  void *v60;
  tlv **v61;
  _QWORD v62[2];
  _QWORD *(*v63)(uint64_t, char **);
  void *v64;
  tlv **p_block;
  _QWORD v66[2];
  void (*v67)(_QWORD *, void **);
  void *v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  std::__shared_weak_count *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  tlv *block;
  __int128 v91;
  __n128 (*v92)(_QWORD *, uint64_t);
  const void *v93;
  xpc_object_t v94;
  xpc_object_t v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v86 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
  {
LABEL_81:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v8 = *((_DWORD *)a2 + 1);
  if (v8)
  {
    v9 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 67109378;
      HIDWORD(block) = v8;
      LOWORD(v91) = 2080;
      *(_QWORD *)((char *)&v91 + 2) = qmi::asString();
      _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "Error = 0x%x (%s)", (uint8_t *)&block, 0x12u);
    }
    v10 = (const char *)qmi::asString();
    v11 = xpc_string_create(v10);
    if (!v11)
      v11 = xpc_null_create();
    v12 = xpc_null_create();
    v13 = (const void *)a1[7];
    if (v13)
      v14 = _Block_copy(v13);
    else
      v14 = 0;
    v20 = a1[8];
    block = (tlv *)MEMORY[0x1E0C809B0];
    *(_QWORD *)&v91 = 1174405120;
    *((_QWORD *)&v91 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJS2_S2_EEEvDpT__block_invoke_0;
    v92 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_177;
    if (v14)
    {
      v93 = _Block_copy(v14);
      v94 = v11;
      if (v11)
        goto LABEL_17;
    }
    else
    {
      v93 = 0;
      v94 = v11;
      if (v11)
      {
LABEL_17:
        xpc_retain(v11);
        v95 = v12;
        if (v12)
        {
LABEL_18:
          xpc_retain(v12);
LABEL_22:
          dispatch_async(v20, &block);
          xpc_release(v95);
          v95 = 0;
          xpc_release(v94);
          v94 = 0;
          if (v93)
            _Block_release(v93);
          if (v14)
            _Block_release(v14);
          xpc_release(v12);
          xpc_release(v11);
          goto LABEL_81;
        }
LABEL_21:
        v95 = xpc_null_create();
        goto LABEL_22;
      }
    }
    v94 = xpc_null_create();
    v95 = v12;
    if (v12)
      goto LABEL_18;
    goto LABEL_21;
  }
  v81 = 0;
  v82 = &v81;
  v83 = 0x2000000000;
  v84 = 0;
  v77 = 0;
  v78 = &v77;
  v79 = 0x2000000000;
  v80 = 0;
  v73 = 0;
  v74 = &v73;
  v75 = 0x2000000000;
  v76 = 0;
  v15 = (tlv *)MEMORY[0x1E0C809B0];
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 0x40000000;
  v67 = (void (*)(_QWORD *, void **))___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2;
  v68 = &unk_1E66D9A60;
  v69 = &v81;
  v70 = &v77;
  v71 = &v73;
  v72 = v5;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v18 = TlvValue;
  if (TlvValue)
  {
    v19 = v17;
    block = TlvValue;
    v87 = (void *)tlv::parseV<bsp::tlv::abm::ManifestStatus>(&block, v17);
    if (block)
      v67(v66, &v87);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 1, v18, v19);
  }
  v21 = xpc_dictionary_create(0, 0, 0);
  if (v21 || (v21 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1B5E2FB70](v21) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v21);
      v22 = v21;
    }
    else
    {
      v22 = xpc_null_create();
    }
  }
  else
  {
    v22 = xpc_null_create();
    v21 = 0;
  }
  xpc_release(v21);
  v23 = xpc_int64_create(*((unsigned int *)v82 + 6));
  if (!v23)
    v23 = xpc_null_create();
  xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x1E0DDF850], v23);
  v24 = xpc_null_create();
  xpc_release(v23);
  xpc_release(v24);
  v25 = xpc_int64_create(*((unsigned int *)v78 + 6));
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x1E0DDF880], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = xpc_int64_create(*((unsigned int *)v74 + 6));
  if (!v27)
    v27 = xpc_null_create();
  xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x1E0DDF878], v27);
  v28 = xpc_null_create();
  xpc_release(v27);
  xpc_release(v28);
  if (!*((_DWORD *)v82 + 6))
  {
    block = 0;
    *(_QWORD *)&v91 = &block;
    *((_QWORD *)&v91 + 1) = 0x4002000000;
    v92 = __Block_byref_object_copy__178;
    v93 = __Block_byref_object_dispose__179;
    v95 = 0;
    v96 = 0;
    v94 = 0;
    v62[0] = v15;
    v62[1] = 0x40000000;
    v63 = ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_3;
    v64 = &unk_1E66D9A88;
    p_block = &block;
    v29 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v31 = (char *)v29;
    if (v29)
    {
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v32 = (const unsigned __int8 *)v29 + v30;
      tlv::throwIfNotEnoughBytes(v29, v32, (const unsigned __int8 *)2);
      v33 = *(unsigned __int16 *)v31;
      tlv::throwIfNotEnoughBytes((tlv *)(v31 + 2), v32, (const unsigned __int8 *)v33);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v87, v31 + 2, &v31[v33 + 2], v33);
      v63((uint64_t)v62, (char **)&v87);
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
    }
    v34 = xpc_data_create(*(const void **)(v91 + 40), *(_QWORD *)(v91 + 48) - *(_QWORD *)(v91 + 40));
    if (!v34)
      v34 = xpc_null_create();
    xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x1E0DDF818], v34);
    v35 = xpc_null_create();
    xpc_release(v34);
    xpc_release(v35);
    _Block_object_dispose(&block, 8);
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
  }
  if (!*((_DWORD *)v78 + 6))
  {
    block = 0;
    *(_QWORD *)&v91 = &block;
    *((_QWORD *)&v91 + 1) = 0x4002000000;
    v92 = __Block_byref_object_copy__211;
    v93 = __Block_byref_object_dispose__212;
    v95 = 0;
    v96 = 0;
    v94 = 0;
    v58[0] = v15;
    v58[1] = 0x40000000;
    v59 = ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_213;
    v60 = &unk_1E66D9AB0;
    v61 = &block;
    v36 = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v38 = (char *)v36;
    if (v36)
    {
      v87 = 0;
      v88 = 0;
      v89 = 0;
      v39 = (const unsigned __int8 *)v36 + v37;
      tlv::throwIfNotEnoughBytes(v36, v39, (const unsigned __int8 *)2);
      v40 = *(unsigned __int16 *)v38;
      tlv::throwIfNotEnoughBytes((tlv *)(v38 + 2), v39, (const unsigned __int8 *)v40);
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v87, v38 + 2, &v38[v40 + 2], v40);
      v59((uint64_t)v58, (char **)&v87);
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
    }
    v41 = xpc_data_create(*(const void **)(v91 + 40), *(_QWORD *)(v91 + 48) - *(_QWORD *)(v91 + 40));
    if (!v41)
      v41 = xpc_null_create();
    xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x1E0DDF868], v41);
    v42 = xpc_null_create();
    xpc_release(v41);
    xpc_release(v42);
    _Block_object_dispose(&block, 8);
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
  }
  if (!*((_DWORD *)v74 + 6))
  {
    block = 0;
    *(_QWORD *)&v91 = &block;
    *((_QWORD *)&v91 + 1) = 0x4002000000;
    v92 = __Block_byref_object_copy__211;
    v93 = __Block_byref_object_dispose__212;
    v95 = 0;
    v96 = 0;
    v94 = 0;
    v54[0] = v15;
    v54[1] = 0x40000000;
    v55 = ___ZZN5radio20QMICommandDriverBase11getManifestEN8dispatch8callbackIU13block_pointerFvN3xpc6objectES4_EEEENK3__0clEv_block_invoke_2_215;
    v56 = &unk_1E66D9AD8;
    v57 = &block;
    v43 = (char *)qmi::MessageBase::findTlvValue(a2);
    if (v43)
    {
      v87 = 0;
      v88 = 0;
      v89 = 0;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v87, v43, &v43[v44], v44);
      v55((uint64_t)v54, (char **)&v87);
      if (v87)
      {
        v88 = v87;
        operator delete(v87);
      }
    }
    v45 = xpc_data_create(*(const void **)(v91 + 40), *(_QWORD *)(v91 + 48) - *(_QWORD *)(v91 + 40));
    if (!v45)
      v45 = xpc_null_create();
    xpc_dictionary_set_value(v22, (const char *)*MEMORY[0x1E0DDF848], v45);
    v46 = xpc_null_create();
    xpc_release(v45);
    xpc_release(v46);
    _Block_object_dispose(&block, 8);
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
  }
  v47 = xpc_null_create();
  if (v22)
  {
    xpc_retain(v22);
    v48 = v22;
    v49 = (const void *)a1[7];
    if (v49)
    {
LABEL_66:
      v50 = _Block_copy(v49);
      goto LABEL_69;
    }
  }
  else
  {
    v48 = xpc_null_create();
    v49 = (const void *)a1[7];
    if (v49)
      goto LABEL_66;
  }
  v50 = 0;
LABEL_69:
  v51 = a1[8];
  block = v15;
  *(_QWORD *)&v91 = 1174405120;
  *((_QWORD *)&v91 + 1) = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc6objectES2_EEclIJNS1_4dictES7_EEEvDpT__block_invoke;
  v92 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_193;
  if (v50)
  {
    v93 = _Block_copy(v50);
    v94 = v47;
    if (v47)
      goto LABEL_71;
LABEL_74:
    v94 = xpc_null_create();
    v95 = v48;
    if (v48)
      goto LABEL_72;
    goto LABEL_75;
  }
  v93 = 0;
  v94 = v47;
  if (!v47)
    goto LABEL_74;
LABEL_71:
  xpc_retain(v47);
  v95 = v48;
  if (v48)
  {
LABEL_72:
    xpc_retain(v48);
    goto LABEL_76;
  }
LABEL_75:
  v95 = xpc_null_create();
LABEL_76:
  dispatch_async(v51, &block);
  xpc_release(v95);
  v95 = 0;
  xpc_release(v94);
  v94 = 0;
  if (v93)
    _Block_release(v93);
  if (v50)
    _Block_release(v50);
  xpc_release(v48);
  xpc_release(v47);
  xpc_release(v22);
  _Block_object_dispose(&v73, 8);
  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v81, 8);
  v7 = v86;
  if (v86)
    goto LABEL_81;
}

void sub_1B3D3231C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

__n128 __Block_byref_object_copy__211(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__212(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm11GetManifest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D32710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D32724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D32750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(char *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char *v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  char v18;
  void *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  unint64_t v27;
  __int128 v28;
  char v29;

  v6 = __src;
  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(void **)result;
  if (v8 - *(_QWORD *)result < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_38;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_38:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    result = (char *)operator new(v11);
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v11];
    if (v6 == a3)
    {
      v13 = result;
    }
    else
    {
      v12 = a3 - v6;
      if ((unint64_t)(a3 - v6) < 0x20)
        goto LABEL_17;
      if ((unint64_t)(result - v6) < 0x20)
        goto LABEL_17;
      v13 = &result[v12 & 0xFFFFFFFFFFFFFFE0];
      v14 = result + 16;
      v15 = (__int128 *)(v6 + 16);
      v16 = v12 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      v6 += v12 & 0xFFFFFFFFFFFFFFE0;
      result += v12 & 0xFFFFFFFFFFFFFFE0;
      if (v12 != (v12 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_17:
        v13 = result;
        do
        {
          v18 = *v6++;
          *v13++ = v18;
        }
        while (v6 != a3);
      }
    }
    goto LABEL_37;
  }
  v19 = (void *)*((_QWORD *)result + 1);
  if ((_BYTE *)v19 - (_BYTE *)v9 < a4)
  {
    v20 = &__src[(_BYTE *)v19 - (_BYTE *)v9];
    if (v19 == v9)
    {
      v21 = *(_QWORD *)result;
      v22 = *(char **)result;
      if (v20 == a3)
        goto LABEL_36;
    }
    else
    {
      result = (char *)memmove(*(void **)result, __src, (_BYTE *)v19 - (_BYTE *)v9);
      v21 = v7[1];
      v22 = (char *)v21;
      if (v20 == a3)
        goto LABEL_36;
    }
    v24 = &a3[(_QWORD)v9] - &v6[(_QWORD)v19];
    if (v24 >= 0x20)
    {
      v22 = (char *)v21;
      if ((unint64_t)((_BYTE *)v9 - &v6[(_QWORD)v19] + v21) >= 0x20)
      {
        v20 += v24 & 0xFFFFFFFFFFFFFFE0;
        v22 = (char *)(v21 + (v24 & 0xFFFFFFFFFFFFFFE0));
        v25 = (_OWORD *)(v21 + 16);
        v26 = (__int128 *)&v6[(_BYTE *)v19 - (_BYTE *)v9 + 16];
        v27 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v28 = *v26;
          *(v25 - 1) = *(v26 - 1);
          *v25 = v28;
          v25 += 2;
          v26 += 2;
          v27 -= 32;
        }
        while (v27);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_36;
      }
    }
    else
    {
      v22 = (char *)v21;
    }
    do
    {
      v29 = *v20++;
      *v22++ = v29;
    }
    while (v20 != a3);
LABEL_36:
    v13 = v22;
    goto LABEL_37;
  }
  v23 = a3 - __src;
  if (a3 != __src)
    result = (char *)memmove(*(void **)result, __src, v23);
  v13 = (char *)v9 + v23;
LABEL_37:
  v7[1] = v13;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::screenState(BOOL)::$_0>(radio::QMICommandDriverBase::screenState(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::screenState(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::screenState(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  char *v6;
  char *v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  _QWORD aBlock[6];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46 = v4;
  v47 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v46);
  v5 = *((_BYTE *)v2 + 8);
  v6 = (char *)*((_QWORD *)&v46 + 1);
  v7 = (char *)v47;
  v8 = (const void **)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1) != (_QWORD)v47)
  {
    v8 = (const void **)*((_QWORD *)&v46 + 1);
    while (*((_BYTE *)*v8 + 8) != 16)
    {
      if (++v8 == (const void **)v47)
        goto LABEL_9;
    }
  }
  if (v8 == (const void **)v47)
  {
LABEL_9:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[4] = 16;
    *(_QWORD *)v11 = off_1E66D9BA8;
    if ((unint64_t)v7 < *((_QWORD *)&v47 + 1))
    {
      *(_QWORD *)v7 = v11;
      v13 = (uint64_t)(v7 + 8);
LABEL_22:
      v10 = (char *)v12 + 9;
      *(_QWORD *)&v47 = v13;
      goto LABEL_23;
    }
    v14 = v7 - v6;
    v15 = (v7 - v6) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v17 = *((_QWORD *)&v47 + 1) - (_QWORD)v6;
    if ((uint64_t)(*((_QWORD *)&v47 + 1) - (_QWORD)v6) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v12;
      v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((_QWORD *)&v46 + 1) = v20;
        *(_QWORD *)&v47 = v13;
        *((_QWORD *)&v47 + 1) = v21;
        if (!v6)
          goto LABEL_22;
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      v19 = 0;
      v20 = (_QWORD *)(8 * v15);
      v21 = 0;
      *(_QWORD *)(8 * v15) = v12;
      v13 = 8 * v15 + 8;
      if (v6 == v7)
        goto LABEL_20;
    }
    if ((unint64_t)(v14 - 8) < 0x58)
      goto LABEL_54;
    if ((unint64_t)(v6 - v19) < 0x20)
      goto LABEL_54;
    v31 = ((unint64_t)(v14 - 8) >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v7[-v32];
    v20 = (_QWORD *)((char *)v20 - v32);
    v34 = &v19[8 * v15 - 16];
    v35 = v7 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v7 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_54:
      do
      {
        v38 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v20 = v38;
      }
      while (v7 != v6);
    }
    v6 = (char *)*((_QWORD *)&v46 + 1);
    *((_QWORD *)&v46 + 1) = v20;
    *(_QWORD *)&v47 = v13;
    *((_QWORD *)&v47 + 1) = v21;
    if (!v6)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v9)
    __cxa_bad_cast();
  v10 = v9 + 9;
LABEL_23:
  *v10 = v5;
  v41 = v3 + 320;
  v42 = QMIServiceMsg::create();
  v43 = 25000;
  v44 = 0;
  v45 = 0;
  v22 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 1174405120;
  v39[2] = ___ZZN5radio20QMICommandDriverBase11screenStateEbENK3__0clEv_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_221;
  v39[4] = v3;
  v39[5] = v2[2];
  v23 = (std::__shared_weak_count *)v2[3];
  v40 = v23;
  if (v23)
  {
    p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
  }
  aBlock[0] = v22;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm12SendAPStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9BD8;
  aBlock[4] = v39;
  v26 = _Block_copy(aBlock);
  v45 = v26;
  if (v42)
  {
    qmi::Client::send();
    v26 = v45;
  }
  if (v26)
    _Block_release(v26);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v46);
  v27 = (std::__shared_weak_count *)v2[3];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  operator delete(v2);
  v28 = (std::__shared_weak_count *)a1[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a1);
}

void sub_1B3D32D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,char a21)
{
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a17)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  v24 = (std::__shared_weak_count *)v22[3];
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  operator delete(v22);
  v25 = (std::__shared_weak_count *)v21[2];
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN5radio20QMICommandDriverBase11screenStateEbENK3__0clEv_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t v11[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        if (!*(_DWORD *)(a2 + 4))
        {
          v8 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v11 = 0;
            _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I Update AP Screen Status successful", v11, 2u);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ScreenStatus>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ScreenStatus>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ScreenStatus>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D9BA8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm12SendAPStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D32FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D32FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D33004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0>(radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::setBreadMode(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  char *v6;
  char *v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  _QWORD aBlock[6];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = v4;
  v48 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v47);
  v5 = *((_BYTE *)v2 + 8);
  v6 = (char *)*((_QWORD *)&v47 + 1);
  v7 = (char *)v48;
  v8 = (const void **)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1) != (_QWORD)v48)
  {
    v8 = (const void **)*((_QWORD *)&v47 + 1);
    while (*((_BYTE *)*v8 + 8) != 16)
    {
      if (++v8 == (const void **)v48)
        goto LABEL_9;
    }
  }
  if (v8 == (const void **)v48)
  {
LABEL_9:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[4] = 16;
    *(_QWORD *)v11 = off_1E66D9C50;
    if ((unint64_t)v7 < *((_QWORD *)&v48 + 1))
    {
      *(_QWORD *)v7 = v11;
      v13 = (uint64_t)(v7 + 8);
LABEL_22:
      v10 = (char *)v12 + 9;
      *(_QWORD *)&v48 = v13;
      goto LABEL_23;
    }
    v14 = v7 - v6;
    v15 = (v7 - v6) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v17 = *((_QWORD *)&v48 + 1) - (_QWORD)v6;
    if ((uint64_t)(*((_QWORD *)&v48 + 1) - (_QWORD)v6) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v12;
      v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((_QWORD *)&v47 + 1) = v20;
        *(_QWORD *)&v48 = v13;
        *((_QWORD *)&v48 + 1) = v21;
        if (!v6)
          goto LABEL_22;
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      v19 = 0;
      v20 = (_QWORD *)(8 * v15);
      v21 = 0;
      *(_QWORD *)(8 * v15) = v12;
      v13 = 8 * v15 + 8;
      if (v6 == v7)
        goto LABEL_20;
    }
    if ((unint64_t)(v14 - 8) < 0x58)
      goto LABEL_54;
    if ((unint64_t)(v6 - v19) < 0x20)
      goto LABEL_54;
    v31 = ((unint64_t)(v14 - 8) >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v7[-v32];
    v20 = (_QWORD *)((char *)v20 - v32);
    v34 = &v19[8 * v15 - 16];
    v35 = v7 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v7 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_54:
      do
      {
        v38 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v20 = v38;
      }
      while (v7 != v6);
    }
    v6 = (char *)*((_QWORD *)&v47 + 1);
    *((_QWORD *)&v47 + 1) = v20;
    *(_QWORD *)&v48 = v13;
    *((_QWORD *)&v48 + 1) = v21;
    if (!v6)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v9)
    __cxa_bad_cast();
  v10 = v9 + 9;
LABEL_23:
  *v10 = v5;
  v42 = v3 + 320;
  v43 = QMIServiceMsg::create();
  v44 = 25000;
  v45 = 0;
  v46 = 0;
  v22 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 1174405120;
  v39[2] = ___ZZN5radio20QMICommandDriverBase12setBreadModeEbENK3__0clEv_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_229;
  v39[4] = v3;
  v39[5] = v2[2];
  v23 = (std::__shared_weak_count *)v2[3];
  v40 = v23;
  if (v23)
  {
    p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
  }
  v41 = *((_BYTE *)v2 + 8);
  aBlock[0] = v22;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendBreadMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9C80;
  aBlock[4] = v39;
  v26 = _Block_copy(aBlock);
  v46 = v26;
  if (v43)
  {
    qmi::Client::send();
    v26 = v46;
  }
  if (v26)
    _Block_release(v26);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v47);
  v27 = (std::__shared_weak_count *)v2[3];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  operator delete(v2);
  v28 = (std::__shared_weak_count *)a1[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a1);
}

void sub_1B3D333A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *aBlock,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a19)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = (std::__shared_weak_count *)v24[3];
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  operator delete(v24);
  v27 = (std::__shared_weak_count *)v23[2];
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZN5radio20QMICommandDriverBase12setBreadModeEbENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        v9 = *(NSObject **)(v5 + 40);
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            if (*(_BYTE *)(a1 + 56))
              v10 = "enable";
            else
              v10 = "disable";
            v14 = 136315138;
            v15 = v10;
            _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "Failed to %s Bread mode", (uint8_t *)&v14, 0xCu);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_BYTE *)(a1 + 56))
            v11 = "enabled";
          else
            v11 = "disabled";
          v14 = 136315138;
          v15 = v11;
          _os_log_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully %s Bread mode", (uint8_t *)&v14, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BreadModeType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BreadModeType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BreadModeType>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D9C50;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendBreadMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D336F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3370C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D33738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0>(radio::QMICommandDriverBase::setButterMode(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::setButterMode(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  char *v6;
  char *v7;
  const void **v8;
  char *v9;
  _BYTE *v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  void *v46;
  __int128 v47;
  __int128 v48;
  _QWORD aBlock[6];

  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v47 = v4;
  v48 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v47);
  v5 = *((_BYTE *)v2 + 8);
  v6 = (char *)*((_QWORD *)&v47 + 1);
  v7 = (char *)v48;
  v8 = (const void **)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1) != (_QWORD)v48)
  {
    v8 = (const void **)*((_QWORD *)&v47 + 1);
    while (*((_BYTE *)*v8 + 8) != 17)
    {
      if (++v8 == (const void **)v48)
        goto LABEL_9;
    }
  }
  if (v8 == (const void **)v48)
  {
LABEL_9:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[4] = 17;
    *(_QWORD *)v11 = off_1E66D9CF8;
    if ((unint64_t)v7 < *((_QWORD *)&v48 + 1))
    {
      *(_QWORD *)v7 = v11;
      v13 = (uint64_t)(v7 + 8);
LABEL_22:
      v10 = (char *)v12 + 9;
      *(_QWORD *)&v48 = v13;
      goto LABEL_23;
    }
    v14 = v7 - v6;
    v15 = (v7 - v6) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v17 = *((_QWORD *)&v48 + 1) - (_QWORD)v6;
    if ((uint64_t)(*((_QWORD *)&v48 + 1) - (_QWORD)v6) >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = operator new(8 * v18);
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v12;
      v13 = (uint64_t)(v20 + 1);
      if (v6 == v7)
      {
LABEL_20:
        *((_QWORD *)&v47 + 1) = v20;
        *(_QWORD *)&v48 = v13;
        *((_QWORD *)&v48 + 1) = v21;
        if (!v6)
          goto LABEL_22;
LABEL_21:
        operator delete(v6);
        goto LABEL_22;
      }
    }
    else
    {
      v19 = 0;
      v20 = (_QWORD *)(8 * v15);
      v21 = 0;
      *(_QWORD *)(8 * v15) = v12;
      v13 = 8 * v15 + 8;
      if (v6 == v7)
        goto LABEL_20;
    }
    if ((unint64_t)(v14 - 8) < 0x58)
      goto LABEL_54;
    if ((unint64_t)(v6 - v19) < 0x20)
      goto LABEL_54;
    v31 = ((unint64_t)(v14 - 8) >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v7[-v32];
    v20 = (_QWORD *)((char *)v20 - v32);
    v34 = &v19[8 * v15 - 16];
    v35 = v7 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v7 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_54:
      do
      {
        v38 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v20 = v38;
      }
      while (v7 != v6);
    }
    v6 = (char *)*((_QWORD *)&v47 + 1);
    *((_QWORD *)&v47 + 1) = v20;
    *(_QWORD *)&v48 = v13;
    *((_QWORD *)&v48 + 1) = v21;
    if (!v6)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v9)
    __cxa_bad_cast();
  v10 = v9 + 9;
LABEL_23:
  *v10 = v5;
  v42 = v3 + 320;
  v43 = QMIServiceMsg::create();
  v44 = 25000;
  v45 = 0;
  v46 = 0;
  v22 = MEMORY[0x1E0C809B0];
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 1174405120;
  v39[2] = ___ZZN5radio20QMICommandDriverBase13setButterModeEbENK3__0clEv_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_233;
  v39[4] = v3;
  v39[5] = v2[2];
  v23 = (std::__shared_weak_count *)v2[3];
  v40 = v23;
  if (v23)
  {
    p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
  }
  v41 = *((_BYTE *)v2 + 8);
  aBlock[0] = v22;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendBreadMode8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9C80;
  aBlock[4] = v39;
  v26 = _Block_copy(aBlock);
  v46 = v26;
  if (v43)
  {
    qmi::Client::send();
    v26 = v46;
  }
  if (v26)
    _Block_release(v26);
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v47);
  v27 = (std::__shared_weak_count *)v2[3];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  operator delete(v2);
  v28 = (std::__shared_weak_count *)a1[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a1);
}

void sub_1B3D33AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *aBlock,char a23)
{
  _QWORD *v23;
  _QWORD *v24;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a19)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  v26 = (std::__shared_weak_count *)v24[3];
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  operator delete(v24);
  v27 = (std::__shared_weak_count *)v23[2];
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZN5radio20QMICommandDriverBase13setButterModeEbENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  const char *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (*(_QWORD *)(a1 + 40))
      {
        v8 = *(_DWORD *)(a2 + 4);
        v9 = *(NSObject **)(v5 + 40);
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            if (*(_BYTE *)(a1 + 56))
              v10 = "enable";
            else
              v10 = "disable";
            v14 = 136315138;
            v15 = v10;
            _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "Failed to %s Butter mode", (uint8_t *)&v14, 0xCu);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          if (*(_BYTE *)(a1 + 56))
            v11 = "enabled";
          else
            v11 = "disabled";
          v14 = 136315138;
          v15 = v11;
          _os_log_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully %s Butter mode", (uint8_t *)&v14, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ButterModeType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ButterModeType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ButterModeType>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66D9CF8;
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<radio::CommandDriver>::execute_wrapped<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0>(radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0,dispatch_queue_s *::default_delete<radio::QMICommandDriverBase::sendVisitInfo(unsigned int,unsigned int)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  const void **v6;
  _DWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _DWORD *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  int v20;
  char *v21;
  char *v22;
  const void **v23;
  char *v24;
  _DWORD *v25;
  char *v26;
  char *v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  _QWORD v63[6];
  std::__shared_weak_count *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  void *v69;
  _QWORD v70[2];
  uint64_t (*v71)(uint64_t, _DWORD *);
  void *v72;
  int v73;
  __int128 v74;
  __int128 v75;
  _QWORD aBlock[7];

  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v74 = v3;
  v75 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v74);
  v70[0] = MEMORY[0x1E0C809B0];
  v70[1] = 0x40000000;
  v71 = ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke;
  v72 = &__block_descriptor_tmp_235;
  v73 = *((_DWORD *)v1 + 6);
  v4 = (char *)*((_QWORD *)&v74 + 1);
  v5 = (char *)v75;
  v6 = (const void **)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1) != (_QWORD)v75)
  {
    v6 = (const void **)*((_QWORD *)&v74 + 1);
    while (*((_BYTE *)*v6 + 8) != 19)
    {
      if (++v6 == (const void **)v75)
        goto LABEL_9;
    }
  }
  if (v6 == (const void **)v75)
  {
LABEL_9:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 19;
    *(_QWORD *)v8 = off_1E66D9D98;
    *((_DWORD *)v8 + 3) = 0;
    v10 = v8 + 12;
    if ((unint64_t)v5 < *((_QWORD *)&v75 + 1))
    {
      *(_QWORD *)v5 = v8;
      v11 = (uint64_t)(v5 + 8);
LABEL_22:
      *(_QWORD *)&v75 = v11;
      v71((uint64_t)v70, v10);
      goto LABEL_23;
    }
    v12 = v5 - v4;
    v13 = (v5 - v4) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      goto LABEL_81;
    v15 = *((_QWORD *)&v75 + 1) - (_QWORD)v4;
    if ((uint64_t)(*((_QWORD *)&v75 + 1) - (_QWORD)v4) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        goto LABEL_82;
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v11 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_20:
        *((_QWORD *)&v74 + 1) = v18;
        *(_QWORD *)&v75 = v11;
        *((_QWORD *)&v75 + 1) = v19;
        if (!v4)
          goto LABEL_22;
LABEL_21:
        operator delete(v4);
        goto LABEL_22;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v9;
      v11 = 8 * v13 + 8;
      if (v4 == v5)
        goto LABEL_20;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_85;
    if ((unint64_t)(v4 - v17) < 0x20)
      goto LABEL_85;
    v46 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    v48 = &v5[-v47];
    v18 = (_QWORD *)((char *)v18 - v47);
    v49 = &v17[8 * v13 - 16];
    v50 = v5 - 16;
    v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *v49 = v52;
      v49 -= 2;
      v50 -= 32;
      v51 -= 4;
    }
    while (v51);
    v5 = v48;
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_85:
      do
      {
        v53 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *--v18 = v53;
      }
      while (v5 != v4);
    }
    v4 = (char *)*((_QWORD *)&v74 + 1);
    *((_QWORD *)&v74 + 1) = v18;
    *(_QWORD *)&v75 = v11;
    *((_QWORD *)&v75 + 1) = v19;
    if (!v4)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v7)
    goto LABEL_80;
  ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke((uint64_t)v70, v7 + 3);
LABEL_23:
  v20 = *((_DWORD *)v1 + 7);
  v21 = (char *)*((_QWORD *)&v74 + 1);
  v22 = (char *)v75;
  v23 = (const void **)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1) != (_QWORD)v75)
  {
    v23 = (const void **)*((_QWORD *)&v74 + 1);
    while (*((_BYTE *)*v23 + 8) != 20)
    {
      if (++v23 == (const void **)v75)
        goto LABEL_31;
    }
  }
  if (v23 != (const void **)v75)
  {
    if (v24)
    {
      v25 = v24 + 12;
      goto LABEL_45;
    }
LABEL_80:
    __cxa_bad_cast();
  }
LABEL_31:
  v26 = (char *)operator new(0x10uLL);
  v27 = v26;
  v26[8] = 20;
  *(_QWORD *)v26 = off_1E66D9DE8;
  *((_DWORD *)v26 + 3) = 0;
  v25 = v26 + 12;
  if ((unint64_t)v22 < *((_QWORD *)&v75 + 1))
  {
    *(_QWORD *)v22 = v26;
    *(_QWORD *)&v75 = v22 + 8;
    goto LABEL_45;
  }
  v28 = v22 - v21;
  v29 = (v22 - v21) >> 3;
  v30 = v29 + 1;
  if ((unint64_t)(v29 + 1) >> 61)
LABEL_81:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v31 = *((_QWORD *)&v75 + 1) - (_QWORD)v21;
  if ((uint64_t)(*((_QWORD *)&v75 + 1) - (_QWORD)v21) >> 2 > v30)
    v30 = v31 >> 2;
  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
    v32 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v32 = v30;
  if (v32)
  {
    if (!(v32 >> 61))
    {
      v33 = operator new(8 * v32);
      v34 = &v33[8 * v29];
      v35 = &v33[8 * v32];
      *v34 = v27;
      v36 = (uint64_t)(v34 + 1);
      if (v21 == v22)
        goto LABEL_42;
LABEL_72:
      if ((unint64_t)(v28 - 8) < 0x58)
        goto LABEL_86;
      if ((unint64_t)(v21 - v33) < 0x20)
        goto LABEL_86;
      v54 = ((unint64_t)(v28 - 8) >> 3) + 1;
      v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      v56 = &v22[-v55];
      v34 = (_QWORD *)((char *)v34 - v55);
      v57 = &v33[8 * v29 - 16];
      v58 = v22 - 16;
      v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60 = *(_OWORD *)v58;
        *(v57 - 1) = *((_OWORD *)v58 - 1);
        *v57 = v60;
        v57 -= 2;
        v58 -= 32;
        v59 -= 4;
      }
      while (v59);
      v22 = v56;
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_86:
        do
        {
          v61 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v34 = v61;
        }
        while (v22 != v21);
      }
      v21 = (char *)*((_QWORD *)&v74 + 1);
      *((_QWORD *)&v74 + 1) = v34;
      *(_QWORD *)&v75 = v36;
      *((_QWORD *)&v75 + 1) = v35;
      if (!v21)
        goto LABEL_44;
      goto LABEL_43;
    }
LABEL_82:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v33 = 0;
  v34 = (_QWORD *)(8 * v29);
  v35 = 0;
  *(_QWORD *)(8 * v29) = v27;
  v36 = 8 * v29 + 8;
  if (v21 != v22)
    goto LABEL_72;
LABEL_42:
  *((_QWORD *)&v74 + 1) = v34;
  *(_QWORD *)&v75 = v36;
  *((_QWORD *)&v75 + 1) = v35;
  if (v21)
LABEL_43:
    operator delete(v21);
LABEL_44:
  *(_QWORD *)&v75 = v36;
LABEL_45:
  *v25 = v20;
  v65 = v2 + 320;
  v66 = QMIServiceMsg::create();
  v67 = 25000;
  v68 = 0;
  v69 = 0;
  v37 = MEMORY[0x1E0C809B0];
  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 1174405120;
  v63[2] = ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke_3;
  v63[3] = &__block_descriptor_tmp_238;
  v63[4] = v2;
  v63[5] = v1[1];
  v38 = (std::__shared_weak_count *)v1[2];
  v64 = v38;
  if (v38)
  {
    p_shared_weak_owners = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v40 = __ldxr(p_shared_weak_owners);
    while (__stxr(v40 + 1, p_shared_weak_owners));
  }
  aBlock[0] = v37;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendVisitInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66D9E18;
  aBlock[4] = v63;
  v41 = _Block_copy(aBlock);
  v69 = v41;
  if (v66)
  {
    qmi::Client::send();
    v41 = v69;
  }
  if (v41)
    _Block_release(v41);
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v74);
  v42 = (std::__shared_weak_count *)v1[2];
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  operator delete(v1);
  v43 = (std::__shared_weak_count *)a1[2];
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  operator delete(a1);
}

void sub_1B3D34310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *aBlock,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a18)
    qmi::Client::send();
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  v29 = (std::__shared_weak_count *)v27[2];
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  operator delete(v27);
  v30 = (std::__shared_weak_count *)__p[2];
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZZN5radio20QMICommandDriverBase13sendVisitInfoEjjENK3__0clEv_block_invoke_3(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  int v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint8_t v12[16];
  uint8_t buf[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *(_DWORD *)(a2 + 4);
        v9 = *(NSObject **)(v5 + 40);
        if (v8)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "Failed to send visit info", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v12 = 0;
          _os_log_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_DEFAULT, "#I Successfully sent visit info", v12, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ArrivalTime>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ArrivalTime>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ArrivalTime>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D9D98;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DepartureTime>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DepartureTime>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::DepartureTime>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66D9DE8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm13SendVisitInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D34690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D346A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D346D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t radio::QMIDebugCommandDriverM20::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xF0uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  radio::QMIDebugCommandDriverM20::QMIDebugCommandDriverM20((uint64_t)v6, (uint64_t)&v22, (uint64_t)v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::QMIDebugCommandDriverM20>::shared_ptr[abi:ne180100]<radio::QMIDebugCommandDriverM20,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1},void>(a3, v7);
  ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 80))(*a3);
}

void sub_1B3D3481C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D34830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t radio::QMIDebugCommandDriverM20::QMIDebugCommandDriverM20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  radio::DebugCommandDriver::DebugCommandDriver();
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_1E66D9E48;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  return a1;
}

void sub_1B3D34980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void radio::DebugCommandDriver::~DebugCommandDriver(void **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *this = &unk_1E66DA248;
  if (*((char *)this + 143) < 0)
  {
    operator delete(this[15]);
    v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
      goto LABEL_9;
  }
  else
  {
    v2 = (std::__shared_weak_count *)this[14];
    if (!v2)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
LABEL_9:
  *this = &unk_1E66DA2B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = this[12];
  if (v5)
    dispatch_release(v5);
  v6 = this[11];
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)this[10];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void radio::QMIDebugCommandDriverM20::~QMIDebugCommandDriverM20(radio::QMIDebugCommandDriverM20 *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66D9E48;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMIDebugCommandDriverM20 *)((char *)this + 208));
  qmi::Client::~Client((radio::QMIDebugCommandDriverM20 *)((char *)this + 176));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 20));
  radio::DebugCommandDriver::~DebugCommandDriver((void **)this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66D9E48;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((radio::QMIDebugCommandDriverM20 *)((char *)this + 208));
  qmi::Client::~Client((radio::QMIDebugCommandDriverM20 *)((char *)this + 176));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 20));
  radio::DebugCommandDriver::~DebugCommandDriver((void **)this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66D9E48;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((radio::QMIDebugCommandDriverM20 *)((char *)this + 208));
  qmi::Client::~Client((radio::QMIDebugCommandDriverM20 *)((char *)this + 176));
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 20));
  radio::DebugCommandDriver::~DebugCommandDriver((void **)this);
  operator delete(v3);
}

void radio::QMIDebugCommandDriverM20::init(radio::QMIDebugCommandDriverM20 *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_11_2;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t **v3;
  uint64_t **v4;
  uint64_t **v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  const char *Name;
  size_t v24;
  std::string::size_type v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  NSObject *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  NSObject *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  NSObject *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_weak_owners;
  unint64_t v87;
  unint64_t *p_shared_owners;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  NSObject *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  NSObject *v117;
  std::__shared_weak_count *v118;
  std::__shared_weak_count *v119;
  dispatch_object_t object;
  std::__shared_weak_count *v121;
  NSObject *v122;
  std::__shared_weak_count *size;
  std::__shared_weak_count *v124;
  NSObject *v125;
  _BYTE v126[32];
  std::string __dst[2];
  std::string::value_type *v128;
  unint64_t v129;
  uint64_t v130;

  v1 = *(_QWORD *)(a1 + 32);
  v3 = (uint64_t **)(v1 + 160);
  v2 = *(uint64_t **)(v1 + 160);
  v4 = (uint64_t **)(v1 + 160);
  v5 = (uint64_t **)(v1 + 160);
  if (v2)
  {
    v6 = *(uint64_t **)(v1 + 160);
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t **)v6;
        v7 = v6[4];
        if (v7 <= (unint64_t)"mhi.log")
          break;
        v6 = *v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      if (v7 >= (unint64_t)"mhi.log")
        break;
      v6 = v5[1];
      if (!v6)
      {
        v4 = v5 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v8 = (uint64_t *)v5;
    v5 = (uint64_t **)operator new(0x30uLL);
    v5[4] = (uint64_t *)"mhi.log";
    *((_DWORD *)v5 + 10) = 0;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = v8;
    *v4 = (uint64_t *)v5;
    v9 = **(_QWORD **)(v1 + 152);
    v10 = (uint64_t *)v5;
    if (v9)
    {
      *(_QWORD *)(v1 + 152) = v9;
      v10 = *v4;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 160), v10);
    v2 = *(uint64_t **)(v1 + 160);
    ++*(_QWORD *)(v1 + 168);
  }
  *((_DWORD *)v5 + 10) = 0;
  v11 = (uint64_t **)(v1 + 160);
  v12 = (uint64_t **)(v1 + 160);
  if (v2)
  {
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v2;
        v13 = v2[4];
        if (v13 <= (unint64_t)"pcie.log")
          break;
        v2 = *v12;
        v11 = v12;
        if (!*v12)
          goto LABEL_18;
      }
      if (v13 >= (unint64_t)"pcie.log")
        break;
      v2 = v12[1];
      if (!v2)
      {
        v11 = v12 + 1;
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    v14 = (uint64_t *)v12;
    v12 = (uint64_t **)operator new(0x30uLL);
    v12[4] = (uint64_t *)"pcie.log";
    *((_DWORD *)v12 + 10) = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v11 = (uint64_t *)v12;
    v15 = **(_QWORD **)(v1 + 152);
    v16 = (uint64_t *)v12;
    if (v15)
    {
      *(_QWORD *)(v1 + 152) = v15;
      v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 160), v16);
    ++*(_QWORD *)(v1 + 168);
  }
  *((_DWORD *)v12 + 10) = 0;
  v17 = *v3;
  v18 = (uint64_t **)(v1 + 160);
  if (*v3)
  {
    while (1)
    {
      while (1)
      {
        v18 = (uint64_t **)v17;
        v19 = v17[4];
        if (v19 <= (unint64_t)"ipa.log")
          break;
        v17 = *v18;
        v3 = v18;
        if (!*v18)
          goto LABEL_28;
      }
      if (v19 >= (unint64_t)"ipa.log")
        break;
      v17 = v18[1];
      if (!v17)
      {
        v3 = v18 + 1;
        goto LABEL_28;
      }
    }
  }
  else
  {
LABEL_28:
    v20 = (uint64_t *)v18;
    v18 = (uint64_t **)operator new(0x30uLL);
    v18[4] = (uint64_t *)"ipa.log";
    *((_DWORD *)v18 + 10) = 0;
    *v18 = 0;
    v18[1] = 0;
    v18[2] = v20;
    *v3 = (uint64_t *)v18;
    v21 = **(_QWORD **)(v1 + 152);
    v22 = (uint64_t *)v18;
    if (v21)
    {
      *(_QWORD *)(v1 + 152) = v21;
      v22 = *v3;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v1 + 160), v22);
    ++*(_QWORD *)(v1 + 168);
  }
  *((_DWORD *)v18 + 10) = 0;
  *(_DWORD *)(v1 + 144) = 0;
  v129 = 0xAAAAAAAAAAAA0063;
  v130 = 0x9AAAAAAAAAAAAAALL;
  v128 = *(std::string::value_type **)"debug_ipc";
  memset(&__dst[1], 170, sizeof(std::string));
  Name = (const char *)radio::DebugCommandDriver::getName((radio::DebugCommandDriver *)v1);
  v24 = strlen(Name);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v26 = (std::string *)operator new(v27 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v25;
    __dst[0].__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    goto LABEL_38;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v24;
  v26 = __dst;
  if (v24)
LABEL_38:
    memmove(v26, Name, v25);
  v26->__r_.__value_.__s.__data_[v25] = 0;
  v29 = std::string::append(__dst, "::", 2uLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  *(_QWORD *)&v126[16] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)v126 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v130 >= 0)
    v31 = (const std::string::value_type *)&v128;
  else
    v31 = v128;
  if (v130 >= 0)
    v32 = HIBYTE(v130);
  else
    v32 = v129;
  v33 = std::string::append((std::string *)v126, v31, v32);
  v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  __dst[1].__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if ((v126[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v126);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_47:
  __dst[0].__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst[0].__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v1 + 104));
  if (!__dst[0].__r_.__value_.__r.__words[0])
  {
    v82 = *(NSObject **)(v1 + 88);
    v122 = v82;
    if (v82)
      dispatch_retain(v82);
    v83 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v83 || (v84 = std::__shared_weak_count::lock(v83)) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v85 = v84;
    p_shared_weak_owners = (unint64_t *)&v84->__shared_weak_owners_;
    do
      v87 = __ldxr(p_shared_weak_owners);
    while (__stxr(v87 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v84->__shared_owners_;
    do
      v89 = __ldaxr(p_shared_owners);
    while (__stlxr(v89 - 1, p_shared_owners));
    if (v89)
    {
      v90 = std::__shared_weak_count::lock(v84);
      if (v90)
        goto LABEL_138;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v85);
      v90 = std::__shared_weak_count::lock(v85);
      if (v90)
      {
LABEL_138:
        v91 = (unint64_t *)&v90->__shared_weak_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
        v121 = v90;
LABEL_141:
        std::__shared_weak_count::__release_weak(v85);
        if (v90)
        {
          v93 = (unint64_t *)&v90->__shared_owners_;
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        qmi::Client::createWithQueue();
        v95 = *(_OWORD *)&v126[16];
        *(_OWORD *)&v126[16] = 0uLL;
        v96 = *(std::__shared_weak_count **)(v1 + 200);
        *(_OWORD *)(v1 + 192) = v95;
        if (v96)
        {
          v97 = (unint64_t *)&v96->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        qmi::Client::~Client((qmi::Client *)v126);
        if (v121)
          std::__shared_weak_count::__release_weak(v121);
        v56 = v122;
        if (v122)
          goto LABEL_82;
        goto LABEL_83;
      }
    }
    v121 = v90;
    goto LABEL_141;
  }
  v35 = *(NSObject **)(v1 + 88);
  v125 = v35;
  if (v35)
    dispatch_retain(v35);
  v36 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v36 || (v37 = std::__shared_weak_count::lock(v36)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v38 = v37;
  v39 = (unint64_t *)&v37->__shared_weak_owners_;
  do
    v40 = __ldxr(v39);
  while (__stxr(v40 + 1, v39));
  v41 = (unint64_t *)&v37->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (v42)
  {
    v43 = std::__shared_weak_count::lock(v37);
    if (v43)
      goto LABEL_58;
LABEL_183:
    v124 = v43;
    goto LABEL_61;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v38);
  v43 = std::__shared_weak_count::lock(v38);
  if (!v43)
    goto LABEL_183;
LABEL_58:
  v44 = (unint64_t *)&v43->__shared_weak_owners_;
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
  v124 = v43;
LABEL_61:
  std::__shared_weak_count::__release_weak(v38);
  if (v43)
  {
    v46 = (unint64_t *)&v43->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  size = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_)
  {
    v48 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
  }
  qmi::Client::createWithQueueLocal();
  v50 = *(_OWORD *)&v126[16];
  *(_OWORD *)&v126[16] = 0uLL;
  v51 = *(std::__shared_weak_count **)(v1 + 200);
  *(_OWORD *)(v1 + 192) = v50;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  qmi::Client::~Client((qmi::Client *)v126);
  if (size)
  {
    v54 = (unint64_t *)&size->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v124)
    std::__shared_weak_count::__release_weak(v124);
  v56 = v125;
  if (v125)
LABEL_82:
    dispatch_release(v56);
LABEL_83:
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::start((qmi::Client *)(v1 + 176));
  if (!__dst[0].__r_.__value_.__r.__words[0])
  {
    v99 = *(NSObject **)(v1 + 88);
    v117 = v99;
    if (v99)
      dispatch_retain(v99);
    v100 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v100 || (v101 = std::__shared_weak_count::lock(v100)) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v102 = v101;
    v103 = (unint64_t *)&v101->__shared_weak_owners_;
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
    v105 = (unint64_t *)&v101->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (v106)
    {
      v107 = std::__shared_weak_count::lock(v101);
      if (v107)
        goto LABEL_165;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v102);
      v107 = std::__shared_weak_count::lock(v102);
      if (v107)
      {
LABEL_165:
        v108 = (unint64_t *)&v107->__shared_weak_owners_;
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
        v116 = v107;
LABEL_168:
        std::__shared_weak_count::__release_weak(v102);
        if (v107)
        {
          v110 = (unint64_t *)&v107->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
            std::__shared_weak_count::__release_weak(v107);
          }
        }
        qmi::Client::createWithQueue();
        v112 = *(_OWORD *)&v126[16];
        *(_OWORD *)&v126[16] = 0uLL;
        v113 = *(std::__shared_weak_count **)(v1 + 232);
        *(_OWORD *)(v1 + 224) = v112;
        if (v113)
        {
          v114 = (unint64_t *)&v113->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        qmi::Client::~Client((qmi::Client *)v126);
        if (v116)
          std::__shared_weak_count::__release_weak(v116);
        v78 = v117;
        if (v117)
          goto LABEL_118;
        goto LABEL_119;
      }
    }
    v116 = v107;
    goto LABEL_168;
  }
  v57 = *(NSObject **)(v1 + 88);
  object = v57;
  if (v57)
    dispatch_retain(v57);
  v58 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v58 || (v59 = std::__shared_weak_count::lock(v58)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v60 = v59;
  v61 = (unint64_t *)&v59->__shared_weak_owners_;
  do
    v62 = __ldxr(v61);
  while (__stxr(v62 + 1, v61));
  v63 = (unint64_t *)&v59->__shared_owners_;
  do
    v64 = __ldaxr(v63);
  while (__stlxr(v64 - 1, v63));
  if (v64)
  {
    v65 = std::__shared_weak_count::lock(v59);
    if (v65)
      goto LABEL_94;
LABEL_185:
    v119 = v65;
    goto LABEL_97;
  }
  ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
  std::__shared_weak_count::__release_weak(v60);
  v65 = std::__shared_weak_count::lock(v60);
  if (!v65)
    goto LABEL_185;
LABEL_94:
  v66 = (unint64_t *)&v65->__shared_weak_owners_;
  do
    v67 = __ldxr(v66);
  while (__stxr(v67 + 1, v66));
  v119 = v65;
LABEL_97:
  std::__shared_weak_count::__release_weak(v60);
  if (v65)
  {
    v68 = (unint64_t *)&v65->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v118 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_)
  {
    v70 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  qmi::Client::createWithQueueLocal();
  v72 = *(_OWORD *)&v126[16];
  *(_OWORD *)&v126[16] = 0uLL;
  v73 = *(std::__shared_weak_count **)(v1 + 232);
  *(_OWORD *)(v1 + 224) = v72;
  if (v73)
  {
    v74 = (unint64_t *)&v73->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  qmi::Client::~Client((qmi::Client *)v126);
  if (v118)
  {
    v76 = (unint64_t *)&v118->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }
  if (v119)
    std::__shared_weak_count::__release_weak(v119);
  v78 = object;
  if (object)
LABEL_118:
    dispatch_release(v78);
LABEL_119:
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::start((qmi::Client *)(v1 + 208));
  v79 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (!__dst[0].__r_.__value_.__l.__size_)
    goto LABEL_123;
  v80 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v81 - 1, v80));
  if (!v81)
  {
    ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
    std::__shared_weak_count::__release_weak(v79);
    if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_124:
      if ((SHIBYTE(v130) & 0x80000000) == 0)
        return;
LABEL_188:
      operator delete(v128);
      return;
    }
  }
  else
  {
LABEL_123:
    if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_124;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v130) < 0)
    goto LABEL_188;
}

void sub_1B3D35830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,dispatch_object_t object,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39)
{
  uint64_t v39;

  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  if (object)
    dispatch_release(object);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v39 - 152);
  if (*(char *)(v39 - 105) < 0)
    operator delete(*(void **)(v39 - 128));
  if (*(char *)(v39 - 81) < 0)
    operator delete(*(void **)(v39 - 104));
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke_2(uint64_t a1)
{
  radio::QMIDebugCommandDriverM20 *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(radio::QMIDebugCommandDriverM20 **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEBUG, "#D APPS started", v3, 2u);
    radio::QMIDebugCommandDriverM20::getIPCInfo_sync(v1);
  }
  else
  {
    radio::QMIDebugCommandDriverM20::getIPCInfo_sync(v1);
  }
}

void radio::QMIDebugCommandDriverM20::getIPCInfo_sync(radio::QMIDebugCommandDriverM20 *this)
{
  __int128 v2;
  void *v3;
  NSObject *v4;
  _QWORD v5[6];
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  _OWORD v10[2];
  _QWORD aBlock[6];

  if (*((_QWORD *)this + 24))
  {
    *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[0] = v2;
    v10[1] = v2;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
    v5[5] = (char *)this + 176;
    v6 = QMIServiceMsg::create();
    v7 = 25000;
    v8 = 0;
    v9 = 0;
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 0x40000000;
    v5[2] = ___ZN5radio24QMIDebugCommandDriverM2015getIPCInfo_syncEv_block_invoke;
    v5[3] = &__block_descriptor_tmp_24_5;
    v5[4] = this;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm10GetIPCInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_1E66DA488;
    aBlock[4] = v5;
    v3 = _Block_copy(aBlock);
    v9 = v3;
    if (v6)
    {
      qmi::Client::send();
      v3 = v9;
    }
    if (v3)
      _Block_release(v3);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
  }
  else
  {
    v4 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(aBlock[0]) = 0;
      _os_log_error_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_ERROR, "No APPS client, bail", (uint8_t *)aBlock, 2u);
    }
  }
}

void sub_1B3D35AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D35B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke_4(uint64_t a1, xpc_object_t object)
{
  uint64_t v2;
  xpc_object_t v3;
  NSObject *v4;
  void *p_p;
  void *__p;
  char v7;
  xpc_object_t v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v8 = object;
  if (object)
  {
    v3 = object;
    xpc_retain(object);
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  xpc::object::to_string((xpc::object *)&v8);
  if (v7 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  *(_DWORD *)buf = 136315138;
  v10 = p_p;
  _os_log_error_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_ERROR, "APPS server error %s", buf, 0xCu);
  if (v7 < 0)
    operator delete(__p);
  v3 = v8;
LABEL_5:
  xpc_release(v3);
}

void sub_1B3D35C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke_7(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D BSP started", v2, 2u);
  }
}

void ___ZN5radio24QMIDebugCommandDriverM204initEv_block_invoke_9(uint64_t a1, xpc_object_t object)
{
  uint64_t v2;
  xpc_object_t v3;
  NSObject *v4;
  void *p_p;
  void *__p;
  char v7;
  xpc_object_t v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v8 = object;
  if (object)
  {
    v3 = object;
    xpc_retain(object);
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  xpc::object::to_string((xpc::object *)&v8);
  if (v7 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  *(_DWORD *)buf = 136315138;
  v10 = p_p;
  _os_log_error_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_ERROR, "BSP server error %s", buf, 0xCu);
  if (v7 < 0)
    operator delete(__p);
  v3 = v8;
LABEL_5:
  xpc_release(v3);
}

void sub_1B3D35DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriverM20::updateProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v5[5];
  std::string v6;
  std::string __p;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN5radio24QMIDebugCommandDriverM2014updatePropertyENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7__block_invoke;
  v5[3] = &__block_descriptor_tmp_12_4;
  v5[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v6 = *(std::string *)a2;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      __p = *(std::string *)a3;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_6:
  ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v5);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v6.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_10:
    operator delete(v6.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
}

void sub_1B3D35F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN5radio24QMIDebugCommandDriverM2014updatePropertyENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7__block_invoke(uint64_t a1)
{
  radio::QMIDebugCommandDriverM20 *v2;
  const char *v3;
  char v4[23];
  char v5;
  unsigned int v6;
  unsigned __int8 v7[4];

  v2 = *(radio::QMIDebugCommandDriverM20 **)(a1 + 32);
  v6 = -1;
  *(_DWORD *)v7 = -1;
  v5 = 8;
  strcpy(v4, "LogLevel");
  if (*(char *)(a1 + 63) >= 0)
    v3 = (const char *)(a1 + 40);
  else
    v3 = *(const char **)(a1 + 40);
  if (!strcasecmp(v3, v4))
  {
    if ((util::convert<int>((const std::string *)(a1 + 64), v7, 0) & 1) == 0)
      return;
    if (*(_DWORD *)v7 <= 0xFFu)
    {
      radio::QMIDebugCommandDriverM20::setMHILogLevel_sync(v2, v7[0]);
      radio::QMIDebugCommandDriverM20::setPCIeLogLevel_sync(v2, v7[0]);
      return;
    }
    goto LABEL_11;
  }
  v5 = 11;
  strcpy(v4, "PayloadSize");
  if (!strcasecmp(v3, v4) && (util::convert<int>((const std::string *)(a1 + 64), &v6, 0) & 1) != 0)
  {
LABEL_11:
    if ((v6 & 0x80000000) == 0)
      radio::QMIDebugCommandDriverM20::configMHILogPayload_sync(v2, v6);
  }
}

void radio::QMIDebugCommandDriverM20::setMHILogLevel_sync(radio::QMIDebugCommandDriverM20 *this, char a2)
{
  __int128 v4;
  const void **v5;
  char *v6;
  char *v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[5];
  char v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  _QWORD aBlock[6];

  if (*((_QWORD *)this + 24))
  {
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v17 = v4;
    v18 = v4;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v17);
    v5 = (const void **)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1) != (_QWORD)v18)
    {
      while (*((_BYTE *)*v5 + 8) != 1)
      {
        if (++v5 == (const void **)v18)
          goto LABEL_11;
      }
    }
    if (v5 == (const void **)v18)
    {
LABEL_11:
      v7 = qmi::MutableMessageBase::createTLV<apps::tlv::abm::Level>(&v17);
    }
    else
    {
      if (!v6)
        __cxa_bad_cast();
      v7 = v6 + 9;
    }
    *v7 = a2;
    v12 = (char *)this + 176;
    v13 = QMIServiceMsg::create();
    v14 = 25000;
    v15 = 0;
    v16 = 0;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN5radio24QMIDebugCommandDriverM2019setMHILogLevel_syncEh_block_invoke_2;
    v10[3] = &__block_descriptor_tmp_21_0;
    v10[4] = this;
    v11 = a2;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm14SetMHILogLevel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_1E66DA438;
    aBlock[4] = v10;
    v9 = _Block_copy(aBlock);
    v16 = v9;
    if (v13)
    {
      qmi::Client::send();
      v9 = v16;
    }
    if (v9)
      _Block_release(v9);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v17);
  }
  else
  {
    v8 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(aBlock[0]) = 0;
      _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "No APPS client, bail", (uint8_t *)aBlock, 2u);
    }
  }
}

void sub_1B3D36234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D36250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D36264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriverM20::setPCIeLogLevel_sync(radio::QMIDebugCommandDriverM20 *this, char a2)
{
  __int128 v4;
  const void **v5;
  char *v6;
  char *v7;
  NSObject *v8;
  void *v9;
  _QWORD v10[5];
  char v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  _QWORD aBlock[6];

  if (*((_QWORD *)this + 24))
  {
    *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v17 = v4;
    v18 = v4;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v17);
    v5 = (const void **)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1) != (_QWORD)v18)
    {
      while (*((_BYTE *)*v5 + 8) != 1)
      {
        if (++v5 == (const void **)v18)
          goto LABEL_11;
      }
    }
    if (v5 == (const void **)v18)
    {
LABEL_11:
      v7 = qmi::MutableMessageBase::createTLV<apps::tlv::abm::Level>(&v17);
    }
    else
    {
      if (!v6)
        __cxa_bad_cast();
      v7 = v6 + 9;
    }
    *v7 = a2;
    v12 = (char *)this + 176;
    v13 = QMIServiceMsg::create();
    v14 = 25000;
    v15 = 0;
    v16 = 0;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN5radio24QMIDebugCommandDriverM2020setPCIeLogLevel_syncEh_block_invoke_2;
    v10[3] = &__block_descriptor_tmp_23_3;
    v10[4] = this;
    v11 = a2;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm15SetPCIeLogLevel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_1E66DA460;
    aBlock[4] = v10;
    v9 = _Block_copy(aBlock);
    v16 = v9;
    if (v13)
    {
      qmi::Client::send();
      v9 = v16;
    }
    if (v9)
      _Block_release(v9);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v17);
  }
  else
  {
    v8 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(aBlock[0]) = 0;
      _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "No APPS client, bail", (uint8_t *)aBlock, 2u);
    }
  }
}

void sub_1B3D36438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D36454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D36468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriverM20::configMHILogPayload_sync(radio::QMIDebugCommandDriverM20 *this, int a2)
{
  __int128 v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[5];
  int v31;
  char *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  _QWORD aBlock[5];

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37 = v4;
  v38 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v37);
  v5 = (char *)*((_QWORD *)&v37 + 1);
  v6 = (char *)v38;
  v7 = (const void **)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1) != (_QWORD)v38)
  {
    v7 = (const void **)*((_QWORD *)&v37 + 1);
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v38)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v38)
  {
LABEL_9:
    v10 = (char *)operator new(0x10uLL);
    v11 = v10;
    v10[8] = 1;
    *(_QWORD *)v10 = off_1E66DA390;
    *((_DWORD *)v10 + 3) = 0;
    v9 = v10 + 12;
    if ((unint64_t)v6 < *((_QWORD *)&v38 + 1))
    {
      *(_QWORD *)v6 = v10;
      *(_QWORD *)&v38 = v6 + 8;
      goto LABEL_23;
    }
    v12 = v6 - v5;
    v13 = (v6 - v5) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = *((_QWORD *)&v38 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v38 + 1) - (_QWORD)v5) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v20 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((_QWORD *)&v37 + 1) = v18;
        *(_QWORD *)&v38 = v20;
        *((_QWORD *)&v38 + 1) = v19;
        if (!v5)
        {
LABEL_22:
          *(_QWORD *)&v38 = v20;
          goto LABEL_23;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v11;
      v20 = 8 * v13 + 8;
      if (v5 == v6)
        goto LABEL_20;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)(v5 - v17) < 0x20)
      goto LABEL_42;
    v22 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v24 = &v6[-v23];
    v18 = (_QWORD *)((char *)v18 - v23);
    v25 = &v17[8 * v13 - 16];
    v26 = v6 - 16;
    v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v28 = *(_OWORD *)v26;
      *(v25 - 1) = *((_OWORD *)v26 - 1);
      *v25 = v28;
      v25 -= 2;
      v26 -= 32;
      v27 -= 4;
    }
    while (v27);
    v6 = v24;
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v29 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v18 = v29;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v37 + 1);
    *((_QWORD *)&v37 + 1) = v18;
    *(_QWORD *)&v38 = v20;
    *((_QWORD *)&v38 + 1) = v19;
    if (!v5)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = v8 + 12;
LABEL_23:
  *v9 = a2;
  v32 = (char *)this + 176;
  v33 = QMIServiceMsg::create();
  v34 = 25000;
  v35 = 0;
  v36 = 0;
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 0x40000000;
  v30[2] = ___ZN5radio24QMIDebugCommandDriverM2024configMHILogPayload_syncEj_block_invoke_2;
  v30[3] = &__block_descriptor_tmp_18_3;
  v30[4] = this;
  v31 = a2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm19ConfigMHILogPayload8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66DA3C0;
  aBlock[4] = v30;
  v21 = _Block_copy(aBlock);
  v36 = v21;
  if (v33)
  {
    qmi::Client::send();
    v21 = v36;
  }
  if (v21)
    _Block_release(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v37);
}

void sub_1B3D36774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D36790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D367A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
}

void sub_1B3D36854(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 40));
    return;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_5;
}

void ___ZN5radio24QMIDebugCommandDriverM2024configMHILogPayload_syncEj_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 40);
    v6 = "Failed";
    if (!*(_DWORD *)(a2 + 4))
      v6 = "Success";
    v7[0] = 67109378;
    v7[1] = v5;
    v8 = 2080;
    v9 = v6;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Config MHI Log payload to %d: %s", (uint8_t *)v7, 0x12u);
  }
}

void ___ZN5radio24QMIDebugCommandDriverM2019setMHILogLevel_syncEh_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 40);
    v6 = "Failed";
    if (!*(_DWORD *)(a2 + 4))
      v6 = "Success";
    v7[0] = 67109378;
    v7[1] = v5;
    v8 = 2080;
    v9 = v6;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Set MHI Log Level to %d: %s", (uint8_t *)v7, 0x12u);
  }
}

void ___ZN5radio24QMIDebugCommandDriverM2020setPCIeLogLevel_syncEh_block_invoke_2(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 40);
    v6 = "Failed";
    if (!*(_DWORD *)(a2 + 4))
      v6 = "Success";
    v7[0] = 67109378;
    v7[1] = v5;
    v8 = 2080;
    v9 = v6;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Set PCIe Log Level to %d: %s", (uint8_t *)v7, 0x12u);
  }
}

float ___ZN5radio24QMIDebugCommandDriverM2015getIPCInfo_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v2;
  NSObject *v3;
  float result;
  tlv *TlvValue;
  int v7;
  tlv *v8;
  tlv *v9;
  int v10;
  tlv *v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  tlv *v20;
  int v21;
  tlv *v22;
  int v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  tlv *v31;
  int v32;
  tlv *v33;
  int v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t **v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  NSObject *v42;
  uint64_t *v43;
  uint64_t **v44;
  int v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  int v53;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  int v61;
  uint64_t **v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  int v67;
  _DWORD v68[2];
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 1))
  {
    v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v68[0]) = 0;
      _os_log_error_impl(&dword_1B3CB3000, v3, OS_LOG_TYPE_ERROR, "Failed to get IPC log Info", (uint8_t *)v68, 2u);
    }
  }
  else
  {
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      v8 = TlvValue;
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v7, (const unsigned __int8 *)4);
      *(_DWORD *)(v2 + 144) = *(_DWORD *)v8;
    }
    v9 = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (v9)
    {
      v11 = v9;
      tlv::throwIfNotEnoughBytes(v9, (const unsigned __int8 *)v9 + v10, (const unsigned __int8 *)4);
      v12 = *(_DWORD *)v11;
      v14 = (uint64_t **)(v2 + 160);
      v13 = *(uint64_t **)(v2 + 160);
      if (v13)
      {
        while (1)
        {
          while (1)
          {
            v15 = (uint64_t **)v13;
            v16 = v13[4];
            if (v16 <= (unint64_t)"mhi.log")
              break;
            v13 = *v15;
            v14 = v15;
            if (!*v15)
              goto LABEL_14;
          }
          if (v16 >= (unint64_t)"mhi.log")
            break;
          v13 = v15[1];
          if (!v13)
          {
            v14 = v15 + 1;
            goto LABEL_14;
          }
        }
      }
      else
      {
        v15 = (uint64_t **)(v2 + 160);
LABEL_14:
        v17 = (uint64_t *)v15;
        v15 = (uint64_t **)operator new(0x30uLL);
        v15[4] = (uint64_t *)"mhi.log";
        *((_DWORD *)v15 + 10) = 0;
        *v15 = 0;
        v15[1] = 0;
        v15[2] = v17;
        *v14 = (uint64_t *)v15;
        v18 = **(_QWORD **)(v2 + 152);
        v19 = (uint64_t *)v15;
        if (v18)
        {
          *(_QWORD *)(v2 + 152) = v18;
          v19 = *v14;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v19);
        ++*(_QWORD *)(v2 + 168);
      }
      *((_DWORD *)v15 + 10) = v12;
    }
    v20 = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (v20)
    {
      v22 = v20;
      tlv::throwIfNotEnoughBytes(v20, (const unsigned __int8 *)v20 + v21, (const unsigned __int8 *)4);
      v23 = *(_DWORD *)v22;
      v25 = (uint64_t **)(v2 + 160);
      v24 = *(uint64_t **)(v2 + 160);
      if (v24)
      {
        while (1)
        {
          while (1)
          {
            v26 = (uint64_t **)v24;
            v27 = v24[4];
            if (v27 <= (unint64_t)"pcie.log")
              break;
            v24 = *v26;
            v25 = v26;
            if (!*v26)
              goto LABEL_26;
          }
          if (v27 >= (unint64_t)"pcie.log")
            break;
          v24 = v26[1];
          if (!v24)
          {
            v25 = v26 + 1;
            goto LABEL_26;
          }
        }
      }
      else
      {
        v26 = (uint64_t **)(v2 + 160);
LABEL_26:
        v28 = (uint64_t *)v26;
        v26 = (uint64_t **)operator new(0x30uLL);
        v26[4] = (uint64_t *)"pcie.log";
        *((_DWORD *)v26 + 10) = 0;
        *v26 = 0;
        v26[1] = 0;
        v26[2] = v28;
        *v25 = (uint64_t *)v26;
        v29 = **(_QWORD **)(v2 + 152);
        v30 = (uint64_t *)v26;
        if (v29)
        {
          *(_QWORD *)(v2 + 152) = v29;
          v30 = *v25;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v30);
        ++*(_QWORD *)(v2 + 168);
      }
      *((_DWORD *)v26 + 10) = v23;
    }
    v31 = (tlv *)qmi::MessageBase::findTlvValue(this);
    if (v31)
    {
      v33 = v31;
      tlv::throwIfNotEnoughBytes(v31, (const unsigned __int8 *)v31 + v32, (const unsigned __int8 *)4);
      v34 = *(_DWORD *)v33;
      v36 = (uint64_t **)(v2 + 160);
      v35 = *(uint64_t **)(v2 + 160);
      if (v35)
      {
        while (1)
        {
          while (1)
          {
            v37 = (uint64_t **)v35;
            v38 = v35[4];
            if (v38 <= (unint64_t)"ipa.log")
              break;
            v35 = *v37;
            v36 = v37;
            if (!*v37)
              goto LABEL_38;
          }
          if (v38 >= (unint64_t)"ipa.log")
            break;
          v35 = v37[1];
          if (!v35)
          {
            v36 = v37 + 1;
            goto LABEL_38;
          }
        }
      }
      else
      {
        v37 = (uint64_t **)(v2 + 160);
LABEL_38:
        v39 = (uint64_t *)v37;
        v37 = (uint64_t **)operator new(0x30uLL);
        v37[4] = (uint64_t *)"ipa.log";
        *((_DWORD *)v37 + 10) = 0;
        *v37 = 0;
        v37[1] = 0;
        v37[2] = v39;
        *v36 = (uint64_t *)v37;
        v40 = **(_QWORD **)(v2 + 152);
        v41 = (uint64_t *)v37;
        if (v40)
        {
          *(_QWORD *)(v2 + 152) = v40;
          v41 = *v36;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v41);
        ++*(_QWORD *)(v2 + 168);
      }
      *((_DWORD *)v37 + 10) = v34;
    }
    v42 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      v44 = (uint64_t **)(v2 + 160);
      v43 = *(uint64_t **)(v2 + 160);
      v45 = *(_DWORD *)(v2 + 144);
      v46 = (uint64_t **)(v2 + 160);
      v47 = (uint64_t **)(v2 + 160);
      if (v43)
      {
        v48 = *(uint64_t **)(v2 + 160);
        while (1)
        {
          while (1)
          {
            v47 = (uint64_t **)v48;
            v49 = v48[4];
            if (v49 <= (unint64_t)"mhi.log")
              break;
            v48 = *v47;
            v46 = v47;
            if (!*v47)
              goto LABEL_50;
          }
          if (v49 >= (unint64_t)"mhi.log")
            break;
          v48 = v47[1];
          if (!v48)
          {
            v46 = v47 + 1;
            goto LABEL_50;
          }
        }
      }
      else
      {
LABEL_50:
        v50 = (uint64_t *)v47;
        v47 = (uint64_t **)operator new(0x30uLL);
        v47[4] = (uint64_t *)"mhi.log";
        *((_DWORD *)v47 + 10) = 0;
        *v47 = 0;
        v47[1] = 0;
        v47[2] = v50;
        *v46 = (uint64_t *)v47;
        v51 = **(_QWORD **)(v2 + 152);
        v52 = (uint64_t *)v47;
        if (v51)
        {
          *(_QWORD *)(v2 + 152) = v51;
          v52 = *v46;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v52);
        v43 = *(uint64_t **)(v2 + 160);
        ++*(_QWORD *)(v2 + 168);
      }
      v53 = *((_DWORD *)v47 + 10);
      v54 = (uint64_t **)(v2 + 160);
      v55 = (uint64_t **)(v2 + 160);
      if (v43)
      {
        v56 = v43;
        while (1)
        {
          while (1)
          {
            v55 = (uint64_t **)v56;
            v57 = v56[4];
            if (v57 <= (unint64_t)"pcie.log")
              break;
            v56 = *v55;
            v54 = v55;
            if (!*v55)
              goto LABEL_60;
          }
          if (v57 >= (unint64_t)"pcie.log")
            break;
          v56 = v55[1];
          if (!v56)
          {
            v54 = v55 + 1;
            goto LABEL_60;
          }
        }
      }
      else
      {
LABEL_60:
        v58 = (uint64_t *)v55;
        v55 = (uint64_t **)operator new(0x30uLL);
        v55[4] = (uint64_t *)"pcie.log";
        *((_DWORD *)v55 + 10) = 0;
        *v55 = 0;
        v55[1] = 0;
        v55[2] = v58;
        *v54 = (uint64_t *)v55;
        v59 = **(_QWORD **)(v2 + 152);
        v60 = (uint64_t *)v55;
        if (v59)
        {
          *(_QWORD *)(v2 + 152) = v59;
          v60 = *v54;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v60);
        v43 = *(uint64_t **)(v2 + 160);
        ++*(_QWORD *)(v2 + 168);
      }
      v61 = *((_DWORD *)v55 + 10);
      v62 = (uint64_t **)(v2 + 160);
      if (v43)
      {
        while (1)
        {
          while (1)
          {
            v62 = (uint64_t **)v43;
            v63 = v43[4];
            if (v63 <= (unint64_t)"ipa.log")
              break;
            v43 = *v62;
            v44 = v62;
            if (!*v62)
              goto LABEL_70;
          }
          if (v63 >= (unint64_t)"ipa.log")
            break;
          v43 = v62[1];
          if (!v43)
          {
            v44 = v62 + 1;
            goto LABEL_70;
          }
        }
      }
      else
      {
LABEL_70:
        v64 = (uint64_t *)v62;
        v62 = (uint64_t **)operator new(0x30uLL);
        v62[4] = (uint64_t *)"ipa.log";
        *((_DWORD *)v62 + 10) = 0;
        *v62 = 0;
        v62[1] = 0;
        v62[2] = v64;
        *v44 = (uint64_t *)v62;
        v65 = **(_QWORD **)(v2 + 152);
        v66 = (uint64_t *)v62;
        if (v65)
        {
          *(_QWORD *)(v2 + 152) = v65;
          v66 = *v44;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 160), v66);
        ++*(_QWORD *)(v2 + 168);
      }
      v67 = *((_DWORD *)v62 + 10);
      v68[0] = 67109888;
      v68[1] = v45;
      v69 = 1024;
      v70 = v53;
      v71 = 1024;
      v72 = v61;
      v73 = 1024;
      v74 = v67;
      _os_log_impl(&dword_1B3CB3000, v42, OS_LOG_TYPE_DEFAULT, "#I IPC Info: blockSize= %d, MHI buffer=%d, PCIe buffer=%d, IPA buffer=%d", (uint8_t *)v68, 0x1Au);
    }
  }
  return result;
}

void sub_1B3D3708C(_Unwind_Exception *a1, int a2)
{
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v2, 6, v3, v4);
    JUMPOUT(0x1B3D36E30);
  }
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriverM20::queryIPCLogs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD block[6];

  v5[2] = a3;
  v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE20execute_wrapped_syncIZNS1_24QMIDebugCommandDriverM2012queryIPCLogsEyN8dispatch8callbackIU13block_pointerFvNS_2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke;
  block[3] = &__block_descriptor_tmp_76_0;
  block[4] = a1 + 72;
  block[5] = v5;
  v4 = a1 + 88;
  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v4 + 8))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
}

void radio::QMIDebugCommandDriverM20::queryIPCLogs_sync(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[6];
  _QWORD aBlock[8];
  CFTypeRef cf;
  const void *v16;
  CFMutableDictionaryRef v17;
  _QWORD v18[3];
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  dispatch_object_t object;
  _QWORD v26[5];
  const void *v27;
  dispatch_object_t v28;

  v26[0] = 0;
  v26[1] = v26;
  v26[2] = 0x3802000000;
  v26[3] = __Block_byref_object_copy__6;
  v26[4] = __Block_byref_object_dispose__6;
  v27 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v28 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  v27 = v6;
  v28 = v7;
  if (v7)
    dispatch_retain(v7);
  v20 = 0;
  v21 = &v20;
  v22 = 0x3002000000;
  v23 = __Block_byref_object_copy__25;
  v24 = __Block_byref_object_dispose__26;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  object = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  v18[0] = 0;
  v18[1] = v18;
  v18[2] = 0x2000000000;
  v19 = 0;
  v17 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v17 = Mutable;
  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &unk_1E66DA068;
  aBlock[7] = a1;
  cf = Mutable;
  if (Mutable)
    CFRetain(Mutable);
  aBlock[4] = v18;
  aBlock[5] = v26;
  aBlock[6] = &v20;
  v11 = _Block_copy(aBlock);
  v16 = v11;
  radio::QMIDebugCommandDriverM20::getMHILog_sync(a1, &v16);
  if (v11)
    _Block_release(v11);
  v12 = v21[5];
  v13[0] = v10;
  v13[1] = 0x40000000;
  v13[2] = ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_34;
  v13[3] = &unk_1E66DA0A0;
  v13[4] = v26;
  v13[5] = &v20;
  dispatch_source_set_event_handler(v12, v13);
  dispatch_source_set_timer((dispatch_source_t)v21[5], a2, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
  dispatch_activate((dispatch_object_t)v21[5]);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  _Block_object_dispose(v18, 8);
  _Block_object_dispose(&v20, 8);
  if (object)
    dispatch_release(object);
  _Block_object_dispose(v26, 8);
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
}

void sub_1B3D37488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,dispatch_object_t object)
{
  const void *v37;
  const void **v38;
  uint64_t v39;
  uint64_t v40;

  if (v37)
    _Block_release(v37);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v38);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a25);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a32, 8);
  if (object)
    dispatch_release(object);
  _Block_object_dispose((const void *)(v40 - 120), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v39 + 40);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

void radio::QMIDebugCommandDriverM20::getMHILog_sync(uint64_t a1, const void **a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  CFMutableDataRef Mutable;
  CFMutableDataRef v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  void *v15;
  CFMutableDataRef v16;
  CFTypeRef v17;
  void *v18;
  __int128 v19;
  CFTypeRef cf;
  void *__p;
  __int128 v22;
  CFMutableDataRef v23;

  if (!*(_DWORD *)(a1 + 144))
    goto LABEL_44;
  v5 = (uint64_t **)(a1 + 160);
  v4 = *(uint64_t **)(a1 + 160);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= (unint64_t)"mhi.log")
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)"mhi.log")
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(a1 + 160);
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x30uLL);
    v6[4] = (uint64_t *)"mhi.log";
    *((_DWORD *)v6 + 10) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 152);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 152) = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v10);
    ++*(_QWORD *)(a1 + 168);
  }
  if (*((_DWORD *)v6 + 10))
  {
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v12 = Mutable;
    v23 = Mutable;
    v13 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get;
    if (!Mutable)
      v13 = 0;
    if (v13)
    {
      v16 = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      if (*a2)
        v14 = _Block_copy(*a2);
      else
        v14 = 0;
      v15 = v14;
      radio::QMIDebugCommandDriverM20::getMHILogBlock_sync(a1, (const void **)&v16, &v15);
      if (v14)
        _Block_release(v14);
      if (v12)
      {
        CFRelease(v12);
LABEL_41:
        CFRelease(v12);
      }
    }
    else
    {
      if (*a2)
      {
        v18 = operator new(0x28uLL);
        v19 = xmmword_1B3DCED00;
        strcpy((char *)v18, "Error on Memory allocation for MHI logs");
        CreateError();
        v17 = 0;
        dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, &cf, &v17);
        if (v17)
          CFRelease(v17);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v19) < 0)
          operator delete(v18);
      }
      if (v12)
        goto LABEL_41;
    }
  }
  else
  {
LABEL_44:
    if (*a2)
    {
      __p = operator new(0x20uLL);
      v22 = xmmword_1B3DCDB00;
      strcpy((char *)__p, "Invalid Regioninfo for MHI");
      CreateError();
      cf = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, (const void **)&v23, &cf);
      if (cf)
        CFRelease(cf);
      if (v23)
        CFRelease(v23);
      if (SHIBYTE(v22) < 0)
        operator delete(__p);
    }
  }
}

void sub_1B3D377C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20)
{
  uint64_t v20;

  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a20);
  if (a19 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v20 - 56));
  _Unwind_Resume(a1);
}

void sub_1B3D37844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v22 - 56));
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  const void *v8;
  void *v9;
  uint64_t (*v11)(uint64_t);
  const __CFAllocator *v12;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;
  const void *v18;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *a2;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v6 = 0;
  if (v6)
  {
    v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v5;
      _os_log_error_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_ERROR, "Failed to get MHI log: %@", buf, 0xCu);
    }
  }
  else
  {
    v11 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    if (!*a3)
      v11 = 0;
    if (v11 && CFDataGetLength((CFDataRef)*a3) >= 1)
    {
      ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 64), (const __CFString **)"mhi.log", *a3, *MEMORY[0x1E0C9AE00], v12);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_27;
  v13[3] = &unk_1E66DA030;
  v8 = *(const void **)(a1 + 64);
  v16 = v4;
  cf = v8;
  if (v8)
    CFRetain(v8);
  v14 = *(_OWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 48);
  v9 = _Block_copy(v13);
  v18 = v9;
  radio::QMIDebugCommandDriverM20::getPCIeLog_sync(v4, &v18);
  if (v9)
    _Block_release(v9);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D37A1C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void radio::QMIDebugCommandDriverM20::getPCIeLog_sync(uint64_t a1, const void **a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  CFMutableDataRef Mutable;
  CFMutableDataRef v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  const void *v15;
  CFMutableDataRef v16;
  CFTypeRef v17;
  void *v18;
  __int128 v19;
  CFTypeRef cf;
  void *__p;
  __int128 v22;
  CFMutableDataRef v23;

  if (!*(_DWORD *)(a1 + 144))
    goto LABEL_44;
  v5 = (uint64_t **)(a1 + 160);
  v4 = *(uint64_t **)(a1 + 160);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= (unint64_t)"pcie.log")
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)"pcie.log")
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(a1 + 160);
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x30uLL);
    v6[4] = (uint64_t *)"pcie.log";
    *((_DWORD *)v6 + 10) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 152);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 152) = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v10);
    ++*(_QWORD *)(a1 + 168);
  }
  if (*((_DWORD *)v6 + 10))
  {
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v12 = Mutable;
    v23 = Mutable;
    v13 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get;
    if (!Mutable)
      v13 = 0;
    if (v13)
    {
      v16 = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      if (*a2)
        v14 = _Block_copy(*a2);
      else
        v14 = 0;
      v15 = v14;
      radio::QMIDebugCommandDriverM20::getPCIeLogBlock_sync(a1, (const void **)&v16, &v15);
      if (v14)
        _Block_release(v14);
      if (v12)
      {
        CFRelease(v12);
LABEL_41:
        CFRelease(v12);
      }
    }
    else
    {
      if (*a2)
      {
        v18 = operator new(0x30uLL);
        v19 = xmmword_1B3DCED10;
        strcpy((char *)v18, "Error on Memory allocation for PCIe log block");
        CreateError();
        v17 = 0;
        dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, &cf, &v17);
        if (v17)
          CFRelease(v17);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v19) < 0)
          operator delete(v18);
      }
      if (v12)
        goto LABEL_41;
    }
  }
  else
  {
LABEL_44:
    if (*a2)
    {
      __p = operator new(0x20uLL);
      v22 = xmmword_1B3DCED20;
      strcpy((char *)__p, "Invalid Regioninfo for PCIe");
      CreateError();
      cf = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, (const void **)&v23, &cf);
      if (cf)
        CFRelease(cf);
      if (v23)
        CFRelease(v23);
      if (SHIBYTE(v22) < 0)
        operator delete(__p);
    }
  }
}

void sub_1B3D37D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20)
{
  uint64_t v20;

  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a20);
  if (a19 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v20 - 56));
  _Unwind_Resume(a1);
}

void sub_1B3D37D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v22 - 56));
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_27(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  const void *v8;
  void *v9;
  uint64_t (*v11)(uint64_t);
  const __CFAllocator *v12;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef cf;
  const void *v18;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *a2;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v6 = 0;
  if (v6)
  {
    v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v20 = v5;
      _os_log_error_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_ERROR, "Failed to get PCIe log: %@", buf, 0xCu);
    }
  }
  else
  {
    v11 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    if (!*a3)
      v11 = 0;
    if (v11 && CFDataGetLength((CFDataRef)*a3) >= 1)
    {
      ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 64), (const __CFString **)"pcie.log", *a3, *MEMORY[0x1E0C9AE00], v12);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_28;
  v13[3] = &unk_1E66D9FF8;
  v8 = *(const void **)(a1 + 64);
  v16 = v4;
  cf = v8;
  if (v8)
    CFRetain(v8);
  v14 = *(_OWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 48);
  v9 = _Block_copy(v13);
  v18 = v9;
  radio::QMIDebugCommandDriverM20::getIPALog_sync(v4, &v18);
  if (v9)
    _Block_release(v9);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D37F64(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void radio::QMIDebugCommandDriverM20::getIPALog_sync(uint64_t a1, const void **a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  CFMutableDataRef Mutable;
  CFMutableDataRef v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  const void *v15;
  CFMutableDataRef v16;
  CFTypeRef v17;
  void *v18;
  __int128 v19;
  CFTypeRef cf;
  void *__p;
  __int128 v22;
  CFMutableDataRef v23;

  if (!*(_DWORD *)(a1 + 144))
    goto LABEL_44;
  v5 = (uint64_t **)(a1 + 160);
  v4 = *(uint64_t **)(a1 + 160);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[4];
        if (v7 <= (unint64_t)"ipa.log")
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)"ipa.log")
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(a1 + 160);
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x30uLL);
    v6[4] = (uint64_t *)"ipa.log";
    *((_DWORD *)v6 + 10) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = **(_QWORD **)(a1 + 152);
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *(_QWORD *)(a1 + 152) = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v10);
    ++*(_QWORD *)(a1 + 168);
  }
  if (*((_DWORD *)v6 + 10))
  {
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    v12 = Mutable;
    v23 = Mutable;
    v13 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get;
    if (!Mutable)
      v13 = 0;
    if (v13)
    {
      v16 = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      if (*a2)
        v14 = _Block_copy(*a2);
      else
        v14 = 0;
      v15 = v14;
      radio::QMIDebugCommandDriverM20::getIPALogBlock_sync(a1, (const void **)&v16, &v15);
      if (v14)
        _Block_release(v14);
      if (v12)
      {
        CFRelease(v12);
LABEL_41:
        CFRelease(v12);
      }
    }
    else
    {
      if (*a2)
      {
        v18 = operator new(0x30uLL);
        v19 = xmmword_1B3DCED30;
        strcpy((char *)v18, "Error on Memory allocation for IPA log block");
        CreateError();
        v17 = 0;
        dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, &cf, &v17);
        if (v17)
          CFRelease(v17);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v19) < 0)
          operator delete(v18);
      }
      if (v12)
        goto LABEL_41;
    }
  }
  else
  {
LABEL_44:
    if (*a2)
    {
      __p = operator new(0x20uLL);
      v22 = xmmword_1B3DCDB00;
      strcpy((char *)__p, "Invalid Regioninfo for IPA");
      CreateError();
      cf = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)*a2, (const void **)&v23, &cf);
      if (cf)
        CFRelease(cf);
      if (v23)
        CFRelease(v23);
      if (SHIBYTE(v22) < 0)
        operator delete(__p);
    }
  }
}

void sub_1B3D38250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, const void *a20)
{
  uint64_t v20;

  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a20);
  if (a19 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v20 - 56));
  _Unwind_Resume(a1);
}

void sub_1B3D382D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a16);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v22 - 56));
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_28(uint64_t a1, uint64_t *a2, const void **a3)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t (*v12)(uint64_t);
  const __CFAllocator *v13;
  const void *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  const void *v18;
  NSObject *v19;
  NSObject *v20;
  char *__p;
  CFTypeRef cf;
  __int128 block;
  void (*v24)(uint64_t);
  void *v25;
  void *aBlock;
  CFTypeRef v27;
  CFTypeRef v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v5 = 0;
  if (v5)
  {
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 56) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 138412290;
      *(_QWORD *)((char *)&block + 4) = v4;
      _os_log_error_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_ERROR, "Failed to get IPA log: %@", (uint8_t *)&block, 0xCu);
    }
  }
  else
  {
    v12 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    if (!*a3)
      v12 = 0;
    if (v12 && CFDataGetLength((CFDataRef)*a3) >= 1)
    {
      ctu::cf::insert<char const*,__CFData const*>(*(__CFDictionary **)(a1 + 64), (const __CFString **)"ipa.log", *a3, *MEMORY[0x1E0C9AE00], v13);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(_QWORD *)(v7 + 40);
  v8 = v7 + 40;
  if (v9 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48))
  {
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    {
      v10 = 0;
      cf = 0;
    }
    else
    {
      __p = (char *)operator new(0x20uLL);
      strcpy(__p, "Failed to capture BBIPC logs");
      CreateError();
      operator delete(__p);
      v10 = (const void *)0xAAAAAAAAAAAAAAAALL;
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40;
      CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    }
    v14 = *(const void **)(a1 + 64);
    if (v14)
      CFRetain(*(CFTypeRef *)(a1 + 64));
    if (*(_QWORD *)v8)
      v15 = _Block_copy(*(const void **)v8);
    else
      v15 = 0;
    v16 = *(NSObject **)(v8 + 8);
    *(_QWORD *)&block = MEMORY[0x1E0C809B0];
    *((_QWORD *)&block + 1) = 1174405120;
    v24 = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_NS3_IS6_EEEEEvDpT__block_invoke_2;
    v25 = &__block_descriptor_tmp_77;
    if (v15)
    {
      aBlock = _Block_copy(v15);
      v27 = v10;
      if (!v10)
        goto LABEL_26;
    }
    else
    {
      aBlock = 0;
      v27 = v10;
      if (!v10)
      {
LABEL_26:
        v28 = v14;
        if (v14)
          CFRetain(v14);
        dispatch_async(v16, &block);
        if (v28)
          CFRelease(v28);
        if (v27)
          CFRelease(v27);
        if (aBlock)
          _Block_release(aBlock);
        if (v15)
          _Block_release(v15);
        if (v14)
          CFRelease(v14);
        if (v10)
          CFRelease(v10);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v18 = *(const void **)(v17 + 40);
        *(_QWORD *)(v17 + 40) = 0;
        if (v18)
          _Block_release(v18);
        v19 = *(NSObject **)(v17 + 48);
        *(_QWORD *)(v17 + 48) = 0;
        if (v19)
          dispatch_release(v19);
        if (cf)
          CFRelease(cf);
        goto LABEL_46;
      }
    }
    CFRetain(v10);
    goto LABEL_26;
  }
LABEL_46:
  v20 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v20)
    dispatch_source_cancel(v20);
}

void sub_1B3D38624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

CFTypeRef __copy_helper_block_e8_64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_64c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 64);
  if (v1)
    CFRelease(v1);
}

void ___ZN5radio24QMIDebugCommandDriverM2017queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_34(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  NSObject *v8;
  NSObject *v9;
  char *__p;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v13;
  CFTypeRef v14;

  __p = (char *)operator new(0x20uLL);
  strcpy(__p, "timeout on query IPC logs");
  CreateError();
  operator delete(__p);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v2 + 40) && *(_QWORD *)(v2 + 48))
  {
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    v3 = *(const void **)(v2 + 40);
    if (v3)
      v4 = _Block_copy(v3);
    else
      v4 = 0;
    v5 = *(NSObject **)(v2 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_1;
    block[3] = &__block_descriptor_tmp_78;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    else
    {
      aBlock = 0;
      v13 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    }
    CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    v14 = 0;
    dispatch_async(v5, block);
    if (v14)
      CFRelease(v14);
    if (v13)
      CFRelease(v13);
    if (aBlock)
      _Block_release(aBlock);
    if (v4)
      _Block_release(v4);
    CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(const void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;
    if (v7)
      _Block_release(v7);
    v8 = *(NSObject **)(v6 + 48);
    *(_QWORD *)(v6 + 48) = 0;
    if (v8)
      dispatch_release(v8);
  }
  v9 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  if (v9)
    dispatch_source_cancel(v9);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
}

void sub_1B3D388D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>(uint64_t a1, const void **a2, CFTypeRef *a3)
{
  const void *v3;
  CFTypeRef cf;
  CFTypeRef v5;

  v3 = *a2;
  *a2 = 0;
  cf = *a3;
  v5 = v3;
  *a3 = 0;
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(a1 + 16))(a1, &v5, &cf);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

void sub_1B3D38950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriverM20::getIPALogBlock_sync(uint64_t a1, const void **a2, const void **a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  void *v13;
  CFTypeRef cf;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  _OWORD v20[2];
  _QWORD aBlock[6];

  if (*(_QWORD *)(a1 + 224))
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v20[0] = v6;
    v20[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v20);
    v15 = a1 + 208;
    v16 = QMIServiceMsg::create();
    v17 = 25000;
    v18 = 0;
    v19 = 0;
    v7 = MEMORY[0x1E0C809B0];
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1174405120;
    v12[2] = ___ZN5radio24QMIDebugCommandDriverM2019getIPALogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke;
    v12[3] = &__block_descriptor_tmp_40_5;
    v12[4] = a1;
    if (*a3)
    {
      v8 = _Block_copy(*a3);
      v9 = *a2;
      v13 = v8;
      cf = v9;
      if (!v9)
        goto LABEL_9;
    }
    else
    {
      v9 = *a2;
      v13 = 0;
      cf = v9;
      if (!v9)
      {
LABEL_9:
        aBlock[0] = v7;
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPALogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        aBlock[3] = &unk_1E66DA530;
        aBlock[4] = v12;
        v11 = _Block_copy(aBlock);
        v19 = v11;
        if (v16)
        {
          qmi::Client::send();
          v11 = v19;
        }
        if (v11)
          _Block_release(v11);
        if (cf)
          CFRelease(cf);
        if (v13)
          _Block_release(v13);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v20);
        return;
      }
    }
    CFRetain(v9);
    goto LABEL_9;
  }
  v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "No BSP client, bail", (uint8_t *)aBlock, 2u);
  }
}

void sub_1B3D38B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  const void **v21;

  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(v21);
  if (aBlock)
    _Block_release(aBlock);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void sub_1B3D38B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN5radio24QMIDebugCommandDriverM2019getIPALogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  const void *v4;
  uint64_t v5;
  void *v6;
  tlv *TlvValue;
  int v8;
  tlv *v9;
  unsigned int v10;
  void *v11;
  char *v12;
  int v13;
  NSObject *v14;
  CFIndex Length;
  UInt8 *v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::string v30;
  CFTypeRef v31;
  void *v32;
  CFTypeRef cf;
  __int16 v34;
  char *v35;
  std::string *v36;
  std::string v37;
  char v38;
  void *aBlock;
  UInt8 *bytes;
  UInt8 *v41;
  uint64_t v42;
  void *v43;
  uint8_t buf[8];
  __int16 v45;
  CFIndex v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    v6 = _Block_copy(v4);
  else
    v6 = 0;
  aBlock = v6;
  v38 = 1;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1B3DCB3C0;
  strcpy(v37.__r_.__value_.__l.__data_, "Error on GetIPALogs response");
  if (*((_DWORD *)a2 + 1))
  {
    if (!v6)
      goto LABEL_73;
LABEL_57:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v37.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(&v30, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
        goto LABEL_62;
      }
    }
    else if (*((_BYTE *)&v37.__r_.__value_.__s + 23))
    {
      v30 = v37;
LABEL_62:
      CreateError();
      bytes = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)v6, &v31, (CFTypeRef *)&bytes);
      if (bytes)
        CFRelease(bytes);
      if (v31)
        CFRelease(v31);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
LABEL_71:
      v27 = aBlock;
      aBlock = 0;
      if (v27)
        _Block_release(v27);
      goto LABEL_73;
    }
    if (v38)
    {
      v31 = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>((uint64_t *)&aBlock, &v31, (CFTypeRef *)(a1 + 48));
      if (v31)
        CFRelease(v31);
    }
    goto LABEL_71;
  }
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)2);
    v10 = *(unsigned __int16 *)v9;
    v31 = (CFTypeRef)v5;
    if (!v6)
      goto LABEL_9;
LABEL_12:
    v6 = _Block_copy(v6);
    v11 = *(void **)(a1 + 48);
    v32 = v6;
    cf = v11;
    if (!v11)
      goto LABEL_14;
    goto LABEL_13;
  }
  v10 = 0;
  v31 = (CFTypeRef)v5;
  if (v6)
    goto LABEL_12;
LABEL_9:
  v11 = *(void **)(a1 + 48);
  v32 = v6;
  cf = v11;
  if (v11)
LABEL_13:
    CFRetain(v11);
LABEL_14:
  v34 = v10;
  v35 = &v38;
  v36 = &v37;
  v12 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (!v12)
    goto LABEL_52;
  bytes = 0;
  v41 = 0;
  v42 = 0;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&bytes, v12, &v12[v13], v13);
  v14 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    Length = CFDataGetLength((CFDataRef)v11);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v10;
    v45 = 2048;
    v46 = Length;
    _os_log_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_DEFAULT, "#I Reading IPA log block(size %u), data:%ld", buf, 0x12u);
  }
  if (*(_DWORD *)(v5 + 144) < v10)
  {
    std::string::__assign_external(&v37, "Block size error on getting IPA Logs", 0x24uLL);
    goto LABEL_50;
  }
  if (v10)
  {
    v29 = v5;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      *v37.__r_.__value_.__l.__data_ = 0;
      v37.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v37.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
    }
    CFDataAppendBytes((CFMutableDataRef)v11, bytes, v10);
    v17 = CFDataGetLength((CFDataRef)v11);
    v18 = v17;
    v20 = (uint64_t **)(v5 + 160);
    v19 = *(uint64_t **)(v29 + 160);
    if (v19)
    {
      while (1)
      {
        while (1)
        {
          v21 = v19;
          v22 = v19[4];
          if (v22 <= (unint64_t)"ipa.log")
            break;
          v19 = (uint64_t *)*v21;
          v20 = (uint64_t **)v21;
          if (!*v21)
            goto LABEL_33;
        }
        if (v22 >= (unint64_t)"ipa.log")
          break;
        v19 = (uint64_t *)v21[1];
        if (!v19)
        {
          v20 = (uint64_t **)(v21 + 1);
          goto LABEL_33;
        }
      }
      if (v17 >= *((unsigned int *)v21 + 10))
      {
LABEL_50:
        v16 = bytes;
        if (!bytes)
          goto LABEL_52;
        goto LABEL_51;
      }
    }
    else
    {
      v21 = (uint64_t *)(v29 + 160);
LABEL_33:
      v23 = operator new(0x30uLL);
      v23[4] = "ipa.log";
      *((_DWORD *)v23 + 10) = 0;
      *v23 = 0;
      v23[1] = 0;
      v23[2] = v21;
      *v20 = v23;
      v24 = **(_QWORD **)(v29 + 152);
      v25 = v23;
      if (v24)
      {
        *(_QWORD *)(v29 + 152) = v24;
        v25 = *v20;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v29 + 160), v25);
      ++*(_QWORD *)(v29 + 168);
      if (v18 >= *((unsigned int *)v23 + 10))
        goto LABEL_50;
    }
    *(_QWORD *)buf = cf;
    if (cf)
      CFRetain(cf);
    if (v6)
      v26 = _Block_copy(v6);
    else
      v26 = 0;
    v43 = v26;
    radio::QMIDebugCommandDriverM20::getIPALogBlock_sync(v29, buf, &v43);
    if (v26)
      _Block_release(v26);
    if (cf)
      CFRelease(cf);
    *v35 = 0;
    goto LABEL_50;
  }
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v37.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
    v16 = bytes;
    if (!bytes)
      goto LABEL_52;
LABEL_51:
    v41 = v16;
    operator delete(v16);
    goto LABEL_52;
  }
  *v37.__r_.__value_.__l.__data_ = 0;
  v37.__r_.__value_.__l.__size_ = 0;
  v16 = bytes;
  if (bytes)
    goto LABEL_51;
LABEL_52:
  if (cf)
    CFRelease(cf);
  if (v6)
    _Block_release(v6);
  v6 = aBlock;
  if (aBlock)
    goto LABEL_57;
LABEL_73:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    v28 = aBlock;
    if (!aBlock)
      return;
    goto LABEL_77;
  }
  v28 = aBlock;
  if (aBlock)
LABEL_77:
    _Block_release(v28);
}

void sub_1B3D390C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *aBlock,void *__p,uint64_t a32)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t _ZZZN5radio24QMIDebugCommandDriverM2019getIPALogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEEEUb0_EN3__6D1Ev(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    _Block_release(v3);
  return a1;
}

void dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>(uint64_t *a1, CFTypeRef *a2, CFTypeRef *a3)
{
  uint64_t v3;
  CFTypeRef v4;
  CFTypeID v5;
  CFTypeRef cf;
  CFTypeRef v7;

  v3 = *a1;
  v7 = *a2;
  *a2 = 0;
  v4 = *a3;
  if (*a3 && (v5 = CFGetTypeID(*a3), v5 == CFDataGetTypeID()))
  {
    cf = v4;
    CFRetain(v4);
  }
  else
  {
    cf = 0;
  }
  (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v3 + 16))(v3, &v7, &cf);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
}

void sub_1B3D39318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1B3D39334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c93_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK8__CFDataEEEEE48c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  CFTypeRef result;

  v4 = *(const void **)(a2 + 40);
  if (!v4)
  {
    result = *(CFTypeRef *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  v5 = _Block_copy(v4);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c93_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK8__CFDataEEEEE48c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void radio::QMIDebugCommandDriverM20::getPCIeLogBlock_sync(uint64_t a1, const void **a2, const void **a3)
{
  __int128 v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  NSObject *v10;
  void *v11;
  _QWORD v12[5];
  void *v13;
  CFTypeRef cf;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  _OWORD v20[2];
  _QWORD aBlock[6];

  if (*(_QWORD *)(a1 + 192))
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v20[0] = v6;
    v20[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v20);
    v15 = a1 + 176;
    v16 = QMIServiceMsg::create();
    v17 = 25000;
    v18 = 0;
    v19 = 0;
    v7 = MEMORY[0x1E0C809B0];
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1174405120;
    v12[2] = ___ZN5radio24QMIDebugCommandDriverM2020getPCIeLogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke;
    v12[3] = &__block_descriptor_tmp_44_0;
    v12[4] = a1;
    if (*a3)
    {
      v8 = _Block_copy(*a3);
      v9 = *a2;
      v13 = v8;
      cf = v9;
      if (!v9)
        goto LABEL_9;
    }
    else
    {
      v9 = *a2;
      v13 = 0;
      cf = v9;
      if (!v9)
      {
LABEL_9:
        aBlock[0] = v7;
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm11GetPCIeLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        aBlock[3] = &unk_1E66DA558;
        aBlock[4] = v12;
        v11 = _Block_copy(aBlock);
        v19 = v11;
        if (v16)
        {
          qmi::Client::send();
          v11 = v19;
        }
        if (v11)
          _Block_release(v11);
        if (cf)
          CFRelease(cf);
        if (v13)
          _Block_release(v13);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v20);
        return;
      }
    }
    CFRetain(v9);
    goto LABEL_9;
  }
  v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "No APPS client, bail", (uint8_t *)aBlock, 2u);
  }
}

void sub_1B3D395A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  const void **v21;

  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(v21);
  if (aBlock)
    _Block_release(aBlock);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void sub_1B3D395D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio24QMIDebugCommandDriverM2020getPCIeLogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  const void *v4;
  uint64_t v5;
  void *v6;
  tlv *TlvValue;
  int v8;
  tlv *v9;
  unsigned int v10;
  void *v11;
  char *v12;
  int v13;
  NSObject *v14;
  CFIndex Length;
  UInt8 *v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  std::string v30;
  CFTypeRef v31;
  void *v32;
  CFTypeRef cf;
  __int16 v34;
  char *v35;
  std::string *v36;
  std::string v37;
  char v38;
  void *aBlock;
  UInt8 *bytes;
  UInt8 *v41;
  uint64_t v42;
  void *v43;
  uint8_t buf[8];
  __int16 v45;
  CFIndex v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    v6 = _Block_copy(v4);
  else
    v6 = 0;
  aBlock = v6;
  v38 = 1;
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1B3DCC670;
  strcpy(v37.__r_.__value_.__l.__data_, "Error on GetPCIeLogs response");
  if (*((_DWORD *)a2 + 1))
  {
    if (!v6)
      goto LABEL_73;
LABEL_57:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v37.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(&v30, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
        goto LABEL_62;
      }
    }
    else if (*((_BYTE *)&v37.__r_.__value_.__s + 23))
    {
      v30 = v37;
LABEL_62:
      CreateError();
      bytes = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>((uint64_t)v6, &v31, (CFTypeRef *)&bytes);
      if (bytes)
        CFRelease(bytes);
      if (v31)
        CFRelease(v31);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
LABEL_71:
      v27 = aBlock;
      aBlock = 0;
      if (v27)
        _Block_release(v27);
      goto LABEL_73;
    }
    if (v38)
    {
      v31 = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>((uint64_t *)&aBlock, &v31, (CFTypeRef *)(a1 + 48));
      if (v31)
        CFRelease(v31);
    }
    goto LABEL_71;
  }
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)2);
    v10 = *(unsigned __int16 *)v9;
    v31 = (CFTypeRef)v5;
    if (!v6)
      goto LABEL_9;
LABEL_12:
    v6 = _Block_copy(v6);
    v11 = *(void **)(a1 + 48);
    v32 = v6;
    cf = v11;
    if (!v11)
      goto LABEL_14;
    goto LABEL_13;
  }
  v10 = 0;
  v31 = (CFTypeRef)v5;
  if (v6)
    goto LABEL_12;
LABEL_9:
  v11 = *(void **)(a1 + 48);
  v32 = v6;
  cf = v11;
  if (v11)
LABEL_13:
    CFRetain(v11);
LABEL_14:
  v34 = v10;
  v35 = &v38;
  v36 = &v37;
  v12 = (char *)qmi::MessageBase::findTlvValue(a2);
  if (!v12)
    goto LABEL_52;
  bytes = 0;
  v41 = 0;
  v42 = 0;
  std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&bytes, v12, &v12[v13], v13);
  v14 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    Length = CFDataGetLength((CFDataRef)v11);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v10;
    v45 = 2048;
    v46 = Length;
    _os_log_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_DEFAULT, "#I Reading PCIe log block(size %u), data:%ld", buf, 0x12u);
  }
  if (*(_DWORD *)(v5 + 144) < v10)
  {
    std::string::__assign_external(&v37, "Block size error on getting PCIe Logs", 0x25uLL);
    goto LABEL_50;
  }
  if (v10)
  {
    v29 = v5;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    {
      *v37.__r_.__value_.__l.__data_ = 0;
      v37.__r_.__value_.__l.__size_ = 0;
    }
    else
    {
      v37.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
    }
    CFDataAppendBytes((CFMutableDataRef)v11, bytes, v10);
    v17 = CFDataGetLength((CFDataRef)v11);
    v18 = v17;
    v20 = (uint64_t **)(v5 + 160);
    v19 = *(uint64_t **)(v29 + 160);
    if (v19)
    {
      while (1)
      {
        while (1)
        {
          v21 = v19;
          v22 = v19[4];
          if (v22 <= (unint64_t)"pcie.log")
            break;
          v19 = (uint64_t *)*v21;
          v20 = (uint64_t **)v21;
          if (!*v21)
            goto LABEL_33;
        }
        if (v22 >= (unint64_t)"pcie.log")
          break;
        v19 = (uint64_t *)v21[1];
        if (!v19)
        {
          v20 = (uint64_t **)(v21 + 1);
          goto LABEL_33;
        }
      }
      if (v17 >= *((unsigned int *)v21 + 10))
      {
LABEL_50:
        v16 = bytes;
        if (!bytes)
          goto LABEL_52;
        goto LABEL_51;
      }
    }
    else
    {
      v21 = (uint64_t *)(v29 + 160);
LABEL_33:
      v23 = operator new(0x30uLL);
      v23[4] = "pcie.log";
      *((_DWORD *)v23 + 10) = 0;
      *v23 = 0;
      v23[1] = 0;
      v23[2] = v21;
      *v20 = v23;
      v24 = **(_QWORD **)(v29 + 152);
      v25 = v23;
      if (v24)
      {
        *(_QWORD *)(v29 + 152) = v24;
        v25 = *v20;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v29 + 160), v25);
      ++*(_QWORD *)(v29 + 168);
      if (v18 >= *((unsigned int *)v23 + 10))
        goto LABEL_50;
    }
    *(_QWORD *)buf = cf;
    if (cf)
      CFRetain(cf);
    if (v6)
      v26 = _Block_copy(v6);
    else
      v26 = 0;
    v43 = v26;
    radio::QMIDebugCommandDriverM20::getPCIeLogBlock_sync(v29, buf, &v43);
    if (v26)
      _Block_release(v26);
    if (cf)
      CFRelease(cf);
    *v35 = 0;
    goto LABEL_50;
  }
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v37.__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&v37.__r_.__value_.__s + 23) = 0;
    v16 = bytes;
    if (!bytes)
      goto LABEL_52;
LABEL_51:
    v41 = v16;
    operator delete(v16);
    goto LABEL_52;
  }
  *v37.__r_.__value_.__l.__data_ = 0;
  v37.__r_.__value_.__l.__size_ = 0;
  v16 = bytes;
  if (bytes)
    goto LABEL_51;
LABEL_52:
  if (cf)
    CFRelease(cf);
  if (v6)
    _Block_release(v6);
  v6 = aBlock;
  if (aBlock)
    goto LABEL_57;
LABEL_73:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    v28 = aBlock;
    if (!aBlock)
      return;
    goto LABEL_77;
  }
  v28 = aBlock;
  if (aBlock)
LABEL_77:
    _Block_release(v28);
}

void sub_1B3D39B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *aBlock,void *__p,uint64_t a32)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t _ZZZN5radio24QMIDebugCommandDriverM2020getPCIeLogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEEEUb1_EN3__8D1Ev(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 16);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 8);
  if (v3)
    _Block_release(v3);
  return a1;
}

void radio::QMIDebugCommandDriverM20::getMHILogBlock_sync(uint64_t a1, const void **a2, void **a3)
{
  void *v5;
  __int128 v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  NSObject *v10;
  _QWORD v11[7];
  CFTypeRef cf;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  _OWORD v18[2];
  _QWORD v19[3];
  char v20;
  uint8_t buf[8];
  uint8_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  const void *v26;
  _QWORD aBlock[5];

  if (*(_QWORD *)(a1 + 192))
  {
    *(_QWORD *)buf = 0;
    v22 = buf;
    v23 = 0x3002000000;
    v24 = __Block_byref_object_copy__47;
    v25 = __Block_byref_object_dispose__48;
    v26 = (const void *)0xAAAAAAAAAAAAAAAALL;
    v5 = *a3;
    if (*a3)
      v5 = _Block_copy(v5);
    v26 = v5;
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x2000000000;
    v20 = 1;
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v18[0] = v6;
    v18[1] = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v18);
    v13 = a1 + 176;
    v14 = QMIServiceMsg::create();
    v15 = 25000;
    v16 = 0;
    v17 = 0;
    v7 = MEMORY[0x1E0C809B0];
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1174405120;
    v11[2] = ___ZN5radio24QMIDebugCommandDriverM2019getMHILogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke;
    v11[3] = &unk_1E66DA160;
    v8 = *a2;
    v11[6] = a1;
    cf = v8;
    if (v8)
      CFRetain(v8);
    v11[4] = buf;
    v11[5] = v19;
    aBlock[0] = v7;
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm10GetMHILogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_1E66DA580;
    aBlock[4] = v11;
    v9 = _Block_copy(aBlock);
    v17 = v9;
    if (v14)
    {
      qmi::Client::send();
      v9 = v17;
    }
    if (v9)
      _Block_release(v9);
    if (cf)
      CFRelease(cf);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v18);
    _Block_object_dispose(v19, 8);
    _Block_object_dispose(buf, 8);
    if (v26)
      _Block_release(v26);
  }
  else
  {
    v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "No APPS client, bail", buf, 2u);
    }
  }
}

void sub_1B3D39EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  const void **v27;
  uint64_t v28;
  const void *v30;

  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef(v27);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a18);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);
  v30 = *(const void **)(v28 - 88);
  if (v30)
    _Block_release(v30);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void ___ZN5radio24QMIDebugCommandDriverM2019getMHILogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4;
  tlv *TlvValue;
  int v6;
  tlv *v7;
  __int16 v8;
  const void *v9;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  const std::string::value_type **v15;
  std::string::size_type v16;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;
  std::string v20;
  _QWORD v21[2];
  void (*v22)(uint64_t, const UInt8 **);
  void *v23;
  uint64_t *v24;
  __int128 v25;
  uint64_t v26;
  CFTypeRef cf;
  __int16 v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  __n128 (*v32)(uint64_t, uint64_t);
  void (*v33)(uint64_t);
  void *__p;
  __int128 v35;
  void *v36;
  void *v37;
  uint64_t v38;

  v4 = *(_QWORD *)(a1 + 48);
  v29 = 0;
  v30 = &v29;
  v31 = 0x4002000000;
  v32 = __Block_byref_object_copy__49;
  v33 = __Block_byref_object_dispose__50;
  __p = operator new(0x20uLL);
  v35 = xmmword_1B3DCB3C0;
  strcpy((char *)__p, "Error on GetMHILogs response");
  if (!*((_DWORD *)a2 + 1))
  {
    TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
    v7 = TlvValue;
    if (TlvValue)
    {
      tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v6, (const unsigned __int8 *)2);
      v8 = *(_WORD *)v7;
    }
    else
    {
      v8 = 0;
    }
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 1174405120;
    v22 = ___ZN5radio24QMIDebugCommandDriverM2019getMHILogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke_52;
    v23 = &unk_1E66DA128;
    v28 = v8;
    v9 = *(const void **)(a1 + 56);
    v26 = v4;
    cf = v9;
    if (v9)
      CFRetain(v9);
    v24 = &v29;
    v25 = *(_OWORD *)(a1 + 32);
    v10 = (char *)qmi::MessageBase::findTlvValue(a2);
    if (v10)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v36, v10, &v10[v11], v11);
      v22((uint64_t)v21, (const UInt8 **)&v36);
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
    }
    if (cf)
      CFRelease(cf);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v14 = *(_QWORD *)(v12 + 40);
  v13 = (uint64_t *)(v12 + 40);
  if (v14)
  {
    v15 = (const std::string::value_type **)(v30 + 5);
    if (*((char *)v30 + 63) < 0)
    {
      v16 = v30[6];
      if (v16)
      {
        std::string::__init_copy_ctor_external(&v20, *v15, v16);
        goto LABEL_18;
      }
    }
    else if (*((_BYTE *)v30 + 63))
    {
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)v15;
      v20.__r_.__value_.__r.__words[2] = v30[7];
LABEL_18:
      CreateError();
      v19 = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>>(*v13, (const void **)&v36, &v19);
      if (v19)
        CFRelease(v19);
      if (v36)
        CFRelease(v36);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
LABEL_27:
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v18 = *(const void **)(v17 + 40);
      *(_QWORD *)(v17 + 40) = 0;
      if (v18)
        _Block_release(v18);
      goto LABEL_29;
    }
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    {
      v36 = 0;
      dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>(v13, (CFTypeRef *)&v36, (CFTypeRef *)(a1 + 56));
      if (v36)
        CFRelease(v36);
    }
    goto LABEL_27;
  }
LABEL_29:
  _Block_object_dispose(&v29, 8);
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
}

void sub_1B3D3A23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v37 - 72));
  _Block_object_dispose(&a27, 8);
  if ((a37 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__49(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__50(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN5radio24QMIDebugCommandDriverM2019getMHILogBlock_syncEN3ctu2cf11CFSharedRefI8__CFDataEEN8dispatch5blockIU13block_pointerFvNS3_I9__CFErrorEENS3_IKS4_EEEEE_block_invoke_52(uint64_t a1, const UInt8 **a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  CFIndex Length;
  uint64_t v8;
  int v9;
  CFIndex v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  const void *v19;
  const void *v20;
  void *v21;
  void *v22;
  const void *v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  CFIndex v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int16 *)(a1 + 72);
    Length = CFDataGetLength(*(CFDataRef *)(a1 + 64));
    *(_DWORD *)buf = 67109376;
    v25 = v6;
    v26 = 2048;
    v27 = Length;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Reading MHI log block(size: %u), data: %ld", buf, 0x12u);
  }
  if (*(_DWORD *)(v4 + 144) < *(unsigned __int16 *)(a1 + 72))
  {
    std::string::__assign_external((std::string *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "Block size error on getting MHI Logs", 0x24uLL);
    return;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(char *)(v8 + 63);
  if (!*(_WORD *)(a1 + 72))
  {
    if (v9 < 0)
    {
      **(_BYTE **)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 40) = 0;
      *(_BYTE *)(v8 + 63) = 0;
    }
    return;
  }
  if (v9 < 0)
  {
    **(_BYTE **)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
  }
  else
  {
    *(_BYTE *)(v8 + 40) = 0;
    *(_BYTE *)(v8 + 63) = 0;
  }
  CFDataAppendBytes(*(CFMutableDataRef *)(a1 + 64), *a2, *(unsigned __int16 *)(a1 + 72));
  v10 = CFDataGetLength(*(CFDataRef *)(a1 + 64));
  v11 = v10;
  v13 = (uint64_t **)(v4 + 160);
  v12 = *(uint64_t **)(v4 + 160);
  if (!v12)
  {
    v14 = (uint64_t *)(v4 + 160);
LABEL_18:
    v16 = operator new(0x30uLL);
    v16[4] = "mhi.log";
    *((_DWORD *)v16 + 10) = 0;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = v14;
    *v13 = v16;
    v17 = **(_QWORD **)(v4 + 152);
    v18 = v16;
    if (v17)
    {
      *(_QWORD *)(v4 + 152) = v17;
      v18 = *v13;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 160), v18);
    ++*(_QWORD *)(v4 + 168);
    if (v11 >= *((unsigned int *)v16 + 10))
      return;
LABEL_24:
    v19 = *(const void **)(a1 + 64);
    v23 = v19;
    if (v19)
      CFRetain(v19);
    v20 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    if (v20)
      v21 = _Block_copy(v20);
    else
      v21 = 0;
    v22 = v21;
    radio::QMIDebugCommandDriverM20::getMHILogBlock_sync(v4, &v23, &v22);
    if (v21)
      _Block_release(v21);
    if (v19)
      CFRelease(v19);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    return;
  }
  while (1)
  {
    while (1)
    {
      v14 = v12;
      v15 = v12[4];
      if (v15 <= (unint64_t)"mhi.log")
        break;
      v12 = (uint64_t *)*v14;
      v13 = (uint64_t **)v14;
      if (!*v14)
        goto LABEL_18;
    }
    if (v15 >= (unint64_t)"mhi.log")
      break;
    v12 = (uint64_t *)v14[1];
    if (!v12)
    {
      v13 = (uint64_t **)(v14 + 1);
      goto LABEL_18;
    }
  }
  if (v10 < *((unsigned int *)v14 + 10))
    goto LABEL_24;
}

void sub_1B3D3A624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

CFTypeRef __copy_helper_block_e8_64c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_64c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 64);
  if (v1)
    CFRelease(v1);
}

CFTypeRef __copy_helper_block_e8_56c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_56c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 56);
  if (v1)
    CFRelease(v1);
}

uint64_t ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(radio::DebugCommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)radio::DebugCommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E66DA2B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E66DA2B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D3A938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D3A954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<radio::QMIDebugCommandDriverM20>::shared_ptr[abi:ne180100]<radio::QMIDebugCommandDriverM20,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66DA2F0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D3AA70(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1}::operator() const(radio::QMIDebugCommandDriverM20*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D3AA90(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<radio::QMIDebugCommandDriverM20 *,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20 *)#1},std::allocator<radio::QMIDebugCommandDriverM20>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMIDebugCommandDriverM20 *,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20 *)#1},std::allocator<radio::QMIDebugCommandDriverM20>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1}::operator() const(radio::QMIDebugCommandDriverM20*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::QMIDebugCommandDriverM20 *,std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20 *)#1},std::allocator<radio::QMIDebugCommandDriverM20>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_24QMIDebugCommandDr"
                     "iverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_24QMIDeb"
                                "ugCommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_24QMIDebugCommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_24QMIDebugCommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::QMIDebugCommandDriverM20> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriverM20>(radio::QMIDebugCommandDriverM20*)::{lambda(radio::QMIDebugCommandDriverM20*)#1}::operator() const(radio::QMIDebugCommandDriverM20*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66DA338;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIKN5radio18DebugCommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIKN5radio18DebugCommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::length>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::length>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::length>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DA390;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm19ConfigMHILogPayload8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3AE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3AE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3AE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::createTLV<apps::tlv::abm::Level>(_QWORD *a1)
{
  _WORD *v2;
  _WORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *result;

  v2 = operator new(0x10uLL);
  v3 = v2;
  v2[4] = 1;
  *(_QWORD *)v2 = off_1E66DA408;
  v5 = (char *)a1[2];
  v4 = a1[3];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = v2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (char *)a1[1];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v3;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v3;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  result = (char *)v3 + 9;
  a1[2] = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::Level>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::Level>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<apps::tlv::abm::Level>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DA408;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm14SetMHILogLevel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3B158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3B16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3B198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm15SetPCIeLogLevel8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3B26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3B280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3B2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm10GetIPCInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3B380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3B394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3B3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE20execute_wrapped_syncIZNS1_24QMIDebugCommandDriverM2012queryIPCLogsEyN8dispatch8callbackIU13block_pointerFvNS_2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  dispatch_time_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)v1;
  v3 = **(_QWORD **)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)v4)
  {
    v5 = _Block_copy(*(const void **)v4);
    v6 = *(NSObject **)(v4 + 8);
    v7 = v5;
    v8 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  v6 = *(NSObject **)(v4 + 8);
  v7 = 0;
  v8 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  radio::QMIDebugCommandDriverM20::queryIPCLogs_sync(v2, v3, (uint64_t)&v7);
  if (v6)
    dispatch_release(v6);
  if (v5)
    _Block_release(v5);
}

void sub_1B3D3B474(_Unwind_Exception *exception_object)
{
  const void *v1;
  NSObject *v2;

  if (v2)
    dispatch_release(v2);
  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_1(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPALogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3B570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3B584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3B5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm11GetPCIeLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3B684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3B698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3B6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4apps3abm10GetMHILogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D3B798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3B7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D3B7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t coredump::QMICommandDriverM20::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xE0uLL);
  v7 = (uint64_t)v6;
  v8 = a1[1];
  v22 = *a1;
  v23 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  coredump::QMICommandDriverM20::QMICommandDriverM20((uint64_t)v6, &v22, v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<coredump::QMICommandDriverM20>::shared_ptr[abi:ne180100]<coredump::QMICommandDriverM20,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1},void>(a3, v7);
  ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 48))(*a3);
}

void sub_1B3D3B924(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D3B938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t coredump::QMICommandDriverM20::QMICommandDriverM20(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a2[1];
  v19 = *a2;
  v20 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a3[1];
  v17 = *a3;
  v18 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  coredump::CommandDriver::CommandDriver((uint64_t *)a1, &v19, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)a1 = off_1E66DA5B0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return a1;
}

void sub_1B3D3BA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t *coredump::CommandDriver::CommandDriver(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _BYTE v15[16];

  *a1 = (uint64_t)&unk_1E66DA838;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v15, "com.apple.telephony.abm", "coredump.drv");
  v6 = dispatch_queue_create("coredump.drv", 0);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = (uint64_t)v6;
  if (v6)
  {
    v7 = v6;
    dispatch_retain(v6);
    a1[12] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[12] = 0;
  }
  ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v15, a2);
  *a1 = (uint64_t)&unk_1E66DA8A0;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *a1 = (uint64_t)&unk_1E66DA838;
  a1[13] = (uint64_t)&off_1E66DA960;
  v8 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::signal_impl(v8);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>(a1 + 14, (uint64_t)v8);
  a1[16] = (uint64_t)&off_1E66DABB0;
  v9 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::signal_impl(v9);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>(a1 + 17, (uint64_t)v9);
  a1[19] = (uint64_t)&off_1E66DAD40;
  v10 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(v10);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(a1 + 20, (uint64_t)v10);
  a1[22] = *a3;
  v11 = a3[1];
  a1[23] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return a1;
}

void sub_1B3D3BC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;

  operator delete(v14);
  boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::~signal(v13);
  boost::signals2::signal<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::~signal(v12);
  ctu::SharedLoggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v11);
  _Unwind_Resume(a1);
}

void sub_1B3D3BCA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedLoggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void coredump::CommandDriver::~CommandDriver(coredump::CommandDriver *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  NSObject *v26;
  NSObject *v27;
  std::__shared_weak_count *v28;

  *(_QWORD *)this = &unk_1E66DA838;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *((_QWORD *)this + 19) = &off_1E66DAD40;
    v5 = (unsigned int *)*((_QWORD *)this + 21);
    if (!v5)
      goto LABEL_14;
  }
  else
  {
LABEL_5:
    *((_QWORD *)this + 19) = &off_1E66DAD40;
    v5 = (unsigned int *)*((_QWORD *)this + 21);
    if (!v5)
      goto LABEL_14;
  }
  v6 = v5 + 2;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
    v9 = v5 + 3;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
  }
LABEL_14:
  *((_QWORD *)this + 16) = &off_1E66DABB0;
  v12 = (unsigned int *)*((_QWORD *)this + 18);
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
      v16 = v12 + 3;
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 24))(v12);
    }
  }
  *((_QWORD *)this + 13) = &off_1E66DA960;
  v19 = (unsigned int *)*((_QWORD *)this + 15);
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
      v23 = v19 + 3;
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 24))(v19);
    }
  }
  *(_QWORD *)this = &unk_1E66DA8E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v26 = *((_QWORD *)this + 12);
  if (v26)
    dispatch_release(v26);
  v27 = *((_QWORD *)this + 11);
  if (v27)
    dispatch_release(v27);
  v28 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
}

void coredump::QMICommandDriverM20::~QMICommandDriverM20(coredump::QMICommandDriverM20 *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66DA5B0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriverM20 *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
}

{
  NSObject *v2;
  uint8_t v3[16];

  *(_QWORD *)this = off_1E66DA5B0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v3, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriverM20 *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
}

{
  NSObject *v2;
  void *v3;
  uint8_t v4[16];

  *(_QWORD *)this = off_1E66DA5B0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v4, 2u);
  }
  qmi::Client::~Client((coredump::QMICommandDriverM20 *)((char *)this + 192));
  coredump::CommandDriver::~CommandDriver(this);
  operator delete(v3);
}

void coredump::QMICommandDriverM20::init(coredump::QMICommandDriverM20 *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN8coredump19QMICommandDriverM204initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_9_5;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_24_6;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN8coredump19QMICommandDriverM204initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  Registry *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  qmi::Client *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  dispatch_object_t object;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  void *v75[2];
  char v76;
  NSObject *v77;
  void *v78[2];
  char v79;
  __int128 buf;
  __int128 v81;
  __int128 v82;

  v1 = *(_QWORD *)(a1 + 32);
  v82 = 0uLL;
  v2 = *(Registry **)(v1 + 176);
  if (v2)
  {
    Registry::getServerConnection(v2);
    v82 = buf;
    if ((_QWORD)buf)
    {
      v79 = 12;
      v3 = *(NSObject **)(v1 + 88);
      v77 = v3;
      strcpy((char *)v78, "coredump.drv");
      if (v3)
        dispatch_retain(v3);
      v76 = 5;
      strcpy((char *)v75, "ssctl");
      v4 = *(std::__shared_weak_count **)(v1 + 80);
      if (!v4 || (v5 = std::__shared_weak_count::lock(v4)) == 0)
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v6 = v5;
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        v11 = std::__shared_weak_count::lock(v5);
        if (v11)
          goto LABEL_13;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
        v11 = std::__shared_weak_count::lock(v6);
        if (v11)
        {
LABEL_13:
          v12 = (unint64_t *)&v11->__shared_weak_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          v74 = v11;
LABEL_16:
          std::__shared_weak_count::__release_weak(v6);
          if (v11)
          {
            v14 = (unint64_t *)&v11->__shared_owners_;
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          v73 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
          if (*((_QWORD *)&v82 + 1))
          {
            v16 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
            do
              v17 = __ldxr(v16);
            while (__stxr(v17 + 1, v16));
          }
          qmi::Client::createWithQueueLocal();
          v18 = v81;
          v81 = 0uLL;
          v19 = *(std::__shared_weak_count **)(v1 + 216);
          *(_OWORD *)(v1 + 208) = v18;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          qmi::Client::~Client((qmi::Client *)&buf);
          if (v73)
          {
            v22 = (unint64_t *)&v73->__shared_owners_;
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          if (v74)
            std::__shared_weak_count::__release_weak(v74);
          if (v76 < 0)
            operator delete(v75[0]);
          v24 = v77;
          if (!v77)
            goto LABEL_69;
LABEL_68:
          dispatch_release(v24);
          goto LABEL_69;
        }
      }
      v74 = v11;
      goto LABEL_16;
    }
  }
  v79 = 12;
  strcpy((char *)v78, "coredump.drv");
  v25 = *(NSObject **)(v1 + 88);
  object = v25;
  if (v25)
    dispatch_retain(v25);
  v76 = 5;
  strcpy((char *)v75, "ssctl");
  v26 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v26 || (v27 = std::__shared_weak_count::lock(v26)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v28 = v27;
  v29 = (unint64_t *)&v27->__shared_weak_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  v31 = (unint64_t *)&v27->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
    v33 = std::__shared_weak_count::lock(v27);
    if (v33)
      goto LABEL_50;
LABEL_114:
    v71 = v33;
    goto LABEL_53;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v28);
  v33 = std::__shared_weak_count::lock(v28);
  if (!v33)
    goto LABEL_114;
LABEL_50:
  v34 = (unint64_t *)&v33->__shared_weak_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v71 = v33;
LABEL_53:
  std::__shared_weak_count::__release_weak(v28);
  if (v33)
  {
    v36 = (unint64_t *)&v33->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  qmi::Client::createWithQueue();
  v38 = v81;
  v81 = 0uLL;
  v39 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v38;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  qmi::Client::~Client((qmi::Client *)&buf);
  if (v71)
    std::__shared_weak_count::__release_weak(v71);
  if (v76 < 0)
    operator delete(v75[0]);
  v24 = object;
  if (object)
    goto LABEL_68;
LABEL_69:
  if (v79 < 0)
  {
    operator delete(v78[0]);
    v42 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
LABEL_71:
      v43 = *(std::__shared_weak_count **)(v1 + 80);
      if (!v43)
        goto LABEL_101;
      goto LABEL_72;
    }
  }
  else
  {
    v42 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      goto LABEL_71;
  }
  LOWORD(buf) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v42, OS_LOG_TYPE_DEBUG, "#D initializing", (uint8_t *)&buf, 2u);
  v43 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v43)
LABEL_101:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_72:
  v44 = std::__shared_weak_count::lock(v43);
  if (!v44)
    goto LABEL_101;
  v45 = v44;
  v46 = (unint64_t *)&v44->__shared_weak_owners_;
  do
    v47 = __ldxr(v46);
  while (__stxr(v47 + 1, v46));
  v48 = (unint64_t *)&v44->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v45);
  }
  v50 = (qmi::Client *)(v1 + 192);
  do
    v51 = __ldxr(v46);
  while (__stxr(v51 + 1, v46));
  qmi::Client::setHandler();
  do
    v52 = __ldxr(v46);
  while (__stxr(v52 + 1, v46));
  qmi::Client::setHandler();
  do
    v53 = __ldxr(v46);
  while (__stxr(v53 + 1, v46));
  qmi::Client::setHandler();
  v54 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v54 || (v55 = *(_QWORD *)(v1 + 72), (v56 = std::__shared_weak_count::lock(v54)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v57 = v56;
  v58 = (unint64_t *)&v56->__shared_weak_owners_;
  do
    v59 = __ldxr(v58);
  while (__stxr(v59 + 1, v58));
  v60 = (unint64_t *)&v56->__shared_owners_;
  do
    v61 = __ldaxr(v60);
  while (__stlxr(v61 - 1, v60));
  if (!v61)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v57);
    v62 = std::__shared_weak_count::lock(v57);
    if (v62)
      goto LABEL_93;
LABEL_103:
    buf = 0uLL;
    goto LABEL_104;
  }
  v62 = std::__shared_weak_count::lock(v56);
  if (!v62)
    goto LABEL_103;
LABEL_93:
  v63 = v62;
  v64 = (unint64_t *)&v62->__shared_weak_owners_;
  do
    v65 = __ldxr(v64);
  while (__stxr(v65 + 1, v64));
  *(_QWORD *)&buf = v55;
  *((_QWORD *)&buf + 1) = v62;
  std::__shared_weak_count::__release_weak(v57);
  v66 = (unint64_t *)&v63->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    v57 = v63;
LABEL_104:
    std::__shared_weak_count::__release_weak(v57);
  }
  qmi::Client::setClientHandle();
  if (*((_QWORD *)&buf + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&buf + 1));
  qmi::Client::start(v50);
  std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v45);
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_1B3D3C854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,char a34)
{
  uint64_t v34;
  std::__shared_weak_count *v36;
  NSObject *v37;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  v36 = *(std::__shared_weak_count **)(v34 - 192);
  if (v36)
  {
    std::__shared_weak_count::__release_weak(v36);
    if ((*(char *)(v34 - 161) & 0x80000000) == 0)
    {
LABEL_3:
      v37 = *(NSObject **)(v34 - 160);
      if (!v37)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v34 - 161) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v34 - 184));
  v37 = *(NSObject **)(v34 - 160);
  if (!v37)
  {
LABEL_8:
    if (*(char *)(v34 - 129) < 0)
    {
      operator delete(*(void **)(v34 - 152));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 96);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v34 - 96);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v37);
  goto LABEL_8;
}

void ___ZN8coredump19QMICommandDriverM204initEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v9 = 0;
          _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D stopped", v9, 2u);
        }
        boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v3 + 112), 1);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D3CAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrIN8coredump13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__18weak_ptrIN8coredump13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN8coredump19QMICommandDriverM204initEv_block_invoke_4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v9 = 0;
          _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D started", v9, 2u);
        }
        boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v3 + 112), 0);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D3CBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN8coredump19QMICommandDriverM204initEv_block_invoke_6(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *p_p;
  void *__p;
  char v13;
  xpc_object_t v14;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v16 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v8 = v6;
LABEL_10:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v14 = a2;
      if (a2)
      {
        xpc_retain(a2);
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          goto LABEL_9;
      }
      else
      {
        a2 = xpc_null_create();
        v14 = a2;
        v7 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          goto LABEL_9;
      }
      xpc::object::to_string((xpc::object *)&v14);
      if (v13 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315138;
      v18 = p_p;
      _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D server error %s", buf, 0xCu);
      if (v13 < 0)
        operator delete(__p);
      a2 = v14;
LABEL_9:
      xpc_release(a2);
      v8 = v16;
      if (!v16)
        return;
      goto LABEL_10;
    }
  }
}

void sub_1B3D3CD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, char a13)
{
  xpc_release(object);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B3D3CDA0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void coredump::QMICommandDriverM20::fetchPostBootCrashReason(coredump::QMICommandDriverM20 *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_19_4;
  v1[4] = this;
  ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  _QWORD v15[6];
  std::__shared_weak_count *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void *v21;
  _OWORD v22[2];
  __int128 aBlock;
  void (*v24)(uint64_t, QMIServiceMsg *);
  void *v25;
  _QWORD *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  if (v1[26])
  {
    v2 = (std::__shared_weak_count *)v1[10];
    if (!v2 || (v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v22[0] = v10;
    v22[1] = v10;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v22);
    v17 = v1 + 24;
    v18 = QMIServiceMsg::create();
    v19 = 25000;
    v20 = 0;
    v21 = 0;
    v11 = MEMORY[0x1E0C809B0];
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1174405120;
    v15[2] = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_10;
    v15[3] = &__block_descriptor_tmp_18_4;
    v15[4] = v1;
    v15[5] = v3;
    v16 = v5;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    *(_QWORD *)&aBlock = v11;
    *((_QWORD *)&aBlock + 1) = 0x40000000;
    v24 = ___ZNO3qmi6Client9SendProxy8callbackIRKN5ssctl3abm16GetFailureReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v25 = &unk_1E66DAE78;
    v26 = v15;
    v13 = _Block_copy(&aBlock);
    v21 = v13;
    if (v18)
    {
      qmi::Client::send();
      v13 = v21;
    }
    if (v13)
      _Block_release(v13);
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v22);
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    v14 = v1[5];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LODWORD(aBlock) = 136315138;
      *(_QWORD *)((char *)&aBlock + 4) = "fetchPostBootCrashReason_block_invoke";
      _os_log_error_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_ERROR, "%s: No client, bail", (uint8_t *)&aBlock, 0xCu);
    }
  }
}

void sub_1B3D3D050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  _Unwind_Resume(a1);
}

void sub_1B3D3D090(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3D3D088);
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_10(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  char *v9;
  char **v10;
  char *v11;
  char **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  tlv *TlvValue;
  int v21;
  tlv *v22;
  int v23;
  tlv *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  tlv *v28;
  int v29;
  tlv *v30;
  int v31;
  tlv *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  char **v37;
  uint64_t v38;
  _QWORD v39[2];
  void (*v40)(uint64_t, __int128 **);
  void *v41;
  _QWORD *v42;
  _QWORD v43[2];
  void (*v44)(uint64_t, __int128 **);
  void *v45;
  _QWORD *v46;
  _QWORD v47[6];
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *(*v51)(_QWORD *, _QWORD *);
  void (*v52)(_QWORD *);
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  std::__shared_weak_count *v57;
  uint8_t buf[32];
  tlv *v59[2];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v57 = v6;
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v48 = 0;
      v49 = &v48;
      v50 = 0x4002000000;
      v51 = __Block_byref_object_copy__7;
      v52 = __Block_byref_object_dispose__7;
      v53 = (uint64_t)&v53;
      v54 = &v53;
      v55 = 0;
      if (*((_DWORD *)a2 + 1))
      {
        v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "Failed: Getting PostBootCrashReason response", buf, 2u);
        }
      }
      else
      {
        v19 = MEMORY[0x1E0C809B0];
        v47[1] = 0x40000000;
        v47[2] = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_11;
        v47[3] = &unk_1E66DA6C0;
        v47[4] = &v48;
        v47[5] = v5;
        v43[0] = MEMORY[0x1E0C809B0];
        v43[1] = 0x40000000;
        v44 = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_14;
        v45 = &unk_1E66DA6E8;
        v46 = v47;
        v47[0] = MEMORY[0x1E0C809B0];
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v22 = TlvValue;
        if (TlvValue)
        {
          v23 = v21;
          v59[0] = TlvValue;
          memset(buf, 170, 24);
          tlv::parseV<ssctl::tlv::abm::ExtendedErrorMessages>(v59, v21, (uint64_t)buf);
          v24 = v59[0];
          if (v59[0])
            v44((uint64_t)v43, (__int128 **)buf);
          v25 = *(_QWORD *)buf;
          if (*(_QWORD *)buf)
          {
            v26 = *(_QWORD *)&buf[8];
            v27 = *(void **)buf;
            if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            {
              do
              {
                if (*(char *)(v26 - 1) < 0)
                  operator delete(*(void **)(v26 - 24));
                v26 -= 24;
              }
              while (v26 != v25);
              v27 = *(void **)buf;
            }
            *(_QWORD *)&buf[8] = v25;
            operator delete(v27);
          }
          if (!v24)
            ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 17, v22, v23);
        }
        v39[0] = v19;
        v39[1] = 0x40000000;
        v40 = ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_2;
        v41 = &unk_1E66DA710;
        v42 = v47;
        v28 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v30 = v28;
        if (v28)
        {
          v31 = v29;
          v59[0] = v28;
          memset(buf, 170, 24);
          tlv::parseV<ssctl::tlv::abm::ErrorMessages>(v59, v29, (uint64_t)buf);
          v32 = v59[0];
          if (v59[0])
            v40((uint64_t)v39, (__int128 **)buf);
          v33 = *(_QWORD *)buf;
          if (*(_QWORD *)buf)
          {
            v34 = *(_QWORD *)&buf[8];
            v35 = *(void **)buf;
            if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
            {
              do
              {
                if (*(char *)(v34 - 1) < 0)
                  operator delete(*(void **)(v34 - 24));
                v34 -= 24;
              }
              while (v34 != v33);
              v35 = *(void **)buf;
            }
            *(_QWORD *)&buf[8] = v33;
            operator delete(v35);
          }
          if (!v32)
            ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 16, v30, v31);
        }
      }
      std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v36, (uint64_t)(v49 + 5));
      boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(v5 + 128, (uint64_t)&v36);
      if (!v38
        || (v9 = v36,
            v10 = v37,
            v11 = *v37,
            *((_QWORD *)v11 + 1) = *((_QWORD *)v36 + 1),
            **((_QWORD **)v9 + 1) = v11,
            v38 = 0,
            v10 == &v36))
      {
LABEL_15:
        _Block_object_dispose(&v48, 8);
        if (!v55)
          goto LABEL_23;
        v13 = v53;
        v14 = v54;
        v15 = *v54;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v53 + 8);
        **(_QWORD **)(v13 + 8) = v15;
        v55 = 0;
        if (v14 == &v53)
          goto LABEL_23;
        while (1)
        {
          v16 = (uint64_t *)v14[1];
          if (*((char *)v14 + 63) < 0)
          {
            operator delete((void *)v14[5]);
            if ((*((char *)v14 + 39) & 0x80000000) == 0)
              goto LABEL_19;
LABEL_22:
            operator delete((void *)v14[2]);
            operator delete(v14);
            v14 = v16;
            if (v16 == &v53)
              goto LABEL_23;
          }
          else
          {
            if (*((char *)v14 + 39) < 0)
              goto LABEL_22;
LABEL_19:
            operator delete(v14);
            v14 = v16;
            if (v16 == &v53)
              goto LABEL_23;
          }
        }
      }
      while (1)
      {
        v12 = (char **)v10[1];
        if (*((char *)v10 + 63) < 0)
        {
          operator delete(v10[5]);
          if ((*((char *)v10 + 39) & 0x80000000) == 0)
            goto LABEL_11;
LABEL_14:
          operator delete(v10[2]);
          operator delete(v10);
          v10 = v12;
          if (v12 == &v36)
            goto LABEL_15;
        }
        else
        {
          if (*((char *)v10 + 39) < 0)
            goto LABEL_14;
LABEL_11:
          operator delete(v10);
          v10 = v12;
          if (v12 == &v36)
            goto LABEL_15;
        }
      }
    }
  }
}

void sub_1B3D3D4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  void *v34;

  v32 = *(_QWORD *)(v30 - 144);
  if (v32)
  {
    v33 = *(_QWORD *)(v30 - 136);
    v34 = *(void **)(v30 - 144);
    if (v33 != v32)
    {
      do
      {
        if (*(char *)(v33 - 1) < 0)
          operator delete(*(void **)(v33 - 24));
        v33 -= 24;
      }
      while (v33 != v32);
      v34 = *(void **)(v30 - 144);
    }
    *(_QWORD *)(v30 - 136) = v32;
    operator delete(v34);
  }
  _Block_object_dispose(&a29, 8);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(v29);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v30 - 160);
  _Unwind_Resume(a1);
}

char *std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[63] < 0)
        {
          operator delete(*((void **)v3 + 5));
          if (v3[39] < 0)
LABEL_9:
            operator delete(*((void **)v3 + 2));
        }
        else if (v3[39] < 0)
        {
          goto LABEL_9;
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_11(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  NSObject *v4;
  void **v5;
  void **v6;
  uint64_t v7;
  char *v8;
  char *v9;
  NSObject *v10;
  std::string *v11;
  uint64_t v12;
  void *v13[2];
  void *__p[4];
  unint64_t v15;
  uint8_t buf[4];
  void **v17;
  __int16 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[4];
  _OWORD v25[16];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v26 = -1431655766;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25[14] = v3;
  v25[15] = v3;
  v25[12] = v3;
  v25[13] = v3;
  v25[10] = v3;
  v25[11] = v3;
  v25[8] = v3;
  v25[9] = v3;
  v25[6] = v3;
  v25[7] = v3;
  v25[4] = v3;
  v25[5] = v3;
  v25[2] = v3;
  v25[3] = v3;
  v25[0] = v3;
  v25[1] = v3;
  v24[2] = v3;
  v24[3] = v3;
  v24[0] = v3;
  v24[1] = v3;
  v22 = v3;
  v23 = v3;
  v20 = v3;
  v21 = v3;
  if (ETLEFCopyCrashLocationDetailsM20())
  {
    v15 = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v13 = 0u;
    memset(__p, 0, sizeof(__p));
    std::string::__assign_external((std::string *)v13, (const std::string::value_type *)v25 + 4, 0x100uLL);
    std::string::__assign_external((std::string *)&__p[1], (const std::string::value_type *)v24 + 4, 0x40uLL);
    LODWORD(v15) = v20;
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v13;
      if (SHIBYTE(__p[0]) < 0)
        v5 = (void **)v13[0];
      *(_DWORD *)buf = 136446210;
      v17 = v5;
      _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Crash Reason: %{public}s", buf, 0xCu);
      v4 = *(NSObject **)(v2 + 40);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (SHIBYTE(__p[3]) >= 0)
        v6 = &__p[1];
      else
        v6 = (void **)__p[1];
      *(_DWORD *)buf = 136446466;
      v17 = v6;
      v18 = 1024;
      v19 = v15;
      _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Crash File: %{public}s, Crash line: %d", buf, 0x12u);
    }
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = (char *)operator new(0x48uLL);
    v9 = v8;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    if (SHIBYTE(__p[0]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v8 + 16), (const std::string::value_type *)v13[0], (std::string::size_type)v13[1]);
    }
    else
    {
      *((_OWORD *)v8 + 1) = *(_OWORD *)v13;
      *((void **)v8 + 4) = __p[0];
    }
    v11 = (std::string *)(v9 + 40);
    if (SHIBYTE(__p[3]) < 0)
    {
      std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[1], (std::string::size_type)__p[2]);
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&__p[1];
      *((void **)v9 + 7) = __p[3];
    }
    *((_QWORD *)v9 + 8) = v15;
    *((_QWORD *)v9 + 1) = v7 + 40;
    v12 = *(_QWORD *)(v7 + 40);
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v12 + 8) = v9;
    *(_QWORD *)(v7 + 40) = v9;
    ++*(_QWORD *)(v7 + 56);
    if ((SHIBYTE(__p[3]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
        return;
LABEL_23:
      operator delete(v13[0]);
      return;
    }
    operator delete(__p[1]);
    if (SHIBYTE(__p[0]) < 0)
      goto LABEL_23;
  }
  else
  {
    v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13[0]) = 0;
      _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Failed to parse failure reason string", (uint8_t *)v13, 2u);
    }
  }
}

void sub_1B3D3D950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  void **v10;

  if (v9[39] < 0)
    operator delete(*v10);
  operator delete(v9);
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3D988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_14(uint64_t a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  __int128 v6;
  std::string __p;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
      }
      else
      {
        v6 = *v2;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      (*(void (**)(uint64_t, std::string *))(v5 + 16))(v5, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v2 = (__int128 *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_1B3D3DA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN8coredump19QMICommandDriverM2024fetchPostBootCrashReasonEv_block_invoke_2(uint64_t a1, __int128 **a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  __int128 v6;
  std::string __p;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
      }
      else
      {
        v6 = *v2;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      }
      (*(void (**)(uint64_t, std::string *))(v5 + 16))(v5, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v2 = (__int128 *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_1B3D3DAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t ***v2;
  char *v3;
  char **v4;
  char *v5;
  char **v6;
  char *v7;
  char **v8;
  uint64_t v9;

  v2 = *(uint64_t ****)(a1 + 8);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v7, a2);
  boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(v2, (uint64_t)&v7);
  if (v9)
  {
    v3 = v7;
    v4 = v8;
    v5 = *v8;
    *((_QWORD *)v5 + 1) = *((_QWORD *)v7 + 1);
    **((_QWORD **)v3 + 1) = v5;
    v9 = 0;
    if (v4 != &v7)
    {
      do
      {
        v6 = (char **)v4[1];
        if (*((char *)v4 + 63) < 0)
        {
          operator delete(v4[5]);
          if (*((char *)v4 + 39) < 0)
LABEL_9:
            operator delete(v4[2]);
        }
        else if (*((char *)v4 + 39) < 0)
        {
          goto LABEL_9;
        }
        operator delete(v4);
        v4 = v6;
      }
      while (v6 != &v7);
    }
  }
}

void sub_1B3D3DBBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

char **std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(char **a1, uint64_t a2)
{
  uint64_t i;
  char *v5;
  char *v6;

  *a1 = (char *)a1;
  a1[1] = (char *)a1;
  a1[2] = 0;
  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v5 = std::__list_imp<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::__create_node[abi:ne180100]<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash const&>((uint64_t)a1, 0, 0, i + 16);
    v6 = *a1;
    *(_QWORD *)v5 = *a1;
    *((_QWORD *)v5 + 1) = a1;
    *((_QWORD *)v6 + 1) = v5;
    *a1 = v5;
    ++a1[2];
  }
  return a1;
}

void sub_1B3D3DC4C(_Unwind_Exception *exception_object)
{
  char *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;

  if (!*((_QWORD *)v1 + 2)
    || (v3 = *(_QWORD *)v1,
        v4 = (char *)*((_QWORD *)v1 + 1),
        v5 = *(_QWORD *)v4,
        *(_QWORD *)(v5 + 8) = *(_QWORD *)(*(_QWORD *)v1 + 8),
        **(_QWORD **)(v3 + 8) = v5,
        *((_QWORD *)v1 + 2) = 0,
        v4 == v1))
  {
LABEL_3:
    _Unwind_Resume(exception_object);
  }
  while (1)
  {
    v6 = (char *)*((_QWORD *)v4 + 1);
    if (v4[63] < 0)
    {
      operator delete(*((void **)v4 + 5));
      if (v4[39] < 0)
LABEL_9:
        operator delete(*((void **)v4 + 2));
    }
    else if (v4[39] < 0)
    {
      goto LABEL_9;
    }
    operator delete(v4);
    v4 = v6;
    if (v6 == v1)
      goto LABEL_3;
  }
}

void coredump::QMICommandDriverM20::crashBaseband(uint64_t a1)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "crashBaseband";
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I %s: Deprecated", (uint8_t *)&v2, 0xCu);
  }
}

void coredump::QMICommandDriverM20::getCoreDumpEnabledStatus(coredump::QMICommandDriverM20 *this)
{
  NSObject *v1;
  int v2;
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = 136315138;
    v3 = "getCoreDumpEnabledStatus";
    _os_log_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEFAULT, "#I %s:Deprecated", (uint8_t *)&v2, 0xCu);
  }
}

uint64_t coredump::QMICommandDriverM20::setCoreDumpEnabledStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 136315138;
    v7 = "setCoreDumpEnabledStatus";
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Deprecated", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)a3 + 16))();
}

uint64_t ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "coredump.drv");
}

uint64_t ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66DABB0;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *boost::signals2::signal<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66DA960;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *ctu::SharedLoggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1E66DA8E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1E66DA8E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = &unk_1E66DA8E0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E66DA920;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1B3D3E114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedSynchronizable<coredump::CommandDriver>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = &unk_1E66DA8E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E66DA8E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E66DA8E0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D3E328(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66DA960;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20[4];

  v2 = operator new(0x20uLL);
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v20[0] = 0;
  v20[1] = 0;
  v18 = 0;
  v19 = v20;
  boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state::invocation_state((uint64_t)v2, (uint64_t)&v16);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v19, v20[0]);
  if (v18)
  {
    v3 = v16;
    v4 = v17;
    v5 = *v17;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v16 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    v18 = 0;
    if (v4 != &v16)
    {
      do
      {
        v8 = (uint64_t *)v4[1];
        v9 = (unsigned int *)v4[3];
        if (v9)
        {
          v10 = v9 + 2;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
            v13 = v9 + 3;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
          }
        }
        operator delete(v4);
        v4 = v8;
      }
      while (v8 != &v16);
    }
  }
  a1[2] = *(_QWORD *)*a1;
  v6 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v6, 0);
  boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(a1 + 3, (uint64_t)v6);
  return a1;
}

void sub_1B3D3E58C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D3E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3E5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B3D3E5D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D3E68C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(a1 + 3), (_QWORD *)a1[4]);
  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t *boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::mutex>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D3E868(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state::invocation_state(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v4, a2);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>((uint64_t *)a1, (uint64_t)v4);
  v5 = operator new(1uLL);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>(a1 + 16, (uint64_t)v5, (unsigned int **)(a1 + 24));
  return a1;
}

void sub_1B3D3EA88(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *v2;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      v8 = v4 + 3;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D3EB00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D3EBB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::list((_QWORD *)a1, (_QWORD *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = *(_BYTE *)(a2 + 48);
  v4[3] = v4 + 4;
  v5 = (_QWORD *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD **)(a2 + 24);
  if (v6 != (_QWORD *)(a2 + 32))
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v7[6] = v8;
      v9 = a2;
      if (v6 != v5)
        v9 = v6[6];
      v10 = (_QWORD *)v6[1];
      v11 = v10;
      v12 = v6;
      if (v10)
      {
        do
        {
          v13 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v12[2];
          v14 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (!v14);
      }
      v15 = a2;
      if (v13 != v5)
        v15 = v13[6];
      while (v9 != v15)
      {
        v9 = *(_QWORD *)(v9 + 8);
        v8 = *(_QWORD *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          v16 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v14 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v14);
      }
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v14 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v14);
      }
      v6 = v16;
      v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1B3D3EDEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(_QWORD **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::list(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = (_QWORD *)a2[1];
  if (v3 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v6 = (_QWORD *)*a1;
        v5 = a1[2];
      }
      *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      v3 = (_QWORD *)v3[1];
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B3D3EEB8(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (v2)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (unsigned int *)v5[3];
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
            v12 = v8 + 3;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66DA9D0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D3EFB8(void *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D3F080(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

unsigned int *boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  unsigned int *result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  result = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)result + 1) = 0x100000001;
  *(_QWORD *)result = off_1E66DAA30;
  *((_QWORD *)result + 2) = a2;
  v6 = *a3;
  *a3 = result;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
      v10 = v6 + 3;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
    }
  }
  return result;
}

void sub_1B3D3F240(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    operator delete(v1);
  __cxa_rethrow();
}

void sub_1B3D3F258(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
    operator delete(v1);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66DAA90;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D3F2E8(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D3F3B8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::mutex>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66DAAF0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D3F520(void *a1)
{
  pthread_mutex_t *v1;

  __cxa_begin_catch(a1);
  if (v1)
  {
    pthread_mutex_destroy(v1);
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D3F544(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 16));
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66DAB50;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D3F600(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D3F6D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D3F888(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66DABB0;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20[4];

  v2 = operator new(0x20uLL);
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v20[0] = 0;
  v20[1] = 0;
  v18 = 0;
  v19 = v20;
  boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state::invocation_state((uint64_t)v2, (uint64_t)&v16);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v19, v20[0]);
  if (v18)
  {
    v3 = v16;
    v4 = v17;
    v5 = *v17;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v16 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    v18 = 0;
    if (v4 != &v16)
    {
      do
      {
        v8 = (uint64_t *)v4[1];
        v9 = (unsigned int *)v4[3];
        if (v9)
        {
          v10 = v9 + 2;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
            v13 = v9 + 3;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
          }
        }
        operator delete(v4);
        v4 = v8;
      }
      while (v8 != &v16);
    }
  }
  a1[2] = *(_QWORD *)*a1;
  v6 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v6, 0);
  boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(a1 + 3, (uint64_t)v6);
  return a1;
}

void sub_1B3D3FAEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D3FB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D3FB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B3D3FB38(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D3FBEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(a1 + 3), (_QWORD *)a1[4]);
  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state::invocation_state(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v4, a2);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>((uint64_t *)a1, (uint64_t)v4);
  v5 = operator new(1uLL);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>(a1 + 16, (uint64_t)v5, (unsigned int **)(a1 + 24));
  return a1;
}

void sub_1B3D3FEE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *v2;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      v8 = v4 + 3;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D3FF5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D4000C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::list((_QWORD *)a1, (_QWORD *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = *(_BYTE *)(a2 + 48);
  v4[3] = v4 + 4;
  v5 = (_QWORD *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD **)(a2 + 24);
  if (v6 != (_QWORD *)(a2 + 32))
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v7[6] = v8;
      v9 = a2;
      if (v6 != v5)
        v9 = v6[6];
      v10 = (_QWORD *)v6[1];
      v11 = v10;
      v12 = v6;
      if (v10)
      {
        do
        {
          v13 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v12[2];
          v14 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (!v14);
      }
      v15 = a2;
      if (v13 != v5)
        v15 = v13[6];
      while (v9 != v15)
      {
        v9 = *(_QWORD *)(v9 + 8);
        v8 = *(_QWORD *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          v16 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v14 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v14);
      }
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v14 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v14);
      }
      v6 = v16;
      v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1B3D40248(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy(v2, *(_QWORD **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::list(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = (_QWORD *)a2[1];
  if (v3 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v6 = (_QWORD *)*a1;
        v5 = a1[2];
      }
      *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      v3 = (_QWORD *)v3[1];
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B3D40314(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (v2)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (unsigned int *)v5[3];
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
            v12 = v8 + 3;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66DAC20;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D40414(void *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D404DC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66DAC80;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D40648(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D40718(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66DACE0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D40880(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D40950(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1B3D40B08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E66DAD40;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E66DAD40;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20[4];

  v2 = operator new(0x20uLL);
  v16 = (uint64_t)&v16;
  v17 = &v16;
  v20[0] = 0;
  v20[1] = 0;
  v18 = 0;
  v19 = v20;
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state::invocation_state((uint64_t)v2, (uint64_t)&v16);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)&v19, v20[0]);
  if (v18)
  {
    v3 = v16;
    v4 = v17;
    v5 = *v17;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v16 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    v18 = 0;
    if (v4 != &v16)
    {
      do
      {
        v8 = (uint64_t *)v4[1];
        v9 = (unsigned int *)v4[3];
        if (v9)
        {
          v10 = v9 + 2;
          do
          {
            v11 = __ldaxr(v10);
            v12 = v11 - 1;
          }
          while (__stlxr(v12, v10));
          if (!v12)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
            v13 = v9 + 3;
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
          }
        }
        operator delete(v4);
        v4 = v8;
      }
      while (v8 != &v16);
    }
  }
  a1[2] = *(_QWORD *)*a1;
  v6 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v6, 0);
  boost::shared_ptr<boost::signals2::mutex>::shared_ptr<boost::signals2::mutex>(a1 + 3, (uint64_t)v6);
  return a1;
}

void sub_1B3D40DF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  operator delete(v2);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D40E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D40E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B3D40E40(_Unwind_Exception *a1)
{
  uint64_t v1;

  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::destroy((uint64_t)(a1 + 3), (_QWORD *)a1[4]);
  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state::invocation_state(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v4, a2);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>((uint64_t *)a1, (uint64_t)v4);
  v5 = operator new(1uLL);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  boost::detail::sp_pointer_construct<boost::signals2::optional_last_value<void>,boost::signals2::optional_last_value<void>>(a1 + 16, (uint64_t)v5, (unsigned int **)(a1 + 24));
  return a1;
}

void sub_1B3D40FA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int **v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v4 = *v2;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
      v8 = v4 + 3;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D41018(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E66DADB0;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1B3D410F4(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1B3D411C4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

void ctu::Loggable<coredump::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D413DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D413F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<coredump::QMICommandDriverM20>::shared_ptr[abi:ne180100]<coredump::QMICommandDriverM20,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66DAE10;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D41514(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1}::operator() const(coredump::QMICommandDriverM20*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D41534(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<coredump::QMICommandDriverM20 *,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20 *)#1},std::allocator<coredump::QMICommandDriverM20>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<coredump::QMICommandDriverM20 *,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20 *)#1},std::allocator<coredump::QMICommandDriverM20>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1}::operator() const(coredump::QMICommandDriverM20*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<coredump::QMICommandDriverM20 *,std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20 *)#1},std::allocator<coredump::QMICommandDriverM20>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20"
                     "EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_19QMIComma"
                                "ndDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15make_shared_ptrINS1_19QMICommandDriverM20EEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<coredump::QMICommandDriverM20> ctu::SharedSynchronizable<coredump::CommandDriver>::make_shared_ptr<coredump::QMICommandDriverM20>(coredump::QMICommandDriverM20*)::{lambda(coredump::QMICommandDriverM20*)#1}::operator() const(coredump::QMICommandDriverM20*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::operator()(uint64_t ***a1, int a2)
{
  __int128 v3;
  pthread_mutex_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  _QWORD v41[4];
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  uint64_t ***v45;
  uint64_t v46;
  uint64_t **v47;
  unsigned int *v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *__p[2];
  pthread_mutex_t *v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v49 = a2;
  v47 = 0;
  v48 = 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60 = v3;
  v61 = v3;
  v58 = v3;
  v59 = v3;
  v56 = v3;
  v57 = v3;
  v54 = v3;
  v55 = v3;
  v52 = v3;
  v53 = v3;
  v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v52;
  v63[0] = 0;
  v63[1] = v4;
  pthread_mutex_lock(v4);
  v5 = a1[1];
  if (!v5)
  {
    v7 = *a1;
    goto LABEL_15;
  }
  v6 = atomic_load((unsigned int *)v5 + 2);
  v7 = *a1;
  if (v6 == 1)
  {
    v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      v8 = (*v7)[1];
      *(_QWORD *)&v50 = v8;
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)&v50 = a1[2];
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
        goto LABEL_11;
    }
    v10 = *(_QWORD *)(v8 + 16);
    if (*(_BYTE *)(v10 + 24))
    {
      v8 = *(_QWORD *)(v8 + 8);
    }
    else
    {
      v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v50);
      v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  v5 = a1[1];
  if (v5)
  {
    v11 = (unsigned int *)(v5 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
LABEL_15:
  v13 = v48;
  v47 = v7;
  v48 = (unsigned int *)v5;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
      v17 = v13 + 3;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  pthread_mutex_unlock(v63[1]);
  v20 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v63[0][-1].__opaque[55] >= 0)
    {
      v21 = (char *)__p[1] + 16 * (uint64_t)v63[0];
      do
      {
        v22 = (unsigned int *)*((_QWORD *)v21 - 1);
        if (v22)
        {
          v23 = v22 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
            v26 = v22 + 3;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 24))(v22);
          }
        }
        v21 -= 16;
      }
      while (v21 > v20);
    }
    if (__p[0] >= (void *)0xB)
      operator delete(__p[1]);
  }
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65 = v29;
  v66 = v29;
  *(_OWORD *)v63 = v29;
  v64 = v29;
  v61 = v29;
  *(_OWORD *)__p = v29;
  v59 = v29;
  v60 = v29;
  v57 = v29;
  v58 = v29;
  v55 = v29;
  v56 = v29;
  v53 = v29;
  v54 = v29;
  v52 = v29;
  LOBYTE(v52) = 0;
  v67 = 0xAAAAAAAAAAAAAAAALL;
  v68 = 10;
  v69 = (char *)&v52 + 8;
  v70 = 0;
  v72 = 0;
  v73 = 0;
  v71 = &v49;
  v30 = v47;
  v31 = (uint64_t)*v47;
  v44 = &v52;
  v45 = a1;
  v46 = v31;
  *(_QWORD *)&v42 = *(_QWORD *)(v31 + 8);
  *((_QWORD *)&v42 + 1) = v31;
  *(_QWORD *)&v43 = &v52;
  *((_QWORD *)&v43 + 1) = v31;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::lock_next_callable(&v42);
  v41[0] = *v30;
  v41[1] = v41[0];
  v41[2] = &v52;
  v41[3] = v41[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::lock_next_callable(v41);
  v50 = v42;
  v51 = v43;
  v32 = v41[0];
  if ((_QWORD)v42 == v41[0])
  {
    if (HIDWORD(v72) <= v72)
      goto LABEL_45;
    goto LABEL_44;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::dereference(&v50);
    *(_QWORD *)&v50 = *(_QWORD *)(v50 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::lock_next_callable(&v50);
    if (*(_BYTE *)v51)
      *(_BYTE *)v51 = 0;
  }
  while ((_QWORD)v50 != v32);
  if (*((_DWORD *)v44 + 71) > *((_DWORD *)v44 + 70))
LABEL_44:
    boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v45, v46);
LABEL_45:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>>::~slot_call_iterator_cache((uint64_t)&v52);
  v34 = v48;
  if (v48)
  {
    v35 = v48 + 2;
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v34 + 16))(v34);
      v38 = v34 + 3;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v34 + 24))(v34);
    }
  }
  return result;
}

void sub_1B3D419B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a27);
  JUMPOUT(0x1B3D41AA4);
}

void sub_1B3D419C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3D41AACLL);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  BOOL v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v45;

  v6 = a1 + 4;
  v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    v23 = a1[10];
    if ((uint64_t *)v23 != *a3)
      goto LABEL_55;
    v19 = *(uint64_t **)(v23 + 8);
    v9 = v6;
    v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      v45 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v45)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  v7 = *a2;
  v8 = a2[2];
  v9 = v6;
  v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v16 = *((_DWORD *)v10 + 8);
        v17 = v16 < 1;
        if (v16 == 1)
          v17 = *((_DWORD *)v10 + 10) < v8;
        if (!v17)
          break;
        v10 = (uint64_t *)v10[1];
        if (!v10)
          goto LABEL_19;
      }
      v9 = v10;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      v11 = *((_DWORD *)v10 + 8);
      v12 = v11 == v7;
      v13 = v11 < v7;
      if (v11 >= v7)
        v14 = (uint64_t **)v10;
      else
        v14 = (uint64_t **)(v10 + 1);
      if (v13)
        v15 = v9;
      else
        v15 = v10;
      if (v12)
      {
        v14 = (uint64_t **)v10;
        v9 = v10;
      }
      else
      {
        v9 = v15;
      }
      v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    v19 = *(uint64_t **)(v18 + 8);
    v20 = v6;
    if (v7 == 1)
    {
      v21 = v5;
      while (1)
      {
        v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10))
            goto LABEL_27;
LABEL_22:
          v21 = (uint64_t *)v21[1];
          if (!v21)
            goto LABEL_44;
        }
        else
        {
          if (v22 <= 1)
            goto LABEL_22;
LABEL_27:
          v20 = v21;
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_44;
        }
      }
    }
    v27 = v5;
    do
    {
      v28 = *((_DWORD *)v27 + 8);
      v29 = (uint64_t **)(v27 + 1);
      v30 = v7 == v28;
      v31 = v7 < v28;
      if (v7 >= v28)
        v32 = (uint64_t **)(v27 + 1);
      else
        v32 = (uint64_t **)v27;
      if (!v31)
        v27 = v20;
      if (v30)
        v32 = v29;
      else
        v20 = v27;
      v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1)
        goto LABEL_46;
    }
    else
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6])
        goto LABEL_46;
    }
LABEL_31:
    v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      v33 = v9;
      do
      {
        v26 = (uint64_t *)v33[2];
        v12 = *v26 == (_QWORD)v33;
        v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9)
      *v24 = v26;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  v34 = *a3;
  v35 = **a3;
  v36 = (*a3)[1];
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)v34[1] = v35;
  --a1[2];
  v37 = (unsigned int *)v34[3];
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
      v41 = v37 + 3;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
    }
  }
  operator delete(v34);
  return v36;
}

uint64_t boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::dereference(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::runtime_error v6;

  v2 = a1[2];
  if (!*(_BYTE *)v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*a1 + 16) + 32);
    v4 = *(_QWORD *)(v3 + 24);
    if (!v4)
    {
      std::runtime_error::runtime_error(&v6, "call to empty boost::function");
      v6.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
      boost::throw_exception<boost::bad_function_call>(&v6);
    }
    (*(void (**)(uint64_t, _QWORD))((v4 & 0xFFFFFFFFFFFFFFFELL) + 8))(v3 + 32, **(unsigned int **)(v2 + 272));
    if (!*(_BYTE *)v2)
      *(_BYTE *)v2 = 1;
  }
  return a1[2] + 1;
}

void sub_1B3D41E2C()
{
  __break(1u);
}

void sub_1B3D41E70()
{
  __cxa_end_catch();
  JUMPOUT(0x1B3D41E78);
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  char *v30;
  char *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  char *v45;
  char *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *__p[2];
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
  {
LABEL_53:
    v40 = a1[3];
    if (v40 != v1)
    {
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v62 = v41;
      v63 = v41;
      v60 = v41;
      v61 = v41;
      v58 = v41;
      v59 = v41;
      v56 = v41;
      v57 = v41;
      v54 = v41;
      v55 = v41;
      v42 = *(_QWORD *)(v40 + 16);
      __p[0] = (void *)10;
      __p[1] = &v54;
      *(_QWORD *)&v65 = 0;
      *((_QWORD *)&v65 + 1) = v42;
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
      v43 = a1[2];
      a1[3] = a1[1];
      v44 = *(_DWORD **)(v43 + 288);
      if (v44)
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v44, &v54);
      *(_QWORD *)(v43 + 288) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 32))(*((_QWORD *)&v65 + 1));
      v45 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)v65 - 1 >= 0)
        {
          v46 = (char *)__p[1] + 16 * v65;
          do
          {
            v47 = (unsigned int *)*((_QWORD *)v46 - 1);
            if (v47)
            {
              v48 = v47 + 2;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
                v51 = v47 + 3;
                do
                {
                  v52 = __ldaxr(v51);
                  v53 = v52 - 1;
                }
                while (__stlxr(v53, v51));
                if (!v53)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
              }
            }
            v46 -= 16;
          }
          while (v46 > v45);
        }
        if (__p[0] >= (void *)0xB)
          operator delete(__p[1]);
      }
    }
    return;
  }
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v18;
    v65 = v18;
    v62 = v18;
    v63 = v18;
    v60 = v18;
    v61 = v18;
    v58 = v18;
    v59 = v18;
    v56 = v18;
    v57 = v18;
    v54 = v18;
    v55 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    __p[0] = (void *)10;
    __p[1] = &v54;
    *(_QWORD *)&v65 = 0;
    *((_QWORD *)&v65 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(*(_QWORD *)(*a1 + 16), &v54, (_QWORD *)(a1[2] + 8));
    v20 = *(_QWORD *)(*a1 + 16);
    v21 = a1[2];
    if (*(_BYTE *)(v20 + 24))
    {
      ++*(_DWORD *)(v21 + 280);
      v22 = *(_QWORD *)(v20 + 16);
      if (v22)
      {
        if (atomic_load((unsigned int *)(v22 + 8)))
        {
          v24 = 1;
          goto LABEL_35;
        }
        v21 = a1[2];
      }
      v25 = *a1;
      v26 = a1[1];
      a1[3] = *a1;
      if (v26 == v25)
      {
        v29 = *(_DWORD **)(v21 + 288);
        if (v29)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v29, &v54);
        v24 = 0;
        *(_QWORD *)(v21 + 288) = 0;
      }
      else
      {
        v27 = *(_QWORD *)(v25 + 16);
        v28 = *(_DWORD **)(v21 + 288);
        if (v28)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v54);
        *(_QWORD *)(v21 + 288) = v27;
        v24 = 0;
        if (v27)
          ++*(_DWORD *)(v27 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v21 + 284);
      v24 = 1;
    }
LABEL_35:
    (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 32))(*((_QWORD *)&v65 + 1));
    v30 = (char *)__p[1];
    if (__p[1])
    {
      if ((uint64_t)v65 - 1 >= 0)
      {
        v31 = (char *)__p[1] + 16 * v65;
        do
        {
          v32 = (unsigned int *)*((_QWORD *)v31 - 1);
          if (v32)
          {
            v33 = v32 + 2;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 16))(v32);
              v36 = v32 + 3;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
                (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 24))(v32);
            }
          }
          v31 -= 16;
        }
        while (v31 > v30);
      }
      if (__p[0] >= (void *)0xB)
        operator delete(__p[1]);
    }
    v1 = *a1;
    v39 = a1[1];
    if (!v24)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v39)
    {
      v1 = v39;
      goto LABEL_53;
    }
  }
  if (v1 == v39)
    goto LABEL_53;
}

void sub_1B3D422B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D422C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int i;
  unsigned int v12;
  uint64_t v13;
  char v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 32);
  if (!v3)
    return;
  v4 = *v3;
  if (*v3 == v3[1])
    return;
  do
  {
    memset(v24, 170, 24);
    v8 = *(_DWORD *)v4 ^ (*(int *)v4 >> 31);
    if (v8 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 8) + 16))(&v23);
      v24[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      LODWORD(v24[0]) = 1;
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v13 = *(_QWORD *)(v4 + 16);
        if (!v13)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v13 + 8)))
          goto LABEL_27;
LABEL_21:
        boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(a3, (uint64_t)v24);
        v15 = 0;
        if (LODWORD(v24[0]) == SLODWORD(v24[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v8 != 1)
    {
      LODWORD(v24[0]) = 0;
      v24[1] = 0;
      v24[2] = 0;
      goto LABEL_18;
    }
    v9 = *(_QWORD *)(v4 + 16);
    if (!v9)
    {
LABEL_25:
      v24[1] = 0;
      v24[2] = v9;
      LODWORD(v24[0]) = 0;
      if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v10 = (unsigned int *)(v9 + 8);
    for (i = *(_DWORD *)(v9 + 8); ; i = v12)
    {
      if (!i)
      {
        v9 = 0;
        goto LABEL_25;
      }
      v12 = __ldxr(v10);
      if (v12 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v10))
        break;
    }
    v24[1] = *(_QWORD *)(v4 + 8);
    v24[2] = v9;
    LODWORD(v24[0]) = 0;
    if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 24))(*(_QWORD *)(v4 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)a1, a2);
    }
    v15 = 1;
    if (LODWORD(v24[0]) == SLODWORD(v24[0]) >> 31)
    {
LABEL_30:
      v16 = (unsigned int *)v24[2];
      if (v24[2])
      {
        v17 = (unsigned int *)(v24[2] + 8);
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v24[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[1] + 8))(v24[1]);
LABEL_38:
    if ((v15 & 1) != 0)
      break;
    v4 += 24;
  }
  while (v4 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_1B3D426E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D42734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D42748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  _OWORD v37[10];
  unint64_t v38;
  void *__p;
  uint64_t v40;
  pthread_mutex_t *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[8] = v4;
  v37[9] = v4;
  v37[6] = v4;
  v37[7] = v4;
  v37[4] = v4;
  v37[5] = v4;
  v37[2] = v4;
  v37[3] = v4;
  v37[0] = v4;
  v37[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v38 = 10;
  __p = v37;
  v40 = 0;
  v41 = v5;
  pthread_mutex_lock(v5);
  if (**(_QWORD **)a1 == a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6 || (v7 = atomic_load((unsigned int *)(v6 + 8)), v7 != 1))
    {
      v8 = (uint64_t *)operator new(0x20uLL);
      v9 = *(uint64_t **)a1;
      v10 = **(_QWORD **)a1;
      v11 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v11, v10);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>>(v8, (uint64_t)v11);
      v8[2] = v9[2];
      v12 = v9[3];
      v8[3] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(coredump::CommandDriver::Status),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coredump::CommandDriver::Status)>,boost::function<void ()(boost::signals2::connection const&,coredump::CommandDriver::Status)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v36, (uint64_t)v8);
      v15 = *(uint64_t **)a1;
      v16 = *(unsigned int **)(a1 + 8);
      *(_OWORD *)a1 = v36;
      *(_QWORD *)&v36 = v15;
      *((_QWORD *)&v36 + 1) = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
    }
    v23 = *(uint64_t ***)a1;
    v24 = **(uint64_t ***)a1;
    v25 = v24[1];
    *(_QWORD *)&v36 = v25;
    if (v24 != (uint64_t *)v25)
    {
      do
      {
        while (1)
        {
          v26 = *(_QWORD *)(v25 + 16);
          if (!*(_BYTE *)(v26 + 24))
            break;
          v25 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)&v36 = v25;
          v24 = *v23;
          if ((uint64_t *)v25 == *v23)
            goto LABEL_20;
        }
        v25 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coredump::CommandDriver::Status),boost::function<void ()(coredump::CommandDriver::Status)>>,boost::signals2::mutex>>>::erase(v24, (int *)(v26 + 64), (uint64_t **)&v36);
        v23 = *(uint64_t ***)a1;
        *(_QWORD *)&v36 = v25;
        v24 = *v23;
      }
      while ((uint64_t *)v25 != *v23);
    }
LABEL_20:
    *(_QWORD *)(a1 + 16) = v25;
  }
  pthread_mutex_unlock(v41);
  v27 = (char *)__p;
  if (__p)
  {
    if (v40 - 1 >= 0)
    {
      v28 = (char *)__p + 16 * v40;
      do
      {
        v29 = (unsigned int *)*((_QWORD *)v28 - 1);
        if (v29)
        {
          v30 = v29 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
            v33 = v29 + 3;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
              (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
          }
        }
        v28 -= 16;
      }
      while (v28 > v27);
    }
    if (v38 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3D429E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,coredump::CommandDriver::Status>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3D42C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

char *std::__list_imp<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::__create_node[abi:ne180100]<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;
  std::string *v9;

  v7 = (char *)operator new(0x48uLL);
  v8 = v7;
  *(_QWORD *)v7 = a2;
  *((_QWORD *)v7 + 1) = a3;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v7 + 1) = *(_OWORD *)a4;
    *((_QWORD *)v7 + 4) = *(_QWORD *)(a4 + 16);
  }
  v9 = (std::string *)(v8 + 40);
  if (*(char *)(a4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a4 + 24), *(_QWORD *)(a4 + 32));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 24);
    *((_QWORD *)v8 + 7) = *(_QWORD *)(a4 + 40);
  }
  *((_QWORD *)v8 + 8) = *(_QWORD *)(a4 + 48);
  return v8;
}

void sub_1B3D42DCC(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[39] < 0)
  {
    operator delete(*v2);
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::operator()(uint64_t ***a1, uint64_t a2)
{
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD v42[4];
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  uint64_t ***v46;
  uint64_t v47;
  uint64_t **v48;
  unsigned int *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v49 = 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v60 = v4;
  v61 = v4;
  v58 = v4;
  v59 = v4;
  v56 = v4;
  v57 = v4;
  v54 = v4;
  v55 = v4;
  v52 = v4;
  v53 = v4;
  v5 = (pthread_mutex_t *)a1[3];
  *(_QWORD *)&v62 = 10;
  *((_QWORD *)&v62 + 1) = &v52;
  *(_QWORD *)&v63 = 0;
  *((_QWORD *)&v63 + 1) = v5;
  pthread_mutex_lock(v5);
  v6 = a1[1];
  if (!v6)
  {
    v8 = *a1;
    goto LABEL_15;
  }
  v7 = atomic_load((unsigned int *)v6 + 2);
  v8 = *a1;
  if (v7 == 1)
  {
    v9 = (uint64_t)a1[2];
    if ((uint64_t *)v9 == *v8)
    {
      v9 = (*v8)[1];
      *(_QWORD *)&v50 = v9;
      v10 = *v8;
      if (*v8 == (uint64_t *)v9)
      {
LABEL_11:
        a1[2] = (uint64_t **)v9;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)&v50 = a1[2];
      v10 = *v8;
      if (*v8 == (uint64_t *)v9)
        goto LABEL_11;
    }
    v11 = *(_QWORD *)(v9 + 16);
    if (*(_BYTE *)(v11 + 24))
    {
      v9 = *(_QWORD *)(v9 + 8);
    }
    else
    {
      v9 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::erase(v10, (int *)(v11 + 64), (uint64_t **)&v50);
      v8 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  v6 = a1[1];
  if (v6)
  {
    v12 = (unsigned int *)(v6 + 1);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_15:
  v14 = v49;
  v48 = v8;
  v49 = (unsigned int *)v6;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      v18 = v14 + 3;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
    }
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)&v63 + 1));
  v21 = *((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    if ((uint64_t)v63 - 1 >= 0)
    {
      v22 = *((_QWORD *)&v62 + 1) + 16 * v63;
      do
      {
        v23 = *(unsigned int **)(v22 - 8);
        if (v23)
        {
          v24 = v23 + 2;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
            v27 = v23 + 3;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 24))(v23);
          }
        }
        v22 -= 16;
      }
      while (v22 > v21);
    }
    if ((unint64_t)v62 >= 0xB)
      operator delete(*((void **)&v62 + 1));
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65 = v30;
  v66 = v30;
  v63 = v30;
  v64 = v30;
  v61 = v30;
  v62 = v30;
  v59 = v30;
  v60 = v30;
  v57 = v30;
  v58 = v30;
  v55 = v30;
  v56 = v30;
  v53 = v30;
  v54 = v30;
  v52 = v30;
  LOBYTE(v52) = 0;
  v67 = 0xAAAAAAAAAAAAAAAALL;
  v68 = 10;
  v69 = (char *)&v52 + 8;
  v70 = 0;
  v72 = 0;
  v73 = 0;
  v71 = a2;
  v31 = v48;
  v32 = (uint64_t)*v48;
  v45 = &v52;
  v46 = a1;
  v47 = v32;
  *(_QWORD *)&v43 = *(_QWORD *)(v32 + 8);
  *((_QWORD *)&v43 + 1) = v32;
  *(_QWORD *)&v44 = &v52;
  *((_QWORD *)&v44 + 1) = v32;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::lock_next_callable(&v43);
  v42[0] = *v31;
  v42[1] = v42[0];
  v42[2] = &v52;
  v42[3] = v42[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::lock_next_callable(v42);
  v50 = v43;
  v51 = v44;
  v33 = v42[0];
  if ((_QWORD)v43 == v42[0])
  {
    if (HIDWORD(v72) <= v72)
      goto LABEL_45;
    goto LABEL_44;
  }
  do
  {
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::dereference(&v50);
    *(_QWORD *)&v50 = *(_QWORD *)(v50 + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::lock_next_callable(&v50);
    if (*(_BYTE *)v51)
      *(_BYTE *)v51 = 0;
  }
  while ((_QWORD)v50 != v33);
  if (*((_DWORD *)v45 + 71) > *((_DWORD *)v45 + 70))
LABEL_44:
    boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v46, v47);
LABEL_45:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>>::~slot_call_iterator_cache((uint64_t)&v52);
  v35 = v49;
  if (v49)
  {
    v36 = v49 + 2;
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v35 + 16))(v35);
      v39 = v35 + 3;
      do
      {
        v40 = __ldaxr(v39);
        v41 = v40 - 1;
      }
      while (__stlxr(v41, v39));
      if (!v41)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v35 + 24))(v35);
    }
  }
  return result;
}

void sub_1B3D431CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a27);
  JUMPOUT(0x1B3D432B8);
}

void sub_1B3D431DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3D432C0);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  BOOL v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v45;

  v6 = a1 + 4;
  v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    v23 = a1[10];
    if ((uint64_t *)v23 != *a3)
      goto LABEL_55;
    v19 = *(uint64_t **)(v23 + 8);
    v9 = v6;
    v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      v45 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v45)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  v7 = *a2;
  v8 = a2[2];
  v9 = v6;
  v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v16 = *((_DWORD *)v10 + 8);
        v17 = v16 < 1;
        if (v16 == 1)
          v17 = *((_DWORD *)v10 + 10) < v8;
        if (!v17)
          break;
        v10 = (uint64_t *)v10[1];
        if (!v10)
          goto LABEL_19;
      }
      v9 = v10;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      v11 = *((_DWORD *)v10 + 8);
      v12 = v11 == v7;
      v13 = v11 < v7;
      if (v11 >= v7)
        v14 = (uint64_t **)v10;
      else
        v14 = (uint64_t **)(v10 + 1);
      if (v13)
        v15 = v9;
      else
        v15 = v10;
      if (v12)
      {
        v14 = (uint64_t **)v10;
        v9 = v10;
      }
      else
      {
        v9 = v15;
      }
      v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    v19 = *(uint64_t **)(v18 + 8);
    v20 = v6;
    if (v7 == 1)
    {
      v21 = v5;
      while (1)
      {
        v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10))
            goto LABEL_27;
LABEL_22:
          v21 = (uint64_t *)v21[1];
          if (!v21)
            goto LABEL_44;
        }
        else
        {
          if (v22 <= 1)
            goto LABEL_22;
LABEL_27:
          v20 = v21;
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_44;
        }
      }
    }
    v27 = v5;
    do
    {
      v28 = *((_DWORD *)v27 + 8);
      v29 = (uint64_t **)(v27 + 1);
      v30 = v7 == v28;
      v31 = v7 < v28;
      if (v7 >= v28)
        v32 = (uint64_t **)(v27 + 1);
      else
        v32 = (uint64_t **)v27;
      if (!v31)
        v27 = v20;
      if (v30)
        v32 = v29;
      else
        v20 = v27;
      v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1)
        goto LABEL_46;
    }
    else
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6])
        goto LABEL_46;
    }
LABEL_31:
    v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      v33 = v9;
      do
      {
        v26 = (uint64_t *)v33[2];
        v12 = *v26 == (_QWORD)v33;
        v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9)
      *v24 = v26;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  v34 = *a3;
  v35 = **a3;
  v36 = (*a3)[1];
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)v34[1] = v35;
  --a1[2];
  v37 = (unsigned int *)v34[3];
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
      v41 = v37 + 3;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
    }
  }
  operator delete(v34);
  return v36;
}

uint64_t boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::dereference(_QWORD *a1)
{
  uint64_t v2;
  char v4;

  v2 = a1[2];
  if (*(_BYTE *)v2)
    return a1[2] + 1;
  boost::signals2::detail::call_with_tuple_args<boost::signals2::detail::void_type>::m_invoke<boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,0u,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>&>((uint64_t)&v4, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a1 + 16) + 32) + 24), (uint64_t *)(v2 + 272));
  if (*(_BYTE *)v2)
    return a1[2] + 1;
  *(_BYTE *)v2 = 1;
  return a1[2] + 1;
}

void boost::signals2::detail::call_with_tuple_args<boost::signals2::detail::void_type>::m_invoke<boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,0u,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  char *v4;
  char **v5;
  char *v6;
  char **v7;
  char *v8;
  char **v9;
  uint64_t v10;

  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::list(&v8, *a3);
  boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::operator()(a2, &v8);
  if (v10)
  {
    v4 = v8;
    v5 = v9;
    v6 = *v9;
    *((_QWORD *)v6 + 1) = *((_QWORD *)v8 + 1);
    **((_QWORD **)v4 + 1) = v6;
    v10 = 0;
    if (v5 != &v8)
    {
      do
      {
        v7 = (char **)v5[1];
        if (*((char *)v5 + 63) < 0)
        {
          operator delete(v5[5]);
          if (*((char *)v5 + 39) < 0)
LABEL_9:
            operator delete(v5[2]);
        }
        else if (*((char *)v5 + 39) < 0)
        {
          goto LABEL_9;
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != &v8);
    }
  }
}

void sub_1B3D43714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

void boost::function1<void,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>::operator()(_QWORD *a1, _QWORD *a2)
{
  void (*v2)(_QWORD *, uint64_t *);
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::runtime_error v16;

  if (!*a1)
  {
    std::runtime_error::runtime_error(&v16, "call to empty boost::function");
    v16.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
    boost::throw_exception<boost::bad_function_call>(&v16);
  }
  v2 = *(void (**)(_QWORD *, uint64_t *))((*a1 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v3 = a1 + 1;
  v13 = (uint64_t)&v13;
  v14 = &v13;
  v15 = 0;
  v4 = a2[2];
  if (v4)
  {
    v6 = *a2;
    v5 = (uint64_t *)a2[1];
    v7 = *v5;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a2 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    v8 = v13;
    *(_QWORD *)(v13 + 8) = v5;
    *v5 = v8;
    *(_QWORD *)(v6 + 8) = &v13;
    v13 = v6;
    v15 = v4;
    a2[2] = 0;
  }
  v2(v3, &v13);
  if (v15)
  {
    v9 = v13;
    v10 = v14;
    v11 = *v14;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v9 + 8) = v11;
    v15 = 0;
    if (v10 != &v13)
    {
      do
      {
        v12 = (uint64_t *)v10[1];
        if (*((char *)v10 + 63) < 0)
        {
          operator delete((void *)v10[5]);
          if (*((char *)v10 + 39) < 0)
LABEL_12:
            operator delete((void *)v10[2]);
        }
        else if (*((char *)v10 + 39) < 0)
        {
          goto LABEL_12;
        }
        operator delete(v10);
        v10 = v12;
      }
      while (v12 != &v13);
    }
  }
}

void sub_1B3D43858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>::~list(va);
  _Unwind_Resume(a1);
}

void sub_1B3D4386C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13)
{
  std::runtime_error::~runtime_error(&a13);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  char *v30;
  char *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  char *v45;
  char *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *__p[2];
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
  {
LABEL_53:
    v40 = a1[3];
    if (v40 != v1)
    {
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v62 = v41;
      v63 = v41;
      v60 = v41;
      v61 = v41;
      v58 = v41;
      v59 = v41;
      v56 = v41;
      v57 = v41;
      v54 = v41;
      v55 = v41;
      v42 = *(_QWORD *)(v40 + 16);
      __p[0] = (void *)10;
      __p[1] = &v54;
      *(_QWORD *)&v65 = 0;
      *((_QWORD *)&v65 + 1) = v42;
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42);
      v43 = a1[2];
      a1[3] = a1[1];
      v44 = *(_DWORD **)(v43 + 288);
      if (v44)
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v44, &v54);
      *(_QWORD *)(v43 + 288) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 32))(*((_QWORD *)&v65 + 1));
      v45 = (char *)__p[1];
      if (__p[1])
      {
        if ((uint64_t)v65 - 1 >= 0)
        {
          v46 = (char *)__p[1] + 16 * v65;
          do
          {
            v47 = (unsigned int *)*((_QWORD *)v46 - 1);
            if (v47)
            {
              v48 = v47 + 2;
              do
              {
                v49 = __ldaxr(v48);
                v50 = v49 - 1;
              }
              while (__stlxr(v50, v48));
              if (!v50)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 16))(v47);
                v51 = v47 + 3;
                do
                {
                  v52 = __ldaxr(v51);
                  v53 = v52 - 1;
                }
                while (__stlxr(v53, v51));
                if (!v53)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 24))(v47);
              }
            }
            v46 -= 16;
          }
          while (v46 > v45);
        }
        if (__p[0] >= (void *)0xB)
          operator delete(__p[1]);
      }
    }
    return;
  }
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v18;
    v65 = v18;
    v62 = v18;
    v63 = v18;
    v60 = v18;
    v61 = v18;
    v58 = v18;
    v59 = v18;
    v56 = v18;
    v57 = v18;
    v54 = v18;
    v55 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    __p[0] = (void *)10;
    __p[1] = &v54;
    *(_QWORD *)&v65 = 0;
    *((_QWORD *)&v65 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(*(_QWORD *)(*a1 + 16), &v54, (_QWORD *)(a1[2] + 8));
    v20 = *(_QWORD *)(*a1 + 16);
    v21 = a1[2];
    if (*(_BYTE *)(v20 + 24))
    {
      ++*(_DWORD *)(v21 + 280);
      v22 = *(_QWORD *)(v20 + 16);
      if (v22)
      {
        if (atomic_load((unsigned int *)(v22 + 8)))
        {
          v24 = 1;
          goto LABEL_35;
        }
        v21 = a1[2];
      }
      v25 = *a1;
      v26 = a1[1];
      a1[3] = *a1;
      if (v26 == v25)
      {
        v29 = *(_DWORD **)(v21 + 288);
        if (v29)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v29, &v54);
        v24 = 0;
        *(_QWORD *)(v21 + 288) = 0;
      }
      else
      {
        v27 = *(_QWORD *)(v25 + 16);
        v28 = *(_DWORD **)(v21 + 288);
        if (v28)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v28, &v54);
        *(_QWORD *)(v21 + 288) = v27;
        v24 = 0;
        if (v27)
          ++*(_DWORD *)(v27 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v21 + 284);
      v24 = 1;
    }
LABEL_35:
    (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 32))(*((_QWORD *)&v65 + 1));
    v30 = (char *)__p[1];
    if (__p[1])
    {
      if ((uint64_t)v65 - 1 >= 0)
      {
        v31 = (char *)__p[1] + 16 * v65;
        do
        {
          v32 = (unsigned int *)*((_QWORD *)v31 - 1);
          if (v32)
          {
            v33 = v32 + 2;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 16))(v32);
              v36 = v32 + 3;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
                (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 24))(v32);
            }
          }
          v31 -= 16;
        }
        while (v31 > v30);
      }
      if (__p[0] >= (void *)0xB)
        operator delete(__p[1]);
    }
    v1 = *a1;
    v39 = a1[1];
    if (!v24)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v39)
    {
      v1 = v39;
      goto LABEL_53;
    }
  }
  if (v1 == v39)
    goto LABEL_53;
}

void sub_1B3D43CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D43CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>::nolock_grab_tracked_objects<boost::signals2::detail::connection_body_base,std::back_insert_iterator<boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int i;
  unsigned int v12;
  uint64_t v13;
  char v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v3 = *(uint64_t **)(a1 + 32);
  if (!v3)
    return;
  v4 = *v3;
  if (*v3 == v3[1])
    return;
  do
  {
    memset(v24, 170, 24);
    v8 = *(_DWORD *)v4 ^ (*(int *)v4 >> 31);
    if (v8 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 8) + 16))(&v23);
      v24[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      LODWORD(v24[0]) = 1;
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v13 = *(_QWORD *)(v4 + 16);
        if (!v13)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v13 + 8)))
          goto LABEL_27;
LABEL_21:
        boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::push_back(a3, (uint64_t)v24);
        v15 = 0;
        if (LODWORD(v24[0]) == SLODWORD(v24[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v8 != 1)
    {
      LODWORD(v24[0]) = 0;
      v24[1] = 0;
      v24[2] = 0;
      goto LABEL_18;
    }
    v9 = *(_QWORD *)(v4 + 16);
    if (!v9)
    {
LABEL_25:
      v24[1] = 0;
      v24[2] = v9;
      LODWORD(v24[0]) = 0;
      if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v10 = (unsigned int *)(v9 + 8);
    for (i = *(_DWORD *)(v9 + 8); ; i = v12)
    {
      if (!i)
      {
        v9 = 0;
        goto LABEL_25;
      }
      v12 = __ldxr(v10);
      if (v12 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v10))
        break;
    }
    v24[1] = *(_QWORD *)(v4 + 8);
    v24[2] = v9;
    LODWORD(v24[0]) = 0;
    if ((*(_DWORD *)v4 ^ (*(int *)v4 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 8) + 24))(*(_QWORD *)(v4 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)a1, a2);
    }
    v15 = 1;
    if (LODWORD(v24[0]) == SLODWORD(v24[0]) >> 31)
    {
LABEL_30:
      v16 = (unsigned int *)v24[2];
      if (v24[2])
      {
        v17 = (unsigned int *)(v24[2] + 8);
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v24[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v24[1] + 8))(v24[1]);
LABEL_38:
    if ((v15 & 1) != 0)
      break;
    v4 += 24;
  }
  while (v4 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_1B3D440E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D44130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B3D44144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  _OWORD v37[10];
  unint64_t v38;
  void *__p;
  uint64_t v40;
  pthread_mutex_t *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[8] = v4;
  v37[9] = v4;
  v37[6] = v4;
  v37[7] = v4;
  v37[4] = v4;
  v37[5] = v4;
  v37[2] = v4;
  v37[3] = v4;
  v37[0] = v4;
  v37[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v38 = 10;
  __p = v37;
  v40 = 0;
  v41 = v5;
  pthread_mutex_lock(v5);
  if (**(_QWORD **)a1 == a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6 || (v7 = atomic_load((unsigned int *)(v6 + 8)), v7 != 1))
    {
      v8 = (uint64_t *)operator new(0x20uLL);
      v9 = *(uint64_t **)a1;
      v10 = **(_QWORD **)a1;
      v11 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v11, v10);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>>(v8, (uint64_t)v11);
      v8[2] = v9[2];
      v12 = v9[3];
      v8[3] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::function<void ()(boost::signals2::connection const&,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v36, (uint64_t)v8);
      v15 = *(uint64_t **)a1;
      v16 = *(unsigned int **)(a1 + 8);
      *(_OWORD *)a1 = v36;
      *(_QWORD *)&v36 = v15;
      *((_QWORD *)&v36 + 1) = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
    }
    v23 = *(uint64_t ***)a1;
    v24 = **(uint64_t ***)a1;
    v25 = v24[1];
    *(_QWORD *)&v36 = v25;
    if (v24 != (uint64_t *)v25)
    {
      do
      {
        while (1)
        {
          v26 = *(_QWORD *)(v25 + 16);
          if (!*(_BYTE *)(v26 + 24))
            break;
          v25 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)&v36 = v25;
          v24 = *v23;
          if ((uint64_t *)v25 == *v23)
            goto LABEL_20;
        }
        v25 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>),boost::function<void ()(std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>)>>,boost::signals2::mutex>>>::erase(v24, (int *)(v26 + 64), (uint64_t **)&v36);
        v23 = *(uint64_t ***)a1;
        *(_QWORD *)&v36 = v25;
        v24 = *v23;
      }
      while ((uint64_t *)v25 != *v23);
    }
LABEL_20:
    *(_QWORD *)(a1 + 16) = v25;
  }
  pthread_mutex_unlock(v41);
  v27 = (char *)__p;
  if (__p)
  {
    if (v40 - 1 >= 0)
    {
      v28 = (char *)__p + 16 * v40;
      do
      {
        v29 = (unsigned int *)*((_QWORD *)v28 - 1);
        if (v29)
        {
          v30 = v29 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
            v33 = v29 + 3;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
              (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
          }
        }
        v28 -= 16;
      }
      while (v28 > v27);
    }
    if (v38 >= 0xB)
      operator delete(__p);
  }
}

void sub_1B3D443E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,std::list<coredump::CommandDriver::EURCoreDumpTraceProtocolCrash>>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1B3D4464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5ssctl3abm16GetFailureReason8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D447D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D447EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D44818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<coredump::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66DAEA0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN8coredump13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN8coredump13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c53_ZTSNSt3__110shared_ptrIKN8coredump13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1180";
}

uint64_t radio::QMIDebugCommandDriver::checkError@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CFTypeRef *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  NSObject *v22;
  size_t v23;
  void **v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  const void **v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  CFTypeRef *v37;
  void *__dst[2];
  unint64_t v39;
  CFTypeRef cf[2];
  int64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *__p[2];
  __int128 v48;
  unint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint8_t buf[4];
  CFTypeRef *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  if (!*(_DWORD *)(a2 + 4))
    return result;
  v6 = result;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v49 = 0xAAAAAAAAAAAAAAAALL;
  v59 = v7;
  v58 = v7;
  v57 = v7;
  v56 = v7;
  v55 = v7;
  v54 = v7;
  v53 = v7;
  v52 = v7;
  v51 = v7;
  v48 = v7;
  v46 = v7;
  *(_OWORD *)__p = v7;
  v44 = v7;
  v45 = v7;
  v43 = v7;
  v8 = MEMORY[0x1E0DE4FE0];
  v9 = MEMORY[0x1E0DE4FE0] + 64;
  v50 = MEMORY[0x1E0DE4FE0] + 64;
  v10 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v42 + *(_QWORD *)(v42 - 24)) = v11;
  v12 = (std::ios_base *)((char *)&v42 + *(_QWORD *)(v42 - 24));
  std::ios_base::init(v12, &v43);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v42 = v8 + 24;
  v50 = v9;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v43 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v48 = 0u;
  LODWORD(v49) = 16;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Failed to ", 10);
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  LOBYTE(cf[0]) = 10;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)cf, 1);
  v20 = (const char *)qmi::asString();
  v21 = strlen(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  v22 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    if ((v49 & 0x10) != 0)
    {
      v32 = *((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1) < (unint64_t)v46)
      {
        *((_QWORD *)&v48 + 1) = v46;
        v32 = v46;
      }
      v33 = (const void **)&v45 + 1;
    }
    else
    {
      if ((v49 & 8) == 0)
      {
        v30 = 0;
        HIBYTE(v41) = 0;
        v31 = cf;
        goto LABEL_50;
      }
      v33 = (const void **)&v44;
      v32 = v45;
    }
    v34 = *v33;
    v30 = v32 - (_QWORD)*v33;
    if (v30 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v30 >= 0x17)
    {
      v35 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v35 = v30 | 7;
      v36 = v35 + 1;
      v31 = operator new(v35 + 1);
      cf[1] = (CFTypeRef)v30;
      v41 = v36 | 0x8000000000000000;
      cf[0] = v31;
    }
    else
    {
      HIBYTE(v41) = v32 - *(_BYTE *)v33;
      v31 = cf;
      if (!v30)
        goto LABEL_50;
    }
    memmove(v31, v34, v30);
LABEL_50:
    *((_BYTE *)v31 + v30) = 0;
    v37 = cf;
    if (v41 < 0)
      v37 = (CFTypeRef *)cf[0];
    *(_DWORD *)buf = 136315138;
    v61 = v37;
    _os_log_error_impl(&dword_1B3CB3000, v22, OS_LOG_TYPE_ERROR, "%s: \n", buf, 0xCu);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)cf[0]);
  }
  if ((v49 & 0x10) != 0)
  {
    v25 = *((_QWORD *)&v48 + 1);
    if (*((_QWORD *)&v48 + 1) < (unint64_t)v46)
    {
      *((_QWORD *)&v48 + 1) = v46;
      v25 = v46;
    }
    v26 = (const void *)*((_QWORD *)&v45 + 1);
    v23 = v25 - *((_QWORD *)&v45 + 1);
    if ((unint64_t)(v25 - *((_QWORD *)&v45 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_34;
  }
  else
  {
    if ((v49 & 8) == 0)
    {
      v23 = 0;
      HIBYTE(v39) = 0;
      v24 = __dst;
      goto LABEL_22;
    }
    v26 = (const void *)v44;
    v23 = v45 - v44;
    if ((_QWORD)v45 - (_QWORD)v44 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_34:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v24 = (void **)operator new(v27 + 1);
    __dst[1] = (void *)v23;
    v39 = v28 | 0x8000000000000000;
    __dst[0] = v24;
    goto LABEL_21;
  }
  HIBYTE(v39) = v23;
  v24 = __dst;
  if (v23)
LABEL_21:
    memmove(v24, v26, v23);
LABEL_22:
  *((_BYTE *)v24 + v23) = 0;
  CreateError();
  if (cf == a4)
    goto LABEL_25;
  v29 = *a4;
  *a4 = cf[0];
  cf[0] = 0;
  if (v29)
  {
    CFRelease(v29);
LABEL_25:
    if (cf[0])
      CFRelease(cf[0]);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__dst[0]);
  v42 = *v10;
  *(uint64_t *)((char *)&v42 + *(_QWORD *)(v42 - 24)) = v10[3];
  *(_QWORD *)&v43 = v13 + 16;
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v50);
}

void sub_1B3D44E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t radio::QMIDebugCommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xD0uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  radio::QMIDebugCommandDriver::QMIDebugCommandDriver((uint64_t)v6, (uint64_t)&v22, (uint64_t)v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<radio::QMIDebugCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIDebugCommandDriver,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<radio::DebugCommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 80))(*a3);
}

void sub_1B3D45000(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D45014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t radio::QMIDebugCommandDriver::QMIDebugCommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v16 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v15 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  radio::DebugCommandDriver::DebugCommandDriver();
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)a1 = off_1E66DAEE0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  return a1;
}

void sub_1B3D45160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriver::~QMIDebugCommandDriver(radio::QMIDebugCommandDriver *this)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint8_t v6[16];

  *(_QWORD *)this = off_1E66DAEE0;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v6, 2u);
  }
  qmi::Client::~Client((radio::QMIDebugCommandDriver *)((char *)this + 176));
  v3 = *((_QWORD *)this + 19);
  if (v3)
  {
    v4 = *((_QWORD *)this + 20);
    v5 = (void *)*((_QWORD *)this + 19);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 32;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v3;
    operator delete(v5);
  }
  radio::DebugCommandDriver::~DebugCommandDriver((void **)this);
}

{
  void *v1;

  radio::QMIDebugCommandDriver::~QMIDebugCommandDriver(this);
  operator delete(v1);
}

void radio::QMIDebugCommandDriver::init(radio::QMIDebugCommandDriver *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio21QMIDebugCommandDriver4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_8_2;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN5radio21QMIDebugCommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const char *Name;
  size_t v3;
  std::string::size_type v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_weak_owners;
  unint64_t v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  NSObject *v57;
  std::__shared_weak_count *size;
  std::__shared_weak_count *v59;
  dispatch_object_t object;
  _BYTE v61[32];
  std::string __dst[2];
  std::string::value_type *v63;
  unint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(a1 + 32);
  v64 = 0xAAAAAAAAAAAA0063;
  v65 = 0x9AAAAAAAAAAAAAALL;
  v63 = *(std::string::value_type **)"debug_ipc";
  memset(&__dst[1], 170, sizeof(std::string));
  Name = (const char *)radio::DebugCommandDriver::getName((radio::DebugCommandDriver *)v1);
  v3 = strlen(Name);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (std::string *)operator new(v6 + 1);
    __dst[0].__r_.__value_.__l.__size_ = v4;
    __dst[0].__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v3;
  v5 = __dst;
  if (v3)
LABEL_8:
    memmove(v5, Name, v4);
  v5->__r_.__value_.__s.__data_[v4] = 0;
  v8 = std::string::append(__dst, "::", 2uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  *(_QWORD *)&v61[16] = *((_QWORD *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)v61 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v65 >= 0)
    v10 = (const std::string::value_type *)&v63;
  else
    v10 = v63;
  if (v65 >= 0)
    v11 = HIBYTE(v65);
  else
    v11 = v64;
  v12 = std::string::append((std::string *)v61, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __dst[1].__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v61[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v61);
    if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_17;
  }
  operator delete(__dst[0].__r_.__value_.__l.__data_);
LABEL_17:
  __dst[0].__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst[0].__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v1 + 104));
  if (!__dst[0].__r_.__value_.__r.__words[0])
  {
    v39 = *(NSObject **)(v1 + 88);
    v57 = v39;
    if (v39)
      dispatch_retain(v39);
    v40 = *(std::__shared_weak_count **)(v1 + 80);
    if (!v40 || (v41 = std::__shared_weak_count::lock(v40)) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v42 = v41;
    p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v44 = __ldxr(p_shared_weak_owners);
    while (__stxr(v44 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v46 = __ldaxr(p_shared_owners);
    while (__stlxr(v46 - 1, p_shared_owners));
    if (v46)
    {
      v47 = std::__shared_weak_count::lock(v41);
      if (v47)
        goto LABEL_72;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v42);
      v47 = std::__shared_weak_count::lock(v42);
      if (v47)
      {
LABEL_72:
        v48 = (unint64_t *)&v47->__shared_weak_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
        v56 = v47;
LABEL_75:
        std::__shared_weak_count::__release_weak(v42);
        if (v47)
        {
          v50 = (unint64_t *)&v47->__shared_owners_;
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        qmi::Client::createWithQueue();
        v52 = *(_OWORD *)&v61[16];
        *(_OWORD *)&v61[16] = 0uLL;
        v53 = *(std::__shared_weak_count **)(v1 + 200);
        *(_OWORD *)(v1 + 192) = v52;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        qmi::Client::~Client((qmi::Client *)v61);
        if (v56)
          std::__shared_weak_count::__release_weak(v56);
        v35 = v57;
        if (v57)
          goto LABEL_52;
        goto LABEL_53;
      }
    }
    v56 = v47;
    goto LABEL_75;
  }
  v14 = *(NSObject **)(v1 + 88);
  object = v14;
  if (v14)
    dispatch_retain(v14);
  v15 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v15 || (v16 = std::__shared_weak_count::lock(v15)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = (unint64_t *)&v16->__shared_weak_owners_;
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
  v20 = (unint64_t *)&v16->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
    v22 = std::__shared_weak_count::lock(v16);
    if (v22)
      goto LABEL_28;
LABEL_90:
    v59 = v22;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v17);
  v22 = std::__shared_weak_count::lock(v17);
  if (!v22)
    goto LABEL_90;
LABEL_28:
  v23 = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v59 = v22;
LABEL_31:
  std::__shared_weak_count::__release_weak(v17);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  size = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (__dst[0].__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  qmi::Client::createWithQueueLocal();
  v29 = *(_OWORD *)&v61[16];
  *(_OWORD *)&v61[16] = 0uLL;
  v30 = *(std::__shared_weak_count **)(v1 + 200);
  *(_OWORD *)(v1 + 192) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  qmi::Client::~Client((qmi::Client *)v61);
  if (size)
  {
    v33 = (unint64_t *)&size->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  v35 = object;
  if (object)
LABEL_52:
    dispatch_release(v35);
LABEL_53:
  qmi::Client::setHandler();
  qmi::Client::setHandler();
  qmi::Client::set((qmi::Client *)(v1 + 176), (const char *)*MEMORY[0x1E0DDCF30]);
  qmi::Client::start((qmi::Client *)(v1 + 176));
  v36 = (std::__shared_weak_count *)__dst[0].__r_.__value_.__l.__size_;
  if (!__dst[0].__r_.__value_.__l.__size_)
    goto LABEL_57;
  v37 = (unint64_t *)(__dst[0].__r_.__value_.__l.__size_ + 8);
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_58:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        return;
LABEL_93:
      operator delete(v63);
      return;
    }
  }
  else
  {
LABEL_57:
    if ((SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_58;
  }
  operator delete(__dst[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v65) < 0)
    goto LABEL_93;
}

void sub_1B3D458D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,dispatch_object_t object,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  if (object)
    dispatch_release(object);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v32 - 136);
  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  if (*(char *)(v32 - 65) < 0)
    operator delete(*(void **)(v32 - 88));
  _Unwind_Resume(a1);
}

void ___ZN5radio21QMIDebugCommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D BSP started", v2, 2u);
  }
}

void ___ZN5radio21QMIDebugCommandDriver4initEv_block_invoke_5(uint64_t a1, xpc_object_t object)
{
  uint64_t v2;
  xpc_object_t v3;
  NSObject *v4;
  void *p_p;
  void *__p;
  char v7;
  xpc_object_t v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v8 = object;
  if (object)
  {
    v3 = object;
    xpc_retain(object);
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  xpc::object::to_string((xpc::object *)&v8);
  if (v7 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  *(_DWORD *)buf = 136315138;
  v10 = p_p;
  _os_log_error_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_ERROR, "BSP server error %s", buf, 0xCu);
  if (v7 < 0)
    operator delete(__p);
  v3 = v8;
LABEL_5:
  xpc_release(v3);
}

void sub_1B3D45B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriver::enable(_QWORD *a1, const void ***a2, uint64_t a3, NSObject **a4)
{
  const void ***v7;
  const void **v8;
  const void **v9;
  const void ***v10;
  BOOL v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  dispatch_object_t object[3];

  v29 = 0;
  v30 = 0;
  *(_QWORD *)&v28 = a1;
  *((_QWORD *)&v28 + 1) = &v29;
  v7 = a2 + 1;
  v8 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)&v28 + 1, (uint64_t)&v29, v8 + 4, (uint64_t)(v8 + 4));
      v9 = (const void **)v8[1];
      if (v9)
      {
        do
        {
          v10 = (const void ***)v9;
          v9 = (const void **)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (const void ***)v8[2];
          v11 = *v10 == v8;
          v8 = (const void **)v10;
        }
        while (!v11);
      }
      v8 = (const void **)v10;
    }
    while (v10 != v7);
  }
  v31 = a3;
  v12 = *a4;
  if (*a4)
    v12 = _Block_copy(v12);
  v13 = a4[1];
  object[0] = v12;
  object[1] = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = (std::__shared_weak_count *)a1[10];
  if (!v14 || (v15 = a1[9], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = (char *)operator new(0x38uLL);
  v19 = v18;
  *(_OWORD *)v18 = v28;
  v20 = v29;
  v21 = v30;
  *((_QWORD *)v18 + 2) = v29;
  v22 = v18 + 16;
  *((_QWORD *)v18 + 3) = v21;
  if (v21)
  {
    *((_QWORD *)v20 + 2) = v22;
    *((_QWORD *)&v28 + 1) = &v29;
    v29 = 0;
    v30 = 0;
  }
  else
  {
    *((_QWORD *)v18 + 1) = v22;
  }
  *((_QWORD *)v18 + 4) = v31;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)object;
  object[0] = 0;
  object[1] = 0;
  v23 = a1[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  v26 = operator new(0x18uLL);
  *v26 = v19;
  v26[1] = v15;
  v26[2] = v17;
  dispatch_async_f(v23, v26, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  if (object[1])
    dispatch_release(object[1]);
  if (object[0])
    _Block_release(object[0]);
  std::__tree<std::string>::destroy(v29);
}

void sub_1B3D45D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11)
{
  std::__tree<std::string>::destroy(a11);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriver::enable_sync(uint64_t a1, const void ***a2, dispatch_time_t a3, uint64_t a4)
{
  void *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  const void ***v12;
  uint64_t **v13;
  char v14;
  int v15;
  uint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  void *v20;
  const void **v21;
  const void **v22;
  const void ***v23;
  BOOL v24;
  void *v25;
  NSObject *v26;
  void *v27;
  _QWORD handler[4];
  void *v29;
  _QWORD v30[5];
  void *v31;
  char **v32;
  char *v33[2];
  char v34;
  void *v35;
  _WORD __s1[11];
  char v37;
  _QWORD aBlock[6];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  dispatch_source_t v42;
  _QWORD v43[5];
  const void *v44;
  dispatch_object_t v45;

  v43[0] = 0;
  v43[1] = v43;
  v43[2] = 0x3802000000;
  v43[3] = __Block_byref_object_copy__8;
  v43[4] = __Block_byref_object_dispose__8;
  v44 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v45 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v8 = *(void **)a4;
  if (*(_QWORD *)a4)
    v8 = _Block_copy(v8);
  v9 = *(NSObject **)(a4 + 8);
  v44 = v8;
  v45 = v9;
  if (v9)
    dispatch_retain(v9);
  v39 = 0;
  v40 = &v39;
  v41 = 0x2000000000;
  v42 = (dispatch_source_t)0xAAAAAAAAAAAAAAAALL;
  v42 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke;
  aBlock[3] = &unk_1E66DAFA0;
  aBlock[4] = v43;
  aBlock[5] = &v39;
  v11 = _Block_copy(aBlock);
  v37 = 1;
  __s1[0] = 42;
  v12 = a2 + 1;
  v13 = (uint64_t **)a2[1];
  if (!v13)
  {
LABEL_6:
    v14 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = *((char *)v13 + 55);
    if (v15 >= 0)
      v16 = (uint64_t *)(v13 + 4);
    else
      v16 = v13[4];
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)v13 + 55);
    else
      v17 = (unint64_t)v13[5];
    v18 = memcmp(__s1, v16, v17 != 0);
    if (v18)
    {
      if (v18 < 0)
        goto LABEL_9;
    }
    else if (v17 > 1)
    {
      goto LABEL_9;
    }
    v19 = memcmp(v16, __s1, v17 != 0);
    if (!v19)
    {
      if (v17)
        break;
      goto LABEL_8;
    }
    if ((v19 & 0x80000000) == 0)
      break;
LABEL_8:
    ++v13;
LABEL_9:
    v13 = (uint64_t **)*v13;
    if (!v13)
      goto LABEL_6;
  }
  v14 = 1;
LABEL_23:
  v30[0] = v10;
  v30[1] = 1174405120;
  v30[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v30[3] = &__block_descriptor_tmp_15_2;
  v30[4] = a1;
  if (v11)
    v20 = _Block_copy(v11);
  else
    v20 = 0;
  v34 = v14;
  v33[0] = 0;
  v33[1] = 0;
  v31 = v20;
  v32 = v33;
  v21 = *a2;
  if (*a2 != (const void **)v12)
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)&v32, (uint64_t)v33, v21 + 4, (uint64_t)(v21 + 4));
      v22 = (const void **)v21[1];
      if (v22)
      {
        do
        {
          v23 = (const void ***)v22;
          v22 = (const void **)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (const void ***)v21[2];
          v24 = *v23 == v21;
          v21 = (const void **)v23;
        }
        while (!v24);
      }
      v21 = (const void **)v23;
    }
    while (v23 != v12);
  }
  v25 = _Block_copy(v30);
  v35 = v25;
  radio::QMIDebugCommandDriver::queryAndCacheCapabilities_sync(a1, &v35);
  if (v25)
    _Block_release(v25);
  v26 = v40[3];
  handler[0] = v10;
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_16;
  handler[3] = &__block_descriptor_tmp_18_5;
  if (v11)
    v27 = _Block_copy(v11);
  else
    v27 = 0;
  v29 = v27;
  dispatch_source_set_event_handler(v26, handler);
  dispatch_source_set_timer((dispatch_source_t)v40[3], a3, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
  dispatch_activate((dispatch_object_t)v40[3]);
  if (v29)
    _Block_release(v29);
  std::__tree<std::string>::destroy(v33[0]);
  if (v31)
    _Block_release(v31);
  if (v11)
    _Block_release(v11);
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(v43, 8);
  if (v45)
    dispatch_release(v45);
  if (v44)
    _Block_release(v44);
}

void sub_1B3D460D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,uint64_t a21,char *a22)
{
  const void *v22;
  const void *v23;
  uint64_t v24;

  if (v23)
    _Block_release(v23);
  std::__tree<std::string>::destroy(a22);
  if (aBlock)
    _Block_release(aBlock);
  if (v22)
    _Block_release(v22);
  _Block_object_dispose((const void *)(v24 - 192), 8);
  _Block_object_dispose((const void *)(v24 - 160), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v24 - 120);
  _Unwind_Resume(a1);
}

void ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3;
  const void *v4;
  CFTypeRef v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  const void *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[4];
  void *aBlock;
  CFTypeRef cf;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(const void **)(v3 + 40);
  if (!v4 || !*(_QWORD *)(v3 + 48))
    goto LABEL_24;
  v5 = *a2;
  if (*a2 && (CFRetain(*a2), (v4 = *(const void **)(v3 + 40)) == 0))
    v6 = 0;
  else
    v6 = _Block_copy(v4);
  v7 = *(NSObject **)(v3 + 48);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_3;
  v12[3] = &__block_descriptor_tmp_68_0;
  if (v6)
  {
    aBlock = _Block_copy(v6);
    cf = v5;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  aBlock = 0;
  cf = v5;
  if (v5)
LABEL_11:
    CFRetain(v5);
LABEL_12:
  dispatch_async(v7, v12);
  if (cf)
    CFRelease(cf);
  if (aBlock)
    _Block_release(aBlock);
  if (v6)
    _Block_release(v6);
  if (v5)
    CFRelease(v5);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(const void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = 0;
  if (v9)
    _Block_release(v9);
  v10 = *(NSObject **)(v8 + 48);
  *(_QWORD *)(v8 + 48) = 0;
  if (v10)
    dispatch_release(v10);
LABEL_24:
  v11 = *(NSObject **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if (v11)
  {
    dispatch_source_cancel(v11);
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
}

void radio::QMIDebugCommandDriver::queryAndCacheCapabilities_sync(uint64_t a1, void **a2)
{
  __int128 v4;
  const void **v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD v11[5];
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  _QWORD aBlock[5];

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18 = v4;
  v19 = v4;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v18);
  v5 = (const void **)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1) != (_QWORD)v19)
  {
    while (*((_BYTE *)*v5 + 8) != 1)
    {
      if (++v5 == (const void **)v19)
        goto LABEL_8;
    }
  }
  if (v5 == (const void **)v19)
  {
LABEL_8:
    v7 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::CommandCode>(&v18);
  }
  else
  {
    if (!v6)
      __cxa_bad_cast();
    v7 = v6 + 12;
  }
  *(_DWORD *)v7 = 32;
  v13 = a1 + 176;
  v14 = QMIServiceMsg::create();
  v15 = 25000;
  v16 = 0;
  v17 = 0;
  v8 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_24_7;
  v11[4] = a1;
  v9 = *a2;
  if (*a2)
    v9 = _Block_copy(v9);
  v12 = v9;
  aBlock[0] = v8;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPCLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66DB3E8;
  aBlock[4] = v11;
  v10 = _Block_copy(aBlock);
  v17 = v10;
  if (v14)
  {
    qmi::Client::send();
    v10 = v17;
  }
  if (v10)
    _Block_release(v10);
  if (v12)
    _Block_release(v12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v18);
}

void sub_1B3D46458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (aBlock)
    _Block_release(aBlock);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void sub_1B3D46484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D46498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  int v17;
  const void *v18;
  size_t v19;
  int v20;
  uint64_t *v21;
  size_t v22;
  size_t v23;
  int v24;
  int v25;
  void *v26;
  NSObject *v27;
  void *v28;
  _QWORD v29[4];
  void *v30;
  uint64_t aBlock;
  uint64_t v32;
  uint64_t (*v33)();
  void *v34;
  dispatch_group_t group;
  void *v36;
  CFTypeRef cf;

  v3 = *a2;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 40);
    cf = *a2;
    if (v3)
      CFRetain(v3);
    (*(void (**)(uint64_t, CFTypeRef *))(v5 + 16))(v5, &cf);
    if (cf)
      CFRelease(cf);
    return;
  }
  v6 = *(_QWORD **)(a1 + 32);
  v7 = dispatch_group_create();
  v8 = MEMORY[0x1E0C809B0];
  if (v6[20] != v6[19])
  {
    v9 = 0;
    v10 = 0;
    do
    {
      if (v7)
      {
        dispatch_retain(v7);
        dispatch_group_enter(v7);
      }
      if (*(_BYTE *)(a1 + 72))
      {
        v11 = 1;
        aBlock = v8;
        v32 = 1174405120;
        v33 = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
        v34 = &__block_descriptor_tmp_12_5;
        group = v7;
        if (!v7)
          goto LABEL_48;
        goto LABEL_46;
      }
      v12 = *(uint64_t ***)(a1 + 56);
      if (!v12)
      {
        v11 = 0;
        aBlock = v8;
        v32 = 1174405120;
        v33 = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
        v34 = &__block_descriptor_tmp_12_5;
        group = v7;
        if (!v7)
          goto LABEL_48;
LABEL_46:
        dispatch_retain(v7);
        if (group)
          dispatch_group_enter(group);
        goto LABEL_48;
      }
      v13 = v6[19] + 32 * v9;
      v16 = *(const void **)(v13 + 8);
      v14 = v13 + 8;
      v15 = v16;
      v17 = *(char *)(v14 + 23);
      if (v17 >= 0)
        v18 = (const void *)v14;
      else
        v18 = v15;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(v14 + 23);
      else
        v19 = *(_QWORD *)(v14 + 8);
      do
      {
        v20 = *((char *)v12 + 55);
        if (v20 >= 0)
          v21 = (uint64_t *)(v12 + 4);
        else
          v21 = v12[4];
        if (v20 >= 0)
          v22 = *((unsigned __int8 *)v12 + 55);
        else
          v22 = (size_t)v12[5];
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        v24 = memcmp(v18, v21, v23);
        if (v24)
        {
          if (v24 < 0)
            goto LABEL_25;
        }
        else if (v19 < v22)
        {
          goto LABEL_25;
        }
        v25 = memcmp(v21, v18, v23);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
          {
LABEL_41:
            v11 = 1;
            goto LABEL_43;
          }
        }
        else if (v22 >= v19)
        {
          goto LABEL_41;
        }
        ++v12;
LABEL_25:
        v12 = (uint64_t **)*v12;
      }
      while (v12);
      v11 = 0;
LABEL_43:
      v8 = MEMORY[0x1E0C809B0];
      aBlock = MEMORY[0x1E0C809B0];
      v32 = 1174405120;
      v33 = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
      v34 = &__block_descriptor_tmp_12_5;
      group = v7;
      if (v7)
        goto LABEL_46;
LABEL_48:
      v26 = _Block_copy(&aBlock);
      v36 = v26;
      radio::QMIDebugCommandDriver::enableSpecific_sync((uint64_t)v6, &v36, v10, v11);
      if (v26)
        _Block_release(v26);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v7)
      {
        dispatch_group_leave(v7);
        dispatch_release(v7);
      }
      v9 = ++v10;
    }
    while (v10 < (unint64_t)((uint64_t)(v6[20] - v6[19]) >> 5));
  }
  v27 = v6[11];
  v29[0] = v8;
  v29[1] = 1174405120;
  v29[2] = ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_13;
  v29[3] = &__block_descriptor_tmp_14_2;
  v28 = *(void **)(a1 + 40);
  if (v28)
    v28 = _Block_copy(v28);
  v30 = v28;
  dispatch_group_notify(v7, v27, v29);
  if (v30)
    _Block_release(v30);
  if (v7)
    dispatch_release(v7);
}

void sub_1B3D467B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D467D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_group_t group)
{
  NSObject *v18;
  const void *v19;

  if (v19)
    _Block_release(v19);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
    if (v18)
    {
LABEL_8:
      dispatch_group_leave(v18);
      dispatch_release(v18);
      dispatch_release(v18);
      _Unwind_Resume(exception_object);
    }
  }
  else if (v18)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(exception_object);
}

void radio::QMIDebugCommandDriver::enableSpecific_sync(uint64_t a1, void **a2, int a3, int a4)
{
  NSObject *v8;
  __int128 v9;
  const void **v10;
  const void **v11;
  const void **v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  const void **v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  _BYTE *v22;
  _QWORD v23[5];
  void *v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *aBlock;
  _QWORD v32[2];
  uint64_t (*v33)(uint64_t, char *);
  void *v34;
  char v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[8];
  uint64_t v39;
  void (*v40)(uint64_t, QMIServiceMsg *);
  void *v41;
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a3;
    LOWORD(v39) = 1024;
    *(_DWORD *)((char *)&v39 + 2) = a4;
    _os_log_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEFAULT, "#I Setting enable on index %u to %d", buf, 0xEu);
  }
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36 = v9;
  v37 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
  v10 = (const void **)*((_QWORD *)&v36 + 1);
  v11 = (const void **)v37;
  v12 = (const void **)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1) != (_QWORD)v37)
  {
    v12 = (const void **)*((_QWORD *)&v36 + 1);
    while (*((_BYTE *)*v12 + 8) != 1)
    {
      if (++v12 == (const void **)v37)
        goto LABEL_11;
    }
  }
  if (v12 == (const void **)v37)
  {
LABEL_11:
    v14 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::CommandCode>(&v36);
    v10 = (const void **)*((_QWORD *)&v36 + 1);
    v11 = (const void **)v37;
  }
  else
  {
    if (!v13)
      goto LABEL_36;
    v14 = v13 + 12;
  }
  *(_DWORD *)v14 = 33;
  v15 = MEMORY[0x1E0C809B0];
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 0x40000000;
  v33 = ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_2;
  v34 = &__block_descriptor_tmp_28_3;
  v35 = a4;
  if (v10 == v11)
    goto LABEL_15;
  while (*((_BYTE *)*v10 + 8) != 18)
  {
    if (++v10 == v11)
      goto LABEL_15;
  }
  if (v10 == v11)
  {
LABEL_15:
    v16 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::Enable>(&v36, 18);
    v33((uint64_t)v32, v16);
  }
  else
  {
    if (!v22)
      goto LABEL_36;
    ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_2((uint64_t)v32, v22 + 9);
  }
  v17 = (const void **)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1) != (_QWORD)v37)
  {
    while (*((_BYTE *)*v17 + 8) != 16)
    {
      if (++v17 == (const void **)v37)
        goto LABEL_23;
    }
  }
  if (v17 != (const void **)v37)
  {
    if (v18)
    {
      v19 = v18 + 9;
      goto LABEL_24;
    }
LABEL_36:
    __cxa_bad_cast();
  }
LABEL_23:
  v19 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::RegionIndex>(&v36);
LABEL_24:
  *v19 = a3;
  v27 = a1 + 176;
  v28 = QMIServiceMsg::create();
  v29 = 25000;
  v30 = 0;
  aBlock = 0;
  v23[0] = v15;
  v23[1] = 1174405120;
  v23[2] = ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_4;
  v23[3] = &__block_descriptor_tmp_33_3;
  v23[4] = a1;
  v25 = a3;
  v26 = a4;
  v20 = *a2;
  if (*a2)
    v20 = _Block_copy(v20);
  v24 = v20;
  *(_QWORD *)buf = v15;
  v39 = 0x40000000;
  v40 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPCLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v41 = &unk_1E66DB3E8;
  v42 = v23;
  v21 = _Block_copy(buf);
  aBlock = v21;
  if (v28)
  {
    qmi::Client::send();
    v21 = aBlock;
  }
  if (v21)
    _Block_release(v21);
  if (v24)
    _Block_release(v24);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v36);
}

void sub_1B3D46B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B3D46BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 32);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_13(uint64_t a1)
{
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
}

void sub_1B3D46CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a10);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

const void *__copy_helper_block_e8_40c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE48c100_ZTSNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEE(_QWORD *a1, _QWORD *a2)
{
  const void *result;
  const void **v5;
  const void **v6;
  const void **v7;
  const void **v8;
  BOOL v9;

  result = (const void *)a2[5];
  if (result)
    result = _Block_copy(result);
  a1[7] = 0;
  a1[6] = a1 + 7;
  a1[5] = result;
  a1[8] = 0;
  v5 = (const void **)a2[6];
  v6 = (const void **)(a2 + 7);
  if (v5 != v6)
  {
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(a1 + 6, (uint64_t)(a1 + 7), v5 + 4, (uint64_t)(v5 + 4));
      v7 = (const void **)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void **)v5[2];
          v9 = *v8 == v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

void sub_1B3D46DC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  std::__tree<std::string>::destroy(*(char **)(v1 + 56));
  v3 = *(const void **)(v1 + 40);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE48c100_ZTSNSt3__13setINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIS6_EENS4_IS6_EEEE(uint64_t a1)
{
  const void *v2;

  std::__tree<std::string>::destroy(*(char **)(a1 + 56));
  v2 = *(const void **)(a1 + 40);
  if (v2)
    _Block_release(v2);
}

void ___ZN5radio21QMIDebugCommandDriver11enable_syncENSt3__13setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessIS8_EENS6_IS8_EEEEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_16(uint64_t a1)
{
  uint64_t v2;
  char __p[23];
  char v4;
  CFTypeRef cf;
  CFTypeRef v6;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v4 = 7;
  strcpy(__p, "timeout");
  CreateError();
  v2 = *(_QWORD *)(a1 + 32);
  v6 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &v6);
  if (v6)
    CFRelease(v6);
  CFRelease(cf);
}

void sub_1B3D46EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v5 - 24));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D46F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t TlvValue;
  int v10;
  _QWORD v11[5];
  CFTypeRef cf;
  void *__p;
  void *v14[2];
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x28uLL);
  *(_OWORD *)v14 = xmmword_1B3DCFE50;
  strcpy((char *)__p, "Querying capabilities for enabling");
  radio::QMIDebugCommandDriver::checkError(v4, (uint64_t)a2, (uint64_t)&__p, &cf);
  if (SHIBYTE(v14[1]) < 0)
  {
    operator delete(__p);
    v5 = (void *)cf;
    v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v8 = 0;
    if (v8)
    {
LABEL_5:
      v7 = *(_QWORD *)(a1 + 40);
      __p = v5;
      if (!v5)
        goto LABEL_15;
LABEL_14:
      CFRetain(v5);
      goto LABEL_15;
    }
  }
  else
  {
    v5 = (void *)cf;
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v6 = 0;
    if (v6)
      goto LABEL_5;
  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3;
  v11[3] = &__block_descriptor_tmp_23_4;
  v11[4] = v4;
  TlvValue = qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    __p = (void *)0xAAAAAAAA00000000;
    v14[0] = 0;
    v14[1] = 0;
    v15 = 0;
    bsp::tlv::abm::parseField(TlvValue, (const unsigned __int8 *)(TlvValue + v10), (uint64_t)&__p);
    ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3((uint64_t)v11, (uint64_t)&__p);
    if (v14[0])
    {
      v14[1] = v14[0];
      operator delete(v14[0]);
    }
  }
  v5 = (void *)cf;
  v7 = *(_QWORD *)(a1 + 40);
  __p = (void *)cf;
  if (cf)
    goto LABEL_14;
LABEL_15:
  (*(void (**)(uint64_t, void **))(v7 + 16))(v7, &__p);
  if (__p)
    CFRelease(__p);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D470E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void sub_1B3D47158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN5radio21QMIDebugCommandDriver30queryAndCacheCapabilities_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 *v6;
  uint64_t j;
  size_t v8;
  __int128 *v9;
  _BYTE *v10;
  int v11;
  BOOL v12;
  __int128 *p_p;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  __int128 *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void **v28;
  char *v29;
  char *v30;
  std::string *v31;
  char *v32;
  int v33;
  __int128 v34;
  void **v35;
  char *v36;
  void **v37;
  __int128 *v38;
  uint64_t v39;
  __int128 __p;
  unint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v3 + 144) = *(_DWORD *)a2;
  v4 = *(_QWORD *)(v3 + 152);
  for (i = *(_QWORD *)(v3 + 160); i != v4; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  *(_QWORD *)(v3 + 160) = v4;
  v6 = *(__int128 **)(a2 + 8);
  v38 = *(__int128 **)(a2 + 16);
  while (v6 != v38)
  {
    v47 = *v6;
    v48 = *((_DWORD *)v6 + 4);
    HIBYTE(v39) = -86;
    v41 = 0;
    __p = 0uLL;
    for (j = 4; j != 20; ++j)
    {
      v11 = *((unsigned __int8 *)&v47 + j);
      v12 = (v11 - 97) >= 0x1A && (v11 - 48) >= 0xA;
      if (!v12 || v11 == 95 || v11 == 46)
      {
        if (SHIBYTE(v41) < 0)
        {
          v8 = (v41 & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (*((_QWORD *)&__p + 1) == v8)
          {
            if ((v41 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            p_p = (__int128 *)__p;
            if (v8 > 0x3FFFFFFFFFFFFFF2)
            {
              v16 = 0x7FFFFFFFFFFFFFF7;
            }
            else
            {
LABEL_26:
              if (v8 + 1 > 2 * v8)
                v14 = v8 + 1;
              else
                v14 = 2 * v8;
              v15 = (v14 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17)
                v15 = v14 | 7;
              if (v14 >= 0x17)
                v16 = v15 + 1;
              else
                v16 = 23;
            }
            v17 = (__int128 *)operator new(v16);
            v9 = v17;
            if (!v8 || (memmove(v17, p_p, v8), v8 != 22))
              operator delete(p_p);
            *(_QWORD *)&__p = v9;
            v41 = v16 | 0x8000000000000000;
          }
          else
          {
            v8 = *((_QWORD *)&__p + 1);
            v9 = (__int128 *)__p;
          }
          *((_QWORD *)&__p + 1) = v8 + 1;
        }
        else
        {
          if (HIBYTE(v41) == 22)
          {
            p_p = &__p;
            v8 = 22;
            goto LABEL_26;
          }
          v8 = HIBYTE(v41);
          HIBYTE(v41) = (HIBYTE(v41) + 1) & 0x7F;
          v9 = &__p;
        }
        v10 = (char *)v9 + v8;
        *v10 = v11;
        v10[1] = 0;
        continue;
      }
    }
    v18 = v47;
    v20 = *(_QWORD *)(v3 + 160);
    v19 = *(_QWORD *)(v3 + 168);
    if (v20 < v19)
    {
      *(_DWORD *)v20 = v47;
      v21 = (std::string *)(v20 + 8);
      if (SHIBYTE(v41) < 0)
      {
        std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      }
      else
      {
        v22 = __p;
        *(_QWORD *)(v20 + 24) = v41;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
      }
      v29 = (char *)(v20 + 32);
      *(_QWORD *)(v3 + 160) = v29;
      goto LABEL_66;
    }
    v23 = *(void ***)(v3 + 152);
    v24 = (uint64_t)(v20 - (_QWORD)v23) >> 5;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 59)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v26 = v19 - (_QWORD)v23;
    if (v26 >> 4 > v25)
      v25 = v26 >> 4;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
      v27 = 0x7FFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v46 = v3 + 168;
    if (v27)
    {
      if (v27 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = (void **)operator new(32 * v27);
    }
    else
    {
      v28 = 0;
    }
    v30 = (char *)&v28[4 * v24];
    v42 = v28;
    v43 = (void **)v30;
    v44 = (void **)v30;
    v45 = (char *)&v28[4 * v27];
    *(_DWORD *)v30 = v18;
    v31 = (std::string *)(v30 + 8);
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external(v31, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
      v23 = *(void ***)(v3 + 152);
      v20 = *(_QWORD *)(v3 + 160);
      v30 = (char *)v43;
      v32 = (char *)v44;
      if ((void **)v20 == v23)
        goto LABEL_62;
    }
    else
    {
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = __p;
      *((_QWORD *)v30 + 3) = v41;
      v32 = v30;
      if ((void **)v20 == v23)
      {
LABEL_62:
        v35 = v23;
        goto LABEL_63;
      }
    }
    do
    {
      v33 = *(_DWORD *)(v20 - 32);
      v20 -= 32;
      *((_DWORD *)v30 - 8) = v33;
      v30 -= 32;
      v34 = *(_OWORD *)(v20 + 8);
      *((_QWORD *)v30 + 3) = *(_QWORD *)(v20 + 24);
      *(_OWORD *)(v30 + 8) = v34;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 8) = 0;
    }
    while ((void **)v20 != v23);
    v35 = *(void ***)(v3 + 152);
    v23 = *(void ***)(v3 + 160);
LABEL_63:
    v29 = v32 + 32;
    *(_QWORD *)(v3 + 152) = v30;
    *(_QWORD *)(v3 + 160) = v32 + 32;
    v36 = *(char **)(v3 + 168);
    *(_QWORD *)(v3 + 168) = v45;
    v45 = v36;
    v42 = v35;
    v43 = v35;
    if (v23 == v35)
    {
      if (!v23)
        goto LABEL_66;
      goto LABEL_65;
    }
    do
    {
      v37 = v23 - 4;
      v44 = v23 - 4;
      if (*((char *)v23 - 1) < 0)
        operator delete(*(v23 - 3));
      v23 -= 4;
    }
    while (v37 != v35);
    v23 = v35;
    if (v35)
LABEL_65:
      operator delete(v23);
LABEL_66:
    *(_QWORD *)(v3 + 160) = v29;
    if (SHIBYTE(v41) < 0)
      operator delete((void *)__p);
    v6 = (__int128 *)((char *)v6 + 20);
  }
}

void sub_1B3D47580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 + 160) = v19;
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c76_ZTSN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

uint64_t ___ZN5radio21QMIDebugCommandDriver19enableSpecific_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEEjb_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFTypeRef v20;
  void *__p[2];
  unint64_t v23;
  CFTypeRef cf;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30[2];
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32 = 0xAAAAAAAAAAAAAAAALL;
  v42 = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  v36 = v5;
  v35 = v5;
  v34 = v5;
  v31 = v5;
  *(_OWORD *)v30 = v5;
  v29 = v5;
  v28 = v5;
  v27 = v5;
  v26 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v25 + *(_QWORD *)(v25 - 24));
  std::ios_base::init(v10, &v26);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v25 = v6 + 24;
  v33 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v26 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  LODWORD(v32) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v25, (uint64_t)"Setting enable for region ", 26);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" to ", 4);
  std::ostream::operator<<();
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if ((v32 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1) < (unint64_t)v29)
    {
      *((_QWORD *)&v31 + 1) = v29;
      v15 = v29;
    }
    v16 = (const void *)*((_QWORD *)&v28 + 1);
    v13 = v15 - *((_QWORD *)&v28 + 1);
    if ((unint64_t)(v15 - *((_QWORD *)&v28 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v32 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v23) = 0;
      v14 = __p;
      goto LABEL_14;
    }
    v16 = (const void *)v27;
    v13 = v28 - v27;
    if ((_QWORD)v28 - (_QWORD)v27 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    v14 = operator new(v17 + 1);
    __p[1] = (void *)v13;
    v23 = v18 | 0x8000000000000000;
    __p[0] = v14;
    v11 = MEMORY[0x1E0DE4FB8];
    goto LABEL_13;
  }
  HIBYTE(v23) = v13;
  v14 = __p;
  if (v13)
LABEL_13:
    memmove(v14, v16, v13);
LABEL_14:
  *((_BYTE *)v14 + v13) = 0;
  radio::QMIDebugCommandDriver::checkError(v4, a2, (uint64_t)__p, &cf);
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    v19 = *(_QWORD *)(a1 + 40);
    v20 = cf;
    __p[0] = (void *)cf;
    if (!cf)
      goto LABEL_19;
    goto LABEL_18;
  }
  v19 = *(_QWORD *)(a1 + 40);
  v20 = cf;
  __p[0] = (void *)cf;
  if (cf)
LABEL_18:
    CFRetain(v20);
LABEL_19:
  (*(void (**)(uint64_t, void **))(v19 + 16))(v19, __p);
  if (__p[0])
    CFRelease(__p[0]);
  if (cf)
    CFRelease(cf);
  v25 = *v8;
  *(uint64_t *)((char *)&v25 + *(_QWORD *)(v25 - 24)) = v8[3];
  *(_QWORD *)&v26 = v11 + 16;
  if (SBYTE7(v31) < 0)
    operator delete(v30[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v33);
}

void sub_1B3D47924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, const void *a12, char a13)
{
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a12);
  std::ostringstream::~ostringstream((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B3D47948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void radio::QMIDebugCommandDriver::queryIPCLogs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD block[6];

  v5[2] = a3;
  v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE20execute_wrapped_syncIZNS1_21QMIDebugCommandDriver12queryIPCLogsEyN8dispatch8callbackIU13block_pointerFvNS_2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke;
  block[3] = &__block_descriptor_tmp_70;
  block[4] = a1 + 72;
  block[5] = v5;
  v4 = a1 + 88;
  v3 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v4 + 8))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
}

void radio::QMIDebugCommandDriver::queryIPCLogs_sync(uint64_t a1, dispatch_time_t a2, uint64_t a3)
{
  void *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  void *v13;
  _QWORD v14[7];
  _QWORD aBlock[7];
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  dispatch_source_t v20;
  _QWORD v21[5];
  void *__p;
  char *v23;
  uint64_t v24;
  _QWORD v25[5];
  const void *v26;
  dispatch_object_t v27;

  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3802000000;
  v25[3] = __Block_byref_object_copy__34;
  v25[4] = __Block_byref_object_dispose__35;
  v26 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v27 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = *(NSObject **)(a3 + 8);
  v26 = v6;
  v27 = v7;
  if (v7)
    dispatch_retain(v7);
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x4002000000;
  v21[3] = __Block_byref_object_copy__36;
  v21[4] = __Block_byref_object_dispose__37;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = (dispatch_source_t)0xAAAAAAAAAAAAAAAALL;
  v20 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  v8 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN5radio21QMIDebugCommandDriver17queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
  aBlock[3] = &unk_1E66DB128;
  aBlock[4] = v25;
  aBlock[5] = v21;
  aBlock[6] = &v17;
  v9 = _Block_copy(aBlock);
  v16 = v9;
  radio::QMIDebugCommandDriver::capture_sync(a1, &v16);
  if (v9)
    _Block_release(v9);
  v10 = v18[3];
  v14[0] = v8;
  v14[1] = 0x40000000;
  v14[2] = ___ZN5radio21QMIDebugCommandDriver17queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2;
  v14[3] = &unk_1E66DB150;
  v14[4] = v25;
  v14[5] = v21;
  v14[6] = &v17;
  dispatch_source_set_event_handler(v10, v14);
  dispatch_source_set_timer((dispatch_source_t)v18[3], a2, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
  dispatch_activate((dispatch_object_t)v18[3]);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  v11 = (char *)__p;
  if (__p)
  {
    v12 = v23;
    v13 = __p;
    if (v23 != __p)
    {
      do
        qmi::Client::~Client((qmi::Client *)(v12 - 32));
      while (v12 != v11);
      v13 = __p;
    }
    v23 = v11;
    operator delete(v13);
  }
  _Block_object_dispose(v25, 8);
  if (v27)
    dispatch_release(v27);
  if (v26)
    _Block_release(v26);
}

void sub_1B3D47C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;
  void **v29;
  const void *v30;
  uint64_t v31;

  if (v30)
    _Block_release(v30);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  std::vector<qmi::Client>::~vector[abi:ne180100](v29);
  _Block_object_dispose((const void *)(v31 - 136), 8);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v28);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__35(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

__n128 __Block_byref_object_copy__36(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__37(uint64_t a1)
{
  char *v1;
  char *v3;
  char *v4;

  v1 = *(char **)(a1 + 40);
  if (v1)
  {
    v3 = *(char **)(a1 + 48);
    v4 = v1;
    if (v3 != v1)
    {
      do
        qmi::Client::~Client((qmi::Client *)(v3 - 32));
      while (v3 != v1);
      v4 = *(char **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

void **std::vector<qmi::Client>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        qmi::Client::~Client((qmi::Client *)(v3 - 32));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void radio::QMIDebugCommandDriver::capture_sync(uint64_t a1, void **a2)
{
  void *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  __int128 v13;
  int *v14;
  int v15;
  const std::string::value_type **v16;
  __int128 v17;
  void *v18;
  NSObject *v19;
  char *v20;
  NSObject *v21;
  void (**v22)(void);
  CFMutableDictionaryRef v23;
  _QWORD block[5];
  CFTypeRef v25;
  _QWORD aBlock[6];
  int v27;
  std::string __p;
  dispatch_group_t group;
  CFTypeRef cf;
  int v31;
  unsigned int v32;
  void *v33;
  _BYTE v34[32];
  uint64_t v35;
  std::string v36;
  CFMutableDictionaryRef v37;
  __int128 buf;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  const void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 144))
  {
    *(_QWORD *)&buf = 0;
    *((_QWORD *)&buf + 1) = &buf;
    v39 = 0x3002000000;
    v40 = __Block_byref_object_copy__42;
    v41 = __Block_byref_object_dispose__43;
    v42 = (const void *)0xAAAAAAAAAAAAAAAALL;
    v4 = *a2;
    if (*a2)
      v4 = _Block_copy(v4);
    v42 = v4;
    v37 = 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v6 = Mutable;
    if (Mutable)
      v37 = Mutable;
    v7 = dispatch_group_create();
    v8 = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v8);
    }
    v9 = *(_QWORD *)(a1 + 152);
    if (*(_QWORD *)(a1 + 160) != v9)
    {
      v10 = 0;
      v11 = *(_DWORD *)(a1 + 144);
      v12 = 1;
      do
      {
        *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)v34 = v13;
        *(_OWORD *)&v34[16] = v13;
        v14 = (int *)(v9 + 32 * v10);
        v15 = *v14;
        *(_DWORD *)v34 = *v14;
        v16 = (const std::string::value_type **)(v14 + 2);
        if (*((char *)v14 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v34[8], *v16, *((_QWORD *)v14 + 2));
          v15 = *(_DWORD *)v34;
        }
        else
        {
          v17 = *(_OWORD *)v16;
          *(_QWORD *)&v34[24] = *((_QWORD *)v14 + 3);
          *(_OWORD *)&v34[8] = v17;
        }
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke;
        aBlock[3] = &unk_1E66DB1B0;
        aBlock[5] = a1;
        v27 = v15;
        if ((v34[31] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v34[8], *(std::string::size_type *)&v34[16]);
        else
          __p = *(std::string *)&v34[8];
        v31 = v11;
        v32 = v12 - 1;
        group = v8;
        if (v8)
        {
          dispatch_retain(v8);
          if (group)
            dispatch_group_enter(group);
        }
        aBlock[4] = &buf;
        cf = v6;
        if (v6)
          CFRetain(v6);
        v18 = _Block_copy(aBlock);
        v33 = v18;
        radio::QMIDebugCommandDriver::enableSpecific_sync(a1, &v33, v12 - 1, 0);
        if (v18)
          _Block_release(v18);
        if (cf)
          CFRelease(cf);
        if (group)
        {
          dispatch_group_leave(group);
          if (group)
            dispatch_release(group);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v34[31] & 0x80000000) != 0)
LABEL_33:
            operator delete(*(void **)&v34[8]);
        }
        else if ((v34[31] & 0x80000000) != 0)
        {
          goto LABEL_33;
        }
        v10 = v12;
        v9 = *(_QWORD *)(a1 + 152);
        ++v12;
      }
      while (v10 < (*(_QWORD *)(a1 + 160) - v9) >> 5);
    }
    if (v8)
    {
      dispatch_group_leave(v8);
      dispatch_release(v8);
    }
    v19 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_48;
    block[3] = &unk_1E66DB1E8;
    block[4] = &buf;
    v25 = v6;
    if (v6)
      CFRetain(v6);
    dispatch_group_notify(v8, v19, block);
    if (v25)
      CFRelease(v25);
    if (v8)
      dispatch_release(v8);
    if (v6)
      CFRelease(v6);
    _Block_object_dispose(&buf, 8);
    if (v42)
      _Block_release(v42);
  }
  else
  {
    v20 = (char *)operator new(0x20uLL);
    strcpy(v20, "Block size hasn't been loaded");
    v21 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_error_impl(&dword_1B3CB3000, v21, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    }
    std::string::__init_copy_ctor_external(&v36, v20, 0x1DuLL);
    CreateError();
    v22 = (void (**)(void))*a2;
    v23 = v37;
    v37 = 0;
    *(_QWORD *)&buf = v23;
    *(_QWORD *)v34 = 0;
    v35 = 0;
    v22[2]();
    if ((_QWORD)buf)
      CFRelease((CFTypeRef)buf);
    if (v37)
      CFRelease(v37);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    operator delete(v20);
  }
}

void sub_1B3D4826C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,dispatch_group_t group,uint64_t a31,uint64_t a32,uint64_t a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN5radio21QMIDebugCommandDriver17queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(_QWORD *a1, CFTypeRef *a2, const void **a3)
{
  uint64_t v4;
  CFTypeRef v6;
  const void *v7;
  const void *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  const void *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  NSObject *v17;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v20;
  CFTypeRef cf;

  v4 = *(_QWORD *)(a1[4] + 8);
  if (!*(_QWORD *)(v4 + 40) || !*(_QWORD *)(v4 + 48))
    goto LABEL_36;
  v6 = *a2;
  if (*a2)
    CFRetain(*a2);
  v7 = *a3;
  if (v7)
    CFRetain(v7);
  v8 = *(const void **)(v4 + 40);
  if (v8)
    v9 = _Block_copy(v8);
  else
    v9 = 0;
  v10 = *(NSObject **)(v4 + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_2;
  block[3] = &__block_descriptor_tmp_71_0;
  if (v9)
  {
    aBlock = _Block_copy(v9);
    v20 = v6;
    if (!v6)
      goto LABEL_15;
    goto LABEL_14;
  }
  aBlock = 0;
  v20 = v6;
  if (v6)
LABEL_14:
    CFRetain(v6);
LABEL_15:
  cf = v7;
  if (v7)
    CFRetain(v7);
  dispatch_async(v10, block);
  if (cf)
    CFRelease(cf);
  if (v20)
    CFRelease(v20);
  if (aBlock)
    _Block_release(aBlock);
  if (v9)
    _Block_release(v9);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  v11 = *(_QWORD *)(a1[4] + 8);
  v12 = *(const void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = 0;
  if (v12)
    _Block_release(v12);
  v13 = *(NSObject **)(v11 + 48);
  *(_QWORD *)(v11 + 48) = 0;
  if (v13)
    dispatch_release(v13);
  v14 = *(_QWORD *)(a1[5] + 8);
  v16 = *(_QWORD *)(v14 + 40);
  for (i = *(_QWORD *)(v14 + 48); i != v16; qmi::Client::~Client((qmi::Client *)(i - 32)))
    ;
  *(_QWORD *)(v14 + 48) = v16;
LABEL_36:
  v17 = *(NSObject **)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v17)
  {
    dispatch_source_cancel(v17);
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1[6] + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
  }
}

void ___ZN5radio21QMIDebugCommandDriver17queryIPCLogs_syncEyN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_2(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  const void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  NSObject *v12;
  char __p[23];
  char v14;
  CFTypeRef cf;
  _QWORD block[4];
  void *aBlock;
  CFTypeRef v18;
  CFTypeRef v19;

  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v14 = 7;
  strcpy(__p, "timeout");
  CreateError();
  v2 = *(_QWORD *)(a1[4] + 8);
  if (*(_QWORD *)(v2 + 40) && *(_QWORD *)(v2 + 48))
  {
    CFRetain(cf);
    v3 = *(const void **)(v2 + 40);
    if (v3)
      v4 = _Block_copy(v3);
    else
      v4 = 0;
    v5 = *(NSObject **)(v2 + 48);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_2;
    block[3] = &__block_descriptor_tmp_71_0;
    if (v4)
    {
      aBlock = _Block_copy(v4);
      v18 = cf;
    }
    else
    {
      aBlock = 0;
      v18 = cf;
    }
    CFRetain(cf);
    v19 = 0;
    dispatch_async(v5, block);
    if (v19)
      CFRelease(v19);
    if (v18)
      CFRelease(v18);
    if (aBlock)
      _Block_release(aBlock);
    if (v4)
      _Block_release(v4);
    CFRelease(cf);
    v6 = *(_QWORD *)(a1[4] + 8);
    v7 = *(const void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = 0;
    if (v7)
      _Block_release(v7);
    v8 = *(NSObject **)(v6 + 48);
    *(_QWORD *)(v6 + 48) = 0;
    if (v8)
      dispatch_release(v8);
    v9 = *(_QWORD *)(a1[5] + 8);
    v11 = *(_QWORD *)(v9 + 40);
    for (i = *(_QWORD *)(v9 + 48); i != v11; qmi::Client::~Client((qmi::Client *)(i - 32)))
      ;
    *(_QWORD *)(v9 + 48) = v11;
  }
  v12 = *(NSObject **)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v12)
  {
    dispatch_source_cancel(v12);
    dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1[6] + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
  }
  if (cf)
    CFRelease(cf);
}

void sub_1B3D487DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__43(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  unsigned int v5;
  _QWORD *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  const void *v11;
  void *v12;
  _QWORD aBlock[6];
  dispatch_group_t group;
  int v15;
  std::string __p;
  CFTypeRef cf;
  void *v18;
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 48);
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (*(_DWORD *)(a1 + 96) * v3) >> 10;
    v6 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 136315650;
    v20 = v6;
    v21 = 1024;
    v22 = v3;
    v23 = 1024;
    v24 = v5;
    _os_log_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEFAULT, "#I Begin capturing file %s, blocks %u, %ukB", buf, 0x18u);
    v3 = *(_DWORD *)(a1 + 48);
  }
  v8 = *(_DWORD *)(a1 + 96);
  v7 = *(_DWORD *)(a1 + 100);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_44;
  aBlock[3] = &unk_1E66DB178;
  v9 = *(NSObject **)(a1 + 80);
  aBlock[5] = v2;
  group = v9;
  v10 = v3;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v9);
    v10 = *(_DWORD *)(a1 + 48);
  }
  v15 = v10;
  if (*(char *)(a1 + 79) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
  else
    __p = *(std::string *)(a1 + 56);
  v11 = *(const void **)(a1 + 88);
  aBlock[4] = *(_QWORD *)(a1 + 32);
  cf = v11;
  if (v11)
    CFRetain(v11);
  v12 = _Block_copy(aBlock);
  v18 = v12;
  radio::QMIDebugCommandDriver::captureFile_sync(v2, v7, v3, v8, &v18);
  if (v12)
    _Block_release(v12);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_1B3D48A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void radio::QMIDebugCommandDriver::captureFile_sync(uint64_t a1, int a2, int a3, int a4, void **a5)
{
  void *v5;
  NSObject *v6;
  NSObject *v7;
  CFMutableDataRef Mutable;
  uint64_t (*v9)(uint64_t);
  __int128 v10;
  const void **v11;
  const void **v12;
  const void **v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::ios_base *v22;
  uint64_t v23;
  _QWORD *v24;
  size_t v25;
  void **v26;
  uint64_t v27;
  char *v28;
  int i;
  char *v30;
  char *v31;
  const void **v32;
  _DWORD *v33;
  _BYTE *v34;
  _BYTE *v35;
  _DWORD *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  void *v53;
  NSObject *v54;
  CFMutableDataRef v55;
  _BYTE *v56;
  uint64_t v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  CFTypeRef v62;
  CFMutableDataRef v63;
  CFTypeID v64;
  const void *v65;
  NSObject *v66;
  _QWORD block[5];
  CFTypeRef v72;
  _QWORD v73[6];
  dispatch_group_t group;
  CFTypeRef cf;
  int v76;
  int v77;
  int v78;
  CFTypeRef v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  void *v83;
  _QWORD v84[2];
  uint64_t (*v85)(uint64_t, _DWORD *);
  void *v86;
  int v87;
  _QWORD v88[2];
  uint64_t (*v89)(uint64_t, char *);
  void *v90;
  int v91;
  __int128 v92;
  __int128 v93;
  void *__dst[2];
  unint64_t v95;
  CFTypeRef v96;
  uint64_t aBlock;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _OWORD v104[10];
  CFMutableDataRef v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  void (*v110)(uint64_t);
  const void *v111;

  v106 = 0;
  v107 = &v106;
  v108 = 0x3002000000;
  v109 = __Block_byref_object_copy__50;
  v110 = __Block_byref_object_dispose__51;
  v111 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v5 = *a5;
  if (*a5)
    v5 = _Block_copy(v5);
  v111 = v5;
  v6 = dispatch_group_create();
  v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
  }
  v105 = (CFMutableDataRef)0xAAAAAAAAAAAAAAAALL;
  v66 = v7;
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (a4 * a3));
  v105 = Mutable;
  v9 = ctu::SharedRef<__CFData,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData>::get;
  if (!Mutable)
    v9 = 0;
  if (!v9)
  {
    *(_QWORD *)&v16 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v104[0] = v16;
    v104[9] = v16;
    v104[8] = v16;
    v104[7] = v16;
    v104[6] = v16;
    v104[5] = v16;
    v104[4] = v16;
    v104[3] = v16;
    v104[2] = v16;
    v104[1] = v16;
    v103 = v16;
    v102 = v16;
    v101 = v16;
    v100 = v16;
    v99 = v16;
    v98 = v16;
    v17 = MEMORY[0x1E0DE4FE0];
    v18 = MEMORY[0x1E0DE4FE0] + 64;
    v19 = (uint64_t *)MEMORY[0x1E0DE4F60];
    v20 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v21 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *((_QWORD *)&v104[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
    aBlock = v20;
    *(uint64_t *)((char *)&aBlock + *(_QWORD *)(v20 - 24)) = v21;
    v22 = (std::ios_base *)((char *)&aBlock + *(_QWORD *)(aBlock - 24));
    std::ios_base::init(v22, &v98);
    v22[1].__vftable = 0;
    v22[1].__fmtflags_ = -1;
    aBlock = v17 + 24;
    *((_QWORD *)&v104[0] + 1) = v18;
    std::streambuf::basic_streambuf();
    v23 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v98 = MEMORY[0x1E0DE4FB8] + 16;
    v102 = 0u;
    v103 = 0u;
    LODWORD(v104[0]) = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&aBlock, (uint64_t)"Memory allocation for file", 26);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" failed", 7);
    v96 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    if ((v104[0] & 0x10) != 0)
    {
      v57 = *((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1) < (unint64_t)v101)
      {
        *((_QWORD *)&v103 + 1) = v101;
        v57 = v101;
      }
      v58 = (const void *)*((_QWORD *)&v100 + 1);
      v25 = v57 - *((_QWORD *)&v100 + 1);
      if ((unint64_t)(v57 - *((_QWORD *)&v100 + 1)) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_118;
    }
    else
    {
      if ((v104[0] & 8) == 0)
      {
        v25 = 0;
        HIBYTE(v95) = 0;
        v26 = __dst;
        goto LABEL_91;
      }
      v58 = (const void *)v99;
      v25 = v100 - v99;
      if ((_QWORD)v100 - (_QWORD)v99 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_118:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v25 >= 0x17)
    {
      v59 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v59 = v25 | 7;
      v60 = v59 + 1;
      v26 = (void **)operator new(v59 + 1);
      __dst[1] = (void *)v25;
      v95 = v60 | 0x8000000000000000;
      __dst[0] = v26;
    }
    else
    {
      HIBYTE(v95) = v25;
      v26 = __dst;
      if (!v25)
      {
LABEL_91:
        *((_BYTE *)v26 + v25) = 0;
        CreateError();
        if (SHIBYTE(v95) < 0)
        {
          operator delete(__dst[0]);
          v61 = v107[5];
          v62 = v96;
          v79 = v96;
          if (!v96)
          {
LABEL_96:
            v63 = v105;
            if (v105 && (v64 = CFGetTypeID(v105), v64 == CFDataGetTypeID()))
            {
              *(_QWORD *)&v92 = v63;
              CFRetain(v63);
            }
            else
            {
              *(_QWORD *)&v92 = 0;
            }
            (*(void (**)(uint64_t, CFTypeRef *, __int128 *))(v61 + 16))(v61, &v79, &v92);
            if ((_QWORD)v92)
              CFRelease((CFTypeRef)v92);
            if (v79)
              CFRelease(v79);
            v65 = (const void *)v107[5];
            v107[5] = 0;
            if (v65)
              _Block_release(v65);
            if (v96)
              CFRelease(v96);
            aBlock = *v19;
            *(uint64_t *)((char *)&aBlock + *(_QWORD *)(aBlock - 24)) = v19[3];
            *(_QWORD *)&v98 = v23 + 16;
            if (SBYTE7(v103) < 0)
              operator delete((void *)v102);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1B5E2F6FC]((char *)v104 + 8);
            v55 = v105;
            if (!v105)
              goto LABEL_112;
LABEL_111:
            CFRelease(v55);
            goto LABEL_112;
          }
        }
        else
        {
          v61 = v107[5];
          v62 = v96;
          v79 = v96;
          if (!v96)
            goto LABEL_96;
        }
        CFRetain(v62);
        goto LABEL_96;
      }
    }
    memmove(v26, v58, v25);
    goto LABEL_91;
  }
  CFDataSetLength(Mutable, (a4 * a3));
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v92 = v10;
  v93 = v10;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v92);
  v11 = (const void **)*((_QWORD *)&v92 + 1);
  v12 = (const void **)v93;
  v13 = (const void **)*((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1) != (_QWORD)v93)
  {
    v13 = (const void **)*((_QWORD *)&v92 + 1);
    while (*((_BYTE *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v93)
        goto LABEL_19;
    }
  }
  if (v13 == (const void **)v93)
  {
LABEL_19:
    v15 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::CommandCode>(&v92);
    v11 = (const void **)*((_QWORD *)&v92 + 1);
    v12 = (const void **)v93;
  }
  else
  {
    if (!v14)
      goto LABEL_122;
    v15 = v14 + 12;
  }
  *(_DWORD *)v15 = 34;
  v27 = MEMORY[0x1E0C809B0];
  v88[0] = MEMORY[0x1E0C809B0];
  v88[1] = 0x40000000;
  v89 = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_2;
  v90 = &__block_descriptor_tmp_56_0;
  v91 = a2;
  if (v11 == v12)
    goto LABEL_23;
  while (*((_BYTE *)*v11 + 8) != 16)
  {
    if (++v11 == v12)
      goto LABEL_23;
  }
  if (v11 == v12)
  {
LABEL_23:
    v7 = v66;
    v28 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::RegionIndex>(&v92);
    v89((uint64_t)v88, v28);
    goto LABEL_24;
  }
  if (!v56)
LABEL_122:
    __cxa_bad_cast();
  v7 = v66;
  ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_2((uint64_t)v88, v56 + 9);
LABEL_24:
  if (a3)
  {
    for (i = 0; i != a3; ++i)
    {
      v84[0] = v27;
      v84[1] = 0x40000000;
      v85 = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_3;
      v86 = &__block_descriptor_tmp_58_0;
      v87 = i;
      v31 = (char *)*((_QWORD *)&v92 + 1);
      v30 = (char *)v93;
      v32 = (const void **)*((_QWORD *)&v92 + 1);
      if (*((_QWORD *)&v92 + 1) != (_QWORD)v93)
      {
        v32 = (const void **)*((_QWORD *)&v92 + 1);
        while (*((_BYTE *)*v32 + 8) != 17)
        {
          if (++v32 == (const void **)v93)
            goto LABEL_35;
        }
      }
      if (v32 != (const void **)v93)
      {
        if (!v33)
          __cxa_bad_cast();
        ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_3((uint64_t)v84, v33 + 3);
        goto LABEL_58;
      }
LABEL_35:
      v34 = operator new(0x10uLL);
      v35 = v34;
      v34[8] = 17;
      *(_QWORD *)v34 = off_1E66DB4D0;
      *((_DWORD *)v34 + 3) = 0;
      v36 = v34 + 12;
      if ((unint64_t)v30 >= *((_QWORD *)&v93 + 1))
      {
        v38 = v30 - v31;
        v39 = (v30 - v31) >> 3;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v41 = *((_QWORD *)&v93 + 1) - (_QWORD)v31;
        if ((uint64_t)(*((_QWORD *)&v93 + 1) - (_QWORD)v31) >> 2 > v40)
          v40 = v41 >> 2;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
          v42 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          if (v42 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v43 = operator new(8 * v42);
          v44 = &v43[8 * v39];
          *v44 = v35;
          v37 = (uint64_t)(v44 + 1);
          if (v31 != v30)
          {
LABEL_46:
            if ((unint64_t)(v38 - 8) < 0x58)
              goto LABEL_125;
            if ((unint64_t)(v31 - v43) < 0x20)
              goto LABEL_125;
            v45 = ((unint64_t)(v38 - 8) >> 3) + 1;
            v46 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
            v47 = &v30[-v46];
            v44 = (_QWORD *)((char *)v44 - v46);
            v48 = &v43[8 * v39 - 16];
            v49 = v30 - 16;
            v50 = v45 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v51 = *(_OWORD *)v49;
              *(v48 - 1) = *((_OWORD *)v49 - 1);
              *v48 = v51;
              v48 -= 2;
              v49 -= 32;
              v50 -= 4;
            }
            while (v50);
            v30 = v47;
            if (v45 != (v45 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_125:
              do
              {
                v52 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *--v44 = v52;
              }
              while (v30 != v31);
            }
            v31 = (char *)*((_QWORD *)&v92 + 1);
            *((_QWORD *)&v92 + 1) = v44;
            *(_QWORD *)&v93 = v37;
            *((_QWORD *)&v93 + 1) = &v43[8 * v42];
            if (!v31)
              goto LABEL_57;
LABEL_56:
            operator delete(v31);
            goto LABEL_57;
          }
        }
        else
        {
          v43 = 0;
          v44 = (_QWORD *)(8 * v39);
          *(_QWORD *)(8 * v39) = v35;
          v37 = 8 * v39 + 8;
          if (v31 != v30)
            goto LABEL_46;
        }
        *((_QWORD *)&v92 + 1) = v44;
        *(_QWORD *)&v93 = v37;
        *((_QWORD *)&v93 + 1) = &v43[8 * v42];
        if (v31)
          goto LABEL_56;
      }
      else
      {
        *(_QWORD *)v30 = v34;
        v37 = (uint64_t)(v30 + 8);
      }
LABEL_57:
      *(_QWORD *)&v93 = v37;
      v7 = v66;
      v85((uint64_t)v84, v36);
LABEL_58:
      v79 = (CFTypeRef)(a1 + 176);
      v80 = QMIServiceMsg::create();
      v81 = 25000;
      v82 = 0;
      v83 = 0;
      v27 = MEMORY[0x1E0C809B0];
      v73[0] = MEMORY[0x1E0C809B0];
      v73[1] = 1174405120;
      v73[2] = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_4;
      v73[3] = &unk_1E66DB290;
      v73[5] = a1;
      group = v7;
      if (v7)
      {
        dispatch_retain(v7);
        if (group)
          dispatch_group_enter(group);
      }
      v76 = a2;
      v77 = i;
      v78 = a4;
      v73[4] = &v106;
      cf = v105;
      if (v105)
        CFRetain(v105);
      aBlock = v27;
      *(_QWORD *)&v98 = 0x40000000;
      *((_QWORD *)&v98 + 1) = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPCLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      *(_QWORD *)&v99 = &unk_1E66DB3E8;
      *((_QWORD *)&v99 + 1) = v73;
      v53 = _Block_copy(&aBlock);
      v83 = v53;
      if (v80)
      {
        qmi::Client::send();
        v53 = v83;
      }
      if (v53)
        _Block_release(v53);
      if (cf)
        CFRelease(cf);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
    }
  }
  v54 = *(NSObject **)(a1 + 88);
  block[0] = v27;
  block[1] = 1174405120;
  block[2] = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_63;
  block[3] = &unk_1E66DB2C8;
  block[4] = &v106;
  v72 = v105;
  if (v105)
    CFRetain(v105);
  dispatch_group_notify(v7, v54, block);
  if (v72)
    CFRelease(v72);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v92);
  v55 = v105;
  if (v105)
    goto LABEL_111;
LABEL_112:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
    dispatch_release(v7);
  }
  _Block_object_dispose(&v106, 8);
  if (v111)
    _Block_release(v111);
}

void sub_1B3D4940C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_group_t group, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_group_t object,uint64_t a29,uint64_t a30,uint64_t a31,const void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,const void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,const void *a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;
  const void *v62;

  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a47);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a32);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a57);
  std::ostringstream::~ostringstream((uint64_t)&a58);
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)(v60 - 168));
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
    dispatch_release(group);
  }
  _Block_object_dispose((const void *)(v60 - 160), 8);
  v62 = *(const void **)(v60 - 120);
  if (v62)
    _Block_release(v62);
  _Unwind_Resume(a1);
}

void ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_44(uint64_t a1, std::string::size_type *a2, const void **a3)
{
  uint64_t v4;
  std::string::size_type v5;
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  const void *v12;
  _QWORD *v14;
  const void *v15;
  _QWORD *v16;
  CFTypeRef cf;
  std::string v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *a2;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v6 = 0;
  v7 = *(NSObject **)(v4 + 40);
  if (v6)
  {
    if (!os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
      if (!v9)
        return;
      goto LABEL_6;
    }
    v16 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v16 = (_QWORD *)*v16;
    LODWORD(v18.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v18.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v5;
    _os_log_error_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_ERROR, "Failed capturing %s, err: %@", (uint8_t *)&v18, 0x16u);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (v9)
    {
LABEL_6:
      v10 = (const void *)*a2;
      v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
      if (v10)
        CFRetain(v10);
      cf = 0;
      (*(void (**)(uint64_t, std::string *, CFTypeRef *))(v9 + 16))(v9, &v18, &cf);
      if (cf)
        CFRelease(cf);
      if (v18.__r_.__value_.__r.__words[0])
        CFRelease(v18.__r_.__value_.__l.__data_);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v12 = *(const void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = 0;
      if (v12)
        _Block_release(v12);
    }
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(v4 + 40), OS_LOG_TYPE_DEFAULT))
    {
      v14 = (_QWORD *)(a1 + 64);
      if (*(char *)(a1 + 87) < 0)
        v14 = (_QWORD *)*v14;
      LODWORD(v18.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEFAULT, "#I Captured %s", (uint8_t *)&v18, 0xCu);
    }
    v15 = *a3;
    if (*(char *)(a1 + 87) < 0)
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
    else
      v18 = *(std::string *)(a1 + 64);
    ctu::cf::convert_copy();
    cf = v15;
    if (v15)
    {
      CFRetain(v15);
      CFRelease(v15);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1B3D497CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B3D49830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c47_ZTSN5radio21QMIDebugCommandDriver10RegionInfoE88c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  std::string *v6;
  __int128 v7;
  CFTypeRef result;

  v4 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 48);
    if (v5)
      dispatch_group_enter(v5);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v6 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  result = *(CFTypeRef *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void sub_1B3D498D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(v1 + 48);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 48);
    if (v4)
      dispatch_release(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c47_ZTSN5radio21QMIDebugCommandDriver10RegionInfoE88c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    CFRelease(v2);
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    v3 = *(NSObject **)(a1 + 48);
    if (!v3)
      return;
  }
  else
  {
    v3 = *(NSObject **)(a1 + 48);
    if (!v3)
      return;
  }
  dispatch_group_leave(v3);
  v4 = *(NSObject **)(a1 + 48);
  if (v4)
    dispatch_release(v4);
}

CFTypeRef __copy_helper_block_e8_48c47_ZTSN5radio21QMIDebugCommandDriver10RegionInfoE80c30_ZTSN8dispatch13group_sessionE88c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  NSObject *v6;
  NSObject *v7;
  CFTypeRef result;

  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
    v6 = *(NSObject **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v6;
    if (!v6)
      goto LABEL_7;
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    v6 = *(NSObject **)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v6;
    if (!v6)
      goto LABEL_7;
  }
  dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 80);
  if (v7)
    dispatch_group_enter(v7);
LABEL_7:
  result = *(CFTypeRef *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_48c47_ZTSN5radio21QMIDebugCommandDriver10RegionInfoE80c30_ZTSN8dispatch13group_sessionE88c44_ZTSN3ctu2cf11CFSharedRefI14__CFDictionaryEE(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 80);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 80);
    if (v4)
      dispatch_release(v4);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

void ___ZN5radio21QMIDebugCommandDriver12capture_syncEN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK14__CFDictionaryEEEEE_block_invoke_48(uint64_t a1)
{
  uint64_t v1;
  const void *v3;
  CFTypeID v4;
  uint64_t v5;
  const void *v6;
  CFTypeRef cf;
  CFTypeRef v8;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v1)
  {
    v8 = 0;
    v3 = *(const void **)(a1 + 40);
    if (v3 && (v4 = CFGetTypeID(*(CFTypeRef *)(a1 + 40)), v4 == CFDictionaryGetTypeID()))
    {
      cf = v3;
      CFRetain(v3);
    }
    else
    {
      cf = 0;
    }
    (*(void (**)(uint64_t, CFTypeRef *, CFTypeRef *))(v1 + 16))(v1, &v8, &cf);
    if (cf)
      CFRelease(cf);
    if (v8)
      CFRelease(v8);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(const void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;
    if (v6)
      _Block_release(v6);
  }
}

void sub_1B3D49B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B3D49B40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__51(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_4(_QWORD *a1, qmi::MessageBase *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  void **p_dst;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t (*v25)(uint64_t);
  const void *v26;
  char *TlvValue;
  int v28;
  _QWORD v30[2];
  CFMutableDataRef *(*v31)(CFMutableDataRef *, uint64_t);
  void *v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t v35;
  CFTypeRef cf;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 __p;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  CFTypeRef v55;
  void **__dst;
  size_t v57;
  unint64_t v58;

  v4 = a1[5];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v54 = v5;
  v53 = v5;
  v52 = v5;
  v51 = v5;
  v50 = v5;
  v49 = v5;
  v48 = v5;
  v47 = v5;
  v46 = v5;
  v43 = v5;
  __p = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v45 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v37 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v37 + *(_QWORD *)(v37 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v37 + *(_QWORD *)(v37 - 24));
  std::ios_base::init(v10, &v38);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v37 = v6 + 24;
  v45 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v38 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v43 = 0u;
  LODWORD(v44) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Getting Block for file ", 23);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", block ", 8);
  std::ostream::operator<<();
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if ((v44 & 0x10) != 0)
  {
    v15 = *((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1) < (unint64_t)v41)
    {
      *((_QWORD *)&v43 + 1) = v41;
      v15 = v41;
    }
    v16 = (const void *)*((_QWORD *)&v40 + 1);
    v13 = v15 - *((_QWORD *)&v40 + 1);
    if ((unint64_t)(v15 - *((_QWORD *)&v40 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_43;
  }
  else
  {
    if ((v44 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v58) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v16 = (const void *)v39;
    v13 = v40 - v39;
    if ((_QWORD)v40 - (_QWORD)v39 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_43:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    v17 = v11;
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    p_dst = (void **)operator new(v18 + 1);
    v57 = v13;
    v58 = v19 | 0x8000000000000000;
    __dst = p_dst;
    v11 = v17;
    v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
    goto LABEL_13;
  }
  HIBYTE(v58) = v13;
  p_dst = (void **)&__dst;
  if (v13)
LABEL_13:
    memmove(p_dst, v16, v13);
LABEL_14:
  *((_BYTE *)p_dst + v13) = 0;
  radio::QMIDebugCommandDriver::checkError(v4, (uint64_t)a2, (uint64_t)&__dst, &cf);
  if (SHIBYTE(v58) < 0)
  {
    operator delete(__dst);
    v20 = (void **)cf;
    v25 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v25 = 0;
    if (v25)
      goto LABEL_18;
  }
  else
  {
    v20 = (void **)cf;
    v21 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v21 = 0;
    if (v21)
    {
LABEL_18:
      v22 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
      if (v22)
      {
        v35 = 0;
        __dst = v20;
        if (v20)
          CFRetain(v20);
        v55 = 0;
        v35 = 0;
        (*(void (**)(uint64_t, void ***, CFTypeRef *))(v22 + 16))(v22, &__dst, &v55);
        if (v55)
          CFRelease(v55);
        if (__dst)
          CFRelease(__dst);
        v23 = *(_QWORD *)(a1[4] + 8);
        v24 = *(const void **)(v23 + 40);
        *(_QWORD *)(v23 + 40) = 0;
        if (v24)
          _Block_release(v24);
      }
      goto LABEL_37;
    }
  }
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 1174405120;
  v31 = ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_5;
  v32 = &__block_descriptor_tmp_61_0;
  v34 = *(_QWORD *)((char *)a1 + 68);
  v26 = (const void *)a1[7];
  v33 = v26;
  if (v26)
    CFRetain(v26);
  TlvValue = (char *)qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    __dst = 0;
    v57 = 0;
    v58 = 0;
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&__dst, TlvValue, &TlvValue[v28], v28);
    v31((CFMutableDataRef *)v30, (uint64_t)&__dst);
    if (__dst)
    {
      v57 = (size_t)__dst;
      operator delete(__dst);
    }
  }
  if (v33)
    CFRelease(v33);
LABEL_37:
  if (cf)
    CFRelease(cf);
  v37 = *v8;
  *(uint64_t *)((char *)&v37 + *(_QWORD *)(v37 - 24)) = v8[3];
  *(_QWORD *)&v38 = v11 + 16;
  if (SBYTE7(v43) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E2F6FC](&v45);
}

void sub_1B3D49FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  const void *v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  va_list va1;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, const void *);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, const void *);
  v7 = *(void **)(v5 - 112);
  if (v7)
  {
    *(_QWORD *)(v5 - 104) = v7;
    operator delete(v7);
  }
  ctu::cf::CFSharedRef<__CFData>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  std::ostringstream::~ostringstream((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1B3D4A070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  if (*(char *)(v9 - 89) < 0)
  {
    operator delete(*(void **)(v9 - 112));
    std::ostringstream::~ostringstream((uint64_t)va);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

CFTypeRef __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  CFTypeRef result;

  v4 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 48);
    if (v5)
      dispatch_group_enter(v5);
  }
  result = *(CFTypeRef *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE56c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  v3 = *(NSObject **)(a1 + 48);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
      dispatch_release(v4);
  }
}

void ___ZN5radio21QMIDebugCommandDriver16captureFile_syncEjjjN8dispatch5blockIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS5_IK8__CFDataEEEEE_block_invoke_63(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  CFTypeRef cf;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(_QWORD *)(v2 + 40);
  v3 = (uint64_t *)(v2 + 40);
  if (v4)
  {
    cf = 0;
    dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData const>)>::operator()<ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFData> const&>(v3, &cf, (CFTypeRef *)(a1 + 40));
    if (cf)
      CFRelease(cf);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(const void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;
    if (v6)
      _Block_release(v6);
  }
}

void sub_1B3D4A2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSN3ctu2cf11CFSharedRefI8__CFDataEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

uint64_t std::__split_buffer<radio::QMIDebugCommandDriver::RegionInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::shared_ptr<radio::QMIDebugCommandDriver>::shared_ptr[abi:ne180100]<radio::QMIDebugCommandDriver,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66DB320;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D4A474(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1}::operator() const(radio::QMIDebugCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D4A494(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<radio::QMIDebugCommandDriver *,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver *)#1},std::allocator<radio::QMIDebugCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::QMIDebugCommandDriver *,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver *)#1},std::allocator<radio::QMIDebugCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1}::operator() const(radio::QMIDebugCommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<radio::QMIDebugCommandDriver *,std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver *)#1},std::allocator<radio::QMIDebugCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_21QMIDebugCommandDr"
                     "iverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_21QMIDeb"
                                "ugCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_21QMIDebugCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE15make_shared_ptrINS1_21QMIDebugCommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<radio::QMIDebugCommandDriver> ctu::SharedSynchronizable<radio::DebugCommandDriver>::make_shared_ptr<radio::QMIDebugCommandDriver>(radio::QMIDebugCommandDriver*)::{lambda(radio::QMIDebugCommandDriver*)#1}::operator() const(radio::QMIDebugCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  const void *v10;
  size_t v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  BOOL v20;
  int v21;
  uint64_t *v22;
  size_t v23;
  int v24;
  const void *v25;
  size_t v26;
  size_t v27;
  uint64_t *v28;
  uint64_t **v29;
  _QWORD *v30;
  const void *v31;
  const void *v32;
  int v33;
  const void *v34;
  size_t v35;
  size_t v36;
  int v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  int v45;
  uint64_t *v46;
  size_t v47;
  size_t v48;
  int v49;
  uint64_t *v50;
  uint64_t *v51;
  std::string *v52;
  _QWORD *v53;
  const void *v54;
  const void *v55;
  int v56;
  const void *v57;
  size_t v58;
  size_t v59;
  int v60;
  uint64_t v61;

  v6 = (uint64_t **)a2;
  v7 = result;
  v8 = (uint64_t **)(result + 1);
  if (result + 1 != (uint64_t *)a2)
  {
    v9 = *((char *)a3 + 23);
    if (v9 >= 0)
      v10 = a3;
    else
      v10 = *a3;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a3 + 23);
    else
      v11 = (size_t)a3[1];
    v12 = *(char *)(a2 + 55);
    if (v12 >= 0)
      v13 = (const void *)(a2 + 32);
    else
      v13 = *(const void **)(a2 + 32);
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 55);
    else
      v14 = *(_QWORD *)(a2 + 40);
    if (v14 >= v11)
      v15 = v11;
    else
      v15 = v14;
    result = (uint64_t *)memcmp(v10, v13, v15);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
LABEL_19:
        result = (uint64_t *)memcmp(v13, v10, v15);
        if ((_DWORD)result)
        {
          if ((result & 0x80000000) == 0)
            return result;
        }
        else if (v14 >= v11)
        {
          return result;
        }
        v29 = v6 + 1;
        v39 = v6[1];
        if (v39)
        {
          do
          {
            v29 = (uint64_t **)v39;
            v39 = (uint64_t *)*v39;
            v6 = v29;
            v40 = v29;
          }
          while (v39);
        }
        else
        {
          v40 = v6;
          do
          {
            v41 = (uint64_t *)v40;
            v40 = (uint64_t **)v40[2];
          }
          while (*v40 != v41);
        }
        if (v40 == v8)
          goto LABEL_100;
        v44 = v40[4];
        v42 = (uint64_t *)(v40 + 4);
        v43 = v44;
        v45 = *((char *)v42 + 23);
        if (v45 >= 0)
          v46 = v42;
        else
          v46 = v43;
        if (v45 >= 0)
          v47 = *((unsigned __int8 *)v42 + 23);
        else
          v47 = v42[1];
        if (v47 >= v11)
          v48 = v11;
        else
          v48 = v47;
        v49 = memcmp(v10, v46, v48);
        if (v49)
        {
          if (v49 < 0)
            goto LABEL_100;
LABEL_99:
          v50 = *v8;
          v29 = v8;
          v6 = v8;
          if (!*v8)
            goto LABEL_100;
          while (1)
          {
            v6 = (uint64_t **)v50;
            v55 = (const void *)v50[4];
            v53 = v50 + 4;
            v54 = v55;
            v56 = *((char *)v53 + 23);
            if (v56 >= 0)
              v57 = v53;
            else
              v57 = v54;
            if (v56 >= 0)
              v58 = *((unsigned __int8 *)v53 + 23);
            else
              v58 = v53[1];
            if (v58 >= v11)
              v59 = v11;
            else
              v59 = v58;
            v60 = memcmp(v10, v57, v59);
            if (v60)
            {
              if (v60 < 0)
                goto LABEL_102;
LABEL_116:
              result = (uint64_t *)memcmp(v57, v10, v59);
              if ((_DWORD)result)
              {
                if ((result & 0x80000000) == 0)
                  return result;
              }
              else if (v58 >= v11)
              {
                return result;
              }
              v50 = v6[1];
              if (!v50)
                goto LABEL_69;
            }
            else
            {
              if (v11 >= v58)
                goto LABEL_116;
LABEL_102:
              v50 = *v6;
              v29 = v6;
              if (!*v6)
                goto LABEL_100;
            }
          }
        }
        if (v11 >= v47)
          goto LABEL_99;
LABEL_100:
        v51 = (uint64_t *)operator new(0x38uLL);
        v52 = (std::string *)(v51 + 4);
        if (*(char *)(a4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
        }
        else
        {
          *(_OWORD *)&v52->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
          v51[6] = *(_QWORD *)(a4 + 16);
        }
        *v51 = 0;
        v51[1] = 0;
        v51[2] = (uint64_t)v6;
        *v29 = v51;
        v61 = *(_QWORD *)*v7;
        if (v61)
        {
          *v7 = v61;
          v51 = *v29;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v51);
        ++v7[2];
        return result;
      }
    }
    else if (v11 >= v14)
    {
      goto LABEL_19;
    }
  }
  v16 = *v6;
  if ((uint64_t **)*v7 == v6)
  {
    v18 = v6;
  }
  else
  {
    if (v16)
    {
      v17 = *v6;
      do
      {
        v18 = (uint64_t **)v17;
        v17 = (uint64_t *)v17[1];
      }
      while (v17);
    }
    else
    {
      v19 = v6;
      do
      {
        v18 = (uint64_t **)v19[2];
        v20 = *v18 == (uint64_t *)v19;
        v19 = v18;
      }
      while (v20);
    }
    v21 = *((char *)v18 + 55);
    if (v21 >= 0)
      v22 = (uint64_t *)(v18 + 4);
    else
      v22 = v18[4];
    if (v21 >= 0)
      v23 = *((unsigned __int8 *)v18 + 55);
    else
      v23 = (size_t)v18[5];
    v24 = *((char *)a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *a3;
    if (v24 >= 0)
      v26 = *((unsigned __int8 *)a3 + 23);
    else
      v26 = (size_t)a3[1];
    if (v26 >= v23)
      v27 = v23;
    else
      v27 = v26;
    result = (uint64_t *)memcmp(v22, v25, v27);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_48;
    }
    else if (v23 >= v26)
    {
LABEL_48:
      v28 = *v8;
      v29 = v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_100;
      while (1)
      {
        v6 = (uint64_t **)v28;
        v32 = (const void *)v28[4];
        v30 = v28 + 4;
        v31 = v32;
        v33 = *((char *)v30 + 23);
        if (v33 >= 0)
          v34 = v30;
        else
          v34 = v31;
        if (v33 >= 0)
          v35 = *((unsigned __int8 *)v30 + 23);
        else
          v35 = v30[1];
        if (v35 >= v26)
          v36 = v26;
        else
          v36 = v35;
        v37 = memcmp(v25, v34, v36);
        if (v37)
        {
          if (v37 < 0)
            goto LABEL_50;
LABEL_64:
          result = (uint64_t *)memcmp(v34, v25, v36);
          if ((_DWORD)result)
          {
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if (v35 >= v26)
          {
            return result;
          }
          v28 = v6[1];
          if (!v28)
          {
LABEL_69:
            v29 = v6 + 1;
            goto LABEL_100;
          }
        }
        else
        {
          if (v26 >= v35)
            goto LABEL_64;
LABEL_50:
          v28 = *v6;
          v29 = v6;
          if (!*v6)
            goto LABEL_100;
        }
      }
    }
  }
  if (v16)
    v38 = v18;
  else
    v38 = v6;
  if (v16)
    v29 = v18 + 1;
  else
    v29 = v6;
  if (!*v29)
  {
    v6 = v38;
    goto LABEL_100;
  }
  return result;
}

void sub_1B3D4A918(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<radio::DebugCommandDriver>::execute_wrapped<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>(radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0,std::default_delete<radio::QMIDebugCommandDriver::enable(std::set<std::string>,unsigned long long,dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  const void *v5;
  dispatch_time_t v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  void *v17;
  NSObject *v18;
  char **v19;
  char *v20[2];

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v20[0] = 0;
  v20[1] = 0;
  v19 = v20;
  v4 = (uint64_t *)v2[1];
  if (v4 != v2 + 2)
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t *)&v19, (uint64_t)v20, (const void **)v4 + 4, (uint64_t)(v4 + 4));
      v14 = (uint64_t *)v4[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (uint64_t *)v4[2];
          v16 = *v15 == (_QWORD)v4;
          v4 = v15;
        }
        while (!v16);
      }
      v4 = v15;
    }
    while (v15 != v2 + 2);
  }
  v6 = v2[4];
  v5 = (const void *)v2[5];
  if (v5)
  {
    v7 = _Block_copy(v5);
    v8 = v2[6];
    v17 = v7;
    v18 = v8;
    if (!v8)
      goto LABEL_5;
    goto LABEL_4;
  }
  v7 = 0;
  v8 = v2[6];
  v17 = 0;
  v18 = v8;
  if (v8)
LABEL_4:
    dispatch_retain(v8);
LABEL_5:
  radio::QMIDebugCommandDriver::enable_sync(v3, (const void ***)&v19, v6, (uint64_t)&v17);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
  std::__tree<std::string>::destroy(v20[0]);
  v9 = v2[6];
  if (v9)
    dispatch_release(v9);
  v10 = (const void *)v2[5];
  if (v10)
    _Block_release(v10);
  std::__tree<std::string>::destroy((char *)v2[2]);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1B3D4AB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
  _QWORD *v13;
  uint64_t v14;
  const void *v15;
  NSObject *v16;
  NSObject *v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (v16)
    dispatch_release(v16);
  if (v15)
    _Block_release(v15);
  std::__tree<std::string>::destroy(a13);
  v18 = *(NSObject **)(v14 + 48);
  if (v18)
    dispatch_release(v18);
  v19 = *(const void **)(v14 + 40);
  if (v19)
    _Block_release(v19);
  std::__tree<std::string>::destroy(*(char **)(v14 + 16));
  operator delete((void *)v14);
  v20 = (std::__shared_weak_count *)v13[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEclIJS5_EEEvDpT__block_invoke_3(uint64_t a1)
{
  const void *v1;
  uint64_t v2;
  CFTypeRef cf;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(const void **)(a1 + 40);
  cf = v1;
  if (v1)
    CFRetain(v1);
  (*(void (**)(uint64_t, CFTypeRef *))(v2 + 16))(v2, &cf);
  if (cf)
    CFRelease(cf);
}

void sub_1B3D4AC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::CommandCode>(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v2 = operator new(0x10uLL);
  v3 = v2;
  v2[8] = 1;
  *(_QWORD *)v2 = off_1E66DB3B8;
  *((_DWORD *)v2 + 3) = 0;
  v4 = v2 + 12;
  v6 = (char *)a1[2];
  v5 = a1[3];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_QWORD *)v6 = v2;
    v8 = (uint64_t)(v6 + 8);
    goto LABEL_23;
  }
  v9 = (char *)a1[1];
  v10 = (v6 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
    v13 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = (char *)operator new(8 * v13);
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = v3;
    v8 = (uint64_t)(v15 + 8);
    v17 = (char *)(v6 - v9);
    if (v6 == v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (char *)(8 * v10);
  v16 = 0;
  *(_QWORD *)(8 * v10) = v3;
  v8 = 8 * v10 + 8;
  v17 = (char *)(v6 - v9);
  if (v6 != v9)
  {
LABEL_14:
    v18 = (unint64_t)(v17 - 8);
    if (v18 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_28;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v7 = &v6[-v20];
    v15 -= v20;
    v21 = &v14[8 * v10 - 16];
    v22 = (__int128 *)(v6 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v25 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v25;
        v15 -= 8;
      }
      while (v7 != v9);
    }
    v7 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v15;
  a1[2] = v8;
  a1[3] = v16;
  if (v7)
    operator delete(v7);
LABEL_23:
  a1[2] = v8;
  return v4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CommandCode>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CommandCode>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CommandCode>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DB3B8;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm10GetIPCLogs8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D4AF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D4AF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D4AF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::RegionIndex>(_QWORD *a1)
{
  _WORD *v2;
  _WORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *result;

  v2 = operator new(0x10uLL);
  v3 = v2;
  v2[4] = 16;
  *(_QWORD *)v2 = off_1E66DB430;
  v5 = (char *)a1[2];
  v4 = a1[3];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = v2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (char *)a1[1];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v3;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v3;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  result = (char *)v3 + 9;
  a1[2] = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RegionIndex>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RegionIndex>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::RegionIndex>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DB430;
  return result;
}

void ___ZNK3ctu20SharedSynchronizableIN5radio18DebugCommandDriverEE20execute_wrapped_syncIZNS1_21QMIDebugCommandDriver12queryIPCLogsEyN8dispatch8callbackIU13block_pointerFvNS_2cf11CFSharedRefI9__CFErrorEENS9_IK14__CFDictionaryEEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSJ__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  dispatch_time_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)v1;
  v3 = **(_QWORD **)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)v4)
  {
    v5 = _Block_copy(*(const void **)v4);
    v6 = *(NSObject **)(v4 + 8);
    v7 = v5;
    v8 = v6;
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = 0;
  v6 = *(NSObject **)(v4 + 8);
  v7 = 0;
  v8 = v6;
  if (v6)
LABEL_3:
    dispatch_retain(v6);
LABEL_4:
  radio::QMIDebugCommandDriver::queryIPCLogs_sync(v2, v3, (uint64_t)&v7);
  if (v6)
    dispatch_release(v6);
  if (v5)
    _Block_release(v5);
}

void sub_1B3D4B208(_Unwind_Exception *exception_object)
{
  const void *v1;
  NSObject *v2;

  if (v2)
    dispatch_release(v2);
  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEENS3_IK14__CFDictionaryEEEEclIJS5_S8_EEEvDpT__block_invoke_2(uint64_t a1)
{
  dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::operator()<ctu::cf::CFSharedRef<__CFError> const&,ctu::cf::CFSharedRef<__CFDictionary const> const&>((uint64_t *)(a1 + 32), (const void **)(a1 + 40), (const void **)(a1 + 48));
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BlockIndex>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BlockIndex>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BlockIndex>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DB4D0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t antenna::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  dispatch_object_t object;
  uint64_t v25;
  std::__shared_weak_count *v26;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x100uLL);
  v9 = (std::__shared_weak_count *)a1[1];
  v25 = *a1;
  v26 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a2;
  object = v12;
  if (v12)
    dispatch_retain(v12);
  v13 = *a3;
  v14 = (std::__shared_weak_count *)a3[1];
  v23[0] = v13;
  v23[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  antenna::QMICommandDriver::QMICommandDriver((uint64_t)v8, (uint64_t)&v25, &object, (uint64_t)v23);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<antenna::QMICommandDriver>::shared_ptr[abi:ne180100]<antenna::QMICommandDriver,std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver*)#1},void>(a4, (uint64_t)v8);
  ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  if (v14)
  {
    v17 = (unint64_t *)&v14->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (object)
    dispatch_release(object);
  v19 = v26;
  if (v26)
  {
    v20 = (unint64_t *)&v26->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 72))(*a4);
}

void sub_1B3D4B424(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D4B438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v3)
    dispatch_release(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t antenna::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v17;
  NSObject *object;
  std::__shared_weak_count *v19;

  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v19 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  object = *a3;
  if (*a3)
    dispatch_retain(*a3);
  v9 = *(std::__shared_weak_count **)(a4 + 8);
  v17 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  antenna::CommandDriver::CommandDriver();
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (object)
    dispatch_release(object);
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)a1 = off_1E66DB508;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  return a1;
}

void sub_1B3D4B5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::~QMICommandDriver(antenna::QMICommandDriver *this)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint8_t v14[16];

  *(_QWORD *)this = off_1E66DB508;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v14, 2u);
  }
  v3 = *((_QWORD *)this + 31);
  if (v3)
    dispatch_release(v3);
  v4 = (const void *)*((_QWORD *)this + 30);
  if (v4)
    _Block_release(v4);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 28));
  qmi::Client::~Client((antenna::QMICommandDriver *)((char *)this + 184));
  *(_QWORD *)this = off_1E66DBB70;
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 14));
  *(_QWORD *)this = off_1E66DBBD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v11 = *((_QWORD *)this + 12);
  if (v11)
    dispatch_release(v11);
  v12 = *((_QWORD *)this + 11);
  if (v12)
    dispatch_release(v12);
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

{
  void *v1;

  antenna::QMICommandDriver::~QMICommandDriver(this);
  operator delete(v1);
}

uint64_t dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void antenna::QMICommandDriver::init(antenna::QMICommandDriver *this)
{
  std::__shared_weak_count *v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (uint64_t *)((char *)this + 72);
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN7antenna16QMICommandDriver4initEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_13_4;
  v13[4] = this;
  v13[5] = v5;
  v14 = v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped(v4, (uint64_t)v13);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  const char *Name;
  size_t v4;
  void *v5;
  void **v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  char *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t **v36;
  uint64_t **v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t **v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t **v58;
  uint64_t *v59;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t **v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t **v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t *v73;
  int v74;
  _DWORD *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t *v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t *v87;
  int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t **v92;
  uint64_t *v93;
  int v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t **v99;
  int v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  qmi::Client *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  std::__shared_weak_count *v140;
  std::__shared_weak_count *v141;
  std::__shared_weak_count *v142;
  std::__shared_weak_count *v143;
  void *v144[2];
  char v145;
  dispatch_object_t v146;
  void *__dst[2];
  unint64_t v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  __int128 v151;
  unint64_t v152;
  unint64_t v153;

  v2 = *(_QWORD *)(a1 + 32);
  v152 = 0xAAAAAAAAAAAAAAAALL;
  v153 = 0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v2 + 128));
  Name = (const char *)antenna::CommandDriver::getName((antenna::CommandDriver *)v2);
  v4 = strlen(Name);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v15 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v15 = v4 | 7;
    v16 = v15 + 1;
    v6 = (void **)operator new(v15 + 1);
    __dst[1] = v5;
    v148 = v16 | 0x8000000000000000;
    __dst[0] = v6;
  }
  else
  {
    HIBYTE(v148) = v4;
    v6 = __dst;
    if (!v4)
    {
      LOBYTE(__dst[0]) = 0;
      v7 = *(NSObject **)(v2 + 88);
      v146 = v7;
      if (!v7)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  memmove(v6, Name, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v7 = *(NSObject **)(v2 + 88);
  v146 = v7;
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  v145 = 7;
  strcpy((char *)v144, "antenna");
  v143 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 48);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = v9;
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
      v143 = v9;
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v143 = 0;
    }
  }
  v142 = (std::__shared_weak_count *)v153;
  if (v153)
  {
    v17 = (unint64_t *)(v153 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  qmi::Client::createWithQueueLocal();
  v19 = v151;
  v151 = 0uLL;
  v20 = *(std::__shared_weak_count **)(v2 + 208);
  *(_OWORD *)(v2 + 200) = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  qmi::Client::~Client((qmi::Client *)&v149);
  if (v142)
  {
    v23 = (unint64_t *)&v142->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
      std::__shared_weak_count::__release_weak(v142);
    }
  }
  if (v143)
    std::__shared_weak_count::__release_weak(v143);
  if (v145 < 0)
    operator delete(v144[0]);
  if (v146)
    dispatch_release(v146);
  if (SHIBYTE(v148) < 0)
  {
    operator delete(__dst[0]);
    v26 = (uint64_t **)(v2 + 112);
    v25 = *(uint64_t **)(v2 + 112);
    v27 = "v3abm11CommandCodeEEE";
    v28 = (uint64_t **)(v2 + 112);
    v29 = (uint64_t *)(v2 + 112);
    if (!v25)
      goto LABEL_49;
  }
  else
  {
    v26 = (uint64_t **)(v2 + 112);
    v25 = *(uint64_t **)(v2 + 112);
    v27 = "N3qmi18MutableMessageBase10TlvWrapperIN3bsp3tlv3abm11CommandCodeEEE" + 46;
    v28 = (uint64_t **)(v2 + 112);
    v29 = (uint64_t *)(v2 + 112);
    if (!v25)
      goto LABEL_49;
  }
  v30 = v25;
  do
  {
    while (1)
    {
      v29 = v30;
      v31 = *((_DWORD *)v30 + 7);
      if (v31 < 2)
        break;
      v30 = (uint64_t *)*v29;
      v28 = (uint64_t **)v29;
      if (!*v29)
        goto LABEL_49;
    }
    if (v31)
    {
      *((_DWORD *)v29 + 8) = 1;
      v35 = "N3qmi18MutableMessageBase10TlvWrapperIN3bsp3tlv3abm11CommandCodeEEE" + 46;
      goto LABEL_55;
    }
    v30 = (uint64_t *)v29[1];
  }
  while (v30);
  v28 = (uint64_t **)(v29 + 1);
LABEL_49:
  v32 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v32 + 28) = *((_QWORD *)v27 + 20);
  *v32 = 0;
  v32[1] = 0;
  v32[2] = (uint64_t)v29;
  *v28 = v32;
  v33 = **(_QWORD **)(v2 + 104);
  v34 = v32;
  if (v33)
  {
    *(_QWORD *)(v2 + 104) = v33;
    v34 = *v28;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v34);
  v25 = *(uint64_t **)(v2 + 112);
  ++*(_QWORD *)(v2 + 120);
  *((_DWORD *)v32 + 8) = 1;
  v35 = "v3abm11CommandCodeEEE";
  v36 = v26;
  v37 = v26;
  if (v25)
  {
    while (1)
    {
LABEL_55:
      while (1)
      {
        v37 = (uint64_t **)v25;
        v38 = *((_DWORD *)v25 + 7);
        if (v38 < 3)
          break;
        v25 = *v37;
        v36 = v37;
        if (!*v37)
          goto LABEL_59;
      }
      if (v38 == 2)
        break;
      v25 = v37[1];
      if (!v25)
      {
        v36 = v37 + 1;
        goto LABEL_59;
      }
    }
    v39 = (uint64_t *)v37;
  }
  else
  {
LABEL_59:
    v39 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v39 + 28) = *((_QWORD *)v35 + 21);
    *v39 = 0;
    v39[1] = 0;
    v39[2] = (uint64_t)v37;
    *v36 = v39;
    v40 = **(_QWORD **)(v2 + 104);
    v41 = v39;
    if (v40)
    {
      *(_QWORD *)(v2 + 104) = v40;
      v41 = *v36;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v41);
    ++*(_QWORD *)(v2 + 120);
  }
  *((_DWORD *)v39 + 8) = 2;
  v42 = *v26;
  v43 = v26;
  v44 = v26;
  if (*v26)
  {
    v45 = *v26;
    while (1)
    {
      while (1)
      {
        v44 = (uint64_t **)v45;
        v46 = *((_DWORD *)v45 + 7);
        if (v46 < 5)
          break;
        v45 = *v44;
        v43 = v44;
        if (!*v44)
          goto LABEL_70;
      }
      if (v46 == 4)
        break;
      v45 = v44[1];
      if (!v45)
      {
        v43 = v44 + 1;
        goto LABEL_70;
      }
    }
    *((_DWORD *)v44 + 8) = 4;
    v50 = v26;
    v51 = v26;
    if (v42)
      goto LABEL_77;
LABEL_81:
    v53 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v53 + 28) = 32;
    *v53 = 0;
    v53[1] = 0;
    v53[2] = (uint64_t)v51;
    *v50 = v53;
    v54 = **(_QWORD **)(v2 + 104);
    v55 = v53;
    if (v54)
    {
      *(_QWORD *)(v2 + 104) = v54;
      v55 = *v50;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v55);
    ++*(_QWORD *)(v2 + 120);
    *((_DWORD *)v53 + 8) = 8;
    v56 = *v26;
    v57 = v26;
    v58 = v26;
    if (!*v26)
      goto LABEL_92;
LABEL_86:
    v59 = v56;
    while (1)
    {
      while (1)
      {
        v58 = (uint64_t **)v59;
        v60 = *((_DWORD *)v59 + 7);
        if (v60 < 0x11)
          break;
        v59 = *v58;
        v57 = v58;
        if (!*v58)
          goto LABEL_92;
      }
      if (v60 == 16)
        break;
      v59 = v58[1];
      if (!v59)
      {
        v57 = v58 + 1;
        goto LABEL_92;
      }
    }
    *((_DWORD *)v58 + 8) = 32;
    v64 = v26;
    if (v56)
      goto LABEL_99;
    goto LABEL_103;
  }
LABEL_70:
  v47 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v47 + 28) = 4;
  *v47 = 0;
  v47[1] = 0;
  v47[2] = (uint64_t)v44;
  *v43 = v47;
  v48 = **(_QWORD **)(v2 + 104);
  v49 = v47;
  if (v48)
  {
    *(_QWORD *)(v2 + 104) = v48;
    v49 = *v43;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v49);
  v42 = *(uint64_t **)(v2 + 112);
  ++*(_QWORD *)(v2 + 120);
  *((_DWORD *)v47 + 8) = 4;
  v50 = v26;
  v51 = v26;
  if (!v42)
    goto LABEL_81;
  while (1)
  {
LABEL_77:
    while (1)
    {
      v51 = (uint64_t **)v42;
      v52 = *((_DWORD *)v42 + 7);
      if (v52 < 0x21)
        break;
      v42 = *v51;
      v50 = v51;
      if (!*v51)
        goto LABEL_81;
    }
    if (v52 == 32)
      break;
    v42 = v51[1];
    if (!v42)
    {
      v50 = v51 + 1;
      goto LABEL_81;
    }
  }
  *((_DWORD *)v51 + 8) = 8;
  v56 = *v26;
  v57 = v26;
  v58 = v26;
  if (*v26)
    goto LABEL_86;
LABEL_92:
  v61 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v61 + 28) = 16;
  *v61 = 0;
  v61[1] = 0;
  v61[2] = (uint64_t)v58;
  *v57 = v61;
  v62 = **(_QWORD **)(v2 + 104);
  v63 = v61;
  if (v62)
  {
    *(_QWORD *)(v2 + 104) = v62;
    v63 = *v57;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v63);
  v56 = *(uint64_t **)(v2 + 112);
  ++*(_QWORD *)(v2 + 120);
  *((_DWORD *)v61 + 8) = 32;
  v64 = v26;
  if (!v56)
  {
LABEL_103:
    v66 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v66 + 28) = 8;
    *v66 = 0;
    v66[1] = 0;
    v66[2] = (uint64_t)v64;
    *v26 = v66;
    v67 = **(_QWORD **)(v2 + 104);
    v68 = v66;
    if (v67)
    {
      *(_QWORD *)(v2 + 104) = v67;
      v68 = *v26;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 112), v68);
    ++*(_QWORD *)(v2 + 120);
    goto LABEL_107;
  }
  while (1)
  {
LABEL_99:
    while (1)
    {
      v64 = (uint64_t **)v56;
      v65 = *((_DWORD *)v56 + 7);
      if (v65 < 9)
        break;
      v56 = *v64;
      v26 = v64;
      if (!*v64)
        goto LABEL_103;
    }
    if (v65 == 8)
      break;
    v56 = v64[1];
    if (!v56)
    {
      v26 = v64 + 1;
      goto LABEL_103;
    }
  }
  v66 = (uint64_t *)v64;
LABEL_107:
  *((_DWORD *)v66 + 8) = 64;
  v70 = (uint64_t **)(v2 + 224);
  v69 = *(uint64_t **)(v2 + 224);
  v71 = (uint64_t **)(v2 + 224);
  v72 = (uint64_t *)(v2 + 224);
  if (v69)
  {
    v73 = *(uint64_t **)(v2 + 224);
    do
    {
      while (1)
      {
        v72 = v73;
        v74 = *((_DWORD *)v73 + 7);
        if (v74 < 1)
          break;
        v73 = (uint64_t *)*v72;
        v71 = (uint64_t **)v72;
        if (!*v72)
          goto LABEL_114;
      }
      if ((v74 & 0x80000000) == 0)
      {
        *((_DWORD *)v72 + 8) = 3;
        goto LABEL_120;
      }
      v73 = (uint64_t *)v72[1];
    }
    while (v73);
    v71 = (uint64_t **)(v72 + 1);
  }
LABEL_114:
  v75 = operator new(0x28uLL);
  v75[7] = 0;
  v75[8] = 0;
  *(_QWORD *)v75 = 0;
  *((_QWORD *)v75 + 1) = 0;
  *((_QWORD *)v75 + 2) = v72;
  *v71 = (uint64_t *)v75;
  v76 = **(_QWORD **)(v2 + 216);
  v77 = (uint64_t *)v75;
  if (v76)
  {
    *(_QWORD *)(v2 + 216) = v76;
    v77 = *v71;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v77);
  v69 = *(uint64_t **)(v2 + 224);
  ++*(_QWORD *)(v2 + 232);
  v75[8] = 3;
  v78 = (uint64_t **)(v2 + 224);
  v79 = (uint64_t *)(v2 + 224);
  if (!v69)
  {
LABEL_124:
    v81 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v81 + 28) = *((_QWORD *)v27 + 20);
    *v81 = 0;
    v81[1] = 0;
    v81[2] = (uint64_t)v79;
    *v78 = v81;
    v82 = **(_QWORD **)(v2 + 216);
    v83 = v81;
    if (v82)
    {
      *(_QWORD *)(v2 + 216) = v82;
      v83 = *v78;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v83);
    ++*(_QWORD *)(v2 + 232);
    *((_DWORD *)v81 + 8) = 0;
    v84 = *v70;
    v85 = (uint64_t **)(v2 + 224);
    v86 = (uint64_t *)(v2 + 224);
    if (!*v70)
      goto LABEL_135;
LABEL_129:
    v87 = v84;
    while (1)
    {
      while (1)
      {
        v86 = v87;
        v88 = *((_DWORD *)v87 + 7);
        if (v88 < 3)
          break;
        v87 = (uint64_t *)*v86;
        v85 = (uint64_t **)v86;
        if (!*v86)
          goto LABEL_135;
      }
      if (v88 == 2)
        break;
      v87 = (uint64_t *)v86[1];
      if (!v87)
      {
        v85 = (uint64_t **)(v86 + 1);
        goto LABEL_135;
      }
    }
    *((_DWORD *)v86 + 8) = 1;
    v92 = (uint64_t **)(v2 + 224);
    v93 = (uint64_t *)(v2 + 224);
    if (v84)
      goto LABEL_142;
    goto LABEL_146;
  }
  while (1)
  {
LABEL_120:
    while (1)
    {
      v79 = v69;
      v80 = *((_DWORD *)v69 + 7);
      if (v80 < 2)
        break;
      v69 = (uint64_t *)*v79;
      v78 = (uint64_t **)v79;
      if (!*v79)
        goto LABEL_124;
    }
    if (v80 == 1)
      break;
    v69 = (uint64_t *)v79[1];
    if (!v69)
    {
      v78 = (uint64_t **)(v79 + 1);
      goto LABEL_124;
    }
  }
  *((_DWORD *)v79 + 8) = 0;
  v84 = *v70;
  v85 = (uint64_t **)(v2 + 224);
  v86 = (uint64_t *)(v2 + 224);
  if (*v70)
    goto LABEL_129;
LABEL_135:
  v89 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v89 + 28) = *((_QWORD *)v35 + 21);
  *v89 = 0;
  v89[1] = 0;
  v89[2] = (uint64_t)v86;
  *v85 = v89;
  v90 = **(_QWORD **)(v2 + 216);
  v91 = v89;
  if (v90)
  {
    *(_QWORD *)(v2 + 216) = v90;
    v91 = *v85;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v91);
  v84 = *(uint64_t **)(v2 + 224);
  ++*(_QWORD *)(v2 + 232);
  *((_DWORD *)v89 + 8) = 1;
  v92 = (uint64_t **)(v2 + 224);
  v93 = (uint64_t *)(v2 + 224);
  if (v84)
  {
    while (1)
    {
LABEL_142:
      while (1)
      {
        v93 = v84;
        v94 = *((_DWORD *)v84 + 7);
        if (v94 < 4)
          break;
        v84 = (uint64_t *)*v93;
        v92 = (uint64_t **)v93;
        if (!*v93)
          goto LABEL_146;
      }
      if (v94 == 3)
        break;
      v84 = (uint64_t *)v93[1];
      if (!v84)
      {
        v92 = (uint64_t **)(v93 + 1);
        goto LABEL_146;
      }
    }
    *((_DWORD *)v93 + 8) = 2;
    v98 = *v70;
    v99 = (uint64_t **)(v2 + 224);
    if (*v70)
      goto LABEL_153;
    goto LABEL_157;
  }
LABEL_146:
  v95 = (uint64_t *)operator new(0x28uLL);
  *(uint64_t *)((char *)v95 + 28) = 3;
  *v95 = 0;
  v95[1] = 0;
  v95[2] = (uint64_t)v93;
  *v92 = v95;
  v96 = **(_QWORD **)(v2 + 216);
  v97 = v95;
  if (v96)
  {
    *(_QWORD *)(v2 + 216) = v96;
    v97 = *v92;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v97);
  ++*(_QWORD *)(v2 + 232);
  *((_DWORD *)v95 + 8) = 2;
  v98 = *v70;
  v99 = (uint64_t **)(v2 + 224);
  if (!*v70)
  {
LABEL_157:
    v101 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v101 + 28) = 4;
    *v101 = 0;
    v101[1] = 0;
    v101[2] = (uint64_t)v99;
    *v70 = v101;
    v102 = **(_QWORD **)(v2 + 216);
    v103 = v101;
    if (v102)
    {
      *(_QWORD *)(v2 + 216) = v102;
      v103 = *v70;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 224), v103);
    ++*(_QWORD *)(v2 + 232);
    goto LABEL_161;
  }
  while (1)
  {
LABEL_153:
    while (1)
    {
      v99 = (uint64_t **)v98;
      v100 = *((_DWORD *)v98 + 7);
      if (v100 < 5)
        break;
      v98 = *v99;
      v70 = v99;
      if (!*v99)
        goto LABEL_157;
    }
    if (v100 == 4)
      break;
    v98 = v99[1];
    if (!v98)
    {
      v70 = v99 + 1;
      goto LABEL_157;
    }
  }
  v101 = (uint64_t *)v99;
LABEL_161:
  *((_DWORD *)v101 + 8) = 255;
  v104 = (qmi::Client *)(v2 + 184);
  v105 = *(std::__shared_weak_count **)(a1 + 48);
  v141 = v105;
  if (v105)
  {
    v106 = (unint64_t *)&v105->__shared_weak_owners_;
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  qmi::Client::setHandler();
  v108 = *(std::__shared_weak_count **)(a1 + 48);
  v140 = v108;
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_weak_owners_;
    do
      v110 = __ldxr(v109);
    while (__stxr(v110 + 1, v109));
  }
  qmi::Client::setHandler();
  v111 = *(std::__shared_weak_count **)(a1 + 48);
  v139 = v111;
  if (v111)
  {
    v112 = (unint64_t *)&v111->__shared_weak_owners_;
    do
      v113 = __ldxr(v112);
    while (__stxr(v113 + 1, v112));
  }
  qmi::Client::setHandler();
  v114 = *(std::__shared_weak_count **)(a1 + 48);
  v138 = v114;
  if (v114)
  {
    v115 = (unint64_t *)&v114->__shared_weak_owners_;
    do
      v116 = __ldxr(v115);
    while (__stxr(v116 + 1, v115));
  }
  qmi::Client::setHandler();
  v117 = *(std::__shared_weak_count **)(a1 + 48);
  v137 = v117;
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_weak_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  qmi::Client::setHandler();
  v120 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v120 || (v121 = *(_QWORD *)(v2 + 72), (v122 = std::__shared_weak_count::lock(v120)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v123 = v122;
  v124 = (unint64_t *)&v122->__shared_weak_owners_;
  do
    v125 = __ldxr(v124);
  while (__stxr(v125 + 1, v124));
  v126 = (unint64_t *)&v122->__shared_owners_;
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v123);
    v149 = 0;
    v150 = 0;
    v128 = std::__shared_weak_count::lock(v123);
    if (v128)
      goto LABEL_184;
LABEL_212:
    v131 = v150;
    v149 = 0;
    v150 = v128;
    if (!v131)
      goto LABEL_188;
    goto LABEL_187;
  }
  v149 = 0;
  v150 = 0;
  v128 = std::__shared_weak_count::lock(v122);
  if (!v128)
    goto LABEL_212;
LABEL_184:
  v129 = (unint64_t *)&v128->__shared_weak_owners_;
  do
    v130 = __ldxr(v129);
  while (__stxr(v130 + 1, v129));
  v131 = v150;
  v149 = v121;
  v150 = v128;
  if (v131)
LABEL_187:
    std::__shared_weak_count::__release_weak(v131);
LABEL_188:
  std::__shared_weak_count::__release_weak(v123);
  if (v128)
  {
    v132 = (unint64_t *)&v128->__shared_owners_;
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  qmi::Client::setClientHandle();
  if (v150)
    std::__shared_weak_count::__release_weak(v150);
  qmi::Client::start(v104);
  if (v137)
    std::__shared_weak_count::__release_weak(v137);
  if (v138)
    std::__shared_weak_count::__release_weak(v138);
  if (v139)
    std::__shared_weak_count::__release_weak(v139);
  if (v140)
    std::__shared_weak_count::__release_weak(v140);
  if (v141)
    std::__shared_weak_count::__release_weak(v141);
  v134 = (std::__shared_weak_count *)v153;
  if (v153)
  {
    v135 = (unint64_t *)(v153 + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
}

void sub_1B3D4C818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,std::__shared_weak_count *a42)
{
  uint64_t v42;
  NSObject *v44;

  if (a42)
  {
    std::__shared_weak_count::__release_weak(a42);
    if ((*(char *)(v42 - 177) & 0x80000000) == 0)
    {
LABEL_3:
      v44 = *(NSObject **)(v42 - 240);
      if (!v44)
      {
LABEL_8:
        if (*(char *)(v42 - 145) < 0)
        {
          operator delete(*(void **)(v42 - 168));
          std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v42 - 112);
          _Unwind_Resume(a1);
        }
        std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v42 - 112);
        _Unwind_Resume(a1);
      }
LABEL_7:
      dispatch_release(v44);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v42 - 177) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v42 - 200));
  v44 = *(NSObject **)(v42 - 240);
  if (!v44)
    goto LABEL_8;
  goto LABEL_7;
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(_QWORD *)(v3 + 144);
        if (v6)
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 16))(v6, 0, 4);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1B3D4CB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_3(uint64_t a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      v3 = v2;
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_5(uint64_t a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      v3 = v2;
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      v3 = v2;
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void ___ZN7antenna16QMICommandDriver4initEv_block_invoke_10(_QWORD *a1, xpc_object_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void *__p[4];
  std::__shared_weak_count *v21;
  uint8_t buf[4];
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v21 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v9 = v6;
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v7 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Server Error!", (uint8_t *)__p, 2u);
        if (a2)
        {
LABEL_6:
          xpc_retain(a2);
          v8 = *(NSObject **)(v5 + 40);
          if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
            goto LABEL_11;
          goto LABEL_17;
        }
      }
      else if (a2)
      {
        goto LABEL_6;
      }
      a2 = xpc_null_create();
      v8 = *(NSObject **)(v5 + 40);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        goto LABEL_11;
LABEL_17:
      v12 = (char *)MEMORY[0x1B5E2FB34](a2);
      memset(__p, 170, 24);
      v13 = strlen(v12);
      if (v13 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = (void *)v13;
      if (v13 >= 0x17)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        v15 = operator new(v16 + 1);
        __p[1] = v14;
        __p[2] = (void *)(v17 | 0x8000000000000000);
        __p[0] = v15;
      }
      else
      {
        HIBYTE(__p[2]) = v13;
        v15 = __p;
        if (!v13)
          goto LABEL_25;
      }
      memcpy(v15, v12, (size_t)v14);
LABEL_25:
      *((_BYTE *)v14 + (_QWORD)v15) = 0;
      free(v12);
      v18 = __p;
      if (SHIBYTE(__p[2]) < 0)
        v18 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      v23 = v18;
      _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
LABEL_11:
      xpc_release(a2);
      v9 = v21;
      if (!v21)
        return;
      goto LABEL_12;
    }
  }
}

void sub_1B3D4CF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::QMICommandDriver::perform(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t v5;
  const void *v6;
  void *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  xpc_object_t v14;
  unint64_t *p_shared_owners;
  NSObject *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v5 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v6 = *(const void **)a3;
    if (*(_QWORD *)a3)
      goto LABEL_3;
LABEL_15:
    v7 = 0;
    v8 = *(NSObject **)(a3 + 8);
    if (!v8)
      goto LABEL_5;
    goto LABEL_4;
  }
  v5 = xpc_null_create();
  v6 = *(const void **)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_15;
LABEL_3:
  v7 = _Block_copy(v6);
  v8 = *(NSObject **)(a3 + 8);
  if (v8)
LABEL_4:
    dispatch_retain(v8);
LABEL_5:
  v9 = (std::__shared_weak_count *)a1[10];
  if (!v9 || (v10 = a1[9], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = operator new(0x20uLL);
  *v13 = v5;
  v14 = xpc_null_create();
  v13[1] = a1;
  v13[2] = v7;
  v13[3] = v8;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v16 = a1[11];
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = operator new(0x18uLL);
  *v18 = v13;
  v18[1] = v10;
  v18[2] = v12;
  dispatch_async_f(v16, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>(antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0,dispatch_queue_s::default_delete<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  xpc_release(v14);
}

void antenna::QMICommandDriver::txPowerCappingEnable_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t value;
  xpc_object_t v7;
  char v8;
  __int128 v9;
  void *v10;
  char *v11;
  char *v12;
  const void **v13;
  _BYTE *v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  const void **v34;
  char *v35;
  char *v36;
  void *v37;
  NSObject *v38;
  std::__shared_weak_count *v39;
  void *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_weak_owners;
  unint64_t v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  unint64_t v47;
  NSObject *v48;
  void *v49;
  void *aBlock;
  NSObject *object;
  char v52[32];
  _QWORD v53[5];
  _QWORD v54[2];
  uint64_t (*v55)(uint64_t, _BYTE *);
  void *v56;
  char v57;
  void *__p[2];
  __int128 v59;
  void *v60[4];
  uint64_t v61;
  int v62;
  uint64_t v63;
  void *v64;
  xpc_object_t v65[6];
  std::__shared_weak_count *v66;
  void *v67;
  dispatch_object_t v68;
  _QWORD v69[6];

  memset(v60, 170, 24);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFA68]);
  v65[0] = value;
  if (value)
    xpc_retain(value);
  else
    v65[0] = xpc_null_create();
  xpc::dyn_cast_or_default();
  xpc_release(v65[0]);
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB60]);
  v65[0] = v7;
  if (v7)
    xpc_retain(v7);
  else
    v65[0] = xpc_null_create();
  v8 = xpc::dyn_cast_or_default();
  xpc_release(v65[0]);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v9;
  v59 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v10 = (void *)MEMORY[0x1E0C809B0];
  v54[0] = MEMORY[0x1E0C809B0];
  v54[1] = 0x40000000;
  v55 = ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  v56 = &__block_descriptor_tmp_16_1;
  v57 = v8;
  v11 = (char *)__p[1];
  v12 = (char *)v59;
  v13 = (const void **)__p[1];
  if (__p[1] != (void *)v59)
  {
    v13 = (const void **)__p[1];
    while (*((_BYTE *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v59)
        goto LABEL_15;
    }
  }
  if (v13 == (const void **)v59)
  {
LABEL_15:
    v15 = operator new(0x10uLL);
    v16 = v15;
    v15[4] = 1;
    *(_QWORD *)v15 = off_1E66DBCB0;
    if ((unint64_t)v12 < *((_QWORD *)&v59 + 1))
    {
      *(_QWORD *)v12 = v15;
      v17 = (uint64_t)(v12 + 8);
LABEL_37:
      *(_QWORD *)&v59 = v17;
      v55((uint64_t)v54, (_BYTE *)v16 + 9);
      goto LABEL_38;
    }
    v18 = v12 - v11;
    v19 = (v12 - v11) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v59 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v59 + 1) - (_QWORD)v11) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v16;
      v17 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_26:
        if ((unint64_t)(v18 - 8) < 0x58)
          goto LABEL_90;
        if ((unint64_t)(v11 - v23) < 0x20)
          goto LABEL_90;
        v26 = ((unint64_t)(v18 - 8) >> 3) + 1;
        v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = &v12[-v27];
        v24 = (_QWORD *)((char *)v24 - v27);
        v29 = &v23[8 * v19 - 16];
        v30 = v12 - 16;
        v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        v12 = v28;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_90:
          do
          {
            v33 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *--v24 = v33;
          }
          while (v12 != v11);
        }
        v11 = (char *)__p[1];
        __p[1] = v24;
        *(_QWORD *)&v59 = v17;
        *((_QWORD *)&v59 + 1) = v25;
        if (!v11)
          goto LABEL_37;
        goto LABEL_36;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v16;
      v17 = 8 * v19 + 8;
      if (v11 != v12)
        goto LABEL_26;
    }
    __p[1] = v24;
    *(_QWORD *)&v59 = v17;
    *((_QWORD *)&v59 + 1) = v25;
    if (!v11)
      goto LABEL_37;
LABEL_36:
    operator delete(v11);
    goto LABEL_37;
  }
  if (!v14)
    goto LABEL_85;
  ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v54, v14 + 9);
LABEL_38:
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB70]))
    goto LABEL_48;
  v53[0] = v10;
  v53[1] = 0x40000000;
  v53[2] = ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  v53[3] = &__block_descriptor_tmp_18_6;
  v53[4] = a2;
  v34 = (const void **)__p[1];
  if (__p[1] != (void *)v59)
  {
    while (*((_BYTE *)*v34 + 8) != 16)
    {
      if (++v34 == (const void **)v59)
        goto LABEL_46;
    }
  }
  if (v34 == (const void **)v59)
  {
LABEL_46:
    v36 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::SvcType>(__p);
    goto LABEL_47;
  }
  if (!v35)
LABEL_85:
    __cxa_bad_cast();
  v36 = v35 + 9;
LABEL_47:
  ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2((uint64_t)v53, v36);
LABEL_48:
  qmi::MutableMessageBase::MutableMessageBase();
  v37 = *(void **)a3;
  if (*(_QWORD *)a3)
    v37 = _Block_copy(v37);
  v38 = *(NSObject **)(a3 + 8);
  aBlock = v37;
  object = v38;
  if (v38)
    dispatch_retain(v38);
  v39 = (std::__shared_weak_count *)a1[10];
  if (!v39 || (v40 = (void *)a1[9], (v41 = std::__shared_weak_count::lock(v39)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v42 = v41;
  p_shared_weak_owners = (unint64_t *)&v41->__shared_weak_owners_;
  do
    v44 = __ldxr(p_shared_weak_owners);
  while (__stxr(v44 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v41->__shared_owners_;
  do
    v46 = __ldaxr(p_shared_owners);
  while (__stlxr(v46 - 1, p_shared_owners));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v42);
  }
  v65[0] = v10;
  v65[1] = (xpc_object_t)1174405120;
  v65[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm18TxPwr_Limit_Enable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v65[3] = &__block_descriptor_tmp_102_0;
  v65[4] = a1;
  v65[5] = v40;
  v66 = v42;
  do
    v47 = __ldxr(p_shared_weak_owners);
  while (__stxr(v47 + 1, p_shared_weak_owners));
  if (aBlock)
  {
    v48 = object;
    v67 = _Block_copy(aBlock);
    v68 = object;
    if (!object)
      goto LABEL_65;
    goto LABEL_64;
  }
  v48 = object;
  v67 = 0;
  v68 = object;
  if (object)
LABEL_64:
    dispatch_retain(v48);
LABEL_65:
  v60[3] = a1 + 23;
  v61 = QMIServiceMsg::create();
  v62 = 25000;
  v63 = 0;
  v64 = 0;
  v69[0] = v10;
  v69[1] = 0x40000000;
  v69[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v69[3] = &unk_1E66DBD60;
  v69[4] = v65;
  v49 = _Block_copy(v69);
  v64 = v49;
  if (v61)
  {
    qmi::Client::send();
    v49 = v64;
  }
  if (v49)
    _Block_release(v49);
  if (v68)
    dispatch_release(v68);
  if (v67)
    _Block_release(v67);
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
  std::__shared_weak_count::__release_weak(v42);
  if (v48)
    dispatch_release(v48);
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v52);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  if (SHIBYTE(v60[2]) < 0)
    operator delete(v60[0]);
}

void sub_1B3D4D684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v39;

  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a36);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v37 - 160);
  v39 = *(std::__shared_weak_count **)(v37 - 168);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  std::__shared_weak_count::__release_weak(v36);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver25txPowerCappingEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _BYTE *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFB70]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D4D7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::transmitIndicationRegister_sync(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  xpc_object_t v15;
  void *v16;
  NSObject *v17;
  void *v18;
  _QWORD v19[6];
  std::__shared_weak_count *v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  uint64_t block;
  uint64_t v24;
  void *v25;
  void *v26;
  void *aBlock;
  xpc_object_t object;
  char v29;

  v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 72), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1174405120;
  v21[2] = ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke;
  v21[3] = &__block_descriptor_tmp_22_1;
  v21[4] = a1;
  v21[5] = v5;
  v22 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  block = v12;
  v24 = 0x40000000;
  v25 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm20TxPwrLimitIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v26 = &unk_1E66DBD88;
  aBlock = v21;
  qmi::Client::setIndHandler();
  v19[0] = v12;
  v19[1] = 1174405120;
  v19[2] = ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_23;
  v19[3] = &__block_descriptor_tmp_29_3;
  v19[4] = a1;
  v19[5] = v5;
  v20 = v7;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  block = v12;
  v24 = 0x40000000;
  v25 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm16TransmitStateInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v26 = &unk_1E66DBDB0;
  aBlock = v19;
  qmi::Client::setIndHandler();
  v15 = xpc_null_create();
  if (*(_QWORD *)a2)
    v16 = _Block_copy(*(const void **)a2);
  else
    v16 = 0;
  v17 = *(NSObject **)(a2 + 8);
  block = v12;
  v24 = 1174405120;
  v25 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v26 = &__block_descriptor_tmp_106;
  if (v16)
  {
    v18 = _Block_copy(v16);
    v29 = 1;
    aBlock = v18;
    object = v15;
    if (v15)
    {
LABEL_18:
      xpc_retain(v15);
      goto LABEL_21;
    }
  }
  else
  {
    v29 = 1;
    aBlock = 0;
    object = v15;
    if (v15)
      goto LABEL_18;
  }
  object = xpc_null_create();
LABEL_21:
  dispatch_async(v17, &block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v16)
    _Block_release(v16);
  xpc_release(v15);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1B3D4DA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v25;

  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    v25 = a23;
    if (!a23)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v25 = a23;
    if (!a23)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v25);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  tlv *TlvValue;
  int v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)1);
          if ((int)antenna::CommandDriver::convertModeToState() <= 1)
          {
            v10 = *(_QWORD *)(v5 + 144);
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D4DBC0(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 1, v2, v3);
  JUMPOUT(0x1B3D4DB64);
}

void sub_1B3D4DBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver31transmitIndicationRegister_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke_23(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  tlv *TlvValue;
  int v9;
  tlv *v10;
  tlv *v11;
  int v12;
  tlv *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v26;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v26 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v21 = 0;
        v22 = &v21;
        v23 = 0x2000000000;
        v24 = 0;
        v17 = 0;
        v18 = &v17;
        v19 = 0x2000000000;
        v20 = 4;
        TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v10 = TlvValue;
        if (TlvValue)
        {
          tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)1);
          *((_DWORD *)v22 + 6) = *(unsigned __int8 *)v10;
        }
        v11 = (tlv *)qmi::MessageBase::findTlvValue(a2);
        v13 = v11;
        if (v11)
        {
          tlv::throwIfNotEnoughBytes(v11, (const unsigned __int8 *)v11 + v12, (const unsigned __int8 *)1);
          *((_DWORD *)v18 + 6) = *(unsigned __int8 *)v13;
        }
        v14 = *(_QWORD *)(v5 + 144);
        if (v14)
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 16))(v14, *((unsigned int *)v22 + 6), *((unsigned int *)v18 + 6));
        _Block_object_dispose(&v17, 8);
        _Block_object_dispose(&v21, 8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1B3D4DD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Block_object_dispose(&a9, 8);
  _Block_object_dispose(&a13, 8);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::transmitIndicationEnable_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t value;
  char v7;
  xpc_object_t v8;
  size_t v9;
  void **v10;
  __int128 v11;
  char *v12;
  char *v13;
  const void **v14;
  char *v15;
  _BYTE *v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  void *v37;
  char *v38;
  char *v39;
  const void **v40;
  _BYTE *v41;
  _WORD *v42;
  _WORD *v43;
  uint64_t v44;
  xpc_object_t *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  const void **v62;
  char *v63;
  char *v64;
  void *v65;
  NSObject *v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_weak_owners;
  unint64_t v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  unint64_t v75;
  NSObject *v76;
  void *v77;
  _QWORD v78[5];
  void *v79;
  dispatch_object_t object;
  char v81[32];
  _QWORD v82[5];
  _QWORD v83[2];
  uint64_t (*v84)(uint64_t, _BYTE *);
  void *v85;
  char v86;
  __int128 v87;
  __int128 v88;
  void *v89[3];
  __int128 v90;
  __int128 v91;
  void *v92;
  xpc_object_t aBlock;
  uint64_t v94;
  void *v95;
  void *v96;
  _QWORD *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  void *v100;
  dispatch_object_t v101;
  void *v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  void *v105;
  xpc_object_t *p_aBlock;

  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB98]);
  aBlock = value;
  if (value)
    xpc_retain(value);
  else
    aBlock = xpc_null_create();
  v7 = xpc::dyn_cast_or_default();
  xpc_release(aBlock);
  memset(v89, 170, sizeof(v89));
  v8 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFBB0]);
  aBlock = v8;
  if (v8)
    xpc_retain(v8);
  else
    aBlock = xpc_null_create();
  xpc::dyn_cast_or_default();
  xpc_release(aBlock);
  if (SHIBYTE(v89[2]) >= 0)
    v9 = HIBYTE(v89[2]);
  else
    v9 = (size_t)v89[1];
  if (v9 == strlen((const char *)*MEMORY[0x1E0DDFBB8]))
  {
    v10 = SHIBYTE(v89[2]) >= 0 ? v89 : (void **)v89[0];
    if (!memcmp(v10, (const void *)*MEMORY[0x1E0DDFBB8], v9))
    {
      *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v87 = v36;
      v88 = v36;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v87);
      v37 = (void *)MEMORY[0x1E0C809B0];
      v83[0] = MEMORY[0x1E0C809B0];
      v83[1] = 0x40000000;
      v84 = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
      v85 = &__block_descriptor_tmp_31_4;
      v86 = v7;
      v38 = (char *)*((_QWORD *)&v87 + 1);
      v39 = (char *)v88;
      v40 = (const void **)*((_QWORD *)&v87 + 1);
      if (*((_QWORD *)&v87 + 1) != (_QWORD)v88)
      {
        v40 = (const void **)*((_QWORD *)&v87 + 1);
        while (*((_BYTE *)*v40 + 8) != 1)
        {
          if (++v40 == (const void **)v88)
            goto LABEL_50;
        }
      }
      if (v40 != (const void **)v88)
      {
        if (!v41)
          goto LABEL_133;
        ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v83, v41 + 9);
LABEL_84:
        if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB70]))
          goto LABEL_94;
        v82[0] = v37;
        v82[1] = 0x40000000;
        v82[2] = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
        v82[3] = &__block_descriptor_tmp_32_3;
        v82[4] = a2;
        v62 = (const void **)*((_QWORD *)&v87 + 1);
        if (*((_QWORD *)&v87 + 1) != (_QWORD)v88)
        {
          while (*((_BYTE *)*v62 + 8) != 16)
          {
            if (++v62 == (const void **)v88)
              goto LABEL_92;
          }
        }
        if (v62 == (const void **)v88)
        {
LABEL_92:
          v64 = qmi::MutableMessageBase::createTLV<bsp::tlv::abm::SvcType>(&v87);
          goto LABEL_93;
        }
        if (v63)
        {
          v64 = v63 + 9;
LABEL_93:
          ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2((uint64_t)v82, v64);
LABEL_94:
          qmi::MutableMessageBase::MutableMessageBase();
          v65 = *(void **)a3;
          if (*(_QWORD *)a3)
            v65 = _Block_copy(v65);
          v66 = *(NSObject **)(a3 + 8);
          v79 = v65;
          object = v66;
          if (v66)
            dispatch_retain(v66);
          v67 = *(std::__shared_weak_count **)(a1 + 80);
          if (!v67 || (v68 = *(_QWORD *)(a1 + 72), (v69 = std::__shared_weak_count::lock(v67)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v70 = v69;
          p_shared_weak_owners = (unint64_t *)&v69->__shared_weak_owners_;
          do
            v72 = __ldxr(p_shared_weak_owners);
          while (__stxr(v72 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v69->__shared_owners_;
          do
            v74 = __ldaxr(p_shared_owners);
          while (__stlxr(v74 - 1, p_shared_owners));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v70);
          }
          aBlock = v37;
          v94 = 1174405120;
          v95 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm25TxPwr_Notification_Enable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
          v96 = &__block_descriptor_tmp_108_0;
          v97 = (_QWORD *)a1;
          v98 = v68;
          v99 = v70;
          do
            v75 = __ldxr(p_shared_weak_owners);
          while (__stxr(v75 + 1, p_shared_weak_owners));
          if (v79)
          {
            v76 = object;
            v100 = _Block_copy(v79);
            v101 = object;
            if (!object)
              goto LABEL_111;
          }
          else
          {
            v76 = object;
            v100 = 0;
            v101 = object;
            if (!object)
            {
LABEL_111:
              *(_QWORD *)&v90 = a1 + 184;
              *((_QWORD *)&v90 + 1) = QMIServiceMsg::create();
              LODWORD(v91) = 25000;
              *((_QWORD *)&v91 + 1) = 0;
              v92 = 0;
              v102 = v37;
              v103 = 0x40000000;
              v104 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
              v105 = &unk_1E66DBD60;
              p_aBlock = &aBlock;
              v77 = _Block_copy(&v102);
              v92 = v77;
              if (*((_QWORD *)&v90 + 1))
              {
                qmi::Client::send();
                v77 = v92;
              }
              if (v77)
                _Block_release(v77);
              if (v101)
                dispatch_release(v101);
              if (v100)
                _Block_release(v100);
              if (v99)
                std::__shared_weak_count::__release_weak(v99);
              std::__shared_weak_count::__release_weak(v70);
              if (v76)
                dispatch_release(v76);
              if (v79)
                _Block_release(v79);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v81);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v87);
              if (SHIBYTE(v89[2]) < 0)
                goto LABEL_61;
              return;
            }
          }
          dispatch_retain(v76);
          goto LABEL_111;
        }
LABEL_133:
        __cxa_bad_cast();
      }
LABEL_50:
      v42 = operator new(0x10uLL);
      v43 = v42;
      v42[4] = 1;
      *(_QWORD *)v42 = off_1E66DBE28;
      if ((unint64_t)v39 < *((_QWORD *)&v88 + 1))
      {
        *(_QWORD *)v39 = v42;
        v44 = (uint64_t)(v39 + 8);
LABEL_83:
        *(_QWORD *)&v88 = v44;
        v84((uint64_t)v83, (_BYTE *)v43 + 9);
        goto LABEL_84;
      }
      v46 = v39 - v38;
      v47 = (v39 - v38) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v49 = *((_QWORD *)&v88 + 1) - (_QWORD)v38;
      if ((uint64_t)(*((_QWORD *)&v88 + 1) - (_QWORD)v38) >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
      {
        if (v50 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v51 = operator new(8 * v50);
        v52 = &v51[8 * v47];
        v53 = &v51[8 * v50];
        *v52 = v43;
        v44 = (uint64_t)(v52 + 1);
        if (v38 == v39)
          goto LABEL_81;
      }
      else
      {
        v51 = 0;
        v52 = (_QWORD *)(8 * v47);
        v53 = 0;
        *(_QWORD *)(8 * v47) = v43;
        v44 = 8 * v47 + 8;
        if (v38 == v39)
        {
LABEL_81:
          *((_QWORD *)&v87 + 1) = v52;
          *(_QWORD *)&v88 = v44;
          *((_QWORD *)&v88 + 1) = v53;
          if (v38)
            operator delete(v38);
          goto LABEL_83;
        }
      }
      if ((unint64_t)(v46 - 8) < 0x58)
        goto LABEL_138;
      if ((unint64_t)(v38 - v51) < 0x20)
        goto LABEL_138;
      v54 = ((unint64_t)(v46 - 8) >> 3) + 1;
      v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      v56 = &v39[-v55];
      v52 = (_QWORD *)((char *)v52 - v55);
      v57 = &v51[8 * v47 - 16];
      v58 = v39 - 16;
      v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60 = *(_OWORD *)v58;
        *(v57 - 1) = *((_OWORD *)v58 - 1);
        *v57 = v60;
        v57 -= 2;
        v58 -= 32;
        v59 -= 4;
      }
      while (v59);
      v39 = v56;
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_138:
        do
        {
          v61 = *((_QWORD *)v39 - 1);
          v39 -= 8;
          *--v52 = v61;
        }
        while (v39 != v38);
      }
      v38 = (char *)*((_QWORD *)&v87 + 1);
      goto LABEL_81;
    }
  }
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v90 = v11;
  v91 = v11;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v90);
  v12 = (char *)*((_QWORD *)&v90 + 1);
  v13 = (char *)v91;
  v14 = (const void **)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1) != (_QWORD)v91)
  {
    v14 = (const void **)*((_QWORD *)&v90 + 1);
    while (*((_BYTE *)*v14 + 8) != 1)
    {
      if (++v14 == (const void **)v91)
        goto LABEL_23;
    }
  }
  if (v14 == (const void **)v91)
  {
LABEL_23:
    v17 = operator new(0x10uLL);
    v18 = v17;
    v17[4] = 1;
    *(_QWORD *)v17 = off_1E66DBEA8;
    if ((unint64_t)v13 < *((_QWORD *)&v91 + 1))
    {
      *(_QWORD *)v13 = v17;
      v19 = (uint64_t)(v13 + 8);
LABEL_55:
      v16 = (char *)v18 + 9;
      *(_QWORD *)&v91 = v19;
      goto LABEL_56;
    }
    v20 = v13 - v12;
    v21 = (v13 - v12) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v23 = *((_QWORD *)&v91 + 1) - (_QWORD)v12;
    if ((uint64_t)(*((_QWORD *)&v91 + 1) - (_QWORD)v12) >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v21];
      v27 = &v25[8 * v24];
      *v26 = v18;
      v19 = (uint64_t)(v26 + 1);
      if (v12 != v13)
      {
LABEL_34:
        if ((unint64_t)(v20 - 8) < 0x58)
          goto LABEL_139;
        if ((unint64_t)(v12 - v25) < 0x20)
          goto LABEL_139;
        v28 = ((unint64_t)(v20 - 8) >> 3) + 1;
        v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
        v30 = &v13[-v29];
        v26 = (_QWORD *)((char *)v26 - v29);
        v31 = &v25[8 * v21 - 16];
        v32 = v13 - 16;
        v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v34 = *(_OWORD *)v32;
          *(v31 - 1) = *((_OWORD *)v32 - 1);
          *v31 = v34;
          v31 -= 2;
          v32 -= 32;
          v33 -= 4;
        }
        while (v33);
        v13 = v30;
        if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_139:
          do
          {
            v35 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v26 = v35;
          }
          while (v13 != v12);
        }
        v12 = (char *)*((_QWORD *)&v90 + 1);
        *((_QWORD *)&v90 + 1) = v26;
        *(_QWORD *)&v91 = v19;
        *((_QWORD *)&v91 + 1) = v27;
        if (!v12)
          goto LABEL_55;
        goto LABEL_54;
      }
    }
    else
    {
      v25 = 0;
      v26 = (_QWORD *)(8 * v21);
      v27 = 0;
      *(_QWORD *)(8 * v21) = v18;
      v19 = 8 * v21 + 8;
      if (v12 != v13)
        goto LABEL_34;
    }
    *((_QWORD *)&v90 + 1) = v26;
    *(_QWORD *)&v91 = v19;
    *((_QWORD *)&v91 + 1) = v27;
    if (!v12)
      goto LABEL_55;
LABEL_54:
    operator delete(v12);
    goto LABEL_55;
  }
  if (!v15)
    __cxa_bad_cast();
  v16 = v15 + 9;
LABEL_56:
  *v16 = v7;
  v102 = (void *)(a1 + 184);
  v103 = QMIServiceMsg::create();
  LODWORD(v104) = 25000;
  v105 = 0;
  p_aBlock = 0;
  v78[0] = MEMORY[0x1E0C809B0];
  v78[1] = 0x40000000;
  v78[2] = ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
  v78[3] = &__block_descriptor_tmp_35_4;
  v78[4] = a1;
  aBlock = (xpc_object_t)MEMORY[0x1E0C809B0];
  v94 = 0x40000000;
  v95 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22TransmitStateIndConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v96 = &unk_1E66DBED8;
  v97 = v78;
  v45 = (xpc_object_t *)_Block_copy(&aBlock);
  p_aBlock = v45;
  if (v103)
  {
    qmi::Client::send();
    v45 = p_aBlock;
  }
  if (v45)
    _Block_release(v45);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v90);
  if (SHIBYTE(v89[2]) < 0)
LABEL_61:
    operator delete(v89[0]);
}

void sub_1B3D4E6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v45;

  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a42);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v43 - 168);
  v45 = *(std::__shared_weak_count **)(v43 - 176);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v42);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a31);
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _BYTE *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFB70]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D4E80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver29transmitIndicationEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint8_t v3[16];

  if (*(_DWORD *)(a2 + 4))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v3 = 0;
      _os_log_error_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_ERROR, "Error configuring transmit state indication", v3, 2u);
    }
  }
}

void antenna::QMICommandDriver::txPowerCapping_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  xpc_object_t value;
  int v8;
  __int128 v9;
  void *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSObject *v22;
  void *v23;
  __int128 v24;
  char *v25;
  char *v26;
  const void **v27;
  qmi::MutableMessageBase *v28;
  _BYTE *v29;
  _WORD *v30;
  _WORD *v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  _QWORD *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  _OWORD *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  const void **v51;
  char *v52;
  _BYTE *v53;
  _WORD *v54;
  _WORD *v55;
  _QWORD *v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _QWORD *v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  _OWORD *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  void *v73;
  NSObject *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  unint64_t *p_shared_weak_owners;
  unint64_t v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  NSObject *v85;
  void *v86;
  void *v87;
  NSObject *v88;
  char v89;
  _QWORD v90[5];
  _QWORD v91[2];
  void (*v92)(uint64_t, _BYTE *);
  void *v93;
  uint64_t v94;
  xpc_object_t *v95;
  void *aBlock;
  dispatch_object_t object;
  char v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  void *v105;
  xpc_object_t v106;
  uint64_t v107;
  void (*v108)(_QWORD *, uint64_t);
  void *v109;
  uint64_t v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void *v113;
  dispatch_object_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  void *v118;
  xpc_object_t *v119;

  v6 = (const char *)*MEMORY[0x1E0DDFA70];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFA70]))
  {
    value = xpc_dictionary_get_value(*a2, v6);
    v106 = value;
    if (value)
      xpc_retain(value);
    else
      v106 = xpc_null_create();
    v8 = xpc::dyn_cast_or_default();
    xpc_release(v106);
  }
  else
  {
    v8 = 0;
  }
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB38]))
  {
    if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB48]))
      return;
    *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v99 = v24;
    v100 = v24;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v99);
    if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFBE0]))
    {
LABEL_113:
      qmi::MutableMessageBase::MutableMessageBase();
      v73 = *(void **)a3;
      if (*(_QWORD *)a3)
        v73 = _Block_copy(v73);
      v74 = *(NSObject **)(a3 + 8);
      v87 = v73;
      v88 = v74;
      if (v74)
        dispatch_retain(v74);
      v75 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v75 || (v76 = *(_QWORD *)(a1 + 72), (v77 = std::__shared_weak_count::lock(v75)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v78 = v77;
      p_shared_weak_owners = (unint64_t *)&v77->__shared_weak_owners_;
      do
        v80 = __ldxr(p_shared_weak_owners);
      while (__stxr(v80 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v77->__shared_owners_;
      do
        v82 = __ldaxr(p_shared_owners);
      while (__stlxr(v82 - 1, p_shared_owners));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v78);
      }
      v83 = MEMORY[0x1E0C809B0];
      v106 = (xpc_object_t)MEMORY[0x1E0C809B0];
      v107 = 1174405120;
      v108 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm15TxPwr_Start_Cap7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      v109 = &__block_descriptor_tmp_113;
      v110 = a1;
      v111 = v76;
      v112 = v78;
      do
        v84 = __ldxr(p_shared_weak_owners);
      while (__stxr(v84 + 1, p_shared_weak_owners));
      if (v87)
      {
        v85 = v88;
        v113 = _Block_copy(v87);
        v114 = v88;
        if (!v88)
          goto LABEL_130;
      }
      else
      {
        v85 = v88;
        v113 = 0;
        v114 = v88;
        if (!v88)
        {
LABEL_130:
          if (v8)
          {
            v101 = a1 + 184;
            v102 = QMIServiceMsg::create();
            v104 = 0;
            v105 = 0;
            v103 = v8;
            v115 = v83;
            v116 = 0x40000000;
            v117 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
            v118 = &unk_1E66DBD60;
            v119 = &v106;
            v86 = _Block_copy(&v115);
            v105 = v86;
            if (v102)
            {
              qmi::Client::send();
              v86 = v105;
            }
            if (!v86)
              goto LABEL_141;
          }
          else
          {
            v101 = a1 + 184;
            v102 = QMIServiceMsg::create();
            v103 = 25000;
            v104 = 0;
            v105 = 0;
            v115 = v83;
            v116 = 0x40000000;
            v117 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
            v118 = &unk_1E66DBD60;
            v119 = &v106;
            v86 = _Block_copy(&v115);
            v105 = v86;
            if (v102)
            {
              qmi::Client::send();
              v86 = v105;
            }
            if (!v86)
              goto LABEL_141;
          }
          _Block_release(v86);
LABEL_141:
          if (v114)
            dispatch_release(v114);
          if (v113)
            _Block_release(v113);
          if (v112)
            std::__shared_weak_count::__release_weak(v112);
          std::__shared_weak_count::__release_weak(v78);
          if (v85)
            dispatch_release(v85);
          if (v87)
            _Block_release(v87);
          v28 = (qmi::MutableMessageBase *)&v89;
          goto LABEL_152;
        }
      }
      dispatch_retain(v85);
      goto LABEL_130;
    }
    v91[0] = MEMORY[0x1E0C809B0];
    v91[1] = 0x40000000;
    v92 = ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v93 = &__block_descriptor_tmp_38_2;
    v94 = a1;
    v95 = a2;
    v25 = (char *)*((_QWORD *)&v99 + 1);
    v26 = (char *)v100;
    v27 = (const void **)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1) != (_QWORD)v100)
    {
      v27 = (const void **)*((_QWORD *)&v99 + 1);
      while (*((_BYTE *)*v27 + 8) != 17)
      {
        if (++v27 == (const void **)v100)
          goto LABEL_57;
      }
    }
    if (v27 == (const void **)v100)
    {
LABEL_57:
      v30 = operator new(0x10uLL);
      v31 = v30;
      v30[4] = 17;
      *(_QWORD *)v30 = off_1E66DBF50;
      if ((unint64_t)v26 >= *((_QWORD *)&v100 + 1))
      {
        v33 = v26 - v25;
        v34 = (v26 - v25) >> 3;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 61)
          goto LABEL_157;
        v36 = *((_QWORD *)&v100 + 1) - (_QWORD)v25;
        if ((uint64_t)(*((_QWORD *)&v100 + 1) - (_QWORD)v25) >> 2 > v35)
          v35 = v36 >> 2;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
          v37 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 >> 61)
            goto LABEL_158;
          v38 = operator new(8 * v37);
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v34];
        v40 = &v38[8 * v37];
        *v39 = v31;
        v32 = v39 + 1;
        if (v25 != v26)
        {
          if ((unint64_t)(v33 - 8) < 0x58)
            goto LABEL_161;
          if ((unint64_t)(v25 - v38) < 0x20)
            goto LABEL_161;
          v41 = ((unint64_t)(v33 - 8) >> 3) + 1;
          v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
          v43 = &v26[-v42];
          v39 = (_QWORD *)((char *)v39 - v42);
          v44 = &v38[8 * v34 - 16];
          v45 = v26 - 16;
          v46 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v47 = *(_OWORD *)v45;
            *(v44 - 1) = *((_OWORD *)v45 - 1);
            *v44 = v47;
            v44 -= 2;
            v45 -= 32;
            v46 -= 4;
          }
          while (v46);
          v26 = v43;
          if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_161:
            do
            {
              v48 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *--v39 = v48;
            }
            while (v26 != v25);
          }
          v25 = (char *)*((_QWORD *)&v99 + 1);
        }
        *((_QWORD *)&v99 + 1) = v39;
        *(_QWORD *)&v100 = v32;
        *((_QWORD *)&v100 + 1) = v40;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v26 = v30;
        v32 = v26 + 8;
      }
      *(_QWORD *)&v100 = v32;
      v92((uint64_t)v91, (_BYTE *)v31 + 9);
    }
    else
    {
      if (!v29)
        goto LABEL_156;
      ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v91, v29 + 9);
    }
    if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFC18]))
      goto LABEL_113;
    v90[0] = MEMORY[0x1E0C809B0];
    v90[1] = 0x40000000;
    v90[2] = ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
    v90[3] = &__block_descriptor_tmp_40_7;
    v90[4] = a2;
    v49 = (char *)*((_QWORD *)&v99 + 1);
    v50 = (char *)v100;
    v51 = (const void **)*((_QWORD *)&v99 + 1);
    if (*((_QWORD *)&v99 + 1) != (_QWORD)v100)
    {
      v51 = (const void **)*((_QWORD *)&v99 + 1);
      while (*((_BYTE *)*v51 + 8) != 18)
      {
        if (++v51 == (const void **)v100)
          goto LABEL_89;
      }
    }
    if (v51 != (const void **)v100)
    {
      if (v52)
      {
        v53 = v52 + 9;
LABEL_112:
        ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2((uint64_t)v90, v53);
        goto LABEL_113;
      }
LABEL_156:
      __cxa_bad_cast();
    }
LABEL_89:
    v54 = operator new(0x10uLL);
    v55 = v54;
    v54[4] = 18;
    *(_QWORD *)v54 = off_1E66DBFA0;
    if ((unint64_t)v50 < *((_QWORD *)&v100 + 1))
    {
      *(_QWORD *)v50 = v54;
      v56 = v50 + 8;
LABEL_111:
      v53 = (char *)v55 + 9;
      *(_QWORD *)&v100 = v56;
      goto LABEL_112;
    }
    v57 = v50 - v49;
    v58 = (v50 - v49) >> 3;
    v59 = v58 + 1;
    if (!((unint64_t)(v58 + 1) >> 61))
    {
      v60 = *((_QWORD *)&v100 + 1) - (_QWORD)v49;
      if ((uint64_t)(*((_QWORD *)&v100 + 1) - (_QWORD)v49) >> 2 > v59)
        v59 = v60 >> 2;
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v59;
      if (!v61)
      {
        v62 = 0;
        goto LABEL_101;
      }
      if (!(v61 >> 61))
      {
        v62 = operator new(8 * v61);
LABEL_101:
        v63 = &v62[8 * v58];
        v64 = &v62[8 * v61];
        *v63 = v55;
        v56 = v63 + 1;
        if (v49 != v50)
        {
          if ((unint64_t)(v57 - 8) < 0x58)
            goto LABEL_162;
          if ((unint64_t)(v49 - v62) < 0x20)
            goto LABEL_162;
          v65 = ((unint64_t)(v57 - 8) >> 3) + 1;
          v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
          v67 = &v50[-v66];
          v63 = (_QWORD *)((char *)v63 - v66);
          v68 = &v62[8 * v58 - 16];
          v69 = v50 - 16;
          v70 = v65 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v71 = *(_OWORD *)v69;
            *(v68 - 1) = *((_OWORD *)v69 - 1);
            *v68 = v71;
            v68 -= 2;
            v69 -= 32;
            v70 -= 4;
          }
          while (v70);
          v50 = v67;
          if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_162:
            do
            {
              v72 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              *--v63 = v72;
            }
            while (v50 != v49);
          }
          v49 = (char *)*((_QWORD *)&v99 + 1);
        }
        *((_QWORD *)&v99 + 1) = v63;
        *(_QWORD *)&v100 = v56;
        *((_QWORD *)&v100 + 1) = v64;
        if (v49)
          operator delete(v49);
        goto LABEL_111;
      }
LABEL_158:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_157:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v99 = v9;
  v100 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v99);
  qmi::MutableMessageBase::MutableMessageBase();
  v10 = *(void **)a3;
  if (*(_QWORD *)a3)
    v10 = _Block_copy(v10);
  v11 = *(NSObject **)(a3 + 8);
  aBlock = v10;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v12 || (v13 = *(_QWORD *)(a1 + 72), (v14 = std::__shared_weak_count::lock(v12)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v15 = v14;
  v16 = (unint64_t *)&v14->__shared_weak_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v18 = (unint64_t *)&v14->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  v20 = MEMORY[0x1E0C809B0];
  v106 = (xpc_object_t)MEMORY[0x1E0C809B0];
  v107 = 1174405120;
  v108 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm14TxPwr_Stop_Cap7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v109 = &__block_descriptor_tmp_111_1;
  v110 = a1;
  v111 = v13;
  v112 = v15;
  do
    v21 = __ldxr(v16);
  while (__stxr(v21 + 1, v16));
  if (aBlock)
  {
    v22 = object;
    v113 = _Block_copy(aBlock);
    v114 = object;
    if (!object)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = object;
  v113 = 0;
  v114 = object;
  if (object)
LABEL_24:
    dispatch_retain(v22);
LABEL_25:
  if (v8)
  {
    v101 = a1 + 184;
    v102 = QMIServiceMsg::create();
    v104 = 0;
    v105 = 0;
    v103 = v8;
    v115 = v20;
    v116 = 0x40000000;
    v117 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
    v118 = &unk_1E66DBD60;
    v119 = &v106;
    v23 = _Block_copy(&v115);
    v105 = v23;
    if (v102)
    {
      qmi::Client::send();
      v23 = v105;
    }
    if (!v23)
      goto LABEL_43;
  }
  else
  {
    v101 = a1 + 184;
    v102 = QMIServiceMsg::create();
    v103 = 25000;
    v104 = 0;
    v105 = 0;
    v115 = v20;
    v116 = 0x40000000;
    v117 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
    v118 = &unk_1E66DBD60;
    v119 = &v106;
    v23 = _Block_copy(&v115);
    v105 = v23;
    if (v102)
    {
      qmi::Client::send();
      v23 = v105;
    }
    if (!v23)
      goto LABEL_43;
  }
  _Block_release(v23);
LABEL_43:
  if (v114)
    dispatch_release(v114);
  if (v113)
    _Block_release(v113);
  if (v112)
    std::__shared_weak_count::__release_weak(v112);
  std::__shared_weak_count::__release_weak(v15);
  if (v22)
    dispatch_release(v22);
  if (aBlock)
    _Block_release(aBlock);
  v28 = (qmi::MutableMessageBase *)&v98;
LABEL_152:
  qmi::MutableMessageBase::~MutableMessageBase(v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v99);
}

void sub_1B3D4F244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v41;

  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a38);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v39 - 168);
  v41 = *(std::__shared_weak_count **)(v39 - 176);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v38);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  xpc_object_t value;
  int v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  xpc_object_t object;

  v3 = *(_QWORD *)(a1 + 32);
  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), (const char *)*MEMORY[0x1E0DDFBE0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v5 = xpc::dyn_cast_or_default();
  xpc_release(object);
  v7 = (uint64_t **)(v3 + 224);
  v6 = *(uint64_t **)(v3 + 224);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = *((_DWORD *)v6 + 7);
        if (v9 <= v5)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_11;
      }
      if (v9 >= v5)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_11;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(v3 + 224);
LABEL_11:
    v10 = (uint64_t *)v8;
    v8 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v8 + 7) = v5;
    *((_DWORD *)v8 + 8) = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = (uint64_t *)v8;
    v11 = **(_QWORD **)(v3 + 216);
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *(_QWORD *)(v3 + 216) = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 224), v12);
    ++*(_QWORD *)(v3 + 232);
  }
  *a2 = *((_DWORD *)v8 + 8);
}

void sub_1B3D4F47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver19txPowerCapping_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _BYTE *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFC18]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D4F508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::txPowerConfiguration_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  xpc_object_t value;
  NSObject *v8;
  xpc_object_t v9;
  void *v10;
  int v11;
  __int128 v12;
  char *v13;
  char *v14;
  const void **v15;
  _WORD *v16;
  _BYTE *v17;
  _BYTE *v18;
  _WORD *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  char *v30;
  const void **v31;
  char *v32;
  char *v33;
  const void **v34;
  char *v35;
  char *v36;
  const void **v37;
  xpc_object_t v38;
  void *v39;
  void *v40;
  NSObject *v41;
  void *v42;
  _WORD *v43;
  char *v44;
  _WORD *v45;
  char *v46;
  _WORD *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  NSObject *v56;
  void *v57;
  _BYTE *v58;
  _BYTE *v59;
  _WORD *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  int64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  char *v84;
  size_t v85;
  void *v86;
  xpc_object_t *v87;
  uint64_t v88;
  uint64_t v89;
  xpc_object_t *v90;
  _QWORD *v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  _OWORD *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  const void **v103;
  char *v104;
  _WORD *v105;
  char *v106;
  char *v107;
  int64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _BYTE *v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  _OWORD *v120;
  char *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  _QWORD *v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  _OWORD *v131;
  char *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  _QWORD *v136;
  char *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  _OWORD *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  void *v147;
  NSObject *v148;
  std::__shared_weak_count *v149;
  void *v150;
  void *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  unint64_t *p_shared_weak_owners;
  unint64_t v155;
  unint64_t *p_shared_owners;
  unint64_t v157;
  unint64_t v158;
  NSObject *v159;
  void *v160;
  uint64_t v161;
  void *aBlock;
  NSObject *object;
  char v164[32];
  _QWORD v165[5];
  _QWORD v166[5];
  _QWORD v167[5];
  _QWORD v168[2];
  void (*v169)(uint64_t, _WORD *);
  void *v170;
  xpc_object_t *v171;
  _QWORD v172[2];
  uint64_t (*v173)(uint64_t, _WORD *);
  void *v174;
  int v175;
  __int128 v176;
  __int128 v177;
  _QWORD *v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  void *v182;
  xpc_object_t block[3];
  void *v184;
  const void *v185;
  xpc_object_t v186;
  std::__shared_weak_count *v187;
  void *v188;
  dispatch_object_t v189;
  __int128 buf;
  void (*v191)(uint64_t, uint64_t);
  void *v192;
  xpc_object_t *v193;
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v6 = (const char *)*MEMORY[0x1E0DDFB70];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB70]))
  {
    value = xpc_dictionary_get_value(*a2, v6);
    block[0] = value;
    if (value)
      xpc_retain(value);
    else
      block[0] = xpc_null_create();
    v11 = xpc::dyn_cast_or_default();
    xpc_release(block[0]);
    v161 = a3;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v176 = v12;
    v177 = v12;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v176);
    v172[0] = MEMORY[0x1E0C809B0];
    v172[1] = 0x40000000;
    v173 = ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v174 = &__block_descriptor_tmp_42_2;
    v175 = v11;
    v13 = (char *)*((_QWORD *)&v176 + 1);
    v14 = (char *)v177;
    v15 = (const void **)*((_QWORD *)&v176 + 1);
    if (*((_QWORD *)&v176 + 1) != (_QWORD)v177)
    {
      v15 = (const void **)*((_QWORD *)&v176 + 1);
      while (*((_BYTE *)*v15 + 8) != 1)
      {
        if (++v15 == (const void **)v177)
          goto LABEL_16;
      }
    }
    if (v15 != (const void **)v177)
    {
      if (!v16)
        goto LABEL_245;
      ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v172, v16 + 5);
LABEL_30:
      switch(v11)
      {
        case 1:
          if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFBE8]))
            goto LABEL_209;
          v166[0] = MEMORY[0x1E0C809B0];
          v166[1] = 0x40000000;
          v166[2] = ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
          v166[3] = &__block_descriptor_tmp_48_2;
          v166[4] = a2;
          v35 = (char *)*((_QWORD *)&v176 + 1);
          v36 = (char *)v177;
          v37 = (const void **)*((_QWORD *)&v176 + 1);
          if (*((_QWORD *)&v176 + 1) != (_QWORD)v177)
          {
            v37 = (const void **)*((_QWORD *)&v176 + 1);
            while (*((_BYTE *)*v37 + 8) != 16)
            {
              if (++v37 == (const void **)v177)
                goto LABEL_95;
            }
          }
          if (v37 == (const void **)v177)
          {
LABEL_95:
            v62 = (char *)operator new(0x10uLL);
            v63 = v62;
            v62[8] = 16;
            *(_QWORD *)v62 = off_1E66DC110;
            *((_WORD *)v62 + 5) = 0;
            v45 = v62 + 10;
            if ((unint64_t)v36 >= *((_QWORD *)&v177 + 1))
            {
              v72 = v36 - v35;
              v73 = (v36 - v35) >> 3;
              v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_247;
              v75 = *((_QWORD *)&v177 + 1) - (_QWORD)v35;
              if ((uint64_t)(*((_QWORD *)&v177 + 1) - (_QWORD)v35) >> 2 > v74)
                v74 = v75 >> 2;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v74;
              if (v76)
              {
                if (v76 >> 61)
                  goto LABEL_248;
                v77 = operator new(8 * v76);
              }
              else
              {
                v77 = 0;
              }
              v114 = &v77[8 * v73];
              v115 = &v77[8 * v76];
              *v114 = v63;
              v116 = v114 + 1;
              if (v35 != v36)
              {
                if ((unint64_t)(v72 - 8) < 0x58)
                  goto LABEL_251;
                if ((unint64_t)(v35 - v77) < 0x20)
                  goto LABEL_251;
                v117 = ((unint64_t)(v72 - 8) >> 3) + 1;
                v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
                v119 = &v36[-v118];
                v114 = (_QWORD *)((char *)v114 - v118);
                v120 = &v77[8 * v73 - 16];
                v121 = v36 - 16;
                v122 = v117 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v123 = *(_OWORD *)v121;
                  *(v120 - 1) = *((_OWORD *)v121 - 1);
                  *v120 = v123;
                  v120 -= 2;
                  v121 -= 32;
                  v122 -= 4;
                }
                while (v122);
                v36 = v119;
                if (v117 != (v117 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_251:
                  do
                  {
                    v124 = *((_QWORD *)v36 - 1);
                    v36 -= 8;
                    *--v114 = v124;
                  }
                  while (v36 != v35);
                }
                v35 = (char *)*((_QWORD *)&v176 + 1);
              }
              *((_QWORD *)&v176 + 1) = v114;
              *(_QWORD *)&v177 = v116;
              *((_QWORD *)&v177 + 1) = v115;
              if (v35)
                operator delete(v35);
              *(_QWORD *)&v177 = v116;
            }
            else
            {
              *(_QWORD *)v36 = v62;
              *(_QWORD *)&v177 = v36 + 8;
            }
          }
          else
          {
            if (!v44)
              goto LABEL_245;
            v45 = v44 + 10;
          }
          ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4((uint64_t)v166, v45);
          goto LABEL_209;
        case 2:
          if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFC00]))
          {
            v168[0] = MEMORY[0x1E0C809B0];
            v168[1] = 0x40000000;
            v169 = ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
            v170 = &__block_descriptor_tmp_44_1;
            v171 = a2;
            v32 = (char *)*((_QWORD *)&v176 + 1);
            v33 = (char *)v177;
            v34 = (const void **)*((_QWORD *)&v176 + 1);
            if (*((_QWORD *)&v176 + 1) != (_QWORD)v177)
            {
              v34 = (const void **)*((_QWORD *)&v176 + 1);
              while (*((_BYTE *)*v34 + 8) != 23)
              {
                if (++v34 == (const void **)v177)
                  goto LABEL_93;
              }
            }
            if (v34 == (const void **)v177)
            {
LABEL_93:
              v58 = operator new(0x10uLL);
              v59 = v58;
              v58[8] = 23;
              *(_QWORD *)v58 = off_1E66DC070;
              *((_WORD *)v58 + 5) = 0;
              v60 = v58 + 10;
              if ((unint64_t)v33 >= *((_QWORD *)&v177 + 1))
              {
                v66 = v33 - v32;
                v67 = (v33 - v32) >> 3;
                v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 61)
                  goto LABEL_247;
                v69 = *((_QWORD *)&v177 + 1) - (_QWORD)v32;
                if ((uint64_t)(*((_QWORD *)&v177 + 1) - (_QWORD)v32) >> 2 > v68)
                  v68 = v69 >> 2;
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
                  v70 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v70 = v68;
                if (v70)
                {
                  if (v70 >> 61)
                    goto LABEL_248;
                  v71 = operator new(8 * v70);
                }
                else
                {
                  v71 = 0;
                }
                v91 = &v71[8 * v67];
                v92 = &v71[8 * v70];
                *v91 = v59;
                v61 = v91 + 1;
                if (v32 != v33)
                {
                  if ((unint64_t)(v66 - 8) < 0x58)
                    goto LABEL_252;
                  if ((unint64_t)(v32 - v71) < 0x20)
                    goto LABEL_252;
                  v93 = ((unint64_t)(v66 - 8) >> 3) + 1;
                  v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
                  v95 = &v33[-v94];
                  v91 = (_QWORD *)((char *)v91 - v94);
                  v96 = &v71[8 * v67 - 16];
                  v97 = v33 - 16;
                  v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v99 = *(_OWORD *)v97;
                    *(v96 - 1) = *((_OWORD *)v97 - 1);
                    *v96 = v99;
                    v96 -= 2;
                    v97 -= 32;
                    v98 -= 4;
                  }
                  while (v98);
                  v33 = v95;
                  if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_252:
                    do
                    {
                      v100 = *((_QWORD *)v33 - 1);
                      v33 -= 8;
                      *--v91 = v100;
                    }
                    while (v33 != v32);
                  }
                  v32 = (char *)*((_QWORD *)&v176 + 1);
                }
                *((_QWORD *)&v176 + 1) = v91;
                *(_QWORD *)&v177 = v61;
                *((_QWORD *)&v177 + 1) = v92;
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *(_QWORD *)v33 = v58;
                v61 = v33 + 8;
              }
              *(_QWORD *)&v177 = v61;
              v169((uint64_t)v168, v60);
            }
            else
            {
              if (!v43)
                goto LABEL_245;
              ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2((uint64_t)v168, v43 + 5);
            }
          }
          if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFBF8]))
            goto LABEL_209;
          v167[0] = MEMORY[0x1E0C809B0];
          v167[1] = 0x40000000;
          v167[2] = ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
          v167[3] = &__block_descriptor_tmp_46_0;
          v167[4] = a2;
          v101 = (char *)*((_QWORD *)&v176 + 1);
          v102 = (char *)v177;
          v103 = (const void **)*((_QWORD *)&v176 + 1);
          if (*((_QWORD *)&v176 + 1) != (_QWORD)v177)
          {
            v103 = (const void **)*((_QWORD *)&v176 + 1);
            while (*((_BYTE *)*v103 + 8) != 24)
            {
              if (++v103 == (const void **)v177)
                goto LABEL_159;
            }
          }
          if (v103 == (const void **)v177)
          {
LABEL_159:
            v106 = (char *)operator new(0x10uLL);
            v107 = v106;
            v106[8] = 24;
            *(_QWORD *)v106 = off_1E66DC0C0;
            *((_WORD *)v106 + 5) = 0;
            v105 = v106 + 10;
            if ((unint64_t)v102 >= *((_QWORD *)&v177 + 1))
            {
              v108 = v102 - v101;
              v109 = (v102 - v101) >> 3;
              v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 61)
                goto LABEL_247;
              v111 = *((_QWORD *)&v177 + 1) - (_QWORD)v101;
              if ((uint64_t)(*((_QWORD *)&v177 + 1) - (_QWORD)v101) >> 2 > v110)
                v110 = v111 >> 2;
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
                v112 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v112 = v110;
              if (v112)
              {
                if (v112 >> 61)
                  goto LABEL_248;
                v113 = operator new(8 * v112);
              }
              else
              {
                v113 = 0;
              }
              v136 = &v113[8 * v109];
              v137 = &v113[8 * v112];
              *v136 = v107;
              v138 = v136 + 1;
              if (v101 != v102)
              {
                if ((unint64_t)(v108 - 8) < 0x58)
                  goto LABEL_253;
                if ((unint64_t)(v101 - v113) < 0x20)
                  goto LABEL_253;
                v139 = ((unint64_t)(v108 - 8) >> 3) + 1;
                v140 = 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
                v141 = &v102[-v140];
                v136 = (_QWORD *)((char *)v136 - v140);
                v142 = &v113[8 * v109 - 16];
                v143 = v102 - 16;
                v144 = v139 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v145 = *(_OWORD *)v143;
                  *(v142 - 1) = *((_OWORD *)v143 - 1);
                  *v142 = v145;
                  v142 -= 2;
                  v143 -= 32;
                  v144 -= 4;
                }
                while (v144);
                v102 = v141;
                if (v139 != (v139 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_253:
                  do
                  {
                    v146 = *((_QWORD *)v102 - 1);
                    v102 -= 8;
                    *--v136 = v146;
                  }
                  while (v102 != v101);
                }
                v101 = (char *)*((_QWORD *)&v176 + 1);
              }
              *((_QWORD *)&v176 + 1) = v136;
              *(_QWORD *)&v177 = v138;
              *((_QWORD *)&v177 + 1) = v137;
              if (v101)
                operator delete(v101);
              *(_QWORD *)&v177 = v138;
            }
            else
            {
              *(_QWORD *)v102 = v106;
              *(_QWORD *)&v177 = v102 + 8;
            }
          }
          else
          {
            if (!v104)
              goto LABEL_245;
            v105 = v104 + 10;
          }
          ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3((uint64_t)v167, v105);
LABEL_209:
          qmi::MutableMessageBase::MutableMessageBase();
          v147 = *(void **)v161;
          if (*(_QWORD *)v161)
            v147 = _Block_copy(v147);
          v148 = *(NSObject **)(v161 + 8);
          aBlock = v147;
          object = v148;
          if (v148)
            dispatch_retain(v148);
          v149 = (std::__shared_weak_count *)a1[10];
          v150 = (void *)MEMORY[0x1E0C809B0];
          if (!v149 || (v151 = (void *)a1[9], (v152 = std::__shared_weak_count::lock(v149)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v153 = v152;
          p_shared_weak_owners = (unint64_t *)&v152->__shared_weak_owners_;
          do
            v155 = __ldxr(p_shared_weak_owners);
          while (__stxr(v155 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v152->__shared_owners_;
          do
            v157 = __ldaxr(p_shared_owners);
          while (__stlxr(v157 - 1, p_shared_owners));
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v153);
          }
          block[0] = v150;
          block[1] = (xpc_object_t)1174405120;
          block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm13TxPwrConfigV37RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
          v184 = &__block_descriptor_tmp_115;
          v185 = a1;
          v186 = v151;
          v187 = v153;
          do
            v158 = __ldxr(p_shared_weak_owners);
          while (__stxr(v158 + 1, p_shared_weak_owners));
          if (aBlock)
          {
            v159 = object;
            v188 = _Block_copy(aBlock);
            v189 = object;
            if (!object)
            {
LABEL_226:
              v178 = a1 + 23;
              v179 = QMIServiceMsg::create();
              v180 = 25000;
              v181 = 0;
              v182 = 0;
              *(_QWORD *)&buf = v150;
              *((_QWORD *)&buf + 1) = 0x40000000;
              v191 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
              v192 = &unk_1E66DBD60;
              v193 = block;
              v160 = _Block_copy(&buf);
              v182 = v160;
              if (v179)
              {
                qmi::Client::send();
                v160 = v182;
              }
              if (v160)
                _Block_release(v160);
              if (v189)
                dispatch_release(v189);
              if (v188)
                _Block_release(v188);
              if (v187)
                std::__shared_weak_count::__release_weak(v187);
              std::__shared_weak_count::__release_weak(v153);
              if (v159)
                dispatch_release(v159);
              if (aBlock)
                _Block_release(aBlock);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v164);
LABEL_241:
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v176);
              return;
            }
          }
          else
          {
            v159 = object;
            v188 = 0;
            v189 = object;
            if (!object)
              goto LABEL_226;
          }
          dispatch_retain(v159);
          goto LABEL_226;
        case 3:
          if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFBE8]))
            goto LABEL_209;
          v165[0] = MEMORY[0x1E0C809B0];
          v165[1] = 0x40000000;
          v165[2] = ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_5;
          v165[3] = &__block_descriptor_tmp_50_1;
          v165[4] = a2;
          v29 = (char *)*((_QWORD *)&v176 + 1);
          v30 = (char *)v177;
          v31 = (const void **)*((_QWORD *)&v176 + 1);
          if (*((_QWORD *)&v176 + 1) != (_QWORD)v177)
          {
            v31 = (const void **)*((_QWORD *)&v176 + 1);
            while (*((_BYTE *)*v31 + 8) != 25)
            {
              if (++v31 == (const void **)v177)
                goto LABEL_97;
            }
          }
          if (v31 != (const void **)v177)
          {
            if (v46)
            {
              v47 = v46 + 10;
LABEL_195:
              ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_5((uint64_t)v165, v47);
              goto LABEL_209;
            }
LABEL_245:
            __cxa_bad_cast();
          }
LABEL_97:
          v64 = (char *)operator new(0x10uLL);
          v65 = v64;
          v64[8] = 25;
          *(_QWORD *)v64 = off_1E66DC160;
          *((_WORD *)v64 + 5) = 0;
          v47 = v64 + 10;
          if ((unint64_t)v30 < *((_QWORD *)&v177 + 1))
          {
            *(_QWORD *)v30 = v64;
            *(_QWORD *)&v177 = v30 + 8;
            goto LABEL_195;
          }
          v78 = v30 - v29;
          v79 = (v30 - v29) >> 3;
          v80 = v79 + 1;
          if (!((unint64_t)(v79 + 1) >> 61))
          {
            v81 = *((_QWORD *)&v177 + 1) - (_QWORD)v29;
            if ((uint64_t)(*((_QWORD *)&v177 + 1) - (_QWORD)v29) >> 2 > v80)
              v80 = v81 >> 2;
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
              v82 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v82 = v80;
            if (!v82)
            {
              v83 = 0;
              goto LABEL_184;
            }
            if (!(v82 >> 61))
            {
              v83 = operator new(8 * v82);
LABEL_184:
              v125 = &v83[8 * v79];
              v126 = &v83[8 * v82];
              *v125 = v65;
              v127 = v125 + 1;
              if (v29 != v30)
              {
                if ((unint64_t)(v78 - 8) < 0x58)
                  goto LABEL_254;
                if ((unint64_t)(v29 - v83) < 0x20)
                  goto LABEL_254;
                v128 = ((unint64_t)(v78 - 8) >> 3) + 1;
                v129 = 8 * (v128 & 0x3FFFFFFFFFFFFFFCLL);
                v130 = &v30[-v129];
                v125 = (_QWORD *)((char *)v125 - v129);
                v131 = &v83[8 * v79 - 16];
                v132 = v30 - 16;
                v133 = v128 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v134 = *(_OWORD *)v132;
                  *(v131 - 1) = *((_OWORD *)v132 - 1);
                  *v131 = v134;
                  v131 -= 2;
                  v132 -= 32;
                  v133 -= 4;
                }
                while (v133);
                v30 = v130;
                if (v128 != (v128 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_254:
                  do
                  {
                    v135 = *((_QWORD *)v30 - 1);
                    v30 -= 8;
                    *--v125 = v135;
                  }
                  while (v30 != v29);
                }
                v29 = (char *)*((_QWORD *)&v176 + 1);
              }
              *((_QWORD *)&v176 + 1) = v125;
              *(_QWORD *)&v177 = v127;
              *((_QWORD *)&v177 + 1) = v126;
              if (v29)
                operator delete(v29);
              *(_QWORD *)&v177 = v127;
              goto LABEL_195;
            }
LABEL_248:
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
LABEL_247:
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      v38 = xpc_null_create();
      v39 = (void *)MEMORY[0x1E0C809B0];
      if (*(_QWORD *)v161)
        v40 = _Block_copy(*(const void **)v161);
      else
        v40 = 0;
      v56 = *(NSObject **)(v161 + 8);
      block[0] = v39;
      block[1] = (xpc_object_t)1174405120;
      block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
      v184 = &__block_descriptor_tmp_106;
      if (v40)
      {
        v57 = _Block_copy(v40);
        LOBYTE(v187) = 0;
        v185 = v57;
        v186 = v38;
        if (v38)
        {
LABEL_85:
          xpc_retain(v38);
LABEL_88:
          dispatch_async(v56, block);
          xpc_release(v186);
          v186 = 0;
          if (v185)
            _Block_release(v185);
          if (v40)
            _Block_release(v40);
          xpc_release(v38);
          goto LABEL_241;
        }
      }
      else
      {
        LOBYTE(v187) = 0;
        v185 = 0;
        v186 = v38;
        if (v38)
          goto LABEL_85;
      }
      v186 = xpc_null_create();
      goto LABEL_88;
    }
LABEL_16:
    v17 = operator new(0x10uLL);
    v18 = v17;
    v17[8] = 1;
    *(_QWORD *)v17 = off_1E66DC020;
    *((_WORD *)v17 + 5) = 0;
    v19 = v17 + 10;
    if ((unint64_t)v14 < *((_QWORD *)&v177 + 1))
    {
      *(_QWORD *)v14 = v17;
      v20 = (uint64_t)(v14 + 8);
LABEL_29:
      *(_QWORD *)&v177 = v20;
      v173((uint64_t)v172, v19);
      goto LABEL_30;
    }
    v21 = v14 - v13;
    v22 = (v14 - v13) >> 3;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      goto LABEL_247;
    v24 = *((_QWORD *)&v177 + 1) - (_QWORD)v13;
    if ((uint64_t)(*((_QWORD *)&v177 + 1) - (_QWORD)v13) >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        goto LABEL_248;
      v26 = operator new(8 * v25);
      v27 = &v26[8 * v22];
      v28 = &v26[8 * v25];
      *v27 = v18;
      v20 = (uint64_t)(v27 + 1);
      if (v13 == v14)
      {
LABEL_27:
        *((_QWORD *)&v176 + 1) = v27;
        *(_QWORD *)&v177 = v20;
        *((_QWORD *)&v177 + 1) = v28;
        if (!v13)
          goto LABEL_29;
LABEL_28:
        operator delete(v13);
        goto LABEL_29;
      }
    }
    else
    {
      v26 = 0;
      v27 = (_QWORD *)(8 * v22);
      v28 = 0;
      *(_QWORD *)(8 * v22) = v18;
      v20 = 8 * v22 + 8;
      if (v13 == v14)
        goto LABEL_27;
    }
    if ((unint64_t)(v21 - 8) < 0x58)
      goto LABEL_255;
    if ((unint64_t)(v13 - v26) < 0x20)
      goto LABEL_255;
    v48 = ((unint64_t)(v21 - 8) >> 3) + 1;
    v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
    v50 = &v14[-v49];
    v27 = (_QWORD *)((char *)v27 - v49);
    v51 = &v26[8 * v22 - 16];
    v52 = v14 - 16;
    v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 4;
    }
    while (v53);
    v14 = v50;
    if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_255:
      do
      {
        v55 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v27 = v55;
      }
      while (v14 != v13);
    }
    v13 = (char *)*((_QWORD *)&v176 + 1);
    *((_QWORD *)&v176 + 1) = v27;
    *(_QWORD *)&v177 = v20;
    *((_QWORD *)&v177 + 1) = v28;
    if (!v13)
      goto LABEL_29;
    goto LABEL_28;
  }
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v84 = (char *)MEMORY[0x1B5E2FB34](*a2);
    memset(block, 170, sizeof(block));
    v85 = strlen(v84);
    if (v85 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v86 = (void *)v85;
    if (v85 >= 0x17)
    {
      v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v85 | 7) != 0x17)
        v88 = v85 | 7;
      v89 = v88 + 1;
      v87 = (xpc_object_t *)operator new(v88 + 1);
      block[1] = v86;
      block[2] = (xpc_object_t)(v89 | 0x8000000000000000);
      block[0] = v87;
    }
    else
    {
      HIBYTE(block[2]) = v85;
      v87 = block;
      if (!v85)
        goto LABEL_134;
    }
    memcpy(v87, v84, (size_t)v86);
LABEL_134:
    *((_BYTE *)v86 + (_QWORD)v87) = 0;
    free(v84);
    v90 = block;
    if (SHIBYTE(block[2]) < 0)
      v90 = (xpc_object_t *)block[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v90;
    _os_log_error_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0)
      operator delete(block[0]);
  }
  v9 = xpc_null_create();
  if (*(_QWORD *)a3)
    v10 = _Block_copy(*(const void **)a3);
  else
    v10 = 0;
  v41 = *(NSObject **)(a3 + 8);
  block[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
  block[1] = (xpc_object_t)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v184 = &__block_descriptor_tmp_106;
  if (!v10)
  {
    LOBYTE(v187) = 0;
    v185 = 0;
    v186 = v9;
    if (v9)
      goto LABEL_56;
LABEL_58:
    v186 = xpc_null_create();
    goto LABEL_59;
  }
  v42 = _Block_copy(v10);
  LOBYTE(v187) = 0;
  v185 = v42;
  v186 = v9;
  if (!v9)
    goto LABEL_58;
LABEL_56:
  xpc_retain(v9);
LABEL_59:
  dispatch_async(v41, block);
  xpc_release(v186);
  v186 = 0;
  if (v185)
    _Block_release(v185);
  if (v10)
    _Block_release(v10);
  xpc_release(v9);
}

void sub_1B3D504A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D505D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a41);
  _Unwind_Resume(a1);
}

uint64_t ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFC00]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D50664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFBF8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D506F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFBE8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D5077C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver25txPowerConfiguration_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_5(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFBE8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D50808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t antenna::QMICommandDriver::getAccessoryType(antenna::QMICommandDriver *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  char *v7;
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t **v15;
  uint64_t **v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t **v22;
  uint64_t **v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t **v29;
  uint64_t **v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t **v36;
  uint64_t **v37;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  unsigned int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  _DWORD v49[2];
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v49[0] = 67109120;
    v49[1] = a2;
    _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Telephony IOKIT value: 0x%x\n", (uint8_t *)v49, 8u);
    if ((a2 & 2) == 0)
    {
LABEL_3:
      v5 = 0;
      if ((a2 & 4) == 0)
        goto LABEL_4;
LABEL_22:
      v15 = (uint64_t **)((char *)this + 112);
      v14 = (char *)*((_QWORD *)this + 14);
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            v16 = (uint64_t **)v14;
            v17 = *((_DWORD *)v14 + 7);
            if (v17 < 5)
              break;
            v14 = (char *)*v16;
            v15 = v16;
            if (!*v16)
              goto LABEL_29;
          }
          if (v17 == 4)
            break;
          v14 = (char *)v16[1];
          if (!v14)
          {
            v15 = v16 + 1;
            goto LABEL_29;
          }
        }
        v5 = *((_DWORD *)v16 + 8) | v5;
        if ((a2 & 8) != 0)
          goto LABEL_34;
      }
      else
      {
        v16 = (uint64_t **)((char *)this + 112);
LABEL_29:
        v18 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v18 + 28) = 4;
        *v18 = 0;
        v18[1] = 0;
        v18[2] = (uint64_t)v16;
        *v15 = v18;
        v19 = **((_QWORD **)this + 13);
        v20 = v18;
        if (v19)
        {
          *((_QWORD *)this + 13) = v19;
          v20 = *v15;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v20);
        ++*((_QWORD *)this + 15);
        v5 = *((_DWORD *)v18 + 8) | v5;
        if ((a2 & 8) != 0)
          goto LABEL_34;
      }
LABEL_5:
      if ((a2 & 0x10) == 0)
        goto LABEL_6;
LABEL_46:
      v29 = (uint64_t **)((char *)this + 112);
      v28 = (char *)*((_QWORD *)this + 14);
      if (v28)
      {
        while (1)
        {
          while (1)
          {
            v30 = (uint64_t **)v28;
            v31 = *((_DWORD *)v28 + 7);
            if (v31 < 0x11)
              break;
            v28 = (char *)*v30;
            v29 = v30;
            if (!*v30)
              goto LABEL_53;
          }
          if (v31 == 16)
            break;
          v28 = (char *)v30[1];
          if (!v28)
          {
            v29 = v30 + 1;
            goto LABEL_53;
          }
        }
        v5 = *((_DWORD *)v30 + 8) | v5;
        if ((a2 & 0x20) != 0)
          goto LABEL_58;
      }
      else
      {
        v30 = (uint64_t **)((char *)this + 112);
LABEL_53:
        v32 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v32 + 28) = 16;
        *v32 = 0;
        v32[1] = 0;
        v32[2] = (uint64_t)v30;
        *v29 = v32;
        v33 = **((_QWORD **)this + 13);
        v34 = v32;
        if (v33)
        {
          *((_QWORD *)this + 13) = v33;
          v34 = *v29;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v34);
        ++*((_QWORD *)this + 15);
        v5 = *((_DWORD *)v32 + 8) | v5;
        if ((a2 & 0x20) != 0)
          goto LABEL_58;
      }
LABEL_7:
      if ((_DWORD)v5)
        return v5;
      goto LABEL_70;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = (uint64_t **)((char *)this + 112);
  v7 = (char *)*((_QWORD *)this + 14);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = *((_DWORD *)v7 + 7);
        if (v10 < 3)
          break;
        v7 = (char *)*v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_17;
      }
      if (v10 == 2)
        break;
      v7 = (char *)v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_17;
      }
    }
    v5 = *((unsigned int *)v9 + 8);
    if ((a2 & 4) != 0)
      goto LABEL_22;
  }
  else
  {
    v9 = (uint64_t **)((char *)this + 112);
LABEL_17:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = 2;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *v8 = v11;
    v12 = **((_QWORD **)this + 13);
    v13 = v11;
    if (v12)
    {
      *((_QWORD *)this + 13) = v12;
      v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v13);
    ++*((_QWORD *)this + 15);
    v5 = *((unsigned int *)v11 + 8);
    if ((a2 & 4) != 0)
      goto LABEL_22;
  }
LABEL_4:
  if ((a2 & 8) == 0)
    goto LABEL_5;
LABEL_34:
  v22 = (uint64_t **)((char *)this + 112);
  v21 = (char *)*((_QWORD *)this + 14);
  if (v21)
  {
    while (1)
    {
      while (1)
      {
        v23 = (uint64_t **)v21;
        v24 = *((_DWORD *)v21 + 7);
        if (v24 < 9)
          break;
        v21 = (char *)*v23;
        v22 = v23;
        if (!*v23)
          goto LABEL_41;
      }
      if (v24 == 8)
        break;
      v21 = (char *)v23[1];
      if (!v21)
      {
        v22 = v23 + 1;
        goto LABEL_41;
      }
    }
    v5 = *((_DWORD *)v23 + 8) | v5;
    if ((a2 & 0x10) != 0)
      goto LABEL_46;
  }
  else
  {
    v23 = (uint64_t **)((char *)this + 112);
LABEL_41:
    v25 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v25 + 28) = 8;
    *v25 = 0;
    v25[1] = 0;
    v25[2] = (uint64_t)v23;
    *v22 = v25;
    v26 = **((_QWORD **)this + 13);
    v27 = v25;
    if (v26)
    {
      *((_QWORD *)this + 13) = v26;
      v27 = *v22;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v27);
    ++*((_QWORD *)this + 15);
    v5 = *((_DWORD *)v25 + 8) | v5;
    if ((a2 & 0x10) != 0)
      goto LABEL_46;
  }
LABEL_6:
  if ((a2 & 0x20) == 0)
    goto LABEL_7;
LABEL_58:
  v36 = (uint64_t **)((char *)this + 112);
  v35 = (char *)*((_QWORD *)this + 14);
  if (v35)
  {
    while (1)
    {
      while (1)
      {
        v37 = (uint64_t **)v35;
        v38 = *((_DWORD *)v35 + 7);
        if (v38 < 0x21)
          break;
        v35 = (char *)*v37;
        v36 = v37;
        if (!*v37)
          goto LABEL_65;
      }
      if (v38 == 32)
        break;
      v35 = (char *)v37[1];
      if (!v35)
      {
        v36 = v37 + 1;
        goto LABEL_65;
      }
    }
    v5 = *((_DWORD *)v37 + 8) | v5;
    if (!(_DWORD)v5)
      goto LABEL_70;
  }
  else
  {
    v37 = (uint64_t **)((char *)this + 112);
LABEL_65:
    v39 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v39 + 28) = 32;
    *v39 = 0;
    v39[1] = 0;
    v39[2] = (uint64_t)v37;
    *v36 = v39;
    v40 = **((_QWORD **)this + 13);
    v41 = v39;
    if (v40)
    {
      *((_QWORD *)this + 13) = v40;
      v41 = *v36;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v41);
    ++*((_QWORD *)this + 15);
    v5 = *((_DWORD *)v39 + 8) | v5;
    if (!(_DWORD)v5)
    {
LABEL_70:
      v43 = (uint64_t **)((char *)this + 112);
      v42 = (uint64_t *)*((_QWORD *)this + 14);
      if (v42)
      {
        while (1)
        {
          while (1)
          {
            v44 = (uint64_t **)v42;
            v45 = *((_DWORD *)v42 + 7);
            if (v45 < 2)
              break;
            v42 = *v44;
            v43 = v44;
            if (!*v44)
              goto LABEL_77;
          }
          if (v45)
            break;
          v42 = v44[1];
          if (!v42)
          {
            v43 = v44 + 1;
            goto LABEL_77;
          }
        }
        v46 = (uint64_t *)v44;
      }
      else
      {
        v44 = (uint64_t **)((char *)this + 112);
LABEL_77:
        v46 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v46 + 28) = 1;
        *v46 = 0;
        v46[1] = 0;
        v46[2] = (uint64_t)v44;
        *v43 = v46;
        v47 = **((_QWORD **)this + 13);
        v48 = v46;
        if (v47)
        {
          *((_QWORD *)this + 13) = v47;
          v48 = *v43;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 14), v48);
        ++*((_QWORD *)this + 15);
      }
      return *((unsigned int *)v46 + 8);
    }
  }
  return v5;
}

void antenna::QMICommandDriver::e75AccessoryStatusRF_sync(antenna::QMICommandDriver *a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  char *v7;
  char *v8;
  const void **v9;
  _WORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  _WORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  const char *v23;
  xpc_object_t value;
  __int16 v25;
  xpc_object_t v26;
  int v27;
  int AccessoryType;
  NSObject *v29;
  const void **v30;
  const void **v31;
  const void **v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  char *v43;
  _DWORD *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  const void **v56;
  _OWORD *v57;
  const void **v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_weak_owners;
  unint64_t v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t v73;
  NSObject *v74;
  void *v75;
  void *aBlock;
  NSObject *object;
  char v78[32];
  _QWORD v79[2];
  void (*v80)(uint64_t, _WORD *);
  void *v81;
  antenna::QMICommandDriver *v82;
  xpc_object_t *v83;
  __int128 v84;
  __int128 v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  void *v90;
  _QWORD v91[5];
  uint8_t buf[8];
  uint64_t v93;
  void (*v94)(_QWORD *, uint64_t);
  void *v95;
  antenna::QMICommandDriver *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *v99;
  dispatch_object_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84 = v6;
  v85 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v84);
  v79[0] = MEMORY[0x1E0C809B0];
  v79[1] = 0x40000000;
  v80 = ___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  v81 = &__block_descriptor_tmp_54_1;
  v82 = a1;
  v83 = a2;
  v7 = (char *)*((_QWORD *)&v84 + 1);
  v8 = (char *)v85;
  v9 = (const void **)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1) != (_QWORD)v85)
  {
    v9 = (const void **)*((_QWORD *)&v84 + 1);
    while (*((_BYTE *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v85)
        goto LABEL_9;
    }
  }
  if (v9 == (const void **)v85)
  {
LABEL_9:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[8] = 1;
    *(_QWORD *)v11 = off_1E66DC1E0;
    *((_WORD *)v11 + 5) = 0;
    v13 = v11 + 10;
    if ((unint64_t)v8 < *((_QWORD *)&v85 + 1))
    {
      *(_QWORD *)v8 = v11;
      v14 = (uint64_t)(v8 + 8);
LABEL_22:
      *(_QWORD *)&v85 = v14;
      v80((uint64_t)v79, v13);
      goto LABEL_23;
    }
    v15 = v8 - v7;
    v16 = (v8 - v7) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v18 = *((_QWORD *)&v85 + 1) - (_QWORD)v7;
    if ((uint64_t)(*((_QWORD *)&v85 + 1) - (_QWORD)v7) >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v12;
      v14 = (uint64_t)(v21 + 1);
      if (v7 == v8)
      {
LABEL_20:
        *((_QWORD *)&v84 + 1) = v21;
        *(_QWORD *)&v85 = v14;
        *((_QWORD *)&v85 + 1) = v22;
        if (!v7)
          goto LABEL_22;
LABEL_21:
        operator delete(v7);
        goto LABEL_22;
      }
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      v22 = 0;
      *(_QWORD *)(8 * v16) = v12;
      v14 = 8 * v16 + 8;
      if (v7 == v8)
        goto LABEL_20;
    }
    if ((unint64_t)(v15 - 8) < 0x58)
      goto LABEL_116;
    if ((unint64_t)(v7 - v20) < 0x20)
      goto LABEL_116;
    v33 = ((unint64_t)(v15 - 8) >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v8[-v34];
    v21 = (_QWORD *)((char *)v21 - v34);
    v36 = &v20[8 * v16 - 16];
    v37 = v8 - 16;
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 4;
    }
    while (v38);
    v8 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_116:
      do
      {
        v40 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v21 = v40;
      }
      while (v8 != v7);
    }
    v7 = (char *)*((_QWORD *)&v84 + 1);
    *((_QWORD *)&v84 + 1) = v21;
    *(_QWORD *)&v85 = v14;
    *((_QWORD *)&v85 + 1) = v22;
    if (!v7)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v10)
    __cxa_bad_cast();
  ___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v79, v10 + 5);
LABEL_23:
  v23 = (const char *)*MEMORY[0x1E0DDFAF8];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFAF8]))
    goto LABEL_73;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB28]);
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  v25 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  if (!v25)
    goto LABEL_73;
  v26 = xpc_dictionary_get_value(*a2, v23);
  *(_QWORD *)buf = v26;
  if (v26)
    xpc_retain(v26);
  else
    *(_QWORD *)buf = xpc_null_create();
  v27 = xpc::dyn_cast_or_default();
  AccessoryType = antenna::QMICommandDriver::getAccessoryType(a1, v27);
  xpc_release(*(xpc_object_t *)buf);
  v29 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = AccessoryType;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = AccessoryType;
    _os_log_debug_impl(&dword_1B3CB3000, v29, OS_LOG_TYPE_DEBUG, "#D accessoryType for RF: 0x%08x(%d)\n", buf, 0xEu);
    v30 = (const void **)*((_QWORD *)&v84 + 1);
    v31 = (const void **)v85;
    v32 = (const void **)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1) == (_QWORD)v85)
      goto LABEL_47;
  }
  else
  {
    v30 = (const void **)*((_QWORD *)&v84 + 1);
    v31 = (const void **)v85;
    v32 = (const void **)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1) == (_QWORD)v85)
      goto LABEL_47;
  }
  v32 = v30;
  while (*((_BYTE *)*v32 + 8) != 16)
  {
    if (++v32 == v31)
      goto LABEL_50;
  }
LABEL_47:
  if (v32 == v31)
  {
LABEL_50:
    v42 = (char *)operator new(0x10uLL);
    v43 = v42;
    v42[8] = 16;
    *(_QWORD *)v42 = off_1E66DC230;
    *((_DWORD *)v42 + 3) = 0;
    v44 = v42 + 12;
    if ((unint64_t)v31 < *((_QWORD *)&v85 + 1))
    {
      *v31 = v42;
      v45 = (uint64_t)(v31 + 1);
LABEL_72:
      *(_QWORD *)&v85 = v45;
      *v44 = AccessoryType;
      goto LABEL_73;
    }
    v46 = (char *)v31 - (char *)v30;
    v47 = v31 - v30;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v49 = *((_QWORD *)&v85 + 1) - (_QWORD)v30;
    if ((uint64_t)(*((_QWORD *)&v85 + 1) - (_QWORD)v30) >> 2 > v48)
      v48 = v49 >> 2;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v51 = operator new(8 * v50);
      v52 = &v51[8 * v47];
      v53 = &v51[8 * v50];
      *v52 = v43;
      v45 = (uint64_t)(v52 + 1);
      if (v30 == v31)
        goto LABEL_70;
    }
    else
    {
      v51 = 0;
      v52 = (_QWORD *)(8 * v47);
      v53 = 0;
      *(_QWORD *)(8 * v47) = v43;
      v45 = 8 * v47 + 8;
      if (v30 == v31)
      {
LABEL_70:
        *((_QWORD *)&v84 + 1) = v52;
        *(_QWORD *)&v85 = v45;
        *((_QWORD *)&v85 + 1) = v53;
        if (v30)
          operator delete(v30);
        goto LABEL_72;
      }
    }
    if ((unint64_t)(v46 - 8) < 0x58)
      goto LABEL_117;
    if ((unint64_t)((char *)v30 - v51) < 0x20)
      goto LABEL_117;
    v54 = ((unint64_t)(v46 - 8) >> 3) + 1;
    v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
    v56 = &v31[v55 / 0xFFFFFFFFFFFFFFF8];
    v52 = (_QWORD *)((char *)v52 - v55);
    v57 = &v51[8 * v47 - 16];
    v58 = v31 - 2;
    v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *(_OWORD *)v58;
      *(v57 - 1) = *((_OWORD *)v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 4;
      v59 -= 4;
    }
    while (v59);
    v31 = v56;
    if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_117:
      do
      {
        v61 = (uint64_t)*--v31;
        *--v52 = v61;
      }
      while (v31 != v30);
    }
    v30 = (const void **)*((_QWORD *)&v84 + 1);
    goto LABEL_70;
  }
  if (!v41)
    __cxa_bad_cast();
  v41[3] = AccessoryType;
LABEL_73:
  qmi::MutableMessageBase::MutableMessageBase();
  v62 = *(void **)a3;
  if (*(_QWORD *)a3)
    v62 = _Block_copy(v62);
  v63 = *(NSObject **)(a3 + 8);
  aBlock = v62;
  object = v63;
  if (v63)
    dispatch_retain(v63);
  v64 = (std::__shared_weak_count *)*((_QWORD *)a1 + 10);
  v65 = MEMORY[0x1E0C809B0];
  if (!v64 || (v66 = *((_QWORD *)a1 + 9), (v67 = std::__shared_weak_count::lock(v64)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v68 = v67;
  p_shared_weak_owners = (unint64_t *)&v67->__shared_weak_owners_;
  do
    v70 = __ldxr(p_shared_weak_owners);
  while (__stxr(v70 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v67->__shared_owners_;
  do
    v72 = __ldaxr(p_shared_owners);
  while (__stlxr(v72 - 1, p_shared_owners));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v68);
  }
  *(_QWORD *)buf = v65;
  v93 = 1174405120;
  v94 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm19AccessoryAttachment7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v95 = &__block_descriptor_tmp_117_1;
  v96 = a1;
  v97 = v66;
  v98 = v68;
  do
    v73 = __ldxr(p_shared_weak_owners);
  while (__stxr(v73 + 1, p_shared_weak_owners));
  if (aBlock)
  {
    v74 = object;
    v99 = _Block_copy(aBlock);
    v100 = object;
    if (!object)
      goto LABEL_90;
    goto LABEL_89;
  }
  v74 = object;
  v99 = 0;
  v100 = object;
  if (object)
LABEL_89:
    dispatch_retain(v74);
LABEL_90:
  v86 = (_QWORD *)((char *)a1 + 184);
  v87 = QMIServiceMsg::create();
  v88 = 25000;
  v89 = 0;
  v90 = 0;
  v91[0] = v65;
  v91[1] = 0x40000000;
  v91[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v91[3] = &unk_1E66DBD60;
  v91[4] = buf;
  v75 = _Block_copy(v91);
  v90 = v75;
  if (v87)
  {
    qmi::Client::send();
    v75 = v90;
  }
  if (v75)
    _Block_release(v75);
  if (v100)
    dispatch_release(v100);
  if (v99)
    _Block_release(v99);
  if (v98)
    std::__shared_weak_count::__release_weak(v98);
  std::__shared_weak_count::__release_weak(v68);
  if (v74)
    dispatch_release(v74);
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v78);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v84);
}

void sub_1B3D514B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN7antenna16QMICommandDriver25e75AccessoryStatusRF_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  const char *v5;
  xpc_object_t value;
  NSObject *v7;
  xpc_object_t v8;
  int v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (const char *)*MEMORY[0x1E0DDFB28];
  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), (const char *)*MEMORY[0x1E0DDFB28]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v7 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), v5);
    v11 = v8;
    if (v8)
      xpc_retain(v8);
    else
      v11 = xpc_null_create();
    v9 = xpc::dyn_cast_or_default();
    v10 = "detached";
    if (v9)
      v10 = "attached";
    LODWORD(object[0]) = 136315138;
    *(xpc_object_t *)((char *)object + 4) = (xpc_object_t)v10;
    _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D accessory for RF: %s", (uint8_t *)object, 0xCu);
    xpc_release(v11);
  }
}

void sub_1B3D5171C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::QMICommandDriver::e75AccessoryStatusARTD_sync(antenna::QMICommandDriver *a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  char *v7;
  char *v8;
  const void **v9;
  _WORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  _WORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  const char *v23;
  xpc_object_t value;
  __int16 v25;
  xpc_object_t v26;
  int v27;
  int AccessoryType;
  NSObject *v29;
  const void **v30;
  const void **v31;
  const void **v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  char *v43;
  _DWORD *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  const void **v56;
  _OWORD *v57;
  const void **v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_weak_owners;
  unint64_t v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t v73;
  NSObject *v74;
  void *v75;
  void *aBlock;
  NSObject *object;
  char v78[32];
  _QWORD v79[2];
  void (*v80)(uint64_t, _WORD *);
  void *v81;
  antenna::QMICommandDriver *v82;
  xpc_object_t *v83;
  __int128 v84;
  __int128 v85;
  _QWORD *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  void *v90;
  _QWORD v91[5];
  uint8_t buf[8];
  uint64_t v93;
  void (*v94)(_QWORD *, uint64_t);
  void *v95;
  antenna::QMICommandDriver *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  void *v99;
  dispatch_object_t v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84 = v6;
  v85 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v84);
  v79[0] = MEMORY[0x1E0C809B0];
  v79[1] = 0x40000000;
  v80 = ___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  v81 = &__block_descriptor_tmp_59_1;
  v82 = a1;
  v83 = a2;
  v7 = (char *)*((_QWORD *)&v84 + 1);
  v8 = (char *)v85;
  v9 = (const void **)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1) != (_QWORD)v85)
  {
    v9 = (const void **)*((_QWORD *)&v84 + 1);
    while (*((_BYTE *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v85)
        goto LABEL_9;
    }
  }
  if (v9 == (const void **)v85)
  {
LABEL_9:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[8] = 1;
    *(_QWORD *)v11 = off_1E66DC2B0;
    *((_WORD *)v11 + 5) = 0;
    v13 = v11 + 10;
    if ((unint64_t)v8 < *((_QWORD *)&v85 + 1))
    {
      *(_QWORD *)v8 = v11;
      v14 = (uint64_t)(v8 + 8);
LABEL_22:
      *(_QWORD *)&v85 = v14;
      v80((uint64_t)v79, v13);
      goto LABEL_23;
    }
    v15 = v8 - v7;
    v16 = (v8 - v7) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v18 = *((_QWORD *)&v85 + 1) - (_QWORD)v7;
    if ((uint64_t)(*((_QWORD *)&v85 + 1) - (_QWORD)v7) >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v12;
      v14 = (uint64_t)(v21 + 1);
      if (v7 == v8)
      {
LABEL_20:
        *((_QWORD *)&v84 + 1) = v21;
        *(_QWORD *)&v85 = v14;
        *((_QWORD *)&v85 + 1) = v22;
        if (!v7)
          goto LABEL_22;
LABEL_21:
        operator delete(v7);
        goto LABEL_22;
      }
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      v22 = 0;
      *(_QWORD *)(8 * v16) = v12;
      v14 = 8 * v16 + 8;
      if (v7 == v8)
        goto LABEL_20;
    }
    if ((unint64_t)(v15 - 8) < 0x58)
      goto LABEL_116;
    if ((unint64_t)(v7 - v20) < 0x20)
      goto LABEL_116;
    v33 = ((unint64_t)(v15 - 8) >> 3) + 1;
    v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    v35 = &v8[-v34];
    v21 = (_QWORD *)((char *)v21 - v34);
    v36 = &v20[8 * v16 - 16];
    v37 = v8 - 16;
    v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v39 = *(_OWORD *)v37;
      *(v36 - 1) = *((_OWORD *)v37 - 1);
      *v36 = v39;
      v36 -= 2;
      v37 -= 32;
      v38 -= 4;
    }
    while (v38);
    v8 = v35;
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_116:
      do
      {
        v40 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v21 = v40;
      }
      while (v8 != v7);
    }
    v7 = (char *)*((_QWORD *)&v84 + 1);
    *((_QWORD *)&v84 + 1) = v21;
    *(_QWORD *)&v85 = v14;
    *((_QWORD *)&v85 + 1) = v22;
    if (!v7)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v10)
    __cxa_bad_cast();
  ___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v79, v10 + 5);
LABEL_23:
  v23 = (const char *)*MEMORY[0x1E0DDFAF8];
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFAF8]))
    goto LABEL_73;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB28]);
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  v25 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  if (!v25)
    goto LABEL_73;
  v26 = xpc_dictionary_get_value(*a2, v23);
  *(_QWORD *)buf = v26;
  if (v26)
    xpc_retain(v26);
  else
    *(_QWORD *)buf = xpc_null_create();
  v27 = xpc::dyn_cast_or_default();
  AccessoryType = antenna::QMICommandDriver::getAccessoryType(a1, v27);
  xpc_release(*(xpc_object_t *)buf);
  v29 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = AccessoryType;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = AccessoryType;
    _os_log_debug_impl(&dword_1B3CB3000, v29, OS_LOG_TYPE_DEBUG, "#D accessoryType for ARTD: 0x%08x(%d)\n", buf, 0xEu);
    v30 = (const void **)*((_QWORD *)&v84 + 1);
    v31 = (const void **)v85;
    v32 = (const void **)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1) == (_QWORD)v85)
      goto LABEL_47;
  }
  else
  {
    v30 = (const void **)*((_QWORD *)&v84 + 1);
    v31 = (const void **)v85;
    v32 = (const void **)*((_QWORD *)&v84 + 1);
    if (*((_QWORD *)&v84 + 1) == (_QWORD)v85)
      goto LABEL_47;
  }
  v32 = v30;
  while (*((_BYTE *)*v32 + 8) != 16)
  {
    if (++v32 == v31)
      goto LABEL_50;
  }
LABEL_47:
  if (v32 == v31)
  {
LABEL_50:
    v42 = (char *)operator new(0x10uLL);
    v43 = v42;
    v42[8] = 16;
    *(_QWORD *)v42 = off_1E66DC300;
    *((_DWORD *)v42 + 3) = 0;
    v44 = v42 + 12;
    if ((unint64_t)v31 < *((_QWORD *)&v85 + 1))
    {
      *v31 = v42;
      v45 = (uint64_t)(v31 + 1);
LABEL_72:
      *(_QWORD *)&v85 = v45;
      *v44 = AccessoryType;
      goto LABEL_73;
    }
    v46 = (char *)v31 - (char *)v30;
    v47 = v31 - v30;
    v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v49 = *((_QWORD *)&v85 + 1) - (_QWORD)v30;
    if ((uint64_t)(*((_QWORD *)&v85 + 1) - (_QWORD)v30) >> 2 > v48)
      v48 = v49 >> 2;
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v48;
    if (v50)
    {
      if (v50 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v51 = operator new(8 * v50);
      v52 = &v51[8 * v47];
      v53 = &v51[8 * v50];
      *v52 = v43;
      v45 = (uint64_t)(v52 + 1);
      if (v30 == v31)
        goto LABEL_70;
    }
    else
    {
      v51 = 0;
      v52 = (_QWORD *)(8 * v47);
      v53 = 0;
      *(_QWORD *)(8 * v47) = v43;
      v45 = 8 * v47 + 8;
      if (v30 == v31)
      {
LABEL_70:
        *((_QWORD *)&v84 + 1) = v52;
        *(_QWORD *)&v85 = v45;
        *((_QWORD *)&v85 + 1) = v53;
        if (v30)
          operator delete(v30);
        goto LABEL_72;
      }
    }
    if ((unint64_t)(v46 - 8) < 0x58)
      goto LABEL_117;
    if ((unint64_t)((char *)v30 - v51) < 0x20)
      goto LABEL_117;
    v54 = ((unint64_t)(v46 - 8) >> 3) + 1;
    v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
    v56 = &v31[v55 / 0xFFFFFFFFFFFFFFF8];
    v52 = (_QWORD *)((char *)v52 - v55);
    v57 = &v51[8 * v47 - 16];
    v58 = v31 - 2;
    v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v60 = *(_OWORD *)v58;
      *(v57 - 1) = *((_OWORD *)v58 - 1);
      *v57 = v60;
      v57 -= 2;
      v58 -= 4;
      v59 -= 4;
    }
    while (v59);
    v31 = v56;
    if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_117:
      do
      {
        v61 = (uint64_t)*--v31;
        *--v52 = v61;
      }
      while (v31 != v30);
    }
    v30 = (const void **)*((_QWORD *)&v84 + 1);
    goto LABEL_70;
  }
  if (!v41)
    __cxa_bad_cast();
  v41[3] = AccessoryType;
LABEL_73:
  qmi::MutableMessageBase::MutableMessageBase();
  v62 = *(void **)a3;
  if (*(_QWORD *)a3)
    v62 = _Block_copy(v62);
  v63 = *(NSObject **)(a3 + 8);
  aBlock = v62;
  object = v63;
  if (v63)
    dispatch_retain(v63);
  v64 = (std::__shared_weak_count *)*((_QWORD *)a1 + 10);
  v65 = MEMORY[0x1E0C809B0];
  if (!v64 || (v66 = *((_QWORD *)a1 + 9), (v67 = std::__shared_weak_count::lock(v64)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v68 = v67;
  p_shared_weak_owners = (unint64_t *)&v67->__shared_weak_owners_;
  do
    v70 = __ldxr(p_shared_weak_owners);
  while (__stxr(v70 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v67->__shared_owners_;
  do
    v72 = __ldaxr(p_shared_owners);
  while (__stlxr(v72 - 1, p_shared_owners));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
    std::__shared_weak_count::__release_weak(v68);
  }
  *(_QWORD *)buf = v65;
  v93 = 1174405120;
  v94 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm23AccessoryAttachmentARTD7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v95 = &__block_descriptor_tmp_119_0;
  v96 = a1;
  v97 = v66;
  v98 = v68;
  do
    v73 = __ldxr(p_shared_weak_owners);
  while (__stxr(v73 + 1, p_shared_weak_owners));
  if (aBlock)
  {
    v74 = object;
    v99 = _Block_copy(aBlock);
    v100 = object;
    if (!object)
      goto LABEL_90;
    goto LABEL_89;
  }
  v74 = object;
  v99 = 0;
  v100 = object;
  if (object)
LABEL_89:
    dispatch_retain(v74);
LABEL_90:
  v86 = (_QWORD *)((char *)a1 + 184);
  v87 = QMIServiceMsg::create();
  v88 = 25000;
  v89 = 0;
  v90 = 0;
  v91[0] = v65;
  v91[1] = 0x40000000;
  v91[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v91[3] = &unk_1E66DBD60;
  v91[4] = buf;
  v75 = _Block_copy(v91);
  v90 = v75;
  if (v87)
  {
    qmi::Client::send();
    v75 = v90;
  }
  if (v75)
    _Block_release(v75);
  if (v100)
    dispatch_release(v100);
  if (v99)
    _Block_release(v99);
  if (v98)
    std::__shared_weak_count::__release_weak(v98);
  std::__shared_weak_count::__release_weak(v68);
  if (v74)
    dispatch_release(v74);
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v78);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v84);
}

void sub_1B3D51EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN7antenna16QMICommandDriver27e75AccessoryStatusARTD_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  uint64_t v4;
  const char *v5;
  xpc_object_t value;
  NSObject *v7;
  xpc_object_t v8;
  int v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (const char *)*MEMORY[0x1E0DDFB28];
  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), (const char *)*MEMORY[0x1E0DDFB28]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v7 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 40), v5);
    v11 = v8;
    if (v8)
      xpc_retain(v8);
    else
      v11 = xpc_null_create();
    v9 = xpc::dyn_cast_or_default();
    v10 = "detached";
    if (v9)
      v10 = "attached";
    LODWORD(object[0]) = 136315138;
    *(xpc_object_t *)((char *)object + 4) = (xpc_object_t)v10;
    _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D accessory for ARTD: %s", (uint8_t *)object, 0xCu);
    xpc_release(v11);
  }
}

void sub_1B3D52160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void antenna::QMICommandDriver::antennaSwitch_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  char *v7;
  char *v8;
  const void **v9;
  _WORD *v10;
  _BYTE *v11;
  _BYTE *v12;
  _WORD *v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  char *v24;
  const void **v25;
  char *v26;
  _WORD *v27;
  char *v28;
  char *v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_weak_owners;
  unint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  _OWORD *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  void *aBlock;
  NSObject *object;
  char v70[32];
  _QWORD v71[5];
  _QWORD v72[2];
  void (*v73)(uint64_t, _WORD *);
  void *v74;
  xpc_object_t *v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  void *v82;
  _QWORD v83[6];
  std::__shared_weak_count *v84;
  void *v85;
  dispatch_object_t v86;
  _QWORD v87[6];

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v76 = v6;
  v77 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v76);
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB40]))
    goto LABEL_24;
  v72[0] = MEMORY[0x1E0C809B0];
  v72[1] = 0x40000000;
  v73 = ___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  v74 = &__block_descriptor_tmp_64_1;
  v75 = a2;
  v7 = (char *)*((_QWORD *)&v76 + 1);
  v8 = (char *)v77;
  v9 = (const void **)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1) != (_QWORD)v77)
  {
    v9 = (const void **)*((_QWORD *)&v76 + 1);
    while (*((_BYTE *)*v9 + 8) != 16)
    {
      if (++v9 == (const void **)v77)
        goto LABEL_10;
    }
  }
  if (v9 == (const void **)v77)
  {
LABEL_10:
    v11 = operator new(0x10uLL);
    v12 = v11;
    v11[8] = 16;
    *(_QWORD *)v11 = off_1E66DC380;
    *((_WORD *)v11 + 5) = 0;
    v13 = v11 + 10;
    if ((unint64_t)v8 < *((_QWORD *)&v77 + 1))
    {
      *(_QWORD *)v8 = v11;
      v14 = (uint64_t)(v8 + 8);
LABEL_23:
      *(_QWORD *)&v77 = v14;
      v73((uint64_t)v72, v13);
      goto LABEL_24;
    }
    v15 = v8 - v7;
    v16 = (v8 - v7) >> 3;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      goto LABEL_102;
    v18 = *((_QWORD *)&v77 + 1) - (_QWORD)v7;
    if ((uint64_t)(*((_QWORD *)&v77 + 1) - (_QWORD)v7) >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        goto LABEL_103;
      v20 = operator new(8 * v19);
      v21 = &v20[8 * v16];
      v22 = &v20[8 * v19];
      *v21 = v12;
      v14 = (uint64_t)(v21 + 1);
      if (v7 == v8)
      {
LABEL_21:
        *((_QWORD *)&v76 + 1) = v21;
        *(_QWORD *)&v77 = v14;
        *((_QWORD *)&v77 + 1) = v22;
        if (!v7)
          goto LABEL_23;
LABEL_22:
        operator delete(v7);
        goto LABEL_23;
      }
    }
    else
    {
      v20 = 0;
      v21 = (_QWORD *)(8 * v16);
      v22 = 0;
      *(_QWORD *)(8 * v16) = v12;
      v14 = 8 * v16 + 8;
      if (v7 == v8)
        goto LABEL_21;
    }
    if ((unint64_t)(v15 - 8) < 0x58)
      goto LABEL_106;
    if ((unint64_t)(v7 - v20) < 0x20)
      goto LABEL_106;
    v52 = ((unint64_t)(v15 - 8) >> 3) + 1;
    v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
    v54 = &v8[-v53];
    v21 = (_QWORD *)((char *)v21 - v53);
    v55 = &v20[8 * v16 - 16];
    v56 = v8 - 16;
    v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v58 = *(_OWORD *)v56;
      *(v55 - 1) = *((_OWORD *)v56 - 1);
      *v55 = v58;
      v55 -= 2;
      v56 -= 32;
      v57 -= 4;
    }
    while (v57);
    v8 = v54;
    if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_106:
      do
      {
        v59 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *--v21 = v59;
      }
      while (v8 != v7);
    }
    v7 = (char *)*((_QWORD *)&v76 + 1);
    *((_QWORD *)&v76 + 1) = v21;
    *(_QWORD *)&v77 = v14;
    *((_QWORD *)&v77 + 1) = v22;
    if (!v7)
      goto LABEL_23;
    goto LABEL_22;
  }
  if (!v10)
    goto LABEL_101;
  ___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v72, v10 + 5);
LABEL_24:
  if (!xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB80]))
    goto LABEL_48;
  v71[0] = MEMORY[0x1E0C809B0];
  v71[1] = 0x40000000;
  v71[2] = ___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  v71[3] = &__block_descriptor_tmp_66;
  v71[4] = a2;
  v23 = (char *)*((_QWORD *)&v76 + 1);
  v24 = (char *)v77;
  v25 = (const void **)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1) != (_QWORD)v77)
  {
    v25 = (const void **)*((_QWORD *)&v76 + 1);
    while (*((_BYTE *)*v25 + 8) != 17)
    {
      if (++v25 == (const void **)v77)
        goto LABEL_33;
    }
  }
  if (v25 == (const void **)v77)
  {
LABEL_33:
    v28 = (char *)operator new(0x10uLL);
    v29 = v28;
    v28[8] = 17;
    *(_QWORD *)v28 = off_1E66DC3D0;
    *((_WORD *)v28 + 5) = 0;
    v27 = v28 + 10;
    if ((unint64_t)v24 < *((_QWORD *)&v77 + 1))
    {
      *(_QWORD *)v24 = v28;
      *(_QWORD *)&v77 = v24 + 8;
      goto LABEL_47;
    }
    v30 = v24 - v23;
    v31 = (v24 - v23) >> 3;
    v32 = v31 + 1;
    if (!((unint64_t)(v31 + 1) >> 61))
    {
      v33 = *((_QWORD *)&v77 + 1) - (_QWORD)v23;
      if ((uint64_t)(*((_QWORD *)&v77 + 1) - (_QWORD)v23) >> 2 > v32)
        v32 = v33 >> 2;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (!v34)
      {
        v35 = 0;
        v36 = (_QWORD *)(8 * v31);
        v37 = 0;
        *(_QWORD *)(8 * v31) = v29;
        v38 = 8 * v31 + 8;
        if (v23 == v24)
        {
LABEL_44:
          *((_QWORD *)&v76 + 1) = v36;
          *(_QWORD *)&v77 = v38;
          *((_QWORD *)&v77 + 1) = v37;
          if (!v23)
          {
LABEL_46:
            *(_QWORD *)&v77 = v38;
            goto LABEL_47;
          }
LABEL_45:
          operator delete(v23);
          goto LABEL_46;
        }
LABEL_92:
        if ((unint64_t)(v30 - 8) < 0x58)
          goto LABEL_107;
        if ((unint64_t)(v23 - v35) < 0x20)
          goto LABEL_107;
        v60 = ((unint64_t)(v30 - 8) >> 3) + 1;
        v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
        v62 = &v24[-v61];
        v36 = (_QWORD *)((char *)v36 - v61);
        v63 = &v35[8 * v31 - 16];
        v64 = v24 - 16;
        v65 = v60 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v66 = *(_OWORD *)v64;
          *(v63 - 1) = *((_OWORD *)v64 - 1);
          *v63 = v66;
          v63 -= 2;
          v64 -= 32;
          v65 -= 4;
        }
        while (v65);
        v24 = v62;
        if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_107:
          do
          {
            v67 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v36 = v67;
          }
          while (v24 != v23);
        }
        v23 = (char *)*((_QWORD *)&v76 + 1);
        *((_QWORD *)&v76 + 1) = v36;
        *(_QWORD *)&v77 = v38;
        *((_QWORD *)&v77 + 1) = v37;
        if (!v23)
          goto LABEL_46;
        goto LABEL_45;
      }
      if (!(v34 >> 61))
      {
        v35 = operator new(8 * v34);
        v36 = &v35[8 * v31];
        v37 = &v35[8 * v34];
        *v36 = v29;
        v38 = (uint64_t)(v36 + 1);
        if (v23 == v24)
          goto LABEL_44;
        goto LABEL_92;
      }
LABEL_103:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_102:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  if (!v26)
LABEL_101:
    __cxa_bad_cast();
  v27 = v26 + 10;
LABEL_47:
  ___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2((uint64_t)v71, v27);
LABEL_48:
  qmi::MutableMessageBase::MutableMessageBase();
  v39 = *(void **)a3;
  if (*(_QWORD *)a3)
    v39 = _Block_copy(v39);
  v40 = *(NSObject **)(a3 + 8);
  aBlock = v39;
  object = v40;
  if (v40)
    dispatch_retain(v40);
  v41 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v41 || (v42 = *(_QWORD *)(a1 + 72), (v43 = std::__shared_weak_count::lock(v41)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v44 = v43;
  p_shared_weak_owners = (unint64_t *)&v43->__shared_weak_owners_;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v43->__shared_owners_;
  do
    v48 = __ldaxr(p_shared_owners);
  while (__stlxr(v48 - 1, p_shared_owners));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v44);
  }
  v83[0] = MEMORY[0x1E0C809B0];
  v83[1] = 1174405120;
  v83[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm13AntennaConfig7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v83[3] = &__block_descriptor_tmp_121_0;
  v83[4] = a1;
  v83[5] = v42;
  v84 = v44;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  if (aBlock)
  {
    v50 = object;
    v85 = _Block_copy(aBlock);
    v86 = object;
    if (!object)
      goto LABEL_65;
    goto LABEL_64;
  }
  v50 = object;
  v85 = 0;
  v86 = object;
  if (object)
LABEL_64:
    dispatch_retain(v50);
LABEL_65:
  v78 = a1 + 184;
  v79 = QMIServiceMsg::create();
  v80 = 25000;
  v81 = 0;
  v82 = 0;
  v87[0] = MEMORY[0x1E0C809B0];
  v87[1] = 0x40000000;
  v87[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v87[3] = &unk_1E66DBD60;
  v87[4] = v83;
  v51 = _Block_copy(v87);
  v82 = v51;
  if (v79)
  {
    qmi::Client::send();
    v51 = v82;
  }
  if (v51)
    _Block_release(v51);
  if (v86)
    dispatch_release(v86);
  if (v85)
    _Block_release(v85);
  if (v84)
    std::__shared_weak_count::__release_weak(v84);
  std::__shared_weak_count::__release_weak(v44);
  if (v50)
    dispatch_release(v50);
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v70);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v76);
}

void sub_1B3D52860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41)
{
  std::__shared_weak_count *v41;

  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a29);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a41);
  if (a40)
    std::__shared_weak_count::__release_weak(a40);
  std::__shared_weak_count::__release_weak(v41);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  _Unwind_Resume(a1);
}

void sub_1B3D528E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFB40]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D5296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver18antennaSwitch_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFB80]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D529F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::wiredPortNotification_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  void *v7;
  char *v8;
  char *v9;
  const void **v10;
  char *v11;
  _BYTE *v12;
  NSObject *v13;
  xpc_object_t v14;
  void *v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  char *v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  void *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  void *aBlock;
  NSObject *object;
  char v59[32];
  _QWORD v60[5];
  __int128 v61;
  __int128 v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  void *v67;
  void *block[3];
  void *v69;
  void *v70;
  xpc_object_t v71;
  std::__shared_weak_count *v72;
  void *v73;
  dispatch_object_t v74;
  __int128 buf;
  void (*v76)(uint64_t, uint64_t);
  void *v77;
  void **v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFAA8]))
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v61 = v6;
    v62 = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v61);
    v7 = (void *)MEMORY[0x1E0C809B0];
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 0x40000000;
    v60[2] = ___ZN7antenna16QMICommandDriver26wiredPortNotification_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v60[3] = &__block_descriptor_tmp_68_1;
    v60[4] = a2;
    v8 = (char *)*((_QWORD *)&v61 + 1);
    v9 = (char *)v62;
    v10 = (const void **)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
    {
      v10 = (const void **)*((_QWORD *)&v61 + 1);
      while (*((_BYTE *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v62)
          goto LABEL_13;
      }
    }
    if (v10 != (const void **)v62)
    {
      if (!v11)
        __cxa_bad_cast();
      v12 = v11 + 9;
LABEL_27:
      ___ZN7antenna16QMICommandDriver26wiredPortNotification_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v60, v12);
      qmi::MutableMessageBase::MutableMessageBase();
      v27 = *(void **)a3;
      if (*(_QWORD *)a3)
        v27 = _Block_copy(v27);
      v28 = *(NSObject **)(a3 + 8);
      aBlock = v27;
      object = v28;
      if (v28)
        dispatch_retain(v28);
      v29 = (std::__shared_weak_count *)a1[10];
      if (!v29 || (v30 = (void *)a1[9], (v31 = std::__shared_weak_count::lock(v29)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v32 = v31;
      p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v34 = __ldxr(p_shared_weak_owners);
      while (__stxr(v34 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      block[0] = v7;
      block[1] = (void *)1174405120;
      block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm21WiredPortNotification7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      v69 = &__block_descriptor_tmp_123_0;
      v70 = a1;
      v71 = v30;
      v72 = v32;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
      if (aBlock)
      {
        v38 = object;
        v73 = _Block_copy(aBlock);
        v74 = object;
        if (!object)
        {
LABEL_44:
          v63 = a1 + 23;
          v64 = QMIServiceMsg::create();
          v65 = 25000;
          v66 = 0;
          v67 = 0;
          *(_QWORD *)&buf = v7;
          *((_QWORD *)&buf + 1) = 0x40000000;
          v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
          v77 = &unk_1E66DBD60;
          v78 = block;
          v39 = _Block_copy(&buf);
          v67 = v39;
          if (v64)
          {
            qmi::Client::send();
            v39 = v67;
          }
          if (v39)
            _Block_release(v39);
          if (v74)
            dispatch_release(v74);
          if (v73)
            _Block_release(v73);
          if (v72)
            std::__shared_weak_count::__release_weak(v72);
          std::__shared_weak_count::__release_weak(v32);
          if (v38)
            dispatch_release(v38);
          if (aBlock)
            _Block_release(aBlock);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v59);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v61);
          return;
        }
      }
      else
      {
        v38 = object;
        v73 = 0;
        v74 = object;
        if (!object)
          goto LABEL_44;
      }
      dispatch_retain(v38);
      goto LABEL_44;
    }
LABEL_13:
    v16 = operator new(0x10uLL);
    v17 = v16;
    v16[4] = 1;
    *(_QWORD *)v16 = off_1E66DC450;
    if ((unint64_t)v9 < *((_QWORD *)&v62 + 1))
    {
      *(_QWORD *)v9 = v16;
      v18 = (uint64_t)(v9 + 8);
LABEL_26:
      v12 = (char *)v17 + 9;
      *(_QWORD *)&v62 = v18;
      goto LABEL_27;
    }
    v19 = v9 - v8;
    v20 = (v9 - v8) >> 3;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v22 = *((_QWORD *)&v62 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v62 + 1) - (_QWORD)v8) >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = operator new(8 * v23);
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = v17;
      v18 = (uint64_t)(v25 + 1);
      if (v8 == v9)
      {
LABEL_24:
        *((_QWORD *)&v61 + 1) = v25;
        *(_QWORD *)&v62 = v18;
        *((_QWORD *)&v62 + 1) = v26;
        if (!v8)
          goto LABEL_26;
LABEL_25:
        operator delete(v8);
        goto LABEL_26;
      }
    }
    else
    {
      v24 = 0;
      v25 = (_QWORD *)(8 * v20);
      v26 = 0;
      *(_QWORD *)(8 * v20) = v17;
      v18 = 8 * v20 + 8;
      if (v8 == v9)
        goto LABEL_24;
    }
    if ((unint64_t)(v19 - 8) < 0x58)
      goto LABEL_100;
    if ((unint64_t)(v8 - v24) < 0x20)
      goto LABEL_100;
    v42 = ((unint64_t)(v19 - 8) >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v9[-v43];
    v25 = (_QWORD *)((char *)v25 - v43);
    v45 = &v24[8 * v20 - 16];
    v46 = v9 - 16;
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    v9 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        v49 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v25 = v49;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v61 + 1);
    *((_QWORD *)&v61 + 1) = v25;
    *(_QWORD *)&v62 = v18;
    *((_QWORD *)&v62 + 1) = v26;
    if (!v8)
      goto LABEL_26;
    goto LABEL_25;
  }
  v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v50 = (char *)MEMORY[0x1B5E2FB34](*a2);
    memset(block, 170, sizeof(block));
    v51 = strlen(v50);
    if (v51 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v52 = (void *)v51;
    if (v51 >= 0x17)
    {
      v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v54 = v51 | 7;
      v55 = v54 + 1;
      v53 = (void **)operator new(v54 + 1);
      block[1] = v52;
      block[2] = (void *)(v55 | 0x8000000000000000);
      block[0] = v53;
    }
    else
    {
      HIBYTE(block[2]) = v51;
      v53 = block;
      if (!v51)
        goto LABEL_89;
    }
    memcpy(v53, v50, (size_t)v52);
LABEL_89:
    *((_BYTE *)v52 + (_QWORD)v53) = 0;
    free(v50);
    v56 = block;
    if (SHIBYTE(block[2]) < 0)
      v56 = (void **)block[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v56;
    _os_log_error_impl(&dword_1B3CB3000, v13, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0)
      operator delete(block[0]);
  }
  v14 = xpc_null_create();
  if (*(_QWORD *)a3)
    v15 = _Block_copy(*(const void **)a3);
  else
    v15 = 0;
  v40 = *(NSObject **)(a3 + 8);
  block[0] = (void *)MEMORY[0x1E0C809B0];
  block[1] = (void *)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v69 = &__block_descriptor_tmp_106;
  if (!v15)
  {
    LOBYTE(v72) = 0;
    v70 = 0;
    v71 = v14;
    if (v14)
      goto LABEL_64;
LABEL_66:
    v71 = xpc_null_create();
    goto LABEL_67;
  }
  v41 = _Block_copy(v15);
  LOBYTE(v72) = 0;
  v70 = v41;
  v71 = v14;
  if (!v14)
    goto LABEL_66;
LABEL_64:
  xpc_retain(v14);
LABEL_67:
  dispatch_async(v40, block);
  xpc_release(v71);
  v71 = 0;
  if (v70)
    _Block_release(v70);
  if (v15)
    _Block_release(v15);
  xpc_release(v14);
}

void sub_1B3D53074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D5311C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver26wiredPortNotification_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _BYTE *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFAA8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D531A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::speakerState_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  void *v7;
  char *v8;
  char *v9;
  const void **v10;
  char *v11;
  _WORD *v12;
  NSObject *v13;
  xpc_object_t v14;
  void *v15;
  char *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  void *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  void *aBlock;
  NSObject *object;
  char v59[32];
  _QWORD v60[5];
  __int128 v61;
  __int128 v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  void *v67;
  void *block[3];
  void *v69;
  void *v70;
  xpc_object_t v71;
  std::__shared_weak_count *v72;
  void *v73;
  dispatch_object_t v74;
  __int128 buf;
  void (*v76)(uint64_t, uint64_t);
  void *v77;
  void **v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFAD0]))
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v61 = v6;
    v62 = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v61);
    v7 = (void *)MEMORY[0x1E0C809B0];
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 0x40000000;
    v60[2] = ___ZN7antenna16QMICommandDriver17speakerState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v60[3] = &__block_descriptor_tmp_70_0;
    v60[4] = a2;
    v8 = (char *)*((_QWORD *)&v61 + 1);
    v9 = (char *)v62;
    v10 = (const void **)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
    {
      v10 = (const void **)*((_QWORD *)&v61 + 1);
      while (*((_BYTE *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v62)
          goto LABEL_13;
      }
    }
    if (v10 != (const void **)v62)
    {
      if (!v11)
        __cxa_bad_cast();
      v12 = v11 + 10;
LABEL_27:
      ___ZN7antenna16QMICommandDriver17speakerState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v60, v12);
      qmi::MutableMessageBase::MutableMessageBase();
      v27 = *(void **)a3;
      if (*(_QWORD *)a3)
        v27 = _Block_copy(v27);
      v28 = *(NSObject **)(a3 + 8);
      aBlock = v27;
      object = v28;
      if (v28)
        dispatch_retain(v28);
      v29 = (std::__shared_weak_count *)a1[10];
      if (!v29 || (v30 = (void *)a1[9], (v31 = std::__shared_weak_count::lock(v29)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v32 = v31;
      p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v34 = __ldxr(p_shared_weak_owners);
      while (__stxr(v34 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      block[0] = v7;
      block[1] = (void *)1174405120;
      block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm12TxPwrSpeaker7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      v69 = &__block_descriptor_tmp_125_1;
      v70 = a1;
      v71 = v30;
      v72 = v32;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
      if (aBlock)
      {
        v38 = object;
        v73 = _Block_copy(aBlock);
        v74 = object;
        if (!object)
        {
LABEL_44:
          v63 = a1 + 23;
          v64 = QMIServiceMsg::create();
          v65 = 25000;
          v66 = 0;
          v67 = 0;
          *(_QWORD *)&buf = v7;
          *((_QWORD *)&buf + 1) = 0x40000000;
          v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
          v77 = &unk_1E66DBD60;
          v78 = block;
          v39 = _Block_copy(&buf);
          v67 = v39;
          if (v64)
          {
            qmi::Client::send();
            v39 = v67;
          }
          if (v39)
            _Block_release(v39);
          if (v74)
            dispatch_release(v74);
          if (v73)
            _Block_release(v73);
          if (v72)
            std::__shared_weak_count::__release_weak(v72);
          std::__shared_weak_count::__release_weak(v32);
          if (v38)
            dispatch_release(v38);
          if (aBlock)
            _Block_release(aBlock);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v59);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v61);
          return;
        }
      }
      else
      {
        v38 = object;
        v73 = 0;
        v74 = object;
        if (!object)
          goto LABEL_44;
      }
      dispatch_retain(v38);
      goto LABEL_44;
    }
LABEL_13:
    v16 = (char *)operator new(0x10uLL);
    v17 = v16;
    v16[8] = 1;
    *(_QWORD *)v16 = off_1E66DC4D0;
    *((_WORD *)v16 + 5) = 0;
    v12 = v16 + 10;
    if ((unint64_t)v9 < *((_QWORD *)&v62 + 1))
    {
      *(_QWORD *)v9 = v16;
      *(_QWORD *)&v62 = v9 + 8;
      goto LABEL_27;
    }
    v18 = v9 - v8;
    v19 = (v9 - v8) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v62 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v62 + 1) - (_QWORD)v8) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v26 = (uint64_t)(v24 + 1);
      if (v8 == v9)
      {
LABEL_24:
        *((_QWORD *)&v61 + 1) = v24;
        *(_QWORD *)&v62 = v26;
        *((_QWORD *)&v62 + 1) = v25;
        if (!v8)
        {
LABEL_26:
          *(_QWORD *)&v62 = v26;
          goto LABEL_27;
        }
LABEL_25:
        operator delete(v8);
        goto LABEL_26;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v17;
      v26 = 8 * v19 + 8;
      if (v8 == v9)
        goto LABEL_24;
    }
    if ((unint64_t)(v18 - 8) < 0x58)
      goto LABEL_100;
    if ((unint64_t)(v8 - v23) < 0x20)
      goto LABEL_100;
    v42 = ((unint64_t)(v18 - 8) >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v9[-v43];
    v24 = (_QWORD *)((char *)v24 - v43);
    v45 = &v23[8 * v19 - 16];
    v46 = v9 - 16;
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    v9 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        v49 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v24 = v49;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v61 + 1);
    *((_QWORD *)&v61 + 1) = v24;
    *(_QWORD *)&v62 = v26;
    *((_QWORD *)&v62 + 1) = v25;
    if (!v8)
      goto LABEL_26;
    goto LABEL_25;
  }
  v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v50 = (char *)MEMORY[0x1B5E2FB34](*a2);
    memset(block, 170, sizeof(block));
    v51 = strlen(v50);
    if (v51 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v52 = (void *)v51;
    if (v51 >= 0x17)
    {
      v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v54 = v51 | 7;
      v55 = v54 + 1;
      v53 = (void **)operator new(v54 + 1);
      block[1] = v52;
      block[2] = (void *)(v55 | 0x8000000000000000);
      block[0] = v53;
    }
    else
    {
      HIBYTE(block[2]) = v51;
      v53 = block;
      if (!v51)
        goto LABEL_89;
    }
    memcpy(v53, v50, (size_t)v52);
LABEL_89:
    *((_BYTE *)v52 + (_QWORD)v53) = 0;
    free(v50);
    v56 = block;
    if (SHIBYTE(block[2]) < 0)
      v56 = (void **)block[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v56;
    _os_log_error_impl(&dword_1B3CB3000, v13, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0)
      operator delete(block[0]);
  }
  v14 = xpc_null_create();
  if (*(_QWORD *)a3)
    v15 = _Block_copy(*(const void **)a3);
  else
    v15 = 0;
  v40 = *(NSObject **)(a3 + 8);
  block[0] = (void *)MEMORY[0x1E0C809B0];
  block[1] = (void *)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v69 = &__block_descriptor_tmp_106;
  if (!v15)
  {
    LOBYTE(v72) = 0;
    v70 = 0;
    v71 = v14;
    if (v14)
      goto LABEL_64;
LABEL_66:
    v71 = xpc_null_create();
    goto LABEL_67;
  }
  v41 = _Block_copy(v15);
  LOBYTE(v72) = 0;
  v70 = v41;
  v71 = v14;
  if (!v14)
    goto LABEL_66;
LABEL_64:
  xpc_retain(v14);
LABEL_67:
  dispatch_async(v40, block);
  xpc_release(v71);
  v71 = 0;
  if (v70)
    _Block_release(v70);
  if (v15)
    _Block_release(v15);
  xpc_release(v14);
}

void sub_1B3D53828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D538D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver17speakerState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFAD0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D53954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::handDetectionState_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  void *v7;
  char *v8;
  char *v9;
  const void **v10;
  char *v11;
  _BYTE *v12;
  NSObject *v13;
  xpc_object_t v14;
  void *v15;
  _WORD *v16;
  _WORD *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _QWORD *v25;
  char *v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  void *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  void *aBlock;
  NSObject *object;
  char v59[32];
  _QWORD v60[5];
  __int128 v61;
  __int128 v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  void *v67;
  void *block[3];
  void *v69;
  void *v70;
  xpc_object_t v71;
  std::__shared_weak_count *v72;
  void *v73;
  dispatch_object_t v74;
  __int128 buf;
  void (*v76)(uint64_t, uint64_t);
  void *v77;
  void **v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB30]))
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v61 = v6;
    v62 = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v61);
    v7 = (void *)MEMORY[0x1E0C809B0];
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 0x40000000;
    v60[2] = ___ZN7antenna16QMICommandDriver23handDetectionState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v60[3] = &__block_descriptor_tmp_72_2;
    v60[4] = a2;
    v8 = (char *)*((_QWORD *)&v61 + 1);
    v9 = (char *)v62;
    v10 = (const void **)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
    {
      v10 = (const void **)*((_QWORD *)&v61 + 1);
      while (*((_BYTE *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v62)
          goto LABEL_13;
      }
    }
    if (v10 != (const void **)v62)
    {
      if (!v11)
        __cxa_bad_cast();
      v12 = v11 + 9;
LABEL_27:
      ___ZN7antenna16QMICommandDriver23handDetectionState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v60, v12);
      qmi::MutableMessageBase::MutableMessageBase();
      v27 = *(void **)a3;
      if (*(_QWORD *)a3)
        v27 = _Block_copy(v27);
      v28 = *(NSObject **)(a3 + 8);
      aBlock = v27;
      object = v28;
      if (v28)
        dispatch_retain(v28);
      v29 = (std::__shared_weak_count *)a1[10];
      if (!v29 || (v30 = (void *)a1[9], (v31 = std::__shared_weak_count::lock(v29)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v32 = v31;
      p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v34 = __ldxr(p_shared_weak_owners);
      while (__stxr(v34 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      block[0] = v7;
      block[1] = (void *)1174405120;
      block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm18TxPwrHandDetection7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      v69 = &__block_descriptor_tmp_127;
      v70 = a1;
      v71 = v30;
      v72 = v32;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
      if (aBlock)
      {
        v38 = object;
        v73 = _Block_copy(aBlock);
        v74 = object;
        if (!object)
        {
LABEL_44:
          v63 = a1 + 23;
          v64 = QMIServiceMsg::create();
          v65 = 25000;
          v66 = 0;
          v67 = 0;
          *(_QWORD *)&buf = v7;
          *((_QWORD *)&buf + 1) = 0x40000000;
          v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
          v77 = &unk_1E66DBD60;
          v78 = block;
          v39 = _Block_copy(&buf);
          v67 = v39;
          if (v64)
          {
            qmi::Client::send();
            v39 = v67;
          }
          if (v39)
            _Block_release(v39);
          if (v74)
            dispatch_release(v74);
          if (v73)
            _Block_release(v73);
          if (v72)
            std::__shared_weak_count::__release_weak(v72);
          std::__shared_weak_count::__release_weak(v32);
          if (v38)
            dispatch_release(v38);
          if (aBlock)
            _Block_release(aBlock);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v59);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v61);
          return;
        }
      }
      else
      {
        v38 = object;
        v73 = 0;
        v74 = object;
        if (!object)
          goto LABEL_44;
      }
      dispatch_retain(v38);
      goto LABEL_44;
    }
LABEL_13:
    v16 = operator new(0x10uLL);
    v17 = v16;
    v16[4] = 1;
    *(_QWORD *)v16 = off_1E66DC550;
    if ((unint64_t)v9 < *((_QWORD *)&v62 + 1))
    {
      *(_QWORD *)v9 = v16;
      v18 = (uint64_t)(v9 + 8);
LABEL_26:
      v12 = (char *)v17 + 9;
      *(_QWORD *)&v62 = v18;
      goto LABEL_27;
    }
    v19 = v9 - v8;
    v20 = (v9 - v8) >> 3;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v22 = *((_QWORD *)&v62 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v62 + 1) - (_QWORD)v8) >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = operator new(8 * v23);
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = v17;
      v18 = (uint64_t)(v25 + 1);
      if (v8 == v9)
      {
LABEL_24:
        *((_QWORD *)&v61 + 1) = v25;
        *(_QWORD *)&v62 = v18;
        *((_QWORD *)&v62 + 1) = v26;
        if (!v8)
          goto LABEL_26;
LABEL_25:
        operator delete(v8);
        goto LABEL_26;
      }
    }
    else
    {
      v24 = 0;
      v25 = (_QWORD *)(8 * v20);
      v26 = 0;
      *(_QWORD *)(8 * v20) = v17;
      v18 = 8 * v20 + 8;
      if (v8 == v9)
        goto LABEL_24;
    }
    if ((unint64_t)(v19 - 8) < 0x58)
      goto LABEL_100;
    if ((unint64_t)(v8 - v24) < 0x20)
      goto LABEL_100;
    v42 = ((unint64_t)(v19 - 8) >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v9[-v43];
    v25 = (_QWORD *)((char *)v25 - v43);
    v45 = &v24[8 * v20 - 16];
    v46 = v9 - 16;
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    v9 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        v49 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v25 = v49;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v61 + 1);
    *((_QWORD *)&v61 + 1) = v25;
    *(_QWORD *)&v62 = v18;
    *((_QWORD *)&v62 + 1) = v26;
    if (!v8)
      goto LABEL_26;
    goto LABEL_25;
  }
  v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v50 = (char *)MEMORY[0x1B5E2FB34](*a2);
    memset(block, 170, sizeof(block));
    v51 = strlen(v50);
    if (v51 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v52 = (void *)v51;
    if (v51 >= 0x17)
    {
      v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v54 = v51 | 7;
      v55 = v54 + 1;
      v53 = (void **)operator new(v54 + 1);
      block[1] = v52;
      block[2] = (void *)(v55 | 0x8000000000000000);
      block[0] = v53;
    }
    else
    {
      HIBYTE(block[2]) = v51;
      v53 = block;
      if (!v51)
        goto LABEL_89;
    }
    memcpy(v53, v50, (size_t)v52);
LABEL_89:
    *((_BYTE *)v52 + (_QWORD)v53) = 0;
    free(v50);
    v56 = block;
    if (SHIBYTE(block[2]) < 0)
      v56 = (void **)block[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v56;
    _os_log_error_impl(&dword_1B3CB3000, v13, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0)
      operator delete(block[0]);
  }
  v14 = xpc_null_create();
  if (*(_QWORD *)a3)
    v15 = _Block_copy(*(const void **)a3);
  else
    v15 = 0;
  v40 = *(NSObject **)(a3 + 8);
  block[0] = (void *)MEMORY[0x1E0C809B0];
  block[1] = (void *)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v69 = &__block_descriptor_tmp_106;
  if (!v15)
  {
    LOBYTE(v72) = 0;
    v70 = 0;
    v71 = v14;
    if (v14)
      goto LABEL_64;
LABEL_66:
    v71 = xpc_null_create();
    goto LABEL_67;
  }
  v41 = _Block_copy(v15);
  LOBYTE(v72) = 0;
  v70 = v41;
  v71 = v14;
  if (!v14)
    goto LABEL_66;
LABEL_64:
  xpc_retain(v14);
LABEL_67:
  dispatch_async(v40, block);
  xpc_release(v71);
  v71 = 0;
  if (v70)
    _Block_release(v70);
  if (v15)
    _Block_release(v15);
  xpc_release(v14);
}

void sub_1B3D53FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D54078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver23handDetectionState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _BYTE *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFB30]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D540FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::powerSourceState_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  void *v7;
  char *v8;
  char *v9;
  const void **v10;
  char *v11;
  _DWORD *v12;
  NSObject *v13;
  xpc_object_t v14;
  void *v15;
  char *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  size_t v51;
  void *v52;
  void **v53;
  uint64_t v54;
  uint64_t v55;
  void **v56;
  void *aBlock;
  NSObject *object;
  char v59[32];
  _QWORD v60[5];
  __int128 v61;
  __int128 v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  void *v67;
  void *block[3];
  void *v69;
  void *v70;
  xpc_object_t v71;
  std::__shared_weak_count *v72;
  void *v73;
  dispatch_object_t v74;
  __int128 buf;
  void (*v76)(uint64_t, uint64_t);
  void *v77;
  void **v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFB00]))
  {
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v61 = v6;
    v62 = v6;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v61);
    v7 = (void *)MEMORY[0x1E0C809B0];
    v60[0] = MEMORY[0x1E0C809B0];
    v60[1] = 0x40000000;
    v60[2] = ___ZN7antenna16QMICommandDriver21powerSourceState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v60[3] = &__block_descriptor_tmp_74_1;
    v60[4] = a2;
    v8 = (char *)*((_QWORD *)&v61 + 1);
    v9 = (char *)v62;
    v10 = (const void **)*((_QWORD *)&v61 + 1);
    if (*((_QWORD *)&v61 + 1) != (_QWORD)v62)
    {
      v10 = (const void **)*((_QWORD *)&v61 + 1);
      while (*((_BYTE *)*v10 + 8) != 1)
      {
        if (++v10 == (const void **)v62)
          goto LABEL_13;
      }
    }
    if (v10 != (const void **)v62)
    {
      if (!v11)
        __cxa_bad_cast();
      v12 = v11 + 12;
LABEL_27:
      ___ZN7antenna16QMICommandDriver21powerSourceState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v60, v12);
      qmi::MutableMessageBase::MutableMessageBase();
      v27 = *(void **)a3;
      if (*(_QWORD *)a3)
        v27 = _Block_copy(v27);
      v28 = *(NSObject **)(a3 + 8);
      aBlock = v27;
      object = v28;
      if (v28)
        dispatch_retain(v28);
      v29 = (std::__shared_weak_count *)a1[10];
      if (!v29 || (v30 = (void *)a1[9], (v31 = std::__shared_weak_count::lock(v29)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v32 = v31;
      p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
      do
        v34 = __ldxr(p_shared_weak_owners);
      while (__stxr(v34 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v31->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v32);
      }
      block[0] = v7;
      block[1] = (void *)1174405120;
      block[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm16PowerSourceState7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
      v69 = &__block_descriptor_tmp_129_1;
      v70 = a1;
      v71 = v30;
      v72 = v32;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
      if (aBlock)
      {
        v38 = object;
        v73 = _Block_copy(aBlock);
        v74 = object;
        if (!object)
        {
LABEL_44:
          v63 = a1 + 23;
          v64 = QMIServiceMsg::create();
          v65 = 25000;
          v66 = 0;
          v67 = 0;
          *(_QWORD *)&buf = v7;
          *((_QWORD *)&buf + 1) = 0x40000000;
          v76 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
          v77 = &unk_1E66DBD60;
          v78 = block;
          v39 = _Block_copy(&buf);
          v67 = v39;
          if (v64)
          {
            qmi::Client::send();
            v39 = v67;
          }
          if (v39)
            _Block_release(v39);
          if (v74)
            dispatch_release(v74);
          if (v73)
            _Block_release(v73);
          if (v72)
            std::__shared_weak_count::__release_weak(v72);
          std::__shared_weak_count::__release_weak(v32);
          if (v38)
            dispatch_release(v38);
          if (aBlock)
            _Block_release(aBlock);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v59);
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v61);
          return;
        }
      }
      else
      {
        v38 = object;
        v73 = 0;
        v74 = object;
        if (!object)
          goto LABEL_44;
      }
      dispatch_retain(v38);
      goto LABEL_44;
    }
LABEL_13:
    v16 = (char *)operator new(0x10uLL);
    v17 = v16;
    v16[8] = 1;
    *(_QWORD *)v16 = off_1E66DC5D0;
    *((_DWORD *)v16 + 3) = 0;
    v12 = v16 + 12;
    if ((unint64_t)v9 < *((_QWORD *)&v62 + 1))
    {
      *(_QWORD *)v9 = v16;
      *(_QWORD *)&v62 = v9 + 8;
      goto LABEL_27;
    }
    v18 = v9 - v8;
    v19 = (v9 - v8) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v62 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v62 + 1) - (_QWORD)v8) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v26 = (uint64_t)(v24 + 1);
      if (v8 == v9)
      {
LABEL_24:
        *((_QWORD *)&v61 + 1) = v24;
        *(_QWORD *)&v62 = v26;
        *((_QWORD *)&v62 + 1) = v25;
        if (!v8)
        {
LABEL_26:
          *(_QWORD *)&v62 = v26;
          goto LABEL_27;
        }
LABEL_25:
        operator delete(v8);
        goto LABEL_26;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v17;
      v26 = 8 * v19 + 8;
      if (v8 == v9)
        goto LABEL_24;
    }
    if ((unint64_t)(v18 - 8) < 0x58)
      goto LABEL_100;
    if ((unint64_t)(v8 - v23) < 0x20)
      goto LABEL_100;
    v42 = ((unint64_t)(v18 - 8) >> 3) + 1;
    v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
    v44 = &v9[-v43];
    v24 = (_QWORD *)((char *)v24 - v43);
    v45 = &v23[8 * v19 - 16];
    v46 = v9 - 16;
    v47 = v42 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v48 = *(_OWORD *)v46;
      *(v45 - 1) = *((_OWORD *)v46 - 1);
      *v45 = v48;
      v45 -= 2;
      v46 -= 32;
      v47 -= 4;
    }
    while (v47);
    v9 = v44;
    if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_100:
      do
      {
        v49 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v24 = v49;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v61 + 1);
    *((_QWORD *)&v61 + 1) = v24;
    *(_QWORD *)&v62 = v26;
    *((_QWORD *)&v62 + 1) = v25;
    if (!v8)
      goto LABEL_26;
    goto LABEL_25;
  }
  v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v50 = (char *)MEMORY[0x1B5E2FB34](*a2);
    memset(block, 170, sizeof(block));
    v51 = strlen(v50);
    if (v51 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v52 = (void *)v51;
    if (v51 >= 0x17)
    {
      v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v51 | 7) != 0x17)
        v54 = v51 | 7;
      v55 = v54 + 1;
      v53 = (void **)operator new(v54 + 1);
      block[1] = v52;
      block[2] = (void *)(v55 | 0x8000000000000000);
      block[0] = v53;
    }
    else
    {
      HIBYTE(block[2]) = v51;
      v53 = block;
      if (!v51)
        goto LABEL_89;
    }
    memcpy(v53, v50, (size_t)v52);
LABEL_89:
    *((_BYTE *)v52 + (_QWORD)v53) = 0;
    free(v50);
    v56 = block;
    if (SHIBYTE(block[2]) < 0)
      v56 = (void **)block[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v56;
    _os_log_error_impl(&dword_1B3CB3000, v13, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(block[2]) < 0)
      operator delete(block[0]);
  }
  v14 = xpc_null_create();
  if (*(_QWORD *)a3)
    v15 = _Block_copy(*(const void **)a3);
  else
    v15 = 0;
  v40 = *(NSObject **)(a3 + 8);
  block[0] = (void *)MEMORY[0x1E0C809B0];
  block[1] = (void *)1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v69 = &__block_descriptor_tmp_106;
  if (!v15)
  {
    LOBYTE(v72) = 0;
    v70 = 0;
    v71 = v14;
    if (v14)
      goto LABEL_64;
LABEL_66:
    v71 = xpc_null_create();
    goto LABEL_67;
  }
  v41 = _Block_copy(v15);
  LOBYTE(v72) = 0;
  v70 = v41;
  v71 = v14;
  if (!v14)
    goto LABEL_66;
LABEL_64:
  xpc_retain(v14);
LABEL_67:
  dispatch_async(v40, block);
  xpc_release(v71);
  v71 = 0;
  if (v70)
    _Block_release(v70);
  if (v15)
    _Block_release(v15);
  xpc_release(v14);
}

void sub_1B3D54784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D5482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver21powerSourceState_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _DWORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFB00]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = (unsigned __int16)xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D548B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::ppmEnable_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  const char *v6;
  __int128 v7;
  xpc_object_t value;
  NSObject *v9;
  xpc_object_t v10;
  void *v11;
  char v12;
  char *v13;
  char *v14;
  const void **v15;
  _BYTE *v16;
  _WORD *v17;
  _WORD *v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  char *v29;
  const void **v30;
  char *v31;
  _WORD *v32;
  char *v33;
  char *v34;
  NSObject *v35;
  void *v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  std::__shared_weak_count *v64;
  void *v65;
  void *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_weak_owners;
  unint64_t v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t v73;
  NSObject *v74;
  void *v75;
  char *v76;
  size_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  xpc_object_t *v82;
  void *v83;
  NSObject *v84;
  char v85[32];
  _QWORD v86[5];
  _QWORD v87[2];
  uint64_t (*v88)(uint64_t, _BYTE *);
  void *v89;
  char v90;
  __int128 v91;
  __int128 v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  void *v97;
  xpc_object_t object[3];
  void *v99;
  void *aBlock;
  xpc_object_t v101;
  std::__shared_weak_count *v102;
  void *v103;
  dispatch_object_t v104;
  __int128 buf;
  void (*v106)(uint64_t, uint64_t);
  void *v107;
  xpc_object_t *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v6 = (const char *)*MEMORY[0x1E0DDFAA0];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0DDFAA0]))
  {
    *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v91 = v7;
    v92 = v7;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v91);
    value = xpc_dictionary_get_value(*a2, v6);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    v12 = xpc::dyn_cast_or_default();
    xpc_release(object[0]);
    v87[0] = MEMORY[0x1E0C809B0];
    v87[1] = 0x40000000;
    v88 = ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
    v89 = &__block_descriptor_tmp_76_1;
    v90 = v12;
    v13 = (char *)*((_QWORD *)&v91 + 1);
    v14 = (char *)v92;
    v15 = (const void **)*((_QWORD *)&v91 + 1);
    if (*((_QWORD *)&v91 + 1) != (_QWORD)v92)
    {
      v15 = (const void **)*((_QWORD *)&v91 + 1);
      while (*((_BYTE *)*v15 + 8) != 1)
      {
        if (++v15 == (const void **)v92)
          goto LABEL_16;
      }
    }
    if (v15 != (const void **)v92)
    {
      if (!v16)
        goto LABEL_130;
      ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v87, v16 + 9);
LABEL_30:
      if (!v12)
        goto LABEL_83;
      v86[0] = MEMORY[0x1E0C809B0];
      v86[1] = 0x40000000;
      v86[2] = ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
      v86[3] = &__block_descriptor_tmp_78_0;
      v86[4] = a2;
      v28 = (char *)*((_QWORD *)&v91 + 1);
      v29 = (char *)v92;
      v30 = (const void **)*((_QWORD *)&v91 + 1);
      if (*((_QWORD *)&v91 + 1) != (_QWORD)v92)
      {
        v30 = (const void **)*((_QWORD *)&v91 + 1);
        while (*((_BYTE *)*v30 + 8) != 16)
        {
          if (++v30 == (const void **)v92)
            goto LABEL_39;
        }
      }
      if (v30 != (const void **)v92)
      {
        if (v31)
        {
          v32 = v31 + 10;
LABEL_82:
          ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2((uint64_t)v86, v32);
LABEL_83:
          qmi::MutableMessageBase::MutableMessageBase();
          v62 = *(void **)a3;
          if (*(_QWORD *)a3)
            v62 = _Block_copy(v62);
          v63 = *(NSObject **)(a3 + 8);
          v83 = v62;
          v84 = v63;
          if (v63)
            dispatch_retain(v63);
          v64 = (std::__shared_weak_count *)a1[10];
          v65 = (void *)MEMORY[0x1E0C809B0];
          if (!v64 || (v66 = (void *)a1[9], (v67 = std::__shared_weak_count::lock(v64)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v68 = v67;
          p_shared_weak_owners = (unint64_t *)&v67->__shared_weak_owners_;
          do
            v70 = __ldxr(p_shared_weak_owners);
          while (__stxr(v70 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v67->__shared_owners_;
          do
            v72 = __ldaxr(p_shared_owners);
          while (__stlxr(v72 - 1, p_shared_owners));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v68);
          }
          object[0] = v65;
          object[1] = (xpc_object_t)1174405120;
          object[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm9PPMEnable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
          v99 = &__block_descriptor_tmp_131_1;
          aBlock = a1;
          v101 = v66;
          v102 = v68;
          do
            v73 = __ldxr(p_shared_weak_owners);
          while (__stxr(v73 + 1, p_shared_weak_owners));
          if (v83)
          {
            v74 = v84;
            v103 = _Block_copy(v83);
            v104 = v84;
            if (!v84)
            {
LABEL_100:
              v93 = a1 + 23;
              v94 = QMIServiceMsg::create();
              v95 = 25000;
              v96 = 0;
              v97 = 0;
              *(_QWORD *)&buf = v65;
              *((_QWORD *)&buf + 1) = 0x40000000;
              v106 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
              v107 = &unk_1E66DBD60;
              v108 = object;
              v75 = _Block_copy(&buf);
              v97 = v75;
              if (v94)
              {
                qmi::Client::send();
                v75 = v97;
              }
              if (v75)
                _Block_release(v75);
              if (v104)
                dispatch_release(v104);
              if (v103)
                _Block_release(v103);
              if (v102)
                std::__shared_weak_count::__release_weak(v102);
              std::__shared_weak_count::__release_weak(v68);
              if (v74)
                dispatch_release(v74);
              if (v83)
                _Block_release(v83);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v85);
              qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v91);
              return;
            }
          }
          else
          {
            v74 = v84;
            v103 = 0;
            v104 = v84;
            if (!v84)
              goto LABEL_100;
          }
          dispatch_retain(v74);
          goto LABEL_100;
        }
LABEL_130:
        __cxa_bad_cast();
      }
LABEL_39:
      v33 = (char *)operator new(0x10uLL);
      v34 = v33;
      v33[8] = 16;
      *(_QWORD *)v33 = off_1E66DC6A0;
      *((_WORD *)v33 + 5) = 0;
      v32 = v33 + 10;
      if ((unint64_t)v29 < *((_QWORD *)&v92 + 1))
      {
        *(_QWORD *)v29 = v33;
        *(_QWORD *)&v92 = v29 + 8;
        goto LABEL_82;
      }
      v37 = v29 - v28;
      v38 = (v29 - v28) >> 3;
      v39 = v38 + 1;
      if (!((unint64_t)(v38 + 1) >> 61))
      {
        v40 = *((_QWORD *)&v92 + 1) - (_QWORD)v28;
        if ((uint64_t)(*((_QWORD *)&v92 + 1) - (_QWORD)v28) >> 2 > v39)
          v39 = v40 >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (!v41)
        {
          v42 = 0;
          v43 = (_QWORD *)(8 * v38);
          v44 = 0;
          *(_QWORD *)(8 * v38) = v34;
          v45 = 8 * v38 + 8;
          if (v28 == v29)
          {
LABEL_79:
            *((_QWORD *)&v91 + 1) = v43;
            *(_QWORD *)&v92 = v45;
            *((_QWORD *)&v92 + 1) = v44;
            if (v28)
              operator delete(v28);
            *(_QWORD *)&v92 = v45;
            goto LABEL_82;
          }
LABEL_72:
          if ((unint64_t)(v37 - 8) < 0x58)
            goto LABEL_136;
          if ((unint64_t)(v28 - v42) < 0x20)
            goto LABEL_136;
          v54 = ((unint64_t)(v37 - 8) >> 3) + 1;
          v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
          v56 = &v29[-v55];
          v43 = (_QWORD *)((char *)v43 - v55);
          v57 = &v42[8 * v38 - 16];
          v58 = v29 - 16;
          v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            *v57 = v60;
            v57 -= 2;
            v58 -= 32;
            v59 -= 4;
          }
          while (v59);
          v29 = v56;
          if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_136:
            do
            {
              v61 = *((_QWORD *)v29 - 1);
              v29 -= 8;
              *--v43 = v61;
            }
            while (v29 != v28);
          }
          v28 = (char *)*((_QWORD *)&v91 + 1);
          goto LABEL_79;
        }
        if (!(v41 >> 61))
        {
          v42 = operator new(8 * v41);
          v43 = &v42[8 * v38];
          v44 = &v42[8 * v41];
          *v43 = v34;
          v45 = (uint64_t)(v43 + 1);
          if (v28 == v29)
            goto LABEL_79;
          goto LABEL_72;
        }
LABEL_133:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_132:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_16:
    v17 = operator new(0x10uLL);
    v18 = v17;
    v17[4] = 1;
    *(_QWORD *)v17 = off_1E66DC650;
    if ((unint64_t)v14 < *((_QWORD *)&v92 + 1))
    {
      *(_QWORD *)v14 = v17;
      v19 = (uint64_t)(v14 + 8);
LABEL_29:
      *(_QWORD *)&v92 = v19;
      v88((uint64_t)v87, (_BYTE *)v18 + 9);
      goto LABEL_30;
    }
    v20 = v14 - v13;
    v21 = (v14 - v13) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      goto LABEL_132;
    v23 = *((_QWORD *)&v92 + 1) - (_QWORD)v13;
    if ((uint64_t)(*((_QWORD *)&v92 + 1) - (_QWORD)v13) >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        goto LABEL_133;
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v21];
      v27 = &v25[8 * v24];
      *v26 = v18;
      v19 = (uint64_t)(v26 + 1);
      if (v13 == v14)
      {
LABEL_27:
        *((_QWORD *)&v91 + 1) = v26;
        *(_QWORD *)&v92 = v19;
        *((_QWORD *)&v92 + 1) = v27;
        if (!v13)
          goto LABEL_29;
LABEL_28:
        operator delete(v13);
        goto LABEL_29;
      }
    }
    else
    {
      v25 = 0;
      v26 = (_QWORD *)(8 * v21);
      v27 = 0;
      *(_QWORD *)(8 * v21) = v18;
      v19 = 8 * v21 + 8;
      if (v13 == v14)
        goto LABEL_27;
    }
    if ((unint64_t)(v20 - 8) < 0x58)
      goto LABEL_137;
    if ((unint64_t)(v13 - v25) < 0x20)
      goto LABEL_137;
    v46 = ((unint64_t)(v20 - 8) >> 3) + 1;
    v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
    v48 = &v14[-v47];
    v26 = (_QWORD *)((char *)v26 - v47);
    v49 = &v25[8 * v21 - 16];
    v50 = v14 - 16;
    v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v52 = *(_OWORD *)v50;
      *(v49 - 1) = *((_OWORD *)v50 - 1);
      *v49 = v52;
      v49 -= 2;
      v50 -= 32;
      v51 -= 4;
    }
    while (v51);
    v14 = v48;
    if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_137:
      do
      {
        v53 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v26 = v53;
      }
      while (v14 != v13);
    }
    v13 = (char *)*((_QWORD *)&v91 + 1);
    *((_QWORD *)&v91 + 1) = v26;
    *(_QWORD *)&v92 = v19;
    *((_QWORD *)&v92 + 1) = v27;
    if (!v13)
      goto LABEL_29;
    goto LABEL_28;
  }
  v9 = a1[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v76 = (char *)MEMORY[0x1B5E2FB34](*a2);
    memset(object, 170, sizeof(object));
    v77 = strlen(v76);
    if (v77 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v78 = (void *)v77;
    if (v77 >= 0x17)
    {
      v80 = (v77 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v77 | 7) != 0x17)
        v80 = v77 | 7;
      v81 = v80 + 1;
      v79 = operator new(v80 + 1);
      object[1] = v78;
      object[2] = (xpc_object_t)(v81 | 0x8000000000000000);
      object[0] = v79;
    }
    else
    {
      HIBYTE(object[2]) = v77;
      v79 = object;
      if (!v77)
        goto LABEL_125;
    }
    memcpy(v79, v76, (size_t)v78);
LABEL_125:
    *((_BYTE *)v78 + (_QWORD)v79) = 0;
    free(v76);
    v82 = object;
    if (SHIBYTE(object[2]) < 0)
      v82 = (xpc_object_t *)object[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v82;
    _os_log_error_impl(&dword_1B3CB3000, v9, OS_LOG_TYPE_ERROR, "Missing mandatory TLV. args: %s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
  }
  v10 = xpc_null_create();
  if (*(_QWORD *)a3)
    v11 = _Block_copy(*(const void **)a3);
  else
    v11 = 0;
  v35 = *(NSObject **)(a3 + 8);
  object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v99 = &__block_descriptor_tmp_106;
  if (!v11)
  {
    LOBYTE(v102) = 0;
    aBlock = 0;
    v101 = v10;
    if (v10)
      goto LABEL_44;
LABEL_46:
    v101 = xpc_null_create();
    goto LABEL_47;
  }
  v36 = _Block_copy(v11);
  LOBYTE(v102) = 0;
  aBlock = v36;
  v101 = v10;
  if (!v10)
    goto LABEL_46;
LABEL_44:
  xpc_retain(v10);
LABEL_47:
  dispatch_async(v35, object);
  xpc_release(v101);
  v101 = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v11)
    _Block_release(v11);
  xpc_release(v10);
}

void sub_1B3D5517C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,xpc_object_t object,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN7antenna16QMICommandDriver14ppmEnable_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFAB8]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D552E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::ppmRegisterIndication_sync(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  const void *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[6];
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, QMIServiceMsg *);
  void *v23;
  _QWORD *v24;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    v12 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_12;
    goto LABEL_11;
  }
  v12 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_11:
    v12 = _Block_copy(v12);
LABEL_12:
  v13 = (const void *)a1[30];
  a1[30] = v12;
  if (v13)
    _Block_release(v13);
  v14 = *(NSObject **)(a2 + 8);
  if (v14)
    dispatch_retain(v14);
  v15 = a1[31];
  a1[31] = v14;
  if (v15)
    dispatch_release(v15);
  v16 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 1174405120;
  v18[2] = ___ZN7antenna16QMICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke;
  v18[3] = &__block_descriptor_tmp_79;
  v18[4] = a1;
  v18[5] = v5;
  v19 = v7;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v20 = v16;
  v21 = 0x40000000;
  v22 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm13PPMIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v23 = &unk_1E66DC700;
  v24 = v18;
  qmi::Client::setIndHandler();
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1B3D55480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v15;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver26ppmRegisterIndication_syncEN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke(_QWORD *a1, qmi::MessageBase *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  tlv *TlvValue;
  int v8;
  tlv *v9;
  char v10;
  std::__shared_weak_count *v11;
  tlv *v12;
  int v13;
  tlv *v14;
  char v15;
  tlv *v16;
  int v17;
  tlv *v18;
  int v19;
  tlv *v20;
  int v21;
  tlv *v22;
  uint64_t v23;
  char v24;
  char v25;
  void *v26;
  void *v27;
  size_t v28;
  char *v29;
  unint64_t v30;
  int v31;
  void *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  int *i;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  const void *v48;
  void *v49;
  NSObject *v50;
  void *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  int v54;
  uint64_t v55;
  int *__p;
  int *v57;
  std::__shared_weak_count *v58;
  void *block;
  uint64_t v60;
  void (*v61)(uint64_t);
  void *v62;
  void *aBlock;
  xpc_object_t object;
  char v65;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v58 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v11 = v6;
LABEL_68:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  __p = 0;
  v57 = 0;
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v9 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)1);
    v10 = *(_BYTE *)v9;
  }
  else
  {
    v10 = 0;
  }
  v12 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v14 = v12;
  if (v12)
  {
    tlv::throwIfNotEnoughBytes(v12, (const unsigned __int8 *)v12 + v13, (const unsigned __int8 *)1);
    v15 = *(_BYTE *)v14;
  }
  else
  {
    v15 = 0;
  }
  v16 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v18 = v16;
  if (v16)
  {
    tlv::throwIfNotEnoughBytes(v16, (const unsigned __int8 *)v16 + v17, (const unsigned __int8 *)4);
    v19 = *(_DWORD *)v18;
  }
  else
  {
    v19 = 0;
  }
  v20 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v22 = v20;
  if (v20)
  {
    block = 0;
    v60 = 0;
    v61 = 0;
    v23 = v21;
    if (tlv::parseUnboundedSequence<int>(v20, (unsigned __int8 *)v20 + v21, (uint64_t)&block))
    {
      v54 = v19;
      v55 = v5;
      v24 = v15;
      v25 = v10;
      v26 = block;
      v27 = (void *)v60;
      v28 = v60 - (_QWORD)block;
      v29 = 0;
      if ((v60 - (uint64_t)block) >> 2)
      {
        if ((v28 & 0x8000000000000000) != 0 || (v30 = (v60 - (uint64_t)block) >> 2, v30 >> 62))
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v29 = (char *)operator new(4 * v30);
        __p = (int *)v29;
      }
      if (v27 != v26)
        memmove(v29, v26, v28);
      v10 = v25;
      v15 = v24;
      v19 = v54;
      v5 = v55;
      v31 = 0;
      v57 = (int *)&v29[v28];
      v32 = block;
      if (!block)
        goto LABEL_24;
    }
    else
    {
      v31 = 1;
      v32 = block;
      if (!block)
      {
LABEL_24:
        if (v31)
          ((void (*)(_QWORD, uint64_t, tlv *, uint64_t))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 4, v22, v23);
        goto LABEL_26;
      }
    }
    v60 = (uint64_t)v32;
    operator delete(v32);
    goto LABEL_24;
  }
LABEL_26:
  v33 = xpc_dictionary_create(0, 0, 0);
  if (v33 || (v33 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1B5E2FB70](v33) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v33);
      v34 = v33;
    }
    else
    {
      v34 = xpc_null_create();
    }
  }
  else
  {
    v34 = xpc_null_create();
    v33 = 0;
  }
  xpc_release(v33);
  v35 = xpc_int64_create(v10);
  if (!v35)
    v35 = xpc_null_create();
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E0DDFAB0], v35);
  v36 = xpc_null_create();
  xpc_release(v35);
  xpc_release(v36);
  v37 = xpc_int64_create(v15);
  if (!v37)
    v37 = xpc_null_create();
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E0DDFAC8], v37);
  v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
  v39 = xpc_int64_create(v19);
  if (!v39)
    v39 = xpc_null_create();
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E0DDFB50], v39);
  v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  v41 = xpc_array_create(0, 0);
  if (v41 || (v41 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1B5E2FB70](v41) == MEMORY[0x1E0C812C8])
    {
      xpc_retain(v41);
      v42 = v41;
    }
    else
    {
      v42 = xpc_null_create();
    }
  }
  else
  {
    v42 = xpc_null_create();
    v41 = 0;
  }
  xpc_release(v41);
  for (i = __p; i != v57; ++i)
  {
    v44 = xpc_int64_create(*i);
    if (!v44)
      v44 = xpc_null_create();
    xpc_array_append_value(v42, v44);
    xpc_release(v44);
  }
  if (v42)
  {
    xpc_retain(v42);
    v45 = v42;
  }
  else
  {
    v45 = xpc_null_create();
  }
  xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E0DDFAC0], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  if (v34)
  {
    xpc_retain(v34);
    v47 = v34;
    v48 = *(const void **)(v5 + 240);
    if (v48)
    {
LABEL_53:
      v49 = _Block_copy(v48);
      goto LABEL_56;
    }
  }
  else
  {
    v47 = xpc_null_create();
    v48 = *(const void **)(v5 + 240);
    if (v48)
      goto LABEL_53;
  }
  v49 = 0;
LABEL_56:
  v50 = *(NSObject **)(v5 + 248);
  block = (void *)MEMORY[0x1E0C809B0];
  v60 = 1174405120;
  v61 = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  v62 = &__block_descriptor_tmp_106;
  if (v49)
  {
    v51 = _Block_copy(v49);
    v65 = 1;
    aBlock = v51;
    object = v47;
    if (v47)
    {
LABEL_58:
      xpc_retain(v47);
      goto LABEL_61;
    }
  }
  else
  {
    v65 = 1;
    aBlock = 0;
    object = v47;
    if (v47)
      goto LABEL_58;
  }
  object = xpc_null_create();
LABEL_61:
  dispatch_async(v50, &block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v49)
    _Block_release(v49);
  xpc_release(v47);
  xpc_release(v42);
  xpc_release(v34);
  if (__p)
    operator delete(__p);
  v11 = v58;
  if (v58)
    goto LABEL_68;
}

void sub_1B3D55B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v17;
  uint64_t v18;

  if (!a16)
  {
    if (v17)
      operator delete(v17);
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](&v18);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B3D55B3CLL);
}

void sub_1B3D55BF8(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;

  if (v2)
    operator delete(v2);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](&v3);
  _Unwind_Resume(a1);
}

void sub_1B3D55C20()
{
  void *v0;
  void *v1;
  void *v2;

  xpc_release(v2);
  xpc_release(v1);
  xpc_release(v0);
  JUMPOUT(0x1B3D55C3CLL);
}

void antenna::QMICommandDriver::deviceMaterial_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  const void **v10;
  _WORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  _WORD *v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  char *v25;
  const void **v26;
  _WORD *v27;
  _BYTE *v28;
  _BYTE *v29;
  _WORD *v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  const void **v42;
  char *v43;
  _WORD *v44;
  char *v45;
  char *v46;
  int64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  const void **v58;
  char *v59;
  _WORD *v60;
  char *v61;
  char *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  void *v72;
  NSObject *v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  unint64_t *p_shared_weak_owners;
  unint64_t v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  unint64_t v82;
  NSObject *v83;
  void *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  _OWORD *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  void *aBlock;
  NSObject *object;
  char v120[32];
  _QWORD v121[5];
  _QWORD v122[5];
  _QWORD v123[2];
  void (*v124)(uint64_t, _WORD *);
  void *v125;
  uint64_t v126;
  _QWORD v127[2];
  void (*v128)(uint64_t, _WORD *);
  void *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  void *v137;
  _QWORD v138[6];
  std::__shared_weak_count *v139;
  void *v140;
  dispatch_object_t v141;
  _QWORD v142[6];

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v131 = v6;
  v132 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v131);
  v7 = MEMORY[0x1E0C809B0];
  v127[0] = MEMORY[0x1E0C809B0];
  v127[1] = 0x40000000;
  v128 = ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  v129 = &__block_descriptor_tmp_81;
  v130 = a2;
  v8 = (char *)*((_QWORD *)&v131 + 1);
  v9 = (char *)v132;
  v10 = (const void **)*((_QWORD *)&v131 + 1);
  v117 = a3;
  if (*((_QWORD *)&v131 + 1) != (_QWORD)v132)
  {
    v10 = (const void **)*((_QWORD *)&v131 + 1);
    while (*((_BYTE *)*v10 + 8) != 16)
    {
      if (++v10 == (const void **)v132)
        goto LABEL_9;
    }
  }
  if (v10 == (const void **)v132)
  {
LABEL_9:
    v12 = operator new(0x10uLL);
    v13 = v12;
    v12[8] = 16;
    *(_QWORD *)v12 = off_1E66DC748;
    *((_WORD *)v12 + 5) = 0;
    v14 = v12 + 10;
    if ((unint64_t)v9 < *((_QWORD *)&v132 + 1))
    {
      *(_QWORD *)v9 = v12;
      v15 = (uint64_t)(v9 + 8);
LABEL_22:
      *(_QWORD *)&v132 = v15;
      v128((uint64_t)v127, v14);
      goto LABEL_23;
    }
    v16 = v9 - v8;
    v17 = (v9 - v8) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      goto LABEL_161;
    v19 = *((_QWORD *)&v132 + 1) - (_QWORD)v8;
    if ((uint64_t)(*((_QWORD *)&v132 + 1) - (_QWORD)v8) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        goto LABEL_162;
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v13;
      v15 = (uint64_t)(v22 + 1);
      if (v8 == v9)
      {
LABEL_20:
        *((_QWORD *)&v131 + 1) = v22;
        *(_QWORD *)&v132 = v15;
        *((_QWORD *)&v132 + 1) = v23;
        if (!v8)
          goto LABEL_22;
LABEL_21:
        operator delete(v8);
        goto LABEL_22;
      }
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v17);
      v23 = 0;
      *(_QWORD *)(8 * v17) = v13;
      v15 = 8 * v17 + 8;
      if (v8 == v9)
        goto LABEL_20;
    }
    if ((unint64_t)(v16 - 8) < 0x58)
      goto LABEL_165;
    if ((unint64_t)(v8 - v21) < 0x20)
      goto LABEL_165;
    v85 = ((unint64_t)(v16 - 8) >> 3) + 1;
    v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
    v87 = &v9[-v86];
    v22 = (_QWORD *)((char *)v22 - v86);
    v88 = &v21[8 * v17 - 16];
    v89 = v9 - 16;
    v90 = v85 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v91 = *(_OWORD *)v89;
      *(v88 - 1) = *((_OWORD *)v89 - 1);
      *v88 = v91;
      v88 -= 2;
      v89 -= 32;
      v90 -= 4;
    }
    while (v90);
    v9 = v87;
    if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_165:
      do
      {
        v92 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v22 = v92;
      }
      while (v9 != v8);
    }
    v8 = (char *)*((_QWORD *)&v131 + 1);
    *((_QWORD *)&v131 + 1) = v22;
    *(_QWORD *)&v132 = v15;
    *((_QWORD *)&v132 + 1) = v23;
    if (!v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v11)
    goto LABEL_160;
  ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v127, v11 + 5);
LABEL_23:
  v123[0] = v7;
  v123[1] = 0x40000000;
  v124 = ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  v125 = &__block_descriptor_tmp_83_2;
  v126 = a2;
  v24 = (char *)*((_QWORD *)&v131 + 1);
  v25 = (char *)v132;
  v26 = (const void **)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1) != (_QWORD)v132)
  {
    v26 = (const void **)*((_QWORD *)&v131 + 1);
    while (*((_BYTE *)*v26 + 8) != 17)
    {
      if (++v26 == (const void **)v132)
        goto LABEL_31;
    }
  }
  if (v26 == (const void **)v132)
  {
LABEL_31:
    v28 = operator new(0x10uLL);
    v29 = v28;
    v28[8] = 17;
    *(_QWORD *)v28 = off_1E66DC798;
    *((_WORD *)v28 + 5) = 0;
    v30 = v28 + 10;
    if ((unint64_t)v25 < *((_QWORD *)&v132 + 1))
    {
      *(_QWORD *)v25 = v28;
      v31 = (uint64_t)(v25 + 8);
LABEL_44:
      *(_QWORD *)&v132 = v31;
      v124((uint64_t)v123, v30);
      goto LABEL_45;
    }
    v32 = v25 - v24;
    v33 = (v25 - v24) >> 3;
    v34 = v33 + 1;
    if ((unint64_t)(v33 + 1) >> 61)
      goto LABEL_161;
    v35 = *((_QWORD *)&v132 + 1) - (_QWORD)v24;
    if ((uint64_t)(*((_QWORD *)&v132 + 1) - (_QWORD)v24) >> 2 > v34)
      v34 = v35 >> 2;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v34;
    if (v36)
    {
      if (v36 >> 61)
        goto LABEL_162;
      v37 = operator new(8 * v36);
      v38 = &v37[8 * v33];
      v39 = &v37[8 * v36];
      *v38 = v29;
      v31 = (uint64_t)(v38 + 1);
      if (v24 == v25)
      {
LABEL_42:
        *((_QWORD *)&v131 + 1) = v38;
        *(_QWORD *)&v132 = v31;
        *((_QWORD *)&v132 + 1) = v39;
        if (!v24)
          goto LABEL_44;
LABEL_43:
        operator delete(v24);
        goto LABEL_44;
      }
    }
    else
    {
      v37 = 0;
      v38 = (_QWORD *)(8 * v33);
      v39 = 0;
      *(_QWORD *)(8 * v33) = v29;
      v31 = 8 * v33 + 8;
      if (v24 == v25)
        goto LABEL_42;
    }
    if ((unint64_t)(v32 - 8) < 0x58)
      goto LABEL_166;
    if ((unint64_t)(v24 - v37) < 0x20)
      goto LABEL_166;
    v93 = ((unint64_t)(v32 - 8) >> 3) + 1;
    v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
    v95 = &v25[-v94];
    v38 = (_QWORD *)((char *)v38 - v94);
    v96 = &v37[8 * v33 - 16];
    v97 = v25 - 16;
    v98 = v93 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v99 = *(_OWORD *)v97;
      *(v96 - 1) = *((_OWORD *)v97 - 1);
      *v96 = v99;
      v96 -= 2;
      v97 -= 32;
      v98 -= 4;
    }
    while (v98);
    v25 = v95;
    if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_166:
      do
      {
        v100 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v38 = v100;
      }
      while (v25 != v24);
    }
    v24 = (char *)*((_QWORD *)&v131 + 1);
    *((_QWORD *)&v131 + 1) = v38;
    *(_QWORD *)&v132 = v31;
    *((_QWORD *)&v132 + 1) = v39;
    if (!v24)
      goto LABEL_44;
    goto LABEL_43;
  }
  if (!v27)
    goto LABEL_160;
  ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2((uint64_t)v123, v27 + 5);
LABEL_45:
  v122[0] = v7;
  v122[1] = 0x40000000;
  v122[2] = ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3;
  v122[3] = &__block_descriptor_tmp_85_0;
  v122[4] = a2;
  v40 = (char *)*((_QWORD *)&v131 + 1);
  v41 = (char *)v132;
  v42 = (const void **)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1) != (_QWORD)v132)
  {
    v42 = (const void **)*((_QWORD *)&v131 + 1);
    while (*((_BYTE *)*v42 + 8) != 18)
    {
      if (++v42 == (const void **)v132)
        goto LABEL_53;
    }
  }
  if (v42 == (const void **)v132)
  {
LABEL_53:
    v45 = (char *)operator new(0x10uLL);
    v46 = v45;
    v45[8] = 18;
    *(_QWORD *)v45 = off_1E66DC7E8;
    *((_WORD *)v45 + 5) = 0;
    v44 = v45 + 10;
    if ((unint64_t)v41 < *((_QWORD *)&v132 + 1))
    {
      *(_QWORD *)v41 = v45;
      *(_QWORD *)&v132 = v41 + 8;
      goto LABEL_67;
    }
    v47 = v41 - v40;
    v48 = (v41 - v40) >> 3;
    v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 61)
      goto LABEL_161;
    v50 = *((_QWORD *)&v132 + 1) - (_QWORD)v40;
    if ((uint64_t)(*((_QWORD *)&v132 + 1) - (_QWORD)v40) >> 2 > v49)
      v49 = v50 >> 2;
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
      v51 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v51 = v49;
    if (v51)
    {
      if (v51 >> 61)
        goto LABEL_162;
      v52 = operator new(8 * v51);
      v53 = &v52[8 * v48];
      v54 = &v52[8 * v51];
      *v53 = v46;
      v55 = (uint64_t)(v53 + 1);
      if (v40 == v41)
      {
LABEL_64:
        *((_QWORD *)&v131 + 1) = v53;
        *(_QWORD *)&v132 = v55;
        *((_QWORD *)&v132 + 1) = v54;
        if (!v40)
        {
LABEL_66:
          *(_QWORD *)&v132 = v55;
          goto LABEL_67;
        }
LABEL_65:
        operator delete(v40);
        goto LABEL_66;
      }
    }
    else
    {
      v52 = 0;
      v53 = (_QWORD *)(8 * v48);
      v54 = 0;
      *(_QWORD *)(8 * v48) = v46;
      v55 = 8 * v48 + 8;
      if (v40 == v41)
        goto LABEL_64;
    }
    if ((unint64_t)(v47 - 8) < 0x58)
      goto LABEL_167;
    if ((unint64_t)(v40 - v52) < 0x20)
      goto LABEL_167;
    v101 = ((unint64_t)(v47 - 8) >> 3) + 1;
    v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
    v103 = &v41[-v102];
    v53 = (_QWORD *)((char *)v53 - v102);
    v104 = &v52[8 * v48 - 16];
    v105 = v41 - 16;
    v106 = v101 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v107 = *(_OWORD *)v105;
      *(v104 - 1) = *((_OWORD *)v105 - 1);
      *v104 = v107;
      v104 -= 2;
      v105 -= 32;
      v106 -= 4;
    }
    while (v106);
    v41 = v103;
    if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_167:
      do
      {
        v108 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *--v53 = v108;
      }
      while (v41 != v40);
    }
    v40 = (char *)*((_QWORD *)&v131 + 1);
    *((_QWORD *)&v131 + 1) = v53;
    *(_QWORD *)&v132 = v55;
    *((_QWORD *)&v132 + 1) = v54;
    if (!v40)
      goto LABEL_66;
    goto LABEL_65;
  }
  if (!v43)
    goto LABEL_160;
  v44 = v43 + 10;
LABEL_67:
  ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3((uint64_t)v122, v44);
  v121[0] = v7;
  v121[1] = 0x40000000;
  v121[2] = ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4;
  v121[3] = &__block_descriptor_tmp_87;
  v121[4] = a2;
  v56 = (char *)*((_QWORD *)&v131 + 1);
  v57 = (char *)v132;
  v58 = (const void **)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1) != (_QWORD)v132)
  {
    v58 = (const void **)*((_QWORD *)&v131 + 1);
    while (*((_BYTE *)*v58 + 8) != 19)
    {
      if (++v58 == (const void **)v132)
        goto LABEL_75;
    }
  }
  if (v58 != (const void **)v132)
  {
    if (v59)
    {
      v60 = v59 + 10;
      goto LABEL_89;
    }
LABEL_160:
    __cxa_bad_cast();
  }
LABEL_75:
  v61 = (char *)operator new(0x10uLL);
  v62 = v61;
  v61[8] = 19;
  *(_QWORD *)v61 = off_1E66DC838;
  *((_WORD *)v61 + 5) = 0;
  v60 = v61 + 10;
  if ((unint64_t)v57 < *((_QWORD *)&v132 + 1))
  {
    *(_QWORD *)v57 = v61;
    *(_QWORD *)&v132 = v57 + 8;
    goto LABEL_89;
  }
  v63 = v57 - v56;
  v64 = (v57 - v56) >> 3;
  v65 = v64 + 1;
  if ((unint64_t)(v64 + 1) >> 61)
LABEL_161:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v66 = *((_QWORD *)&v132 + 1) - (_QWORD)v56;
  if ((uint64_t)(*((_QWORD *)&v132 + 1) - (_QWORD)v56) >> 2 > v65)
    v65 = v66 >> 2;
  if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8)
    v67 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v67 = v65;
  if (v67)
  {
    if (!(v67 >> 61))
    {
      v68 = operator new(8 * v67);
      v69 = &v68[8 * v64];
      v70 = &v68[8 * v67];
      *v69 = v62;
      v71 = (uint64_t)(v69 + 1);
      if (v56 == v57)
        goto LABEL_86;
LABEL_151:
      if ((unint64_t)(v63 - 8) < 0x58)
        goto LABEL_168;
      if ((unint64_t)(v56 - v68) < 0x20)
        goto LABEL_168;
      v109 = ((unint64_t)(v63 - 8) >> 3) + 1;
      v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
      v111 = &v57[-v110];
      v69 = (_QWORD *)((char *)v69 - v110);
      v112 = &v68[8 * v64 - 16];
      v113 = v57 - 16;
      v114 = v109 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v115 = *(_OWORD *)v113;
        *(v112 - 1) = *((_OWORD *)v113 - 1);
        *v112 = v115;
        v112 -= 2;
        v113 -= 32;
        v114 -= 4;
      }
      while (v114);
      v57 = v111;
      if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_168:
        do
        {
          v116 = *((_QWORD *)v57 - 1);
          v57 -= 8;
          *--v69 = v116;
        }
        while (v57 != v56);
      }
      v56 = (char *)*((_QWORD *)&v131 + 1);
      *((_QWORD *)&v131 + 1) = v69;
      *(_QWORD *)&v132 = v71;
      *((_QWORD *)&v132 + 1) = v70;
      if (!v56)
        goto LABEL_88;
      goto LABEL_87;
    }
LABEL_162:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v68 = 0;
  v69 = (_QWORD *)(8 * v64);
  v70 = 0;
  *(_QWORD *)(8 * v64) = v62;
  v71 = 8 * v64 + 8;
  if (v56 != v57)
    goto LABEL_151;
LABEL_86:
  *((_QWORD *)&v131 + 1) = v69;
  *(_QWORD *)&v132 = v71;
  *((_QWORD *)&v132 + 1) = v70;
  if (v56)
LABEL_87:
    operator delete(v56);
LABEL_88:
  *(_QWORD *)&v132 = v71;
LABEL_89:
  ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4((uint64_t)v121, v60);
  qmi::MutableMessageBase::MutableMessageBase();
  v72 = *(void **)v117;
  if (*(_QWORD *)v117)
    v72 = _Block_copy(v72);
  v73 = *(NSObject **)(v117 + 8);
  aBlock = v72;
  object = v73;
  if (v73)
    dispatch_retain(v73);
  v74 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v74 || (v75 = *(_QWORD *)(a1 + 72), (v76 = std::__shared_weak_count::lock(v74)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v77 = v76;
  p_shared_weak_owners = (unint64_t *)&v76->__shared_weak_owners_;
  do
    v79 = __ldxr(p_shared_weak_owners);
  while (__stxr(v79 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v76->__shared_owners_;
  do
    v81 = __ldaxr(p_shared_owners);
  while (__stlxr(v81 - 1, p_shared_owners));
  if (!v81)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v77);
  }
  v138[0] = v7;
  v138[1] = 1174405120;
  v138[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm14DeviceMaterial7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v138[3] = &__block_descriptor_tmp_134_0;
  v138[4] = a1;
  v138[5] = v75;
  v139 = v77;
  do
    v82 = __ldxr(p_shared_weak_owners);
  while (__stxr(v82 + 1, p_shared_weak_owners));
  if (aBlock)
  {
    v83 = object;
    v140 = _Block_copy(aBlock);
    v141 = object;
    if (!object)
      goto LABEL_106;
    goto LABEL_105;
  }
  v83 = object;
  v140 = 0;
  v141 = object;
  if (object)
LABEL_105:
    dispatch_retain(v83);
LABEL_106:
  v133 = a1 + 184;
  v134 = QMIServiceMsg::create();
  v135 = 25000;
  v136 = 0;
  v137 = 0;
  v142[0] = v7;
  v142[1] = 0x40000000;
  v142[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v142[3] = &unk_1E66DBD60;
  v142[4] = v138;
  v84 = _Block_copy(v142);
  v137 = v84;
  if (v134)
  {
    qmi::Client::send();
    v84 = v137;
  }
  if (v84)
    _Block_release(v84);
  if (v141)
    dispatch_release(v141);
  if (v140)
    _Block_release(v140);
  if (v139)
    std::__shared_weak_count::__release_weak(v139);
  std::__shared_weak_count::__release_weak(v77);
  if (v83)
    dispatch_release(v83);
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v120);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v131);
}

void sub_1B3D566C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v44;

  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a41);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback(v42 - 160);
  v44 = *(std::__shared_weak_count **)(v42 - 168);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  std::__shared_weak_count::__release_weak(v41);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a37);
  _Unwind_Resume(a1);
}

void sub_1B3D56720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a37);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFB10]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D567A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFAE0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D56830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_3(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFA98]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D568BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver19deviceMaterial_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_4(uint64_t a1, _WORD *a2)
{
  xpc_object_t value;
  xpc_object_t object;

  value = xpc_dictionary_get_value(**(xpc_object_t **)(a1 + 32), (const char *)*MEMORY[0x1E0DDFA90]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  *a2 = xpc::dyn_cast_or_default();
  xpc_release(object);
}

void sub_1B3D56948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void antenna::QMICommandDriver::workoutInfo_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  __int128 v6;
  xpc_object_t value;
  __int16 v8;
  xpc_object_t v9;
  __int16 v10;
  xpc_object_t v11;
  __int16 v12;
  xpc_object_t v13;
  NSObject *v14;
  char *v15;
  char *v16;
  const void **v17;
  _WORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  _WORD *v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  char *v32;
  const void **v33;
  _WORD *v34;
  _BYTE *v35;
  _BYTE *v36;
  _WORD *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _QWORD *v45;
  char *v46;
  char *v47;
  char *v48;
  const void **v49;
  _WORD *v50;
  char *v51;
  char *v52;
  _WORD *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  char *v64;
  const void **v65;
  char *v66;
  _WORD *v67;
  char *v68;
  char *v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void *v79;
  NSObject *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *p_shared_weak_owners;
  unint64_t v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  unint64_t v89;
  NSObject *v90;
  void *v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  _OWORD *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  _OWORD *v119;
  char *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  __int16 v125;
  void *aBlock;
  NSObject *object;
  char v128[32];
  _QWORD v129[2];
  uint64_t (*v130)(uint64_t, _WORD *);
  void *v131;
  __int16 v132;
  _QWORD v133[2];
  uint64_t (*v134)(uint64_t, _WORD *);
  void *v135;
  __int16 v136;
  __int128 v137;
  __int128 v138;
  _QWORD *v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  void *v143;
  _QWORD v144[5];
  uint8_t buf[8];
  uint64_t v146;
  __int128 v147;
  _QWORD *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  void *v151;
  dispatch_object_t v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v137 = v6;
  v138 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v137);
  value = xpc_dictionary_get_value(*a2, "kKeyWorkoutType");
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  v8 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  v9 = xpc_dictionary_get_value(*a2, "kKeyWorkoutState");
  *(_QWORD *)buf = v9;
  if (v9)
    xpc_retain(v9);
  else
    *(_QWORD *)buf = xpc_null_create();
  v10 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  v11 = xpc_dictionary_get_value(*a2, "kKeyWorkoutLocation");
  *(_QWORD *)buf = v11;
  if (v11)
    xpc_retain(v11);
  else
    *(_QWORD *)buf = xpc_null_create();
  v12 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  v13 = xpc_dictionary_get_value(*a2, "kKeySwimLocation");
  *(_QWORD *)buf = v13;
  if (v13)
    xpc_retain(v13);
  else
    *(_QWORD *)buf = xpc_null_create();
  v125 = xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)buf);
  v124 = a3;
  v14 = a1[5];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)&buf[4] = v8;
    LOWORD(v146) = 1024;
    *(_DWORD *)((char *)&v146 + 2) = v10;
    HIWORD(v146) = 1024;
    LODWORD(v147) = v12;
    WORD2(v147) = 1024;
    *(_DWORD *)((char *)&v147 + 6) = v125;
    _os_log_impl(&dword_1B3CB3000, v14, OS_LOG_TYPE_DEFAULT, "#I Workout info: Type=%d State=%d Loc=%d SwimLoc=%d", buf, 0x1Au);
  }
  v133[0] = MEMORY[0x1E0C809B0];
  v133[1] = 0x40000000;
  v134 = ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke;
  v135 = &__block_descriptor_tmp_89;
  v136 = v8;
  v15 = (char *)*((_QWORD *)&v137 + 1);
  v16 = (char *)v138;
  v17 = (const void **)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1) != (_QWORD)v138)
  {
    v17 = (const void **)*((_QWORD *)&v137 + 1);
    while (*((_BYTE *)*v17 + 8) != 16)
    {
      if (++v17 == (const void **)v138)
        goto LABEL_23;
    }
  }
  if (v17 == (const void **)v138)
  {
LABEL_23:
    v19 = operator new(0x10uLL);
    v20 = v19;
    v19[8] = 16;
    *(_QWORD *)v19 = off_1E66DC8B8;
    *((_WORD *)v19 + 5) = 0;
    v21 = v19 + 10;
    if ((unint64_t)v16 < *((_QWORD *)&v138 + 1))
    {
      *(_QWORD *)v16 = v19;
      v22 = (uint64_t)(v16 + 8);
LABEL_36:
      *(_QWORD *)&v138 = v22;
      v134((uint64_t)v133, v21);
      goto LABEL_37;
    }
    v23 = v16 - v15;
    v24 = (v16 - v15) >> 3;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      goto LABEL_179;
    v26 = *((_QWORD *)&v138 + 1) - (_QWORD)v15;
    if ((uint64_t)(*((_QWORD *)&v138 + 1) - (_QWORD)v15) >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        goto LABEL_180;
      v28 = operator new(8 * v27);
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *v29 = v20;
      v22 = (uint64_t)(v29 + 1);
      if (v15 == v16)
      {
LABEL_34:
        *((_QWORD *)&v137 + 1) = v29;
        *(_QWORD *)&v138 = v22;
        *((_QWORD *)&v138 + 1) = v30;
        if (!v15)
          goto LABEL_36;
LABEL_35:
        operator delete(v15);
        goto LABEL_36;
      }
    }
    else
    {
      v28 = 0;
      v29 = (_QWORD *)(8 * v24);
      v30 = 0;
      *(_QWORD *)(8 * v24) = v20;
      v22 = 8 * v24 + 8;
      if (v15 == v16)
        goto LABEL_34;
    }
    if ((unint64_t)(v23 - 8) < 0x58)
      goto LABEL_183;
    if ((unint64_t)(v15 - v28) < 0x20)
      goto LABEL_183;
    v92 = ((unint64_t)(v23 - 8) >> 3) + 1;
    v93 = 8 * (v92 & 0x3FFFFFFFFFFFFFFCLL);
    v94 = &v16[-v93];
    v29 = (_QWORD *)((char *)v29 - v93);
    v95 = &v28[8 * v24 - 16];
    v96 = v16 - 16;
    v97 = v92 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v98 = *(_OWORD *)v96;
      *(v95 - 1) = *((_OWORD *)v96 - 1);
      *v95 = v98;
      v95 -= 2;
      v96 -= 32;
      v97 -= 4;
    }
    while (v97);
    v16 = v94;
    if (v92 != (v92 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_183:
      do
      {
        v99 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v29 = v99;
      }
      while (v16 != v15);
    }
    v15 = (char *)*((_QWORD *)&v137 + 1);
    *((_QWORD *)&v137 + 1) = v29;
    *(_QWORD *)&v138 = v22;
    *((_QWORD *)&v138 + 1) = v30;
    if (!v15)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!v18)
    goto LABEL_178;
  ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke((uint64_t)v133, v18 + 5);
LABEL_37:
  v129[0] = MEMORY[0x1E0C809B0];
  v129[1] = 0x40000000;
  v130 = ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2;
  v131 = &__block_descriptor_tmp_91_1;
  v132 = v10;
  v31 = (char *)*((_QWORD *)&v137 + 1);
  v32 = (char *)v138;
  v33 = (const void **)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1) != (_QWORD)v138)
  {
    v33 = (const void **)*((_QWORD *)&v137 + 1);
    while (*((_BYTE *)*v33 + 8) != 17)
    {
      if (++v33 == (const void **)v138)
        goto LABEL_45;
    }
  }
  if (v33 == (const void **)v138)
  {
LABEL_45:
    v35 = operator new(0x10uLL);
    v36 = v35;
    v35[8] = 17;
    *(_QWORD *)v35 = off_1E66DC908;
    *((_WORD *)v35 + 5) = 0;
    v37 = v35 + 10;
    if ((unint64_t)v32 < *((_QWORD *)&v138 + 1))
    {
      *(_QWORD *)v32 = v35;
      v38 = (uint64_t)(v32 + 8);
LABEL_58:
      *(_QWORD *)&v138 = v38;
      v130((uint64_t)v129, v37);
      goto LABEL_59;
    }
    v39 = v32 - v31;
    v40 = (v32 - v31) >> 3;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61)
      goto LABEL_179;
    v42 = *((_QWORD *)&v138 + 1) - (_QWORD)v31;
    if ((uint64_t)(*((_QWORD *)&v138 + 1) - (_QWORD)v31) >> 2 > v41)
      v41 = v42 >> 2;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v43 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v43 = v41;
    if (v43)
    {
      if (v43 >> 61)
        goto LABEL_180;
      v44 = operator new(8 * v43);
      v45 = &v44[8 * v40];
      v46 = &v44[8 * v43];
      *v45 = v36;
      v38 = (uint64_t)(v45 + 1);
      if (v31 == v32)
      {
LABEL_56:
        *((_QWORD *)&v137 + 1) = v45;
        *(_QWORD *)&v138 = v38;
        *((_QWORD *)&v138 + 1) = v46;
        if (!v31)
          goto LABEL_58;
LABEL_57:
        operator delete(v31);
        goto LABEL_58;
      }
    }
    else
    {
      v44 = 0;
      v45 = (_QWORD *)(8 * v40);
      v46 = 0;
      *(_QWORD *)(8 * v40) = v36;
      v38 = 8 * v40 + 8;
      if (v31 == v32)
        goto LABEL_56;
    }
    if ((unint64_t)(v39 - 8) < 0x58)
      goto LABEL_184;
    if ((unint64_t)(v31 - v44) < 0x20)
      goto LABEL_184;
    v100 = ((unint64_t)(v39 - 8) >> 3) + 1;
    v101 = 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
    v102 = &v32[-v101];
    v45 = (_QWORD *)((char *)v45 - v101);
    v103 = &v44[8 * v40 - 16];
    v104 = v32 - 16;
    v105 = v100 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v106 = *(_OWORD *)v104;
      *(v103 - 1) = *((_OWORD *)v104 - 1);
      *v103 = v106;
      v103 -= 2;
      v104 -= 32;
      v105 -= 4;
    }
    while (v105);
    v32 = v102;
    if (v100 != (v100 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_184:
      do
      {
        v107 = *((_QWORD *)v32 - 1);
        v32 -= 8;
        *--v45 = v107;
      }
      while (v32 != v31);
    }
    v31 = (char *)*((_QWORD *)&v137 + 1);
    *((_QWORD *)&v137 + 1) = v45;
    *(_QWORD *)&v138 = v38;
    *((_QWORD *)&v138 + 1) = v46;
    if (!v31)
      goto LABEL_58;
    goto LABEL_57;
  }
  if (!v34)
    goto LABEL_178;
  ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2((uint64_t)v129, v34 + 5);
LABEL_59:
  if (!v12)
    goto LABEL_68;
  v47 = (char *)*((_QWORD *)&v137 + 1);
  v48 = (char *)v138;
  v49 = (const void **)*((_QWORD *)&v137 + 1);
  if (*((_QWORD *)&v137 + 1) != (_QWORD)v138)
  {
    v49 = (const void **)*((_QWORD *)&v137 + 1);
    while (*((_BYTE *)*v49 + 8) != 18)
    {
      if (++v49 == (const void **)v138)
        goto LABEL_70;
    }
  }
  if (v49 == (const void **)v138)
  {
LABEL_70:
    v51 = (char *)operator new(0x10uLL);
    v52 = v51;
    v51[8] = 18;
    *(_QWORD *)v51 = off_1E66DC958;
    *((_WORD *)v51 + 5) = 0;
    v53 = v51 + 10;
    if ((unint64_t)v48 < *((_QWORD *)&v138 + 1))
    {
      *(_QWORD *)v48 = v51;
      v54 = (uint64_t)(v48 + 8);
      goto LABEL_83;
    }
    v55 = v48 - v47;
    v56 = (v48 - v47) >> 3;
    v57 = v56 + 1;
    if ((unint64_t)(v56 + 1) >> 61)
      goto LABEL_179;
    v58 = *((_QWORD *)&v138 + 1) - (_QWORD)v47;
    if ((uint64_t)(*((_QWORD *)&v138 + 1) - (_QWORD)v47) >> 2 > v57)
      v57 = v58 >> 2;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    if (v59)
    {
      if (v59 >> 61)
        goto LABEL_180;
      v60 = operator new(8 * v59);
      v61 = &v60[8 * v56];
      v62 = &v60[8 * v59];
      *v61 = v52;
      v54 = (uint64_t)(v61 + 1);
      if (v47 == v48)
      {
LABEL_81:
        *((_QWORD *)&v137 + 1) = v61;
        *(_QWORD *)&v138 = v54;
        *((_QWORD *)&v138 + 1) = v62;
        if (!v47)
          goto LABEL_83;
        goto LABEL_82;
      }
    }
    else
    {
      v60 = 0;
      v61 = (_QWORD *)(8 * v56);
      v62 = 0;
      *(_QWORD *)(8 * v56) = v52;
      v54 = 8 * v56 + 8;
      if (v47 == v48)
        goto LABEL_81;
    }
    if ((unint64_t)(v55 - 8) < 0x58)
      goto LABEL_185;
    if ((unint64_t)(v47 - v60) < 0x20)
      goto LABEL_185;
    v108 = ((unint64_t)(v55 - 8) >> 3) + 1;
    v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
    v110 = &v48[-v109];
    v61 = (_QWORD *)((char *)v61 - v109);
    v111 = &v60[8 * v56 - 16];
    v112 = v48 - 16;
    v113 = v108 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v114 = *(_OWORD *)v112;
      *(v111 - 1) = *((_OWORD *)v112 - 1);
      *v111 = v114;
      v111 -= 2;
      v112 -= 32;
      v113 -= 4;
    }
    while (v113);
    v48 = v110;
    if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_185:
      do
      {
        v115 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        *--v61 = v115;
      }
      while (v48 != v47);
    }
    v47 = (char *)*((_QWORD *)&v137 + 1);
    *((_QWORD *)&v137 + 1) = v61;
    *(_QWORD *)&v138 = v54;
    *((_QWORD *)&v138 + 1) = v62;
    if (!v47)
    {
LABEL_83:
      *(_QWORD *)&v138 = v54;
      *v53 = v12;
      if (!v125)
        goto LABEL_107;
LABEL_84:
      v63 = (char *)*((_QWORD *)&v137 + 1);
      v64 = (char *)v138;
      v65 = (const void **)*((_QWORD *)&v137 + 1);
      if (*((_QWORD *)&v137 + 1) != (_QWORD)v138)
      {
        v65 = (const void **)*((_QWORD *)&v137 + 1);
        while (*((_BYTE *)*v65 + 8) != 19)
        {
          if (++v65 == (const void **)v138)
            goto LABEL_92;
        }
      }
      if (v65 != (const void **)v138)
      {
        if (v66)
        {
          v67 = v66 + 10;
LABEL_106:
          *v67 = v125;
          goto LABEL_107;
        }
LABEL_178:
        __cxa_bad_cast();
      }
LABEL_92:
      v68 = (char *)operator new(0x10uLL);
      v69 = v68;
      v68[8] = 19;
      *(_QWORD *)v68 = off_1E66DC9A8;
      *((_WORD *)v68 + 5) = 0;
      v67 = v68 + 10;
      if ((unint64_t)v64 < *((_QWORD *)&v138 + 1))
      {
        *(_QWORD *)v64 = v68;
        *(_QWORD *)&v138 = v64 + 8;
        goto LABEL_106;
      }
      v70 = v64 - v63;
      v71 = (v64 - v63) >> 3;
      v72 = v71 + 1;
      if (!((unint64_t)(v71 + 1) >> 61))
      {
        v73 = *((_QWORD *)&v138 + 1) - (_QWORD)v63;
        if ((uint64_t)(*((_QWORD *)&v138 + 1) - (_QWORD)v63) >> 2 > v72)
          v72 = v73 >> 2;
        if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8)
          v74 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v74 = v72;
        if (!v74)
        {
          v75 = 0;
          v76 = (_QWORD *)(8 * v71);
          v77 = 0;
          *(_QWORD *)(8 * v71) = v69;
          v78 = 8 * v71 + 8;
          if (v63 == v64)
          {
LABEL_103:
            *((_QWORD *)&v137 + 1) = v76;
            *(_QWORD *)&v138 = v78;
            *((_QWORD *)&v138 + 1) = v77;
            if (!v63)
            {
LABEL_105:
              *(_QWORD *)&v138 = v78;
              goto LABEL_106;
            }
LABEL_104:
            operator delete(v63);
            goto LABEL_105;
          }
LABEL_169:
          if ((unint64_t)(v70 - 8) < 0x58)
            goto LABEL_186;
          if ((unint64_t)(v63 - v75) < 0x20)
            goto LABEL_186;
          v116 = ((unint64_t)(v70 - 8) >> 3) + 1;
          v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
          v118 = &v64[-v117];
          v76 = (_QWORD *)((char *)v76 - v117);
          v119 = &v75[8 * v71 - 16];
          v120 = v64 - 16;
          v121 = v116 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v122 = *(_OWORD *)v120;
            *(v119 - 1) = *((_OWORD *)v120 - 1);
            *v119 = v122;
            v119 -= 2;
            v120 -= 32;
            v121 -= 4;
          }
          while (v121);
          v64 = v118;
          if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_186:
            do
            {
              v123 = *((_QWORD *)v64 - 1);
              v64 -= 8;
              *--v76 = v123;
            }
            while (v64 != v63);
          }
          v63 = (char *)*((_QWORD *)&v137 + 1);
          *((_QWORD *)&v137 + 1) = v76;
          *(_QWORD *)&v138 = v78;
          *((_QWORD *)&v138 + 1) = v77;
          if (!v63)
            goto LABEL_105;
          goto LABEL_104;
        }
        if (!(v74 >> 61))
        {
          v75 = operator new(8 * v74);
          v76 = &v75[8 * v71];
          v77 = &v75[8 * v74];
          *v76 = v69;
          v78 = (uint64_t)(v76 + 1);
          if (v63 == v64)
            goto LABEL_103;
          goto LABEL_169;
        }
LABEL_180:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_179:
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
LABEL_82:
    operator delete(v47);
    goto LABEL_83;
  }
  if (!v50)
    goto LABEL_178;
  v50[5] = v12;
LABEL_68:
  if (v125)
    goto LABEL_84;
LABEL_107:
  qmi::MutableMessageBase::MutableMessageBase();
  v79 = *(void **)v124;
  if (*(_QWORD *)v124)
    v79 = _Block_copy(v79);
  v80 = *(NSObject **)(v124 + 8);
  aBlock = v79;
  object = v80;
  if (v80)
    dispatch_retain(v80);
  v81 = (std::__shared_weak_count *)a1[10];
  if (!v81 || (v82 = a1[9], (v83 = std::__shared_weak_count::lock(v81)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v84 = v83;
  p_shared_weak_owners = (unint64_t *)&v83->__shared_weak_owners_;
  do
    v86 = __ldxr(p_shared_weak_owners);
  while (__stxr(v86 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v83->__shared_owners_;
  do
    v88 = __ldaxr(p_shared_owners);
  while (__stlxr(v88 - 1, p_shared_owners));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
    std::__shared_weak_count::__release_weak(v84);
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v146 = 1174405120;
  *(_QWORD *)&v147 = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm11WorkoutInfo7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  *((_QWORD *)&v147 + 1) = &__block_descriptor_tmp_136_0;
  v148 = a1;
  v149 = v82;
  v150 = v84;
  do
    v89 = __ldxr(p_shared_weak_owners);
  while (__stxr(v89 + 1, p_shared_weak_owners));
  if (aBlock)
  {
    v90 = object;
    v151 = _Block_copy(aBlock);
    v152 = object;
    if (!object)
      goto LABEL_124;
    goto LABEL_123;
  }
  v90 = object;
  v151 = 0;
  v152 = object;
  if (object)
LABEL_123:
    dispatch_retain(v90);
LABEL_124:
  v139 = a1 + 23;
  v140 = QMIServiceMsg::create();
  v141 = 25000;
  v142 = 0;
  v143 = 0;
  v144[0] = MEMORY[0x1E0C809B0];
  v144[1] = 0x40000000;
  v144[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v144[3] = &unk_1E66DBD60;
  v144[4] = buf;
  v91 = _Block_copy(v144);
  v143 = v91;
  if (v140)
  {
    qmi::Client::send();
    v91 = v143;
  }
  if (v91)
    _Block_release(v91);
  if (v152)
    dispatch_release(v152);
  if (v151)
    _Block_release(v151);
  if (v150)
    std::__shared_weak_count::__release_weak(v150);
  std::__shared_weak_count::__release_weak(v84);
  if (v90)
    dispatch_release(v90);
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v128);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v137);
}

void sub_1B3D5753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

uint64_t ___ZN7antenna16QMICommandDriver16workoutInfo_syncERKN3xpc4dictEN8dispatch8callbackIU13block_pointerFvbNS1_6objectEEEE_block_invoke_2(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void antenna::QMICommandDriver::sendSensorID(uint64_t a1, int a2, uint64_t a3)
{
  void *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  void *aBlock;
  dispatch_object_t object;
  int v11;

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN7antenna16QMICommandDriver12sendSensorIDEjN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_98_0;
  v8[4] = a1;
  v11 = a2;
  v5 = *(void **)a3;
  if (*(_QWORD *)a3)
    v5 = _Block_copy(v5);
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(NSObject **)(a3 + 8);
  aBlock = v5;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN7antenna16QMICommandDriver12sendSensorIDEjN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  int v4;
  char *v5;
  char *v6;
  const void **v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  NSObject *v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *aBlock;
  NSObject *object;
  char v45[32];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  void *v52;
  _QWORD v53[6];
  std::__shared_weak_count *v54;
  void *v55;
  dispatch_object_t v56;
  _QWORD v57[6];

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v46 = v3;
  v47 = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v46);
  v4 = *(_DWORD *)(a1 + 56);
  v5 = (char *)*((_QWORD *)&v46 + 1);
  v6 = (char *)v47;
  v7 = (const void **)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1) != (_QWORD)v47)
  {
    v7 = (const void **)*((_QWORD *)&v46 + 1);
    while (*((_BYTE *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v47)
        goto LABEL_9;
    }
  }
  if (v7 == (const void **)v47)
  {
LABEL_9:
    v10 = (char *)operator new(0x10uLL);
    v11 = v10;
    v10[8] = 16;
    *(_QWORD *)v10 = off_1E66DCA28;
    *((_DWORD *)v10 + 3) = 0;
    v9 = v10 + 12;
    if ((unint64_t)v6 < *((_QWORD *)&v47 + 1))
    {
      *(_QWORD *)v6 = v10;
      *(_QWORD *)&v47 = v6 + 8;
      goto LABEL_23;
    }
    v12 = v6 - v5;
    v13 = (v6 - v5) >> 3;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = *((_QWORD *)&v47 + 1) - (_QWORD)v5;
    if ((uint64_t)(*((_QWORD *)&v47 + 1) - (_QWORD)v5) >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v11;
      v20 = (uint64_t)(v18 + 1);
      if (v5 == v6)
      {
LABEL_20:
        *((_QWORD *)&v46 + 1) = v18;
        *(_QWORD *)&v47 = v20;
        *((_QWORD *)&v47 + 1) = v19;
        if (!v5)
        {
LABEL_22:
          *(_QWORD *)&v47 = v20;
          goto LABEL_23;
        }
LABEL_21:
        operator delete(v5);
        goto LABEL_22;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v11;
      v20 = 8 * v13 + 8;
      if (v5 == v6)
        goto LABEL_20;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_72;
    if ((unint64_t)(v5 - v17) < 0x20)
      goto LABEL_72;
    v35 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v6[-v36];
    v18 = (_QWORD *)((char *)v18 - v36);
    v38 = &v17[8 * v13 - 16];
    v39 = v6 - 16;
    v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *v38 = v41;
      v38 -= 2;
      v39 -= 32;
      v40 -= 4;
    }
    while (v40);
    v6 = v37;
    if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_72:
      do
      {
        v42 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v18 = v42;
      }
      while (v6 != v5);
    }
    v5 = (char *)*((_QWORD *)&v46 + 1);
    *((_QWORD *)&v46 + 1) = v18;
    *(_QWORD *)&v47 = v20;
    *((_QWORD *)&v47 + 1) = v19;
    if (!v5)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (!v8)
    __cxa_bad_cast();
  v9 = v8 + 12;
LABEL_23:
  *v9 = v4;
  qmi::MutableMessageBase::MutableMessageBase();
  v21 = *(void **)(a1 + 40);
  if (v21)
    v21 = _Block_copy(v21);
  v22 = *(NSObject **)(a1 + 48);
  aBlock = v21;
  object = v22;
  if (v22)
    dispatch_retain(v22);
  v23 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v23 || (v24 = *(_QWORD *)(v2 + 72), (v25 = std::__shared_weak_count::lock(v23)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v31 = MEMORY[0x1E0C809B0];
  v53[0] = MEMORY[0x1E0C809B0];
  v53[1] = 1174405120;
  v53[2] = ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm10SensorInfo7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke;
  v53[3] = &__block_descriptor_tmp_138_0;
  v53[4] = v2;
  v53[5] = v24;
  v54 = v26;
  do
    v32 = __ldxr(p_shared_weak_owners);
  while (__stxr(v32 + 1, p_shared_weak_owners));
  if (aBlock)
  {
    v33 = object;
    v55 = _Block_copy(aBlock);
    v56 = object;
    if (!object)
      goto LABEL_40;
    goto LABEL_39;
  }
  v33 = object;
  v55 = 0;
  v56 = object;
  if (object)
LABEL_39:
    dispatch_retain(v33);
LABEL_40:
  v48 = v2 + 184;
  v49 = QMIServiceMsg::create();
  v50 = 25000;
  v51 = 0;
  v52 = 0;
  v57[0] = v31;
  v57[1] = 0x40000000;
  v57[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1;
  v57[3] = &unk_1E66DBD60;
  v57[4] = v53;
  v34 = _Block_copy(v57);
  v52 = v34;
  if (v49)
  {
    qmi::Client::send();
    v34 = v52;
  }
  if (v34)
    _Block_release(v34);
  if (v56)
    dispatch_release(v56);
  if (v55)
    _Block_release(v55);
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::__shared_weak_count::__release_weak(v26);
  if (v33)
    dispatch_release(v33);
  if (aBlock)
    _Block_release(aBlock);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v45);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v46);
}

void sub_1B3D57B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31)
{
  std::__shared_weak_count *v31;

  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a19);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a31);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  std::__shared_weak_count::__release_weak(v31);
  dispatch::callback<void({block_pointer})(BOOL,xpc::object)>::~callback((uint64_t)&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void sub_1B3D57BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c59_ZTSN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c59_ZTSN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void antenna::QMICommandDriver::stewieSARWaitTime(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_ERROR, "Not implemented stewie SAR wait time in this product", v2, 2u);
  }
}

uint64_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(antenna::CommandDriver *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *Name;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  Name = (const char *)antenna::CommandDriver::getName(a1);
  result = strlen(Name);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, Name, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66DBBD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E66DBBD0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<antenna::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B3D57F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D57F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<antenna::QMICommandDriver>::shared_ptr[abi:ne180100]<antenna::QMICommandDriver,std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E66DBC10;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1B3D58054(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver*)#1}::operator() const(antenna::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1B3D58074(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<antenna::QMICommandDriver *,std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver *)#1},std::allocator<antenna::QMICommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::QMICommandDriver *,std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver *)#1},std::allocator<antenna::QMICommandDriver>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver*)#1}::operator() const(antenna::QMICommandDriver*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<antenna::QMICommandDriver *,std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver *)#1},std::allocator<antenna::QMICommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEEN"
                     "St3__110shared_ptrIT_EEPS8_EUlPS5_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16QMIComman"
                                "dDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15make_shared_ptrINS1_16QMICommandDriverEEENSt3__110shared_ptrIT_EEPS8_EUlPS5_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<antenna::QMICommandDriver> ctu::SharedSynchronizable<antenna::CommandDriver>::make_shared_ptr<antenna::QMICommandDriver>(antenna::QMICommandDriver*)::{lambda(antenna::QMICommandDriver*)#1}::operator() const(antenna::QMICommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E66DBC58;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7antenna13CommandDriverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIKN7antenna13CommandDriverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<antenna::CommandDriver>::execute_wrapped<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>(antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0,dispatch_queue_s::default_delete<antenna::QMICommandDriver::perform(xpc::dict,dispatch::callback<void({block_pointer})(BOOL,xpc::object)> &&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2;
  antenna::QMICommandDriver *v3;
  xpc_object_t value;
  size_t v5;
  const void *v6;
  const void *v7;
  const void **v8;
  const void *v9;
  size_t v10;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  size_t v16;
  const void *v17;
  void *v18;
  NSObject *v19;
  const void *v20;
  const void *v21;
  NSObject *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  size_t v27;
  const void *v28;
  const void *v29;
  NSObject *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  size_t v35;
  const void *v36;
  const void *v37;
  NSObject *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  size_t v43;
  const void *v44;
  const void *v45;
  size_t v46;
  const void *v47;
  const void **v48;
  const void *v49;
  size_t v50;
  const void *v51;
  size_t v52;
  const void *v53;
  const void **v54;
  const void *v55;
  NSObject *v56;
  size_t v57;
  const void *v58;
  size_t v59;
  const void *v60;
  const void **v61;
  const void *v62;
  NSObject *v63;
  size_t v64;
  const void *v65;
  size_t v66;
  const void *v67;
  const void **v68;
  const void *v69;
  NSObject *v70;
  size_t v71;
  const void *v72;
  size_t v73;
  const void *v74;
  const void **v75;
  const void *v76;
  NSObject *v77;
  size_t v78;
  const void *v79;
  size_t v80;
  const void *v81;
  const void **v82;
  const void *v83;
  size_t v84;
  const void *v85;
  size_t v86;
  const void *v87;
  const void **v88;
  const void *v89;
  size_t v90;
  const void *v91;
  size_t v92;
  const void *v93;
  const void **v94;
  const void *v95;
  size_t v96;
  const void *v97;
  size_t v98;
  const void *v99;
  const void **v100;
  const void *v101;
  size_t v102;
  const void *v103;
  size_t v104;
  const void *v105;
  const void **v106;
  const void *v107;
  size_t v108;
  const void *v109;
  size_t v110;
  const void *v111;
  const void **v112;
  size_t v113;
  const void *v114;
  NSObject *v115;
  const void *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  xpc_object_t object;
  NSObject *v121;
  const void *__s1[3];

  v2 = *a1;
  v3 = *(antenna::QMICommandDriver **)(*a1 + 8);
  memset(__s1, 170, sizeof(__s1));
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0DDFA68]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v5 = strlen((const char *)*MEMORY[0x1E0DDFB88]);
  v6 = (const void *)v5;
  v7 = (const void *)HIBYTE(__s1[2]);
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v5 != -1)
    {
      v8 = __s1;
      v9 = (const void *)HIBYTE(__s1[2]);
      goto LABEL_9;
    }
LABEL_311:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v5 == -1)
    goto LABEL_311;
  v8 = (const void **)__s1[0];
  v9 = __s1[1];
LABEL_9:
  if (v9 >= v6)
    v10 = (size_t)v6;
  else
    v10 = (size_t)v9;
  if (!memcmp(v8, (const void *)*MEMORY[0x1E0DDFB88], v10) && v9 == v6)
  {
    v17 = *(const void **)(v2 + 16);
    if (v17)
    {
      v18 = _Block_copy(v17);
      v19 = *(NSObject **)(v2 + 24);
      object = v18;
      v121 = v19;
      if (!v19)
        goto LABEL_26;
    }
    else
    {
      v18 = 0;
      v19 = *(NSObject **)(v2 + 24);
      object = 0;
      v121 = v19;
      if (!v19)
      {
LABEL_26:
        antenna::QMICommandDriver::txPowerCappingEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
        if (v19)
          dispatch_release(v19);
        if (v18)
          goto LABEL_298;
        goto LABEL_299;
      }
    }
    dispatch_retain(v19);
    goto LABEL_26;
  }
  v12 = (const void *)*MEMORY[0x1E0DDFC08];
  v13 = (const void *)strlen((const char *)*MEMORY[0x1E0DDFC08]);
  v14 = v13;
  if ((v7 & 0x80) == 0)
  {
    if (v13 != (const void *)-1)
    {
      v15 = v7;
      if (v7 >= v13)
        v16 = (size_t)v13;
      else
        v16 = (size_t)v7;
      if (memcmp(__s1, v12, v16))
        goto LABEL_43;
LABEL_35:
      if (v15 != v14)
        goto LABEL_43;
      v21 = *(const void **)(v2 + 16);
      if (v21)
      {
        v18 = _Block_copy(v21);
        v22 = *(NSObject **)(v2 + 24);
        object = v18;
        v121 = v22;
        if (!v22)
          goto LABEL_39;
      }
      else
      {
        v18 = 0;
        v22 = *(NSObject **)(v2 + 24);
        object = 0;
        v121 = v22;
        if (!v22)
        {
LABEL_39:
          antenna::QMICommandDriver::transmitIndicationRegister_sync((uint64_t)v3, (uint64_t)&object);
          if (v22)
            dispatch_release(v22);
          if (v18)
            goto LABEL_298;
          goto LABEL_299;
        }
      }
      dispatch_retain(v22);
      goto LABEL_39;
    }
LABEL_312:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v13 == (const void *)-1)
    goto LABEL_312;
  v15 = __s1[1];
  if (__s1[1] >= v13)
    v20 = v13;
  else
    v20 = __s1[1];
  if (!memcmp(__s1[0], v12, (size_t)v20))
    goto LABEL_35;
LABEL_43:
  v23 = (const void *)*MEMORY[0x1E0DDFBD0];
  v24 = (const void *)strlen((const char *)*MEMORY[0x1E0DDFBD0]);
  v25 = v24;
  if ((v7 & 0x80) == 0)
  {
    if (v24 != (const void *)-1)
    {
      v26 = v7;
      if (v7 >= v24)
        v27 = (size_t)v24;
      else
        v27 = (size_t)v7;
      if (memcmp(__s1, v23, v27))
        goto LABEL_65;
LABEL_57:
      if (v26 != v25)
        goto LABEL_65;
      v29 = *(const void **)(v2 + 16);
      if (v29)
      {
        v18 = _Block_copy(v29);
        v30 = *(NSObject **)(v2 + 24);
        object = v18;
        v121 = v30;
        if (!v30)
          goto LABEL_61;
      }
      else
      {
        v18 = 0;
        v30 = *(NSObject **)(v2 + 24);
        object = 0;
        v121 = v30;
        if (!v30)
        {
LABEL_61:
          antenna::QMICommandDriver::transmitIndicationEnable_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v30)
            dispatch_release(v30);
          if (v18)
            goto LABEL_298;
          goto LABEL_299;
        }
      }
      dispatch_retain(v30);
      goto LABEL_61;
    }
LABEL_313:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v24 == (const void *)-1)
    goto LABEL_313;
  v26 = __s1[1];
  if (__s1[1] >= v24)
    v28 = v24;
  else
    v28 = __s1[1];
  if (!memcmp(__s1[0], v23, (size_t)v28))
    goto LABEL_57;
LABEL_65:
  v31 = (const void *)*MEMORY[0x1E0DDFB20];
  v32 = (const void *)strlen((const char *)*MEMORY[0x1E0DDFB20]);
  v33 = v32;
  if ((v7 & 0x80) == 0)
  {
    if (v32 != (const void *)-1)
    {
      v34 = v7;
      if (v7 >= v32)
        v35 = (size_t)v32;
      else
        v35 = (size_t)v7;
      if (memcmp(__s1, v31, v35))
        goto LABEL_87;
LABEL_79:
      if (v34 != v33)
        goto LABEL_87;
      v37 = *(const void **)(v2 + 16);
      if (v37)
      {
        v18 = _Block_copy(v37);
        v38 = *(NSObject **)(v2 + 24);
        object = v18;
        v121 = v38;
        if (!v38)
          goto LABEL_83;
      }
      else
      {
        v18 = 0;
        v38 = *(NSObject **)(v2 + 24);
        object = 0;
        v121 = v38;
        if (!v38)
        {
LABEL_83:
          antenna::QMICommandDriver::txPowerCapping_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v38)
            dispatch_release(v38);
          if (v18)
            goto LABEL_298;
          goto LABEL_299;
        }
      }
      dispatch_retain(v38);
      goto LABEL_83;
    }
LABEL_314:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v32 == (const void *)-1)
    goto LABEL_314;
  v34 = __s1[1];
  if (__s1[1] >= v32)
    v36 = v32;
  else
    v36 = __s1[1];
  if (!memcmp(__s1[0], v31, (size_t)v36))
    goto LABEL_79;
LABEL_87:
  v39 = (const void *)*MEMORY[0x1E0DDFB90];
  v40 = (const void *)strlen((const char *)*MEMORY[0x1E0DDFB90]);
  v41 = v40;
  if ((v7 & 0x80) != 0)
  {
    if (v40 != (const void *)-1)
    {
      v42 = __s1[1];
      if (__s1[1] >= v40)
        v44 = v40;
      else
        v44 = __s1[1];
      if (memcmp(__s1[0], v39, (size_t)v44))
        goto LABEL_104;
      goto LABEL_101;
    }
LABEL_315:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v40 == (const void *)-1)
    goto LABEL_315;
  v42 = v7;
  if (v7 >= v40)
    v43 = (size_t)v40;
  else
    v43 = (size_t)v7;
  if (memcmp(__s1, v39, v43))
    goto LABEL_104;
LABEL_101:
  if (v42 == v41)
  {
    v45 = *(const void **)(v2 + 16);
    if (v45)
      v18 = _Block_copy(v45);
    else
      v18 = 0;
    v56 = *(NSObject **)(v2 + 24);
    object = v18;
    v121 = v56;
    if (v56)
      dispatch_retain(v56);
    antenna::QMICommandDriver::txPowerConfiguration_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
    if (v56)
      dispatch_release(v56);
    if (v18)
      goto LABEL_298;
    goto LABEL_299;
  }
LABEL_104:
  v46 = strlen((const char *)*MEMORY[0x1E0DDFBC8]);
  v47 = (const void *)v46;
  if ((v7 & 0x80) == 0)
  {
    if (v46 != -1)
    {
      v48 = __s1;
      v49 = v7;
      goto LABEL_111;
    }
LABEL_316:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v46 == -1)
    goto LABEL_316;
  v48 = (const void **)__s1[0];
  v49 = __s1[1];
LABEL_111:
  if (v49 >= v47)
    v50 = (size_t)v47;
  else
    v50 = (size_t)v49;
  if (memcmp(v48, (const void *)*MEMORY[0x1E0DDFBC8], v50) || v49 != v47)
  {
    v52 = strlen((const char *)*MEMORY[0x1E0DDFBD8]);
    v53 = (const void *)v52;
    if ((v7 & 0x80) != 0)
    {
      if (v52 != -1)
      {
        v54 = (const void **)__s1[0];
        v55 = __s1[1];
LABEL_130:
        if (v55 >= v53)
          v57 = (size_t)v53;
        else
          v57 = (size_t)v55;
        if (!memcmp(v54, (const void *)*MEMORY[0x1E0DDFBD8], v57) && v55 == v53)
        {
          v58 = *(const void **)(v2 + 16);
          if (v58)
            v18 = _Block_copy(v58);
          else
            v18 = 0;
          v70 = *(NSObject **)(v2 + 24);
          object = v18;
          v121 = v70;
          if (v70)
            dispatch_retain(v70);
          antenna::QMICommandDriver::e75AccessoryStatusARTD_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
          if (v70)
            dispatch_release(v70);
          if (v18)
            goto LABEL_298;
          goto LABEL_299;
        }
        v59 = strlen((const char *)*MEMORY[0x1E0DDFB08]);
        v60 = (const void *)v59;
        if ((v7 & 0x80) != 0)
        {
          if (v59 != -1)
          {
            v61 = (const void **)__s1[0];
            v62 = __s1[1];
LABEL_149:
            if (v62 >= v60)
              v64 = (size_t)v60;
            else
              v64 = (size_t)v62;
            if (!memcmp(v61, (const void *)*MEMORY[0x1E0DDFB08], v64) && v62 == v60)
            {
              v65 = *(const void **)(v2 + 16);
              if (v65)
                v18 = _Block_copy(v65);
              else
                v18 = 0;
              v77 = *(NSObject **)(v2 + 24);
              object = v18;
              v121 = v77;
              if (v77)
                dispatch_retain(v77);
              antenna::QMICommandDriver::antennaSwitch_sync((uint64_t)v3, (xpc_object_t *)v2, (uint64_t)&object);
              goto LABEL_295;
            }
            v66 = strlen((const char *)*MEMORY[0x1E0DDFBA8]);
            v67 = (const void *)v66;
            if ((v7 & 0x80) != 0)
            {
              if (v66 != -1)
              {
                v68 = (const void **)__s1[0];
                v69 = __s1[1];
LABEL_168:
                if (v69 >= v67)
                  v71 = (size_t)v67;
                else
                  v71 = (size_t)v69;
                if (!memcmp(v68, (const void *)*MEMORY[0x1E0DDFBA8], v71) && v69 == v67)
                {
                  v72 = *(const void **)(v2 + 16);
                  if (v72)
                    v18 = _Block_copy(v72);
                  else
                    v18 = 0;
                  v77 = *(NSObject **)(v2 + 24);
                  object = v18;
                  v121 = v77;
                  if (v77)
                    dispatch_retain(v77);
                  antenna::QMICommandDriver::wiredPortNotification_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                  goto LABEL_295;
                }
                v73 = strlen((const char *)*MEMORY[0x1E0DDFAF0]);
                v74 = (const void *)v73;
                if ((v7 & 0x80) != 0)
                {
                  if (v73 != -1)
                  {
                    v75 = (const void **)__s1[0];
                    v76 = __s1[1];
LABEL_184:
                    if (v76 >= v74)
                      v78 = (size_t)v74;
                    else
                      v78 = (size_t)v76;
                    if (!memcmp(v75, (const void *)*MEMORY[0x1E0DDFAF0], v78) && v76 == v74)
                    {
                      v79 = *(const void **)(v2 + 16);
                      if (v79)
                        v18 = _Block_copy(v79);
                      else
                        v18 = 0;
                      v77 = *(NSObject **)(v2 + 24);
                      object = v18;
                      v121 = v77;
                      if (v77)
                        dispatch_retain(v77);
                      antenna::QMICommandDriver::speakerState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                      goto LABEL_295;
                    }
                    v80 = strlen((const char *)*MEMORY[0x1E0DDFB78]);
                    v81 = (const void *)v80;
                    if ((v7 & 0x80) != 0)
                    {
                      if (v80 != -1)
                      {
                        v82 = (const void **)__s1[0];
                        v83 = __s1[1];
LABEL_200:
                        if (v83 >= v81)
                          v84 = (size_t)v81;
                        else
                          v84 = (size_t)v83;
                        if (!memcmp(v82, (const void *)*MEMORY[0x1E0DDFB78], v84) && v83 == v81)
                        {
                          v85 = *(const void **)(v2 + 16);
                          if (v85)
                            v18 = _Block_copy(v85);
                          else
                            v18 = 0;
                          v77 = *(NSObject **)(v2 + 24);
                          object = v18;
                          v121 = v77;
                          if (v77)
                            dispatch_retain(v77);
                          antenna::QMICommandDriver::handDetectionState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                          goto LABEL_295;
                        }
                        v86 = strlen((const char *)*MEMORY[0x1E0DDFB58]);
                        v87 = (const void *)v86;
                        if ((v7 & 0x80) != 0)
                        {
                          if (v86 != -1)
                          {
                            v88 = (const void **)__s1[0];
                            v89 = __s1[1];
LABEL_216:
                            if (v89 >= v87)
                              v90 = (size_t)v87;
                            else
                              v90 = (size_t)v89;
                            if (!memcmp(v88, (const void *)*MEMORY[0x1E0DDFB58], v90) && v89 == v87)
                            {
                              v91 = *(const void **)(v2 + 16);
                              if (v91)
                                v18 = _Block_copy(v91);
                              else
                                v18 = 0;
                              v77 = *(NSObject **)(v2 + 24);
                              object = v18;
                              v121 = v77;
                              if (v77)
                                dispatch_retain(v77);
                              antenna::QMICommandDriver::powerSourceState_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                              goto LABEL_295;
                            }
                            v92 = strlen((const char *)*MEMORY[0x1E0DDFAD8]);
                            v93 = (const void *)v92;
                            if ((v7 & 0x80) != 0)
                            {
                              if (v92 != -1)
                              {
                                v94 = (const void **)__s1[0];
                                v95 = __s1[1];
LABEL_232:
                                if (v95 >= v93)
                                  v96 = (size_t)v93;
                                else
                                  v96 = (size_t)v95;
                                if (!memcmp(v94, (const void *)*MEMORY[0x1E0DDFAD8], v96) && v95 == v93)
                                {
                                  v97 = *(const void **)(v2 + 16);
                                  if (v97)
                                    v18 = _Block_copy(v97);
                                  else
                                    v18 = 0;
                                  v77 = *(NSObject **)(v2 + 24);
                                  object = v18;
                                  v121 = v77;
                                  if (v77)
                                    dispatch_retain(v77);
                                  antenna::QMICommandDriver::ppmEnable_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                                  goto LABEL_295;
                                }
                                v98 = strlen((const char *)*MEMORY[0x1E0DDFBA0]);
                                v99 = (const void *)v98;
                                if ((v7 & 0x80) != 0)
                                {
                                  if (v98 != -1)
                                  {
                                    v100 = (const void **)__s1[0];
                                    v101 = __s1[1];
LABEL_248:
                                    if (v101 >= v99)
                                      v102 = (size_t)v99;
                                    else
                                      v102 = (size_t)v101;
                                    if (!memcmp(v100, (const void *)*MEMORY[0x1E0DDFBA0], v102) && v101 == v99)
                                    {
                                      v103 = *(const void **)(v2 + 16);
                                      if (v103)
                                        v18 = _Block_copy(v103);
                                      else
                                        v18 = 0;
                                      v77 = *(NSObject **)(v2 + 24);
                                      object = v18;
                                      v121 = v77;
                                      if (v77)
                                        dispatch_retain(v77);
                                      antenna::QMICommandDriver::ppmRegisterIndication_sync(v3, (uint64_t)&object);
                                      goto LABEL_295;
                                    }
                                    v104 = strlen((const char *)*MEMORY[0x1E0DDFB18]);
                                    v105 = (const void *)v104;
                                    if ((v7 & 0x80) != 0)
                                    {
                                      if (v104 != -1)
                                      {
                                        v106 = (const void **)__s1[0];
                                        v107 = __s1[1];
LABEL_264:
                                        if (v107 >= v105)
                                          v108 = (size_t)v105;
                                        else
                                          v108 = (size_t)v107;
                                        if (!memcmp(v106, (const void *)*MEMORY[0x1E0DDFB18], v108) && v107 == v105)
                                        {
                                          v109 = *(const void **)(v2 + 16);
                                          if (v109)
                                            v18 = _Block_copy(v109);
                                          else
                                            v18 = 0;
                                          v77 = *(NSObject **)(v2 + 24);
                                          object = v18;
                                          v121 = v77;
                                          if (v77)
                                            dispatch_retain(v77);
                                          antenna::QMICommandDriver::deviceMaterial_sync((uint64_t)v3, v2, (uint64_t)&object);
LABEL_295:
                                          if (v77)
                                          {
                                            dispatch_release(v77);
                                            v18 = object;
                                          }
                                          if (v18)
                                            goto LABEL_298;
                                          goto LABEL_299;
                                        }
                                        v110 = strlen((const char *)*MEMORY[0x1E0DDFAE8]);
                                        v111 = (const void *)v110;
                                        if ((v7 & 0x80) != 0)
                                        {
                                          if (v110 != -1)
                                          {
                                            v112 = (const void **)__s1[0];
                                            v7 = __s1[1];
                                            goto LABEL_280;
                                          }
                                        }
                                        else if (v110 != -1)
                                        {
                                          v112 = __s1;
LABEL_280:
                                          if (v7 >= v111)
                                            v113 = (size_t)v111;
                                          else
                                            v113 = (size_t)v7;
                                          if (memcmp(v112, (const void *)*MEMORY[0x1E0DDFAE8], v113) || v7 != v111)
                                            goto LABEL_299;
                                          v114 = *(const void **)(v2 + 16);
                                          if (v114)
                                            v18 = _Block_copy(v114);
                                          else
                                            v18 = 0;
                                          v77 = *(NSObject **)(v2 + 24);
                                          object = v18;
                                          v121 = v77;
                                          if (v77)
                                            dispatch_retain(v77);
                                          antenna::QMICommandDriver::workoutInfo_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
                                          goto LABEL_295;
                                        }
                                        std::string::__throw_out_of_range[abi:ne180100]();
                                      }
                                    }
                                    else if (v104 != -1)
                                    {
                                      v106 = __s1;
                                      v107 = v7;
                                      goto LABEL_264;
                                    }
                                    std::string::__throw_out_of_range[abi:ne180100]();
                                  }
                                }
                                else if (v98 != -1)
                                {
                                  v100 = __s1;
                                  v101 = v7;
                                  goto LABEL_248;
                                }
                                std::string::__throw_out_of_range[abi:ne180100]();
                              }
                            }
                            else if (v92 != -1)
                            {
                              v94 = __s1;
                              v95 = v7;
                              goto LABEL_232;
                            }
                            std::string::__throw_out_of_range[abi:ne180100]();
                          }
                        }
                        else if (v86 != -1)
                        {
                          v88 = __s1;
                          v89 = v7;
                          goto LABEL_216;
                        }
                        std::string::__throw_out_of_range[abi:ne180100]();
                      }
                    }
                    else if (v80 != -1)
                    {
                      v82 = __s1;
                      v83 = v7;
                      goto LABEL_200;
                    }
                    std::string::__throw_out_of_range[abi:ne180100]();
                  }
                }
                else if (v73 != -1)
                {
                  v75 = __s1;
                  v76 = v7;
                  goto LABEL_184;
                }
                std::string::__throw_out_of_range[abi:ne180100]();
              }
            }
            else if (v66 != -1)
            {
              v68 = __s1;
              v69 = v7;
              goto LABEL_168;
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        else if (v59 != -1)
        {
          v61 = __s1;
          v62 = v7;
          goto LABEL_149;
        }
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v52 != -1)
    {
      v54 = __s1;
      v55 = v7;
      goto LABEL_130;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v51 = *(const void **)(v2 + 16);
  if (v51)
    v18 = _Block_copy(v51);
  else
    v18 = 0;
  v63 = *(NSObject **)(v2 + 24);
  object = v18;
  v121 = v63;
  if (v63)
    dispatch_retain(v63);
  antenna::QMICommandDriver::e75AccessoryStatusRF_sync(v3, (xpc_object_t *)v2, (uint64_t)&object);
  if (v63)
    dispatch_release(v63);
  if (v18)
LABEL_298:
    _Block_release(v18);
LABEL_299:
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
  v115 = *(NSObject **)(v2 + 24);
  if (v115)
    dispatch_release(v115);
  v116 = *(const void **)(v2 + 16);
  if (v116)
    _Block_release(v116);
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v117 = (std::__shared_weak_count *)a1[2];
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  operator delete(a1);
}

void sub_1B3D58F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;
  uint64_t v18;
  xpc_object_t v19;
  NSObject *v20;
  NSObject *v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  if (v20)
  {
    dispatch_release(v20);
    v19 = object;
  }
  if (v19)
    _Block_release(v19);
  if (a17 < 0)
    operator delete(__p);
  v22 = *(NSObject **)(v18 + 24);
  if (v22)
    dispatch_release(v22);
  v23 = *(const void **)(v18 + 16);
  if (v23)
    _Block_release(v23);
  xpc_release(*(xpc_object_t *)v18);
  operator delete((void *)v18);
  v24 = (std::__shared_weak_count *)v17[2];
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitEnable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitEnable>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DBCB0;
  return result;
}

char *qmi::MutableMessageBase::createTLV<bsp::tlv::abm::SvcType>(_QWORD *a1)
{
  _WORD *v2;
  _WORD *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char *result;

  v2 = operator new(0x10uLL);
  v3 = v2;
  v2[4] = 16;
  *(_QWORD *)v2 = off_1E66DBD00;
  v5 = (char *)a1[2];
  v4 = a1[3];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = v2;
    v7 = (uint64_t)(v5 + 8);
    goto LABEL_23;
  }
  v8 = (char *)a1[1];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v13 = (char *)operator new(8 * v12);
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v3;
    v7 = (uint64_t)(v14 + 8);
    v16 = (char *)(v5 - v8);
    if (v5 == v8)
      goto LABEL_21;
    goto LABEL_14;
  }
  v13 = 0;
  v14 = (char *)(8 * v9);
  v15 = 0;
  *(_QWORD *)(8 * v9) = v3;
  v7 = 8 * v9 + 8;
  v16 = (char *)(v5 - v8);
  if (v5 != v8)
  {
LABEL_14:
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_28;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v19];
    v14 -= v19;
    v20 = &v13[8 * v9 - 16];
    v21 = (__int128 *)(v5 - 16);
    v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *((_OWORD *)v20 - 1) = *(v21 - 1);
      *(_OWORD *)v20 = v23;
      v20 -= 32;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        v24 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v14 - 1) = v24;
        v14 -= 8;
      }
      while (v6 != v8);
    }
    v6 = (char *)a1[1];
  }
LABEL_21:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6)
    operator delete(v6);
LABEL_23:
  result = (char *)v3 + 9;
  a1[2] = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SvcType>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SvcType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SvcType>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DBD00;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm18TxPwr_Limit_Enable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm18TxPwr_Limit_Enable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D595DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D595F0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE56c59_ZTSN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrIN7antenna13CommandDriverEEE56c59_ZTSN8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm18TxPwr_Limit_Enable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<qmi::ResponseBase const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1B3D598AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm20TxPwrLimitIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D59980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D59994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D599C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm16TransmitStateInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D59A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D59AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D59AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;
  xpc_object_t object;

  v1 = *(unsigned __int8 *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, BOOL, xpc_object_t *))(v3 + 16))(v3, v1 != 0, &object);
  xpc_release(object);
}

void sub_1B3D59B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvbN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(const void **)(a2 + 32);
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  else
  {
    v6 = *(void **)(a2 + 40);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v6;
    if (v6)
      return xpc_retain(v6);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_32c56_ZTSN8dispatch5blockIU13block_pointerFvbN3xpc6objectEEEE40c17_ZTSN3xpc6objectE(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NotificationEnable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NotificationEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::NotificationEnable>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DBE28;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm25TxPwr_Notification_Enable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm25TxPwr_Notification_Enable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D59ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D59EE8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm25TxPwr_Notification_Enable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TransmitEnable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TransmitEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TransmitEnable>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DBEA8;
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp3abm22TransmitStateIndConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D5A1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5A1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D5A214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm14TxPwr_Stop_Cap7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm14TxPwr_Stop_Cap7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5A47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5A490(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm14TxPwr_Stop_Cap7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PhoneBackoffLevel>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PhoneBackoffLevel>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PhoneBackoffLevel>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DBF50;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AntennaFreeSpaceConfigLevel>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DBFA0;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm15TxPwr_Start_Cap7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm15TxPwr_Start_Cap7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5A980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5A994(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm15TxPwr_Start_Cap7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TechType>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TechType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TechType>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC020;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMPercentile>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMPercentile>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMPercentile>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC070;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMDutyCycle>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMDutyCycle>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::CLTMDutyCycle>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC0C0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeout>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeout>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeout>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC110;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeoutPhone>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeoutPhone>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::LimitTimeoutPhone>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC160;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm13TxPwrConfigV37RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm13TxPwrConfigV37RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5AFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5B010(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm13TxPwrConfigV37RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatus>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatus>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatus>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC1E0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryType>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC230;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm19AccessoryAttachment7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm19AccessoryAttachment7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5B510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5B524(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm19AccessoryAttachment7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatusARTD>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatusARTD>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryStatusARTD>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC2B0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryTypeARTD>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryTypeARTD>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::AccessoryTypeARTD>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC300;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm23AccessoryAttachmentARTD7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm23AccessoryAttachmentARTD7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5BA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5BA38(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm23AccessoryAttachmentARTD7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfigInfo>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfigInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TxAntennaConfigInfo>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC380;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigInfo>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::ARTDConfigInfo>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC3D0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm13AntennaConfig7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm13AntennaConfig7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5BF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5BF4C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm13AntennaConfig7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WiredPortStatus>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WiredPortStatus>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WiredPortStatus>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC450;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm21WiredPortNotification7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm21WiredPortNotification7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5C3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5C3E0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm21WiredPortNotification7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SpeakerState>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SpeakerState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SpeakerState>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC4D0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm12TxPwrSpeaker7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm12TxPwrSpeaker7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5C868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5C87C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm12TxPwrSpeaker7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::HandState>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::HandState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::HandState>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC550;
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm18TxPwrHandDetection7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm18TxPwrHandDetection7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5CCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5CD10(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm18TxPwrHandDetection7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerSourceState>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerSourceState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PowerSourceState>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC5D0;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm16PowerSourceState7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm16PowerSourceState7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5D198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5D1AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm16PowerSourceState7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PPMEnable>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PPMEnable>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

_WORD *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::PPMEnable>::clone(uint64_t a1)
{
  _WORD *result;

  result = operator new(0x10uLL);
  result[4] = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC650;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Duration>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Duration>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::Duration>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC6A0;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm9PPMEnable7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm9PPMEnable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5D6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5D6B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm9PPMEnable7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp3abm13PPMIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[48];

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    memset(&v4[24], 170, 24);
    QMIServiceMsg::serialize(this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, *(const void **)&v4[24]);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (*(_QWORD *)&v4[24])
    {
      *(_QWORD *)&v4[32] = *(_QWORD *)&v4[24];
      operator delete(*(void **)&v4[24]);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1B3D5D934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5D948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B3D5D974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BottomEnclosure>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BottomEnclosure>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BottomEnclosure>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC748;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TopEnclosure>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TopEnclosure>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::TopEnclosure>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC798;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::FCMType>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::FCMType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::FCMType>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC7E8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BCMType>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BCMType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::BCMType>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC838;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm14DeviceMaterial7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm14DeviceMaterial7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5DDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5DDD0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm14DeviceMaterial7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutType>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutType>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC8B8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutState>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutState>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutState>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC908;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutLocation>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutLocation>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::WorkoutLocation>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC958;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SwimLocation>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SwimLocation>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_WORD *)(v3 + 3) = *(_WORD *)(result + 10);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SwimLocation>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DC9A8;
  *((_WORD *)result + 5) = *(_WORD *)(a1 + 10);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm11WorkoutInfo7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm11WorkoutInfo7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5E3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5E3D4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm11WorkoutInfo7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SensorID>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SensorID>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

_BYTE *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::abm::SensorID>::clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  result[8] = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = off_1E66DCA28;
  *((_DWORD *)result + 3) = *(_DWORD *)(a1 + 12);
  return result;
}

void ___ZN7antenna16QMICommandDriver7sendMsgIN3bsp3abm10SensorInfo7RequestEEEvT_N8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEEj_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v6;
  const void *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v25 = 0;
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v25 = std::__shared_weak_count::lock(v4);
    if (!v25)
      return;
    v6 = (_QWORD *)a1[5];
    if (v6)
    {
      v7 = (const void *)a1[7];
      if (v7)
      {
        if (a1[8])
        {
          v8 = *(_DWORD *)(a2 + 4);
          v9 = v8 == 0;
          if (!v8
            || (v10 = *(NSObject **)(v3 + 40), !os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            || (*(_DWORD *)buf = 67109378,
                v27 = v8,
                v28 = 2080,
                v29 = qmi::asString(),
                _os_log_error_impl(&dword_1B3CB3000, v10, OS_LOG_TYPE_ERROR, "Error in response with code = 0x%x (%s)", buf, 0x12u), (v7 = (const void *)a1[7]) != 0)&& a1[8])
          {
            v11 = _Block_copy(v7);
            v12 = a1[8];
            if (v12)
              dispatch_retain(v12);
            v13 = (std::__shared_weak_count *)v6[10];
            if (!v13 || (v14 = v6[9], (v15 = std::__shared_weak_count::lock(v13)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v16 = v15;
            v17 = operator new(0x18uLL);
            if (v11)
            {
              *v17 = _Block_copy(v11);
              v17[1] = v12;
              if (!v12)
                goto LABEL_15;
            }
            else
            {
              *v17 = 0;
              v17[1] = v12;
              if (!v12)
              {
LABEL_15:
                *((_BYTE *)v17 + 16) = v9;
                v18 = v6[11];
                p_shared_owners = (unint64_t *)&v16->__shared_owners_;
                do
                  v20 = __ldxr(p_shared_owners);
                while (__stxr(v20 + 1, p_shared_owners));
                v21 = operator new(0x18uLL);
                *v21 = v17;
                v21[1] = v14;
                v21[2] = v16;
                dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm10SensorInfo7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_);
                do
                  v22 = __ldaxr(p_shared_owners);
                while (__stlxr(v22 - 1, p_shared_owners));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                  std::__shared_weak_count::__release_weak(v16);
                }
                if (v12)
                  dispatch_release(v12);
                if (v11)
                  _Block_release(v11);
                goto LABEL_25;
              }
            }
            dispatch_retain(v12);
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_25:
  if (v25)
  {
    v23 = (unint64_t *)&v25->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1B3D5E85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B3D5E870(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN7antenna13CommandDriverEE15execute_wrappedIZZNS3_16QMICommandDriver7sendMsgIN3bsp3abm10SensorInfo7RequestEEEvT_NS_8callbackIU13block_pointerFvbN3xpc6objectEEEEjEUb_EUlvE_EEvOSD_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSP_14default_deleteISD_EEEEENUlPvE_8__invokeESU_(_QWORD *a1)
{
  _QWORD *v2;
  char v3;
  xpc_object_t v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD block[4];
  void *aBlock;
  xpc_object_t object;
  char v14;

  v2 = (_QWORD *)*a1;
  if (!*(_QWORD *)*a1 || !v2[1])
    goto LABEL_16;
  v3 = *((_BYTE *)v2 + 16);
  v4 = xpc_null_create();
  if (*v2)
    v5 = _Block_copy((const void *)*v2);
  else
    v5 = 0;
  v6 = v2[1];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvbN3xpc6objectEEEclIJbS2_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_106;
  if (!v5)
  {
    v14 = v3;
    aBlock = 0;
    object = v4;
    if (v4)
      goto LABEL_8;
LABEL_10:
    object = xpc_null_create();
    goto LABEL_11;
  }
  v14 = v3;
  aBlock = _Block_copy(v5);
  object = v4;
  if (!v4)
    goto LABEL_10;
LABEL_8:
  xpc_retain(v4);
LABEL_11:
  dispatch_async(v6, block);
  xpc_release(object);
  object = 0;
  if (aBlock)
    _Block_release(aBlock);
  if (v5)
    _Block_release(v5);
  xpc_release(v4);
LABEL_16:
  v7 = v2[1];
  if (v7)
    dispatch_release(v7);
  if (*v2)
    _Block_release((const void *)*v2);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

uint64_t coex::QMICommandDriver::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  std::__shared_weak_count *v23;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xF8uLL);
  v7 = (uint64_t)v6;
  v8 = (std::__shared_weak_count *)a1[1];
  v22 = *a1;
  v23 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  coex::QMICommandDriver::QMICommandDriver((uint64_t)v6, (uint64_t)&v22, (uint64_t)v21);
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<coex::QMICommandDriver>::shared_ptr[abi:ne180100]<coex::QMICommandDriver,std::shared_ptr<coex::QMICommandDriver> ctu::SharedSynchronizable<coex::CommandDriver>::make_shared_ptr<coex::QMICommandDriver>(coex::QMICommandDriver*)::{lambda(coex::QMICommandDriver*)#1},void>(a3, v7);
  ctu::Loggable<coex::CommandDriver,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a3);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = v23;
  if (v23)
  {
    v18 = (unint64_t *)&v23->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 80))(*a3);
}

void sub_1B3D5EB64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1B3D5EB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v11);
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::QMICommandDriver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  const void **v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  CFDictionaryRef v18;
  const void *v19;
  const void *v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(std::__shared_weak_count **)(a2 + 8);
  v24 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a3 + 8);
  v23 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  coex::CommandDriver::CommandDriver();
  if (v23)
  {
    v10 = (unint64_t *)&v23->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v24)
  {
    v12 = (unint64_t *)&v24->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v14 = (const void **)(a1 + 240);
  *(_QWORD *)a1 = off_1E66DCA90;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_BYTE *)(a1 + 224) = 0;
  v15 = atomic_load((unsigned __int8 *)&qword_1EDBEAAA0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_1EDBEAAA0))
  {
    _MergedGlobals_2 = 0;
    __cxa_atexit((void (*)(void *))ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef, &_MergedGlobals_2, &dword_1B3CB3000);
    __cxa_guard_release(&qword_1EDBEAAA0);
  }
  v16 = atomic_load((unsigned __int8 *)&qword_1EDBEAAA8);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_1EDBEAAA8))
  {
    v22 = *MEMORY[0x1E0DDF398];
    qword_1EDBEAAB8 = *MEMORY[0x1E0DDF3A0];
    unk_1EDBEAAC0 = v22;
    qword_1EDBEAAC8 = *MEMORY[0x1E0DDF450];
    __cxa_guard_release(&qword_1EDBEAAA8);
  }
  v17 = atomic_load((unsigned __int8 *)&qword_1EDBEAAB0);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1EDBEAAB0))
  {
    qword_1EDBEAAD0 = *MEMORY[0x1E0C9AE40];
    unk_1EDBEAAD8 = qword_1EDBEAAD0;
    qword_1EDBEAAE0 = qword_1EDBEAAD0;
    __cxa_guard_release(&qword_1EDBEAAB0);
  }
  v18 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&qword_1EDBEAAB8, (const void **)&qword_1EDBEAAD0, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v18)
  {
LABEL_23:
    v18 = (CFDictionaryRef)_MergedGlobals_2;
    if (!_MergedGlobals_2)
      goto LABEL_25;
    goto LABEL_24;
  }
  v19 = (const void *)_MergedGlobals_2;
  _MergedGlobals_2 = (uint64_t)v18;
  if (v19)
  {
    CFRelease(v19);
    goto LABEL_23;
  }
LABEL_24:
  CFRetain(v18);
LABEL_25:
  v20 = *v14;
  *v14 = v18;
  if (v20)
    CFRelease(v20);
  return a1;
}

void sub_1B3D5EE48(_Unwind_Exception *a1)
{
  void **v1;
  const void **v2;
  qmi::Client *v3;
  const void **v4;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(v4);
  qmi::Client::~Client(v3);
  coex::CommandDriver::~CommandDriver(v1);
  _Unwind_Resume(a1);
}

void sub_1B3D5EE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void coex::CommandDriver::~CommandDriver(void **this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;

  *this = off_1E66DDC60;
  if (*((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    this[18] = &off_1E66DDCC8;
    v2 = (unsigned int *)this[20];
    if (!v2)
      goto LABEL_12;
  }
  else
  {
    this[18] = &off_1E66DDCC8;
    v2 = (unsigned int *)this[20];
    if (!v2)
      goto LABEL_12;
  }
  v3 = v2 + 2;
  do
  {
    v4 = __ldaxr(v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v3));
  if (!v5)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    v6 = v2 + 3;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
  }
LABEL_12:
  this[15] = &off_1E66DDD38;
  v9 = (unsigned int *)this[17];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  v16 = (std::__shared_weak_count *)this[14];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *this = off_1E66DDDA8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v19 = this[12];
  if (v19)
    dispatch_release(v19);
  v20 = this[11];
  if (v20)
    dispatch_release(v20);
  v21 = (std::__shared_weak_count *)this[10];
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void coex::QMICommandDriver::~QMICommandDriver(coex::QMICommandDriver *this)
{
  NSObject *v2;
  const void *v3;
  const void *v4;
  uint8_t v5[16];

  *(_QWORD *)this = off_1E66DCA90;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v5, 2u);
  }
  v3 = (const void *)*((_QWORD *)this + 30);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 29);
  if (v4)
    CFRelease(v4);
  qmi::Client::~Client((coex::QMICommandDriver *)((char *)this + 192));
  coex::CommandDriver::~CommandDriver((void **)this);
}

{
  void *v1;

  coex::QMICommandDriver::~QMICommandDriver(this);
  operator delete(v1);
}

void coex::QMICommandDriver::init(coex::QMICommandDriver *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_20_5;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex13CommandDriverEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_278;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const char *Name;
  size_t v3;
  void *v4;
  void **v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  qmi::Client *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];
  _QWORD v51[5];
  _QWORD v52[5];
  _QWORD v53[34];
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57[2];
  char v58;
  dispatch_object_t v59;
  void *__dst[2];
  unint64_t v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint8_t buf[8];
  uint64_t v65;
  __int128 v66;
  _QWORD *v67;

  v1 = *(_QWORD *)(a1 + 32);
  v62 = 0xAAAAAAAAAAAAAAAALL;
  v63 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  Registry::getServerConnection(*(Registry **)(v1 + 104));
  Name = (const char *)coex::CommandDriver::getName((coex::CommandDriver *)v1);
  v3 = strlen(Name);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v48 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v48 = v3 | 7;
    v49 = v48 + 1;
    v5 = (void **)operator new(v48 + 1);
    __dst[1] = v4;
    v61 = v49 | 0x8000000000000000;
    __dst[0] = v5;
LABEL_73:
    memmove(v5, Name, (size_t)v4);
    *((_BYTE *)v4 + (_QWORD)v5) = 0;
    v6 = *(NSObject **)(v1 + 88);
    v59 = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  HIBYTE(v61) = v3;
  v5 = __dst;
  if (v3)
    goto LABEL_73;
  LOBYTE(__dst[0]) = 0;
  v6 = *(NSObject **)(v1 + 88);
  v59 = v6;
  if (v6)
LABEL_5:
    dispatch_retain(v6);
LABEL_6:
  v58 = 4;
  strcpy((char *)v57, "coex");
  v7 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v7 || (v8 = *(_QWORD *)(v1 + 72), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v55 = 0;
    v56 = 0;
    v15 = std::__shared_weak_count::lock(v9);
    if (v15)
      goto LABEL_14;
LABEL_76:
    v55 = 0;
    v56 = v15;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v10);
  v55 = 0;
  v56 = 0;
  v15 = std::__shared_weak_count::lock(v10);
  if (!v15)
    goto LABEL_76;
LABEL_14:
  v16 = (unint64_t *)&v15->__shared_weak_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  v55 = v8;
  v56 = v15;
LABEL_17:
  std::__shared_weak_count::__release_weak(v10);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v53[33] = v62;
  v54 = v63;
  if (v63)
  {
    v20 = (unint64_t *)&v63->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  qmi::Client::createWithQueueLocal();
  v22 = v66;
  v66 = 0uLL;
  v23 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v22;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v54)
  {
    v26 = &v54->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (v56)
    std::__shared_weak_count::__release_weak(v56);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v59)
    dispatch_release(v59);
  if (SHIBYTE(v61) < 0)
    operator delete(__dst[0]);
  v28 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v28, OS_LOG_TYPE_DEBUG, "#D initializing", buf, 2u);
  }
  v29 = MEMORY[0x1E0C809B0];
  v30 = (qmi::Client *)(v1 + 192);
  v53[25] = MEMORY[0x1E0C809B0];
  v53[26] = 0x40000000;
  v53[27] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_4;
  v53[28] = &__block_descriptor_tmp_13;
  v53[29] = v1;
  qmi::Client::setHandler();
  v53[20] = v29;
  v53[21] = 0x40000000;
  v53[22] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_6;
  v53[23] = &__block_descriptor_tmp_7_4;
  v53[24] = v1;
  qmi::Client::setHandler();
  v53[15] = v29;
  v53[16] = 0x40000000;
  v53[17] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_8;
  v53[18] = &__block_descriptor_tmp_10_5;
  v53[19] = v1;
  qmi::Client::setHandler();
  v53[10] = v29;
  v53[11] = 0x40000000;
  v53[12] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_11;
  v53[13] = &__block_descriptor_tmp_13_5;
  v53[14] = v1;
  qmi::Client::setHandler();
  v53[5] = v29;
  v53[6] = 0x40000000;
  v53[7] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_2;
  v53[8] = &__block_descriptor_tmp_14_3;
  v53[9] = v1;
  qmi::Client::setHandler();
  v53[0] = v29;
  v53[1] = 0x40000000;
  v53[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_3;
  v53[3] = &__block_descriptor_tmp_16_2;
  v53[4] = v1;
  *(_QWORD *)buf = v29;
  v65 = 0x40000000;
  *(_QWORD *)&v66 = ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm9BLERStats10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v66 + 1) = &unk_1E66DDF80;
  v67 = v53;
  qmi::Client::setIndHandler();
  v52[0] = v29;
  v52[1] = 0x40000000;
  v52[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_4;
  v52[3] = &__block_descriptor_tmp_17_2;
  v52[4] = v1;
  *(_QWORD *)buf = v29;
  v65 = 0x40000000;
  *(_QWORD *)&v66 = ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm9WWANState10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v66 + 1) = &unk_1E66DE398;
  v67 = v52;
  qmi::Client::setIndHandler();
  v51[0] = v29;
  v51[1] = 0x40000000;
  v51[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_5;
  v51[3] = &__block_descriptor_tmp_18_7;
  v51[4] = v1;
  *(_QWORD *)buf = v29;
  v65 = 0x40000000;
  *(_QWORD *)&v66 = ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm13ConditionFail10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v66 + 1) = &unk_1E66DE450;
  v67 = v51;
  qmi::Client::setIndHandler();
  v50[0] = v29;
  v50[1] = 0x40000000;
  v50[2] = ___ZN4coex16QMICommandDriver4initEv_block_invoke_6;
  v50[3] = &__block_descriptor_tmp_19_5;
  v50[4] = v1;
  *(_QWORD *)buf = v29;
  v65 = 0x40000000;
  *(_QWORD *)&v66 = ___ZNK3qmi6Client13setIndHandlerIRKN4coex3abm16ConditionSuccess10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((_QWORD *)&v66 + 1) = &unk_1E66DE4A8;
  v67 = v50;
  qmi::Client::setIndHandler();
  v31 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v31 || (v32 = *(_QWORD *)(v1 + 72), (v33 = std::__shared_weak_count::lock(v31)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v34 = v33;
  v35 = (unint64_t *)&v33->__shared_weak_owners_;
  do
    v36 = __ldxr(v35);
  while (__stxr(v36 + 1, v35));
  v37 = (unint64_t *)&v33->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v34);
    v39 = std::__shared_weak_count::lock(v34);
    if (v39)
      goto LABEL_53;
LABEL_60:
    *(_QWORD *)buf = 0;
    v65 = 0;
    goto LABEL_61;
  }
  v39 = std::__shared_weak_count::lock(v33);
  if (!v39)
    goto LABEL_60;
LABEL_53:
  v40 = v39;
  v41 = (unint64_t *)&v39->__shared_weak_owners_;
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
  *(_QWORD *)buf = v32;
  v65 = (uint64_t)v39;
  std::__shared_weak_count::__release_weak(v34);
  v43 = (unint64_t *)&v40->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    v34 = v40;
LABEL_61:
    std::__shared_weak_count::__release_weak(v34);
  }
  qmi::Client::setClientHandle();
  if (v65)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v65);
  qmi::Client::start(v30);
  v45 = v63;
  if (v63)
  {
    v46 = (unint64_t *)&v63->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_1B3D5FAB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  NSObject *v4;

  v3 = *(std::__shared_weak_count **)(v1 - 248);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    if ((*(char *)(v1 - 177) & 0x80000000) == 0)
    {
LABEL_3:
      v4 = *(NSObject **)(v1 - 240);
      if (!v4)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 - 177) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 - 200));
  v4 = *(NSObject **)(v1 - 240);
  if (!v4)
  {
LABEL_8:
    if (*(char *)(v1 - 145) < 0)
    {
      operator delete(*(void **)(v1 - 168));
      std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 144);
      _Unwind_Resume(a1);
    }
    std::shared_ptr<std::__empty_state<char>>::~shared_ptr[abi:ne180100](v1 - 144);
    _Unwind_Resume(a1);
  }
LABEL_7:
  dispatch_release(v4);
  goto LABEL_8;
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_4(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v1, OS_LOG_TYPE_DEBUG, "#D stopped", v2, 2u);
  }
}

uint64_t ___ZN4coex16QMICommandDriver4initEv_block_invoke_6(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  __int128 v4;
  pthread_mutex_t *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD v50[4];
  __int128 v51;
  __int128 v52;
  __int128 *p_buf;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  unsigned int *v57;
  __int128 v58;
  __int128 v59;
  std::runtime_error v60;
  __int128 buf;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEBUG, "#D started", (uint8_t *)&buf, 2u);
  }
  v3 = *(_QWORD *)(v1 + 128);
  v56 = 0;
  v57 = 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = v4;
  v70 = v4;
  v67 = v4;
  v68 = v4;
  v65 = v4;
  v66 = v4;
  v63 = v4;
  v64 = v4;
  buf = v4;
  v62 = v4;
  v5 = *(pthread_mutex_t **)(v3 + 24);
  *(_QWORD *)&v71 = 10;
  *((_QWORD *)&v71 + 1) = &buf;
  *(_QWORD *)&v72 = 0;
  *((_QWORD *)&v72 + 1) = v5;
  pthread_mutex_lock(v5);
  v6 = *(unsigned int **)(v3 + 8);
  if (!v6)
  {
    v8 = *(uint64_t ***)v3;
    goto LABEL_16;
  }
  v7 = atomic_load(v6 + 2);
  v8 = *(uint64_t ***)v3;
  if (v7 == 1)
  {
    v9 = *v8;
    v10 = *(_QWORD *)(v3 + 16);
    if ((uint64_t *)v10 == *v8)
    {
      v10 = v9[1];
      *(_QWORD *)&v58 = v10;
      if (v9 == (uint64_t *)v10)
      {
LABEL_12:
        *(_QWORD *)(v3 + 16) = v10;
        goto LABEL_13;
      }
    }
    else
    {
      *(_QWORD *)&v58 = *(_QWORD *)(v3 + 16);
    }
    v11 = *(_QWORD *)(v10 + 16);
    if (*(_BYTE *)(v11 + 24))
    {
      v10 = *(_QWORD *)(v10 + 8);
    }
    else
    {
      v10 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v11 + 64), (uint64_t **)&v58);
      v8 = *(uint64_t ***)v3;
    }
    goto LABEL_12;
  }
LABEL_13:
  v6 = *(unsigned int **)(v3 + 8);
  if (v6)
  {
    v12 = v6 + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_16:
  v14 = v57;
  v56 = v8;
  v57 = v6;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
      v18 = v14 + 3;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
    }
  }
  pthread_mutex_unlock(*((pthread_mutex_t **)&v72 + 1));
  v21 = *((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    if ((uint64_t)v72 - 1 >= 0)
    {
      v22 = *((_QWORD *)&v71 + 1) + 16 * v72;
      do
      {
        v23 = *(unsigned int **)(v22 - 8);
        if (v23)
        {
          v24 = v23 + 2;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 16))(v23);
            v27 = v23 + 3;
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
              (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 24))(v23);
          }
        }
        v22 -= 16;
      }
      while (v22 > v21);
    }
    if ((unint64_t)v71 >= 0xB)
      operator delete(*((void **)&v71 + 1));
  }
  *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v80 = v30;
  v75 = v30;
  v76 = 0xAAAAAAAAAAAAAAAALL;
  v73 = v30;
  v74 = v30;
  v71 = v30;
  v72 = v30;
  v69 = v30;
  v70 = v30;
  v67 = v30;
  v68 = v30;
  v65 = v30;
  v66 = v30;
  v63 = v30;
  v64 = v30;
  buf = v30;
  v62 = v30;
  LOBYTE(buf) = 0;
  v77 = 10;
  v78 = (char *)&buf + 8;
  *(_QWORD *)((char *)&v80 + 4) = 0;
  v79 = 0;
  v81 = 0;
  v31 = v56;
  v32 = (uint64_t)*v56;
  p_buf = &buf;
  v54 = v3;
  v55 = v32;
  *(_QWORD *)&v51 = *(_QWORD *)(v32 + 8);
  *((_QWORD *)&v51 + 1) = v32;
  *(_QWORD *)&v52 = &buf;
  *((_QWORD *)&v52 + 1) = v32;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v51);
  v50[0] = *v31;
  v50[1] = v50[0];
  v50[2] = &buf;
  v50[3] = v50[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(v50);
  v58 = v51;
  v59 = v52;
  v33 = v50[0];
  v34 = v51;
  if ((_QWORD)v51 == v50[0])
  {
    if (DWORD2(v80) <= DWORD1(v80))
      goto LABEL_58;
LABEL_57:
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::force_cleanup_connections(v54, v55);
    goto LABEL_58;
  }
  v35 = (_BYTE *)v59;
  if (!*(_BYTE *)v59)
  {
    v36 = *(_QWORD *)(*(_QWORD *)(v51 + 16) + 32);
    v37 = *(_QWORD *)(v36 + 24);
    if (!v37)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFFELL) + 8))(v36 + 32);
    if (!*v35)
      *v35 = 1;
  }
  *(_QWORD *)&v58 = *(_QWORD *)(v34 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
  v38 = (_BYTE *)v59;
  if (*(_BYTE *)v59)
    *(_BYTE *)v59 = 0;
  for (i = v58; (_QWORD)v58 != v33; i = v58)
  {
    v40 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
    v41 = *(_QWORD *)(v40 + 24);
    if (!v41)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_1E66D4F68;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t))((v41 & 0xFFFFFFFFFFFFFFFELL) + 8))(v40 + 32);
    if (!*v38)
      *v38 = 1;
    *(_QWORD *)&v58 = *(_QWORD *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
    v38 = (_BYTE *)v59;
    if (*(_BYTE *)v59)
      *(_BYTE *)v59 = 0;
  }
  if (*((_DWORD *)p_buf + 70) > *((_DWORD *)p_buf + 69))
    goto LABEL_57;
LABEL_58:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&buf);
  v43 = v57;
  if (v57)
  {
    v44 = v57 + 2;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v43 + 16))(v43);
      v47 = v43 + 3;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v43 + 24))(v43);
    }
  }
  return result;
}

void sub_1B3D601D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a29);
  JUMPOUT(0x1B3D60344);
}

void sub_1B3D601E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_1B3D60240(_Unwind_Exception *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B3D60210);
}

void sub_1B3D60278(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;

  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      v51 = &__p[16 * a51];
      do
      {
        v52 = (unsigned int *)*((_QWORD *)v51 - 1);
        if (v52)
        {
          v53 = v52 + 2;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
            v56 = v52 + 3;
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 24))(v52);
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x1B3D60344);
}

void sub_1B3D60320(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1B3D6034CLL);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_8(uint64_t a1, xpc_object_t object)
{
  uint64_t v2;
  xpc_object_t v3;
  NSObject *v4;
  char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *__dst[3];
  uint8_t buf[4];
  void **v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (object)
  {
    v3 = object;
    xpc_retain(object);
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  else
  {
    v3 = xpc_null_create();
    v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_5;
  }
  v5 = (char *)MEMORY[0x1B5E2FB34](v3);
  memset(__dst, 170, sizeof(__dst));
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
  }
  else
  {
    HIBYTE(__dst[2]) = v6;
    v8 = __dst;
    if (!v6)
      goto LABEL_14;
  }
  memcpy(v8, v5, (size_t)v7);
LABEL_14:
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  free(v5);
  v11 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v11 = (void **)__dst[0];
  *(_DWORD *)buf = 136315138;
  v14 = v11;
  _os_log_error_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_ERROR, "server error %s", buf, 0xCu);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
LABEL_5:
  xpc_release(v3);
}

void sub_1B3D604F8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_11(uint64_t a1, char *object)
{
  coex::QMICommandDriver *v3;
  group var18;

  v3 = *(coex::QMICommandDriver **)(a1 + 32);
  *((_BYTE *)v3 + 224) = 1;
  var18.gr_name = object;
  if (object)
    dispatch_retain((dispatch_object_t)object);
  coex::QMICommandDriver::updateIndications_sync(v3, &var18);
  if (object)
    dispatch_release((dispatch_object_t)object);
}

void sub_1B3D6058C(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void coex::QMICommandDriver::updateIndications_sync(coex::QMICommandDriver *this, group *a2)
{
  char *gr_name;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  _QWORD aBlock[4];
  dispatch_group_t group;
  unint64_t v12;
  unint64_t v13;

  gr_name = a2->gr_name;
  if (a2->gr_name)
  {
    dispatch_retain((dispatch_object_t)a2->gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v12 = 0xAAAAAAAAAAAAAAAALL;
  v13 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex16QMICommandDriver22updateIndications_syncEN8dispatch5groupE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_41_1;
  group = (dispatch_group_t)gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  v4 = _Block_copy(aBlock);
  v5 = *((_QWORD *)this + 11);
  if (v5)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  if (v4)
  {
    v6 = _Block_copy(v4);
    v12 = (unint64_t)v6;
    v13 = (unint64_t)v5;
    if (!v5)
      goto LABEL_10;
    goto LABEL_9;
  }
  v6 = 0;
  v12 = 0;
  v13 = (unint64_t)v5;
  if (v5)
  {
LABEL_9:
    dispatch_retain(v5);
    dispatch_release(v5);
  }
LABEL_10:
  if (v4)
    _Block_release(v4);
  if (v6)
  {
    v7 = _Block_copy(v6);
    v8 = v7;
    v9 = v5;
    if (!v5)
      goto LABEL_15;
    goto LABEL_14;
  }
  v7 = 0;
  v8 = 0;
  v9 = v5;
  if (v5)
LABEL_14:
    dispatch_retain(v5);
LABEL_15:
  coex::QMICommandDriver::setIndications_sync((uint64_t)this, (uint64_t)&v8);
  if (v5)
    dispatch_release(v5);
  if (v7)
    _Block_release(v7);
  if (v5)
    dispatch_release(v5);
  if (v6)
    _Block_release(v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (gr_name)
  {
    dispatch_group_leave((dispatch_group_t)gr_name);
    dispatch_release((dispatch_object_t)gr_name);
  }
}

void sub_1B3D60748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, char a17)
{
  NSObject *v17;

  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a10);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a17);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
  }
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_2(uint64_t a1)
{
  coex::QMICommandDriver *v1;
  char *v2;
  NSObject *v3;
  group var18;

  v1 = *(coex::QMICommandDriver **)(a1 + 32);
  *((_BYTE *)v1 + 224) = 0;
  v2 = (char *)dispatch_group_create();
  v3 = v2;
  var18.gr_name = v2;
  if (v2)
    dispatch_retain((dispatch_object_t)v2);
  coex::QMICommandDriver::updateIndications_sync(v1, &var18);
  if (v3)
  {
    dispatch_release(v3);
    dispatch_release(v3);
  }
}

void sub_1B3D60800(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_release(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_3(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  __CFDictionary *v7;
  tlv *TlvValue;
  int v9;
  tlv *v10;
  tlv *v11;
  int v12;
  tlv *v13;
  __CFDictionary *v14;
  __CFDictionary *v15;
  CFTypeID v16;
  __CFDictionary *v17;
  __CFDictionary *v18;
  CFMutableDictionaryRef v19;
  CFMutableDictionaryRef v20;
  CFTypeRef v21;
  __CFDictionary *v22;
  uint64_t v23;
  void (*v24)(uint64_t, unsigned int *);
  void *v25;
  CFTypeRef cf;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v3 = *(_QWORD *)(a1 + 32);
  v21 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
  {
    v20 = Mutable;
    v21 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    v20 = 0;
  }
  v7 = (__CFDictionary *)MEMORY[0x1E0C809B0];
  v28 = 0;
  v22 = (__CFDictionary *)MEMORY[0x1E0C809B0];
  v23 = 1174405120;
  v24 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTETransportBlockCountENS_3abm9BLERStats10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v25 = &__block_descriptor_tmp_236;
  cf = v6;
  if (v6)
    CFRetain(v6);
  v27 = *MEMORY[0x1E0DDF2A8];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v10 = TlvValue;
  if (TlvValue)
  {
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v9, (const unsigned __int8 *)4);
    v29 = *(_DWORD *)v10;
    v24((uint64_t)&v22, (unsigned int *)&v29);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
  {
    CFRelease(v6);
    v19 = v6;
    CFRetain(v6);
  }
  else
  {
    v19 = 0;
  }
  v28 = 0;
  v22 = v7;
  v23 = 1174405120;
  v24 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm32LTETransportBlockCountErrorCountENS_3abm9BLERStats10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v25 = &__block_descriptor_tmp_238_0;
  cf = v6;
  if (v6)
    CFRetain(v6);
  v27 = *MEMORY[0x1E0DDF590];
  v11 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v13 = v11;
  if (v11)
  {
    tlv::throwIfNotEnoughBytes(v11, (const unsigned __int8 *)v11 + v12, (const unsigned __int8 *)4);
    v29 = *(_DWORD *)v13;
    v24((uint64_t)&v22, (unsigned int *)&v29);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  v22 = 0;
  v14 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = v14;
  if (v14)
    v22 = v14;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v14, (CFTypeRef)*MEMORY[0x1E0DDF398], v6);
  if (v15 && (v16 = CFGetTypeID(v15), v16 == CFDictionaryGetTypeID()))
  {
    v18 = v15;
    CFRetain(v15);
    v17 = v15;
  }
  else
  {
    v17 = 0;
    v18 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, (const void **)&v18, 0);
  if (v17)
    CFRelease(v17);
  if (v15)
    CFRelease(v15);
  if (v21)
    CFRelease(v21);
}

void sub_1B3D60ADC(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 17, v2, v3);
  JUMPOUT(0x1B3D609DCLL);
}

void sub_1B3D60B18(void *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;

  __cxa_begin_catch(a1);
  __cxa_end_catch();
  ((void (*)(_QWORD, uint64_t, uint64_t, uint64_t))*MEMORY[0x1E0DE2D28])(*v1, 16, v2, v3);
  JUMPOUT(0x1B3D60928);
}

void sub_1B3D60B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void sub_1B3D60B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver4initEv_block_invoke_6(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  tlv *TlvValue;
  int v8;
  tlv *v9;
  int v10;
  uint64_t v11;
  __CFDictionary *v12;
  __CFDictionary *v13;
  CFTypeID v14;
  __CFDictionary *v15;
  __CFDictionary *v16;
  CFMutableDictionaryRef v17;
  CFMutableDictionaryRef v18;
  _QWORD v19[2];
  void (*v20)(uint64_t, uint64_t *);
  void *v21;
  CFTypeRef cf;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  v18 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
  {
    v17 = Mutable;
    v18 = Mutable;
    CFRetain(Mutable);
  }
  else
  {
    v17 = 0;
  }
  v24 = 0;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1174405120;
  v20 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm26TxPowerLimitEnforceSuccessENS_3abm16ConditionSuccess10IndicationEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v21 = &__block_descriptor_tmp_276;
  cf = v6;
  if (v6)
    CFRetain(v6);
  v23 = *MEMORY[0x1E0DDF458];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v9 = TlvValue;
  if (TlvValue)
  {
    v10 = v8;
    tlv::throwIfNotEnoughBytes(TlvValue, (const unsigned __int8 *)TlvValue + v8, (const unsigned __int8 *)8);
    if ((v10 & 0xFFFFFFF8) != 0)
      v11 = *(_QWORD *)v9;
    else
      v11 = 0;
    v25[0] = v11;
    v20((uint64_t)v19, v25);
  }
  if (cf)
    CFRelease(cf);
  if (v6)
    CFRelease(v6);
  v19[0] = 0;
  v12 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v13 = v12;
  if (v12)
    v19[0] = v12;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v12, (CFTypeRef)*MEMORY[0x1E0DDF450], v6);
  if (v13 && (v14 = CFGetTypeID(v13), v14 == CFDictionaryGetTypeID()))
  {
    v16 = v13;
    CFRetain(v13);
    v15 = v13;
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, (const void **)&v16, 0);
  if (v15)
    CFRelease(v15);
  if (v13)
  {
    CFRelease(v13);
    v6 = v18;
  }
  if (v6)
    CFRelease(v6);
}

void sub_1B3D60E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void coex::CommandDriver::Callback::~Callback(coex::CommandDriver::Callback *this)
{
  NSObject *v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)this)
    _Block_release(*(const void **)this);
}

void coex::QMICommandDriver::get(uint64_t a1, const void **a2, int a3, uint64_t a4)
{
  const void *v7;
  void *v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD v11[5];
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;
  int v15;

  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN4coex16QMICommandDriver3getEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v11[3] = &__block_descriptor_tmp_22_2;
  v7 = *a2;
  v11[4] = a1;
  cf = v7;
  if (v7)
    CFRetain(v7);
  v15 = a3;
  v8 = *(void **)a4;
  if (*(_QWORD *)a4)
    v8 = _Block_copy(v8);
  v9 = (uint64_t *)(a1 + 72);
  v10 = *(NSObject **)(a4 + 8);
  aBlock = v8;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v9, (uint64_t)v11);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
}

void ___ZN4coex16QMICommandDriver3getEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  uint64_t v3;
  int v4;
  const void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  const __CFDictionary *v10;

  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(const __CFDictionary **)(a1 + 40);
  v10 = v2;
  if (v2)
    CFRetain(v2);
  v4 = *(_DWORD *)(a1 + 64);
  v5 = *(const void **)(a1 + 48);
  if (v5)
  {
    v6 = _Block_copy(v5);
    v7 = *(NSObject **)(a1 + 56);
    v8 = v6;
    v9 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = 0;
  v7 = *(NSObject **)(a1 + 56);
  v8 = 0;
  v9 = v7;
  if (v7)
LABEL_5:
    dispatch_retain(v7);
LABEL_6:
  coex::QMICommandDriver::get_sync(v3, &v10, v4, (uint64_t)&v8);
  if (v7)
    dispatch_release(v7);
  if (v6)
    _Block_release(v6);
  if (v2)
    CFRelease(v2);
}

void sub_1B3D610C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::get_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  void *v7;
  NSObject *v8;
  void *v10;
  NSObject *v11;
  _QWORD v12[2];

  v12[0] = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v12, *a2);
  if (!ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v12, (const __CFString *)*MEMORY[0x1E0DDF4C8]))return MEMORY[0x1B5E2EE44](v12);
  if (!*(_QWORD *)a4)
  {
    v7 = 0;
    v8 = *(NSObject **)(a4 + 8);
    v10 = 0;
    v11 = v8;
    if (!v8)
      goto LABEL_5;
    goto LABEL_4;
  }
  v7 = _Block_copy(*(const void **)a4);
  v8 = *(NSObject **)(a4 + 8);
  v10 = v7;
  v11 = v8;
  if (v8)
LABEL_4:
    dispatch_retain(v8);
LABEL_5:
  coex::QMICommandDriver::getScanFreqBandFilter_sync(a1, a3, (uint64_t)&v10);
  if (v8)
    dispatch_release(v8);
  if (v7)
    _Block_release(v7);
  return MEMORY[0x1B5E2EE44](v12);
}

void sub_1B3D611B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a9);
  MEMORY[0x1B5E2EE44](&a11);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::poll(uint64_t a1, const void **a2, int a3)
{
  const void *v5;
  _QWORD v6[5];
  CFTypeRef cf;
  int v8;

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN4coex16QMICommandDriver4pollEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdE_block_invoke;
  v6[3] = &__block_descriptor_tmp_23_5;
  v5 = *a2;
  v6[4] = a1;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v8 = a3;
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v6);
  if (cf)
    CFRelease(cf);
}

void ___ZN4coex16QMICommandDriver4pollEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdE_block_invoke(uint64_t a1)
{
  const __CFDictionary *v1;
  coex::QMICommandDriver *v2;
  const __CFDictionary *v3;

  v2 = *(coex::QMICommandDriver **)(a1 + 32);
  v1 = *(const __CFDictionary **)(a1 + 40);
  v3 = v1;
  if (v1)
    CFRetain(v1);
  coex::QMICommandDriver::poll_sync(v2, &v3);
  if (v1)
    CFRelease(v1);
}

void sub_1B3D612C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::poll_sync(coex::QMICommandDriver *a1, const __CFDictionary **a2)
{
  NSObject *v4;
  unsigned int *v5;
  unsigned int *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  int v9;
  unsigned int *v10;
  unsigned int *v11;
  CFTypeID v12;
  const __CFNumber *v13;
  int v14;
  const __CFDictionary *v16;
  unsigned int v17;
  unsigned int v18;
  uint8_t buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v16 = *a2;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v16;
    _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Polling for: %@", buf, 0xCu);
  }
  memset(buf, 170, 16);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, *a2);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF338]))coex::QMICommandDriver::pollWWANState_sync(a1);
  v18 = -1431655766;
  v5 = (unsigned int *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF3E8]);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    v9 = v7 == CFNumberGetTypeID() ? ctu::cf::assign((ctu::cf *)&v18, v6, v8) : 0;
    CFRelease(v6);
    if (v9)
      coex::QMICommandDriver::pollWLANScanState_sync(a1, v18);
  }
  v17 = -1431655766;
  v10 = (unsigned int *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF560]);
  v11 = v10;
  if (v10)
  {
    v12 = CFGetTypeID(v10);
    v14 = v12 == CFNumberGetTypeID() ? ctu::cf::assign((ctu::cf *)&v17, v11, v13) : 0;
    CFRelease(v11);
    if (v14)
      coex::QMICommandDriver::pollWLANConnState_sync(a1, v17);
  }
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF2C8]))coex::QMICommandDriver::pollPolicy_sync(a1);
  if (ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF390]))coex::QMICommandDriver::pollLinkQuality_sync(a1);
  return MEMORY[0x1B5E2EE44](buf);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void coex::QMICommandDriver::setIndications(uint64_t a1, const void **a2, uint64_t a3)
{
  const void *v5;
  void *v6;
  uint64_t *v7;
  NSObject *v8;
  _QWORD v9[5];
  CFTypeRef cf;
  void *aBlock;
  dispatch_object_t object;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN4coex16QMICommandDriver14setIndicationsEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v9[3] = &__block_descriptor_tmp_24_8;
  v5 = *a2;
  v9[4] = a1;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v6 = *(void **)a3;
  if (*(_QWORD *)a3)
    v6 = _Block_copy(v6);
  v7 = (uint64_t *)(a1 + 72);
  v8 = *(NSObject **)(a3 + 8);
  aBlock = v6;
  object = v8;
  if (v8)
    dispatch_retain(v8);
  ctu::SharedSynchronizable<coex::CommandDriver>::execute_wrapped(v7, (uint64_t)v9);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
}

void ___ZN4coex16QMICommandDriver14setIndicationsEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  CFTypeRef *v3;
  const void **v4;
  CFTypeRef v5;
  const void *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  NSObject *v11;

  v2 = a1[4];
  v3 = (CFTypeRef *)(a1 + 5);
  v4 = (const void **)(v2 + 232);
  if ((_QWORD *)(v2 + 232) != a1 + 5)
  {
    v5 = *v3;
    if (*v3)
      CFRetain(*v3);
    v6 = *v4;
    *v4 = v5;
    if (v6)
      CFRelease(v6);
  }
  if (!*(_BYTE *)(v2 + 224))
  {
    v7 = (const void *)a1[6];
    if (v7)
    {
      v8 = _Block_copy(v7);
      v9 = a1[7];
      v10 = v8;
      v11 = v9;
      if (!v9)
      {
LABEL_10:
        coex::QMICommandDriver::setIndications_sync(v2, (uint64_t)&v10);
        if (v9)
          dispatch_release(v9);
        if (v8)
          _Block_release(v8);
        return;
      }
    }
    else
    {
      v8 = 0;
      v9 = a1[7];
      v10 = 0;
      v11 = v9;
      if (!v9)
        goto LABEL_10;
    }
    dispatch_retain(v9);
    goto LABEL_10;
  }
}

void sub_1B3D6170C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a9);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::setIndications_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  char *v9;
  char *v10;
  const void **v11;
  char *v12;
  _BYTE *v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  const void **v35;
  char *v36;
  _BYTE *v37;
  _WORD *v38;
  _WORD *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  const __CFString *v57;
  char Bool;
  char *v59;
  char *v60;
  const void **v61;
  _BYTE *v62;
  _WORD *v63;
  _WORD *v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  _QWORD *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  _OWORD *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  char *v83;
  const void **v84;
  _BYTE *v85;
  _WORD *v86;
  _WORD *v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _BYTE *v94;
  _QWORD *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  const __CFString *v105;
  char *v106;
  char *v107;
  const void **v108;
  _BYTE *v109;
  _WORD *v110;
  _WORD *v111;
  uint64_t v112;
  int64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  _BYTE *v118;
  _QWORD *v119;
  char *v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  _OWORD *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  const __CFString *v129;
  char *v130;
  char *v131;
  const void **v132;
  _BYTE *v133;
  _WORD *v134;
  _WORD *v135;
  uint64_t v136;
  int64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BYTE *v142;
  _QWORD *v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  _OWORD *v148;
  char *v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  const __CFString *v153;
  char v154;
  char *v155;
  char *v156;
  const void **v157;
  char *v158;
  _BYTE *v159;
  _WORD *v160;
  _WORD *v161;
  uint64_t v162;
  int64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  _QWORD *v169;
  char *v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  _OWORD *v174;
  char *v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  void *v179;
  NSObject *v180;
  void *v181;
  _QWORD v183[5];
  void *v184;
  dispatch_object_t object;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  void *aBlock;
  _QWORD v191[2];
  uint64_t (*v192)(uint64_t, _BYTE *);
  void *v193;
  char v194;
  _QWORD v195[2];
  uint64_t (*v196)(uint64_t, _BYTE *);
  void *v197;
  char v198;
  _QWORD v199[2];
  uint64_t (*v200)(uint64_t, _BYTE *);
  void *v201;
  char v202;
  _QWORD v203[2];
  uint64_t (*v204)(uint64_t, _BYTE *);
  void *v205;
  char v206;
  _QWORD v207[2];
  uint64_t (*v208)(uint64_t, _BYTE *);
  void *v209;
  _BYTE v210[16];
  _QWORD v211[2];
  uint64_t (*v212)(uint64_t, _BYTE *);
  void *v213;
  _BYTE v214[16];
  __int128 v215;
  __int128 v216;
  _QWORD v217[3];
  __int128 buf;
  void (*v219)(uint64_t, uint64_t);
  void *v220;
  _QWORD *v221;
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  v3 = 240;
  if (!*(_BYTE *)(a1 + 224))
    v3 = 232;
  v4 = *(const void **)(a1 + v3);
  v217[2] = v4;
  if (v4)
    CFRetain(v4);
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Setting indications with: %@", (uint8_t *)&buf, 0xCu);
  }
  v217[0] = 0xAAAAAAAAAAAAAAAALL;
  v217[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v217, (const __CFDictionary *)v4);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v215 = v6;
  v216 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v215);
  v7 = CFDictionaryContainsKey((CFDictionaryRef)v4, (const void *)*MEMORY[0x1E0DDF3A0]);
  v8 = MEMORY[0x1E0C809B0];
  if (v7)
  {
    v211[0] = MEMORY[0x1E0C809B0];
    v211[1] = 1174405120;
    v212 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke;
    v213 = &__block_descriptor_tmp_43_2;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v214, (const ctu::cf::dict_adapter *)v217);
    v9 = (char *)*((_QWORD *)&v215 + 1);
    v10 = (char *)v216;
    v11 = (const void **)*((_QWORD *)&v215 + 1);
    if (*((_QWORD *)&v215 + 1) != (_QWORD)v216)
    {
      v11 = (const void **)*((_QWORD *)&v215 + 1);
      while (*((_BYTE *)*v11 + 8) != 16)
      {
        if (++v11 == (const void **)v216)
          goto LABEL_16;
      }
    }
    if (v11 != (const void **)v216)
    {
      if (!v12)
        __cxa_bad_cast();
      v13 = v12 + 9;
      goto LABEL_39;
    }
LABEL_16:
    v14 = operator new(0x10uLL);
    v15 = v14;
    v14[4] = 16;
    *(_QWORD *)v14 = off_1E66DEA78;
    if ((unint64_t)v10 < *((_QWORD *)&v216 + 1))
    {
      *(_QWORD *)v10 = v14;
      v16 = (uint64_t)(v10 + 8);
LABEL_38:
      v13 = (char *)v15 + 9;
      *(_QWORD *)&v216 = v16;
LABEL_39:
      v212((uint64_t)v211, v13);
      MEMORY[0x1B5E2EE44](v214);
      goto LABEL_40;
    }
    v17 = v10 - v9;
    v18 = (v10 - v9) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = *((_QWORD *)&v216 + 1) - (_QWORD)v9;
    if ((uint64_t)(*((_QWORD *)&v216 + 1) - (_QWORD)v9) >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v15;
      v16 = (uint64_t)(v23 + 1);
      if (v9 != v10)
      {
LABEL_27:
        if ((unint64_t)(v17 - 8) < 0x58)
          goto LABEL_268;
        if ((unint64_t)(v9 - v22) < 0x20)
          goto LABEL_268;
        v25 = ((unint64_t)(v17 - 8) >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = &v10[-v26];
        v23 = (_QWORD *)((char *)v23 - v26);
        v28 = &v22[8 * v18 - 16];
        v29 = v10 - 16;
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        v10 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_268:
          do
          {
            v32 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *--v23 = v32;
          }
          while (v10 != v9);
        }
        v9 = (char *)*((_QWORD *)&v215 + 1);
        *((_QWORD *)&v215 + 1) = v23;
        *(_QWORD *)&v216 = v16;
        *((_QWORD *)&v216 + 1) = v24;
        if (!v9)
          goto LABEL_38;
        goto LABEL_37;
      }
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      v24 = 0;
      *(_QWORD *)(8 * v18) = v15;
      v16 = 8 * v18 + 8;
      if (v9 != v10)
        goto LABEL_27;
    }
    *((_QWORD *)&v215 + 1) = v23;
    *(_QWORD *)&v216 = v16;
    *((_QWORD *)&v216 + 1) = v24;
    if (!v9)
      goto LABEL_38;
LABEL_37:
    operator delete(v9);
    goto LABEL_38;
  }
LABEL_40:
  if (!CFDictionaryContainsKey((CFDictionaryRef)v4, (const void *)*MEMORY[0x1E0DDF398]))
    goto LABEL_73;
  v207[0] = v8;
  v207[1] = 1174405120;
  v208 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_44;
  v209 = &__block_descriptor_tmp_46_1;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v210, (const ctu::cf::dict_adapter *)v217);
  v33 = (char *)*((_QWORD *)&v215 + 1);
  v34 = (char *)v216;
  v35 = (const void **)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1) != (_QWORD)v216)
  {
    v35 = (const void **)*((_QWORD *)&v215 + 1);
    while (*((_BYTE *)*v35 + 8) != 17)
    {
      if (++v35 == (const void **)v216)
        goto LABEL_49;
    }
  }
  if (v35 != (const void **)v216)
  {
    if (!v36)
      __cxa_bad_cast();
    v37 = v36 + 9;
    goto LABEL_72;
  }
LABEL_49:
  v38 = operator new(0x10uLL);
  v39 = v38;
  v38[4] = 17;
  *(_QWORD *)v38 = off_1E66DEAC8;
  if ((unint64_t)v34 >= *((_QWORD *)&v216 + 1))
  {
    v41 = v34 - v33;
    v42 = (v34 - v33) >> 3;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v44 = *((_QWORD *)&v216 + 1) - (_QWORD)v33;
    if ((uint64_t)(*((_QWORD *)&v216 + 1) - (_QWORD)v33) >> 2 > v43)
      v43 = v44 >> 2;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v46 = operator new(8 * v45);
      v47 = &v46[8 * v42];
      v48 = &v46[8 * v45];
      *v47 = v39;
      v40 = (uint64_t)(v47 + 1);
      if (v33 != v34)
      {
LABEL_60:
        if ((unint64_t)(v41 - 8) < 0x58)
          goto LABEL_269;
        if ((unint64_t)(v33 - v46) < 0x20)
          goto LABEL_269;
        v49 = ((unint64_t)(v41 - 8) >> 3) + 1;
        v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        v51 = &v34[-v50];
        v47 = (_QWORD *)((char *)v47 - v50);
        v52 = &v46[8 * v42 - 16];
        v53 = v34 - 16;
        v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 4;
        }
        while (v54);
        v34 = v51;
        if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_269:
          do
          {
            v56 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *--v47 = v56;
          }
          while (v34 != v33);
        }
        v33 = (char *)*((_QWORD *)&v215 + 1);
        *((_QWORD *)&v215 + 1) = v47;
        *(_QWORD *)&v216 = v40;
        *((_QWORD *)&v216 + 1) = v48;
        if (!v33)
          goto LABEL_71;
        goto LABEL_70;
      }
    }
    else
    {
      v46 = 0;
      v47 = (_QWORD *)(8 * v42);
      v48 = 0;
      *(_QWORD *)(8 * v42) = v39;
      v40 = 8 * v42 + 8;
      if (v33 != v34)
        goto LABEL_60;
    }
    *((_QWORD *)&v215 + 1) = v47;
    *(_QWORD *)&v216 = v40;
    *((_QWORD *)&v216 + 1) = v48;
    if (!v33)
      goto LABEL_71;
LABEL_70:
    operator delete(v33);
    goto LABEL_71;
  }
  *(_QWORD *)v34 = v38;
  v40 = (uint64_t)(v34 + 8);
LABEL_71:
  v37 = (char *)v39 + 9;
  *(_QWORD *)&v216 = v40;
LABEL_72:
  v208((uint64_t)v207, v37);
  MEMORY[0x1B5E2EE44](v210);
LABEL_73:
  v57 = (const __CFString *)*MEMORY[0x1E0DDF450];
  if (!CFDictionaryContainsKey((CFDictionaryRef)v4, (const void *)*MEMORY[0x1E0DDF450]))
    goto LABEL_136;
  Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v217, v57);
  v203[0] = v8;
  v203[1] = 0x40000000;
  v204 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_47;
  v205 = &__block_descriptor_tmp_49_2;
  v206 = Bool;
  v59 = (char *)*((_QWORD *)&v215 + 1);
  v60 = (char *)v216;
  v61 = (const void **)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1) != (_QWORD)v216)
  {
    v61 = (const void **)*((_QWORD *)&v215 + 1);
    while (*((_BYTE *)*v61 + 8) != 18)
    {
      if (++v61 == (const void **)v216)
        goto LABEL_82;
    }
  }
  if (v61 == (const void **)v216)
  {
LABEL_82:
    v63 = operator new(0x10uLL);
    v64 = v63;
    v63[4] = 18;
    *(_QWORD *)v63 = off_1E66DEB18;
    if ((unint64_t)v60 < *((_QWORD *)&v216 + 1))
    {
      *(_QWORD *)v60 = v63;
      v65 = (uint64_t)(v60 + 8);
LABEL_104:
      *(_QWORD *)&v216 = v65;
      v204((uint64_t)v203, (_BYTE *)v64 + 9);
      goto LABEL_105;
    }
    v66 = v60 - v59;
    v67 = (v60 - v59) >> 3;
    v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 61)
      goto LABEL_249;
    v69 = *((_QWORD *)&v216 + 1) - (_QWORD)v59;
    if ((uint64_t)(*((_QWORD *)&v216 + 1) - (_QWORD)v59) >> 2 > v68)
      v68 = v69 >> 2;
    if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
      v70 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v70 = v68;
    if (v70)
    {
      if (v70 >> 61)
        goto LABEL_255;
      v71 = operator new(8 * v70);
      v72 = &v71[8 * v67];
      v73 = &v71[8 * v70];
      *v72 = v64;
      v65 = (uint64_t)(v72 + 1);
      if (v59 != v60)
      {
LABEL_93:
        if ((unint64_t)(v66 - 8) < 0x58)
          goto LABEL_270;
        if ((unint64_t)(v59 - v71) < 0x20)
          goto LABEL_270;
        v74 = ((unint64_t)(v66 - 8) >> 3) + 1;
        v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        v76 = &v60[-v75];
        v72 = (_QWORD *)((char *)v72 - v75);
        v77 = &v71[8 * v67 - 16];
        v78 = v60 - 16;
        v79 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v80 = *(_OWORD *)v78;
          *(v77 - 1) = *((_OWORD *)v78 - 1);
          *v77 = v80;
          v77 -= 2;
          v78 -= 32;
          v79 -= 4;
        }
        while (v79);
        v60 = v76;
        if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_270:
          do
          {
            v81 = *((_QWORD *)v60 - 1);
            v60 -= 8;
            *--v72 = v81;
          }
          while (v60 != v59);
        }
        v59 = (char *)*((_QWORD *)&v215 + 1);
        *((_QWORD *)&v215 + 1) = v72;
        *(_QWORD *)&v216 = v65;
        *((_QWORD *)&v216 + 1) = v73;
        if (!v59)
          goto LABEL_104;
        goto LABEL_103;
      }
    }
    else
    {
      v71 = 0;
      v72 = (_QWORD *)(8 * v67);
      v73 = 0;
      *(_QWORD *)(8 * v67) = v64;
      v65 = 8 * v67 + 8;
      if (v59 != v60)
        goto LABEL_93;
    }
    *((_QWORD *)&v215 + 1) = v72;
    *(_QWORD *)&v216 = v65;
    *((_QWORD *)&v216 + 1) = v73;
    if (!v59)
      goto LABEL_104;
LABEL_103:
    operator delete(v59);
    goto LABEL_104;
  }
  if (!v62)
    goto LABEL_248;
  ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_47((uint64_t)v203, v62 + 9);
LABEL_105:
  v199[0] = v8;
  v199[1] = 0x40000000;
  v200 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_2;
  v201 = &__block_descriptor_tmp_51_2;
  v202 = Bool;
  v82 = (char *)*((_QWORD *)&v215 + 1);
  v83 = (char *)v216;
  v84 = (const void **)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1) != (_QWORD)v216)
  {
    v84 = (const void **)*((_QWORD *)&v215 + 1);
    while (*((_BYTE *)*v84 + 8) != 19)
    {
      if (++v84 == (const void **)v216)
        goto LABEL_113;
    }
  }
  if (v84 != (const void **)v216)
  {
    if (v85)
    {
      ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_2((uint64_t)v199, v85 + 9);
      goto LABEL_136;
    }
LABEL_248:
    __cxa_bad_cast();
  }
LABEL_113:
  v86 = operator new(0x10uLL);
  v87 = v86;
  v86[4] = 19;
  *(_QWORD *)v86 = off_1E66DEB68;
  if ((unint64_t)v83 >= *((_QWORD *)&v216 + 1))
  {
    v89 = v83 - v82;
    v90 = (v83 - v82) >> 3;
    v91 = v90 + 1;
    if (!((unint64_t)(v90 + 1) >> 61))
    {
      v92 = *((_QWORD *)&v216 + 1) - (_QWORD)v82;
      if ((uint64_t)(*((_QWORD *)&v216 + 1) - (_QWORD)v82) >> 2 > v91)
        v91 = v92 >> 2;
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8)
        v93 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v93 = v91;
      if (!v93)
      {
        v94 = 0;
        v95 = (_QWORD *)(8 * v90);
        v96 = 0;
        *(_QWORD *)(8 * v90) = v87;
        v88 = 8 * v90 + 8;
        if (v82 != v83)
          goto LABEL_124;
        goto LABEL_133;
      }
      if (!(v93 >> 61))
      {
        v94 = operator new(8 * v93);
        v95 = &v94[8 * v90];
        v96 = &v94[8 * v93];
        *v95 = v87;
        v88 = (uint64_t)(v95 + 1);
        if (v82 != v83)
        {
LABEL_124:
          if ((unint64_t)(v89 - 8) < 0x58)
            goto LABEL_271;
          if ((unint64_t)(v82 - v94) < 0x20)
            goto LABEL_271;
          v97 = ((unint64_t)(v89 - 8) >> 3) + 1;
          v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
          v99 = &v83[-v98];
          v95 = (_QWORD *)((char *)v95 - v98);
          v100 = &v94[8 * v90 - 16];
          v101 = v83 - 16;
          v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v103 = *(_OWORD *)v101;
            *(v100 - 1) = *((_OWORD *)v101 - 1);
            *v100 = v103;
            v100 -= 2;
            v101 -= 32;
            v102 -= 4;
          }
          while (v102);
          v83 = v99;
          if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_271:
            do
            {
              v104 = *((_QWORD *)v83 - 1);
              v83 -= 8;
              *--v95 = v104;
            }
            while (v83 != v82);
          }
          v82 = (char *)*((_QWORD *)&v215 + 1);
          *((_QWORD *)&v215 + 1) = v95;
          *(_QWORD *)&v216 = v88;
          *((_QWORD *)&v216 + 1) = v96;
          if (!v82)
            goto LABEL_135;
          goto LABEL_134;
        }
LABEL_133:
        *((_QWORD *)&v215 + 1) = v95;
        *(_QWORD *)&v216 = v88;
        *((_QWORD *)&v216 + 1) = v96;
        if (!v82)
          goto LABEL_135;
LABEL_134:
        operator delete(v82);
        goto LABEL_135;
      }
LABEL_255:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_249:
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  *(_QWORD *)v83 = v86;
  v88 = (uint64_t)(v83 + 8);
LABEL_135:
  *(_QWORD *)&v216 = v88;
  v200((uint64_t)v199, (_BYTE *)v87 + 9);
LABEL_136:
  v105 = (const __CFString *)*MEMORY[0x1E0DDF488];
  if (!CFDictionaryContainsKey((CFDictionaryRef)v4, (const void *)*MEMORY[0x1E0DDF488]))
    goto LABEL_168;
  v195[0] = v8;
  v195[1] = 0x40000000;
  v196 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_3;
  v197 = &__block_descriptor_tmp_53_1;
  v198 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v217, v105);
  v106 = (char *)*((_QWORD *)&v215 + 1);
  v107 = (char *)v216;
  v108 = (const void **)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1) != (_QWORD)v216)
  {
    v108 = (const void **)*((_QWORD *)&v215 + 1);
    while (*((_BYTE *)*v108 + 8) != 24)
    {
      if (++v108 == (const void **)v216)
        goto LABEL_145;
    }
  }
  if (v108 == (const void **)v216)
  {
LABEL_145:
    v110 = operator new(0x10uLL);
    v111 = v110;
    v110[4] = 24;
    *(_QWORD *)v110 = off_1E66DEBB8;
    if ((unint64_t)v107 < *((_QWORD *)&v216 + 1))
    {
      *(_QWORD *)v107 = v110;
      v112 = (uint64_t)(v107 + 8);
LABEL_167:
      *(_QWORD *)&v216 = v112;
      v196((uint64_t)v195, (_BYTE *)v111 + 9);
      goto LABEL_168;
    }
    v113 = v107 - v106;
    v114 = (v107 - v106) >> 3;
    v115 = v114 + 1;
    if ((unint64_t)(v114 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v116 = *((_QWORD *)&v216 + 1) - (_QWORD)v106;
    if ((uint64_t)(*((_QWORD *)&v216 + 1) - (_QWORD)v106) >> 2 > v115)
      v115 = v116 >> 2;
    if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
      v117 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v117 = v115;
    if (v117)
    {
      if (v117 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v118 = operator new(8 * v117);
      v119 = &v118[8 * v114];
      v120 = &v118[8 * v117];
      *v119 = v111;
      v112 = (uint64_t)(v119 + 1);
      if (v106 != v107)
      {
LABEL_156:
        if ((unint64_t)(v113 - 8) < 0x58)
          goto LABEL_272;
        if ((unint64_t)(v106 - v118) < 0x20)
          goto LABEL_272;
        v121 = ((unint64_t)(v113 - 8) >> 3) + 1;
        v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
        v123 = &v107[-v122];
        v119 = (_QWORD *)((char *)v119 - v122);
        v124 = &v118[8 * v114 - 16];
        v125 = v107 - 16;
        v126 = v121 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v127 = *(_OWORD *)v125;
          *(v124 - 1) = *((_OWORD *)v125 - 1);
          *v124 = v127;
          v124 -= 2;
          v125 -= 32;
          v126 -= 4;
        }
        while (v126);
        v107 = v123;
        if (v121 != (v121 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_272:
          do
          {
            v128 = *((_QWORD *)v107 - 1);
            v107 -= 8;
            *--v119 = v128;
          }
          while (v107 != v106);
        }
        v106 = (char *)*((_QWORD *)&v215 + 1);
        *((_QWORD *)&v215 + 1) = v119;
        *(_QWORD *)&v216 = v112;
        *((_QWORD *)&v216 + 1) = v120;
        if (!v106)
          goto LABEL_167;
        goto LABEL_166;
      }
    }
    else
    {
      v118 = 0;
      v119 = (_QWORD *)(8 * v114);
      v120 = 0;
      *(_QWORD *)(8 * v114) = v111;
      v112 = 8 * v114 + 8;
      if (v106 != v107)
        goto LABEL_156;
    }
    *((_QWORD *)&v215 + 1) = v119;
    *(_QWORD *)&v216 = v112;
    *((_QWORD *)&v216 + 1) = v120;
    if (!v106)
      goto LABEL_167;
LABEL_166:
    operator delete(v106);
    goto LABEL_167;
  }
  if (!v109)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_3((uint64_t)v195, v109 + 9);
LABEL_168:
  v129 = (const __CFString *)*MEMORY[0x1E0DDF348];
  if (!CFDictionaryContainsKey((CFDictionaryRef)v4, (const void *)*MEMORY[0x1E0DDF348]))
    goto LABEL_200;
  v191[0] = v8;
  v191[1] = 0x40000000;
  v192 = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_4;
  v193 = &__block_descriptor_tmp_55_1;
  v194 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v217, v129);
  v130 = (char *)*((_QWORD *)&v215 + 1);
  v131 = (char *)v216;
  v132 = (const void **)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1) != (_QWORD)v216)
  {
    v132 = (const void **)*((_QWORD *)&v215 + 1);
    while (*((_BYTE *)*v132 + 8) != 25)
    {
      if (++v132 == (const void **)v216)
        goto LABEL_177;
    }
  }
  if (v132 == (const void **)v216)
  {
LABEL_177:
    v134 = operator new(0x10uLL);
    v135 = v134;
    v134[4] = 25;
    *(_QWORD *)v134 = off_1E66DEC08;
    if ((unint64_t)v131 < *((_QWORD *)&v216 + 1))
    {
      *(_QWORD *)v131 = v134;
      v136 = (uint64_t)(v131 + 8);
LABEL_199:
      *(_QWORD *)&v216 = v136;
      v192((uint64_t)v191, (_BYTE *)v135 + 9);
      goto LABEL_200;
    }
    v137 = v131 - v130;
    v138 = (v131 - v130) >> 3;
    v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v140 = *((_QWORD *)&v216 + 1) - (_QWORD)v130;
    if ((uint64_t)(*((_QWORD *)&v216 + 1) - (_QWORD)v130) >> 2 > v139)
      v139 = v140 >> 2;
    if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
      v141 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v141 = v139;
    if (v141)
    {
      if (v141 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v142 = operator new(8 * v141);
      v143 = &v142[8 * v138];
      v144 = &v142[8 * v141];
      *v143 = v135;
      v136 = (uint64_t)(v143 + 1);
      if (v130 != v131)
      {
LABEL_188:
        if ((unint64_t)(v137 - 8) < 0x58)
          goto LABEL_273;
        if ((unint64_t)(v130 - v142) < 0x20)
          goto LABEL_273;
        v145 = ((unint64_t)(v137 - 8) >> 3) + 1;
        v146 = 8 * (v145 & 0x3FFFFFFFFFFFFFFCLL);
        v147 = &v131[-v146];
        v143 = (_QWORD *)((char *)v143 - v146);
        v148 = &v142[8 * v138 - 16];
        v149 = v131 - 16;
        v150 = v145 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v151 = *(_OWORD *)v149;
          *(v148 - 1) = *((_OWORD *)v149 - 1);
          *v148 = v151;
          v148 -= 2;
          v149 -= 32;
          v150 -= 4;
        }
        while (v150);
        v131 = v147;
        if (v145 != (v145 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_273:
          do
          {
            v152 = *((_QWORD *)v131 - 1);
            v131 -= 8;
            *--v143 = v152;
          }
          while (v131 != v130);
        }
        v130 = (char *)*((_QWORD *)&v215 + 1);
        *((_QWORD *)&v215 + 1) = v143;
        *(_QWORD *)&v216 = v136;
        *((_QWORD *)&v216 + 1) = v144;
        if (!v130)
          goto LABEL_199;
        goto LABEL_198;
      }
    }
    else
    {
      v142 = 0;
      v143 = (_QWORD *)(8 * v138);
      v144 = 0;
      *(_QWORD *)(8 * v138) = v135;
      v136 = 8 * v138 + 8;
      if (v130 != v131)
        goto LABEL_188;
    }
    *((_QWORD *)&v215 + 1) = v143;
    *(_QWORD *)&v216 = v136;
    *((_QWORD *)&v216 + 1) = v144;
    if (!v130)
      goto LABEL_199;
LABEL_198:
    operator delete(v130);
    goto LABEL_199;
  }
  if (!v133)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_4((uint64_t)v191, v133 + 9);
LABEL_200:
  v153 = (const __CFString *)*MEMORY[0x1E0DDF400];
  if (!CFDictionaryContainsKey((CFDictionaryRef)v4, (const void *)*MEMORY[0x1E0DDF400]))
    goto LABEL_233;
  v154 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v217, v153);
  v155 = (char *)*((_QWORD *)&v215 + 1);
  v156 = (char *)v216;
  v157 = (const void **)*((_QWORD *)&v215 + 1);
  if (*((_QWORD *)&v215 + 1) != (_QWORD)v216)
  {
    v157 = (const void **)*((_QWORD *)&v215 + 1);
    while (*((_BYTE *)*v157 + 8) != 26)
    {
      if (++v157 == (const void **)v216)
        goto LABEL_209;
    }
  }
  if (v157 != (const void **)v216)
  {
    if (!v158)
      __cxa_bad_cast();
    v159 = v158 + 9;
    goto LABEL_232;
  }
LABEL_209:
  v160 = operator new(0x10uLL);
  v161 = v160;
  v160[4] = 26;
  *(_QWORD *)v160 = off_1E66DEC58;
  if ((unint64_t)v156 >= *((_QWORD *)&v216 + 1))
  {
    v163 = v156 - v155;
    v164 = (v156 - v155) >> 3;
    v165 = v164 + 1;
    if ((unint64_t)(v164 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v166 = *((_QWORD *)&v216 + 1) - (_QWORD)v155;
    if ((uint64_t)(*((_QWORD *)&v216 + 1) - (_QWORD)v155) >> 2 > v165)
      v165 = v166 >> 2;
    if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8)
      v167 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v167 = v165;
    if (v167)
    {
      if (v167 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v168 = operator new(8 * v167);
      v169 = &v168[8 * v164];
      v170 = &v168[8 * v167];
      *v169 = v161;
      v162 = (uint64_t)(v169 + 1);
      if (v155 != v156)
      {
LABEL_220:
        if ((unint64_t)(v163 - 8) < 0x58)
          goto LABEL_274;
        if ((unint64_t)(v155 - v168) < 0x20)
          goto LABEL_274;
        v171 = ((unint64_t)(v163 - 8) >> 3) + 1;
        v172 = 8 * (v171 & 0x3FFFFFFFFFFFFFFCLL);
        v173 = &v156[-v172];
        v169 = (_QWORD *)((char *)v169 - v172);
        v174 = &v168[8 * v164 - 16];
        v175 = v156 - 16;
        v176 = v171 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v177 = *(_OWORD *)v175;
          *(v174 - 1) = *((_OWORD *)v175 - 1);
          *v174 = v177;
          v174 -= 2;
          v175 -= 32;
          v176 -= 4;
        }
        while (v176);
        v156 = v173;
        if (v171 != (v171 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_274:
          do
          {
            v178 = *((_QWORD *)v156 - 1);
            v156 -= 8;
            *--v169 = v178;
          }
          while (v156 != v155);
        }
        v155 = (char *)*((_QWORD *)&v215 + 1);
        *((_QWORD *)&v215 + 1) = v169;
        *(_QWORD *)&v216 = v162;
        *((_QWORD *)&v216 + 1) = v170;
        if (!v155)
          goto LABEL_231;
        goto LABEL_230;
      }
    }
    else
    {
      v168 = 0;
      v169 = (_QWORD *)(8 * v164);
      v170 = 0;
      *(_QWORD *)(8 * v164) = v161;
      v162 = 8 * v164 + 8;
      if (v155 != v156)
        goto LABEL_220;
    }
    *((_QWORD *)&v215 + 1) = v169;
    *(_QWORD *)&v216 = v162;
    *((_QWORD *)&v216 + 1) = v170;
    if (!v155)
      goto LABEL_231;
LABEL_230:
    operator delete(v155);
    goto LABEL_231;
  }
  *(_QWORD *)v156 = v160;
  v162 = (uint64_t)(v156 + 8);
LABEL_231:
  v159 = (char *)v161 + 9;
  *(_QWORD *)&v216 = v162;
LABEL_232:
  *v159 = v154;
LABEL_233:
  v186 = a1 + 192;
  v187 = QMIServiceMsg::create();
  v188 = 25000;
  v189 = 0;
  aBlock = 0;
  v183[0] = v8;
  v183[1] = 1174405120;
  v183[2] = ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_6;
  v183[3] = &__block_descriptor_tmp_59_2;
  v183[4] = a1;
  v179 = *(void **)a2;
  if (*(_QWORD *)a2)
    v179 = _Block_copy(v179);
  v180 = *(NSObject **)(a2 + 8);
  v184 = v179;
  object = v180;
  if (v180)
    dispatch_retain(v180);
  *(_QWORD *)&buf = v8;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v219 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_2;
  v220 = &unk_1E66DEC88;
  v221 = v183;
  v181 = _Block_copy(&buf);
  aBlock = v181;
  if (v187)
  {
    qmi::Client::send();
    v181 = aBlock;
  }
  if (v181)
    _Block_release(v181);
  if (object)
    dispatch_release(object);
  if (v184)
    _Block_release(v184);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v215);
  MEMORY[0x1B5E2EE44](v217);
  if (v4)
    CFRelease(v4);
}

void sub_1B3D628B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setWLANState_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  CFTypeID v11;
  CFTypeID TypeID;
  char *v13;
  char *v14;
  const void **v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  const __CFDictionary *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  const void *v38;
  const void *v39;
  CFTypeID v40;
  CFTypeID v41;
  char *v42;
  char *v43;
  const void **v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  _OWORD *v61;
  char *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  void *v66;
  NSObject *v67;
  void *v68;
  _QWORD v70[5];
  void *v71;
  dispatch_object_t object;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *aBlock;
  _QWORD v78[2];
  uint64_t (*v79)(uint64_t, char *);
  void *v80;
  _BYTE v81[16];
  _QWORD v82[2];
  uint64_t (*v83)(uint64_t, uint64_t);
  void *v84;
  _BYTE v85[16];
  __int128 v86;
  __int128 v87;
  _QWORD v88[2];
  uint8_t buf[16];
  void (*v90)(uint64_t, QMIServiceMsg *);
  void *v91;
  _QWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v29 = *a2;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v29;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting WLAN state with: %@", buf, 0xCu);
  }
  v88[0] = 0xAAAAAAAAAAAAAAAALL;
  v88[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v88, *a2);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v86 = v7;
  v87 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v86);
  v8 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v88[0])(v88, *MEMORY[0x1E0DDF3C0]);
  v9 = v8;
  v10 = MEMORY[0x1E0C809B0];
  if (v8)
  {
    v11 = CFGetTypeID(v8);
    TypeID = CFDictionaryGetTypeID();
    CFRelease(v9);
    if (v11 == TypeID)
    {
      memset(buf, 170, sizeof(buf));
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v9);
      v82[0] = v10;
      v82[1] = 1174405120;
      v83 = ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
      v84 = &__block_descriptor_tmp_61_1;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v85, (const ctu::cf::dict_adapter *)buf);
      v13 = (char *)*((_QWORD *)&v86 + 1);
      v14 = (char *)v87;
      v15 = (const void **)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1) != (_QWORD)v87)
      {
        v15 = (const void **)*((_QWORD *)&v86 + 1);
        while (*((_BYTE *)*v15 + 8) != 16)
        {
          if (++v15 == (const void **)v87)
            goto LABEL_13;
        }
      }
      if (v15 != (const void **)v87)
      {
        if (!v16)
          __cxa_bad_cast();
        v17 = v16 + 12;
        goto LABEL_36;
      }
LABEL_13:
      v18 = (char *)operator new(0x20uLL);
      v19 = v18;
      v18[8] = 16;
      *(_QWORD *)v18 = off_1E66DECD0;
      *(_QWORD *)(v18 + 12) = 0;
      v17 = v18 + 12;
      *(_QWORD *)(v18 + 20) = 0;
      if ((unint64_t)v14 < *((_QWORD *)&v87 + 1))
      {
        *(_QWORD *)v14 = v18;
        *(_QWORD *)&v87 = v14 + 8;
LABEL_36:
        v83((uint64_t)v82, (uint64_t)v17);
        MEMORY[0x1B5E2EE44](v85);
        MEMORY[0x1B5E2EE44](buf);
        v10 = MEMORY[0x1E0C809B0];
        goto LABEL_37;
      }
      v20 = v14 - v13;
      v21 = (v14 - v13) >> 3;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v23 = *((_QWORD *)&v87 + 1) - (_QWORD)v13;
      if ((uint64_t)(*((_QWORD *)&v87 + 1) - (_QWORD)v13) >> 2 > v22)
        v22 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v25 = operator new(8 * v24);
        v26 = &v25[8 * v21];
        v27 = &v25[8 * v24];
        *v26 = v19;
        v28 = (uint64_t)(v26 + 1);
        if (v13 == v14)
          goto LABEL_33;
      }
      else
      {
        v25 = 0;
        v26 = (_QWORD *)(8 * v21);
        v27 = 0;
        *(_QWORD *)(8 * v21) = v19;
        v28 = 8 * v21 + 8;
        if (v13 == v14)
        {
LABEL_33:
          *((_QWORD *)&v86 + 1) = v26;
          *(_QWORD *)&v87 = v28;
          *((_QWORD *)&v87 + 1) = v27;
          if (v13)
            operator delete(v13);
          *(_QWORD *)&v87 = v28;
          goto LABEL_36;
        }
      }
      if ((unint64_t)(v20 - 8) < 0x58)
        goto LABEL_92;
      if ((unint64_t)(v13 - v25) < 0x20)
        goto LABEL_92;
      v30 = ((unint64_t)(v20 - 8) >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v32 = &v14[-v31];
      v26 = (_QWORD *)((char *)v26 - v31);
      v33 = &v25[8 * v21 - 16];
      v34 = v14 - 16;
      v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v36 = *(_OWORD *)v34;
        *(v33 - 1) = *((_OWORD *)v34 - 1);
        *v33 = v36;
        v33 -= 2;
        v34 -= 32;
        v35 -= 4;
      }
      while (v35);
      v14 = v32;
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_92:
        do
        {
          v37 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *--v26 = v37;
        }
        while (v14 != v13);
      }
      v13 = (char *)*((_QWORD *)&v86 + 1);
      goto LABEL_33;
    }
  }
LABEL_37:
  v38 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v88[0])(v88, *MEMORY[0x1E0DDF530]);
  v39 = v38;
  if (v38)
  {
    v40 = CFGetTypeID(v38);
    v41 = CFDictionaryGetTypeID();
    CFRelease(v39);
    if (v40 == v41)
    {
      memset(buf, 170, sizeof(buf));
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v39);
      v78[0] = v10;
      v78[1] = 1174405120;
      v79 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_62;
      v80 = &__block_descriptor_tmp_63_0;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v81, (const ctu::cf::dict_adapter *)buf);
      v42 = (char *)*((_QWORD *)&v86 + 1);
      v43 = (char *)v87;
      v44 = (const void **)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1) != (_QWORD)v87)
      {
        v44 = (const void **)*((_QWORD *)&v86 + 1);
        while (*((_BYTE *)*v44 + 8) != 17)
        {
          if (++v44 == (const void **)v87)
            goto LABEL_47;
        }
      }
      if (v44 != (const void **)v87)
      {
        if (!v45)
          __cxa_bad_cast();
        v46 = v45 + 16;
        goto LABEL_70;
      }
LABEL_47:
      v47 = (char *)operator new(0x38uLL);
      v48 = v47;
      v47[8] = 17;
      *((_DWORD *)v47 + 4) = 0;
      v46 = v47 + 16;
      *(_QWORD *)v47 = &off_1E66DED20;
      *(_OWORD *)(v47 + 24) = 0u;
      *(_OWORD *)(v47 + 40) = 0u;
      if ((unint64_t)v43 < *((_QWORD *)&v87 + 1))
      {
        *(_QWORD *)v43 = v47;
        *(_QWORD *)&v87 = v43 + 8;
LABEL_70:
        v79((uint64_t)v78, v46);
        MEMORY[0x1B5E2EE44](v81);
        MEMORY[0x1B5E2EE44](buf);
        v10 = MEMORY[0x1E0C809B0];
        goto LABEL_71;
      }
      v49 = v43 - v42;
      v50 = (v43 - v42) >> 3;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v52 = *((_QWORD *)&v87 + 1) - (_QWORD)v42;
      if ((uint64_t)(*((_QWORD *)&v87 + 1) - (_QWORD)v42) >> 2 > v51)
        v51 = v52 >> 2;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8)
        v53 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      if (v53)
      {
        if (v53 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v54 = operator new(8 * v53);
        v55 = &v54[8 * v50];
        v56 = &v54[8 * v53];
        *v55 = v48;
        v57 = (uint64_t)(v55 + 1);
        if (v42 == v43)
          goto LABEL_67;
      }
      else
      {
        v54 = 0;
        v55 = (_QWORD *)(8 * v50);
        v56 = 0;
        *(_QWORD *)(8 * v50) = v48;
        v57 = 8 * v50 + 8;
        if (v42 == v43)
        {
LABEL_67:
          *((_QWORD *)&v86 + 1) = v55;
          *(_QWORD *)&v87 = v57;
          *((_QWORD *)&v87 + 1) = v56;
          if (v42)
            operator delete(v42);
          *(_QWORD *)&v87 = v57;
          goto LABEL_70;
        }
      }
      if ((unint64_t)(v49 - 8) < 0x58)
        goto LABEL_93;
      if ((unint64_t)(v42 - v54) < 0x20)
        goto LABEL_93;
      v58 = ((unint64_t)(v49 - 8) >> 3) + 1;
      v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v60 = &v43[-v59];
      v55 = (_QWORD *)((char *)v55 - v59);
      v61 = &v54[8 * v50 - 16];
      v62 = v43 - 16;
      v63 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v64 = *(_OWORD *)v62;
        *(v61 - 1) = *((_OWORD *)v62 - 1);
        *v61 = v64;
        v61 -= 2;
        v62 -= 32;
        v63 -= 4;
      }
      while (v63);
      v43 = v60;
      if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_93:
        do
        {
          v65 = *((_QWORD *)v43 - 1);
          v43 -= 8;
          *--v55 = v65;
        }
        while (v43 != v42);
      }
      v42 = (char *)*((_QWORD *)&v86 + 1);
      goto LABEL_67;
    }
  }
LABEL_71:
  v73 = a1 + 192;
  v74 = QMIServiceMsg::create();
  v75 = 25000;
  v76 = 0;
  aBlock = 0;
  v70[0] = v10;
  v70[1] = 1174405120;
  v70[2] = ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_64;
  v70[3] = &__block_descriptor_tmp_66_0;
  v70[4] = a1;
  v66 = *(void **)a3;
  if (*(_QWORD *)a3)
    v66 = _Block_copy(v66);
  v67 = *(NSObject **)(a3 + 8);
  v71 = v66;
  object = v67;
  if (v67)
    dispatch_retain(v67);
  *(_QWORD *)buf = v10;
  *(_QWORD *)&buf[8] = 0x40000000;
  v90 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm12SetWLANState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v91 = &unk_1E66DED50;
  v92 = v70;
  v68 = _Block_copy(buf);
  aBlock = v68;
  if (v74)
  {
    qmi::Client::send();
    v68 = aBlock;
  }
  if (v68)
    _Block_release(v68);
  if (object)
    dispatch_release(object);
  if (v71)
    _Block_release(v71);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v86);
  return MEMORY[0x1B5E2EE44](v88);
}

void sub_1B3D6307C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  MEMORY[0x1B5E2EE44](v33 - 144);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  MEMORY[0x1B5E2EE44](v33 - 160);
  _Unwind_Resume(a1);
}

void sub_1B3D630CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  coex::CommandDriver::Callback *v33;
  uint64_t v34;

  coex::CommandDriver::Callback::~Callback(v33);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  MEMORY[0x1B5E2EE44](v34 - 160);
  _Unwind_Resume(a1);
}

void sub_1B3D6312C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  MEMORY[0x1B5E2EE44](v33 - 160);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::setBLER_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  ctu::cf::map_adapter *v7;
  int Bool;
  __int128 v9;
  char *v10;
  char *v11;
  const void **v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  void *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  const __CFDictionary *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  const void **v41;
  char *v42;
  char *v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  char *v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  void *v63;
  NSObject *v64;
  void *v65;
  _QWORD v67[5];
  void *v68;
  dispatch_object_t object;
  _QWORD v70[5];
  void *v71;
  dispatch_object_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *v77;
  _QWORD v78[2];
  uint64_t (*v79)(uint64_t, char *);
  void *v80;
  _BYTE v81[16];
  _QWORD v82[2];
  uint64_t (*v83)(uint64_t, char *);
  void *v84;
  _BYTE v85[16];
  __int128 v86;
  __int128 v87;
  _QWORD v88[2];
  __int128 aBlock;
  void (*v90)(uint64_t, QMIServiceMsg *);
  void *v91;
  _QWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v30 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v30;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting BLER with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v88[0] = 0xAAAAAAAAAAAAAAAALL;
  v88[1] = 0xAAAAAAAAAAAAAAAALL;
  v7 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v88, *a2);
  Bool = ctu::cf::map_adapter::getBool(v7, (const __CFString *)*MEMORY[0x1E0DDF6F0]);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (Bool)
  {
    v86 = v9;
    v87 = v9;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v86);
    v82[0] = MEMORY[0x1E0C809B0];
    v82[1] = 1174405120;
    v83 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
    v84 = &__block_descriptor_tmp_173_0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v85, (const ctu::cf::dict_adapter *)v88);
    v10 = (char *)*((_QWORD *)&v86 + 1);
    v11 = (char *)v87;
    v12 = (const void **)*((_QWORD *)&v86 + 1);
    if (*((_QWORD *)&v86 + 1) != (_QWORD)v87)
    {
      v12 = (const void **)*((_QWORD *)&v86 + 1);
      while (*((_BYTE *)*v12 + 8) != 1)
      {
        if (++v12 == (const void **)v87)
          goto LABEL_24;
      }
    }
    if (v12 != (const void **)v87)
    {
      if (!v17)
        __cxa_bad_cast();
      v18 = v17 + 12;
LABEL_47:
      v83((uint64_t)v82, v18);
      v78[0] = MEMORY[0x1E0C809B0];
      v78[1] = 1174405120;
      v79 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_174;
      v80 = &__block_descriptor_tmp_176_0;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v81, (const ctu::cf::dict_adapter *)v88);
      v39 = (char *)*((_QWORD *)&v86 + 1);
      v40 = (char *)v87;
      v41 = (const void **)*((_QWORD *)&v86 + 1);
      if (*((_QWORD *)&v86 + 1) != (_QWORD)v87)
      {
        v41 = (const void **)*((_QWORD *)&v86 + 1);
        while (*((_BYTE *)*v41 + 8) != 2)
        {
          if (++v41 == (const void **)v87)
            goto LABEL_55;
        }
      }
      if (v41 != (const void **)v87)
      {
        if (!v42)
          __cxa_bad_cast();
        v43 = v42 + 12;
        goto LABEL_78;
      }
LABEL_55:
      v44 = operator new(0x10uLL);
      v45 = v44;
      v44[8] = 2;
      *(_QWORD *)v44 = off_1E66DF450;
      *((_DWORD *)v44 + 3) = 0;
      v43 = v44 + 12;
      if ((unint64_t)v40 < *((_QWORD *)&v87 + 1))
      {
        *(_QWORD *)v40 = v44;
        *(_QWORD *)&v87 = v40 + 8;
LABEL_78:
        v79((uint64_t)v78, v43);
        v73 = a1 + 192;
        v74 = QMIServiceMsg::create();
        v75 = 25000;
        v76 = 0;
        v77 = 0;
        v70[0] = MEMORY[0x1E0C809B0];
        v70[1] = 1174405120;
        v70[2] = ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_177;
        v70[3] = &__block_descriptor_tmp_179;
        v70[4] = a1;
        v63 = *(void **)a3;
        if (*(_QWORD *)a3)
          v63 = _Block_copy(v63);
        v64 = *(NSObject **)(a3 + 8);
        v71 = v63;
        v72 = v64;
        if (v64)
          dispatch_retain(v64);
        *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
        *((_QWORD *)&aBlock + 1) = 0x40000000;
        v90 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9BLERStart8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v91 = &unk_1E66DF480;
        v92 = v70;
        v65 = _Block_copy(&aBlock);
        v77 = v65;
        if (v74)
        {
          qmi::Client::send();
          v65 = v77;
        }
        if (v65)
          _Block_release(v65);
        if (v72)
          dispatch_release(v72);
        if (v71)
          _Block_release(v71);
        MEMORY[0x1B5E2EE44](v81);
        MEMORY[0x1B5E2EE44](v85);
        goto LABEL_91;
      }
      v46 = v40 - v39;
      v47 = (v40 - v39) >> 3;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v49 = *((_QWORD *)&v87 + 1) - (_QWORD)v39;
      if ((uint64_t)(*((_QWORD *)&v87 + 1) - (_QWORD)v39) >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
      {
        if (v50 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v51 = operator new(8 * v50);
        v52 = &v51[8 * v47];
        v53 = &v51[8 * v50];
        *v52 = v45;
        v54 = (uint64_t)(v52 + 1);
        if (v39 == v40)
          goto LABEL_75;
      }
      else
      {
        v51 = 0;
        v52 = (_QWORD *)(8 * v47);
        v53 = 0;
        *(_QWORD *)(8 * v47) = v45;
        v54 = 8 * v47 + 8;
        if (v39 == v40)
        {
LABEL_75:
          *((_QWORD *)&v86 + 1) = v52;
          *(_QWORD *)&v87 = v54;
          *((_QWORD *)&v87 + 1) = v53;
          if (v39)
            operator delete(v39);
          *(_QWORD *)&v87 = v54;
          goto LABEL_78;
        }
      }
      if ((unint64_t)(v46 - 8) < 0x58)
        goto LABEL_100;
      if ((unint64_t)(v39 - v51) < 0x20)
        goto LABEL_100;
      v55 = ((unint64_t)(v46 - 8) >> 3) + 1;
      v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
      v57 = &v40[-v56];
      v52 = (_QWORD *)((char *)v52 - v56);
      v58 = &v51[8 * v47 - 16];
      v59 = v40 - 16;
      v60 = v55 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v61 = *(_OWORD *)v59;
        *(v58 - 1) = *((_OWORD *)v59 - 1);
        *v58 = v61;
        v58 -= 2;
        v59 -= 32;
        v60 -= 4;
      }
      while (v60);
      v40 = v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_100:
        do
        {
          v62 = *((_QWORD *)v40 - 1);
          v40 -= 8;
          *--v52 = v62;
        }
        while (v40 != v39);
      }
      v39 = (char *)*((_QWORD *)&v86 + 1);
      goto LABEL_75;
    }
LABEL_24:
    v19 = operator new(0x10uLL);
    v20 = v19;
    v19[8] = 1;
    *(_QWORD *)v19 = off_1E66DF400;
    *((_DWORD *)v19 + 3) = 0;
    v18 = v19 + 12;
    if ((unint64_t)v11 < *((_QWORD *)&v87 + 1))
    {
      *(_QWORD *)v11 = v19;
      *(_QWORD *)&v87 = v11 + 8;
      goto LABEL_47;
    }
    v21 = v11 - v10;
    v22 = (v11 - v10) >> 3;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v24 = *((_QWORD *)&v87 + 1) - (_QWORD)v10;
    if ((uint64_t)(*((_QWORD *)&v87 + 1) - (_QWORD)v10) >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = operator new(8 * v25);
      v27 = &v26[8 * v22];
      v28 = &v26[8 * v25];
      *v27 = v20;
      v29 = (uint64_t)(v27 + 1);
      if (v10 == v11)
        goto LABEL_44;
    }
    else
    {
      v26 = 0;
      v27 = (_QWORD *)(8 * v22);
      v28 = 0;
      *(_QWORD *)(8 * v22) = v20;
      v29 = 8 * v22 + 8;
      if (v10 == v11)
      {
LABEL_44:
        *((_QWORD *)&v86 + 1) = v27;
        *(_QWORD *)&v87 = v29;
        *((_QWORD *)&v87 + 1) = v28;
        if (v10)
          operator delete(v10);
        *(_QWORD *)&v87 = v29;
        goto LABEL_47;
      }
    }
    if ((unint64_t)(v21 - 8) < 0x58)
      goto LABEL_101;
    if ((unint64_t)(v10 - v26) < 0x20)
      goto LABEL_101;
    v31 = ((unint64_t)(v21 - 8) >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v11[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v11 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v11 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_101:
      do
      {
        v38 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *--v27 = v38;
      }
      while (v11 != v10);
    }
    v10 = (char *)*((_QWORD *)&v86 + 1);
    goto LABEL_44;
  }
  v86 = v9;
  v87 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v86);
  v73 = a1 + 192;
  v74 = QMIServiceMsg::create();
  v75 = 25000;
  v76 = 0;
  v77 = 0;
  v13 = MEMORY[0x1E0C809B0];
  v67[0] = MEMORY[0x1E0C809B0];
  v67[1] = 1174405120;
  v67[2] = ___ZN4coex16QMICommandDriver12setBLER_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_181;
  v67[3] = &__block_descriptor_tmp_183_0;
  v67[4] = a1;
  v14 = *(void **)a3;
  if (*(_QWORD *)a3)
    v14 = _Block_copy(v14);
  v15 = *(NSObject **)(a3 + 8);
  v68 = v14;
  object = v15;
  if (v15)
    dispatch_retain(v15);
  *(_QWORD *)&aBlock = v13;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v90 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8BLERStop8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v91 = &unk_1E66DF4A8;
  v92 = v67;
  v16 = _Block_copy(&aBlock);
  v77 = v16;
  if (v74)
  {
    qmi::Client::send();
    v16 = v77;
  }
  if (v16)
    _Block_release(v16);
  if (object)
    dispatch_release(object);
  if (v68)
    _Block_release(v68);
LABEL_91:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v86);
  return MEMORY[0x1B5E2EE44](v88);
}

void sub_1B3D638B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setSINR_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  ctu::cf::map_adapter *v7;
  int Bool;
  __int128 v9;
  uint64_t v10;
  char *v11;
  char *v12;
  const void **v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  void *v17;
  char *v18;
  float *v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  const __CFDictionary *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  void *v42;
  _QWORD v44[5];
  void *v45;
  dispatch_object_t object;
  _QWORD v47[5];
  void *v48;
  dispatch_object_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void *v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, float *);
  void *v57;
  _BYTE v58[16];
  __int128 v59;
  __int128 v60;
  _QWORD v61[2];
  __int128 aBlock;
  void (*v63)(uint64_t, QMIServiceMsg *);
  void *v64;
  _QWORD *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v31 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v31;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting SINR with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v61[0] = 0xAAAAAAAAAAAAAAAALL;
  v61[1] = 0xAAAAAAAAAAAAAAAALL;
  v7 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v61, *a2);
  Bool = ctu::cf::map_adapter::getBool(v7, (const __CFString *)*MEMORY[0x1E0DDF6F0]);
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  if (Bool)
  {
    v59 = v9;
    v60 = v9;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v59);
    v10 = MEMORY[0x1E0C809B0];
    v55[0] = MEMORY[0x1E0C809B0];
    v55[1] = 1174405120;
    v56 = ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
    v57 = &__block_descriptor_tmp_185_0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v58, (const ctu::cf::dict_adapter *)v61);
    v11 = (char *)*((_QWORD *)&v59 + 1);
    v12 = (char *)v60;
    v13 = (const void **)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1) != (_QWORD)v60)
    {
      v13 = (const void **)*((_QWORD *)&v59 + 1);
      while (*((_BYTE *)*v13 + 8) != 1)
      {
        if (++v13 == (const void **)v60)
          goto LABEL_24;
      }
    }
    if (v13 != (const void **)v60)
    {
      if (!v18)
        __cxa_bad_cast();
      v19 = (float *)(v18 + 12);
      goto LABEL_47;
    }
LABEL_24:
    v20 = operator new(0x10uLL);
    v21 = v20;
    v20[8] = 1;
    *(_QWORD *)v20 = off_1E66DF4F0;
    *((_DWORD *)v20 + 3) = 0;
    v19 = (float *)(v20 + 12);
    if ((unint64_t)v12 < *((_QWORD *)&v60 + 1))
    {
      *(_QWORD *)v12 = v20;
      *(_QWORD *)&v60 = v12 + 8;
LABEL_47:
      v56((uint64_t)v55, v19);
      v50 = a1 + 192;
      v51 = QMIServiceMsg::create();
      v52 = 25000;
      v53 = 0;
      v54 = 0;
      v47[0] = v10;
      v47[1] = 1174405120;
      v47[2] = ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_186;
      v47[3] = &__block_descriptor_tmp_188_0;
      v47[4] = a1;
      v40 = *(void **)a3;
      if (*(_QWORD *)a3)
        v40 = _Block_copy(v40);
      v41 = *(NSObject **)(a3 + 8);
      v48 = v40;
      v49 = v41;
      if (v41)
        dispatch_retain(v41);
      *(_QWORD *)&aBlock = v10;
      *((_QWORD *)&aBlock + 1) = 0x40000000;
      v63 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SINRStart8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v64 = &unk_1E66DF520;
      v65 = v47;
      v42 = _Block_copy(&aBlock);
      v54 = v42;
      if (v51)
      {
        qmi::Client::send();
        v42 = v54;
      }
      if (v42)
        _Block_release(v42);
      if (v49)
        dispatch_release(v49);
      if (v48)
        _Block_release(v48);
      MEMORY[0x1B5E2EE44](v58);
      goto LABEL_60;
    }
    v22 = v12 - v11;
    v23 = (v12 - v11) >> 3;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v25 = *((_QWORD *)&v60 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v60 + 1) - (_QWORD)v11) >> 2 > v24)
      v24 = v25 >> 2;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = operator new(8 * v26);
      v28 = &v27[8 * v23];
      v29 = &v27[8 * v26];
      *v28 = v21;
      v30 = (uint64_t)(v28 + 1);
      if (v11 == v12)
        goto LABEL_44;
    }
    else
    {
      v27 = 0;
      v28 = (_QWORD *)(8 * v23);
      v29 = 0;
      *(_QWORD *)(8 * v23) = v21;
      v30 = 8 * v23 + 8;
      if (v11 == v12)
      {
LABEL_44:
        *((_QWORD *)&v59 + 1) = v28;
        *(_QWORD *)&v60 = v30;
        *((_QWORD *)&v60 + 1) = v29;
        if (v11)
          operator delete(v11);
        *(_QWORD *)&v60 = v30;
        goto LABEL_47;
      }
    }
    if ((unint64_t)(v22 - 8) < 0x58)
      goto LABEL_66;
    if ((unint64_t)(v11 - v27) < 0x20)
      goto LABEL_66;
    v32 = ((unint64_t)(v22 - 8) >> 3) + 1;
    v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    v34 = &v12[-v33];
    v28 = (_QWORD *)((char *)v28 - v33);
    v35 = &v27[8 * v23 - 16];
    v36 = v12 - 16;
    v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 4;
    }
    while (v37);
    v12 = v34;
    if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_66:
      do
      {
        v39 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v28 = v39;
      }
      while (v12 != v11);
    }
    v11 = (char *)*((_QWORD *)&v59 + 1);
    goto LABEL_44;
  }
  v59 = v9;
  v60 = v9;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v59);
  v50 = a1 + 192;
  v51 = QMIServiceMsg::create();
  v52 = 25000;
  v53 = 0;
  v54 = 0;
  v14 = MEMORY[0x1E0C809B0];
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 1174405120;
  v44[2] = ___ZN4coex16QMICommandDriver12setSINR_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_190;
  v44[3] = &__block_descriptor_tmp_192_0;
  v44[4] = a1;
  v15 = *(void **)a3;
  if (*(_QWORD *)a3)
    v15 = _Block_copy(v15);
  v16 = *(NSObject **)(a3 + 8);
  v45 = v15;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  *(_QWORD *)&aBlock = v14;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v63 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8SINRStop8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v64 = &unk_1E66DF548;
  v65 = v44;
  v17 = _Block_copy(&aBlock);
  v54 = v17;
  if (v51)
  {
    qmi::Client::send();
    v17 = v54;
  }
  if (v17)
    _Block_release(v17);
  if (object)
    dispatch_release(object);
  if (v45)
    _Block_release(v45);
LABEL_60:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v59);
  return MEMORY[0x1B5E2EE44](v61);
}

void sub_1B3D63EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setBandFilterInfo_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  NSObject *v8;
  ctu::cf::map_adapter *v9;
  uint64_t v10;
  const void *v11;
  __int128 v12;
  char *v13;
  char *v14;
  const void **v15;
  char *v16;
  int v17;
  void **v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  const void **v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  const __CFDictionary *v47;
  uint64_t v48;
  _QWORD v49[5];
  void *v50;
  dispatch_object_t object;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *v56;
  _QWORD v57[2];
  uint64_t (*v58)(uint64_t, char *);
  void *v59;
  int v60;
  _QWORD v61[2];
  void (*v62)(uint64_t, void **);
  void *v63;
  CFTypeRef cf;
  void *__p[2];
  __int128 v66;
  uint64_t v67;
  _QWORD v68[2];
  __int128 aBlock;
  void (*v70)(uint64_t, QMIServiceMsg *);
  void *v71;
  _QWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v47 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v47;
    _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Setting Band filter info with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v68[0] = 0xAAAAAAAAAAAAAAAALL;
  v68[1] = 0xAAAAAAAAAAAAAAAALL;
  v9 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v68, *a2);
  v10 = ctu::cf::map_adapter::copyCFArrayRef(v9, (const __CFString *)*MEMORY[0x1E0DDF2D8]);
  v11 = (const void *)v10;
  if (!v10)
    return MEMORY[0x1B5E2EE44](v68);
  v67 = v10;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v12;
  v66 = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 1174405120;
  v62 = ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v63 = &__block_descriptor_tmp_196_0;
  cf = v11;
  CFRetain(v11);
  v48 = a4;
  v13 = (char *)__p[1];
  v14 = (char *)v66;
  v15 = (const void **)__p[1];
  if (__p[1] != (void *)v66)
  {
    v15 = (const void **)__p[1];
    while (*((_BYTE *)*v15 + 8) != 16)
    {
      if (++v15 == (const void **)v66)
        goto LABEL_12;
    }
  }
  if (v15 != (const void **)v66)
  {
    if (!v16)
      __cxa_bad_cast();
    v17 = a3;
    v18 = (void **)(v16 + 16);
    goto LABEL_35;
  }
LABEL_12:
  v17 = a3;
  v19 = operator new(0x28uLL);
  v20 = v19;
  v19[8] = 16;
  *(_QWORD *)v19 = &off_1E66DF6F8;
  *((_QWORD *)v19 + 2) = 0;
  v18 = (void **)(v19 + 16);
  *((_QWORD *)v19 + 3) = 0;
  *((_QWORD *)v19 + 4) = 0;
  if ((unint64_t)v14 >= *((_QWORD *)&v66 + 1))
  {
    v21 = v14 - v13;
    v22 = (v14 - v13) >> 3;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v24 = *((_QWORD *)&v66 + 1) - (_QWORD)v13;
    if ((uint64_t)(*((_QWORD *)&v66 + 1) - (_QWORD)v13) >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = operator new(8 * v25);
      v27 = &v26[8 * v22];
      v28 = &v26[8 * v25];
      *v27 = v20;
      v29 = (uint64_t)(v27 + 1);
      if (v13 != v14)
      {
LABEL_23:
        if ((unint64_t)(v21 - 8) < 0x58)
          goto LABEL_67;
        if ((unint64_t)(v13 - v26) < 0x20)
          goto LABEL_67;
        v30 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v32 = &v14[-v31];
        v27 = (_QWORD *)((char *)v27 - v31);
        v33 = &v26[8 * v22 - 16];
        v34 = v14 - 16;
        v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 4;
        }
        while (v35);
        v14 = v32;
        if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_67:
          do
          {
            v37 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v27 = v37;
          }
          while (v14 != v13);
        }
        v13 = (char *)__p[1];
        __p[1] = v27;
        *(_QWORD *)&v66 = v29;
        *((_QWORD *)&v66 + 1) = v28;
        if (!v13)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else
    {
      v26 = 0;
      v27 = (_QWORD *)(8 * v22);
      v28 = 0;
      *(_QWORD *)(8 * v22) = v20;
      v29 = 8 * v22 + 8;
      if (v13 != v14)
        goto LABEL_23;
    }
    __p[1] = v27;
    *(_QWORD *)&v66 = v29;
    *((_QWORD *)&v66 + 1) = v28;
    if (!v13)
    {
LABEL_34:
      *(_QWORD *)&v66 = v29;
      goto LABEL_35;
    }
LABEL_33:
    operator delete(v13);
    goto LABEL_34;
  }
  *(_QWORD *)v14 = v19;
  *(_QWORD *)&v66 = v14 + 8;
LABEL_35:
  v62((uint64_t)v61, v18);
  v38 = MEMORY[0x1E0C809B0];
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 0x40000000;
  v58 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_197;
  v59 = &__block_descriptor_tmp_198_0;
  v60 = v17;
  v39 = (const void **)__p[1];
  if (__p[1] == (void *)v66)
  {
    v40 = v48;
  }
  else
  {
    v40 = v48;
    while (*((_BYTE *)*v39 + 8) != 17)
    {
      if (++v39 == (const void **)v66)
        goto LABEL_44;
    }
  }
  if (v39 == (const void **)v66)
  {
LABEL_44:
    v42 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(__p, 17);
    v58((uint64_t)v57, v42);
  }
  else
  {
    if (!v41)
      __cxa_bad_cast();
    ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_197((uint64_t)v57, v41 + 3);
  }
  v52 = a1 + 192;
  v53 = QMIServiceMsg::create();
  v54 = 25000;
  v55 = 0;
  v56 = 0;
  v49[0] = v38;
  v49[1] = 1174405120;
  v49[2] = ___ZN4coex16QMICommandDriver22setBandFilterInfo_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2;
  v49[3] = &__block_descriptor_tmp_200;
  v49[4] = a1;
  v43 = *(void **)v40;
  if (*(_QWORD *)v40)
    v43 = _Block_copy(v43);
  v44 = *(NSObject **)(v40 + 8);
  v50 = v43;
  object = v44;
  if (v44)
    dispatch_retain(v44);
  *(_QWORD *)&aBlock = v38;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v70 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm17SetBandFilterInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v71 = &unk_1E66DF728;
  v72 = v49;
  v45 = _Block_copy(&aBlock);
  v56 = v45;
  if (v53)
  {
    qmi::Client::send();
    v45 = v56;
  }
  if (v45)
    _Block_release(v45);
  if (object)
    dispatch_release(object);
  if (v50)
    _Block_release(v50);
  if (cf)
    CFRelease(cf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  CFRelease(v11);
  return MEMORY[0x1B5E2EE44](v68);
}

void sub_1B3D644F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D64574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a32);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(v33 - 184);
  MEMORY[0x1B5E2EE44](v33 - 176);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::setScanFreqBandFilter_sync(uint64_t a1, const __CFDictionary **a2, int a3, uint64_t a4)
{
  NSObject *v8;
  ctu::cf::map_adapter *v9;
  const void *v10;
  uint64_t (*v11)(uint64_t);
  __int128 v12;
  char *v13;
  char *v14;
  const void **v15;
  char *v16;
  int v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  const void **v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  void *v43;
  NSObject *v44;
  void *v45;
  const __CFDictionary *v47;
  uint64_t v48;
  _QWORD v49[5];
  void *v50;
  dispatch_object_t object;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  void *v56;
  _QWORD v57[2];
  uint64_t (*v58)(uint64_t, char *);
  void *v59;
  int v60;
  _QWORD v61[2];
  void (*v62)(uint64_t, uint64_t);
  void *v63;
  CFTypeRef cf;
  void *__p[2];
  __int128 v66;
  const void *v67;
  _QWORD v68[2];
  __int128 aBlock;
  void (*v70)(uint64_t, QMIServiceMsg *);
  void *v71;
  _QWORD *v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v47 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v47;
    _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Setting Scan Frequency Band filter info with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v68[0] = 0xAAAAAAAAAAAAAAAALL;
  v68[1] = 0xAAAAAAAAAAAAAAAALL;
  v9 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v68, *a2);
  v10 = (const void *)ctu::cf::map_adapter::copyCFArrayRef(v9, (const __CFString *)*MEMORY[0x1E0DDF408]);
  v67 = v10;
  v11 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v10)
    v11 = 0;
  if (!v11)
    goto LABEL_64;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v12;
  v66 = v12;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v61[0] = MEMORY[0x1E0C809B0];
  v61[1] = 1174405120;
  v62 = ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v63 = &__block_descriptor_tmp_201_0;
  cf = v10;
  if (v10)
    CFRetain(v10);
  v48 = a4;
  v13 = (char *)__p[1];
  v14 = (char *)v66;
  v15 = (const void **)__p[1];
  if (__p[1] != (void *)v66)
  {
    v15 = (const void **)__p[1];
    while (*((_BYTE *)*v15 + 8) != 16)
    {
      if (++v15 == (const void **)v66)
        goto LABEL_16;
    }
  }
  if (v15 != (const void **)v66)
  {
    if (!v16)
      __cxa_bad_cast();
    v17 = a3;
    v18 = v16 + 16;
    goto LABEL_39;
  }
LABEL_16:
  v17 = a3;
  v19 = operator new(0x28uLL);
  v20 = v19;
  v19[8] = 16;
  *(_QWORD *)v19 = &off_1E66DF770;
  *((_QWORD *)v19 + 2) = 0;
  v18 = v19 + 16;
  *((_QWORD *)v19 + 3) = 0;
  *((_QWORD *)v19 + 4) = 0;
  if ((unint64_t)v14 >= *((_QWORD *)&v66 + 1))
  {
    v21 = v14 - v13;
    v22 = (v14 - v13) >> 3;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v24 = *((_QWORD *)&v66 + 1) - (_QWORD)v13;
    if ((uint64_t)(*((_QWORD *)&v66 + 1) - (_QWORD)v13) >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = operator new(8 * v25);
      v27 = &v26[8 * v22];
      v28 = &v26[8 * v25];
      *v27 = v20;
      v29 = (uint64_t)(v27 + 1);
      if (v13 != v14)
      {
LABEL_27:
        if ((unint64_t)(v21 - 8) < 0x58)
          goto LABEL_73;
        if ((unint64_t)(v13 - v26) < 0x20)
          goto LABEL_73;
        v30 = ((unint64_t)(v21 - 8) >> 3) + 1;
        v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
        v32 = &v14[-v31];
        v27 = (_QWORD *)((char *)v27 - v31);
        v33 = &v26[8 * v22 - 16];
        v34 = v14 - 16;
        v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *(_OWORD *)v34;
          *(v33 - 1) = *((_OWORD *)v34 - 1);
          *v33 = v36;
          v33 -= 2;
          v34 -= 32;
          v35 -= 4;
        }
        while (v35);
        v14 = v32;
        if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_73:
          do
          {
            v37 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *--v27 = v37;
          }
          while (v14 != v13);
        }
        v13 = (char *)__p[1];
        __p[1] = v27;
        *(_QWORD *)&v66 = v29;
        *((_QWORD *)&v66 + 1) = v28;
        if (!v13)
          goto LABEL_38;
        goto LABEL_37;
      }
    }
    else
    {
      v26 = 0;
      v27 = (_QWORD *)(8 * v22);
      v28 = 0;
      *(_QWORD *)(8 * v22) = v20;
      v29 = 8 * v22 + 8;
      if (v13 != v14)
        goto LABEL_27;
    }
    __p[1] = v27;
    *(_QWORD *)&v66 = v29;
    *((_QWORD *)&v66 + 1) = v28;
    if (!v13)
    {
LABEL_38:
      *(_QWORD *)&v66 = v29;
      goto LABEL_39;
    }
LABEL_37:
    operator delete(v13);
    goto LABEL_38;
  }
  *(_QWORD *)v14 = v19;
  *(_QWORD *)&v66 = v14 + 8;
LABEL_39:
  v62((uint64_t)v61, (uint64_t)v18);
  v38 = MEMORY[0x1E0C809B0];
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 0x40000000;
  v58 = (uint64_t (*)(uint64_t, char *))___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_202;
  v59 = &__block_descriptor_tmp_203_0;
  v60 = v17;
  v39 = (const void **)__p[1];
  if (__p[1] == (void *)v66)
  {
    v40 = v48;
  }
  else
  {
    v40 = v48;
    while (*((_BYTE *)*v39 + 8) != 17)
    {
      if (++v39 == (const void **)v66)
        goto LABEL_48;
    }
  }
  if (v39 == (const void **)v66)
  {
LABEL_48:
    v42 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(__p, 17);
    v58((uint64_t)v57, v42);
  }
  else
  {
    if (!v41)
      __cxa_bad_cast();
    ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_202((uint64_t)v57, v41 + 3);
  }
  v52 = a1 + 192;
  v53 = QMIServiceMsg::create();
  v54 = 25000;
  v55 = 0;
  v56 = 0;
  v49[0] = v38;
  v49[1] = 1174405120;
  v49[2] = ___ZN4coex16QMICommandDriver26setScanFreqBandFilter_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2;
  v49[3] = &__block_descriptor_tmp_205_0;
  v49[4] = a1;
  v43 = *(void **)v40;
  if (*(_QWORD *)v40)
    v43 = _Block_copy(v43);
  v44 = *(NSObject **)(v40 + 8);
  v50 = v43;
  object = v44;
  if (v44)
    dispatch_retain(v44);
  *(_QWORD *)&aBlock = v38;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v70 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21SetScanFreqBandFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v71 = &unk_1E66DF7A0;
  v72 = v49;
  v45 = _Block_copy(&aBlock);
  v56 = v45;
  if (v53)
  {
    qmi::Client::send();
    v45 = v56;
  }
  if (v45)
    _Block_release(v45);
  if (object)
    dispatch_release(object);
  if (v50)
    _Block_release(v50);
  if (cf)
    CFRelease(cf);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
LABEL_64:
  if (v10)
    CFRelease(v10);
  return MEMORY[0x1B5E2EE44](v68);
}

void sub_1B3D64AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B3D64B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a32);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(v33 - 184);
  MEMORY[0x1B5E2EE44](v33 - 176);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::setWiFiStatus_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  unint64_t v5;
  void *__p;
  __int128 v7;
  CFTypeRef v8;

  v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x28uLL);
  v7 = xmmword_1B3DD0C60;
  strcpy((char *)__p, "Setting WiFi status is not supported");
  CreateError();
  operator delete(__p);
  v5 = 0xAAAAAAAAAAAAAAAALL;
  CFRetain((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  v4 = 0;
  coex::CommandDriver::Callback::operator()(a3, (const void **)&v5, &v4);
  CFRelease((CFTypeRef)0xAAAAAAAAAAAAAAAALL);
  if (v8)
    CFRelease(v8);
}

void sub_1B3D64C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setLAAConfig_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  __int128 v8;
  char *v9;
  char *v10;
  const void **v11;
  char *v12;
  _BYTE *v13;
  _WORD *v14;
  _WORD *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  char *v34;
  const void **v35;
  char *v36;
  _BYTE *v37;
  _WORD *v38;
  _WORD *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  const void **v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  char *v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  const void **v83;
  char *v84;
  _DWORD *v85;
  char *v86;
  char *v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE *v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  NSObject *v107;
  void *v108;
  const __CFDictionary *v110;
  _QWORD v111[5];
  void *v112;
  dispatch_object_t object;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  void *v118;
  void *__p[2];
  __int128 v120;
  _QWORD v121[2];
  __int128 aBlock;
  void (*v123)(uint64_t, QMIServiceMsg *);
  void *v124;
  _QWORD *v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v110 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v110;
    _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Setting LAA config with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v121[0] = 0xAAAAAAAAAAAAAAAALL;
  v121[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v121, *a2);
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v8;
  v120 = v8;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v9 = (char *)__p[1];
  v10 = (char *)v120;
  v11 = (const void **)__p[1];
  if (__p[1] != (void *)v120)
  {
    v11 = (const void **)__p[1];
    while (*((_BYTE *)*v11 + 8) != 1)
    {
      if (++v11 == (const void **)v120)
        goto LABEL_11;
    }
  }
  if (v11 == (const void **)v120)
  {
LABEL_11:
    v14 = operator new(0x10uLL);
    v15 = v14;
    v14[4] = 1;
    *(_QWORD *)v14 = off_1E66DF590;
    if ((unint64_t)v10 < *((_QWORD *)&v120 + 1))
    {
      *(_QWORD *)v10 = v14;
      v16 = (uint64_t)(v10 + 8);
LABEL_33:
      v13 = (char *)v15 + 9;
      *(_QWORD *)&v120 = v16;
      goto LABEL_34;
    }
    v17 = v10 - v9;
    v18 = (v10 - v9) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = *((_QWORD *)&v120 + 1) - (_QWORD)v9;
    if ((uint64_t)(*((_QWORD *)&v120 + 1) - (_QWORD)v9) >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v15;
      v16 = (uint64_t)(v23 + 1);
      if (v9 != v10)
      {
LABEL_22:
        if ((unint64_t)(v17 - 8) < 0x58)
          goto LABEL_154;
        if ((unint64_t)(v9 - v22) < 0x20)
          goto LABEL_154;
        v25 = ((unint64_t)(v17 - 8) >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = &v10[-v26];
        v23 = (_QWORD *)((char *)v23 - v26);
        v28 = &v22[8 * v18 - 16];
        v29 = v10 - 16;
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        v10 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_154:
          do
          {
            v32 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *--v23 = v32;
          }
          while (v10 != v9);
        }
        v9 = (char *)__p[1];
        __p[1] = v23;
        *(_QWORD *)&v120 = v16;
        *((_QWORD *)&v120 + 1) = v24;
        if (!v9)
          goto LABEL_33;
        goto LABEL_32;
      }
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      v24 = 0;
      *(_QWORD *)(8 * v18) = v15;
      v16 = 8 * v18 + 8;
      if (v9 != v10)
        goto LABEL_22;
    }
    __p[1] = v23;
    *(_QWORD *)&v120 = v16;
    *((_QWORD *)&v120 + 1) = v24;
    if (!v9)
      goto LABEL_33;
LABEL_32:
    operator delete(v9);
    goto LABEL_33;
  }
  if (!v12)
    __cxa_bad_cast();
  v13 = v12 + 9;
LABEL_34:
  *v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v121, (const __CFString *)*MEMORY[0x1E0DDF480]);
  v33 = (char *)__p[1];
  v34 = (char *)v120;
  v35 = (const void **)__p[1];
  if (__p[1] != (void *)v120)
  {
    v35 = (const void **)__p[1];
    while (*((_BYTE *)*v35 + 8) != 2)
    {
      if (++v35 == (const void **)v120)
        goto LABEL_42;
    }
  }
  if (v35 == (const void **)v120)
  {
LABEL_42:
    v38 = operator new(0x10uLL);
    v39 = v38;
    v38[4] = 2;
    *(_QWORD *)v38 = off_1E66DF5E0;
    if ((unint64_t)v34 < *((_QWORD *)&v120 + 1))
    {
      *(_QWORD *)v34 = v38;
      v40 = (uint64_t)(v34 + 8);
LABEL_64:
      v37 = (char *)v39 + 9;
      *(_QWORD *)&v120 = v40;
      goto LABEL_65;
    }
    v41 = v34 - v33;
    v42 = (v34 - v33) >> 3;
    v43 = v42 + 1;
    if ((unint64_t)(v42 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v44 = *((_QWORD *)&v120 + 1) - (_QWORD)v33;
    if ((uint64_t)(*((_QWORD *)&v120 + 1) - (_QWORD)v33) >> 2 > v43)
      v43 = v44 >> 2;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
      v45 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v45 = v43;
    if (v45)
    {
      if (v45 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v46 = operator new(8 * v45);
      v47 = &v46[8 * v42];
      v48 = &v46[8 * v45];
      *v47 = v39;
      v40 = (uint64_t)(v47 + 1);
      if (v33 != v34)
      {
LABEL_53:
        if ((unint64_t)(v41 - 8) < 0x58)
          goto LABEL_155;
        if ((unint64_t)(v33 - v46) < 0x20)
          goto LABEL_155;
        v49 = ((unint64_t)(v41 - 8) >> 3) + 1;
        v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
        v51 = &v34[-v50];
        v47 = (_QWORD *)((char *)v47 - v50);
        v52 = &v46[8 * v42 - 16];
        v53 = v34 - 16;
        v54 = v49 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v55 = *(_OWORD *)v53;
          *(v52 - 1) = *((_OWORD *)v53 - 1);
          *v52 = v55;
          v52 -= 2;
          v53 -= 32;
          v54 -= 4;
        }
        while (v54);
        v34 = v51;
        if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_155:
          do
          {
            v56 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *--v47 = v56;
          }
          while (v34 != v33);
        }
        v33 = (char *)__p[1];
        __p[1] = v47;
        *(_QWORD *)&v120 = v40;
        *((_QWORD *)&v120 + 1) = v48;
        if (!v33)
          goto LABEL_64;
        goto LABEL_63;
      }
    }
    else
    {
      v46 = 0;
      v47 = (_QWORD *)(8 * v42);
      v48 = 0;
      *(_QWORD *)(8 * v42) = v39;
      v40 = 8 * v42 + 8;
      if (v33 != v34)
        goto LABEL_53;
    }
    __p[1] = v47;
    *(_QWORD *)&v120 = v40;
    *((_QWORD *)&v120 + 1) = v48;
    if (!v33)
      goto LABEL_64;
LABEL_63:
    operator delete(v33);
    goto LABEL_64;
  }
  if (!v36)
    __cxa_bad_cast();
  v37 = v36 + 9;
LABEL_65:
  *v37 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v121, (const __CFString *)*MEMORY[0x1E0DDF4D8]);
  v57 = (char *)__p[1];
  v58 = (char *)v120;
  v59 = (const void **)__p[1];
  if (__p[1] != (void *)v120)
  {
    v59 = (const void **)__p[1];
    while (*((_BYTE *)*v59 + 8) != 3)
    {
      if (++v59 == (const void **)v120)
        goto LABEL_73;
    }
  }
  if (v59 == (const void **)v120)
  {
LABEL_73:
    v62 = (char *)operator new(0x10uLL);
    v63 = v62;
    v62[8] = 3;
    *(_QWORD *)v62 = off_1E66DF630;
    *((_DWORD *)v62 + 3) = 0;
    v61 = v62 + 12;
    if ((unint64_t)v58 < *((_QWORD *)&v120 + 1))
    {
      *(_QWORD *)v58 = v62;
      *(_QWORD *)&v120 = v58 + 8;
      goto LABEL_96;
    }
    v64 = v58 - v57;
    v65 = (v58 - v57) >> 3;
    v66 = v65 + 1;
    if ((unint64_t)(v65 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v67 = *((_QWORD *)&v120 + 1) - (_QWORD)v57;
    if ((uint64_t)(*((_QWORD *)&v120 + 1) - (_QWORD)v57) >> 2 > v66)
      v66 = v67 >> 2;
    if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
      v68 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v68 = v66;
    if (v68)
    {
      if (v68 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v69 = operator new(8 * v68);
      v70 = &v69[8 * v65];
      v71 = &v69[8 * v68];
      *v70 = v63;
      v72 = (uint64_t)(v70 + 1);
      if (v57 != v58)
      {
LABEL_84:
        if ((unint64_t)(v64 - 8) < 0x58)
          goto LABEL_156;
        if ((unint64_t)(v57 - v69) < 0x20)
          goto LABEL_156;
        v73 = ((unint64_t)(v64 - 8) >> 3) + 1;
        v74 = 8 * (v73 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v58[-v74];
        v70 = (_QWORD *)((char *)v70 - v74);
        v76 = &v69[8 * v65 - 16];
        v77 = v58 - 16;
        v78 = v73 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v79 = *(_OWORD *)v77;
          *(v76 - 1) = *((_OWORD *)v77 - 1);
          *v76 = v79;
          v76 -= 2;
          v77 -= 32;
          v78 -= 4;
        }
        while (v78);
        v58 = v75;
        if (v73 != (v73 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_156:
          do
          {
            v80 = *((_QWORD *)v58 - 1);
            v58 -= 8;
            *--v70 = v80;
          }
          while (v58 != v57);
        }
        v57 = (char *)__p[1];
        __p[1] = v70;
        *(_QWORD *)&v120 = v72;
        *((_QWORD *)&v120 + 1) = v71;
        if (!v57)
          goto LABEL_95;
        goto LABEL_94;
      }
    }
    else
    {
      v69 = 0;
      v70 = (_QWORD *)(8 * v65);
      v71 = 0;
      *(_QWORD *)(8 * v65) = v63;
      v72 = 8 * v65 + 8;
      if (v57 != v58)
        goto LABEL_84;
    }
    __p[1] = v70;
    *(_QWORD *)&v120 = v72;
    *((_QWORD *)&v120 + 1) = v71;
    if (!v57)
    {
LABEL_95:
      *(_QWORD *)&v120 = v72;
      goto LABEL_96;
    }
LABEL_94:
    operator delete(v57);
    goto LABEL_95;
  }
  if (!v60)
    __cxa_bad_cast();
  v61 = v60 + 12;
LABEL_96:
  *v61 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v121, (const __CFString *)*MEMORY[0x1E0DDF448]);
  v81 = (char *)__p[1];
  v82 = (char *)v120;
  v83 = (const void **)__p[1];
  if (__p[1] != (void *)v120)
  {
    v83 = (const void **)__p[1];
    while (*((_BYTE *)*v83 + 8) != 4)
    {
      if (++v83 == (const void **)v120)
        goto LABEL_104;
    }
  }
  if (v83 == (const void **)v120)
  {
LABEL_104:
    v86 = (char *)operator new(0x10uLL);
    v87 = v86;
    v86[8] = 4;
    *(_QWORD *)v86 = off_1E66DF680;
    *((_DWORD *)v86 + 3) = 0;
    v85 = v86 + 12;
    if ((unint64_t)v82 < *((_QWORD *)&v120 + 1))
    {
      *(_QWORD *)v82 = v86;
      *(_QWORD *)&v120 = v82 + 8;
      goto LABEL_127;
    }
    v88 = v82 - v81;
    v89 = (v82 - v81) >> 3;
    v90 = v89 + 1;
    if ((unint64_t)(v89 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v91 = *((_QWORD *)&v120 + 1) - (_QWORD)v81;
    if ((uint64_t)(*((_QWORD *)&v120 + 1) - (_QWORD)v81) >> 2 > v90)
      v90 = v91 >> 2;
    if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
      v92 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v92 = v90;
    if (v92)
    {
      if (v92 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v93 = operator new(8 * v92);
      v94 = &v93[8 * v89];
      v95 = &v93[8 * v92];
      *v94 = v87;
      v96 = (uint64_t)(v94 + 1);
      if (v81 != v82)
      {
LABEL_115:
        if ((unint64_t)(v88 - 8) < 0x58)
          goto LABEL_157;
        if ((unint64_t)(v81 - v93) < 0x20)
          goto LABEL_157;
        v97 = ((unint64_t)(v88 - 8) >> 3) + 1;
        v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
        v99 = &v82[-v98];
        v94 = (_QWORD *)((char *)v94 - v98);
        v100 = &v93[8 * v89 - 16];
        v101 = v82 - 16;
        v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v103 = *(_OWORD *)v101;
          *(v100 - 1) = *((_OWORD *)v101 - 1);
          *v100 = v103;
          v100 -= 2;
          v101 -= 32;
          v102 -= 4;
        }
        while (v102);
        v82 = v99;
        if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_157:
          do
          {
            v104 = *((_QWORD *)v82 - 1);
            v82 -= 8;
            *--v94 = v104;
          }
          while (v82 != v81);
        }
        v81 = (char *)__p[1];
        __p[1] = v94;
        *(_QWORD *)&v120 = v96;
        *((_QWORD *)&v120 + 1) = v95;
        if (!v81)
          goto LABEL_126;
        goto LABEL_125;
      }
    }
    else
    {
      v93 = 0;
      v94 = (_QWORD *)(8 * v89);
      v95 = 0;
      *(_QWORD *)(8 * v89) = v87;
      v96 = 8 * v89 + 8;
      if (v81 != v82)
        goto LABEL_115;
    }
    __p[1] = v94;
    *(_QWORD *)&v120 = v96;
    *((_QWORD *)&v120 + 1) = v95;
    if (!v81)
    {
LABEL_126:
      *(_QWORD *)&v120 = v96;
      goto LABEL_127;
    }
LABEL_125:
    operator delete(v81);
    goto LABEL_126;
  }
  if (!v84)
    __cxa_bad_cast();
  v85 = v84 + 12;
LABEL_127:
  *v85 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v121, (const __CFString *)*MEMORY[0x1E0DDF558]);
  v114 = a1 + 192;
  v115 = QMIServiceMsg::create();
  v116 = 25000;
  v117 = 0;
  v118 = 0;
  v105 = MEMORY[0x1E0C809B0];
  v111[0] = MEMORY[0x1E0C809B0];
  v111[1] = 1174405120;
  v111[2] = ___ZN4coex16QMICommandDriver17setLAAConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke;
  v111[3] = &__block_descriptor_tmp_195_0;
  v111[4] = a1;
  v106 = *(void **)a4;
  if (*(_QWORD *)a4)
    v106 = _Block_copy(v106);
  v107 = *(NSObject **)(a4 + 8);
  v112 = v106;
  object = v107;
  if (v107)
    dispatch_retain(v107);
  *(_QWORD *)&aBlock = v105;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v123 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm15SetLaaParamsReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v124 = &unk_1E66DF6B0;
  v125 = v111;
  v108 = _Block_copy(&aBlock);
  v118 = v108;
  if (v115)
  {
    qmi::Client::send();
    v108 = v118;
  }
  if (v108)
    _Block_release(v108);
  if (object)
    dispatch_release(object);
  if (v112)
    _Block_release(v112);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1B5E2EE44](v121);
}

void sub_1B3D65678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setTimeShareConfig_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v5;
  __int128 v6;
  const void **v7;
  char *v8;
  char *v9;
  const void **v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  const void **v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  _OWORD *v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  const void **v39;
  char *v40;
  _WORD *v41;
  char *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  const void **v63;
  char *v64;
  _WORD *v65;
  char *v66;
  char *v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _BYTE *v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _OWORD *v80;
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  const void **v87;
  uint64_t v88;
  char *v89;
  _BYTE *v90;
  _WORD *v91;
  _WORD *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _BYTE *v99;
  _QWORD *v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  _OWORD *v105;
  char *v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  const __CFArray *v110;
  uint64_t (*v111)(uint64_t);
  CFIndex Count;
  CFIndex v113;
  const __CFString *v114;
  const void *ValueAtIndex;
  const void *v116;
  CFTypeID v117;
  uint64_t (*v118)(uint64_t);
  ctu::cf::map_adapter *v119;
  unsigned int Int;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  unint64_t *v124;
  _BYTE *v125;
  int64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _BYTE *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  _OWORD *v137;
  __int128 *v138;
  uint64_t v139;
  __int128 v140;
  unint64_t v141;
  char *v142;
  char *v143;
  const void **v144;
  char *v145;
  char *v146;
  _BYTE *v147;
  _BYTE *v148;
  int64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  _QWORD *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  const __CFDictionary *v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  _OWORD *v163;
  char *v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  char *v168;
  char *v169;
  size_t v170;
  unint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  char *v176;
  void **v177;
  char *v178;
  char *v179;
  size_t v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  void *v184;
  NSObject *v185;
  void *v186;
  uint64_t v189;
  __CFString *v190;
  _QWORD v191[5];
  void *v192;
  dispatch_object_t object;
  const void *v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  void *aBlock;
  CFArrayRef theArray;
  void *v200;
  unint64_t *v201;
  unint64_t *v202;
  void *__p[2];
  __int128 v204;
  _QWORD v205[2];
  uint8_t buf[16];
  void (*v207)(uint64_t, QMIServiceMsg *);
  void *v208;
  _QWORD *v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v159 = *a2;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v159;
    _os_log_debug_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEBUG, "#D Setting Time share config with: %@", buf, 0xCu);
  }
  v205[0] = 0xAAAAAAAAAAAAAAAALL;
  v205[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v205, *a2);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v6;
  v204 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v7 = (const void **)__p[1];
  if (__p[1] != (void *)v204)
  {
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v204)
        goto LABEL_10;
    }
  }
  if (v7 == (const void **)v204)
  {
LABEL_10:
    v9 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 1);
  }
  else
  {
    if (!v8)
      __cxa_bad_cast();
    v9 = v8 + 9;
  }
  *v9 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v205, (const __CFString *)*MEMORY[0x1E0DDF538]);
  v10 = (const void **)__p[1];
  if (__p[1] != (void *)v204)
  {
    while (*((_BYTE *)*v10 + 8) != 16)
    {
      if (++v10 == (const void **)v204)
        goto LABEL_18;
    }
  }
  if (v10 == (const void **)v204)
  {
LABEL_18:
    v12 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(__p, 16);
  }
  else
  {
    if (!v11)
      __cxa_bad_cast();
    v12 = v11 + 12;
  }
  *(_DWORD *)v12 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v205, (const __CFString *)*MEMORY[0x1E0DDF570]);
  v14 = (char *)__p[1];
  v13 = (char *)v204;
  v15 = (const void **)__p[1];
  v189 = a1;
  if (__p[1] != (void *)v204)
  {
    v15 = (const void **)__p[1];
    while (*((_BYTE *)*v15 + 8) != 18)
    {
      if (++v15 == (const void **)v204)
        goto LABEL_27;
    }
  }
  if (v15 == (const void **)v204)
  {
LABEL_27:
    v18 = (char *)operator new(0x18uLL);
    v19 = v18;
    v18[8] = 18;
    *(_QWORD *)v18 = off_1E66DF890;
    *((_QWORD *)v18 + 2) = 0;
    v17 = v18 + 16;
    if ((unint64_t)v13 < *((_QWORD *)&v204 + 1))
    {
      *(_QWORD *)v13 = v18;
      *(_QWORD *)&v204 = v13 + 8;
      goto LABEL_50;
    }
    v20 = v13 - v14;
    v21 = (v13 - v14) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v23 = *((_QWORD *)&v204 + 1) - (_QWORD)v14;
    if ((uint64_t)(*((_QWORD *)&v204 + 1) - (_QWORD)v14) >> 2 > v22)
      v22 = v23 >> 2;
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (v24)
    {
      if (v24 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(8 * v24);
      v26 = &v25[8 * v21];
      v27 = &v25[8 * v24];
      *v26 = v19;
      v28 = (uint64_t)(v26 + 1);
      if (v14 != v13)
      {
LABEL_38:
        if ((unint64_t)(v20 - 8) < 0x58)
          goto LABEL_275;
        if ((unint64_t)(v14 - v25) < 0x20)
          goto LABEL_275;
        v29 = ((unint64_t)(v20 - 8) >> 3) + 1;
        v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
        v31 = &v13[-v30];
        v26 = (_QWORD *)((char *)v26 - v30);
        v32 = &v25[8 * v21 - 16];
        v33 = v13 - 16;
        v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *v32 = v35;
          v32 -= 2;
          v33 -= 32;
          v34 -= 4;
        }
        while (v34);
        v13 = v31;
        if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_275:
          do
          {
            v36 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *--v26 = v36;
          }
          while (v13 != v14);
        }
        v14 = (char *)__p[1];
        __p[1] = v26;
        *(_QWORD *)&v204 = v28;
        *((_QWORD *)&v204 + 1) = v27;
        if (!v14)
          goto LABEL_49;
        goto LABEL_48;
      }
    }
    else
    {
      v25 = 0;
      v26 = (_QWORD *)(8 * v21);
      v27 = 0;
      *(_QWORD *)(8 * v21) = v19;
      v28 = 8 * v21 + 8;
      if (v14 != v13)
        goto LABEL_38;
    }
    __p[1] = v26;
    *(_QWORD *)&v204 = v28;
    *((_QWORD *)&v204 + 1) = v27;
    if (!v14)
    {
LABEL_49:
      *(_QWORD *)&v204 = v28;
      goto LABEL_50;
    }
LABEL_48:
    operator delete(v14);
    goto LABEL_49;
  }
  if (!v16)
    __cxa_bad_cast();
  v17 = v16 + 16;
LABEL_50:
  *v17 = (int)ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v205, (const __CFString *)*MEMORY[0x1E0DDF568]);
  v38 = (char *)__p[1];
  v37 = (char *)v204;
  v39 = (const void **)__p[1];
  if (__p[1] != (void *)v204)
  {
    v39 = (const void **)__p[1];
    while (*((_BYTE *)*v39 + 8) != 19)
    {
      if (++v39 == (const void **)v204)
        goto LABEL_58;
    }
  }
  if (v39 == (const void **)v204)
  {
LABEL_58:
    v42 = (char *)operator new(0x10uLL);
    v43 = v42;
    v42[8] = 19;
    *(_QWORD *)v42 = off_1E66DF8E0;
    *((_WORD *)v42 + 5) = 0;
    v41 = v42 + 10;
    if ((unint64_t)v37 < *((_QWORD *)&v204 + 1))
    {
      *(_QWORD *)v37 = v42;
      *(_QWORD *)&v204 = v37 + 8;
      goto LABEL_81;
    }
    v44 = v37 - v38;
    v45 = (v37 - v38) >> 3;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v47 = *((_QWORD *)&v204 + 1) - (_QWORD)v38;
    if ((uint64_t)(*((_QWORD *)&v204 + 1) - (_QWORD)v38) >> 2 > v46)
      v46 = v47 >> 2;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = operator new(8 * v48);
      v50 = &v49[8 * v45];
      v51 = &v49[8 * v48];
      *v50 = v43;
      v52 = (uint64_t)(v50 + 1);
      if (v38 != v37)
      {
LABEL_69:
        if ((unint64_t)(v44 - 8) < 0x58)
          goto LABEL_276;
        if ((unint64_t)(v38 - v49) < 0x20)
          goto LABEL_276;
        v53 = ((unint64_t)(v44 - 8) >> 3) + 1;
        v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
        v55 = &v37[-v54];
        v50 = (_QWORD *)((char *)v50 - v54);
        v56 = &v49[8 * v45 - 16];
        v57 = v37 - 16;
        v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 4;
        }
        while (v58);
        v37 = v55;
        if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_276:
          do
          {
            v60 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *--v50 = v60;
          }
          while (v37 != v38);
        }
        v38 = (char *)__p[1];
        __p[1] = v50;
        *(_QWORD *)&v204 = v52;
        *((_QWORD *)&v204 + 1) = v51;
        if (!v38)
          goto LABEL_80;
        goto LABEL_79;
      }
    }
    else
    {
      v49 = 0;
      v50 = (_QWORD *)(8 * v45);
      v51 = 0;
      *(_QWORD *)(8 * v45) = v43;
      v52 = 8 * v45 + 8;
      if (v38 != v37)
        goto LABEL_69;
    }
    __p[1] = v50;
    *(_QWORD *)&v204 = v52;
    *((_QWORD *)&v204 + 1) = v51;
    if (!v38)
    {
LABEL_80:
      *(_QWORD *)&v204 = v52;
      goto LABEL_81;
    }
LABEL_79:
    operator delete(v38);
    goto LABEL_80;
  }
  if (!v40)
    __cxa_bad_cast();
  v41 = v40 + 10;
LABEL_81:
  *v41 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v205, (const __CFString *)*MEMORY[0x1E0DDF650]);
  v62 = (char *)__p[1];
  v61 = (char *)v204;
  v63 = (const void **)__p[1];
  if (__p[1] != (void *)v204)
  {
    v63 = (const void **)__p[1];
    while (*((_BYTE *)*v63 + 8) != 20)
    {
      if (++v63 == (const void **)v204)
        goto LABEL_89;
    }
  }
  if (v63 == (const void **)v204)
  {
LABEL_89:
    v66 = (char *)operator new(0x10uLL);
    v67 = v66;
    v66[8] = 20;
    *(_QWORD *)v66 = off_1E66DF930;
    *((_WORD *)v66 + 5) = 0;
    v65 = v66 + 10;
    if ((unint64_t)v61 < *((_QWORD *)&v204 + 1))
    {
      *(_QWORD *)v61 = v66;
      *(_QWORD *)&v204 = v61 + 8;
      goto LABEL_112;
    }
    v68 = v61 - v62;
    v69 = (v61 - v62) >> 3;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v71 = *((_QWORD *)&v204 + 1) - (_QWORD)v62;
    if ((uint64_t)(*((_QWORD *)&v204 + 1) - (_QWORD)v62) >> 2 > v70)
      v70 = v71 >> 2;
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
      v72 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v72 = v70;
    if (v72)
    {
      if (v72 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v73 = operator new(8 * v72);
      v74 = &v73[8 * v69];
      v75 = &v73[8 * v72];
      *v74 = v67;
      v76 = (uint64_t)(v74 + 1);
      if (v62 != v61)
      {
LABEL_100:
        if ((unint64_t)(v68 - 8) < 0x58)
          goto LABEL_277;
        if ((unint64_t)(v62 - v73) < 0x20)
          goto LABEL_277;
        v77 = ((unint64_t)(v68 - 8) >> 3) + 1;
        v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        v79 = &v61[-v78];
        v74 = (_QWORD *)((char *)v74 - v78);
        v80 = &v73[8 * v69 - 16];
        v81 = v61 - 16;
        v82 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v83 = *(_OWORD *)v81;
          *(v80 - 1) = *((_OWORD *)v81 - 1);
          *v80 = v83;
          v80 -= 2;
          v81 -= 32;
          v82 -= 4;
        }
        while (v82);
        v61 = v79;
        if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_277:
          do
          {
            v84 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *--v74 = v84;
          }
          while (v61 != v62);
        }
        v62 = (char *)__p[1];
        __p[1] = v74;
        *(_QWORD *)&v204 = v76;
        *((_QWORD *)&v204 + 1) = v75;
        if (!v62)
          goto LABEL_111;
        goto LABEL_110;
      }
    }
    else
    {
      v73 = 0;
      v74 = (_QWORD *)(8 * v69);
      v75 = 0;
      *(_QWORD *)(8 * v69) = v67;
      v76 = 8 * v69 + 8;
      if (v62 != v61)
        goto LABEL_100;
    }
    __p[1] = v74;
    *(_QWORD *)&v204 = v76;
    *((_QWORD *)&v204 + 1) = v75;
    if (!v62)
    {
LABEL_111:
      *(_QWORD *)&v204 = v76;
      goto LABEL_112;
    }
LABEL_110:
    operator delete(v62);
    goto LABEL_111;
  }
  if (!v64)
    __cxa_bad_cast();
  v65 = v64 + 10;
LABEL_112:
  *v65 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v205, (const __CFString *)*MEMORY[0x1E0DDF670]);
  v86 = (char *)__p[1];
  v85 = (char *)v204;
  v87 = (const void **)__p[1];
  v88 = v189;
  if (__p[1] != (void *)v204)
  {
    v87 = (const void **)__p[1];
    while (*((_BYTE *)*v87 + 8) != 21)
    {
      if (++v87 == (const void **)v204)
        goto LABEL_120;
    }
  }
  if (v87 == (const void **)v204)
  {
LABEL_120:
    v91 = operator new(0x10uLL);
    v92 = v91;
    v91[4] = 21;
    *(_QWORD *)v91 = off_1E66DF980;
    if ((unint64_t)v85 < *((_QWORD *)&v204 + 1))
    {
      *(_QWORD *)v85 = v91;
      v93 = (uint64_t)(v85 + 8);
LABEL_142:
      v90 = (char *)v92 + 9;
      *(_QWORD *)&v204 = v93;
      goto LABEL_143;
    }
    v94 = v85 - v86;
    v95 = (v85 - v86) >> 3;
    v96 = v95 + 1;
    if ((unint64_t)(v95 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v97 = *((_QWORD *)&v204 + 1) - (_QWORD)v86;
    if ((uint64_t)(*((_QWORD *)&v204 + 1) - (_QWORD)v86) >> 2 > v96)
      v96 = v97 >> 2;
    if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8)
      v98 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v98 = v96;
    if (v98)
    {
      if (v98 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v99 = operator new(8 * v98);
      v100 = &v99[8 * v95];
      v101 = &v99[8 * v98];
      *v100 = v92;
      v93 = (uint64_t)(v100 + 1);
      if (v86 != v85)
      {
LABEL_131:
        if ((unint64_t)(v94 - 8) < 0x58)
          goto LABEL_278;
        if ((unint64_t)(v86 - v99) < 0x20)
          goto LABEL_278;
        v102 = ((unint64_t)(v94 - 8) >> 3) + 1;
        v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
        v104 = &v85[-v103];
        v100 = (_QWORD *)((char *)v100 - v103);
        v105 = &v99[8 * v95 - 16];
        v106 = v85 - 16;
        v107 = v102 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v108 = *(_OWORD *)v106;
          *(v105 - 1) = *((_OWORD *)v106 - 1);
          *v105 = v108;
          v105 -= 2;
          v106 -= 32;
          v107 -= 4;
        }
        while (v107);
        v85 = v104;
        if (v102 != (v102 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_278:
          do
          {
            v109 = *((_QWORD *)v85 - 1);
            v85 -= 8;
            *--v100 = v109;
          }
          while (v85 != v86);
        }
        v86 = (char *)__p[1];
        __p[1] = v100;
        *(_QWORD *)&v204 = v93;
        *((_QWORD *)&v204 + 1) = v101;
        if (!v86)
          goto LABEL_142;
        goto LABEL_141;
      }
    }
    else
    {
      v99 = 0;
      v100 = (_QWORD *)(8 * v95);
      v101 = 0;
      *(_QWORD *)(8 * v95) = v92;
      v93 = 8 * v95 + 8;
      if (v86 != v85)
        goto LABEL_131;
    }
    __p[1] = v100;
    *(_QWORD *)&v204 = v93;
    *((_QWORD *)&v204 + 1) = v101;
    if (!v86)
      goto LABEL_142;
LABEL_141:
    operator delete(v86);
    goto LABEL_142;
  }
  if (!v89)
    __cxa_bad_cast();
  v90 = v89 + 9;
LABEL_143:
  *v90 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v205, (const __CFString *)*MEMORY[0x1E0DDF6C0]);
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v110 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v205, (const __CFString *)*MEMORY[0x1E0DDF6D8]);
  theArray = v110;
  v111 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v110)
    v111 = 0;
  if (v111)
  {
    Count = CFArrayGetCount(v110);
    if (Count >= 1)
    {
      v113 = 0;
      v190 = (__CFString *)*MEMORY[0x1E0DDF388];
      v114 = (const __CFString *)*MEMORY[0x1E0DDF268];
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, v113);
        v116 = ValueAtIndex;
        if (!ValueAtIndex)
          break;
        v117 = CFGetTypeID(ValueAtIndex);
        if (v117 != CFDictionaryGetTypeID())
          break;
        v194 = v116;
        CFRetain(v116);
        v118 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        if (!v116)
          v118 = 0;
        if (!v118)
          goto LABEL_157;
        memset(buf, 170, sizeof(buf));
        v119 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v116);
        Int = ctu::cf::map_adapter::getInt(v119, v190);
        v121 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, v114);
        v122 = v121;
        v123 = v201;
        if (v201 >= v202)
        {
          v125 = v200;
          v126 = (char *)v201 - (_BYTE *)v200;
          v127 = ((char *)v201 - (_BYTE *)v200) >> 3;
          v128 = v127 + 1;
          if ((unint64_t)(v127 + 1) >> 61)
            std::vector<std::string>::__throw_length_error[abi:ne180100]();
          v129 = (char *)v202 - (_BYTE *)v200;
          if (((char *)v202 - (_BYTE *)v200) >> 2 > v128)
            v128 = v129 >> 2;
          if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8)
            v130 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v130 = v128;
          if (v130)
          {
            if (v130 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v131 = operator new(8 * v130);
          }
          else
          {
            v131 = 0;
          }
          v132 = (unint64_t *)&v131[8 * v127];
          *v132 = Int | (unint64_t)(v122 << 32);
          v124 = v132 + 1;
          if (v123 != v125)
          {
            v133 = v123 - v125 - 8;
            if (v133 < 0x58)
              goto LABEL_279;
            if ((unint64_t)(v123 - v131 - v126) < 0x20)
              goto LABEL_279;
            v134 = (v133 >> 3) + 1;
            v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
            v136 = &v123[-v135];
            v132 = (unint64_t *)((char *)v132 - v135);
            v137 = &v131[8 * v127 - 16];
            v138 = (__int128 *)(v123 - 16);
            v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v140 = *v138;
              *(v137 - 1) = *(v138 - 1);
              *v137 = v140;
              v137 -= 2;
              v138 -= 2;
              v139 -= 4;
            }
            while (v139);
            v123 = v136;
            if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_279:
              do
              {
                v141 = *((_QWORD *)v123 - 1);
                v123 -= 8;
                *--v132 = v141;
              }
              while (v123 != v125);
            }
            v123 = v200;
          }
          v200 = v132;
          v201 = v124;
          v202 = (unint64_t *)&v131[8 * v130];
          if (v123)
            operator delete(v123);
        }
        else
        {
          *v201 = Int | (unint64_t)(v121 << 32);
          v124 = (unint64_t *)(v123 + 8);
        }
        v201 = v124;
        MEMORY[0x1B5E2EE44](buf);
        v116 = v194;
        if (!v194)
          goto LABEL_148;
LABEL_180:
        CFRelease(v116);
LABEL_148:
        if (++v113 == Count)
          goto LABEL_181;
      }
      v116 = 0;
      v194 = 0;
LABEL_157:
      if (!v116)
        goto LABEL_148;
      goto LABEL_180;
    }
LABEL_181:
    v143 = (char *)__p[1];
    v142 = (char *)v204;
    v144 = (const void **)__p[1];
    v88 = v189;
    if (__p[1] != (void *)v204)
    {
      v144 = (const void **)__p[1];
      while (*((_BYTE *)*v144 + 8) != 17)
      {
        if (++v144 == (const void **)v204)
          goto LABEL_190;
      }
    }
    if (v144 != (const void **)v204)
    {
      if (!v145)
        __cxa_bad_cast();
      v146 = v145 + 16;
      if (v145 + 16 == (char *)&v200)
        goto LABEL_234;
LABEL_214:
      v169 = (char *)v200;
      v168 = (char *)v201;
      v170 = (char *)v201 - (_BYTE *)v200;
      v171 = ((char *)v201 - (_BYTE *)v200) >> 3;
      v172 = *((_QWORD *)v146 + 2);
      v173 = *(char **)v146;
      if (v171 <= (v172 - *(_QWORD *)v146) >> 3)
      {
        v179 = (char *)*((_QWORD *)v146 + 1);
        v177 = (void **)(v146 + 8);
        v178 = v179;
        v180 = v179 - v173;
        v181 = (v179 - v173) >> 3;
        if (v181 >= v171)
        {
          if (v201 != v200)
            memmove(v173, v200, (char *)v201 - (_BYTE *)v200);
          goto LABEL_233;
        }
        v182 = (char *)v200 + 8 * v181;
        if (v178 != v173)
        {
          memmove(v173, v200, v180);
          v173 = (char *)*v177;
        }
        v170 = v168 - v182;
        if (v168 != v182)
          memmove(v173, v182, v168 - v182);
      }
      else
      {
        if (v173)
        {
          *((_QWORD *)v146 + 1) = v173;
          operator delete(v173);
          v172 = 0;
          *(_QWORD *)v146 = 0;
          *((_QWORD *)v146 + 1) = 0;
          *((_QWORD *)v146 + 2) = 0;
        }
        if ((v170 & 0x8000000000000000) != 0)
          goto LABEL_255;
        v174 = v172 >> 2;
        if (v172 >> 2 <= v171)
          v174 = v171;
        v175 = (unint64_t)v172 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v174;
        if (v175 >> 61)
LABEL_255:
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v176 = (char *)operator new(8 * v175);
        v173 = v176;
        *(_QWORD *)v146 = v176;
        *((_QWORD *)v146 + 1) = v176;
        *((_QWORD *)v146 + 2) = &v176[8 * v175];
        if (v168 != v169)
          memcpy(v176, v169, v170);
        v177 = (void **)(v146 + 8);
      }
      v88 = v189;
LABEL_233:
      *v177 = &v173[v170];
      goto LABEL_234;
    }
LABEL_190:
    v147 = operator new(0x28uLL);
    v148 = v147;
    v147[8] = 17;
    *(_QWORD *)v147 = &off_1E66DF9D0;
    *((_QWORD *)v147 + 2) = 0;
    v146 = v147 + 16;
    *((_QWORD *)v147 + 3) = 0;
    *((_QWORD *)v147 + 4) = 0;
    if ((unint64_t)v142 < *((_QWORD *)&v204 + 1))
    {
      *(_QWORD *)v142 = v147;
      v88 = v189;
      *(_QWORD *)&v204 = v142 + 8;
      goto LABEL_214;
    }
    v149 = v142 - v143;
    v150 = (v142 - v143) >> 3;
    v151 = v150 + 1;
    if ((unint64_t)(v150 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v152 = *((_QWORD *)&v204 + 1) - (_QWORD)v143;
    if ((uint64_t)(*((_QWORD *)&v204 + 1) - (_QWORD)v143) >> 2 > v151)
      v151 = v152 >> 2;
    if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
      v153 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v153 = v151;
    if (v153)
    {
      if (v153 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v154 = operator new(8 * v153);
      v155 = &v154[8 * v150];
      v156 = &v154[8 * v153];
      *v155 = v148;
      v157 = (uint64_t)(v155 + 1);
      if (v143 != v142)
      {
LABEL_201:
        v158 = v149 - 8;
        if ((unint64_t)(v149 - 8) >= 0x58)
        {
          v88 = v189;
          if ((unint64_t)(v143 - v154) >= 0x20)
          {
            v160 = (v158 >> 3) + 1;
            v161 = 8 * (v160 & 0x3FFFFFFFFFFFFFFCLL);
            v162 = &v142[-v161];
            v155 = (_QWORD *)((char *)v155 - v161);
            v163 = &v154[8 * v150 - 16];
            v164 = v142 - 16;
            v165 = v160 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v166 = *(_OWORD *)v164;
              *(v163 - 1) = *((_OWORD *)v164 - 1);
              *v163 = v166;
              v163 -= 2;
              v164 -= 32;
              v165 -= 4;
            }
            while (v165);
            v142 = v162;
            if (v160 == (v160 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_211:
              v143 = (char *)__p[1];
              __p[1] = v155;
              *(_QWORD *)&v204 = v157;
              *((_QWORD *)&v204 + 1) = v156;
              if (!v143)
              {
LABEL_213:
                *(_QWORD *)&v204 = v157;
                goto LABEL_214;
              }
LABEL_212:
              operator delete(v143);
              goto LABEL_213;
            }
          }
        }
        else
        {
          v88 = v189;
        }
        do
        {
          v167 = *((_QWORD *)v142 - 1);
          v142 -= 8;
          *--v155 = v167;
        }
        while (v142 != v143);
        goto LABEL_211;
      }
    }
    else
    {
      v154 = 0;
      v155 = (_QWORD *)(8 * v150);
      v156 = 0;
      *(_QWORD *)(8 * v150) = v148;
      v157 = 8 * v150 + 8;
      if (v143 != v142)
        goto LABEL_201;
    }
    v88 = v189;
    __p[1] = v155;
    *(_QWORD *)&v204 = v157;
    *((_QWORD *)&v204 + 1) = v156;
    if (!v143)
      goto LABEL_213;
    goto LABEL_212;
  }
LABEL_234:
  v194 = (const void *)(v88 + 192);
  v195 = QMIServiceMsg::create();
  v196 = 25000;
  v197 = 0;
  aBlock = 0;
  v183 = MEMORY[0x1E0C809B0];
  v191[0] = MEMORY[0x1E0C809B0];
  v191[1] = 1174405120;
  v191[2] = ___ZN4coex16QMICommandDriver23setTimeShareConfig_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v191[3] = &__block_descriptor_tmp_210_0;
  v191[4] = v88;
  v184 = *(void **)a3;
  if (*(_QWORD *)a3)
    v184 = _Block_copy(v184);
  v185 = *(NSObject **)(a3 + 8);
  v192 = v184;
  object = v185;
  if (v185)
    dispatch_retain(v185);
  *(_QWORD *)buf = v183;
  *(_QWORD *)&buf[8] = 0x40000000;
  v207 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm18ConfigTimeShareReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v208 = &unk_1E66DFA00;
  v209 = v191;
  v186 = _Block_copy(buf);
  aBlock = v186;
  if (v195)
  {
    qmi::Client::send();
    v186 = aBlock;
  }
  if (v186)
    _Block_release(v186);
  if (object)
    dispatch_release(object);
  if (v192)
    _Block_release(v192);
  if (theArray)
    CFRelease(theArray);
  if (v200)
  {
    v201 = (unint64_t *)v200;
    operator delete(v200);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1B5E2EE44](v205);
}

void sub_1B3D667E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setWCI2TxAntMap_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v5;
  __int128 v6;
  const void **v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  const void **v12;
  char *v13;
  _BYTE *v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  const __CFArray *v34;
  uint64_t (*v35)(uint64_t);
  char *v36;
  char *v37;
  const void **v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  char *v42;
  int64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  _OWORD *v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  CFIndex Count;
  CFIndex v61;
  const void *ValueAtIndex;
  const void *v63;
  CFTypeID v64;
  uint64_t (*v65)(uint64_t);
  ctu::cf::map_adapter *v66;
  char Int;
  char v68;
  unint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  _BYTE *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  size_t v76;
  _BYTE *v77;
  char *v78;
  unint64_t v79;
  _OWORD *v80;
  __int128 *v81;
  unint64_t v82;
  __int128 v83;
  _QWORD *v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char v89;
  const __CFString *v90;
  char *v91;
  char *v92;
  const void **v93;
  char *v94;
  _BYTE *v95;
  _WORD *v96;
  _WORD *v97;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  _QWORD *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  NSObject *v117;
  void *v118;
  const __CFDictionary *v120;
  CFDictionaryRef *v121;
  uint64_t v122;
  __CFString *v124;
  _QWORD v125[5];
  void *v126;
  dispatch_object_t object;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  void *v132;
  CFArrayRef theArray;
  void *__p[2];
  __int128 v135;
  _QWORD v136[2];
  __int128 aBlock;
  void (*v138)(uint64_t, QMIServiceMsg *);
  void *v139;
  _QWORD *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v120 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v120;
    _os_log_debug_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEBUG, "#D Setting Tx antenna map with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v122 = a1;
  v136[0] = 0xAAAAAAAAAAAAAAAALL;
  v136[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v136, *a2);
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v6;
  v135 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v7 = (const void **)__p[1];
  if (__p[1] != (void *)v135)
  {
    while (*((_BYTE *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v135)
        goto LABEL_10;
    }
  }
  if (v7 == (const void **)v135)
  {
LABEL_10:
    v9 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 1);
  }
  else
  {
    if (!v8)
      __cxa_bad_cast();
    v9 = v8 + 9;
  }
  *v9 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v136, (const __CFString *)*MEMORY[0x1E0DDF460]);
  v11 = (char *)__p[1];
  v10 = (char *)v135;
  v12 = (const void **)__p[1];
  v121 = a2;
  if (__p[1] != (void *)v135)
  {
    v12 = (const void **)__p[1];
    while (*((_BYTE *)*v12 + 8) != 17)
    {
      if (++v12 == (const void **)v135)
        goto LABEL_19;
    }
  }
  if (v12 == (const void **)v135)
  {
LABEL_19:
    v15 = operator new(0x10uLL);
    v16 = v15;
    v15[4] = 17;
    *(_QWORD *)v15 = off_1E66DFA48;
    if ((unint64_t)v10 < *((_QWORD *)&v135 + 1))
    {
      *(_QWORD *)v10 = v15;
      v17 = (uint64_t)(v10 + 8);
LABEL_41:
      v14 = (char *)v16 + 9;
      *(_QWORD *)&v135 = v17;
      goto LABEL_42;
    }
    v18 = v10 - v11;
    v19 = (v10 - v11) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v135 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v135 + 1) - (_QWORD)v11) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v16;
      v17 = (uint64_t)(v24 + 1);
      if (v11 != v10)
      {
LABEL_30:
        if ((unint64_t)(v18 - 8) < 0x58)
          goto LABEL_181;
        if ((unint64_t)(v11 - v23) < 0x20)
          goto LABEL_181;
        v26 = ((unint64_t)(v18 - 8) >> 3) + 1;
        v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
        v28 = &v10[-v27];
        v24 = (_QWORD *)((char *)v24 - v27);
        v29 = &v23[8 * v19 - 16];
        v30 = v10 - 16;
        v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v32 = *(_OWORD *)v30;
          *(v29 - 1) = *((_OWORD *)v30 - 1);
          *v29 = v32;
          v29 -= 2;
          v30 -= 32;
          v31 -= 4;
        }
        while (v31);
        v10 = v28;
        if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_181:
          do
          {
            v33 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *--v24 = v33;
          }
          while (v10 != v11);
        }
        v11 = (char *)__p[1];
        __p[1] = v24;
        *(_QWORD *)&v135 = v17;
        *((_QWORD *)&v135 + 1) = v25;
        if (!v11)
          goto LABEL_41;
        goto LABEL_40;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v16;
      v17 = 8 * v19 + 8;
      if (v11 != v10)
        goto LABEL_30;
    }
    __p[1] = v24;
    *(_QWORD *)&v135 = v17;
    *((_QWORD *)&v135 + 1) = v25;
    if (!v11)
      goto LABEL_41;
LABEL_40:
    operator delete(v11);
    goto LABEL_41;
  }
  if (!v13)
    __cxa_bad_cast();
  v14 = v13 + 9;
LABEL_42:
  *v14 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v136, (const __CFString *)*MEMORY[0x1E0DDF548]);
  v34 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v136, (const __CFString *)*MEMORY[0x1E0DDF630]);
  theArray = v34;
  v35 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v34)
    v35 = 0;
  if (!v35)
    goto LABEL_120;
  v37 = (char *)__p[1];
  v36 = (char *)v135;
  v38 = (const void **)__p[1];
  if (__p[1] != (void *)v135)
  {
    v38 = (const void **)__p[1];
    while (*((_BYTE *)*v38 + 8) != 16)
    {
      if (++v38 == (const void **)v135)
        goto LABEL_53;
    }
  }
  if (v38 == (const void **)v135)
  {
LABEL_53:
    v41 = (char *)operator new(0x28uLL);
    v42 = v41;
    v41[8] = 16;
    *(_QWORD *)v41 = &off_1E66DFA98;
    *((_QWORD *)v41 + 2) = 0;
    v40 = v41 + 16;
    *((_QWORD *)v41 + 3) = 0;
    *((_QWORD *)v41 + 4) = 0;
    if ((unint64_t)v36 < *((_QWORD *)&v135 + 1))
    {
      *(_QWORD *)v36 = v41;
      *(_QWORD *)&v135 = v36 + 8;
      goto LABEL_76;
    }
    v43 = v36 - v37;
    v44 = (v36 - v37) >> 3;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v46 = *((_QWORD *)&v135 + 1) - (_QWORD)v37;
    if ((uint64_t)(*((_QWORD *)&v135 + 1) - (_QWORD)v37) >> 2 > v45)
      v45 = v46 >> 2;
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
      v47 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v47 = v45;
    if (v47)
    {
      if (v47 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v48 = operator new(8 * v47);
      v49 = &v48[8 * v44];
      v50 = &v48[8 * v47];
      *v49 = v42;
      v51 = (uint64_t)(v49 + 1);
      if (v37 != v36)
      {
LABEL_64:
        if ((unint64_t)(v43 - 8) < 0x58)
          goto LABEL_182;
        if ((unint64_t)(v37 - v48) < 0x20)
          goto LABEL_182;
        v52 = ((unint64_t)(v43 - 8) >> 3) + 1;
        v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
        v54 = &v36[-v53];
        v49 = (_QWORD *)((char *)v49 - v53);
        v55 = &v48[8 * v44 - 16];
        v56 = v36 - 16;
        v57 = v52 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v58 = *(_OWORD *)v56;
          *(v55 - 1) = *((_OWORD *)v56 - 1);
          *v55 = v58;
          v55 -= 2;
          v56 -= 32;
          v57 -= 4;
        }
        while (v57);
        v36 = v54;
        if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_182:
          do
          {
            v59 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *--v49 = v59;
          }
          while (v36 != v37);
        }
        v37 = (char *)__p[1];
        __p[1] = v49;
        *(_QWORD *)&v135 = v51;
        *((_QWORD *)&v135 + 1) = v50;
        if (!v37)
          goto LABEL_75;
        goto LABEL_74;
      }
    }
    else
    {
      v48 = 0;
      v49 = (_QWORD *)(8 * v44);
      v50 = 0;
      *(_QWORD *)(8 * v44) = v42;
      v51 = 8 * v44 + 8;
      if (v37 != v36)
        goto LABEL_64;
    }
    __p[1] = v49;
    *(_QWORD *)&v135 = v51;
    *((_QWORD *)&v135 + 1) = v50;
    if (!v37)
    {
LABEL_75:
      *(_QWORD *)&v135 = v51;
      goto LABEL_76;
    }
LABEL_74:
    operator delete(v37);
    goto LABEL_75;
  }
  if (!v39)
    __cxa_bad_cast();
  v40 = v39 + 16;
LABEL_76:
  Count = CFArrayGetCount(v34);
  if (Count >= 1)
  {
    v61 = 0;
    v124 = (__CFString *)*MEMORY[0x1E0DDF628];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v61);
      v63 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v64 = CFGetTypeID(ValueAtIndex);
        if (v64 != CFDictionaryGetTypeID())
        {
          v63 = 0;
LABEL_88:
          if (!v63)
            goto LABEL_78;
LABEL_106:
          CFRelease(v63);
          goto LABEL_78;
        }
        CFRetain(v63);
      }
      v65 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!v63)
        v65 = 0;
      if (!v65)
        goto LABEL_88;
      *(_QWORD *)&aBlock = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&aBlock + 1) = 0xAAAAAAAAAAAAAAAALL;
      v66 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&aBlock, (const __CFDictionary *)v63);
      Int = ctu::cf::map_adapter::getInt(v66, v124);
      v68 = Int;
      v70 = (_BYTE *)v40[1];
      v69 = v40[2];
      if ((unint64_t)v70 < v69)
      {
        *v70 = Int;
        v71 = (uint64_t)(v70 + 1);
        goto LABEL_105;
      }
      v72 = (_BYTE *)*v40;
      v73 = (unint64_t)&v70[-*v40];
      v74 = v73 + 1;
      if ((uint64_t)(v73 + 1) < 0)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      v75 = v69 - (_QWORD)v72;
      if (2 * v75 > v74)
        v74 = 2 * v75;
      if (v75 >= 0x3FFFFFFFFFFFFFFFLL)
        v76 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v76 = v74;
      if (v76)
      {
        v77 = operator new(v76);
        v78 = &v77[v73];
        v77[v73] = v68;
        v71 = (uint64_t)&v77[v73 + 1];
        if (v70 == v72)
          goto LABEL_103;
      }
      else
      {
        v77 = 0;
        v78 = &v70[-*v40];
        *(_BYTE *)v73 = v68;
        v71 = v73 + 1;
        if (v70 == v72)
        {
LABEL_103:
          *v40 = v78;
          v40[1] = v71;
          v40[2] = &v77[v76];
          if (!v70)
            goto LABEL_105;
LABEL_104:
          operator delete(v70);
          goto LABEL_105;
        }
      }
      if (v73 < 8 || (unint64_t)(v72 - v77) < 0x20)
        goto LABEL_116;
      if (v73 >= 0x20)
      {
        v79 = v73 & 0xFFFFFFFFFFFFFFE0;
        v80 = &v77[v73 - 16];
        v81 = (__int128 *)(v70 - 16);
        v82 = v73 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v83 = *v81;
          *(v80 - 1) = *(v81 - 1);
          *v80 = v83;
          v80 -= 2;
          v81 -= 2;
          v82 -= 32;
        }
        while (v82);
        if (v73 == v79)
          goto LABEL_118;
        if ((v73 & 0x18) == 0)
        {
          v78 -= v79;
          v70 -= v79;
LABEL_116:
          v88 = v78 - 1;
          do
          {
            v89 = *--v70;
            *v88-- = v89;
          }
          while (v70 != v72);
          goto LABEL_118;
        }
      }
      else
      {
        v79 = 0;
      }
      v78 -= v73 & 0xFFFFFFFFFFFFFFF8;
      v84 = &v77[&v70[-v79] - v72 - 8];
      v85 = (uint64_t *)&v70[-v79 - 8];
      v86 = v79 - (v73 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v87 = *v85--;
        *v84-- = v87;
        v86 += 8;
      }
      while (v86);
      v70 -= v73 & 0xFFFFFFFFFFFFFFF8;
      if (v73 != (v73 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_116;
LABEL_118:
      v70 = (_BYTE *)*v40;
      *v40 = v77;
      v40[1] = v71;
      v40[2] = &v77[v76];
      if (v70)
        goto LABEL_104;
LABEL_105:
      v40[1] = v71;
      MEMORY[0x1B5E2EE44](&aBlock);
      if (v63)
        goto LABEL_106;
LABEL_78:
      ++v61;
    }
    while (v61 != Count);
  }
LABEL_120:
  v90 = (const __CFString *)*MEMORY[0x1E0DDF660];
  if (!CFDictionaryContainsKey(*v121, (const void *)*MEMORY[0x1E0DDF660]))
    goto LABEL_153;
  v92 = (char *)__p[1];
  v91 = (char *)v135;
  v93 = (const void **)__p[1];
  if (__p[1] != (void *)v135)
  {
    v93 = (const void **)__p[1];
    while (*((_BYTE *)*v93 + 8) != 18)
    {
      if (++v93 == (const void **)v135)
        goto LABEL_129;
    }
  }
  if (v93 != (const void **)v135)
  {
    if (!v94)
      __cxa_bad_cast();
    v95 = v94 + 9;
    goto LABEL_152;
  }
LABEL_129:
  v96 = operator new(0x10uLL);
  v97 = v96;
  v96[4] = 18;
  *(_QWORD *)v96 = off_1E66DFAE8;
  if ((unint64_t)v91 >= *((_QWORD *)&v135 + 1))
  {
    v99 = v91 - v92;
    v100 = (v91 - v92) >> 3;
    v101 = v100 + 1;
    if ((unint64_t)(v100 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v102 = *((_QWORD *)&v135 + 1) - (_QWORD)v92;
    if ((uint64_t)(*((_QWORD *)&v135 + 1) - (_QWORD)v92) >> 2 > v101)
      v101 = v102 >> 2;
    if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8)
      v103 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v103 = v101;
    if (v103)
    {
      if (v103 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v104 = operator new(8 * v103);
      v105 = &v104[8 * v100];
      v106 = &v104[8 * v103];
      *v105 = v97;
      v98 = (uint64_t)(v105 + 1);
      if (v92 != v91)
      {
LABEL_140:
        if ((unint64_t)(v99 - 8) < 0x58)
          goto LABEL_183;
        if ((unint64_t)(v92 - v104) < 0x20)
          goto LABEL_183;
        v107 = ((unint64_t)(v99 - 8) >> 3) + 1;
        v108 = 8 * (v107 & 0x3FFFFFFFFFFFFFFCLL);
        v109 = &v91[-v108];
        v105 = (_QWORD *)((char *)v105 - v108);
        v110 = &v104[8 * v100 - 16];
        v111 = v91 - 16;
        v112 = v107 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v113 = *(_OWORD *)v111;
          *(v110 - 1) = *((_OWORD *)v111 - 1);
          *v110 = v113;
          v110 -= 2;
          v111 -= 32;
          v112 -= 4;
        }
        while (v112);
        v91 = v109;
        if (v107 != (v107 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_183:
          do
          {
            v114 = *((_QWORD *)v91 - 1);
            v91 -= 8;
            *--v105 = v114;
          }
          while (v91 != v92);
        }
        v92 = (char *)__p[1];
        __p[1] = v105;
        *(_QWORD *)&v135 = v98;
        *((_QWORD *)&v135 + 1) = v106;
        if (!v92)
          goto LABEL_151;
        goto LABEL_150;
      }
    }
    else
    {
      v104 = 0;
      v105 = (_QWORD *)(8 * v100);
      v106 = 0;
      *(_QWORD *)(8 * v100) = v97;
      v98 = 8 * v100 + 8;
      if (v92 != v91)
        goto LABEL_140;
    }
    __p[1] = v105;
    *(_QWORD *)&v135 = v98;
    *((_QWORD *)&v135 + 1) = v106;
    if (!v92)
      goto LABEL_151;
LABEL_150:
    operator delete(v92);
    goto LABEL_151;
  }
  *(_QWORD *)v91 = v96;
  v98 = (uint64_t)(v91 + 8);
LABEL_151:
  v95 = (char *)v97 + 9;
  *(_QWORD *)&v135 = v98;
LABEL_152:
  *v95 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v136, v90);
LABEL_153:
  v128 = v122 + 192;
  v129 = QMIServiceMsg::create();
  v130 = 25000;
  v131 = 0;
  v132 = 0;
  v115 = MEMORY[0x1E0C809B0];
  v125[0] = MEMORY[0x1E0C809B0];
  v125[1] = 1174405120;
  v125[2] = ___ZN4coex16QMICommandDriver20setWCI2TxAntMap_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v125[3] = &__block_descriptor_tmp_212;
  v125[4] = v122;
  v116 = *(void **)a3;
  if (*(_QWORD *)a3)
    v116 = _Block_copy(v116);
  v117 = *(NSObject **)(a3 + 8);
  v126 = v116;
  object = v117;
  if (v117)
    dispatch_retain(v117);
  *(_QWORD *)&aBlock = v115;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v138 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm15SetWCI2TxAntMap8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v139 = &unk_1E66DFB18;
  v140 = v125;
  v118 = _Block_copy(&aBlock);
  v132 = v118;
  if (v129)
  {
    qmi::Client::send();
    v118 = v132;
  }
  if (v118)
    _Block_release(v118);
  if (object)
    dispatch_release(object);
  if (v126)
    _Block_release(v126);
  if (theArray)
    CFRelease(theArray);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1B5E2EE44](v136);
}

void sub_1B3D673F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setAntBlocking_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v5;
  __int128 v6;
  const __CFArray *v7;
  uint64_t (*v8)(uint64_t);
  char *v9;
  char *v10;
  const void **v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  CFIndex Count;
  CFIndex v34;
  CFIndex v35;
  const void *ValueAtIndex;
  const void *v37;
  CFTypeID v38;
  uint64_t (*v39)(uint64_t);
  const __CFArray *v40;
  const __CFArray *v41;
  uint64_t (*v42)(uint64_t);
  CFIndex v43;
  char *v44;
  char *v45;
  char *v46;
  CFIndex v47;
  uint64_t v48;
  int *v49;
  int *v50;
  CFTypeID v51;
  const __CFNumber *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  char *v57;
  int64_t v58;
  unint64_t v59;
  char *v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  unint64_t v69;
  const void *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void *v76;
  NSObject *v77;
  void *v78;
  const __CFDictionary *v80;
  uint64_t v81;
  const __CFArray *v83;
  _QWORD *v84;
  CFIndex v85;
  __CFString *v86;
  const __CFString *v87;
  CFIndex v88;
  const void *v89;
  _QWORD v90[5];
  void *v91;
  dispatch_object_t object;
  unint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  void *v97;
  const __CFArray *v98;
  void *__p[2];
  __int128 v100;
  _QWORD v101[2];
  int v102;
  __int128 aBlock;
  void (*v104)(uint64_t, QMIServiceMsg *);
  char *v105;
  _QWORD *v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v80 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v80;
    _os_log_debug_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEBUG, "#D Setting Ant blocking with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v101[0] = 0xAAAAAAAAAAAAAAAALL;
  v101[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v101, *a2);
  v81 = a1;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v6;
  v100 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v7 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v101, (const __CFString *)*MEMORY[0x1E0DDF5B8]);
  v98 = v7;
  v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v7)
    v8 = 0;
  if (!v8)
    goto LABEL_102;
  v10 = (char *)__p[1];
  v9 = (char *)v100;
  v11 = (const void **)__p[1];
  if (__p[1] != (void *)v100)
  {
    v11 = (const void **)__p[1];
    while (*((_BYTE *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v100)
        goto LABEL_14;
    }
  }
  if (v11 == (const void **)v100)
  {
LABEL_14:
    v14 = (char *)operator new(0x28uLL);
    v15 = v14;
    v14[8] = 16;
    *(_QWORD *)v14 = &off_1E66DFB60;
    *((_QWORD *)v14 + 2) = 0;
    v13 = v14 + 16;
    *((_QWORD *)v14 + 3) = 0;
    *((_QWORD *)v14 + 4) = 0;
    if ((unint64_t)v9 < *((_QWORD *)&v100 + 1))
    {
      *(_QWORD *)v9 = v14;
      *(_QWORD *)&v100 = v9 + 8;
      goto LABEL_37;
    }
    v16 = v9 - v10;
    v17 = (v9 - v10) >> 3;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v19 = *((_QWORD *)&v100 + 1) - (_QWORD)v10;
    if ((uint64_t)(*((_QWORD *)&v100 + 1) - (_QWORD)v10) >> 2 > v18)
      v18 = v19 >> 2;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v21 = operator new(8 * v20);
      v22 = &v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v15;
      v24 = (uint64_t)(v22 + 1);
      if (v10 != v9)
      {
LABEL_25:
        if ((unint64_t)(v16 - 8) < 0x58)
          goto LABEL_125;
        if ((unint64_t)(v10 - v21) < 0x20)
          goto LABEL_125;
        v25 = ((unint64_t)(v16 - 8) >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = &v9[-v26];
        v22 = (_QWORD *)((char *)v22 - v26);
        v28 = &v21[8 * v17 - 16];
        v29 = v9 - 16;
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 4;
        }
        while (v30);
        v9 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_125:
          do
          {
            v32 = *((_QWORD *)v9 - 1);
            v9 -= 8;
            *--v22 = v32;
          }
          while (v9 != v10);
        }
        v10 = (char *)__p[1];
        __p[1] = v22;
        *(_QWORD *)&v100 = v24;
        *((_QWORD *)&v100 + 1) = v23;
        if (!v10)
          goto LABEL_36;
        goto LABEL_35;
      }
    }
    else
    {
      v21 = 0;
      v22 = (_QWORD *)(8 * v17);
      v23 = 0;
      *(_QWORD *)(8 * v17) = v15;
      v24 = 8 * v17 + 8;
      if (v10 != v9)
        goto LABEL_25;
    }
    __p[1] = v22;
    *(_QWORD *)&v100 = v24;
    *((_QWORD *)&v100 + 1) = v23;
    if (!v10)
    {
LABEL_36:
      *(_QWORD *)&v100 = v24;
      goto LABEL_37;
    }
LABEL_35:
    operator delete(v10);
    goto LABEL_36;
  }
  if (!v12)
    __cxa_bad_cast();
  v13 = v12 + 16;
LABEL_37:
  Count = CFArrayGetCount(v7);
  v34 = Count;
  if (Count >= 1)
  {
    v35 = 0;
    v86 = (__CFString *)*MEMORY[0x1E0DDF428];
    v87 = (const __CFString *)*MEMORY[0x1E0DDF3D0];
    v83 = v7;
    v84 = v13;
    v85 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v7, v35);
      v37 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v38 = CFGetTypeID(ValueAtIndex);
        if (v38 != CFDictionaryGetTypeID())
        {
          v37 = 0;
LABEL_86:
          if (!v37)
            goto LABEL_39;
          goto LABEL_101;
        }
        CFRetain(v37);
      }
      v39 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!v37)
        v39 = 0;
      if (!v39)
        goto LABEL_86;
      v93 = 0xAAAAAAAAAAAAAAAALL;
      v94 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v93, (const __CFDictionary *)v37);
      aBlock = 0xAAAAAAAAAAAAAA00;
      v104 = 0;
      v105 = 0;
      LOBYTE(aBlock) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v93, v87);
      v40 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)&v93, v86);
      v41 = v40;
      v42 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      if (!v40)
        v42 = 0;
      v88 = v35;
      v89 = v37;
      if (v42)
      {
        v43 = CFArrayGetCount(v40);
        if (v43 >= 1)
        {
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          while (2)
          {
            v102 = 0;
            v49 = (int *)CFArrayGetValueAtIndex(v41, v47);
            v50 = v49;
            if (!v49)
              goto LABEL_53;
            v51 = CFGetTypeID(v49);
            if (v51 != CFNumberGetTypeID() || !ctu::cf::assign((ctu::cf *)&v102, v50, v52))
              goto LABEL_53;
            if (v46 >= v45)
            {
              v53 = (v46 - v44) >> 2;
              v54 = v53 + 1;
              if ((unint64_t)(v53 + 1) >> 62)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              if ((v45 - v44) >> 1 > v54)
                v54 = (v45 - v44) >> 1;
              if ((unint64_t)(v45 - v44) >= 0x7FFFFFFFFFFFFFFCLL)
                v55 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v55 = v54;
              if (v55)
              {
                if (v55 >> 62)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v56 = operator new(4 * v55);
                v57 = &v56[4 * v53];
                *(_DWORD *)v57 = v102;
                v48 = (uint64_t)(v57 + 4);
                v58 = v46 - v44;
                if (v46 == v44)
                {
LABEL_72:
                  v45 = &v56[4 * v55];
                  *((_QWORD *)&aBlock + 1) = v57;
                  v104 = (void (*)(uint64_t, QMIServiceMsg *))v48;
                  v105 = v45;
                  if (v44)
                    operator delete(v44);
                  v44 = v57;
                  v7 = v83;
                  v13 = v84;
LABEL_52:
                  v104 = (void (*)(uint64_t, QMIServiceMsg *))v48;
                  v46 = (char *)v48;
LABEL_53:
                  if (++v47 == v43)
                    goto LABEL_89;
                  continue;
                }
              }
              else
              {
                v56 = 0;
                v57 = (char *)(4 * v53);
                *(_DWORD *)(4 * v53) = v102;
                v48 = 4 * v53 + 4;
                v58 = v46 - v44;
                if (v46 == v44)
                  goto LABEL_72;
              }
              v59 = v58 - 4;
              if (v59 >= 0xBC)
              {
                v62 = (v46 - 4 - v44) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v56[v46 - v44 - 4 - v62] > &v56[v46 - v44 - 4])
                {
                  v60 = v46;
                }
                else if (&v46[-v62 - 4] > v46 - 4)
                {
                  v60 = v46;
                }
                else if ((unint64_t)(v44 - v56) >= 0x20)
                {
                  v63 = (v59 >> 2) + 1;
                  v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
                  v60 = &v46[-v64];
                  v57 -= v64;
                  v65 = &v56[4 * v53 - 16];
                  v66 = v46 - 16;
                  v67 = v63 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v68 = *(_OWORD *)v66;
                    *(v65 - 1) = *((_OWORD *)v66 - 1);
                    *v65 = v68;
                    v65 -= 2;
                    v66 -= 32;
                    v67 -= 8;
                  }
                  while (v67);
                  if (v63 == (v63 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_72;
                }
                else
                {
                  v60 = v46;
                }
              }
              else
              {
                v60 = v46;
              }
              do
              {
                v61 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v57 - 1) = v61;
                v57 -= 4;
              }
              while (v60 != v44);
              goto LABEL_72;
            }
            break;
          }
          *(_DWORD *)v46 = v102;
          v48 = (uint64_t)(v46 + 4);
          goto LABEL_52;
        }
        v46 = 0;
        v69 = v13[1];
        if (v69 >= v13[2])
        {
LABEL_95:
          v37 = v89;
          v74 = std::vector<coex::tlv::abm::AntBandInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBandInfoSet&>(v13, (char *)&aBlock);
          goto LABEL_96;
        }
      }
      else
      {
        v46 = 0;
LABEL_89:
        v69 = v13[1];
        if (v69 >= v13[2])
          goto LABEL_95;
      }
      *(_BYTE *)v69 = aBlock;
      *(_QWORD *)(v69 + 8) = 0;
      *(_QWORD *)(v69 + 16) = 0;
      *(_QWORD *)(v69 + 24) = 0;
      v70 = (const void *)*((_QWORD *)&aBlock + 1);
      v71 = (uint64_t)&v46[-*((_QWORD *)&aBlock + 1)];
      if (v46 != *((char **)&aBlock + 1))
      {
        if (v71 < 0)
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        v72 = (char *)operator new((size_t)&v46[-*((_QWORD *)&aBlock + 1)]);
        *(_QWORD *)(v69 + 8) = v72;
        *(_QWORD *)(v69 + 16) = v72;
        v73 = &v72[4 * (v71 >> 2)];
        *(_QWORD *)(v69 + 24) = v73;
        memcpy(v72, v70, v46 - (_BYTE *)v70);
        *(_QWORD *)(v69 + 16) = v73;
      }
      v74 = (char *)(v69 + 32);
      v13[1] = v69 + 32;
      v37 = v89;
LABEL_96:
      v34 = v85;
      v35 = v88;
      v13[1] = v74;
      if (v41)
        CFRelease(v41);
      if (*((_QWORD *)&aBlock + 1))
        operator delete(*((void **)&aBlock + 1));
      MEMORY[0x1B5E2EE44](&v93);
      if (!v37)
        goto LABEL_39;
LABEL_101:
      CFRelease(v37);
LABEL_39:
      ++v35;
    }
    while (v35 != v34);
  }
LABEL_102:
  v93 = v81 + 192;
  v94 = QMIServiceMsg::create();
  v95 = 25000;
  v96 = 0;
  v97 = 0;
  v75 = MEMORY[0x1E0C809B0];
  v90[0] = MEMORY[0x1E0C809B0];
  v90[1] = 1174405120;
  v90[2] = ___ZN4coex16QMICommandDriver19setAntBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v90[3] = &__block_descriptor_tmp_214_0;
  v90[4] = v81;
  v76 = *(void **)a3;
  if (*(_QWORD *)a3)
    v76 = _Block_copy(v76);
  v77 = *(NSObject **)(a3 + 8);
  v91 = v76;
  object = v77;
  if (v77)
    dispatch_retain(v77);
  *(_QWORD *)&aBlock = v75;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v104 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm17SetAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v105 = (char *)&unk_1E66DFB90;
  v106 = v90;
  v78 = _Block_copy(&aBlock);
  v97 = v78;
  if (v94)
  {
    qmi::Client::send();
    v78 = v97;
  }
  if (v78)
    _Block_release(v78);
  if (object)
    dispatch_release(object);
  if (v91)
    _Block_release(v91);
  if (v7)
    CFRelease(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1B5E2EE44](v101);
}

void sub_1B3D67CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t coex::QMICommandDriver::setClientAntBlocking_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v5;
  __int128 v6;
  uint64_t v7;
  const __CFArray *v8;
  uint64_t (*v9)(uint64_t);
  char *v10;
  char *v11;
  const void **v12;
  char *v13;
  const __CFArray *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  const __CFDictionary *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  CFIndex v35;
  const void *ValueAtIndex;
  const void *v37;
  CFTypeID v38;
  uint64_t (*v39)(uint64_t);
  ctu::cf::map_adapter *v40;
  const __CFArray *v41;
  const __CFArray *v42;
  uint64_t (*v43)(uint64_t);
  CFIndex v44;
  const void *v45;
  const void *v46;
  CFTypeID v47;
  uint64_t (*v48)(uint64_t);
  ctu::cf::map_adapter *v49;
  const __CFArray *v50;
  const __CFArray *v51;
  uint64_t (*v52)(uint64_t);
  CFIndex v53;
  char *v54;
  char *v55;
  char *v56;
  CFIndex v57;
  uint64_t v58;
  int *v59;
  int *v60;
  CFTypeID v61;
  const __CFNumber *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _DWORD *v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  char *v79;
  void *v80;
  BOOL v81;
  int64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, QMIServiceMsg *);
  void (*v89)(uint64_t, QMIServiceMsg *);
  void (*v90)(uint64_t, QMIServiceMsg *);
  void *v91;
  uint64_t v92;
  void *v93;
  NSObject *v94;
  void *v95;
  uint64_t v97;
  __CFString *v99;
  __CFString *v100;
  __CFString *v101;
  __CFString *v102;
  CFIndex Count;
  char *v104;
  __CFString *v105;
  const __CFString *v106;
  CFArrayRef theArray;
  CFIndex v108;
  const void *v109;
  const __CFArray *v110;
  CFIndex v111;
  const void *v112;
  CFIndex v113;
  _QWORD v114[5];
  void *v115;
  dispatch_object_t object;
  unint64_t v117;
  void *__p;
  uint64_t v119;
  char *v120;
  void *aBlock;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  _QWORD v125[2];
  int v126;
  _QWORD v127[2];
  _QWORD v128[2];
  __int128 buf;
  void (*v130)(uint64_t, QMIServiceMsg *);
  char *v131;
  char *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v26 = *a2;
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v26;
    _os_log_debug_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEBUG, "#D Setting Ant blocking with: %@", (uint8_t *)&buf, 0xCu);
  }
  v125[0] = 0xAAAAAAAAAAAAAAAALL;
  v125[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v125, *a2);
  v97 = a1;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v123 = v6;
  v124 = v6;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v123);
  v7 = ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v125, (const __CFString *)*MEMORY[0x1E0DDF6B0]);
  v8 = (const __CFArray *)v7;
  v122 = v7;
  v9 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v7)
    v9 = 0;
  if (!v9)
    goto LABEL_133;
  theArray = (CFArrayRef)v7;
  v10 = (char *)*((_QWORD *)&v123 + 1);
  v11 = (char *)v124;
  v12 = (const void **)*((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1) != (_QWORD)v124)
  {
    v12 = (const void **)*((_QWORD *)&v123 + 1);
    while (*((_BYTE *)*v12 + 8) != 16)
    {
      if (++v12 == (const void **)v124)
        goto LABEL_14;
    }
  }
  if (v12 == (const void **)v124)
  {
LABEL_14:
    v15 = operator new(0x28uLL);
    v16 = v15;
    v15[8] = 16;
    *(_QWORD *)v15 = &off_1E66DFC50;
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 3) = 0;
    *((_QWORD *)v15 + 4) = 0;
    v104 = v15 + 16;
    if ((unint64_t)v11 < *((_QWORD *)&v124 + 1))
    {
      *(_QWORD *)v11 = v15;
      v14 = theArray;
      *(_QWORD *)&v124 = v11 + 8;
      goto LABEL_38;
    }
    v17 = v11 - v10;
    v18 = (v11 - v10) >> 3;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v20 = *((_QWORD *)&v124 + 1) - (_QWORD)v10;
    if ((uint64_t)(*((_QWORD *)&v124 + 1) - (_QWORD)v10) >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v22 = operator new(8 * v21);
      v23 = &v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v16;
      v25 = (uint64_t)(v23 + 1);
      if (v10 != v11)
      {
LABEL_25:
        if ((unint64_t)(v17 - 8) >= 0x58)
        {
          v14 = theArray;
          if ((unint64_t)(v10 - v22) >= 0x20)
          {
            v27 = ((unint64_t)(v17 - 8) >> 3) + 1;
            v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            v29 = &v11[-v28];
            v23 = (_QWORD *)((char *)v23 - v28);
            v30 = &v22[8 * v18 - 16];
            v31 = v11 - 16;
            v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v33 = *(_OWORD *)v31;
              *(v30 - 1) = *((_OWORD *)v31 - 1);
              *v30 = v33;
              v30 -= 2;
              v31 -= 32;
              v32 -= 4;
            }
            while (v32);
            v11 = v29;
            if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_35:
              v10 = (char *)*((_QWORD *)&v123 + 1);
              *((_QWORD *)&v123 + 1) = v23;
              *(_QWORD *)&v124 = v25;
              *((_QWORD *)&v124 + 1) = v24;
              if (!v10)
              {
LABEL_37:
                *(_QWORD *)&v124 = v25;
                goto LABEL_38;
              }
LABEL_36:
              operator delete(v10);
              goto LABEL_37;
            }
          }
        }
        else
        {
          v14 = theArray;
        }
        do
        {
          v34 = *((_QWORD *)v11 - 1);
          v11 -= 8;
          *--v23 = v34;
        }
        while (v11 != v10);
        goto LABEL_35;
      }
    }
    else
    {
      v22 = 0;
      v23 = (_QWORD *)(8 * v18);
      v24 = 0;
      *(_QWORD *)(8 * v18) = v16;
      v25 = 8 * v18 + 8;
      if (v10 != v11)
        goto LABEL_25;
    }
    v14 = theArray;
    *((_QWORD *)&v123 + 1) = v23;
    *(_QWORD *)&v124 = v25;
    *((_QWORD *)&v124 + 1) = v24;
    if (!v10)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (!v13)
    __cxa_bad_cast();
  v104 = v13 + 16;
  v14 = theArray;
LABEL_38:
  Count = CFArrayGetCount(v14);
  v8 = theArray;
  if (Count >= 1)
  {
    v35 = 0;
    v102 = (__CFString *)*MEMORY[0x1E0DDF430];
    v101 = (__CFString *)*MEMORY[0x1E0DDF4A8];
    v100 = (__CFString *)*MEMORY[0x1E0DDF5C0];
    v99 = (__CFString *)*MEMORY[0x1E0DDF5B8];
    v105 = (__CFString *)*MEMORY[0x1E0DDF428];
    v106 = (const __CFString *)*MEMORY[0x1E0DDF3D0];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v8, v35);
      v37 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v38 = CFGetTypeID(ValueAtIndex);
        if (v38 != CFDictionaryGetTypeID())
        {
          v37 = 0;
LABEL_119:
          if (!v37)
            goto LABEL_40;
          goto LABEL_132;
        }
        CFRetain(v37);
      }
      v39 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!v37)
        v39 = 0;
      if (!v39)
        goto LABEL_119;
      v128[0] = 0xAAAAAAAAAAAAAAAALL;
      v128[1] = 0xAAAAAAAAAAAAAAAALL;
      v40 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v128, (const __CFDictionary *)v37);
      v131 = 0;
      v132 = 0;
      v130 = 0;
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = 0xAAAAAAAAAAAAAA00;
      v109 = v37;
      LODWORD(buf) = ctu::cf::map_adapter::getInt(v40, v102);
      BYTE8(buf) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v128, v101) != 0;
      DWORD1(buf) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v128, v100);
      v41 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v128, v99);
      v42 = v41;
      v43 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      if (!v41)
        v43 = 0;
      if (v43)
      {
        v111 = CFArrayGetCount(v41);
        if (v111 >= 1)
        {
          v44 = 0;
          v108 = v35;
          v110 = v42;
          do
          {
            v113 = v44;
            v45 = CFArrayGetValueAtIndex(v42, v44);
            v46 = v45;
            if (v45)
            {
              v47 = CFGetTypeID(v45);
              if (v47 != CFDictionaryGetTypeID())
              {
                v46 = 0;
LABEL_99:
                if (!v46)
                  goto LABEL_52;
                goto LABEL_114;
              }
              CFRetain(v46);
            }
            v48 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            if (!v46)
              v48 = 0;
            if (!v48)
              goto LABEL_99;
            v127[0] = 0xAAAAAAAAAAAAAAAALL;
            v127[1] = 0xAAAAAAAAAAAAAAAALL;
            v49 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v127, (const __CFDictionary *)v46);
            v117 = 0xAAAAAAAAAAAAAA00;
            v119 = 0;
            v120 = 0;
            __p = 0;
            LOBYTE(v117) = ctu::cf::map_adapter::getInt(v49, v106);
            v50 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v127, v105);
            v51 = v50;
            v52 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
            if (!v50)
              v52 = 0;
            v112 = v46;
            if (v52)
            {
              v53 = CFArrayGetCount(v50);
              if (v53 >= 1)
              {
                v54 = 0;
                v55 = 0;
                v56 = 0;
                v57 = 0;
                while (2)
                {
                  v126 = 0;
                  v59 = (int *)CFArrayGetValueAtIndex(v51, v57);
                  v60 = v59;
                  if (!v59)
                    goto LABEL_66;
                  v61 = CFGetTypeID(v59);
                  if (v61 != CFNumberGetTypeID() || !ctu::cf::assign((ctu::cf *)&v126, v60, v62))
                    goto LABEL_66;
                  if (v56 >= v55)
                  {
                    v63 = (v56 - v54) >> 2;
                    v64 = v63 + 1;
                    if ((unint64_t)(v63 + 1) >> 62)
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    if ((v55 - v54) >> 1 > v64)
                      v64 = (v55 - v54) >> 1;
                    if ((unint64_t)(v55 - v54) >= 0x7FFFFFFFFFFFFFFCLL)
                      v65 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v65 = v64;
                    if (v65)
                    {
                      if (v65 >> 62)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v66 = operator new(4 * v65);
                      v67 = &v66[4 * v63];
                      *v67 = v126;
                      v58 = (uint64_t)(v67 + 1);
                      v68 = v56 - v54;
                      if (v56 == v54)
                      {
LABEL_85:
                        v55 = &v66[4 * v65];
                        __p = v67;
                        v119 = v58;
                        v120 = v55;
                        if (v54)
                          operator delete(v54);
                        v54 = (char *)v67;
                        v42 = v110;
LABEL_65:
                        v119 = v58;
                        v56 = (char *)v58;
LABEL_66:
                        if (++v57 == v53)
                          goto LABEL_102;
                        continue;
                      }
                    }
                    else
                    {
                      v66 = 0;
                      v67 = (_DWORD *)(4 * v63);
                      *(_DWORD *)(4 * v63) = v126;
                      v58 = 4 * v63 + 4;
                      v68 = v56 - v54;
                      if (v56 == v54)
                        goto LABEL_85;
                    }
                    v69 = v68 - 4;
                    if (v69 >= 0xBC)
                    {
                      v72 = (v56 - 4 - v54) & 0xFFFFFFFFFFFFFFFCLL;
                      if (&v66[v56 - v54 - 4 - v72] > &v66[v56 - v54 - 4])
                      {
                        v70 = v56;
                      }
                      else if (&v56[-v72 - 4] > v56 - 4)
                      {
                        v70 = v56;
                      }
                      else if ((unint64_t)(v54 - v66) >= 0x20)
                      {
                        v73 = (v69 >> 2) + 1;
                        v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                        v70 = &v56[-v74];
                        v67 = (_DWORD *)((char *)v67 - v74);
                        v75 = &v66[4 * v63 - 16];
                        v76 = v56 - 16;
                        v77 = v73 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v78 = *(_OWORD *)v76;
                          *(v75 - 1) = *((_OWORD *)v76 - 1);
                          *v75 = v78;
                          v75 -= 2;
                          v76 -= 32;
                          v77 -= 8;
                        }
                        while (v77);
                        if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
                          goto LABEL_85;
                      }
                      else
                      {
                        v70 = v56;
                      }
                    }
                    else
                    {
                      v70 = v56;
                    }
                    do
                    {
                      v71 = *((_DWORD *)v70 - 1);
                      v70 -= 4;
                      *--v67 = v71;
                    }
                    while (v70 != v54);
                    goto LABEL_85;
                  }
                  break;
                }
                *(_DWORD *)v56 = v126;
                v58 = (uint64_t)(v56 + 4);
                goto LABEL_65;
              }
              v56 = 0;
              v79 = v131;
              if (v131 >= v132)
              {
LABEL_108:
                v37 = v109;
                v46 = v112;
                v85 = std::vector<coex::tlv::abm::AntBandInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBandInfoSet&>(&v130, (char *)&v117);
                v8 = theArray;
                v35 = v108;
                goto LABEL_109;
              }
            }
            else
            {
              v56 = 0;
LABEL_102:
              v79 = v131;
              if (v131 >= v132)
                goto LABEL_108;
            }
            *v79 = v117;
            *((_QWORD *)v79 + 1) = 0;
            *((_QWORD *)v79 + 2) = 0;
            *((_QWORD *)v79 + 3) = 0;
            v80 = __p;
            v82 = v56 - (_BYTE *)__p;
            v81 = v56 == __p;
            v8 = theArray;
            v35 = v108;
            v37 = v109;
            if (!v81)
            {
              if (v82 < 0)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v83 = (char *)operator new(v82);
              *((_QWORD *)v79 + 1) = v83;
              *((_QWORD *)v79 + 2) = v83;
              v84 = &v83[4 * (v82 >> 2)];
              *((_QWORD *)v79 + 3) = v84;
              memcpy(v83, v80, v82);
              *((_QWORD *)v79 + 2) = v84;
              v37 = v109;
            }
            v85 = v79 + 32;
            v42 = v110;
            v46 = v112;
LABEL_109:
            v131 = v85;
            if (v51)
              CFRelease(v51);
            if (__p)
              operator delete(__p);
            MEMORY[0x1B5E2EE44](v127);
            if (!v46)
              goto LABEL_52;
LABEL_114:
            CFRelease(v46);
LABEL_52:
            v44 = v113 + 1;
          }
          while (v113 + 1 != v111);
        }
      }
      v86 = *((_QWORD *)v104 + 1);
      if (v86 >= *((_QWORD *)v104 + 2))
        break;
      v87 = buf;
      *(_BYTE *)(v86 + 8) = BYTE8(buf);
      *(_QWORD *)v86 = v87;
      std::vector<coex::tlv::abm::AntBandInfoSet>::vector((_QWORD *)(v86 + 16), (uint64_t *)&v130);
      *((_QWORD *)v104 + 1) = v86 + 40;
      *((_QWORD *)v104 + 1) = v86 + 40;
      if (v42)
        goto LABEL_122;
LABEL_123:
      v88 = v130;
      if (v130)
      {
        v89 = (void (*)(uint64_t, QMIServiceMsg *))v131;
        v90 = v130;
        if (v131 != (char *)v130)
        {
          do
          {
            v91 = (void *)*((_QWORD *)v89 - 3);
            if (v91)
            {
              *((_QWORD *)v89 - 2) = v91;
              operator delete(v91);
            }
            v89 = (void (*)(uint64_t, QMIServiceMsg *))((char *)v89 - 32);
          }
          while (v89 != v88);
          v90 = v130;
        }
        v131 = (char *)v88;
        operator delete(v90);
      }
      MEMORY[0x1B5E2EE44](v128);
      if (!v37)
        goto LABEL_40;
LABEL_132:
      CFRelease(v37);
LABEL_40:
      if (++v35 == Count)
        goto LABEL_133;
    }
    *((_QWORD *)v104 + 1) = std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBlockClientInfoSet&>((char **)v104, (uint64_t)&buf);
    if (!v42)
      goto LABEL_123;
LABEL_122:
    CFRelease(v42);
    goto LABEL_123;
  }
LABEL_133:
  v117 = v97 + 192;
  __p = (void *)QMIServiceMsg::create();
  LODWORD(v119) = 25000;
  v120 = 0;
  aBlock = 0;
  v92 = MEMORY[0x1E0C809B0];
  v114[0] = MEMORY[0x1E0C809B0];
  v114[1] = 1174405120;
  v114[2] = ___ZN4coex16QMICommandDriver25setClientAntBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v114[3] = &__block_descriptor_tmp_218_0;
  v114[4] = v97;
  v93 = *(void **)a3;
  if (*(_QWORD *)a3)
    v93 = _Block_copy(v93);
  v94 = *(NSObject **)(a3 + 8);
  v115 = v93;
  object = v94;
  if (v94)
    dispatch_retain(v94);
  *(_QWORD *)&buf = v92;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v130 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm23SetClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v131 = (char *)&unk_1E66DFC80;
  v132 = (char *)v114;
  v95 = _Block_copy(&buf);
  aBlock = v95;
  if (__p)
  {
    qmi::Client::send();
    v95 = aBlock;
  }
  if (v95)
    _Block_release(v95);
  if (object)
    dispatch_release(object);
  if (v115)
    _Block_release(v115);
  if (v8)
    CFRelease(v8);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v123);
  return MEMORY[0x1B5E2EE44](v125);
}

void sub_1B3D688C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t coex::QMICommandDriver::setClientAntBlockingExtended_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v5;
  const __CFDictionary *v6;
  __int128 v7;
  uint64_t v8;
  const __CFArray *v9;
  uint64_t (*v10)(uint64_t);
  char *v11;
  char *v12;
  const void **v13;
  char *v14;
  const __CFArray *v15;
  _BYTE *v16;
  _BYTE *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  CFIndex v35;
  const void *ValueAtIndex;
  const void *v37;
  CFTypeID v38;
  uint64_t (*v39)(uint64_t);
  ctu::cf::map_adapter *v40;
  const __CFArray *v41;
  const __CFArray *v42;
  uint64_t (*v43)(uint64_t);
  CFIndex v44;
  const void *v45;
  const void *v46;
  CFTypeID v47;
  uint64_t (*v48)(uint64_t);
  ctu::cf::map_adapter *v49;
  const __CFArray *v50;
  const __CFArray *v51;
  uint64_t (*v52)(uint64_t);
  CFIndex v53;
  char *v54;
  char *v55;
  char *v56;
  CFIndex v57;
  uint64_t v58;
  int *v59;
  int *v60;
  CFTypeID v61;
  const __CFNumber *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  _DWORD *v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  char *v76;
  uint64_t v77;
  __int128 v78;
  char *v79;
  void *v80;
  BOOL v81;
  int64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, QMIServiceMsg *);
  void (*v89)(uint64_t, QMIServiceMsg *);
  void (*v90)(uint64_t, QMIServiceMsg *);
  void *v91;
  uint64_t v92;
  void *v93;
  NSObject *v94;
  void *v95;
  uint64_t v97;
  __CFString *v99;
  __CFString *v100;
  __CFString *v101;
  __CFString *v102;
  CFIndex Count;
  char *v104;
  __CFString *v105;
  const __CFString *v106;
  CFArrayRef theArray;
  CFIndex v108;
  const void *v109;
  const __CFArray *v110;
  CFIndex v111;
  const void *v112;
  CFIndex v113;
  _QWORD v114[5];
  void *v115;
  dispatch_object_t object;
  unint64_t v117;
  void *__p;
  uint64_t v119;
  char *v120;
  void *aBlock;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  _QWORD v125[2];
  int v126;
  _QWORD v127[2];
  _QWORD v128[2];
  __int128 buf;
  void (*v130)(uint64_t, QMIServiceMsg *);
  char *v131;
  char *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *a2;
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_1B3CB3000, v5, OS_LOG_TYPE_DEFAULT, "#I Setting Extended Ant blocking with: %@", (uint8_t *)&buf, 0xCu);
  }
  v125[0] = 0xAAAAAAAAAAAAAAAALL;
  v125[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v125, *a2);
  v97 = a1;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v123 = v7;
  v124 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v123);
  v8 = ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v125, (const __CFString *)*MEMORY[0x1E0DDF6B0]);
  v9 = (const __CFArray *)v8;
  v122 = v8;
  v10 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v8)
    v10 = 0;
  if (!v10)
    goto LABEL_133;
  theArray = (CFArrayRef)v8;
  v11 = (char *)*((_QWORD *)&v123 + 1);
  v12 = (char *)v124;
  v13 = (const void **)*((_QWORD *)&v123 + 1);
  if (*((_QWORD *)&v123 + 1) != (_QWORD)v124)
  {
    v13 = (const void **)*((_QWORD *)&v123 + 1);
    while (*((_BYTE *)*v13 + 8) != 17)
    {
      if (++v13 == (const void **)v124)
        goto LABEL_14;
    }
  }
  if (v13 == (const void **)v124)
  {
LABEL_14:
    v16 = operator new(0x28uLL);
    v17 = v16;
    v16[8] = 17;
    *(_QWORD *)v16 = &off_1E66DFCC8;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = 0;
    *((_QWORD *)v16 + 4) = 0;
    v104 = v16 + 16;
    if ((unint64_t)v12 < *((_QWORD *)&v124 + 1))
    {
      *(_QWORD *)v12 = v16;
      v15 = theArray;
      *(_QWORD *)&v124 = v12 + 8;
      goto LABEL_38;
    }
    v18 = v12 - v11;
    v19 = (v12 - v11) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v124 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v124 + 1) - (_QWORD)v11) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v26 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_25:
        if ((unint64_t)(v18 - 8) >= 0x58)
        {
          v15 = theArray;
          if ((unint64_t)(v11 - v23) >= 0x20)
          {
            v27 = ((unint64_t)(v18 - 8) >> 3) + 1;
            v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
            v29 = &v12[-v28];
            v24 = (_QWORD *)((char *)v24 - v28);
            v30 = &v23[8 * v19 - 16];
            v31 = v12 - 16;
            v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v33 = *(_OWORD *)v31;
              *(v30 - 1) = *((_OWORD *)v31 - 1);
              *v30 = v33;
              v30 -= 2;
              v31 -= 32;
              v32 -= 4;
            }
            while (v32);
            v12 = v29;
            if (v27 == (v27 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_35:
              v11 = (char *)*((_QWORD *)&v123 + 1);
              *((_QWORD *)&v123 + 1) = v24;
              *(_QWORD *)&v124 = v26;
              *((_QWORD *)&v124 + 1) = v25;
              if (!v11)
              {
LABEL_37:
                *(_QWORD *)&v124 = v26;
                goto LABEL_38;
              }
LABEL_36:
              operator delete(v11);
              goto LABEL_37;
            }
          }
        }
        else
        {
          v15 = theArray;
        }
        do
        {
          v34 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *--v24 = v34;
        }
        while (v12 != v11);
        goto LABEL_35;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v17;
      v26 = 8 * v19 + 8;
      if (v11 != v12)
        goto LABEL_25;
    }
    v15 = theArray;
    *((_QWORD *)&v123 + 1) = v24;
    *(_QWORD *)&v124 = v26;
    *((_QWORD *)&v124 + 1) = v25;
    if (!v11)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (!v14)
    __cxa_bad_cast();
  v104 = v14 + 16;
  v15 = theArray;
LABEL_38:
  Count = CFArrayGetCount(v15);
  v9 = theArray;
  if (Count >= 1)
  {
    v35 = 0;
    v102 = (__CFString *)*MEMORY[0x1E0DDF430];
    v101 = (__CFString *)*MEMORY[0x1E0DDF4A8];
    v100 = (__CFString *)*MEMORY[0x1E0DDF5C0];
    v99 = (__CFString *)*MEMORY[0x1E0DDF5B8];
    v105 = (__CFString *)*MEMORY[0x1E0DDF428];
    v106 = (const __CFString *)*MEMORY[0x1E0DDF3D0];
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v9, v35);
      v37 = ValueAtIndex;
      if (ValueAtIndex)
      {
        v38 = CFGetTypeID(ValueAtIndex);
        if (v38 != CFDictionaryGetTypeID())
        {
          v37 = 0;
LABEL_119:
          if (!v37)
            goto LABEL_40;
          goto LABEL_132;
        }
        CFRetain(v37);
      }
      v39 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!v37)
        v39 = 0;
      if (!v39)
        goto LABEL_119;
      v128[0] = 0xAAAAAAAAAAAAAAAALL;
      v128[1] = 0xAAAAAAAAAAAAAAAALL;
      v40 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v128, (const __CFDictionary *)v37);
      v131 = 0;
      v132 = 0;
      v130 = 0;
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = 0xAAAAAAAAAAAAAA00;
      v109 = v37;
      LODWORD(buf) = ctu::cf::map_adapter::getInt(v40, v102);
      BYTE8(buf) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v128, v101) != 0;
      DWORD1(buf) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v128, v100);
      v41 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v128, v99);
      v42 = v41;
      v43 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      if (!v41)
        v43 = 0;
      if (v43)
      {
        v111 = CFArrayGetCount(v41);
        if (v111 >= 1)
        {
          v44 = 0;
          v108 = v35;
          v110 = v42;
          do
          {
            v113 = v44;
            v45 = CFArrayGetValueAtIndex(v42, v44);
            v46 = v45;
            if (v45)
            {
              v47 = CFGetTypeID(v45);
              if (v47 != CFDictionaryGetTypeID())
              {
                v46 = 0;
LABEL_99:
                if (!v46)
                  goto LABEL_52;
                goto LABEL_114;
              }
              CFRetain(v46);
            }
            v48 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            if (!v46)
              v48 = 0;
            if (!v48)
              goto LABEL_99;
            v127[0] = 0xAAAAAAAAAAAAAAAALL;
            v127[1] = 0xAAAAAAAAAAAAAAAALL;
            v49 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v127, (const __CFDictionary *)v46);
            v117 = 0xAAAAAAAAAAAAAA00;
            v119 = 0;
            v120 = 0;
            __p = 0;
            LOBYTE(v117) = ctu::cf::map_adapter::getInt(v49, v106);
            v50 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v127, v105);
            v51 = v50;
            v52 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
            if (!v50)
              v52 = 0;
            v112 = v46;
            if (v52)
            {
              v53 = CFArrayGetCount(v50);
              if (v53 >= 1)
              {
                v54 = 0;
                v55 = 0;
                v56 = 0;
                v57 = 0;
                while (2)
                {
                  v126 = 0;
                  v59 = (int *)CFArrayGetValueAtIndex(v51, v57);
                  v60 = v59;
                  if (!v59)
                    goto LABEL_66;
                  v61 = CFGetTypeID(v59);
                  if (v61 != CFNumberGetTypeID() || !ctu::cf::assign((ctu::cf *)&v126, v60, v62))
                    goto LABEL_66;
                  if (v56 >= v55)
                  {
                    v63 = (v56 - v54) >> 2;
                    v64 = v63 + 1;
                    if ((unint64_t)(v63 + 1) >> 62)
                      std::vector<std::string>::__throw_length_error[abi:ne180100]();
                    if ((v55 - v54) >> 1 > v64)
                      v64 = (v55 - v54) >> 1;
                    if ((unint64_t)(v55 - v54) >= 0x7FFFFFFFFFFFFFFCLL)
                      v65 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v65 = v64;
                    if (v65)
                    {
                      if (v65 >> 62)
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      v66 = operator new(4 * v65);
                      v67 = &v66[4 * v63];
                      *v67 = v126;
                      v58 = (uint64_t)(v67 + 1);
                      v68 = v56 - v54;
                      if (v56 == v54)
                      {
LABEL_85:
                        v55 = &v66[4 * v65];
                        __p = v67;
                        v119 = v58;
                        v120 = v55;
                        if (v54)
                          operator delete(v54);
                        v54 = (char *)v67;
                        v42 = v110;
LABEL_65:
                        v119 = v58;
                        v56 = (char *)v58;
LABEL_66:
                        if (++v57 == v53)
                          goto LABEL_102;
                        continue;
                      }
                    }
                    else
                    {
                      v66 = 0;
                      v67 = (_DWORD *)(4 * v63);
                      *(_DWORD *)(4 * v63) = v126;
                      v58 = 4 * v63 + 4;
                      v68 = v56 - v54;
                      if (v56 == v54)
                        goto LABEL_85;
                    }
                    v69 = v68 - 4;
                    if (v69 >= 0xBC)
                    {
                      v72 = (v56 - 4 - v54) & 0xFFFFFFFFFFFFFFFCLL;
                      if (&v66[v56 - v54 - 4 - v72] > &v66[v56 - v54 - 4])
                      {
                        v70 = v56;
                      }
                      else if (&v56[-v72 - 4] > v56 - 4)
                      {
                        v70 = v56;
                      }
                      else if ((unint64_t)(v54 - v66) >= 0x20)
                      {
                        v73 = (v69 >> 2) + 1;
                        v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
                        v70 = &v56[-v74];
                        v67 = (_DWORD *)((char *)v67 - v74);
                        v75 = &v66[4 * v63 - 16];
                        v76 = v56 - 16;
                        v77 = v73 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          v78 = *(_OWORD *)v76;
                          *(v75 - 1) = *((_OWORD *)v76 - 1);
                          *v75 = v78;
                          v75 -= 2;
                          v76 -= 32;
                          v77 -= 8;
                        }
                        while (v77);
                        if (v73 == (v73 & 0x7FFFFFFFFFFFFFF8))
                          goto LABEL_85;
                      }
                      else
                      {
                        v70 = v56;
                      }
                    }
                    else
                    {
                      v70 = v56;
                    }
                    do
                    {
                      v71 = *((_DWORD *)v70 - 1);
                      v70 -= 4;
                      *--v67 = v71;
                    }
                    while (v70 != v54);
                    goto LABEL_85;
                  }
                  break;
                }
                *(_DWORD *)v56 = v126;
                v58 = (uint64_t)(v56 + 4);
                goto LABEL_65;
              }
              v56 = 0;
              v79 = v131;
              if (v131 >= v132)
              {
LABEL_108:
                v37 = v109;
                v46 = v112;
                v85 = std::vector<coex::tlv::abm::AntBandInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBandInfoSet&>(&v130, (char *)&v117);
                v9 = theArray;
                v35 = v108;
                goto LABEL_109;
              }
            }
            else
            {
              v56 = 0;
LABEL_102:
              v79 = v131;
              if (v131 >= v132)
                goto LABEL_108;
            }
            *v79 = v117;
            *((_QWORD *)v79 + 1) = 0;
            *((_QWORD *)v79 + 2) = 0;
            *((_QWORD *)v79 + 3) = 0;
            v80 = __p;
            v82 = v56 - (_BYTE *)__p;
            v81 = v56 == __p;
            v9 = theArray;
            v35 = v108;
            v37 = v109;
            if (!v81)
            {
              if (v82 < 0)
                std::vector<std::string>::__throw_length_error[abi:ne180100]();
              v83 = (char *)operator new(v82);
              *((_QWORD *)v79 + 1) = v83;
              *((_QWORD *)v79 + 2) = v83;
              v84 = &v83[4 * (v82 >> 2)];
              *((_QWORD *)v79 + 3) = v84;
              memcpy(v83, v80, v82);
              *((_QWORD *)v79 + 2) = v84;
              v37 = v109;
            }
            v85 = v79 + 32;
            v42 = v110;
            v46 = v112;
LABEL_109:
            v131 = v85;
            if (v51)
              CFRelease(v51);
            if (__p)
              operator delete(__p);
            MEMORY[0x1B5E2EE44](v127);
            if (!v46)
              goto LABEL_52;
LABEL_114:
            CFRelease(v46);
LABEL_52:
            v44 = v113 + 1;
          }
          while (v113 + 1 != v111);
        }
      }
      v86 = *((_QWORD *)v104 + 1);
      if (v86 >= *((_QWORD *)v104 + 2))
        break;
      v87 = buf;
      *(_BYTE *)(v86 + 8) = BYTE8(buf);
      *(_QWORD *)v86 = v87;
      std::vector<coex::tlv::abm::AntBandInfoSet>::vector((_QWORD *)(v86 + 16), (uint64_t *)&v130);
      *((_QWORD *)v104 + 1) = v86 + 40;
      *((_QWORD *)v104 + 1) = v86 + 40;
      if (v42)
        goto LABEL_122;
LABEL_123:
      v88 = v130;
      if (v130)
      {
        v89 = (void (*)(uint64_t, QMIServiceMsg *))v131;
        v90 = v130;
        if (v131 != (char *)v130)
        {
          do
          {
            v91 = (void *)*((_QWORD *)v89 - 3);
            if (v91)
            {
              *((_QWORD *)v89 - 2) = v91;
              operator delete(v91);
            }
            v89 = (void (*)(uint64_t, QMIServiceMsg *))((char *)v89 - 32);
          }
          while (v89 != v88);
          v90 = v130;
        }
        v131 = (char *)v88;
        operator delete(v90);
      }
      MEMORY[0x1B5E2EE44](v128);
      if (!v37)
        goto LABEL_40;
LABEL_132:
      CFRelease(v37);
LABEL_40:
      if (++v35 == Count)
        goto LABEL_133;
    }
    *((_QWORD *)v104 + 1) = std::vector<coex::tlv::abm::AntBlockClientInfoSet>::__emplace_back_slow_path<coex::tlv::abm::AntBlockClientInfoSet&>((char **)v104, (uint64_t)&buf);
    if (!v42)
      goto LABEL_123;
LABEL_122:
    CFRelease(v42);
    goto LABEL_123;
  }
LABEL_133:
  v117 = v97 + 192;
  __p = (void *)QMIServiceMsg::create();
  LODWORD(v119) = 25000;
  v120 = 0;
  aBlock = 0;
  v92 = MEMORY[0x1E0C809B0];
  v114[0] = MEMORY[0x1E0C809B0];
  v114[1] = 1174405120;
  v114[2] = ___ZN4coex16QMICommandDriver33setClientAntBlockingExtended_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v114[3] = &__block_descriptor_tmp_220;
  v114[4] = v97;
  v93 = *(void **)a3;
  if (*(_QWORD *)a3)
    v93 = _Block_copy(v93);
  v94 = *(NSObject **)(a3 + 8);
  v115 = v93;
  object = v94;
  if (v94)
    dispatch_retain(v94);
  *(_QWORD *)&buf = v92;
  *((_QWORD *)&buf + 1) = 0x40000000;
  v130 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm23SetClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v131 = (char *)&unk_1E66DFC80;
  v132 = (char *)v114;
  v95 = _Block_copy(&buf);
  aBlock = v95;
  if (__p)
  {
    qmi::Client::send();
    v95 = aBlock;
  }
  if (v95)
    _Block_release(v95);
  if (object)
    dispatch_release(object);
  if (v115)
    _Block_release(v115);
  if (v9)
    CFRelease(v9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v123);
  return MEMORY[0x1B5E2EE44](v125);
}

void sub_1B3D6954C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t coex::QMICommandDriver::setTriggerAntennaBlocking_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  const void **v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  const void **v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  const __CFDictionary *v35;
  const __CFString *v36;
  char *v37;
  char *v38;
  const void **v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  char *v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  void *v64;
  const __CFDictionary *v66;
  _QWORD v67[5];
  void *v68;
  dispatch_object_t object;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  void *v74;
  void *__p[2];
  __int128 v76;
  _QWORD v77[2];
  __int128 aBlock;
  void (*v79)(uint64_t, QMIServiceMsg *);
  void *v80;
  _QWORD *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v66 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v66;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting trigger antenna block with  params: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v77[0] = 0xAAAAAAAAAAAAAAAALL;
  v77[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v77, *a2);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v7;
  v76 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v8 = (const void **)__p[1];
  if (__p[1] != (void *)v76)
  {
    while (*((_BYTE *)*v8 + 8) != 2)
    {
      if (++v8 == (const void **)v76)
        goto LABEL_10;
    }
  }
  if (v8 == (const void **)v76)
  {
LABEL_10:
    v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 2);
  }
  else
  {
    if (!v9)
      __cxa_bad_cast();
    v10 = v9 + 9;
  }
  *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v77, (const __CFString *)*MEMORY[0x1E0DDF5A8]);
  v11 = (char *)__p[1];
  v12 = (char *)v76;
  v13 = (const void **)__p[1];
  if (__p[1] != (void *)v76)
  {
    v13 = (const void **)__p[1];
    while (*((_BYTE *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v76)
        goto LABEL_19;
    }
  }
  if (v13 == (const void **)v76)
  {
LABEL_19:
    v16 = (char *)operator new(0x10uLL);
    v17 = v16;
    v16[8] = 1;
    *(_QWORD *)v16 = off_1E66DFD18;
    *((_DWORD *)v16 + 3) = 0;
    v15 = v16 + 12;
    if ((unint64_t)v12 < *((_QWORD *)&v76 + 1))
    {
      *(_QWORD *)v12 = v16;
      *(_QWORD *)&v76 = v12 + 8;
      goto LABEL_42;
    }
    v18 = v12 - v11;
    v19 = (v12 - v11) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v76 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v76 + 1) - (_QWORD)v11) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v26 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_30:
        if ((unint64_t)(v18 - 8) < 0x58)
          goto LABEL_97;
        if ((unint64_t)(v11 - v23) < 0x20)
          goto LABEL_97;
        v27 = ((unint64_t)(v18 - 8) >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v12[-v28];
        v24 = (_QWORD *)((char *)v24 - v28);
        v30 = &v23[8 * v19 - 16];
        v31 = v12 - 16;
        v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        v12 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_97:
          do
          {
            v34 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *--v24 = v34;
          }
          while (v12 != v11);
        }
        v11 = (char *)__p[1];
        __p[1] = v24;
        *(_QWORD *)&v76 = v26;
        *((_QWORD *)&v76 + 1) = v25;
        if (!v11)
          goto LABEL_41;
        goto LABEL_40;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v17;
      v26 = 8 * v19 + 8;
      if (v11 != v12)
        goto LABEL_30;
    }
    __p[1] = v24;
    *(_QWORD *)&v76 = v26;
    *((_QWORD *)&v76 + 1) = v25;
    if (!v11)
    {
LABEL_41:
      *(_QWORD *)&v76 = v26;
      goto LABEL_42;
    }
LABEL_40:
    operator delete(v11);
    goto LABEL_41;
  }
  if (!v14)
    __cxa_bad_cast();
  v15 = v14 + 12;
LABEL_42:
  *v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v77, (const __CFString *)*MEMORY[0x1E0DDF618]);
  v35 = *a2;
  v36 = (const __CFString *)*MEMORY[0x1E0DDF620];
  if (!CFDictionaryContainsKey(v35, (const void *)*MEMORY[0x1E0DDF620]))
    goto LABEL_75;
  v37 = (char *)__p[1];
  v38 = (char *)v76;
  v39 = (const void **)__p[1];
  if (__p[1] != (void *)v76)
  {
    v39 = (const void **)__p[1];
    while (*((_BYTE *)*v39 + 8) != 16)
    {
      if (++v39 == (const void **)v76)
        goto LABEL_51;
    }
  }
  if (v39 != (const void **)v76)
  {
    if (!v40)
      __cxa_bad_cast();
    v41 = v40 + 12;
    goto LABEL_74;
  }
LABEL_51:
  v42 = (char *)operator new(0x10uLL);
  v43 = v42;
  v42[8] = 16;
  *(_QWORD *)v42 = off_1E66DFD68;
  *((_DWORD *)v42 + 3) = 0;
  v41 = v42 + 12;
  if ((unint64_t)v38 >= *((_QWORD *)&v76 + 1))
  {
    v44 = v38 - v37;
    v45 = (v38 - v37) >> 3;
    v46 = v45 + 1;
    if ((unint64_t)(v45 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v47 = *((_QWORD *)&v76 + 1) - (_QWORD)v37;
    if ((uint64_t)(*((_QWORD *)&v76 + 1) - (_QWORD)v37) >> 2 > v46)
      v46 = v47 >> 2;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
      v48 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v48 = v46;
    if (v48)
    {
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = operator new(8 * v48);
      v50 = &v49[8 * v45];
      v51 = &v49[8 * v48];
      *v50 = v43;
      v52 = (uint64_t)(v50 + 1);
      if (v37 != v38)
      {
LABEL_62:
        if ((unint64_t)(v44 - 8) < 0x58)
          goto LABEL_98;
        if ((unint64_t)(v37 - v49) < 0x20)
          goto LABEL_98;
        v53 = ((unint64_t)(v44 - 8) >> 3) + 1;
        v54 = 8 * (v53 & 0x3FFFFFFFFFFFFFFCLL);
        v55 = &v38[-v54];
        v50 = (_QWORD *)((char *)v50 - v54);
        v56 = &v49[8 * v45 - 16];
        v57 = v38 - 16;
        v58 = v53 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = *(_OWORD *)v57;
          *(v56 - 1) = *((_OWORD *)v57 - 1);
          *v56 = v59;
          v56 -= 2;
          v57 -= 32;
          v58 -= 4;
        }
        while (v58);
        v38 = v55;
        if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_98:
          do
          {
            v60 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v50 = v60;
          }
          while (v38 != v37);
        }
        v37 = (char *)__p[1];
        __p[1] = v50;
        *(_QWORD *)&v76 = v52;
        *((_QWORD *)&v76 + 1) = v51;
        if (!v37)
          goto LABEL_73;
        goto LABEL_72;
      }
    }
    else
    {
      v49 = 0;
      v50 = (_QWORD *)(8 * v45);
      v51 = 0;
      *(_QWORD *)(8 * v45) = v43;
      v52 = 8 * v45 + 8;
      if (v37 != v38)
        goto LABEL_62;
    }
    __p[1] = v50;
    *(_QWORD *)&v76 = v52;
    *((_QWORD *)&v76 + 1) = v51;
    if (!v37)
    {
LABEL_73:
      *(_QWORD *)&v76 = v52;
      goto LABEL_74;
    }
LABEL_72:
    operator delete(v37);
    goto LABEL_73;
  }
  *(_QWORD *)v38 = v42;
  *(_QWORD *)&v76 = v38 + 8;
LABEL_74:
  *v41 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v77, v36);
LABEL_75:
  v70 = a1 + 192;
  v71 = QMIServiceMsg::create();
  v72 = 25000;
  v73 = 0;
  v74 = 0;
  v61 = MEMORY[0x1E0C809B0];
  v67[0] = MEMORY[0x1E0C809B0];
  v67[1] = 1174405120;
  v67[2] = ___ZN4coex16QMICommandDriver30setTriggerAntennaBlocking_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v67[3] = &__block_descriptor_tmp_222_0;
  v67[4] = a1;
  v62 = *(void **)a3;
  if (*(_QWORD *)a3)
    v62 = _Block_copy(v62);
  v63 = *(NSObject **)(a3 + 8);
  v68 = v62;
  object = v63;
  if (v63)
    dispatch_retain(v63);
  *(_QWORD *)&aBlock = v61;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v79 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm27TriggerClientAntBlockingReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v80 = &unk_1E66DFD98;
  v81 = v67;
  v64 = _Block_copy(&aBlock);
  v74 = v64;
  if (v71)
  {
    qmi::Client::send();
    v64 = v74;
  }
  if (v64)
    _Block_release(v64);
  if (object)
    dispatch_release(object);
  if (v68)
    _Block_release(v68);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1B5E2EE44](v77);
}

void sub_1B3D69DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B3D69E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  MEMORY[0x1B5E2EE44](&a27);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::setCC1_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  const void **v8;
  char *v9;
  char *v10;
  const void **v11;
  char *v12;
  char *v13;
  const void **v14;
  char *v15;
  char *v16;
  const void **v17;
  char *v18;
  char *v19;
  const __CFString *v20;
  const __CFDictionary *v21;
  const __CFString *v22;
  const void **v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  void *v29;
  const __CFDictionary *v31;
  _QWORD v32[5];
  void *v33;
  dispatch_object_t object;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 aBlock;
  void (*v44)(uint64_t, QMIServiceMsg *);
  void *v45;
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v31 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v31;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting CC1 with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v42[0] = 0xAAAAAAAAAAAAAAAALL;
  v42[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v42, *a2);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v7;
  v41 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
  v8 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v41)
        goto LABEL_10;
    }
  }
  if (v8 == (const void **)v41)
  {
LABEL_10:
    v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(&v40, 1);
  }
  else
  {
    if (!v9)
      __cxa_bad_cast();
    v10 = v9 + 9;
  }
  *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v42, (const __CFString *)*MEMORY[0x1E0DDF270]);
  v11 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v41)
        goto LABEL_18;
    }
  }
  if (v11 == (const void **)v41)
  {
LABEL_18:
    v13 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(&v40, 16);
  }
  else
  {
    if (!v12)
      __cxa_bad_cast();
    v13 = v12 + 12;
  }
  *(_DWORD *)v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, (const __CFString *)*MEMORY[0x1E0DDF248]);
  v14 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v14 + 8) != 17)
    {
      if (++v14 == (const void **)v41)
        goto LABEL_26;
    }
  }
  if (v14 == (const void **)v41)
  {
LABEL_26:
    v16 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::TechInstance>(&v40, 17);
  }
  else
  {
    if (!v15)
      __cxa_bad_cast();
    v16 = v15 + 12;
  }
  *(_DWORD *)v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, (const __CFString *)*MEMORY[0x1E0DDF320]);
  v17 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v17 + 8) != 18)
    {
      if (++v17 == (const void **)v41)
        goto LABEL_34;
    }
  }
  if (v17 == (const void **)v41)
  {
LABEL_34:
    v19 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CriticalCarrierId>(&v40);
  }
  else
  {
    if (!v18)
      __cxa_bad_cast();
    v19 = v18 + 12;
  }
  *(_DWORD *)v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, (const __CFString *)*MEMORY[0x1E0DDF278]);
  v20 = (const __CFString *)*MEMORY[0x1E0DDF388];
  if (CFDictionaryContainsKey(*a2, (const void *)*MEMORY[0x1E0DDF388]))
  {
    v21 = *a2;
    v22 = (const __CFString *)*MEMORY[0x1E0DDF268];
    if (CFDictionaryContainsKey(v21, (const void *)*MEMORY[0x1E0DDF268]))
    {
      v23 = (const void **)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
      {
        while (*((_BYTE *)*v23 + 8) != 19)
        {
          if (++v23 == (const void **)v41)
            goto LABEL_44;
        }
      }
      if (v23 == (const void **)v41)
      {
LABEL_44:
        v25 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::BandInfo>(&v40);
      }
      else
      {
        if (!v24)
          __cxa_bad_cast();
        v25 = v24 + 12;
      }
      *(_DWORD *)v25 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, v20);
      *((_DWORD *)v25 + 1) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, v22);
    }
  }
  v35 = a1 + 192;
  v36 = QMIServiceMsg::create();
  v37 = 25000;
  v38 = 0;
  v39 = 0;
  v26 = MEMORY[0x1E0C809B0];
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 1174405120;
  v32[2] = ___ZN4coex16QMICommandDriver11setCC1_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v32[3] = &__block_descriptor_tmp_224;
  v32[4] = a1;
  v27 = *(void **)a3;
  if (*(_QWORD *)a3)
    v27 = _Block_copy(v27);
  v28 = *(NSObject **)(a3 + 8);
  v33 = v27;
  object = v28;
  if (v28)
    dispatch_retain(v28);
  *(_QWORD *)&aBlock = v26;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v44 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetCC1Req8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v45 = &unk_1E66DFE60;
  v46 = v32;
  v29 = _Block_copy(&aBlock);
  v39 = v29;
  if (v36)
  {
    qmi::Client::send();
    v29 = v39;
  }
  if (v29)
    _Block_release(v29);
  if (object)
    dispatch_release(object);
  if (v33)
    _Block_release(v33);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v40);
  return MEMORY[0x1B5E2EE44](v42);
}

void sub_1B3D6A354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setCC2_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  const void **v8;
  char *v9;
  char *v10;
  const void **v11;
  char *v12;
  char *v13;
  const void **v14;
  char *v15;
  char *v16;
  const void **v17;
  char *v18;
  char *v19;
  const __CFString *v20;
  const __CFDictionary *v21;
  const __CFString *v22;
  const void **v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  void *v29;
  const __CFDictionary *v31;
  _QWORD v32[5];
  void *v33;
  dispatch_object_t object;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  void *v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 aBlock;
  void (*v44)(uint64_t, QMIServiceMsg *);
  void *v45;
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v31 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v31;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting CC2 with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v42[0] = 0xAAAAAAAAAAAAAAAALL;
  v42[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v42, *a2);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40 = v7;
  v41 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v40);
  v8 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v41)
        goto LABEL_10;
    }
  }
  if (v8 == (const void **)v41)
  {
LABEL_10:
    v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(&v40, 1);
  }
  else
  {
    if (!v9)
      __cxa_bad_cast();
    v10 = v9 + 9;
  }
  *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v42, (const __CFString *)*MEMORY[0x1E0DDF270]);
  v11 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v11 + 8) != 16)
    {
      if (++v11 == (const void **)v41)
        goto LABEL_18;
    }
  }
  if (v11 == (const void **)v41)
  {
LABEL_18:
    v13 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CoexTech>(&v40, 16);
  }
  else
  {
    if (!v12)
      __cxa_bad_cast();
    v13 = v12 + 12;
  }
  *(_DWORD *)v13 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, (const __CFString *)*MEMORY[0x1E0DDF248]);
  v14 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v14 + 8) != 17)
    {
      if (++v14 == (const void **)v41)
        goto LABEL_26;
    }
  }
  if (v14 == (const void **)v41)
  {
LABEL_26:
    v16 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::TechInstance>(&v40, 17);
  }
  else
  {
    if (!v15)
      __cxa_bad_cast();
    v16 = v15 + 12;
  }
  *(_DWORD *)v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, (const __CFString *)*MEMORY[0x1E0DDF320]);
  v17 = (const void **)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
  {
    while (*((_BYTE *)*v17 + 8) != 18)
    {
      if (++v17 == (const void **)v41)
        goto LABEL_34;
    }
  }
  if (v17 == (const void **)v41)
  {
LABEL_34:
    v19 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::CriticalCarrierId>(&v40);
  }
  else
  {
    if (!v18)
      __cxa_bad_cast();
    v19 = v18 + 12;
  }
  *(_DWORD *)v19 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, (const __CFString *)*MEMORY[0x1E0DDF278]);
  v20 = (const __CFString *)*MEMORY[0x1E0DDF388];
  if (CFDictionaryContainsKey(*a2, (const void *)*MEMORY[0x1E0DDF388]))
  {
    v21 = *a2;
    v22 = (const __CFString *)*MEMORY[0x1E0DDF268];
    if (CFDictionaryContainsKey(v21, (const void *)*MEMORY[0x1E0DDF268]))
    {
      v23 = (const void **)*((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1) != (_QWORD)v41)
      {
        while (*((_BYTE *)*v23 + 8) != 19)
        {
          if (++v23 == (const void **)v41)
            goto LABEL_44;
        }
      }
      if (v23 == (const void **)v41)
      {
LABEL_44:
        v25 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::BandInfo>(&v40);
      }
      else
      {
        if (!v24)
          __cxa_bad_cast();
        v25 = v24 + 12;
      }
      *(_DWORD *)v25 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, v20);
      *((_DWORD *)v25 + 1) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v42, v22);
    }
  }
  v35 = a1 + 192;
  v36 = QMIServiceMsg::create();
  v37 = 25000;
  v38 = 0;
  v39 = 0;
  v26 = MEMORY[0x1E0C809B0];
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 1174405120;
  v32[2] = ___ZN4coex16QMICommandDriver11setCC2_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v32[3] = &__block_descriptor_tmp_226;
  v32[4] = a1;
  v27 = *(void **)a3;
  if (*(_QWORD *)a3)
    v27 = _Block_copy(v27);
  v28 = *(NSObject **)(a3 + 8);
  v33 = v27;
  object = v28;
  if (v28)
    dispatch_retain(v28);
  *(_QWORD *)&aBlock = v26;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v44 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm9SetCC2Req8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v45 = &unk_1E66DFE88;
  v46 = v32;
  v29 = _Block_copy(&aBlock);
  v39 = v29;
  if (v36)
  {
    qmi::Client::send();
    v29 = v39;
  }
  if (v29)
    _Block_release(v29);
  if (object)
    dispatch_release(object);
  if (v33)
    _Block_release(v33);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v40);
  return MEMORY[0x1B5E2EE44](v42);
}

void sub_1B3D6A8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t coex::QMICommandDriver::setLaaGpioThrottle_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  const void **v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  const void **v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  void *v38;
  const __CFDictionary *v40;
  _QWORD v41[5];
  void *v42;
  dispatch_object_t object;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  void *__p[2];
  __int128 v50;
  _QWORD v51[2];
  __int128 aBlock;
  void (*v53)(uint64_t, QMIServiceMsg *);
  void *v54;
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v40 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v40;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting LAA GPIO throttle with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v51[0] = 0xAAAAAAAAAAAAAAAALL;
  v51[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v51, *a2);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v7;
  v50 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v8 = (const void **)__p[1];
  if (__p[1] != (void *)v50)
  {
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v50)
        goto LABEL_10;
    }
  }
  if (v8 == (const void **)v50)
  {
LABEL_10:
    v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 1);
  }
  else
  {
    if (!v9)
      __cxa_bad_cast();
    v10 = v9 + 9;
  }
  *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v51, (const __CFString *)*MEMORY[0x1E0DDF518]);
  v11 = (char *)__p[1];
  v12 = (char *)v50;
  v13 = (const void **)__p[1];
  if (__p[1] != (void *)v50)
  {
    v13 = (const void **)__p[1];
    while (*((_BYTE *)*v13 + 8) != 16)
    {
      if (++v13 == (const void **)v50)
        goto LABEL_19;
    }
  }
  if (v13 == (const void **)v50)
  {
LABEL_19:
    v16 = (char *)operator new(0x10uLL);
    v17 = v16;
    v16[8] = 16;
    *(_QWORD *)v16 = off_1E66DFED0;
    *((_DWORD *)v16 + 3) = 0;
    v15 = v16 + 12;
    if ((unint64_t)v12 < *((_QWORD *)&v50 + 1))
    {
      *(_QWORD *)v12 = v16;
      *(_QWORD *)&v50 = v12 + 8;
      goto LABEL_42;
    }
    v18 = v12 - v11;
    v19 = (v12 - v11) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v50 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v50 + 1) - (_QWORD)v11) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v26 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_30:
        if ((unint64_t)(v18 - 8) < 0x58)
          goto LABEL_61;
        if ((unint64_t)(v11 - v23) < 0x20)
          goto LABEL_61;
        v27 = ((unint64_t)(v18 - 8) >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v12[-v28];
        v24 = (_QWORD *)((char *)v24 - v28);
        v30 = &v23[8 * v19 - 16];
        v31 = v12 - 16;
        v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        v12 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_61:
          do
          {
            v34 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *--v24 = v34;
          }
          while (v12 != v11);
        }
        v11 = (char *)__p[1];
        __p[1] = v24;
        *(_QWORD *)&v50 = v26;
        *((_QWORD *)&v50 + 1) = v25;
        if (!v11)
          goto LABEL_41;
        goto LABEL_40;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v17;
      v26 = 8 * v19 + 8;
      if (v11 != v12)
        goto LABEL_30;
    }
    __p[1] = v24;
    *(_QWORD *)&v50 = v26;
    *((_QWORD *)&v50 + 1) = v25;
    if (!v11)
    {
LABEL_41:
      *(_QWORD *)&v50 = v26;
      goto LABEL_42;
    }
LABEL_40:
    operator delete(v11);
    goto LABEL_41;
  }
  if (!v14)
    __cxa_bad_cast();
  v15 = v14 + 12;
LABEL_42:
  *v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v51, (const __CFString *)*MEMORY[0x1E0DDF610]);
  v44 = a1 + 192;
  v45 = QMIServiceMsg::create();
  v46 = 25000;
  v47 = 0;
  v48 = 0;
  v35 = MEMORY[0x1E0C809B0];
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 1174405120;
  v41[2] = ___ZN4coex16QMICommandDriver23setLaaGpioThrottle_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v41[3] = &__block_descriptor_tmp_228;
  v41[4] = a1;
  v36 = *(void **)a3;
  if (*(_QWORD *)a3)
    v36 = _Block_copy(v36);
  v37 = *(NSObject **)(a3 + 8);
  v42 = v36;
  object = v37;
  if (v37)
    dispatch_retain(v37);
  *(_QWORD *)&aBlock = v35;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v53 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21SetLaaGpioThrottleReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v54 = &unk_1E66DFF00;
  v55 = v41;
  v38 = _Block_copy(&aBlock);
  v48 = v38;
  if (v45)
  {
    qmi::Client::send();
    v38 = v48;
  }
  if (v38)
    _Block_release(v38);
  if (object)
    dispatch_release(object);
  if (v42)
    _Block_release(v42);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1B5E2EE44](v51);
}

void sub_1B3D6ADDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B3D6AE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  MEMORY[0x1B5E2EE44](va1);
  _Unwind_Resume(a1);
}

uint64_t coex::QMICommandDriver::setGnssParams_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  const void **v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  const void **v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  _OWORD *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  const void **v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSObject *v61;
  void *v62;
  const __CFDictionary *v64;
  _QWORD v65[5];
  void *v66;
  dispatch_object_t object;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  void *v72;
  void *__p[2];
  __int128 v74;
  _QWORD v75[2];
  __int128 aBlock;
  void (*v77)(uint64_t, QMIServiceMsg *);
  void *v78;
  _QWORD *v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v64 = *a2;
    LODWORD(aBlock) = 138412290;
    *(_QWORD *)((char *)&aBlock + 4) = v64;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Setting Gnss params with: %@", (uint8_t *)&aBlock, 0xCu);
  }
  v75[0] = 0xAAAAAAAAAAAAAAAALL;
  v75[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v75, *a2);
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)__p = v7;
  v74 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v8 = (const void **)__p[1];
  if (__p[1] != (void *)v74)
  {
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v74)
        goto LABEL_10;
    }
  }
  if (v8 == (const void **)v74)
  {
LABEL_10:
    v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::Enabled>(__p, 1);
  }
  else
  {
    if (!v9)
      __cxa_bad_cast();
    v10 = v9 + 9;
  }
  *v10 = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v75, (const __CFString *)*MEMORY[0x1E0DDF2B0]);
  v11 = (char *)__p[1];
  v12 = (char *)v74;
  v13 = (const void **)__p[1];
  if (__p[1] != (void *)v74)
  {
    v13 = (const void **)__p[1];
    while (*((_BYTE *)*v13 + 8) != 16)
    {
      if (++v13 == (const void **)v74)
        goto LABEL_19;
    }
  }
  if (v13 == (const void **)v74)
  {
LABEL_19:
    v16 = (char *)operator new(0x10uLL);
    v17 = v16;
    v16[8] = 16;
    *(_QWORD *)v16 = off_1E66DFF48;
    *((_DWORD *)v16 + 3) = 0;
    v15 = v16 + 12;
    if ((unint64_t)v12 < *((_QWORD *)&v74 + 1))
    {
      *(_QWORD *)v12 = v16;
      *(_QWORD *)&v74 = v12 + 8;
      goto LABEL_42;
    }
    v18 = v12 - v11;
    v19 = (v12 - v11) >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v21 = *((_QWORD *)&v74 + 1) - (_QWORD)v11;
    if ((uint64_t)(*((_QWORD *)&v74 + 1) - (_QWORD)v11) >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      if (v22 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v23 = operator new(8 * v22);
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *v24 = v17;
      v26 = (uint64_t)(v24 + 1);
      if (v11 != v12)
      {
LABEL_30:
        if ((unint64_t)(v18 - 8) < 0x58)
          goto LABEL_95;
        if ((unint64_t)(v11 - v23) < 0x20)
          goto LABEL_95;
        v27 = ((unint64_t)(v18 - 8) >> 3) + 1;
        v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        v29 = &v12[-v28];
        v24 = (_QWORD *)((char *)v24 - v28);
        v30 = &v23[8 * v19 - 16];
        v31 = v12 - 16;
        v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v33 = *(_OWORD *)v31;
          *(v30 - 1) = *((_OWORD *)v31 - 1);
          *v30 = v33;
          v30 -= 2;
          v31 -= 32;
          v32 -= 4;
        }
        while (v32);
        v12 = v29;
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_95:
          do
          {
            v34 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *--v24 = v34;
          }
          while (v12 != v11);
        }
        v11 = (char *)__p[1];
        __p[1] = v24;
        *(_QWORD *)&v74 = v26;
        *((_QWORD *)&v74 + 1) = v25;
        if (!v11)
          goto LABEL_41;
        goto LABEL_40;
      }
    }
    else
    {
      v23 = 0;
      v24 = (_QWORD *)(8 * v19);
      v25 = 0;
      *(_QWORD *)(8 * v19) = v17;
      v26 = 8 * v19 + 8;
      if (v11 != v12)
        goto LABEL_30;
    }
    __p[1] = v24;
    *(_QWORD *)&v74 = v26;
    *((_QWORD *)&v74 + 1) = v25;
    if (!v11)
    {
LABEL_41:
      *(_QWORD *)&v74 = v26;
      goto LABEL_42;
    }
LABEL_40:
    operator delete(v11);
    goto LABEL_41;
  }
  if (!v14)
    __cxa_bad_cast();
  v15 = v14 + 12;
LABEL_42:
  *v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v75, (const __CFString *)*MEMORY[0x1E0DDF228]);
  v35 = (char *)__p[1];
  v36 = (char *)v74;
  v37 = (const void **)__p[1];
  if (__p[1] != (void *)v74)
  {
    v37 = (const void **)__p[1];
    while (*((_BYTE *)*v37 + 8) != 17)
    {
      if (++v37 == (const void **)v74)
        goto LABEL_50;
    }
  }
  if (v37 == (const void **)v74)
  {
LABEL_50:
    v40 = (char *)operator new(0x10uLL);
    v41 = v40;
    v40[8] = 17;
    *(_QWORD *)v40 = off_1E66DFF98;
    *((_DWORD *)v40 + 3) = 0;
    v39 = v40 + 12;
    if ((unint64_t)v36 < *((_QWORD *)&v74 + 1))
    {
      *(_QWORD *)v36 = v40;
      *(_QWORD *)&v74 = v36 + 8;
      goto LABEL_73;
    }
    v42 = v36 - v35;
    v43 = (v36 - v35) >> 3;
    v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v45 = *((_QWORD *)&v74 + 1) - (_QWORD)v35;
    if ((uint64_t)(*((_QWORD *)&v74 + 1) - (_QWORD)v35) >> 2 > v44)
      v44 = v45 >> 2;
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v44;
    if (v46)
    {
      if (v46 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v47 = operator new(8 * v46);
      v48 = &v47[8 * v43];
      v49 = &v47[8 * v46];
      *v48 = v41;
      v50 = (uint64_t)(v48 + 1);
      if (v35 != v36)
      {
LABEL_61:
        if ((unint64_t)(v42 - 8) < 0x58)
          goto LABEL_96;
        if ((unint64_t)(v35 - v47) < 0x20)
          goto LABEL_96;
        v51 = ((unint64_t)(v42 - 8) >> 3) + 1;
        v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
        v53 = &v36[-v52];
        v48 = (_QWORD *)((char *)v48 - v52);
        v54 = &v47[8 * v43 - 16];
        v55 = v36 - 16;
        v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v57 = *(_OWORD *)v55;
          *(v54 - 1) = *((_OWORD *)v55 - 1);
          *v54 = v57;
          v54 -= 2;
          v55 -= 32;
          v56 -= 4;
        }
        while (v56);
        v36 = v53;
        if (v51 != (v51 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_96:
          do
          {
            v58 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *--v48 = v58;
          }
          while (v36 != v35);
        }
        v35 = (char *)__p[1];
        __p[1] = v48;
        *(_QWORD *)&v74 = v50;
        *((_QWORD *)&v74 + 1) = v49;
        if (!v35)
          goto LABEL_72;
        goto LABEL_71;
      }
    }
    else
    {
      v47 = 0;
      v48 = (_QWORD *)(8 * v43);
      v49 = 0;
      *(_QWORD *)(8 * v43) = v41;
      v50 = 8 * v43 + 8;
      if (v35 != v36)
        goto LABEL_61;
    }
    __p[1] = v48;
    *(_QWORD *)&v74 = v50;
    *((_QWORD *)&v74 + 1) = v49;
    if (!v35)
    {
LABEL_72:
      *(_QWORD *)&v74 = v50;
      goto LABEL_73;
    }
LABEL_71:
    operator delete(v35);
    goto LABEL_72;
  }
  if (!v38)
    __cxa_bad_cast();
  v39 = v38 + 12;
LABEL_73:
  *v39 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v75, (const __CFString *)*MEMORY[0x1E0DDF2B8]);
  v68 = a1 + 192;
  v69 = QMIServiceMsg::create();
  v70 = 25000;
  v71 = 0;
  v72 = 0;
  v59 = MEMORY[0x1E0C809B0];
  v65[0] = MEMORY[0x1E0C809B0];
  v65[1] = 1174405120;
  v65[2] = ___ZN4coex16QMICommandDriver18setGnssParams_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke;
  v65[3] = &__block_descriptor_tmp_230_0;
  v65[4] = a1;
  v60 = *(void **)a3;
  if (*(_QWORD *)a3)
    v60 = _Block_copy(v60);
  v61 = *(NSObject **)(a3 + 8);
  v66 = v60;
  object = v61;
  if (v61)
    dispatch_retain(v61);
  *(_QWORD *)&aBlock = v59;
  *((_QWORD *)&aBlock + 1) = 0x40000000;
  v77 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm13SetGnssBandId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v78 = &unk_1E66DFFC8;
  v79 = v65;
  v62 = _Block_copy(&aBlock);
  v72 = v62;
  if (v69)
  {
    qmi::Client::send();
    v62 = v72;
  }
  if (v62)
    _Block_release(v62);
  if (object)
    dispatch_release(object);
  if (v66)
    _Block_release(v66);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return MEMORY[0x1B5E2EE44](v75);
}

void sub_1B3D6B4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B3D6B558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  MEMORY[0x1B5E2EE44](va1);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver8set_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_27(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_QWORD *)(v1 + 40))
  {
    if (*(_QWORD *)(v1 + 48))
    {
      v2 = 0;
      v3 = 0;
      coex::CommandDriver::Callback::operator()(v1 + 40, &v3, &v2);
    }
  }
}

void coex::QMICommandDriver::getScanFreqBandFilter_sync(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  __int128 v7;
  const void **v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  _QWORD v15[5];
  void *v16;
  dispatch_object_t object;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  _QWORD aBlock[6];

  v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v6, OS_LOG_TYPE_DEBUG, "#D Getting Scan Frequency Band filter info", (uint8_t *)aBlock, 2u);
  }
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v23 = v7;
  v24 = v7;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v23);
  v8 = (const void **)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1) != (_QWORD)v24)
  {
    while (*((_BYTE *)*v8 + 8) != 16)
    {
      if (++v8 == (const void **)v24)
        goto LABEL_10;
    }
  }
  if (v8 == (const void **)v24)
  {
LABEL_10:
    v10 = qmi::MutableMessageBase::createTLV<coex::tlv::abm::LTEInstance>(&v23, 16);
  }
  else
  {
    if (!v9)
      __cxa_bad_cast();
    v10 = v9 + 12;
  }
  *(_DWORD *)v10 = a2;
  v18 = a1 + 192;
  v19 = QMIServiceMsg::create();
  v20 = 25000;
  v21 = 0;
  v22 = 0;
  v11 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN4coex16QMICommandDriver26getScanFreqBandFilter_syncENS_5SubIdENS_13CommandDriver8CallbackE_block_invoke_2;
  v15[3] = &__block_descriptor_tmp_208;
  v15[4] = a1;
  v12 = *(void **)a3;
  if (*(_QWORD *)a3)
    v12 = _Block_copy(v12);
  v13 = *(NSObject **)(a3 + 8);
  v16 = v12;
  object = v13;
  if (v13)
    dispatch_retain(v13);
  aBlock[0] = v11;
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm21GetScanFreqBandFilter8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66DF7F8;
  aBlock[4] = v15;
  v14 = _Block_copy(aBlock);
  v22 = v14;
  if (v19)
  {
    qmi::Client::send();
    v14 = v22;
  }
  if (v14)
    _Block_release(v14);
  if (object)
    dispatch_release(object);
  if (v16)
    _Block_release(v16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v23);
}

void sub_1B3D6B7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  coex::CommandDriver::Callback *v21;

  coex::CommandDriver::Callback::~Callback(v21);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  _Unwind_Resume(a1);
}

void sub_1B3D6B7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D6B7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollWWANState_sync(coex::QMICommandDriver *this)
{
  NSObject *v2;
  __int128 v3;
  void *v4;
  _QWORD v5[6];
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  _OWORD v10[2];
  _QWORD aBlock[6];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEBUG, "#D Polling WWAN state", (uint8_t *)aBlock, 2u);
  }
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v3;
  v10[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  v5[5] = (char *)this + 192;
  v6 = QMIServiceMsg::create();
  v7 = 25000;
  v8 = 0;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN4coex16QMICommandDriver18pollWWANState_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_30_3;
  v5[4] = this;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm12GetWWANState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66DE888;
  aBlock[4] = v5;
  v4 = _Block_copy(aBlock);
  v9 = v4;
  if (v6)
  {
    qmi::Client::send();
    v4 = v9;
  }
  if (v4)
    _Block_release(v4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_1B3D6B91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D6B938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollWLANScanState_sync(coex::QMICommandDriver *this, int a2)
{
  NSObject *v4;
  __int128 v5;
  char *v6;
  char *v7;
  const void **v8;
  char *v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[6];
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  _QWORD aBlock[6];

  aBlock[5] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(aBlock[0]) = 67109120;
    HIDWORD(aBlock[0]) = a2;
    _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Polling WLAN Scan State on scan %u", (uint8_t *)aBlock, 8u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36 = v5;
  v37 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
  v6 = (char *)*((_QWORD *)&v36 + 1);
  v7 = (char *)v37;
  v8 = (const void **)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1) != (_QWORD)v37)
  {
    v8 = (const void **)*((_QWORD *)&v36 + 1);
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v37)
        goto LABEL_11;
    }
  }
  if (v8 == (const void **)v37)
  {
LABEL_11:
    v11 = (char *)operator new(0x10uLL);
    v12 = v11;
    v11[8] = 1;
    *(_QWORD *)v11 = off_1E66DE8D0;
    *((_DWORD *)v11 + 3) = 0;
    v10 = v11 + 12;
    if ((unint64_t)v7 < *((_QWORD *)&v37 + 1))
    {
      *(_QWORD *)v7 = v11;
      *(_QWORD *)&v37 = v7 + 8;
      goto LABEL_25;
    }
    v13 = v7 - v6;
    v14 = (v7 - v6) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v37 + 1) - (_QWORD)v6;
    if ((uint64_t)(*((_QWORD *)&v37 + 1) - (_QWORD)v6) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v12;
      v21 = (uint64_t)(v19 + 1);
      if (v6 == v7)
      {
LABEL_22:
        *((_QWORD *)&v36 + 1) = v19;
        *(_QWORD *)&v37 = v21;
        *((_QWORD *)&v37 + 1) = v20;
        if (!v6)
        {
LABEL_24:
          *(_QWORD *)&v37 = v21;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v6);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v12;
      v21 = 8 * v14 + 8;
      if (v6 == v7)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_44;
    if ((unint64_t)(v6 - v18) < 0x20)
      goto LABEL_44;
    v23 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v25 = &v7[-v24];
    v19 = (_QWORD *)((char *)v19 - v24);
    v26 = &v18[8 * v14 - 16];
    v27 = v7 - 16;
    v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 4;
    }
    while (v28);
    v7 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        v30 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v19 = v30;
      }
      while (v7 != v6);
    }
    v6 = (char *)*((_QWORD *)&v36 + 1);
    *((_QWORD *)&v36 + 1) = v19;
    *(_QWORD *)&v37 = v21;
    *((_QWORD *)&v37 + 1) = v20;
    if (!v6)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v9)
    __cxa_bad_cast();
  v10 = v9 + 12;
LABEL_25:
  *v10 = a2;
  v31[5] = (char *)this + 192;
  v32 = QMIServiceMsg::create();
  v33 = 25000;
  v34 = 0;
  v35 = 0;
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 0x40000000;
  v31[2] = ___ZN4coex16QMICommandDriver22pollWLANScanState_syncEj_block_invoke_2;
  v31[3] = &__block_descriptor_tmp_34_4;
  v31[4] = this;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm16GetWLANScanState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66DE930;
  aBlock[4] = v31;
  v22 = _Block_copy(aBlock);
  v35 = v22;
  if (v32)
  {
    qmi::Client::send();
    v22 = v35;
  }
  if (v22)
    _Block_release(v22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v36);
}

void sub_1B3D6BCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D6BCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D6BCEC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B3D6BD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollWLANConnState_sync(coex::QMICommandDriver *this, int a2)
{
  NSObject *v4;
  __int128 v5;
  char *v6;
  char *v7;
  const void **v8;
  char *v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD v31[6];
  uint64_t v32;
  int v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  _QWORD aBlock[6];

  aBlock[5] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(aBlock[0]) = 67109120;
    HIDWORD(aBlock[0]) = a2;
    _os_log_debug_impl(&dword_1B3CB3000, v4, OS_LOG_TYPE_DEBUG, "#D Polling WLAN Connection State on connection %u", (uint8_t *)aBlock, 8u);
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36 = v5;
  v37 = v5;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
  v6 = (char *)*((_QWORD *)&v36 + 1);
  v7 = (char *)v37;
  v8 = (const void **)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1) != (_QWORD)v37)
  {
    v8 = (const void **)*((_QWORD *)&v36 + 1);
    while (*((_BYTE *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v37)
        goto LABEL_11;
    }
  }
  if (v8 == (const void **)v37)
  {
LABEL_11:
    v11 = (char *)operator new(0x10uLL);
    v12 = v11;
    v11[8] = 1;
    *(_QWORD *)v11 = off_1E66DE978;
    *((_DWORD *)v11 + 3) = 0;
    v10 = v11 + 12;
    if ((unint64_t)v7 < *((_QWORD *)&v37 + 1))
    {
      *(_QWORD *)v7 = v11;
      *(_QWORD *)&v37 = v7 + 8;
      goto LABEL_25;
    }
    v13 = v7 - v6;
    v14 = (v7 - v6) >> 3;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = *((_QWORD *)&v37 + 1) - (_QWORD)v6;
    if ((uint64_t)(*((_QWORD *)&v37 + 1) - (_QWORD)v6) >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v12;
      v21 = (uint64_t)(v19 + 1);
      if (v6 == v7)
      {
LABEL_22:
        *((_QWORD *)&v36 + 1) = v19;
        *(_QWORD *)&v37 = v21;
        *((_QWORD *)&v37 + 1) = v20;
        if (!v6)
        {
LABEL_24:
          *(_QWORD *)&v37 = v21;
          goto LABEL_25;
        }
LABEL_23:
        operator delete(v6);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v12;
      v21 = 8 * v14 + 8;
      if (v6 == v7)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_44;
    if ((unint64_t)(v6 - v18) < 0x20)
      goto LABEL_44;
    v23 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v25 = &v7[-v24];
    v19 = (_QWORD *)((char *)v19 - v24);
    v26 = &v18[8 * v14 - 16];
    v27 = v7 - 16;
    v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *(_OWORD *)v27;
      *(v26 - 1) = *((_OWORD *)v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 32;
      v28 -= 4;
    }
    while (v28);
    v7 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
      {
        v30 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *--v19 = v30;
      }
      while (v7 != v6);
    }
    v6 = (char *)*((_QWORD *)&v36 + 1);
    *((_QWORD *)&v36 + 1) = v19;
    *(_QWORD *)&v37 = v21;
    *((_QWORD *)&v37 + 1) = v20;
    if (!v6)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v9)
    __cxa_bad_cast();
  v10 = v9 + 12;
LABEL_25:
  *v10 = a2;
  v31[5] = (char *)this + 192;
  v32 = QMIServiceMsg::create();
  v33 = 25000;
  v34 = 0;
  v35 = 0;
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 0x40000000;
  v31[2] = ___ZN4coex16QMICommandDriver22pollWLANConnState_syncEj_block_invoke_2;
  v31[3] = &__block_descriptor_tmp_38_3;
  v31[4] = this;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm16GetWLANConnState8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66DE9D8;
  aBlock[4] = v31;
  v22 = _Block_copy(aBlock);
  v35 = v22;
  if (v32)
  {
    qmi::Client::send();
    v22 = v35;
  }
  if (v22)
    _Block_release(v22);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v36);
}

void sub_1B3D6C080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D6C09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1B3D6C0B4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1B3D6C0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollPolicy_sync(coex::QMICommandDriver *this)
{
  NSObject *v2;
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  CFMutableDictionaryRef v6;
  CFMutableDictionaryRef v7;
  CFTypeID v8;
  __CFDictionary *v9;
  __CFDictionary *v10;
  CFMutableDictionaryRef v11;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEBUG, "#D Polling policy", buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
    *(_QWORD *)buf = Mutable;
  v11 = 0;
  v6 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = v6;
  if (v6)
    v11 = v6;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v5, (CFTypeRef)*MEMORY[0x1E0DDF2C8], v6);
  if (v5 && (v8 = CFGetTypeID(v5), v8 == CFDictionaryGetTypeID()))
  {
    v10 = v5;
    CFRetain(v5);
    v9 = v5;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync((uint64_t)this, (const void **)&v10, 0);
  if (v9)
    CFRelease(v9);
  if (v7)
  {
    CFRelease(v7);
    v5 = *(__CFDictionary **)buf;
  }
  if (v5)
    CFRelease(v5);
}

void sub_1B3D6C248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a11);
  _Unwind_Resume(a1);
}

void sub_1B3D6C26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void coex::QMICommandDriver::pollLinkQuality_sync(coex::QMICommandDriver *this)
{
  NSObject *v2;
  __int128 v3;
  void *v4;
  _QWORD v5[6];
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  _OWORD v10[2];
  _QWORD aBlock[6];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(aBlock[0]) = 0;
    _os_log_debug_impl(&dword_1B3CB3000, v2, OS_LOG_TYPE_DEBUG, "#D Polling Link Quality", (uint8_t *)aBlock, 2u);
  }
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[0] = v3;
  v10[1] = v3;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  v5[5] = (char *)this + 192;
  v6 = QMIServiceMsg::create();
  v7 = 25000;
  v8 = 0;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN4coex16QMICommandDriver20pollLinkQuality_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_40_8;
  v5[4] = this;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4coex3abm8SINRRead8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_1E66DEA30;
  aBlock[4] = v5;
  v4 = _Block_copy(aBlock);
  v9 = v4;
  if (v6)
  {
    qmi::Client::send();
    v4 = v9;
  }
  if (v4)
    _Block_release(v4);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_1B3D6C3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D6C3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver18pollWWANState_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  const __CFAllocator *v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  CFTypeRef v6;
  uint64_t (*v7)(uint64_t);
  CFTypeID v8;
  __CFDictionary *v9;
  uint64_t (*v10)(uint64_t);
  CFMutableDictionaryRef v11;
  CFMutableDictionaryRef v12;
  void *v13;
  tlv *TlvValue;
  int v15;
  tlv *v16;
  int v17;
  uint64_t v18;
  tlv *v19;
  int v20;
  tlv *v21;
  int v22;
  tlv *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  tlv *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  CFTypeID v73;
  __CFDictionary *v74;
  CFMutableDictionaryRef v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  CFMutableDictionaryRef v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  CFTypeID v101;
  __CFDictionary *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __CFDictionary *v138;
  __CFDictionary *v139;
  __CFDictionary *v140;
  __CFDictionary *v141;
  CFMutableDictionaryRef v142;
  CFMutableDictionaryRef v143;
  CFMutableDictionaryRef v144;
  __CFDictionary *v145;
  __CFDictionary *v146;
  __CFDictionary *v147;
  CFMutableDictionaryRef v148;
  CFMutableDictionaryRef v149;
  CFMutableDictionaryRef v150;
  CFMutableDictionaryRef v151;
  CFMutableDictionaryRef v152;
  CFMutableDictionaryRef v153;
  CFMutableDictionaryRef v154;
  CFMutableDictionaryRef v155;
  CFMutableDictionaryRef v156;
  CFMutableDictionaryRef v157;
  CFMutableDictionaryRef v158;
  __CFDictionary *v159;
  CFTypeRef cf;
  __CFDictionary *v161;
  CFMutableDictionaryRef v162;
  _QWORD v163[3];
  void *v164[2];
  void (*v165)(void **, tlv **);
  void *v166;
  __CFDictionary *v167;
  uint64_t v168;
  tlv *v169[2];

  v137 = *(_QWORD *)(a1 + 32);
  v161 = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
    v161 = Mutable;
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v165) = 14;
  strcpy((char *)v164, "Get WWAN State");
  coex::QMICommandDriver::checkError(v137, (uint64_t)a2, (uint64_t)v164, &cf);
  if (SHIBYTE(v165) < 0)
  {
    operator delete(v164[0]);
    v6 = cf;
    v10 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v10 = 0;
    if (v10)
      goto LABEL_7;
  }
  else
  {
    v6 = cf;
    v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v7 = 0;
    if (v7)
    {
LABEL_7:
      ctu::cf::insert<__CFString const*,__CFError *>(v5, (CFTypeRef)*MEMORY[0x1E0DDF280], v6);
      if (v5 && (v8 = CFGetTypeID(v5), v8 == CFDictionaryGetTypeID()))
      {
        v159 = v5;
        CFRetain(v5);
        v9 = v5;
      }
      else
      {
        v9 = 0;
        v159 = 0;
      }
      coex::QMICommandDriver::sendStateUpdate_sync(v137, (const void **)&v159, 0);
      if (v9)
        CFRelease(v9);
      goto LABEL_176;
    }
  }
  v158 = 0;
  v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v12 = v11;
  if (v11)
  {
    v157 = v11;
    v158 = v11;
    CFRetain(v11);
  }
  else
  {
    v157 = 0;
  }
  v13 = (void *)MEMORY[0x1E0C809B0];
  v162 = 0;
  v164[0] = (void *)MEMORY[0x1E0C809B0];
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18LTEBandInformationENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_280;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v168 = *MEMORY[0x1E0DDF3F8];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v16 = TlvValue;
  if (TlvValue)
  {
    v17 = v15;
    v169[0] = TlvValue;
    v163[0] = tlv::parseV<coex::tlv::abm::LTEBandInformation>(v169, v15);
    v163[1] = v18;
    if (v169[0])
      v165(v164, (tlv **)v163);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 16, v16, v17);
  }
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v156 = v12;
    CFRetain(v12);
  }
  else
  {
    v156 = 0;
  }
  v162 = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm17LTETDDInformationENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_281;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v168 = *MEMORY[0x1E0DDF3E0];
  v19 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v21 = v19;
  if (v19)
  {
    v22 = v20;
    v169[0] = v19;
    memset(v163, 170, 20);
    tlv::parseV<coex::tlv::abm::LTETDDInformation>(v169, v20, (uint64_t)v163);
    if (v169[0])
      v165(v164, (tlv **)v163);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 17, v21, v22);
  }
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v155 = v12;
    CFRetain(v12);
  }
  else
  {
    v155 = 0;
  }
  v163[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12LTEOffPeriodENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_282;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v168 = *MEMORY[0x1E0DDF300];
  v23 = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v31 = v23;
  if (v23)
  {
    tlv::throwIfNotEnoughBytes(v23, (const unsigned __int8 *)v23 + v24, (const unsigned __int8 *)4);
    LODWORD(v169[0]) = *(_DWORD *)v31;
    v165(v164, v169);
  }
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v154 = v12;
    CFRetain(v12);
  }
  else
  {
    v154 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTEBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_283;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v32 = *MEMORY[0x1E0DDF4E0];
  v168 = *MEMORY[0x1E0DDF4E0];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTEBandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTEBandInformationSet const&)>(a2, (uint64_t)v163, v25, v26, v27, v28, v29, v30, v103, v114, v126);
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v153 = v12;
    CFRetain(v12);
  }
  else
  {
    v153 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25TDSCDMABandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_284;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v168 = *MEMORY[0x1E0DDF5E8];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::TDSCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::TDSCDMABandInformationSet const&)>(a2, (uint64_t)v163, v33, v34, v35, v36, v37, v38, v104, v115, v127);
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v152 = v12;
    CFRetain(v12);
  }
  else
  {
    v152 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21GSMBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_285;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v45 = *MEMORY[0x1E0DDF4C0];
  v168 = *MEMORY[0x1E0DDF4C0];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::GSMBandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSMBandInformationSet const&)>(a2, (uint64_t)v163, v39, v40, v41, v42, v43, v44, v105, v116, v128);
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v151 = v12;
    CFRetain(v12);
  }
  else
  {
    v151 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22ONEXBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_286;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v168 = *MEMORY[0x1E0DDF520];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::ONEXBandInformationSet,void({block_pointer}&)(coex::tlv::abm::ONEXBandInformationSet const&)>(a2, (uint64_t)v163, v46, v47, v48, v49, v50, v51, v106, v117, v129);
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v150 = v12;
    CFRetain(v12);
  }
  else
  {
    v150 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21HDRBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_287;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v168 = *MEMORY[0x1E0DDF4D0];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::HDRBandInformationSet,void({block_pointer}&)(coex::tlv::abm::HDRBandInformationSet const&)>(a2, (uint64_t)v163, v52, v53, v54, v55, v56, v57, v107, v118, v130);
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v149 = v12;
    CFRetain(v12);
  }
  else
  {
    v149 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm23WCDMABandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_288;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v64 = *MEMORY[0x1E0DDF578];
  v168 = *MEMORY[0x1E0DDF578];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMABandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMABandInformationSet const&)>(a2, (uint64_t)v163, v58, v59, v60, v61, v62, v63, v108, v119, v131);
  if (v167)
    CFRelease(v167);
  if (v12)
  {
    CFRelease(v12);
    v148 = v12;
    CFRetain(v12);
  }
  else
  {
    v148 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21NGCBandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_289;
  v167 = v12;
  if (v12)
    CFRetain(v12);
  v71 = *MEMORY[0x1E0DDF4F0];
  v168 = *MEMORY[0x1E0DDF4F0];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGCBandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCBandInformationSet const&)>(a2, (uint64_t)v163, v65, v66, v67, v68, v69, v70, v109, v120, v132);
  if (v167)
    CFRelease(v167);
  if (v12)
    CFRelease(v12);
  v5 = v161;
  v147 = v161;
  if (v161)
    CFRetain(v161);
  v133 = v71;
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24LTECarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_290;
  v167 = v5;
  if (v5)
    CFRetain(v5);
  v72 = *MEMORY[0x1E0DDF598];
  v168 = *MEMORY[0x1E0DDF598];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTECarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTECarrierInformationSet const&)>(a2, (uint64_t)v163);
  if (v167)
    CFRelease(v167);
  if (v5)
  {
    CFRelease(v5);
    v146 = v5;
    CFRetain(v5);
  }
  else
  {
    v146 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24NGCCarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_291;
  v167 = v5;
  if (v5)
    CFRetain(v5);
  v121 = (void *)*MEMORY[0x1E0DDF5A0];
  v168 = *MEMORY[0x1E0DDF5A0];
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGCCarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGCCarrierInformationSet const&)>(a2, (uint64_t)v163);
  if (v167)
    CFRelease(v167);
  if (v5)
    CFRelease(v5);
  if (CFDictionaryGetCount(v12))
  {
    ctu::cf::update<__CFString const*,__CFDictionary *>(v5, (CFTypeRef)*MEMORY[0x1E0DDF338], v12);
    if (v5 && (v73 = CFGetTypeID(v5), v73 == CFDictionaryGetTypeID()))
    {
      v145 = v5;
      CFRetain(v5);
      v74 = v5;
    }
    else
    {
      v74 = 0;
      v145 = 0;
    }
    coex::QMICommandDriver::sendStateUpdate_sync(v137, (const void **)&v145, 0);
    if (v74)
      CFRelease(v74);
  }
  if (v12)
    CFRelease(v12);
  v162 = 0;
  v75 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v82 = v75;
  if (v75)
  {
    v162 = v75;
    v144 = v75;
    CFRetain(v75);
  }
  else
  {
    v144 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22GSM2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_292;
  v167 = v82;
  if (v82)
    CFRetain(v82);
  v168 = v45;
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::GSM2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::GSM2BandInformationSet const&)>(a2, (uint64_t)v163, v76, v77, v78, v79, v80, v81, v110, v121, v133);
  if (v167)
    CFRelease(v167);
  if (v82)
  {
    CFRelease(v82);
    v143 = v82;
    CFRetain(v82);
  }
  else
  {
    v143 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm24WCDMA2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_293;
  v167 = v82;
  if (v82)
    CFRetain(v82);
  v168 = v64;
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::WCDMA2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::WCDMA2BandInformationSet const&)>(a2, (uint64_t)v163, v83, v84, v85, v86, v87, v88, v111, v122, v134);
  if (v167)
    CFRelease(v167);
  if (v82)
  {
    CFRelease(v82);
    v142 = v82;
    CFRetain(v82);
  }
  else
  {
    v142 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22LTE2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_294;
  v167 = v82;
  if (v82)
    CFRetain(v82);
  v168 = v32;
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2BandInformationSet const&)>(a2, (uint64_t)v163, v89, v90, v91, v92, v93, v94, v112, v123, v135);
  if (v167)
    CFRelease(v167);
  if (v82)
    CFRelease(v82);
  v141 = v5;
  if (v5)
    CFRetain(v5);
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25LTE2CarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_295;
  v167 = v5;
  if (v5)
    CFRetain(v5);
  v168 = v72;
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::LTE2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::LTE2CarrierInformationSet const&)>(a2, (uint64_t)v163);
  if (v167)
    CFRelease(v167);
  if (v5)
  {
    CFRelease(v5);
    v140 = v5;
    CFRetain(v5);
  }
  else
  {
    v140 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm22NGC2BandInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_296;
  v167 = v5;
  if (v5)
    CFRetain(v5);
  v168 = v136;
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2BandInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2BandInformationSet const&)>(a2, (uint64_t)v163, v95, v96, v97, v98, v99, v100, v113, v124, v136);
  if (v167)
    CFRelease(v167);
  if (v5)
  {
    CFRelease(v5);
    v139 = v5;
    CFRetain(v5);
  }
  else
  {
    v139 = 0;
  }
  v169[0] = 0;
  v164[0] = v13;
  v164[1] = (void *)1174405120;
  v165 = (void (*)(void **, tlv **))___ZN4coexL21convertTLVFromMessageINS_3tlv3abm25NGC2CarrierInformationSetENS_3abm12GetWWANState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v166 = &__block_descriptor_tmp_297;
  v167 = v5;
  if (v5)
    CFRetain(v5);
  v168 = (uint64_t)v125;
  v163[0] = v164;
  qmi::MessageBase::applyTlv<coex::tlv::abm::NGC2CarrierInformationSet,void({block_pointer}&)(coex::tlv::abm::NGC2CarrierInformationSet const&)>(a2, (uint64_t)v163);
  if (v167)
    CFRelease(v167);
  if (v5)
    CFRelease(v5);
  if (CFDictionaryGetCount(v82))
  {
    ctu::cf::update<__CFString const*,__CFDictionary *>(v5, (CFTypeRef)*MEMORY[0x1E0DDF338], v82);
    if (v5 && (v101 = CFGetTypeID(v5), v101 == CFDictionaryGetTypeID()))
    {
      v138 = v5;
      CFRetain(v5);
      v102 = v5;
    }
    else
    {
      v102 = 0;
      v138 = 0;
    }
    coex::QMICommandDriver::sendStateUpdate_sync(v137, (const void **)&v138, 1);
    if (v102)
      CFRelease(v102);
  }
  if (v82)
    CFRelease(v82);
LABEL_176:
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
}

void sub_1B3D6D0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  uint64_t v35;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 - 192));
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a35);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v35 - 200));
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver22pollWLANScanState_syncEj_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  CFTypeRef v6;
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t);
  tlv *TlvValue;
  int v10;
  tlv *v11;
  int v12;
  uint64_t v13;
  CFTypeID v14;
  __CFDictionary *v15;
  const void *v16[2];
  CFTypeRef v17;
  CFMutableDictionaryRef v18;
  void *__p[4];
  CFTypeRef cf;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  tlv *v24;

  v3 = *(_QWORD *)(a1 + 32);
  v18 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
    v18 = Mutable;
  v17 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "Get WLAN Scan State");
  coex::QMICommandDriver::checkError(v3, (uint64_t)a2, (uint64_t)__p, &v17);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v6 = v17;
    v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v17)
      v8 = 0;
    if (v8)
      goto LABEL_7;
  }
  else
  {
    v6 = v17;
    v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v17)
      v7 = 0;
    if (v7)
    {
LABEL_7:
      ctu::cf::insert<__CFString const*,__CFError *>(v5, (CFTypeRef)*MEMORY[0x1E0DDF280], v6);
      goto LABEL_23;
    }
  }
  v16[1] = v5;
  if (v5)
    CFRetain(v5);
  v22 = 0;
  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)1174405120;
  __p[2] = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm12WLANScanInfoENS_3abm16GetWLANScanState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  __p[3] = &__block_descriptor_tmp_300;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v21 = *MEMORY[0x1E0DDF3E8];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v11 = TlvValue;
  if (TlvValue)
  {
    v12 = v10;
    v24 = TlvValue;
    v23[0] = tlv::parseV<coex::tlv::abm::WLANScanInfo>(&v24, v10);
    v23[1] = v13;
    if (v24)
      ((void (*)(void **, _QWORD *))__p[2])(__p, v23);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 16, v11, v12);
  }
  if (cf)
    CFRelease(cf);
  if (!v5)
    goto LABEL_26;
  CFRelease(v5);
LABEL_23:
  if (v5)
  {
    v14 = CFGetTypeID(v5);
    if (v14 == CFDictionaryGetTypeID())
    {
      v16[0] = v5;
      CFRetain(v5);
      v15 = v5;
      goto LABEL_27;
    }
  }
LABEL_26:
  v15 = 0;
  v16[0] = 0;
LABEL_27:
  coex::QMICommandDriver::sendStateUpdate_sync(v3, v16, 0);
  if (v15)
    CFRelease(v15);
  if (v17)
    CFRelease(v17);
  if (v5)
    CFRelease(v5);
}

void sub_1B3D6D77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a13);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver22pollWLANConnState_syncEj_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v5;
  CFTypeRef v6;
  uint64_t (*v7)(uint64_t);
  uint64_t (*v8)(uint64_t);
  unsigned __int8 *TlvValue;
  int v10;
  CFTypeRef v11;
  CFTypeID v12;
  const void *v13;
  const void *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  void *__p;
  __int128 v19;
  void *v20;
  CFTypeRef cf;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25[2];
  __int128 v26;

  v3 = *(_QWORD *)(a1 + 32);
  v17 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  if (Mutable)
    v17 = Mutable;
  v16 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x20uLL);
  v19 = xmmword_1B3DCED40;
  strcpy((char *)__p, "Get WLAN Connection State");
  coex::QMICommandDriver::checkError(v3, (uint64_t)a2, (uint64_t)&__p, &v16);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p);
    v6 = v16;
    v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v16)
      v8 = 0;
    if (v8)
      goto LABEL_7;
  }
  else
  {
    v6 = v16;
    v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v16)
      v7 = 0;
    if (v7)
    {
LABEL_7:
      ctu::cf::insert<__CFString const*,__CFError *>(v5, (CFTypeRef)*MEMORY[0x1E0DDF280], v6);
      goto LABEL_22;
    }
  }
  v15 = v5;
  if (v5)
    CFRetain(v5);
  v23 = 0;
  __p = (void *)MEMORY[0x1E0C809B0];
  *(_QWORD *)&v19 = 1174405120;
  *((_QWORD *)&v19 + 1) = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm18WLANConnectionInfoENS_3abm16GetWLANConnState8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v20 = &__block_descriptor_tmp_302;
  cf = v5;
  if (v5)
    CFRetain(v5);
  v22 = *MEMORY[0x1E0DDF560];
  TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a2);
  if (TlvValue)
  {
    v24 = 0xAAAAAAAA00000000;
    *(_OWORD *)v25 = 0u;
    v26 = 0u;
    coex::tlv::abm::parseField(TlvValue, &TlvValue[v10], (uint64_t)&v24);
    (*((void (**)(void **, unint64_t *))&v19 + 1))(&__p, &v24);
    if (v25[0])
    {
      v25[1] = v25[0];
      operator delete(v25[0]);
    }
  }
  if (cf)
    CFRelease(cf);
  if (v15)
    CFRelease(v15);
LABEL_22:
  v11 = v17;
  if (v17 && (v12 = CFGetTypeID(v17), v12 == CFDictionaryGetTypeID()))
  {
    v14 = v11;
    CFRetain(v11);
    v13 = v11;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, &v14, 0);
  if (v13)
    CFRelease(v13);
  if (v16)
    CFRelease(v16);
  if (v11)
    CFRelease(v11);
}

void sub_1B3D6DA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, const void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,const void *a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)&a20);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a22);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a10);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver20pollLinkQuality_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v6;
  CFTypeRef v7;
  uint64_t (*v8)(uint64_t);
  uint64_t (*v9)(uint64_t);
  CFMutableDictionaryRef v10;
  CFMutableDictionaryRef v11;
  tlv *TlvValue;
  int v13;
  tlv *v14;
  int v15;
  CFTypeID v16;
  CFTypeRef v17;
  CFMutableDictionaryRef v18;
  CFMutableDictionaryRef v19;
  CFTypeRef v20;
  CFTypeRef v21;
  __int128 __p;
  void (*v23)(uint64_t, int *);
  void *v24;
  CFTypeRef cf;
  uint64_t v26;
  uint64_t v27;
  float v28;
  tlv *v29;

  v3 = *(_QWORD *)(a1 + 32);
  v21 = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
    v21 = Mutable;
  v20 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  HIBYTE(v23) = 8;
  strcpy((char *)&__p, "Get SINR");
  coex::QMICommandDriver::checkError(v3, (uint64_t)a2, (uint64_t)&__p, &v20);
  if (SHIBYTE(v23) < 0)
  {
    operator delete((void *)__p);
    v7 = v20;
    v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v20)
      v9 = 0;
    if (v9)
      goto LABEL_7;
  }
  else
  {
    v7 = v20;
    v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v20)
      v8 = 0;
    if (v8)
    {
LABEL_7:
      ctu::cf::insert<__CFString const*,__CFError *>(v6, (CFTypeRef)*MEMORY[0x1E0DDF280], v7);
      goto LABEL_26;
    }
  }
  v19 = 0;
  v10 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = v10;
  if (v10)
  {
    v18 = v10;
    v19 = v10;
    CFRetain(v10);
  }
  else
  {
    v18 = 0;
  }
  v27 = 0;
  *(_QWORD *)&__p = MEMORY[0x1E0C809B0];
  *((_QWORD *)&__p + 1) = 1174405120;
  v23 = ___ZN4coexL21convertTLVFromMessageINS_3tlv3abm21LTESINRFilteredOutputENS_3abm8SINRRead8ResponseEEEvRKT0_N3ctu2cf11CFSharedRefI14__CFDictionaryEEPK10__CFString_block_invoke;
  v24 = &__block_descriptor_tmp_305;
  cf = v11;
  if (v11)
    CFRetain(v11);
  v26 = *MEMORY[0x1E0DDF6F8];
  TlvValue = (tlv *)qmi::MessageBase::findTlvValue(a2);
  v14 = TlvValue;
  if (TlvValue)
  {
    v15 = v13;
    v29 = TlvValue;
    v28 = tlv::parseV<coex::tlv::abm::LTESINRFilteredOutput>(&v29, v13);
    if (v29)
      v23((uint64_t)&__p, (int *)&v28);
    else
      ((void (*)(_QWORD, uint64_t, tlv *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 16, v14, v15);
  }
  if (cf)
    CFRelease(cf);
  if (v11)
    CFRelease(v11);
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v6, (CFTypeRef)*MEMORY[0x1E0DDF390], v11);
  if (v11)
    CFRelease(v11);
LABEL_26:
  if (v6 && (v16 = CFGetTypeID(v6), v16 == CFDictionaryGetTypeID()))
  {
    v17 = v6;
    CFRetain(v6);
  }
  else
  {
    v17 = 0;
  }
  coex::QMICommandDriver::sendStateUpdate_sync(v3, &v17, 0);
  if (v17)
    CFRelease(v17);
  if (v20)
    CFRelease(v20);
  if (v21)
    CFRelease(v21);
}

void sub_1B3D6DE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, const void *a13, const void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a12);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF3A0]);
  *a2 = result;
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_44(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF398]);
  *a2 = result;
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_47(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_2(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_3(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

uint64_t ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_4(uint64_t result, _BYTE *a2)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

void ___ZN4coex16QMICommandDriver19setIndications_syncENS_13CommandDriver8CallbackE_block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  uint64_t (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  NSObject *v8;
  CFTypeRef v9;
  const void *v10;
  CFTypeRef v11;
  void *__p;
  __int128 v13;
  CFTypeRef cf;

  v4 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  __p = operator new(0x20uLL);
  v13 = xmmword_1B3DCED40;
  strcpy((char *)__p, "set reporting indications");
  coex::QMICommandDriver::checkError(v4, a2, (uint64_t)&__p, &cf);
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    v5 = cf;
    v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v6 = 0;
    if (!v6)
      goto LABEL_9;
LABEL_10:
    v11 = v5;
    if (v5)
      goto LABEL_11;
LABEL_14:
    v10 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
    v9 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p);
  v5 = cf;
  v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v7 = 0;
  if (v7)
    goto LABEL_10;
LABEL_9:
  v8 = *(NSObject **)(v4 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v8, OS_LOG_TYPE_DEBUG, "#D Setting reporting indications completed", (uint8_t *)&__p, 2u);
  v5 = cf;
  v11 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v5);
  v10 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v11, &v10);
  CFRelease(v5);
  v9 = cf;
  if (cf)
LABEL_15:
    CFRelease(v9);
}

void sub_1B3D6E100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke(uint64_t a1, uint64_t a2)
{
  ctu::cf::map_adapter *v3;
  const __CFDictionary *v4;
  uint64_t (*v5)(uint64_t);
  unsigned int Int;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *(_DWORD *)a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF2D0]);
  v4 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef(v3, (const __CFString *)*MEMORY[0x1E0DDF328]);
  v5 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v4)
    v5 = 0;
  if (v5)
  {
    v9[0] = 0xAAAAAAAAAAAAAAAALL;
    v9[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v9, v4);
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v9, (const __CFString *)*MEMORY[0x1E0DDF388]);
    v7 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v9, (const __CFString *)*MEMORY[0x1E0DDF268]);
    MEMORY[0x1B5E2EE44](v9);
    v5 = (uint64_t (*)(uint64_t))(Int | (unint64_t)(v7 << 32));
  }
  *(_QWORD *)(a2 + 4) = v5;
  if (v4)
    CFRelease(v4);
  result = ctu::cf::map_adapter::getInt(v3, (const __CFString *)*MEMORY[0x1E0DDF358]);
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void sub_1B3D6E230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_62(uint64_t a1, _DWORD *a2)
{
  ctu::cf::map_adapter *v3;
  const __CFArray *v4;
  unint64_t Count;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  CFIndex v9;
  const __CFString *v10;
  const __CFString *v11;
  const void *ValueAtIndex;
  const void *v13;
  CFTypeID v14;
  uint64_t (*v15)(uint64_t);
  unsigned int Int;
  uint64_t v17;
  char *v18;
  _DWORD *v19;
  void *v20;
  _QWORD *v21;
  uint64_t result;
  char *v23;
  ctu::cf::map_adapter *v24;
  _DWORD *v25;
  _QWORD v26[2];

  v3 = (ctu::cf::map_adapter *)(a1 + 32);
  *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)(a1 + 32), (const __CFString *)*MEMORY[0x1E0DDF4A0]);
  v4 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef(v3, (const __CFString *)*MEMORY[0x1E0DDF328]);
  Count = CFArrayGetCount(v4);
  v6 = Count;
  v24 = v3;
  v25 = a2;
  if ((Count & 0x8000000000000000) != 0)
  {
    v6 = 0;
LABEL_19:
    v18 = 0;
    v8 = 0;
    v19 = a2;
    v21 = a2 + 2;
    v20 = (void *)*((_QWORD *)v25 + 1);
    if (!v20)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (!Count)
    goto LABEL_19;
  if (Count >> 61)
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  v7 = 8 * Count;
  v8 = (char *)operator new(8 * Count);
  bzero(v8, 8 * v6);
  v9 = 0;
  v23 = &v8[v7];
  v10 = (const __CFString *)*MEMORY[0x1E0DDF388];
  v11 = (const __CFString *)*MEMORY[0x1E0DDF268];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v4, v9);
    v13 = ValueAtIndex;
    if (ValueAtIndex && (v14 = CFGetTypeID(ValueAtIndex), v14 == CFDictionaryGetTypeID()))
    {
      CFRetain(v13);
      CFRetain(v13);
      v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!v13)
        v15 = 0;
      if (v15)
      {
        v26[0] = 0xAAAAAAAAAAAAAAAALL;
        v26[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v26, (const __CFDictionary *)v13);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v26, v10);
        v17 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v26, v11);
        MEMORY[0x1B5E2EE44](v26);
        *(_QWORD *)&v8[8 * v9] = Int | (unint64_t)(v17 << 32);
        if (!v13)
          goto LABEL_5;
LABEL_15:
        CFRelease(v13);
        CFRelease(v13);
        goto LABEL_5;
      }
    }
    else
    {
      v13 = 0;
      v15 = 0;
    }
    *(_QWORD *)&v8[8 * v9] = v15;
    if (v13)
      goto LABEL_15;
LABEL_5:
    ++v9;
  }
  while (v6 != v9);
  v18 = v23;
  v6 = (unint64_t)&v8[8 * v6];
  v19 = a2;
  v21 = a2 + 2;
  v20 = (void *)*((_QWORD *)v25 + 1);
  if (v20)
  {
LABEL_20:
    *((_QWORD *)v19 + 2) = v20;
    operator delete(v20);
    *v21 = 0;
    v21[1] = 0;
    v21[2] = 0;
  }
LABEL_21:
  *((_QWORD *)v19 + 1) = v8;
  *((_QWORD *)v19 + 2) = v18;
  *((_QWORD *)v19 + 3) = v6;
  if (v4)
    CFRelease(v4);
  v19[8] = ctu::cf::map_adapter::getInt(v24, (const __CFString *)*MEMORY[0x1E0DDF470]);
  result = ctu::cf::map_adapter::getInt(v24, (const __CFString *)*MEMORY[0x1E0DDF420]);
  v19[9] = result;
  return result;
}

void sub_1B3D6E4FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a13);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a13);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN4coex16QMICommandDriver17setWLANState_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CFTypeRef v4;
  uint64_t (*v5)(uint64_t);
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  void *__p[2];
  char v12;
  CFTypeRef cf;

  v3 = *(_QWORD *)(a1 + 32);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v12 = 14;
  strcpy((char *)__p, "set WLAN state");
  coex::QMICommandDriver::checkError(v3, a2, (uint64_t)__p, &cf);
  if ((v12 & 0x80000000) == 0)
  {
    v4 = cf;
    v5 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!cf)
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_10:
    v10 = v4;
    if (v4)
      goto LABEL_11;
LABEL_14:
    v9 = 0;
    coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
    v8 = cf;
    if (!cf)
      return;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  v4 = cf;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!cf)
    v6 = 0;
  if (v6)
    goto LABEL_10;
LABEL_9:
  v7 = *(NSObject **)(v3 + 40);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    goto LABEL_10;
  LOWORD(__p[0]) = 0;
  _os_log_debug_impl(&dword_1B3CB3000, v7, OS_LOG_TYPE_DEBUG, "#D Setting WLAN completed", (uint8_t *)__p, 2u);
  v4 = cf;
  v10 = cf;
  if (!cf)
    goto LABEL_14;
LABEL_11:
  CFRetain(v4);
  v9 = 0;
  coex::CommandDriver::Callback::operator()(a1 + 40, &v10, &v9);
  CFRelease(v4);
  v8 = cf;
  if (cf)
LABEL_15:
    CFRelease(v8);
}

void sub_1B3D6E718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__67()
{
  return qmi::MutableMessageBase::MutableMessageBase();
}

void __Block_byref_object_dispose__68(uint64_t a1)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(a1 + 40));
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

CFTypeRef __copy_helper_block_e8_32c30_ZTSN3ctu2cf11CFSharedRefIKvEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_32c30_ZTSN3ctu2cf11CFSharedRefIKvEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    CFRelease(v1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_73(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _BYTE *v7;
  _WORD *v8;
  _WORD *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  const void **v22;
  _OWORD *v23;
  const void **v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[2];
  CFTypeID (*v29)(CFTypeID, _BYTE *);
  void *v30;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 1174405120;
  v29 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_74;
  v30 = &__block_descriptor_tmp_76_2;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 17)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[4] = 17;
    *(_QWORD *)v8 = off_1E66DEDE8;
    v10 = v2[8];
    if ((unint64_t)v5 < v10)
    {
      *v5 = v8;
      v11 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v11;
      v29((CFTypeID)v28, (_BYTE *)v9 + 9);
      goto LABEL_25;
    }
    v12 = (char *)v5 - (char *)v4;
    v13 = v5 - v4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v15 = v10 - (_QWORD)v4;
    if (v15 >> 2 > v14)
      v14 = v15 >> 2;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = operator new(8 * v16);
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      *v18 = v9;
      v11 = (uint64_t)(v18 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v18;
        v2[7] = v11;
        v2[8] = v19;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v17 = 0;
      v18 = (_QWORD *)(8 * v13);
      v19 = 0;
      *(_QWORD *)(8 * v13) = v9;
      v11 = 8 * v13 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v12 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v17) < 0x20)
      goto LABEL_42;
    v20 = ((unint64_t)(v12 - 8) >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v5[v21 / 0xFFFFFFFFFFFFFFF8];
    v18 = (_QWORD *)((char *)v18 - v21);
    v23 = &v17[8 * v13 - 16];
    v24 = v5 - 2;
    v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v24;
      *(v23 - 1) = *((_OWORD *)v24 - 1);
      *v23 = v26;
      v23 -= 2;
      v24 -= 4;
      v25 -= 4;
    }
    while (v25);
    v5 = v22;
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v27 = (uint64_t)*--v5;
        *--v18 = v27;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v18;
    v2[7] = v11;
    v2[8] = v19;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_74((CFTypeID)v28, v7 + 9);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D6EA54(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_74(CFTypeID result, _BYTE *a2)
{
  signed __int8 *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  char v6;

  v3 = *(signed __int8 **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_78(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _DWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, _DWORD *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_79;
  v31 = &__block_descriptor_tmp_81_0;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 18)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 18;
    *(_QWORD *)v8 = off_1E66DEE38;
    *((_DWORD *)v8 + 3) = 0;
    v10 = v8 + 12;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_79((CFTypeID)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D6ED84(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_79(CFTypeID result, _DWORD *a2)
{
  unsigned int *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  int v6;

  v3 = *(unsigned int **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_83(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _DWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, _DWORD *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_84;
  v31 = &__block_descriptor_tmp_86_0;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 19)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 19;
    *(_QWORD *)v8 = off_1E66DEE88;
    *((_DWORD *)v8 + 3) = 0;
    v10 = v8 + 12;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_84((CFTypeID)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D6F0B4(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_84(CFTypeID result, _DWORD *a2)
{
  unsigned int *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  int v6;

  v3 = *(unsigned int **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_88(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _DWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _DWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  void (*v30)(uint64_t, _DWORD *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_89;
  v31 = &__block_descriptor_tmp_91_2;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 20)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x18uLL);
    v9 = v8;
    v8[8] = 20;
    *(_QWORD *)v8 = off_1E66DEED8;
    *((_DWORD *)v8 + 3) = 0;
    v10 = v8 + 12;
    *((_DWORD *)v8 + 4) = 0;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((uint64_t)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_89((uint64_t)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D6F3E8(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_89(uint64_t a1, _DWORD *a2)
{
  const void *v3;
  CFTypeID v4;
  const __CFDictionary *v5;
  uint64_t (*v6)(uint64_t);
  _QWORD v7[3];
  const __CFDictionary *v8;
  uint64_t v9;

  v3 = *(const void **)(a1 + 32);
  v7[2] = v3;
  if (v3)
  {
    CFRetain(v3);
    v7[0] = v3;
    CFRetain(v3);
    v9 = 0;
    v4 = CFGetTypeID(v3);
    if (v4 == CFDictionaryGetTypeID())
    {
      CFRetain(v3);
      CFRetain(v3);
      CFRelease(v3);
      v5 = (const __CFDictionary *)v3;
    }
    else
    {
      v5 = 0;
    }
    v8 = v5;
    CFRelease(v3);
    CFRelease(v3);
  }
  else
  {
    v5 = 0;
    v8 = 0;
  }
  v6 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v5)
    v6 = 0;
  if (v6)
  {
    v7[0] = 0xAAAAAAAAAAAAAAAALL;
    v7[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v7, v5);
    *a2 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v7, (const __CFString *)*MEMORY[0x1E0DDF2C0]);
    a2[1] = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v7, (const __CFString *)*MEMORY[0x1E0DDF220]);
    MEMORY[0x1B5E2EE44](v7);
  }
  if (v5)
    CFRelease(v5);
}

void sub_1B3D6F534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_93(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  void (*v30)(uint64_t, _DWORD *, const __CFNumber *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_94;
  v31 = &__block_descriptor_tmp_96_0;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 21)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 21;
    *(_QWORD *)v8 = off_1E66DEF28;
    *((_DWORD *)v8 + 3) = 0;
    v10 = v8 + 12;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      ((void (*)(_QWORD *, char *))v30)(v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ((void (*)(_QWORD *, char *))___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_94)(v29, v7 + 12);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D6F830(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_94(uint64_t a1, _DWORD *a2, const __CFNumber *a3)
{
  const void *v4;
  CFTypeID v5;
  void *v6;
  uint64_t (*v7)(uint64_t);
  const void *v8;

  v4 = *(const void **)(a1 + 32);
  if (v4)
  {
    CFRetain(v4);
    v8 = v4;
    CFRetain(v4);
    v5 = CFGetTypeID(v4);
    if (v5 == CFNumberGetTypeID())
    {
      CFRetain(v4);
      CFRetain(v4);
      CFRelease(v4);
      v6 = (void *)v4;
    }
    else
    {
      v6 = 0;
    }
    CFRelease(v4);
    CFRelease(v4);
  }
  else
  {
    v6 = 0;
  }
  v7 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
  if (!v6)
    v7 = 0;
  if (!v7)
  {
    if (!v6)
      return;
    goto LABEL_15;
  }
  if (v6)
    CFRetain(v6);
  LODWORD(v8) = 0;
  ctu::cf::assign((ctu::cf *)&v8, (unsigned int *)v6, a3);
  *a2 = (_DWORD)v8;
  if (v6)
  {
    CFRelease(v6);
LABEL_15:
    CFRelease(v6);
  }
}

void sub_1B3D6F964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  v5 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B3D6F98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void *v4;
  va_list va;
  uint64_t v6;
  const void *v7;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, const void *);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va2);
  ctu::cf::CFSharedRef<void const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_98(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  float *v7;
  _BYTE *v8;
  _BYTE *v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, float *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_99;
  v31 = &__block_descriptor_tmp_101;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 22)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 22;
    *(_QWORD *)v8 = off_1E66DEF78;
    *((_DWORD *)v8 + 3) = 0;
    v10 = (float *)(v8 + 12);
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_99((CFTypeID)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D6FC7C(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_99(CFTypeID result, float *a2)
{
  void *v3;
  float v4;
  CFTypeID v5;
  const __CFNumber *v6;
  double v7;

  v3 = *(void **)(result + 32);
  v7 = 0.0;
  v4 = 0.0;
  if (v3)
  {
    v5 = CFGetTypeID(v3);
    result = CFNumberGetTypeID();
    if (v5 == result)
    {
      result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_103(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  float *v7;
  _BYTE *v8;
  _BYTE *v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, float *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_104;
  v31 = &__block_descriptor_tmp_106_0;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 23)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 23;
    *(_QWORD *)v8 = off_1E66DEFC8;
    *((_DWORD *)v8 + 3) = 0;
    v10 = (float *)(v8 + 12);
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_104((CFTypeID)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D6FFA0(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_104(CFTypeID result, float *a2)
{
  void *v3;
  float v4;
  CFTypeID v5;
  const __CFNumber *v6;
  double v7;

  v3 = *(void **)(result + 32);
  v7 = 0.0;
  v4 = 0.0;
  if (v3)
  {
    v5 = CFGetTypeID(v3);
    result = CFNumberGetTypeID();
    if (v5 == result)
    {
      result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_108(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  float *v7;
  _BYTE *v8;
  _BYTE *v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, float *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_109;
  v31 = &__block_descriptor_tmp_111_2;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 24)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 24;
    *(_QWORD *)v8 = off_1E66DF018;
    *((_DWORD *)v8 + 3) = 0;
    v10 = (float *)(v8 + 12);
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_109((CFTypeID)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D702C4(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_109(CFTypeID result, float *a2)
{
  void *v3;
  float v4;
  CFTypeID v5;
  const __CFNumber *v6;
  double v7;

  v3 = *(void **)(result + 32);
  v7 = 0.0;
  v4 = 0.0;
  if (v3)
  {
    v5 = CFGetTypeID(v3);
    result = CFNumberGetTypeID();
    if (v5 == result)
    {
      result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_118(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  float *v7;
  _BYTE *v8;
  _BYTE *v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, float *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_119;
  v31 = &__block_descriptor_tmp_121_1;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 26)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 26;
    *(_QWORD *)v8 = off_1E66DF0B8;
    *((_DWORD *)v8 + 3) = 0;
    v10 = (float *)(v8 + 12);
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_119((CFTypeID)v29, v7 + 3);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D705E8(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_119(CFTypeID result, float *a2)
{
  void *v3;
  float v4;
  CFTypeID v5;
  const __CFNumber *v6;
  double v7;

  v3 = *(void **)(result + 32);
  v7 = 0.0;
  v4 = 0.0;
  if (v3)
  {
    v5 = CFGetTypeID(v3);
    result = CFNumberGetTypeID();
    if (v5 == result)
    {
      result = ctu::cf::assign((ctu::cf *)&v7, (double *)v3, v6);
      v4 = v7;
    }
  }
  *a2 = v4;
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_123(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _WORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _WORD *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, _WORD *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_124;
  v31 = &__block_descriptor_tmp_126_0;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 27)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 27;
    *(_QWORD *)v8 = off_1E66DF108;
    *((_WORD *)v8 + 5) = 0;
    v10 = v8 + 10;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_124((CFTypeID)v29, v7 + 5);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D7090C(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_124(CFTypeID result, _WORD *a2)
{
  unsigned __int16 *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  __int16 v6;

  v3 = *(unsigned __int16 **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_128(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _WORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _WORD *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, _WORD *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_129;
  v31 = &__block_descriptor_tmp_131_2;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 28)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 28;
    *(_QWORD *)v8 = off_1E66DF158;
    *((_WORD *)v8 + 5) = 0;
    v10 = v8 + 10;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_129((CFTypeID)v29, v7 + 5);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

void sub_1B3D70C3C(_Unwind_Exception *a1)
{
  const void **v1;

  ctu::cf::CFSharedRef<void const>::~CFSharedRef(v1);
  _Unwind_Resume(a1);
}

CFTypeID ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_129(CFTypeID result, _WORD *a2)
{
  unsigned __int16 *v3;
  CFTypeID v4;
  const __CFNumber *v5;
  __int16 v6;

  v3 = *(unsigned __int16 **)(result + 32);
  v6 = 0;
  if (v3 && (v4 = CFGetTypeID(v3), result = CFNumberGetTypeID(), v4 == result))
  {
    result = ctu::cf::assign((ctu::cf *)&v6, v3, v5);
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_133(uint64_t a1, const void **a2)
{
  _QWORD *v2;
  const void *v3;
  const void **v4;
  const void **v5;
  const void **v6;
  _WORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  _WORD *v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  const void **v23;
  _OWORD *v24;
  const void **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[2];
  CFTypeID (*v30)(CFTypeID, _WORD *);
  void *v31;
  CFTypeRef cf;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 1174405120;
  v30 = ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_134;
  v31 = &__block_descriptor_tmp_136_1;
  v3 = *a2;
  cf = v3;
  if (v3)
    CFRetain(v3);
  v4 = (const void **)v2[6];
  v5 = (const void **)v2[7];
  v6 = v4;
  if (v4 != v5)
  {
    v6 = (const void **)v2[6];
    while (*((_BYTE *)*v6 + 8) != 29)
    {
      if (++v6 == v5)
        goto LABEL_11;
    }
  }
  if (v6 == v5)
  {
LABEL_11:
    v8 = operator new(0x10uLL);
    v9 = v8;
    v8[8] = 29;
    *(_QWORD *)v8 = off_1E66DF1A8;
    *((_WORD *)v8 + 5) = 0;
    v10 = v8 + 10;
    v11 = v2[8];
    if ((unint64_t)v5 < v11)
    {
      *v5 = v8;
      v12 = (uint64_t)(v5 + 1);
LABEL_24:
      v2[7] = v12;
      v30((CFTypeID)v29, v10);
      goto LABEL_25;
    }
    v13 = (char *)v5 - (char *)v4;
    v14 = v5 - v4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    v16 = v11 - (_QWORD)v4;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = operator new(8 * v17);
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *v19 = v9;
      v12 = (uint64_t)(v19 + 1);
      if (v4 == v5)
      {
LABEL_22:
        v2[6] = v19;
        v2[7] = v12;
        v2[8] = v20;
        if (!v4)
          goto LABEL_24;
LABEL_23:
        operator delete(v4);
        goto LABEL_24;
      }
    }
    else
    {
      v18 = 0;
      v19 = (_QWORD *)(8 * v14);
      v20 = 0;
      *(_QWORD *)(8 * v14) = v9;
      v12 = 8 * v14 + 8;
      if (v4 == v5)
        goto LABEL_22;
    }
    if ((unint64_t)(v13 - 8) < 0x58)
      goto LABEL_42;
    if ((unint64_t)((char *)v4 - v18) < 0x20)
      goto LABEL_42;
    v21 = ((unint64_t)(v13 - 8) >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = &v5[v22 / 0xFFFFFFFFFFFFFFF8];
    v19 = (_QWORD *)((char *)v19 - v22);
    v24 = &v18[8 * v14 - 16];
    v25 = v5 - 2;
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *(_OWORD *)v25;
      *(v24 - 1) = *((_OWORD *)v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 4;
      v26 -= 4;
    }
    while (v26);
    v5 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        v28 = (uint64_t)*--v5;
        *--v19 = v28;
      }
      while (v5 != v4);
    }
    v4 = (const void **)v2[6];
    v2[6] = v19;
    v2[7] = v12;
    v2[8] = v20;
    if (!v4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v7)
    __cxa_bad_cast();
  ___ZN4coex16QMICommandDriver14setPolicy_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS_13CommandDriver8CallbackE_block_invoke_2_134((CFTypeID)v29, v7 + 5);
LABEL_25:
  if (cf)
    CFRelease(cf);
}

